//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BSDFMaterialValues {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
};

struct BidirectionalScatteringDistributionFunction {
    CDUnknownFunctionPointerType *_field1;
    struct BSDFMaterialValues _field2;
};

struct Detail;

struct IESData {
    int _field1;
    int _field2;
    struct vector<float, std::__1::allocator<float>> _field3;
    struct vector<float, std::__1::allocator<float>> _field4;
    struct vector<float, std::__1::allocator<float>> _field5;
    float _field6;
    float _field7;
    float _field8;
};

struct MDLTextureData {
    char *topLeftBytesForMip[16];
    char *bottomLeftBytesForMip[16];
    int channelCount;
    unsigned long long dimensions__rowStride;
    _Bool isCube;
};

struct MortonCode {
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> mortonkeyX;
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> mortonkeyY;
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> mortonkeyZ;
};

struct Octree;

struct PhysicallyPlausibleDistribution {
    CDUnknownFunctionPointerType *_field1;
    struct BSDFMaterialValues _field2;
};

struct RTAreaLight {
    CDUnknownFunctionPointerType *_field1;
    struct RTColor _field2;
    id _field3;
    int _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
};

struct RTColor {
    int _field1;
};

struct RTIESLight {
    CDUnknownFunctionPointerType *_field1;
    struct RTColor _field2;
    id _field3;
    int _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    struct IESData _field12;
    float _field13;
};

struct RTLight {
    CDUnknownFunctionPointerType *_field1;
    struct RTColor _field2;
    id _field3;
    int _field4;
};

struct RTPhysicallyPlausibleLight {
    CDUnknownFunctionPointerType *_field1;
    struct RTColor _field2;
    id _field3;
    int _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
};

struct RTRenderable;

struct SkyDescriptor {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    struct Detail *_field18;
    unsigned int _field19;
    unsigned int _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    void *_field25;
};

struct __hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>;

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } _field1;
};

struct unique_ptr<ModelIO::BidirectionalScatteringDistributionFunction, std::__1::default_delete<ModelIO::BidirectionalScatteringDistributionFunction>> {
    struct __compressed_pair<ModelIO::BidirectionalScatteringDistributionFunction *, std::__1::default_delete<ModelIO::BidirectionalScatteringDistributionFunction>> {
        struct BidirectionalScatteringDistributionFunction *__first_;
    } __ptr_;
};

struct unique_ptr<ModelIO::Octree, std::__1::default_delete<ModelIO::Octree>> {
    struct __compressed_pair<ModelIO::Octree *, std::__1::default_delete<ModelIO::Octree>> {
        struct Octree *__first_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<unsigned long long, int, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, int>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, int>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, int>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, int>, std::__1::equal_to<unsigned long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<MDLLight *, std::__1::allocator<MDLLight *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MDLLight *__strong *, std::__1::allocator<MDLLight *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<ModelIO::RTRenderable *, std::__1::allocator<ModelIO::RTRenderable *>> {
    struct RTRenderable **__begin_;
    struct RTRenderable **__end_;
    struct __compressed_pair<ModelIO::RTRenderable **, std::__1::allocator<ModelIO::RTRenderable *>> {
        struct RTRenderable **__first_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

#pragma mark -

//
// File: /Applications/Xcode-7GM.app/Contents/SharedFrameworks/ModelIO.framework/Versions/A/ModelIO
// UUID: 375CE8B1-ADDC-30D6-B28A-C620498EBC5B
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1.5.24.0.0
//       Minimum Mac OS X version: 10.10.0
//                    SDK version: 10.11.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol MDLComponent <NSObject>
@end

@protocol MDLMeshBuffer <NSObject, NSCopying>
@property(readonly, nonatomic) unsigned long long type;
@property(readonly, retain, nonatomic) id <MDLMeshBufferZone> zone;
@property(readonly, retain, nonatomic) id <MDLMeshBufferAllocator> allocator;
@property(readonly, nonatomic) unsigned long long length;
- (MDLMeshBufferMap *)map;
- (void)fillData:(NSData *)arg1 offset:(unsigned long long)arg2;
@end

@protocol MDLMeshBufferAllocator <NSObject>
- (id <MDLMeshBuffer>)newBufferFromZone:(id <MDLMeshBufferZone>)arg1 data:(NSData *)arg2 type:(unsigned long long)arg3;
- (id <MDLMeshBuffer>)newBufferFromZone:(id <MDLMeshBufferZone>)arg1 length:(unsigned long long)arg2 type:(unsigned long long)arg3;
- (id <MDLMeshBuffer>)newBufferWithData:(NSData *)arg1 type:(unsigned long long)arg2;
- (id <MDLMeshBuffer>)newBuffer:(unsigned long long)arg1 type:(unsigned long long)arg2;
- (id <MDLMeshBufferZone>)newZoneForBuffersWithSize:(NSArray *)arg1 andType:(NSArray *)arg2;
- (id <MDLMeshBufferZone>)newZone:(unsigned long long)arg1;
@end

@protocol MDLMeshBufferZone <NSObject>
@property(readonly, nonatomic) id <MDLMeshBufferAllocator> allocator;
@property(readonly, nonatomic) unsigned long long capacity;
@end

@protocol MDLNamed
@property(copy, nonatomic) NSString *name;
@end

@protocol MDLObjectContainerComponent <MDLComponent, NSFastEnumeration>
@property(readonly, retain, nonatomic) NSArray *objects;
- (void)removeObject:(MDLObject *)arg1;
- (void)addObject:(MDLObject *)arg1;
@end

@protocol MDLTransformComponent <MDLComponent>
@property(readonly, nonatomic) double maximumTime;
@property(readonly, nonatomic) double minimumTime;
// Error parsing type for property matrix:
// Property attributes: T{?=[4]},N


@optional
+     // Error parsing type: {?=[4]}32@0:8@"MDLObject"16d24, name: globalTransformWithObject:atTime:
-     // Error parsing type: {?=[4]}24@0:8d16, name: localTransformAtTime:
-     // Error parsing type: v80@0:8{?=[4]}16, name: setLocalTransform:
-     // Error parsing type: v88@0:8{?=[4]}16d80, name: setLocalTransform:forTime:
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@interface MDLObject : NSObject <MDLNamed>
{
    MDLObject *_parent;
    NSMapTable *_components;
    NSString *name;
    id <MDLObjectContainerComponent> _children;
}

@property(retain, nonatomic) id <MDLObjectContainerComponent> children; // @synthesize children=_children;
@property(copy, nonatomic) NSString *name; // @synthesize name;
- (void).cxx_destruct;
- (struct)boundingBoxAtTime:(double)arg1;
- (void)addChild:(id)arg1;
@property(retain, nonatomic) id <MDLTransformComponent> transform;
@property(nonatomic) __weak MDLObject *parent;
- (id)componentConformingToProtocol:(id)arg1;
- (void)setComponent:(id)arg1 forProtocol:(id)arg2;
- (id)init;

@end

@interface MDLLight : MDLObject
{
    struct RTLight *_light;
    unsigned long long _lightType;
}

@property(nonatomic) unsigned long long lightType; // @synthesize lightType=_lightType;
- (void)setTransform:(id)arg1;
- (struct CGColor *)irradianceAtPoint:(struct CGColorSpace *)arg1 colorSpace: /* Error: Ran out of types for this method. */;
- (struct CGColor *)irradianceAtPoint: /* Error: Ran out of types for this method. */;
@property(readonly, nonatomic) struct RTLight *rtLight;
- (void)dealloc;
- (id)init;

@end

@interface MDLPhysicallyPlausibleLight : MDLLight
{
    struct RTPhysicallyPlausibleLight *_ppLight;
    float _lumens;
    float _innerConeAngle;
    float _outerConeAngle;
    float _attenuationStartDistance;
    float _attenuationEndDistance;
    float _attenuationFalloffExponent;
}

@property(nonatomic) float attenuationFalloffExponent; // @synthesize attenuationFalloffExponent=_attenuationFalloffExponent;
@property(nonatomic) float attenuationEndDistance; // @synthesize attenuationEndDistance=_attenuationEndDistance;
@property(nonatomic) float attenuationStartDistance; // @synthesize attenuationStartDistance=_attenuationStartDistance;
@property(nonatomic) float outerConeAngle; // @synthesize outerConeAngle=_outerConeAngle;
@property(nonatomic) float innerConeAngle; // @synthesize innerConeAngle=_innerConeAngle;
@property(nonatomic) float lumens; // @synthesize lumens=_lumens;
- (void)setLightType:(unsigned long long)arg1;
- (void)setColorByTemperature:(float)arg1;
@property(nonatomic) struct CGColor *color;
- (void)dealloc;
- (id)init;

@end

@interface MDLAreaLight : MDLPhysicallyPlausibleLight
{
    struct RTAreaLight *_areaLight;
    float _areaRadius;
    float _aspect;
    // Error parsing type: , name: _superEllipticPower
}

@property(nonatomic) float aspect; // @synthesize aspect=_aspect;
// Error parsing type for property superEllipticPower:
// Property attributes: T,N,V_superEllipticPower

@property(nonatomic) float areaRadius; // @synthesize areaRadius=_areaRadius;
- (id)init;

@end

@interface MDLAsset : NSObject <NSCopying, NSFastEnumeration>
{
    NSURL *_URL;
    NSMutableArray *_objects;
    double _frameInterval;
    double _startTime;
    double _endTime;
    id <MDLMeshBufferAllocator> _bufferAllocator;
    MDLVertexDescriptor *_vertexDescriptor;
}

+ (BOOL)canImportFileExtension:(id)arg1;
+ (BOOL)canExportFileExtension:(id)arg1;
@property(readonly, retain, nonatomic) MDLVertexDescriptor *vertexDescriptor; // @synthesize vertexDescriptor=_vertexDescriptor;
@property(readonly, retain, nonatomic) id <MDLMeshBufferAllocator> bufferAllocator; // @synthesize bufferAllocator=_bufferAllocator;
@property(nonatomic) double endTime; // @synthesize endTime=_endTime;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) double frameInterval; // @synthesize frameInterval=_frameInterval;
- (void).cxx_destruct;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)objects;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (BOOL)exportAssetToURL:(id)arg1;
- (BOOL)exportAssetToURL:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) unsigned long long count;
- (id)initWithURL:(id)arg1 vertexDescriptor:(id)arg2 bufferAllocator:(id)arg3;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 vertexDescriptor:(id)arg2 bufferAllocator:(id)arg3 preserveTopology:(BOOL)arg4 error:(id *)arg5;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct)boundingBoxAtTime:(double)arg1;
@property(readonly, nonatomic) struct boundingBox;
@property(readonly, nonatomic) struct MDLAABB _bounds;
@property(readonly, retain, nonatomic) NSURL *URL;

@end

@interface MDLCamera : MDLObject
{
    // Error parsing type: ^{RTCamera=^^?QQffi^f^^@{?=[4]}{?=[4]}^{RTRaySegment}ffffffffff}, name: _camera
    MDLTransform *_mkTransform;
    float _worldToMetersConversionScale;
    float _barrelDistortion;
    float _fisheyeDistortion;
    float _opticalVignetting;
    float _chromaticAberration;
    float _fStop;
    float _maximumCircleOfConfusion;
    unsigned long long _apertureBladeCount;
    double _shutterOpenInterval;
    // Error parsing type: , name: _flash
}

// Error parsing type for property flash:
// Property attributes: T,N,V_flash

@property(nonatomic) double shutterOpenInterval; // @synthesize shutterOpenInterval=_shutterOpenInterval;
@property(nonatomic) float maximumCircleOfConfusion; // @synthesize maximumCircleOfConfusion=_maximumCircleOfConfusion;
@property(nonatomic) unsigned long long apertureBladeCount; // @synthesize apertureBladeCount=_apertureBladeCount;
@property(nonatomic) float fStop; // @synthesize fStop=_fStop;
@property(nonatomic) float chromaticAberration; // @synthesize chromaticAberration=_chromaticAberration;
@property(nonatomic) float opticalVignetting; // @synthesize opticalVignetting=_opticalVignetting;
@property(nonatomic) float fisheyeDistortion; // @synthesize fisheyeDistortion=_fisheyeDistortion;
@property(nonatomic) float barrelDistortion; // @synthesize barrelDistortion=_barrelDistortion;
@property(nonatomic) float worldToMetersConversionScale; // @synthesize worldToMetersConversionScale=_worldToMetersConversionScale;
- (void).cxx_destruct;
- (void)lookAt:from: /* Error: Ran out of types for this method. */;
- (void)lookAt: /* Error: Ran out of types for this method. */;
- (void)frameBoundingBox:(struct)arg1 setNearAndFar:(BOOL)arg2;
// Error parsing type for property exposureCompression:
// Property attributes: T,N

// Error parsing type for property exposure:
// Property attributes: T,N

- (id)bokehKernelWithSize: /* Error: Ran out of types for this method. */;
@property(nonatomic) float farVisibilityDistance;
@property(nonatomic) float nearVisibilityDistance;
- (void)setZFar:(float)arg1;
- (float)zFar;
- (void)setZNear:(float)arg1;
- (float)zNear;
- (float)circleOfConfusionForDistance:(float)arg1;
@property(nonatomic) float sensorAspect;
- (void)setAspect:(float)arg1;
- (float)aspect;
@property(nonatomic) float fieldOfView;
- (void)setFov:(float)arg1;
- (float)fov;
// Error parsing type for property sensorShift:
// Property attributes: T,N

// Error parsing type for property sensorEnlargement:
// Property attributes: T,N

@property(nonatomic) float sensorVerticalAperture;
- (void)setAperture:(float)arg1;
- (float)aperture;
@property(nonatomic) float focusDistance;
@property(nonatomic) float focalLength;
-     // Error parsing type: 32@0:81624, name: rayTo:forViewPort:
-     // Error parsing type: {?=[4]}24@0:8d16, name: getProjectionMatrixAtTime:
// Error parsing type for property projectionMatrix:
// Property attributes: T{?=[4]},R,N

-     // Error parsing type: {?=[4]}24@0:8d16, name: getViewMatrixAtTime:
// Error parsing type for property rtCamera:
// Property attributes: T^{RTCamera=^^?QQffi^f^^@{?=[4]}{?=[4]}^{RTRaySegment}ffffffffff},R,N

- (id)transform;
- (long long)version;
- (id)init;

@end

@interface MDLTexture : NSObject <MDLNamed>
{
    NSString *_name;
    struct MDLTextureData _textureData;
    long long _channelEncoding;
    NSData *_topLeftOriginData[14];
    NSData *_bottomLeftOriginData[14];
    BOOL _selfCreating;
}

+ (id)irradianceTextureCubeWithTexture:(id)arg1 name:(id)arg2 dimensions:(float)arg3 roughness: /* Error: Ran out of types for this method. */;
+ (id)irradianceTextureCubeWithTexture:(id)arg1 name:(id)arg2 dimensions: /* Error: Ran out of types for this method. */;
+ (id)textureCubeWithImagesNamed:(id)arg1;
+ (id)textureCubeWithImagesNamed:(id)arg1 bundle:(id)arg2;
+ (id)textureNamed:(id)arg1;
+ (id)textureNamed:(id)arg1 bundle:(id)arg2;
+ (id)_textureCubeWithSingleImageNamed:(id)arg1 bundle:(id)arg2;
@property(readonly, nonatomic) long long channelEncoding; // @synthesize channelEncoding=_channelEncoding;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (struct CGImage *)imageFromTexture;
- (BOOL)writeToURL:(id)arg1 type:(struct __CFString *)arg2;
- (BOOL)writeToURL:(id)arg1;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2;
- (void)setTexelDataWithTopLeftOrigin:(id)arg1 atMipLevel:(long long)arg2;
- (void)setTexelDataWithBottomLeftOrigin:(id)arg1 atMipLevel:(long long)arg2;
- (id)texelDataWithBottomLeftOriginAtMipLevel:(long long)arg1 create:(BOOL)arg2;
- (id)texelDataWithTopLeftOriginAtMipLevel:(long long)arg1 create:(BOOL)arg2;
- (id)texelDataWithBottomLeftOrigin;
- (id)texelDataWithTopLeftOrigin;
- (void)loadDataWithBottomLeftOriginAtMipLevel:(long long)arg1 create:(BOOL)arg2;
- (void)loadDataWithTopLeftOriginAtMipLevel:(long long)arg1 create:(BOOL)arg2;
@property(readonly, nonatomic) unsigned long long mipLevelCount;
- (id)initWithData:(id)arg1 topLeftOrigin:(BOOL)arg2 name:(id)arg3 dimensions:(long long)arg4 rowStride:(unsigned long long)arg5 channelCount:(long long)arg6 channelEncoding:(BOOL)arg7 isCube: /* Error: Ran out of types for this method. */;
- (id)generateDataAtLevel:(long long)arg1;
- (id)allocateDataAtLevel:(long long)arg1;
@property(nonatomic) BOOL isCube;
- (struct MDLTextureData *)textureData;
@property(readonly, nonatomic) unsigned long long channelCount;
@property(readonly, nonatomic) long long rowStride;
// Error parsing type for property dimensions:
// Property attributes: T,R,N

- (void)clearTexelData;

@end

@interface MDLCheckerboardTexture : MDLTexture
{
    int _divisions;
    struct CGColor *_cgColor1;
    struct CGColor *_cgColor2;
    // Error parsing type: , name: _color1
    // Error parsing type: , name: _color2
}

- (id)initWithDivisions:(float)arg1 name:(id)arg2 dimensions:(int)arg3 channelCount:(long long)arg4 channelEncoding:(struct CGColor *)arg5 color1:(struct CGColor *)arg6 color2: /* Error: Ran out of types for this method. */;
- (id)generateDataAtLevel:(long long)arg1;
@property(nonatomic) struct CGColor *color2;
@property(nonatomic) struct CGColor *color1;
@property(nonatomic) float divisions;
- (void)dealloc;

@end

@interface MDLColorSwatchTexture : MDLTexture
{
    float _colorTemperature1;
    float _colorTemperature2;
    struct CGColor *_color1;
    struct CGColor *_color2;
    int _type;
}

- (id)generateDataAtLevel:(long long)arg1;
- (id)initWithColorGradientFrom:(struct CGColor *)arg1 toColor:(struct CGColor *)arg2 name:(id)arg3 textureDimensions: /* Error: Ran out of types for this method. */;
- (id)initWithColorTemperatureGradientFrom:(float)arg1 toColorTemperature:(float)arg2 name:(id)arg3 textureDimensions: /* Error: Ran out of types for this method. */;

@end

@interface MDLInteractiveCameraController : NSObject
{
    // Error parsing type: , name: _lookAt
    // Error parsing type: , name: _clickPoint
    // Error parsing type: , name: _dragVector
    float _pitch;
    float _yaw;
    // Error parsing type: {MDLAABB="maxBounds""minBounds"}, name: _framingBounds
    float _targetElevation;
    float _tumbleSpeed;
    float _zoomSpeed;
    float _trackSpeed;
    float _targetDistance;
    float _zoom;
    MDLStereoscopicCamera *_camera;
    // Error parsing type: , name: _dragPoint
    unsigned long long _mode;
    // Error parsing type: , name: _viewSize
    // Error parsing type: , name: _trackVector
}

@property(nonatomic) float zoom; // @synthesize zoom=_zoom;
// Error parsing type for property viewSize:
// Property attributes: T,N,V_viewSize

@property(nonatomic) float targetDistance; // @synthesize targetDistance=_targetDistance;
@property(nonatomic) float trackSpeed; // @synthesize trackSpeed=_trackSpeed;
@property(nonatomic) float zoomSpeed; // @synthesize zoomSpeed=_zoomSpeed;
@property(nonatomic) float tumbleSpeed; // @synthesize tumbleSpeed=_tumbleSpeed;
@property(nonatomic) unsigned long long mode; // @synthesize mode=_mode;
// Error parsing type for property trackVector:
// Property attributes: T,N,V_trackVector

// Error parsing type for property dragPoint:
// Property attributes: T,N,V_dragPoint

@property(copy, nonatomic) MDLStereoscopicCamera *camera; // @synthesize camera=_camera;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)update:(float)arg1;
- (void)frameObject;
- (void)mouseMotionX:(float)arg1 Y:(float)arg2;
// Error parsing type for property position:
// Property attributes: T,N

// Error parsing type for property targetPosition:
// Property attributes: T,N

// Error parsing type for property clickPoint:
// Property attributes: T,N

@property(nonatomic) struct MDLAABB framingBounds;
- (void)frameBounds;
- (id)init;

@end

@interface MDLLightProbe : MDLLight
{
    MDLTexture *_reflectiveTexture;
    MDLTexture *_irradianceTexture;
    NSMutableData *_sphericalHarmonicsCoefficients;
    id <MDLTransformComponent> _transform;
    unsigned long long _sphericalHarmonicsLevel;
}

+ (id)lightProbeWithTextureSize:(long long)arg1 forLocation:(id)arg2 lightsToConsider:(id)arg3 objectsToConsider:(id)arg4 reflectiveCubemap:(id)arg5 irradianceCubemap:(id)arg6;
@property(readonly, nonatomic) unsigned long long sphericalHarmonicsLevel; // @synthesize sphericalHarmonicsLevel=_sphericalHarmonicsLevel;
@property(readonly, retain, nonatomic) MDLTexture *irradianceTexture; // @synthesize irradianceTexture=_irradianceTexture;
@property(readonly, retain, nonatomic) MDLTexture *reflectiveTexture; // @synthesize reflectiveTexture=_reflectiveTexture;
- (void)setTransform:(id)arg1;
- (id)transform;
- (void).cxx_destruct;
- (struct CGColor *)evaluatedColorFromVector: /* Error: Ran out of types for this method. */;
- (void)generateSphericalHarmonicsFromIrradiance:(unsigned long long)arg1;
- (void)generateIrradianceTextureFromReflective;
- (id)initWithReflectiveTexture:(id)arg1 irradianceTexture:(id)arg2;
- (void)setSphericalHarmonicsCoefficients:(id)arg1;
@property(readonly, copy, nonatomic) NSData *sphericalHarmonicsCoefficients;

@end

@interface MDLMaterial : NSObject <MDLNamed, NSFastEnumeration>
{
    NSMutableArray *_userProperties;
    NSMutableArray *_builtinProperties;
    MDLScatteringFunction *_scatteringFunction;
    NSString *_name;
    MDLMaterial *_baseMaterial;
}

@property(retain, nonatomic) MDLMaterial *baseMaterial; // @synthesize baseMaterial=_baseMaterial;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
@property(readonly, nonatomic) unsigned long long count;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@property(readonly, nonatomic) struct BidirectionalScatteringDistributionFunction *bsdf;
- (void)removeAllProperties;
- (void)removeProperty:(id)arg1;
- (void)setProperty:(id)arg1;
- (id)propertyWithSemantic:(unsigned long long)arg1;
- (id)propertyNamed:(id)arg1;
- (id)initWithName:(id)arg1 physicallyPlausibleBSDF:(struct PhysicallyPlausibleDistribution *)arg2;
- (id)initWithName:(id)arg1 scatteringFunction:(id)arg2;
- (id)init;
- (void)setScatteringFunction:(id)arg1;
@property(readonly, retain, nonatomic) MDLScatteringFunction *scatteringFunction;

@end

@interface MDLMaterialProperty : NSObject <MDLNamed>
{
    float *_shadowFloat;
    // Error parsing type: ^, name: _shadowFloat3
    NSString *_string;
    NSString *_name;
    NSURL *_url;
    MDLTextureSampler *_textureSampler;
    // Error parsing type: , name: _float
    // Error parsing type: {?="columns"[4]}, name: _matrix
    struct CGColor *_color;
    unsigned long long _semantic;
    unsigned long long _type;
    NSURL *_URLValue;
    // Error parsing type: {?="columns"[4]}, name: _matrix4x4
}

// Error parsing type for property matrix4x4:
// Property attributes: T{?=[4]},N,V_matrix4x4

@property(copy, nonatomic) NSURL *URLValue; // @synthesize URLValue=_URLValue;
@property(readonly, nonatomic) unsigned long long type; // @synthesize type=_type;
- (void).cxx_destruct;
-     // Error parsing type: v80@0:8{?=[4]}16, name: setMatrix4x4Value:
// Error parsing type for property float4Value:
// Property attributes: T,N

// Error parsing type for property float3Value:
// Property attributes: T,N

// Error parsing type for property float2Value:
// Property attributes: T,N

@property(nonatomic) float floatValue;
@property(retain, nonatomic) MDLTextureSampler *textureSamplerValue;
- (void)setUrl:(id)arg1;
@property(copy, nonatomic) NSString *stringValue;
- (void)setProperties:(id)arg1;
@property(nonatomic) struct CGColor *color;
- (void)dealloc;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 color:(struct CGColor *)arg3;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 float4WithSRGBA: /* Error: Ran out of types for this method. */;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 textureSampler:(id)arg3;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 string:(id)arg3;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 URL:(id)arg3;
-     // Error parsing type: @96@0:8@16Q24{?=[4]}32, name: initWithName:semantic:matrix4x4:
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 float4: /* Error: Ran out of types for this method. */;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 float3: /* Error: Ran out of types for this method. */;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 float2: /* Error: Ran out of types for this method. */;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2 float:(float)arg3;
- (id)initWithName:(id)arg1 semantic:(unsigned long long)arg2;
@property(nonatomic) unsigned long long semantic;
@property(copy, nonatomic) NSString *name;

@end

@interface MDLMesh : MDLObject
{
    NSMutableArray *_submeshes;
    NSMutableArray *_vertexBuffers;
    MDLVertexDescriptor *_vertexDescriptor;
    // Error parsing type: {MDLAABB="maxBounds""minBounds"}, name: _bounds
    unsigned long long _vertexCount;
}

+ (id)createVertexBuffers:(id)arg1 vertexCount:(unsigned long long)arg2 srcDescriptor:(id)arg3 dstDescriptor:(id)arg4 zone:(id)arg5;
+ (id)newSubdividedMesh:(id)arg1 submeshIndex:(unsigned long long)arg2 subdivisionLevels:(unsigned long long)arg3;
+ (id)newPlaneWithDimensions:(long long)arg1 segments:(id)arg2 geometryType:allocator: /* Error: Ran out of types for this method. */;
+ (id)newEllipticalConeWithHeight:(float)arg1 radii:(unsigned long long)arg2 radialSegments:(unsigned long long)arg3 verticalSegments:(long long)arg4 geometryType:(BOOL)arg5 inwardNormals:(id)arg6 allocator: /* Error: Ran out of types for this method. */;
+ (id)newCylinderWithHeight:(float)arg1 radii:(unsigned long long)arg2 radialSegments:(unsigned long long)arg3 verticalSegments:(long long)arg4 geometryType:(BOOL)arg5 inwardNormals:(id)arg6 allocator: /* Error: Ran out of types for this method. */;
+ (id)newEllipsoidWithRadii:(unsigned long long)arg1 radialSegments:(unsigned long long)arg2 verticalSegments:(long long)arg3 geometryType:(BOOL)arg4 inwardNormals:(BOOL)arg5 hemisphere:(id)arg6 allocator: /* Error: Ran out of types for this method. */;
+ (id)newIcosahedronWithRadius:(float)arg1 inwardNormals:(BOOL)arg2 allocator:(id)arg3;
+ (id)newBoxWithDimensions:(long long)arg1 segments:(BOOL)arg2 geometryType:(id)arg3 inwardNormals:allocator: /* Error: Ran out of types for this method. */;
@property(readonly, nonatomic) unsigned long long vertexCount; // @synthesize vertexCount=_vertexCount;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)vertexAttributeDataForAttributeNamed:(id)arg1;
- (id)initWithVertexBuffers:(id)arg1 vertexCount:(unsigned long long)arg2 descriptor:(id)arg3 submeshes:(id)arg4;
- (id)initWithVertexBuffer:(id)arg1 vertexCount:(unsigned long long)arg2 descriptor:(id)arg3 submeshes:(id)arg4;
@property(readonly, nonatomic) struct boundingBox;
@property(readonly, retain, nonatomic) NSMutableArray *submeshes;
@property(copy, nonatomic) MDLVertexDescriptor *vertexDescriptor;
- (void)debugPrintToFile:(struct __sFILE *)arg1;
@property(readonly, retain, nonatomic) NSArray *vertexBuffers;
- (void)makeVerticesUnique;
- (void)makeRegularBijectiveAttributeNamed:(id)arg1;
- (void)addNormalsWithAttributeNamed:(id)arg1 creaseThreshold:(float)arg2;
- (void)_calculateFaceNormalsFromPositions:(float *)arg1 positionStride:(long long)arg2 normals:(float *)arg3 normalStride:(long long)arg4 creaseThreshold:(float)arg5;
- (void)addTangentBasisForTextureCoordinateAttributeNamed:(id)arg1 normalAttributeNamed:(id)arg2 tangentAttributeNamed:(id)arg3;
- (void)addTangentBasisForTextureCoordinateAttributeNamed:(id)arg1 tangentAttributeNamed:(id)arg2 bitangentAttributeNamed:(id)arg3;
- (void)_calculateTangentBasisFromPositions:(float *)arg1 positionStride:(long long)arg2 normals:(float *)arg3 normalStride:(long long)arg4 uvs:(float *)arg5 uvStride:(long long)arg6 tangents:(float *)arg7 tangentsStride:(long long)arg8 bitagents:(float *)arg9 bitangentStride:(long long)arg10;
- (void)addAttributeWithName:(id)arg1 format:(unsigned long long)arg2;
- (void)enumerateSubmeshesUsingBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateSubmeshesUsingBlock:(CDUnknownBlockType)arg1 stopPointer:(char *)arg2;
- (int)submeshCount;
- (BOOL)generateLightMapVertexColorsWithLightsToConsider:(id)arg1 objectsToConsider:(id)arg2 vertexAttributeNamed:(id)arg3;
- (BOOL)generateLightMapTextureWithQuality:(float)arg1 lightsToConsider:(id)arg2 objectsToConsider:(id)arg3 vertexAttributeNamed:(id)arg4 materialPropertyNamed:(id)arg5;
- (BOOL)generateLightMapTextureWithTextureSize:(id)arg1 lightsToConsider:(id)arg2 objectsToConsider:(id)arg3 vertexAttributeNamed:(id)arg4 materialPropertyNamed: /* Error: Ran out of types for this method. */;
- (BOOL)generateAmbientOcclusionVertexColorsWithQuality:(float)arg1 attenuationFactor:(float)arg2 objectsToConsider:(id)arg3 vertexAttributeNamed:(id)arg4;
- (BOOL)generateAmbientOcclusionVertexColorsWithRaysPerSample:(long long)arg1 attenuationFactor:(float)arg2 objectsToConsider:(id)arg3 vertexAttributeNamed:(id)arg4;
- (BOOL)generateAmbientOcclusionTextureWithQuality:(float)arg1 attenuationFactor:(float)arg2 objectsToConsider:(id)arg3 vertexAttributeNamed:(id)arg4 materialPropertyNamed:(id)arg5;
- (BOOL)generateAmbientOcclusionTextureWithSize:(long long)arg1 raysPerSample:(float)arg2 attenuationFactor:(id)arg3 objectsToConsider:(id)arg4 vertexAttributeNamed:(id)arg5 materialPropertyNamed: /* Error: Ran out of types for this method. */;

@end

@interface MDLMeshBufferAllocatorDefault : NSObject <MDLMeshBufferAllocator>
{
}

- (id)newZoneForBuffersWithSize:(id)arg1 andType:(id)arg2;
- (id)newBufferFromZone:(id)arg1 data:(id)arg2 type:(unsigned long long)arg3;
- (id)newBufferFromZone:(id)arg1 length:(unsigned long long)arg2 type:(unsigned long long)arg3;
- (id)newBufferWithData:(id)arg1 type:(unsigned long long)arg2;
- (id)newBuffer:(unsigned long long)arg1 type:(unsigned long long)arg2;
- (id)newZone:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MDLMeshBufferData : NSObject <MDLMeshBuffer>
{
    MDLMeshBufferZoneDefault *_zone;
    MDLMeshBufferZoneDefault *_zoneDefault;
    NSMutableData *_data;
    unsigned long long _length;
    id <MDLMeshBufferAllocator> _allocator;
    unsigned long long _type;
}

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)map;
- (void)fillData:(id)arg1 offset:(unsigned long long)arg2;
- (void)dealloc;
- (id)initWithLength:(unsigned long long)arg1 data:(id)arg2 allocator:(id)arg3 zone:(id)arg4;
- (id)initWithType:(unsigned long long)arg1 data:(id)arg2;
- (id)initWithType:(unsigned long long)arg1 length:(unsigned long long)arg2;
@property(readonly, retain, nonatomic) id <MDLMeshBufferZone> zone;
@property(readonly, nonatomic) unsigned long long length;
@property(readonly, nonatomic) unsigned long long type;
@property(readonly, retain, nonatomic) NSData *data;
@property(readonly, retain, nonatomic) id <MDLMeshBufferAllocator> allocator;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MDLMeshBufferDataAllocator : NSObject <MDLMeshBufferAllocator>
{
}

- (id)newBufferFromZone:(id)arg1 data:(id)arg2 type:(unsigned long long)arg3;
- (id)newBufferFromZone:(id)arg1 length:(unsigned long long)arg2 type:(unsigned long long)arg3;
- (id)newBufferWithData:(id)arg1 type:(unsigned long long)arg2;
- (id)newBuffer:(unsigned long long)arg1 type:(unsigned long long)arg2;
- (id)newZoneForBuffersWithSize:(id)arg1 andType:(id)arg2;
- (id)newZone:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MDLMeshBufferMap : NSObject
{
    CDUnknownBlockType _deallocator;
    void *_bytes;
}

@property(readonly, nonatomic) void *bytes; // @synthesize bytes=_bytes;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithBytes:(void *)arg1 deallocator:(CDUnknownBlockType)arg2;

@end

@interface MDLMeshBufferZoneDefault : NSObject <MDLMeshBufferZone>
{
    unsigned long long _usedCapacity;
    unsigned long long _capacity;
    id <MDLMeshBufferAllocator> _allocator;
}

@property(readonly, retain, nonatomic) id <MDLMeshBufferAllocator> allocator; // @synthesize allocator=_allocator;
@property(readonly, nonatomic) unsigned long long capacity; // @synthesize capacity=_capacity;
- (void).cxx_destruct;
- (void)cancelMemory:(unsigned long long)arg1;
- (BOOL)reserveMemory:(unsigned long long)arg1 allocator:(id)arg2;
- (id)initWithCapacity:(unsigned long long)arg1 allocator:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MDLNoiseTexture : MDLTexture
{
    _Bool _vectorNoise;
    float _smoothness;
    _Bool _grayScale;
}

- (id)initScalarNoiseWithSmoothness:(float)arg1 name:(id)arg2 textureDimensions:(int)arg3 channelCount:(long long)arg4 channelEncoding:(BOOL)arg5 grayscale: /* Error: Ran out of types for this method. */;
- (id)initVectorNoiseWithSmoothness:(float)arg1 name:(id)arg2 textureDimensions:(long long)arg3 channelEncoding: /* Error: Ran out of types for this method. */;
- (id)generateDataAtLevel:(long long)arg1;

@end

@interface MDLNormalMapTexture : MDLTexture
{
    float _smoothness;
    float _contrast;
    MDLTexture *_sourceTexture;
}

- (void).cxx_destruct;
- (id)initByGeneratingNormalMapWithTexture:(id)arg1 name:(id)arg2 smoothness:(float)arg3 contrast:(float)arg4;
- (id)generateDataAtLevel:(long long)arg1;

@end

@interface MDLObjectContainer : NSObject <MDLObjectContainerComponent>
{
    NSMutableArray *_objects;
}

- (void).cxx_destruct;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@property(readonly, retain, nonatomic) NSArray *objects;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MDLPhotometricLight : MDLPhysicallyPlausibleLight
{
    struct RTIESLight *_iesLight;
    NSMutableData *_sphericalHarmonicsCoefficients;
    MDLTexture *_lightCubeMap;
    unsigned long long _sphericalHarmonicsLevel;
}

@property(readonly, nonatomic) unsigned long long sphericalHarmonicsLevel; // @synthesize sphericalHarmonicsLevel=_sphericalHarmonicsLevel;
@property(readonly, retain, nonatomic) MDLTexture *lightCubeMap; // @synthesize lightCubeMap=_lightCubeMap;
- (void).cxx_destruct;
- (struct CGColor *)evaluatedColorFromSHVector: /* Error: Ran out of types for this method. */;
- (void)generateSphericalHarmonicsFromLight:(unsigned long long)arg1;
- (void)computeLumens;
- (void)generateCubemapFromLight:(unsigned long long)arg1;
- (id)initWithIESProfile:(id)arg1;
- (void)setSphericalHarmonicsCoefficients:(id)arg1;
@property(readonly, copy, nonatomic) NSData *sphericalHarmonicsCoefficients;

@end

@interface MDLScatteringFunction : NSObject <MDLNamed>
{
    NSString *_name;
    MDLMaterialProperty *_baseColor;
    struct unique_ptr<ModelIO::BidirectionalScatteringDistributionFunction, std::__1::default_delete<ModelIO::BidirectionalScatteringDistributionFunction>> _bsdf;
    MDLMaterialProperty *_emission;
    MDLMaterialProperty *_specular;
    MDLMaterialProperty *_materialIndexOfRefraction;
    MDLMaterialProperty *_interfaceIndexOfRefraction;
    MDLMaterialProperty *_normal;
    MDLMaterialProperty *_ambientOcclusion;
    MDLMaterialProperty *_ambientOcclusionScale;
}

@property(readonly, retain, nonatomic) MDLMaterialProperty *ambientOcclusionScale; // @synthesize ambientOcclusionScale=_ambientOcclusionScale;
@property(readonly, retain, nonatomic) MDLMaterialProperty *ambientOcclusion; // @synthesize ambientOcclusion=_ambientOcclusion;
@property(readonly, retain, nonatomic) MDLMaterialProperty *normal; // @synthesize normal=_normal;
@property(readonly, retain, nonatomic) MDLMaterialProperty *interfaceIndexOfRefraction; // @synthesize interfaceIndexOfRefraction=_interfaceIndexOfRefraction;
@property(readonly, retain, nonatomic) MDLMaterialProperty *materialIndexOfRefraction; // @synthesize materialIndexOfRefraction=_materialIndexOfRefraction;
@property(readonly, retain, nonatomic) MDLMaterialProperty *specular; // @synthesize specular=_specular;
@property(readonly, retain, nonatomic) MDLMaterialProperty *emission; // @synthesize emission=_emission;
@property(readonly, retain, nonatomic) MDLMaterialProperty *baseColor; // @synthesize baseColor=_baseColor;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)bindShadowProperties;
- (id)init;

@end

@interface MDLPhysicallyPlausibleScatteringFunction : MDLScatteringFunction
{
    struct PhysicallyPlausibleDistribution *_physicalBSDF;
    MDLMaterialProperty *_subsurface;
    MDLMaterialProperty *_metallic;
    MDLMaterialProperty *_specularAmount;
    MDLMaterialProperty *_specularTint;
    MDLMaterialProperty *_roughness;
    MDLMaterialProperty *_anisotropic;
    MDLMaterialProperty *_anisotropicRotation;
    MDLMaterialProperty *_sheen;
    MDLMaterialProperty *_sheenTint;
    MDLMaterialProperty *_clearcoat;
    MDLMaterialProperty *_clearcoatGloss;
}

@property(readonly, retain, nonatomic) MDLMaterialProperty *clearcoatGloss; // @synthesize clearcoatGloss=_clearcoatGloss;
@property(readonly, retain, nonatomic) MDLMaterialProperty *clearcoat; // @synthesize clearcoat=_clearcoat;
@property(readonly, retain, nonatomic) MDLMaterialProperty *sheenTint; // @synthesize sheenTint=_sheenTint;
@property(readonly, retain, nonatomic) MDLMaterialProperty *sheen; // @synthesize sheen=_sheen;
@property(readonly, retain, nonatomic) MDLMaterialProperty *anisotropicRotation; // @synthesize anisotropicRotation=_anisotropicRotation;
@property(readonly, retain, nonatomic) MDLMaterialProperty *anisotropic; // @synthesize anisotropic=_anisotropic;
@property(readonly, retain, nonatomic) MDLMaterialProperty *roughness; // @synthesize roughness=_roughness;
@property(readonly, retain, nonatomic) MDLMaterialProperty *specularTint; // @synthesize specularTint=_specularTint;
@property(readonly, retain, nonatomic) MDLMaterialProperty *specularAmount; // @synthesize specularAmount=_specularAmount;
@property(readonly, retain, nonatomic) MDLMaterialProperty *metallic; // @synthesize metallic=_metallic;
@property(readonly, retain, nonatomic) MDLMaterialProperty *subsurface; // @synthesize subsurface=_subsurface;
- (void).cxx_destruct;
- (id)init;
@property(readonly, nonatomic) long long version;
- (void)bindShadowProperties;

@end

@interface MDLScene : NSObject
{
    struct mutex *_sceneMutex;
    struct vector<ModelIO::RTRenderable *, std::__1::allocator<ModelIO::RTRenderable *>> _sceneObjects;
    struct vector<MDLLight *, std::__1::allocator<MDLLight *>> _sceneLights;
    NSMutableArray *_objects;
    int _signature;
}

@property(readonly, retain, nonatomic) NSArray *objects; // @synthesize objects=_objects;
- (id).cxx_construct;
- (void).cxx_destruct;
-     // Error parsing type: @48@0:8r^{RTCamera=^^?QQffi^f^^@{?=[4]}{?=[4]}^{RTRaySegment}ffffffffff}16@24@3240, name: raytraceSceneWithCamera:reflection:irradiance:size:
- (void)clear;
- (void)addObject:(id)arg1;
-     // Error parsing type: c64@0:81632^{RTCamera=^^?QQffi^f^^@{?=[4]}{?=[4]}^{RTRaySegment}ffffffffff}48^{RTIntersectionResult=f^{RTGeometry}@}56, name: castRayFrom:withDirection:usingCamera:result:
-     // Error parsing type: 56@0:81632@48, name: hitTestRayFrom:withDirection:usingCamera:
- (void)releaseLockGuard:(int)arg1;
- (int)acquireLockGuard;
- (void)dealloc;
- (id)init;

@end

@interface MDLSkyCubeTexture : MDLTexture
{
    float _turbidity;
    float _sunElevation;
    float _upperAtmosphereScattering;
    float _groundAlbedo;
    float _gamma;
    float _exposure;
    float _brightness;
    float _contrast;
    float _saturation;
    // Error parsing type: , name: _highDynamicRangeCompression
    float _highDynamicRangeCompressionLimit;
    struct CGColor *_groundColor;
    struct SkyDescriptor *_sky;
    float _horizonElevation;
}

@property(nonatomic) float exposure; // @synthesize exposure=_exposure;
@property(nonatomic) float gamma; // @synthesize gamma=_gamma;
@property(nonatomic) float horizonElevation; // @synthesize horizonElevation=_horizonElevation;
// Error parsing type for property highDynamicRangeCompression:
// Property attributes: T,N,V_highDynamicRangeCompression

@property(nonatomic) float saturation; // @synthesize saturation=_saturation;
@property(nonatomic) float contrast; // @synthesize contrast=_contrast;
@property(nonatomic) float brightness; // @synthesize brightness=_brightness;
@property(nonatomic) float groundAlbedo; // @synthesize groundAlbedo=_groundAlbedo;
@property(nonatomic) float upperAtmosphereScattering; // @synthesize upperAtmosphereScattering=_upperAtmosphereScattering;
@property(nonatomic) float sunElevation; // @synthesize sunElevation=_sunElevation;
@property(nonatomic) float turbidity; // @synthesize turbidity=_turbidity;
- (void)updateTexture;
- (void)dealloc;
- (id)initWithName:(id)arg1 channelEncoding:(long long)arg2 textureDimensions:(float)arg3 turbidity:(float)arg4 sunElevation:(float)arg5 upperAtmosphereScattering:(float)arg6 groundAlbedo: /* Error: Ran out of types for this method. */;
@property(nonatomic) struct CGColor *groundColor;

@end

@interface MDLStereoscopicCamera : MDLCamera
{
    float _interPupillaryDistance;
    float _leftVergence;
    float _rightVergence;
    float _overlap;
}

@property(nonatomic) float overlap; // @synthesize overlap=_overlap;
@property(nonatomic) float rightVergence; // @synthesize rightVergence=_rightVergence;
@property(nonatomic) float leftVergence; // @synthesize leftVergence=_leftVergence;
@property(nonatomic) float interPupillaryDistance; // @synthesize interPupillaryDistance=_interPupillaryDistance;
// Error parsing type for property rightProjectionMatrix:
// Property attributes: T{?=[4]},R,N

// Error parsing type for property leftProjectionMatrix:
// Property attributes: T{?=[4]},R,N

// Error parsing type for property rightViewMatrix:
// Property attributes: T{?=[4]},R,N

// Error parsing type for property leftViewMatrix:
// Property attributes: T{?=[4]},R,N

- (id)init;

@end

@interface MDLSubmesh : NSObject <MDLNamed>
{
    MDLMaterial *_material;
    id <MDLMeshBuffer> _indexBuffer;
    unsigned long long _indexCount;
    unsigned long long _indexType;
    long long _geometryType;
    MDLSubmeshTopology *_topology;
    NSString *_name;
}

@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, retain, nonatomic) MDLSubmeshTopology *topology; // @synthesize topology=_topology;
@property(readonly, nonatomic) long long geometryType; // @synthesize geometryType=_geometryType;
@property(readonly, nonatomic) unsigned long long indexType; // @synthesize indexType=_indexType;
@property(readonly, nonatomic) unsigned long long indexCount; // @synthesize indexCount=_indexCount;
@property(readonly, retain, nonatomic) id <MDLMeshBuffer> indexBuffer; // @synthesize indexBuffer=_indexBuffer;
@property(retain, nonatomic) MDLMaterial *material; // @synthesize material=_material;
- (void).cxx_destruct;
- (struct MDLAABB)boundingBoxForMesh:(id)arg1;
- (void)dealloc;
- (void)debugPrintToFile:(struct __sFILE *)arg1;
- (id)initWithMDLSubmesh:(id)arg1 indexType:(unsigned long long)arg2 geometryType:(long long)arg3;
- (id)initWithIndexBuffer:(id)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 geometryType:(long long)arg4 material:(id)arg5;
- (id)initWithName:(id)arg1 indexBuffer:(id)arg2 indexCount:(unsigned long long)arg3 indexType:(unsigned long long)arg4 geometryType:(long long)arg5 material:(id)arg6;
- (id)initWithName:(id)arg1 indexBuffer:(id)arg2 indexCount:(unsigned long long)arg3 indexType:(unsigned long long)arg4 geometryType:(long long)arg5 material:(id)arg6 topology:(id)arg7;

@end

@interface MDLSubmeshTopology : NSObject
{
    id <MDLMeshBuffer> _faceTopology;
    unsigned long long _faceCount;
    id <MDLMeshBuffer> _vertexCreaseIndices;
    id <MDLMeshBuffer> _vertexCreases;
    unsigned long long _vertexCreaseCount;
    id <MDLMeshBuffer> _edgeCreaseIndices;
    id <MDLMeshBuffer> _edgeCreases;
    unsigned long long _edgeCreaseCount;
    id <MDLMeshBuffer> _holes;
    unsigned long long _holeCount;
}

@property(nonatomic) unsigned long long holeCount; // @synthesize holeCount=_holeCount;
@property(retain, nonatomic) id <MDLMeshBuffer> holes; // @synthesize holes=_holes;
@property(nonatomic) unsigned long long edgeCreaseCount; // @synthesize edgeCreaseCount=_edgeCreaseCount;
@property(retain, nonatomic) id <MDLMeshBuffer> edgeCreases; // @synthesize edgeCreases=_edgeCreases;
@property(retain, nonatomic) id <MDLMeshBuffer> edgeCreaseIndices; // @synthesize edgeCreaseIndices=_edgeCreaseIndices;
@property(nonatomic) unsigned long long vertexCreaseCount; // @synthesize vertexCreaseCount=_vertexCreaseCount;
@property(retain, nonatomic) id <MDLMeshBuffer> vertexCreases; // @synthesize vertexCreases=_vertexCreases;
@property(retain, nonatomic) id <MDLMeshBuffer> vertexCreaseIndices; // @synthesize vertexCreaseIndices=_vertexCreaseIndices;
@property(nonatomic) unsigned long long faceCount; // @synthesize faceCount=_faceCount;
@property(retain, nonatomic) id <MDLMeshBuffer> faceTopology; // @synthesize faceTopology=_faceTopology;
- (void).cxx_destruct;

@end

@interface MDLTextureFilter : NSObject
{
    unsigned long long sWrapMode;
    unsigned long long tWrapMode;
    unsigned long long rWrapMode;
    unsigned long long minFilter;
    unsigned long long magFilter;
    unsigned long long mipFilter;
}

@property(nonatomic) unsigned long long mipFilter; // @synthesize mipFilter;
@property(nonatomic) unsigned long long magFilter; // @synthesize magFilter;
@property(nonatomic) unsigned long long minFilter; // @synthesize minFilter;
@property(nonatomic) unsigned long long rWrapMode; // @synthesize rWrapMode;
@property(nonatomic) unsigned long long tWrapMode; // @synthesize tWrapMode;
@property(nonatomic) unsigned long long sWrapMode; // @synthesize sWrapMode;
- (id)init;

@end

@interface MDLTextureSampler : NSObject
{
    MDLTexture *texture;
    MDLTextureFilter *hardwareFilter;
    MDLTransform *transform;
}

@property(retain, nonatomic) MDLTransform *transform; // @synthesize transform;
@property(retain, nonatomic) MDLTextureFilter *hardwareFilter; // @synthesize hardwareFilter;
@property(retain, nonatomic) MDLTexture *texture; // @synthesize texture;
- (void).cxx_destruct;

@end

@interface MDLTransform : NSObject <MDLTransformComponent>
{
    // Error parsing type: {MDLAffineTransform="_keyedTranslation"{vector<std::__1::pair<double, float __attribute__((ext_vector_type(3)))>, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__begin_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_cap_"{__compressed_pair<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> *, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__first_"^{pair<double, float __attribute__((ext_vector_type(3)))>}}}"_keyedRotation"{vector<std::__1::pair<double, float __attribute__((ext_vector_type(3)))>, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__begin_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_cap_"{__compressed_pair<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> *, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__first_"^{pair<double, float __attribute__((ext_vector_type(3)))>}}}"_keyedShear"{vector<std::__1::pair<double, float __attribute__((ext_vector_type(3)))>, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__begin_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_cap_"{__compressed_pair<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> *, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__first_"^{pair<double, float __attribute__((ext_vector_type(3)))>}}}"_keyedScale"{vector<std::__1::pair<double, float __attribute__((ext_vector_type(3)))>, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__begin_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_"^{pair<double, float __attribute__((ext_vector_type(3)))>}"__end_cap_"{__compressed_pair<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> *, std::__1::allocator<std::__1::pair<double, float __attribute__((ext_vector_type(3)))> > >="__first_"^{pair<double, float __attribute__((ext_vector_type(3)))>}}}"_startTime"d"_greatestTime"d"_identity"B"_evaluationTime"d"_transform"{float4x4="columns"[4]}"_invTransform"{float4x4="columns"[4]}"_jacobiRotation"{float4x4="columns"[4]}"_invJacobiRotation"{float4x4="columns"[4]}}, name: _transform
    double _minTime;
    double _maxTime;
}

+     // Error parsing type: {?=[4]}32@0:8@16d24, name: globalTransformWithObject:atTime:
+     // Error parsing type: {?=[4]}32@0:8@16d24, name: localTransformWithObject:atTime:
- (id).cxx_construct;
- (void).cxx_destruct;
-     // Error parsing type: {?=[4]}24@0:8d16, name: rotationMatrixAtTime:
-     // Error parsing type: {?=[4]}24@0:8d16, name: localTransformAtTime:
-     // Error parsing type: v80@0:8{?=[4]}16, name: setLocalTransform:
-     // Error parsing type: v88@0:8{?=[4]}16d80, name: setLocalTransform:forTime:
-     // Error parsing type: @80@0:8{?=[4]}16, name: initWithMatrix:
- (id)initWithTransformComponent:(id)arg1;
- (void)setIdentity;
- (id)initWithIdentity;
- (id)init;
- (void)setTranslation:(double)arg1 forTime: /* Error: Ran out of types for this method. */;
- (void)setScale:(double)arg1 forTime: /* Error: Ran out of types for this method. */;
- (void)setShear:(double)arg1 forTime: /* Error: Ran out of types for this method. */;
- (void)setRotation:(double)arg1 forTime: /* Error: Ran out of types for this method. */;
-     // Error parsing type: 24@0:8d16, name: rotationAtTime:
-     // Error parsing type: 24@0:8d16, name: translationAtTime:
-     // Error parsing type: 24@0:8d16, name: shearAtTime:
-     // Error parsing type: 24@0:8d16, name: scaleAtTime:
// Error parsing type for property rotation:
// Property attributes: T,N

// Error parsing type for property scale:
// Property attributes: T,N

// Error parsing type for property shear:
// Property attributes: T,N

// Error parsing type for property translation:
// Property attributes: T,N

// Error parsing type for property matrix:
// Property attributes: T{?=[4]},N

@property(readonly, nonatomic) double maximumTime;
@property(readonly, nonatomic) double minimumTime;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MDLURLTexture : MDLTexture
{
    NSURL *_url;
}

- (void).cxx_destruct;
@property(copy, nonatomic) NSURL *URL;
- (id)initWithURL:(id)arg1 name:(id)arg2;

@end

@interface MDLVertexAttribute : NSObject <NSCopying>
{
    NSString *_name;
    unsigned long long _offset;
    unsigned long long _bufferIndex;
    unsigned long long _format;
    // Error parsing type: , name: _initializationValue
}

// Error parsing type for property initializationValue:
// Property attributes: T,N,V_initializationValue

@property(nonatomic) unsigned long long bufferIndex; // @synthesize bufferIndex=_bufferIndex;
@property(nonatomic) unsigned long long offset; // @synthesize offset=_offset;
@property(nonatomic) unsigned long long format; // @synthesize format=_format;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1 format:(unsigned long long)arg2 offset:(unsigned long long)arg3 bufferIndex:(unsigned long long)arg4;
- (id)init;

@end

@interface MDLVertexAttributeData : NSObject
{
    MDLMeshBufferMap *_map;
    void *_dataStart;
    unsigned long long _stride;
    unsigned long long _format;
}

@property(nonatomic) unsigned long long format; // @synthesize format=_format;
@property(nonatomic) unsigned long long stride; // @synthesize stride=_stride;
@property(nonatomic) void *dataStart; // @synthesize dataStart=_dataStart;
@property(retain, nonatomic) MDLMeshBufferMap *map; // @synthesize map=_map;
- (void).cxx_destruct;
- (id)init;

@end

@interface MDLVertexBufferLayout : NSObject <NSCopying>
{
    unsigned long long _stride;
}

@property(nonatomic) unsigned long long stride; // @synthesize stride=_stride;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface MDLVertexDescriptor : NSObject <NSCopying>
{
    NSMutableArray *_attributes;
    NSMutableArray *_layouts;
}

@property(retain, nonatomic) NSMutableArray *layouts; // @synthesize layouts=_layouts;
@property(retain, nonatomic) NSMutableArray *attributes; // @synthesize attributes=_attributes;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)debugPrintToFile:(struct __sFILE *)arg1;
- (void)setPackedOffsets;
- (void)setPackedStrides;
- (void)reset;
- (void)addOrReplaceAttribute:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)attributeNamed:(id)arg1;
- (id)initWithVertexDescriptor:(id)arg1;
- (id)init;

@end

@interface MDLVolumeGrid : NSObject
{
    struct unique_ptr<ModelIO::Octree, std::__1::default_delete<ModelIO::Octree>> _octree;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setSampleAtIndex:(float)arg1 value: /* Error: Ran out of types for this method. */;
- (float)sampleAtIndex: /* Error: Ran out of types for this method. */;
-     // Error parsing type: 16@0:8, name: gridExtent
-     // Error parsing type: 16@0:8, name: gridCellExtent
- (void)filterBy:(CDUnknownBlockType)arg1;
- (void)resampleGrid:(float)arg1;
- (void)contractBoundaryWithExteriorWidth:(float)arg1 interiorWidth:(float)arg2;
- (void)expandBoundaryWithExteriorWidth:(float)arg1 interiorWidth:(float)arg2;
- (void)removeSelfIntersections;
- (id)createIndexBufferWithStyle:(unsigned long long)arg1 quality:(float)arg2 exteriorWidth:(float)arg3 interiorWidth:(float)arg4;
- (id)createVertexBufferWithStyle:(unsigned long long)arg1 quality:(float)arg2 exteriorWidth:(float)arg3 interiorWidth:(float)arg4;
- (id)createIndexBufferWithStyle:(unsigned long long)arg1 quality:(float)arg2;
- (id)createVertexBufferWithStyle:(unsigned long long)arg1 quality:(float)arg2;
- (id)XYlayerAtZ:(float)arg1 forLevel:(int)arg2;
- (id)XZlayerAtY:(float)arg1 forLevel:(int)arg2;
- (id)YZlayerAtX:(float)arg1 forLevel:(int)arg2;
- (id)meshWithStyle:(unsigned long long)arg1;
- (id)initWithAsset:(id)arg1 divisions:(int)arg2 interiorWidth:(float)arg3 exteriorWidth:(float)arg4 patchRadius:(float)arg5;
- (id)initWithAsset:(id)arg1 divisions:(int)arg2;

@end

@interface MDLVoxelArray : NSObject
{
    struct unordered_map<unsigned long long, int, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, int>>> _voxels;
    // Error parsing type: {?="minimumExtent""maximumExtent"}, name: _extent
    // Error parsing type: {MDLAABB="maxBounds""minBounds"}, name: _bounds
    float _voxelExtent;
    struct MortonCode mortonCoder;
}

@property(readonly, nonatomic) struct voxelIndexExtent; // @synthesize voxelIndexExtent=_extent;
- (id).cxx_construct;
- (void).cxx_destruct;
- (int)erodeExterior;
- (int)erodeInterior;
- (int)dilateExterior;
- (int)dilateInterior;
- (void)intersectWithVoxels:(id)arg1;
- (void)differenceWithVoxels:(id)arg1;
- (void)unionWithVoxels:(id)arg1;
- (void)clearVoxelsWithIndexData:(id)arg1;
- (void)setVoxelsWithVoxelData:(id)arg1;
- (id)voxelIndices;
- (id)voxelsWithinExtent:(struct)arg1;
- (void)setVoxelsForMesh:(id)arg1 divisions:(int)arg2 interiorNBWidth:(float)arg3 exteriorNBWidth:(float)arg4;
- (void)setVoxelsForMesh:(id)arg1 divisions:(int)arg2 interiorShells:(int)arg3 exteriorShells:(int)arg4;
- (void)setVoxelsForMesh:(id)arg1 divisions:(int)arg2 interiorNBWidth:(float)arg3 exteriorNBWidth:(float)arg4 patchRadius:(float)arg5;
- (void)setVoxelsForMesh:(id)arg1 divisions:(int)arg2 interiorShells:(int)arg3 exteriorShells:(int)arg4 patchRadius:(float)arg5;
- (void)setVoxelAtIndex: /* Error: Ran out of types for this method. */;
- (BOOL)voxelExistsAtIndex:(BOOL)arg1 allowAnyX:(BOOL)arg2 allowAnyY:(BOOL)arg3 allowAnyZ:(BOOL)arg4 allowAnyShell: /* Error: Ran out of types for this method. */;
- (void)recalculateExtents;
- (id)meshUsingAllocator:(id)arg1;
- (id)initWithData:(id)arg1 boundingBox:(struct)arg2 voxelExtent:(float)arg3;
- (id)initWithAsset:(id)arg1 divisions:(int)arg2 interiorNBWidth:(float)arg3 exteriorNBWidth:(float)arg4;
- (id)initWithAsset:(id)arg1 divisions:(int)arg2 interiorNBWidth:(float)arg3 exteriorNBWidth:(float)arg4 patchRadius:(float)arg5;
- (id)initWithAsset:(id)arg1 divisions:(int)arg2 interiorShells:(int)arg3 exteriorShells:(int)arg4;
- (id)initWithAsset:(id)arg1 divisions:(int)arg2 interiorShells:(int)arg3 exteriorShells:(int)arg4 patchRadius:(float)arg5;
- (id)init;
@property(readonly, nonatomic) unsigned long long count;
@property(readonly, nonatomic) struct boundingBox;
- (struct)voxelBoundingBoxAtIndex: /* Error: Ran out of types for this method. */;
-     // Error parsing type: 32@0:816, name: indexOfSpatialLocation:
-     // Error parsing type: 32@0:816, name: spatialLocationOfIndex:

@end

