//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct C3DColor4 {
    union {
        float rgba[4];
        CDStruct_83984b6f ;
    } ;
};

struct C3DPlane {
    union {
        CDStruct_83984b6f _field1;
    } _field1;
};

struct C3DSphere;

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CGPath;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CVSMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct Cache {
    unsigned int _field1[16];
    unsigned int _field2;
    int _field3;
    struct __C3DBlendStates *_field4;
    unsigned int _field5;
    struct __C3DRasterizerStates *_field6;
    struct __C3DMesh *_field7;
    struct __C3DMeshElement *_field8;
    unsigned int _field9;
    unsigned int _field10;
    int _field11;
    unsigned int _field12;
    void *_field13;
    int _field14;
    int _field15;
    int _field16;
};

struct InplaceSolverIslandCallback;

struct SCNCAction {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
};

struct SCNCActionCustom {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    CDUnknownBlockType _field20;
};

struct SCNCActionFade {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    float _field20;
    float _field21;
    float _field22;
    char _field23;
};

struct SCNCActionHide {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    char _field20;
};

struct SCNCActionMove {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    char _field21;
    char _field22;
};

struct SCNCActionRepeat {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct SCNCAction *_field20;
    unsigned long long _field21;
    unsigned long long _field22;
    double _field23;
    char _field24;
};

struct SCNCActionRotate {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    float _field20;
    struct __C3DQuaternion _field21;
    struct __C3DQuaternion _field22;
    char _field23;
    char _field24;
    char _field25;
    char _field26;
    char _field27;
};

struct SCNCActionScale {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    char _field25;
    char _field26;
};

struct SCNCActionSequence {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct vector<SCNCAction *, std::__1::allocator<SCNCAction *>> _field20;
    unsigned long long _field21;
    double _field22;
};

struct SCNCActionWait {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
};

struct SCNCPlaySound {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    char _field20;
    char _field21;
    id _field22;
};

struct SCNVector3 {
    double x;
    double y;
    double z;
};

struct SCNVector4 {
    double x;
    double y;
    double z;
    double w;
};

struct VolatileObject {
    struct __C3DArray *_field1;
    unsigned int _field2;
    unsigned int _field3;
    struct __CFArray *_field4;
};

struct _C3DAnimationPendingEvent;

struct _CGLContextObject {
    struct __GLIContextRec *_field1;
    struct __GLIFunctionDispatchRec {
        CDUnknownFunctionPointerType _field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
        CDUnknownFunctionPointerType _field7;
        CDUnknownFunctionPointerType _field8;
        CDUnknownFunctionPointerType _field9;
        CDUnknownFunctionPointerType _field10;
        CDUnknownFunctionPointerType _field11;
        CDUnknownFunctionPointerType _field12;
        CDUnknownFunctionPointerType _field13;
        CDUnknownFunctionPointerType _field14;
        CDUnknownFunctionPointerType _field15;
        CDUnknownFunctionPointerType _field16;
        CDUnknownFunctionPointerType _field17;
        CDUnknownFunctionPointerType _field18;
        CDUnknownFunctionPointerType _field19;
        CDUnknownFunctionPointerType _field20;
        CDUnknownFunctionPointerType _field21;
        CDUnknownFunctionPointerType _field22;
        CDUnknownFunctionPointerType _field23;
        CDUnknownFunctionPointerType _field24;
        CDUnknownFunctionPointerType _field25;
        CDUnknownFunctionPointerType _field26;
        CDUnknownFunctionPointerType _field27;
        CDUnknownFunctionPointerType _field28;
        CDUnknownFunctionPointerType _field29;
        CDUnknownFunctionPointerType _field30;
        CDUnknownFunctionPointerType _field31;
        CDUnknownFunctionPointerType _field32;
        CDUnknownFunctionPointerType _field33;
        CDUnknownFunctionPointerType _field34;
        CDUnknownFunctionPointerType _field35;
        CDUnknownFunctionPointerType _field36;
        CDUnknownFunctionPointerType _field37;
        CDUnknownFunctionPointerType _field38;
        CDUnknownFunctionPointerType _field39;
        CDUnknownFunctionPointerType _field40;
        CDUnknownFunctionPointerType _field41;
        CDUnknownFunctionPointerType _field42;
        CDUnknownFunctionPointerType _field43;
        CDUnknownFunctionPointerType _field44;
        CDUnknownFunctionPointerType _field45;
        CDUnknownFunctionPointerType _field46;
        CDUnknownFunctionPointerType _field47;
        CDUnknownFunctionPointerType _field48;
        CDUnknownFunctionPointerType _field49;
        CDUnknownFunctionPointerType _field50;
        CDUnknownFunctionPointerType _field51;
        CDUnknownFunctionPointerType _field52;
        CDUnknownFunctionPointerType _field53;
        CDUnknownFunctionPointerType _field54;
        CDUnknownFunctionPointerType _field55;
        CDUnknownFunctionPointerType _field56;
        CDUnknownFunctionPointerType _field57;
        CDUnknownFunctionPointerType _field58;
        CDUnknownFunctionPointerType _field59;
        CDUnknownFunctionPointerType _field60;
        CDUnknownFunctionPointerType _field61;
        CDUnknownFunctionPointerType _field62;
        CDUnknownFunctionPointerType _field63;
        CDUnknownFunctionPointerType _field64;
        CDUnknownFunctionPointerType _field65;
        CDUnknownFunctionPointerType _field66;
        CDUnknownFunctionPointerType _field67;
        CDUnknownFunctionPointerType _field68;
        CDUnknownFunctionPointerType _field69;
        CDUnknownFunctionPointerType _field70;
        CDUnknownFunctionPointerType _field71;
        CDUnknownFunctionPointerType _field72;
        CDUnknownFunctionPointerType _field73;
        CDUnknownFunctionPointerType _field74;
        CDUnknownFunctionPointerType _field75;
        CDUnknownFunctionPointerType _field76;
        CDUnknownFunctionPointerType _field77;
        CDUnknownFunctionPointerType _field78;
        CDUnknownFunctionPointerType _field79;
        CDUnknownFunctionPointerType _field80;
        CDUnknownFunctionPointerType _field81;
        CDUnknownFunctionPointerType _field82;
        CDUnknownFunctionPointerType _field83;
        CDUnknownFunctionPointerType _field84;
        CDUnknownFunctionPointerType _field85;
        CDUnknownFunctionPointerType _field86;
        CDUnknownFunctionPointerType _field87;
        CDUnknownFunctionPointerType _field88;
        CDUnknownFunctionPointerType _field89;
        CDUnknownFunctionPointerType _field90;
        CDUnknownFunctionPointerType _field91;
        CDUnknownFunctionPointerType _field92;
        CDUnknownFunctionPointerType _field93;
        CDUnknownFunctionPointerType _field94;
        CDUnknownFunctionPointerType _field95;
        CDUnknownFunctionPointerType _field96;
        CDUnknownFunctionPointerType _field97;
        CDUnknownFunctionPointerType _field98;
        CDUnknownFunctionPointerType _field99;
        CDUnknownFunctionPointerType _field100;
        CDUnknownFunctionPointerType _field101;
        CDUnknownFunctionPointerType _field102;
        CDUnknownFunctionPointerType _field103;
        CDUnknownFunctionPointerType _field104;
        CDUnknownFunctionPointerType _field105;
        CDUnknownFunctionPointerType _field106;
        CDUnknownFunctionPointerType _field107;
        CDUnknownFunctionPointerType _field108;
        CDUnknownFunctionPointerType _field109;
        CDUnknownFunctionPointerType _field110;
        CDUnknownFunctionPointerType _field111;
        CDUnknownFunctionPointerType _field112;
        CDUnknownFunctionPointerType _field113;
        CDUnknownFunctionPointerType _field114;
        CDUnknownFunctionPointerType _field115;
        CDUnknownFunctionPointerType _field116;
        CDUnknownFunctionPointerType _field117;
        CDUnknownFunctionPointerType _field118;
        CDUnknownFunctionPointerType _field119;
        CDUnknownFunctionPointerType _field120;
        CDUnknownFunctionPointerType _field121;
        CDUnknownFunctionPointerType _field122;
        CDUnknownFunctionPointerType _field123;
        CDUnknownFunctionPointerType _field124;
        CDUnknownFunctionPointerType _field125;
        CDUnknownFunctionPointerType _field126;
        CDUnknownFunctionPointerType _field127;
        CDUnknownFunctionPointerType _field128;
        CDUnknownFunctionPointerType _field129;
        CDUnknownFunctionPointerType _field130;
        CDUnknownFunctionPointerType _field131;
        CDUnknownFunctionPointerType _field132;
        CDUnknownFunctionPointerType _field133;
        CDUnknownFunctionPointerType _field134;
        CDUnknownFunctionPointerType _field135;
        CDUnknownFunctionPointerType _field136;
        CDUnknownFunctionPointerType _field137;
        CDUnknownFunctionPointerType _field138;
        CDUnknownFunctionPointerType _field139;
        CDUnknownFunctionPointerType _field140;
        CDUnknownFunctionPointerType _field141;
        CDUnknownFunctionPointerType _field142;
        CDUnknownFunctionPointerType _field143;
        CDUnknownFunctionPointerType _field144;
        CDUnknownFunctionPointerType _field145;
        CDUnknownFunctionPointerType _field146;
        CDUnknownFunctionPointerType _field147;
        CDUnknownFunctionPointerType _field148;
        CDUnknownFunctionPointerType _field149;
        CDUnknownFunctionPointerType _field150;
        CDUnknownFunctionPointerType _field151;
        CDUnknownFunctionPointerType _field152;
        CDUnknownFunctionPointerType _field153;
        CDUnknownFunctionPointerType _field154;
        CDUnknownFunctionPointerType _field155;
        CDUnknownFunctionPointerType _field156;
        CDUnknownFunctionPointerType _field157;
        CDUnknownFunctionPointerType _field158;
        CDUnknownFunctionPointerType _field159;
        CDUnknownFunctionPointerType _field160;
        CDUnknownFunctionPointerType _field161;
        CDUnknownFunctionPointerType _field162;
        CDUnknownFunctionPointerType _field163;
        CDUnknownFunctionPointerType _field164;
        CDUnknownFunctionPointerType _field165;
        CDUnknownFunctionPointerType _field166;
        CDUnknownFunctionPointerType _field167;
        CDUnknownFunctionPointerType _field168;
        CDUnknownFunctionPointerType _field169;
        CDUnknownFunctionPointerType _field170;
        CDUnknownFunctionPointerType _field171;
        CDUnknownFunctionPointerType _field172;
        CDUnknownFunctionPointerType _field173;
        CDUnknownFunctionPointerType _field174;
        CDUnknownFunctionPointerType _field175;
        CDUnknownFunctionPointerType _field176;
        CDUnknownFunctionPointerType _field177;
        CDUnknownFunctionPointerType _field178;
        CDUnknownFunctionPointerType _field179;
        CDUnknownFunctionPointerType _field180;
        CDUnknownFunctionPointerType _field181;
        CDUnknownFunctionPointerType _field182;
        CDUnknownFunctionPointerType _field183;
        CDUnknownFunctionPointerType _field184;
        CDUnknownFunctionPointerType _field185;
        CDUnknownFunctionPointerType _field186;
        CDUnknownFunctionPointerType _field187;
        CDUnknownFunctionPointerType _field188;
        CDUnknownFunctionPointerType _field189;
        CDUnknownFunctionPointerType _field190;
        CDUnknownFunctionPointerType _field191;
        CDUnknownFunctionPointerType _field192;
        CDUnknownFunctionPointerType _field193;
        CDUnknownFunctionPointerType _field194;
        CDUnknownFunctionPointerType _field195;
        CDUnknownFunctionPointerType _field196;
        CDUnknownFunctionPointerType _field197;
        CDUnknownFunctionPointerType _field198;
        CDUnknownFunctionPointerType _field199;
        CDUnknownFunctionPointerType _field200;
        CDUnknownFunctionPointerType _field201;
        CDUnknownFunctionPointerType _field202;
        CDUnknownFunctionPointerType _field203;
        CDUnknownFunctionPointerType _field204;
        CDUnknownFunctionPointerType _field205;
        CDUnknownFunctionPointerType _field206;
        CDUnknownFunctionPointerType _field207;
        CDUnknownFunctionPointerType _field208;
        CDUnknownFunctionPointerType _field209;
        CDUnknownFunctionPointerType _field210;
        CDUnknownFunctionPointerType _field211;
        CDUnknownFunctionPointerType _field212;
        CDUnknownFunctionPointerType _field213;
        CDUnknownFunctionPointerType _field214;
        CDUnknownFunctionPointerType _field215;
        CDUnknownFunctionPointerType _field216;
        CDUnknownFunctionPointerType _field217;
        CDUnknownFunctionPointerType _field218;
        CDUnknownFunctionPointerType _field219;
        CDUnknownFunctionPointerType _field220;
        CDUnknownFunctionPointerType _field221;
        CDUnknownFunctionPointerType _field222;
        CDUnknownFunctionPointerType _field223;
        CDUnknownFunctionPointerType _field224;
        CDUnknownFunctionPointerType _field225;
        CDUnknownFunctionPointerType _field226;
        CDUnknownFunctionPointerType _field227;
        CDUnknownFunctionPointerType _field228;
        CDUnknownFunctionPointerType _field229;
        CDUnknownFunctionPointerType _field230;
        CDUnknownFunctionPointerType _field231;
        CDUnknownFunctionPointerType _field232;
        CDUnknownFunctionPointerType _field233;
        CDUnknownFunctionPointerType _field234;
        CDUnknownFunctionPointerType _field235;
        CDUnknownFunctionPointerType _field236;
        CDUnknownFunctionPointerType _field237;
        CDUnknownFunctionPointerType _field238;
        CDUnknownFunctionPointerType _field239;
        CDUnknownFunctionPointerType _field240;
        CDUnknownFunctionPointerType _field241;
        CDUnknownFunctionPointerType _field242;
        CDUnknownFunctionPointerType _field243;
        CDUnknownFunctionPointerType _field244;
        CDUnknownFunctionPointerType _field245;
        CDUnknownFunctionPointerType _field246;
        CDUnknownFunctionPointerType _field247;
        CDUnknownFunctionPointerType _field248;
        CDUnknownFunctionPointerType _field249;
        CDUnknownFunctionPointerType _field250;
        CDUnknownFunctionPointerType _field251;
        CDUnknownFunctionPointerType _field252;
        CDUnknownFunctionPointerType _field253;
        CDUnknownFunctionPointerType _field254;
        CDUnknownFunctionPointerType _field255;
        CDUnknownFunctionPointerType _field256;
        CDUnknownFunctionPointerType _field257;
        CDUnknownFunctionPointerType _field258;
        CDUnknownFunctionPointerType _field259;
        CDUnknownFunctionPointerType _field260;
        CDUnknownFunctionPointerType _field261;
        CDUnknownFunctionPointerType _field262;
        CDUnknownFunctionPointerType _field263;
        CDUnknownFunctionPointerType _field264;
        CDUnknownFunctionPointerType _field265;
        CDUnknownFunctionPointerType _field266;
        CDUnknownFunctionPointerType _field267;
        CDUnknownFunctionPointerType _field268;
        CDUnknownFunctionPointerType _field269;
        CDUnknownFunctionPointerType _field270;
        CDUnknownFunctionPointerType _field271;
        CDUnknownFunctionPointerType _field272;
        CDUnknownFunctionPointerType _field273;
        CDUnknownFunctionPointerType _field274;
        CDUnknownFunctionPointerType _field275;
        CDUnknownFunctionPointerType _field276;
        CDUnknownFunctionPointerType _field277;
        CDUnknownFunctionPointerType _field278;
        CDUnknownFunctionPointerType _field279;
        CDUnknownFunctionPointerType _field280;
        CDUnknownFunctionPointerType _field281;
        CDUnknownFunctionPointerType _field282;
        CDUnknownFunctionPointerType _field283;
        CDUnknownFunctionPointerType _field284;
        CDUnknownFunctionPointerType _field285;
        CDUnknownFunctionPointerType _field286;
        CDUnknownFunctionPointerType _field287;
        CDUnknownFunctionPointerType _field288;
        CDUnknownFunctionPointerType _field289;
        CDUnknownFunctionPointerType _field290;
        CDUnknownFunctionPointerType _field291;
        CDUnknownFunctionPointerType _field292;
        CDUnknownFunctionPointerType _field293;
        CDUnknownFunctionPointerType _field294;
        CDUnknownFunctionPointerType _field295;
        CDUnknownFunctionPointerType _field296;
        CDUnknownFunctionPointerType _field297;
        CDUnknownFunctionPointerType _field298;
        CDUnknownFunctionPointerType _field299;
        CDUnknownFunctionPointerType _field300;
        CDUnknownFunctionPointerType _field301;
        CDUnknownFunctionPointerType _field302;
        CDUnknownFunctionPointerType _field303;
        CDUnknownFunctionPointerType _field304;
        CDUnknownFunctionPointerType _field305;
        CDUnknownFunctionPointerType _field306;
        CDUnknownFunctionPointerType _field307;
        CDUnknownFunctionPointerType _field308;
        CDUnknownFunctionPointerType _field309;
        CDUnknownFunctionPointerType _field310;
        CDUnknownFunctionPointerType _field311;
        CDUnknownFunctionPointerType _field312;
        CDUnknownFunctionPointerType _field313;
        CDUnknownFunctionPointerType _field314;
        CDUnknownFunctionPointerType _field315;
        CDUnknownFunctionPointerType _field316;
        CDUnknownFunctionPointerType _field317;
        CDUnknownFunctionPointerType _field318;
        CDUnknownFunctionPointerType _field319;
        CDUnknownFunctionPointerType _field320;
        CDUnknownFunctionPointerType _field321;
        CDUnknownFunctionPointerType _field322;
        CDUnknownFunctionPointerType _field323;
        CDUnknownFunctionPointerType _field324;
        CDUnknownFunctionPointerType _field325;
        CDUnknownFunctionPointerType _field326;
        CDUnknownFunctionPointerType _field327;
        CDUnknownFunctionPointerType _field328;
        CDUnknownFunctionPointerType _field329;
        CDUnknownFunctionPointerType _field330;
        CDUnknownFunctionPointerType _field331;
        CDUnknownFunctionPointerType _field332;
        CDUnknownFunctionPointerType _field333;
        CDUnknownFunctionPointerType _field334;
        CDUnknownFunctionPointerType _field335;
        CDUnknownFunctionPointerType _field336;
        CDUnknownFunctionPointerType _field337;
        CDUnknownFunctionPointerType _field338;
        CDUnknownFunctionPointerType _field339;
        CDUnknownFunctionPointerType _field340;
        CDUnknownFunctionPointerType _field341;
        CDUnknownFunctionPointerType _field342;
        CDUnknownFunctionPointerType _field343;
        CDUnknownFunctionPointerType _field344;
        CDUnknownFunctionPointerType _field345;
        CDUnknownFunctionPointerType _field346;
        CDUnknownFunctionPointerType _field347;
        CDUnknownFunctionPointerType _field348;
        CDUnknownFunctionPointerType _field349;
        CDUnknownFunctionPointerType _field350;
        CDUnknownFunctionPointerType _field351;
        CDUnknownFunctionPointerType _field352;
        CDUnknownFunctionPointerType _field353;
        CDUnknownFunctionPointerType _field354;
        CDUnknownFunctionPointerType _field355;
        CDUnknownFunctionPointerType _field356;
        CDUnknownFunctionPointerType _field357;
        CDUnknownFunctionPointerType _field358;
        CDUnknownFunctionPointerType _field359;
        CDUnknownFunctionPointerType _field360;
        CDUnknownFunctionPointerType _field361;
        CDUnknownFunctionPointerType _field362;
        CDUnknownFunctionPointerType _field363;
        CDUnknownFunctionPointerType _field364;
        CDUnknownFunctionPointerType _field365;
        CDUnknownFunctionPointerType _field366;
        CDUnknownFunctionPointerType _field367;
        CDUnknownFunctionPointerType _field368;
        CDUnknownFunctionPointerType _field369;
        CDUnknownFunctionPointerType _field370;
        CDUnknownFunctionPointerType _field371;
        CDUnknownFunctionPointerType _field372;
        CDUnknownFunctionPointerType _field373;
        CDUnknownFunctionPointerType _field374;
        CDUnknownFunctionPointerType _field375;
        CDUnknownFunctionPointerType _field376;
        CDUnknownFunctionPointerType _field377;
        CDUnknownFunctionPointerType _field378;
        CDUnknownFunctionPointerType _field379;
        CDUnknownFunctionPointerType _field380;
        CDUnknownFunctionPointerType _field381;
        CDUnknownFunctionPointerType _field382;
        CDUnknownFunctionPointerType _field383;
        CDUnknownFunctionPointerType _field384;
        CDUnknownFunctionPointerType _field385;
        CDUnknownFunctionPointerType _field386;
        CDUnknownFunctionPointerType _field387;
        CDUnknownFunctionPointerType _field388;
        CDUnknownFunctionPointerType _field389;
        CDUnknownFunctionPointerType _field390;
        CDUnknownFunctionPointerType _field391;
        CDUnknownFunctionPointerType _field392;
        CDUnknownFunctionPointerType _field393;
        CDUnknownFunctionPointerType _field394;
        CDUnknownFunctionPointerType _field395;
        CDUnknownFunctionPointerType _field396;
        CDUnknownFunctionPointerType _field397;
        CDUnknownFunctionPointerType _field398;
        CDUnknownFunctionPointerType _field399;
        CDUnknownFunctionPointerType _field400;
        CDUnknownFunctionPointerType _field401;
        CDUnknownFunctionPointerType _field402;
        CDUnknownFunctionPointerType _field403;
        CDUnknownFunctionPointerType _field404;
        CDUnknownFunctionPointerType _field405;
        CDUnknownFunctionPointerType _field406;
        CDUnknownFunctionPointerType _field407;
        CDUnknownFunctionPointerType _field408;
        CDUnknownFunctionPointerType _field409;
        CDUnknownFunctionPointerType _field410;
        CDUnknownFunctionPointerType _field411;
        CDUnknownFunctionPointerType _field412;
        CDUnknownFunctionPointerType _field413;
        CDUnknownFunctionPointerType _field414;
        CDUnknownFunctionPointerType _field415;
        CDUnknownFunctionPointerType _field416;
        CDUnknownFunctionPointerType _field417;
        CDUnknownFunctionPointerType _field418;
        CDUnknownFunctionPointerType _field419;
        CDUnknownFunctionPointerType _field420;
        CDUnknownFunctionPointerType _field421;
        CDUnknownFunctionPointerType _field422;
        CDUnknownFunctionPointerType _field423;
        CDUnknownFunctionPointerType _field424;
        CDUnknownFunctionPointerType _field425;
        CDUnknownFunctionPointerType _field426;
        CDUnknownFunctionPointerType _field427;
        CDUnknownFunctionPointerType _field428;
        CDUnknownFunctionPointerType _field429;
        CDUnknownFunctionPointerType _field430;
        CDUnknownFunctionPointerType _field431;
        CDUnknownFunctionPointerType _field432;
        CDUnknownFunctionPointerType _field433;
        CDUnknownFunctionPointerType _field434;
        CDUnknownFunctionPointerType _field435;
        CDUnknownFunctionPointerType _field436;
        CDUnknownFunctionPointerType _field437;
        CDUnknownFunctionPointerType _field438;
        CDUnknownFunctionPointerType _field439;
        CDUnknownFunctionPointerType _field440;
        CDUnknownFunctionPointerType _field441;
        CDUnknownFunctionPointerType _field442;
        CDUnknownFunctionPointerType _field443;
        CDUnknownFunctionPointerType _field444;
        CDUnknownFunctionPointerType _field445;
        CDUnknownFunctionPointerType _field446;
        CDUnknownFunctionPointerType _field447;
        CDUnknownFunctionPointerType _field448;
        CDUnknownFunctionPointerType _field449;
        CDUnknownFunctionPointerType _field450;
        CDUnknownFunctionPointerType _field451;
        CDUnknownFunctionPointerType _field452;
        CDUnknownFunctionPointerType _field453;
        CDUnknownFunctionPointerType _field454;
        CDUnknownFunctionPointerType _field455;
        CDUnknownFunctionPointerType _field456;
        CDUnknownFunctionPointerType _field457;
        CDUnknownFunctionPointerType _field458;
        CDUnknownFunctionPointerType _field459;
        CDUnknownFunctionPointerType _field460;
        CDUnknownFunctionPointerType _field461;
        CDUnknownFunctionPointerType _field462;
        CDUnknownFunctionPointerType _field463;
        CDUnknownFunctionPointerType _field464;
        CDUnknownFunctionPointerType _field465;
        CDUnknownFunctionPointerType _field466;
        CDUnknownFunctionPointerType _field467;
        CDUnknownFunctionPointerType _field468;
        CDUnknownFunctionPointerType _field469;
        CDUnknownFunctionPointerType _field470;
        CDUnknownFunctionPointerType _field471;
        CDUnknownFunctionPointerType _field472;
        CDUnknownFunctionPointerType _field473;
        CDUnknownFunctionPointerType _field474;
        CDUnknownFunctionPointerType _field475;
        CDUnknownFunctionPointerType _field476;
        CDUnknownFunctionPointerType _field477;
        CDUnknownFunctionPointerType _field478;
        CDUnknownFunctionPointerType _field479;
        CDUnknownFunctionPointerType _field480;
        CDUnknownFunctionPointerType _field481;
        CDUnknownFunctionPointerType _field482;
        CDUnknownFunctionPointerType _field483;
        CDUnknownFunctionPointerType _field484;
        CDUnknownFunctionPointerType _field485;
        CDUnknownFunctionPointerType _field486;
        CDUnknownFunctionPointerType _field487;
        CDUnknownFunctionPointerType _field488;
        CDUnknownFunctionPointerType _field489;
        CDUnknownFunctionPointerType _field490;
        CDUnknownFunctionPointerType _field491;
        CDUnknownFunctionPointerType _field492;
        CDUnknownFunctionPointerType _field493;
        CDUnknownFunctionPointerType _field494;
        CDUnknownFunctionPointerType _field495;
        CDUnknownFunctionPointerType _field496;
        CDUnknownFunctionPointerType _field497;
        CDUnknownFunctionPointerType _field498;
        CDUnknownFunctionPointerType _field499;
        CDUnknownFunctionPointerType _field500;
        CDUnknownFunctionPointerType _field501;
        CDUnknownFunctionPointerType _field502;
        CDUnknownFunctionPointerType _field503;
        CDUnknownFunctionPointerType _field504;
        CDUnknownFunctionPointerType _field505;
        CDUnknownFunctionPointerType _field506;
        CDUnknownFunctionPointerType _field507;
        CDUnknownFunctionPointerType _field508;
        CDUnknownFunctionPointerType _field509;
        CDUnknownFunctionPointerType _field510;
        CDUnknownFunctionPointerType _field511;
        CDUnknownFunctionPointerType _field512;
        CDUnknownFunctionPointerType _field513;
        CDUnknownFunctionPointerType _field514;
        CDUnknownFunctionPointerType _field515;
        CDUnknownFunctionPointerType _field516;
        CDUnknownFunctionPointerType _field517;
        CDUnknownFunctionPointerType _field518;
        CDUnknownFunctionPointerType _field519;
        CDUnknownFunctionPointerType _field520;
        CDUnknownFunctionPointerType _field521;
        CDUnknownFunctionPointerType _field522;
        CDUnknownFunctionPointerType _field523;
        CDUnknownFunctionPointerType _field524;
        CDUnknownFunctionPointerType _field525;
        CDUnknownFunctionPointerType _field526;
        CDUnknownFunctionPointerType _field527;
        CDUnknownFunctionPointerType _field528;
        CDUnknownFunctionPointerType _field529;
        CDUnknownFunctionPointerType _field530;
        CDUnknownFunctionPointerType _field531;
        CDUnknownFunctionPointerType _field532;
        CDUnknownFunctionPointerType _field533;
        CDUnknownFunctionPointerType _field534;
        CDUnknownFunctionPointerType _field535;
        CDUnknownFunctionPointerType _field536;
        CDUnknownFunctionPointerType _field537;
        CDUnknownFunctionPointerType _field538;
        CDUnknownFunctionPointerType _field539;
        CDUnknownFunctionPointerType _field540;
        CDUnknownFunctionPointerType _field541;
        CDUnknownFunctionPointerType _field542;
        CDUnknownFunctionPointerType _field543;
        CDUnknownFunctionPointerType _field544;
        CDUnknownFunctionPointerType _field545;
        CDUnknownFunctionPointerType _field546;
        CDUnknownFunctionPointerType _field547;
        CDUnknownFunctionPointerType _field548;
        CDUnknownFunctionPointerType _field549;
        CDUnknownFunctionPointerType _field550;
        CDUnknownFunctionPointerType _field551;
        CDUnknownFunctionPointerType _field552;
        CDUnknownFunctionPointerType _field553;
        CDUnknownFunctionPointerType _field554;
        CDUnknownFunctionPointerType _field555;
        CDUnknownFunctionPointerType _field556;
        CDUnknownFunctionPointerType _field557;
        CDUnknownFunctionPointerType _field558;
        CDUnknownFunctionPointerType _field559;
        CDUnknownFunctionPointerType _field560;
        CDUnknownFunctionPointerType _field561;
        CDUnknownFunctionPointerType _field562;
        CDUnknownFunctionPointerType _field563;
        CDUnknownFunctionPointerType _field564;
        CDUnknownFunctionPointerType _field565;
        CDUnknownFunctionPointerType _field566;
        CDUnknownFunctionPointerType _field567;
        CDUnknownFunctionPointerType _field568;
        CDUnknownFunctionPointerType _field569;
        CDUnknownFunctionPointerType _field570;
        CDUnknownFunctionPointerType _field571;
        CDUnknownFunctionPointerType _field572;
        CDUnknownFunctionPointerType _field573;
        CDUnknownFunctionPointerType _field574;
        CDUnknownFunctionPointerType _field575;
        CDUnknownFunctionPointerType _field576;
        CDUnknownFunctionPointerType _field577;
        CDUnknownFunctionPointerType _field578;
        CDUnknownFunctionPointerType _field579;
        CDUnknownFunctionPointerType _field580;
        CDUnknownFunctionPointerType _field581;
        CDUnknownFunctionPointerType _field582;
        CDUnknownFunctionPointerType _field583;
        CDUnknownFunctionPointerType _field584;
        CDUnknownFunctionPointerType _field585;
        CDUnknownFunctionPointerType _field586;
        CDUnknownFunctionPointerType _field587;
        CDUnknownFunctionPointerType _field588;
        CDUnknownFunctionPointerType _field589;
        CDUnknownFunctionPointerType _field590;
        CDUnknownFunctionPointerType _field591;
        CDUnknownFunctionPointerType _field592;
        CDUnknownFunctionPointerType _field593;
        CDUnknownFunctionPointerType _field594;
        CDUnknownFunctionPointerType _field595;
        CDUnknownFunctionPointerType _field596;
        CDUnknownFunctionPointerType _field597;
        CDUnknownFunctionPointerType _field598;
        CDUnknownFunctionPointerType _field599;
        CDUnknownFunctionPointerType _field600;
        CDUnknownFunctionPointerType _field601;
        CDUnknownFunctionPointerType _field602;
        CDUnknownFunctionPointerType _field603;
        CDUnknownFunctionPointerType _field604;
        CDUnknownFunctionPointerType _field605;
        CDUnknownFunctionPointerType _field606;
        CDUnknownFunctionPointerType _field607;
        CDUnknownFunctionPointerType _field608;
        CDUnknownFunctionPointerType _field609;
        CDUnknownFunctionPointerType _field610;
        CDUnknownFunctionPointerType _field611;
        CDUnknownFunctionPointerType _field612;
        CDUnknownFunctionPointerType _field613;
        CDUnknownFunctionPointerType _field614;
        CDUnknownFunctionPointerType _field615;
        CDUnknownFunctionPointerType _field616;
        CDUnknownFunctionPointerType _field617;
        CDUnknownFunctionPointerType _field618;
        CDUnknownFunctionPointerType _field619;
        CDUnknownFunctionPointerType _field620;
        CDUnknownFunctionPointerType _field621;
        CDUnknownFunctionPointerType _field622;
        CDUnknownFunctionPointerType _field623;
        CDUnknownFunctionPointerType _field624;
        CDUnknownFunctionPointerType _field625;
        CDUnknownFunctionPointerType _field626;
        CDUnknownFunctionPointerType _field627;
        CDUnknownFunctionPointerType _field628;
        CDUnknownFunctionPointerType _field629;
        CDUnknownFunctionPointerType _field630;
        CDUnknownFunctionPointerType _field631;
        CDUnknownFunctionPointerType _field632;
        CDUnknownFunctionPointerType _field633;
        CDUnknownFunctionPointerType _field634;
        CDUnknownFunctionPointerType _field635;
        CDUnknownFunctionPointerType _field636;
        CDUnknownFunctionPointerType _field637;
        CDUnknownFunctionPointerType _field638;
        CDUnknownFunctionPointerType _field639;
        CDUnknownFunctionPointerType _field640;
        CDUnknownFunctionPointerType _field641;
        CDUnknownFunctionPointerType _field642;
        CDUnknownFunctionPointerType _field643;
        CDUnknownFunctionPointerType _field644;
        CDUnknownFunctionPointerType _field645;
        CDUnknownFunctionPointerType _field646;
        CDUnknownFunctionPointerType _field647;
        CDUnknownFunctionPointerType _field648;
        CDUnknownFunctionPointerType _field649;
        CDUnknownFunctionPointerType _field650;
        CDUnknownFunctionPointerType _field651;
        CDUnknownFunctionPointerType _field652;
        CDUnknownFunctionPointerType _field653;
        CDUnknownFunctionPointerType _field654;
        CDUnknownFunctionPointerType _field655;
        CDUnknownFunctionPointerType _field656;
        CDUnknownFunctionPointerType _field657;
        CDUnknownFunctionPointerType _field658;
        CDUnknownFunctionPointerType _field659;
        CDUnknownFunctionPointerType _field660;
        CDUnknownFunctionPointerType _field661;
        CDUnknownFunctionPointerType _field662;
        CDUnknownFunctionPointerType _field663;
        CDUnknownFunctionPointerType _field664;
        CDUnknownFunctionPointerType _field665;
        CDUnknownFunctionPointerType _field666;
        CDUnknownFunctionPointerType _field667;
        CDUnknownFunctionPointerType _field668;
        CDUnknownFunctionPointerType _field669;
        CDUnknownFunctionPointerType _field670;
        CDUnknownFunctionPointerType _field671;
        CDUnknownFunctionPointerType _field672;
        CDUnknownFunctionPointerType _field673;
        CDUnknownFunctionPointerType _field674;
        CDUnknownFunctionPointerType _field675;
        CDUnknownFunctionPointerType _field676;
        CDUnknownFunctionPointerType _field677;
        CDUnknownFunctionPointerType _field678;
        CDUnknownFunctionPointerType _field679;
        CDUnknownFunctionPointerType _field680;
        CDUnknownFunctionPointerType _field681;
        CDUnknownFunctionPointerType _field682;
        CDUnknownFunctionPointerType _field683;
        CDUnknownFunctionPointerType _field684;
        CDUnknownFunctionPointerType _field685;
        CDUnknownFunctionPointerType _field686;
        CDUnknownFunctionPointerType _field687;
        CDUnknownFunctionPointerType _field688;
        CDUnknownFunctionPointerType _field689;
        CDUnknownFunctionPointerType _field690;
        CDUnknownFunctionPointerType _field691;
        CDUnknownFunctionPointerType _field692;
        CDUnknownFunctionPointerType _field693;
        CDUnknownFunctionPointerType _field694;
        CDUnknownFunctionPointerType _field695;
        CDUnknownFunctionPointerType _field696;
        CDUnknownFunctionPointerType _field697;
        CDUnknownFunctionPointerType _field698;
        CDUnknownFunctionPointerType _field699;
        CDUnknownFunctionPointerType _field700;
        CDUnknownFunctionPointerType _field701;
        CDUnknownFunctionPointerType _field702;
        CDUnknownFunctionPointerType _field703;
        CDUnknownFunctionPointerType _field704;
        CDUnknownFunctionPointerType _field705;
        CDUnknownFunctionPointerType _field706;
        CDUnknownFunctionPointerType _field707;
        CDUnknownFunctionPointerType _field708;
        CDUnknownFunctionPointerType _field709;
        CDUnknownFunctionPointerType _field710;
        CDUnknownFunctionPointerType _field711;
        CDUnknownFunctionPointerType _field712;
        CDUnknownFunctionPointerType _field713;
        CDUnknownFunctionPointerType _field714;
        CDUnknownFunctionPointerType _field715;
        CDUnknownFunctionPointerType _field716;
        CDUnknownFunctionPointerType _field717;
        CDUnknownFunctionPointerType _field718;
        CDUnknownFunctionPointerType _field719;
        CDUnknownFunctionPointerType _field720;
        CDUnknownFunctionPointerType _field721;
        CDUnknownFunctionPointerType _field722;
        CDUnknownFunctionPointerType _field723;
        CDUnknownFunctionPointerType _field724;
        CDUnknownFunctionPointerType _field725;
        CDUnknownFunctionPointerType _field726;
        CDUnknownFunctionPointerType _field727;
        CDUnknownFunctionPointerType _field728;
        CDUnknownFunctionPointerType _field729;
        CDUnknownFunctionPointerType _field730;
        CDUnknownFunctionPointerType _field731;
        CDUnknownFunctionPointerType _field732;
        CDUnknownFunctionPointerType _field733;
        CDUnknownFunctionPointerType _field734;
        CDUnknownFunctionPointerType _field735;
        CDUnknownFunctionPointerType _field736;
        CDUnknownFunctionPointerType _field737;
        CDUnknownFunctionPointerType _field738;
        CDUnknownFunctionPointerType _field739;
        CDUnknownFunctionPointerType _field740;
        CDUnknownFunctionPointerType _field741;
        CDUnknownFunctionPointerType _field742;
        CDUnknownFunctionPointerType _field743;
        CDUnknownFunctionPointerType _field744;
        CDUnknownFunctionPointerType _field745;
        CDUnknownFunctionPointerType _field746;
        CDUnknownFunctionPointerType _field747;
        CDUnknownFunctionPointerType _field748;
        CDUnknownFunctionPointerType _field749;
        CDUnknownFunctionPointerType _field750;
        CDUnknownFunctionPointerType _field751;
        CDUnknownFunctionPointerType _field752;
        CDUnknownFunctionPointerType _field753;
        CDUnknownFunctionPointerType _field754;
        CDUnknownFunctionPointerType _field755;
        CDUnknownFunctionPointerType _field756;
        CDUnknownFunctionPointerType _field757;
        CDUnknownFunctionPointerType _field758;
        CDUnknownFunctionPointerType _field759;
        CDUnknownFunctionPointerType _field760;
        CDUnknownFunctionPointerType _field761;
        CDUnknownFunctionPointerType _field762;
        CDUnknownFunctionPointerType _field763;
        CDUnknownFunctionPointerType _field764;
        CDUnknownFunctionPointerType _field765;
        CDUnknownFunctionPointerType _field766;
        CDUnknownFunctionPointerType _field767;
        CDUnknownFunctionPointerType _field768;
        CDUnknownFunctionPointerType _field769;
        CDUnknownFunctionPointerType _field770;
        CDUnknownFunctionPointerType _field771;
        CDUnknownFunctionPointerType _field772;
        CDUnknownFunctionPointerType _field773;
        CDUnknownFunctionPointerType _field774;
        CDUnknownFunctionPointerType _field775;
        CDUnknownFunctionPointerType _field776;
        CDUnknownFunctionPointerType _field777;
        CDUnknownFunctionPointerType _field778;
        CDUnknownFunctionPointerType _field779;
        CDUnknownFunctionPointerType _field780;
        CDUnknownFunctionPointerType _field781;
        CDUnknownFunctionPointerType _field782;
        CDUnknownFunctionPointerType _field783;
        CDUnknownFunctionPointerType _field784;
        CDUnknownFunctionPointerType _field785;
        CDUnknownFunctionPointerType _field786;
        CDUnknownFunctionPointerType _field787;
        CDUnknownFunctionPointerType _field788;
        CDUnknownFunctionPointerType _field789;
        CDUnknownFunctionPointerType _field790;
        CDUnknownFunctionPointerType _field791;
        CDUnknownFunctionPointerType _field792;
        CDUnknownFunctionPointerType _field793;
        CDUnknownFunctionPointerType _field794;
        CDUnknownFunctionPointerType _field795;
        CDUnknownFunctionPointerType _field796;
        CDUnknownFunctionPointerType _field797;
        CDUnknownFunctionPointerType _field798;
        CDUnknownFunctionPointerType _field799;
        CDUnknownFunctionPointerType _field800;
        CDUnknownFunctionPointerType _field801;
        CDUnknownFunctionPointerType _field802;
        CDUnknownFunctionPointerType _field803;
        CDUnknownFunctionPointerType _field804;
        CDUnknownFunctionPointerType _field805;
        CDUnknownFunctionPointerType _field806;
        CDUnknownFunctionPointerType _field807;
        CDUnknownFunctionPointerType _field808;
        CDUnknownFunctionPointerType _field809;
        CDUnknownFunctionPointerType _field810;
        CDUnknownFunctionPointerType _field811;
        CDUnknownFunctionPointerType _field812;
        CDUnknownFunctionPointerType _field813;
        CDUnknownFunctionPointerType _field814;
        CDUnknownFunctionPointerType _field815;
        CDUnknownFunctionPointerType _field816;
        CDUnknownFunctionPointerType _field817;
        CDUnknownFunctionPointerType _field818;
        CDUnknownFunctionPointerType _field819;
        CDUnknownFunctionPointerType _field820;
        CDUnknownFunctionPointerType _field821;
        CDUnknownFunctionPointerType _field822;
        CDUnknownFunctionPointerType _field823;
        CDUnknownFunctionPointerType _field824;
        CDUnknownFunctionPointerType _field825;
        CDUnknownFunctionPointerType _field826;
        CDUnknownFunctionPointerType _field827;
        CDUnknownFunctionPointerType _field828;
        CDUnknownFunctionPointerType _field829;
        CDUnknownFunctionPointerType _field830;
        CDUnknownFunctionPointerType _field831;
        CDUnknownFunctionPointerType _field832;
        CDUnknownFunctionPointerType _field833;
        CDUnknownFunctionPointerType _field834;
        CDUnknownFunctionPointerType _field835;
        CDUnknownFunctionPointerType _field836;
        CDUnknownFunctionPointerType _field837;
        CDUnknownFunctionPointerType _field838;
        CDUnknownFunctionPointerType _field839;
        CDUnknownFunctionPointerType _field840;
        CDUnknownFunctionPointerType _field841;
        CDUnknownFunctionPointerType _field842;
        CDUnknownFunctionPointerType _field843;
        CDUnknownFunctionPointerType _field844;
        CDUnknownFunctionPointerType _field845;
        CDUnknownFunctionPointerType _field846;
        CDUnknownFunctionPointerType _field847;
        CDUnknownFunctionPointerType _field848;
        CDUnknownFunctionPointerType _field849;
        CDUnknownFunctionPointerType _field850;
        CDUnknownFunctionPointerType _field851;
        CDUnknownFunctionPointerType _field852;
        CDUnknownFunctionPointerType _field853;
        CDUnknownFunctionPointerType _field854;
        CDUnknownFunctionPointerType _field855;
        CDUnknownFunctionPointerType _field856;
        CDUnknownFunctionPointerType _field857;
        CDUnknownFunctionPointerType _field858;
        CDUnknownFunctionPointerType _field859;
        CDUnknownFunctionPointerType _field860;
        CDUnknownFunctionPointerType _field861;
        CDUnknownFunctionPointerType _field862;
        CDUnknownFunctionPointerType _field863;
        CDUnknownFunctionPointerType _field864;
        CDUnknownFunctionPointerType _field865;
        CDUnknownFunctionPointerType _field866;
        CDUnknownFunctionPointerType _field867;
        CDUnknownFunctionPointerType _field868;
        CDUnknownFunctionPointerType _field869;
        CDUnknownFunctionPointerType _field870;
        CDUnknownFunctionPointerType _field871;
        CDUnknownFunctionPointerType _field872;
        CDUnknownFunctionPointerType _field873;
        CDUnknownFunctionPointerType _field874;
        CDUnknownFunctionPointerType _field875;
        CDUnknownFunctionPointerType _field876;
        CDUnknownFunctionPointerType _field877;
        CDUnknownFunctionPointerType _field878;
        CDUnknownFunctionPointerType _field879;
        CDUnknownFunctionPointerType _field880;
        CDUnknownFunctionPointerType _field881;
        CDUnknownFunctionPointerType _field882;
        CDUnknownFunctionPointerType _field883;
        CDUnknownFunctionPointerType _field884;
        CDUnknownFunctionPointerType _field885;
        CDUnknownFunctionPointerType _field886;
        CDUnknownFunctionPointerType _field887;
        CDUnknownFunctionPointerType _field888;
        CDUnknownFunctionPointerType _field889;
        CDUnknownFunctionPointerType _field890;
        CDUnknownFunctionPointerType _field891;
        CDUnknownFunctionPointerType _field892;
        CDUnknownFunctionPointerType _field893;
        CDUnknownFunctionPointerType _field894;
        CDUnknownFunctionPointerType _field895;
        CDUnknownFunctionPointerType _field896;
        CDUnknownFunctionPointerType _field897;
        CDUnknownFunctionPointerType _field898;
        CDUnknownFunctionPointerType _field899;
        CDUnknownFunctionPointerType _field900;
        CDUnknownFunctionPointerType _field901;
        CDUnknownFunctionPointerType _field902;
        CDUnknownFunctionPointerType _field903;
        CDUnknownFunctionPointerType _field904;
        CDUnknownFunctionPointerType _field905;
        CDUnknownFunctionPointerType _field906;
        CDUnknownFunctionPointerType _field907;
        CDUnknownFunctionPointerType _field908;
        CDUnknownFunctionPointerType _field909;
        CDUnknownFunctionPointerType _field910;
        CDUnknownFunctionPointerType _field911;
        CDUnknownFunctionPointerType _field912;
        CDUnknownFunctionPointerType _field913;
        CDUnknownFunctionPointerType _field914;
        CDUnknownFunctionPointerType _field915;
        CDUnknownFunctionPointerType _field916;
        CDUnknownFunctionPointerType _field917;
        CDUnknownFunctionPointerType _field918;
        CDUnknownFunctionPointerType _field919;
        CDUnknownFunctionPointerType _field920;
        CDUnknownFunctionPointerType _field921;
        CDUnknownFunctionPointerType _field922;
        CDUnknownFunctionPointerType _field923;
        CDUnknownFunctionPointerType _field924;
        CDUnknownFunctionPointerType _field925;
        CDUnknownFunctionPointerType _field926;
        CDUnknownFunctionPointerType _field927;
        CDUnknownFunctionPointerType _field928;
        CDUnknownFunctionPointerType _field929;
        CDUnknownFunctionPointerType _field930;
        CDUnknownFunctionPointerType _field931;
        CDUnknownFunctionPointerType _field932;
        CDUnknownFunctionPointerType _field933;
        CDUnknownFunctionPointerType _field934;
        CDUnknownFunctionPointerType _field935;
        CDUnknownFunctionPointerType _field936;
        CDUnknownFunctionPointerType _field937;
        CDUnknownFunctionPointerType _field938;
        CDUnknownFunctionPointerType _field939;
        CDUnknownFunctionPointerType _field940;
        CDUnknownFunctionPointerType _field941;
        CDUnknownFunctionPointerType _field942;
        CDUnknownFunctionPointerType _field943;
        CDUnknownFunctionPointerType _field944;
        CDUnknownFunctionPointerType _field945;
        CDUnknownFunctionPointerType _field946;
        CDUnknownFunctionPointerType _field947;
        CDUnknownFunctionPointerType _field948;
        CDUnknownFunctionPointerType _field949;
        CDUnknownFunctionPointerType _field950;
        CDUnknownFunctionPointerType _field951;
        CDUnknownFunctionPointerType _field952;
        CDUnknownFunctionPointerType _field953;
        CDUnknownFunctionPointerType _field954;
        CDUnknownFunctionPointerType _field955;
        CDUnknownFunctionPointerType _field956;
        CDUnknownFunctionPointerType _field957;
        CDUnknownFunctionPointerType _field958;
        CDUnknownFunctionPointerType _field959;
        CDUnknownFunctionPointerType _field960;
        CDUnknownFunctionPointerType _field961;
        CDUnknownFunctionPointerType _field962;
        CDUnknownFunctionPointerType _field963;
        CDUnknownFunctionPointerType _field964;
        CDUnknownFunctionPointerType _field965;
        CDUnknownFunctionPointerType _field966;
        CDUnknownFunctionPointerType _field967;
        CDUnknownFunctionPointerType _field968;
        CDUnknownFunctionPointerType _field969;
        CDUnknownFunctionPointerType _field970;
        CDUnknownFunctionPointerType _field971;
        CDUnknownFunctionPointerType _field972;
        CDUnknownFunctionPointerType _field973;
        CDUnknownFunctionPointerType _field974;
    } _field2;
    struct _CGLPrivateObject *_field3;
    void *_field4;
};

struct _CGLPrivateObject;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __C3DAnimation {
    struct __C3DEntity _field1;
    double _field2;
    float _field3;
    struct __C3DTimingFunction *_field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    double _field5;
    double _field6;
    double _field7;
    float _field8;
    float _field9;
    float _field10;
    CDUnknownFunctionPointerType _field11;
    void *_field12;
    void *_field13;
    void *_field14;
    struct __C3DAnimationEvents *_field15;
    CDStruct_2921ca3b _field16;
};

struct __C3DAnimationChannel {
    struct __CFRuntimeBase _field1;
    struct __C3DAnimation *_field2;
    struct __CFArray *_field3;
    void *_field4;
    struct __C3DModelTarget *_field5;
    struct __CFString *_field6;
};

struct __C3DAnimationManager {
    struct __CFRuntimeBase _field1;
    struct __C3DModelValueStorage *_field2;
    struct __CFDictionary *_field3;
    struct __CFDictionary *_field4;
    struct __CFSet *_field5;
    struct __CFArray *_field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    struct _C3DAnimationPendingEvent *_field10;
    struct __C3DAllocator *_field11;
    struct __CFDictionary *_field12;
    struct __CFArray *_field13;
    double _field14;
    double _field15;
    double _field16;
    struct _opaque_pthread_mutex_t _field17;
    int _field18;
    int _field19;
    int _field20;
    int _field21;
};

struct __C3DArray;

struct __C3DBlendStates;

struct __C3DConstraint {
    struct __C3DEntity _field1;
    struct __CFString *_field2;
    CDStruct_2921ca3b _field3;
    float _field4;
    _Bool _field5;
};

struct __C3DEffectCommonProfile {
    struct __CFRuntimeBase _field1;
    struct __C3DMaterial *_field2;
    int _field3;
    struct __C3DEffectSlot *_field4;
    struct __C3DEffectSlot *_field5;
    struct __C3DEffectSlot *_field6;
    struct __C3DEffectSlot *_field7;
    struct __C3DEffectSlot *_field8;
    struct __C3DEffectSlot *_field9;
    struct __C3DEffectSlot *_field10;
    struct __C3DEffectSlot *_field11;
    struct __C3DEffectSlot *_field12;
    struct __C3DEffectSlot *_field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    char _field18;
    long long _field19;
    _Bool _field20;
    _Bool _field21;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :11;
};

struct __C3DEffectSlot {
    struct __CFRuntimeBase _field1;
    struct C3DColor4 _field2;
    void *_field3;
    union {
        struct __C3DImage *_field1;
        void *_field2;
        struct __C3DImageProxy *_field3;
        struct __C3DTexture *_field4;
    } _field4;
    unsigned int :8;
    unsigned int :1;
    int _field5;
    struct __C3DTextureSampler *_field6;
    struct __C3DTransforms *_field7;
    float _field8;
    int _field9;
    void *_field10;
};

struct __C3DEngineStats {
    unsigned int verticesProcessed;
    unsigned int primitivesProcessed;
    unsigned int drawCount;
    unsigned int drawStep;
    unsigned int frameCount;
    unsigned int fboSwitches;
    unsigned int vboSwitches;
    unsigned int attSwitches;
    unsigned int attEnabling;
    unsigned int iboSwitches;
    unsigned int vaoSwitches;
    unsigned int prgSwitches;
    unsigned int texSwitches;
    unsigned int rssSwitches;
    unsigned int getCount;
    unsigned int uniformFloatSent;
    unsigned int uniformIntSent;
    unsigned int uniformVector2Sent;
    unsigned int uniformVector3Sent;
    unsigned int uniformVector4Sent;
    unsigned int uniformMatrix4Sent;
    unsigned int vboUploaded;
    unsigned int iboUploaded;
    unsigned int texUploaded;
    double cpuTime;
    double cstrTime;
    double phyTime;
    double prtTime;
    double animTime;
    double syncTime;
    double cullTime;
    double liteTime;
    double sortTime;
    double twoDTime;
    double delegateTime;
    double glFlushTime;
    double waitDisplayLinkTime;
    double lastDisplayLinkTime;
    unsigned int prgCount;
    unsigned int texCount;
    unsigned int fboCount;
    unsigned int vboCount;
    unsigned int rboCount;
    unsigned int iboCount;
    unsigned int cboCount;
    unsigned int vaoCount;
    unsigned int fboMemory;
    unsigned int rboMemory;
    unsigned int vboMemory;
    unsigned int iboMemory;
    unsigned int cboMemory;
    unsigned int texMemory;
    unsigned int backBufferMemory;
    unsigned int depthBuffersMemory;
    double frmAvgTime;
    double frmMinTime;
    double frmMaxTime;
    double frameTimeHistory[60];
    unsigned int frameTimeCurrentIndex;
    double startTime;
    double lastFrameTime;
};

struct __C3DEntity {
    struct __CFRuntimeBase _field1;
    void *_field2;
    struct __CFString *_field3;
    struct __CFString *_field4;
    struct __CFDictionary *_field5;
    long long _field6;
    long long _field7;
};

struct __C3DFXPass {
    struct __CFRuntimeBase _field1;
    struct __CFString *_field2;
    int _field3;
    _Bool _field4;
    struct __C3DFXTechnique *_field5;
    struct __CFString *_field6;
    struct __CFString *_field7;
    struct __CFString *_field8;
    _Bool _field9;
    struct __C3DFXProgram *_field10;
    struct __C3DMaterial *_field11;
    struct __C3DBlendStates *_field12;
    struct __C3DRasterizerStates *_field13;
    struct C3DColor4 _field14;
    unsigned char _field15;
    unsigned int _field16;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    struct __C3DRendererElement *_field17;
    unsigned long long _field18;
    unsigned long long _field19;
    struct {
        CDUnknownFunctionPointerType _field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
        CDUnknownFunctionPointerType _field7;
        CDUnknownFunctionPointerType _field8;
        void *_field9;
    } _field20;
    struct {
        CDStruct_2e3d5ba3 _field1;
        CDStruct_2e3d5ba3 _field2;
        unsigned int :1;
        unsigned int :1;
    } _field21;
    struct CGPoint _field22;
    CDStruct_183601bc *_field23;
    unsigned int _field24;
    struct __C3DNode *_field25;
    struct __C3DNode *_field26;
    struct __CFArray *_field27;
    struct __C3DNode *_field28;
    struct __CFString *_field29;
    struct __CFString *_field30;
    struct __CFString *_field31;
    void *_field32;
    struct __C3DFXPassInput **_field33;
    long long _field34;
    long long _field35;
    struct __CFDictionary *_field36;
    struct __CFDictionary *_field37;
    struct {
        unsigned int :1;
        _Bool _field1;
        unsigned char _field2;
    } _field38;
};

struct __C3DFXProgram {
    struct __C3DEntity _field1;
    int _field2;
    unsigned int :1;
    unsigned int :1;
    struct __C3DFXProgramDelegate *_field3;
};

struct __C3DFXTechnique;

struct __C3DFloor {
    struct __C3DGeometry _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    int _field6;
    float _field7;
};

struct __C3DFramebuffer;

struct __C3DGenericSource {
    struct __C3DEntity _field1;
    struct __C3DSourceAccessor *_field2;
    union {
        struct __CFData *_field1;
        void *_field2;
        void *_field3;
    } _field3;
    long long _field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct __C3DGeometry {
    struct __C3DEntity _field1;
    struct __C3DMesh *_field2;
    struct __C3DMaterial *_field3;
    struct __CFArray *_field4;
    struct __CFSet *_field5;
    struct __CFArray *_field6;
    struct __C3DAABB *_field7;
    unsigned int :1;
    CDUnknownFunctionPointerType _field8;
    struct {
        _Bool _field1;
        _Bool _field2;
        unsigned short _field3;
        unsigned short _field4;
        float _field5;
        float _field6;
        unsigned char _field7;
        unsigned char _field8;
        unsigned char _field9;
        unsigned char _field10;
        struct __C3DMeshElement *_field11;
        struct __C3DMeshSource *_field12;
        struct __C3DMesh *_field13;
        _Bool _field14;
        _Bool _field15;
        void *_field16;
        void *_field17;
    } _field9;
};

struct __C3DImage;

struct __C3DKeyframedAnimation {
    struct __C3DAnimation _field1;
    struct __C3DKeyframeController *_field2;
};

struct __C3DLight {
    struct __C3DEntity _field1;
    struct C3DColor4 _field2;
    int _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    struct C3DColor4 _field10;
    float _field11;
    float _field12;
    unsigned int _field13;
    unsigned long long _field14;
    _Bool _field15;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    double _field16;
    double _field17;
    double _field18;
    struct __C3DEffectSlot *_field19;
    struct __C3DFXTechnique *_field20;
    void *_field21;
};

struct __C3DMaterial;

struct __C3DMesh {
    struct __C3DEntity _field1;
    struct __CFArray *_field2[9];
    struct C3DSphere *_field3;
    struct __CFArray **_field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :4;
    long long _field5;
};

struct __C3DMeshElement;

struct __C3DMeshSource {
    struct __C3DGenericSource _field1;
    unsigned short _field2;
    unsigned char _field3;
    unsigned char _field4;
};

struct __C3DMorph {
    struct __C3DEntity _field1;
    int _field2;
    struct __CFArray *_field3;
    struct __C3DGenericSource *_field4;
    unsigned int _field5;
    _Bool _field6;
};

struct __C3DNode;

struct __C3DParametricGeometry {
    struct __C3DGeometry _field1;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
        float _field10;
        float _field11;
        float _field12;
        int _field13;
        int _field14;
        int _field15;
        int _field16;
        int _field17;
        int _field18;
        int _field19;
        int _field20;
        int _field21;
        int _field22;
        int _field23;
        unsigned int _field24;
    } _field2;
    struct {
        CDUnknownFunctionPointerType _field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
    } _field3;
    struct __CFData *_field4;
};

struct __C3DQuaternion {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct __C3DRasterizerStates;

struct __C3DRendererContext {
    struct __CFRuntimeBase _field1;
    int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    float _field7;
    unsigned int _field8;
    struct __C3DTexture *_field9;
    struct __C3DStack *_field10;
    void *_field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    unsigned int _field17;
    struct __CFDictionary *_field18;
    struct __CFDictionary *_field19;
    struct __CFDictionary *_field20;
    struct C3DColor4 _field21;
    void *_field22;
    long long _field23;
    struct __C3DFXProgramObject *_field24;
    struct __C3DEngineStats _field25;
    struct Cache _field26;
    struct {
        unsigned int _field1[5];
        int _field2[5];
        struct {
            int _field1;
            unsigned int _field2;
            unsigned int _field3;
        } _field3[7];
        unsigned int _field4[7];
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
        CDUnknownFunctionPointerType _field7;
        CDUnknownFunctionPointerType _field8;
        CDUnknownFunctionPointerType _field9;
        CDUnknownFunctionPointerType _field10;
        CDUnknownFunctionPointerType _field11;
        CDUnknownFunctionPointerType _field12;
        CDUnknownFunctionPointerType _field13;
        CDUnknownFunctionPointerType _field14;
    } _field27;
    struct VolatileObject _field28[2];
    struct __C3DArray *_field29;
    unsigned int _field30;
    struct __CFDictionary *_field31;
};

struct __C3DResourceManager {
    struct __CFRuntimeBase _field1;
    struct __CFDictionary *_field2;
    struct __CFDictionary *_field3;
    struct __CFDictionary *_field4;
    struct __CFDictionary *_field5;
    struct __CFDictionary *_field6;
    struct __CFDictionary *_field7;
    struct __CFDictionary *_field8;
    unsigned int _field9;
    unsigned int _field10;
    struct __C3DList *_field11;
    _Bool _field12;
    struct __C3DMeshPacker *_field13;
    struct __C3DTexturePacker *_field14;
    _Bool _field15;
    struct _opaque_pthread_mutex_t _field16;
    struct _opaque_pthread_mutex_t _field17;
    id _field18;
    struct __CFDictionary *_field19;
    struct __CFArray *_field20;
};

struct __C3DShapeGeometry {
    struct __C3DGeometry _field1;
    struct {
        char _field1;
        float _field2;
        float _field3;
        float _field4;
        int _field5;
        float _field6;
        struct CGPath *_field7;
        void *_field8;
        struct CGPath *_field9;
        void *_field10;
    } _field2;
    struct __C3DMesh *_field3;
    unsigned char _field4[16];
};

struct __C3DTextGeometry {
    struct __C3DShapeGeometry _field1;
    struct {
        struct __CTFrame *_field1;
        void *_field2;
        void *_field3;
        int _field4;
        int _field5;
        _Bool _field6;
        _Bool _field7;
        _Bool _field8;
        struct CGRect _field9;
    } _field2;
};

struct __C3DTexture;

struct __C3DTextureSampler {
    struct __CFRuntimeBase _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    struct C3DColor4 _field8;
    float _field9;
    unsigned char _field10;
    int _field11;
    unsigned long long _field12;
};

struct __CFArray;

struct __CFData;

struct __CFDictionary;

struct __CFRuntimeBase {
    unsigned long long _field1;
    unsigned char _field2[4];
    unsigned int _field3;
};

struct __CFSet;

struct __CFString;

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct btActionInterface;

struct btAlignedAllocator<btActionInterface *, 16>;

struct btAlignedAllocator<btCollisionObject *, 16>;

struct btAlignedAllocator<btPersistentManifold *, 16>;

struct btAlignedAllocator<btRigidBody *, 16>;

struct btAlignedAllocator<btTypedConstraint *, 16>;

struct btAlignedAllocator<btVector3, 16>;

struct btAlignedAllocator<btWheelInfo, 16>;

struct btAlignedAllocator<float, 16>;

struct btAlignedObjectArray<btActionInterface *> {
    struct btAlignedAllocator<btActionInterface *, 16> _field1;
    int _field2;
    int _field3;
    struct btActionInterface **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btCollisionObject *> {
    struct btAlignedAllocator<btCollisionObject *, 16> _field1;
    int _field2;
    int _field3;
    struct btCollisionObject **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btPersistentManifold *> {
    struct btAlignedAllocator<btPersistentManifold *, 16> _field1;
    int _field2;
    int _field3;
    struct btPersistentManifold **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btRigidBody *> {
    struct btAlignedAllocator<btRigidBody *, 16> _field1;
    int _field2;
    int _field3;
    struct btRigidBody **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btTypedConstraint *> {
    struct btAlignedAllocator<btTypedConstraint *, 16> _field1;
    int _field2;
    int _field3;
    struct btTypedConstraint **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btVector3> {
    struct btAlignedAllocator<btVector3, 16> _field1;
    int _field2;
    int _field3;
    struct btVector3 *_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btWheelInfo> {
    struct btAlignedAllocator<btWheelInfo, 16> _field1;
    int _field2;
    int _field3;
    struct btWheelInfo *_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<float> {
    struct btAlignedAllocator<float, 16> _field1;
    int _field2;
    int _field3;
    float *_field4;
    _Bool _field5;
};

struct btAngularLimit {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    _Bool _field8;
};

struct btBroadphaseInterface;

struct btBroadphaseProxy;

struct btC3DDebugDraw {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
};

struct btCapsuleShape {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    float _field6;
    float _field7;
    int _field8;
};

struct btCharacterControllerInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct btCollisionObject;

struct btCollisionShape {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
};

struct btConstraintSetting {
    float _field1;
    float _field2;
    float _field3;
};

struct btConstraintSolver;

struct btContactSolverInfo {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    int _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    int _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    int _field18;
    int _field19;
    float _field20;
    float _field21;
};

struct btDiscreteDynamicsWorld {
    CDUnknownFunctionPointerType *_field1;
    struct btAlignedObjectArray<btCollisionObject *> _field2;
    struct btDispatcher *_field3;
    struct btDispatcherInfo _field4;
    struct btBroadphaseInterface *_field5;
    struct btIDebugDraw *_field6;
    _Bool _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    void *_field10;
    struct btContactSolverInfo _field11;
    float _field12;
    struct btAlignedObjectArray<btTypedConstraint *> _field13;
    struct InplaceSolverIslandCallback *_field14;
    struct btConstraintSolver *_field15;
    struct btSimulationIslandManager *_field16;
    struct btAlignedObjectArray<btTypedConstraint *> _field17;
    struct btAlignedObjectArray<btRigidBody *> _field18;
    struct btVector3 _field19;
    float _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    struct btAlignedObjectArray<btActionInterface *> _field25;
    int _field26;
    struct btAlignedObjectArray<btPersistentManifold *> _field27;
    _Bool _field28;
};

struct btDispatcher;

struct btDispatcherInfo {
    float _field1;
    int _field2;
    int _field3;
    float _field4;
    _Bool _field5;
    struct btIDebugDraw *_field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    float _field10;
    _Bool _field11;
    float _field12;
};

struct btDynamicsWorld {
    CDUnknownFunctionPointerType *_field1;
    struct btAlignedObjectArray<btCollisionObject *> _field2;
    struct btDispatcher *_field3;
    struct btDispatcherInfo _field4;
    struct btBroadphaseInterface *_field5;
    struct btIDebugDraw *_field6;
    _Bool _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    void *_field10;
    struct btContactSolverInfo _field11;
    float _field12;
};

struct btHashedOverlappingPairCache;

struct btHingeConstraint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    CDUnion_15924c16 _field4;
    float _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
    struct btRigidBody *_field9;
    struct btRigidBody *_field10;
    float _field11;
    float _field12;
    struct btJointFeedback *_field13;
    struct btJacobianEntry _field14[3];
    struct btJacobianEntry _field15[3];
    struct btTransform _field16;
    struct btTransform _field17;
    float _field18;
    float _field19;
    struct btAngularLimit _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    float _field30;
    int _field31;
    float _field32;
    float _field33;
    float _field34;
};

struct btIDebugDraw;

struct btJacobianEntry {
    struct btVector3 _field1;
    struct btVector3 _field2;
    struct btVector3 _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    float _field6;
};

struct btJointFeedback;

struct btManifoldPoint {
    struct btVector3 _field1;
    struct btVector3 _field2;
    struct btVector3 _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    void *_field14;
    _Bool _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    int _field23;
    struct btVector3 _field24;
    struct btVector3 _field25;
};

struct btMatrix3x3 {
    struct btVector3 _field1[3];
};

struct btMotionState;

struct btOverlapFilterCallback {
    CDUnknownFunctionPointerType *_field1;
};

struct btOverlappingPairCallback {
    CDUnknownFunctionPointerType *_field1;
};

struct btPairCachingGhostObject {
    CDUnknownFunctionPointerType *_field1;
    struct btTransform _field2;
    struct btTransform _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    struct btVector3 _field6;
    int _field7;
    float _field8;
    struct btBroadphaseProxy *_field9;
    struct btCollisionShape *_field10;
    void *_field11;
    struct btCollisionShape *_field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    int _field21;
    void *_field22;
    float _field23;
    float _field24;
    float _field25;
    int _field26;
    struct btAlignedObjectArray<btCollisionObject *> _field27;
    struct btHashedOverlappingPairCache *_field28;
};

struct btPersistentManifold {
    int _field1;
    struct btManifoldPoint _field2[4];
    struct btCollisionObject *_field3;
    struct btCollisionObject *_field4;
    int _field5;
    float _field6;
    float _field7;
    int _field8;
    int _field9;
    int _field10;
    struct c3dContactCallback *_field11;
};

struct btPoint2PointConstraint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    CDUnion_15924c16 _field4;
    float _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
    struct btRigidBody *_field9;
    struct btRigidBody *_field10;
    float _field11;
    float _field12;
    struct btJointFeedback *_field13;
    struct btJacobianEntry _field14[3];
    struct btVector3 _field15;
    struct btVector3 _field16;
    int _field17;
    float _field18;
    float _field19;
    _Bool _field20;
    struct btConstraintSetting _field21;
};

struct btRaycastVehicle {
    CDUnknownFunctionPointerType *_field1;
    struct btAlignedObjectArray<btVector3> _field2;
    struct btAlignedObjectArray<btVector3> _field3;
    struct btAlignedObjectArray<float> _field4;
    struct btAlignedObjectArray<float> _field5;
    int _field6;
    int _field7;
    float _field8;
    float _field9;
    struct btVehicleRaycaster *_field10;
    float _field11;
    float _field12;
    float _field13;
    struct btRigidBody *_field14;
    int _field15;
    int _field16;
    int _field17;
    struct btAlignedObjectArray<btWheelInfo> _field18;
};

struct btRigidBody {
    CDUnknownFunctionPointerType *_field1;
    struct btTransform _field2;
    struct btTransform _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    struct btVector3 _field6;
    int _field7;
    float _field8;
    struct btBroadphaseProxy *_field9;
    struct btCollisionShape *_field10;
    void *_field11;
    struct btCollisionShape *_field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    int _field21;
    void *_field22;
    float _field23;
    float _field24;
    float _field25;
    int _field26;
    struct btMatrix3x3 _field27;
    struct btVector3 _field28;
    struct btVector3 _field29;
    float _field30;
    struct btVector3 _field31;
    struct btVector3 _field32;
    struct btVector3 _field33;
    struct btVector3 _field34;
    struct btVector3 _field35;
    struct btVector3 _field36;
    float _field37;
    float _field38;
    _Bool _field39;
    float _field40;
    float _field41;
    float _field42;
    float _field43;
    float _field44;
    float _field45;
    float _field46;
    struct btMotionState *_field47;
    struct btAlignedObjectArray<btTypedConstraint *> _field48;
    int _field49;
    int _field50;
    struct btVector3 _field51;
    struct btVector3 _field52;
    struct btVector3 _field53;
    struct btVector3 _field54;
    struct btVector3 _field55;
    struct btVector3 _field56;
    int _field57;
    int _field58;
};

struct btSimulationIslandManager;

struct btSliderConstraint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    CDUnion_15924c16 _field4;
    float _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
    struct btRigidBody *_field9;
    struct btRigidBody *_field10;
    float _field11;
    float _field12;
    struct btJointFeedback *_field13;
    _Bool _field14;
    _Bool _field15;
    struct btTransform _field16;
    struct btTransform _field17;
    _Bool _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    float _field30;
    float _field31;
    float _field32;
    float _field33;
    float _field34;
    float _field35;
    float _field36;
    float _field37;
    float _field38;
    float _field39;
    float _field40;
    float _field41;
    float _field42;
    float _field43;
    float _field44;
    float _field45;
    float _field46;
    _Bool _field47;
    _Bool _field48;
    int _field49;
    struct btJacobianEntry _field50[3];
    float _field51[3];
    struct btJacobianEntry _field52[3];
    float _field53;
    struct btTransform _field54;
    struct btTransform _field55;
    struct btVector3 _field56;
    struct btVector3 _field57;
    struct btVector3 _field58;
    struct btVector3 _field59;
    struct btVector3 _field60;
    struct btVector3 _field61;
    struct btVector3 _field62;
    struct btVector3 _field63;
    float _field64;
    float _field65;
    float _field66;
    float _field67;
    _Bool _field68;
    float _field69;
    float _field70;
    float _field71;
    _Bool _field72;
    float _field73;
    float _field74;
    float _field75;
};

struct btTransform {
    struct btMatrix3x3 _field1;
    struct btVector3 _field2;
};

struct btTypedConstraint;

struct btVector3 {
    union {
        float _field1[4];
    } _field1;
};

struct btVehicleRaycaster {
    CDUnknownFunctionPointerType *_field1;
};

struct btWheelInfo;

struct c3dAether {
    struct vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *>> _fields;
};

struct c3dContactCallback;

struct c3dPhysicsField;

struct vector<SCNCAction *, std::__1::allocator<SCNCAction *>> {
    struct SCNCAction **_field1;
    struct SCNCAction **_field2;
    struct __compressed_pair<SCNCAction **, std::__1::allocator<SCNCAction *>> {
        struct SCNCAction **_field1;
    } _field3;
};

struct vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *>> {
    struct c3dPhysicsField **__begin_;
    struct c3dPhysicsField **__end_;
    struct __compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *>> {
        struct c3dPhysicsField **__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned char format;
    unsigned char sampleCount;
    unsigned int renderToTexture:1;
    unsigned int forceTextureRect:1;
    unsigned int viewportDependant:1;
    unsigned int renderToIOSurface:1;
    unsigned char padding[5];
} CDStruct_2e3d5ba3;

typedef struct {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
} CDStruct_2921ca3b;

typedef struct {
    char _field1;
    double _field2;
    double _field3;
    int _field4;
    double _field5;
    void *_field6;
    void *_field7;
} CDStruct_d3ce6806;

typedef struct {
    float r;
    float g;
    float b;
    float a;
} CDStruct_83984b6f;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct SCNVector3 _field4;
    struct SCNVector3 _field5;
    double _field6;
} CDStruct_811921b8;

typedef struct {
    unsigned int _field1;
    int _field2;
    long long _field3;
    unsigned long long _field4;
    double _field5;
    long long _field6;
    struct CVSMPTETime _field7;
    unsigned long long _field8;
    unsigned long long _field9;
} CDStruct_e50ab651;

typedef struct {
    struct __C3DEnginePipeline *_field1;
    struct __C3DEngineContext *_field2;
    struct __C3DFXPassInstance *_field3;
    int *_field4;
    struct __C3DNode *_field5;
    _Bool _field6;
    _Bool _field7;
} CDStruct_256c7a3c;

typedef struct {
    struct __C3DFXProgram *weakProgram;
    unsigned int baseIndex;
    unsigned int baseVertex;
    unsigned int vertexSize;
    unsigned int allocatedVerticesSize;
    unsigned int allocatedIndicesSize;
    struct __C3DImage *textureImage;
    struct __C3DTexture *texture;
    unsigned int drawMode;
    _Bool orthographic;
    _Bool clearDepthBuffer;
    _Bool enableDepthTest;
    _Bool enableCulling;
    _Bool isDynamic;
    struct __C3DMesh *mesh;
    struct __C3DMeshElement *meshElement;
    struct {
        unsigned long long verticesStride;
        unsigned long long colorsStride;
        unsigned long long uvsStride;
        char *verticesData;
        char *colorsData;
        char *uvsData;
    } _cache;
    NSMutableSet *_usedMeshes;
    NSMutableSet *_freeMeshes;
    NSMutableSet *_usedMeshElements;
    NSMutableSet *_freeMeshElements;
} CDStruct_4aabc75a;

typedef struct {
    float _field1;
    struct __C3DNode *_field2;
    float _field3;
} CDStruct_62d14fc2;

typedef struct {
    long long _field1;
    CDStruct_183601bc *_field2;
    CDStruct_912cb5d2 _field3[4];
    CDStruct_912cb5d2 _field4[4];
    long long _field5[4];
    void *_field6;
    void *_field7;
    _Bool _field8;
} CDStruct_5d961f59;

typedef struct {
    struct {
        struct __C3DImage *texture;
        struct CGSize textureSize;
        _Bool isRetina;
    } textureInfo;
    double lineHeight;
    short characterWidth_texture;
    double characterWidth_typography;
    short characterHeight_texture;
    CDStruct_183601bc *symbolRects;
} CDStruct_dd363de5;

typedef struct {
    CDStruct_d3ce6806 _field1;
    void *_field2;
    void *_field3;
    int _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    struct CGRect _field8;
    double _field9;
} CDStruct_8bd95810;

#pragma mark Typedef'd Unions

typedef union {
    int _field1;
    void *_field2;
} CDUnion_15924c16;

#pragma mark -

//
// File: /Applications/Xcode-7GM.app/Contents/SharedFrameworks/SceneKit.framework/Versions/A/SceneKit
// UUID: 6FF4EAAD-B416-392D-9A34-A868E4403422
//
//                           Arch: x86_64
//                Current version: 186.0.0
//          Compatibility version: 1.0.0
//                 Source version: 330.0.0.0.0
//       Minimum Mac OS X version: 10.10.0
//                    SDK version: 10.11.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol JSExport
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (NSArray *)outlineView:(NSOutlineView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItems:(NSArray *)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(NSOutlineView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 writeItems:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(NSArray *)arg4;
- (id <NSPasteboardWriting>)outlineView:(NSOutlineView *)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (id)outlineView:(NSOutlineView *)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 byItem:(id)arg4;
- (id)outlineView:(NSOutlineView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(NSOutlineView *)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSOutlineViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)outlineViewItemDidCollapse:(NSNotification *)arg1;
- (void)outlineViewItemWillCollapse:(NSNotification *)arg1;
- (void)outlineViewItemDidExpand:(NSNotification *)arg1;
- (void)outlineViewItemWillExpand:(NSNotification *)arg1;
- (void)outlineViewSelectionIsChanging:(NSNotification *)arg1;
- (void)outlineViewColumnDidResize:(NSNotification *)arg1;
- (void)outlineViewColumnDidMove:(NSNotification *)arg1;
- (void)outlineViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)outlineView:(NSOutlineView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayOutlineCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 isGroupItem:(id)arg2;
- (NSCell *)outlineView:(NSOutlineView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (id)outlineView:(NSOutlineView *)arg1 nextTypeSelectMatchFromItem:(id)arg2 toItem:(id)arg3 forString:(NSString *)arg4;
- (NSString *)outlineView:(NSOutlineView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (double)outlineView:(NSOutlineView *)arg1 heightOfRowByItem:(id)arg2;
- (NSString *)outlineView:(NSOutlineView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)outlineView:(NSOutlineView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)outlineView:(NSOutlineView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectItem:(id)arg2;
- (BOOL)selectionShouldChangeInOutlineView:(NSOutlineView *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (void)outlineView:(NSOutlineView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)outlineView:(NSOutlineView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)outlineView:(NSOutlineView *)arg1 rowViewForItem:(id)arg2;
- (NSView *)outlineView:(NSOutlineView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
@end

@protocol NSSecureCoding <NSCoding>
+ (BOOL)supportsSecureCoding;
@end

@protocol SCNActionJSExport <JSExport>
+ (SCNAction *)customActionWithDuration:(double)arg1 actionBlock:(void (^)(SCNNode *, double))arg2;
+ (SCNAction *)javaScriptActionWithScript:(NSString *)arg1 duration:(double)arg2;
+ (SCNAction *)runBlock:(void (^)(SCNNode *))arg1 queue:(NSObject<OS_dispatch_queue> *)arg2;
+ (SCNAction *)runBlock:(void (^)(SCNNode *))arg1;
+ (SCNAction *)removeFromParentNode;
+ (SCNAction *)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (SCNAction *)waitForDuration:(double)arg1;
+ (SCNAction *)fadeOpacityTo:(double)arg1 duration:(double)arg2;
+ (SCNAction *)fadeOpacityBy:(double)arg1 duration:(double)arg2;
+ (SCNAction *)fadeOutWithDuration:(double)arg1;
+ (SCNAction *)fadeInWithDuration:(double)arg1;
+ (SCNAction *)repeatActionForever:(SCNAction *)arg1;
+ (SCNAction *)repeatAction:(SCNAction *)arg1 count:(unsigned long long)arg2;
+ (SCNAction *)group:(NSArray *)arg1;
+ (SCNAction *)sequence:(NSArray *)arg1;
+ (SCNAction *)scaleTo:(double)arg1 duration:(double)arg2;
+ (SCNAction *)scaleBy:(double)arg1 duration:(double)arg2;
+ (SCNAction *)rotateToAxisAngle:(struct SCNVector4)arg1 duration:(double)arg2;
+ (SCNAction *)rotateByAngle:(double)arg1 aroundAxis:(struct SCNVector3)arg2 duration:(double)arg3;
+ (SCNAction *)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4 shortestUnitArc:(BOOL)arg5;
+ (SCNAction *)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (SCNAction *)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (SCNAction *)moveTo:(struct SCNVector3)arg1 duration:(double)arg2;
+ (SCNAction *)moveBy:(struct SCNVector3)arg1 duration:(double)arg2;
+ (SCNAction *)moveByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
@property(nonatomic) double speed;
@property(nonatomic) CDUnknownBlockType timingFunction;
@property(nonatomic) long long timingMode;
@property(nonatomic) double duration;
- (id)copy;
- (SCNAction *)reversedAction;
@end

@protocol SCNActionable <NSObject>
@property(readonly, nonatomic) NSArray *actionKeys;
@property(readonly, nonatomic) BOOL hasActions;
- (void)removeAllActions;
- (void)removeActionForKey:(NSString *)arg1;
- (SCNAction *)actionForKey:(NSString *)arg1;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2 completionHandler:(void (^)(void))arg3;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2;
- (void)runAction:(SCNAction *)arg1 completionHandler:(void (^)(void))arg2;
- (void)runAction:(SCNAction *)arg1;
@end

@protocol SCNAnimatable <NSObject>
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1 fadeOutDuration:(double)arg2;
- (BOOL)isAnimationForKeyPaused:(NSString *)arg1;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
@end

@protocol SCNAnimationEventJSExport <JSExport>
+ (id)animationEventWithKeyTime:(double)arg1 block:(void (^)(CAAnimation *, id, BOOL))arg2;
@end

@protocol SCNBoundingBoxJSExport <JSExport>
@property(nonatomic) struct SCNVector3 max;
@property(nonatomic) struct SCNVector3 min;
@end

@protocol SCNBoundingSphereJSExport <JSExport>
@property(nonatomic) double radius;
@property(nonatomic) struct SCNVector3 center;
@end

@protocol SCNBoundingVolume <NSObject>
- (void)setBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@end

@protocol SCNBoxJSExport <JSExport>
+ (id)boxWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 chamferRadius:(double)arg4;
@property(nonatomic) long long chamferSegmentCount;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double chamferRadius;
@property(nonatomic) double length;
@property(nonatomic) double height;
@property(nonatomic) double width;
@end

@protocol SCNCameraJSExport <JSExport>
+ (id)camera;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) double aperture;
@property(nonatomic) double focalBlurRadius;
@property(nonatomic) double focalSize;
@property(nonatomic) double focalDistance;
@property(nonatomic) double orthographicScale;
@property(nonatomic) BOOL usesOrthographicProjection;
@property(nonatomic) BOOL automaticallyAdjustsZRange;
@property(nonatomic) double zFar;
@property(nonatomic) double zNear;
@property(nonatomic) double yFov;
@property(nonatomic) double xFov;
@property(copy, nonatomic) NSString *name;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)setProjectionTransform:(struct CATransform3D)arg1;
- (struct CATransform3D)projectionTransform;
@end

@protocol SCNCapsuleJSExport <JSExport>
+ (id)capsuleWithCapRadius:(double)arg1 height:(double)arg2;
@property(nonatomic) long long capSegmentCount;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double capRadius;
@end

@protocol SCNColorJSExport <JSExport>
+ (NSColor *)color:(double)arg1:(double)arg2:(double)arg3:(double)arg4;
@property(readonly, nonatomic) double a;
@property(readonly, nonatomic) double b;
@property(readonly, nonatomic) double g;
@property(readonly, nonatomic) double r;
@end

@protocol SCNConeJSExport <JSExport>
+ (id)coneWithTopRadius:(double)arg1 bottomRadius:(double)arg2 height:(double)arg3;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double bottomRadius;
@property(nonatomic) double topRadius;
@end

@protocol SCNConstraintJSExport <JSExport>
@property(nonatomic) double influenceFactor;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (id)copy;
@end

@protocol SCNCylinderJSExport <JSExport>
+ (id)cylinderWithRadius:(double)arg1 height:(double)arg2;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double radius;
@end

@protocol SCNFloorJSExport <JSExport>
+ (id)floor;
@property(nonatomic) double reflectionResolutionScaleFactor;
@property(nonatomic) double reflectionFalloffEnd;
@property(nonatomic) double reflectionFalloffStart;
@property(nonatomic) double reflectivity;
@end

@protocol SCNGeometryElementJSExport <JSExport>
+ (id)geometryElementWithData:(NSData *)arg1 primitiveType:(long long)arg2 primitiveCount:(long long)arg3 bytesPerIndex:(long long)arg4;
@property(readonly, nonatomic) long long bytesPerIndex;
@property(readonly, nonatomic) long long primitiveCount;
@property(readonly, nonatomic) long long primitiveType;
@property(readonly, nonatomic) NSData *data;
@end

@protocol SCNGeometryJSExport <JSExport>
+ (id)geometryWithSources:(NSArray *)arg1 elements:(NSArray *)arg2;
+ (id)geometry;
@property(retain, nonatomic) SCNGeometrySource *edgeCreasesSource;
@property(retain, nonatomic) SCNGeometryElement *edgeCreasesElement;
@property(nonatomic) unsigned long long subdivisionLevel;
@property(copy, nonatomic) NSArray *levelsOfDetail;
@property(readonly, nonatomic) long long geometryElementCount;
@property(retain, nonatomic) SCNMaterial *firstMaterial;
@property(copy, nonatomic) NSArray *materials;
@property(copy, nonatomic) NSString *name;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (id)getBoundingSphere;
- (id)getBoundingBox;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (SCNGeometryElement *)geometryElementAtIndex:(long long)arg1;
- (NSArray *)geometrySourcesForSemantic:(NSString *)arg1;
- (SCNMaterial *)materialWithName:(NSString *)arg1;
- (void)replaceMaterialAtIndex:(unsigned long long)arg1 withMaterial:(SCNMaterial *)arg2;
- (void)removeMaterialAtIndex:(unsigned long long)arg1;
- (void)insertMaterial:(SCNMaterial *)arg1 atIndex:(unsigned long long)arg2;
- (SCNGeometry *)interleavedCopy;
- (SCNMutableGeometry *)mutableCopy;
@end

@protocol SCNGeometrySourceJSExport <JSExport>
+ (id)geometrySourceWithTextureCoordinates:(const struct CGPoint *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithNormals:(const struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithVertices:(const struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithData:(NSData *)arg1 semantic:(NSString *)arg2 vectorCount:(long long)arg3 floatComponents:(BOOL)arg4 componentsPerVector:(long long)arg5 bytesPerComponent:(long long)arg6 dataOffset:(long long)arg7 dataStride:(long long)arg8;
@property(readonly, nonatomic) long long dataStride;
@property(readonly, nonatomic) long long dataOffset;
@property(readonly, nonatomic) long long bytesPerComponent;
@property(readonly, nonatomic) long long componentsPerVector;
@property(readonly, nonatomic) BOOL floatComponents;
@property(readonly, nonatomic) long long vectorCount;
@property(readonly, nonatomic) NSString *semantic;
@property(readonly, nonatomic) NSData *data;
@end

@protocol SCNHitTestResultJSExport <JSExport>
- (struct CGPoint)textureCoordinatesWithMappingChannel:(long long)arg1;
@end

@protocol SCNIKConstraintJSExport <JSExport>
+ (id)inverseKinematicsConstraintWithChainRootNode:(SCNNode *)arg1;
@property(nonatomic) struct SCNVector3 targetPosition;
@property(readonly, nonatomic) SCNNode *chainRootNode;
- (double)maxAllowedRotationAngleForJoint:(SCNNode *)arg1;
- (void)setMaxAllowedRotationAngle:(double)arg1 forJoint:(SCNNode *)arg2;
@end

@protocol SCNJSAnimationGroupJSExport <JSExport>
@property(copy) NSString *fillMode;
@property BOOL autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property double timeOffset;
@property float speed;
@property double beginTime;
@property(getter=isRemovedOnCompletion) BOOL removedOnCompletion;
@property(retain) CAMediaTimingFunction *timingFunction;
@property double duration;
@property(copy) NSArray *animations;
@end

@protocol SCNJSBasicAnimationJSExport <JSExport>
+ (id)animationWithKeyPath:(NSString *)arg1;
@property(copy) NSString *fillMode;
@property BOOL autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property double timeOffset;
@property float speed;
@property double beginTime;
@property(getter=isRemovedOnCompletion) BOOL removedOnCompletion;
@property(retain) CAMediaTimingFunction *timingFunction;
@property double duration;
@property(getter=isCumulative) BOOL cumulative;
@property(getter=isAdditive) BOOL additive;
@property(copy) NSString *keyPath;
@property(retain) id byValue;
@property(retain) id toValue;
@property(retain) id fromValue;
@end

@protocol SCNJSImageJSExport <JSExport>
+ (id)imageWithPath:(NSString *)arg1;
+ (id)imageWithURL:(NSString *)arg1;
@property struct CGSize size;
@end

@protocol SCNJSKeyframeAnimationJSExport <JSExport>
+ (id)animationWithKeyPath:(NSString *)arg1;
@property(copy) NSString *fillMode;
@property BOOL autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property double timeOffset;
@property float speed;
@property double beginTime;
@property(copy) NSArray *biasValues;
@property(copy) NSArray *continuityValues;
@property(copy) NSArray *tensionValues;
@property(copy) NSString *calculationMode;
@property(copy) NSArray *timingFunctions;
@property(copy) NSArray *keyTimes;
@property double duration;
@property struct CGPath *path;
@property(copy) NSArray *values;
@property(getter=isRemovedOnCompletion) BOOL removedOnCompletion;
@property(retain) CAMediaTimingFunction *timingFunction;
@property(getter=isCumulative) BOOL cumulative;
@property(getter=isAdditive) BOOL additive;
@property(copy) NSString *keyPath;
@property(retain) id byValue;
@property(retain) id toValue;
@property(retain) id fromValue;
@end

@protocol SCNJSLayerJSExport <JSExport>
+ (CALayer *)layer;
@property struct CGRect bounds;
@property struct CGRect frame;
@property(retain) id contents;
@end

@protocol SCNJSMediaTimingFunctionJSExport <JSExport>
+ (id)functionWithName:(NSString *)arg1;
@end

@protocol SCNJSValueSExport <JSExport>
+ (id)valueWithMatrix4:(struct CATransform3D)arg1;
+ (id)valueWithVector4:(struct SCNVector4)arg1;
+ (id)valueWithVector3:(struct SCNVector3)arg1;
@property(readonly) struct CATransform3D matrix4;
@property(readonly) struct SCNVector4 vector4;
@property(readonly) struct SCNVector3 vector3;
@end

@protocol SCNLevelOfDetailJSExport <JSExport>
+ (id)levelOfDetailWithGeometry:(SCNGeometry *)arg1 worldSpaceDistance:(double)arg2;
+ (id)levelOfDetailWithGeometry:(SCNGeometry *)arg1 screenSpaceRadius:(double)arg2;
@property(readonly) double worldSpaceDistance;
@property(readonly) double screenSpaceRadius;
@property(readonly) SCNGeometry *geometry;
- (id)copy;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
@end

@protocol SCNLightJSExport <JSExport>
+ (id)light;
@property(readonly, nonatomic) SCNLight *presentationLight;
@property(nonatomic) unsigned long long categoryBitMask;
@property(readonly, nonatomic) SCNMaterialProperty *gobo;
@property(nonatomic) double spotOuterAngle;
@property(nonatomic) double spotInnerAngle;
@property(nonatomic) double attenuationFalloffExponent;
@property(nonatomic) double attenuationEndDistance;
@property(nonatomic) double attenuationStartDistance;
@property(nonatomic) double zFar;
@property(nonatomic) double zNear;
@property(nonatomic) double orthographicScale;
@property(nonatomic) double shadowBias;
@property(nonatomic) long long shadowMode;
@property(nonatomic) unsigned long long shadowSampleCount;
@property(nonatomic) struct CGSize shadowMapSize;
@property(nonatomic) double shadowRadius;
@property(retain, nonatomic) id shadowColor;
@property(nonatomic) BOOL castsShadow;
@property(copy, nonatomic) NSString *name;
@property(retain, nonatomic) id color;
@property(copy, nonatomic) NSString *type;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)setAttribute:(id)arg1 forKey:(NSString *)arg2;
- (id)attributeForKey:(NSString *)arg1;
@end

@protocol SCNLookAtConstraintJSExport <JSExport>
+ (id)lookAtConstraintWithTarget:(SCNNode *)arg1;
@property(nonatomic) BOOL gimbalLockEnabled;
@property(readonly, nonatomic) SCNNode *target;
@end

@protocol SCNMaterialJSExport <JSExport>
+ (id)material;
@property(retain, nonatomic) SCNProgram *program;
@property(readonly, nonatomic) SCNMaterial *presentationMaterial;
@property(nonatomic) long long fillMode;
@property(nonatomic) BOOL avoidsOverLighting;
@property(nonatomic) double indexOfRefraction;
@property(nonatomic) double fresnelExponent;
@property(nonatomic) BOOL readsFromDepthBuffer;
@property(nonatomic) BOOL writesToDepthBuffer;
@property(nonatomic) BOOL locksAmbientWithDiffuse;
@property(nonatomic) long long transparencyMode;
@property(nonatomic) long long cullMode;
@property(nonatomic, getter=isDoubleSided) BOOL doubleSided;
@property(nonatomic, getter=isLitPerPixel) BOOL litPerPixel;
@property(copy, nonatomic) NSString *lightingModelName;
@property(nonatomic) double transparency;
@property(nonatomic) double shininess;
@property(readonly, nonatomic) SCNMaterialProperty *normal;
@property(readonly, nonatomic) SCNMaterialProperty *multiply;
@property(readonly, nonatomic) SCNMaterialProperty *reflective;
@property(readonly, nonatomic) SCNMaterialProperty *transparent;
@property(readonly, nonatomic) SCNMaterialProperty *emission;
@property(readonly, nonatomic) SCNMaterialProperty *specular;
@property(readonly, nonatomic) SCNMaterialProperty *ambient;
@property(readonly, nonatomic) SCNMaterialProperty *diffuse;
@property(copy, nonatomic) NSString *name;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
@end

@protocol SCNMaterialPropertyJSExport <JSExport>
+ (id)materialPropertyWithContents:(id)arg1;
@property(nonatomic) double maxAnisotropy;
@property(nonatomic) long long mappingChannel;
@property(retain, nonatomic) id borderColor;
@property(nonatomic) long long wrapT;
@property(nonatomic) long long wrapS;
@property(nonatomic) struct CATransform3D contentsTransform;
@property(nonatomic) long long mipFilter;
@property(nonatomic) long long magnificationFilter;
@property(nonatomic) long long minificationFilter;
@property(nonatomic) double intensity;
@property(retain, nonatomic) id contents;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
@end

@protocol SCNMorpherJSExport <JSExport>
+ (SCNMorpher *)morpher;
@property(readonly, nonatomic) SCNMorpher *presentationMorpher;
@property(copy, nonatomic) NSString *name;
@property(nonatomic) long long calculationMode;
@property(copy, nonatomic) NSArray *targets;
- (void)setWeight:(double)arg1 atTargetIndex:(long long)arg2;
- (double)weightAtTargetIndex:(long long)arg1;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (double)weightForTargetAtIndex:(unsigned long long)arg1;
- (void)setWeight:(double)arg1 forTargetAtIndex:(unsigned long long)arg2;
@end

@protocol SCNNodeJSExport <JSExport>
+ (SCNNode *)nodeWithGeometry:(SCNGeometry *)arg1;
+ (id)node;
@property(readonly) NSArray *particleSystems;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) id <SCNNodeRendererDelegate> rendererDelegate;
@property(nonatomic, getter=isPaused) BOOL paused;
@property(readonly, nonatomic) SCNNode *presentationNode;
@property(copy, nonatomic) NSArray *filters;
@property(copy) NSArray *constraints;
@property(retain, nonatomic) SCNPhysicsField *physicsField;
@property(retain, nonatomic) SCNPhysicsBody *physicsBody;
@property(readonly, nonatomic) NSArray *childNodes;
@property(readonly, nonatomic) SCNNode *parentNode;
@property(nonatomic) BOOL castsShadow;
@property(nonatomic) long long renderingOrder;
@property(nonatomic) double opacity;
@property(nonatomic, getter=isHidden) BOOL hidden;
@property(readonly, nonatomic) struct CATransform3D worldTransform;
@property(nonatomic) struct CATransform3D pivot;
@property(nonatomic) struct SCNVector3 scale;
@property(nonatomic) struct SCNVector3 eulerAngles;
@property(nonatomic) struct SCNVector4 orientation;
@property(nonatomic) struct SCNVector4 rotation;
@property(nonatomic) struct SCNVector3 position;
@property(nonatomic) struct CATransform3D transform;
@property(retain, nonatomic) SCNMorpher *morpher;
@property(retain, nonatomic) SCNSkinner *skinner;
@property(retain, nonatomic) SCNGeometry *geometry;
@property(retain, nonatomic) SCNCamera *camera;
@property(retain, nonatomic) SCNLight *light;
@property(copy, nonatomic) NSString *name;
- (void)removeAllActions;
- (void)removeActionForKey:(NSString *)arg1;
- (SCNAction *)actionForKey:(NSString *)arg1;
- (BOOL)hasActions;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2 completionHandler:(void (^)(void))arg3;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2;
- (void)runAction:(SCNAction *)arg1 completionHandler:(void (^)(void))arg2;
- (void)runAction:(SCNAction *)arg1;
- (SCNNode *)childNodeWithName:(NSString *)arg1;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (id)getBoundingSphere;
- (id)getBoundingBox;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)removeParticleSystem:(SCNParticleSystem *)arg1;
- (void)removeAllParticleSystems;
- (void)addParticleSystem:(SCNParticleSystem *)arg1;
- (NSArray *)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(NSDictionary *)arg3;
- (struct CATransform3D)convertTransform:(struct CATransform3D)arg1 fromNode:(SCNNode *)arg2;
- (struct CATransform3D)convertTransform:(struct CATransform3D)arg1 toNode:(SCNNode *)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 fromNode:(SCNNode *)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 toNode:(SCNNode *)arg2;
- (void)enumerateChildNodesUsingBlock:(void (^)(SCNNode *, char *))arg1;
- (NSArray *)childNodesPassingTest:(BOOL (^)(SCNNode *, char *))arg1;
- (SCNNode *)childNodeWithName:(NSString *)arg1 recursively:(BOOL)arg2;
- (void)replaceChildNode:(SCNNode *)arg1 with:(SCNNode *)arg2;
- (void)removeFromParentNode;
- (void)insertChildNode:(SCNNode *)arg1 atIndex:(unsigned long long)arg2;
- (void)addChildNode:(SCNNode *)arg1;
- (SCNNode *)flattenedClone;
- (id)clone;
@end

@protocol SCNParticlePropertyControllerJSExport <JSExport>
+ (id)controllerWithAnimation:(CAAnimation *)arg1;
@property(copy, nonatomic) NSString *inputProperty;
@property(nonatomic) __weak SCNNode *inputOrigin;
@property(nonatomic) double inputBias;
@property(nonatomic) double inputScale;
@property(nonatomic) long long inputMode;
@property(retain, nonatomic) CAAnimation *animation;
- (id)copy;
@end

@protocol SCNParticleSystemJSExport <JSExport>
+ (id)particleSystemNamed:(NSString *)arg1 inDirectory:(NSString *)arg2;
+ (id)particleSystem;
@property(copy, nonatomic) NSDictionary *propertyControllers;
@property(nonatomic) double fresnelExponent;
@property(nonatomic) double stretchFactor;
@property(nonatomic) double speedFactor;
@property(nonatomic) double dampingFactor;
@property(nonatomic) double particleChargeVariation;
@property(nonatomic) double particleCharge;
@property(nonatomic) double particleFrictionVariation;
@property(nonatomic) double particleFriction;
@property(nonatomic) double particleBounceVariation;
@property(nonatomic) double particleBounce;
@property(nonatomic) double particleMassVariation;
@property(nonatomic) double particleMass;
@property(copy, nonatomic) NSArray *colliderNodes;
@property(nonatomic) BOOL particleDiesOnCollision;
@property(nonatomic) BOOL affectedByPhysicsFields;
@property(nonatomic) BOOL affectedByGravity;
@property(nonatomic, getter=isLightingEnabled) BOOL lightingEnabled;
@property(nonatomic) long long sortingMode;
@property(nonatomic) long long orientationMode;
@property(nonatomic, getter=isBlackPassEnabled) BOOL blackPassEnabled;
@property(nonatomic) long long blendMode;
@property(nonatomic) double particleSizeVariation;
@property(nonatomic) double particleSize;
@property(nonatomic) struct SCNVector4 particleColorVariation;
@property(retain, nonatomic) id particleColor;
@property(nonatomic) long long imageSequenceAnimationMode;
@property(nonatomic) double imageSequenceFrameRateVariation;
@property(nonatomic) double imageSequenceFrameRate;
@property(nonatomic) double imageSequenceInitialFrameVariation;
@property(nonatomic) double imageSequenceInitialFrame;
@property(nonatomic) unsigned long long imageSequenceRowCount;
@property(nonatomic) unsigned long long imageSequenceColumnCount;
@property(retain, nonatomic) id particleImage;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnLiving;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnCollision;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnDying;
@property(nonatomic) double particleLifeSpanVariation;
@property(nonatomic) double particleLifeSpan;
@property(nonatomic) double particleAngularVelocityVariation;
@property(nonatomic) double particleAngularVelocity;
@property(nonatomic) double particleVelocityVariation;
@property(nonatomic) double particleVelocity;
@property(nonatomic) double particleAngleVariation;
@property(nonatomic) double particleAngle;
@property(nonatomic, getter=isLocal) BOOL local;
@property(nonatomic) struct SCNVector3 acceleration;
@property(nonatomic) struct SCNVector3 emittingDirection;
@property(nonatomic) double spreadingAngle;
@property(nonatomic) long long birthDirection;
@property(nonatomic) long long birthLocation;
@property(retain, nonatomic) SCNGeometry *emitterShape;
@property(nonatomic) double warmupDuration;
@property(nonatomic) double birthRateVariation;
@property(nonatomic) double birthRate;
@property(nonatomic) BOOL loops;
@property(nonatomic) double idleDurationVariation;
@property(nonatomic) double idleDuration;
@property(nonatomic) double emissionDurationVariation;
@property(nonatomic) double emissionDuration;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (id)copy;
- (void)removeAllModifiers;
- (void)removeModifiersOfStage:(long long)arg1;
- (void)addModifierForProperties:(NSArray *)arg1 atStage:(long long)arg2 withBlock:(void (^)(void **, unsigned long long *, long long, long long, float))arg3;
- (void)handleEvent:(long long)arg1 forProperties:(NSArray *)arg2 withBlock:(void (^)(void **, unsigned long long *, unsigned int *, long long))arg3;
- (void)reset;
@end

@protocol SCNPhysicsBallSocketJointJSExport <JSExport>
+ (id)jointWithBody:(SCNPhysicsBody *)arg1 anchor:(struct SCNVector3)arg2;
+ (id)jointWithBodyA:(SCNPhysicsBody *)arg1 anchorA:(struct SCNVector3)arg2 bodyB:(SCNPhysicsBody *)arg3 anchorB:(struct SCNVector3)arg4;
@property(nonatomic) struct SCNVector3 anchorB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
@end

@protocol SCNPhysicsBehaviorJSExport <JSExport>
@end

@protocol SCNPhysicsBodyJSExport <JSExport>
+ (id)bodyWithType:(long long)arg1 shape:(SCNPhysicsShape *)arg2;
+ (id)kinematicBody;
+ (id)dynamicBody;
+ (id)staticBody;
@property(nonatomic) unsigned long long collisionBitMask;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) struct SCNVector3 angularVelocityFactor;
@property(nonatomic) struct SCNVector3 velocityFactor;
@property(nonatomic) double angularDamping;
@property(nonatomic) double damping;
@property(nonatomic) struct SCNVector4 angularVelocity;
@property(nonatomic) struct SCNVector3 velocity;
@property(nonatomic) BOOL allowsResting;
@property(readonly, nonatomic) BOOL isResting;
@property(retain, nonatomic) SCNPhysicsShape *physicsShape;
@property(nonatomic) double rollingFriction;
@property(nonatomic) double restitution;
@property(nonatomic) double friction;
@property(nonatomic) double charge;
@property(nonatomic) double mass;
@property(nonatomic) long long type;
- (id)copy;
- (void)resetTransform;
- (void)clearAllForces;
- (void)applyTorque:(struct SCNVector4)arg1 impulse:(BOOL)arg2;
- (void)applyForce:(struct SCNVector3)arg1 atPosition:(struct SCNVector3)arg2 impulse:(BOOL)arg3;
- (void)applyForce:(struct SCNVector3)arg1 impulse:(BOOL)arg2;
@end

@protocol SCNPhysicsContactJSExport <JSExport>
@property(readonly, nonatomic) double penetrationDistance;
@property(readonly, nonatomic) double collisionImpulse;
@property(readonly, nonatomic) struct SCNVector3 contactNormal;
@property(readonly, nonatomic) struct SCNVector3 contactPoint;
@property(readonly, nonatomic) SCNNode *nodeB;
@property(readonly, nonatomic) SCNNode *nodeA;
@end

@protocol SCNPhysicsFieldJSExport <JSExport>
+ (SCNPhysicsField *)customFieldWithEvaluationBlock:(struct SCNVector3 (^)(struct SCNVector3, struct SCNVector3, float, float, double))arg1;
+ (SCNPhysicsField *)magneticField;
+ (SCNPhysicsField *)electricField;
+ (SCNPhysicsField *)springField;
+ (SCNPhysicsField *)turbulenceFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (SCNPhysicsField *)noiseFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (SCNPhysicsField *)linearGravityField;
+ (SCNPhysicsField *)radialGravityField;
+ (SCNPhysicsField *)vortexField;
+ (SCNPhysicsField *)dragField;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) struct SCNVector3 direction;
@property(nonatomic) struct SCNVector3 offset;
@property(nonatomic) long long scope;
@property(nonatomic) BOOL usesEllipsoidalExtent;
@property(nonatomic) struct SCNVector3 halfExtent;
@property(nonatomic, getter=isExclusive) BOOL exclusive;
@property(nonatomic, getter=isActive) BOOL active;
@property(nonatomic) double minimumDistance;
@property(nonatomic) double falloffExponent;
@property(nonatomic) double strength;
- (id)copy;
@end

@protocol SCNPhysicsHingeJointJSExport <JSExport>
+ (id)jointWithBody:(SCNPhysicsBody *)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(SCNPhysicsBody *)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(SCNPhysicsBody *)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 axisB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
@end

@protocol SCNPhysicsShapeJSExport <JSExport>
+ (id)shapeWithShapes:(NSArray *)arg1 transforms:(NSArray *)arg2;
+ (id)shapeWithNode:(SCNNode *)arg1 options:(NSDictionary *)arg2;
+ (id)shapeWithGeometry:(SCNGeometry *)arg1 options:(NSDictionary *)arg2;
- (id)copy;
@end

@protocol SCNPhysicsSliderJointJSExport <JSExport>
+ (id)jointWithBody:(SCNPhysicsBody *)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(SCNPhysicsBody *)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(SCNPhysicsBody *)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
@property(nonatomic) double motorMaximumTorque;
@property(nonatomic) double motorTargetAngularVelocity;
@property(nonatomic) double motorMaximumForce;
@property(nonatomic) double motorTargetLinearVelocity;
@property(nonatomic) double maximumAngularLimit;
@property(nonatomic) double minimumAngularLimit;
@property(nonatomic) double maximumLinearLimit;
@property(nonatomic) double minimumLinearLimit;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 axisB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
@end

@protocol SCNPhysicsVehicleJSExport <JSExport>
+ (id)vehicleWithChassisBody:(SCNPhysicsBody *)arg1 wheels:(NSArray *)arg2;
@property(readonly, nonatomic) SCNPhysicsBody *chassisBody;
@property(readonly, nonatomic) NSArray *wheels;
@property(readonly, nonatomic) double speedInKilometersPerHour;
- (void)applyBrakingForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)setSteeringAngle:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)applyEngineForce:(double)arg1 forWheelAtIndex:(long long)arg2;
@end

@protocol SCNPhysicsVehicleWheelJSExport <JSExport>
+ (id)wheelWithNode:(SCNNode *)arg1;
@property double suspensionRestLength;
@property double radius;
@property struct SCNVector3 axle;
@property struct SCNVector3 steeringAxis;
@property struct SCNVector3 connectionPosition;
@property double maximumSuspensionForce;
@property double frictionSlip;
@property double maximumSuspensionTravel;
@property double suspensionDamping;
@property double suspensionCompression;
@property double suspensionStiffness;
@property(readonly) SCNNode *node;
- (id)copy;
@end

@protocol SCNPhysicsWorldJSExport <JSExport>
@property id <SCNPhysicsContactDelegate> contactDelegate;
@property(nonatomic) double timeStep;
@property(nonatomic) double speed;
@property(nonatomic) struct SCNVector3 gravity;
- (void)updateCollisionPairs;
- (NSArray *)convexSweepTestWithShape:(SCNPhysicsShape *)arg1 fromTransform:(struct CATransform3D)arg2 toTransform:(struct CATransform3D)arg3 options:(NSDictionary *)arg4;
- (NSArray *)contactTestWithBody:(SCNPhysicsBody *)arg1 options:(NSDictionary *)arg2;
- (NSArray *)contactTestBetweenBody:(SCNPhysicsBody *)arg1 andBody:(SCNPhysicsBody *)arg2 options:(NSDictionary *)arg3;
- (NSArray *)rayTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(NSDictionary *)arg3;
- (NSArray *)allBehaviors;
- (void)removeAllBehaviors;
- (void)removeBehavior:(SCNPhysicsBehavior *)arg1;
- (void)addBehavior:(SCNPhysicsBehavior *)arg1;
@end

@protocol SCNPlaneJSExport <JSExport>
+ (id)planeWithWidth:(double)arg1 height:(double)arg2;
@property(nonatomic) long long cornerSegmentCount;
@property(nonatomic) double cornerRadius;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double width;
@end

@protocol SCNProgramJSExport <JSExport>
+ (id)program;
@property(nonatomic) id <SCNProgramDelegate> delegate;
@property(nonatomic, getter=isOpaque) BOOL opaque;
@property(copy, nonatomic) NSString *geometryShader;
@property(copy, nonatomic) NSString *tessellationEvaluationShader;
@property(copy, nonatomic) NSString *tessellationControlShader;
@property(copy, nonatomic) NSString *fragmentShader;
@property(copy, nonatomic) NSString *vertexShader;
- (id)copy;
- (NSString *)semanticForSymbol:(NSString *)arg1;
- (void)setSemantic:(NSString *)arg1 forSymbol:(NSString *)arg2 options:(NSDictionary *)arg3;
@end

@protocol SCNPyramidJSExport <JSExport>
+ (id)pyramidWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double length;
@property(nonatomic) double height;
@property(nonatomic) double width;
@end

@protocol SCNRenderContext <NSObject>
@property(readonly, nonatomic) id <SCNResourceManager> resourceManager;
@property(readonly, nonatomic) SCNRenderTargetRegistry *renderTargetRegistry;
@property(readonly, nonatomic) int profile;
@property(readonly, nonatomic) unsigned int features;
@property(nonatomic) BOOL showsAuthoringEnvironment;
@property(readonly, nonatomic) long long currentFrameIndex;
@property(nonatomic) double contentScaleFactor;
@property(nonatomic) long long sampleCount;
- (void)drawFullScreenQuadForPass:(struct __C3DFXPass *)arg1;
-     // Error parsing type: v148@0:8^{__C3DMesh={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}[9^{__CFArray}]^{C3DSphere}^^{__CFArray}b1b1b1b4q}16^{__C3DMeshElement=}24^{__C3DFXProgram={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}ib1b1^{__C3DFXProgramDelegate}}32^{__C3DEngineContext=}40(C3DMatrix4x4=[16f][4])48r^{C3DColor4=(?=[4f]{?=ffff})}112^{__C3DRasterizerStates=}120^{__C3DBlendStates=}128^{__C3DImage=}136c144, name: renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:
- (void)renderBackground:(struct __C3DEffectSlot *)arg1 engineContext:(struct __C3DEngineContext *)arg2;
- (struct __C3DMeshElement *)createVolatileMeshElementOfType:(BOOL)arg1 primitiveCount:(long long)arg2 bytesPerIndex:(long long)arg3;
- (void)unmapVolatileMesh:(struct __C3DMesh *)arg1;
- (BOOL)mapVolatileMesh:(struct __C3DMesh *)arg1 verticesCount:(long long)arg2;
- (void)stopProcessingRendererElements;
- (void)drawRenderElement:(struct __C3DRendererElement *)arg1 withPass:(struct __C3DFXPass *)arg2;
- (void)processRendererElement:(struct __C3DRendererElement *)arg1;
- (void)startProcessingRendererElementsWithEngineIterationContext:(CDStruct_256c7a3c *)arg1;
- (id)textureForEffectSlot:(struct __C3DEffectSlot *)arg1;
- (struct __C3DEngineStats *)stats;
- (void)popDebugGroup;
- (void)pushDebugGroup:(NSString *)arg1;
- (id)newRenderTargetWithDescription:(CDStruct_2e3d5ba3 *)arg1 size: /* Error: Ran out of types for this method. */;
- (void)setBackgroundColor:(struct C3DColor4)arg1;
- (void)endRenderPass;
- (BOOL)beginRenderPass:(struct __C3DFXPass *)arg1 isFinalTechnique:(BOOL)arg2;
- (void)endFrameWaitingUntilCompleted:(BOOL)arg1;
- (void)beginFrame:(id)arg1;
@end

@protocol SCNRendererJSExport <JSExport>
+ (id)rendererWithContext:(void *)arg1 options:(NSDictionary *)arg2;
@property(nonatomic) id delegate;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) BOOL loops;
@property(nonatomic, getter=isPlaying) BOOL playing;
@property(nonatomic) BOOL jitteringEnabled;
@property(nonatomic) double currentTime;
@property(readonly, nonatomic) double nextFrameTime;
@property(retain, nonatomic) SCNScene *scene;
- (void)renderAtTime:(double)arg1;
- (void)render;
@end

@protocol SCNSceneJSExport <JSExport>
+ (id)sceneWithURL:(NSURL *)arg1 options:(NSDictionary *)arg2 error:(id *)arg3;
+ (id)sceneNamed:(NSString *)arg1 inDirectory:(NSString *)arg2 options:(NSDictionary *)arg3;
+ (id)sceneNamed:(NSString *)arg1;
+ (id)scene;
@property(nonatomic) double frameRate;
@property(nonatomic) double endTime;
@property(nonatomic) double startTime;
@property(nonatomic, getter=isPaused) BOOL paused;
@property(retain, nonatomic) id fogColor;
@property(nonatomic) double fogDensityExponent;
@property(nonatomic) double fogEndDistance;
@property(nonatomic) double fogStartDistance;
@property(readonly, nonatomic) SCNMaterialProperty *background;
@property(readonly, nonatomic) SCNPhysicsWorld *physicsWorld;
@property(readonly, nonatomic) SCNNode *rootNode;
@property(readonly) NSArray *particleSystems;
- (id)valueForKeyPath:(NSString *)arg1;
- (id)valueForKey:(NSString *)arg1;
- (void)setValue:(id)arg1 forKey:(NSString *)arg2;
- (void)setValue:(id)arg1 forKeyPath:(NSString *)arg2;
- (BOOL)writeToURL:(NSURL *)arg1 options:(NSDictionary *)arg2 delegate:(id <SCNSceneExportDelegate>)arg3 progressHandler:(void (^)(float, NSError *, char *))arg4;
- (void)setAttribute:(id)arg1 forKey:(NSString *)arg2;
- (id)attributeForKey:(NSString *)arg1;
- (void)removeParticleSystem:(SCNParticleSystem *)arg1;
- (void)removeAllParticleSystems;
- (void)addParticleSystem:(SCNParticleSystem *)arg1 withTransform:(struct CATransform3D)arg2;
@end

@protocol SCNSceneRenderer <NSObject>
@property(nonatomic) double currentTime;
@property(retain, nonatomic) SCNNode *audioListener;
@property(readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property(readonly, nonatomic) AVAudioEngine *audioEngine;
@property(readonly, nonatomic) id <MTLCommandQueue> commandQueue;
@property(readonly, nonatomic) unsigned long long stencilPixelFormat;
@property(readonly, nonatomic) unsigned long long depthPixelFormat;
@property(readonly, nonatomic) unsigned long long colorPixelFormat;
@property(readonly, nonatomic) id <MTLDevice> device;
@property(readonly, nonatomic) id <MTLRenderCommandEncoder> currentRenderCommandEncoder;
@property(readonly, nonatomic) void *context;
@property(readonly, nonatomic) unsigned long long renderingAPI;
@property(retain, nonatomic) SKScene *overlaySKScene;
@property(nonatomic) unsigned long long debugOptions;
@property(nonatomic) BOOL showsStatistics;
@property(nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
@property(nonatomic) BOOL autoenablesDefaultLighting;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) BOOL loops;
@property(getter=isPlaying) BOOL playing;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
@property(nonatomic) double sceneTime;
@property(retain, nonatomic) SCNScene *scene;
- (void)prepareObjects:(NSArray *)arg1 withCompletionHandler:(void (^)(BOOL))arg2;
- (BOOL)prepareObject:(id)arg1 shouldAbortBlock:(BOOL (^)(void))arg2;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (NSArray *)nodesInsideFrustumWithPointOfView:(SCNNode *)arg1;
- (BOOL)isNodeInsideFrustum:(SCNNode *)arg1 withPointOfView:(SCNNode *)arg2;
- (NSArray *)hitTest:(struct CGPoint)arg1 options:(NSDictionary *)arg2;
- (void)presentScene:(SCNScene *)arg1 withTransition:(SKTransition *)arg2 incomingPointOfView:(SCNNode *)arg3 completionHandler:(void (^)(void))arg4;
@end

@protocol SCNSceneSourceJSExport <JSExport>
+ (id)sceneSourceWithData:(NSData *)arg1 options:(NSDictionary *)arg2;
+ (id)sceneSourceWithURL:(NSURL *)arg1 options:(NSDictionary *)arg2;
@property(readonly) NSData *data;
@property(readonly) NSURL *url;
- (NSArray *)entriesPassingTest:(BOOL (^)(id, NSString *, char *))arg1;
- (NSArray *)identifiersOfEntriesWithClass:(Class)arg1;
- (id)entryWithIdentifier:(NSString *)arg1 withClass:(Class)arg2;
- (id)propertyForKey:(NSString *)arg1;
- (SCNScene *)sceneWithOptions:(NSDictionary *)arg1 error:(id *)arg2;
- (SCNScene *)sceneWithOptions:(NSDictionary *)arg1 statusHandler:(void (^)(float, long long, NSError *, char *))arg2;
- (id)initWithData:(NSData *)arg1 options:(NSDictionary *)arg2;
- (id)initWithURL:(NSURL *)arg1 options:(NSDictionary *)arg2;
@end

@protocol SCNShadable <NSObject>

@optional
@property(copy, nonatomic) NSDictionary *shaderModifiers;
@property(retain, nonatomic) SCNProgram *program;
- (void)handleUnbindingOfSymbol:(NSString *)arg1 usingBlock:(void (^)(unsigned int, unsigned int, SCNNode *, SCNRenderer *))arg2;
- (void)handleBindingOfSymbol:(NSString *)arg1 usingBlock:(void (^)(unsigned int, unsigned int, SCNNode *, SCNRenderer *))arg2;
@end

@protocol SCNShapeJSExport <JSExport>
+ (id)shapeWithPath:(id)arg1 extrusionDepth:(double)arg2;
@property(copy, nonatomic) id chamferProfile;
@property(nonatomic) double chamferRadius;
@property(nonatomic) long long chamferMode;
@property(nonatomic) double extrusionDepth;
@property(copy, nonatomic) id path;
@end

@protocol SCNSphereJSExport <JSExport>
+ (id)sphereWithRadius:(double)arg1;
@property(nonatomic, getter=isHemispheric) BOOL hemispheric;
@property(nonatomic) long long segmentCount;
@property(nonatomic, getter=isGeodesic) BOOL geodesic;
@property(nonatomic) double radius;
@end

@protocol SCNStereoscopicRenderingTechnique
@property(nonatomic) double interaxialDistance;
@end

@protocol SCNTechniqueJSExport <JSExport>
+ (SCNTechnique *)techniqueBySequencingTechniques:(NSArray *)arg1;
+ (SCNTechnique *)techniqueWithDictionary:(NSDictionary *)arg1;
@property(readonly) NSDictionary *dictionaryRepresentation;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)handleBindingOfSymbol:(NSString *)arg1 usingBlock:(void (^)(unsigned int, unsigned int, SCNNode *, SCNRenderer *))arg2;
@end

@protocol SCNTechniqueSupport <NSObject>
@property(copy, nonatomic) SCNTechnique *technique;
@end

@protocol SCNTextJSExport <JSExport>
+ (id)textWithString:(id)arg1 extrusionDepth:(double)arg2;
@property(nonatomic) double flatness;
@property(copy, nonatomic) id chamferProfile;
@property(nonatomic) long long chamferSegmentCount;
@property(nonatomic) double chamferRadius;
@property(copy, nonatomic) NSString *alignmentMode;
@property(copy, nonatomic) NSString *truncationMode;
@property(readonly, nonatomic) struct CGSize textSize;
@property(nonatomic) struct CGRect containerFrame;
@property(nonatomic, getter=isWrapped) BOOL wrapped;
@property(retain, nonatomic) id font;
@property(copy, nonatomic) id string;
@property(nonatomic) double extrusionDepth;
@end

@protocol SCNTorusJSExport <JSExport>
+ (id)torusWithRingRadius:(double)arg1 pipeRadius:(double)arg2;
@property(nonatomic) long long pipeSegmentCount;
@property(nonatomic) long long ringSegmentCount;
@property(nonatomic) double pipeRadius;
@property(nonatomic) double ringRadius;
@end

@protocol SCNTransactionJSExport <JSExport>
+ (void)setDisableActions:(BOOL)arg1;
+ (BOOL)disableActions;
+ (void)setAnimationTimingFunction:(CAMediaTimingFunction *)arg1;
+ (CAMediaTimingFunction *)animationTimingFunction;
+ (void)setAnimationDuration:(double)arg1;
+ (double)animationDuration;
+ (void)unlock;
+ (void)lock;
+ (void)flush;
+ (void)commit;
+ (void)begin;
@end

@protocol SCNTransformConstraintJSExport <JSExport>
+ (id)transformConstraintInWorldSpace:(BOOL)arg1 withBlock:(struct CATransform3D (^)(SCNNode *, struct CATransform3D))arg2;
@end

@protocol SCNTubeJSExport <JSExport>
+ (id)tubeWithInnerRadius:(double)arg1 outerRadius:(double)arg2 height:(double)arg3;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double outerRadius;
@property(nonatomic) double innerRadius;
@end

@protocol SCNViewJSExport <JSExport>
@property(nonatomic) BOOL showsStatistics;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) BOOL loops;
@property(nonatomic, getter=isPlaying) BOOL playing;
@property(nonatomic) id delegate;
@property(nonatomic) double currentTime;
@property(nonatomic) unsigned long long antialiasingMode;
@property(nonatomic) BOOL allowsCameraControl;
@property(copy, nonatomic) id backgroundColor;
@property(retain, nonatomic) SCNScene *scene;
- (void)stop:(id)arg1;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
- (id)snapshot;
@end

__attribute__((visibility("hidden")))
@interface C3DIONSZipFileArchive : NSObject
{
    NSDictionary *_contents;
    NSData *_data;
    id _provider;
    long long _desc;
    NSString *_path;
    NSArray *_names;
    NSDictionary *_properties;
    NSMutableDictionary *_cachedContents;
    void *_reserved;
    struct __zFlags {
        unsigned int providerSuppliesContents:1;
        unsigned int providerSuppliesStreams:1;
        unsigned int providerSuppliesProperties:1;
        unsigned int noContentsCaching:1;
        unsigned int fileOpen:1;
        unsigned int reserved:27;
    } _zFlags;
    void *_reserved2[5];
}

- (BOOL)isValid;
- (void)invalidate;
- (BOOL)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)archiveStream;
- (id)archiveData;
- (id)propertiesForEntryName:(id)arg1;
- (BOOL)writeContentsForEntryName:(id)arg1 toFile:(id)arg2 options:(unsigned long long)arg3 error:(id *)arg4;
- (id)streamForEntryName:(id)arg1;
- (id)contentsForEntryName:(id)arg1;
- (id)entryNames;
- (void)finalize;
- (void)dealloc;
- (id)initWithEntryNames:(id)arg1 dataProvider:(id)arg2 options:(unsigned long long)arg3;
- (id)initWithEntryNames:(id)arg1 contents:(id)arg2 properties:(id)arg3 options:(unsigned long long)arg4;
- (id)initWithData:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)initWithPath:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;

@end

@interface CAAnimation (SceneKitAdditions)
+ (id)scnAnimationNamed:(id)arg1;
@property(copy, nonatomic) NSArray *animationEvents;
- (void)setCommitsOnCompletion:(BOOL)arg1;
- (BOOL)commitsOnCompletion;
@property double fadeOutDuration;
@property double fadeInDuration;
@property BOOL usesSceneTimeBase;
@end

@interface CALayer (SCN_JSSupport)
+ (id)SCNJSExportProtocol;
@end

@interface JSValue (SCNStructSupport)
+ (id)valueWithTransform3D:(struct CATransform3D)arg1 inContext:(id)arg2;
+ (id)valueWithVector3:(struct SCNVector3)arg1 inContext:(id)arg2;
+ (id)valueWithVector4:(struct SCNVector4)arg1 inContext:(id)arg2;
- (struct CATransform3D)toTransform3D;
- (struct SCNVector3)toVector3;
- (struct SCNVector4)toVector4;
@end

@interface MDLAsset (SCNModelIO)
+ (id)assetWithSCNNode:(id)arg1;
+ (id)assetWithSCNScene:(id)arg1;
@end

@interface MDLCamera (SCNModelIO)
+ (id)cameraWithSCNCamera:(id)arg1;
@end

@interface MDLLight (SCNModelIO)
+ (id)lightWithSCNLight:(id)arg1;
@end

@interface MDLMaterial (SCNModelIO)
+ (id)materialWithSCNMaterial:(id)arg1;
@end

@interface MDLMesh (SCNModelIO)
+ (id)meshWithSCNGeometry:(id)arg1;
@end

@interface MDLObject (SCNModelIO)
+ (id)objectWithSCNNode:(id)arg1;
@end

@interface MDLObject (SceneKitAdditions)
- (void)_updateAssociatedSCNNodeWithGeometrySetter:(CDUnknownBlockType)arg1 texturePathProvider:(CDUnknownBlockType)arg2 vertexAttributeNamed:(id)arg3 materialPropertyNamed:(id)arg4;
- (id)_associatedSCNNode;
@end

@interface MDLSubmesh (SCNModelIO)
+ (id)newSubmeshWithSCNGeometryElement:(id)arg1;
+ (id)submeshWithSCNGeometryElement:(id)arg1;
@end

@interface NSArray (SCNDeepCopy)
- (id)SCNMutableDeepCopy;
@end

@interface NSColor (SCNAdditions)
+ (id)colorWithC3DColor4:(const struct C3DColor4 *)arg1;
- (BOOL)colorToC3DColor4:(struct C3DColor4 *)arg1;
@end

@interface NSColor (SCNColorAdditions)
- (BOOL)SCNColorGetRed:(float *)arg1 green:(float *)arg2 blue:(float *)arg3 alpha:(float *)arg4;
- (BOOL)SCNGetComponentsRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
@end

@interface NSColor (SCNJSExtensions)
+ (id)color:(double)arg1:(double)arg2:(double)arg3:(double)arg4;
- (double)a;
- (double)b;
- (double)g;
- (double)r;
@end

@interface NSDictionary (SCNAdditions)
- (struct CATransform3D)SCNMatrix4Value;
- (struct SCNVector4)SCNVector4Value;
- (struct SCNVector3)SCNVector3Value;
@end

@interface NSDictionary (SCNDeepCopy)
- (id)SCNMutableDeepCopy;
@end

@interface NSImage (SCNAddition)
- (struct CGSize)NSSize;
- (BOOL)SCNFixDPI;
@end

@interface NSImageRep (SCNAdditions)
- (long long)SCNPixelsHigh;
- (long long)SCNPixelsWide;
@end

@interface NSString (SCNExtensions)
- (id)stringByReplacingCharactersInRanges:(id)arg1 withStrings:(id)arg2;
@end

@interface NSValue (Core3DKitAdditions)
+ (id)valueWithSCNMatrix4:(struct CATransform3D)arg1;
+ (id)valueWithSCNVector4:(struct SCNVector4)arg1;
+ (id)valueWithSCNVector3:(struct SCNVector3)arg1;
+ (id)SCN_valueWithCGPoint:(struct CGPoint)arg1;
- (struct CATransform3D)SCNMatrix4Value;
- (struct SCNVector4)SCNVector4Value;
- (struct SCNVector3)SCNVector3Value;
- (struct CGPoint)SCN_CGPointValue;
@end

__attribute__((visibility("hidden")))
@interface SCN3DConnexionDevice : NSObject
{
    struct __IOHIDDevice *deviceRef;
}

- (void)open;
- (void)handleReport:(unsigned int)arg1 data:(id)arg2;
- (id)initWithDeviceRef:(struct __IOHIDDevice *)arg1;

@end

@interface SCNTechnique : NSObject <SCNAnimatable, NSCopying, NSSecureCoding>
{
    unsigned int _isPresentationInstance:1;
    struct __C3DFXTechnique *_technique;
    NSMutableDictionary *_valueForSymbol;
    SCNOrderedDictionary *_animations;
}

+ (BOOL)supportsSecureCoding;
+ (id)techniqueWithTechniqueRef:(struct __C3DFXTechnique *)arg1;
+ (id)techniqueBySequencingTechniques:(id)arg1;
+ (id)techniqueWithDictionary:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNTechnique:(id)arg1;
- (void)_customEncodingOfSCNTechnique:(id)arg1;
- (void)_didInstallInEngineContext:(struct __C3DEngineContext *)arg1;
- (id)presentationInstance;
- (BOOL)isPausedOrPausedByInheritance;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)valueForSymbolNamed:(id)arg1;
- (void)setValue:(id)arg1 forSymbolNamed:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (struct __C3DFXTechnique *)techniqueRef;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly) NSDictionary *dictionaryRepresentation;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)_symbolsAssignedValues;
- (void)dealloc;
- (id)initWithTechniqueRef:(struct __C3DFXTechnique *)arg1;
- (id)initPresentationTechniqueWithTechniqueRef:(struct __C3DFXTechnique *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCN3DDisplayRenderingTechnique : SCNTechnique <SCNStereoscopicRenderingTechnique>
{
    long long _displayLayout;
}

@property(readonly, nonatomic) long long displayLayout;
@property(nonatomic) double interaxialDistance;
- (id)initWithDisplayLayout:(long long)arg1;

@end

@interface SCNAction : NSObject <NSCopying, NSSecureCoding>
{
    struct SCNCAction *_caction;
}

+ (id)actionNamed:(id)arg1;
+ (id)customActionWithDuration:(double)arg1 actionBlock:(CDUnknownBlockType)arg2;
+ (id)javaScriptActionWithScript:(id)arg1 duration:(double)arg2;
+ (id)runAction:(id)arg1 onChildNodeWithName:(id)arg2;
+ (id)runBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
+ (id)runBlock:(CDUnknownBlockType)arg1;
+ (id)performSelector:(SEL)arg1 onTarget:(id)arg2;
+ (id)removeFromParentNode;
+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)waitForDuration:(double)arg1;
+ (id)playAudioSource:(id)arg1 waitForCompletion:(BOOL)arg2;
+ (id)unhide;
+ (id)hide;
+ (id)fadeOpacityTo:(double)arg1 duration:(double)arg2;
+ (id)fadeOpacityBy:(double)arg1 duration:(double)arg2;
+ (id)fadeOutWithDuration:(double)arg1;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)repeatActionForever:(id)arg1;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
+ (id)group:(id)arg1;
+ (id)sequence:(id)arg1;
+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4 shortestUnitArc:(BOOL)arg5;
+ (id)rotateToAxisAngle:(struct SCNVector4)arg1 duration:(double)arg2;
+ (id)rotateByAngle:(double)arg1 aroundAxis:(struct SCNVector3)arg2 duration:(double)arg3;
+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)moveTo:(struct SCNVector3)arg1 duration:(double)arg2;
+ (id)moveBy:(struct SCNVector3)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (BOOL)supportsSecureCoding;
+ (void)setEditingModeEnabled:(BOOL)arg1;
+ (BOOL)editingModeEnabled;
- (void)dealloc;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
@property(nonatomic) double speed;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)parameters;
- (BOOL)isRelative;
- (BOOL)isCustom;
@property(nonatomic) long long timingMode;
- (void)setDurationRange:(double)arg1;
- (double)durationRange;
@property(nonatomic) double duration;
- (struct SCNCAction *)caction;
@property(nonatomic) CDUnknownBlockType timingFunction;
- (void)setCompletionBlock:(CDUnknownBlockType)arg1;
- (void)setKey:(id)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasRemovedFromTarget:(id)arg1 atTime:(double)arg2;
- (void)wasAddedToTarget:(id)arg1 atTime:(double)arg2;
- (double)ratioForTime:(double)arg1;
- (void)setFinished:(BOOL)arg1;
- (BOOL)finished;
- (void)timeJumpWithTarget:(id)arg1 timeOffset:(double)arg2;
- (void)willResumeWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasPausedWithTarget:(id)arg1 atTime:(double)arg2;
- (void)setCppAction:(void *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNActionCustom : SCNAction
{
    struct SCNCActionCustom *_mycaction;
}

+ (id)customActionWithDuration:(double)arg1 actionBlock:(CDUnknownBlockType)arg2;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionFade : SCNAction
{
    struct SCNCActionFade *_mycaction;
}

+ (id)fadeOutWithDuration:(double)arg1;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)fadeOpacityTo:(double)arg1 duration:(double)arg2;
+ (id)fadeOpacityBy:(double)arg1 duration:(double)arg2;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)parameters;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionGroup : SCNAction
{
    void *_mycaction;
    NSArray *_actions;
}

+ (id)groupWithActions:(id)arg1;
+ (BOOL)supportsSecureCoding;
- (BOOL)finished;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setupWithActions:(id)arg1;
- (BOOL)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionHide : SCNAction
{
    struct SCNCActionHide *_mycaction;
}

+ (id)unhide;
+ (id)hide;
+ (BOOL)supportsSecureCoding;
- (id)parameters;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionJavaScript : SCNAction
{
    NSString *_script;
}

+ (id)javaScriptActionWithDuration:(double)arg1 script:(id)arg2;
- (id)parameters;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isCustom;
- (void)dealloc;
- (id)initWithString:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNActionMove : SCNAction
{
    struct SCNCActionMove *_mycaction;
}

+ (id)moveToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)moveTo:(struct SCNVector3)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)moveBy:(struct SCNVector3)arg1 duration:(double)arg2;
+ (BOOL)supportsSecureCoding;
- (id)parameters;
- (BOOL)isRelative;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionPerformSelector : SCNAction
{
    SEL _selector;
    id _target;
}

+ (id)perfromSelector:(SEL)arg1 onTarget:(id)arg2;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)isCustom;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionPlaySound : SCNAction
{
    struct SCNCPlaySound *_mycaction;
}

+ (id)playAudioSource:(id)arg1 waitForCompletion:(BOOL)arg2;
- (id)parameters;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_setupDuration;
- (id)init;

@end

@interface SCNActionReference : SCNActionGroup
{
    NSString *referenceName;
}

@property(copy, nonatomic) NSString *referenceName; // @synthesize referenceName;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)_isAReference;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRemove : SCNAction
{
    BOOL _hasFired;
}

+ (id)removeFromParentNode;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRepeat : SCNAction
{
    struct SCNCActionRepeat *_mycaction;
    SCNAction *_repeatedAction;
}

+ (id)repeatActionForever:(id)arg1;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (BOOL)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRotate : SCNAction
{
    struct SCNCActionRotate *_mycaction;
}

+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4 shortestUnitArc:(BOOL)arg5;
+ (id)rotateToAxisAngle:(struct SCNVector4)arg1 duration:(double)arg2;
+ (id)rotateByAngle:(double)arg1 aroundAxis:(struct SCNVector3)arg2 duration:(double)arg3;
+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (BOOL)supportsSecureCoding;
- (id)parameters;
- (BOOL)isRelative;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRunAction : SCNAction
{
    SCNAction *_action;
    NSString *_subSpriteKey;
    NSString *_actionKey;
    BOOL _waitForKeyedAction;
    BOOL _runOnSubSprite;
    BOOL _fired;
}

+ (id)runAction:(id)arg1 afterActionWithKey:(id)arg2;
+ (id)runAction:(id)arg1 onFirstChildWithName:(id)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (BOOL)isCustom;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRunBlock : SCNAction
{
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)runBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (BOOL)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionScale : SCNAction
{
    struct SCNCActionScale *_mycaction;
}

+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
+ (BOOL)supportsSecureCoding;
- (BOOL)isRelative;
- (id)parameters;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionSequence : SCNAction
{
    struct SCNCActionSequence *_mycaction;
    NSArray *_actions;
}

+ (id)sequenceWithActions:(id)arg1;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionTargetState : NSObject
{
    BOOL usesEuler;
    float opacity;
    struct SCNVector3 position;
    struct SCNVector3 euler;
    struct SCNVector3 scale;
    struct SCNVector4 rotation;
}

@property(nonatomic) float opacity; // @synthesize opacity;
@property(nonatomic) BOOL usesEuler; // @synthesize usesEuler;
@property(nonatomic) struct SCNVector3 scale; // @synthesize scale;
@property(nonatomic) struct SCNVector4 rotation; // @synthesize rotation;
@property(nonatomic) struct SCNVector3 euler; // @synthesize euler;
@property(nonatomic) struct SCNVector3 position; // @synthesize position;

@end

__attribute__((visibility("hidden")))
@interface SCNActionWait : SCNAction
{
    struct SCNCActionWait *_mycaction;
}

+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)waitForDuration:(double)arg1;
+ (BOOL)supportsSecureCoding;
- (id)reversedAction;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SCNAnimationEvent : NSObject
{
    double _eventTime;
    CDUnknownBlockType _eventBlock;
}

+ (id)animationEventWithKeyTime:(double)arg1 block:(CDUnknownBlockType)arg2;
- (void)setEventBlock:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)eventBlock;
- (void)setTime:(double)arg1;
- (double)time;
- (void)dealloc;
- (id)init;

@end

@interface SCNAnimationReference : CAAnimationGroup
{
    NSString *referenceName;
}

@property(copy, nonatomic) NSString *referenceName; // @synthesize referenceName;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)_isAReference;
- (void)dealloc;

@end

@interface SCNAssetCatalog : NSObject
{
    NSURL *_catalogURL;
    NSDictionary *_db;
    NSMutableDictionary *_cache;
}

+ (id)objectWithName:(id)arg1 class:(Class)arg2;
+ (void)clearCache;
+ (id)recursivePathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2;
+ (id)assetCatalogForResourceURL:(id)arg1;
+ (id)assetCatalogWithURL:(id)arg1;
+ (id)assetCatalogNamed:(id)arg1;
@property(readonly, nonatomic) NSURL *catalogURL; // @synthesize catalogURL=_catalogURL;
- (id)pathByMakingURLRelativeToCatalog:(id)arg1;
- (id)particleSystemNamed:(id)arg1;
- (id)actionNamed:(id)arg1;
- (id)animationNamed:(id)arg1;
- (id)sceneNamed:(id)arg1;
- (id)sceneWithURL:(id)arg1;
- (void)cacheObject:(id)arg1 forKey:(id)arg2;
- (id)URLOfResourceNamed:(id)arg1;
- (void)dealloc;

@end

@interface SCNAudioPlayer : NSObject
{
    AVAudioNode *_audioNode;
    AVAudioPlayerNode *_audioPlayer;
    SCNAudioSource *_audioSource;
    struct __C3DNode *_nodeRef;
    struct __C3DScene *_scene;
    BOOL _customAudioNode;
    BOOL _completed;
    CDUnknownBlockType willStartPlayback;
    CDUnknownBlockType didFinishPlayback;
}

+ (id)audioPlayerWithSource:(id)arg1;
+ (id)audioPlayerWithAVAudioNode:(id)arg1;
@property(readonly) BOOL customAudioNode; // @synthesize customAudioNode=_customAudioNode;
@property BOOL completed; // @synthesize completed=_completed;
@property(readonly) struct __C3DScene *scene; // @synthesize scene=_scene;
@property(readonly, nonatomic) SCNAudioSource *audioSource; // @synthesize audioSource=_audioSource;
@property(readonly) AVAudioPlayerNode *audioPlayer; // @synthesize audioPlayer=_audioPlayer;
@property(readonly, nonatomic) AVAudioNode *audioNode; // @synthesize audioNode=_audioNode;
@property(copy, nonatomic) CDUnknownBlockType didFinishPlayback; // @synthesize didFinishPlayback;
@property(copy, nonatomic) CDUnknownBlockType willStartPlayback; // @synthesize willStartPlayback;
- (id)audioBufferFormat;
- (void)recycle;
- (void)play;
- (void *)__CFObject;
- (struct __C3DNode *)nodeRef;
- (void)setNodeRef:(struct __C3DNode *)arg1;
- (void)dealloc;
- (void)reset;
- (id)initWithAVAudioNode:(id)arg1;
- (id)initWithSource:(id)arg1;

@end

@interface SCNAudioSource : NSObject <NSCopying, NSSecureCoding>
{
    NSURL *_audioURL;
    NSString *_audioName;
    BOOL _loops;
    BOOL _shouldStream;
    BOOL _loaded;
    BOOL positional;
    float volume;
    float rate;
    float reverbBlend;
}

+ (BOOL)supportsSecureCoding;
+ (id)audioSourceNamed:(id)arg1;
+ (id)audioSourceWithAVAudioPCMBuffer:(id)arg1;
@property(nonatomic) BOOL shouldStream; // @synthesize shouldStream=_shouldStream;
@property(nonatomic) BOOL loops; // @synthesize loops=_loops;
@property(nonatomic) float reverbBlend; // @synthesize reverbBlend;
@property(nonatomic) float rate; // @synthesize rate;
@property(nonatomic, getter=isPositional) BOOL positional; // @synthesize positional;
@property(nonatomic) float volume; // @synthesize volume;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNAudioSource:(id)arg1;
- (void)_customEncodingOfSCNAudioSource:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (double)duration;
- (void)loadIfNeeded;
- (void)_load;
- (void)load;
- (void)dealloc;
- (id)initWithURL:(id)arg1;
- (id)initWithFileNamed:(id)arg1;
- (id)fileName;
- (id)initWithFileNamed:(id)arg1 inBundle:(id)arg2;
- (void)_loadURLWithBundle:(id)arg1;
- (long long)renderingAlgorithm;
- (id)initWithAVAudioPCMBuffer:(id)arg1;

@end

@interface SCNAuthoringEnvironment : NSObject
{
    struct __C3DEngineContext *_engineContext;
    id <SCNSceneRenderer> _sceneRenderer;
    struct __C3DFXProgram *_noColorProgram;
    struct __C3DFXProgram *_colorOnlyProgram;
    struct __C3DFXProgram *_colorAndTextureProgram;
    struct __C3DFXProgram *_lightProbesProgram;
    struct __C3DFXProgram *_wireframeProgram;
    CDStruct_4aabc75a _logsInfo;
    CDStruct_4aabc75a _boldLogsInfo;
    CDStruct_4aabc75a _upArrowInfo;
    CDStruct_4aabc75a _xyQuadrantInfo;
    CDStruct_4aabc75a _xyQuadrantRingInfo;
    CDStruct_4aabc75a _dynamicLinesInfo;
    CDStruct_4aabc75a _dynamicTrianglesInfo;
    CDStruct_4aabc75a _overlayDynamicLinesInfo;
    CDStruct_4aabc75a _overlayDynamicTriangleInfo;
    CDStruct_4aabc75a _textInfo;
    CDStruct_4aabc75a _lightProbesInfo;
    CDStruct_dd363de5 _normalTextInfo;
    CDStruct_dd363de5 _boldTextInfo;
    struct __C3DRasterizerStates *_depthOnCullOnStates;
    struct __C3DRasterizerStates *_depthOffCullOnStates;
    struct __C3DRasterizerStates *_depthOnCullOffStates;
    struct __C3DRasterizerStates *_depthOffCullOffStates;
    const void *_arrowIndicesOffset;
    unsigned short _arrowIndicesCount;
    const void *_quadrantIndicesOffset;
    unsigned short _quadrantIndicesCount;
    const void *_quadrantRingIndicesOffset;
    unsigned short _quadrantRingIndicesCount;
    long long _authoringDisplayMask;
    unsigned int _hasLighting:1;
    BOOL _shouldSnapOnGrid;
    BOOL _shouldSnapToAlign;
    BOOL _isEditingSubComponent;
    BOOL _selectionIsReadonly;
    Class _componentType;
    long long _editingSpace;
    BOOL _graphicalSelectionEnabled;
    // Error parsing type: , name: _selectionP0
    // Error parsing type: , name: _selectionP1
    BOOL _selecting;
    BOOL _surroundToSelect;
    NSSet *_initialSelection;
    NSSet *_initialSubSelection;
    NSMutableOrderedSet *_selection;
    NSMutableOrderedSet *_subSelection;
    NSArray *_selectedNodes;
    float _lastGridDistance;
    double _gridUnit;
    NSMutableArray *_visibleManipulableItems;
    void *_wireframeRenderer;
    struct {
        _Bool initialized;
        _Bool showFullStatistics;
        float fps;
        float waitDisplayLinkTime;
        long long pressedButtonIndex;
        struct __CFString *fpsString;
        struct __CFString *shortString;
        unsigned int lightingStatistics[9];
        struct __C3DEngineStats stats;
    } _statisticsInfo;
    float _drawScale;
    SCNManipulator *_manipulator;
    struct __C3DFXPass *_pass;
    id _delegate;
}

+ (id)authoringEnvironmentForSceneRenderer:(id)arg1;
+ (long long)defaultAuthoringDisplayMask;
@property(nonatomic) BOOL surroundToSelect; // @synthesize surroundToSelect=_surroundToSelect;
@property(nonatomic) BOOL graphicalSelectionEnabled; // @synthesize graphicalSelectionEnabled=_graphicalSelectionEnabled;
@property(nonatomic) __weak id <SCNAuthoringEnvironmentDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long editingSpace; // @synthesize editingSpace=_editingSpace;
@property(readonly, nonatomic) double gridUnit; // @synthesize gridUnit=_gridUnit;
@property(nonatomic) BOOL shouldSnapToAlign; // @synthesize shouldSnapToAlign=_shouldSnapToAlign;
@property(nonatomic) BOOL shouldSnapOnGrid; // @synthesize shouldSnapOnGrid=_shouldSnapOnGrid;
@property(readonly, nonatomic) BOOL isEditingSubComponent; // @synthesize isEditingSubComponent=_isEditingSubComponent;
- (void)dealloc;
- (void)drawString:(id)arg1 atPoint:(struct CGPoint)arg2 color:(id)arg3;
- (void)drawLineFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 color:(id)arg3;
- (BOOL)mouseDragged:(id)arg1;
- (BOOL)mouseMoved:(id)arg1;
- (BOOL)mouseUp:(id)arg1;
- (BOOL)mouseDown:(id)arg1;
- (void)setSelecting:(BOOL)arg1;
- (void)saveInitialSelection;
- (void)_updateSelectionWithSelectionFrame:(unsigned long long)arg1;
- (void)_updateManipulatorTargets;
- (void)beginEditingNodes:(id)arg1;
- (void)beginEditingNodeComponents:(id)arg1;
- (void)beginEditingNode:(id)arg1;
- (id)selectedItems;
@property(readonly, nonatomic) NSArray *selectedNodes;
- (void)cancelEdition;
@property(nonatomic) long long authoringDisplayMask;
@property(readonly, nonatomic) SCNManipulator *manipulator;
@property(nonatomic) BOOL selectionIsReadonly;
@property(retain, nonatomic) NSOrderedSet *subSelection;
@property(readonly, nonatomic) NSIndexSet *subSelectionIndexes;
@property(nonatomic) Class componentType;
@property(readonly, nonatomic) struct CATransform3D viewMatrix;
@property(readonly) id <SCNSceneRenderer> sceneRenderer;
- (id)_initWithEngineContext:(struct __C3DEngineContext *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNBackingLayer : NSOpenGLLayer
{
    SCNView *_parentView;
    BOOL _needsRedrawForJittering;
}

@property(nonatomic) SCNView *parentView; // @synthesize parentView=_parentView;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)drawInOpenGLContext:(id)arg1 pixelFormat:(id)arg2 forLayerTime:(double)arg3 displayTime:(const CDStruct_e50ab651 *)arg4;
- (BOOL)canDrawInOpenGLContext:(id)arg1 pixelFormat:(id)arg2 forLayerTime:(double)arg3 displayTime:(const CDStruct_e50ab651 *)arg4;
- (BOOL)_isRenderingForJittering;
- (void)_cancelJitterRedisplay;
- (void)_jitterRedisplayWithContext:(struct _CGLContextObject *)arg1;
- (id)openGLContextForPixelFormat:(id)arg1;
- (id)openGLPixelFormatForDisplayMask:(unsigned int)arg1;
- (BOOL)canDrawConcurrently;

@end

@interface SCNConstraint : NSObject <NSCopying, NSSecureCoding, SCNAnimatable>
{
    struct __C3DConstraint *_constraintRef;
    SCNOrderedDictionary *_animations;
    BOOL _enabled;
    double _influenceFactor;
}

+ (BOOL)supportsSecureCoding;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (BOOL)isPausedOrPausedByInheritance;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)finalizeDecodeConstraint:(id)arg1;
@property(nonatomic) double influenceFactor;
- (void)setEnabled:(BOOL)arg1;
- (BOOL)isEnabled;
- (void)setConstraintRef:(struct __C3DConstraint *)arg1;
- (struct __C3DConstraint *)constraintRef;
- (void)setName:(id)arg1;
- (id)name;
- (void)copyTo:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNBillboardConstraint : SCNConstraint
{
    unsigned long long _freeAxes;
}

+ (BOOL)supportsSecureCoding;
+ (id)billboardConstraint;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(nonatomic) unsigned long long freeAxes; // @synthesize freeAxes=_freeAxes;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNBoundingBox : NSObject
{
    struct SCNVector3 min;
    struct SCNVector3 max;
}

@property(nonatomic) struct SCNVector3 max; // @synthesize max;
@property(nonatomic) struct SCNVector3 min; // @synthesize min;
- (id)description;

@end

__attribute__((visibility("hidden")))
@interface SCNBoundingSphere : NSObject
{
    struct SCNVector3 center;
    double radius;
}

@property(nonatomic) double radius; // @synthesize radius;
@property(nonatomic) struct SCNVector3 center; // @synthesize center;
- (id)description;

@end

@interface SCNGeometry : NSObject <SCNAnimatable, SCNBoundingVolume, SCNShadable, NSCopying, NSSecureCoding>
{
    struct __C3DGeometry *_geometry;
    unsigned int _isPresentationInstance:1;
    NSMutableArray *_materials;
    SCNOrderedDictionary *_animations;
    NSArray *_levelsOfDetail;
    unsigned long long _subdivisionLevel;
    SCNGeometrySource *_edgeCreasesSource;
    SCNGeometryElement *_edgeCreasesElement;
    SCNShadableHelper *_shadableHelper;
    struct SCNVector3 *_fixedBoundingBoxExtrema;
    NSString *_name;
    NSMutableDictionary *_valuesForUndefinedKeys;
}

+ (BOOL)supportsSecureCoding;
+ (BOOL)resolveInstanceMethod:(SEL)arg1;
+ (id)geometryWithSources:(id)arg1 elements:(id)arg2;
+ (id)geometry;
+ (id)geometryWithGeometryRef:(struct __C3DGeometry *)arg1;
+ (id)geometryWithMDLMesh:(id)arg1;
+ (id)floorWithOptions:(id)arg1;
+ (id)torusWithRingRadius:(double)arg1 pipeRadius:(double)arg2 options:(id)arg3;
+ (id)capsuleWithRadius:(double)arg1 height:(double)arg2 options:(id)arg3;
+ (id)tubeWithInnerRadius:(double)arg1 outerRadius:(double)arg2 height:(double)arg3 options:(id)arg4;
+ (id)coneWithHeight:(double)arg1 topRadius:(double)arg2 bottomRadius:(double)arg3 options:(id)arg4;
+ (id)cylinderWithRadius:(double)arg1 height:(double)arg2 options:(id)arg3;
+ (id)sphereWithRadius:(double)arg1 options:(id)arg2;
+ (id)pyramidWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 options:(id)arg4;
+ (id)boxWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 cornerRadius:(double)arg4 options:(id)arg5;
+ (id)planeWithWidth:(double)arg1 height:(double)arg2 options:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (void)_customDecodingOfSCNGeometry:(id)arg1;
- (void)_customEncodingOfSCNGeometry:(id)arg1;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
@property(retain, nonatomic) SCNProgram *program;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
- (void)_setupShadableHelperIfNeeded;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)_unifyNormals;
- (struct __C3DMaterial *)materialRef;
- (struct __C3DMaterial *)materialRefCreateIfNeeded;
@property(retain, nonatomic) SCNGeometrySource *edgeCreasesSource;
@property(retain, nonatomic) SCNGeometryElement *edgeCreasesElement;
@property(nonatomic) unsigned long long subdivisionLevel;
@property(copy, nonatomic) NSArray *levelsOfDetail;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (BOOL)parseSpecialKey:(id)arg1 withPath:(id)arg2 intoDestination:(id *)arg3 remainingPath:(id *)arg4;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
- (void)setMaterial:(id)arg1;
- (id)material;
@property(copy, nonatomic) NSArray *materials;
- (void)removeAllMaterials;
- (void)replaceMaterial:(id)arg1 with:(id)arg2;
- (void)replaceMaterialAtIndex:(unsigned long long)arg1 withMaterial:(id)arg2;
- (void)removeMaterialAtIndex:(unsigned long long)arg1;
- (void)removeMaterial:(id)arg1;
- (void)insertMaterial:(id)arg1 atIndex:(unsigned long long)arg2;
@property(retain, nonatomic) SCNMaterial *firstMaterial;
- (id)_firstMaterial;
- (id)mutableMaterials;
- (void)replaceObjectInMaterialsAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromMaterialsAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inMaterialsAtIndex:(unsigned long long)arg2;
- (id)objectInMaterialsAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfMaterials;
- (id)materialWithName:(id)arg1;
- (id)_materialWithName:(id)arg1;
- (void)_expand;
- (id)keyForNodeAttributes;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)interleavedCopy;
- (id)mutableCopy;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (void)_setAttributes:(id)arg1;
- (id)getBoundingBox;
- (id)getBoundingSphere;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (void)setBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (id)geometryElementAtIndex:(long long)arg1;
@property(readonly, nonatomic) long long geometryElementCount;
@property(readonly, nonatomic) NSArray *geometryElements;
- (id)geometrySourceForSemantic:(id)arg1;
- (id)geometrySourcesForSemantic:(id)arg1;
@property(readonly, nonatomic) NSArray *geometrySources;
- (BOOL)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationGeometry;
- (void)setGeometryRef:(struct __C3DGeometry *)arg1;
- (void)_setGeometryRef:(struct __C3DGeometry *)arg1;
- (struct __C3DGeometry *)geometryRef;
@property(readonly, copy) NSString *description;
- (id)geometryDescription;
- (void)_syncObjCModel;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
- (BOOL)isPresentationInstance;
- (void)dealloc;
- (id)initPresentationGeometryWithGeometryRef:(struct __C3DGeometry *)arg1;
- (id)initWithGeometryRef:(struct __C3DGeometry *)arg1;
- (id)init;
- (void)setValueForKey:(id)arg1 optionKey:(id)arg2 options:(id)arg3;
- (id)debugQuickLookData;
- (id)debugQuickLookObject;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNBox : SCNGeometry
{
    double _boxwidth;
    double _boxheight;
    double _boxlength;
    double _boxchamferRadius;
    long long _boxwidthSegmentCount;
    long long _boxheightSegmentCount;
    long long _boxlengthSegmentCount;
    long long _boxchamferSegmentCount;
    long long _boxprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)box;
+ (id)boxWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 chamferRadius:(double)arg4;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double width;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) double length;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) long long chamferSegmentCount;
@property(nonatomic) double chamferRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationBox;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNBufferBinding : NSObject
{
    NSString *_name;
    long long _frequency;
    CDUnknownBlockType _block;
}

@property(copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
@property(nonatomic) long long frequency; // @synthesize frequency=_frequency;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNExportOperation : NSOperation
{
}

- (BOOL)canceled;
- (double)progress;
- (BOOL)succeded;
- (id)error;

@end

__attribute__((visibility("hidden")))
@interface _SCNExportOperation : SCNExportOperation
{
    void *_userInfo;
    SEL _didEndSelector;
    SCNScene *_scene;
    struct CGSize _size;
    SCNNode *_pointOfView;
    double _startTime;
    double _endTime;
    double _systemTime;
    BOOL _canceled;
    BOOL _succeded;
    double _progress;
    NSError *_error;
    id _delegate;
    NSDictionary *_attributes;
    NSURL *_outputURL;
}

@property(nonatomic) BOOL succeded; // @synthesize succeded=_succeded;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSURL *outputURL; // @synthesize outputURL=_outputURL;
@property(retain, nonatomic) NSDictionary *attributes; // @synthesize attributes=_attributes;
@property(nonatomic) double progress; // @synthesize progress=_progress;
@property(nonatomic) BOOL canceled; // @synthesize canceled=_canceled;
@property(nonatomic) id delegate; // @synthesize delegate=_delegate;
@property(nonatomic) double endTime; // @synthesize endTime=_endTime;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) struct CGSize size; // @synthesize size=_size;
@property(nonatomic) SEL didEndSelector; // @synthesize didEndSelector=_didEndSelector;
@property(nonatomic) void *userInfo; // @synthesize userInfo=_userInfo;
@property(retain, nonatomic) SCNNode *pointOfView; // @synthesize pointOfView=_pointOfView;
@property(retain, nonatomic) SCNScene *scene; // @synthesize scene=_scene;
- (void)cancel;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNCOLLADAExportOperation : _SCNExportOperation
{
}

- (void)main;
- (id)initWithScene:(id)arg1 attributes:(id)arg2 outputURL:(id)arg3;

@end

@interface SCNCamera : NSObject <SCNAnimatable, SCNTechniqueSupport, NSCopying, NSSecureCoding>
{
    // Error parsing type: ^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}, name: _camera
    unsigned int _isPresentationInstance:1;
    unsigned int _custom:1;
    unsigned int _usesOrthographicProjection:1;
    unsigned int _automaticallyAdjustsZRange:1;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    double _xFov;
    double _yFov;
    double _orthographicScale;
    double _zNear;
    double _zFar;
    float _focalDistance;
    float _focalBlurRadius;
    float _focalSize;
    float _aperture;
    unsigned long long _categoryBitMask;
    struct CATransform3D _projectionTransform;
    SCNTechnique *_technique;
}

+ (BOOL)supportsSecureCoding;
+ (id)camera;
+     // Error parsing type: @24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16, name: cameraWithCameraRef:
+ (id)cameraWithMDLCamera:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNCamera:(id)arg1;
- (void)_customEncodingOfSCNCamera:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (struct CATransform3D)projectionTransform;
- (void)setProjectionTransform:(struct CATransform3D)arg1;
-     // Error parsing type: ^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16@0:8, name: cameraRef
- (void)setYMag:(double)arg1;
- (double)yMag;
- (void)setXMag:(double)arg1;
- (double)xMag;
@property(nonatomic) double zNear;
@property(nonatomic) double zFar;
@property(nonatomic) double yFov;
@property(nonatomic) double xFov;
@property(nonatomic) BOOL usesOrthographicProjection;
@property(nonatomic) double orthographicScale;
@property(nonatomic) double focalSize;
@property(nonatomic) double focalDistance;
@property(nonatomic) double focalBlurRadius;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) BOOL automaticallyAdjustsZRange;
@property(nonatomic) double aperture;
- (BOOL)hasCustomProjectionTransform;
- (void)_registerAsObserver;
- (BOOL)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationCamera;
@property(copy, nonatomic) SCNTechnique *technique;
- (void)_syncObjCModel;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *description;
- (void)dealloc;
-     // Error parsing type: @24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16, name: initPresentationCameraWithCameraRef:
-     // Error parsing type: @24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16, name: initWithCameraRef:
- (id)init;
- (id)debugQuickLookData;
- (id)debugQuickLookObject;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNEventHandler : NSObject
{
    SCNView *_view;
    struct __IOHIDManager *_hidManager;
    NSMutableArray *_controllers;
}

- (BOOL)wantsRedraw;
- (void)viewDidDraw;
- (void)viewWillDraw;
- (void)cameraDidChange;
- (void)sceneDidChange;
- (void)cameraWillChange;
- (void)sceneWillChange;
- (BOOL)magnifyWithEvent:(id)arg1;
- (BOOL)rotateWithEvent:(id)arg1;
- (BOOL)mouseUp:(id)arg1;
- (BOOL)mouseDragged:(id)arg1;
- (BOOL)mouseDown:(id)arg1;
- (BOOL)scrollWheel:(id)arg1;
- (void)resignFirstResponder;
- (void)becomeFirstResponder;
- (void)setView:(id)arg1;
@property(readonly) SCNView *view;
- (void)dealloc;
- (id)init;

@end

@interface SCNCameraControlEventHandler : SCNEventHandler
{
    SCNNode *_freeViewCameraNode;
    struct CGPoint _initialPoint;
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _initialMatrix
    float _initialZoom;
    float _originalFovX;
    float _originalFovY;
    float _originalOrthoScale;
    float _zoomFactor;
    // Error parsing type: , name: _clickOrigin
    BOOL _stickyMove;
    struct CGPoint _stickyDirection;
    long long _currentStickyAxis;
    struct CGPoint _lastDragLocation;
    double _lastDragTime;
    long long _stickyAxis;
    // Error parsing type: {C3DSphere="vector"}, name: _viewedObjectSphere
    unsigned int _isViewedObjectSphereComputed:1;
    unsigned int _hasAutomaticCameraTarget:1;
    unsigned int _automaticCameraTargetUpToDate:1;
    unsigned int _inertia:1;
    unsigned int _didEverFocusNode:1;
    unsigned int _allowsTranslation:1;
    unsigned int _pinchShouldMoveCamera:1;
    unsigned int _alternateMode:1;
    unsigned int _upDirIsSet:1;
    unsigned int _gimbalLockMode:1;
    unsigned int _inertiaRunning:1;
    long long _browseMode;
    // Error parsing type: , name: _upDir
    struct SCNVector3 _cameraTarget;
    struct SCNVector3 _autoCameraTarget;
    float _browseScaleFactor;
    double _friction;
    struct CGPoint _totalDragWithInertia;
    struct CGPoint _inertiaVelocity;
    double _lastSimulationTime;
}

+ (struct CATransform3D)matrixWithNoRoll:(struct CATransform3D)arg1;
+     // Error parsing type: 24@0:8@16, name: frontVectorWithPointOfView:
- (BOOL)mouseUp:(id)arg1;
- (BOOL)mouseDragged:(id)arg1;
- (void)_computeStickyAxisIfNeeded:(struct CGPoint)arg1;
- (BOOL)mouseDown:(id)arg1;
- (BOOL)rotateWithEvent:(id)arg1;
- (BOOL)magnifyWithEvent:(id)arg1;
- (BOOL)scrollWheel:(id)arg1;
- (float)_scrollWheelMultiplier;
- (void)_translateTo:(struct CGPoint)arg1;
- (void)_rotateWithDrag:(struct CGPoint)arg1 mode:(long long)arg2 stickyAxis:(long long)arg3;
- (void)clearRoll;
- (void)_beginTranslateAtLocation:(struct CGPoint)arg1;
-     // Error parsing type: 16@0:8, name: frontVector
- (struct C3DSphere)viewedObjectSphere;
- (BOOL)computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode *)arg1 sphere:(struct C3DSphere *)arg2;
- (void)_startBrowsingIfNeeded:(struct CGPoint)arg1;
- (void)endDragging;
- (void)_didDragTo:(struct CGPoint)arg1;
- (void)endDraggingWithVelocity:(struct CGPoint)arg1;
- (BOOL)wantsRedraw;
- (void)viewWillDraw;
- (void)rotateWithVector:(long long)arg1 mode: /* Error: Ran out of types for this method. */;
- (void)_onInertiaTimer;
- (void)_stopInertiaIfNeeded;
- (void)cameraDidChange;
- (void)cameraWillChange;
- (void)sceneDidChange;
- (void)sceneWillChange;
- (void)translateByX:(float)arg1 Y:(float)arg2 Z:(float)arg3;
- (void)setZoomFactor:(double)arg1;
- (double)zoomFactor;
- (void)zoomBy:(float)arg1;
- (void)zoomBy:(float)arg1 animate:(BOOL)arg2;
- (void)rotateOf:(double)arg1;
- (void)updateBrowseScaleFactor;
- (void)_resetBrowseScaleFactor;
- (double)_browseScale;
- (float)_translationCoef;
- (void)computeAutomaticTargetPoint;
- (struct SCNVector3)cameraAutomaticTargetPoint;
- (void)_switchToFreeViewCamera;
- (void)_installFreeViewCameraIfNeeded;
- (void)_prepareFreeViewCamera;
- (BOOL)_freeCameraActivated;
- (void)_resetFreeViewCamera;
@property long long stickyAxis;
- (void)focusNode:(id)arg1;
@property struct SCNVector3 cameraTarget;
@property BOOL automaticCameraTarget;
- (void)invalidateCameraTarget;
@property struct SCNVector3 gimbalLockVector;
@property BOOL gimbalLockMode;
@property double friction;
@property BOOL enableInertia;
@property BOOL allowsTranslation;
- (void)dealloc;
- (id)init;

@end

@interface SCNCapsule : SCNGeometry
{
    double _capsulecapRadius;
    double _capsuleheight;
    long long _capsuleheightSegmentCount;
    long long _capsuleradialSegmentCount;
    long long _capsulecapSegmentCount;
    long long _capsuleprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)capsuleWithCapRadius:(double)arg1 height:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) long long capSegmentCount;
@property(nonatomic) double capRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationCapsule;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNCommonProfileProgramCache : NSObject
{
    struct __C3DFXProgram *_program;
    struct __CFSet *_owners;
}

- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNCommonProfileProgramGenerator : NSObject
{
    struct _opaque_pthread_mutex_t _programMutex;
    struct __CFDictionary *_shaders;
    struct __CFDictionary *_trackedResourcesToHashcode;
}

+ (id)generatorWithProfile:(int)arg1;
- (void)releaseProgramForResource:(id)arg1;
- (struct __C3DFXProgram *)programWithHashCode:(struct __C3DRendererElementProgramHashCode *)arg1 trackedResource:(id)arg2 introspectionDataPtr:(CDStruct_5d961f59 *)arg3;
@property(readonly, nonatomic) int profile;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNCommonProfileProgramGeneratorGL : SCNCommonProfileProgramGenerator
{
    int _profile;
}

- (int)profile;
- (struct __C3DFXProgram *)_programWithHashCode:(struct __C3DRendererElementProgramHashCode *)arg1 introspectionDataPtr:(CDStruct_5d961f59 *)arg2;
- (id)init;
- (id)initWithProfile:(int)arg1;

@end

@interface SCNCone : SCNGeometry
{
    double _conetopRadius;
    double _conebottomRadius;
    double _coneheight;
    long long _coneheightSegmentCount;
    long long _coneradialSegmentCount;
    long long _coneprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)coneWithTopRadius:(double)arg1 bottomRadius:(double)arg2 height:(double)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) double topRadius;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double bottomRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationCone;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNCylinder : SCNGeometry
{
    double _cylinderradius;
    double _cylinderheight;
    double _cylinderradialSpan;
    long long _cylinderheightSegmentCount;
    long long _cylinderradialSegmentCount;
    long long _cylinderprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)cylinderWithRadius:(double)arg1 height:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) double radius;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationCylinder;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNImageSource : NSObject
{
}

- (void)connectToProxy:(struct __C3DImageProxy *)arg1;
- (BOOL)isPremultiplied;
- (BOOL)isOpaque;
- (id)textureSource;

@end

__attribute__((visibility("hidden")))
@interface SCNDelegateSource : SCNImageSource
{
    id _delegate;
}

@property(retain, nonatomic) id delegate; // @synthesize delegate=_delegate;
- (BOOL)isOpaque;
- (id)textureSource;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNDisplayLink : NSObject
{
    unsigned int _displayID;
    struct _CGLPixelFormatObject *_pixelFormat;
    struct __CVDisplayLink *_cvDisplayLink;
    struct _CGLContextObject *_cglContext;
    id _owner;
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
    BOOL _paused;
    BOOL _invalidated;
    BOOL _asynchronous;
    long long _frameInterval;
    double _lastVideoOutput;
    int _queuedFrameCount;
}

- (void)displayIDDidChange:(unsigned int)arg1;
- (BOOL)_isInvalidated;
- (void)setNeedsDisplay;
- (void)invalidate;
- (void)_teardown;
- (void)_resume;
- (void)_pause;
- (void)_callbackWithTime:(double)arg1 andDeltaTime:(double)arg2;
- (int)queuedFrameCount;
@property struct _CGLPixelFormatObject *pixelFormat;
@property struct _CGLContextObject *CGLContext;
@property(nonatomic) long long frameInterval;
- (void)setPaused:(BOOL)arg1 nextFrameTimeHint:(double)arg2;
@property(nonatomic, getter=isPaused) BOOL paused;
- (void)dealloc;
- (void)willDie;
- (id)initWithOwner:(id)arg1 context:(struct _CGLContextObject *)arg2 pixelFormat:(struct _CGLPixelFormatObject *)arg3 asynchronous:(BOOL)arg4 displayID:(unsigned int)arg5 queue:(id)arg6 block:(CDUnknownBlockType)arg7;
- (id)init;

@end

@interface SCNFloor : SCNGeometry
{
    unsigned int _isPresentationInstance:1;
    unsigned int _usesCustomScaleFactor:1;
    float _reflectivity;
    float _reflectionFalloffStart;
    float _reflectionFalloffEnd;
    float _reflectionResolutionScaleFactor;
    unsigned long long _reflectionSampleCount;
}

+ (BOOL)supportsSecureCoding;
+ (id)floor;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNFloor:(id)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setReflectionFallOffEnd:(double)arg1;
- (void)setReflectionFallOffStart:(double)arg1;
- (double)reflectionFallOffEnd;
- (double)reflectionFallOffStart;
@property(nonatomic) double reflectivity;
- (void)setReflectionSampleCount:(unsigned long long)arg1;
- (unsigned long long)reflectionSampleCount;
@property(nonatomic) double reflectionResolutionScaleFactor;
@property(nonatomic) double reflectionFalloffStart;
@property(nonatomic) double reflectionFalloffEnd;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (struct __C3DFloor *)floorRef;
- (void)dealloc;
- (id)init;

@end

@interface SCNGeometryElement : NSObject <NSSecureCoding>
{
    // Error parsing type: ^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__CFData}III^{__C3DMeshElement}CCCc^v^{__C3DMeshSource}[2]}, name: _meshElement
    NSData *_elementData;
    long long _primitiveType;
    long long _primitiveCount;
    long long _bytesPerIndex;
}

+ (BOOL)supportsSecureCoding;
+ (id)geometryElementWithData:(id)arg1 primitiveType:(long long)arg2 primitiveCount:(long long)arg3 bytesPerIndex:(long long)arg4;
+ (id)geometryElementWithMDLSubmesh:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
-     // Error parsing type: ^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__CFData}III^{__C3DMeshElement}CCCc^v^{__C3DMeshSource}[2]}16@0:8, name: meshElement
@property(readonly, nonatomic) long long bytesPerIndex;
@property(readonly, nonatomic) long long primitiveCount;
@property(readonly, nonatomic) long long primitiveType;
@property(readonly, nonatomic) NSData *data;
- (id)initWithData:(id)arg1 primitiveType:(long long)arg2 primitiveCount:(long long)arg3 bytesPerIndex:(long long)arg4;
- (void)dealloc;
- (id)init;
-     // Error parsing type: @24@0:8^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__CFData}III^{__C3DMeshElement}CCCc^v^{__C3DMeshSource}[2]}16, name: initWithMeshElement:

@end

@interface SCNGeometrySource : NSObject <NSSecureCoding>
{
    struct __C3DMeshSource *_meshSource;
    NSData *_data;
    NSString *_semantic;
    long long _vectorCount;
    BOOL _floatComponents;
    long long _componentsPerVector;
    long long _bytesPerComponent;
    long long _dataOffset;
    long long _dataStride;
    unsigned char _mkSemantic;
}

+ (BOOL)supportsSecureCoding;
+ (id)geometrySourceWithTextureCoordinates:(const struct CGPoint *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithNormals:(const struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithVertices:(const struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithData:(id)arg1 semantic:(id)arg2 vectorCount:(long long)arg3 floatComponents:(BOOL)arg4 componentsPerVector:(long long)arg5 bytesPerComponent:(long long)arg6 dataOffset:(long long)arg7 dataStride:(long long)arg8;
+ (id)dataWithPointArray:(const struct CGPoint *)arg1 count:(long long)arg2 bytesPerComponent:(long long *)arg3;
+ (id)dataWithVector3Array:(const struct SCNVector3 *)arg1 count:(long long)arg2 bytesPerComponent:(long long *)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct __C3DMeshSource *)meshSource;
- (void)_clearC3DCache;
- (short)baseTypeForDataFormat;
@property(readonly, nonatomic) long long dataStride;
@property(readonly, nonatomic) long long dataOffset;
@property(readonly, nonatomic) long long bytesPerComponent;
@property(readonly, nonatomic) long long componentsPerVector;
@property(readonly, nonatomic) BOOL floatComponents;
@property(readonly, nonatomic) long long vectorCount;
@property(readonly, nonatomic) NSString *semantic;
@property(readonly, nonatomic) NSData *data;
- (void)setMkSemantic:(id)arg1;
- (id)mkSemantic;
- (id)initWithData:(id)arg1 semantic:(id)arg2 vectorCount:(long long)arg3 floatComponents:(BOOL)arg4 componentsPerVector:(long long)arg5 bytesPerComponent:(long long)arg6 dataOffset:(long long)arg7 dataStride:(long long)arg8;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithMeshSource:(struct __C3DMeshSource *)arg1;

@end

@interface SCNHeadMountedDisplayRenderingTechnique : SCNTechnique <SCNStereoscopicRenderingTechnique>
{
}

@property(nonatomic) struct SCNVector4 barrelDistortionWarpCoefficients;
@property(nonatomic) struct CGPoint barrelDistortionLensCenter;
@property(nonatomic) double barrelDistortionOutputScale;
@property(nonatomic) double barrelDistortionInputScale;
@property(nonatomic) double interaxialDistance;
- (id)init;

@end

@interface SCNHitTestResult : NSObject
{
    struct __C3DHitTestResult *_result;
}

+ (id)hitTestResultsFromHitTestResultRef:(struct __CFArray *)arg1;
- (id)description;
@property(readonly, nonatomic) struct CATransform3D modelTransform;
- (struct CGPoint)textureCoordinate;
- (struct CGPoint)textureCoordinatesWithMappingChannel:(long long)arg1;
@property(readonly, nonatomic) struct SCNVector3 worldNormal;
@property(readonly, nonatomic) struct SCNVector3 localNormal;
@property(readonly, nonatomic) struct SCNVector3 worldCoordinates;
@property(readonly, nonatomic) struct SCNVector3 localCoordinates;
@property(readonly, nonatomic) long long faceIndex;
@property(readonly, nonatomic) long long geometryIndex;
@property(readonly, nonatomic) SCNNode *node;
- (void)dealloc;
- (id)initWithResult:(struct __C3DHitTestResult *)arg1;

@end

@interface SCNIKConstraint : SCNConstraint
{
    SCNNode *_chainRootNode;
    struct SCNVector3 _ikTarget;
    NSMutableDictionary *_jointsPerNode;
}

+ (BOOL)supportsSecureCoding;
+ (id)inverseKinematicsConstraintWithChainRootNode:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNIKConstraint:(id)arg1;
- (void)_customEncodingOfSCNIKConstraint:(id)arg1;
- (void)_didDecodeSCNIKConstraint:(id)arg1;
- (double)maxAllowedRotationAngleForJoint:(id)arg1;
- (void)setMaxAllowedRotationAngle:(double)arg1 forJoint:(id)arg2;
- (id)jointForNode:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(nonatomic) struct SCNVector3 targetPosition;
- (void)setChainRootNode:(id)arg1;
@property(readonly, nonatomic) SCNNode *chainRootNode;
- (id)initWithChainRootNode:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNIKJoint : NSObject
{
    SCNNode *joint;
    double maxAllowedRotationAngle;
}

@property(nonatomic) double maxAllowedRotationAngle; // @synthesize maxAllowedRotationAngle;
@property(nonatomic) __weak SCNNode *joint; // @synthesize joint;

@end

__attribute__((visibility("hidden")))
@interface SCNImagePackerView : NSOpenGLView
{
    NSPopUpButton *_packerIndex;
    NSTextField *_koUsed;
    NSTextField *_koFree;
    struct __C3DResourceManager *_mngr;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)beginOrtho;
- (void)setResourceManager:(struct __C3DResourceManager *)arg1;
- (void)awakeFromNib;
- (void)autoUpdate;

@end

__attribute__((visibility("hidden")))
@interface SCNJSImage : NSImage
{
}

+ (id)SCNJSExportProtocol;
+ (id)imageWithPath:(id)arg1;
+ (id)imageWithURL:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNJSValue : NSValue
{
}

+ (id)SCNJSExportProtocol;
+ (id)valueWithMatrix4:(struct CATransform3D)arg1;
+ (id)valueWithVector4:(struct SCNVector4)arg1;
+ (id)valueWithVector3:(struct SCNVector3)arg1;
- (struct CATransform3D)matrix4;
- (struct SCNVector4)vector4;
- (struct SCNVector3)vector3;

@end

__attribute__((visibility("hidden")))
@interface SCNJitterer : NSObject
{
    BOOL _enabled;
    unsigned long long _state;
    unsigned long long _iteration;
    BOOL _restartSourceIsSuspended;
    id <SCNJittererDelegate> _delegate;
    NSObject<OS_dispatch_source> *_restartSource;
}

+ (void)initialize;
- (void)restart;
- (void)stopIfNeeded;
- (void)jitter;
- (void)update;
- (BOOL)isAborting;
@property(nonatomic, getter=isEnabled) BOOL enabled;
- (void)delegateWillDie;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

@interface SCNKeyedUnarchiver : NSKeyedUnarchiver
{
    NSDictionary *_context;
    SCNAssetCatalog *_assetCatalog;
    NSString *lookUpKey;
    id lookUpFoundInstance;
}

@property(retain, nonatomic) id lookUpFoundInstance; // @synthesize lookUpFoundInstance;
@property(retain, nonatomic) NSString *lookUpKey; // @synthesize lookUpKey;
@property(retain, nonatomic) SCNAssetCatalog *assetCatalog; // @synthesize assetCatalog=_assetCatalog;
@property(retain, nonatomic) NSDictionary *context; // @synthesize context=_context;
- (void)dealloc;

@end

@interface SCNLayer : CAOpenGLLayer <SCNSceneRenderer, SCNTechniqueSupport>
{
    SCNJitterer *_jitterer;
    SCNRenderer *_renderer;
    SCNScene *_scene;
    struct _CGLContextObject *_mainContext;
    BOOL _drawForJittering;
    BOOL _rendersIntoMaterial;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (id)_kvoKeysForwardedToRenderer;
- (id)_authoringEnvironment;
- (void)set_showsAuthoringEnvironment:(BOOL)arg1;
- (BOOL)_showsAuthoringEnvironment;
@property(nonatomic) unsigned long long debugOptions;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)pause;
- (void)stop;
- (void)play;
@property(nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
- (BOOL)_supportsJitteringSyncRedraw;
- (BOOL)_canJitter;
- (void)_cancelJitterRedisplay;
- (void)_jitterRedisplayWithContext:(struct _CGLContextObject *)arg1;
- (BOOL)inLiveResize;
- (id)contentLayer;
- (void)_sceneDidUpdate:(id)arg1;
- (void)_systemTimeAnimationStarted:(id)arg1;
- (void)drawInCGLContext:(struct _CGLContextObject *)arg1 pixelFormat:(struct _CGLPixelFormatObject *)arg2 forLayerTime:(double)arg3 displayTime:(const CDStruct_e50ab651 *)arg4;
- (BOOL)canDrawInCGLContext:(struct _CGLContextObject *)arg1 pixelFormat:(struct _CGLPixelFormatObject *)arg2 forLayerTime:(double)arg3 displayTime:(const CDStruct_e50ab651 *)arg4;
- (struct _CGLContextObject *)copyCGLContextForPixelFormat:(struct _CGLPixelFormatObject *)arg1;
- (struct _CGLPixelFormatObject *)copyCGLPixelFormatForDisplayMask:(unsigned int)arg1;
@property(readonly, nonatomic) void *context;
- (struct _CGLContextObject *)CGLContext;
@property(copy, nonatomic) SCNTechnique *technique;
@property(retain, nonatomic) SCNNode *audioListener;
@property(readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property(readonly, nonatomic) AVAudioEngine *audioEngine;
@property(readonly, nonatomic) unsigned long long stencilPixelFormat;
@property(readonly, nonatomic) unsigned long long depthPixelFormat;
@property(readonly, nonatomic) unsigned long long colorPixelFormat;
@property(readonly, nonatomic) id <MTLCommandQueue> commandQueue;
@property(readonly, nonatomic) id <MTLDevice> device;
@property(readonly, nonatomic) id <MTLRenderCommandEncoder> currentRenderCommandEncoder;
- (id)currentRenderPassDescriptor;
@property(retain, nonatomic) SKScene *overlaySKScene;
@property(nonatomic) BOOL loops;
@property(getter=isPlaying) BOOL playing;
- (void)stop:(id)arg1;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
@property(nonatomic) double sceneTime;
@property(nonatomic) double currentTime;
@property(retain, nonatomic) SCNScene *scene;
- (void)presentScene:(id)arg1 withTransition:(id)arg2 incomingPointOfView:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_glContextDidChange;
@property(readonly, nonatomic) unsigned long long renderingAPI;
- (void)setBackgroundColor:(struct CGColor *)arg1;
- (id)renderer;
- (void)setRenderer:(id)arg1;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (void)projectPoints:(struct SCNVector3 *)arg1 count:(unsigned long long)arg2;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (BOOL)prepareObject:(id)arg1 shouldAbortBlock:(CDUnknownBlockType)arg2;
- (id)nodesInsideFrustumWithPointOfView:(id)arg1;
- (BOOL)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
- (void)setRendersIntoMaterial:(BOOL)arg1;
- (BOOL)rendersIntoMaterial;
@property(nonatomic) BOOL autoenablesDefaultLighting;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) SCNNode *pointOfView;
- (void)_resumeDisplayLinkForDelayedFrame;
- (void)_checkAndUpdateDisplayLinkStateIfNeeded;
- (void)_resumeDisplayLinkIfNeeded;
- (void)_pauseDisplayLinkIfPossible;
- (void)_resumeDisplayLink;
- (void)_pauseDisplayLink;
@property(nonatomic) BOOL showsStatistics;
- (id)rendererOptions;
- (BOOL)canDrawConcurrently;
- (void)finalize;
- (void)dealloc;
- (id)initWithRenderer:(id)arg1 sharedContext:(struct _CGLContextObject *)arg2;
- (id)initWithLayer:(id)arg1;
- (id)init;
- (void)_commonInit;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNLayerSource : SCNImageSource
{
    CALayer *_layer;
}

@property(retain, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (void)dealloc;
- (BOOL)isOpaque;
- (id)textureSource;

@end

@interface SCNLevelOfDetail : NSObject <NSCopying, NSSecureCoding>
{
    struct __C3DLOD *_lod;
    long long _mode;
    SCNGeometry *_geometry;
}

+ (BOOL)supportsSecureCoding;
+ (id)levelOfDetailWithGeometry:(id)arg1 worldSpaceDistance:(double)arg2;
+ (id)levelOfDetailWithGeometry:(id)arg1 screenSpaceRadius:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNLevelOfDetail:(id)arg1;
- (void)_customEncodingOfSCNLevelOfDetail:(id)arg1;
- (id)description;
@property(readonly) double worldSpaceDistance;
@property(readonly) double screenSpaceRadius;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)thresholdValue;
- (long long)thresholdMode;
@property(readonly) SCNGeometry *geometry;
- (void *)__CFObject;
- (id)initWithGeometry:(id)arg1 thresholdMode:(long long)arg2 thresholdValue:(id)arg3;
- (id)initWithGeometry:(id)arg1 thresholdMode:(long long)arg2 lod:(struct __C3DLOD *)arg3;
- (void)_setupWithGeometry:(id)arg1 thresholdMode:(long long)arg2 value:(double)arg3;
- (void)dealloc;

@end

@interface SCNLight : NSObject <SCNAnimatable, SCNTechniqueSupport, NSCopying, NSSecureCoding>
{
    struct __C3DLight *_light;
    unsigned int _isPresentationInstance:1;
    unsigned int _goboProjectShadows:1;
    unsigned int _castsShadow:1;
    unsigned int _usesDeferredShadows:1;
    unsigned int _usesModulatedMode:1;
    unsigned int _baked:1;
    unsigned int _shouldBakeDirectLighting:1;
    unsigned int _shouldBakeIndirectLighting:1;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    NSString *_type;
    id _color;
    id _shadowColor;
    float _shadowRadius;
    double _orthographicScale;
    unsigned long long _shadowSampleCount;
    struct CGSize _shadowMapSize;
    unsigned long long _categoryBitMask;
    double _zNear;
    double _zFar;
    double _shadowBias;
    float _attenuationStartDistance;
    float _attenuationEndDistance;
    float _attenuationFalloffExponent;
    float _spotInnerAngle;
    float _spotOuterAngle;
    float _spotFalloffExponent;
    SCNMaterialProperty *_gobo;
    SCNTechnique *_technique;
    MDLLightProbe *_mkLightProbe;
}

+ (BOOL)supportsSecureCoding;
+ (id)lightWithLightRef:(struct __C3DLight *)arg1;
+ (id)light;
+ (id)lightWithMDLLightProbe:(id)arg1;
+ (id)lightWithMDLLight:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNLight:(id)arg1;
- (void)_customDecodingOfSCNLight:(id)arg1;
- (void)_customEncodingOfSCNLight:(id)arg1;
@property(readonly, nonatomic) SCNMaterialProperty *gobo;
@property(nonatomic) long long shadowMode;
@property(nonatomic) double zNear;
@property(nonatomic) double zFar;
- (void)setUsesModulatedMode:(BOOL)arg1;
- (BOOL)usesModulatedMode;
- (void)setUsesDeferredShadows:(BOOL)arg1;
- (BOOL)usesDeferredShadows;
@property(copy, nonatomic) NSString *type;
@property(copy, nonatomic) SCNTechnique *technique;
@property(nonatomic) double spotOuterAngle;
@property(nonatomic) double spotInnerAngle;
- (void)setSpotFalloffExponent:(double)arg1;
- (double)spotFalloffExponent;
@property(nonatomic) unsigned long long shadowSampleCount;
@property(nonatomic) double shadowRadius;
@property(nonatomic) struct CGSize shadowMapSize;
@property(retain, nonatomic) id shadowColor;
@property(nonatomic) double shadowBias;
@property(nonatomic) double orthographicScale;
@property(retain, nonatomic) id color;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) BOOL castsShadow;
- (void)setBaked:(BOOL)arg1;
- (BOOL)isBaked;
@property(nonatomic) double attenuationStartDistance;
@property(nonatomic) double attenuationFalloffExponent;
@property(nonatomic) double attenuationEndDistance;
- (void)setShouldBakeIndirectLighting:(BOOL)arg1;
- (BOOL)shouldBakeIndirectLighting;
- (void)setShouldBakeDirectLighting:(BOOL)arg1;
- (BOOL)shouldBakeDirectLighting;
- (void)setMkLightProbe:(id)arg1;
- (id)mkLightProbe;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (BOOL)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationLight;
- (void)_syncObjCModel;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (struct __C3DLight *)lightRef;
- (id)initPresentationLightWithLightRef:(struct __C3DLight *)arg1;
- (id)initWithLightRef:(struct __C3DLight *)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNManipulableItem : NSObject
{
    double _screenSize;
    SCNNode *node;
    id component;
    unsigned long long elementIndex;
}

+ (void)removeItemsFromScene:(id)arg1;
+ (void)addItems:(id)arg1 toScene:(id)arg2;
@property(nonatomic) unsigned long long elementIndex; // @synthesize elementIndex;
@property(retain, nonatomic) id component; // @synthesize component;
@property(retain, nonatomic) SCNNode *node; // @synthesize node;
- (void)validateClone;
- (id)cloneForManipulators;
@property(readonly, nonatomic) struct SCNVector3 elementPosition;
- (id)parentItem;
- (void)setPosition:(struct SCNVector3)arg1;
- (struct SCNVector3)scale;
- (struct CATransform3D)worldTransform;
@property(nonatomic) struct CATransform3D transform;
- (BOOL)isNodeManipulator;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (double)screenSize;
- (void)setScreenSize:(double)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNLightProbeManipulableItem : SCNManipulableItem
{
    BOOL _added;
    struct SCNVector3 _tmpPosition;
}

+ (void)removeItemsFromScene:(id)arg1;
+ (void)addItems:(id)arg1 toScene:(id)arg2;
+ (id)lightProbesManipulatorItemWithNode:(id)arg1 screenSize:(double)arg2 elementIndex:(unsigned long long)arg3;
- (void)_redraw;
- (void)_removeFromScene;
- (id)description;
- (void)_addToScene:(id)arg1;
- (id)cloneForManipulators;
- (id)parentItem;
- (void)setPosition:(struct SCNVector3)arg1;
- (struct CATransform3D)worldTransform;
- (struct SCNVector3)elementPosition;
- (void)setTransform:(struct CATransform3D)arg1;
- (struct CATransform3D)transform;
- (id)lightProbes;

@end

@interface SCNLightProbes : NSObject <NSSecureCoding>
{
    CDStruct_183601bc *_probes;
    struct {
        int _field1[4];
        int _field2[4];
        float _field3;
        _Bool _field4;
    } *_tetrahedrons;
    NSArray *_bakedLights;
    long long _bakingMethod;
    unsigned long long _probesCount;
    unsigned long long _tetrahedronCount;
    SCNNode *_owner;
    unsigned long long _probesCapacity;
    BOOL _tetrahedronsValid;
}

+ (BOOL)supportsSecureCoding;
+ (id)lightProbes;
@property(nonatomic) long long bakingMethod; // @synthesize bakingMethod=_bakingMethod;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNLightProbes:(id)arg1;
- (void)_customEncodingOfSCNLightProbes:(id)arg1;
- (struct __C3DScene *)sceneRef;
- (void)_removeOwner;
- (void)_setOwner:(id)arg1;
- (void)computeNeighbourIndexes;
- (void)tetrahedronAtIndex:(unsigned long long)arg1 indexes:(unsigned int *)arg2;
@property(readonly, nonatomic) unsigned long long tetrahedronCount;
- (void)updateTetrahedronsIfNeeded;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(retain, nonatomic) NSArray *bakedLights;
- (struct SCNVector3)probePositionAtIndex:(unsigned long long)arg1;
- (void)setProbePosition:(struct SCNVector3)arg1 atIndex:(unsigned long long)arg2;
- (void)arrangeProbesByDensityWithScene:(id)arg1;
- (void)arrangeProbesByGridWithBounds:(struct SCNVector3)arg1;
- (void)validateProbeArrayIfNeeded;
- (void)removeAllProbes;
- (void)removeProbeAtIndex:(unsigned long long)arg1;
- (void)insertProbesAtIndex:(unsigned long long)arg1;
@property(nonatomic) unsigned long long probesCount;
- (void)invalidateTetrahedons;
- (void)clear;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface SCNLookAtConstraint : SCNConstraint
{
    SCNNode *_target;
    BOOL _gimbalLockEnabled;
}

+ (BOOL)supportsSecureCoding;
+ (id)lookAtConstraintWithTarget:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNLookAtConstraint:(id)arg1;
- (void)_customEncodingOfSCNLookAtConstraint:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) SCNNode *target;
@property(nonatomic) BOOL gimbalLockEnabled;
- (void)dealloc;
- (id)initWithTarget:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNManipulator : NSObject
{
    SCNAuthoringEnvironment *_authoringEnvironment;
    NSOrderedSet *_targets;
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _xAxisToZAxisTransform
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _yAxisToZAxisTransform
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _xyPlaneToYZPlaneTransform
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _xyPlaneToXZPlaneTransform
    // Error parsing type: (?="axisMove"{?="selectedAxis"S"originalPosition""axisDirection""mouseDeltaVector"}"planeMove"{?="selectedPlane"S"originalPosition""planeNormal""pointInPlane""mouseDeltaVector"}"axisRotate"{?="selectedAxis"S"originalMouseLocation"{CGPoint="x"d"y"d}"rotationSign"f"originalRotation"{__C3DQuaternion="x"f"y"f"z"f"s"f}}), name: _actionData
    BOOL _isMouseDown;
    BOOL _readonly;
    unsigned long long _lastModifierFlags;
    unsigned short _action;
    struct {
        void *positions;
        struct __C3DQuaternion *orientations;
        struct CATransform3D *originalLocalMatrix;
    } _originalData;
    unsigned int _originalDataCount;
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _worldInitialMatrix
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _worldMatrix
    unsigned int _snapToAlignCount;
    CDStruct_62d14fc2 *_snapToAlignOnX;
    CDStruct_62d14fc2 *_snapToAlignOnY;
    CDStruct_62d14fc2 *_snapToAlignOnZ;
    NSMutableIndexSet *_snapXIndexes;
    NSMutableIndexSet *_snapYIndexes;
    NSMutableIndexSet *_snapZIndexes;
    long long _xAlignment;
    long long _yAlignment;
    long long _zAlignment;
    NSOrderedSet *_cloneSet;
    BOOL _cloning;
}

@property(nonatomic) long long zAlignment; // @synthesize zAlignment=_zAlignment;
@property(nonatomic) long long yAlignment; // @synthesize yAlignment=_yAlignment;
@property(nonatomic) long long xAlignment; // @synthesize xAlignment=_xAlignment;
@property(nonatomic) BOOL readonly; // @synthesize readonly=_readonly;
-     // Error parsing type: 116@0:816{SCNVector3=ddd}32d56B646884^B100^i108, name: _snapPositionToAlign:original:unit:axisMove:rayStart:rayDir:didSnap:snapIndexes:
- (void)prepareSnapToAlignDataIfNeeded;
- (void)prepareSnapToAlignData;
- (void)_prepareSnapToAlignData:(unsigned short)arg1 minOffset:maxOffset: /* Error: Ran out of types for this method. */;
- (const CDStruct_62d14fc2 *)snapInfoAtIndex:(unsigned long long)arg1 axis:(long long)arg2;
- (id)snapGuideIndexesOnAxis:(long long)arg1;
- (void)_updateCloneStateWithEvent:(CDStruct_811921b8)arg1;
- (id)setupClones;
- (void)validateClones;
- (void)addClonesToScene;
- (void)removeClonesFromScene;
- (id)scene;
- (BOOL)mouseUp:(CDStruct_811921b8)arg1;
- (BOOL)mouseDown:(CDStruct_811921b8)arg1;
- (BOOL)mouseDragged:(CDStruct_811921b8)arg1;
- (void)clearSnapIndexes;
- (BOOL)_applyWithEvent:(CDStruct_811921b8)arg1;
- (void)_deleteOriginalData;
- (void)_saveOriginalData;
- (void)updateItemsRotation:(struct __C3DQuaternion)arg1;
- (void)updateItemsPosition;
- (BOOL)mouseMoved:(CDStruct_811921b8)arg1;
- (void)draw;
- (BOOL)isDragging;
- (long long)effectiveEditingSpace;
- (id)copy;
- (void)dealloc;
- (id)init;
@property(readonly) struct CATransform3D transform;
- (void)_setAuthoringEnvironment:(id)arg1;
@property(readonly) SCNAuthoringEnvironment *authoringEnvironment;
@property(retain, nonatomic) SCNNode *target;
@property(retain, nonatomic) NSOrderedSet *targets;

@end

@interface SCNMaterial : NSObject <SCNAnimatable, SCNShadable, NSCopying, NSSecureCoding>
{
    struct __C3DMaterial *_material;
    SCNMaterialProperty *_ambient;
    SCNMaterialProperty *_diffuse;
    SCNMaterialProperty *_specular;
    SCNMaterialProperty *_emission;
    SCNMaterialProperty *_reflective;
    SCNMaterialProperty *_transparent;
    SCNMaterialProperty *_multiply;
    SCNMaterialProperty *_normal;
    SCNMaterialProperty *_ambientOcclusion;
    SCNMaterialProperty *_selfIllumination;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    NSMutableDictionary *_valuesForUndefinedKeys;
    float _shininess;
    float _transparency;
    float _indexOfRefraction;
    float _fresnelExponent;
    long long _transparencyMode;
    NSString *_lightingModelName;
    long long _cullMode;
    SCNShadableHelper *_shadableHelper;
    BOOL _isPresentationInstance;
    BOOL _litPerPixel;
    BOOL _doubleSided;
    BOOL _locksAmbientWithDiffuse;
    BOOL _avoidsOverLighting;
    BOOL _writesToDepthBuffer;
    BOOL _readsFromDepthBuffer;
    long long _fillMode;
    long long _blendMode;
}

+ (BOOL)supportsSecureCoding;
+ (id)materialNamed:(id)arg1;
+ (BOOL)resolveInstanceMethod:(SEL)arg1;
+ (BOOL)accessInstanceVariablesDirectly;
+ (id)materialWithContents:(id)arg1;
+ (id)materialWithColor:(id)arg1;
+ (id)material;
+ (id)materialWithMaterialRef:(struct __C3DMaterial *)arg1;
+ (id)materialWithMDLMaterial:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customEncodingOfSCNMaterial:(id)arg1;
- (void)_customDecodingOfSCNMaterial:(id)arg1;
@property(retain, nonatomic) SCNProgram *program;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
- (void)_setupShadableHelperIfNeeded;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (struct __C3DMaterial *)materialRefCreateIfNeeded;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setAttributes:(id)arg1;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
@property(readonly, copy) NSString *description;
- (long long)fillMode;
- (void)setFillMode:(long long)arg1;
@property(nonatomic) long long cullMode;
@property(nonatomic, getter=isDoubleSided) BOOL doubleSided;
- (void)setContent:(id)arg1;
- (id)content;
- (void)setContents:(id)arg1;
- (id)contents;
@property(nonatomic) BOOL readsFromDepthBuffer;
@property(nonatomic) BOOL writesToDepthBuffer;
- (BOOL)avoidsOverLighting;
- (void)setAvoidsOverLighting:(BOOL)arg1;
@property(nonatomic) BOOL locksAmbientWithDiffuse;
@property(nonatomic, getter=isLitPerPixel) BOOL litPerPixel;
@property(copy, nonatomic) NSString *lightingModelName;
@property(nonatomic) long long blendMode;
@property(nonatomic) double fresnelExponent;
- (double)indexOfRefraction;
- (void)setIndexOfRefraction:(double)arg1;
@property(nonatomic) double transparency;
@property(nonatomic) double shininess;
@property(nonatomic) long long transparencyMode;
@property(readonly, nonatomic) SCNMaterialProperty *selfIllumination;
@property(readonly, nonatomic) SCNMaterialProperty *ambientOcclusion;
@property(readonly, nonatomic) SCNMaterialProperty *normal;
@property(readonly, nonatomic) SCNMaterialProperty *multiply;
@property(readonly, nonatomic) SCNMaterialProperty *transparent;
@property(readonly, nonatomic) SCNMaterialProperty *reflective;
@property(readonly, nonatomic) SCNMaterialProperty *emission;
@property(readonly, nonatomic) SCNMaterialProperty *specular;
@property(readonly, nonatomic) SCNMaterialProperty *diffuse;
@property(readonly, nonatomic) SCNMaterialProperty *ambient;
- (id)_property:(id *)arg1;
- (id)properties;
- (id)color;
- (void)setColor:(id)arg1;
- (void)_setupMaterialProperty:(id *)arg1;
- (Class)_materialPropertyClass;
- (struct __C3DEffectCommonProfile *)commonProfile;
- (struct __C3DMaterial *)materialRef;
- (BOOL)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationMaterial;
- (void)_syncObjCModel;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
- (void)dealloc;
- (id)initPresentationMaterialWithMaterialRef:(struct __C3DMaterial *)arg1;
- (id)initWithMaterialRef:(struct __C3DMaterial *)arg1;
- (id)init;
- (id)_integrateModelKitComputedMaps:(id)arg1 withGeometry:(id)arg2 node:(id)arg3 texturePathProvider:(CDUnknownBlockType)arg4 vertexAttributeNamed:(id)arg5 materialPropertyNamed:(id)arg6 filePath:(id)arg7;
- (id)debugQuickLookData;
- (id)debugQuickLookObject;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNMaterialAttachment : NSObject
{
    unsigned int glID;
    unsigned int target;
    void *context;
    struct CGSize size;
    NSDictionary *options;
}

+ (id)materialAttachmentWithGLKTextureInfo:(id)arg1;
@property(copy, nonatomic) NSDictionary *options; // @synthesize options;
@property(nonatomic) struct CGSize size; // @synthesize size;
@property(nonatomic) void *context; // @synthesize context;
@property(nonatomic) unsigned int target; // @synthesize target;
@property(nonatomic) unsigned int glID; // @synthesize glID;
- (void)dealloc;

@end

@interface SCNMaterialProperty : NSObject <SCNAnimatable, NSSecureCoding>
{
    unsigned int _isPresentationInstance:1;
    unsigned int _isCommonProfileProperty:1;
    id _parent;
    int _propertyType;
    NSString *_customSlotName;
    SCNOrderedDictionary *_animations;
    NSColor *_borderColor;
    unsigned char _contentType;
    id _contents;
    long long _mappingChannel;
    float _intensity;
    float _maxAnisotropy;
    long long _minificationFilter;
    long long _magnificationFilter;
    long long _mipFilter;
    long long _wrapS;
    long long _wrapT;
    struct __C3DEffectSlot *_customSlot;
    struct __C3DImage *_c3dImage;
    struct __C3DTextureProxy *_textureProxy;
    struct CATransform3D *_contentTransform;
}

+ (BOOL)supportsSecureCoding;
+ (id)copyImageFromC3DImage:(struct __C3DImage *)arg1;
+ (id)_copyImageFromC3DImage:(struct __C3DImage *)arg1;
+ (struct __C3DImage *)copyC3DImageFromImage:(id)arg1;
+ (struct __C3DImage *)copyC3DImageFromImage:(id)arg1 autoCubemap:(BOOL)arg2;
+ (struct __C3DImage *)_copyC3DImageFromImageData:(id)arg1 typeID:(unsigned long long)arg2;
+ (id)materialPropertyWithContents:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNMaterialProperty:(id)arg1;
- (void)_didDecodeSCNMaterialProperty:(id)arg1;
- (void)_customEncodingOfSCNMaterialProperty:(id)arg1;
- (void)_updateMaterialColor:(id)arg1;
- (void)_updateMaterialImage:(id)arg1;
- (void)_updateMaterialProceduralContents:(id)arg1;
- (void)_updateMaterialLayer:(id)arg1;
- (void)_updateMaterialSKTexture:(id)arg1;
- (void)_updateMaterialMTLTexture:(id)arg1;
- (void)_updateMaterialSKScene:(id)arg1;
- (void)_layerDidChange:(id)arg1;
- (void)_updateMaterialAttachment:(id)arg1;
-     // Error parsing type: v80@0:8(C3DMatrix4x4=[16f][4])16, name: _updateMaterialPropertyTransform:
- (void)_updateMaterialFilters;
- (void)_updateMaterialBorderColor:(id)arg1;
- (BOOL)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationMaterialProperty;
- (void)copyPropertiesFrom:(id)arg1;
- (void)_syncObjCModel;
- (struct __C3DScene *)sceneRef;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (struct __C3DTextureSampler *)textureSampler;
- (struct __C3DEffectCommonProfile *)commonProfile;
- (struct __C3DEffectSlot *)effectSlot;
- (id)parent;
- (void)parentWillDie:(id)arg1;
@property(readonly, copy) NSString *description;
- (int)propertyType;
- (id)slotName;
@property(nonatomic) struct CATransform3D contentsTransform;
- (id)mtlTexture;
- (void)setMtlTexture:(id)arg1;
- (id)proceduralContents;
- (void)setProceduralContents:(id)arg1;
@property(nonatomic) double maxAnisotropy;
- (id)content;
- (void)setContent:(id)arg1;
@property(retain, nonatomic) id contents;
- (id)layer;
- (void)setLayer:(id)arg1;
- (id)skTexture;
- (void)setSkTexture:(id)arg1;
- (id)skScene;
- (void)setSkScene:(id)arg1;
- (id)pvrtcData;
- (id)image;
- (void)setImage:(id)arg1;
- (id)attachment;
- (void)setAttachment:(id)arg1;
- (BOOL)_supportsCubeMaps;
@property(nonatomic) long long wrapT;
@property(nonatomic) long long wrapS;
@property(retain, nonatomic) id borderColor;
@property(nonatomic) double intensity;
@property(nonatomic) long long mappingChannel;
- (long long)_presentationMappingChannel;
@property(nonatomic) long long mipFilter;
@property(nonatomic) long long magnificationFilter;
@property(nonatomic) long long minificationFilter;
- (struct C3DColor4)borderColor4;
- (struct C3DColor4)color4;
- (struct __C3DImage *)getC3DImageRef;
- (void)_setC3DImageRef:(struct __C3DImage *)arg1;
- (id)color;
- (void)setColor:(id)arg1;
- (void)_setColor:(id)arg1;
- (void)_clearContents;
- (id)_animationPathForKey:(id)arg1;
- (struct __C3DEffectSlot *)effectSlotCreateIfNeeded:(BOOL)arg1;
- (void)linkCustomPropertyWithParent:(id)arg1 andCustomName:(id)arg2;
- (void)unlinkCustomPropertyWithParent:(id)arg1;
- (void)_setParent:(id)arg1;
- (void)dealloc;
- (void)__allocateContentTransformIfNeeded;
- (id)initPresentationMaterialPropertyWithModelProperty:(id)arg1;
- (id)initWithParent:(id)arg1 andCustomName:(id)arg2;
- (id)initWithParent:(id)arg1 propertyType:(int)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNMetalBackingLayer : CAMetalLayer
{
    SCNView *_parentView;
}

@property(nonatomic) SCNView *parentView; // @synthesize parentView=_parentView;
- (void)display;

@end

__attribute__((visibility("hidden")))
@interface SCNMonitor : NSWindowController
{
    BOOL _nibLoaded;
    NSView *_modelViewContainer;
    NSView *_modelInspectors[10];
    SCNView *_scnView;
}

- (void)launchMonitor:(id)arg1;
- (void)setSCNView:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)sceneDidChange;
- (void)_updateResourceManager;
- (struct __C3DScene *)scene;
- (void)modelTypeChanged:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (void)awakeFromNib;
- (void)showModelInspector:(int)arg1;

@end

@interface SCNMorpher : NSObject <SCNAnimatable, NSSecureCoding>
{
    struct __C3DMorph *_morpher;
    unsigned int _isPresentationInstance:1;
    long long _calculationMode;
    SCNOrderedDictionary *_animations;
    NSArray *_targets;
    NSMutableArray *_weights;
    NSString *_name;
    BOOL _shouldMorphNormals;
}

+ (BOOL)supportsSecureCoding;
+ (id)morpher;
+ (id)morpherWithMorphRef:(struct __C3DMorph *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNMorpher:(id)arg1;
- (void)_customEncodingOfSCNMorpher:(id)arg1;
- (void)_customDecodingOfSCNMorpher:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
@property(nonatomic) long long calculationMode;
- (void)setWeights:(id)arg1;
- (double)weightForTargetAtIndex:(unsigned long long)arg1;
- (void)setWeight:(double)arg1 forTargetAtIndex:(unsigned long long)arg2;
- (void)setShouldMorphNormals:(BOOL)arg1;
- (BOOL)shouldMorphNormals;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationInstance;
- (id)presentationMorpher;
- (BOOL)isPausedOrPausedByInheritance;
- (void)_syncObjCModel;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
@property(readonly, copy) NSString *description;
- (struct __C3DMorph *)morphRef;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;
@property(copy, nonatomic) NSArray *targets;
- (void)dealloc;
- (id)initPresentationMorpherWithMorphRef:(struct __C3DMorph *)arg1;
- (id)initWithMorphRef:(struct __C3DMorph *)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNMovieExportOperation : _SCNExportOperation
{
    AVAssetWriterInput *_assetWriterInput;
    AVAssetWriterInputPixelBufferAdaptor *_avAdaptor;
    AVAssetWriter *_assetWriter;
}

- (void)main;
- (void)appendImage:(struct CGImage *)arg1 withPresentationTime:(CDStruct_198678f7)arg2 usingAdaptor:(id)arg3;
- (void)_finishedExport;
- (struct CGImage *)_copySnapshotWithOptions:(id)arg1;
- (void)_setupMovieToWritableFile:(id)arg1;
- (void)dealloc;
- (id)initWithScene:(id)arg1 size:(struct CGSize)arg2 attributes:(id)arg3 outputURL:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface SCNMutableGeometry : SCNGeometry
{
}

- (void)mutateGeometrySourcesWithSemantics:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)mutableGeometrySourcesForSemantic:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNMutableGeometrySource : SCNGeometrySource
{
}

@property(readonly, nonatomic) NSMutableData *mutableData;

@end

@interface SCNNode : NSObject <NSCopying, NSSecureCoding, SCNAnimatable, SCNActionable, SCNBoundingVolume>
{
    // Error parsing type: ^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}, name: _node
    SCNNode *_parent;
    NSMutableArray *_childNodes;
    SCNNode *_presentationInstance;
    unsigned int _isPresentationInstance:1;
    unsigned int _lightLoaded:1;
    unsigned int _geometryLoaded:1;
    unsigned int _cameraLoaded:1;
    unsigned int _skinnerLoaded:1;
    unsigned int _morpherLoaded:1;
    unsigned int _paused:1;
    unsigned int _pausedByInheritance:1;
    unsigned int _affineUpToDate:1;
    unsigned int _transformUpToDate:1;
    unsigned int _hasPivot:1;
    unsigned int _usesEuler:1;
    unsigned int _hidden:1;
    unsigned int _castsShadow:1;
    unsigned int _ignoreAnimationWhenCopying_tmp:1;
    unsigned int _hasComponentBitmask:10;
    struct CATransform3D _transform;
    struct SCNVector3 _position;
    struct SCNVector4 _rotation;
    struct SCNVector3 _scale;
    float _opacity;
    unsigned long long _categoryBitMask;
    SCNNodeComponent *_components;
    SCNOrderedDictionary *_animations;
    SCNOrderedDictionary *_actions;
    struct SCNVector3 *_fixedBoundingBoxExtrema;
    long long _renderingOrder;
    NSString *_name;
    NSMutableDictionary *_valueForKey;
    id _rendererDelegate;
}

+ (BOOL)supportsSecureCoding;
+ (BOOL)resolveInstanceMethod:(SEL)arg1;
+ (id)keyPathsForValuesAffectingScale;
+ (id)keyPathsForValuesAffectingOrientation;
+ (id)keyPathsForValuesAffectingEulerAngles;
+ (id)keyPathsForValuesAffectingRotation;
+ (id)keyPathsForValuesAffectingTransform;
+ (id)keyPathsForValuesAffectingPosition;
+     // Error parsing type: @24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16, name: nodeWithNodeRef:
+ (id)nodeWithGeometry:(id)arg1;
+ (id)node;
+ (id)nodeWithMDLObject:(id)arg1;
+ (id)nodeWithMDLAsset:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNNode:(id)arg1;
- (void)_customDecodingOfSCNNode:(id)arg1;
- (void)_customEncodingOfSCNNode:(id)arg1;
- (struct CATransform3D)convertTransform:(struct CATransform3D)arg1 fromNode:(id)arg2;
- (struct CATransform3D)convertTransform:(struct CATransform3D)arg1 toNode:(id)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 fromNode:(id)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 toNode:(id)arg2;
- (void)replaceObjectInParticleSystemsAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromParticleSystemsAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inParticleSystemsAtIndex:(unsigned long long)arg2;
- (id)objectInParticleSystemsAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfParticleSystems;
- (void)removeParticleSystem:(id)arg1;
- (void)removeAllParticleSystems;
- (void)addParticleSystem:(id)arg1;
- (id)particleSystems;
- (void)_removeDeadParticleSystem:(struct __C3DParticleSystem *)arg1;
- (id)_particleSystems;
- (void)setLightProbes:(id)arg1;
- (id)lightProbes;
@property(retain, nonatomic) SCNPhysicsField *physicsField;
@property(retain, nonatomic) SCNPhysicsBody *physicsBody;
@property(copy) NSArray *constraints;
- (void)removeAllActions;
- (void)removeActionForKey:(id)arg1;
- (void)_removeAction:(id)arg1 forKey:(id)arg2;
- (id)actionForKey:(id)arg1;
@property(readonly, nonatomic) BOOL hasActions;
- (id)actions;
@property(readonly, nonatomic) NSArray *actionKeys;
- (void)runAction:(id)arg1 forKey:(id)arg2;
- (void)runAction:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)runAction:(id)arg1;
- (void)runAction:(id)arg1 forKey:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(nonatomic, getter=isPaused) BOOL paused;
- (BOOL)isPausedOrPausedByInheritance;
- (void)_setPaused:(BOOL)arg1;
- (void)_actionsTimeJump:(double)arg1;
- (id)flattenedCopy;
- (id)flattenedClone;
- (id)getBoundingBox;
- (id)getBoundingSphere;
- (BOOL)getFrustum:(struct C3DPlane *)arg1 withViewport: /* Error: Ran out of types for this method. */;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (void)setBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (void)replaceChildNode:(id)arg1 with:(id)arg2;
- (void)insertChildNode:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeAllChilds;
- (unsigned long long)indexOfChildNode:(id)arg1;
- (void)removeFromParentNode;
- (void)replaceObjectInChildNodesAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromChildNodesAtIndex:(unsigned long long)arg1;
- (void)__removeObjectFromChildNodesAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inChildNodesAtIndex:(unsigned long long)arg2;
- (void)__insertObject:(id)arg1 inChildNodesAtIndex:(unsigned long long)arg2;
- (void)addChildNode:(id)arg1;
- (BOOL)canAddChildNode:(id)arg1;
- (void)_reSyncModelTree;
- (void)_initChildNodesArray;
- (id)objectInChildNodesAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfChildNodes;
- (void)_setParent:(id)arg1;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (BOOL)parseSpecialKey:(id)arg1 withPath:(id)arg2 intoDestination:(id *)arg3 remainingPath:(id *)arg4;
- (void)renderInContext:(void *)arg1;
@property(nonatomic) id <SCNNodeRendererDelegate> rendererDelegate;
@property(readonly, copy) NSString *description;
@property(copy, nonatomic) NSArray *filters;
@property(retain, nonatomic) SCNGeometry *geometry;
@property(retain, nonatomic) SCNCamera *camera;
@property(retain, nonatomic) SCNMorpher *morpher;
@property(retain, nonatomic) SCNSkinner *skinner;
- (void)setGizmo:(BOOL)arg1;
- (BOOL)isGizmo;
- (BOOL)isJoint;
@property(retain, nonatomic) SCNLight *light;
- (void)_setComponent:(id)arg1 withType:(long long)arg2;
- (id)mutableChildNodes;
@property(readonly, nonatomic) NSArray *childNodes;
@property(readonly, nonatomic) SCNNode *parentNode;
- (BOOL)hidden;
@property(nonatomic) long long renderingOrder;
@property(nonatomic) double opacity;
@property(nonatomic, getter=isHidden) BOOL hidden;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) BOOL castsShadow;
@property(nonatomic) struct CATransform3D pivot;
@property(readonly, nonatomic) struct CATransform3D worldTransform;
- (void)setWorldTransform:(struct CATransform3D)arg1;
@property(nonatomic) struct CATransform3D transform;
@property(nonatomic) struct SCNVector4 rotation;
@property(nonatomic) struct SCNVector3 scale;
- (void)_setScale:(struct SCNVector3)arg1;
@property(nonatomic) struct SCNVector3 position;
- (void)_setPosition:(struct SCNVector3)arg1;
@property(nonatomic) struct SCNVector3 eulerAngles;
- (struct SCNVector3)_euler;
@property(nonatomic) struct SCNVector4 orientation;
- (void)_setQuaternion:(struct SCNVector4)arg1;
- (void)setQuaternion:(struct SCNVector4)arg1;
- (struct SCNVector4)quaternion;
- (struct SCNVector4)_quaternion;
- (BOOL)_usesEulerRepresentation;
- (void)_updateAffine;
- (void)_updateTransform;
- (void)_registerAsObserver;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
-     // Error parsing type: ^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16@0:8, name: nodeRef
- (id)__morpher;
- (id)__skinner;
- (id)__geometry;
- (id)__camera;
- (id)__light;
- (void)_assignComponent:(id)arg1 toContainerWithType:(long long)arg2;
- (void)_removeComponentWithType:(long long)arg1;
- (id)_findComponentWithType:(long long)arg1;
- (id)jsChildNodesWithAttribute:(id)arg1;
- (id)childNodeWithName:(id)arg1;
- (id)objectInChildNodesWithAttribute:(id)arg1 firstOnly:(BOOL)arg2;
- (id)childNodesWithAttribute:(Class)arg1 recursively:(BOOL)arg2;
- (void)_childNodesWithAttribute:(Class)arg1 output:(id)arg2 recursively:(BOOL)arg3;
- (void)enumerateChildNodesUsingBlock:(CDUnknownBlockType)arg1;
- (BOOL)_enumerateChildNodesUsingBlock:(CDUnknownBlockType)arg1;
- (id)childNodesPassingTest:(CDUnknownBlockType)arg1;
- (id)childNodesPassingTest:(CDUnknownBlockType)arg1 recursively:(BOOL)arg2;
- (BOOL)_childNodesPassingTest:(CDUnknownBlockType)arg1 recursively:(BOOL)arg2 output:(id)arg3;
- (id)objectInChildNodesWithName:(id)arg1;
- (id)childNodeWithName:(id)arg1 recursively:(BOOL)arg2;
- (void)_expandChildArrayIfNeeded;
- (BOOL)_isAReference;
- (id)clone;
- (id)_copyRecursively;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setAttributes:(id)arg1;
- (void)dump;
- (void)_dump:(id)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)presentationInstance;
@property(readonly, nonatomic) SCNNode *presentationNode;
- (BOOL)isPresentationInstance;
- (void)_syncObjCModel;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
- (void)dealloc;
-     // Error parsing type: @24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16, name: initWithNodeRef:
-     // Error parsing type: @24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16, name: initPresentationNodeWithNodeRef:
- (id)init;
- (void)_bakeNodes:(id)arg1 folderPath:(id)arg2 inVertex:(BOOL)arg3 bakeAO:(BOOL)arg4 quality:(float)arg5 attenuation:(float)arg6 geomSetter:(CDUnknownBlockType)arg7 terminateSetter:(CDUnknownBlockType)arg8;
- (id)_associatedMDLObject;
- (id)debugQuickLookData;
- (id)debugQuickLookObject;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNNodeComponent : NSObject
{
    long long type;
    id component;
    SCNNodeComponent *next;
}

@property(retain, nonatomic) SCNNodeComponent *next; // @synthesize next;
@property(retain, nonatomic) id component; // @synthesize component;
@property(nonatomic) long long type; // @synthesize type;
- (void)dealloc;
- (id)initWithType:(long long)arg1 component:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SCNNodeManipulableItem : SCNManipulableItem
{
}

+ (void)removeItemsFromScene:(id)arg1;
+ (void)addItems:(id)arg1 toScene:(id)arg2;
+ (id)nodeManipulatorItemWithNode:(id)arg1 screenSize:(double)arg2;
- (void)validateClone;
- (id)cloneForManipulators;
- (id)parentItem;
- (void)setPosition:(struct SCNVector3)arg1;
- (struct SCNVector3)scale;
- (struct CATransform3D)worldTransform;
- (void)setTransform:(struct CATransform3D)arg1;
- (struct CATransform3D)transform;
- (BOOL)isNodeManipulator;

@end

@interface SCNReferenceNode : SCNNode
{
    NSURL *_referenceURL;
    NSURL *_catalogURL;
    BOOL _loaded;
    long long _loadingPolicy;
}

+ (BOOL)supportsSecureCoding;
+ (id)referenceNodeWithURL:(id)arg1;
@property(nonatomic) long long loadingPolicy; // @synthesize loadingPolicy=_loadingPolicy;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (void)_loadWithCatalog:(id)arg1;
- (void)load;
@property(readonly, getter=isLoaded) BOOL loaded;
- (void)unload;
- (id)_resolveURL;
- (id)_catalog;
@property(copy, nonatomic) NSURL *referenceURL;
- (BOOL)_isAReference;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithURL:(id)arg1;

@end

@interface SCNNodeReference : SCNReferenceNode
{
    NSString *referenceSceneName;
    NSString *referenceNodeName;
}

@property(copy, nonatomic) NSString *referenceNodeName; // @synthesize referenceNodeName;
@property(copy, nonatomic) NSString *referenceSceneName; // @synthesize referenceSceneName;
- (void)_reloadWithScene:(id)arg1;

@end

@interface SCNRenderer : NSObject <SCNSceneRenderer, SCNTechniqueSupport>
{
    SCNScene *_scene;
    NSLock *_lock;
    NSObject<OS_dispatch_queue> *__renderingQueue;
    unsigned long long __antialiasingMode;
    struct {
        struct __C3DFramebuffer *frameBuffer;
        struct __C3DFramebuffer *multisamplingFrameBuffer;
        struct CGSize drawableSize;
    } _framebufferInfo;
    id _mtlTexture;
    unsigned int _shouldDeleteFramebuffer:1;
    unsigned int _pointOfViewWasSet:1;
    unsigned int _isPrivateRenderer:1;
    unsigned int _isViewPrivateRenderer:1;
    unsigned int _doingSnapshot:1;
    unsigned int _isLayerPrivateRenderer:1;
    unsigned int _contextIsDoubleBuffered:1;
    double _currentSceneTime;
    double _currentSystemTime;
    double _deltaTime;
    double _forceSystemTime;
    double _lastSystemTime;
    double __nextFrameTime;
    SCNRendererTransitionContext *_transitionContext;
    BOOL _playing;
    BOOL _isAnimating;
    BOOL _loops;
    id _delegate;
    struct __C3DEngineContext *_engineContext;
    unsigned long long _renderingAPI;
    struct SCNVector4 __viewport;
    struct _CGLContextObject *_glContext;
    NSOpenGLContext *__openGLContext;
    id <SCNRenderContext> _renderContext;
    unsigned int _jitteringEnabled:1;
    unsigned int _frozen:1;
    unsigned int _delegateSupportsWillRender:1;
    unsigned int _delegateSupportsDidRender:1;
    unsigned int _delegateSupportsDidApplyAnimations:1;
    unsigned int _delegateSupportsUpdate:1;
    unsigned int _delegateSupportsDidSimulatePhysics:1;
    NSColor *_backgroundColor;
    struct C3DColor4 _c3dBackgroundColor;
    SCNNode *_pointOfView;
    SCNRenderer *_preloadRenderer;
    id <SCNSceneRenderer> _privateRendererOwner;
    SCNTechnique *_technique;
    __SKSCNRenderer *_overlayRenderer;
    id _overlayScene;
    BOOL _disableOverlays;
    BOOL _showStatistics;
    double _statisticsTimeStamp;
}

+ (id)rendererWithContext:(struct _CGLContextObject *)arg1 options:(id)arg2;
+ (id)rendererWithDevice:(id)arg1 options:(id)arg2;
@property(retain, nonatomic) SCNNode *audioListener;
@property(readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property(readonly, nonatomic) AVAudioEngine *audioEngine;
- (void)set_viewport:(struct SCNVector4)arg1;
- (struct SCNVector4)_viewport;
- (id)_authoringEnvironment;
- (void)set_showsAuthoringEnvironment:(BOOL)arg1;
- (BOOL)_showsAuthoringEnvironment;
@property(nonatomic) unsigned long long debugOptions;
- (id)initOffscreenRendererWithSize:(struct CGSize)arg1 options:(id)arg2;
- (struct CGImage *)copySnapshotWithSize:(struct CGSize)arg1;
- (void)_jitterAtStep:(unsigned long long)arg1 updateMainFramebuffer:(BOOL)arg2 redisplay:(BOOL)arg3 jitterer:(id)arg4;
- (void)_presentFramebuffer;
@property(nonatomic) BOOL showsStatistics;
- (void)_displayLinkStatsTack;
- (void)_displayLinkStatsTick;
- (void)setFrozen:(BOOL)arg1;
- (BOOL)frozen;
- (BOOL)jitteringEnabled;
@property(nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
- (void)_detachTexture:(id)arg1;
- (void)_attachTexture:(id)arg1;
@property(nonatomic) BOOL loops;
@property(getter=isPlaying) BOOL playing;
- (void)_stop;
- (void)_pause;
- (void)_play;
- (id)nodesInsideFrustumWithPointOfView:(id)arg1;
- (id)_nodesInsideFrustumWithPointOfView:(id)arg1 viewport:(struct CGSize)arg2;
- (BOOL)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (BOOL)_isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2 viewport:(struct CGSize)arg3;
- (id)_hitTest:(struct CGPoint)arg1 viewport:(struct CGSize)arg2 options:(id)arg3;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
- (id)_snapshotWithImageSize:(struct CGSize)arg1 backingSize:(struct CGSize)arg2;
- (void)render;
- (void)_render;
- (void)_renderAtTime:(double)arg1;
- (void)_drawOverlaySceneAtTime:(double)arg1;
- (void)_draw;
- (void)_drawScene:(struct __C3DScene *)arg1;
- (BOOL)_drawSceneWithLegacyRenderer:(struct __C3DScene *)arg1;
- (void)updateAndDrawStatisticsIfNeeded;
- (BOOL)_drawSceneWithNewRenderer:(struct __C3DScene *)arg1;
- (void)_renderScene:(struct __C3DEngineContext *)arg1 sceneTime:(double)arg2;
- (void)_drawWithJitteringPresentationMode;
- (void)_updateWithSystemTime:(double)arg1;
- (void)_update:(struct __C3DScene *)arg1 rendererContext:(struct __C3DRendererContext *)arg2;
- (void)_setOpenGLContext:(id)arg1 madeWithPixelFormat:(id)arg2;
- (id)_openGLContext;
@property(readonly, nonatomic) void *context;
- (void)setContext:(struct _CGLContextObject *)arg1;
- (void)set_deltaTime:(double)arg1;
- (void)set_systemTime:(double)arg1;
- (double)_systemTime;
@property(nonatomic) double sceneTime;
- (void)_setSceneTime:(double)arg1;
@property(nonatomic) double currentTime;
- (BOOL)_needsRepetitiveRedraw;
- (void)renderAtTime:(double)arg1 viewport:(struct CGRect)arg2 encoder:(id)arg3 passDescriptor:(id)arg4 commandQueue:(id)arg5;
- (void)_renderAtTime:(double)arg1 viewport:(struct CGRect)arg2 encoder:(id)arg3 passDescriptor:(id)arg4 commandQueue:(id)arg5 commandBuffer:(id)arg6;
- (void)renderAtTime:(double)arg1 viewport:(struct CGRect)arg2 commandBuffer:(id)arg3 passDescriptor:(id)arg4;
- (void)renderAtTime:(double)arg1;
@property(readonly, nonatomic) double nextFrameTime;
- (double)_nextFrameTime;
- (void)set_nextFrameTime:(double)arg1;
- (void)updateCurrentTimeIfPlayingWithSystemTime:(double)arg1;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
- (void)_updateEngineCallbacks;
- (id)programWithNode:(id)arg1 withMaterial:(id)arg2;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (BOOL)prepareObject:(id)arg1 shouldAbortBlock:(CDUnknownBlockType)arg2;
- (BOOL)_preloadResource:(id)arg1 abortHandler:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) SCNTechnique *technique;
@property(retain, nonatomic) SKScene *overlaySKScene;
- (id)_prepareSKRenderer;
- (id)_setupSKRendererIfNeeded;
- (void)setDisableOverlays:(BOOL)arg1;
- (BOOL)disableOverlays;
- (struct C3DColor4 *)_backgroundColorComponents;
- (void)setBackgroundColor:(id)arg1;
- (id)backgroundColor;
@property(retain, nonatomic) SCNScene *scene;
- (void)setScene:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)presentScene:(id)arg1 withTransition:(id)arg2 incomingPointOfView:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_prepareForTransition:(id)arg1 outgoingScene:(id)arg2 outgoingPointOfView:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_updatePointOfView;
- (id)_defaultPOVForScene:(id)arg1;
- (BOOL)autoAdjustCamera;
- (void)setAutoAdjustCamera:(BOOL)arg1;
- (void)_willRenderScene:(id)arg1;
- (void)_didRenderScene:(id)arg1;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)_unprojectPoint:(struct SCNVector3)arg1 viewport:(struct CGSize)arg2;
- (struct SCNVector3)_projectPoint:(struct SCNVector3)arg1 viewport:(struct CGSize)arg2;
- (void)_projectPoints:(struct SCNVector3 *)arg1 count:(unsigned long long)arg2 viewport:(struct CGSize)arg3;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) BOOL autoenablesDefaultLighting;
- (void *)__CFObject;
- (struct __C3DRendererContext *)_rendererContext;
- (struct __C3DEngineContext *)_engineContext;
- (void)set_antialiasingMode:(unsigned long long)arg1;
- (unsigned long long)_antialiasingMode;
- (unsigned long long)_sampleCount;
- (void)_createFramebufferIfNeeded;
- (void)_resolveAndDiscard;
- (void)_unbindFramebuffer;
- (void)_bindFramebuffer:(BOOL)arg1;
- (void)_deleteFramebuffer;
- (void)_invalidateFramebuffer;
- (void)_setBackingSize:(struct CGSize)arg1;
- (double)_contentsScaleFactor;
- (void)_clearBuffers;
- (void)_acquireCurrentViewport;
- (void)_installViewport;
- (BOOL)_installContext;
- (id)_renderingQueue;
- (void)unlock;
- (void)lock;
@property(readonly, nonatomic) unsigned long long stencilPixelFormat;
@property(readonly, nonatomic) unsigned long long depthPixelFormat;
@property(readonly, nonatomic) unsigned long long colorPixelFormat;
@property(readonly, nonatomic) id <MTLCommandQueue> commandQueue;
@property(readonly, nonatomic) id <MTLDevice> device;
@property(readonly, nonatomic) id <MTLRenderCommandEncoder> currentRenderCommandEncoder;
- (id)currentRenderPassDescriptor;
@property(readonly, nonatomic) unsigned long long renderingAPI;
- (void)dealloc;
@property(readonly, copy) NSString *description;
- (id)_initWithOptions:(id)arg1 isPrivateRenderer:(BOOL)arg2 privateRendererOwner:(id)arg3 clearsOnDraw:(BOOL)arg4 context:(void *)arg5 renderingAPI:(unsigned long long)arg6;
- (void)setupForDeprecatedOffscreenRenderer;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNOffscreenRenderer : SCNRenderer
{
}

+ (id)offscreenRendererWithContext:(struct _CGLContextObject *)arg1 size:(struct CGSize)arg2;
- (void)_createFramebufferIfNeeded;
- (void)_resolveAndDiscard;
- (void)_unbindFramebuffer;
- (void)_bindFramebuffer:(BOOL)arg1;
- (void)_deleteFramebuffer;
@property(readonly, nonatomic) unsigned int textureID;
- (id)snapshotAtTime:(double)arg1;
- (id)snapshot;
- (struct CGImage *)copySnapshotWithSize:(struct CGSize)arg1;
- (struct CGImage *)createCGImageSnapshot:(double)arg1;
- (void)_render;
@property(nonatomic) unsigned long long antialiasingMode;
@property(nonatomic) struct CGSize size;
- (id)_initOffscreenRendererWithOptions:(id)arg1 isPrivateRenderer:(BOOL)arg2 privateRendererOwner:(id)arg3 clearsOnDraw:(BOOL)arg4 size:(struct CGSize)arg5 context:(void *)arg6 renderingAPI:(unsigned long long)arg7;

@end

__attribute__((visibility("hidden")))
@interface SCNOrderedDictionary : NSObject
{
    NSMutableArray *_keys;
    NSMutableDictionary *_keyValues;
}

- (id)copy;
- (void)_setupFrom:(id)arg1;
- (id)keys;
- (id)dictionary;
- (id)allValues;
- (unsigned long long)count;
- (void)applyFunction:(CDUnknownFunctionPointerType)arg1 withContext:(void *)arg2;
- (id)allKeys;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)dealloc;

@end

@interface SCNParticlePropertyController : NSObject <NSSecureCoding, NSCopying>
{
    CAAnimation *_animation;
    long long _inputMode;
    double _inputScale;
    double _inputBias;
    SCNNode *_inputOrigin;
    NSString *_inputProperty;
    id _c3dAnimation;
}

+ (BOOL)supportsSecureCoding;
+ (id)controllerWithAnimation:(id)arg1;
+ (id)particlePropertyControllerWithAnimation:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNParticlePropertyController:(id)arg1;
- (void)_customEncodingOfSCNParticlePropertyController:(id)arg1;
@property(copy, nonatomic) NSString *inputProperty;
@property(nonatomic) __weak SCNNode *inputOrigin;
@property(nonatomic) double inputBias;
@property(nonatomic) double inputScale;
@property(nonatomic) long long inputMode;
@property(retain, nonatomic) CAAnimation *animation;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)c3dAnimation;
- (void)setC3dAnimation:(id)arg1;
- (id)init;

@end

@interface SCNParticleSystem : NSObject <NSCopying, NSSecureCoding, SCNAnimatable>
{
    struct __C3DParticleSystem *_particleSystem;
    unsigned int _isPresentationInstance:1;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    double _emissionDuration;
    double _emissionDurationVariation;
    double _idleDuration;
    double _idleDurationVariation;
    double _birthRate;
    double _birthRateVariation;
    double _warmupDuration;
    SCNGeometry *_emitterShape;
    long long _birthLocation;
    long long _birthDirection;
    struct SCNVector3 _emittingDirection;
    struct SCNVector3 _acceleration;
    double _spreadingAngle;
    BOOL _loops;
    BOOL _isLocal;
    BOOL _affectedByGravity;
    BOOL _affectedByPhysicsFields;
    BOOL _physicsCollisionsEnabled;
    BOOL _lightingEnabled;
    BOOL _softParticlesEnabled;
    BOOL _particleDiesOnCollision;
    BOOL _blackPassEnabled;
    double _particleAngle;
    double _particleAngleVariation;
    double _particleVelocity;
    double _particleVelocityVariation;
    double _particleAngularVelocity;
    double _particleAngularVelocityVariation;
    double _particleLifeSpan;
    double _particleLifeSpanVariation;
    double _particleBounce;
    double _particleBounceVariation;
    double _particleFriction;
    double _particleFrictionVariation;
    double _particleCharge;
    double _particleChargeVariation;
    id _particleImage;
    NSColor *_particleColor;
    struct SCNVector4 _particleColorVariation;
    SCNParticleSystem *_systemSpawnedOnCollision;
    SCNParticleSystem *_systemSpawnedOnDying;
    SCNParticleSystem *_systemSpawnedOnLiving;
    double _particleSize;
    double _particleSizeVariation;
    long long _seed;
    long long _blendMode;
    long long _renderingMode;
    long long _orientationMode;
    long long _imageSequenceAnimationMode;
    NSArray *_particleGeometries;
    NSArray *_colliderNodes;
    NSDictionary *_propertyControllers;
    long long _sortingMode;
    double _particleMass;
    double _particleMassVariation;
    double _dampingFactor;
    double _speedFactor;
    double _fixedTimeStep;
    double _stretchFactor;
    double _fresnelExponent;
    unsigned long long _imageSequenceColumnCount;
    unsigned long long _imageSequenceRowCount;
    double _imageSequenceInitialFrame;
    double _imageSequenceInitialFrameVariation;
    double _imageSequenceFrameRate;
    double _imageSequenceFrameRateVariation;
    NSString *_referenceName;
}

+ (BOOL)supportsSecureCoding;
+ (id)particleSystemWithParticleSystemRef:(struct __C3DParticleSystem *)arg1;
+ (id)particleSystemNamed:(id)arg1 inDirectory:(id)arg2;
+ (id)particleSystem;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNParticleSystem:(id)arg1;
- (void)_customEncodingOfSCNParticleSystem:(id)arg1;
- (BOOL)_isAReference;
- (id)referenceName;
- (void)setReferenceName:(id)arg1;
- (void)removeAllModifiers;
- (void)removeModifiersOfStage:(long long)arg1;
- (void)addModifierForProperties:(id)arg1 atStage:(long long)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)handleEvent:(long long)arg1 forProperties:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)reset;
@property(nonatomic) struct SCNVector3 acceleration;
@property(nonatomic) struct SCNVector3 emittingDirection;
@property(nonatomic) struct SCNVector4 particleColorVariation;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnLiving;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnDying;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnCollision;
@property(nonatomic) double warmupDuration;
@property(nonatomic) double stretchFactor;
@property(nonatomic) double spreadingAngle;
@property(nonatomic) double speedFactor;
@property(nonatomic) long long sortingMode;
- (void)setSoftParticlesEnabled:(BOOL)arg1;
- (BOOL)softParticlesEnabled;
- (void)setSeed:(long long)arg1;
- (long long)seed;
- (void)setRenderingMode:(long long)arg1;
- (long long)renderingMode;
- (void)setPhysicsCollisionsEnabled:(BOOL)arg1;
- (BOOL)physicsCollisionsEnabled;
@property(nonatomic) double particleVelocityVariation;
@property(nonatomic) double particleVelocity;
@property(nonatomic) double particleSizeVariation;
@property(nonatomic) double particleSize;
@property(nonatomic) double particleMassVariation;
@property(nonatomic) double particleMass;
@property(nonatomic) double particleLifeSpanVariation;
@property(nonatomic) double particleLifeSpan;
@property(nonatomic) double particleFrictionVariation;
@property(nonatomic) double particleFriction;
@property(nonatomic) BOOL particleDiesOnCollision;
@property(retain, nonatomic) NSColor *particleColor;
@property(nonatomic) double particleChargeVariation;
@property(nonatomic) double particleCharge;
@property(nonatomic) double particleBounceVariation;
@property(nonatomic) double particleBounce;
@property(nonatomic) double particleAngularVelocityVariation;
@property(nonatomic) double particleAngularVelocity;
@property(nonatomic) double particleAngleVariation;
@property(nonatomic) double particleAngle;
@property(nonatomic) long long orientationMode;
@property(nonatomic) BOOL loops;
@property(nonatomic, getter=isLightingEnabled) BOOL lightingEnabled;
- (BOOL)lightingEnabled;
- (void)setIsLocal:(BOOL)arg1;
@property(nonatomic, getter=isLocal) BOOL local;
@property(nonatomic) unsigned long long imageSequenceRowCount;
@property(nonatomic) double imageSequenceInitialFrameVariation;
@property(nonatomic) double imageSequenceInitialFrame;
@property(nonatomic) double imageSequenceFrameRateVariation;
@property(nonatomic) double imageSequenceFrameRate;
@property(nonatomic) unsigned long long imageSequenceColumnCount;
@property(nonatomic) long long imageSequenceAnimationMode;
@property(nonatomic) double idleDurationVariation;
@property(nonatomic) double idleDuration;
@property(nonatomic) double fresnelExponent;
- (void)setFixedTimeStep:(double)arg1;
- (double)fixedTimeStep;
@property(retain, nonatomic) SCNGeometry *emitterShape;
@property(nonatomic) double emissionDurationVariation;
@property(nonatomic) double emissionDuration;
@property(nonatomic) double dampingFactor;
@property(nonatomic) long long blendMode;
@property(nonatomic, getter=isBlackPassEnabled) BOOL blackPassEnabled;
- (BOOL)blackPassEnabled;
@property(nonatomic) double birthRateVariation;
@property(nonatomic) double birthRate;
@property(nonatomic) long long birthLocation;
@property(nonatomic) long long birthDirection;
@property(nonatomic) BOOL affectedByPhysicsFields;
@property(nonatomic) BOOL affectedByGravity;
- (BOOL)areSoftParticlesEnabled;
@property(retain, nonatomic) id particleImage;
@property(copy, nonatomic) NSDictionary *propertyControllers;
@property(copy, nonatomic) NSArray *colliderNodes;
- (void)setParticleGeometries:(id)arg1;
- (short)typeOfProperty:(id)arg1;
- (id)particleGeometries;
- (struct __C3DParticleSystem *)particleSystemRef;
- (BOOL)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_syncObjCModel;
- (void)dealloc;
- (id)initPresentationSystemWithSystemRef:(struct __C3DParticleSystem *)arg1;
- (id)initWithParticleSystemRef:(struct __C3DParticleSystem *)arg1;
- (id)init;
- (BOOL)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(BOOL)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNPhysicsBehavior : NSObject <NSSecureCoding>
{
}

+ (BOOL)supportsSecureCoding;
- (BOOL)hasReferenceToPhysicsBody:(id)arg1;
- (id)bodyB;
- (id)bodyA;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface SCNPhysicsBallSocketJoint : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *bodyA;
        SCNPhysicsBody *bodyB;
        struct SCNVector3 anchorA;
        struct SCNVector3 anchorB;
    } _definition;
    struct btPoint2PointConstraint *_constraint;
    SCNPhysicsWorld *_world;
}

+ (id)jointWithBody:(id)arg1 anchor:(struct SCNVector3)arg2;
+ (id)jointWithBodyA:(id)arg1 anchorA:(struct SCNVector3)arg2 bodyB:(id)arg3 anchorB:(struct SCNVector3)arg4;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
- (id)initWithBody:(id)arg1 anchor:(struct SCNVector3)arg2;
- (id)initWithBodyA:(id)arg1 anchorA:(struct SCNVector3)arg2 bodyB:(id)arg3 anchorB:(struct SCNVector3)arg4;
- (void)dealloc;

@end

@interface SCNPhysicsBody : NSObject <NSCopying, NSSecureCoding>
{
    SCNNode *_node;
    double _mass;
    double _charge;
    double _friction;
    double _restitution;
    double _rollingFriction;
    SCNPhysicsShape *_physicsShape;
    long long _type;
    double _damping;
    struct SCNVector4 _angularVelocity;
    double _angularDamping;
    struct SCNVector3 _velocityFactor;
    struct SCNVector3 _angularVelocityFactor;
    struct SCNVector3 _velocity;
    BOOL _ignoreGravity;
    BOOL _explicitMomentOfInertia;
    struct SCNVector3 _momentOfInertia;
    unsigned long long _categoryBitMask;
    unsigned long long _collisionBitMask;
    unsigned long long _contactTestBitMask;
    BOOL _allowsResting;
    BOOL _isDefaultShape;
    struct btRigidBody *_body;
}

+ (BOOL)supportsSecureCoding;
+ (id)kinematicBody;
+ (id)dynamicBody;
+ (id)staticBody;
+ (id)bodyWithType:(long long)arg1 shape:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNPhysicsBody:(id)arg1;
- (id)_owner;
- (void)_setOwner:(id)arg1;
- (void)_removeOwner;
- (struct btRigidBody *)_createBody;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)moveToTransform:(struct CATransform3D)arg1;
- (void)rotateToAxisAngle:(struct SCNVector4)arg1;
- (void)moveToPosition:(struct SCNVector3)arg1;
- (void)resetTransform;
- (void)resetToTransform:(struct CATransform3D)arg1;
- (void)clearAllForces;
- (void)_activate;
- (void)applyTorque:(struct SCNVector4)arg1 impulse:(BOOL)arg2;
- (void)applyForce:(struct SCNVector3)arg1 atPosition:(struct SCNVector3)arg2 impulse:(BOOL)arg3;
- (void)applyForce:(struct SCNVector3)arg1 impulse:(BOOL)arg2;
@property(nonatomic) struct SCNVector3 angularVelocityFactor;
@property(nonatomic) struct SCNVector3 velocityFactor;
@property(nonatomic) struct SCNVector4 angularVelocity;
@property(nonatomic, getter=isAffectedByGravity) BOOL affectedByGravity;
@property(nonatomic) struct SCNVector3 velocity;
@property(nonatomic) unsigned long long contactTestBitMask;
@property(nonatomic) unsigned long long collisionBitMask;
@property(nonatomic) unsigned long long categoryBitMask;
@property(retain, nonatomic) SCNPhysicsShape *physicsShape;
- (struct btCollisionShape *)_shapeHandleWithShape:(id)arg1 owner:(id)arg2;
@property(nonatomic) double angularDamping;
@property(nonatomic) double damping;
@property(nonatomic) double rollingFriction;
@property(nonatomic) double restitution;
@property(nonatomic) double friction;
@property(nonatomic) BOOL allowsResting;
@property(readonly, nonatomic) BOOL isResting;
@property(nonatomic) double charge;
@property(nonatomic) BOOL usesDefaultMomentOfInertia;
@property(nonatomic) struct SCNVector3 momentOfInertia;
- (BOOL)respondsToCollision;
@property(nonatomic) double mass;
@property(nonatomic) long long type;
- (void)dealloc;
- (struct btRigidBody *)_handle;
- (struct __C3DScene *)sceneRef;
- (id)initWithType:(long long)arg1 shape:(id)arg2;

@end

@interface SCNPhysicsCharacter : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *characterBody;
        struct SCNVector3 direction;
        double velocity;
        double jumpSpeed;
    } _definition;
    struct btCharacterControllerInterface *_characterController;
    struct btPairCachingGhostObject *_ghostObject;
    struct btOverlapFilterCallback *_filterCallback;
    struct btCapsuleShape *_capsuleShape;
    SCNPhysicsWorld *_world;
}

- (void)_handleCreateIfNeeded:(BOOL)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
- (void)_update;
@property(nonatomic) double jumpSpeed;
@property(nonatomic) double velocity;
- (void)jump;
- (BOOL)canJump;
- (void)setWalkingDirection:(struct SCNVector3)arg1;
- (void)dealloc;
- (id)initWithCharacter:(id)arg1;

@end

@interface SCNPhysicsContact : NSObject
{
    SCNNode *_nodeA;
    SCNNode *_nodeB;
    struct SCNVector3 _contactPoint;
    struct SCNVector3 _contactNormal;
    double _collisionImpulse;
    double _distance;
    long long _updateCount;
}

+ (id)_contactWithManifold:(const struct btPersistentManifold *)arg1 index:(long long)arg2;
- (BOOL)_shouldPostUpdate;
- (void)_prepareUpdate;
@property(readonly, nonatomic) double penetrationDistance;
@property(readonly, nonatomic) double collisionImpulse;
@property(readonly, nonatomic) struct SCNVector3 contactNormal;
@property(readonly, nonatomic) struct SCNVector3 contactPoint;
@property(readonly, nonatomic) SCNNode *nodeB;
@property(readonly, nonatomic) SCNNode *nodeA;
- (void)_setupWithManifold:(const struct btPersistentManifold *)arg1 index:(long long)arg2 point:(const struct btManifoldPoint *)arg3;
- (void)_fillNodeA:(id)arg1 nodeB:(id)arg2;
- (void)_fillNodeA:(id)arg1 nodeB:(id)arg2 contactPoint:(struct SCNVector3)arg3 collisionImpulse:(struct SCNVector3)arg4 distance:(double)arg5;
- (id)description;
- (void)dealloc;

@end

@interface SCNPhysicsField : NSObject <NSCopying, NSSecureCoding>
{
    struct SCNVector3 _halfExtent;
    double _strength;
    double _falloffExponent;
    double _minimumDistance;
    BOOL _active;
    long long _scope;
    BOOL _usesEllipsoidalExtent;
    BOOL _exclusive;
    struct SCNVector3 _offset;
    struct SCNVector3 _direction;
    unsigned long long _categoryBitMask;
    SCNPhysicsWorld *_world;
    SCNNode *_node;
    // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}, name: _field
}

+ (BOOL)supportsSecureCoding;
+ (double)_displayScaleFactor;
+ (void)_setDisplayScaleFactor:(double)arg1;
+ (id)magneticField;
+ (id)electricField;
+ (id)springField;
+ (id)turbulenceFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (id)noiseFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (id)linearGravityField;
+ (id)radialGravityField;
+ (id)vortexField;
+ (id)customFieldWithEvaluationBlock:(CDUnknownBlockType)arg1;
+ (id)dragField;
+ (id)field;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct SCNVector3)evalAtLocation:(struct SCNVector3)arg1;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _handle
- (id)_owner;
- (void)_setWorld:(id)arg1;
- (void)_setOwner:(id)arg1;
- (void)_removeOwner;
- (BOOL)supportsOffset;
- (BOOL)supportsDirection;
@property(nonatomic) struct SCNVector3 direction;
@property(nonatomic) struct SCNVector3 offset;
@property(nonatomic, getter=isExclusive) BOOL exclusive;
@property(nonatomic) BOOL usesEllipsoidalExtent;
@property(nonatomic) struct SCNVector3 halfExtent;
@property(nonatomic) long long scope;
@property(nonatomic, getter=isActive) BOOL active;
@property(nonatomic) double minimumDistance;
@property(nonatomic) double falloffExponent;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) double strength;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupCommonProperties;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (void)dealloc;
- (id)init;
- (void)_commonInit;

@end

@interface SCNPhysicsCustomField : SCNPhysicsField
{
    CDUnknownBlockType _block;
}

-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
@property CDUnknownBlockType block;
- (void)dealloc;

@end

@interface SCNPhysicsDragField : SCNPhysicsField
{
}

- (BOOL)supportsOffset;
- (BOOL)supportsDirection;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

__attribute__((visibility("hidden")))
@interface SCNPhysicsElectricField : SCNPhysicsField
{
}

- (BOOL)supportsDirection;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsHingeJoint : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *bodyA;
        SCNPhysicsBody *bodyB;
        struct SCNVector3 anchorA;
        struct SCNVector3 anchorB;
        struct SCNVector3 axisA;
        struct SCNVector3 axisB;
    } _definition;
    struct btHingeConstraint *_constraint;
    SCNPhysicsWorld *_world;
}

+ (id)jointWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisB;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
- (id)initWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
- (id)initWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (void)dealloc;

@end

@interface SCNPhysicsLinearGravityField : SCNPhysicsField
{
}

- (BOOL)supportsOffset;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (void)setDirection:(struct SCNVector3)arg1;
- (struct SCNVector3)gravity;

@end

@interface SCNPhysicsMagneticField : SCNPhysicsField
{
}

- (void)setDirection:(struct SCNVector3)arg1;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsNoiseField : SCNPhysicsField
{
    double _smoothness;
    double _animationSpeed;
}

+ (BOOL)supportsSecureCoding;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (BOOL)supportsDirection;
- (BOOL)supportsOffset;
@property(nonatomic) double animationSpeed;
@property(nonatomic) double smoothness;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (id)init;

@end

@interface SCNPhysicsRadialGravityField : SCNPhysicsField
{
}

- (BOOL)supportsDirection;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsShape : NSObject <NSCopying, NSSecureCoding>
{
    id _referenceObject;
    NSDictionary *_options;
    NSArray *_transforms;
    void *_cachedObject;
    struct btCollisionShape *_collisionShape;
}

+ (BOOL)supportsSecureCoding;
+ (id)defaultShapeForGeometry:(id)arg1;
+ (id)shapeWithShapes:(id)arg1 transforms:(id)arg2;
+ (id)shapeWithNode:(id)arg1 options:(id)arg2;
+ (id)shapeWithGeometry:(id)arg1 options:(id)arg2;
@property(readonly, nonatomic) id sourceObject; // @synthesize sourceObject=_referenceObject;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNPhysicsShape:(id)arg1;
- (void)_customEncodingOfSCNPhysicsShape:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct btCollisionShape *)_handle;
- (void)_setTransforms:(id)arg1;
@property(readonly, nonatomic) NSArray *transforms;
@property(readonly, nonatomic) NSDictionary *options;
- (void)setReferenceObject:(id)arg1;
- (id)referenceObject;
- (void)dealloc;
- (id)initWithCachedObject:(void *)arg1 options:(id)arg2;
- (id)initWithContent:(id)arg1 options:(id)arg2;

@end

@interface SCNPhysicsSliderJoint : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *bodyA;
        SCNPhysicsBody *bodyB;
        struct SCNVector3 axisA;
        struct SCNVector3 anchorA;
        struct SCNVector3 axisB;
        struct SCNVector3 anchorB;
        double minLinearLimit;
        double maxLinearLimit;
        double minAngularLimit;
        double maxAngularLimit;
        double motorTargetLinearVelocity;
        double motorMaximumForce;
        double motorTargetAngularVelocity;
        double motorMaximumTorque;
    } _definition;
    struct btSliderConstraint *_constraint;
    SCNPhysicsWorld *_world;
}

+ (id)jointWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
@property(nonatomic) double motorMaximumTorque;
@property(nonatomic) double motorTargetAngularVelocity;
@property(nonatomic) double motorMaximumForce;
@property(nonatomic) double motorTargetLinearVelocity;
@property(nonatomic) double maximumAngularLimit;
@property(nonatomic) double minimumAngularLimit;
@property(nonatomic) double maximumLinearLimit;
@property(nonatomic) double minimumLinearLimit;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisB;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
- (id)initWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
- (id)initWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (void)dealloc;

@end

@interface SCNPhysicsSpringField : SCNPhysicsField
{
}

- (BOOL)supportsDirection;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsTurbulenceField : SCNPhysicsNoiseField
{
}

-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsVehicle : SCNPhysicsBehavior
{
    SCNPhysicsBody *_chassisBody;
    NSArray *_wheels;
    SCNPhysicsWorld *_world;
    struct btRaycastVehicle *_vehicle;
    double _speedKmHour;
}

+ (BOOL)supportsSecureCoding;
+ (id)vehicleWithChassisBody:(id)arg1 wheels:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNPhysicsVehicle:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)wheelAtIndex:(unsigned long long)arg1;
- (BOOL)hasReferenceToPhysicsBody:(id)arg1;
@property(readonly, nonatomic) double speedInKilometersPerHour;
- (void)_update;
- (void)_handleCreateIfNeeded:(BOOL)arg1;
- (void)_createWheel:(id)arg1;
- (void)applyBrakingForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)applyEngineForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)setSteeringAngle:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
- (id)physicsWorld;
- (struct btRaycastVehicle *)btVehicle;
@property(readonly, nonatomic) NSArray *wheels;
@property(readonly, nonatomic) SCNPhysicsBody *chassisBody;
- (void)dealloc;
- (id)initWithChassisBody:(id)arg1 wheels:(id)arg2;
- (void)_initializeWheelsArray;

@end

@interface SCNPhysicsVehicleWheel : NSObject <NSCopying, NSSecureCoding>
{
    SCNNode *_node;
    SCNPhysicsVehicle *_vehicle;
    int _wheelIndex;
    double _suspensionStiffness;
    double _suspensionCompression;
    double _suspensionDamping;
    double _maximumSuspensionTravel;
    double _frictionSlip;
    double _maximumSuspensionForce;
    struct SCNVector3 _connectionPosition;
    struct SCNVector3 _steeringAxis;
    struct SCNVector3 _axle;
    double _radius;
    double _suspensionRestLength;
    BOOL _isFront;
}

+ (BOOL)supportsSecureCoding;
+ (id)wheelWithNode:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setIsFront:(BOOL)arg1;
- (BOOL)isFront;
@property double suspensionRestLength;
@property double radius;
@property struct SCNVector3 axle;
@property struct SCNVector3 steeringAxis;
@property struct SCNVector3 connectionPosition;
@property double maximumSuspensionForce;
@property double frictionSlip;
@property double maximumSuspensionTravel;
@property double suspensionDamping;
@property double suspensionCompression;
@property double suspensionStiffness;
@property(readonly) SCNNode *node;
- (void)_setWheelIndex:(int)arg1;
- (void)_setVehicle:(id)arg1;
- (void)setNode:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SCNPhysicsVortexField : SCNPhysicsField
{
}

- (void)setDirection:(struct SCNVector3)arg1;
- (struct SCNVector3)axis;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (id)init;

@end

@interface SCNPhysicsWorld : NSObject <NSSecureCoding>
{
    struct btDiscreteDynamicsWorld *_world;
    struct btOverlappingPairCallback *_ghostPairCallback;
    struct btVehicleRaycaster *_vehicleRayCaster;
    struct btC3DDebugDraw *_debugDrawer;
    struct c3dAether _aether;
    BOOL _hasActiveFields;
    id <SCNPhysicsContactDelegate> _contactDelegate;
    SCNPhysicsContact *_contact;
    SCNScene *_scene;
    struct SCNVector3 _gravity;
    double _speed;
    double _scale;
    double _timeStep;
    NSMutableArray *_fields;
    double _elapsedTime;
    NSMutableArray *_behaviors;
    NSMutableSet *_bodies;
}

+ (BOOL)supportsSecureCoding;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNPhysicsWorld:(id)arg1;
- (void)_customDecodingOfSCNPhysicsWorld:(id)arg1;
- (void)_customEncodingOfSCNPhysicsWorld:(id)arg1;
- (void)removePhysicsBody:(id)arg1 handle:(void *)arg2;
- (void)addPhysicsBody:(id)arg1 nodeRef:(struct __C3DNode *)arg2 colGroup:(unsigned long long)arg3 colMask:(unsigned long long)arg4 colTest:(unsigned long long)arg5;
- (void)_drawDebugInAuthoringEnvironment:(void *)arg1;
- (void)_postCommandWithBlock:(CDUnknownBlockType)arg1;
- (struct btDynamicsWorld *)handle;
- (void)setScene:(id)arg1;
- (id)scene;
- (void)_allowGhostObjects;
- (struct btDynamicsWorld *)_handle;
- (struct btVehicleRaycaster *)_defaultVehicleRayCaster;
- (void)_step:(double)arg1;
- (struct c3dAether *)_aetherHandle;
- (void)_removeFieldFromWorld:(id)arg1;
- (void)_addFieldToWorld:(id)arg1;
- (id)_findFieldAttachedToNode:(id)arg1;
- (void)_reset;
- (void)enumerateBodiesUsingBlock:(CDUnknownBlockType)arg1;
- (BOOL)_needsRedraw;
- (void)updateCollisionPairs;
- (id)convexSweepTestWithShape:(id)arg1 fromTransform:(struct CATransform3D)arg2 toTransform:(struct CATransform3D)arg3 options:(id)arg4;
- (id)contactTestWithBody:(id)arg1 options:(id)arg2;
- (id)contactTestBetweenBody:(id)arg1 andBody:(id)arg2 options:(id)arg3;
- (id)_rayTestWithSegmentFromPoint:(struct btVector3)arg1 toPoint:(struct btVector3)arg2 options:(id)arg3;
- (id)rayTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
@property(readonly, nonatomic) NSArray *allBehaviors;
- (void)removeAllBehaviors;
- (void)removeBehavior:(id)arg1;
- (void)addBehavior:(id)arg1;
@property id <SCNPhysicsContactDelegate> contactDelegate;
@property(nonatomic) double timeStep;
- (double)scale;
- (void)setScale:(double)arg1;
@property(nonatomic) double speed;
@property(nonatomic) struct SCNVector3 gravity;
- (void)wakeUpAllBodies;
- (void)sceneWillDie;
- (void)dealloc;
- (id)initWithScene:(id)arg1;
- (void)commonInit;
- (id)_physicsContact;
- (void)_createDynamicWorld;
- (void)_preTick:(double)arg1;

@end

@interface SCNPlane : SCNGeometry
{
    double _width;
    double _height;
    double _cornerRadius;
    long long _widthSegmentCount;
    long long _heightSegmentCount;
    long long _cornerSegmentCount;
    long long _primitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)planeWithWidth:(double)arg1 height:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double width;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) long long cornerSegmentCount;
@property(nonatomic) double cornerRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationPlane;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNPlugInManager : NSObject
{
}

+ (id)loadSceneWithURL:(id)arg1 options:(id)arg2 statusHandler:(CDUnknownBlockType)arg3;
+ (BOOL)canImportFileExtension:(id)arg1;
+ (BOOL)canImportFileUTI:(id)arg1;
+ (id)importableFileUTIs;
+ (id)plugInCandidatesForFileUTI:(id)arg1 extension:(id)arg2;
+ (id)availableImporterDescriptions;
+ (void)setupIfNeeded;
+ (void)setup;

@end

@interface SCNProgram : NSObject <NSCopying, NSSecureCoding>
{
    NSString *_vertexShader;
    NSString *_tessellationControlShader;
    NSString *_tessellationEvaluationShader;
    NSString *_geometryShader;
    NSString *_fragmentShader;
    NSString *_vertexFunctionName;
    NSString *_fragmentFunctionName;
    NSString *_name;
    NSMutableDictionary *_semanticInfos;
    BOOL _opaque;
    id _library;
    id _delegate;
    NSMutableDictionary *_bufferBindings;
}

+ (BOOL)supportsSecureCoding;
+ (id)programWithLibrary:(id)arg1;
+ (id)program;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNProgram:(id)arg1;
- (void)_customEncodingOfSCNProgram:(id)arg1;
@property(nonatomic) id <SCNProgramDelegate> delegate;
- (void)setSemantic:(id)arg1 forSymbol:(id)arg2;
- (id)copy;
- (void)handleBindingOfBufferNamed:(id)arg1 frequency:(long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)_bufferBindings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setSemanticInfos:(id)arg1;
- (id)_allSymbolsWithSceneKitSemantic;
- (id)_optionsForSymbol:(id)arg1;
- (id)semanticForSymbol:(id)arg1;
- (void)setSemantic:(id)arg1 forSymbol:(id)arg2 options:(id)arg3;
@property(copy, nonatomic) NSString *fragmentShader;
@property(copy, nonatomic) NSString *geometryShader;
@property(copy, nonatomic) NSString *tessellationEvaluationShader;
@property(copy, nonatomic) NSString *tessellationControlShader;
@property(copy, nonatomic) NSString *vertexShader;
@property(copy, nonatomic) NSString *fragmentFunctionName;
@property(copy, nonatomic) NSString *vertexFunctionName;
@property(nonatomic, getter=isOpaque) BOOL opaque;
- (id)name;
- (int)shadingLanguage;
- (void)setName:(id)arg1;
@property(retain, nonatomic) id <MTLLibrary> library;
- (id)init;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNProgramSemanticInfo : NSObject <NSSecureCoding>
{
    NSString *_semantic;
    NSDictionary *_options;
}

+ (BOOL)supportsSecureCoding;
+ (id)infoWithSemantic:(id)arg1 options:(id)arg2;
@property(retain, nonatomic) NSDictionary *options; // @synthesize options=_options;
@property(copy, nonatomic) NSString *semantic; // @synthesize semantic=_semantic;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface SCNPyramid : SCNGeometry
{
    double _pyramidwidth;
    double _pyramidheight;
    double _pyramidlength;
    long long _pyramidwidthSegmentCount;
    long long _pyramidheightSegmentCount;
    long long _pyramidlengthSegmentCount;
    long long _pyramidprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)pyramidWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double width;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) double length;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationPyramid;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNRenderContextImp : NSObject <SCNRenderContext>
{
    struct C3DColor4 _backgroundColor;
    long long _currentFrameIndex;
    struct __C3DEngineStats *__engineStats;
    SCNRenderTargetRegistry *_renderTargetRegistry;
    double contentScaleFactor;
    long long sampleCount;
}

@property(readonly, nonatomic) SCNRenderTargetRegistry *renderTargetRegistry; // @synthesize renderTargetRegistry=_renderTargetRegistry;
@property(nonatomic) long long sampleCount; // @synthesize sampleCount;
@property(nonatomic) double contentScaleFactor; // @synthesize contentScaleFactor;
- (struct __C3DMeshElement *)createVolatileMeshElementOfType:(BOOL)arg1 primitiveCount:(long long)arg2 bytesPerIndex:(long long)arg3;
- (void)unmapVolatileMesh:(struct __C3DMesh *)arg1;
- (BOOL)mapVolatileMesh:(struct __C3DMesh *)arg1 verticesCount:(long long)arg2;
- (void)renderBackground:(struct __C3DEffectSlot *)arg1 engineContext:(struct __C3DEngineContext *)arg2;
- (void)drawFullScreenQuadForPass:(struct __C3DFXPass *)arg1;
-     // Error parsing type: v148@0:8^{__C3DMesh={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}[9^{__CFArray}]^{C3DSphere}^^{__CFArray}b1b1b1b4q}16^{__C3DMeshElement=}24^{__C3DFXProgram={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}ib1b1^{__C3DFXProgramDelegate}}32^{__C3DEngineContext=}40(C3DMatrix4x4=[16f][4])48r^{C3DColor4=(?=[4f]{?=ffff})}112^{__C3DRasterizerStates=}120^{__C3DBlendStates=}128^{__C3DImage=}136c144, name: renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:
- (void)drawRenderElement:(struct __C3DRendererElement *)arg1 withPass:(struct __C3DFXPass *)arg2;
- (void)processRendererElement:(struct __C3DRendererElement *)arg1 engineIterationContext:(CDStruct_256c7a3c *)arg2;
- (void)stopProcessingRendererElements;
- (void)processRendererElement:(struct __C3DRendererElement *)arg1;
- (void)startProcessingRendererElementsWithEngineIterationContext:(CDStruct_256c7a3c *)arg1;
- (id)newRenderTargetWithDescription:(CDStruct_2e3d5ba3 *)arg1 size: /* Error: Ran out of types for this method. */;
- (void)popDebugGroup;
- (void)pushDebugGroup:(id)arg1;
- (id)textureForEffectSlot:(struct __C3DEffectSlot *)arg1;
@property(nonatomic) BOOL showsAuthoringEnvironment;
@property(readonly, nonatomic) id <SCNResourceManager> resourceManager;
- (struct __C3DEngineStats *)stats;
@property(readonly, nonatomic) long long currentFrameIndex;
- (void)setBackgroundColor:(struct C3DColor4)arg1;
- (void)endRenderPass;
- (BOOL)beginRenderPass:(struct __C3DFXPass *)arg1 isFinalTechnique:(BOOL)arg2;
- (void)endFrameWaitingUntilCompleted:(BOOL)arg1;
- (void)beginFrame:(id)arg1;
@property(readonly, nonatomic) int profile;
@property(readonly, nonatomic) unsigned int features;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNRenderContextOpenGL : SCNRenderContextImp
{
    struct _CGLContextObject *cgl_ctx;
}

- (id)initWithContext:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNRenderTarget : NSObject
{
    CDStruct_2e3d5ba3 _description;
    // Error parsing type: , name: _size
    id _texture;
    NSString *_name;
    long long _referenceCount;
    long long _timeStamp;
}

@property(nonatomic) long long timeStamp; // @synthesize timeStamp=_timeStamp;
@property(nonatomic) long long referenceCount; // @synthesize referenceCount=_referenceCount;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) id texture; // @synthesize texture=_texture;
- (BOOL)matchesDescription:(CDStruct_2e3d5ba3 *)arg1 size: /* Error: Ran out of types for this method. */;
@property(readonly, nonatomic) BOOL viewportDependant;
- (id)description;
- (void)dealloc;
- (id)initWithDescription:(CDStruct_2e3d5ba3 *)arg1 size: /* Error: Ran out of types for this method. */;

@end

__attribute__((visibility("hidden")))
@interface SCNRenderTargetRegistry : NSObject
{
    id <SCNRenderContext> _renderContext;
    NSMutableDictionary *_renderTargets;
    NSMutableDictionary *_nameToRenderTarget;
    NSMutableArray *_purgeArray;
    long long _frameStamp;
}

- (void)cleanup;
- (void)viewportDidResize;
- (void)finalizeFrame;
- (void)purge;
- (void)_purgeWithReason:(int)arg1;
- (void)bumpTimeStamp;
- (void)releaseTextureWithName:(id)arg1 passIdentifier:(long long)arg2 retainCount:(long long)arg3;
- (void)retainTextureWithName:(id)arg1 passIdentifier:(long long)arg2 retainCount:(long long)arg3;
- (void)releaseRenderTargetNamed:(id)arg1 passIdentifier:(long long)arg2;
- (id)renderTargetWithName:(id)arg1 passIdentifier:(long long)arg2;
- (void)releaseRenderTarget:(id)arg1;
- (id)renderTargetWithDescription:(CDStruct_2e3d5ba3)arg1 size:(id)arg2 name:(long long)arg3 passIdentifier:(long long)arg4 useCount: /* Error: Ran out of types for this method. */;
- (void)dealloc;
- (id)initWithRenderContext:(id)arg1;
@property(readonly, nonatomic) long long numberOfRenderTargets;

@end

@interface SCNView : NSView <SCNSceneRenderer, SCNTechniqueSupport>
{
    double _currentSystemTime;
    NSOpenGLPixelFormat *_userDefinedPixelFormat;
    unsigned int _updatingSurface:1;
    NSString *__ibSceneName;
    unsigned long long __ibPreferredRenderingAPI;
    unsigned int _ibNoMultisampling:1;
    unsigned long long _renderingAPI;
    unsigned int _allowsBrowsing:1;
    unsigned int _isOpaque:1;
    unsigned int _firstDrawDone:1;
    id _delegate;
    SCNRenderer *_renderer;
    SCNScene *_scene;
    SCNDisplayLink *__displayLink;
    SCNJitterer *_jitterer;
    NSRecursiveLock *_lock;
    NSColor *_backgroundColor;
    char *_snapshotImageData;
    unsigned long long _snapshotImageDataLength;
    SCNEventHandler *_eventHandler;
    SCNSpriteKitEventHandler *_spriteKitEventHandler;
}

+ (id)_defaultPixelFormat;
+ (id)_defaultPixelFormatWithAPI:(unsigned long long)arg1 sampleCount:(unsigned long long)arg2 stencil:(BOOL)arg3;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (id)_kvoKeysForwardedToRenderer;
+ (BOOL)_isMetalSupported;
+ (unsigned long long)renderingAPIForOptions:(id)arg1;
- (void)_cancelJitterRedisplay;
- (id)contentLayer;
- (void)rotateOf:(double)arg1;
- (double)zoomFactor;
- (void)setZoomFactor:(double)arg1;
- (BOOL)autoAdjustCamera;
- (void)setAutoAdjustCamera:(BOOL)arg1;
- (void)keyUp:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)rotateWithEvent:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)windowChangedScreen:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstResponder;
- (int)_displayLinkCallback:(double)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawForMetalBackingLayer;
- (void)_drawInBackingLayerWithCGLContext:(struct _CGLContextObject *)arg1 atTime:(double)arg2;
- (id)makeBackingLayer;
- (void)setWantsLayer:(BOOL)arg1;
- (id)_pixelFormatByDefaultingIfNeeded;
@property(retain, nonatomic) NSOpenGLPixelFormat *pixelFormat;
@property(retain, nonatomic) NSOpenGLContext *openGLContext;
- (id)_openGLContextIfAny;
- (id)_privateOpenGLContext;
- (id)_privateOpenGLContextIfAny;
- (void)_openGLContextDidChange:(id)arg1;
- (void)_clearAppKitGLContext;
- (void)_viewGlobalFrameDidChange:(id)arg1;
- (void)update;
- (void)reshape;
- (BOOL)lockFocusIfCanDraw;
- (BOOL)_isGLLayerBacked;
- (id)_scnlayerBackedOpenGLContext;
- (void)setAsynchronousLoading:(BOOL)arg1;
- (void)setAllowsBrowsing:(BOOL)arg1;
@property(readonly, nonatomic) unsigned long long renderingAPI;
- (void)setIbPreferredRenderingAPI:(int)arg1;
- (int)ibPreferredRenderingAPI;
- (void)setIbWantsMultisampling:(BOOL)arg1;
- (BOOL)ibWantsMultisampling;
- (void)setIbSceneName:(id)arg1;
- (id)ibSceneName;
- (void)set_ibPreferredRenderingAPI:(int)arg1;
- (int)_ibPreferredRenderingAPI;
- (void)set_ibWantsMultisampling:(BOOL)arg1;
- (BOOL)_ibWantsMultisampling;
- (void)set_ibSceneName:(id)arg1;
- (id)_ibSceneName;
@property(nonatomic) unsigned long long antialiasingMode;
- (id)_authoringEnvironment;
- (void)_cancelMouseMovedTracking;
- (void)_beginMouseMovedTracking;
- (void)set_showsAuthoringEnvironment:(BOOL)arg1;
- (BOOL)_showsAuthoringEnvironment;
@property(nonatomic) unsigned long long debugOptions;
- (void)switchToNextCamera;
- (void)switchToCameraNamed:(id)arg1;
- (BOOL)_isEditor;
@property(readonly, copy) NSString *description;
- (void *)__CFObject;
- (void)unlock;
- (void)lock;
- (id)snapshot;
@property(nonatomic) BOOL showsStatistics;
- (void)_sceneDidUpdate:(id)arg1;
- (void)_systemTimeAnimationStarted:(id)arg1;
- (void)_setNeedsDisplay;
- (id)_displayLink;
- (void)_checkAndUpdateDisplayLinkStateIfNeeded;
@property(retain, nonatomic) SKScene *overlaySKScene;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (BOOL)prepareObject:(id)arg1 shouldAbortBlock:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) void *context;
@property(readonly, nonatomic) unsigned long long stencilPixelFormat;
@property(readonly, nonatomic) unsigned long long depthPixelFormat;
@property(readonly, nonatomic) unsigned long long colorPixelFormat;
@property(readonly, nonatomic) id <MTLCommandQueue> commandQueue;
@property(readonly, nonatomic) id <MTLDevice> device;
@property(readonly, nonatomic) id <MTLRenderCommandEncoder> currentRenderCommandEncoder;
- (id)currentRenderPassDescriptor;
@property(nonatomic) BOOL autoenablesDefaultLighting;
@property(nonatomic) double sceneTime;
@property(nonatomic) double currentTime;
- (BOOL)isOpaque;
@property(copy, nonatomic) NSColor *backgroundColor;
- (void)eventHandlerWantsRedraw;
- (void)setEventHandler:(id)arg1;
- (id)eventHandler;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (id)nodesInsideFrustumWithPointOfView:(id)arg1;
- (BOOL)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
- (void)stop:(id)arg1;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
@property(getter=isPlaying) BOOL playing;
@property(nonatomic) BOOL loops;
@property(nonatomic) BOOL allowsCameraControl;
@property(copy, nonatomic) SCNTechnique *technique;
@property(retain, nonatomic) SCNNode *audioListener;
@property(readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property(readonly, nonatomic) AVAudioEngine *audioEngine;
@property(retain, nonatomic) SCNNode *pointOfView;
- (void)setPointOfView:(id)arg1 animate:(BOOL)arg2;
- (void)_drawAtTime:(double)arg1 WithContext:(struct _CGLContextObject *)arg2;
- (BOOL)_canJitter;
- (BOOL)_supportsJitteringSyncRedraw;
- (void)_jitterRedisplayWithContext:(struct _CGLContextObject *)arg1;
@property(nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
- (id)renderer;
@property(retain, nonatomic) SCNScene *scene;
- (void)presentScene:(id)arg1 withTransition:(id)arg2 incomingPointOfView:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_selectRenderingAPIWithOptions:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 options:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNRenderTargetView : SCNView
{
    struct __C3DTexture *_texture;
    int _filterChannel;
    SCNPlane *_plane;
    NSOpenGLContext *_sourceContext;
}

@property(retain, nonatomic) NSOpenGLContext *sourceContext; // @synthesize sourceContext=_sourceContext;
- (void)setFilterChannel:(id)arg1;
- (void)renderer:(id)arg1 didRenderScene:(id)arg2 atTime:(double)arg3;
- (void)renderer:(id)arg1 willRenderScene:(id)arg2 atTime:(double)arg3;
- (void)dealloc;
- (void)setTexture:(struct __C3DTexture *)arg1;
- (void)awakeFromNib;

@end

__attribute__((visibility("hidden")))
@interface SCNRendererOptionsPanel : NSPanel
{
    id _controller;
}

+ (id)rendererOptionsPanelForView:(id)arg1;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (void)close;
- (void)open;
- (id)controller;
- (void)setController:(id)arg1;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNRendererOptionsPanelController : NSObject
{
    SCNView *_3dView;
    SCNRendererOptionsPanel *_panel;
    NSPopUpButton *antialiasingLevels;
    NSTextField *benchResult;
    NSSlider *seekSlider;
    NSStepper *seekStepper;
    NSButton *isolate;
    NSButton *freezeButton;
    BOOL _viewLocked;
    unsigned int _currentSeekStep;
}

- (void)isolate:(id)arg1;
- (void)close:(id)arg1;
- (void)setSeekStep:(unsigned long long)arg1;
- (unsigned long long)seekStep;
- (void)updateSeek;
- (void)capture:(id)arg1;
- (void)runBench:(id)arg1;
- (void)setAntialiasingLevel:(id)arg1;
- (long long)numberOfItemsInComboBox:(id)arg1;
- (id)comboBox:(id)arg1 objectValueForItemAtIndex:(long long)arg2;
- (void)selectCamera:(id)arg1;
- (void)showBoundingSpheresToggled:(id)arg1;
- (void)disablePassesToggle:(id)arg1;
- (void)SSAOToggled:(id)arg1;
- (void)hideSpriteKitOverlaysToggled:(id)arg1;
- (void)showWireframeToggled:(id)arg1;
- (void)showLightingLayerToggled:(id)arg1;
- (void)showPhysicsLayerToggled:(id)arg1;
- (void)showBoundingBoxesToggled:(id)arg1;
- (void)toggleRetina:(id)arg1;
- (void)enableVBL:(id)arg1;
- (void)GLOWToggled:(id)arg1;
- (void)recompilePasses;
@property(retain) SCNView *view;
- (id)panel;
- (struct __C3DRendererContext *)rendererContext;
- (struct __C3DEngineContext *)context;
- (void)sceneDidChange;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNRendererTransitionContext : NSObject
{
    double _transitionStartTime;
    SKTransition *_transition;
    SCNScene *_outgoingScene;
    SCNNode *_outgoingPointOfView;
    CDUnknownBlockType completionHandler;
    struct __C3DFXPass *_transitionPass;
    SCNOffscreenRenderer *_renderers[2];
}

@property(retain, nonatomic) SCNNode *outgoingPointOfView; // @synthesize outgoingPointOfView=_outgoingPointOfView;
@property(nonatomic) double transitionStartTime; // @synthesize transitionStartTime=_transitionStartTime;
@property(retain, nonatomic) SKTransition *transition; // @synthesize transition=_transition;
@property(retain, nonatomic) SCNScene *outgoingScene; // @synthesize outgoingScene=_outgoingScene;
- (void)dealloc;
- (id)prepareRendererAtIndex:(int)arg1 withScene:(id)arg2 renderSize:(struct CGSize)arg3 pointOfView:(id)arg4 parentRenderer:(id)arg5;
- (struct __C3DFXPass *)transitionPass;

@end

__attribute__((visibility("hidden")))
@interface SCNResourceTextureView : NSOpenGLView
{
    NSPopUpButton *_textureIndex;
    struct __C3DResourceManager *_mngr;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)beginOrtho;
- (void)setResourceManager:(struct __C3DResourceManager *)arg1;
- (void)awakeFromNib;
- (void)autoUpdate;

@end

__attribute__((visibility("hidden")))
@interface SCNResourceView : NSView
{
    NSView *_mainView;
    NSView *_container;
    NSView *_packerView;
    NSView *_textureView;
    NSView *_packerContainer;
    NSView *_textureContainer;
    NSSegmentedControl *_resourceType;
    struct __C3DResourceManager *_mngr;
}

- (void)setOpenGLContext:(id)arg1;
- (void)setResourceManager:(struct __C3DResourceManager *)arg1;
- (void)resourceTypeChanged:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)setMode:(int)arg1;

@end

@interface SCNScene : NSObject <NSSecureCoding>
{
    struct __C3DScene *_scene;
    SCNSceneSource *_sceneSource;
    double _lastEvalTime;
    SCNPhysicsWorld *_physicsWorld;
    SCNNode *_rootNode;
    SCNMaterialProperty *_background;
    NSMutableDictionary *_userAttributes;
    double _fogStartDistance;
    double _fogEndDistance;
    double _fogDensityExponent;
    id _fogColor;
    BOOL _paused;
    BOOL _pausedForEditing;
    SCNAuthoringEnvironment *_authoringEnvironment;
}

+ (BOOL)supportsSecureCoding;
+ (SEL)jsConstructor;
+ (id)supportedFileUTIsForExport;
+ (id)supportedFileUTIsForImport;
+ (BOOL)canImportFileExtension:(id)arg1;
+ (BOOL)canImportFileUTI:(id)arg1;
+ (id)sceneWithSceneRef:(struct __C3DScene *)arg1;
+ (id)sceneWithData:(id)arg1 options:(id)arg2;
+ (id)sceneWithData:(id)arg1 atIndex:(long long)arg2 options:(id)arg3;
+ (id)sceneWithURL:(id)arg1 atIndex:(long long)arg2 options:(id)arg3;
+ (id)sceneWithURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)sceneWithURL:(id)arg1 options:(id)arg2;
+ (id)sceneNamed:(id)arg1 options:(id)arg2;
+ (id)sceneNamed:(id)arg1 inDirectory:(id)arg2 options:(id)arg3;
+ (id)sceneNamed:(id)arg1;
+ (id)scene;
+ (id)sceneWithMDLAsset:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didEncodeSCNScene:(id)arg1;
- (void)_didDecodeSCNScene:(id)arg1;
- (void)_customDecodingOfSCNScene:(id)arg1;
- (void)_customEncodingOfSCNScene:(id)arg1;
- (id)initForJavascript:(id)arg1;
- (BOOL)isPausedForEditing;
- (void)setPausedForEditing:(BOOL)arg1;
- (BOOL)isPausedOrPausedByInheritance;
@property(nonatomic, getter=isPaused) BOOL paused;
- (id)particleSystems;
- (void)removeAllParticleSystems;
- (void)removeParticleSystem:(id)arg1;
- (void)addParticleSystem:(id)arg1 withTransform:(struct CATransform3D)arg2;
- (void)addSceneAnimation:(id)arg1 forKey:(id)arg2 target:(id)arg3;
- (void *)__CFObject;
- (id)valueForUndefinedKey:(id)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (void)unlock;
- (void)lock;
- (BOOL)writeToURL:(id)arg1 options:(id)arg2 delegate:(id)arg3 progressHandler:(CDUnknownBlockType)arg4;
@property(nonatomic) double fogStartDistance;
@property(nonatomic) double fogDensityExponent;
@property(nonatomic) double fogEndDistance;
@property(retain, nonatomic) id fogColor;
@property(readonly, nonatomic) SCNMaterialProperty *background;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (void)setPlaybackSpeed:(float)arg1;
- (float)playbackSpeed;
- (void)setFrameRate:(double)arg1;
- (double)frameRate;
- (void)setEndTime:(double)arg1;
- (double)endTime;
- (void)setStartTime:(double)arg1;
- (double)startTime;
- (id)_physicsWorldCreateIfNeeded:(BOOL)arg1;
@property(readonly, nonatomic) SCNPhysicsWorld *physicsWorld;
- (void)_scaleSceneBy:(double)arg1;
- (void)setRootNode:(id)arg1;
- (void)_setRootNode:(id)arg1;
@property(readonly, nonatomic) SCNNode *rootNode;
- (id)root;
- (id)sceneSource;
- (void)setSceneSource:(id)arg1;
- (struct __C3DScene *)sceneRef;
- (id)_scenes;
- (id)scene;
- (void)setLastEvalTime:(double)arg1;
- (double)lastEvalTime;
- (void)dealloc;
- (void)setUpAxis:(struct SCNVector3)arg1;
- (struct SCNVector3)upAxis;
- (void)_syncObjCModel;
- (id)initWithSceneRef:(struct __C3DScene *)arg1;
- (id)init;
- (id)debugQuickLookObjectWithPointOfView:(id)arg1;
- (id)debugQuickLookObject;
- (id)exportAsCOLLADAOperationWithDestinationURL:(id)arg1 attributes:(id)arg2 delegate:(id)arg3 didEndSelector:(SEL)arg4 userInfo:(void *)arg5;
- (id)exportAsWebGLOperationWithDestinationURL:(id)arg1 size:(struct CGSize)arg2 attributes:(id)arg3 delegate:(id)arg4 didEndSelector:(SEL)arg5 userInfo:(void *)arg6;
- (id)exportAsMovieOperationWithDestinationURL:(id)arg1 size:(struct CGSize)arg2 attributes:(id)arg3 delegate:(id)arg4 didEndSelector:(SEL)arg5 userInfo:(void *)arg6;
- (BOOL)writeToURL:(id)arg1 options:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SCNSceneDatabase : NSObject <NSSecureCoding>
{
    NSMutableDictionary *_db;
}

+ (BOOL)supportsSecureCoding;
+ (id)lookUpKeyForObjectNamed:(id)arg1 class:(Class)arg2;
+ (id)sceneDatabase;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)addInstance:(id)arg1 withName:(id)arg2 class:(Class)arg3;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNSceneGraphView : NSView <NSOutlineViewDataSource, NSOutlineViewDelegate>
{
    NSView *_mainView;
    NSOutlineView *_outlineView;
    id _typeInspector;
    void *_rootNode;
}

- (void)selectionDidChange:(id)arg1;
- (void)setRootNode:(void *)arg1;
- (void)del:(id)arg1;
- (void)add:(id)arg1;
- (id)selectedNode;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (void)updateSceneGraph;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNSceneLookUpUnarchiver : NSObject <NSSecureCoding>
{
}

+ (BOOL)supportsSecureCoding;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface SCNSceneSource : NSObject
{
    struct __C3DSceneSource *_sceneSource;
    struct __C3DScene *_lastLoadedScene;
    NSDictionary *_lastOptions;
    NSOperationQueue *_downloadingQueue;
    BOOL _sceneLoaded;
    NSDictionary *_sceneSourceOptions;
}

+ (id)sceneFileTypes;
+ (id)sceneTypes;
+ (id)sceneSourceWithData:(id)arg1 options:(id)arg2;
+ (id)sceneSourceWithURL:(id)arg1 options:(id)arg2;
+ (void)_removeCachedSceneSourceIfNeededForURL:(id)arg1;
+ (void)_cacheSceneSource:(id)arg1 forURL:(id)arg2 options:(id)arg3;
+ (id)_cachedSceneSourceForURL:(id)arg1 options:(id)arg2;
+ (BOOL)_shouldCacheWithOptions:(id)arg1;
- (id)performConsistencyCheck;
- (BOOL)canExportToColladaWithNoDataLoss;
- (long long)sourceStatus;
- (id)IDsOfEntriesWithClass:(Class)arg1;
- (id)entryWithID:(id)arg1 withClass:(Class)arg2;
- (id)entriesPassingTest:(CDUnknownBlockType)arg1;
- (BOOL)_appendToEntries:(id)arg1 entriesWithType:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3 entryObjectConstructor:(CDUnknownBlockType)arg4;
- (id)identifiersOfEntriesWithClass:(Class)arg1;
- (id)entryWithIdentifier:(id)arg1 withClass:(Class)arg2;
- (struct __C3DLibrary *)library;
- (struct __C3DSceneSource *)sceneSourceRef;
- (id)propertyForKey:(id)arg1;
- (id)copyPropertiesAtIndex:(long long)arg1 options:(id)arg2;
- (id)sceneWithOptions:(id)arg1 error:(id *)arg2;
- (id)sceneWithClass:(Class)arg1 options:(id)arg2 error:(id *)arg3;
- (id)sceneWithOptions:(id)arg1 statusHandler:(CDUnknownBlockType)arg2;
- (id)sceneWithClass:(Class)arg1 options:(id)arg2 statusHandler:(CDUnknownBlockType)arg3;
- (id)_sceneWithClass:(Class)arg1 options:(id)arg2 statusHandler:(CDUnknownBlockType)arg3;
- (struct __C3DScene *)_createSceneRefWithOptions:(id)arg1 statusHandler:(CDUnknownBlockType)arg2;
- (id)sceneAtIndex:(unsigned long long)arg1 options:(id)arg2 error:(id *)arg3;
- (id)sceneAtIndex:(unsigned long long)arg1 options:(id)arg2;
- (id)description;
- (long long)sceneCount;
- (long long)countOfScenes;
@property(readonly) NSData *data;
@property(readonly) NSURL *url;
- (void)dealloc;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)sceneSourceOptions;
- (id)initWithData:(id)arg1 options:(id)arg2;
- (id)debugQuickLookData;
- (id)debugQuickLookObject;

@end

__attribute__((visibility("hidden")))
@interface SCNShadableHelper : NSObject <NSSecureCoding>
{
    id _owner;
    SCNProgram *_program;
    NSDictionary *_shaderModifiers;
    NSDictionary *_symbolToBinder;
    NSDictionary *_symbolToUnbinder;
}

+ (BOOL)supportsSecureCoding;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNShadableHelper:(id)arg1;
- (void)_customDecodingOfSCNShadableHelper:(id)arg1;
- (void)_customEncodingOfSCNShadableHelper:(id)arg1;
- (void *)__CFObject;
- (void)_setC3DProgram;
- (void)_setC3DProgramDelegate;
- (void)_updateAllC3DProgramInputs;
- (void)_updateC3DProgramInputForSymbol:(id)arg1;
- (void)_updateC3DProgramInput:(struct __C3DFXGLSLProgram *)arg1 forSymbol:(id)arg2;
- (struct __C3DFXGLSLProgram *)_programFromPassAtIndex:(long long)arg1;
- (struct __C3DFXTechnique *)_technique;
- (void)_programDidChange:(id)arg1;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
- (void)_shaderModifiersDidChange;
- (void)_unbindValueForSymbol:(id)arg1 atLocation:(unsigned int)arg2 programID:(unsigned int)arg3 node:(id)arg4 renderer:(id)arg5;
- (BOOL)_bindValueForSymbol:(id)arg1 atLocation:(unsigned int)arg2 programID:(unsigned int)arg3 node:(id)arg4 renderer:(id)arg5;
- (BOOL)isOpaque;
@property(retain, nonatomic) SCNProgram *program;
- (void)_stopObservingProgram;
- (void)_startObservingProgram;
@property(readonly, nonatomic) id owner;
- (void)dealloc;
- (void)ownerWillDie;
- (id)initWithOwner:(id)arg1;

@end

@interface SCNShape : SCNGeometry
{
    float _chamferRadius;
    float _extrusionDepth;
    float _discretizedStraightLineMaxLength;
    NSBezierPath *_chamferProfile;
    long long _primitiveType;
    long long _chamferMode;
    NSBezierPath *_path;
}

+ (BOOL)supportsSecureCoding;
+ (id)shapeWithPath:(id)arg1 extrusionDepth:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (void)_customEncodingOfSCNShape:(id)arg1;
- (void)_customDecodingOfSCNShape:(id)arg1;
- (void)dealloc;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (CDStruct_d3ce6806)params;
@property(copy, nonatomic) NSBezierPath *chamferProfile;
@property(copy, nonatomic) NSBezierPath *path;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) double extrusionDepth;
- (void)setDiscretizedStraightLineMaxLength:(double)arg1;
- (double)discretizedStraightLineMaxLength;
@property(nonatomic) double chamferRadius;
@property(nonatomic) long long chamferMode;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)initPresentationShapeGeometryWithShapeGeometryRef:(struct __C3DShapeGeometry *)arg1;
- (id)initWithShapeGeometryRef:(struct __C3DShapeGeometry *)arg1;
- (id)init;
- (void)_syncObjCModel:(struct __C3DShapeGeometry *)arg1;

@end

@interface SCNSkinner : NSObject <NSSecureCoding>
{
    struct __C3DSkinner *_skinner;
}

+ (BOOL)supportsSecureCoding;
+ (id)skinnerWithBaseGeometry:(id)arg1 bones:(id)arg2 boneInverseBindTransforms:(id)arg3 boneWeights:(id)arg4 boneIndices:(id)arg5;
+ (struct __C3DSkinner *)createSkinnerWithBaseGeometry:(id)arg1 bones:(id)arg2 boneWeights:(id)arg3 boneIndices:(id)arg4;
+ (id)skinnerWithSkinnerRef:(struct __C3DSkinner *)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void *)__CFObject;
- (id)joints;
- (void)setBones:(id)arg1;
@property(readonly, nonatomic) NSArray *bones;
- (void)setBoneInverseBindTransforms:(id)arg1;
@property(readonly, nonatomic) NSArray *boneInverseBindTransforms;
@property(readonly, nonatomic) SCNGeometrySource *boneIndices;
@property(readonly, nonatomic) SCNGeometrySource *boneWeights;
@property(nonatomic) struct CATransform3D baseGeometryBindTransform;
@property(retain, nonatomic) SCNGeometry *baseGeometry;
@property(retain, nonatomic) SCNNode *skeleton;
- (struct __C3DSkinner *)skinnerRef;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithSkinnerRef:(struct __C3DSkinner *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNSourceRendererRegistry : NSObject
{
    struct __CFDictionary *_registry;
}

+ (id)sharedRegistry;
- (void)removeSourceRenderersForSource:(id)arg1;
- (void)removeSourceRenderersForEngineContext:(struct __C3DEngineContext *)arg1;
- (id)sourceRendererForEngineContext:(struct __C3DEngineContext *)arg1 source:(id)arg2;
- (void)rendererDidChange:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface SCNSphere : SCNGeometry
{
    double _sphereradius;
    double _sphereradialSpan;
    long long _spheresegmentCount;
    long long _sphereprimitiveType;
    BOOL _spheregeodesic;
    BOOL _spherehemispheric;
}

+ (BOOL)supportsSecureCoding;
+ (id)sphereWithRadius:(double)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long segmentCount;
@property(nonatomic) double radius;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
- (void)setHemispheric:(BOOL)arg1;
- (BOOL)isHemispheric;
@property(nonatomic, getter=isGeodesic) BOOL geodesic;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationSphere;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNSpriteKitEventHandler : NSObject
{
    SKScene *_scene;
    NSMutableDictionary *_touchMap;
}

@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (void)keyUp:(id)arg1;
- (void)keyDown:(id)arg1;
- (BOOL)mouseUp:(id)arg1;
- (BOOL)mouseDragged:(id)arg1;
- (BOOL)mouseMoved:(id)arg1;
- (BOOL)mouseDown:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNSpriteKitSource : SCNImageSource
{
    SKScene *_scene;
}

@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (void)dealloc;
- (BOOL)isOpaque;
- (id)textureSource;

@end

__attribute__((visibility("hidden")))
@interface SCNTechniquePanel : NSPanel
{
    id _controller;
}

+ (id)techniquePanelForView:(id)arg1;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (void)close;
- (void)open;
- (id)controller;
- (void)setController:(id)arg1;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNTechniquePanelController : NSObject
{
    SCNView *_3dView;
    SCNTechniquePanel *_panel;
    NSPopUpButton *_passes;
    NSPopUpButton *_target;
    SCNRenderTargetView *_targetView;
}

- (void)reParsePasses;
- (void)selectTarget:(id)arg1;
- (struct __C3DTexture *)currentTexture;
- (void)selectPass:(id)arg1;
- (void)updateTargets;
- (void)setOpenGLContext:(id)arg1;
- (void)close:(id)arg1;
@property(retain) SCNView *view;
- (id)panel;
- (struct __C3DFXContext *)fxContext;
- (struct __C3DRendererContext *)rendererContext;
- (struct __C3DEngineContext *)context;
- (void)techniquesDidUpdate:(id)arg1;
- (void)sceneDidChange;
- (void)dealloc;
- (id)init;

@end

@interface SCNText : SCNGeometry
{
    float _flatness;
    float _chamferRadius;
    float _extrusionDepth;
    float _discretizedStraightLineMaxLength;
    NSBezierPath *_chamferProfile;
    long long _primitiveType;
    id _string;
    NSFont *_font;
    BOOL _wrapped;
    int _alignmentMode;
    int _truncationMode;
    BOOL _useCustomContainerFrame;
    struct CGRect _customContainerFrame;
    BOOL __wantsSeparateGeometryElements;
}

+ (BOOL)supportsSecureCoding;
+ (id)textWithString:(id)arg1 extrusionDepth:(double)arg2;
+ (id)text;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customEncodingOfSCNText:(id)arg1;
- (void)_customDecodingOfSCNText:(id)arg1;
- (void)dealloc;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (CDStruct_8bd95810)params;
@property(copy, nonatomic) NSBezierPath *chamferProfile;
@property(nonatomic) long long chamferSegmentCount;
@property(readonly, nonatomic) struct CGSize textSize;
@property(copy, nonatomic) NSString *alignmentMode;
@property(copy, nonatomic) NSString *truncationMode;
@property(nonatomic) struct CGRect containerFrame;
@property(retain, nonatomic) NSFont *font;
@property(nonatomic, getter=isWrapped) BOOL wrapped;
@property(copy, nonatomic) id string;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) double flatness;
@property(nonatomic) double extrusionDepth;
- (void)setDiscretizedStraightLineMaxLength:(double)arg1;
- (double)discretizedStraightLineMaxLength;
@property(nonatomic) double chamferRadius;
- (void)set_wantsSeparateGeometryElements:(BOOL)arg1;
- (BOOL)_wantsSeparateGeometryElements;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (struct __C3DGeometry *)__createCFObject;
- (id)initPresentationTextGeometryWithTextGeometryRef:(struct __C3DTextGeometry *)arg1;
- (id)initWithTextGeometryRef:(struct __C3DTextGeometry *)arg1;
- (id)init;
- (void)_syncObjCModel:(struct __C3DTextGeometry *)arg1;

@end

@interface SCNTextureSource : NSObject
{
    id _mtlTextureCache;
}

- (void)setMTLTextureCache:(id)arg1;
- (id)MTLTextureCache;
- (double)nextFrameTime;
- (void)cleanup:(struct __C3DRendererContext *)arg1;
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureOffscreenRenderingSource : SCNTextureSource
{
    BOOL _usesIOSurface;
    struct CGSize _framebufferSize;
    struct __C3DFramebuffer *_framebuffer;
}

- (void)_unbindFramebuffer:(struct __C3DEngineContext *)arg1;
- (void)_bindFramebuffer:(struct __C3DEngineContext *)arg1;
- (void)_buildMipmaps:(struct __C3DEngineContext *)arg1;
- (struct __C3DTexture *)__prepareFramebufferWithSize:(struct CGSize)arg1 withEngineContext:(struct __C3DEngineContext *)arg2 textureSampler:(struct __C3DTextureSampler *)arg3 needsStencil:(BOOL)arg4;
- (void)_createFramebufferWithEngineContext:(struct __C3DEngineContext *)arg1 size:(struct CGSize)arg2;
- (void)cleanup:(struct __C3DRendererContext *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureDelegateSource : SCNTextureOffscreenRenderingSource
{
    id _delegate;
    double _lastUpdate;
    double _nextUpdateDate;
}

@property(retain, nonatomic) id delegate; // @synthesize delegate=_delegate;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
- (void)cleanup:(struct __C3DRendererContext *)arg1;
- (void)__updateTextureWithDelegate:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2;
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureLayerSource : SCNTextureOffscreenRenderingSource
{
    CALayer *_layer;
    double _lastUpdate;
    double _nextUpdateDate;
}

@property(retain, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
- (struct CGSize)layerSizeInPixels;
- (void)cleanup:(struct __C3DRendererContext *)arg1;
- (double)__updateTextureWithLayer:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2 sampler:(struct __C3DTextureSampler *)arg3;
- (double)__renderLayer:(id)arg1 withCARenderer:(id)arg2 engineContext:(struct __C3DEngineContext *)arg3 viewport:(double)arg4 atTime:(BOOL)arg5 forceUpdate:(char *)arg6 didUpdate: /* Error: Ran out of types for this method. */;
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureSpriteKitSource : SCNTextureOffscreenRenderingSource
{
    SKScene *_scene;
    double _lastUpdate;
}

@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
- (void)cleanup:(struct __C3DRendererContext *)arg1;
- (double)__updateTextureWithSKScene:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2 sampler:(struct __C3DTextureSampler *)arg3;
- (void)__renderSKScene:(id)arg1 withSKSCNRenderer:(id)arg2 engineContext:(struct __C3DEngineContext *)arg3 viewport:(double)arg4 atTime: /* Error: Ran out of types for this method. */;
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (void)dealloc;

@end

@interface SCNTorus : SCNGeometry
{
    double _torusringRadius;
    double _toruspipeRadius;
    double _torusradialSpan;
    long long _torusringSegmentCount;
    long long _toruspipeSegmentCount;
    long long _torusprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)torusWithRingRadius:(double)arg1 pipeRadius:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long ringSegmentCount;
@property(nonatomic) double ringRadius;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long pipeSegmentCount;
@property(nonatomic) double pipeRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationTorus;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNTransaction : NSObject
{
}

+ (unsigned int)currentState;
+ (void)postCommandWithContext:(void *)arg1 object:(id)arg2 keyPath:(id)arg3 applyBlock:(CDUnknownBlockType)arg4;
+ (void)postCommandWithContext:(void *)arg1 object:(id)arg2 applyBlock:(CDUnknownBlockType)arg3;
+ (BOOL)immediateMode;
+ (void)setImmediateMode:(BOOL)arg1;
+ (void)setValue:(id)arg1 forKey:(id)arg2;
+ (id)valueForKey:(id)arg1;
+ (void)setCompletionBlock:(CDUnknownBlockType)arg1;
+ (CDUnknownBlockType)completionBlock;
+ (void)setDisableActions:(BOOL)arg1;
+ (BOOL)disableActions;
+ (void)setAnimationTimingFunction:(id)arg1;
+ (id)animationTimingFunction;
+ (void)setAnimationDuration:(double)arg1;
+ (double)animationDuration;
+ (void)unlock;
+ (void)lock;
+ (void)flush;
+ (void)commitImmediate;
+ (void)commit;
+ (void)begin;
- (id)animationTimingFunction;
- (void)setAnimationTimingFunction:(id)arg1;
- (BOOL)disableActions;
- (void)setDisableActions:(BOOL)arg1;
- (double)animationDuration;
- (void)setAnimationDuration:(double)arg1;
- (void)unlock;
- (void)lock;
- (void)flush;
- (void)commit;
- (void)begin;

@end

@interface SCNTransformConstraint : SCNConstraint
{
}

+ (id)transformConstraintInWorldSpace:(BOOL)arg1 withBlock:(CDUnknownBlockType)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initInWorld:(BOOL)arg1 withBlock:(CDUnknownBlockType)arg2;

@end

@interface SCNTube : SCNGeometry
{
    double _tubeinnerRadius;
    double _tubeouterRadius;
    double _tubeheight;
    double _tuberadialSpan;
    long long _tubeheightSegmentCount;
    long long _tuberadialSegmentCount;
    long long _tubeprimitiveType;
}

+ (BOOL)supportsSecureCoding;
+ (id)tubeWithInnerRadius:(double)arg1 outerRadius:(double)arg2 height:(double)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) double outerRadius;
@property(nonatomic) double innerRadius;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)presentationGeometry;
- (id)presentationTube;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNTypeInspector : NSView <NSOutlineViewDataSource, NSOutlineViewDelegate>
{
    id _instance;
    NSView *_mainView;
    NSOutlineView *_outlineView;
    NSMutableDictionary *_datasource;
}

- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (id)ivarsOfItem:(id)arg1;
@property(retain) id instance;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_commonInit;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNWebGLExportOperation : _SCNExportOperation
{
}

- (void)main;
- (id)initWithScene:(id)arg1 size:(struct CGSize)arg2 attributes:(id)arg3 outputURL:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface SCN_CAKeyframeAnimation : CAKeyframeAnimation
{
    struct __C3DKeyframedAnimation *_c3dAnimation;
    BOOL _caReady;
}

- (BOOL)isCumulative;
- (void)setCumulative:(BOOL)arg1;
- (BOOL)isAdditive;
- (void)setAdditive:(BOOL)arg1;
- (id)timingFunction;
- (void)setTimingFunction:(id)arg1;
- (id)animationEvents;
- (void)setAnimationEvents:(id)arg1;
- (id)fillMode;
- (void)setFillMode:(id)arg1;
- (BOOL)usesSceneTimeBase;
- (void)setUsesSceneTimeBase:(BOOL)arg1;
- (BOOL)commitsOnCompletion;
- (void)setCommitsOnCompletion:(BOOL)arg1;
- (BOOL)isRemovedOnCompletion;
- (void)setRemovedOnCompletion:(BOOL)arg1;
- (double)fadeOutDuration;
- (void)setFadeOutDuration:(double)arg1;
- (double)fadeInDuration;
- (void)setFadeInDuration:(double)arg1;
- (float)speed;
- (void)setSpeed:(float)arg1;
- (double)timeOffset;
- (void)setTimeOffset:(double)arg1;
- (BOOL)autoreverses;
- (void)setAutoreverses:(BOOL)arg1;
- (double)repeatDuration;
- (void)setRepeatDuration:(double)arg1;
- (float)repeatCount;
- (void)setRepeatCount:(float)arg1;
- (double)duration;
- (void)setDuration:(double)arg1;
- (void)setC3dAnimation:(struct __C3DKeyframedAnimation *)arg1;
- (struct __C3DKeyframedAnimation *)c3dAnimation;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setBiasValues:(id)arg1;
- (id)biasValues;
- (void)setContinuityValues:(id)arg1;
- (id)continuityValues;
- (void)setTensionValues:(id)arg1;
- (id)tensionValues;
- (void)setTimingFunctions:(id)arg1;
- (id)timingFunctions;
- (void)setKeyTimes:(id)arg1;
- (id)keyTimes;
- (void)setValues:(id)arg1;
- (id)values;
- (void)_clearC3DCache;
- (void)_convertToCA;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCN_NSImageFromSlotContents : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
+ (void)initialize;
- (id)reverseTransformedValue:(id)arg1;
- (id)transformedValue:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface _C3DProgressDebugger : NSObject
{
}

+ (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface _SCNShadableCompilationIssue : NSObject
{
    id <SCNShadable> _shadable;
    NSString *_entryPoint;
    NSString *_effectiveModifier;
    NSString *_message;
    unsigned long long _type;
}

+ (id)issueWithShadable:(id)arg1 entryPoint:(id)arg2 effectiveModifier:(id)arg3 message:(id)arg4 type:(unsigned long long)arg5;
@property(readonly, nonatomic) unsigned long long type; // @synthesize type=_type;
@property(readonly, nonatomic) NSString *message; // @synthesize message=_message;
@property(readonly, nonatomic) NSString *effectiveModifier; // @synthesize effectiveModifier=_effectiveModifier;
@property(readonly, nonatomic) NSString *entryPoint; // @synthesize entryPoint=_entryPoint;
@property(readonly, nonatomic) id <SCNShadable> shadable; // @synthesize shadable=_shadable;
- (void)dealloc;

@end

