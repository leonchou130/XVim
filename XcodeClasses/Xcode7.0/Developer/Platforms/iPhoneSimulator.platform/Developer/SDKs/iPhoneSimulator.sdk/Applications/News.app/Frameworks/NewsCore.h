//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGSize {
    double width;
    double height;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct in_addr {
    unsigned int _field1;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

#pragma mark -

//
// File: /Applications/Xcode-7GM.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/News.app/Frameworks/NewsCore.framework/NewsCore
// UUID: BA71DA2E-6BCC-3FA3-83B1-EE6A726CC6BE
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 119.0.0.0.0
//            Minimum iOS version: 9.0.0
//                    SDK version: 9.0.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @executable_path/Frameworks
//                               = /Applications/Xcode-7GM.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/News.app/Frameworks/NewsCore.framework/Frameworks
//                       Run path: @loader_path/Frameworks
//                               = /Applications/Xcode-7GM.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/Applications/News.app/Frameworks/NewsCore.framework/Frameworks
//

@protocol CKRecordValue <NSObject>
@end

@protocol FCAppConfigurationObserving <NSObject>

@optional
- (void)appConfigurationTrendingTopicsDidChange:(FCAppConfiguration *)arg1;
- (void)appConfigurationDidChange:(FCAppConfiguration *)arg1;
@end

@protocol FCAssetHandleDelegate <NSObject>
- (id <FCOperationCanceling>)fetchFileForAssetHandle:(FCAssetHandle *)arg1 completion:(void (^)(NSString *, _Bool, NSError *))arg2;
@end

@protocol FCCKDatabaseDelegate <NSObject>
- (void)databaseHasBeenRateLimited:(FCCKDatabase *)arg1 retryAfter:(double)arg2;
@end

@protocol FCCKDatabaseOperationMiddleware <NSObject>
- (void)database:(FCCKDatabase *)arg1 didCancelOperation:(CKDatabaseOperation *)arg2;
- (long long)database:(FCCKDatabase *)arg1 willEnqueueOperation:(CKDatabaseOperation *)arg2;
@end

@protocol FCCKDatabaseRecordMiddleware <NSObject>
- (CKRecordZone *)serverRecordZone:(CKRecordZone *)arg1 inDatabase:(FCCKDatabase *)arg2;
- (CKRecordZone *)clientRecordZone:(CKRecordZone *)arg1 inDatabae:(FCCKDatabase *)arg2;
- (CKRecord *)serverRecord:(CKRecord *)arg1 inDatabase:(FCCKDatabase *)arg2;
- (CKRecord *)clientRecord:(CKRecord *)arg1 inDatabase:(FCCKDatabase *)arg2;
- (CKRecordZoneID *)clientRecordZoneID:(CKRecordZoneID *)arg1 inDatabase:(FCCKDatabase *)arg2;
- (CKRecordZoneID *)serverRecordZoneID:(CKRecordZoneID *)arg1 inDatabase:(FCCKDatabase *)arg2;
- (CKRecordID *)clientRecordID:(CKRecordID *)arg1 inDatabase:(FCCKDatabase *)arg2;
- (CKRecordID *)serverRecordID:(CKRecordID *)arg1 inDatabase:(FCCKDatabase *)arg2;
@end

@protocol FCCKDatabaseStartUpMiddleware <NSObject>
- (void)performStartUpForDatabase:(FCCKDatabase *)arg1 cloudKitDatabase:(CKDatabase *)arg2 completion:(void (^)(long long))arg3;
@end

@protocol FCCKDatabaseZoneMigrationStartUpMiddlewareMigrator
- (void)migratorDidFinishMigration:(FCCKDatabaseZoneMigrationStartUpMiddleware *)arg1 withDatabase:(FCCKDatabase *)arg2 result:(long long)arg3;
- (CKRecord *)migrateRecord:(CKRecord *)arg1 forZoneMigrator:(FCCKDatabaseZoneMigrationStartUpMiddleware *)arg2 database:(FCCKDatabase *)arg3 error:(id *)arg4;
- (_Bool)shouldMigrateRecordType:(NSString *)arg1 inZoneWithBaseName:(NSString *)arg2 zoneSuffix:(NSString *)arg3 forZoneMigrator:(FCCKDatabaseZoneMigrationStartUpMiddleware *)arg4 database:(FCCKDatabase *)arg5;
- (NSArray *)suffixesFoRecordZoneNamed:(NSString *)arg1 zoneMigrator:(FCCKDatabaseZoneMigrationStartUpMiddleware *)arg2 database:(FCCKDatabase *)arg3;
@end

@protocol FCCKRecordZoneDelegate <NSObject>
- (void)ensureRecordZoneExistsWithID:(CKRecordZoneID *)arg1 completionHandler:(void (^)(CKRecordZone *, NSError *))arg2;
@end

@protocol FCCacheCoordinatorDelegate <NSObject>
- (void)cacheCoordinator:(FCCacheCoordinator *)arg1 flushKeysWithWriteLock:(NSSet *)arg2;
- (unsigned long long)cacheCoordinatorCurrentSizeWithReadLock:(FCCacheCoordinator *)arg1;

@optional
- (unsigned long long)cacheCoordinatorPreemptiveFlushSize:(FCCacheCoordinator *)arg1;
@end

@protocol FCCacheFlushing <NSObject>
- (void)enableFlushing;
@end

@protocol FCChannelProviding <FCTagProviding>
@property(readonly, copy, nonatomic) NSString *defaultSectionID;
@property(readonly, copy, nonatomic) NSArray *sectionIDs;
@end

@protocol FCCloudKitConnectionDelegate <NSObject>
- (void)cloudKitConnectionPrivateDatabaseHasBeenRateLimited:(FCCloudKitConnection *)arg1;
- (void)cloudKitConnectionContentDatabaseHasBeenRateLimited:(FCCloudKitConnection *)arg1;
- (void)cloudKitConnection:(FCCloudKitConnection *)arg1 didDropRecordZonesWithIDs:(NSArray *)arg2;
@end

@protocol FCCommandAddRSSDelegate <FCCommandDelegate>
- (void)command:(FCCommand *)arg1 didReceivepollingURL:(NSURL *)arg2 error:(NSError *)arg3 feedURL:(NSURL *)arg4 title:(NSString *)arg5;
- (void)commandDidStartExecuting:(FCCommand *)arg1;
@end

@protocol FCCommandDelegate <NSObject>
- (void)command:(FCCommand *)arg1 didFinishWithStatus:(unsigned long long)arg2;
@end

@protocol FCFeedHeadlineSource <NSObject>
- (void)fetchHeadlinesForIdentifiers:(NSOrderedSet *)arg1 downloadAssets:(_Bool)arg2 qualityOfService:(long long)arg3 completion:(void (^)(NSDictionary *))arg4;
@end

@protocol FCFeedInboxObserving <NSObject>

@optional
- (void)feedInboxWillResetFromTop:(FCFeedInbox *)arg1;
- (void)feedInboxDidChangePersistableState:(FCFeedInbox *)arg1;
- (void)feedInboxDidReachEnd:(FCFeedInbox *)arg1;
- (void)feedInbox:(FCFeedInbox *)arg1 didUpdateHeadlinesAtIndexes:(NSIndexSet *)arg2;
- (void)feedInbox:(FCFeedInbox *)arg1 didAddHeadlinesToTop:(unsigned long long)arg2;
- (void)feedInbox:(FCFeedInbox *)arg1 didAddHeadlinesToBottom:(unsigned long long)arg2;
@end

@protocol FCFeedTheming <NSObject, NSCopying>
@property(readonly, nonatomic) struct UIEdgeInsets nameImageMaskInsets;
@property(readonly, nonatomic) struct CGSize nameImageMaskSize;
@property(readonly, nonatomic) FCAssetHandle *nameImageMaskAssetHandle;
@property(readonly, nonatomic) struct UIEdgeInsets nameImageForDarkBackgroundInsets;
@property(readonly, nonatomic) struct CGSize nameImageForDarkBackgroundSize;
@property(readonly, nonatomic) FCAssetHandle *nameImageForDarkBackgroundAssetHandle;
@property(readonly, nonatomic) struct UIEdgeInsets nameImageInsets;
@property(readonly, nonatomic) struct CGSize nameImageSize;
@property(readonly, nonatomic) FCAssetHandle *nameImageAssetHandle;
@property(readonly, nonatomic) FCAssetHandle *logoImageAssetHandle;
@property(readonly, nonatomic) long long statusBarStyle;
@property(readonly, nonatomic) UIColor *foregroundColor;
@property(readonly, nonatomic) UIColor *backgroundColor;
@property(readonly, copy, nonatomic) FCTextInfo *headlineBylineTextInfo;
@property(readonly, copy, nonatomic) FCTextInfo *headlineExcerptTextInfo;
@property(readonly, copy, nonatomic) FCTextInfo *headlineTitleTextInfo;
@property(readonly, copy, nonatomic) NSString *foregroundColorHexString;
@property(readonly, copy, nonatomic) NSString *backgroundColorHexString;
@property(readonly, copy, nonatomic) NSString *name;
@property(readonly, nonatomic) FCTagBanner *bannerImageForMask;
@property(readonly, nonatomic) FCTagBanner *bannerImageForThemeBackground;
@property(readonly, nonatomic) FCTagBanner *bannerImageForWhiteBackground;
@property(readonly, nonatomic) FCTagBanner *defaultBannerImage;
@property(readonly, nonatomic) _Bool isWhite;
@property(readonly, nonatomic) long long feedType;
@end

@protocol FCFetchCoordinatorDelegate <NSObject>
- (void)fetchCoordinator:(FCFetchCoordinator *)arg1 addFetchOperation:(NSOperation *)arg2 context:(id)arg3;
- (NSOperation *)fetchCoordinator:(FCFetchCoordinator *)arg1 fetchOperationForKeys:(NSSet *)arg2 context:(id)arg3 qualityOfService:(long long)arg4;
- (void)fetchCoordinator:(FCFetchCoordinator *)arg1 filterKeysToFetch:(NSMutableSet *)arg2 context:(id)arg3;
@end

@protocol FCHeadlineProviding <NSObject, NSCopying>
@property(readonly, nonatomic) double userFeedback;
@property(readonly, nonatomic) _Bool wasFeatured;
@property(readonly, nonatomic, getter=isFeatured) _Bool featured;
@property(readonly, nonatomic) _Bool surfacedByExploration;
@property(readonly, copy, nonatomic) NSString *surfacedByBinID;
@property(readonly, copy, nonatomic) NSString *surfacedByTopicID;
@property(readonly, copy, nonatomic) NSString *surfacedByChannelID;
@property(readonly, copy, nonatomic) NSString *surfacedBySectionID;
@property(readonly, copy, nonatomic) NSString *surfacedByTagID;
@property(readonly, copy, nonatomic) NSArray *moreFromPublisherArticleIDs;
@property(readonly, copy, nonatomic) NSArray *relatedArticleIDs;
@property(readonly, copy, nonatomic) NSString *localDraftPath;
@property(readonly, nonatomic) _Bool isDraft;
@property(readonly, nonatomic, getter=isDeleted) _Bool deleted;
@property(readonly, copy, nonatomic) NSArray *allowedStorefrontIDs;
@property(readonly, copy, nonatomic) NSArray *blockedStorefrontIDs;
@property(readonly, copy, nonatomic) NSArray *iAdSectionIDs;
@property(readonly, copy, nonatomic) NSArray *iAdKeywords;
@property(readonly, copy, nonatomic) NSArray *iAdCategories;
@property(readonly, copy, nonatomic) NSObject<FCTagProviding> *displayTopic;
@property(readonly, nonatomic, getter=isSponsored) _Bool sponsored;
@property(readonly, nonatomic, getter=isFeatureCandidate) _Bool featureCandidate;
@property(readonly, copy, nonatomic) FCHeadlineTemplate *headlineTemplate;
@property(readonly, nonatomic) double videoDuration;
@property(readonly, nonatomic) NSURL *videoURL;
@property(readonly, copy, nonatomic) NSArray *highestScoringTopicIDs;
@property(readonly, copy, nonatomic) NSArray *topicIDs;
@property(readonly, copy, nonatomic) NSDate *lastFetchedDate;
@property(readonly, copy, nonatomic) NSDate *lastModifiedDate;
@property(readonly, nonatomic) unsigned long long displayType;
@property(readonly, copy, nonatomic) NSURL *contentURL;
@property(readonly, copy, nonatomic) NSString *accessoryText;
@property(readonly, copy, nonatomic) NSString *longFormExcerpt;
@property(readonly, copy, nonatomic) NSString *shortExcerpt;
@property(readonly, nonatomic) struct CGSize thumbnailSize;
@property(readonly, nonatomic) FCAssetHandle *thumbnailAssetHandle;
@property(readonly, copy, nonatomic) NSString *sourceName;
@property(readonly, copy, nonatomic) NSObject<FCChannelProviding> *sourceChannel;
@property(readonly, nonatomic) unsigned long long backendArticleVersion;
@property(readonly, nonatomic) unsigned long long publisherArticleVersion;
@property(readonly, copy, nonatomic) NSDate *publishDate;
@property(readonly, copy, nonatomic) NSString *subtitle;
@property(readonly, copy, nonatomic) NSString *title;
@property(readonly, copy, nonatomic) NSString *primaryAudience;
@property(readonly, nonatomic) unsigned long long contentType;
@property(readonly, copy, nonatomic) NSString *referencedArticleID;
@property(readonly, copy, nonatomic) NSString *articleID;
@property(readonly, copy, nonatomic) NSString *identifier;

@optional
- (FCArticleContentManifest *)contentManifestWithContext:(FCCloudContext *)arg1;
@end

@protocol FCInboxStyleFeed <NSObject>
- (long long)inboxFilterOptions;
- (long long)inboxSortMethod;
- (void)fetchPinnedFeedItemsWithQualityOfService:(long long)arg1 testBlock:(_Bool (^)(NSString *))arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)fetchBatchOfFeedItemsFromCursor:(id <FCInboxStyleFeedCursor>)arg1 toCursor:(id <FCInboxStyleFeedCursor>)arg2 minCount:(unsigned long long)arg3 qualityOfService:(long long)arg4 completion:(void (^)(FCFeedItemBatch *, _Bool, NSError *))arg5;
- (void)fetchBatchOfFeedItemsUpToCursor:(id <FCInboxStyleFeedCursor>)arg1 qualityOfService:(long long)arg2 completion:(void (^)(FCFeedItemBatch *, _Bool, NSError *))arg3;
@end

@protocol FCInboxStyleFeedCursor <NSObject, NSCoding>
@property(readonly, nonatomic, getter=isBottomOfFeed) _Bool bottomOfFeed;
@property(readonly, nonatomic, getter=isValidBottomCursor) _Bool validBottomCursor;
@property(readonly, nonatomic, getter=isValidTopCursor) _Bool validTopCursor;
@end

@protocol FCKeyedOperationQueueDelegate <NSObject>
- (id <FCOperationCanceling>)keyedOperationQueue:(FCKeyedOperationQueue *)arg1 performAsyncOperationForKey:(NSObject<NSCopying> *)arg2 completion:(void (^)(_Bool))arg3;
@end

@protocol FCLocking <NSLocking>
@end

@protocol FCNetworkReachabilityObserving <NSObject>

@optional
- (void)wifiReachabilityDidChange:(FCNetworkReachability *)arg1;
- (void)networkReachabilityDidChange:(FCNetworkReachability *)arg1;
@end

@protocol FCOperationCanceling <NSObject>
- (void)cancel;
@end

@protocol FCOperationThrottlerDelegate <NSObject>

@optional
- (void)operationThrottler:(FCOperationThrottler *)arg1 performAsyncOperationWithCompletion:(void (^)(void))arg2;
- (void)operationThrottlerPerformOperation:(FCOperationThrottler *)arg1;
@end

@protocol FCOrderedCollectionAdditions
- (NSDictionary *)fc_diffAgainstSortedOrderedCollection:(id <FCOrderedCollection>)arg1 usingComparator:(long long (^)(id, id))arg2;
- (_Bool)fc_isSortedUsingComparator:(long long (^)(id, id))arg1;
- (void)fc_enumerateObjectsPairwiseUsingBlock:(void (^)(id, id, unsigned long long, _Bool *))arg1;
@end

@protocol FCOrderedMutableCollectionAdditions <FCOrderedCollectionAdditions>
- (NSIndexSet *)fc_mergeSortedOrderedCollection:(id <FCOrderedCollection>)arg1 usingComparator:(long long (^)(id, id))arg2;
@end

@protocol FCPrivateChannelMembershipObserving <NSObject>

@optional
- (void)privateChannelMembershipControllerDidChange:(FCPrivateChannelMembershipController *)arg1;
- (void)privateChannelMembershipController:(FCPrivateChannelMembershipController *)arg1 didAddMemberships:(NSSet *)arg2 changedMemberships:(NSSet *)arg3 removedMemberships:(NSSet *)arg4;
@end

@protocol FCQueryBasedStream <FCStreaming>
@property(readonly, nonatomic) CKQueryCursor *cursor;
@property(readonly, nonatomic) NSArray *desiredKeys;
@end

@protocol FCReadingListContentControllerObserving <NSObject>
- (void)readingListContentControllerDidUpdateArticleAvailabilityInOfflineMode:(FCReadingListContentController *)arg1;
@end

@protocol FCResourceURLProtocolDelegate <NSObject>
- (void)resourceProtocol:(FCResourceURLProtocol *)arg1 didUseResourceWithID:(NSString *)arg2;
- (void)resourceProtocol:(FCResourceURLProtocol *)arg1 willUseResourceWithID:(NSString *)arg2;
- (void)resourceProtocol:(FCResourceURLProtocol *)arg1 fetchResourceWithResourceID:(NSString *)arg2 completion:(void (^)(NSString *, NSURL *, NSError *))arg3;
@end

@protocol FCSectionProviding <FCTagProviding>
@property(readonly, copy, nonatomic) NSString *parentID;
@end

@protocol FCStreaming <NSObject>
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(NSObject<OS_dispatch_queue> *)arg3 completionHandler:(void (^)(NSArray *, NSError *))arg4;
@end

@protocol FCSubscriptionListObserving <NSObject>
- (void)subscriptionList:(FCSubscriptionList *)arg1 didAddSubscriptions:(NSSet *)arg2 changeSubscriptions:(NSSet *)arg3 removeSubscriptions:(NSSet *)arg4;
@end

@protocol FCSubscriptionObserving <NSObject>

@optional
- (void)subscriptionController:(FCSubscriptionController *)arg1 didAddTags:(NSSet *)arg2 changeTags:(NSSet *)arg3 removeTags:(NSSet *)arg4;
- (void)subscriptionController:(FCSubscriptionController *)arg1 didChangePendingSubscription:(FCSubscription *)arg2;
- (void)subscriptionController:(FCSubscriptionController *)arg1 didRemovePendingSubscription:(FCSubscription *)arg2;
- (void)subscriptionController:(FCSubscriptionController *)arg1 didAddPendingSubscription:(FCSubscription *)arg2;
@end

@protocol FCTagFeedDescriptor <NSObject>
@property(readonly, copy, nonatomic) id <FCTagProviding> tag;
- (void)replaceTag:(id <FCTagProviding>)arg1;
@end

@protocol FCTagProviding <NSObject, NSCopying>
@property(readonly, nonatomic) NSNumber *score;
@property(readonly, nonatomic) NSArray *pinnedArticleIDs;
@property(readonly, nonatomic) NSArray *allowedStorefrontIDs;
@property(readonly, nonatomic) NSArray *blockedStorefrontIDs;
@property(readonly, nonatomic) NSArray *iAdCategories;
@property(readonly, copy, nonatomic) id <FCFeedTheming> theme;
@property(readonly, nonatomic) FCAssetHandle *coverImageAssetHandle;
@property(readonly, nonatomic) _Bool isSubscribable;
@property(readonly, nonatomic) NSArray *relatedChannelIDsForOnboarding;
@property(readonly, nonatomic) NSArray *relatedTopicIDsForOnboarding;
@property(readonly, nonatomic) NSArray *relatedChannelIDs;
@property(readonly, nonatomic) NSArray *relatedTopicIDs;
@property(readonly, copy, nonatomic) NSString *primaryAudience;
@property(readonly, copy, nonatomic) NSString *replacementID;
@property(readonly, nonatomic) _Bool isDeprecated;
@property(readonly, nonatomic) long long contentProvider;
@property(readonly, copy, nonatomic) NSString *versionKey;
@property(readonly, copy, nonatomic) NSString *name;
@property(readonly, copy, nonatomic) NSString *identifier;
@property(readonly, nonatomic) id <FCSectionProviding> asSection;
@property(readonly, nonatomic) id <FCChannelProviding> asChannel;
@property(readonly, nonatomic) unsigned long long tagType;
- (NSArray *)feedIDsForExploration;
- (NSString *)feedIDForHighlights;
- (NSArray *)availableBins;
- (NSString *)feedIDForBin:(unsigned long long)arg1;
- (_Bool)isEqualToTag:(id <FCTagProviding>)arg1;
- (_Bool)isNoLongerAvailable;
- (_Bool)isAllowedStorefrontID:(NSString *)arg1;
@end

@protocol FCTagsFetchOperationDelegate <NSObject>
- (void)tagsFetchOperation:(FCTagsFetchOperation *)arg1 didFetchTagsByID:(NSDictionary *)arg2;
@end

@protocol FCVisitableItemProviding <NSObject>
@property(readonly, copy, nonatomic) NSDate *lastVisitedAt;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFilePresenter <NSObject>
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL;

@optional
@property(readonly, copy) NSURL *primaryPresentedItemURL;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didResolveConflictVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didLoseVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didGainVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemDidChangeAtURL:(NSURL *)arg1;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didMoveToURL:(NSURL *)arg2;
- (void)presentedSubitemDidAppearAtURL:(NSURL *)arg1;
- (void)accommodatePresentedSubitemDeletionAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)presentedItemDidResolveConflictVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidLoseVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidGainVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidChange;
- (void)presentedItemDidMoveToURL:(NSURL *)arg1;
- (void)accommodatePresentedItemDeletionWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)savePresentedItemChangesWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)relinquishPresentedItemToWriter:(void (^)(void (^)(void)))arg1;
- (void)relinquishPresentedItemToReader:(void (^)(void (^)(void)))arg1;
@end

@protocol NSLocking
- (void)unlock;
- (void)lock;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)arg1;
- (void)URLSession:(NSURLSession *)arg1 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)URLSession:(NSURLSession *)arg1 didBecomeInvalidWithError:(NSError *)arg2;
@end

@protocol WKNavigationDelegate <NSObject>

@optional
- (void)webViewWebContentProcessDidTerminate:(WKWebView *)arg1;
- (void)webView:(WKWebView *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)webView:(WKWebView *)arg1 didFailNavigation:(WKNavigation *)arg2 withError:(NSError *)arg3;
- (void)webView:(WKWebView *)arg1 didFinishNavigation:(WKNavigation *)arg2;
- (void)webView:(WKWebView *)arg1 didCommitNavigation:(WKNavigation *)arg2;
- (void)webView:(WKWebView *)arg1 didFailProvisionalNavigation:(WKNavigation *)arg2 withError:(NSError *)arg3;
- (void)webView:(WKWebView *)arg1 didReceiveServerRedirectForProvisionalNavigation:(WKNavigation *)arg2;
- (void)webView:(WKWebView *)arg1 didStartProvisionalNavigation:(WKNavigation *)arg2;
- (void)webView:(WKWebView *)arg1 decidePolicyForNavigationResponse:(WKNavigationResponse *)arg2 decisionHandler:(void (^)(long long))arg3;
- (void)webView:(WKWebView *)arg1 decidePolicyForNavigationAction:(WKNavigationAction *)arg2 decisionHandler:(void (^)(long long))arg3;
@end

@interface CKRecord (FCAdditions)
- (void)fc_setZoneName:(id)arg1;
- (void)fc_setRecordName:(id)arg1;
- (_Bool)fc_isDifferentFromRecord:(id)arg1 forKey:(id)arg2;
@end

@interface CKRecordZoneID (FCAdditions)
@end

@interface FCCommand : NSObject <NSCoding>
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (unsigned long long)statusForCloudKitError:(id)arg1;
- (void)coalesceWithCommand:(id)arg1;
- (_Bool)canCoalesceWithCommand:(id)arg1;
- (void)executeWithContext:(id)arg1 delegate:(id)arg2;
- (id)init;

@end

@interface FCAddRSSFeedCommand : FCCommand
{
    NSURL *_addRSSFeedURL;
    NSString *_addRSSFeedTitle;
}

@property(copy, nonatomic) NSString *addRSSFeedTitle; // @synthesize addRSSFeedTitle=_addRSSFeedTitle;
@property(copy, nonatomic) NSURL *addRSSFeedURL; // @synthesize addRSSFeedURL=_addRSSFeedURL;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)executeWithContext:(id)arg1 delegate:(id)arg2;
- (id)initWithAddRSSFeedURL:(id)arg1 title:(id)arg2;

@end

@interface FCCommandQueue : NSObject <FCNetworkReachabilityObserving, FCCommandDelegate>
{
    _Bool _suspended;
    _Bool _executingCommand;
    FCCloudContext *_context;
    FCKeyValueStore *_persistentStore;
    long long _urgency;
    NSObject<OS_dispatch_queue> *_workQueue;
    NSMutableArray *_pendingCommands;
    NSObject<OS_dispatch_source> *_cooldownTimer;
    NSObject<OS_dispatch_group> *_pendingCommandsGroup;
}

@property(retain, nonatomic) NSObject<OS_dispatch_group> *pendingCommandsGroup; // @synthesize pendingCommandsGroup=_pendingCommandsGroup;
@property(nonatomic, getter=isExecutingCommand) _Bool executingCommand; // @synthesize executingCommand=_executingCommand;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *cooldownTimer; // @synthesize cooldownTimer=_cooldownTimer;
@property(retain, nonatomic) NSMutableArray *pendingCommands; // @synthesize pendingCommands=_pendingCommands;
@property(nonatomic, getter=isSuspended) _Bool suspended; // @synthesize suspended=_suspended;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;
@property(nonatomic) long long urgency; // @synthesize urgency=_urgency;
@property(retain, nonatomic) FCKeyValueStore *persistentStore; // @synthesize persistentStore=_persistentStore;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (void)networkReachabilityDidChange:(id)arg1;
- (id)_decodeCommand:(id)arg1;
- (id)_encodeCommand:(id)arg1;
- (id)_deserializeCommandsFromStore:(id)arg1;
- (void)_serializeCommands:(id)arg1 toStore:(id)arg2;
- (void)command:(id)arg1 didFinishWithStatus:(unsigned long long)arg2;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_savePendingCommandsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_loadFromDisk;
- (void)_executeNextCommand;
- (void)_scheduleCommandExecution;
- (_Bool)isEmpty;
- (void)clear;
- (void)performBlockWhenEmpty:(CDUnknownBlockType)arg1;
- (void)_addCommand:(id)arg1 saveCompletion:(CDUnknownBlockType)arg2;
- (void)addCommand:(id)arg1 saveCompletion:(CDUnknownBlockType)arg2;
- (void)addCommand:(id)arg1;
- (void)resume;
- (void)dealloc;
- (id)initWithContext:(id)arg1 storeDirectory:(id)arg2 storeFilename:(id)arg3 urgency:(long long)arg4 suspended:(_Bool)arg5;
- (id)initWithContext:(id)arg1;
- (id)initWithContext:(id)arg1 persistentStore:(id)arg2 urgency:(long long)arg3 suspended:(_Bool)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCAddRSSFeedCommandQueue : FCCommandQueue <FCCommandAddRSSDelegate>
{
    id <FCAddRSSFeedCommandDelegate> _delegate;
}

@property(nonatomic) __weak id <FCAddRSSFeedCommandDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)command:(id)arg1 didReceivepollingURL:(id)arg2 error:(id)arg3 feedURL:(id)arg4 title:(id)arg5;
- (void)commandDidStartExecuting:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCFetchOperation : NSObject <FCOperationCanceling>
{
    FCFetchOperationResult *_result;
    NSObject<OS_dispatch_semaphore> *_finishedSemaphore;
    _Bool _wifiOnly;
    _Bool _executing;
    _Bool _finished;
    _Bool _cancelled;
    long long _qualityOfService;
    unsigned long long _cachePolicy;
    double _maximumCachedAge;
    CDUnknownBlockType _completionBlock;
    NSObject<OS_dispatch_queue> *_completionQueue;
}

@property(readonly) FCFetchOperationResult *result; // @synthesize result=_result;
@property(readonly, getter=isCancelled) _Bool cancelled; // @synthesize cancelled=_cancelled;
@property(readonly, getter=isFinished) _Bool finished; // @synthesize finished=_finished;
@property(readonly, getter=isExecuting) _Bool executing; // @synthesize executing=_executing;
@property(retain) NSObject<OS_dispatch_queue> *completionQueue; // @synthesize completionQueue=_completionQueue;
@property(copy) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property double maximumCachedAge; // @synthesize maximumCachedAge=_maximumCachedAge;
@property unsigned long long cachePolicy; // @synthesize cachePolicy=_cachePolicy;
@property _Bool wifiOnly; // @synthesize wifiOnly=_wifiOnly;
@property long long qualityOfService; // @synthesize qualityOfService=_qualityOfService;
- (void).cxx_destruct;
- (void)takeInputsFromFetchOperation:(id)arg1;
- (void)finishExecutingWithError:(id)arg1;
- (void)finishExecutingWithStatus:(unsigned long long)arg1;
- (void)finishExecutingWithFetchedObject:(id)arg1;
- (void)finishExecutingWithResult:(id)arg1;
@property(readonly) NSObject<OS_dispatch_queue> *workQueue;
- (_Bool)waitUntilFinishedWithTimeout:(double)arg1;
- (void)didFinishExecuting;
- (void)beginExecuting;
- (void)cancel;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCAggregateFetchOperation : FCFetchOperation
{
    NSMutableArray *_childOperations;
    NSMutableDictionary *_childOperationResultsByOperationOrder;
}

@property(retain, nonatomic) NSMutableDictionary *childOperationResultsByOperationOrder; // @synthesize childOperationResultsByOperationOrder=_childOperationResultsByOperationOrder;
@property(retain, nonatomic) NSMutableArray *childOperations; // @synthesize childOperations=_childOperations;
- (void).cxx_destruct;
- (void)cancel;
- (void)beginExecuting;
- (void)addFetchOperation:(id)arg1;
- (id)init;

@end

@interface FCEndpointConnection : NSObject <NSURLSessionDelegate, FCAppConfigurationObserving>
{
    FCCloudContext *_context;
    NSURL *_baseURL;
    NSURLSession *_session;
    FCAsyncSerialQueue *_requestSerialQueue;
}

+ (id)_errorByUpdatingRetryStatusForError:(id)arg1;
+ (id)_errorForStatus:(long long)arg1 url:(id)arg2;
@property(retain, nonatomic) FCAsyncSerialQueue *requestSerialQueue; // @synthesize requestSerialQueue=_requestSerialQueue;
@property(retain, nonatomic) NSURLSession *session; // @synthesize session=_session;
@property(copy) NSURL *baseURL; // @synthesize baseURL=_baseURL;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (void)performHTTPRequestWithURL:(id)arg1 method:(id)arg2 data:(id)arg3 contentType:(id)arg4 callbackQueue:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (id)initWithContext:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCAnalyticsEndpointConnection : FCEndpointConnection
{
}

- (void)appConfigurationDidChange:(id)arg1;
- (void)uploadAnalyticsPayload:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)initWithContext:(id)arg1;

@end

@interface FCAppConfiguration : NSObject
{
    NSArray *_hiddenFeedIDs;
    NSArray *_presubscribedFeedIDs;
    long long _shortReminderTime;
    long long _longReminderTime;
    long long _minimumArticleUpdateInterval;
    double _batchedFeedTimeout;
    double _interstitialAdLoadDelay;
    double _prerollLoadingTimeout;
    NSDictionary *_endpointConfigsByEnvironment;
    double _tileProminenceScoreBalanceValue;
    FCPersonalizationConfiguration *_personalizationConfig;
    FCIAdConfiguration *_iAdConfig;
    FCPrefetchConfiguration *_prefetchConfig;
    NSArray *_trendingTopics;
    FCAsyncSerialQueue *_requestSerialQueue;
    NSObject<OS_dispatch_queue> *_accessQueue;
    double _maximumCachedAge;
    FCRecommendedCategory *_topLevelCategory;
    FCCloudContext *_context;
    NSHashTable *_observers;
    NSMutableArray *_observationBlocks;
    FCResource *_configurationResource;
    FCResource *_trendingSearchesResource;
}

@property(retain, nonatomic) FCResource *trendingSearchesResource; // @synthesize trendingSearchesResource=_trendingSearchesResource;
@property(retain, nonatomic) FCResource *configurationResource; // @synthesize configurationResource=_configurationResource;
@property(retain, nonatomic) NSMutableArray *observationBlocks; // @synthesize observationBlocks=_observationBlocks;
@property(retain, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(retain, nonatomic) FCRecommendedCategory *topLevelCategory; // @synthesize topLevelCategory=_topLevelCategory;
@property(nonatomic) double maximumCachedAge; // @synthesize maximumCachedAge=_maximumCachedAge;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *accessQueue; // @synthesize accessQueue=_accessQueue;
@property(retain, nonatomic) FCAsyncSerialQueue *requestSerialQueue; // @synthesize requestSerialQueue=_requestSerialQueue;
@property(readonly, nonatomic) NSArray *trendingTopics; // @synthesize trendingTopics=_trendingTopics;
@property(retain, nonatomic) FCPrefetchConfiguration *prefetchConfig; // @synthesize prefetchConfig=_prefetchConfig;
@property(retain, nonatomic) FCIAdConfiguration *iAdConfig; // @synthesize iAdConfig=_iAdConfig;
@property(retain, nonatomic) FCPersonalizationConfiguration *personalizationConfig; // @synthesize personalizationConfig=_personalizationConfig;
@property(nonatomic) double tileProminenceScoreBalanceValue; // @synthesize tileProminenceScoreBalanceValue=_tileProminenceScoreBalanceValue;
@property(retain, nonatomic) NSDictionary *endpointConfigsByEnvironment; // @synthesize endpointConfigsByEnvironment=_endpointConfigsByEnvironment;
@property(nonatomic) double prerollLoadingTimeout; // @synthesize prerollLoadingTimeout=_prerollLoadingTimeout;
@property(nonatomic) double interstitialAdLoadDelay; // @synthesize interstitialAdLoadDelay=_interstitialAdLoadDelay;
@property(nonatomic) double batchedFeedTimeout; // @synthesize batchedFeedTimeout=_batchedFeedTimeout;
@property(nonatomic) long long minimumArticleUpdateInterval; // @synthesize minimumArticleUpdateInterval=_minimumArticleUpdateInterval;
@property(nonatomic) long long longReminderTime; // @synthesize longReminderTime=_longReminderTime;
@property(nonatomic) long long shortReminderTime; // @synthesize shortReminderTime=_shortReminderTime;
@property(retain, nonatomic) NSArray *presubscribedFeedIDs; // @synthesize presubscribedFeedIDs=_presubscribedFeedIDs;
@property(retain, nonatomic) NSArray *hiddenFeedIDs; // @synthesize hiddenFeedIDs=_hiddenFeedIDs;
- (void).cxx_destruct;
- (void)_didChangeTrendingTopics;
- (void)_didChange;
- (id)_languageConfigurationsInProtobufTrendingConfiguration:(id)arg1 forLanguages:(id)arg2;
- (id)_languageConfigurationsInProtobufConfiguration:(id)arg1 forLanguages:(id)arg2;
- (id)_preferredLanguages;
- (void)_extractTrendingTopicsFromProtobufConfiguration:(id)arg1;
- (void)_extractPrefetchConfigFromProtobufConfiguration:(id)arg1;
- (void)_extractiAdConfigFromProtobufConfiguration:(id)arg1;
- (void)_extractPersonalizationConfigFromProtobufConfiguration:(id)arg1;
- (id)_categoryFromProtobufCategory:(id)arg1;
- (void)_extractTopLevelCategoryFromProtobufConfiguration:(id)arg1;
- (void)_extractFeedIDsFromProtobufConfiguration:(id)arg1;
- (void)_extractEndpointConfigurationFromProtobufConfiguration:(id)arg1;
- (void)_extractCommonValuesFromProtobufConfiguration:(id)arg1;
- (void)_processTrendingSearchesData:(id)arg1;
- (void)_processConfigurationData:(id)arg1;
- (void)_fetchTrendingSearchesForStoreFrontID:(id)arg1 withCompletionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_fetchAppConfigurationForStoreFrontID:(id)arg1 withCompletionQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)resetCachedAge;
- (void)addChangeObservationBlock:(CDUnknownBlockType)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)fetchTrendingSearchesIfNeededWithCompletion:(CDUnknownBlockType)arg1;
- (void)fetchAppConfigurationIfNeededWithCompletionQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchAppConfigurationIfNeededWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSArray *recommendedCategories;
@property(readonly, nonatomic) NSArray *topLevelRecommendedChannelTagIDs;
@property(readonly, nonatomic) NSArray *topLevelRecommendedTopicTagIDs;
- (id)initWithContext:(id)arg1 cacheDirectory:(id)arg2;
- (id)init;

@end

@interface FCAppleAccount : NSObject
{
    NSString *_DSID;
    NSString *_userStoreFrontID;
    NSString *_contentStoreFrontID;
}

+ (id)sharedAccount;
+ (id)backingUserDefaultKeys;
@property(copy, nonatomic) NSString *contentStoreFrontID; // @synthesize contentStoreFrontID=_contentStoreFrontID;
@property(copy, nonatomic) NSString *userStoreFrontID; // @synthesize userStoreFrontID=_userStoreFrontID;
@property(copy, nonatomic) NSString *DSID; // @synthesize DSID=_DSID;
- (void).cxx_destruct;
- (void)_setStoreFrontDependentProperties;
- (id)reportConcernUserID;
- (id)contentStoreFrontID_US;
- (_Bool)isUserSignedInToiCloud;
- (_Bool)isPrivateDataSyncingEnabled;
- (void)loadStoreFrontIfNeededWithCompletion:(CDUnknownBlockType)arg1;
- (id)init;

@end

@interface FCArrayStream : NSObject <FCStreaming>
{
    NSArray *_array;
    unsigned long long _index;
}

- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithArray:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCArticle : NSObject
{
    NSString *_articleID;
    FCHeadline *_headline;
    FCArticleContentManifest *_contentManifest;
    NSObject<OS_dispatch_group> *_fetchGroup;
    NSObject<OS_dispatch_group> *_contentManifestGroup;
    NSError *_headlineFetchError;
    NSError *_contentManifestFetchError;
    FCFetchOperation *_headlineFetchOperation;
    FCFetchOperation *_contentManifestFetchOperation;
}

@property(retain, nonatomic) FCFetchOperation *contentManifestFetchOperation; // @synthesize contentManifestFetchOperation=_contentManifestFetchOperation;
@property(retain, nonatomic) FCFetchOperation *headlineFetchOperation; // @synthesize headlineFetchOperation=_headlineFetchOperation;
@property(retain, nonatomic) NSError *contentManifestFetchError; // @synthesize contentManifestFetchError=_contentManifestFetchError;
@property(retain, nonatomic) NSError *headlineFetchError; // @synthesize headlineFetchError=_headlineFetchError;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *contentManifestGroup; // @synthesize contentManifestGroup=_contentManifestGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *fetchGroup; // @synthesize fetchGroup=_fetchGroup;
@property(retain, nonatomic) FCArticleContentManifest *contentManifest; // @synthesize contentManifest=_contentManifest;
@property(retain, nonatomic) FCHeadline *headline; // @synthesize headline=_headline;
@property(readonly, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
- (void).cxx_destruct;
- (void)performBlockWhenContentManifestIsLoaded:(CDUnknownBlockType)arg1;
- (void)performBlockWhenFullyLoaded:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1 articleID:(id)arg2;
- (id)initWithContext:(id)arg1 headline:(id)arg2;

@end

@interface FCArticleClassification : NSObject
{
    NSString *_articleID;
    NSArray *_topics;
}

@property(copy, nonatomic) NSArray *topics; // @synthesize topics=_topics;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithArticleID:(id)arg1 topics:(id)arg2;

@end

@interface FCMultiStepFetchOperation : FCFetchOperation
{
    NSMutableArray *_steps;
    NSMutableArray *_fetchOperations;
    FCMutexLock *_accessLock;
}

@property(retain, nonatomic) FCMutexLock *accessLock; // @synthesize accessLock=_accessLock;
@property(retain, nonatomic) NSMutableArray *fetchOperations; // @synthesize fetchOperations=_fetchOperations;
@property(retain, nonatomic) NSMutableArray *steps; // @synthesize steps=_steps;
- (void).cxx_destruct;
- (void)_performNextStep;
- (id)completeFetchOperation;
- (void)addNonCriticalFetchStep:(SEL)arg1;
- (void)addFetchStep:(SEL)arg1;
- (void)cancel;
- (void)beginExecuting;
- (id)init;

@end

@interface FCArticleClassificationFetchOperation : FCMultiStepFetchOperation
{
    FCCloudContext *_context;
    NSString *_articleID;
    FCArticleRecordWrapper *_articleRecordWrapper;
    NSArray *_topicRecordWrappers;
}

@property(retain, nonatomic) NSArray *topicRecordWrappers; // @synthesize topicRecordWrappers=_topicRecordWrappers;
@property(retain, nonatomic) FCArticleRecordWrapper *articleRecordWrapper; // @synthesize articleRecordWrapper=_articleRecordWrapper;
@property(retain, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchTopicsWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchArticleWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 articleID:(id)arg2;

@end

@interface FCArticleContentFetchOperation : FCMultiStepFetchOperation
{
    FCCloudContext *_context;
    NSString *_articleID;
    FCInterestToken *_webArchiveInterestToken;
    FCArticleRecordWrapper *_articleRecordWrapper;
    FCArticleContentManifest *_contentManifest;
    NSArray *_flintResources;
}

@property(retain, nonatomic) NSArray *flintResources; // @synthesize flintResources=_flintResources;
@property(retain, nonatomic) FCArticleContentManifest *contentManifest; // @synthesize contentManifest=_contentManifest;
@property(retain, nonatomic) FCArticleRecordWrapper *articleRecordWrapper; // @synthesize articleRecordWrapper=_articleRecordWrapper;
@property(retain, nonatomic) FCInterestToken *webArchiveInterestToken; // @synthesize webArchiveInterestToken=_webArchiveInterestToken;
@property(retain, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchFlintResourcesWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchFlintDocumentWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchWebArchiveWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchContentManifestWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 articleID:(id)arg2;

@end

@interface FCArticleContentManifest : NSObject
{
    NSString *_articleID;
    unsigned long long _contentType;
    FCWebManifest *_webManifest;
    FCFlintManifest *_flintManifest;
    FCVideoManifest *_videoManifest;
}

@property(retain, nonatomic) FCVideoManifest *videoManifest; // @synthesize videoManifest=_videoManifest;
@property(retain, nonatomic) FCFlintManifest *flintManifest; // @synthesize flintManifest=_flintManifest;
@property(retain, nonatomic) FCWebManifest *webManifest; // @synthesize webManifest=_webManifest;
@property(nonatomic) unsigned long long contentType; // @synthesize contentType=_contentType;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithArticleID:(id)arg1 videoManifest:(id)arg2;
- (id)initWithArticleID:(id)arg1 webManifest:(id)arg2;
- (id)initWithArticleID:(id)arg1 flintManifest:(id)arg2;
- (id)initWithArticleID:(id)arg1 contentType:(unsigned long long)arg2;
- (id)initWithContext:(id)arg1 articleRecordWrapper:(id)arg2;

@end

@interface FCArticleContentManifestFetchOperation : FCMultiStepFetchOperation
{
    FCCloudContext *_context;
    NSString *_articleID;
    FCArticleContentManifest *_contentManifest;
}

@property(retain, nonatomic) FCArticleContentManifest *contentManifest; // @synthesize contentManifest=_contentManifest;
@property(retain, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchArticleWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 articleID:(id)arg2;

@end

@interface FCArticleController : NSObject
{
    FCCloudContext *_context;
}

@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)headlinesFetchOperationForArticleIDs:(id)arg1;
- (id)articleWithHeadline:(id)arg1;
- (id)articleWithID:(id)arg1;
- (id)initWithContext:(id)arg1;

@end

@interface FCHeadline : NSObject <FCHeadlineProviding>
{
    _Bool _featureCandidate;
    _Bool _sponsored;
    _Bool _deleted;
    _Bool _isDraft;
    _Bool _surfacedByExploration;
    _Bool _featured;
    _Bool _wasFeatured;
    FCAssetHandle *_thumbnailAssetHandle;
    NSString *_title;
    NSString *_subtitle;
    NSString *_articleID;
    NSString *_referencedArticleID;
    NSString *_primaryAudience;
    NSString *_longFormExcerpt;
    NSString *_shortExcerpt;
    NSArray *_topicIDs;
    NSArray *_highestScoringTopicIDs;
    NSDate *_publishDate;
    unsigned long long _publisherArticleVersion;
    unsigned long long _backendArticleVersion;
    NSObject<FCChannelProviding> *_sourceChannel;
    NSString *_sourceName;
    NSURL *_contentURL;
    unsigned long long _displayType;
    NSDate *_lastModifiedDate;
    NSDate *_lastFetchedDate;
    unsigned long long _contentType;
    NSURL *_videoURL;
    double _videoDuration;
    FCHeadlineTemplate *_headlineTemplate;
    NSObject<FCTagProviding> *_displayTopic;
    NSArray *_iAdCategories;
    NSArray *_iAdKeywords;
    NSArray *_iAdSectionIDs;
    NSArray *_blockedStorefrontIDs;
    NSArray *_allowedStorefrontIDs;
    NSString *_surfacedByTagID;
    NSString *_surfacedBySectionID;
    NSString *_surfacedByChannelID;
    NSString *_surfacedByTopicID;
    NSString *_surfacedByBinID;
    NSString *_accessoryText;
    NSString *_localDraftPath;
    double _userFeedback;
    NSArray *_relatedArticleIDs;
    NSArray *_moreFromPublisherArticleIDs;
    NSURL *_headlineURL;
    NSString *_excerpt;
    struct CGSize _thumbnailSize;
}

@property(nonatomic) _Bool wasFeatured; // @synthesize wasFeatured=_wasFeatured;
@property(copy, nonatomic) NSString *excerpt; // @synthesize excerpt=_excerpt;
@property(nonatomic) struct CGSize thumbnailSize; // @synthesize thumbnailSize=_thumbnailSize;
@property(copy, nonatomic) NSURL *headlineURL; // @synthesize headlineURL=_headlineURL;
@property(readonly, copy, nonatomic) NSArray *moreFromPublisherArticleIDs; // @synthesize moreFromPublisherArticleIDs=_moreFromPublisherArticleIDs;
@property(readonly, copy, nonatomic) NSArray *relatedArticleIDs; // @synthesize relatedArticleIDs=_relatedArticleIDs;
@property(nonatomic) double userFeedback; // @synthesize userFeedback=_userFeedback;
@property(readonly, copy, nonatomic) NSString *localDraftPath; // @synthesize localDraftPath=_localDraftPath;
@property(readonly, copy, nonatomic) NSString *accessoryText; // @synthesize accessoryText=_accessoryText;
@property(nonatomic, getter=isFeatured) _Bool featured; // @synthesize featured=_featured;
@property(nonatomic) _Bool surfacedByExploration; // @synthesize surfacedByExploration=_surfacedByExploration;
@property(copy, nonatomic) NSString *surfacedByBinID; // @synthesize surfacedByBinID=_surfacedByBinID;
@property(copy, nonatomic) NSString *surfacedByTopicID; // @synthesize surfacedByTopicID=_surfacedByTopicID;
@property(copy, nonatomic) NSString *surfacedByChannelID; // @synthesize surfacedByChannelID=_surfacedByChannelID;
@property(copy, nonatomic) NSString *surfacedBySectionID; // @synthesize surfacedBySectionID=_surfacedBySectionID;
@property(copy, nonatomic) NSString *surfacedByTagID; // @synthesize surfacedByTagID=_surfacedByTagID;
@property(readonly, nonatomic) _Bool isDraft; // @synthesize isDraft=_isDraft;
@property(nonatomic, getter=isDeleted) _Bool deleted; // @synthesize deleted=_deleted;
@property(readonly, copy, nonatomic) NSArray *allowedStorefrontIDs; // @synthesize allowedStorefrontIDs=_allowedStorefrontIDs;
@property(readonly, copy, nonatomic) NSArray *blockedStorefrontIDs; // @synthesize blockedStorefrontIDs=_blockedStorefrontIDs;
@property(readonly, copy, nonatomic) NSArray *iAdSectionIDs; // @synthesize iAdSectionIDs=_iAdSectionIDs;
@property(readonly, copy, nonatomic) NSArray *iAdKeywords; // @synthesize iAdKeywords=_iAdKeywords;
@property(readonly, copy, nonatomic) NSArray *iAdCategories; // @synthesize iAdCategories=_iAdCategories;
@property(readonly, copy, nonatomic) NSObject<FCTagProviding> *displayTopic; // @synthesize displayTopic=_displayTopic;
@property(readonly, nonatomic, getter=isSponsored) _Bool sponsored; // @synthesize sponsored=_sponsored;
@property(readonly, nonatomic, getter=isFeatureCandidate) _Bool featureCandidate; // @synthesize featureCandidate=_featureCandidate;
@property(readonly, copy, nonatomic) FCHeadlineTemplate *headlineTemplate; // @synthesize headlineTemplate=_headlineTemplate;
@property(readonly, nonatomic) double videoDuration; // @synthesize videoDuration=_videoDuration;
@property(readonly, nonatomic) NSURL *videoURL; // @synthesize videoURL=_videoURL;
@property(readonly, nonatomic) unsigned long long contentType; // @synthesize contentType=_contentType;
@property(readonly, copy, nonatomic) NSDate *lastFetchedDate; // @synthesize lastFetchedDate=_lastFetchedDate;
@property(readonly, copy, nonatomic) NSDate *lastModifiedDate; // @synthesize lastModifiedDate=_lastModifiedDate;
@property(readonly, nonatomic) unsigned long long displayType; // @synthesize displayType=_displayType;
@property(readonly, copy, nonatomic) NSURL *contentURL; // @synthesize contentURL=_contentURL;
@property(copy, nonatomic) NSString *sourceName; // @synthesize sourceName=_sourceName;
@property(copy, nonatomic) NSObject<FCChannelProviding> *sourceChannel; // @synthesize sourceChannel=_sourceChannel;
@property(readonly, nonatomic) unsigned long long backendArticleVersion; // @synthesize backendArticleVersion=_backendArticleVersion;
@property(readonly, nonatomic) unsigned long long publisherArticleVersion; // @synthesize publisherArticleVersion=_publisherArticleVersion;
@property(copy, nonatomic) NSDate *publishDate; // @synthesize publishDate=_publishDate;
@property(readonly, copy, nonatomic) NSArray *highestScoringTopicIDs; // @synthesize highestScoringTopicIDs=_highestScoringTopicIDs;
@property(copy, nonatomic) NSArray *topicIDs; // @synthesize topicIDs=_topicIDs;
@property(copy, nonatomic) NSString *shortExcerpt; // @synthesize shortExcerpt=_shortExcerpt;
@property(readonly, copy, nonatomic) NSString *longFormExcerpt; // @synthesize longFormExcerpt=_longFormExcerpt;
@property(readonly, copy, nonatomic) NSString *primaryAudience; // @synthesize primaryAudience=_primaryAudience;
@property(readonly, copy, nonatomic) NSString *referencedArticleID; // @synthesize referencedArticleID=_referencedArticleID;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(readonly, copy, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic) FCAssetHandle *thumbnailAssetHandle; // @synthesize thumbnailAssetHandle=_thumbnailAssetHandle;
- (void).cxx_destruct;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy, nonatomic) NSString *identifier;
- (id)copyWithZone:(struct _NSZone *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;

@end

@interface FCArticleHeadline : FCHeadline
{
    _Bool _sponsored;
    _Bool _deleted;
    _Bool _isDraft;
    _Bool _featureCandidate;
    _Bool _featured;
    NSString *_identifier;
    NSString *_articleID;
    NSString *_referencedArticleID;
    unsigned long long _contentType;
    NSString *_title;
    NSString *_primaryAudience;
    NSString *_subtitle;
    NSDate *_publishDate;
    unsigned long long _publisherArticleVersion;
    unsigned long long _backendArticleVersion;
    NSObject<FCChannelProviding> *_sourceChannel;
    NSString *_sourceName;
    FCAssetHandle *_thumbnailAssetHandle;
    NSString *_longFormExcerpt;
    NSString *_shortExcerpt;
    NSString *_accessoryText;
    NSURL *_contentURL;
    unsigned long long _displayType;
    NSDate *_lastModifiedDate;
    NSDate *_lastFetchedDate;
    NSArray *_topicIDs;
    NSArray *_highestScoringTopicIDs;
    NSURL *_videoURL;
    double _videoDuration;
    FCHeadlineTemplate *_headlineTemplate;
    NSObject<FCTagProviding> *_displayTopic;
    NSArray *_iAdCategories;
    NSArray *_iAdKeywords;
    NSArray *_iAdSectionIDs;
    NSArray *_blockedStorefrontIDs;
    NSArray *_allowedStorefrontIDs;
    NSArray *_relatedArticleIDs;
    NSArray *_moreFromPublisherArticleIDs;
    FCArticleRecordWrapper *_articleRecordWrapper;
    struct CGSize _thumbnailSize;
}

+ (_Bool)_forceArticlesToBeShownAsSponsored;
@property(retain, nonatomic) FCArticleRecordWrapper *articleRecordWrapper; // @synthesize articleRecordWrapper=_articleRecordWrapper;
- (id)moreFromPublisherArticleIDs;
- (id)relatedArticleIDs;
- (void)setFeatured:(_Bool)arg1;
- (_Bool)isFeatureCandidate;
- (id)allowedStorefrontIDs;
- (id)blockedStorefrontIDs;
- (_Bool)isDraft;
- (void)setDeleted:(_Bool)arg1;
- (_Bool)isDeleted;
- (id)iAdSectionIDs;
- (id)iAdKeywords;
- (id)iAdCategories;
- (id)displayTopic;
- (_Bool)isSponsored;
- (id)headlineTemplate;
- (double)videoDuration;
- (id)videoURL;
- (id)highestScoringTopicIDs;
- (void)setTopicIDs:(id)arg1;
- (id)topicIDs;
- (id)lastFetchedDate;
- (id)lastModifiedDate;
- (unsigned long long)displayType;
- (id)contentURL;
- (id)accessoryText;
- (void)setShortExcerpt:(id)arg1;
- (id)shortExcerpt;
- (id)longFormExcerpt;
- (void)setThumbnailSize:(struct CGSize)arg1;
- (struct CGSize)thumbnailSize;
- (id)thumbnailAssetHandle;
- (void)setSourceName:(id)arg1;
- (id)sourceName;
- (void)setSourceChannel:(id)arg1;
- (id)sourceChannel;
- (unsigned long long)backendArticleVersion;
- (unsigned long long)publisherArticleVersion;
- (void)setPublishDate:(id)arg1;
- (id)publishDate;
- (id)subtitle;
- (id)primaryAudience;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
- (unsigned long long)contentType;
- (id)referencedArticleID;
- (void)setArticleID:(id)arg1;
- (id)articleID;
- (id)identifier;
- (void).cxx_destruct;
- (_Bool)isFeatured;
- (id)contentManifestWithContext:(id)arg1;
- (id)description;
- (id)initWithArticleRecordWrapper:(id)arg1 sourceChannel:(id)arg2 displayTopic:(id)arg3;

@end

@interface FCArticleHeadlinesFetchOperation : FCMultiStepFetchOperation
{
    _Bool _shouldDownloadThumbnails;
    _Bool _shouldDownloadSourceChannelAssets;
    FCCloudContext *_context;
    NSArray *_articleIDs;
    NSArray *_articleRecordWrappers;
    NSDictionary *_tagsByID;
}

@property(retain, nonatomic) NSDictionary *tagsByID; // @synthesize tagsByID=_tagsByID;
@property(retain, nonatomic) NSArray *articleRecordWrappers; // @synthesize articleRecordWrappers=_articleRecordWrappers;
@property(retain, nonatomic) NSArray *articleIDs; // @synthesize articleIDs=_articleIDs;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property _Bool shouldDownloadSourceChannelAssets; // @synthesize shouldDownloadSourceChannelAssets=_shouldDownloadSourceChannelAssets;
@property _Bool shouldDownloadThumbnails; // @synthesize shouldDownloadThumbnails=_shouldDownloadThumbnails;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchTagRecordWrappersWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchArticleRecordWrappersWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 articleIDs:(id)arg2;

@end

@interface FCFeedDescriptor : NSObject <NSCopying, FCFeedHeadlineSource>
{
    FCCloudContext *_context;
    long long _feedType;
    NSString *_identifier;
}

@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(nonatomic) long long feedType; // @synthesize feedType=_feedType;
@property(readonly, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (void)fetchHeadlinesForIdentifiers:(id)arg1 downloadAssets:(_Bool)arg2 qualityOfService:(long long)arg3 completion:(CDUnknownBlockType)arg4;
@property(readonly, copy) NSString *description;
- (id)latestHeadlineResults;
- (id)fetchOperationForHeadlinesWithIDs:(id)arg1;
- (id)streamOfLatestHeadlines;
- (id)streamOfHeadlinesWithIDs:(id)arg1 cachedOnly:(_Bool)arg2 maxCachedAge:(double)arg3;
@property(readonly, nonatomic) _Bool isSubscribedTo;
- (void)unsubscribeTo;
- (_Bool)subscribeToWithError:(id *)arg1;
@property(readonly, nonatomic) _Bool isSubscribable;
@property(readonly, nonatomic) NSString *name;
@property(readonly, nonatomic) _Bool isInboxStyleFeed;
@property(readonly, nonatomic) id <FCFeedTheming> theme;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithContext:(id)arg1 identifier:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface FCArticleIDFeedDescriptor : FCFeedDescriptor
{
}

- (id)streamOfLatestHeadlines;
- (id)streamOfLatestArticleIDs;
- (id)articleRecordSortDescriptor;
- (CDUnknownBlockType)articleRecordTransformBlock;
- (id)articleRecordDesiredKeys;
- (id)articleRecordPredicate;

@end

@interface FCArticleList : NSObject
{
    FCArticleListRecordWrapper *_recordWrapper;
}

@property(readonly, nonatomic) FCArticleListRecordWrapper *recordWrapper; // @synthesize recordWrapper=_recordWrapper;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *articleIDs;
- (id)initWithRecordWrapper:(id)arg1;

@end

@interface FCArticleListFeedDescriptor : FCArticleIDFeedDescriptor
{
    NSString *_articleListID;
    NSString *_feedName;
}

@property(retain, nonatomic) NSString *feedName; // @synthesize feedName=_feedName;
@property(readonly, nonatomic) NSString *articleListID; // @synthesize articleListID=_articleListID;
- (void).cxx_destruct;
- (id)name;
- (id)articleListFromRecordWrapper:(id)arg1;
- (id)streamOfLatestArticleIDs;
- (void)fetchArticleIDsWithCompletionBlock:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 identifier:(id)arg2 articleListID:(id)arg3 name:(id)arg4;

@end

@interface FCRecordSource : NSObject <FCCacheCoordinatorDelegate, FCFetchCoordinatorDelegate, FCCacheFlushing>
{
    FCCloudKitConnection *_connection;
    FCKeyValueStore *_localStore;
    FCCacheCoordinator *_cacheCoordinator;
    FCFetchCoordinator *_fetchCoordinator;
    FCThreadSafeMutableDictionary *_fetchErrorsByKey;
}

+ (id)modificationDateForRecord:(id)arg1;
+ (id)changeTagForRecord:(id)arg1;
+ (id)recordWrapperIDForRecord:(id)arg1;
+ (long long)cacheLifetimeHintForRecord:(id)arg1;
+ (double)defaultFetchOperationMaximumCachedAge;
+ (unsigned long long)defaultFetchOperationCachePolicy;
+ (unsigned long long)dataSizeLimit;
+ (unsigned long long)storeVersion;
+ (id)storeFilename;
+ (Class)recordWrapperClass;
+ (id)desiredKeys;
+ (id)recordType;
@property(readonly, nonatomic) FCThreadSafeMutableDictionary *fetchErrorsByKey; // @synthesize fetchErrorsByKey=_fetchErrorsByKey;
@property(readonly, nonatomic) FCFetchCoordinator *fetchCoordinator; // @synthesize fetchCoordinator=_fetchCoordinator;
@property(readonly, nonatomic) FCCacheCoordinator *cacheCoordinator; // @synthesize cacheCoordinator=_cacheCoordinator;
@property(readonly, nonatomic) FCKeyValueStore *localStore; // @synthesize localStore=_localStore;
@property(readonly, nonatomic) FCCloudKitConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (id)_recordWrapperStreamFromRecordStream:(id)arg1 shouldDownloadAssets:(_Bool)arg2;
- (id)_fetchErrorForKey:(id)arg1;
- (id)_recordWrapperForKey:(id)arg1 withHoldTokens:(id)arg2;
- (id)_saveDictionariesInLocalStoreWithWriteLock:(id)arg1;
- (id)_saveDictionariesInLocalStore:(id)arg1;
- (id)saveRecordsInLocalStore:(id)arg1;
- (id)dictionariesFromRecords:(id)arg1;
- (id)recordWrapperIDFromRecordID:(id)arg1;
- (id)recordIDFromRecordWrapperID:(id)arg1;
- (id)dictionaryFromRecord:(id)arg1;
- (void)fetchCoordinator:(id)arg1 addFetchOperation:(id)arg2 context:(id)arg3;
- (id)fetchCoordinator:(id)arg1 fetchOperationForKeys:(id)arg2 context:(id)arg3 qualityOfService:(long long)arg4;
- (void)fetchCoordinator:(id)arg1 filterKeysToFetch:(id)arg2 context:(id)arg3;
- (void)cacheCoordinator:(id)arg1 flushKeysWithWriteLock:(id)arg2;
- (unsigned long long)cacheCoordinatorCurrentSizeWithReadLock:(id)arg1;
- (void)enableFlushing;
- (void)addQueryOperation:(id)arg1;
- (id)recordWrappersWithIDs:(id)arg1;
- (id)establishStreamOfRecordWrappersForCursor:(id)arg1 includeAssets:(_Bool)arg2;
- (id)establishStreamOfRecordWrappersForQuery:(id)arg1 includeAssets:(_Bool)arg2;
- (void)removeHoldInterestInRecordWrapperWithID:(id)arg1;
- (void)addHoldInterestInRecordWrapperWithID:(id)arg1;
- (id)fetchOperationForRecordWrapperWithID:(id)arg1;
- (id)fetchOperationForRecordWrappersWithIDs:(id)arg1;
- (id)initWithConnection:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCArticleListRecordSource : FCRecordSource
{
}

+ (unsigned long long)dataSizeLimit;
+ (unsigned long long)storeVersion;
+ (id)storeFilename;
+ (Class)recordWrapperClass;
+ (id)desiredKeys;
+ (id)recordType;
- (id)fetchOperationForArticleListID:(id)arg1;

@end

@interface FCRecordWrapper : NSObject
{
    FCInterestToken *_implicitHoldInterest;
    NSDictionary *_dictionary;
}

@property(retain, nonatomic) NSDictionary *dictionary; // @synthesize dictionary=_dictionary;
@property(retain, nonatomic) FCInterestToken *implicitHoldInterest; // @synthesize implicitHoldInterest=_implicitHoldInterest;
- (void).cxx_destruct;
- (id)description;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)addAssetHandlesToArray:(id)arg1;
@property(readonly, nonatomic) long long lifetimeHint;
- (_Bool)isOlderThanDate:(id)arg1;
- (_Bool)isNewerThanDate:(id)arg1;
- (_Bool)isOlderThan:(double)arg1;
- (_Bool)isYoungerThan:(double)arg1;
@property(readonly, nonatomic, getter=isDeletedFromCloud) _Bool deletedFromCloud;
@property(readonly, nonatomic) NSDate *lastFetchedDate;
@property(readonly, nonatomic) NSDate *modificationDate;
@property(readonly, nonatomic) NSString *recordChangeTag;
@property(readonly, nonatomic) NSString *recordWrapperID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface FCArticleListRecordWrapper : FCRecordWrapper
{
    NSArray *_articleIDs;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *articleIDs; // @synthesize articleIDs=_articleIDs;

@end

@interface FCArticleRecordSource : FCRecordSource
{
}

+ (id)modificationDateForRecord:(id)arg1;
+ (id)changeTagForRecord:(id)arg1;
+ (id)recordWrapperIDForRecord:(id)arg1;
+ (unsigned long long)dataSizeLimit;
+ (unsigned long long)storeVersion;
+ (id)storeFilename;
+ (Class)recordWrapperClass;
+ (id)desiredKeys;
+ (id)recordType;
- (id)saveFeedItemAndArticleRecords:(id)arg1;
- (id)saveArticleRecords:(id)arg1;
- (void)fetchArticleWithID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)fetchOperationForArticleWithID:(id)arg1;
- (id)fetchOperationForArticlesWithIDs:(id)arg1;

@end

@interface FCArticleRecordWrapper : FCRecordWrapper
{
    NSString *_articleID;
    NSString *_referencedArticleID;
    NSString *_title;
    NSString *_subtitle;
    NSString *_primaryAudience;
    NSString *_sourceChannelTagID;
    NSDate *_publishDate;
    NSNumber *_publisherArticleVersion;
    NSNumber *_backendArticleVersion;
    NSArray *_topicIDs;
    NSArray *_topicScores;
    FCAssetHandle *_thumbnailAssetHandle;
    NSNumber *_thumbnailMetadata;
    NSString *_excerpt;
    NSString *_shortExcerpt;
    NSString *_accessoryText;
    NSString *_contentURLString;
    NSString *_contentType;
    NSString *_clusterID;
    FCAssetHandle *_flintDocumentAssetHandle;
    NSArray *_flintFontResourceIDs;
    NSString *_videoURLString;
    NSNumber *_videoDuration;
    NSString *_templateJSON;
    NSString *_displayTopicTagID;
    NSNumber *_isFeatureCandidate;
    NSNumber *_isSponsored;
    NSArray *_iAdCategories;
    NSArray *_iAdKeywords;
    NSArray *_iAdSectionIDs;
    NSNumber *_isDraft;
    NSArray *_relatedArticleIDs;
    NSArray *_moreFromPublisherArticleIDs;
}

+ (id)defaultThumbnailKey;
+ (id)defaultThumbnailMetadataKey;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *allowedStorefrontIDs;
@property(readonly, nonatomic) NSArray *blockedStorefrontIDs;
- (void)addAssetHandlesToArray:(id)arg1;
@property(readonly, nonatomic) NSArray *moreFromPublisherArticleIDs; // @synthesize moreFromPublisherArticleIDs=_moreFromPublisherArticleIDs;
@property(readonly, nonatomic) NSArray *relatedArticleIDs; // @synthesize relatedArticleIDs=_relatedArticleIDs;
@property(readonly, nonatomic) NSNumber *isDraft; // @synthesize isDraft=_isDraft;
@property(readonly, nonatomic) NSArray *iAdSectionIDs; // @synthesize iAdSectionIDs=_iAdSectionIDs;
@property(readonly, nonatomic) NSArray *iAdKeywords; // @synthesize iAdKeywords=_iAdKeywords;
@property(readonly, nonatomic) NSArray *iAdCategories; // @synthesize iAdCategories=_iAdCategories;
@property(readonly, nonatomic) NSNumber *isSponsored; // @synthesize isSponsored=_isSponsored;
@property(readonly, nonatomic) NSNumber *isFeatureCandidate; // @synthesize isFeatureCandidate=_isFeatureCandidate;
@property(readonly, nonatomic) NSString *displayTopicTagID; // @synthesize displayTopicTagID=_displayTopicTagID;
@property(readonly, nonatomic) NSString *templateJSON; // @synthesize templateJSON=_templateJSON;
@property(readonly, nonatomic) NSNumber *videoDuration; // @synthesize videoDuration=_videoDuration;
@property(readonly, nonatomic) NSString *videoURLString; // @synthesize videoURLString=_videoURLString;
@property(readonly, nonatomic) NSArray *flintFontResourceIDs; // @synthesize flintFontResourceIDs=_flintFontResourceIDs;
@property(readonly, nonatomic) FCAssetHandle *flintDocumentAssetHandle; // @synthesize flintDocumentAssetHandle=_flintDocumentAssetHandle;
@property(readonly, nonatomic) NSString *clusterID; // @synthesize clusterID=_clusterID;
@property(readonly, nonatomic) NSString *contentType; // @synthesize contentType=_contentType;
@property(readonly, nonatomic) NSString *contentURLString; // @synthesize contentURLString=_contentURLString;
@property(readonly, nonatomic) NSString *accessoryText; // @synthesize accessoryText=_accessoryText;
@property(readonly, nonatomic) NSString *shortExcerpt; // @synthesize shortExcerpt=_shortExcerpt;
@property(readonly, nonatomic) NSString *excerpt; // @synthesize excerpt=_excerpt;
@property(readonly, nonatomic) NSNumber *thumbnailMetadata; // @synthesize thumbnailMetadata=_thumbnailMetadata;
@property(readonly, nonatomic) FCAssetHandle *thumbnailAssetHandle; // @synthesize thumbnailAssetHandle=_thumbnailAssetHandle;
@property(readonly, nonatomic) NSArray *topicScores; // @synthesize topicScores=_topicScores;
@property(readonly, nonatomic) NSArray *topicIDs; // @synthesize topicIDs=_topicIDs;
@property(readonly, nonatomic) NSNumber *backendArticleVersion; // @synthesize backendArticleVersion=_backendArticleVersion;
@property(readonly, nonatomic) NSNumber *publisherArticleVersion; // @synthesize publisherArticleVersion=_publisherArticleVersion;
@property(readonly, nonatomic) NSDate *publishDate; // @synthesize publishDate=_publishDate;
@property(readonly, nonatomic) NSString *sourceChannelTagID; // @synthesize sourceChannelTagID=_sourceChannelTagID;
@property(readonly, nonatomic) NSString *primaryAudience; // @synthesize primaryAudience=_primaryAudience;
@property(readonly, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic) NSString *referencedArticleID; // @synthesize referencedArticleID=_referencedArticleID;
@property(readonly, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;

@end

@interface FCArticlesFeedDescriptor : FCArticleIDFeedDescriptor
{
    NSArray *_articleIDs;
}

@property(readonly, nonatomic) NSArray *articleIDs; // @synthesize articleIDs=_articleIDs;
- (void).cxx_destruct;
- (id)streamOfLatestArticleIDs;
- (id)name;
- (id)initWithContext:(id)arg1 identifier:(id)arg2 articleIDs:(id)arg3;

@end

@interface FCAssertionHandler : NSAssertionHandler
{
}

+ (id)currentHandler;
- (void)handleFailureWithLocation:(id)arg1 file:(id)arg2 lineNumber:(long long)arg3 description:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleFailureInFunction:(id)arg1 file:(id)arg2 lineNumber:(long long)arg3 description:(id)arg4;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 file:(id)arg3 lineNumber:(long long)arg4 description:(id)arg5;

@end

@interface FCAssetHandle : NSObject
{
    NSString *_filePath;
    NSError *_downloadError;
    NSURL *_remoteURL;
    id <FCAssetHandleDelegate> _delegate;
    FCInterestToken *_holdToken;
    NSString *_assetKey;
    FCAssetTransformer *_transformer;
    long long _lifetimeHint;
    id <FCOperationCanceling> _fetchOperation;
    unsigned long long _fetchInterest;
    NSObject<OS_dispatch_group> *_fetchGroup;
    FCMutexLock *_stateMutex;
}

@property(retain, nonatomic) FCMutexLock *stateMutex; // @synthesize stateMutex=_stateMutex;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *fetchGroup; // @synthesize fetchGroup=_fetchGroup;
@property(nonatomic) unsigned long long fetchInterest; // @synthesize fetchInterest=_fetchInterest;
@property(retain, nonatomic) id <FCOperationCanceling> fetchOperation; // @synthesize fetchOperation=_fetchOperation;
@property(nonatomic) long long lifetimeHint; // @synthesize lifetimeHint=_lifetimeHint;
@property(retain, nonatomic) FCAssetTransformer *transformer; // @synthesize transformer=_transformer;
@property(copy, nonatomic) NSString *assetKey; // @synthesize assetKey=_assetKey;
@property(retain, nonatomic) FCInterestToken *holdToken; // @synthesize holdToken=_holdToken;
@property(nonatomic) __weak id <FCAssetHandleDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSURL *remoteURL; // @synthesize remoteURL=_remoteURL;
@property(retain) NSError *downloadError; // @synthesize downloadError=_downloadError;
@property(copy) NSString *filePath; // @synthesize filePath=_filePath;
- (void).cxx_destruct;
- (void)_completeFetchWithFilePath:(id)arg1 cancelled:(_Bool)arg2 error:(id)arg3;
- (void)_removeFetchInterest;
@property(readonly) NSString *uniqueKey;
@property(readonly) NSURL *streamingURL;
- (id)downloadIfNeededWithGroup:(id)arg1;
- (id)downloadIfNeededWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithFilePath:(id)arg1;

@end

@interface FCAssetManager : NSObject <FCAssetHandleDelegate, FCCacheCoordinatorDelegate, FCCacheFlushing>
{
    FCKeyValueStore *_keyValueStore;
    FCAssetStore *_assetStore;
    FCCacheCoordinator *_cacheCoordinator;
    NSMapTable *_assetHandles;
    FCMutexLock *_assetHandlesLock;
    NSURLSession *_URLSession;
}

+ (id)sharedURLSession;
+ (id)sharedInstance;
@property(retain, nonatomic) NSURLSession *URLSession; // @synthesize URLSession=_URLSession;
@property(retain, nonatomic) FCMutexLock *assetHandlesLock; // @synthesize assetHandlesLock=_assetHandlesLock;
@property(retain, nonatomic) NSMapTable *assetHandles; // @synthesize assetHandles=_assetHandles;
@property(retain, nonatomic) FCCacheCoordinator *cacheCoordinator; // @synthesize cacheCoordinator=_cacheCoordinator;
@property(retain, nonatomic) FCAssetStore *assetStore; // @synthesize assetStore=_assetStore;
@property(retain, nonatomic) FCKeyValueStore *keyValueStore; // @synthesize keyValueStore=_keyValueStore;
- (void).cxx_destruct;
- (id)_assetKeyForRemoteURL:(id)arg1;
- (void)enableFlushing;
- (void)cacheCoordinator:(id)arg1 flushKeysWithWriteLock:(id)arg2;
- (unsigned long long)cacheCoordinatorCurrentSizeWithReadLock:(id)arg1;
- (id)fetchFileForAssetHandle:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)assetHandleForRemoteURL:(id)arg1 lifetimeHint:(long long)arg2 transformer:(id)arg3;
- (id)assetHandleForRemoteURL:(id)arg1 lifetimeHint:(long long)arg2;
- (id)initWithName:(id)arg1 directory:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCAssetStore : NSObject
{
    NSString *_directoryPath;
    NSString *_preferredExtension;
    NSMutableDictionary *_fileURLsByKey;
}

@property(copy, nonatomic) NSMutableDictionary *fileURLsByKey; // @synthesize fileURLsByKey=_fileURLsByKey;
@property(copy, nonatomic) NSString *preferredExtension; // @synthesize preferredExtension=_preferredExtension;
@property(copy, nonatomic) NSString *directoryPath; // @synthesize directoryPath=_directoryPath;
- (void).cxx_destruct;
- (id)_keyForFilePath:(id)arg1;
- (id)_filePathForKey:(id)arg1;
- (id)allKeys;
- (unsigned long long)storeSize;
- (id)fileURLForKey:(id)arg1;
- (id)filePathForKey:(id)arg1;
- (_Bool)removeAllFiles;
- (_Bool)removeFileWithKey:(id)arg1;
- (id)copyData:(id)arg1 withKey:(id)arg2;
- (id)moveFileAtPath:(id)arg1 withKey:(id)arg2;
- (id)copyFileAtPath:(id)arg1 withKey:(id)arg2;
- (id)initWithDirectoryAtPath:(id)arg1 preferredAssetPathExtension:(id)arg2;

@end

@interface FCAssetTransformer : NSObject
{
}

- (_Bool)transformAssetDataFromFilePath:(id)arg1 toFilePath:(id)arg2 error:(id *)arg3;

@end

@interface FCAssetsFetchOperation : FCFetchOperation
{
    NSArray *_assetHandles;
    NSArray *_assetDownloadOperations;
}

@property(copy, nonatomic) NSArray *assetDownloadOperations; // @synthesize assetDownloadOperations=_assetDownloadOperations;
@property(copy, nonatomic) NSArray *assetHandles; // @synthesize assetHandles=_assetHandles;
- (void).cxx_destruct;
- (void)cancel;
- (void)beginExecuting;
- (id)initWithAssetHandle:(id)arg1;
- (id)initWithAssetHandles:(id)arg1;

@end

@interface FCAsyncBlockOperation : NSOperation
{
    _Bool _executing;
    _Bool _finished;
    CDUnknownBlockType _block;
}

+ (id)asyncBlockOperationWithMainThreadBlock:(CDUnknownBlockType)arg1;
+ (id)asyncBlockOperationWithBlock:(CDUnknownBlockType)arg1;
@property(readonly, copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;
- (void)start;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (_Bool)isAsynchronous;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

@end

@interface FCAsyncOnceOperation : NSObject
{
    _Bool _finished;
    CDUnknownBlockType _workBlock;
    unsigned long long _interest;
    NSObject<OS_dispatch_group> *_activeGroup;
    id <FCOperationCanceling> _activeCancelHandler;
    FCMutexLock *_lock;
}

@property(retain, nonatomic) FCMutexLock *lock; // @synthesize lock=_lock;
@property(retain, nonatomic) id <FCOperationCanceling> activeCancelHandler; // @synthesize activeCancelHandler=_activeCancelHandler;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *activeGroup; // @synthesize activeGroup=_activeGroup;
@property(nonatomic) unsigned long long interest; // @synthesize interest=_interest;
@property(nonatomic) _Bool finished; // @synthesize finished=_finished;
@property(copy, nonatomic) CDUnknownBlockType workBlock; // @synthesize workBlock=_workBlock;
- (void).cxx_destruct;
- (id)executeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

@end

@interface FCAsyncSerialQueue : NSObject
{
    NSOperationQueue *_serialOperationQueue;
}

@property(retain, nonatomic) NSOperationQueue *serialOperationQueue; // @synthesize serialOperationQueue=_serialOperationQueue;
- (void).cxx_destruct;
- (void)cancelAllBlocks;
- (void)enqueueBlockForMainThread:(CDUnknownBlockType)arg1;
- (void)enqueueBlock:(CDUnknownBlockType)arg1;
- (id)init;

@end

@interface FCAsyncSetupStream : NSObject <FCQueryBasedStream, FCStreaming>
{
    CDUnknownBlockType _setupBlock;
    id <FCStreaming> _childStream;
    _Bool _setupComplete;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) CKQueryCursor *cursor;
@property(readonly, nonatomic) NSArray *desiredKeys;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithAsyncSetupBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCBlobFileCache : NSObject
{
    long long _countLimit;
    NSURL *_cacheDirectory;
    NSString *_identifier;
    long long _currentSize;
    NSObject<OS_dispatch_queue> *_storageQueue;
    NSMutableOrderedSet *_keys;
    NSMutableDictionary *_keysToItems;
}

+ (void)clearCacheForIdentifier:(id)arg1;
@property(retain, nonatomic) NSMutableDictionary *keysToItems; // @synthesize keysToItems=_keysToItems;
@property(retain, nonatomic) NSMutableOrderedSet *keys; // @synthesize keys=_keys;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *storageQueue; // @synthesize storageQueue=_storageQueue;
@property(nonatomic) long long currentSize; // @synthesize currentSize=_currentSize;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSURL *cacheDirectory; // @synthesize cacheDirectory=_cacheDirectory;
@property long long countLimit; // @synthesize countLimit=_countLimit;
- (void).cxx_destruct;
- (_Bool)_removeFileWithKey:(id)arg1 error:(id *)arg2;
- (void)_removeItemInMemoryForKey:(id)arg1;
- (void)_insertItemInMemory:(id)arg1 forKey:(id)arg2;
- (void)_touchItemForKey:(id)arg1;
- (void)_clearCache;
- (void)_enforceCacheSize;
- (void)_enqueueCacheSizeEnforcement;
- (void)_loadItemsFromCacheState;
- (void)clearCache;
- (void)enforceCacheSize;
- (void)removeDataForKey:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)hasDataForKey:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)dataForKey:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setData:(id)arg1 forKey:(id)arg2 callbackQueue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)initWithIdentifier:(id)arg1 error:(id *)arg2;
- (id)init;

@end

@interface FCBlobFileCacheItem : NSObject
{
    NSURL *_url;
    NSDate *_lastModified;
}

@property(copy, nonatomic) NSDate *lastModified; // @synthesize lastModified=_lastModified;
@property(copy, nonatomic) NSURL *url; // @synthesize url=_url;
- (void).cxx_destruct;

@end

@interface FCBundleLookupClass : NSObject
{
}

@end

@interface FCCKDatabase : NSObject
{
    _Bool _protectionEnabled;
    _Bool _hasBeenRateLimited;
    _Bool _preferAnonymousRequests;
    _Bool _ready;
    id <FCCKDatabaseDelegate> _delegate;
    NSArray *_middleware;
    NSString *_containerIdentifier;
    FCKeychainStore *_keychainStore;
    CKDatabase *_database;
    NSObject<OS_dispatch_queue> *_queue;
    NSArray *_startUpMiddleware;
    NSArray *_operationMiddleware;
    NSArray *_recordMiddleware;
    NSMutableArray *_pendingOperations;
    long long _status;
    CDUnknownBlockType _startUpCompletion;
}

+ (_Bool)verifySentinel:(id)arg1 withProtectionKey:(id)arg2 error:(id *)arg3;
+ (id)_createSentinelRecordWithProtectionKey:(id)arg1 error:(id *)arg2;
+ (id)_fc_recordZoneToTypeMap;
+ (id)_fc_protectionSchema;
+ (void)fc_resetPersistentMigrationStatus;
+ (id)fc_contentDatabaseMiddleware;
+ (id)fc_privateDatabaseMiddlewareWithKeychainStore:(id)arg1 options:(long long)arg2;
+ (id)fc_databaseForContentCloudKitDatabase:(id)arg1;
+ (id)fc_databaseForPrivateCloudKitDatabase:(id)arg1 keychainStore:(id)arg2;
@property(copy, nonatomic) CDUnknownBlockType startUpCompletion; // @synthesize startUpCompletion=_startUpCompletion;
@property(nonatomic) long long status; // @synthesize status=_status;
@property(nonatomic, getter=isReady) _Bool ready; // @synthesize ready=_ready;
@property(retain, nonatomic) NSMutableArray *pendingOperations; // @synthesize pendingOperations=_pendingOperations;
@property(retain, nonatomic) NSArray *recordMiddleware; // @synthesize recordMiddleware=_recordMiddleware;
@property(retain, nonatomic) NSArray *operationMiddleware; // @synthesize operationMiddleware=_operationMiddleware;
@property(retain, nonatomic) NSArray *startUpMiddleware; // @synthesize startUpMiddleware=_startUpMiddleware;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) CKDatabase *database; // @synthesize database=_database;
@property _Bool preferAnonymousRequests; // @synthesize preferAnonymousRequests=_preferAnonymousRequests;
@property(readonly, nonatomic) _Bool hasBeenRateLimited; // @synthesize hasBeenRateLimited=_hasBeenRateLimited;
@property(getter=isProtectionEnabled) _Bool protectionEnabled; // @synthesize protectionEnabled=_protectionEnabled;
@property(retain, nonatomic) FCKeychainStore *keychainStore; // @synthesize keychainStore=_keychainStore;
@property(retain, nonatomic) NSString *containerIdentifier; // @synthesize containerIdentifier=_containerIdentifier;
@property(retain, nonatomic) NSArray *middleware; // @synthesize middleware=_middleware;
@property(nonatomic) __weak id <FCCKDatabaseDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)_isEnabled;
- (void)_cancelOperation:(id)arg1;
- (id)_mapObjects:(id)arg1 withRecordMiddlewareBlock:(CDUnknownBlockType)arg2;
- (id)_mapZones:(id)arg1 client:(_Bool)arg2;
- (id)_serverZone:(id)arg1;
- (id)_clientZone:(id)arg1;
- (id)_mapRecords:(id)arg1 client:(_Bool)arg2;
- (id)_serverRecord:(id)arg1;
- (id)_clientRecord:(id)arg1;
- (id)_mapRecordZoneIDs:(id)arg1 client:(_Bool)arg2;
- (id)_clientRecordZoneID:(id)arg1;
- (id)_serverRecordZoneID:(id)arg1;
- (id)_mapRecordIDs:(id)arg1 client:(_Bool)arg2;
- (id)_clientRecordID:(id)arg1;
- (id)_serverRecordID:(id)arg1;
- (void)_cacheMiddleware;
- (void)_preflightModifySubscriptionOperation:(id)arg1;
- (void)_preflightFetchSubscriptionOperation:(id)arg1;
- (void)_preflightZoneIDsInModifyZonesOperation:(id)arg1;
- (void)_preflightZonesIDsInFetchZonesOperation:(id)arg1;
- (void)_preflightRecordsInQueryOperation:(id)arg1;
- (void)_preflightRecordsInFetchOperation:(id)arg1;
- (void)_preflightRecordsInChangesOperation:(id)arg1;
- (void)_preflightRecordsInModifyOperation:(id)arg1;
- (_Bool)_preflightOperation:(id)arg1;
- (void)q_cancelPendingOperations;
- (void)q_resumePendingOperations;
- (void)_addOperation:(id)arg1;
- (void)q_finishStartUpWithResult:(long long)arg1;
- (void)q_startUpWithMiddleware:(id)arg1;
- (void)_performStartUpWithCompletion:(CDUnknownBlockType)arg1;
- (id)serverSubscriptonFromSubscription:(id)arg1;
- (void)createSentinelWithProtectionKey:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchSentinel:(CDUnknownBlockType)arg1;
- (void)operationWasRateLimitedWithError:(id)arg1;
- (id)notificationFromRemoteNotificationDictionary:(id)arg1;
- (void)addOperation:(id)arg1;
- (id)initWithDatabase:(id)arg1 middleware:(id)arg2;
- (id)initWithDatabase:(id)arg1 middleware:(id)arg2 startUp:(_Bool)arg3;
- (void)deleteSubscriptionWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveSubscription:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchAllSubscriptionsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)deleteRecordZoneWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveRecordZone:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchRecordZoneWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)deleteRecordWithID:(id)arg1 savePolicy:(long long)arg2 zoneBusyRetryCount:(unsigned long long)arg3 zoneBusyRetryMax:(unsigned long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)deleteRecordWithID:(id)arg1 savePolicy:(long long)arg2 retryWhenZoneBusy:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)deleteRecordsWithIDs:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)deleteRecordWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)performRecordIDsQuery:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)performQuery:(id)arg1 inZoneWithID:(id)arg2 desiredKeys:(id)arg3 resultsLimit:(unsigned long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)performQuery:(id)arg1 inZoneWithID:(id)arg2 desiredKeys:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)performQuery:(id)arg1 desiredKeys:(id)arg2 resultsLimit:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)performQuery:(id)arg1 desiredKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)saveRecords:(id)arg1 savePolicy:(long long)arg2 progressHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)saveRecord:(id)arg1 savePolicy:(long long)arg2 zoneBusyRetryCount:(unsigned long long)arg3 zoneBusyRetryMax:(unsigned long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)saveRecords:(id)arg1 progressHandler:(CDUnknownBlockType)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)saveRecord:(id)arg1 savePolicy:(long long)arg2 retryWhenZoneBusy:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)saveRecord:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchRecordsWithIDs:(id)arg1 desiredKeys:(id)arg2 qualityOfService:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)fetchRecordsWithIDs:(id)arg1 desiredKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchRecordWithID:(id)arg1 desiredKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchRecordWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface FCCKDatabaseAnonymityMiddleware : NSObject <FCCKDatabaseOperationMiddleware>
{
}

- (void)database:(id)arg1 didCancelOperation:(id)arg2;
- (long long)database:(id)arg1 willEnqueueOperation:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseLoggingMiddleware : NSObject <FCCKDatabaseOperationMiddleware>
{
}

- (void)_addLoggersToOperation:(id)arg1 database:(id)arg2;
- (void)database:(id)arg1 didCancelOperation:(id)arg2;
- (long long)database:(id)arg1 willEnqueueOperation:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseOfflineMiddleware : NSObject <FCCKDatabaseOperationMiddleware>
{
}

- (void)database:(id)arg1 didCancelOperation:(id)arg2;
- (long long)database:(id)arg1 willEnqueueOperation:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseProtectedZoneMigrator : NSObject <FCCKDatabaseZoneMigrationStartUpMiddlewareMigrator>
{
    NSNumber *_databaseProtectionRequirement;
    NSString *_userDefaultsRequirement;
    FCCKDatabaseProtectionMiddleware *_sourceWare;
    FCCKDatabaseProtectionMiddleware *_targetWare;
}

@property(retain, nonatomic) FCCKDatabaseProtectionMiddleware *targetWare; // @synthesize targetWare=_targetWare;
@property(retain, nonatomic) FCCKDatabaseProtectionMiddleware *sourceWare; // @synthesize sourceWare=_sourceWare;
@property(retain, nonatomic) NSString *userDefaultsRequirement; // @synthesize userDefaultsRequirement=_userDefaultsRequirement;
@property(retain, nonatomic) NSNumber *databaseProtectionRequirement; // @synthesize databaseProtectionRequirement=_databaseProtectionRequirement;
- (void).cxx_destruct;
- (_Bool)_enabledForDatabase:(id)arg1;
- (void)migratorDidFinishMigration:(id)arg1 withDatabase:(id)arg2 result:(long long)arg3;
- (id)migrateRecord:(id)arg1 forZoneMigrator:(id)arg2 database:(id)arg3 error:(id *)arg4;
- (_Bool)shouldMigrateRecordType:(id)arg1 inZoneWithBaseName:(id)arg2 zoneSuffix:(id)arg3 forZoneMigrator:(id)arg4 database:(id)arg5;
- (id)suffixesFoRecordZoneNamed:(id)arg1 zoneMigrator:(id)arg2 database:(id)arg3;
@property(readonly, nonatomic) NSString *targetRecordZoneNameSuffix;
@property(readonly, nonatomic) NSString *sourceRecordZoneNameSuffix;
- (id)initWithSourceRecordMiddleware:(id)arg1 targetRecordMiddleware:(id)arg2;

@end

@interface FCCKDatabaseProtectionMiddleware : NSObject <FCCKDatabaseRecordMiddleware>
{
    _Bool _useCKProtection;
    NSString *_zoneSuffix;
    NSDictionary *_protectionSchema;
    FCKeychainStore *_keychainStore;
}

+ (id)decryptedRecordNameWithName:(id)arg1 protectionKey:(id)arg2 error:(id *)arg3;
+ (id)encryptedRecordNameWithName:(id)arg1 protectionKey:(id)arg2 error:(id *)arg3;
@property(nonatomic) _Bool useCKProtection; // @synthesize useCKProtection=_useCKProtection;
@property(retain, nonatomic) FCKeychainStore *keychainStore; // @synthesize keychainStore=_keychainStore;
@property(retain, nonatomic) NSDictionary *protectionSchema; // @synthesize protectionSchema=_protectionSchema;
@property(retain, nonatomic) NSString *zoneSuffix; // @synthesize zoneSuffix=_zoneSuffix;
- (void).cxx_destruct;
- (void)_performIfEnabledForDatabase:(id)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)_isEnabledForDatabase:(id)arg1;
- (id)_ck_decryptData:(id)arg1;
- (id)_fc_decryptData:(id)arg1;
- (id)_removeProtectionSuffxFromName:(id)arg1;
- (id)_zoneIDRemovingProtectionSuffixFromZoneID:(id)arg1;
- (_Bool)_decryptRecordID:(id)arg1;
- (_Bool)_decryptRecordIDInRecord:(id)arg1;
- (_Bool)_decryptRecord:(id)arg1;
- (id)_fc_encryptData:(id)arg1;
- (id)_ck_encryptData:(id)arg1;
- (_Bool)_encryptField:(id)arg1 inRecord:(id)arg2;
- (_Bool)_encryptField:(id)arg1 withRequirement:(id)arg2 inRecord:(id)arg3;
- (id)_zoneIDaddingProtectionSuffixToZoneID:(id)arg1;
- (_Bool)_encryptRecordID:(id)arg1;
- (_Bool)_encryptRecord:(id)arg1 withSchema:(id)arg2;
@property(readonly) NSData *protectionKey;
- (id)_recordsSchema;
- (id)serverRecordZone:(id)arg1 inDatabase:(id)arg2;
- (id)clientRecordZone:(id)arg1 inDatabae:(id)arg2;
- (id)clientRecord:(id)arg1 inDatabase:(id)arg2;
- (id)serverRecord:(id)arg1 inDatabase:(id)arg2;
- (id)clientRecordID:(id)arg1 inDatabase:(id)arg2;
- (id)serverRecordID:(id)arg1 inDatabase:(id)arg2;
- (id)clientRecordZoneID:(id)arg1 inDatabase:(id)arg2;
- (id)serverRecordZoneID:(id)arg1 inDatabase:(id)arg2;
- (id)protectedZoneNameFromZoneName:(id)arg1;
- (id)initForCKProtectedDataWithProtectionSchema:(id)arg1;
- (id)initWithKeychainStore:(id)arg1 protectionSchema:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseProtectionStarUpMiddleware : NSObject <FCCKDatabaseStartUpMiddleware>
{
    FCKeychainStore *_keychainStore;
}

+ (_Bool)_isSentinelConflictError:(id)arg1;
+ (_Bool)_isSentinelMissingError:(id)arg1;
@property(retain, nonatomic) FCKeychainStore *keychainStore; // @synthesize keychainStore=_keychainStore;
- (void).cxx_destruct;
- (void)_createSentinelForDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_verifySentinel:(id)arg1 inDatabase:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)performStartUpForDatabase:(id)arg1 cloudKitDatabase:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)initWithKeychainStore:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseQualityOfServiceUpgradingMiddleware : NSObject <FCCKDatabaseOperationMiddleware>
{
}

- (void)database:(id)arg1 didCancelOperation:(id)arg2;
- (long long)database:(id)arg1 willEnqueueOperation:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseRecordVersionMiddleware : NSObject <FCCKDatabaseRecordMiddleware, FCCKDatabaseOperationMiddleware>
{
}

- (void)database:(id)arg1 didCancelOperation:(id)arg2;
- (long long)database:(id)arg1 willEnqueueOperation:(id)arg2;
- (id)clientRecordZone:(id)arg1 inDatabae:(id)arg2;
- (id)serverRecordZone:(id)arg1 inDatabase:(id)arg2;
- (id)serverRecord:(id)arg1 inDatabase:(id)arg2;
- (id)clientRecord:(id)arg1 inDatabase:(id)arg2;
- (id)clientRecordZoneID:(id)arg1 inDatabase:(id)arg2;
- (id)serverRecordZoneID:(id)arg1 inDatabase:(id)arg2;
- (id)clientRecordID:(id)arg1 inDatabase:(id)arg2;
- (id)serverRecordID:(id)arg1 inDatabase:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseUserAuthenticationMiddleware : NSObject <FCCKDatabaseOperationMiddleware>
{
    _Bool _privateDataSyncingEnabled;
}

@property(nonatomic, getter=isPrivateDataSyncingEnabled) _Bool privateDataSyncingEnabled; // @synthesize privateDataSyncingEnabled=_privateDataSyncingEnabled;
- (void)database:(id)arg1 didCancelOperation:(id)arg2;
- (long long)database:(id)arg1 willEnqueueOperation:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKDatabaseZoneMigrationStartUpMiddleware : NSObject <FCCKDatabaseStartUpMiddleware>
{
    _Bool _isProtected;
    NSArray *_migrators;
    NSDictionary *_zoneToRecordTypesMap;
    NSMutableSet *_createdZones;
}

+ (_Bool)_isServerChangedError:(id)arg1;
+ (_Bool)_isConflictError:(id)arg1;
+ (_Bool)_isNetworkingError:(id)arg1;
@property(retain, nonatomic) NSMutableSet *createdZones; // @synthesize createdZones=_createdZones;
@property(readonly, nonatomic) NSDictionary *zoneToRecordTypesMap; // @synthesize zoneToRecordTypesMap=_zoneToRecordTypesMap;
@property(readonly, nonatomic) NSArray *migrators; // @synthesize migrators=_migrators;
@property(nonatomic) _Bool isProtected; // @synthesize isProtected=_isProtected;
- (void).cxx_destruct;
- (void)_createZones:(id)arg1 inCloudKitDatabase:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_uncreatedZonesInRecords:(id)arg1;
- (id)_migratorZoneSuffixesForZoneName:(id)arg1 database:(id)arg2;
- (void)_resolveConflictsForRecords:(id)arg1 recordIDsToDelete:(id)arg2 migrators:(id)arg3 database:(id)arg4 inError:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)_migrateRecords:(id)arg1 withMigrators:(id)arg2 database:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_saveMigratedRecords:(id)arg1 recordIDsToDelete:(id)arg2 migrators:(id)arg3 database:(id)arg4 cloudKitDatabase:(id)arg5 remainingRetryCount:(long long)arg6 completion:(CDUnknownBlockType)arg7;
- (void)_migrateAndUpdateRecords:(id)arg1 withMigrators:(id)arg2 database:(id)arg3 cloudKitDatabase:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_migrateRecordTyped:(id)arg1 inZoneWithName:(id)arg2 suffix:(id)arg3 database:(id)arg4 cloudKitDatabase:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)_migrateRecordTypes:(id)arg1 inMigratorZoneWithName:(id)arg2 suffix:(id)arg3 database:(id)arg4 cloudKitDatabase:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)_migrateRecordTypes:(id)arg1 forZoneName:(id)arg2 suffixes:(id)arg3 database:(id)arg4 cloudKitDatabase:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)_migrateZonesNames:(id)arg1 inZoneToRecordTypesMap:(id)arg2 database:(id)arg3 cloudKitDatabase:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (id)_migratorsForRecordType:(id)arg1 inZoneWithName:(id)arg2 suffix:(id)arg3 database:(id)arg4;
- (void)performStartUpForDatabase:(id)arg1 cloudKitDatabase:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)initWithProtectedZonesToRecordTypesMap:(id)arg1 migrators:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCOperation : NSOperation
{
    _Bool _executing;
    _Bool _finished;
    _Bool _childOperationsCancelled;
    _Bool _childOperationsFinished;
    NSString *_operationID;
    NSMutableArray *_childOperations;
    FCMutexLock *_childOperationsLock;
    double _operationStartTime;
    double _operationEndTime;
}

@property(nonatomic) double operationEndTime; // @synthesize operationEndTime=_operationEndTime;
@property(nonatomic) double operationStartTime; // @synthesize operationStartTime=_operationStartTime;
@property(retain, nonatomic) FCMutexLock *childOperationsLock; // @synthesize childOperationsLock=_childOperationsLock;
@property(nonatomic) _Bool childOperationsFinished; // @synthesize childOperationsFinished=_childOperationsFinished;
@property(nonatomic) _Bool childOperationsCancelled; // @synthesize childOperationsCancelled=_childOperationsCancelled;
@property(retain, nonatomic) NSMutableArray *childOperations; // @synthesize childOperations=_childOperations;
@property(readonly, copy, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
- (void).cxx_destruct;
- (void)associateChildOperation:(id)arg1;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (void)start;
- (_Bool)validateOperation;
- (void)cancel;
- (_Bool)isAsynchronous;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (id)init;

@end

@interface FCCKFeedQueryOperation : FCOperation
{
    FCCKDatabase *_database;
    NSArray *_feedRequests;
    unsigned long long _resultsLimit;
    NSArray *_desiredKeys;
    long long _sortingFunction;
    long long _queryPriority;
    NSArray *_articleKeysMappingToTag;
    CDUnknownBlockType _queryCompletionHandler;
    NSArray *_resultFeedItemAndArticleRecords;
    NSArray *_resultTagRecords;
    NSArray *_resultFeedResponses;
    NSError *_resultError;
}

@property(retain, nonatomic) NSError *resultError; // @synthesize resultError=_resultError;
@property(retain, nonatomic) NSArray *resultFeedResponses; // @synthesize resultFeedResponses=_resultFeedResponses;
@property(retain, nonatomic) NSArray *resultTagRecords; // @synthesize resultTagRecords=_resultTagRecords;
@property(retain, nonatomic) NSArray *resultFeedItemAndArticleRecords; // @synthesize resultFeedItemAndArticleRecords=_resultFeedItemAndArticleRecords;
@property(copy, nonatomic) CDUnknownBlockType queryCompletionHandler; // @synthesize queryCompletionHandler=_queryCompletionHandler;
@property(copy, nonatomic) NSArray *articleKeysMappingToTag; // @synthesize articleKeysMappingToTag=_articleKeysMappingToTag;
@property(nonatomic) long long queryPriority; // @synthesize queryPriority=_queryPriority;
@property(nonatomic) long long sortingFunction; // @synthesize sortingFunction=_sortingFunction;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(copy, nonatomic) NSArray *feedRequests; // @synthesize feedRequests=_feedRequests;
@property(retain, nonatomic) FCCKDatabase *database; // @synthesize database=_database;
- (void).cxx_destruct;
- (id)_feedRelativeDictionaryFromResultsArray:(id)arg1;
- (void)_processResultsRecord:(id)arg1 feedItemAndArticleRecords:(id)arg2 tagRecords:(id)arg3;
- (id)_desiredKeysForResultsRecord;
- (id)_predicateForPerFeedFieldName:(id)arg1 key:(id)arg2 defaultValue:(id)arg3;
- (id)_constructFeedQuery;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;

@end

@interface FCCKFeedRequest : NSObject
{
    NSString *_feedID;
    NSData *_cursor;
    unsigned long long _orderLimit;
    unsigned long long _softResultsLimit;
    unsigned long long _hardResultsLimit;
}

@property(nonatomic) unsigned long long hardResultsLimit; // @synthesize hardResultsLimit=_hardResultsLimit;
@property(nonatomic) unsigned long long softResultsLimit; // @synthesize softResultsLimit=_softResultsLimit;
@property(nonatomic) unsigned long long orderLimit; // @synthesize orderLimit=_orderLimit;
@property(copy, nonatomic) NSData *cursor; // @synthesize cursor=_cursor;
@property(copy, nonatomic) NSString *feedID; // @synthesize feedID=_feedID;
- (void).cxx_destruct;
- (id)description;
- (id)init;

@end

@interface FCCKFeedResponse : NSObject
{
    _Bool _reachedEnd;
    _Bool _reachedOrderLimit;
    _Bool _wasDropped;
    NSString *_feedID;
    NSArray *_feedItemAndArticleRecords;
    unsigned long long _topOrder;
    unsigned long long _bottomOrder;
    NSData *_cursor;
}

@property(nonatomic) _Bool wasDropped; // @synthesize wasDropped=_wasDropped;
@property(copy, nonatomic) NSData *cursor; // @synthesize cursor=_cursor;
@property(nonatomic) unsigned long long bottomOrder; // @synthesize bottomOrder=_bottomOrder;
@property(nonatomic) unsigned long long topOrder; // @synthesize topOrder=_topOrder;
@property(nonatomic) _Bool reachedOrderLimit; // @synthesize reachedOrderLimit=_reachedOrderLimit;
@property(nonatomic) _Bool reachedEnd; // @synthesize reachedEnd=_reachedEnd;
@property(copy, nonatomic) NSArray *feedItemAndArticleRecords; // @synthesize feedItemAndArticleRecords=_feedItemAndArticleRecords;
@property(copy, nonatomic) NSString *feedID; // @synthesize feedID=_feedID;
- (void).cxx_destruct;
- (id)description;

@end

@interface FCCKFetchRecordChangesOperation : FCOperation
{
    _Bool _fetchAllChanges;
    _Bool _moreChangesToFetch;
    FCCKDatabase *_database;
    NSArray *_desiredKeys;
    CDUnknownBlockType _finishedBlock;
    CKRecordZoneID *_recordZoneID;
    CKServerChangeToken *_serverChangeToken;
    NSMutableDictionary *_allChangedRecordsByID;
    NSMutableSet *_allDeletedRecordIDs;
    NSError *_error;
}

@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) _Bool moreChangesToFetch; // @synthesize moreChangesToFetch=_moreChangesToFetch;
@property(retain, nonatomic) NSMutableSet *allDeletedRecordIDs; // @synthesize allDeletedRecordIDs=_allDeletedRecordIDs;
@property(retain, nonatomic) NSMutableDictionary *allChangedRecordsByID; // @synthesize allChangedRecordsByID=_allChangedRecordsByID;
@property(retain, nonatomic) CKServerChangeToken *serverChangeToken; // @synthesize serverChangeToken=_serverChangeToken;
@property(retain, nonatomic) CKRecordZoneID *recordZoneID; // @synthesize recordZoneID=_recordZoneID;
@property(copy, nonatomic) CDUnknownBlockType finishedBlock; // @synthesize finishedBlock=_finishedBlock;
@property(nonatomic) _Bool fetchAllChanges; // @synthesize fetchAllChanges=_fetchAllChanges;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(retain, nonatomic) FCCKDatabase *database; // @synthesize database=_database;
- (void).cxx_destruct;
- (void)_continueFetchingRecords;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;
- (id)initWithRecordZoneID:(id)arg1 previousServerChangeToken:(id)arg2;

@end

@interface FCCKRecordZone : NSObject
{
    _Bool _zoneReady;
    CKRecordZoneID *_recordZoneID;
    FCCKDatabase *_database;
    id <FCCKRecordZoneDelegate> _delegate;
}

@property(getter=isZoneReady) _Bool zoneReady; // @synthesize zoneReady=_zoneReady;
@property(nonatomic) __weak id <FCCKRecordZoneDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) FCCKDatabase *database; // @synthesize database=_database;
@property(retain, nonatomic) CKRecordZoneID *recordZoneID; // @synthesize recordZoneID=_recordZoneID;
- (void).cxx_destruct;
- (id)description;
- (void)fetchChangesWithChangeToken:(id)arg1 desiredKeys:(id)arg2 fetchAllChanges:(_Bool)arg3 qualityOfService:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (void)performActionWithRecordZone:(CDUnknownBlockType)arg1;
- (id)initWithDatabase:(id)arg1 delegate:(id)arg2 recordZoneID:(id)arg3;

@end

@interface FCCKRecordZoneManager : NSObject <FCCKRecordZoneDelegate>
{
    FCCKDatabase *_database;
    NSArray *_recordZoneIDs;
    NSDictionary *_fcRecordZonesByName;
    NSDictionary *_ckRecordZonesByID;
    FCAsyncSerialQueue *_serialQueue;
}

@property(retain, nonatomic) FCAsyncSerialQueue *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) NSDictionary *ckRecordZonesByID; // @synthesize ckRecordZonesByID=_ckRecordZonesByID;
@property(retain, nonatomic) NSDictionary *fcRecordZonesByName; // @synthesize fcRecordZonesByName=_fcRecordZonesByName;
@property(retain, nonatomic) NSArray *recordZoneIDs; // @synthesize recordZoneIDs=_recordZoneIDs;
@property(retain, nonatomic) FCCKDatabase *database; // @synthesize database=_database;
- (void).cxx_destruct;
- (void)ensureRecordZoneExistsWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)recordZoneWithName:(id)arg1;
- (id)initWithDatabase:(id)arg1 recordZoneNames:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCKRefreshRecordsOperation : FCOperation
{
    FCCKDatabase *_database;
    NSArray *_recordIDs;
    NSDictionary *_changeTagsByRecordID;
    NSArray *_desiredKeys;
    CDUnknownBlockType _refreshRecordsCompletionBlock;
    NSMutableArray *_remainingRecordIDBatches;
    NSMutableSet *_refreshedRecordIDs;
    NSMutableDictionary *_updatedRecordsByRecordID;
    NSMutableSet *_deletedRecordIDs;
    NSMutableDictionary *_errorsByRecordID;
    NSError *_operationError;
}

@property(retain, nonatomic) NSError *operationError; // @synthesize operationError=_operationError;
@property(retain, nonatomic) NSMutableDictionary *errorsByRecordID; // @synthesize errorsByRecordID=_errorsByRecordID;
@property(retain, nonatomic) NSMutableSet *deletedRecordIDs; // @synthesize deletedRecordIDs=_deletedRecordIDs;
@property(retain, nonatomic) NSMutableDictionary *updatedRecordsByRecordID; // @synthesize updatedRecordsByRecordID=_updatedRecordsByRecordID;
@property(retain, nonatomic) NSMutableSet *refreshedRecordIDs; // @synthesize refreshedRecordIDs=_refreshedRecordIDs;
@property(retain, nonatomic) NSMutableArray *remainingRecordIDBatches; // @synthesize remainingRecordIDBatches=_remainingRecordIDBatches;
@property(copy, nonatomic) CDUnknownBlockType refreshRecordsCompletionBlock; // @synthesize refreshRecordsCompletionBlock=_refreshRecordsCompletionBlock;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(copy, nonatomic) NSDictionary *changeTagsByRecordID; // @synthesize changeTagsByRecordID=_changeTagsByRecordID;
@property(copy, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
@property(retain, nonatomic) FCCKDatabase *database; // @synthesize database=_database;
- (void).cxx_destruct;
- (void)_continueRefreshing;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;
- (id)init;

@end

@interface FCCacheCoordinator : NSObject <FCOperationThrottlerDelegate>
{
    _Bool _flushingEnabled;
    id <FCCacheCoordinatorDelegate> _delegate;
    NSMutableSet *_storedKeys;
    NSCountedSet *_interestedKeys;
    NSMutableDictionary *_lifetimeHints;
    FCThreadSafeMutableDictionary *_accessDateHints;
    FCMutexLock *_interestLock;
    FCReadWriteLock *_dataLock;
    FCOperationThrottler *_flushThrottler;
    FCCacheCoordinatorFlushPolicy *_flushPolicy;
}

@property(getter=isFlushingEnabled) _Bool flushingEnabled; // @synthesize flushingEnabled=_flushingEnabled;
@property(retain, nonatomic) FCCacheCoordinatorFlushPolicy *flushPolicy; // @synthesize flushPolicy=_flushPolicy;
@property(retain, nonatomic) FCOperationThrottler *flushThrottler; // @synthesize flushThrottler=_flushThrottler;
@property(retain, nonatomic) FCReadWriteLock *dataLock; // @synthesize dataLock=_dataLock;
@property(retain, nonatomic) FCMutexLock *interestLock; // @synthesize interestLock=_interestLock;
@property(retain, nonatomic) FCThreadSafeMutableDictionary *accessDateHints; // @synthesize accessDateHints=_accessDateHints;
@property(retain, nonatomic) NSMutableDictionary *lifetimeHints; // @synthesize lifetimeHints=_lifetimeHints;
@property(retain, nonatomic) NSCountedSet *interestedKeys; // @synthesize interestedKeys=_interestedKeys;
@property(retain, nonatomic) NSMutableSet *storedKeys; // @synthesize storedKeys=_storedKeys;
@property(nonatomic) __weak id <FCCacheCoordinatorDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)filterKeysForPreemptiveFlush:(id)arg1 lifetimeHints:(id)arg2 accessDateHints:(id)arg3;
- (void)didAccessKeys:(id)arg1;
- (void)removeInterestInKeys:(id)arg1;
- (void)addInterestInKeys:(id)arg1;
- (void)operationThrottlerPerformOperation:(id)arg1;
- (void)enableFlushingWithPolicy:(id)arg1;
- (id)accessDateHintsByKey;
- (id)persistableHints;
- (void)didInsertKeysIntoCache:(id)arg1 withLifetimeHints:(id)arg2;
- (void)didInsertKeyIntoCache:(id)arg1 withLifetimeHint:(long long)arg2;
- (_Bool)cacheContainsKey:(id)arg1;
- (void)performCacheWrite:(CDUnknownBlockType)arg1;
- (void)performCacheRead:(CDUnknownBlockType)arg1;
- (id)holdTokensForKeys:(id)arg1;
- (id)holdTokenForKeys:(id)arg1;
- (id)holdTokenForKey:(id)arg1;
- (void)setupWithInitialKeys:(id)arg1 persistedHints:(id)arg2;
- (void)setupWithInitialKeys:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCacheCoordinatorFlushPolicy : NSObject
{
    _Bool _alwaysFlushKeysWithZeroInterest;
    unsigned long long _highWaterMark;
    unsigned long long _lowWaterMark;
}

@property(nonatomic) unsigned long long lowWaterMark; // @synthesize lowWaterMark=_lowWaterMark;
@property(nonatomic) unsigned long long highWaterMark; // @synthesize highWaterMark=_highWaterMark;
@property(nonatomic) _Bool alwaysFlushKeysWithZeroInterest; // @synthesize alwaysFlushKeysWithZeroInterest=_alwaysFlushKeysWithZeroInterest;
- (_Bool)canPreemptiveFlushWithDataSize:(unsigned long long)arg1;
- (_Bool)canFlushWithDataSize:(unsigned long long)arg1;

@end

@interface FCCancelHandler : NSObject <FCOperationCanceling>
{
    CDUnknownBlockType _cancelBlock;
    id _weakTarget;
    id _strongTarget;
    SEL _selector;
}

+ (id)cancelHandlerWithStrongTarget:(id)arg1 selector:(SEL)arg2;
+ (id)cancelHandlerWithWeakTarget:(id)arg1 selector:(SEL)arg2;
+ (id)cancelHandlerWithBlock:(CDUnknownBlockType)arg1;
@property(nonatomic) SEL selector; // @synthesize selector=_selector;
@property(retain, nonatomic) id strongTarget; // @synthesize strongTarget=_strongTarget;
@property(nonatomic) __weak id weakTarget; // @synthesize weakTarget=_weakTarget;
@property(copy, nonatomic) CDUnknownBlockType cancelBlock; // @synthesize cancelBlock=_cancelBlock;
- (void).cxx_destruct;
- (void)cancel;
- (id)initWithStrongTarget:(id)arg1 selector:(SEL)arg2;
- (id)initWithWeakTarget:(id)arg1 selector:(SEL)arg2;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCChannelMembership : NSObject
{
    _Bool _isAllowedToSeeDrafts;
    NSString *_channelID;
    NSString *_draftListID;
    FCChannelMembershipRecordWrapper *_recordWrapper;
}

@property(retain, nonatomic) FCChannelMembershipRecordWrapper *recordWrapper; // @synthesize recordWrapper=_recordWrapper;
@property(nonatomic) NSString *draftListID; // @synthesize draftListID=_draftListID;
@property(nonatomic) _Bool isAllowedToSeeDrafts; // @synthesize isAllowedToSeeDrafts=_isAllowedToSeeDrafts;
@property(retain, nonatomic) NSString *channelID; // @synthesize channelID=_channelID;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithRecordWrapper:(id)arg1;

@end

@interface FCChannelMembershipController : NSObject
{
    FCCloudKitConnection *_connection;
    FCChannelMembershipRecordSource *_recordSource;
}

@property(readonly, nonatomic) FCChannelMembershipRecordSource *recordSource; // @synthesize recordSource=_recordSource;
@property(readonly, nonatomic) FCCloudKitConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (id)cachedChannelMembershipsForIDs:(id)arg1;
- (id)channelMembershipFromRecordWrapper:(id)arg1;
- (void)fetchChannelMembershipsForIDs:(id)arg1 maximumCachedAge:(double)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithConnection:(id)arg1 channelMembershipRecordSource:(id)arg2;

@end

@interface FCChannelMembershipRecordSource : FCRecordSource
{
}

+ (unsigned long long)dataSizeLimit;
+ (unsigned long long)storeVersion;
+ (id)storeFilename;
+ (Class)recordWrapperClass;
+ (id)desiredKeys;
+ (id)recordType;
- (id)fetchOperationForChannelMembershipsWithIDs:(id)arg1;

@end

@interface FCChannelMembershipRecordWrapper : FCRecordWrapper
{
    NSString *_channelID;
    NSNumber *_canAccessDrafts;
    NSString *_draftListID;
}

@property(nonatomic) NSString *draftListID; // @synthesize draftListID=_draftListID;
@property(nonatomic) NSNumber *canAccessDrafts; // @synthesize canAccessDrafts=_canAccessDrafts;
@property(retain, nonatomic) NSString *channelID; // @synthesize channelID=_channelID;
- (void).cxx_destruct;

@end

@interface FCCheckArticleStatusOperation : FCOperation
{
    CDUnknownBlockType _checkStatusCompletion;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    FCCloudContext *_context;
    NSString *_articleID;
    long long _resultStatus;
}

@property(nonatomic) long long resultStatus; // @synthesize resultStatus=_resultStatus;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(retain) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property(copy) CDUnknownBlockType checkStatusCompletion; // @synthesize checkStatusCompletion=_checkStatusCompletion;
- (void).cxx_destruct;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;
- (id)initWithContext:(id)arg1 articleID:(id)arg2;

@end

@interface FCClientEndpointConnection : FCEndpointConnection
{
}

- (void)appConfigurationDidChangeEndpointConfigs:(id)arg1;
- (void)subscribeToEmailNewsLetterForUserWithDSID:(id)arg1 storeFrontID:(id)arg2 primaryLanguage:(id)arg3 callbackQueue:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)reportConcern:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)pollFeedWithPollingURL:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addFeedWithURL:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)initWithContext:(id)arg1;

@end

@interface FCCloudContext : NSObject <FCResourceURLProtocolDelegate, FCCloudKitConnectionDelegate, FCPrivateChannelMembershipObserving>
{
    FCPrivateDataStorage *_privateDataStorage;
    FCSubscriptionController *_subscriptionController;
    FCSubscriptionList *_subscriptionList;
    FCReadingHistory *_readingHistory;
    FCReadingList *_readingList;
    FCPrivateChannelMembershipController *_privateChannelMembershipController;
    FCUserInfo *_userInfo;
    FCFeedManager *_feedManager;
    FCArticleController *_articleController;
    FCTagController *_tagController;
    FCPushNotificationCenter *_pushNotificationCenter;
    FCFlintResourceManager *_flintResourceManager;
    FCAppConfiguration *_appConfiguration;
    FCDemoConfiguration *_demoConfiguration;
    id <FCFlintHelper> _flintHelper;
    FCCloudKitConnection *_cloudKitConnection;
    FCClientEndpointConnection *_endPointConnection;
    FCCommandQueue *_endPointCommandQueue;
    FCCommandQueue *_userInfoCommandQueue;
    FCArticleRecordSource *_articleRecordSource;
    FCTagRecordSource *_tagRecordSource;
    FCChannelMembershipController *_channelMembershipController;
    FCResourceRecordSource *_resourceRecordSource;
    FCWebArchiveSource *_webArchiveSource;
    FCArticleListRecordSource *_articleListRecordSource;
    FCChannelMembershipRecordSource *_channelMembershipRecordSource;
}

@property(retain, nonatomic) FCChannelMembershipRecordSource *channelMembershipRecordSource; // @synthesize channelMembershipRecordSource=_channelMembershipRecordSource;
@property(readonly, nonatomic) FCArticleListRecordSource *articleListRecordSource; // @synthesize articleListRecordSource=_articleListRecordSource;
@property(readonly, nonatomic) FCWebArchiveSource *webArchiveSource; // @synthesize webArchiveSource=_webArchiveSource;
@property(readonly, nonatomic) FCResourceRecordSource *resourceRecordSource; // @synthesize resourceRecordSource=_resourceRecordSource;
@property(readonly, nonatomic) FCChannelMembershipController *channelMembershipController; // @synthesize channelMembershipController=_channelMembershipController;
@property(readonly, nonatomic) FCTagRecordSource *tagRecordSource; // @synthesize tagRecordSource=_tagRecordSource;
@property(readonly, nonatomic) FCArticleRecordSource *articleRecordSource; // @synthesize articleRecordSource=_articleRecordSource;
@property(readonly, nonatomic) FCCommandQueue *userInfoCommandQueue; // @synthesize userInfoCommandQueue=_userInfoCommandQueue;
@property(readonly, nonatomic) FCCommandQueue *endPointCommandQueue; // @synthesize endPointCommandQueue=_endPointCommandQueue;
@property(readonly, nonatomic) FCClientEndpointConnection *endPointConnection; // @synthesize endPointConnection=_endPointConnection;
@property(readonly, nonatomic) FCCloudKitConnection *cloudKitConnection; // @synthesize cloudKitConnection=_cloudKitConnection;
@property(nonatomic) __weak id <FCFlintHelper> flintHelper; // @synthesize flintHelper=_flintHelper;
@property(retain, nonatomic) FCDemoConfiguration *demoConfiguration; // @synthesize demoConfiguration=_demoConfiguration;
@property(retain, nonatomic) FCAppConfiguration *appConfiguration; // @synthesize appConfiguration=_appConfiguration;
@property(readonly, nonatomic) FCFlintResourceManager *flintResourceManager; // @synthesize flintResourceManager=_flintResourceManager;
@property(readonly, nonatomic) FCPushNotificationCenter *pushNotificationCenter; // @synthesize pushNotificationCenter=_pushNotificationCenter;
@property(readonly, nonatomic) FCTagController *tagController; // @synthesize tagController=_tagController;
@property(readonly, nonatomic) FCArticleController *articleController; // @synthesize articleController=_articleController;
@property(readonly, nonatomic) FCFeedManager *feedManager; // @synthesize feedManager=_feedManager;
@property(readonly, nonatomic) FCUserInfo *userInfo; // @synthesize userInfo=_userInfo;
@property(readonly, nonatomic) FCPrivateChannelMembershipController *privateChannelMembershipController; // @synthesize privateChannelMembershipController=_privateChannelMembershipController;
@property(readonly, nonatomic) FCReadingList *readingList; // @synthesize readingList=_readingList;
@property(readonly, nonatomic) FCReadingHistory *readingHistory; // @synthesize readingHistory=_readingHistory;
@property(readonly, nonatomic) FCSubscriptionList *subscriptionList; // @synthesize subscriptionList=_subscriptionList;
@property(readonly, nonatomic) FCSubscriptionController *subscriptionController; // @synthesize subscriptionController=_subscriptionController;
@property(retain, nonatomic) FCPrivateDataStorage *privateDataStorage; // @synthesize privateDataStorage=_privateDataStorage;
- (void).cxx_destruct;
- (void)privateChannelMembershipControllerDidChange:(id)arg1;
@property(readonly, nonatomic) _Bool hasBeenRateLimited;
- (void)cloudKitConnectionPrivateDatabaseHasBeenRateLimited:(id)arg1;
- (void)cloudKitConnectionContentDatabaseHasBeenRateLimited:(id)arg1;
- (void)cloudKitConnection:(id)arg1 didDropRecordZonesWithIDs:(id)arg2;
- (void)resourceProtocol:(id)arg1 didUseResourceWithID:(id)arg2;
- (void)resourceProtocol:(id)arg1 willUseResourceWithID:(id)arg2;
- (void)resourceProtocol:(id)arg1 fetchResourceWithResourceID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)fetchEndOfArticleDataForHeadline:(id)arg1 initialRelatedHeadlineCount:(unsigned long long)arg2 initialPublisherHeadlineCount:(unsigned long long)arg3 totalRelatedHeadlineCount:(unsigned long long)arg4 totalPublisherHeadlineCount:(unsigned long long)arg5 completion:(CDUnknownBlockType)arg6;
- (void)getCoverImageForFeed:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_defaultArticleRecordSortDescriptor;
- (id)_establishStreamOfArticleIDsForPredicate:(id)arg1 sortDescriptor:(id)arg2;
- (void)enableFlushing;
- (id)initWithContentContainerIdentifier:(id)arg1 privateContainerIdentifier:(id)arg2 environment:(long long)arg3 privateDataActionProvider:(id)arg4;
- (id)initWithUserDefaults:(id)arg1 privateDataActionProvider:(id)arg2 privateOnly:(_Bool)arg3;
- (id)initPrivateOnlyWithUserDefaults:(id)arg1;
- (id)initWithUserDefaults:(id)arg1 privateDataActionProvider:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCloudKitConnection : NSObject <FCCKDatabaseDelegate>
{
    id <FCCloudKitConnectionDelegate> _delegate;
    FCCKDatabase *_contentDatabase;
    FCCKDatabase *_privateDatabase;
    CKContainer *_contentContainer;
    CKContainer *_privateContainer;
    FCCKRecordZoneManager *_recordZoneManager;
}

@property(retain, nonatomic) FCCKRecordZoneManager *recordZoneManager; // @synthesize recordZoneManager=_recordZoneManager;
@property(retain, nonatomic) CKContainer *privateContainer; // @synthesize privateContainer=_privateContainer;
@property(retain, nonatomic) CKContainer *contentContainer; // @synthesize contentContainer=_contentContainer;
@property(retain, nonatomic) FCCKDatabase *privateDatabase; // @synthesize privateDatabase=_privateDatabase;
@property(retain, nonatomic) FCCKDatabase *contentDatabase; // @synthesize contentDatabase=_contentDatabase;
@property(nonatomic) __weak id <FCCloudKitConnectionDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)_isCloudKitReachable;
- (id)_establishStreamOfRecordsWithCursor:(id)arg1 database:(id)arg2 desiredKeys:(id)arg3;
- (id)_establishStreamOfRecordsOfType:(id)arg1 database:(id)arg2 predicate:(id)arg3 desiredKeys:(id)arg4 sortDescriptor:(id)arg5;
- (id)_establishStreamOfRecordsOfType:(id)arg1 predicate:(id)arg2 desiredKeys:(id)arg3 sortDescriptor:(id)arg4;
- (id)establishStreamOfRecordsWithCursor:(id)arg1 desiredKeys:(id)arg2;
- (id)establishStreamOfArticleRecordsForPredicate:(id)arg1 desiredKeys:(id)arg2 sortDescriptor:(id)arg3;
- (void)setPreferAnonymousRequests:(_Bool)arg1;
- (void)databaseHasBeenRateLimited:(id)arg1 retryAfter:(double)arg2;
@property(readonly, nonatomic) _Bool hasBeenRateLimited;
@property(readonly, copy, nonatomic) NSString *privateDataDirectory;
@property(readonly, copy, nonatomic) NSString *cacheDirectory;
- (id)recordZoneWithName:(id)arg1;
@property(readonly, nonatomic) FCCKRecordZone *channelMembershipsRecordZone;
@property(readonly, nonatomic) FCCKRecordZone *userInfoRecordZone;
@property(readonly, nonatomic) FCCKRecordZone *readingHistoryRecordZone;
@property(readonly, nonatomic) FCCKRecordZone *subscriptionsRecordZone;
@property(readonly, nonatomic) FCCKRecordZone *readingListRecordZone;
- (id)initWithContentContainerIdentifier:(id)arg1 privateContainerIdentifier:(id)arg2 environment:(long long)arg3 delegate:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCloudKitRecordStream : NSObject <FCQueryBasedStream>
{
    _Bool _fetching;
    _Bool _finished;
    CDUnknownBlockType _downloadBeginBlock;
    CDUnknownBlockType _downloadSuccessBlock;
    CDUnknownBlockType _downloadFailureBlock;
    FCCKDatabase *_database;
    CKRecordZoneID *_recordZoneID;
    CKQuery *_query;
    NSArray *_desiredKeys;
    CKQueryCursor *_cursor;
    NSMutableSet *_encounteredRecordIDs;
}

@property(retain, nonatomic) NSMutableSet *encounteredRecordIDs; // @synthesize encounteredRecordIDs=_encounteredRecordIDs;
@property(retain, nonatomic) CKQueryCursor *cursor; // @synthesize cursor=_cursor;
@property(retain, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(nonatomic, getter=isFinished) _Bool finished; // @synthesize finished=_finished;
@property(nonatomic) _Bool fetching; // @synthesize fetching=_fetching;
@property(retain, nonatomic) CKQuery *query; // @synthesize query=_query;
@property(retain, nonatomic) CKRecordZoneID *recordZoneID; // @synthesize recordZoneID=_recordZoneID;
@property(retain, nonatomic) FCCKDatabase *database; // @synthesize database=_database;
@property(copy, nonatomic) CDUnknownBlockType downloadFailureBlock; // @synthesize downloadFailureBlock=_downloadFailureBlock;
@property(copy, nonatomic) CDUnknownBlockType downloadSuccessBlock; // @synthesize downloadSuccessBlock=_downloadSuccessBlock;
@property(copy, nonatomic) CDUnknownBlockType downloadBeginBlock; // @synthesize downloadBeginBlock=_downloadBeginBlock;
- (void).cxx_destruct;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithDatabase:(id)arg1 cursor:(id)arg2 desiredKeys:(id)arg3;
- (id)initWithDatabase:(id)arg1 query:(id)arg2 desiredKeys:(id)arg3;
- (id)initWithDatabase:(id)arg1 recordZoneID:(id)arg2 query:(id)arg3 desiredKeys:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCloudKitTransformedRecordStream : NSObject <FCQueryBasedStream>
{
    id <FCStreaming> _recordStream;
    CDUnknownBlockType _recordTransformBlock;
}

@property(copy, nonatomic) CDUnknownBlockType recordTransformBlock; // @synthesize recordTransformBlock=_recordTransformBlock;
@property(retain, nonatomic) id <FCStreaming> recordStream; // @synthesize recordStream=_recordStream;
- (void).cxx_destruct;
@property(readonly, nonatomic) CKQueryCursor *cursor;
@property(readonly, nonatomic) NSArray *desiredKeys;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithDatabase:(id)arg1 query:(id)arg2 desiredKeys:(id)arg3 recordTransformBlock:(CDUnknownBlockType)arg4;
- (id)initWithRecordStream:(id)arg1 recordTransformBlock:(CDUnknownBlockType)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCCloudPerformance : NSObject
{
}

+ (void)testFeedPerformanceWithContentDatabase:(id)arg1;

@end

@interface FCCompositeStream : NSObject <FCStreaming, FCQueryBasedStream>
{
    NSArray *_streams;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) CKQueryCursor *cursor;
@property(readonly, nonatomic) NSArray *desiredKeys;
- (id)_nextUnfinishedStream;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithStreams:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCDemoConfiguration : NSObject
{
    _Bool _enabled;
    _Bool _attemptedDownload;
    FCCloudContext *_context;
    NSObject<OS_dispatch_queue> *_downloadQueue;
    NSDictionary *_configurationPlist;
}

@property(retain, nonatomic) NSDictionary *configurationPlist; // @synthesize configurationPlist=_configurationPlist;
@property(nonatomic) _Bool attemptedDownload; // @synthesize attemptedDownload=_attemptedDownload;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *downloadQueue; // @synthesize downloadQueue=_downloadQueue;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(readonly, nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (id)_articleIDsFromArticleDictionaries:(id)arg1;
- (unsigned long long)gapBetweenExtraArticles;
- (id)extraArticleIDsForTagID:(id)arg1;
- (id)extraArticleIDsForTopStories;
- (id)fixedTopArticleIDsForTagID:(id)arg1;
- (id)fixedTopArticleIDsForTopStories;
- (void)downloadConfigurationIfNeededWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1;

@end

@interface FCDescription : NSObject
{
    NSObject *_object;
    Class _class;
    void *_cfType;
    NSString *_header;
    NSMutableDictionary *_fields;
    NSMutableArray *_fieldOrder;
    unsigned long long _fieldNameWidth;
    _Bool _commaSeparated;
}

+ (id)descriptionWithObject:(id)arg1;
+ (id)descriptionWithCFType:(void *)arg1 format:(id)arg2;
+ (id)descriptionWithObject:(id)arg1 class:(Class)arg2;
+ (id)descriptionWithObject:(id)arg1 format:(id)arg2;
+ (id)descriptionWithObject:(id)arg1 class:(Class)arg2 format:(id)arg3;
- (void).cxx_destruct;
- (id)descriptionString;
- (void)setFieldOptionCommaSeparated;
- (void)addSuperDescription;
- (void)addFieldValue:(id)arg1;
- (void)addFieldWithFormat:(id)arg1;
- (void)addField:(id)arg1 format:(id)arg2;
- (void)addField:(id)arg1 object:(id)arg2;
- (void)addField:(id)arg1 value:(id)arg2;
- (id)p_header;
- (id)initWithObject:(id)arg1;
- (id)initWithObject:(id)arg1 format:(id)arg2;
- (id)initWithObject:(id)arg1 class:(Class)arg2 format:(id)arg3;
- (id)initWithObject:(id)arg1 class:(Class)arg2 format:(id)arg3 arguments:(struct __va_list_tag [1])arg4;
- (id)initWithCFType:(void *)arg1 header:(id)arg2;
- (id)initWithObject:(id)arg1 class:(Class)arg2 header:(id)arg3;

@end

@interface FCFeedInbox : NSObject <FCFeedHeadlineSource>
{
    _Bool _pendingBatchCaughtUp;
    _Bool _isFeedEmpty;
    FCFeedDescriptor *_feedDescriptor;
    id <FCInboxStyleFeed> _inboxStyleFeed;
    FCAsyncSerialQueue *_fetchQueue;
    FCFeedItemBatch *_mainBatch;
    NSArray *_mainHeadlines;
    FCFeedItemBatch *_pendingBatch;
    NSArray *_pendingHeadlines;
    NSMutableIndexSet *_headlineIndexesAlreadyUpdated;
    FCAsyncSerialQueue *_headlineUpdateQueue;
    NSHashTable *_observers;
}

@property(retain, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) FCAsyncSerialQueue *headlineUpdateQueue; // @synthesize headlineUpdateQueue=_headlineUpdateQueue;
@property(retain, nonatomic) NSMutableIndexSet *headlineIndexesAlreadyUpdated; // @synthesize headlineIndexesAlreadyUpdated=_headlineIndexesAlreadyUpdated;
@property(nonatomic) _Bool isFeedEmpty; // @synthesize isFeedEmpty=_isFeedEmpty;
@property(copy, nonatomic) NSArray *pendingHeadlines; // @synthesize pendingHeadlines=_pendingHeadlines;
@property(nonatomic) _Bool pendingBatchCaughtUp; // @synthesize pendingBatchCaughtUp=_pendingBatchCaughtUp;
@property(retain, nonatomic) FCFeedItemBatch *pendingBatch; // @synthesize pendingBatch=_pendingBatch;
@property(copy, nonatomic) NSArray *mainHeadlines; // @synthesize mainHeadlines=_mainHeadlines;
@property(retain, nonatomic) FCFeedItemBatch *mainBatch; // @synthesize mainBatch=_mainBatch;
@property(retain, nonatomic) FCAsyncSerialQueue *fetchQueue; // @synthesize fetchQueue=_fetchQueue;
@property(retain, nonatomic) id <FCInboxStyleFeed> inboxStyleFeed; // @synthesize inboxStyleFeed=_inboxStyleFeed;
@property(readonly, nonatomic) FCFeedDescriptor *feedDescriptor; // @synthesize feedDescriptor=_feedDescriptor;
- (void).cxx_destruct;
- (void)_setMainBatch:(id)arg1 mainHeadlines:(id)arg2 pendingBatch:(id)arg3 pendingBatchCaughtUp:(_Bool)arg4 pendingHeadlines:(id)arg5 isFeedEmpty:(_Bool)arg6 batchesChanged:(_Bool)arg7;
- (void)fetchHeadlinesForIdentifiers:(id)arg1 downloadAssets:(_Bool)arg2 qualityOfService:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (_Bool)loadFromState:(id)arg1;
- (void)generatePersistableStateOnQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (_Bool)loadFromCacheThroughHeadlineID:(id)arg1 timeout:(double)arg2;
- (void)prefetchHeadlinesWithCompletion:(CDUnknownBlockType)arg1;
- (void)prewarmHeadlinesFromCacheWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)resetHeadlineUpdates;
- (void)checkForHeadlineUpdatesOnceWithMaxAge:(double)arg1 qualityOfService:(long long)arg2;
- (void)fetchMoreHeadlinesUpToCount:(unsigned long long)arg1 qualityOfService:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)refreshHeadlinesWithMinimumCount:(unsigned long long)arg1 qualityOfService:(long long)arg2 commitHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
@property(readonly, copy, nonatomic) NSSet *articleIDs;
@property(readonly, copy, nonatomic) NSString *lastArticleIDRecorded;
@property(readonly, nonatomic) _Bool hasMoreHeadlines;
@property(readonly, copy, nonatomic) NSArray *headlines;
- (id)initWithFeedDescriptor:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCDumbFeedInbox : FCFeedInbox
{
    FCStreamingResults *_headlineResults;
}

@property(retain, nonatomic) FCStreamingResults *headlineResults; // @synthesize headlineResults=_headlineResults;
- (void).cxx_destruct;
- (void)prewarmHeadlinesFromCacheWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)loadFromState:(id)arg1;
- (void)generatePersistableStateOnQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)refreshHeadlinesWithMinimumCount:(unsigned long long)arg1 qualityOfService:(long long)arg2 commitHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)fetchMoreHeadlinesUpToCount:(unsigned long long)arg1 qualityOfService:(long long)arg2;
- (_Bool)hasMoreHeadlines;
- (id)headlines;
- (id)initWithFeedDescriptor:(id)arg1;

@end

@interface FCEmptyStream : NSObject <FCStreaming>
{
}

@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCEndOfArticleData : NSObject
{
    NSArray *_allTopics;
    FCStreamingResults *_publisherHeadlines;
    FCStreamingResults *_relatedHeadlines;
}

@property(retain, nonatomic) FCStreamingResults *relatedHeadlines; // @synthesize relatedHeadlines=_relatedHeadlines;
@property(retain, nonatomic) FCStreamingResults *publisherHeadlines; // @synthesize publisherHeadlines=_publisherHeadlines;
@property(retain, nonatomic) NSArray *allTopics; // @synthesize allTopics=_allTopics;
- (void).cxx_destruct;

@end

@interface FCEndOfArticleFetchOperation : FCFetchOperation
{
    _Bool _fetchAllTopics;
    _Bool _fetchPublisherHeadlines;
    _Bool _fetchRelatedHeadlines;
    unsigned long long _minimumPublisherHeadlineCount;
    unsigned long long _minimumRelatedHeadlineCount;
    unsigned long long _totalPublisherHeadlineCount;
    unsigned long long _totalRelatedHeadlineCount;
    FCCloudContext *_context;
    FCHeadline *_headline;
}

@property(retain, nonatomic) FCHeadline *headline; // @synthesize headline=_headline;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property unsigned long long totalRelatedHeadlineCount; // @synthesize totalRelatedHeadlineCount=_totalRelatedHeadlineCount;
@property unsigned long long totalPublisherHeadlineCount; // @synthesize totalPublisherHeadlineCount=_totalPublisherHeadlineCount;
@property unsigned long long minimumRelatedHeadlineCount; // @synthesize minimumRelatedHeadlineCount=_minimumRelatedHeadlineCount;
@property unsigned long long minimumPublisherHeadlineCount; // @synthesize minimumPublisherHeadlineCount=_minimumPublisherHeadlineCount;
@property _Bool fetchRelatedHeadlines; // @synthesize fetchRelatedHeadlines=_fetchRelatedHeadlines;
@property _Bool fetchPublisherHeadlines; // @synthesize fetchPublisherHeadlines=_fetchPublisherHeadlines;
@property _Bool fetchAllTopics; // @synthesize fetchAllTopics=_fetchAllTopics;
- (void).cxx_destruct;
- (void)_streamingHeadlineForArticleIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_streamingHeadlinesForFeedItems:(id)arg1 tagsByID:(id)arg2;
- (void)_startFetchingThumbnailsForFeedItems:(id)arg1;
- (void)beginExecuting;
- (id)initWithContext:(id)arg1 headline:(id)arg2;

@end

@interface FCEndpointConfiguration : NSObject
{
    NSString *_clientAPIBaseURLString;
    NSString *_eventRelayBaseURLString;
}

@property(readonly, nonatomic) NSString *eventRelayBaseURLString; // @synthesize eventRelayBaseURLString=_eventRelayBaseURLString;
@property(readonly, nonatomic) NSString *clientAPIBaseURLString; // @synthesize clientAPIBaseURLString=_clientAPIBaseURLString;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithClientAPIBaseURLString:(id)arg1 eventRelayBaseURLString:(id)arg2;

@end

@interface FCFeedInboxExtendOperation : FCOperation
{
    id <FCInboxStyleFeed> _inboxStyleFeed;
    FCFeedItemBatch *_batchToExtend;
    unsigned long long _desiredCount;
    CDUnknownBlockType _extendCompletionHandler;
    FCFeedItemBatch *_extensionBatch;
    NSError *_extendError;
}

@property(retain, nonatomic) NSError *extendError; // @synthesize extendError=_extendError;
@property(retain, nonatomic) FCFeedItemBatch *extensionBatch; // @synthesize extensionBatch=_extensionBatch;
@property(copy, nonatomic) CDUnknownBlockType extendCompletionHandler; // @synthesize extendCompletionHandler=_extendCompletionHandler;
@property(nonatomic) unsigned long long desiredCount; // @synthesize desiredCount=_desiredCount;
@property(retain, nonatomic) FCFeedItemBatch *batchToExtend; // @synthesize batchToExtend=_batchToExtend;
@property(retain, nonatomic) id <FCInboxStyleFeed> inboxStyleFeed; // @synthesize inboxStyleFeed=_inboxStyleFeed;
- (void).cxx_destruct;
- (void)_extendBatchIfNecessary;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;

@end

@interface FCFeedInboxHeadlinesOperation : FCOperation
{
    _Bool _shouldDownloadAssets;
    _Bool _contiguous;
    _Bool _fallBackOnDeletedPlaceholders;
    FCCloudContext *_context;
    NSOrderedSet *_feedItems;
    NSArray *_headlines;
    unsigned long long _desiredHeadlineCount;
    unsigned long long _cachePolicy;
    double _maxCachedAge;
    CDUnknownBlockType _headlinesCompletionHandler;
    NSArray *_resultHeadlines;
    NSError *_resultError;
}

@property(retain, nonatomic) NSError *resultError; // @synthesize resultError=_resultError;
@property(retain, nonatomic) NSArray *resultHeadlines; // @synthesize resultHeadlines=_resultHeadlines;
@property(copy, nonatomic) CDUnknownBlockType headlinesCompletionHandler; // @synthesize headlinesCompletionHandler=_headlinesCompletionHandler;
@property(nonatomic) _Bool fallBackOnDeletedPlaceholders; // @synthesize fallBackOnDeletedPlaceholders=_fallBackOnDeletedPlaceholders;
@property(nonatomic) _Bool contiguous; // @synthesize contiguous=_contiguous;
@property(nonatomic) double maxCachedAge; // @synthesize maxCachedAge=_maxCachedAge;
@property(nonatomic) unsigned long long cachePolicy; // @synthesize cachePolicy=_cachePolicy;
@property(nonatomic) _Bool shouldDownloadAssets; // @synthesize shouldDownloadAssets=_shouldDownloadAssets;
@property(nonatomic) unsigned long long desiredHeadlineCount; // @synthesize desiredHeadlineCount=_desiredHeadlineCount;
@property(retain, nonatomic) NSArray *headlines; // @synthesize headlines=_headlines;
@property(retain, nonatomic) NSOrderedSet *feedItems; // @synthesize feedItems=_feedItems;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;

@end

@interface FCFeedInboxRefreshOperation : FCOperation
{
    _Bool _oldRefreshBatchCaughtUp;
    _Bool _caughtUp;
    id <FCInboxStyleFeed> _inboxStyleFeed;
    FCFeedItemBatch *_batchToRefresh;
    FCFeedItemBatch *_oldRefreshBatch;
    unsigned long long _desiredCount;
    CDUnknownBlockType _refreshCompletionHandler;
    NSOrderedSet *_regularFeedItems;
    id <FCInboxStyleFeedCursor> _topCursor;
    id <FCInboxStyleFeedCursor> _bottomCursor;
    NSError *_regularError;
    NSOrderedSet *_pinnedFeedItems;
    NSError *_pinnedError;
    NSOrderedSet *_resultFeedItems;
    NSError *_resultError;
}

@property(retain, nonatomic) NSError *resultError; // @synthesize resultError=_resultError;
@property(retain, nonatomic) NSOrderedSet *resultFeedItems; // @synthesize resultFeedItems=_resultFeedItems;
@property(retain, nonatomic) NSError *pinnedError; // @synthesize pinnedError=_pinnedError;
@property(retain, nonatomic) NSOrderedSet *pinnedFeedItems; // @synthesize pinnedFeedItems=_pinnedFeedItems;
@property(retain, nonatomic) NSError *regularError; // @synthesize regularError=_regularError;
@property(nonatomic) _Bool caughtUp; // @synthesize caughtUp=_caughtUp;
@property(retain, nonatomic) id <FCInboxStyleFeedCursor> bottomCursor; // @synthesize bottomCursor=_bottomCursor;
@property(retain, nonatomic) id <FCInboxStyleFeedCursor> topCursor; // @synthesize topCursor=_topCursor;
@property(retain, nonatomic) NSOrderedSet *regularFeedItems; // @synthesize regularFeedItems=_regularFeedItems;
@property(copy, nonatomic) CDUnknownBlockType refreshCompletionHandler; // @synthesize refreshCompletionHandler=_refreshCompletionHandler;
@property(nonatomic) unsigned long long desiredCount; // @synthesize desiredCount=_desiredCount;
@property(nonatomic) _Bool oldRefreshBatchCaughtUp; // @synthesize oldRefreshBatchCaughtUp=_oldRefreshBatchCaughtUp;
@property(retain, nonatomic) FCFeedItemBatch *oldRefreshBatch; // @synthesize oldRefreshBatch=_oldRefreshBatch;
@property(retain, nonatomic) FCFeedItemBatch *batchToRefresh; // @synthesize batchToRefresh=_batchToRefresh;
@property(retain, nonatomic) id <FCInboxStyleFeed> inboxStyleFeed; // @synthesize inboxStyleFeed=_inboxStyleFeed;
- (void).cxx_destruct;
- (void)_addBestOfFeedItems:(id)arg1 toFeedItems:(id)arg2;
- (void)_prepareFeedItemsForTop:(id)arg1;
- (void)_fetchPinnedFeedItemsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_fetchRegularFeedItemsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;

@end

@interface FCFeedItem : NSObject <NSCopying, NSCoding>
{
    NSString *_feedID;
    NSString *_articleID;
    NSNumber *_order;
    NSNumber *_publishDateMilliseconds;
    NSNumber *_feedHalfLifeMilliseconds;
    NSNumber *_userFeedback;
    NSNumber *_isFeatureCandidate;
    NSNumber *_isFeatured;
    NSNumber *_wasFeatured;
    NSNumber *_isExploratory;
    NSString *_clusterID;
    NSArray *_blockedStorefrontIDs;
    NSArray *_allowedStorefrontIDs;
    NSString *_sourceTagID;
    NSString *_sourceSectionID;
    NSString *_sourceChannelID;
    NSString *_sourceTopicID;
    FCArticleRecordWrapper *_articleRecordWrapper;
}

+ (id)cloudKitKeys;
@property(retain, nonatomic) FCArticleRecordWrapper *articleRecordWrapper; // @synthesize articleRecordWrapper=_articleRecordWrapper;
@property(readonly, nonatomic) NSString *sourceTopicID; // @synthesize sourceTopicID=_sourceTopicID;
@property(readonly, nonatomic) NSString *sourceChannelID; // @synthesize sourceChannelID=_sourceChannelID;
@property(readonly, nonatomic) NSString *sourceSectionID; // @synthesize sourceSectionID=_sourceSectionID;
@property(readonly, nonatomic) NSString *sourceTagID; // @synthesize sourceTagID=_sourceTagID;
@property(readonly, nonatomic) NSArray *allowedStorefrontIDs; // @synthesize allowedStorefrontIDs=_allowedStorefrontIDs;
@property(readonly, nonatomic) NSArray *blockedStorefrontIDs; // @synthesize blockedStorefrontIDs=_blockedStorefrontIDs;
@property(readonly, nonatomic) NSString *clusterID; // @synthesize clusterID=_clusterID;
@property(readonly, nonatomic) NSNumber *isExploratory; // @synthesize isExploratory=_isExploratory;
@property(readonly, nonatomic) NSNumber *wasFeatured; // @synthesize wasFeatured=_wasFeatured;
@property(readonly, nonatomic) NSNumber *isFeatured; // @synthesize isFeatured=_isFeatured;
@property(readonly, nonatomic) NSNumber *isFeatureCandidate; // @synthesize isFeatureCandidate=_isFeatureCandidate;
@property(readonly, nonatomic) NSNumber *userFeedback; // @synthesize userFeedback=_userFeedback;
@property(readonly, nonatomic) NSNumber *feedHalfLifeMilliseconds; // @synthesize feedHalfLifeMilliseconds=_feedHalfLifeMilliseconds;
@property(readonly, nonatomic) NSNumber *publishDateMilliseconds; // @synthesize publishDateMilliseconds=_publishDateMilliseconds;
@property(readonly, nonatomic) NSNumber *order; // @synthesize order=_order;
@property(readonly, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(readonly, nonatomic) NSString *feedID; // @synthesize feedID=_feedID;
- (void).cxx_destruct;
- (id)description;
- (id)wasFeaturedCopy;
- (id)unfeaturedCopy;
- (id)featuredCopy;
- (id)dictionaryRepresentation;
- (double)globalScoreAtDate:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithArticleRecordWrapper:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)initWithRecord:(id)arg1 sourceTagID:(id)arg2 sourceSectionID:(id)arg3 sourceChannelID:(id)arg4 sourceTopicID:(id)arg5 isExploratory:(_Bool)arg6;

@end

@interface FCFeedItemBatch : NSObject
{
    NSOrderedSet *_feedItems;
    id <FCInboxStyleFeedCursor> _topCursor;
    id <FCInboxStyleFeedCursor> _bottomCursor;
}

+ (id)batchByPrependingBatch:(id)arg1 toBatch:(id)arg2;
+ (id)batchByAppendingBatch:(id)arg1 toBatch:(id)arg2;
+ (id)emptyBatch;
@property(readonly, copy, nonatomic) id <FCInboxStyleFeedCursor> bottomCursor; // @synthesize bottomCursor=_bottomCursor;
@property(readonly, copy, nonatomic) id <FCInboxStyleFeedCursor> topCursor; // @synthesize topCursor=_topCursor;
@property(readonly, copy, nonatomic) NSOrderedSet *feedItems; // @synthesize feedItems=_feedItems;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSSet *articleIDs;
@property(readonly, nonatomic, getter=isEmpty) _Bool empty;
- (id)initWithFeedItems:(id)arg1 topCursor:(id)arg2 bottomCursor:(id)arg3;
- (id)init;

@end

@interface FCFeedManager : NSObject <FCSubscriptionObserving, FCFeedInboxObserving>
{
    id <FCFeedPrefetchCoordinating> _prefetchCoordinator;
    id <FCFeedPersonalizing> _feedPersonalizer;
    FCCloudContext *_context;
    FCSubscriptionController *_subscriptionController;
    NSMutableSet *_mutableSubscribedFeedDescriptors;
    NSMutableDictionary *_subscribedFeedDescriptorsByTag;
    NSMapTable *_feedDescriptorsByID;
    NSMapTable *_feedInboxesByFeedID;
    FCAsyncSerialQueue *_feedUpdateQueue;
    FCKeyValueStore *_store;
    NSObject<OS_dispatch_queue> *_storeQueue;
}

+ (id)feedDescriptorNameForReadingList;
+ (id)feedDescriptorNameForReadingHistory;
+ (id)feedDescriptorNameForTopStories;
+ (id)_identifierForFeedName:(id)arg1;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *storeQueue; // @synthesize storeQueue=_storeQueue;
@property(retain, nonatomic) FCKeyValueStore *store; // @synthesize store=_store;
@property(retain, nonatomic) FCAsyncSerialQueue *feedUpdateQueue; // @synthesize feedUpdateQueue=_feedUpdateQueue;
@property(retain, nonatomic) NSMapTable *feedInboxesByFeedID; // @synthesize feedInboxesByFeedID=_feedInboxesByFeedID;
@property(retain, nonatomic) NSMapTable *feedDescriptorsByID; // @synthesize feedDescriptorsByID=_feedDescriptorsByID;
@property(retain, nonatomic) NSMutableDictionary *subscribedFeedDescriptorsByTag; // @synthesize subscribedFeedDescriptorsByTag=_subscribedFeedDescriptorsByTag;
@property(retain, nonatomic) NSMutableSet *mutableSubscribedFeedDescriptors; // @synthesize mutableSubscribedFeedDescriptors=_mutableSubscribedFeedDescriptors;
@property(retain, nonatomic) FCSubscriptionController *subscriptionController; // @synthesize subscriptionController=_subscriptionController;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(retain, nonatomic) id <FCFeedPersonalizing> feedPersonalizer; // @synthesize feedPersonalizer=_feedPersonalizer;
@property(retain, nonatomic) id <FCFeedPrefetchCoordinating> prefetchCoordinator; // @synthesize prefetchCoordinator=_prefetchCoordinator;
- (void).cxx_destruct;
- (void)_removeSubscribedFeedDescriptorForTagIfNeeded:(id)arg1;
- (void)_addSubscribedFeedDescriptorForTagIfNeeded:(id)arg1;
- (void)subscriptionController:(id)arg1 didAddTags:(id)arg2 changeTags:(id)arg3 removeTags:(id)arg4;
- (void)_checkFilterForPreferredLanguages;
- (void)prefetchFeedsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)prewarmFeedsFromCacheWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)updateFeedWithDescriptor:(id)arg1 force:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) NSSet *subscribedFeedDescriptors;
- (id)initWithCloudContext:(id)arg1;
- (id)init;
- (id)storeKeyForStateOfFeedInbox:(id)arg1;
- (void)feedInboxDidChangePersistableState:(id)arg1;
- (id)feedInboxForFeedDescriptor:(id)arg1;
- (id)feedDescriptorWithIdentifier:(id)arg1;
- (id)feedDescriptorForArticleIDs:(id)arg1;
- (id)feedDescriptorForArticlesInSameClusterAsArticleID:(id)arg1;
- (id)feedDescriptorForTagIDs:(id)arg1;
- (id)feedDescriptorForTag:(id)arg1;
- (id)feedDescriptorForReadingList;
- (id)feedDescriptorForReadingHistory;
- (id)feedDescriptorForTopStories;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCFetchCoordinator : NSObject <FCOperationThrottlerDelegate>
{
    id <FCFetchCoordinatorDelegate> _delegate;
    unsigned long long _maxConcurrentFetchCount;
    NSHashTable *_fetchGroups;
    NSCountedSet *_allKeys;
    NSMapTable *_fetchOperationsByGroup;
    FCMutexLock *_accessLock;
    FCOperationThrottler *_fetchThrottler;
}

@property(retain, nonatomic) FCOperationThrottler *fetchThrottler; // @synthesize fetchThrottler=_fetchThrottler;
@property(retain, nonatomic) FCMutexLock *accessLock; // @synthesize accessLock=_accessLock;
@property(retain, nonatomic) NSMapTable *fetchOperationsByGroup; // @synthesize fetchOperationsByGroup=_fetchOperationsByGroup;
@property(retain, nonatomic) NSCountedSet *allKeys; // @synthesize allKeys=_allKeys;
@property(retain, nonatomic) NSHashTable *fetchGroups; // @synthesize fetchGroups=_fetchGroups;
@property unsigned long long maxConcurrentFetchCount; // @synthesize maxConcurrentFetchCount=_maxConcurrentFetchCount;
@property(nonatomic) __weak id <FCFetchCoordinatorDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)beginFetchesIfNeededWithLock;
- (void)cancelFetchesIfNeededWithLock;
- (void)removeFetchGroup:(id)arg1;
- (void)addFetchGroup:(id)arg1;
- (void)operationThrottlerPerformOperation:(id)arg1;
- (id)fetchKeysUnconditionally:(id)arg1 context:(id)arg2 qualityOfService:(long long)arg3 completionQueue:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (id)fetchKeys:(id)arg1 context:(id)arg2 qualityOfService:(long long)arg3 completionQueue:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (id)fetchKeys:(id)arg1 qualityOfService:(long long)arg2 completionQueue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)fetchKey:(id)arg1 qualityOfService:(long long)arg2 completionQueue:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCFetchGroup : NSObject
{
    _Bool _shouldFilter;
    _Bool _isUserFacing;
    NSSet *_keys;
    id _context;
    long long _qualityOfService;
    NSObject<OS_dispatch_queue> *_completionQueue;
    CDUnknownBlockType _completion;
    NSDate *_requestDate;
}

@property(retain, nonatomic) NSDate *requestDate; // @synthesize requestDate=_requestDate;
@property(readonly, copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *completionQueue; // @synthesize completionQueue=_completionQueue;
@property(readonly, nonatomic) _Bool isUserFacing; // @synthesize isUserFacing=_isUserFacing;
@property(readonly, nonatomic) long long qualityOfService; // @synthesize qualityOfService=_qualityOfService;
@property(readonly, nonatomic) _Bool shouldFilter; // @synthesize shouldFilter=_shouldFilter;
@property(readonly, nonatomic) id context; // @synthesize context=_context;
@property(readonly, copy, nonatomic) NSSet *keys; // @synthesize keys=_keys;
- (void).cxx_destruct;
- (long long)comparePriority:(id)arg1;
- (void)fireCompletion;
- (id)initWithKeys:(id)arg1 context:(id)arg2 shouldFilter:(_Bool)arg3 qualityOfService:(long long)arg4 completionQueue:(id)arg5 completion:(CDUnknownBlockType)arg6;

@end

@interface FCFetchOperationResult : NSObject
{
    id _fetchedObject;
    unsigned long long _status;
    unsigned long long _fetchResult;
    NSError *_error;
}

+ (id)resultForNetworkOperationWithStatus:(unsigned long long)arg1 fetchedObject:(id)arg2 error:(id)arg3;
+ (id)resultWithStatus:(unsigned long long)arg1 fetchedObject:(id)arg2 error:(id)arg3;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) unsigned long long fetchResult; // @synthesize fetchResult=_fetchResult;
@property(readonly, nonatomic) unsigned long long status; // @synthesize status=_status;
@property(readonly, nonatomic) id fetchedObject; // @synthesize fetchedObject=_fetchedObject;
- (void).cxx_destruct;
- (id)initWithStatus:(unsigned long long)arg1 fetchedObject:(id)arg2 fetchResult:(unsigned long long)arg3 error:(id)arg4;

@end

@interface FCFileCoordinatedDictionary : NSObject <NSFilePresenter>
{
    NSURL *_presentedItemURL;
    NSOperationQueue *_presentedItemOperationQueue;
    NSURL *_fileURL;
    NSOperationQueue *_accessQueue;
}

@property(retain, nonatomic) NSOperationQueue *accessQueue; // @synthesize accessQueue=_accessQueue;
@property(copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue; // @synthesize presentedItemOperationQueue=_presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL; // @synthesize presentedItemURL=_presentedItemURL;
- (void).cxx_destruct;
- (_Bool)_writeDictionary:(id)arg1 toFileURL:(id)arg2;
- (id)_readFromFileURL:(id)arg1;
- (void)writeWithAccessor:(CDUnknownBlockType)arg1 completion:(CDUnknownBlockType)arg2;
- (void)readWithAccessor:(CDUnknownBlockType)arg1;
@property long long maxConcurrentOperationCount;
- (id)initWithFileURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSURL *primaryPresentedItemURL;
@property(readonly) Class superclass;

@end

@interface FCFlintManifest : NSObject
{
    FCAssetHandle *_mainDocumentAssetHandle;
    FCAssetHandle *_thumbnailAssetHandle;
    NSArray *_fontResourceIDs;
}

@property(readonly, nonatomic) NSArray *fontResourceIDs; // @synthesize fontResourceIDs=_fontResourceIDs;
@property(readonly, nonatomic) FCAssetHandle *thumbnailAssetHandle; // @synthesize thumbnailAssetHandle=_thumbnailAssetHandle;
@property(readonly, nonatomic) FCAssetHandle *mainDocumentAssetHandle; // @synthesize mainDocumentAssetHandle=_mainDocumentAssetHandle;
- (void).cxx_destruct;
- (id)initWithMainDocumentAssetHandle:(id)arg1 fontResourceIDs:(id)arg2 thumbnailAssetHandle:(id)arg3;

@end

@interface FCFlintResourceManager : NSObject
{
    FCCloudContext *_context;
}

@property(readonly, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)cachedResourcesWithIdentifiers:(id)arg1;
- (id)fetchResourcesWithIdentifiers:(id)arg1 downloadAssets:(_Bool)arg2 callBackQueue:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (id)initWithContext:(id)arg1;

@end

@interface FCGroupCancelHandler : NSObject <FCOperationCanceling>
{
    NSArray *_cancelHandlers;
}

+ (id)groupCancelHandlerWithCancelHandlers:(id)arg1;
@property(copy, nonatomic) NSArray *cancelHandlers; // @synthesize cancelHandlers=_cancelHandlers;
- (void).cxx_destruct;
- (void)cancel;
- (id)initWithCancelHandlers:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCGzipAssetTransformer : FCAssetTransformer
{
}

- (_Bool)_transformAssetDataFromInputStream:(id)arg1 toOutputStream:(id)arg2 error:(id *)arg3;
- (_Bool)transformAssetDataFromFilePath:(id)arg1 toFilePath:(id)arg2 error:(id *)arg3;

@end

@interface FCHandlePushNotificationResult : NSObject <NSCopying>
{
    _Bool _handled;
    FCCKRecordZone *_recordZone;
}

@property(retain, nonatomic) FCCKRecordZone *recordZone; // @synthesize recordZone=_recordZone;
@property(nonatomic, getter=wasHandled) _Bool handled; // @synthesize handled=_handled;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface FCHeadlineTemplate : NSObject <NSCopying>
{
    unsigned long long _templateType;
}

+ (id)_headlineTemplateWithJSON:(id)arg1 versionNumber:(id)arg2;
+ (id)headlineTemplateWithJSON:(id)arg1;
@property(nonatomic) unsigned long long templateType; // @synthesize templateType=_templateType;
@property(readonly, nonatomic) NSArray *loadableFonts;
- (id)headlineTheme;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithJSONDictionary:(id)arg1 versionNumber:(long long)arg2;
- (id)init;

@end

@interface FCHeadlineTheme : NSObject <NSCopying, NSMutableCopying>
{
    UIColor *_titleColor;
    UIColor *_titleReadColor;
    UIColor *_subtitleColor;
    UIColor *_excerptColor;
    UIColor *_bylineColor;
    UIColor *_backgroundColor;
}

@property(copy, nonatomic) UIColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(copy, nonatomic) UIColor *bylineColor; // @synthesize bylineColor=_bylineColor;
@property(copy, nonatomic) UIColor *excerptColor; // @synthesize excerptColor=_excerptColor;
@property(copy, nonatomic) UIColor *subtitleColor; // @synthesize subtitleColor=_subtitleColor;
@property(copy, nonatomic) UIColor *titleReadColor; // @synthesize titleReadColor=_titleReadColor;
@property(copy, nonatomic) UIColor *titleColor; // @synthesize titleColor=_titleColor;
- (void).cxx_destruct;
- (_Bool)isEqual:(id)arg1;
- (id)_allThemePropertyNames;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)themeByMergingFromTheme:(id)arg1;

@end

@interface FCHistoryHeadlinesFetchOperation : FCMultiStepFetchOperation
{
    FCCloudContext *_context;
    NSArray *_readingHistoryItemIDs;
    NSArray *_readingHistoryItems;
    NSArray *_articleHeadlines;
}

@property(retain, nonatomic) NSArray *articleHeadlines; // @synthesize articleHeadlines=_articleHeadlines;
@property(retain, nonatomic) NSArray *readingHistoryItems; // @synthesize readingHistoryItems=_readingHistoryItems;
@property(retain, nonatomic) NSArray *readingHistoryItemIDs; // @synthesize readingHistoryItemIDs=_readingHistoryItemIDs;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchArticleHeadlinesWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchHistoryItemsWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 historyItemIDs:(id)arg2;

@end

@interface FCIAdConfiguration : NSObject
{
    NTPBIAdConfig *_pbConfig;
    _Bool _segmentsEnabled;
    double _segmentsThreshold;
    long long _segmentsSubmissionFrequency;
    long long _segmentsHistoryWindowInterval;
    long long _segmentsMinimumArticleCount;
}

@property(readonly, nonatomic) long long segmentsMinimumArticleCount; // @synthesize segmentsMinimumArticleCount=_segmentsMinimumArticleCount;
@property(readonly, nonatomic) long long segmentsHistoryWindowInterval; // @synthesize segmentsHistoryWindowInterval=_segmentsHistoryWindowInterval;
@property(readonly, nonatomic) long long segmentsSubmissionFrequency; // @synthesize segmentsSubmissionFrequency=_segmentsSubmissionFrequency;
@property(readonly, nonatomic) double segmentsThreshold; // @synthesize segmentsThreshold=_segmentsThreshold;
@property(readonly, nonatomic, getter=areSegmentsEnabled) _Bool segmentsEnabled; // @synthesize segmentsEnabled=_segmentsEnabled;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithPBIAdConfig:(id)arg1;

@end

@interface FCImageOnTopPremiumHeadlineTemplate : FCHeadlineTemplate
{
    NSArray *_loadableFonts;
    FCTextInfo *_headlineTitleTextInfo;
    UIColor *_titleReadColor;
    FCTextInfo *_headlineSubtitleTextInfo;
    UIColor *_backgroundColor;
}

+ (id)_defaultBackgroundColor;
+ (id)_defaultSubtitleTextColor;
+ (id)_defaultTitleTextColor;
+ (id)debug_templateForHash:(unsigned long long)arg1;
@property(copy, nonatomic) UIColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(copy, nonatomic) FCTextInfo *headlineSubtitleTextInfo; // @synthesize headlineSubtitleTextInfo=_headlineSubtitleTextInfo;
@property(readonly, copy, nonatomic) UIColor *titleReadColor; // @synthesize titleReadColor=_titleReadColor;
@property(copy, nonatomic) FCTextInfo *headlineTitleTextInfo; // @synthesize headlineTitleTextInfo=_headlineTitleTextInfo;
- (void).cxx_destruct;
- (id)loadableFonts;
- (id)headlineTheme;
- (unsigned long long)templateType;
- (id)initWithJSONDictionary:(id)arg1 versionNumber:(long long)arg2 allowNil:(_Bool)arg3;
- (id)initWithJSONDictionary:(id)arg1 versionNumber:(long long)arg2;

@end

@interface FCInterestToken : NSObject
{
    CDUnknownBlockType _removeInterestBlock;
}

+ (id)interestTokenWithRemoveInterestBlock:(CDUnknownBlockType)arg1;
@property(copy, nonatomic) CDUnknownBlockType removeInterestBlock; // @synthesize removeInterestBlock=_removeInterestBlock;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithRemoveInterestBlock:(CDUnknownBlockType)arg1;

@end

@interface FCKeyValueStore : NSObject
{
    _Bool _needSave;
    NSString *_name;
    unsigned long long _plistSize;
    NSMutableDictionary *_memoryCache;
    NSString *_storeDirectory;
    unsigned long long _oldClientVersion;
    unsigned long long _newClientVersion;
    unsigned long long _optionsMask;
    FCMutexLock *_writeLock;
}

+ (id)persistenceQueue;
@property(retain, nonatomic) FCMutexLock *writeLock; // @synthesize writeLock=_writeLock;
@property(nonatomic) unsigned long long optionsMask; // @synthesize optionsMask=_optionsMask;
@property(nonatomic) unsigned long long newClientVersion; // @synthesize newClientVersion=_newClientVersion;
@property(nonatomic) unsigned long long oldClientVersion; // @synthesize oldClientVersion=_oldClientVersion;
@property(retain, nonatomic) NSString *storeDirectory; // @synthesize storeDirectory=_storeDirectory;
@property(nonatomic) _Bool needSave; // @synthesize needSave=_needSave;
@property(retain, nonatomic) NSMutableDictionary *memoryCache; // @synthesize memoryCache=_memoryCache;
@property(nonatomic) unsigned long long plistSize; // @synthesize plistSize=_plistSize;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)setOptionBackupEnabled:(_Bool)arg1;
- (_Bool)_isBackupEnabled;
- (_Bool)_shouldMigrateOnUpgrade;
- (void)_clearStore;
- (id)_initializeStoreDirectoryWithName:(id)arg1;
- (void)_queueSave;
- (void)_logCacheStatus;
- (void)_saveAsyncWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_loadFromCache;
- (void)saveWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) unsigned long long storeSize;
- (id)allKeys;
- (_Bool)boolValueForKey:(id)arg1;
- (void)setBoolValue:(_Bool)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)updateObjectsForKeys:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)removeAllObjects;
- (void)removeObjectsForKeys:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObjects:(id)arg1 forKeys:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (_Bool)containsObjectForKey:(id)arg1;
- (id)initWithName:(id)arg1 directory:(id)arg2 version:(unsigned long long)arg3 options:(unsigned long long)arg4;
- (id)init;

@end

@interface FCKeychainStore : NSObject
{
    int _circleNotificationToken;
    NSObject<OS_dispatch_queue> *_queue;
    FCKeychainStoreItem *_cachedItem;
    NSNumber *_cachediCloudKeychainEnabled;
}

+ (id)_generateProtectionKeysItem:(id *)arg1;
+ (id)_queryDictionary;
+ (_Bool)_removeAllExistingKeys:(id *)arg1;
+ (_Bool)_addItem:(id)arg1 error:(id *)arg2;
+ (id)_fetchAllExistingKeys:(id *)arg1;
@property(nonatomic) int circleNotificationToken; // @synthesize circleNotificationToken=_circleNotificationToken;
@property(retain, nonatomic) NSNumber *cachediCloudKeychainEnabled; // @synthesize cachediCloudKeychainEnabled=_cachediCloudKeychainEnabled;
@property(retain, nonatomic) FCKeychainStoreItem *cachedItem; // @synthesize cachedItem=_cachedItem;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void).cxx_destruct;
- (id)q_uniqueExistingItem:(id *)arg1;
- (void)destroyExistingProtectionKey:(CDUnknownBlockType)arg1;
- (void)createProtectionKey:(CDUnknownBlockType)arg1;
- (void)fetchExistingProtectionKey:(CDUnknownBlockType)arg1;
- (void)isExpectingProtectionKey:(CDUnknownBlockType)arg1;
- (_Bool)iCloudKeychainEnabled;
- (id)existingProtectionKey:(id *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface FCKeychainStoreItem : NSObject
{
    NSData *_protectionKey;
    void *_persistentReference;
}

+ (id)itemWithProtectionKey:(id)arg1 error:(id *)arg2;
+ (id)itemWithQueryResult:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) void *persistentReference; // @synthesize persistentReference=_persistentReference;
@property(readonly, nonatomic) NSData *protectionKey; // @synthesize protectionKey=_protectionKey;
- (void).cxx_destruct;
- (id)description;
@property(readonly, nonatomic) NSData *valueData;
- (void)dealloc;
- (id)initWithProtectionKey:(id)arg1 persistentReference:(void *)arg2;

@end

@interface FCKeyedOperationQueue : NSObject
{
    _Bool _suspended;
    id <FCKeyedOperationQueueDelegate> _delegate;
    NSMutableOrderedSet *_mutableKeyQueue;
    NSMutableSet *_keysForExecutingOperations;
    long long _maxConcurrentOperationCount;
    NSMutableDictionary *_cancelHandlersByKey;
    NSObject<OS_dispatch_group> *_operationExecutionGroup;
}

@property(retain, nonatomic) NSObject<OS_dispatch_group> *operationExecutionGroup; // @synthesize operationExecutionGroup=_operationExecutionGroup;
@property(retain, nonatomic) NSMutableDictionary *cancelHandlersByKey; // @synthesize cancelHandlersByKey=_cancelHandlersByKey;
@property(nonatomic) long long maxConcurrentOperationCount; // @synthesize maxConcurrentOperationCount=_maxConcurrentOperationCount;
@property(retain, nonatomic) NSMutableSet *keysForExecutingOperations; // @synthesize keysForExecutingOperations=_keysForExecutingOperations;
@property(retain, nonatomic) NSMutableOrderedSet *mutableKeyQueue; // @synthesize mutableKeyQueue=_mutableKeyQueue;
@property(nonatomic, getter=isSuspended) _Bool suspended; // @synthesize suspended=_suspended;
@property(nonatomic) __weak id <FCKeyedOperationQueueDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_enqueueOperationIfNeeded;
- (void)_cancelOperationsIfNeeded;
- (void)notifyWhenAllOperationsAreFinishedWithBlock:(CDUnknownBlockType)arg1;
@property(copy, nonatomic) NSOrderedSet *keyQueue;
- (id)initWithDelegate:(id)arg1 maxConcurrentOperationCount:(long long)arg2;
- (id)init;

@end

@interface FCLoadableFont : NSObject <NSCopying>
{
    NSString *_fontName;
    NSURL *_fontURL;
}

+ (id)loadableFontWithName:(id)arg1 url:(id)arg2;
@property(retain, nonatomic) NSURL *fontURL; // @synthesize fontURL=_fontURL;
@property(copy, nonatomic) NSString *fontName; // @synthesize fontName=_fontName;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface FCLocalArticleHeadline : FCHeadline
{
    NSDictionary *_dictionary;
    NSString *_path;
    id <FCChannelProviding> _channel;
}

@property(readonly, nonatomic) id <FCChannelProviding> channel; // @synthesize channel=_channel;
@property(readonly, nonatomic) NSString *path; // @synthesize path=_path;
@property(readonly, nonatomic) NSDictionary *dictionary; // @synthesize dictionary=_dictionary;
- (void).cxx_destruct;
- (_Bool)isPremium;
- (id)localDraftPath;
- (_Bool)isFeatured;
- (id)surfacedByBinID;
- (id)surfacedByTagID;
- (_Bool)isDraft;
- (_Bool)isDeleted;
- (id)allowedStorefrontIDs;
- (id)blockedStorefrontIDs;
- (id)iAdSectionIDs;
- (id)iAdKeywords;
- (id)iAdCategories;
- (id)displayTopic;
- (_Bool)isSponsored;
- (_Bool)isFeatureCandidate;
- (id)headlineTemplate;
- (double)videoDuration;
- (id)videoURL;
- (id)highestScoringTopicIDs;
- (id)topicIDs;
- (id)lastModifiedDate;
- (unsigned long long)displayType;
- (id)contentURL;
- (id)accessoryText;
- (id)longFormExcerpt;
- (id)shortExcerpt;
- (struct CGSize)thumbnailSize;
- (id)thumbnailAssetHandle;
- (id)sourceName;
- (id)sourceChannel;
- (id)publishDate;
- (id)subtitle;
- (id)title;
- (id)primaryAudience;
- (unsigned long long)contentType;
- (id)articleID;
- (id)identifier;
- (id)initWithDictionary:(id)arg1 path:(id)arg2 channel:(id)arg3;

@end

@interface FCLocalFeedDescriptor : FCFeedDescriptor
{
    NSArray *_paths;
    id <FCFeedTheming> _feedTheme;
    id <FCChannelProviding> _channel;
}

@property(retain, nonatomic) id <FCChannelProviding> channel; // @synthesize channel=_channel;
@property(retain, nonatomic) id <FCFeedTheming> feedTheme; // @synthesize feedTheme=_feedTheme;
@property(readonly, nonatomic) NSArray *paths; // @synthesize paths=_paths;
- (void).cxx_destruct;
- (_Bool)isSubscribedTo;
- (_Bool)isSubscribable;
- (_Bool)isInboxStyleFeed;
- (id)fetchOperationForHeadlinesWithIDs:(id)arg1;
- (id)streamOfLatestHeadlines;
- (id)theme;
- (id)name;
- (long long)feedType;
- (id)initWithIdentifier:(id)arg1 articlePaths:(id)arg2 theme:(id)arg3 channel:(id)arg4;

@end

@interface FCLocalFetchOperation : FCFetchOperation
{
    NSArray *_paths;
    NSMutableArray *_headlines;
    id <FCChannelProviding> _channel;
}

@property(retain, nonatomic) id <FCChannelProviding> channel; // @synthesize channel=_channel;
@property(readonly, nonatomic) NSMutableArray *headlines; // @synthesize headlines=_headlines;
@property(readonly, nonatomic) NSArray *paths; // @synthesize paths=_paths;
- (void).cxx_destruct;
- (void)convertPathsToHeadlines;
- (void)beginExecuting;
- (id)initWithPaths:(id)arg1 andChannel:(id)arg2;

@end

@interface FCModifyRecordsCommand : FCCommand
{
    _Bool _merge;
    NSArray *_localRecords;
}

@property(nonatomic) _Bool merge; // @synthesize merge=_merge;
@property(copy, nonatomic) NSArray *localRecords; // @synthesize localRecords=_localRecords;
- (void).cxx_destruct;
- (void)handleBatchOfLocalRecords:(id)arg1 connection:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)handleLocalRecordsFromStream:(id)arg1 connection:(id)arg2 delegate:(id)arg3;
- (void)coalesceWithCommand:(id)arg1;
- (_Bool)canCoalesceWithCommand:(id)arg1;
- (void)executeWithContext:(id)arg1 delegate:(id)arg2;
- (_Bool)mergeLocalRecord:(id)arg1 withRemoteRecord:(id)arg2;
- (id)recordZoneName;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithLocalRecords:(id)arg1 merge:(_Bool)arg2;
- (id)init;

@end

@interface FCModifyHistoryCommand : FCModifyRecordsCommand
{
}

- (_Bool)mergeLocalRecord:(id)arg1 withRemoteRecord:(id)arg2;
- (id)recordZoneName;
- (id)initWithHistoryItems:(id)arg1 merge:(_Bool)arg2;

@end

@interface FCModifyReadingListCommand : FCModifyRecordsCommand
{
}

- (_Bool)mergeLocalRecord:(id)arg1 withRemoteRecord:(id)arg2;
- (id)recordZoneName;
- (id)initWithReadingListEntries:(id)arg1 merge:(_Bool)arg2;

@end

@interface FCModifySubscriptionsCommand : FCModifyRecordsCommand
{
}

- (_Bool)mergeLocalRecord:(id)arg1 withRemoteRecord:(id)arg2;
- (id)recordZoneName;
- (id)initWithSubscriptions:(id)arg1 merge:(_Bool)arg2;

@end

@interface FCModifyUserInfoCommand : FCModifyRecordsCommand
{
}

- (_Bool)mergeLocalRecord:(id)arg1 withRemoteRecord:(id)arg2;
- (id)recordZoneName;
- (id)initWithFirstLaunchVersion:(id)arg1 feldsparID:(id)arg2 dateLastOpened:(id)arg3;

@end

@interface FCMultiStepFetchOperationStep : NSObject
{
    _Bool _isCritical;
    SEL _fetchSelector;
}

@property(nonatomic) _Bool isCritical; // @synthesize isCritical=_isCritical;
@property(nonatomic) SEL fetchSelector; // @synthesize fetchSelector=_fetchSelector;

@end

@interface FCMultiTagFeedContext : NSObject
{
    NSArray *_tagIDs;
    NSDictionary *_feedIDsByTagID;
    NSDictionary *_parentIDsByTagID;
    NSDictionary *_typesByTagID;
}

+ (id)feedContextWithTags:(id)arg1 binsByTagID:(id)arg2 orphanFeedIDs:(id)arg3;
+ (id)feedContextWithTags:(id)arg1 binsByTagID:(id)arg2;
@property(retain, nonatomic) NSDictionary *typesByTagID; // @synthesize typesByTagID=_typesByTagID;
@property(retain, nonatomic) NSDictionary *parentIDsByTagID; // @synthesize parentIDsByTagID=_parentIDsByTagID;
@property(retain, nonatomic) NSDictionary *feedIDsByTagID; // @synthesize feedIDsByTagID=_feedIDsByTagID;
@property(retain, nonatomic) NSArray *tagIDs; // @synthesize tagIDs=_tagIDs;
- (void).cxx_destruct;

@end

@interface FCMultiTagFeedCursor : NSObject <FCInboxStyleFeedCursor>
{
    FCMultiTagFeedContext *_context;
    NSDictionary *_regularCursorsByTagID;
    NSDictionary *_highlightCursorsByTagID;
}

@property(copy, nonatomic) NSDictionary *highlightCursorsByTagID; // @synthesize highlightCursorsByTagID=_highlightCursorsByTagID;
@property(copy, nonatomic) NSDictionary *regularCursorsByTagID; // @synthesize regularCursorsByTagID=_regularCursorsByTagID;
@property(retain, nonatomic) FCMultiTagFeedContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic, getter=isBottomOfFeed) _Bool bottomOfFeed;
@property(readonly, nonatomic, getter=isValidBottomCursor) _Bool validBottomCursor;
@property(readonly, nonatomic, getter=isValidTopCursor) _Bool validTopCursor;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCMultiTagFeedDescriptor : FCFeedDescriptor <FCInboxStyleFeed>
{
}

- (id)_articleKeysMappingToTag;
- (id)_tagFeedRequestForTagID:(id)arg1 feedContext:(id)arg2;
- (long long)inboxFilterOptions;
- (long long)inboxSortMethod;
- (void)fetchPinnedFeedItemsWithQualityOfService:(long long)arg1 testBlock:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchBatchOfFeedItemsFromCursor:(id)arg1 toCursor:(id)arg2 minCount:(unsigned long long)arg3 qualityOfService:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (id)_highlightFeedRequestsWithFeedContext:(id)arg1 tags:(id)arg2 toCursor:(id)arg3 resultsLimit:(unsigned long long *)arg4;
- (id)_regularFeedRequestsWithFeedContext:(id)arg1 toCursor:(id)arg2 resultsLimit:(unsigned long long *)arg3;
- (void)fetchBatchOfFeedItemsUpToCursor:(id)arg1 qualityOfService:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)supportsExploration;
- (_Bool)supportsHighlights;
- (unsigned long long)preferredFeedItemBatchSize;
- (void)fetchPinnedArticleIDsWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchCurrentFeedContextWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)isInboxStyleFeed;
- (id)name;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCMultiTagFeedQueryOperation : FCOperation
{
    FCCloudContext *_context;
    unsigned long long _resultsLimit;
    NSArray *_tagFeedRequests;
    long long _sortingFunction;
    NSArray *_articleKeysMappingToTag;
    CDUnknownBlockType _queryCompletionHandler;
    FCMultiTagFeedQueryResult *_queryResult;
    NSError *_queryError;
}

@property(retain, nonatomic) NSError *queryError; // @synthesize queryError=_queryError;
@property(retain, nonatomic) FCMultiTagFeedQueryResult *queryResult; // @synthesize queryResult=_queryResult;
@property(copy, nonatomic) CDUnknownBlockType queryCompletionHandler; // @synthesize queryCompletionHandler=_queryCompletionHandler;
@property(copy, nonatomic) NSArray *articleKeysMappingToTag; // @synthesize articleKeysMappingToTag=_articleKeysMappingToTag;
@property(nonatomic) long long sortingFunction; // @synthesize sortingFunction=_sortingFunction;
@property(retain, nonatomic) NSArray *tagFeedRequests; // @synthesize tagFeedRequests=_tagFeedRequests;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)_desiredKeys;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;

@end

@interface FCMultiTagFeedQueryResult : NSObject
{
    NSArray *_tagFeedResponses;
    NSArray *_allFeedItems;
}

@property(copy, nonatomic) NSArray *allFeedItems; // @synthesize allFeedItems=_allFeedItems;
@property(copy, nonatomic) NSArray *tagFeedResponses; // @synthesize tagFeedResponses=_tagFeedResponses;
- (void).cxx_destruct;
- (_Bool)fulfilledAllRequests:(id)arg1;
- (id)bottomCursorsByTagIDForRequests:(id)arg1;
- (id)topCursorsByTagIDForRequests:(id)arg1;
- (id)feedItemsForRequests:(id)arg1;

@end

@interface FCPair : NSObject <NSCopying, NSMutableCopying, NSCoding>
{
    id mFirst;
    id mSecond;
}

+ (id)pair;
+ (id)pairWithPair:(id)arg1;
+ (id)pairWithFirst:(id)arg1 second:(id)arg2;
- (void).cxx_destruct;
- (void)p_SetSecond:(id)arg1;
- (void)p_SetFirst:(id)arg1;
- (id)second;
- (id)first;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithPair:(id)arg1;
- (id)initWithFirst:(id)arg1 second:(id)arg2;

@end

@interface FCMutablePair : FCPair
{
}

- (void)setSecond:(id)arg1;
- (void)setFirst:(id)arg1;

@end

@interface FCShallowCopyPair : FCPair
{
}

- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface FCMutableShallowCopyPair : FCShallowCopyPair
{
}

- (void)setSecond:(id)arg1;
- (void)setFirst:(id)arg1;

@end

@interface FCMutexLock : NSObject <FCLocking>
{
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } _lock;
}

- (void)unlock;
- (void)lock;
- (void)performWithLockSync:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithOptions:(unsigned long long)arg1;
- (id)init;

@end

@interface FCNetworkReachability : NSObject
{
    _Bool _isNetworkReachable;
    _Bool _isNetworkReachableViaWiFi;
    _Bool _isNetworkReachableViaCellular;
    _Bool _isCloudKitAccessAllowed;
    _Bool _accessRestrictedBecauseOfAppVersion;
    _Bool _accessRestrictedBecauseOfOSVersion;
    _Bool _accessRestrictedBecauseOfCountry;
    _Bool _accessRestrictedBecauseOfDeviceAbandoned;
    long long _offlineReason;
    NSHashTable *_observers;
    NSString *_currentRadioAccessTechnology;
    Reachability *_internetReachability;
}

+ (id)sharedNetworkReachability;
@property(retain, nonatomic) Reachability *internetReachability; // @synthesize internetReachability=_internetReachability;
@property(retain, nonatomic) NSString *currentRadioAccessTechnology; // @synthesize currentRadioAccessTechnology=_currentRadioAccessTechnology;
@property(nonatomic) _Bool accessRestrictedBecauseOfDeviceAbandoned; // @synthesize accessRestrictedBecauseOfDeviceAbandoned=_accessRestrictedBecauseOfDeviceAbandoned;
@property(nonatomic) _Bool accessRestrictedBecauseOfCountry; // @synthesize accessRestrictedBecauseOfCountry=_accessRestrictedBecauseOfCountry;
@property(nonatomic) _Bool accessRestrictedBecauseOfOSVersion; // @synthesize accessRestrictedBecauseOfOSVersion=_accessRestrictedBecauseOfOSVersion;
@property(nonatomic) _Bool accessRestrictedBecauseOfAppVersion; // @synthesize accessRestrictedBecauseOfAppVersion=_accessRestrictedBecauseOfAppVersion;
@property(nonatomic) _Bool isCloudKitAccessAllowed; // @synthesize isCloudKitAccessAllowed=_isCloudKitAccessAllowed;
@property(retain, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(nonatomic) long long offlineReason; // @synthesize offlineReason=_offlineReason;
@property(nonatomic) _Bool isNetworkReachableViaCellular; // @synthesize isNetworkReachableViaCellular=_isNetworkReachableViaCellular;
@property(nonatomic) _Bool isNetworkReachableViaWiFi; // @synthesize isNetworkReachableViaWiFi=_isNetworkReachableViaWiFi;
@property(nonatomic) _Bool isNetworkReachable; // @synthesize isNetworkReachable=_isNetworkReachable;
- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool isCloudKitReachable;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)_reachabilityChanged:(id)arg1;
- (void)_updateReachability;
@property(readonly, nonatomic) _Bool isNetworkOnlyReachableViaCellular;
@property(readonly, nonatomic) NSString *cellularRadioAccessTechnology;
- (void)dealloc;
- (id)init;

@end

@interface FCNonDestructivePrivateDataMigrationHandler : NSObject
{
    id <FCNonDestructivePrivateDataActionProvider> _privateDataActionProvider;
    NSArray *_privateZoneControllers;
}

@property(copy, nonatomic) NSArray *privateZoneControllers; // @synthesize privateZoneControllers=_privateZoneControllers;
@property(retain, nonatomic) id <FCNonDestructivePrivateDataActionProvider> privateDataActionProvider; // @synthesize privateDataActionProvider=_privateDataActionProvider;
- (void).cxx_destruct;
- (void)handleMigration;
- (id)initWithPrivateDataActionProvider:(id)arg1 privateZoneControllers:(id)arg2;
- (id)init;

@end

@interface FCOfflineArticleFetchOperation : FCMultiStepFetchOperation
{
    FCCloudContext *_context;
    NSString *_articleID;
    id _headlineFetchedObject;
    id _classificationFetchedObject;
    id _contentFetchedObject;
}

@property(retain, nonatomic) id contentFetchedObject; // @synthesize contentFetchedObject=_contentFetchedObject;
@property(retain, nonatomic) id classificationFetchedObject; // @synthesize classificationFetchedObject=_classificationFetchedObject;
@property(retain, nonatomic) id headlineFetchedObject; // @synthesize headlineFetchedObject=_headlineFetchedObject;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchContentWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchClassificationWithCompletion:(CDUnknownBlockType)arg1;
- (id)fetchHeadlineWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 articleID:(id)arg2;

@end

@interface FCOnceOperation : NSObject
{
    _Bool _finished;
    FCMutexLock *_lock;
}

@property(retain, nonatomic) FCMutexLock *lock; // @synthesize lock=_lock;
@property(nonatomic) _Bool finished; // @synthesize finished=_finished;
- (void).cxx_destruct;
- (void)executeOnce:(CDUnknownBlockType)arg1;
- (id)initWithOptions:(unsigned long long)arg1;
- (id)init;

@end

@interface FCOperationThrottler : NSObject
{
    NSObject<OS_dispatch_source> *_dispatchSource;
    NSObject<OS_dispatch_queue> *_serialDispatchQueue;
}

- (void).cxx_destruct;
- (void)tickle;
- (void)tickleWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithDelegate:(id)arg1;

@end

@interface FCPairNonRetainedSecond : FCPair
{
}

- (void)p_SetSecond:(id)arg1;

@end

@interface FCParallelCloudPerformanceTest : NSObject
{
    NSArray *_tests;
}

+ (id)testWithTests:(id)arg1;
- (void).cxx_destruct;
- (void)performWithDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;

@end

@interface FCPersonalizationConfiguration : NSObject
{
    NTPBPersonalizationConfig *_pbConfig;
    _Bool _binningEnabled;
    long long _binningEvaluationFrequency;
    long long _binningHistoryLength;
    double _binningIncreaseConsumptionThreshold;
    double _binningDecreaseConsumptionThreshold;
    long long _binningMinimumArticleCount;
}

@property(readonly, nonatomic) long long binningMinimumArticleCount; // @synthesize binningMinimumArticleCount=_binningMinimumArticleCount;
@property(readonly, nonatomic) double binningDecreaseConsumptionThreshold; // @synthesize binningDecreaseConsumptionThreshold=_binningDecreaseConsumptionThreshold;
@property(readonly, nonatomic) double binningIncreaseConsumptionThreshold; // @synthesize binningIncreaseConsumptionThreshold=_binningIncreaseConsumptionThreshold;
@property(readonly, nonatomic) long long binningHistoryLength; // @synthesize binningHistoryLength=_binningHistoryLength;
@property(readonly, nonatomic) long long binningEvaluationFrequency; // @synthesize binningEvaluationFrequency=_binningEvaluationFrequency;
@property(readonly, nonatomic, getter=isBinningEnabled) _Bool binningEnabled; // @synthesize binningEnabled=_binningEnabled;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithPBPersonalizationConfig:(id)arg1;

@end

@interface FCPrefetchConfiguration : NSObject
{
    NTPBPrefetchConfig *_pbConfig;
    _Bool _backgroundFetchEnabled;
    _Bool _shouldPrefetchForYouFeed;
    double _minimumBackgroundFetchInterval;
    unsigned long long _maximumFavoritesFeedsToPrefetch;
}

@property(readonly, nonatomic) unsigned long long maximumFavoritesFeedsToPrefetch; // @synthesize maximumFavoritesFeedsToPrefetch=_maximumFavoritesFeedsToPrefetch;
@property(readonly, nonatomic) _Bool shouldPrefetchForYouFeed; // @synthesize shouldPrefetchForYouFeed=_shouldPrefetchForYouFeed;
@property(readonly, nonatomic) double minimumBackgroundFetchInterval; // @synthesize minimumBackgroundFetchInterval=_minimumBackgroundFetchInterval;
@property(readonly, nonatomic, getter=isBackgroundFetchEnabled) _Bool backgroundFetchEnabled; // @synthesize backgroundFetchEnabled=_backgroundFetchEnabled;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithPBPrefetchConfig:(id)arg1;
- (id)initWithDefaults;

@end

@interface FCPrivateZoneController : NSObject
{
    _Bool _dirty;
    _Bool _preparedForUse;
    _Bool _syncingEnabled;
    FCCKRecordZone *_recordZone;
    FCCloudContext *_context;
    NSHashTable *_observers;
    FCKeyValueStore *_localStore;
    FCPushNotificationCenter *_pushNotificationCenter;
    NSString *_storeDirectory;
    FCCommandQueue *_commandQueue;
    unsigned long long _dirtyCount;
    unsigned long long _changeCount;
    FCAsyncSerialQueue *_syncQueue;
    NSHashTable *_stateObservers;
}

+ (_Bool)isLocalStoreKeyInternal:(id)arg1;
+ (id)internalLocalStoreKeys;
+ (id)desiredKeys;
+ (id)commandToMergeLocalDataToCloud:(id)arg1;
+ (long long)commandQueueUrgency;
+ (id)commandStoreFileName;
+ (unsigned long long)localStoreVersion;
+ (id)localStoreFilename;
+ (_Bool)requiresHighPriorityFirstSync;
+ (_Bool)requiresBatchedSync;
+ (_Bool)requiresPushNotificationSupport;
@property(nonatomic, getter=isSyncingEnabled) _Bool syncingEnabled; // @synthesize syncingEnabled=_syncingEnabled;
@property(retain, nonatomic) NSHashTable *stateObservers; // @synthesize stateObservers=_stateObservers;
@property(retain, nonatomic) FCAsyncSerialQueue *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(nonatomic) unsigned long long changeCount; // @synthesize changeCount=_changeCount;
@property(nonatomic) unsigned long long dirtyCount; // @synthesize dirtyCount=_dirtyCount;
@property(nonatomic, getter=hasBeenPreparedForUse) _Bool preparedForUse; // @synthesize preparedForUse=_preparedForUse;
@property(retain, nonatomic) FCCommandQueue *commandQueue; // @synthesize commandQueue=_commandQueue;
@property(copy, nonatomic) NSString *storeDirectory; // @synthesize storeDirectory=_storeDirectory;
@property(retain, nonatomic) FCPushNotificationCenter *pushNotificationCenter; // @synthesize pushNotificationCenter=_pushNotificationCenter;
@property(readonly, nonatomic) FCKeyValueStore *localStore; // @synthesize localStore=_localStore;
@property(readonly, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(readonly, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(nonatomic, getter=isDirty) _Bool dirty; // @synthesize dirty=_dirty;
@property(retain, nonatomic) FCCKRecordZone *recordZone; // @synthesize recordZone=_recordZone;
- (void).cxx_destruct;
- (void)_serialSyncWithCompletion:(CDUnknownBlockType)arg1;
- (void)_markAsClean;
- (void)_markAsDirty;
- (void)loadLocalCachesFromStore;
- (void)handleSyncWithChangedRecords:(id)arg1 deletedRecordIDs:(id)arg2;
- (void)forceSyncWithCompletion:(CDUnknownBlockType)arg1;
- (void)addCommandToCommandQueue:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)removeStateObserver:(id)arg1;
- (void)addStateObserver:(id)arg1;
- (void)saveWithCompletion:(CDUnknownBlockType)arg1;
- (void)syncWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1 recordZone:(id)arg2 storeDirectory:(id)arg3;
- (id)init;
- (void)prepareForUse;
- (void)mergeLocalStoreWithCloud;
- (void)createLocalStore;
- (void)disableSyncing;
- (void)enableSyncing;

@end

@interface FCPrivateChannelMembershipController : FCPrivateZoneController
{
    NSDictionary *_membershipsByChannelID;
    NSMutableSet *_membershipReferences;
}

+ (id)desiredKeys;
+ (id)commandToMergeLocalDataToCloud:(id)arg1;
+ (long long)commandQueueUrgency;
+ (id)commandStoreFileName;
+ (unsigned long long)localStoreVersion;
+ (id)localStoreFilename;
+ (_Bool)requiresHighPriorityFirstSync;
+ (_Bool)requiresBatchedSync;
+ (_Bool)requiresPushNotificationSupport;
@property(retain, nonatomic) NSMutableSet *membershipReferences; // @synthesize membershipReferences=_membershipReferences;
@property(retain, nonatomic) NSDictionary *membershipsByChannelID; // @synthesize membershipsByChannelID=_membershipsByChannelID;
- (void).cxx_destruct;
- (void)changedMembershipsFrom:(id)arg1 toMemberships:(id)arg2;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)referenceToMembershipForMembershipID:(id)arg1;
- (void)handleSyncWithChangedRecords:(id)arg1 deletedRecordIDs:(id)arg2;
- (void)refreshPublicMemberships;
- (void)fetchMembershipsWithIDs:(id)arg1 queue:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)removeItemWithItemID:(id)arg1;
- (void)addItem:(id)arg1 toStore:(_Bool)arg2;
- (void)loadLocalCachesFromStore;
- (_Bool)hasMemberships;
- (void)isAllowedToSeeArticleID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)checkNextArticleID:(id)arg1 inFeedDescriptors:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)checkArticleID:(id)arg1 inFeedDescriptors:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (id)feedDescriptorForDraftFeedForChannelID:(id)arg1;
- (_Bool)isAllowedToSeeDraftsForChannelID:(id)arg1;
- (_Bool)isMemberOfChannelID:(id)arg1;

@end

@interface FCPrivateDataStorage : NSObject
{
    FCSubscriptionList *_subscriptionList;
    FCReadingHistory *_readingHistory;
    FCReadingList *_readingList;
    FCPrivateChannelMembershipController *_privateChannelMembershipController;
    FCUserInfo *_userInfo;
    NSString *_rootDirectory;
}

@property(copy, nonatomic) NSString *rootDirectory; // @synthesize rootDirectory=_rootDirectory;
@property(readonly, nonatomic) FCUserInfo *userInfo; // @synthesize userInfo=_userInfo;
@property(readonly, nonatomic) FCPrivateChannelMembershipController *privateChannelMembershipController; // @synthesize privateChannelMembershipController=_privateChannelMembershipController;
@property(readonly, nonatomic) FCReadingList *readingList; // @synthesize readingList=_readingList;
@property(readonly, nonatomic) FCReadingHistory *readingHistory; // @synthesize readingHistory=_readingHistory;
@property(readonly, nonatomic) FCSubscriptionList *subscriptionList; // @synthesize subscriptionList=_subscriptionList;
- (void).cxx_destruct;
- (id)privateStoreWithName:(id)arg1 version:(unsigned long long)arg2 options:(unsigned long long)arg3;
- (id)initWithContext:(id)arg1 privateDataActionProvider:(id)arg2 rootDirectory:(id)arg3;
- (id)init;

@end

@interface FCPrivateZoneFeedDescriptor : FCFeedDescriptor
{
}

- (id)backingHeadlineIDs;
- (id)privateZoneController;
- (id)streamOfLatestHeadlines;

@end

@interface FCPushNotificationCenter : NSObject
{
    FCCloudKitConnection *_connection;
    FCAsyncSerialQueue *_fetchQueue;
    NSMutableDictionary *_subscriptionsByID;
    NSMapTable *_recordZoneObservers;
}

@property(retain, nonatomic) NSMapTable *recordZoneObservers; // @synthesize recordZoneObservers=_recordZoneObservers;
@property(retain, nonatomic) NSMutableDictionary *subscriptionsByID; // @synthesize subscriptionsByID=_subscriptionsByID;
@property(retain, nonatomic) FCAsyncSerialQueue *fetchQueue; // @synthesize fetchQueue=_fetchQueue;
@property(retain, nonatomic) FCCloudKitConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (void)deleteSubscriptionWithID:(id)arg1 inDatabase:(id)arg2;
- (void)ensureSubscriptionExistsWithID:(id)arg1 database:(id)arg2 recordZone:(id)arg3 createBlock:(CDUnknownBlockType)arg4;
- (void)fetchAllSubscriptionsInDatabase:(id)arg1;
- (id)subscriptionIDForRecordZoneWithName:(id)arg1;
- (id)_handleRecordZoneNotification:(id)arg1;
- (id)handleRemoteNotification:(id)arg1;
- (void)removeSubscriptionForChangesToRecordZone:(id)arg1;
- (void)removeRecordZoneObserver:(id)arg1;
- (void)addObserver:(id)arg1 forChangesToRecordZone:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)initWithCloudKitConnection:(id)arg1;

@end

@interface FCQueryPerformanceTest : NSObject
{
    CKQuery *_query;
    unsigned long long _limit;
}

+ (id)testWithFunction:(unsigned long long)arg1 arguments:(id)arg2 limit:(unsigned long long)arg3;
- (void).cxx_destruct;
- (void)performWithDatabase:(id)arg1 completion:(CDUnknownBlockType)arg2;

@end

@interface FCReadWriteLock : NSObject <FCLocking>
{
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
}

- (void)lock;
- (void)unlock;
- (void)writeLock;
- (void)readLock;
- (void)performWriteSync:(CDUnknownBlockType)arg1;
- (void)performReadSync:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

@end

@interface FCReadingHistory : FCPrivateZoneController
{
    NSMutableDictionary *_itemsByIdentifier;
}

+ (id)commandToMergeLocalDataToCloud:(id)arg1;
+ (long long)commandQueueUrgency;
+ (id)commandStoreFileName;
+ (unsigned long long)localStoreVersion;
+ (id)localStoreFilename;
+ (_Bool)requiresHighPriorityFirstSync;
+ (_Bool)requiresBatchedSync;
+ (_Bool)requiresPushNotificationSupport;
+ (id)desiredKeys;
@property(retain, nonatomic) NSMutableDictionary *itemsByIdentifier; // @synthesize itemsByIdentifier=_itemsByIdentifier;
- (void).cxx_destruct;
- (void)_removeHistoryItemWithItemID:(id)arg1;
- (void)_addHistoryItems:(id)arg1 addToStore:(_Bool)arg2;
- (void)_modifyHistoryForArticleID:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (id)_readingHistoryItemForArticleID:(id)arg1;
- (void)clearHistory;
- (void)addArticleIDToHistory:(id)arg1;
- (void)markArticle:(id)arg1 asOffensive:(_Bool)arg2;
- (_Bool)toggleArticleHasBeenMarkedAsOffensive:(id)arg1;
- (_Bool)hasArticleBeenMarkedAsOffensive:(id)arg1;
- (void)markArticle:(id)arg1 withLikingStatus:(unsigned long long)arg2;
- (unsigned long long)likingStatusForArticleID:(id)arg1;
- (void)markArticle:(id)arg1 asArticleSeen:(_Bool)arg2;
- (_Bool)toggleArticleHasBeenSeen:(id)arg1;
- (_Bool)hasArticleBeenSeen:(id)arg1;
- (_Bool)hasArticleBeenVisited:(id)arg1;
- (void)markArticle:(id)arg1 asVisited:(_Bool)arg2;
- (void)markArticle:(id)arg1 asArticleRead:(_Bool)arg2;
- (_Bool)toggleArticleHasBeenRead:(id)arg1;
- (_Bool)hasArticleBeenRead:(id)arg1;
- (id)lastVisitedDateForArticleID:(id)arg1;
- (id)historyItemsForIDs:(id)arg1;
- (id)historyItemForID:(id)arg1;
- (id)allSortedItemIDsInReadingHistory;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)handleSyncWithChangedRecords:(id)arg1 deletedRecordIDs:(id)arg2;
- (void)loadLocalCachesFromStore;
- (id)syncReadingHistoryItemRecords:(id)arg1;

@end

@interface FCReadingHistoryArticleHeadline : FCArticleHeadline <FCVisitableItemProviding>
{
    FCReadingHistoryItem *_readingHistoryItem;
}

@property(retain, nonatomic) FCReadingHistoryItem *readingHistoryItem; // @synthesize readingHistoryItem=_readingHistoryItem;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSDate *lastVisitedAt;
- (id)identifier;
- (id)initWithArticleRecordWrapper:(id)arg1 sourceChannel:(id)arg2 displayTopic:(id)arg3 readingHistoryItem:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCReadingHistoryFeedDescriptor : FCPrivateZoneFeedDescriptor
{
}

- (id)fetchOperationForHeadlinesWithIDs:(id)arg1;
- (id)backingHeadlineIDs;
- (id)privateZoneController;
- (id)name;

@end

@interface FCReadingHistoryItem : NSObject
{
    _Bool _hasArticleBeenRead;
    _Bool _hasArticleBeenSeen;
    _Bool _hasArticleBeenMarkedOffensive;
    NSString *_identifier;
    NSString *_articleID;
    NSDate *_lastVisitedAt;
    unsigned long long _articleLikingStatus;
}

+ (id)fc_historyItemWithID:(id)arg1 dictionary:(id)arg2;
@property(nonatomic) unsigned long long articleLikingStatus; // @synthesize articleLikingStatus=_articleLikingStatus;
@property(nonatomic) _Bool hasArticleBeenMarkedOffensive; // @synthesize hasArticleBeenMarkedOffensive=_hasArticleBeenMarkedOffensive;
@property(nonatomic) _Bool hasArticleBeenSeen; // @synthesize hasArticleBeenSeen=_hasArticleBeenSeen;
@property(nonatomic) _Bool hasArticleBeenRead; // @synthesize hasArticleBeenRead=_hasArticleBeenRead;
@property(copy, nonatomic) NSDate *lastVisitedAt; // @synthesize lastVisitedAt=_lastVisitedAt;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)initWithRecord:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)init;
- (id)fc_dictionaryRepresentation;

@end

@interface FCReadingList : FCPrivateZoneController <FCReadingListContentControllerObserving>
{
    NSMutableDictionary *_entriesByArticleID;
    FCReadingListContentController *_readingListContentController;
}

+ (id)commandToMergeLocalDataToCloud:(id)arg1;
+ (long long)commandQueueUrgency;
+ (id)commandStoreFileName;
+ (unsigned long long)localStoreVersion;
+ (id)localStoreFilename;
+ (_Bool)requiresHighPriorityFirstSync;
+ (_Bool)requiresBatchedSync;
+ (_Bool)requiresPushNotificationSupport;
+ (id)desiredKeys;
@property(retain, nonatomic) FCReadingListContentController *readingListContentController; // @synthesize readingListContentController=_readingListContentController;
@property(retain, nonatomic) NSMutableDictionary *entriesByArticleID; // @synthesize entriesByArticleID=_entriesByArticleID;
- (void).cxx_destruct;
- (void)_addedArticleIDs:(id)arg1 removedArticleIDs:(id)arg2;
- (id)_entryIDForArticleID:(id)arg1;
- (void)readingListContentControllerDidUpdateArticleAvailabilityInOfflineMode:(id)arg1;
- (void)handleSyncWithChangedRecords:(id)arg1 deletedRecordIDs:(id)arg2;
- (void)loadLocalCachesFromStore;
- (void)notifyWhenFinishedDownloadingForOfflineReadingWithTimeout:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)isArticleAvailableForOfflineReading:(id)arg1;
- (void)enableDownloadingForOfflineReading;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)allSortedArticlesInReadingList;
- (id)dateArticleWasAdded:(id)arg1;
- (void)toggleArticleIsOnReadingList:(id)arg1;
- (void)removeArticleFromReadingList:(id)arg1;
- (void)addArticleToReadingList:(id)arg1;
- (_Bool)isArticleOnReadingList:(id)arg1;
- (void)prepareForUse;
- (id)initWithContext:(id)arg1 recordZone:(id)arg2 storeDirectory:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCReadingListContentController : NSObject <FCKeyedOperationQueueDelegate, FCOperationThrottlerDelegate, FCNetworkReachabilityObserving>
{
    _Bool _hasBeenEnabled;
    id <FCReadingListContentControllerObserving> observer;
    NSArray *_allSortedArticlesInReadingList;
    NSArray *_articleIDsOfInterest;
    NSDictionary *_holdInterestTokensByArticleID;
    FCKeyedOperationQueue *_articleContentDownloadKeyQueue;
    FCOperationThrottler *_updateHoldInterestTokensThrottler;
    NSObject<OS_dispatch_queue> *_updateHoldInterestTokensQueue;
    NSMutableDictionary *_outstandingOperationsByArticleID;
    FCCloudContext *_context;
    NSObject<OS_dispatch_group> *_articleContentDownloadGroup;
    NSMutableSet *_fetchResults;
}

@property(nonatomic) _Bool hasBeenEnabled; // @synthesize hasBeenEnabled=_hasBeenEnabled;
@property(retain, nonatomic) NSMutableSet *fetchResults; // @synthesize fetchResults=_fetchResults;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *articleContentDownloadGroup; // @synthesize articleContentDownloadGroup=_articleContentDownloadGroup;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(retain, nonatomic) NSMutableDictionary *outstandingOperationsByArticleID; // @synthesize outstandingOperationsByArticleID=_outstandingOperationsByArticleID;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *updateHoldInterestTokensQueue; // @synthesize updateHoldInterestTokensQueue=_updateHoldInterestTokensQueue;
@property(retain, nonatomic) FCOperationThrottler *updateHoldInterestTokensThrottler; // @synthesize updateHoldInterestTokensThrottler=_updateHoldInterestTokensThrottler;
@property(retain, nonatomic) FCKeyedOperationQueue *articleContentDownloadKeyQueue; // @synthesize articleContentDownloadKeyQueue=_articleContentDownloadKeyQueue;
@property(copy, nonatomic) NSDictionary *holdInterestTokensByArticleID; // @synthesize holdInterestTokensByArticleID=_holdInterestTokensByArticleID;
@property(copy, nonatomic) NSArray *articleIDsOfInterest; // @synthesize articleIDsOfInterest=_articleIDsOfInterest;
@property(copy, nonatomic) NSArray *allSortedArticlesInReadingList; // @synthesize allSortedArticlesInReadingList=_allSortedArticlesInReadingList;
@property(nonatomic) __weak id <FCReadingListContentControllerObserving> observer; // @synthesize observer;
- (void).cxx_destruct;
- (void)_fetchHoldInterestTokensForArticleIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_updateInterestsIfNeeded;
- (void)operationThrottler:(id)arg1 performAsyncOperationWithCompletion:(CDUnknownBlockType)arg2;
- (void)networkReachabilityDidChange:(id)arg1;
- (id)keyedOperationQueue:(id)arg1 performAsyncOperationForKey:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)notifyWhenFinishedDownloadingForOfflineReadingWithTimeout:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)isArticleAvailableForOfflineReading:(id)arg1;
- (void)enableDownloadingForOfflineReading;
- (void)dealloc;
- (id)initWithContext:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCReadingListEntry : NSObject
{
    NSString *_identifier;
    NSString *_articleID;
    NSDate *_dateAdded;
}

@property(readonly, nonatomic) NSDate *dateAdded; // @synthesize dateAdded=_dateAdded;
@property(readonly, copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(readonly, copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)initWithEntryID:(id)arg1 articleID:(id)arg2 dateAdded:(id)arg3;
- (id)dictionaryRepresentation;
- (id)initWithEntryID:(id)arg1 dictionaryRepresentation:(id)arg2;

@end

@interface FCReadingListFeedDescriptor : FCPrivateZoneFeedDescriptor
{
}

- (id)backingHeadlineIDs;
- (id)privateZoneController;
- (id)name;

@end

@interface FCRecommendedCategory : NSObject
{
    NSString *_identifier;
    NSString *_name;
    NSArray *_topicTagIDs;
    NSArray *_channelTagIDs;
    NSArray *_subcategories;
}

@property(readonly, nonatomic) NSArray *subcategories; // @synthesize subcategories=_subcategories;
@property(readonly, nonatomic) NSArray *channelTagIDs; // @synthesize channelTagIDs=_channelTagIDs;
@property(readonly, nonatomic) NSArray *topicTagIDs; // @synthesize topicTagIDs=_topicTagIDs;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithIdentifier:(id)arg1 name:(id)arg2 topicTagIDs:(id)arg3 channelTagIDs:(id)arg4 subcategories:(id)arg5;

@end

@interface FCRecordSourceFetchContext : NSObject
{
    _Bool _refresh;
    unsigned long long _cachePolicy;
    double _maxCachedAge;
}

@property(nonatomic) double maxCachedAge; // @synthesize maxCachedAge=_maxCachedAge;
@property(nonatomic) unsigned long long cachePolicy; // @synthesize cachePolicy=_cachePolicy;
@property(nonatomic) _Bool refresh; // @synthesize refresh=_refresh;

@end

@interface FCRecordWrapperFetchOperation : FCFetchOperation
{
    FCRecordSource *_recordSource;
    NSString *_recordWrapperID;
    FCRecordWrappersFetchOperation *_childOperation;
    _Bool _shouldDownloadAssets;
}

@property _Bool shouldDownloadAssets; // @synthesize shouldDownloadAssets=_shouldDownloadAssets;
- (void).cxx_destruct;
- (void)cancel;
- (void)beginExecuting;
- (id)initWithRecordSource:(id)arg1 recordWrapperID:(id)arg2;

@end

@interface FCRecordWrappersFetchOperation : FCFetchOperation
{
    FCRecordSource *_recordSource;
    NSArray *_recordWrapperIDs;
    NSDictionary *_holdTokens;
    FCInterestToken *_fetchToken;
    FCInterestToken *_refreshToken;
    NSArray *_assetOperations;
    _Bool _shouldDownloadAssets;
}

@property _Bool shouldDownloadAssets; // @synthesize shouldDownloadAssets=_shouldDownloadAssets;
- (void).cxx_destruct;
- (void)didFinishExecuting;
- (void)cancel;
- (void)beginExecuting;
- (id)initWithRecordSource:(id)arg1 recordWrapperIDs:(id)arg2;

@end

@interface FCReferenceToMembership : NSObject
{
    NSString *_identifier;
    NSString *_membershipID;
}

@property(readonly, nonatomic) NSString *membershipID; // @synthesize membershipID=_membershipID;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)dictionaryRepresentation;
- (id)initWithIdentifier:(id)arg1 dictionaryRepresentation:(id)arg2;
- (id)initWithRecord:(id)arg1;
- (id)initWithIdentifier:(id)arg1;

@end

@interface FCRemoteDefaults : NSObject
{
    FCThreadSafeMutableDictionary *_remoteDefaults;
}

+ (id)sharedDefaults;
- (void).cxx_destruct;
- (void)processResponse:(id)arg1 data:(id)arg2 error:(id)arg3;
- (id)URLRequest;
- (void)updateRemoteDefaults;
- (void)checkForUpdate;
- (id)dictionaryForKey:(id)arg1;
- (id)URLForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initInternal;

@end

@interface FCRemoveRecordsCommand : FCCommand
{
    NSArray *_recordIDs;
}

@property(copy, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
- (void).cxx_destruct;
- (void)coalesceWithCommand:(id)arg1;
- (_Bool)canCoalesceWithCommand:(id)arg1;
- (void)handleBatchOfRecordIDs:(id)arg1 connection:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)handleRecordIDsFromStream:(id)arg1 connection:(id)arg2 delegate:(id)arg3;
- (void)executeWithContext:(id)arg1 delegate:(id)arg2;
- (id)recordZoneName;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithRecordIDs:(id)arg1;
- (id)init;

@end

@interface FCRemoveFromReadingListCommand : FCRemoveRecordsCommand
{
}

- (id)recordZoneName;
- (id)initWithEntryID:(id)arg1;

@end

@interface FCRemoveHistoryCommand : FCRemoveRecordsCommand
{
}

- (id)recordZoneName;
- (id)initWithHistoryItemIDs:(id)arg1;

@end

@interface FCRemoveReferenceToChannelMembershipCommand : FCRemoveRecordsCommand
{
}

- (id)recordZoneName;
- (id)initWithReferenceToChannelMembershipID:(id)arg1;

@end

@interface FCRemoveSubscriptionCommand : FCRemoveRecordsCommand
{
}

- (id)recordZoneName;
- (id)initWithSubscriptionID:(id)arg1;

@end

@interface FCReplacePendingSubscriptionCommand : FCCommand
{
    NSString *_pendingSubscriptionID;
    NSString *_tagSubscriptionID;
    NSString *_tagID;
}

@property(copy, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;
@property(copy, nonatomic) NSString *tagSubscriptionID; // @synthesize tagSubscriptionID=_tagSubscriptionID;
@property(copy, nonatomic) NSString *pendingSubscriptionID; // @synthesize pendingSubscriptionID=_pendingSubscriptionID;
- (void).cxx_destruct;
- (void)executeWithContext:(id)arg1 delegate:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPendingSubscription:(id)arg1 tagSubscription:(id)arg2;

@end

@interface FCResource : NSObject
{
    FCResourceRecordWrapper *_recordWrapper;
}

@property(retain, nonatomic) FCResourceRecordWrapper *recordWrapper; // @synthesize recordWrapper=_recordWrapper;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSURL *fileURL;
@property(readonly, nonatomic) FCAssetHandle *assetHandle;
@property(readonly, nonatomic) NSString *mimeType;
@property(readonly, nonatomic) NSString *resourceID;
- (id)initWithRecordWrapper:(id)arg1;

@end

@interface FCResourceRecordSource : FCRecordSource
{
}

+ (unsigned long long)dataSizeLimit;
+ (unsigned long long)storeVersion;
+ (id)storeFilename;
+ (Class)recordWrapperClass;
+ (id)desiredKeys;
+ (id)recordType;
- (void)removeHoldInterestInResourceWithID:(id)arg1;
- (void)addHoldInterestInResourceWithID:(id)arg1;
- (id)fetchOperationForResourcesWithIDs:(id)arg1;

@end

@interface FCResourceRecordWrapper : FCRecordWrapper
{
    NSString *_resourceID;
    NSString *_type;
    NSString *_encoding;
    FCAssetHandle *_assetHandle;
}

- (void).cxx_destruct;
- (void)addAssetHandlesToArray:(id)arg1;
- (long long)lifetimeHint;
@property(readonly, nonatomic) FCAssetHandle *assetHandle; // @synthesize assetHandle=_assetHandle;
@property(readonly, nonatomic) NSString *encoding; // @synthesize encoding=_encoding;
@property(readonly, nonatomic) NSString *type; // @synthesize type=_type;
@property(readonly, nonatomic) NSString *resourceID; // @synthesize resourceID=_resourceID;

@end

@interface FCResourceURLProtocol : NSURLProtocol
{
}

+ (_Bool)requestIsCacheEquivalent:(id)arg1 toRequest:(id)arg2;
+ (id)canonicalRequestForRequest:(id)arg1;
+ (_Bool)canInitWithRequest:(id)arg1;
+ (id)resourceIDFromResourceURL:(id)arg1;
+ (_Bool)isResourceURL:(id)arg1;
+ (id)URLForResourceID:(id)arg1;
+ (void)unregisterDelegate;
+ (void)registerWithDelegate:(id)arg1;
- (id)_resourceIDFromURL:(id)arg1;
- (void)stopLoading;
- (void)startLoading;

@end

@interface FCResourcesFetchOperation : FCMultiStepFetchOperation
{
    _Bool _shouldDownloadAssets;
    NSArray *_resourceIDs;
    FCCloudContext *_context;
    NSArray *_resourceRecordWrappers;
}

@property(retain, nonatomic) NSArray *resourceRecordWrappers; // @synthesize resourceRecordWrappers=_resourceRecordWrappers;
@property(retain, nonatomic) FCCloudContext *context; // @synthesize context=_context;
@property(readonly, nonatomic) NSArray *resourceIDs; // @synthesize resourceIDs=_resourceIDs;
@property(nonatomic) _Bool shouldDownloadAssets; // @synthesize shouldDownloadAssets=_shouldDownloadAssets;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchResourceRecordWrappersWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithContext:(id)arg1 resourceURLs:(id)arg2;
- (id)initWithContext:(id)arg1 resourceIDs:(id)arg2;

@end

@interface FCResponse : NSObject
{
    NSString *_requestType;
    NSString *_requestID;
    NSString *_responseJSON;
}

+ (id)responseWithRequestType:(id)arg1 requestID:(id)arg2 responseJSON:(id)arg3;
@property(retain, nonatomic) NSString *responseJSON; // @synthesize responseJSON=_responseJSON;
@property(retain, nonatomic) NSString *requestID; // @synthesize requestID=_requestID;
@property(retain, nonatomic) NSString *requestType; // @synthesize requestType=_requestType;
- (void).cxx_destruct;
- (id)initWithRequestType:(id)arg1 requestID:(id)arg2 responseJSON:(id)arg3;

@end

@interface FCSetValueDictionary : NSObject <NSCopying, NSMutableCopying>
{
    NSMutableDictionary *_backingDictionary;
}

@property(retain, nonatomic) NSMutableDictionary *backingDictionary; // @synthesize backingDictionary=_backingDictionary;
- (void).cxx_destruct;
- (id)_setForKey:(id)arg1;
- (id)keyEnumerator;
- (void)removeObjectsForKey:(id)arg1;
- (id)objectsForKey:(id)arg1;
- (void)addObjects:(id)arg1 forKey:(id)arg2;
- (void)addObject:(id)arg1 forKey:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)description;

@end

@interface FCSetValueMapTable : NSObject <NSCopying, NSMutableCopying>
{
    NSMapTable *_backingMapTable;
}

@property(retain, nonatomic) NSMapTable *backingMapTable; // @synthesize backingMapTable=_backingMapTable;
- (void).cxx_destruct;
- (id)_setForKey:(id)arg1;
- (id)objectEnumerator;
- (id)keyEnumerator;
- (void)removeObjectsForKey:(id)arg1;
- (id)objectsForKey:(id)arg1;
- (void)addObjects:(id)arg1 forKey:(id)arg2;
- (void)removeObject:(id)arg1 forKey:(id)arg2;
- (void)addObject:(id)arg1 forKey:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)description;

@end

@interface FCSingleTagFeedDescriptor : FCMultiTagFeedDescriptor <FCInboxStyleFeed, FCTagFeedDescriptor>
{
    id <FCTagProviding> _tag;
    id <FCTagProviding> _tagForSubscriptions;
}

@property(copy, nonatomic) id <FCTagProviding> tagForSubscriptions; // @synthesize tagForSubscriptions=_tagForSubscriptions;
@property(copy, nonatomic) id <FCTagProviding> tag; // @synthesize tag=_tag;
- (void).cxx_destruct;
- (void)_fetchQueryTagWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (long long)inboxFilterOptions;
- (long long)inboxSortMethod;
- (_Bool)supportsExploration;
- (_Bool)supportsHighlights;
- (unsigned long long)preferredFeedItemBatchSize;
- (void)fetchPinnedArticleIDsWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchCurrentFeedContextWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)isSubscribedTo;
- (void)unsubscribeTo;
- (_Bool)subscribeToWithError:(id *)arg1;
- (_Bool)isSubscribable;
- (id)theme;
- (id)name;
- (void)replaceTag:(id)arg1;
- (id)initWithContext:(id)arg1 identifier:(id)arg2 tag:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCStaticTagsFeedDescriptor : FCMultiTagFeedDescriptor
{
    NSArray *_tagIDs;
}

@property(copy, nonatomic) NSArray *tagIDs; // @synthesize tagIDs=_tagIDs;
- (void).cxx_destruct;
- (long long)inboxFilterOptions;
- (long long)inboxSortMethod;
- (_Bool)supportsExploration;
- (_Bool)supportsHighlights;
- (unsigned long long)preferredFeedItemBatchSize;
- (void)fetchPinnedArticleIDsWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchCurrentFeedContextWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (id)initWithContext:(id)arg1 identifier:(id)arg2 tagIDs:(id)arg3;

@end

@interface FCStreamingResults : NSObject
{
    id <FCStreaming> _underlyingStream;
    NSMutableArray *_results;
    FCAsyncSerialQueue *_serialQueue;
    NSHashTable *_observers;
}

@property(retain, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) FCAsyncSerialQueue *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) NSMutableArray *results; // @synthesize results=_results;
@property(readonly, nonatomic) id <FCStreaming> underlyingStream; // @synthesize underlyingStream=_underlyingStream;
- (void).cxx_destruct;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)fetchObjectsUpToCount:(unsigned long long)arg1 qualityOfService:(long long)arg2 batchSize:(unsigned long long)arg3 completion:(CDUnknownBlockType)arg4;
- (void)fetchAllObjectsWithBatchSize:(unsigned long long)arg1 qualityOfService:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchObjectsUpToCount:(unsigned long long)arg1 qualityOfService:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchObjectsUpToCount:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchObjectsUpToCount:(unsigned long long)arg1 qualityOfService:(long long)arg2;
- (void)fetchObjectsUpToCount:(unsigned long long)arg1;
- (id)array;
- (id)objectsInRange:(struct _NSRange)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) struct _NSRange range;
@property(readonly, nonatomic) unsigned long long count;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (id)initWithResults:(id)arg1 followedByStream:(id)arg2;
- (id)initWithStream:(id)arg1;
- (id)init;

@end

@interface FCStreamingTagSearchResults : FCStreamingResults
{
    NSString *_searchString;
}

@property(readonly, copy, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
- (void).cxx_destruct;
- (id)initWithStream:(id)arg1 searchString:(id)arg2;
- (id)initWithStream:(id)arg1;

@end

@interface FCSubmitRSSFeedResponse : FCResponse
{
    _Bool _success;
    _Bool _canRetry;
    long long _statusCode;
    NSString *_tagID;
    NSString *_errorMessage;
}

@property(nonatomic) _Bool canRetry; // @synthesize canRetry=_canRetry;
@property(retain, nonatomic) NSString *errorMessage; // @synthesize errorMessage=_errorMessage;
@property(retain, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;
@property(nonatomic) _Bool success; // @synthesize success=_success;
@property(nonatomic) long long statusCode; // @synthesize statusCode=_statusCode;
- (void).cxx_destruct;
- (id)initWithRequestType:(id)arg1 requestID:(id)arg2 responseJSON:(id)arg3;

@end

@interface FCSubscribeToEmailCommand : FCCommand
{
    NSString *_DSID;
    NSString *_storeFrontID;
    NSString *_primaryLanguage;
}

@property(copy, nonatomic) NSString *primaryLanguage; // @synthesize primaryLanguage=_primaryLanguage;
@property(copy, nonatomic) NSString *storeFrontID; // @synthesize storeFrontID=_storeFrontID;
@property(copy, nonatomic) NSString *DSID; // @synthesize DSID=_DSID;
- (void).cxx_destruct;
- (void)executeWithContext:(id)arg1 delegate:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDSID:(id)arg1 storeFrontID:(id)arg2 primaryLanguage:(id)arg3;

@end

@interface FCSubscription : NSObject
{
    _Bool _canRetry;
    NSString *_subscriptionID;
    unsigned long long _subscriptionType;
    NSDate *_dateAdded;
    NSString *_tagID;
    NSURL *_url;
    NSString *_title;
    NSURL *_pollingURL;
    NSString *_errorMessage;
}

+ (id)pendingSubscriptionWithSubscriptionID:(id)arg1 url:(id)arg2 title:(id)arg3 pollingURL:(id)arg4 dateAdded:(id)arg5;
+ (id)subscriptionWithSubscriptionID:(id)arg1 tagID:(id)arg2 dateAdded:(id)arg3;
+ (id)subscriptionWithSubscriptionID:(id)arg1 dictionaryRepresentation:(id)arg2;
@property(readonly, nonatomic) _Bool canRetry; // @synthesize canRetry=_canRetry;
@property(readonly, nonatomic) NSString *errorMessage; // @synthesize errorMessage=_errorMessage;
@property(readonly, nonatomic) NSURL *pollingURL; // @synthesize pollingURL=_pollingURL;
@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;
@property(readonly, copy, nonatomic) NSDate *dateAdded; // @synthesize dateAdded=_dateAdded;
@property(readonly, nonatomic) unsigned long long subscriptionType; // @synthesize subscriptionType=_subscriptionType;
@property(readonly, copy, nonatomic) NSString *subscriptionID; // @synthesize subscriptionID=_subscriptionID;
- (void).cxx_destruct;
- (_Bool)isTypeTag;
- (_Bool)isTypePending;
- (id)initWithSubscriptionID:(id)arg1 url:(id)arg2 title:(id)arg3 pollingURL:(id)arg4 dateAdded:(id)arg5;
- (id)initWithSubscriptionID:(id)arg1 tagID:(id)arg2 dateAdded:(id)arg3;
- (id)dictionaryRepresentation;

@end

@interface FCSubscriptionController : NSObject <FCSubscriptionListObserving>
{
    FCSubscriptionList *_subscriptionList;
    FCTagController *_tagController;
    FCThreadSafeMutableDictionary *_subscribedTagsByTagID;
    NSHashTable *_observers;
}

@property(copy, nonatomic) NSHashTable *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) FCThreadSafeMutableDictionary *subscribedTagsByTagID; // @synthesize subscribedTagsByTagID=_subscribedTagsByTagID;
@property(retain, nonatomic) FCTagController *tagController; // @synthesize tagController=_tagController;
@property(retain, nonatomic) FCSubscriptionList *subscriptionList; // @synthesize subscriptionList=_subscriptionList;
- (void).cxx_destruct;
- (void)_handlePendingSubscriptionsAdded:(id)arg1 pendingSubscriptionsChanged:(id)arg2 pendingSubscriptionsRemoved:(id)arg3;
- (void)_handleTagSubscriptionsAdded:(id)arg1 tagSubscriptionsRemoved:(id)arg2;
- (void)_notifyOfTagsAdded:(id)arg1 tagsChanged:(id)arg2 tagsRemoved:(id)arg3;
- (void)_fetchTagsForIDs:(id)arg1 maxCachedAge:(double)arg2 qualityOfService:(long long)arg3;
- (void)_integrateTags:(id)arg1;
- (void)_fetchMissingTags;
- (void)subscriptionList:(id)arg1 didAddSubscriptions:(id)arg2 changeSubscriptions:(id)arg3 removeSubscriptions:(id)arg4;
- (void)modifyPendingSubscription:(id)arg1;
- (void)removePendingSubscription:(id)arg1;
- (void)addPendingSubscription:(id)arg1;
- (id)pendingSubscriptionForPollingURL:(id)arg1;
- (id)pendingSubscriptions;
- (void)refreshSubscriptionTags;
- (void)removeSubscriptionToTag:(id)arg1;
- (_Bool)addSubscriptionToTag:(id)arg1 error:(id *)arg2;
- (id)subscriptionForTag:(id)arg1;
- (_Bool)hasSubscriptionToTag:(id)arg1;
- (_Bool)canAddSubscription;
- (id)subscribedTagIDs;
- (id)subscribedTags;
- (id)subscriptions;
- (id)subscribedTagForTagID:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)initWithSubscriptionList:(id)arg1 tagController:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCSubscriptionList : FCPrivateZoneController
{
    NSDictionary *_subscriptionsBySubscriptionID;
    NSSet *_subscribedTagIDs;
    NSDictionary *_pendingSubscriptionsBySubscriptionID;
    NSMutableDictionary *_mutableSubscriptionsBySubscriptionID;
}

+ (id)subscriptionIDForUrl:(id)arg1;
+ (id)subscriptionIDForTagID:(id)arg1;
+ (id)commandToMergeLocalDataToCloud:(id)arg1;
+ (long long)commandQueueUrgency;
+ (id)commandStoreFileName;
+ (unsigned long long)localStoreVersion;
+ (id)localStoreFilename;
+ (_Bool)requiresHighPriorityFirstSync;
+ (_Bool)requiresBatchedSync;
+ (_Bool)requiresPushNotificationSupport;
+ (id)desiredKeys;
@property(retain, nonatomic) NSMutableDictionary *mutableSubscriptionsBySubscriptionID; // @synthesize mutableSubscriptionsBySubscriptionID=_mutableSubscriptionsBySubscriptionID;
@property(copy, nonatomic) NSDictionary *pendingSubscriptionsBySubscriptionID; // @synthesize pendingSubscriptionsBySubscriptionID=_pendingSubscriptionsBySubscriptionID;
@property(copy, nonatomic) NSSet *subscribedTagIDs; // @synthesize subscribedTagIDs=_subscribedTagIDs;
@property(copy, nonatomic) NSDictionary *subscriptionsBySubscriptionID; // @synthesize subscriptionsBySubscriptionID=_subscriptionsBySubscriptionID;
- (void).cxx_destruct;
- (void)_regenerateSortedSubscriptions;
- (void)_localAddSubscriptions:(id)arg1 changeSubscriptions:(id)arg2 removeSubscriptions:(id)arg3;
- (id)_subscriptionFromRecord:(id)arg1;
- (void)_removeRemoteSubscription:(id)arg1;
- (void)_modifyRemotePendingSubscription:(id)arg1;
- (void)_addRemotePendingSubscription:(id)arg1;
- (void)_modifyRemoteTagSubscriptions:(id)arg1;
- (void)_addRemoteTagSubscriptions:(id)arg1;
- (void)modifyPendingSubscription:(id)arg1;
- (void)removePendingSubscription:(id)arg1;
- (void)addPendingSubscription:(id)arg1;
- (id)pendingSubscriptionForPollingURL:(id)arg1;
- (void)removeSubscriptionForTagID:(id)arg1;
- (_Bool)addSubscriptionForTagID:(id)arg1 replacingPendingSubscriptionWithPollingURL:(id)arg2;
- (_Bool)addSubscriptionForTagID:(id)arg1;
- (_Bool)canAddSubscription;
- (id)subscriptionForTagID:(id)arg1;
- (_Bool)hasSubscriptionForTagID:(id)arg1;
- (void)handleSyncWithChangedRecords:(id)arg1 deletedRecordIDs:(id)arg2;
- (void)loadLocalCachesFromStore;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;

@end

@interface FCTag : NSObject <FCTagProviding, FCChannelProviding, FCSectionProviding, FCFeedTheming>
{
    _Bool _isDeprecated;
    NSString *_identifier;
    NSString *_versionKey;
    NSString *_name;
    unsigned long long _tagType;
    long long _contentProvider;
    NSString *_primaryAudience;
    NSString *_replacementID;
    NSArray *_relatedTopicIDs;
    NSArray *_relatedChannelIDs;
    NSArray *_relatedTopicIDsForOnboarding;
    NSArray *_relatedChannelIDsForOnboarding;
    NSArray *_iAdCategories;
    NSArray *_blockedStorefrontIDs;
    NSArray *_allowedStorefrontIDs;
    NSArray *_pinnedArticleIDs;
    NSNumber *_score;
    NSString *_backgroundColorHexString;
    NSString *_foregroundColorHexString;
    FCAssetHandle *_nameImageAssetHandle;
    FCAssetHandle *_nameImageForDarkBackgroundAssetHandle;
    FCAssetHandle *_nameImageMaskAssetHandle;
    FCAssetHandle *_logoImageAssetHandle;
    FCAssetHandle *_coverImageAssetHandle;
    FCTextInfo *_headlineTitleTextInfo;
    FCTextInfo *_headlineExcerptTextInfo;
    FCTextInfo *_headlineBylineTextInfo;
    NSString *_parentID;
    NSArray *_sectionIDs;
    NSString *_defaultSectionID;
    FCTagBanner *_bannerImageForWhiteBackground;
    FCTagBanner *_bannerImageForThemeBackground;
    FCTagBanner *_bannerImageForMask;
    FCTagRecordWrapper *_tagRecordWrapper;
    NSDictionary *_feedConfiguration;
    struct CGSize _nameImageSize;
    struct CGSize _nameImageForDarkBackgroundSize;
    struct CGSize _nameImageMaskSize;
    struct UIEdgeInsets _nameImageInsets;
    struct UIEdgeInsets _nameImageForDarkBackgroundInsets;
    struct UIEdgeInsets _nameImageMaskInsets;
}

@property(copy, nonatomic) NSDictionary *feedConfiguration; // @synthesize feedConfiguration=_feedConfiguration;
@property(readonly, nonatomic) FCTagRecordWrapper *tagRecordWrapper; // @synthesize tagRecordWrapper=_tagRecordWrapper;
@property(readonly, copy, nonatomic) NSString *defaultSectionID; // @synthesize defaultSectionID=_defaultSectionID;
@property(readonly, copy, nonatomic) NSArray *sectionIDs; // @synthesize sectionIDs=_sectionIDs;
@property(readonly, copy, nonatomic) NSString *parentID; // @synthesize parentID=_parentID;
@property(readonly, copy, nonatomic) FCTextInfo *headlineBylineTextInfo; // @synthesize headlineBylineTextInfo=_headlineBylineTextInfo;
@property(readonly, copy, nonatomic) FCTextInfo *headlineExcerptTextInfo; // @synthesize headlineExcerptTextInfo=_headlineExcerptTextInfo;
@property(readonly, copy, nonatomic) FCTextInfo *headlineTitleTextInfo; // @synthesize headlineTitleTextInfo=_headlineTitleTextInfo;
@property(readonly, nonatomic) FCAssetHandle *coverImageAssetHandle; // @synthesize coverImageAssetHandle=_coverImageAssetHandle;
@property(readonly, nonatomic) FCAssetHandle *logoImageAssetHandle; // @synthesize logoImageAssetHandle=_logoImageAssetHandle;
@property(readonly, nonatomic) struct UIEdgeInsets nameImageMaskInsets; // @synthesize nameImageMaskInsets=_nameImageMaskInsets;
@property(readonly, nonatomic) struct CGSize nameImageMaskSize; // @synthesize nameImageMaskSize=_nameImageMaskSize;
@property(readonly, nonatomic) FCAssetHandle *nameImageMaskAssetHandle; // @synthesize nameImageMaskAssetHandle=_nameImageMaskAssetHandle;
@property(readonly, nonatomic) struct UIEdgeInsets nameImageForDarkBackgroundInsets; // @synthesize nameImageForDarkBackgroundInsets=_nameImageForDarkBackgroundInsets;
@property(readonly, nonatomic) struct CGSize nameImageForDarkBackgroundSize; // @synthesize nameImageForDarkBackgroundSize=_nameImageForDarkBackgroundSize;
@property(readonly, nonatomic) FCAssetHandle *nameImageForDarkBackgroundAssetHandle; // @synthesize nameImageForDarkBackgroundAssetHandle=_nameImageForDarkBackgroundAssetHandle;
@property(readonly, nonatomic) struct UIEdgeInsets nameImageInsets; // @synthesize nameImageInsets=_nameImageInsets;
@property(readonly, nonatomic) struct CGSize nameImageSize; // @synthesize nameImageSize=_nameImageSize;
@property(readonly, nonatomic) FCAssetHandle *nameImageAssetHandle; // @synthesize nameImageAssetHandle=_nameImageAssetHandle;
@property(readonly, copy, nonatomic) NSString *foregroundColorHexString; // @synthesize foregroundColorHexString=_foregroundColorHexString;
@property(readonly, copy, nonatomic) NSString *backgroundColorHexString; // @synthesize backgroundColorHexString=_backgroundColorHexString;
@property(readonly, nonatomic) NSNumber *score; // @synthesize score=_score;
@property(readonly, nonatomic) NSArray *pinnedArticleIDs; // @synthesize pinnedArticleIDs=_pinnedArticleIDs;
@property(readonly, nonatomic) NSArray *allowedStorefrontIDs; // @synthesize allowedStorefrontIDs=_allowedStorefrontIDs;
@property(readonly, nonatomic) NSArray *blockedStorefrontIDs; // @synthesize blockedStorefrontIDs=_blockedStorefrontIDs;
@property(readonly, nonatomic) NSArray *iAdCategories; // @synthesize iAdCategories=_iAdCategories;
@property(readonly, nonatomic) NSArray *relatedChannelIDsForOnboarding; // @synthesize relatedChannelIDsForOnboarding=_relatedChannelIDsForOnboarding;
@property(readonly, nonatomic) NSArray *relatedTopicIDsForOnboarding; // @synthesize relatedTopicIDsForOnboarding=_relatedTopicIDsForOnboarding;
@property(readonly, nonatomic) NSArray *relatedChannelIDs; // @synthesize relatedChannelIDs=_relatedChannelIDs;
@property(readonly, nonatomic) NSArray *relatedTopicIDs; // @synthesize relatedTopicIDs=_relatedTopicIDs;
@property(readonly, copy, nonatomic) NSString *replacementID; // @synthesize replacementID=_replacementID;
@property(readonly, copy, nonatomic) NSString *primaryAudience; // @synthesize primaryAudience=_primaryAudience;
@property(readonly, nonatomic) _Bool isDeprecated; // @synthesize isDeprecated=_isDeprecated;
@property(readonly, nonatomic) long long contentProvider; // @synthesize contentProvider=_contentProvider;
@property(readonly, nonatomic) unsigned long long tagType; // @synthesize tagType=_tagType;
@property(readonly, copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, copy, nonatomic) NSString *versionKey; // @synthesize versionKey=_versionKey;
@property(readonly, copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
@property(readonly, nonatomic) long long statusBarStyle;
@property(readonly, nonatomic) UIColor *foregroundColor;
@property(readonly, nonatomic) UIColor *backgroundColor;
@property(readonly, nonatomic) FCTagBanner *bannerImageForThemeBackground; // @synthesize bannerImageForThemeBackground=_bannerImageForThemeBackground;
@property(readonly, nonatomic) FCTagBanner *bannerImageForWhiteBackground; // @synthesize bannerImageForWhiteBackground=_bannerImageForWhiteBackground;
@property(readonly, nonatomic) FCTagBanner *defaultBannerImage;
@property(readonly, nonatomic) _Bool isWhite;
@property(readonly, nonatomic) FCTagBanner *bannerImageForMask; // @synthesize bannerImageForMask=_bannerImageForMask;
@property(readonly, nonatomic) long long feedType;
- (_Bool)isNoLongerAvailable;
- (_Bool)isAllowedStorefrontID:(id)arg1;
- (id)feedIDsForExploration;
- (id)feedIDForHighlights;
- (id)availableBins;
- (id)feedIDForBin:(unsigned long long)arg1;
- (id)_configurationKeyForBin:(unsigned long long)arg1;
- (_Bool)isEqualToTag:(id)arg1;
@property(readonly, nonatomic) _Bool isSubscribable;
@property(readonly, copy, nonatomic) id <FCFeedTheming> theme;
@property(readonly, nonatomic) id <FCSectionProviding> asSection;
@property(readonly, nonatomic) id <FCChannelProviding> asChannel;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initChannelForTestingWithIdentifier:(id)arg1 name:(id)arg2 defaultSection:(id)arg3;
- (id)initForTestingWithTagType:(unsigned long long)arg1 identifier:(id)arg2 name:(id)arg3;
- (void)_inflateFromJSONDictionary:(id)arg1 withVersion:(long long)arg2;
- (void)_inflateFromVerionlessJSONDictionary:(id)arg1;
- (void)_inflateFromJSONDictionary:(id)arg1;
- (id)initWithTagRecordWrapper:(id)arg1;
- (id)initWithTagType:(unsigned long long)arg1 identifier:(id)arg2 name:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;

@end

@interface FCTagBanner : NSObject
{
    FCAssetHandle *_assetHandle;
    struct CGSize _size;
    struct UIEdgeInsets _insets;
}

@property(readonly, nonatomic) struct UIEdgeInsets insets; // @synthesize insets=_insets;
@property(readonly, nonatomic) struct CGSize size; // @synthesize size=_size;
@property(readonly, nonatomic) FCAssetHandle *assetHandle; // @synthesize assetHandle=_assetHandle;
- (void).cxx_destruct;
- (id)initWithAssetHandle:(id)arg1 size:(struct CGSize)arg2 insets:(struct UIEdgeInsets)arg3;

@end

@interface FCTagController : NSObject <FCTagsFetchOperationDelegate>
{
    FCCloudKitConnection *_connection;
    FCTagRecordSource *_tagRecordSource;
    NSCache *_fastCache;
    FCTagsSearchOperation *_topicSearchOperation;
    FCTagsSearchOperation *_channelSearchOperation;
}

+ (_Bool)_isAllowedWithPrimaryAudience:(id)arg1 explicitContentAllowed:(_Bool)arg2;
+ (_Bool)isTagAllowedWithTag:(id)arg1 explicitContentAllowed:(_Bool)arg2;
+ (_Bool)isTagAllowedWithTagRecordWrapper:(id)arg1 explicitContentAllowed:(_Bool)arg2;
@property(retain, nonatomic) FCTagsSearchOperation *channelSearchOperation; // @synthesize channelSearchOperation=_channelSearchOperation;
@property(retain, nonatomic) FCTagsSearchOperation *topicSearchOperation; // @synthesize topicSearchOperation=_topicSearchOperation;
@property(retain, nonatomic) NSCache *fastCache; // @synthesize fastCache=_fastCache;
@property(retain, nonatomic) FCTagRecordSource *tagRecordSource; // @synthesize tagRecordSource=_tagRecordSource;
@property(retain, nonatomic) FCCloudKitConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (void)tagsFetchOperation:(id)arg1 didFetchTagsByID:(id)arg2;
- (void)fetchChannelsForSearchString:(id)arg1 batchSize:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchTopicsForSearchString:(id)arg1 batchSize:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_tagFromRecordWrapper:(id)arg1;
- (id)_tagStreamFromRecordWrapperStream:(id)arg1;
- (void)_fetchTagsForTagIDs:(id)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_fetchTagForTagID:(id)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)_cachedTagsForTagIDs:(id)arg1;
- (id)_cachedTagForTagID:(id)arg1;
- (id)tagsForTagIDs:(id)arg1;
- (id)tagsForTagIDs:(id)arg1 predicate:(CDUnknownBlockType)arg2;
- (id)tagsForTagIDs:(id)arg1 maximumCachedAge:(double)arg2 predicate:(CDUnknownBlockType)arg3;
- (void)fetchTagForTagID:(id)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)fetchTagsForTagIDs:(id)arg1 callbackQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchTagsForTagIDs:(id)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)fetchTagsForTagIDs:(id)arg1 maximumCachedAge:(double)arg2 qualityOfService:(long long)arg3 callbackQueue:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (id)fetchOperationForTagsWithIDs:(id)arg1;
- (id)cachedTagsForIDs:(id)arg1;
- (id)cachedTagForID:(id)arg1;
- (id)initWithConnection:(id)arg1 tagRecordSource:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCTagFeedCursor : NSObject <NSCoding>
{
    _Bool _atEnd;
    NSString *_tagID;
    NSString *_feedID;
    NSDate *_date;
    NSData *_cursor;
    NSNumber *_order;
}

@property(nonatomic) _Bool atEnd; // @synthesize atEnd=_atEnd;
@property(copy, nonatomic) NSNumber *order; // @synthesize order=_order;
@property(copy, nonatomic) NSData *cursor; // @synthesize cursor=_cursor;
@property(copy, nonatomic) NSDate *date; // @synthesize date=_date;
@property(copy, nonatomic) NSString *feedID; // @synthesize feedID=_feedID;
@property(copy, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;
- (void).cxx_destruct;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface FCTagFeedRequest : NSObject
{
    _Bool _isExplorationFeed;
    NSString *_tagID;
    NSString *_feedID;
    FCTagFeedCursor *_fromCursor;
    FCTagFeedCursor *_toCursor;
    unsigned long long _softResultsLimit;
    unsigned long long _hardResultsLimit;
    NSString *_sectionID;
    NSString *_channelID;
    NSString *_topicID;
}

@property(nonatomic) _Bool isExplorationFeed; // @synthesize isExplorationFeed=_isExplorationFeed;
@property(copy, nonatomic) NSString *topicID; // @synthesize topicID=_topicID;
@property(copy, nonatomic) NSString *channelID; // @synthesize channelID=_channelID;
@property(copy, nonatomic) NSString *sectionID; // @synthesize sectionID=_sectionID;
@property(nonatomic) unsigned long long hardResultsLimit; // @synthesize hardResultsLimit=_hardResultsLimit;
@property(nonatomic) unsigned long long softResultsLimit; // @synthesize softResultsLimit=_softResultsLimit;
@property(retain, nonatomic) FCTagFeedCursor *toCursor; // @synthesize toCursor=_toCursor;
@property(retain, nonatomic) FCTagFeedCursor *fromCursor; // @synthesize fromCursor=_fromCursor;
@property(copy, nonatomic) NSString *feedID; // @synthesize feedID=_feedID;
@property(copy, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;
- (void).cxx_destruct;
- (id)init;

@end

@interface FCTagFeedResponse : NSObject
{
    _Bool _fulfilledRequest;
    NSString *_tagID;
    NSString *_feedID;
    NSArray *_feedItems;
    FCTagFeedCursor *_topCursor;
    FCTagFeedCursor *_bottomCursor;
}

@property(nonatomic) _Bool fulfilledRequest; // @synthesize fulfilledRequest=_fulfilledRequest;
@property(retain, nonatomic) FCTagFeedCursor *bottomCursor; // @synthesize bottomCursor=_bottomCursor;
@property(retain, nonatomic) FCTagFeedCursor *topCursor; // @synthesize topCursor=_topCursor;
@property(copy, nonatomic) NSArray *feedItems; // @synthesize feedItems=_feedItems;
@property(copy, nonatomic) NSString *feedID; // @synthesize feedID=_feedID;
@property(copy, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;
- (void).cxx_destruct;

@end

@interface FCTagRecordSource : FCRecordSource
{
}

+ (double)defaultFetchOperationMaximumCachedAge;
+ (unsigned long long)defaultFetchOperationCachePolicy;
+ (unsigned long long)dataSizeLimit;
+ (unsigned long long)storeVersion;
+ (id)storeFilename;
+ (Class)recordWrapperClass;
+ (id)desiredKeys;
+ (id)recordType;
- (id)saveTagRecords:(id)arg1;
- (void)fetchTagsWithIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)fetchOperationForTagsWithIDs:(id)arg1;

@end

@interface FCTagRecordWrapper : FCRecordWrapper
{
    NSString *_tagID;
    NSString *_tagName;
    NSNumber *_contentProvider;
    NSNumber *_isDeprecated;
    NSString *_replacementID;
    NSString *_primaryAudience;
    NSArray *_relatedTopicIDs;
    NSArray *_relatedChannelIDs;
    NSArray *_relatedTopicIDsForOnboarding;
    NSArray *_relatedChannelIDsForOnboarding;
    NSString *_parentID;
    FCAssetHandle *_logoImageAssetHandle;
    NSNumber *_allowedAdTypes;
    NSArray *_iAdCategories;
    NSNumber *_score;
    NSString *_feedConfiguration;
    NSArray *_pinnedArticleIDs;
    FCAssetHandle *_nameImageAssetHandle;
    FCAssetHandle *_nameImageForDarkBackgroundAssetHandle;
    FCAssetHandle *_nameImageMaskAssetHandle;
    NSData *_nameImageMetadata;
    FCAssetHandle *_coverImageAssetHandle;
    NSString *_template;
    NSArray *_channelSectionIDs;
    NSString *_channelDefaultSectionID;
    NSArray *_internationalizationKeys;
    NSArray *_internationalizedNames;
    NSArray *_internationalizedCoverImageAssetHandles;
    NSArray *_internationalizedFeedConfigurations;
    NSString *_foregroundColor;
    NSString *_backgroundColor;
    NSString *_headlineTitleFontName;
    NSString *_headlineTitleFontResourceID;
    NSString *_headlineExcerptFontName;
    NSString *_headlineExcerptFontResourceID;
    NSString *_headlineBylineFontName;
    NSString *_headlineBylineFontResourceID;
}

@property(readonly, nonatomic) NSString *headlineBylineFontResourceID; // @synthesize headlineBylineFontResourceID=_headlineBylineFontResourceID;
@property(readonly, nonatomic) NSString *headlineBylineFontName; // @synthesize headlineBylineFontName=_headlineBylineFontName;
@property(readonly, nonatomic) NSString *headlineExcerptFontResourceID; // @synthesize headlineExcerptFontResourceID=_headlineExcerptFontResourceID;
@property(readonly, nonatomic) NSString *headlineExcerptFontName; // @synthesize headlineExcerptFontName=_headlineExcerptFontName;
@property(readonly, nonatomic) NSString *headlineTitleFontResourceID; // @synthesize headlineTitleFontResourceID=_headlineTitleFontResourceID;
@property(readonly, nonatomic) NSString *headlineTitleFontName; // @synthesize headlineTitleFontName=_headlineTitleFontName;
@property(readonly, nonatomic) NSString *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(readonly, nonatomic) NSString *foregroundColor; // @synthesize foregroundColor=_foregroundColor;
- (void).cxx_destruct;
- (_Bool)isAllowedStorefrontID:(id)arg1;
- (id)internationalizedFeedConfigurationForKey:(id)arg1;
- (id)internationalizedCoverImageAssetHandleForKey:(id)arg1;
- (id)internationalizedNameForKey:(id)arg1;
@property(readonly, nonatomic) NSArray *allowedStorefrontIDs;
@property(readonly, nonatomic) NSArray *blockedStorefrontIDs;
@property(readonly, nonatomic) unsigned long long tagType;
@property(readonly, nonatomic) NSArray *internationalizedFeedConfigurations; // @synthesize internationalizedFeedConfigurations=_internationalizedFeedConfigurations;
@property(readonly, nonatomic) NSArray *internationalizedCoverImageAssetHandles; // @synthesize internationalizedCoverImageAssetHandles=_internationalizedCoverImageAssetHandles;
@property(readonly, nonatomic) NSArray *internationalizedNames; // @synthesize internationalizedNames=_internationalizedNames;
@property(readonly, nonatomic) NSArray *internationalizationKeys; // @synthesize internationalizationKeys=_internationalizationKeys;
@property(readonly, nonatomic) NSString *channelDefaultSectionID; // @synthesize channelDefaultSectionID=_channelDefaultSectionID;
@property(readonly, nonatomic) NSArray *channelSectionIDs; // @synthesize channelSectionIDs=_channelSectionIDs;
@property(readonly, nonatomic) NSString *template; // @synthesize template=_template;
@property(readonly, nonatomic) FCAssetHandle *coverImageAssetHandle; // @synthesize coverImageAssetHandle=_coverImageAssetHandle;
@property(readonly, nonatomic) NSData *nameImageMetadata; // @synthesize nameImageMetadata=_nameImageMetadata;
@property(readonly, nonatomic) FCAssetHandle *nameImageMaskAssetHandle; // @synthesize nameImageMaskAssetHandle=_nameImageMaskAssetHandle;
@property(readonly, nonatomic) FCAssetHandle *nameImageForDarkBackgroundAssetHandle; // @synthesize nameImageForDarkBackgroundAssetHandle=_nameImageForDarkBackgroundAssetHandle;
@property(readonly, nonatomic) FCAssetHandle *nameImageAssetHandle; // @synthesize nameImageAssetHandle=_nameImageAssetHandle;
@property(readonly, nonatomic) NSArray *pinnedArticleIDs; // @synthesize pinnedArticleIDs=_pinnedArticleIDs;
@property(readonly, nonatomic) NSString *feedConfiguration; // @synthesize feedConfiguration=_feedConfiguration;
@property(readonly, nonatomic) NSNumber *score; // @synthesize score=_score;
@property(readonly, nonatomic) NSArray *iAdCategories; // @synthesize iAdCategories=_iAdCategories;
@property(readonly, nonatomic) NSNumber *allowedAdTypes; // @synthesize allowedAdTypes=_allowedAdTypes;
@property(readonly, nonatomic) FCAssetHandle *logoImageAssetHandle; // @synthesize logoImageAssetHandle=_logoImageAssetHandle;
@property(readonly, nonatomic) NSString *parentID; // @synthesize parentID=_parentID;
@property(readonly, nonatomic) NSArray *relatedChannelIDsForOnboarding; // @synthesize relatedChannelIDsForOnboarding=_relatedChannelIDsForOnboarding;
@property(readonly, nonatomic) NSArray *relatedTopicIDsForOnboarding; // @synthesize relatedTopicIDsForOnboarding=_relatedTopicIDsForOnboarding;
@property(readonly, nonatomic) NSArray *relatedChannelIDs; // @synthesize relatedChannelIDs=_relatedChannelIDs;
@property(readonly, nonatomic) NSArray *relatedTopicIDs; // @synthesize relatedTopicIDs=_relatedTopicIDs;
@property(readonly, nonatomic) NSString *primaryAudience; // @synthesize primaryAudience=_primaryAudience;
@property(readonly, nonatomic) NSString *replacementID; // @synthesize replacementID=_replacementID;
@property(readonly, nonatomic) NSNumber *isDeprecated; // @synthesize isDeprecated=_isDeprecated;
@property(readonly, nonatomic) NSNumber *contentProvider; // @synthesize contentProvider=_contentProvider;
@property(readonly, nonatomic) NSString *tagName; // @synthesize tagName=_tagName;
@property(readonly, nonatomic) NSString *tagID; // @synthesize tagID=_tagID;

@end

@interface FCTagsFetchOperation : FCMultiStepFetchOperation
{
    _Bool _shouldDownloadAssets;
    NSArray *_tagIDs;
    NSDictionary *_tagRecordWrappersByID;
    FCTagRecordSource *_tagRecordSource;
    id <FCTagsFetchOperationDelegate> _delegate;
}

@property(nonatomic) __weak id <FCTagsFetchOperationDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) FCTagRecordSource *tagRecordSource; // @synthesize tagRecordSource=_tagRecordSource;
@property(copy, nonatomic) NSDictionary *tagRecordWrappersByID; // @synthesize tagRecordWrappersByID=_tagRecordWrappersByID;
@property(copy, nonatomic) NSArray *tagIDs; // @synthesize tagIDs=_tagIDs;
@property _Bool shouldDownloadAssets; // @synthesize shouldDownloadAssets=_shouldDownloadAssets;
- (void).cxx_destruct;
- (id)completeFetchOperation;
- (id)fetchTagRecordWrappersWithCompletion:(CDUnknownBlockType)arg1;
- (id)initWithTagIDs:(id)arg1 tagRecordSource:(id)arg2 delegate:(id)arg3;

@end

@interface FCTagsSearchOperation : FCOperation
{
    _Bool _shouldDownloadAssets;
    CDUnknownBlockType _searchResultsBlock;
    FCRecordSource *_tagRecordSource;
    NSString *_searchString;
    unsigned long long _tagType;
    unsigned long long _batchSize;
    FCStreamingResults *_searchResults;
    NSError *_searchError;
}

@property(retain, nonatomic) NSError *searchError; // @synthesize searchError=_searchError;
@property(retain, nonatomic) FCStreamingResults *searchResults; // @synthesize searchResults=_searchResults;
@property(nonatomic) unsigned long long batchSize; // @synthesize batchSize=_batchSize;
@property(nonatomic) unsigned long long tagType; // @synthesize tagType=_tagType;
@property(copy, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
@property(retain, nonatomic) FCRecordSource *tagRecordSource; // @synthesize tagRecordSource=_tagRecordSource;
@property(copy) CDUnknownBlockType searchResultsBlock; // @synthesize searchResultsBlock=_searchResultsBlock;
@property _Bool shouldDownloadAssets; // @synthesize shouldDownloadAssets=_shouldDownloadAssets;
- (void).cxx_destruct;
- (id)_searchResultsStreamWithRecordWrappersStream:(id)arg1;
- (id)_establishStreamOfTagRecordWrappersForCursor:(id)arg1;
- (id)_internationalizationPredicates;
- (id)_tagTypePredicateForTagType:(unsigned long long)arg1;
- (id)_queryForSearchString:(id)arg1 tagType:(unsigned long long)arg2;
- (id)_queryOperationForSearchString:(id)arg1 tagType:(unsigned long long)arg2 batchSize:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_performSearchQuery:(CDUnknownBlockType)arg1;
- (void)finishOperationWithError:(id)arg1;
- (void)performOperation;
- (_Bool)validateOperation;
- (id)initWithTagRecordSource:(id)arg1 searchString:(id)arg2 tagType:(unsigned long long)arg3 batchSize:(unsigned long long)arg4;

@end

@interface FCTextInfo : NSObject <NSCopying>
{
    FCLoadableFont *_font;
    double _lineHeightMultiplier;
    UIColor *_color;
    long long _horizontalTextAlignment;
    NSDictionary *_fontSizeByColumnSpan;
}

+ (id)textInfoFromJSONValues:(id)arg1;
@property(copy, nonatomic) NSDictionary *fontSizeByColumnSpan; // @synthesize fontSizeByColumnSpan=_fontSizeByColumnSpan;
@property(nonatomic) long long horizontalTextAlignment; // @synthesize horizontalTextAlignment=_horizontalTextAlignment;
@property(copy, nonatomic) UIColor *color; // @synthesize color=_color;
@property(nonatomic) double lineHeightMultiplier; // @synthesize lineHeightMultiplier=_lineHeightMultiplier;
@property(copy, nonatomic) FCLoadableFont *font; // @synthesize font=_font;
- (void).cxx_destruct;
- (double)fontSizeForColumnSpan:(long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface FCThreadSafeMutableArray : NSObject
{
    FCMutexLock *_mutexLock;
    NSMutableArray *_array;
}

- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSArray *readOnlyArray;
- (void)enumerateObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (void)addObject:(id)arg1;
- (id)init;

@end

@interface FCThreadSafeMutableDictionary : NSObject
{
    FCMutexLock *_mutexLock;
    NSMutableDictionary *_dictionary;
}

- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSDictionary *immutableDictionary;
@property(readonly, copy, nonatomic) NSArray *allValues;
@property(readonly, copy, nonatomic) NSArray *allKeys;
- (void)readWriteWithAccessor:(CDUnknownBlockType)arg1;
- (void)readWithAccessor:(CDUnknownBlockType)arg1;
- (void)enumerateKeysAndObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForKey:(id)arg1;
@property(readonly) _Bool isEmpty;
@property(readonly) unsigned long long count;
- (void)removeObjectsForKeys:(id)arg1;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)addEntriesFromDictionary:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface FCThreadSafeMutableSet : NSObject
{
    FCMutexLock *_mutexLock;
    NSMutableSet *_set;
}

- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSSet *readOnlySet;
- (void)enumerateObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)containsObject:(id)arg1;
- (void)removeObject:(id)arg1;
- (void)addObjectsFromArray:(id)arg1;
- (void)addObject:(id)arg1;
- (id)init;

@end

@interface FCTopStoriesFeedDescriptor : FCMultiTagFeedDescriptor
{
}

+ (void)initialize;
- (long long)inboxFilterOptions;
- (long long)inboxSortMethod;
- (_Bool)supportsExploration;
- (_Bool)supportsHighlights;
- (unsigned long long)preferredFeedItemBatchSize;
- (void)fetchPinnedArticleIDsWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchCurrentFeedContextWithQualityOfService:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (id)name;

@end

@interface FCTransformedResultsStream : NSObject <FCQueryBasedStream, FCStreaming>
{
    id <FCStreaming> _stream;
    CDUnknownBlockType _asyncTransformBlock;
}

@property(copy, nonatomic) CDUnknownBlockType asyncTransformBlock; // @synthesize asyncTransformBlock=_asyncTransformBlock;
@property(retain, nonatomic) id <FCStreaming> stream; // @synthesize stream=_stream;
- (void).cxx_destruct;
@property(readonly, nonatomic) CKQueryCursor *cursor;
@property(readonly, nonatomic) NSArray *desiredKeys;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
- (void)fetchMoreResultsWithLimit:(unsigned long long)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithStream:(id)arg1 asyncTransformBlock:(CDUnknownBlockType)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCUserInfo : FCPrivateZoneController
{
}

+ (id)commandToMergeLocalDataToCloud:(id)arg1;
+ (long long)commandQueueUrgency;
+ (id)commandStoreFileName;
+ (unsigned long long)localStoreVersion;
+ (id)localStoreFilename;
+ (_Bool)requiresHighPriorityFirstSync;
+ (_Bool)requiresBatchedSync;
+ (_Bool)requiresPushNotificationSupport;
+ (id)desiredKeys;
- (void)handleSyncWithChangedRecords:(id)arg1 deletedRecordIDs:(id)arg2;
- (void)loadLocalCachesFromStore;
@property(copy, nonatomic) NSDate *dateLastOpened;
@property(copy, nonatomic) NSNumber *firstLaunchVersionNumber;
@property(copy, nonatomic) NSString *feldsparID;
- (id)initWithContext:(id)arg1 cloudKitConnection:(id)arg2 recordZone:(id)arg3 storeDirectory:(id)arg4;

@end

@interface FCVideoManifest : NSObject
{
    NSURL *_videoURL;
    NSString *_articleID;
}

@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
@property(retain, nonatomic) NSURL *videoURL; // @synthesize videoURL=_videoURL;
- (void).cxx_destruct;
- (id)initWithArticleID:(id)arg1 videoURL:(id)arg2;
- (id)init;

@end

@interface FCWebArchiveDownloadOperation : NSOperation <WKNavigationDelegate>
{
    _Bool _executing;
    _Bool _finished;
    CDUnknownBlockType _saveWebArchiveBlock;
    NSURL *_sourceURL;
    WKWebView *_webView;
}

@property(retain, nonatomic) WKWebView *webView; // @synthesize webView=_webView;
@property(retain, nonatomic) NSURL *sourceURL; // @synthesize sourceURL=_sourceURL;
@property(copy) CDUnknownBlockType saveWebArchiveBlock; // @synthesize saveWebArchiveBlock=_saveWebArchiveBlock;
- (void).cxx_destruct;
- (void)_finish;
- (void)_cancelLoadingWebView;
- (void)_startLoadingWebView;
- (void)webView:(id)arg1 didFailNavigation:(id)arg2 withError:(id)arg3;
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (void)cancel;
- (void)start;
- (_Bool)isAsynchronous;
- (id)initWithSourceURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCWebArchiveFetchOperation : FCFetchOperation
{
    FCWebArchiveSource *_webArchiveSource;
    NSString *_key;
    FCInterestToken *_holdToken;
    FCInterestToken *_fetchToken;
}

- (void).cxx_destruct;
- (void)didFinishExecuting;
- (void)beginExecuting;
- (id)initWithWebArchiveSource:(id)arg1 key:(id)arg2;

@end

@interface FCWebArchiveSource : NSObject <FCCacheCoordinatorDelegate, FCFetchCoordinatorDelegate, FCCacheFlushing>
{
    FCWebArchiveStore *_webArchiveStore;
    FCCacheCoordinator *_cacheCoordinator;
    FCFetchCoordinator *_fetchCoordinator;
    FCThreadSafeMutableDictionary *_keysToURLs;
}

@property(retain, nonatomic) FCThreadSafeMutableDictionary *keysToURLs; // @synthesize keysToURLs=_keysToURLs;
@property(retain, nonatomic) FCFetchCoordinator *fetchCoordinator; // @synthesize fetchCoordinator=_fetchCoordinator;
@property(retain, nonatomic) FCCacheCoordinator *cacheCoordinator; // @synthesize cacheCoordinator=_cacheCoordinator;
@property(retain, nonatomic) FCWebArchiveStore *webArchiveStore; // @synthesize webArchiveStore=_webArchiveStore;
- (void).cxx_destruct;
- (void)fetchCoordinator:(id)arg1 addFetchOperation:(id)arg2 context:(id)arg3;
- (id)fetchCoordinator:(id)arg1 fetchOperationForKeys:(id)arg2 context:(id)arg3 qualityOfService:(long long)arg4;
- (void)fetchCoordinator:(id)arg1 filterKeysToFetch:(id)arg2 context:(id)arg3;
- (void)cacheCoordinator:(id)arg1 flushKeysWithWriteLock:(id)arg2;
- (unsigned long long)cacheCoordinatorCurrentSizeWithReadLock:(id)arg1;
- (void)enableFlushing;
- (id)fetchOperationForWebArchiveWithKey:(id)arg1 sourceURL:(id)arg2;
- (id)holdTokenForWebArchiveWithKey:(id)arg1;
- (id)fileURLForExistingWebArchiveWithKey:(id)arg1;
- (id)initWithCacheDirectory:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FCWebArchiveStore : NSObject
{
    FCAssetStore *_assetStore;
}

@property(retain, nonatomic) FCAssetStore *assetStore; // @synthesize assetStore=_assetStore;
- (void).cxx_destruct;
- (id)allWebArchiveKeys;
- (unsigned long long)totalSizeOfAllWebArchives;
- (_Bool)deleteWebArchiveForKey:(id)arg1;
- (_Bool)saveWebArchiveData:(id)arg1 forKey:(id)arg2;
- (id)webArchiveURLForKey:(id)arg1;
- (id)initWithStoreDirectory:(id)arg1;

@end

@interface FCWebManifest : NSObject
{
    NSString *_articleID;
    NSURL *_sourceURL;
    FCWebArchiveSource *_webArchiveSource;
    FCInterestToken *_webArchiveHoldToken;
}

@property(retain, nonatomic) FCInterestToken *webArchiveHoldToken; // @synthesize webArchiveHoldToken=_webArchiveHoldToken;
@property(retain, nonatomic) FCWebArchiveSource *webArchiveSource; // @synthesize webArchiveSource=_webArchiveSource;
@property(retain, nonatomic) NSURL *sourceURL; // @synthesize sourceURL=_sourceURL;
@property(copy, nonatomic) NSString *articleID; // @synthesize articleID=_articleID;
- (void).cxx_destruct;
- (id)baseURL;
- (id)URL;
- (id)initWithArticleID:(id)arg1 sourceURL:(id)arg2 webArchiveSource:(id)arg3;
- (id)init;

@end

@interface FRMutableHeadlineTheme : FCHeadlineTheme
{
}

- (void)mergeFromTheme:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

// Remaining properties
@property(copy, nonatomic) UIColor *backgroundColor; // @dynamic backgroundColor;
@property(copy, nonatomic) UIColor *bylineColor; // @dynamic bylineColor;
@property(copy, nonatomic) UIColor *excerptColor; // @dynamic excerptColor;
@property(copy, nonatomic) UIColor *subtitleColor; // @dynamic subtitleColor;
@property(copy, nonatomic) UIColor *titleColor; // @dynamic titleColor;
@property(copy, nonatomic) UIColor *titleReadColor; // @dynamic titleReadColor;

@end

@interface NSArray (FCAdditions) <FCOrderedCollectionAdditions>
+ (id)fc_arrayByAddingObjectsFromArray:(id)arg1 toArray:(id)arg2;
- (id)fc_reduceArrayWithInitial:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)fc_visitSubarraysWithMaxCount:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;
- (id)fc_safeSubarrayWithCountFromBack:(unsigned long long)arg1;
- (id)fc_safeSubarrayWithCountFromFront:(unsigned long long)arg1;
- (id)fc_subarrayFromCount:(unsigned long long)arg1;
- (id)fc_subarrayWithMaxCount:(unsigned long long)arg1;
- (id)fc_subarrayUpToCountInclusive:(unsigned long long)arg1;
- (id)fc_arrayByAddingNonContainedObjectsFromArray:(id)arg1;
- (id)fc_arrayByRemovingObjectsInArray:(id)arg1;
- (id)fc_arrayByRemovingObject:(id)arg1;
- (id)fc_arrayByFlattening;
- (id)fc_arrayOfObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)fc_arrayByTransformingWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)fc_containsObjectPassingTest:(CDUnknownBlockType)arg1;
- (id)fc_randomObject;
- (id)fc_firstObjectPassingTest:(CDUnknownBlockType)arg1;
- (id)fc_onlyObject;
- (id)fc_dictionaryOfSortedArraysWithKeyBlock:(CDUnknownBlockType)arg1;
- (id)fc_dictionaryWithKeyBlock:(CDUnknownBlockType)arg1;
- (id)fc_dictionaryWithKeySelector:(SEL)arg1;
- (void)fc_enumerateSideBySideWithArray:(id)arg1 reverse:(_Bool)arg2 block:(CDUnknownBlockType)arg3;
- (id)fc_diffAgainstSortedOrderedCollection:(id)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (_Bool)fc_isSortedUsingComparator:(CDUnknownBlockType)arg1;
- (void)fc_enumerateObjectsPairwiseUsingBlock:(CDUnknownBlockType)arg1;
@end

@interface NSData (FCAdditions)
- (id)fc_gzipDeflate;
- (id)fc_gzipInflate;
- (id)fc_zlibDeflate;
- (id)fc_zlibInflate;
@end

@interface NSData (FCSecurityAdditions)
- (id)_fc_IVfromS2V;
- (id)_fc_xorEndWithData:(id)arg1;
- (id)_fc_xorWithData:(id)arg1;
- (id)_fc_pad;
- (id)_fc_double;
- (id)_fc_S2VWithKey:(id)arg1 additionalData:(id)arg2;
- (id)_fc_decryptAESSIVWithKey:(id)arg1 additionalData:(id)arg2;
- (id)_fc_AES256CTR_transformWithKey:(id)arg1 IV:(id)arg2;
- (id)_fc_encryptAESSIVWithKey:(id)arg1 additionalData:(id)arg2;
- (id)_fc_derivedStableEncryptionKey;
- (id)_fc_derivedEncryptionKey;
- (id)fc_CMACWithKey:(id)arg1;
- (id)fc_stableDecryptWithKey:(id)arg1 error:(id *)arg2;
- (id)fc_stableEncryptWithKey:(id)arg1 error:(id *)arg2;
- (id)fc_decryptWithKey:(id)arg1 error:(id *)arg2;
- (id)fc_encryptWithKey:(id)arg1 error:(id *)arg2;
@end

@interface NSDate (FCAdditions)
- (unsigned long long)fc_millisecondTimeIntervalSince1970;
- (_Bool)fc_isLaterThan:(id)arg1;
- (_Bool)fc_isEarlierThan:(id)arg1;
@property(readonly) double fc_timeIntervalUntilNow;
@end

@interface NSDateFormatter (FCAdditions)
+ (id)dateFormatterWithFormat:(id)arg1 localeIdentifier:(id)arg2 timezone:(id)arg3;
+ (id)dateFormatterWithFormat:(id)arg1 timezone:(id)arg2;
+ (id)dateFormatterWithFormat:(id)arg1 localeIdentifier:(id)arg2;
+ (id)dateFormatterWithFormat:(id)arg1;
- (id)initWithFormat:(id)arg1 localeIdentifier:(id)arg2;
@end

@interface NSDictionary (FCAdditions)
+ (id)fc_dictionaryByAddingEntriesFromDictionary:(id)arg1 toDictionary:(id)arg2;
+ (id)fc_dictionaryWithKeys:(id)arg1 valueBlock:(CDUnknownBlockType)arg2;
+ (id)fc_dictionaryWithObjects:(id)arg1 keyBlock:(CDUnknownBlockType)arg2;
- (id)fc_dictionaryBySwappingValuesAndKeys;
- (id)fc_subdictionaryWithKeys:(id)arg1;
- (id)fc_objectsForKeysWithoutMarker:(id)arg1;
- (id)fc_dictionaryByTransformingValuesWithBlock:(CDUnknownBlockType)arg1;
- (id)fc_dictionaryByTransformingValuesWithKeyAndValueBlock:(CDUnknownBlockType)arg1;
@end

@interface NSError (FCAdditions)
- (_Bool)fc_isNetworkUnavailableError;
- (_Bool)fc_shouldRetry;
@end

@interface NSError (FCCKAdditions)
- (_Bool)fc_isCKUnknownItemError;
@end

@interface NSError (FCErrorAdditions)
+ (id)fc_errorWithCode:(long long)arg1 description:(id)arg2 additionalUserInfo:(id)arg3;
@end

@interface NSFileManager (FCAdditions)
- (void)fc_quicklyClearDirectory:(id)arg1 callbackQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)fc_removeContentsOfDirectoryAtURL:(id)arg1;
@end

@interface NSIndexSet (FCAdditions)
- (void)fc_enumerateGapsInRange:(struct _NSRange)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)fc_indexSetWithGapsInRange:(struct _NSRange)arg1;
- (_Bool)fc_isContiguous;
- (unsigned long long)fc_countOfContiguousIndexesLessThanIndex:(unsigned long long)arg1;
- (unsigned long long)fc_countOfContiguousIndexesGreaterThanOrEqualToIndex:(unsigned long long)arg1;
@end

@interface NSLocale (FCAdditions)
+ (id)fc_preferredLanguageCodes;
@end

@interface NSMutableArray (FCAdditions) <FCOrderedMutableCollectionAdditions>
- (void)fc_removeFirstObject;
- (void)fc_removeObject:(id)arg1 sortedUsingSelector:(SEL)arg2;
- (void)fc_insertObject:(id)arg1 sortedUsingSelector:(SEL)arg2;
- (id)fc_mergeSortedOrderedCollection:(id)arg1 usingComparator:(CDUnknownBlockType)arg2;
@end

@interface NSMutableDictionary (FCAdditions)
- (void)fc_removeObjectsNotInSet:(id)arg1;
- (void)fc_removeObjectsNotInArray:(id)arg1;
- (void)fc_safelySetObjectAllowingNil:(id)arg1 forKey:(id)arg2;
- (void)fc_safelySetObject:(id)arg1 forKey:(id)arg2;
@end

@interface NSMutableOrderedSet (FCAdditions) <FCOrderedMutableCollectionAdditions>
- (id)fc_mergeSortedOrderedCollection:(id)arg1 usingComparator:(CDUnknownBlockType)arg2;
@end

@interface NSMutableSet (FCAdditions)
- (void)fc_removeObjectsFromArray:(id)arg1;
@end

@interface NSMutableString (FCDescription)
- (void)indentBy:(unsigned long long)arg1;
@end

@interface NSNumber (FCAdditions)
- (id)fc_largerNumber:(id)arg1;
- (id)fc_smallerNumber:(id)arg1;
@end

@interface NSObject (FCAdditions)
+ (long long)fc_compareObject:(id)arg1 toObject:(id)arg2;
+ (_Bool)fc_object:(id)arg1 isEqualToObject:(id)arg2;
@end

@interface NSObject (FCSwizzle)
+ (void)replaceInstanceSelector:(SEL)arg1 withSelector:(SEL)arg2;
+ (void)replaceClassSelector:(SEL)arg1 withSelector:(SEL)arg2;
@end

@interface NSOperationQueue (FCAdditions)
+ (id)fc_sharedSerialQueue;
+ (id)fc_sharedConcurrentQueue;
@end

@interface NSOperationQueue (FCAsyncBlockAdditions)
- (void)addAsyncOperationWithBlock:(CDUnknownBlockType)arg1;
@end

@interface NSOrderedSet (FCAdditions) <FCOrderedCollectionAdditions>
- (id)fc_orderedSetWithObjectsAtIndexes:(id)arg1;
- (id)fc_orderedSetWithObjectsInRange:(struct _NSRange)arg1;
- (id)fc_indexesOfObjectsInOrderedSet:(id)arg1;
- (id)fc_diffAgainstOrderedSet:(id)arg1;
- (id)fc_diffAgainstSortedOrderedCollection:(id)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (_Bool)fc_isSortedUsingComparator:(CDUnknownBlockType)arg1;
- (void)fc_enumerateObjectsPairwiseUsingBlock:(CDUnknownBlockType)arg1;
@end

@interface NSSet (FCAdditions)
- (id)fc_dictionaryOfSortedSetsWithKeyBlock:(CDUnknownBlockType)arg1;
- (_Bool)fc_containsAnyObjectInArray:(id)arg1;
- (id)fc_arrayByTransformingWithBlock:(CDUnknownBlockType)arg1;
- (id)fc_setByTransformingWithBlock:(CDUnknownBlockType)arg1;
- (id)fc_arrayOfObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)fc_setOfObjectsPassingTest:(CDUnknownBlockType)arg1;
- (_Bool)fc_containsObjectPassingTest:(CDUnknownBlockType)arg1;
- (id)fc_onlyObject;
- (id)fc_firstObjectPassingTest:(CDUnknownBlockType)arg1;
- (id)fc_diffAgainstSet:(id)arg1;
@end

@interface NSString (FCAdditions)
+ (id)stringWithValue:(id)arg1;
- (id)fc_stringByMultiplyingStringByCount:(unsigned long long)arg1;
- (id)stringByReplacingPrefix:(id)arg1 withString:(id)arg2;
- (id)stringByRemovingCharactersInSet:(id)arg1;
- (id)fc_stringByRemovingPunctuation;
- (id)fc_lowerCaseStringByTrimmingWhiteSpace;
- (id)tokenizedLowerCaseStringWithMinimumLength:(unsigned long long)arg1;
- (id)fc_lowercaseTokensWithMinimumLength:(unsigned long long)arg1;
@property(readonly, nonatomic) struct _NSRange range;
@end

@interface NSString (FCCloudKitConnectionIDConversionSupport)
+ (id)fc_articleIDWithRecordID:(id)arg1;
@end

@interface NSString (FCReadingHistoryAdditions)
- (id)fr_readingHistoryArticleUUID;
@end

@interface NSURL (FCResourceURL)
+ (id)fc_URLWithResourceID:(id)arg1;
- (id)fc_resourceID;
- (_Bool)fc_isResourceURL;
@end

@interface Reachability : NSObject
{
    _Bool _alwaysReturnLocalWiFiStatus;
    struct __SCNetworkReachability *_reachabilityRef;
}

+ (id)reachabilityForLocalWiFi;
+ (id)reachabilityForInternetConnection;
+ (id)reachabilityWithAddress:(const struct sockaddr_in *)arg1;
+ (id)reachabilityWithHostName:(id)arg1;
@property(nonatomic) struct __SCNetworkReachability *reachabilityRef; // @synthesize reachabilityRef=_reachabilityRef;
@property(nonatomic) _Bool alwaysReturnLocalWiFiStatus; // @synthesize alwaysReturnLocalWiFiStatus=_alwaysReturnLocalWiFiStatus;
- (long long)currentReachabilityStatus;
- (_Bool)connectionRequired;
- (long long)networkStatusForFlags:(unsigned int)arg1;
- (long long)localWiFiStatusForFlags:(unsigned int)arg1;
- (void)dealloc;
- (void)stopNotifier;
- (_Bool)startNotifier;

@end

@interface UIColor (FCAdditions)
+ (id)fc_colorWithHue:(double)arg1 saturation:(double)arg2 lightness:(double)arg3 alpha:(double)arg4;
+ (id)fc_colorWithHexTripletString:(id)arg1;
- (void)getHue:(double *)arg1 saturation:(double *)arg2 lightness:(double *)arg3 alpha:(double *)arg4;
- (id)fc_darken:(double)arg1;
- (id)fc_lighten:(double)arg1;
- (id)fc_desaturate:(double)arg1;
- (id)fc_saturate:(double)arg1;
- (id)fc_offsetWithHue:(double)arg1 saturation:(double)arg2 lightness:(double)arg3 alpha:(double)arg4;
- (long long)fc_legibleStatusBarStyle;
- (id)fc_legibleForegroundColor;
@end

@interface UIDevice (FCAdditions)
+ (id)fc_platformString;
@end

@interface UIImage (FCAdditions)
- (id)fc_scaledImageWithMaximumSize:(struct CGSize)arg1 targetScale:(double)arg2;
- (id)fc_scaledImageWithMaximumSize:(struct CGSize)arg1;
- (id)fc_circleCroppedImage;
@end

