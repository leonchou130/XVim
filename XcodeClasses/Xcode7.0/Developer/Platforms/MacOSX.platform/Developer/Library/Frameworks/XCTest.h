//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct UCKeyModifiersToTableNum {
    unsigned short _field1;
    unsigned short _field2;
    unsigned int _field3;
    unsigned char _field4[1];
};

struct UCKeySequenceDataIndex {
    unsigned short _field1;
    unsigned short _field2;
    unsigned short _field3[1];
};

struct UCKeyStateRecordsIndex {
    unsigned short _field1;
    unsigned short _field2;
    unsigned int _field3[1];
};

struct UCKeyStateTerminators {
    unsigned short _field1;
    unsigned short _field2;
    unsigned short _field3[1];
};

struct UCKeyToCharTableIndex {
    unsigned short _field1;
    unsigned short _field2;
    unsigned int _field3;
    unsigned int _field4[1];
};

struct UCKeyboardLayout {
    unsigned short _field1;
    unsigned short _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct UCKeyboardTypeHeader _field5[1];
};

struct UCKeyboardTypeHeader {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct _CSTypeRef {
    unsigned long long _opaque_1;
    unsigned long long _opaque_2;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct time_value {
    int seconds;
    int microseconds;
};

#pragma mark -

//
// File: /Applications/Xcode-7GM.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Frameworks/XCTest.framework/Versions/A/XCTest
// UUID: B745330F-B2DE-3D3E-8988-37655F7C644D
//
//                           Arch: x86_64
//                Current version: 8174.0.0
//          Compatibility version: 1.0.0
//                 Source version: 8174.0.0.0.0
//       Minimum Mac OS X version: 10.10.0
//                    SDK version: 10.11.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../../../../../../../SharedFrameworks/
//                               = /Applications/Xcode-7GM.app/Contents/SharedFrameworks
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (BOOL)supportsSecureCoding;
@end

@protocol XCElementAttributesPrivate <XCUIElementAttributes>
@end

@protocol XCTestDriverInterface
- (id)_IDE_startExecutingTestPlanWithProtocolVersion:(NSNumber *)arg1;

@optional
- (id)_IDE_startExecutingTestPlanWhenReady;
@end

@protocol XCTestManager_DaemonConnectionInterface
- (id)_IDE_stopRecording;
- (id)_IDE_startRecordingProcessPID:(NSNumber *)arg1 applicationSnapshotAttributes:(NSArray *)arg2 applicationSnapshotParameters:(NSDictionary *)arg3 elementSnapshotAttributes:(NSArray *)arg4 elementSnapshotParameters:(NSDictionary *)arg5 simpleTargetGestureNames:(NSArray *)arg6;
- (id)_IDE_startRecordingProcessPID:(NSNumber *)arg1 snapshotAttributes:(NSArray *)arg2 snapshotParameters:(NSDictionary *)arg3 simpleTargetGestureNames:(NSArray *)arg4;
- (id)_IDE_startRecordingProcessPID:(NSNumber *)arg1;
- (id)_IDE_startRecording;
- (id)_IDE_beginSessionWithIdentifier:(NSUUID *)arg1 forClient:(NSString *)arg2 atPath:(NSString *)arg3;
- (id)_IDE_initiateControlSessionForTestProcessID:(NSNumber *)arg1;
- (id)_IDE_initiateSessionWithIdentifier:(NSUUID *)arg1 forClient:(NSString *)arg2 atPath:(NSString *)arg3 protocolVersion:(NSNumber *)arg4;
@end

@protocol XCTestManager_IDEInterface
- (id)_XCT_testCase:(NSString *)arg1 method:(NSString *)arg2 didFinishActivity:(XCActivityRecord *)arg3;
- (id)_XCT_testCase:(NSString *)arg1 method:(NSString *)arg2 willStartActivity:(XCActivityRecord *)arg3;
- (id)_XCT_recordedOrientationChange:(NSString *)arg1;
- (id)_XCT_recordedFirstResponderChangedWithApplicationSnapshot:(XCElementSnapshot *)arg1;
- (id)_XCT_exchangeCurrentProtocolVersion:(NSNumber *)arg1 minimumVersion:(NSNumber *)arg2;
- (id)_XCT_recordedKeyEventsWithApplicationSnapshot:(XCElementSnapshot *)arg1 characters:(NSString *)arg2 charactersIgnoringModifiers:(NSString *)arg3 modifierFlags:(NSNumber *)arg4;
- (id)_XCT_recordedEventNames:(NSArray *)arg1 duration:(NSNumber *)arg2 startLocation:(NSDictionary *)arg3 startElementSnapshot:(XCElementSnapshot *)arg4 startApplicationSnapshot:(XCElementSnapshot *)arg5 endLocation:(NSDictionary *)arg6 endElementSnapshot:(XCElementSnapshot *)arg7 endApplicationSnapshot:(XCElementSnapshot *)arg8;
- (id)_XCT_recordedKeyEventsWithCharacters:(NSString *)arg1 charactersIgnoringModifiers:(NSString *)arg2 modifierFlags:(NSNumber *)arg3;
- (id)_XCT_recordedEventNames:(NSArray *)arg1 duration:(NSNumber *)arg2 startElement:(XCAccessibilityElement *)arg3 startApplicationSnapshot:(XCElementSnapshot *)arg4 endElement:(XCAccessibilityElement *)arg5 endApplicationSnapshot:(XCElementSnapshot *)arg6;
- (id)_XCT_recordedEvent:(NSString *)arg1 targetElementID:(NSDictionary *)arg2 applicationSnapshot:(XCElementSnapshot *)arg3;
- (id)_XCT_recordedEvent:(NSString *)arg1 forElement:(NSString *)arg2;
- (id)_XCT_logMessage:(NSString *)arg1;
- (id)_XCT_testMethod:(NSString *)arg1 ofClass:(NSString *)arg2 didMeasureMetric:(NSDictionary *)arg3 file:(NSString *)arg4 line:(NSNumber *)arg5;
- (id)_XCT_testCase:(NSString *)arg1 method:(NSString *)arg2 didStallOnMainThreadInFile:(NSString *)arg3 line:(NSNumber *)arg4;
- (id)_XCT_testCaseDidFinishForTestClass:(NSString *)arg1 method:(NSString *)arg2 withStatus:(NSString *)arg3 duration:(NSNumber *)arg4;
- (id)_XCT_testCaseDidFailForTestClass:(NSString *)arg1 method:(NSString *)arg2 withMessage:(NSString *)arg3 file:(NSString *)arg4 line:(NSNumber *)arg5;
- (id)_XCT_testCaseDidStartForTestClass:(NSString *)arg1 method:(NSString *)arg2;
- (id)_XCT_testSuite:(NSString *)arg1 didFinishAt:(NSString *)arg2 runCount:(NSNumber *)arg3 withFailures:(NSNumber *)arg4 unexpected:(NSNumber *)arg5 testDuration:(NSNumber *)arg6 totalDuration:(NSNumber *)arg7;
- (id)_XCT_testSuite:(NSString *)arg1 didStartAt:(NSString *)arg2;
- (id)_XCT_didFinishExecutingTestPlan;
- (id)_XCT_didBeginExecutingTestPlan;
- (id)_XCT_testBundleReadyWithProtocolVersion:(NSNumber *)arg1 minimumVersion:(NSNumber *)arg2;
- (id)_XCT_getProgressForLaunch:(id)arg1;
- (id)_XCT_terminateProcess:(id)arg1;
- (id)_XCT_launchProcessWithPath:(NSString *)arg1 bundleID:(NSString *)arg2 arguments:(NSArray *)arg3 environmentVariables:(NSDictionary *)arg4;

@optional
- (id)_XCT_testMethod:(NSString *)arg1 ofClass:(NSString *)arg2 didMeasureValues:(NSArray *)arg3 forPerformanceMetricID:(NSString *)arg4 name:(NSString *)arg5 withUnits:(NSString *)arg6 baselineName:(NSString *)arg7 baselineAverage:(NSNumber *)arg8 maxPercentRegression:(NSNumber *)arg9 maxPercentRelativeStandardDeviation:(NSNumber *)arg10 file:(NSString *)arg11 line:(NSNumber *)arg12;
- (id)_XCT_testBundleReady;
@end

@protocol XCTestManager_ManagerInterface
- (void)_XCT_requestBackgroundAssertionWithReply:(void (^)(void))arg1;
- (void)_XCT_requestSocketForSessionIdentifier:(NSUUID *)arg1 reply:(void (^)(NSFileHandle *))arg2;
- (void)_XCT_exchangeProtocolVersion:(unsigned long long)arg1 reply:(void (^)(unsigned long long))arg2;
@end

@protocol XCTestManager_TestsInterface
- (void)_XCT_applicationWithBundleID:(NSString *)arg1 didUpdatePID:(int)arg2 andState:(unsigned long long)arg3;
@end

@protocol XCTestObservation <NSObject>

@optional
- (void)testCaseDidFinish:(XCTestCase *)arg1;
- (void)testCase:(XCTestCase *)arg1 didFailWithDescription:(NSString *)arg2 inFile:(NSString *)arg3 atLine:(unsigned long long)arg4;
- (void)testCaseWillStart:(XCTestCase *)arg1;
- (void)testSuiteDidFinish:(XCTestSuite *)arg1;
- (void)testSuite:(XCTestSuite *)arg1 didFailWithDescription:(NSString *)arg2 inFile:(NSString *)arg3 atLine:(unsigned long long)arg4;
- (void)testSuiteWillStart:(XCTestSuite *)arg1;
- (void)testBundleDidFinish:(NSBundle *)arg1;
- (void)testBundleWillStart:(NSBundle *)arg1;
@end

@protocol XCUIElementAttributes
@property(readonly, getter=isSelected) BOOL selected;
@property(readonly) NSString *placeholderValue;
@property(readonly) long long verticalSizeClass;
@property(readonly) long long horizontalSizeClass;
@property(readonly, getter=isEnabled) BOOL enabled;
@property(readonly) unsigned long long elementType;
@property(readonly, copy) NSString *label;
@property(readonly, copy) NSString *title;
@property(readonly) id value;
@property(readonly) struct CGRect frame;
@property(readonly) NSString *identifier;
@end

@protocol XCUIElementTypeQueryProvider
@property(readonly, copy) XCUIElementQuery *otherElements;
@property(readonly, copy) XCUIElementQuery *handles;
@property(readonly, copy) XCUIElementQuery *layoutItems;
@property(readonly, copy) XCUIElementQuery *layoutAreas;
@property(readonly, copy) XCUIElementQuery *cells;
@property(readonly, copy) XCUIElementQuery *levelIndicators;
@property(readonly, copy) XCUIElementQuery *grids;
@property(readonly, copy) XCUIElementQuery *rulerMarkers;
@property(readonly, copy) XCUIElementQuery *rulers;
@property(readonly, copy) XCUIElementQuery *dockItems;
@property(readonly, copy) XCUIElementQuery *mattes;
@property(readonly, copy) XCUIElementQuery *helpTags;
@property(readonly, copy) XCUIElementQuery *colorWells;
@property(readonly, copy) XCUIElementQuery *relevanceIndicators;
@property(readonly, copy) XCUIElementQuery *splitters;
@property(readonly, copy) XCUIElementQuery *splitGroups;
@property(readonly, copy) XCUIElementQuery *valueIndicators;
@property(readonly, copy) XCUIElementQuery *ratingIndicators;
@property(readonly, copy) XCUIElementQuery *timelines;
@property(readonly, copy) XCUIElementQuery *tabs;
@property(readonly, copy) XCUIElementQuery *decrementArrows;
@property(readonly, copy) XCUIElementQuery *incrementArrows;
@property(readonly, copy) XCUIElementQuery *steppers;
@property(readonly, copy) XCUIElementQuery *webViews;
@property(readonly, copy) XCUIElementQuery *maps;
@property(readonly, copy) XCUIElementQuery *menuBarItems;
@property(readonly, copy) XCUIElementQuery *menuBars;
@property(readonly, copy) XCUIElementQuery *menuItems;
@property(readonly, copy) XCUIElementQuery *menus;
@property(readonly, copy) XCUIElementQuery *textViews;
@property(readonly, copy) XCUIElementQuery *datePickers;
@property(readonly, copy) XCUIElementQuery *secureTextFields;
@property(readonly, copy) XCUIElementQuery *textFields;
@property(readonly, copy) XCUIElementQuery *staticTexts;
@property(readonly, copy) XCUIElementQuery *scrollBars;
@property(readonly, copy) XCUIElementQuery *scrollViews;
@property(readonly, copy) XCUIElementQuery *searchFields;
@property(readonly, copy) XCUIElementQuery *icons;
@property(readonly, copy) XCUIElementQuery *images;
@property(readonly, copy) XCUIElementQuery *links;
@property(readonly, copy) XCUIElementQuery *toggles;
@property(readonly, copy) XCUIElementQuery *switches;
@property(readonly, copy) XCUIElementQuery *pickerWheels;
@property(readonly, copy) XCUIElementQuery *pickers;
@property(readonly, copy) XCUIElementQuery *segmentedControls;
@property(readonly, copy) XCUIElementQuery *activityIndicators;
@property(readonly, copy) XCUIElementQuery *progressIndicators;
@property(readonly, copy) XCUIElementQuery *pageIndicators;
@property(readonly, copy) XCUIElementQuery *sliders;
@property(readonly, copy) XCUIElementQuery *collectionViews;
@property(readonly, copy) XCUIElementQuery *browsers;
@property(readonly, copy) XCUIElementQuery *outlineRows;
@property(readonly, copy) XCUIElementQuery *outlines;
@property(readonly, copy) XCUIElementQuery *tableColumns;
@property(readonly, copy) XCUIElementQuery *tableRows;
@property(readonly, copy) XCUIElementQuery *tables;
@property(readonly, copy) XCUIElementQuery *statusBars;
@property(readonly, copy) XCUIElementQuery *toolbars;
@property(readonly, copy) XCUIElementQuery *tabGroups;
@property(readonly, copy) XCUIElementQuery *tabBars;
@property(readonly, copy) XCUIElementQuery *navigationBars;
@property(readonly, copy) XCUIElementQuery *keys;
@property(readonly, copy) XCUIElementQuery *keyboards;
@property(readonly, copy) XCUIElementQuery *popovers;
@property(readonly, copy) XCUIElementQuery *toolbarButtons;
@property(readonly, copy) XCUIElementQuery *menuButtons;
@property(readonly, copy) XCUIElementQuery *comboBoxes;
@property(readonly, copy) XCUIElementQuery *popUpButtons;
@property(readonly, copy) XCUIElementQuery *disclosureTriangles;
@property(readonly, copy) XCUIElementQuery *checkBoxes;
@property(readonly, copy) XCUIElementQuery *radioGroups;
@property(readonly, copy) XCUIElementQuery *radioButtons;
@property(readonly, copy) XCUIElementQuery *buttons;
@property(readonly, copy) XCUIElementQuery *dialogs;
@property(readonly, copy) XCUIElementQuery *alerts;
@property(readonly, copy) XCUIElementQuery *drawers;
@property(readonly, copy) XCUIElementQuery *sheets;
@property(readonly, copy) XCUIElementQuery *windows;
@property(readonly, copy) XCUIElementQuery *groups;
@end

@protocol XCUIRecorderServiceProtocol
- (void)fetchSourceCodeTreeNodesWithReply:(void (^)(NSArray *, BOOL, NSString *))arg1;
- (void)stopRecordingWithReply:(void (^)(NSString *))arg1;
- (void)startRecordingWithHostXcodePID:(int)arg1 targetProcessPID:(int)arg2 language:(unsigned long long)arg3 reply:(void (^)(NSString *))arg4;
- (void)launchWithInput:(NSString *)arg1 reply:(void (^)(NSString *))arg2;
@end

@interface NSValue (XCTestAdditions)
- (id)xct_contentDescription;
@end

@interface XCAXManager_OSX : NSObject
{
    struct __AXUIElement *_systemWideElement;
    NSMutableDictionary *_observersByPID;
    NSMutableArray *_activeMenus;
    NSHashTable *_applications;
    NSMapTable *_snapshotDictionariesByRootElement;
    NSMutableDictionary *_notificationHandlers;
}

+ (id)sharedManager;
- (id)interruptingUIElementsAffectingSnapshot:(id)arg1;
- (id)_windowsPotentiallyInterferingWithAXUIElement:(struct __AXUIElement *)arg1;
- (void)requestMainThreadIdleNotificationForApplicationWithPID:(int)arg1;
- (void)removeObserver:(id)arg1 forAXNotification:(id)arg2;
- (id)addObserverForAXNotification:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)registerForAXNotificationsForApplication:(id)arg1;
- (id)screenshotData;
- (id)attributesForElementSnapshot:(id)arg1 attributeList:(id)arg2 error:(id *)arg3;
- (const struct __AXUIElement *)copyElementRefForElementAtPoint:(struct CGPoint)arg1 error:(id *)arg2;
- (id)snapshotForApplicationWithPID:(int)arg1 attributeList:(id)arg2 parameters:(id)arg3 error:(id *)arg4;
- (id)_snapshotForElement:(struct __AXUIElement *)arg1 withRootElement:(struct __AXUIElement *)arg2 attributeList:(id)arg3 parameters:(id)arg4 error:(id *)arg5;
- (void)startObservingApplication:(struct __AXUIElement *)arg1;
- (void)_handleNotification:(id)arg1 elementMatchingPredicate:(struct __AXUIElement *)arg2 info:(id)arg3;
@property(readonly) NSArray *defaultAttributes;
- (id)init;

@end

@interface XCAccessibilityElement : NSObject <NSCopying, NSSecureCoding>
{
    NSString *_context;
    id _payload;
    int _processIdentifier;
    struct __AXUIElement *_axElement;
}

+ (BOOL)supportsSecureCoding;
+ (id)elementWithAXUIElement:(struct __AXUIElement *)arg1;
+ (id)elementWithProcessIdentifier:(int)arg1;
+ (id)deviceElement;
+ (id)mockElementWithProcessIdentifier:(int)arg1 payload:(id)arg2;
+ (id)mockElementWithProcessIdentifier:(int)arg1;
@property(readonly) id payload; // @synthesize payload=_payload;
@property(readonly) int processIdentifier; // @synthesize processIdentifier=_processIdentifier;
@property(readonly) const struct __AXUIElement *AXUIElement; // @synthesize AXUIElement=_axElement;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
@property(readonly, getter=isNative) BOOL native;
- (void)dealloc;
- (id)initWithMockProcessIdentifier:(int)arg1 payload:(id)arg2;
- (id)initWithAXUIElement:(struct __AXUIElement *)arg1;
- (id)init;

@end

@interface XCActivityRecord : NSObject <NSSecureCoding>
{
    NSString *_title;
    NSUUID *_uuid;
    NSDate *_start;
    NSDate *_finish;
    BOOL _hasSubactivities;
    NSData *_screenImageData;
    XCElementSnapshot *_snapshot;
    NSArray *_elementsOfInterest;
    XCSynthesizedEventRecord *_synthesizedEvent;
}

+ (BOOL)supportsSecureCoding;
@property(retain) XCSynthesizedEventRecord *synthesizedEvent; // @synthesize synthesizedEvent=_synthesizedEvent;
@property(copy) NSArray *elementsOfInterest; // @synthesize elementsOfInterest=_elementsOfInterest;
@property(retain) XCElementSnapshot *snapshot; // @synthesize snapshot=_snapshot;
@property(copy) NSData *screenImageData; // @synthesize screenImageData=_screenImageData;
@property BOOL hasSubactivities; // @synthesize hasSubactivities=_hasSubactivities;
@property(copy) NSDate *start; // @synthesize start=_start;
@property(copy) NSDate *finish; // @synthesize finish=_finish;
@property(copy) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(copy) NSString *title; // @synthesize title=_title;
@property(readonly) double duration;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)dealloc;

@end

@interface XCApplicationMonitor : NSObject <XCTestObservation>
{
    NSMutableDictionary *_launchSessionTokens;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)sharedMonitor;
@property NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, copy) NSArray *allMonitoredApplications;
- (void)testCaseWillStart:(id)arg1;
- (id)monitoredApplicationWithProcessIdentifier:(int)arg1;
- (id)launchSessionTokenForApplication:(id)arg1;
- (void)setLaunchSessionToken:(id)arg1 forApplication:(id)arg2;
- (void)applicationWithBundleID:(id)arg1 didUpdatePID:(int)arg2 andState:(unsigned long long)arg3;
- (void)setAccessibilityActive:(BOOL)arg1 forApplicationWithPID:(int)arg2;
- (void)beginMonitoringApplication:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XCApplicationMonitor_OSX : XCApplicationMonitor
{
    NSHashTable *_monitoredApplications;
    NSHashTable *_observedApplications;
}

- (id)allMonitoredApplications;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)handleWorkspaceNotification:(id)arg1;
- (id)monitoredApplicationWithProcessIdentifier:(int)arg1;
- (void)beginMonitoringApplication:(id)arg1;
- (id)_runningApplicationMatchingXCApplication:(id)arg1;
- (void)_updateXCApplication:(id)arg1 fromNSRunningApplication:(id)arg2;
- (id)init;

@end

@interface XCUIElementQuery : NSObject <XCUIElementTypeQueryProvider>
{
    BOOL _changesScope;
    NSString *_queryDescription;
    XCUIElementQuery *_inputQuery;
    CDUnknownBlockType _filter;
    unsigned long long _expressedType;
    NSArray *_expressedIdentifiers;
    NSOrderedSet *_lastInput;
    NSOrderedSet *_lastOutput;
}

@property(copy) NSOrderedSet *lastOutput; // @synthesize lastOutput=_lastOutput;
@property(copy) NSOrderedSet *lastInput; // @synthesize lastInput=_lastInput;
@property(copy) NSArray *expressedIdentifiers; // @synthesize expressedIdentifiers=_expressedIdentifiers;
@property unsigned long long expressedType; // @synthesize expressedType=_expressedType;
@property BOOL changesScope; // @synthesize changesScope=_changesScope;
@property(readonly, copy) CDUnknownBlockType filter; // @synthesize filter=_filter;
@property(readonly) XCUIElementQuery *inputQuery; // @synthesize inputQuery=_inputQuery;
@property(readonly, copy) NSString *queryDescription; // @synthesize queryDescription=_queryDescription;
@property(readonly, copy) XCUIElementQuery *otherElements;
@property(readonly, copy) XCUIElementQuery *handles;
@property(readonly, copy) XCUIElementQuery *layoutItems;
@property(readonly, copy) XCUIElementQuery *layoutAreas;
@property(readonly, copy) XCUIElementQuery *cells;
@property(readonly, copy) XCUIElementQuery *levelIndicators;
@property(readonly, copy) XCUIElementQuery *grids;
@property(readonly, copy) XCUIElementQuery *rulerMarkers;
@property(readonly, copy) XCUIElementQuery *rulers;
@property(readonly, copy) XCUIElementQuery *dockItems;
@property(readonly, copy) XCUIElementQuery *mattes;
@property(readonly, copy) XCUIElementQuery *helpTags;
@property(readonly, copy) XCUIElementQuery *colorWells;
@property(readonly, copy) XCUIElementQuery *relevanceIndicators;
@property(readonly, copy) XCUIElementQuery *splitters;
@property(readonly, copy) XCUIElementQuery *splitGroups;
@property(readonly, copy) XCUIElementQuery *valueIndicators;
@property(readonly, copy) XCUIElementQuery *ratingIndicators;
@property(readonly, copy) XCUIElementQuery *timelines;
@property(readonly, copy) XCUIElementQuery *decrementArrows;
@property(readonly, copy) XCUIElementQuery *incrementArrows;
@property(readonly, copy) XCUIElementQuery *steppers;
@property(readonly, copy) XCUIElementQuery *webViews;
@property(readonly, copy) XCUIElementQuery *maps;
@property(readonly, copy) XCUIElementQuery *menuBarItems;
@property(readonly, copy) XCUIElementQuery *menuBars;
@property(readonly, copy) XCUIElementQuery *menuItems;
@property(readonly, copy) XCUIElementQuery *menus;
@property(readonly, copy) XCUIElementQuery *textViews;
@property(readonly, copy) XCUIElementQuery *datePickers;
@property(readonly, copy) XCUIElementQuery *secureTextFields;
@property(readonly, copy) XCUIElementQuery *textFields;
@property(readonly, copy) XCUIElementQuery *staticTexts;
@property(readonly, copy) XCUIElementQuery *scrollBars;
@property(readonly, copy) XCUIElementQuery *scrollViews;
@property(readonly, copy) XCUIElementQuery *searchFields;
@property(readonly, copy) XCUIElementQuery *icons;
@property(readonly, copy) XCUIElementQuery *images;
@property(readonly, copy) XCUIElementQuery *links;
@property(readonly, copy) XCUIElementQuery *toggles;
@property(readonly, copy) XCUIElementQuery *switches;
@property(readonly, copy) XCUIElementQuery *pickerWheels;
@property(readonly, copy) XCUIElementQuery *pickers;
@property(readonly, copy) XCUIElementQuery *segmentedControls;
@property(readonly, copy) XCUIElementQuery *activityIndicators;
@property(readonly, copy) XCUIElementQuery *progressIndicators;
@property(readonly, copy) XCUIElementQuery *pageIndicators;
@property(readonly, copy) XCUIElementQuery *sliders;
@property(readonly, copy) XCUIElementQuery *collectionViews;
@property(readonly, copy) XCUIElementQuery *browsers;
@property(readonly, copy) XCUIElementQuery *outlineRows;
@property(readonly, copy) XCUIElementQuery *outlines;
@property(readonly, copy) XCUIElementQuery *tableColumns;
@property(readonly, copy) XCUIElementQuery *tableRows;
@property(readonly, copy) XCUIElementQuery *tables;
@property(readonly, copy) XCUIElementQuery *statusBars;
@property(readonly, copy) XCUIElementQuery *toolbars;
@property(readonly, copy) XCUIElementQuery *tabGroups;
@property(readonly, copy) XCUIElementQuery *tabBars;
@property(readonly, copy) XCUIElementQuery *tabs;
@property(readonly, copy) XCUIElementQuery *navigationBars;
@property(readonly, copy) XCUIElementQuery *keys;
@property(readonly, copy) XCUIElementQuery *keyboards;
@property(readonly, copy) XCUIElementQuery *popovers;
@property(readonly, copy) XCUIElementQuery *toolbarButtons;
@property(readonly, copy) XCUIElementQuery *menuButtons;
@property(readonly, copy) XCUIElementQuery *comboBoxes;
@property(readonly, copy) XCUIElementQuery *popUpButtons;
@property(readonly, copy) XCUIElementQuery *disclosureTriangles;
@property(readonly, copy) XCUIElementQuery *checkBoxes;
@property(readonly, copy) XCUIElementQuery *radioGroups;
@property(readonly, copy) XCUIElementQuery *radioButtons;
@property(readonly, copy) XCUIElementQuery *buttons;
@property(readonly, copy) XCUIElementQuery *dialogs;
@property(readonly, copy) XCUIElementQuery *alerts;
@property(readonly, copy) XCUIElementQuery *drawers;
@property(readonly, copy) XCUIElementQuery *sheets;
@property(readonly, copy) XCUIElementQuery *windows;
@property(readonly, copy) XCUIElementQuery *groups;
- (id)matchingSnapshotsWithError:(id *)arg1;
- (id)matchingSnapshotsHandleUIInterruption:(BOOL)arg1 withError:(id *)arg2;
@property(readonly, copy) NSArray *allElementsBoundByIndex;
@property(readonly, copy) NSArray *allElementsBoundByAccessibilityElement;
- (id)_elementMatchingAccessibilityElementOfSnapshot:(id)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)elementMatchingType:(unsigned long long)arg1 identifier:(id)arg2;
- (id)elementMatchingPredicate:(id)arg1;
- (id)elementBoundByIndex:(unsigned long long)arg1;
- (id)elementAtIndex:(unsigned long long)arg1;
@property(readonly) XCUIElement *element;
- (id)containingType:(unsigned long long)arg1 identifier:(id)arg2;
- (id)containingPredicate:(id)arg1;
- (id)_containingPredicate:(id)arg1 queryDescription:(id)arg2;
- (id)matchingIdentifier:(id)arg1;
- (id)matchingType:(unsigned long long)arg1 identifier:(id)arg2;
- (id)matchingPredicate:(id)arg1;
- (id)_predicateWithType:(unsigned long long)arg1 identifier:(id)arg2;
- (id)_queryWithPredicate:(id)arg1;
- (id)sorted:(CDUnknownBlockType)arg1;
- (id)descending:(unsigned long long)arg1;
- (id)ascending:(unsigned long long)arg1;
- (id)filter:(CDUnknownBlockType)arg1;
- (id)childrenMatchingType:(unsigned long long)arg1;
- (id)descendantsMatchingType:(unsigned long long)arg1;
@property(readonly, copy) NSString *debugDescription;
- (id)_debugInfoWithIndent:(id *)arg1;
@property(readonly, copy) NSString *elementDescription;
- (id)_derivedExpressedIdentifiers;
- (unsigned long long)_derivedExpressedType;
@property(readonly) XCUIApplication *application;
@property(readonly) unsigned long long count;
- (id)initWithInputQuery:(id)arg1 queryDescription:(id)arg2 filter:(CDUnknownBlockType)arg3;
- (void)dealloc;

@end

@interface XCApplicationQuery : XCUIElementQuery
{
    XCUIApplication *_application;
    XCElementSnapshot *_lastSnapshot;
}

@property(retain) XCElementSnapshot *lastSnapshot; // @synthesize lastSnapshot=_lastSnapshot;
- (id)matchingSnapshotsWithError:(id *)arg1;
- (id)application;
- (id)initWithApplication:(id)arg1;
- (void)dealloc;

@end

@interface XCElementSnapshot : NSObject <XCElementAttributesPrivate, NSSecureCoding>
{
    NSString *_identifier;
    id _value;
    NSString *_placeholderValue;
    BOOL _enabled;
    BOOL _selected;
    BOOL _isMainWindow;
    BOOL _hasKeyboardFocus;
    XCUIApplication *_application;
    unsigned long long _generation;
    NSString *_title;
    NSString *_label;
    unsigned long long _elementType;
    long long _horizontalSizeClass;
    long long _verticalSizeClass;
    XCAccessibilityElement *_accessibilityElement;
    XCAccessibilityElement *_parentAccessibilityElement;
    XCElementSnapshot *_parent;
    NSArray *_children;
    unsigned long long _traits;
    NSArray *_userTestingAttributes;
    NSDictionary *_additionalAttributes;
    struct CGRect _frame;
}

+ (BOOL)supportsSecureCoding;
@property BOOL hasKeyboardFocus; // @synthesize hasKeyboardFocus=_hasKeyboardFocus;
@property(copy) NSDictionary *additionalAttributes; // @synthesize additionalAttributes=_additionalAttributes;
@property(copy) NSArray *userTestingAttributes; // @synthesize userTestingAttributes=_userTestingAttributes;
@property unsigned long long traits; // @synthesize traits=_traits;
@property BOOL isMainWindow; // @synthesize isMainWindow=_isMainWindow;
@property(copy) NSArray *children; // @synthesize children=_children;
@property XCElementSnapshot *parent; // @synthesize parent=_parent;
@property(retain) XCAccessibilityElement *parentAccessibilityElement; // @synthesize parentAccessibilityElement=_parentAccessibilityElement;
@property(retain) XCAccessibilityElement *accessibilityElement; // @synthesize accessibilityElement=_accessibilityElement;
@property long long verticalSizeClass; // @synthesize verticalSizeClass=_verticalSizeClass;
@property long long horizontalSizeClass; // @synthesize horizontalSizeClass=_horizontalSizeClass;
@property(getter=isSelected) BOOL selected; // @synthesize selected=_selected;
@property(getter=isEnabled) BOOL enabled; // @synthesize enabled=_enabled;
@property unsigned long long elementType; // @synthesize elementType=_elementType;
@property(copy) NSString *placeholderValue; // @synthesize placeholderValue=_placeholderValue;
@property(copy) NSString *label; // @synthesize label=_label;
@property(copy) NSString *title; // @synthesize title=_title;
@property(copy) id value; // @synthesize value=_value;
@property struct CGRect frame; // @synthesize frame=_frame;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
- (BOOL)_isAncestorOfElement:(id)arg1;
- (BOOL)_isDescendantOfElement:(id)arg1;
@property(readonly) NSArray *suggestedHitpoints;
- (id)_rootElement;
@property(readonly) struct CGRect visibleFrame;
@property(readonly) XCElementSnapshot *scrollView;
- (BOOL)_frameFuzzyMatchesElement:(id)arg1;
- (BOOL)_fuzzyMatchesElement:(id)arg1;
- (BOOL)_matchesElement:(id)arg1;
- (id)_allDescendants;
- (BOOL)hasDescendantMatchingFilter:(CDUnknownBlockType)arg1;
- (id)descendantsByFilteringWithBlock:(CDUnknownBlockType)arg1;
- (void)enumerateDescendantsUsingBlock:(CDUnknownBlockType)arg1;
@property(readonly, copy) NSString *truncatedValueString;
@property(readonly, copy) NSString *compactDescription;
@property(readonly, copy) NSString *pathDescription;
@property(readonly) NSString *recursiveDescriptionIncludingAccessibilityElement;
@property(readonly) NSString *recursiveDescription;
- (id)recursiveDescriptionWithIndent:(id)arg1 includeAccessibilityElement:(BOOL)arg2;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, copy) NSArray *identifiers;
@property(nonatomic) unsigned long long generation; // @synthesize generation=_generation;
@property(nonatomic) XCUIApplication *application; // @synthesize application=_application;
- (id)init;
- (void)dealloc;
@property(readonly) XCElementSnapshot *window;
@property(readonly) struct CGPoint hitPointForScrolling;
@property(readonly) struct CGPoint hitPoint;
- (id)hitTest:(struct CGPoint)arg1;

@end

@interface XCEventGenerator : NSObject
{
    NSObject<OS_dispatch_queue> *_eventQueue;
    struct __CGEventSource *_eventSource;
    long long _eventSequenceCounter;
    struct __CFRunLoopObserver *_generationObserver;
    unsigned long long _generation;
}

+ (id)sharedGenerator;
@property unsigned long long generation; // @synthesize generation=_generation;
@property(readonly) struct __CGEventSource *eventSource; // @synthesize eventSource=_eventSource;
@property(readonly) NSObject<OS_dispatch_queue> *eventQueue; // @synthesize eventQueue=_eventQueue;
- (double)sendKeyboardInputs:(id)arg1 layout:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (double)sendKey:(id)arg1 modifierFlags:(unsigned long long)arg2 handler:(CDUnknownBlockType)arg3;
- (double)sendString:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (double)setModifiers:(unsigned long long)arg1 merge:(BOOL)arg2 original:(unsigned long long *)arg3 handler:(CDUnknownBlockType)arg4;
- (double)sendKey:(unsigned short)arg1 down:(BOOL)arg2 modifiers:(unsigned long long)arg3 string:(id)arg4 handler:(CDUnknownBlockType)arg5;
- (double)hitKey:(unsigned short)arg1 handler:(CDUnknownBlockType)arg2;
- (double)scrollByX:(double)arg1 y:(double)arg2 handler:(CDUnknownBlockType)arg3;
- (double)clickAtPoint:(struct CGPoint)arg1 forDuration:(double)arg2 releaseAtPoint:(struct CGPoint)arg3 velocity:(double)arg4 handler:(CDUnknownBlockType)arg5;
- (double)clickAndDragFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 handler:(CDUnknownBlockType)arg3;
- (double)rightClickAtPoint:(struct CGPoint)arg1 handler:(CDUnknownBlockType)arg2;
- (double)doubleClickAtPoint:(struct CGPoint)arg1 handler:(CDUnknownBlockType)arg2;
- (double)clickAtPoint:(struct CGPoint)arg1 handler:(CDUnknownBlockType)arg2;
- (double)hoverAtPoint:(struct CGPoint)arg1 handler:(CDUnknownBlockType)arg2;
- (struct CGPoint)_currentMousePosition;
- (void)_clickMouseButton:(unsigned int)arg1 withCount:(unsigned long long)arg2 atPoint:(struct CGPoint)arg3 handleCompletion:(CDUnknownBlockType)arg4;
- (void)_moveMouseToPoint:(struct CGPoint)arg1 handleCompletion:(CDUnknownBlockType)arg2;
- (void)_postCGEvent:(struct __CGEvent *)arg1 handleCompletion:(CDUnknownBlockType)arg2;
- (void)_startEventSequenceWithSteppingCallback:(CDUnknownBlockType)arg1;
- (void)_scheduleCallback:(CDUnknownBlockType)arg1 afterInterval:(double)arg2;
- (id)init;
@property(readonly) int eventSourceStateID;

@end

@interface XCKeyMappingPath : NSObject <NSCopying>
{
    unsigned long long _keyState;
    XCKeyMappingPath *_next;
    NSSet *_inputs;
    NSString *_output;
    unsigned long long _length;
    NSString *_producedString;
}

+ (id)pathWithKeyState:(unsigned long long)arg1 next:(id)arg2 inputs:(id)arg3 output:(id)arg4;
+ (id)emptyPath;
@property(readonly, copy) NSString *producedString; // @synthesize producedString=_producedString;
@property(readonly) unsigned long long length; // @synthesize length=_length;
@property(readonly, copy) NSString *output; // @synthesize output=_output;
@property(readonly, copy) NSSet *inputs; // @synthesize inputs=_inputs;
@property(readonly, copy) XCKeyMappingPath *next; // @synthesize next=_next;
@property(readonly) unsigned long long keyState; // @synthesize keyState=_keyState;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)inputSequenceWithRequiredFlags:(unsigned long long)arg1 excludedFlags:(unsigned long long)arg2;
- (id)inputWithRequiredFlags:(unsigned long long)arg1 excludedFlags:(unsigned long long)arg2;
@property(readonly, getter=isEmpty) BOOL empty;
@property(readonly, getter=isComplete) BOOL complete;
- (void)dealloc;
- (id)initWithKeyState:(unsigned long long)arg1 next:(id)arg2 inputs:(id)arg3 output:(id)arg4;
- (id)init;

@end

@interface XCKeyboardInputSolver : NSObject <NSCopying>
{
    XCKeyboardKeyMap *_keyMap;
    NSString *_string;
    unsigned long long _requiredFlags;
    unsigned long long _excludedFlags;
    unsigned long long _currentFlags;
    BOOL _includeModifierKeys;
    struct _NSRange _unsolvedRange;
    NSMutableArray *_solvedInputs;
    NSMutableDictionary *_solvingPaths;
}

@property(readonly) NSArray *solvedInputs; // @synthesize solvedInputs=_solvedInputs;
@property(readonly) struct _NSRange unsolvedRange; // @synthesize unsolvedRange=_unsolvedRange;
@property BOOL includeModifierKeys; // @synthesize includeModifierKeys=_includeModifierKeys;
@property unsigned long long currentFlags; // @synthesize currentFlags=_currentFlags;
@property unsigned long long excludedFlags; // @synthesize excludedFlags=_excludedFlags;
@property unsigned long long requiredFlags; // @synthesize requiredFlags=_requiredFlags;
@property(readonly, copy) NSString *string; // @synthesize string=_string;
@property(readonly) XCKeyboardKeyMap *keyMap; // @synthesize keyMap=_keyMap;
- (id)_solve;
- (id)solve;
- (void)solveWithSolutionRange:(struct _NSRange)arg1 results:(id)arg2;
- (id)extractCompletePathsWithSolutionRange:(struct _NSRange)arg1;
- (unsigned long long)advancePaths;
- (void)advancePath:(id)arg1 range:(id)arg2;
@property(readonly, getter=isComplete) BOOL complete;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithKeyMap:(id)arg1 string:(id)arg2;
- (id)init;

@end

@interface XCKeyboardKeyMap : NSObject
{
    struct __TISInputSource *_inputSource;
    NSData *_layoutData;
    const struct UCKeyboardLayout *_layoutHeader;
    const struct UCKeyboardTypeHeader *_keyboardType;
    const struct UCKeyModifiersToTableNum *_keyModifiersToTableNum;
    const struct UCKeyToCharTableIndex *_keyToCharTableIndex;
    const struct UCKeyStateRecordsIndex *_keyStateRecordsIndex;
    const struct UCKeyStateTerminators *_keyStateTerminators;
    const struct UCKeySequenceDataIndex *_keySequenceDataIndex;
    NSSet *_numericPadKeyCodes;
    NSDictionary *_systemKeyForKeyCode;
    NSDictionary *_inputsForSystemKey;
    NSDictionary *_inputForKey;
    unsigned long long _longestSystemKey;
    NSDictionary *_modifiersForTableID;
    NSCharacterSet *_validKeyOutputIDs;
    NSDictionary *_inputsForKeyOutputID;
    NSSet *_safeTerminationInputs;
    struct _NSRange _keyStateOutputIDsRange;
    NSIndexSet *_keyStatesWithTerminator;
    NSCharacterSet *_validKeyStates;
    NSCharacterSet *_validSequenceIDs;
    BOOL _canEmitSequenceIDAndKeyState;
    NSDictionary *_inexactSequencesNFC;
    unsigned long long _longestInexactSequence;
    NSDictionary *_stringsForIntendedStrings;
}

@property(readonly) BOOL canEmitSequenceIDAndKeyState; // @synthesize canEmitSequenceIDAndKeyState=_canEmitSequenceIDAndKeyState;
- (id)description;
- (id)stringForIntendedString:(id)arg1;
- (id)stringForInputs:(id)arg1;
- (id)stringForInput:(id)arg1;
- (id)_stringForInput:(id)arg1 keyState:(unsigned long long *)arg2 output:(id)arg3;
- (void)addCachedPaths:(id)arg1 endingString:(id)arg2 range:(struct _NSRange)arg3;
- (id)cachedPathsEndingString:(id)arg1 range:(struct _NSRange)arg2;
- (void)_pathsForSequenceID:(unsigned short)arg1 range:(id)arg2 nextPath:(id)arg3 results:(id)arg4;
- (BOOL)_pathsForSystemKeyEndingString:(id)arg1 range:(struct _NSRange)arg2 nextPath:(id)arg3 results:(id)arg4;
- (id)pathsEndingString:(id)arg1 range:(id)arg2 nextPath:(id)arg3;
- (id)_pathByTerminatingKeyState:(unsigned short)arg1 next:(id)arg2 output:(id)arg3 sequenceID:(unsigned short)arg4;
- (id)pathsForSequenceID:(unsigned short)arg1 nextPath:(id)arg2;
- (void)_sequenceIDsEndingString:(id)arg1 range:(struct _NSRange)arg2 suffixRange:(struct _NSRange)arg3 results:(id)arg4;
- (id)sequenceIDsEndingString:(id)arg1 range:(struct _NSRange)arg2;
- (id)sequenceIDsForString:(id)arg1 range:(struct _NSRange)arg2;
- (id)sequenceIDsForString:(id)arg1;
- (id)stringForSequenceID:(unsigned short)arg1;
- (id)inputsForOutputID:(unsigned short)arg1;
- (id)inputsForText:(id)arg1 currentFlags:(unsigned long long)arg2;
- (id)inputsForText:(id)arg1;
- (id)inputsToSetModifierFlags:(unsigned long long)arg1 currentFlags:(unsigned long long)arg2;
- (id)inputForKey:(id)arg1 modifierFlags:(unsigned long long)arg2;
- (BOOL)canEmitKeyState:(unsigned short)arg1;
- (BOOL)canEmitSequenceIDAsOutputID:(unsigned short)arg1;
- (BOOL)canEmitSequenceID:(unsigned short)arg1;
- (BOOL)canEmitOutputID:(unsigned short)arg1;
- (unsigned long long)uniqueKeyboardType:(unsigned long long)arg1;
- (BOOL)supportsKeyboardType:(unsigned long long)arg1;
@property(readonly, getter=isPrimary) BOOL primary;
- (void)dealloc;
- (void)_initIntendedStrings;
- (void)_initInexactSequences;
- (void)_initValidity;
- (void)_initKeyStates;
- (void)_initKeyOutputs;
- (void)_initModifiers;
- (void)_initKeyboardKeys;
- (id)initWithInputSource:(struct __TISInputSource *)arg1 layoutData:(id)arg2 index:(unsigned long long)arg3;
- (id)init;

@end

@interface XCKeyboardLayout : NSObject
{
    struct __TISInputSource *_source;
    NSString *_identifier;
    NSData *_data;
    NSArray *_keyMaps;
    XCKeyboardKeyMap *_primaryKeyMap;
}

+ (id)unicodeHexKeyboardLayout;
+ (id)currentKeyboardLayout;
+ (void)enumerateKeyboardLayoutsUsingBlock:(CDUnknownBlockType)arg1;
+ (id)keyboardLayoutWithInputSource:(struct __TISInputSource *)arg1;
+ (id)keyboardLayoutWithIdentifier:(id)arg1;
@property(readonly) XCKeyboardKeyMap *primaryKeyMap; // @synthesize primaryKeyMap=_primaryKeyMap;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (BOOL)deactivate:(id)arg1 error:(id *)arg2;
- (id)activateWithError:(id *)arg1;
- (id)_setActiveLayoutState:(id)arg1 error:(id *)arg2;
- (void)enumerateKeyMapsUsingBlock:(CDUnknownBlockType)arg1;
- (id)description;
- (id)keyMapForKeyboardType:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithInputSource:(struct __TISInputSource *)arg1;
- (id)init;

@end

@interface XCPointerEvent : NSObject <NSSecureCoding>
{
    unsigned long long _eventType;
    unsigned long long _buttonType;
    double _offset;
    struct CGPoint _coordinate;
}

+ (CDUnknownBlockType)offsetComparator;
+ (id)pointerEventWithType:(unsigned long long)arg1 buttonType:(unsigned long long)arg2 coordinate:(struct CGPoint)arg3 offset:(double)arg4;
+ (BOOL)supportsSecureCoding;
@property double offset; // @synthesize offset=_offset;
@property struct CGPoint coordinate; // @synthesize coordinate=_coordinate;
@property unsigned long long buttonType; // @synthesize buttonType=_buttonType;
@property unsigned long long eventType; // @synthesize eventType=_eventType;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface XCPointerEventPath : NSObject <NSSecureCoding>
{
    NSMutableArray *_pointerEvents;
    BOOL _immutable;
    unsigned long long _pathType;
    unsigned long long _index;
}

+ (BOOL)supportsSecureCoding;
@property BOOL immutable; // @synthesize immutable=_immutable;
@property unsigned long long index; // @synthesize index=_index;
@property(readonly) unsigned long long pathType; // @synthesize pathType=_pathType;
- (id)description;
- (id)firstEventAfterOffset:(double)arg1;
- (id)lastEventBeforeOffset:(double)arg1;
- (void)_addPointerEvent:(id)arg1;
- (void)releaseButton:(unsigned long long)arg1 atOffset:(double)arg2;
- (void)pressButton:(unsigned long long)arg1 atOffset:(double)arg2;
- (void)liftUpAtOffset:(double)arg1;
- (void)moveToPoint:(struct CGPoint)arg1 atOffset:(double)arg2;
- (void)pressDownAtOffset:(double)arg1;
@property(readonly) NSArray *pointerEvents;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initForMouseAtPoint:(struct CGPoint)arg1 offset:(double)arg2;
- (id)initForTouchAtPoint:(struct CGPoint)arg1 offset:(double)arg2;
- (id)init;
- (void)dealloc;

@end

@interface XCSourceCodeRecording : NSObject
{
    unsigned long long _language;
    NSMutableArray *_treeNodes;
    NSMutableSet *_variableTreeNodes;
    NSArray *_reservedNames;
    NSMutableDictionary *_variableNameToContentNodeDictionary;
    long long _nextVariableCount;
}

@property(retain) NSMutableDictionary *variableNameToContentNodeDictionary; // @synthesize variableNameToContentNodeDictionary=_variableNameToContentNodeDictionary;
@property(retain, setter=_setTreeNodes:) NSArray *_treeNodes; // @synthesize _treeNodes;
@property(readonly) unsigned long long language; // @synthesize language=_language;
- (BOOL)_shareLongestCommonSection_StartAtIndex:(long long)arg1 nextCandidateIndex:(long long *)arg2;
- (BOOL)_createAndShareLocalVariableUsingSourceNode:(id)arg1 atIndex:(long long)arg2;
- (id)_variableNameForVariableContentNode:(id)arg1;
- (unsigned long long)_variableClassTypeForVariableContentNode:(id)arg1;
- (id)_variableNameForElementType:(unsigned long long)arg1 label:(id)arg2 classType:(unsigned long long)arg3;
- (id)_uniqueVariableNameWithName:(id)arg1;
- (id)_nodes:(id)arg1 matchingDistanceFromRoot:(BOOL)arg2 variableContentNode:(id)arg3 withVariableName:(id)arg4 startingIndex:(long long)arg5 replacedNodes:(long long *)arg6 indexOfFirstReplacedNode:(long long *)arg7;
- (BOOL)_shareCommonSectionsUsingExistingLocalVariables;
- (void)_shareCommonSectionsInLocalVariables;
- (id)variableNodeForNode:(id)arg1 withName:(id)arg2 variableType:(unsigned long long)arg3;
- (id)_sourceCodePrefixForVariableName:(id)arg1 variableType:(unsigned long long)arg2;
- (id)_stringRepresentationWithOptions:(unsigned long long)arg1 error:(id *)arg2;
- (id)stringRepresentationWithError:(id *)arg1;
- (void)appendNode:(id)arg1 replaceLastNode:(BOOL)arg2;
- (id)copy;
- (id)initWithLanguage:(unsigned long long)arg1 reservedNames:(id)arg2;
- (id)init;

@end

@interface XCSourceCodeTreeNode : NSObject <NSSecureCoding>
{
    NSString *_sourceCodePrefix;
    NSString *_sourceCodeSuffix;
    NSArray *_childNodes;
    long long _selectedChildNodeIndex;
    XCSourceCodeTreeNode *_parentNode;
    NSSet *_identifierValues;
    NSNumber *_index;
    NSString *_queryType;
    NSNumber *_returnType;
    NSNumber *_calleeType;
    NSNumber *_elementType;
}

+ (id)_stringRepresentationsOfNodesAsSeparateLines:(id)arg1 language:(unsigned long long)arg2 options:(unsigned long long)arg3 error:(id *)arg4;
+ (id)stringRepresentationsOfNodesAsSeparateLines:(id)arg1 language:(unsigned long long)arg2 error:(id *)arg3;
+ (unsigned long long)_defaultOptions;
+ (id)treeForStringRepresentation:(id)arg1 range:(struct _NSRange)arg2 error:(id *)arg3;
+ (struct _NSRange)_rangeOfFirstSourceCodeTreeInString:(id)arg1 range:(struct _NSRange)arg2 compiledSourceCodeRange:(struct _NSRange *)arg3 jsonRange:(struct _NSRange *)arg4;
+ (struct _NSRange)rangeOfFirstSourceCodeTreeInString:(id)arg1 range:(struct _NSRange)arg2;
+ (BOOL)supportsSecureCoding;
+ (id)_sourceCodeForNodes:(id)arg1 error:(id *)arg2;
+ (BOOL)_isContentOfNodesArraysEqual:(id)arg1 ignoringSelection:(BOOL)arg2 toDistanceFromRoot:(long long)arg3;
+ (BOOL)_isContentOfNodesEqual:(id)arg1 ignoringSelection:(BOOL)arg2 toDistanceFromRoot:(long long)arg3;
+ (BOOL)_isContentEqualIgnoringSelection:(BOOL)arg1 childNodes:(id)arg2 childNodes:(id)arg3 toDistanceFromRoot:(long long)arg4;
+ (id)_nodesByMergingSimilarNodes:(id)arg1;
+ (void)_shareSourceCodeStringsForNodes:(id)arg1;
@property(copy, setter=_setElementType:) NSNumber *_elementType; // @synthesize _elementType;
@property(copy, setter=_setCalleeType:) NSNumber *_calleeType; // @synthesize _calleeType;
@property(copy, setter=_setReturnType:) NSNumber *_returnType; // @synthesize _returnType;
@property(copy, setter=_setQueryType:) NSString *_queryType; // @synthesize _queryType;
@property(copy, setter=_setIndex:) NSNumber *_index; // @synthesize _index;
@property(copy, setter=_setIdentifierValues:) NSSet *_identifierValues; // @synthesize _identifierValues;
- (void)_absorbOnlyChildrenIntoParents;
- (id)_treeByPushingOutPrefix:(id *)arg1 error:(id *)arg2;
- (id)copy;
- (id)_copyIncludingNodesWithDistanceFromRoot:(long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)_copyIncludingNodesWithDistanceFromRoot:(unsigned long long)arg1 descendantChildrenArrays:(id)arg2 selectedChildNodeIndexes:(id)arg3;
- (id)_copyIncludingNodesWithMinimumDistanceFromLeaf:(unsigned long long)arg1 descendantChildrenArrays:(id)arg2 selectedChildNodeIndexes:(id)arg3;
- (BOOL)_canPushPutSolitaryRootNodes;
- (unsigned long long)_distanceFromRoot;
- (unsigned long long)_minimumDistanceFromLeaf;
- (unsigned long long)_maximumDistanceFromLeaf;
- (id)_stringRepresentationWithCompiledCodeRange:(struct _NSRange *)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)_stringRepresentationWithOptions:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)_leavesHaveNoNonLeafSiblingsAndHaveSamePrefix:(id *)arg1 suffix:(id *)arg2;
- (BOOL)_leavesHaveSameAccumulatedPrefix:(id *)arg1;
- (id)stringRepresentationWithCompiledCodeRange:(struct _NSRange *)arg1 error:(id *)arg2;
- (id)stringRepresentationWithError:(id *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_treeAsJSONWithError:(id *)arg1;
- (id)description;
- (id)descriptionWithDepth:(unsigned long long)arg1;
- (id)_depthStringWithDepth:(unsigned long long)arg1;
- (id)selectedDescendantsSourceCodeWithError:(id *)arg1;
@property(retain) XCSourceCodeTreeNode *selectedChildNode;
- (id)selectedChildNodesIndexesWithError:(id *)arg1;
- (void)setChildrenOnAllLeafNodes:(id)arg1 selectChildNodeIndex:(unsigned long long)arg2;
- (BOOL)_isContentEqual:(id)arg1 ignoringSelection:(BOOL)arg2 toDistanceFromRoot:(unsigned long long)arg3;
- (unsigned long long)_descendantCount;
@property(readonly) NSIndexPath *selectedChildNodeIndexPath;
@property unsigned long long selectedChildNodeIndex;
@property(retain) NSArray *childNodes;
- (BOOL)setChildNodes:(id)arg1 error:(id *)arg2;
- (BOOL)_canHaveSiblingNode:(id)arg1;
@property(copy) NSString *sourceCodeSuffix;
@property(copy) NSString *sourceCodePrefix;
@property __weak XCSourceCodeTreeNode *parentNode;
@property(readonly) XCSourceCodeTreeNode *rootNode;
@property(readonly, copy) NSString *displayName;
- (void)dealloc;
- (id)initWithSourceCodePrefix:(id)arg1 sourceCodeSuffix:(id)arg2;
- (id)init;

@end

@interface XCSourceCodeTreeNodeEnumerator : NSObject
{
    NSMutableArray *_remainingNodes;
}

- (id)nextObject;
- (id)initWithNode:(id)arg1;

@end

@interface XCSymbolicationRecord : NSObject
{
    unsigned long long _lineNumber;
    NSString *_filePath;
    NSString *_symbolName;
    NSString *_symbolOwner;
}

+ (id)symbolicationRecordFromRemoteServiceForAddress:(unsigned long long)arg1;
+ (id)symbolicationRecordForTask:(unsigned int)arg1 address:(unsigned long long)arg2;
+ (id)symbolicationRecordForAddress:(unsigned long long)arg1;
+ (void)_setCurrentProcessIsRemoteService;
+ (id)_symbolicationRecordForSymbolicator:(struct _CSTypeRef)arg1 address:(unsigned long long)arg2;
+ (id)failureRecord;
+ (BOOL)softLinkCoreSymbolication;
@property(copy) NSString *symbolOwner; // @synthesize symbolOwner=_symbolOwner;
@property(copy) NSString *symbolName; // @synthesize symbolName=_symbolName;
@property(copy) NSString *filePath; // @synthesize filePath=_filePath;
@property unsigned long long lineNumber; // @synthesize lineNumber=_lineNumber;
- (void)dealloc;

@end

@interface XCSymbolicatorHolder : NSObject
{
    struct _CSTypeRef _symbolicator;
}

@property struct _CSTypeRef symbolicator; // @synthesize symbolicator=_symbolicator;

@end

@interface XCSynthesizedEventRecord : NSObject <NSSecureCoding>
{
    NSMutableArray *_eventPaths;
    NSString *_name;
    long long _interfaceOrientation;
}

+ (BOOL)supportsSecureCoding;
@property(readonly) long long interfaceOrientation; // @synthesize interfaceOrientation=_interfaceOrientation;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
- (id)description;
@property(readonly) double maximumOffset;
- (void)addPointerEventPath:(id)arg1;
@property(readonly) NSArray *eventPaths;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithName:(id)arg1 interfaceOrientation:(long long)arg2;
- (id)init;
- (void)dealloc;

@end

@interface XCTest : NSObject
{
    id _internal;
}

+ (id)languageAgnosticTestClassNameForTestClass:(Class)arg1;
@property(readonly) NSString *nameForLegacyLogging;
@property(readonly) NSString *languageAgnosticTestMethodName;
@property(readonly) NSString *languageAgnosticTestClassName;
- (void)tearDown;
- (void)setUp;
- (void)runTest;
- (id)run;
- (void)performTest:(id)arg1;
@property(readonly) XCTestRun *testRun;
@property(readonly) Class testRunClass;
@property(readonly) Class _requiredTestRunBaseClass;
@property(readonly, copy) NSString *name;
@property(readonly) unsigned long long testCaseCount;
- (id)init;
- (void)dealloc;
@property(readonly) NSString *_methodNameForReporting;
@property(readonly) NSString *_classNameForReporting;
- (void)removeTestsWithNames:(id)arg1;

@end

@interface XCTestCase : XCTest
{
    id _internalImplementation;
}

+ (id)_baselineDictionary;
+ (BOOL)_treatMissingBaselinesAsTestFailures;
+ (id)defaultPerformanceMetrics;
+ (BOOL)_reportPerformanceFailuresForLargeImprovements;
+ (BOOL)_enableSymbolication;
+ (id)testInvocations;
+ (BOOL)isInheritingTestCases;
+ (id)testCaseWithSelector:(SEL)arg1;
+ (id)testCaseWithInvocation:(id)arg1;
+ (void)tearDown;
+ (void)setUp;
+ (id)defaultTestSuite;
+ (id)allTestMethodInvocations;
+ (void)_allTestMethodInvocations:(id)arg1;
+ (id)testMethodInvocations;
+ (id)allSubclasses;
@property(retain) _XCTestCaseImplementation *internalImplementation; // @synthesize internalImplementation=_internalImplementation;
- (void)removeUIInterruptionMonitor:(id)arg1;
- (id)addUIInterruptionMonitorWithDescription:(id)arg1 handler:(CDUnknownBlockType)arg2;
@property(readonly) XCTestContext *testContext;
@property(readonly) unsigned long long activityRecordStackDepth;
- (void)startActivityWithTitle:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)measureMetrics:(id)arg1 automaticallyStartMeasuring:(BOOL)arg2 forBlock:(CDUnknownBlockType)arg3;
- (void)_logAndReportPerformanceMetrics:(id)arg1 perfMetricResultsForIDs:(id)arg2 withBaselinesForTest:(id)arg3 defaultBaselinesForPerfMetricID:(id)arg4;
- (void)_recordValues:(id)arg1 forPerformanceMetricID:(id)arg2 name:(id)arg3 unitsOfMeasurement:(id)arg4 baselineName:(id)arg5 baselineAverage:(id)arg6 maxPercentRegression:(id)arg7 maxPercentRelativeStandardDeviation:(id)arg8 maxRegression:(id)arg9 maxStandardDeviation:(id)arg10 file:(id)arg11 line:(unsigned long long)arg12;
- (id)_symbolicationRecordForTestCodeInAddressStack:(id)arg1;
- (void)measureBlock:(CDUnknownBlockType)arg1;
- (void)stopMeasuring;
- (void)startMeasuring;
- (BOOL)_isMeasuringMetrics;
- (BOOL)_didStopMeasuring;
- (BOOL)_didStartMeasuring;
- (BOOL)_didMeasureMetrics;
- (id)_perfMetricDataForID;
- (unsigned long long)numberOfTestIterationsForTestWithSelector:(SEL)arg1;
- (void)afterTestIteration:(unsigned long long)arg1 selector:(SEL)arg2;
- (void)beforeTestIteration:(unsigned long long)arg1 selector:(SEL)arg2;
- (void)tearDownTestWithSelector:(SEL)arg1;
- (void)setUpTestWithSelector:(SEL)arg1;
- (void)performTest:(id)arg1;
- (void)invokeTest;
- (Class)testRunClass;
- (Class)_requiredTestRunBaseClass;
- (void)_recordUnexpectedFailureWithDescription:(id)arg1 exception:(id)arg2;
- (void)_enqueueFailureWithDescription:(id)arg1 inFile:(id)arg2 atLine:(unsigned long long)arg3 expected:(BOOL)arg4;
- (void)_dequeueFailures;
- (void)recordFailureWithDescription:(id)arg1 inFile:(id)arg2 atLine:(unsigned long long)arg3 expected:(BOOL)arg4;
- (void)_interruptTest;
@property(nonatomic) BOOL shouldHaltWhenReceivesControl;
@property BOOL continueAfterFailure;
@property(retain) XCTestCaseRun *testCaseRun;
@property(retain) NSInvocation *invocation;
- (void)dealloc;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (id)nameForLegacyLogging;
- (id)name;
- (id)languageAgnosticTestMethodName;
- (unsigned long long)testCaseCount;
- (id)initWithSelector:(SEL)arg1;
- (id)initWithInvocation:(id)arg1;
- (id)init;
- (void)_fulfillExpectation:(id)arg1;
- (BOOL)_expectationsHaveBeenFulfilled;
- (id)expectationForPredicate:(id)arg1 evaluatedWithObject:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (id)expectationForNotification:(id)arg1 object:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (id)keyValueObservingExpectationForObject:(id)arg1 keyPath:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (id)keyValueObservingExpectationForObject:(id)arg1 keyPath:(id)arg2 expectedValue:(id)arg3;
- (void)waitForExpectationsWithTimeout:(double)arg1 handler:(CDUnknownBlockType)arg2;
- (void)_configureTimeoutForInterval:(double)arg1 forWaitAtAddress:(unsigned long long)arg2 testClassName:(id)arg3 testMethodName:(id)arg4;
- (void)_completeWithResult:(id)arg1;
- (id)expectationWithDescription:(id)arg1;
- (id)_expectationForDarwinNotification:(id)arg1;

@end

@interface XCTestRun : NSObject
{
    id _internalTestRun;
}

+ (id)testRunWithTest:(id)arg1;
@property(readonly) _XCInternalTestRun *implementation; // @synthesize implementation=_internalTestRun;
- (void)recordFailureWithDescription:(id)arg1 inFile:(id)arg2 atLine:(unsigned long long)arg3 expected:(BOOL)arg4;
@property(readonly) BOOL hasSucceeded;
@property(readonly) unsigned long long testCaseCount;
@property(readonly) unsigned long long unexpectedExceptionCount;
@property(readonly) unsigned long long failureCount;
@property(readonly) unsigned long long totalFailureCount;
@property(readonly) unsigned long long executionCount;
- (void)stop;
- (void)start;
@property(readonly, copy) NSDate *stopDate;
@property(readonly, copy) NSDate *startDate;
@property(readonly) double testDuration;
@property(readonly) double totalDuration;
@property(readonly) XCTest *test;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithTest:(id)arg1;

@end

@interface XCTestCaseRun : XCTestRun
{
}

- (void)_recordValues:(id)arg1 forPerformanceMetricID:(id)arg2 name:(id)arg3 unitsOfMeasurement:(id)arg4 baselineName:(id)arg5 baselineAverage:(id)arg6 maxPercentRegression:(id)arg7 maxPercentRelativeStandardDeviation:(id)arg8 maxRegression:(id)arg9 maxStandardDeviation:(id)arg10 file:(id)arg11 line:(unsigned long long)arg12;
- (void)recordFailureWithDescription:(id)arg1 inFile:(id)arg2 atLine:(unsigned long long)arg3 expected:(BOOL)arg4;
- (void)recordFailureInTest:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4 expected:(BOOL)arg5;
- (void)stop;
- (void)start;

@end

@interface XCTestSuite : XCTest
{
    NSString *_name;
    NSMutableArray *_tests;
}

+ (id)testSuiteForTestConfiguration:(id)arg1;
+ (id)defaultTestSuite;
+ (id)allTests;
+ (id)testSuiteForTestCaseClass:(Class)arg1;
+ (id)testSuiteForTestCaseWithName:(id)arg1;
+ (id)testSuiteForBundlePath:(id)arg1;
+ (id)suiteForBundleCache;
+ (void)invalidateCache;
+ (id)_suiteForBundleCache;
+ (id)emptyTestSuiteNamedFromPath:(id)arg1;
+ (id)testSuiteWithName:(id)arg1;
+ (id)testCaseNamesForScopeNames:(id)arg1;
- (id)_initWithTestConfiguration:(id)arg1;
- (void)_sortTestsUsingComparator:(CDUnknownBlockType)arg1;
- (void)performTest:(id)arg1;
- (void)_recordUnexpectedFailureForTestRun:(id)arg1 description:(id)arg2 exception:(id)arg3;
- (Class)testRunClass;
- (Class)_requiredTestRunBaseClass;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)testCaseCount;
@property(readonly, copy) NSArray *tests;
- (void)addTest:(id)arg1;
- (id)description;
@property(copy) NSString *name;
- (void)dealloc;
- (id)initWithName:(id)arg1;
- (void)removeTestsWithNames:(id)arg1;

@end

@interface XCTestCaseSuite : XCTestSuite
{
    Class _testCaseClass;
}

+ (id)emptyTestSuiteForTestCaseClass:(Class)arg1;
- (void)tearDown;
- (void)setUp;
- (id)initWithTestCaseClass:(Class)arg1;

@end

@interface XCTestConfiguration : NSObject <NSSecureCoding>
{
    NSURL *_testBundleURL;
    NSSet *_testsToSkip;
    NSSet *_testsToRun;
    BOOL _reportResultsToIDE;
    NSUUID *_sessionIdentifier;
    NSString *_pathToXcodeReportingSocket;
    BOOL _disablePerformanceMetrics;
    BOOL _treatMissingBaselinesAsFailures;
    NSURL *_baselineFileURL;
    NSString *_targetApplicationPath;
    NSString *_targetApplicationBundleID;
    NSString *_productModuleName;
    BOOL _reportActivities;
}

+ (id)configurationWithContentsOfFile:(id)arg1;
+ (id)activeTestConfiguration;
+ (void)setActiveTestConfiguration:(id)arg1;
+ (BOOL)supportsSecureCoding;
@property BOOL reportActivities; // @synthesize reportActivities=_reportActivities;
@property(copy) NSString *productModuleName; // @synthesize productModuleName=_productModuleName;
@property(copy) NSString *targetApplicationBundleID; // @synthesize targetApplicationBundleID=_targetApplicationBundleID;
@property(copy) NSString *targetApplicationPath; // @synthesize targetApplicationPath=_targetApplicationPath;
@property BOOL treatMissingBaselinesAsFailures; // @synthesize treatMissingBaselinesAsFailures=_treatMissingBaselinesAsFailures;
@property BOOL disablePerformanceMetrics; // @synthesize disablePerformanceMetrics=_disablePerformanceMetrics;
@property BOOL reportResultsToIDE; // @synthesize reportResultsToIDE=_reportResultsToIDE;
@property(copy) NSURL *baselineFileURL; // @synthesize baselineFileURL=_baselineFileURL;
@property(copy) NSString *pathToXcodeReportingSocket; // @synthesize pathToXcodeReportingSocket=_pathToXcodeReportingSocket;
@property(copy) NSUUID *sessionIdentifier; // @synthesize sessionIdentifier=_sessionIdentifier;
@property(copy) NSSet *testsToSkip; // @synthesize testsToSkip=_testsToSkip;
@property(copy) NSSet *testsToRun; // @synthesize testsToRun=_testsToRun;
@property(copy) NSURL *testBundleURL; // @synthesize testBundleURL=_testBundleURL;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (BOOL)writeToFile:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)dealloc;

@end

@interface XCTestContext : NSObject
{
    BOOL _didHandleUIInterruption;
    XCTestContextScope *_currentScope;
}

+ (CDUnknownBlockType)defaultAsynchronousUIElementHandler;
@property BOOL didHandleUIInterruption; // @synthesize didHandleUIInterruption=_didHandleUIInterruption;
@property(retain, nonatomic) XCTestContextScope *currentScope; // @synthesize currentScope=_currentScope;
- (BOOL)handleAsynchronousUIElement:(id)arg1;
- (void)removeUIInterruptionMonitor:(id)arg1;
- (id)addUIInterruptionMonitorWithDescription:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)performInScope:(CDUnknownBlockType)arg1;
@property(readonly, copy) NSArray *handlers;
- (id)init;
- (void)dealloc;

@end

@interface XCTestContextScope : NSObject
{
    XCTestContextScope *_parentScope;
    NSMutableArray *_handlers;
}

@property(copy) NSMutableArray *handlers; // @synthesize handlers=_handlers;
@property(readonly) XCTestContextScope *parentScope; // @synthesize parentScope=_parentScope;
- (id)initWithParentScope:(id)arg1;
- (void)dealloc;

@end

@interface XCTestDriver : NSObject <XCTestManager_TestsInterface, XCTestDriverInterface>
{
    XCTestSuite *_currentTestSuite;
    XCTestConfiguration *_currentTestConfiguration;
    CDUnknownBlockType _completionHandler;
    NSXPCConnection *_managerConnection;
    BOOL _connectionInProgress;
    BOOL _waitingToStart;
    BOOL _hasIDEConnection;
    BOOL _runningSuite;
    NSObject<OS_dispatch_queue> *_managerQueue;
    NSUUID *_sessionIdentifier;
    NSString *_sessionSocketPath;
    DTXConnection *_IDEConnection;
    id <XCTestManager_IDEInterface> _IDEProxy;
    long long _IDEProtocolVersion;
    unsigned long long _daemonProtocolVersion;
    int _daemonAvailabilityToken;
}

+ (id)sharedTestDriver;
@property unsigned long long daemonProtocolVersion; // @synthesize daemonProtocolVersion=_daemonProtocolVersion;
@property BOOL hasIDEConnection; // @synthesize hasIDEConnection=_hasIDEConnection;
@property BOOL waitingToStart; // @synthesize waitingToStart=_waitingToStart;
@property long long IDEProtocolVersion; // @synthesize IDEProtocolVersion=_IDEProtocolVersion;
@property(readonly) id <XCTestManager_IDEInterface> IDEProxy; // @synthesize IDEProxy=_IDEProxy;
@property(retain) DTXConnection *IDEConnection; // @synthesize IDEConnection=_IDEConnection;
@property(retain) NSUUID *sessionIdentifier; // @synthesize sessionIdentifier=_sessionIdentifier;
@property XCTestSuite *currentTestSuite; // @synthesize currentTestSuite=_currentTestSuite;
- (void)_XCT_applicationWithBundleID:(id)arg1 didUpdatePID:(int)arg2 andState:(unsigned long long)arg3;
- (id)_IDE_startExecutingTestPlanWithProtocolVersion:(id)arg1;
- (void)runTestConfiguration:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)runTestSuite:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_checkForTestManager;
- (void)_connectToTestManager;
- (void)_checkManagerDaemonStateAndConnectIfAvailable;
- (void)_resetManagerConnection;
- (void)_connectToIDEWithTransport:(id)arg1;
- (void)_runSuite;
- (void)resumeAppSleep:(id)arg1;
- (id)suspendAppSleep;
@property(readonly) id <XCTestManager_ManagerInterface> managerProxy;
- (id)init;

@end

@interface XCTestExpectation : NSObject
{
    id _internalImplementation;
}

+ (id)expectationForTestCase:(id)arg1 withDescription:(id)arg2;
@property(readonly) _XCTestExpectationImplementation *internalImplementation; // @synthesize internalImplementation=_internalImplementation;
- (void)cleanup;
- (void)fulfill;
- (id)description;
- (id)_initForTestCase:(id)arg1 withDescription:(id)arg2;
- (void)dealloc;

@end

@interface XCTestObserver : NSObject
{
}

- (void)testCaseDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)testCaseDidStop:(id)arg1;
- (void)testCaseDidStart:(id)arg1;
- (void)testSuiteDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)testSuiteDidStop:(id)arg1;
- (void)testSuiteDidStart:(id)arg1;
- (void)stopObserving;
- (void)startObserving;

@end

@interface XCTestLog : XCTestObserver
{
}

+ (id)_messageForTest:(id)arg1 didMeasureValues:(id)arg2 forPerformanceMetricID:(id)arg3 name:(id)arg4 unitsOfMeasurement:(id)arg5 baselineName:(id)arg6 baselineAverage:(id)arg7 maxPercentRegression:(id)arg8 maxPercentRelativeStandardDeviation:(id)arg9 maxRegression:(id)arg10 maxStandardDeviation:(id)arg11 file:(id)arg12 line:(unsigned long long)arg13;
- (void)testCaseDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)_testCase:(id)arg1 didMeasureValues:(id)arg2 forPerformanceMetricID:(id)arg3 name:(id)arg4 unitsOfMeasurement:(id)arg5 baselineName:(id)arg6 baselineAverage:(id)arg7 maxPercentRegression:(id)arg8 maxPercentRelativeStandardDeviation:(id)arg9 maxRegression:(id)arg10 maxStandardDeviation:(id)arg11 file:(id)arg12 line:(unsigned long long)arg13;
- (void)testCaseDidStop:(id)arg1;
- (void)testCaseDidStart:(id)arg1;
- (void)testSuiteDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)testSuiteDidStop:(id)arg1;
- (void)testSuiteDidStart:(id)arg1;
- (void)_testDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)testLogWithFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;
- (void)testLogWithFormat:(id)arg1;
@property(readonly) NSFileHandle *logFileHandle;
- (id)dateFormatter;

@end

@interface XCTestObservationCenter : NSObject
{
    id _internalImplementation;
}

+ (id)sharedTestObservationCenter;
- (void)_testCase:(id)arg1 didFinishActivity:(id)arg2;
- (void)_testCase:(id)arg1 willStartActivity:(id)arg2;
- (void)_testCaseDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)_testCase:(id)arg1 didMeasureValues:(id)arg2 forPerformanceMetricID:(id)arg3 name:(id)arg4 unitsOfMeasurement:(id)arg5 baselineName:(id)arg6 baselineAverage:(id)arg7 maxPercentRegression:(id)arg8 maxPercentRelativeStandardDeviation:(id)arg9 maxRegression:(id)arg10 maxStandardDeviation:(id)arg11 file:(id)arg12 line:(unsigned long long)arg13;
- (void)_testCaseDidStop:(id)arg1;
- (void)_testCaseDidStart:(id)arg1;
- (void)_testSuiteDidFail:(id)arg1 withDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)_testSuiteDidStop:(id)arg1;
- (void)_testSuiteDidStart:(id)arg1;
- (void)_suspendObservationForBlock:(CDUnknownBlockType)arg1;
- (void)_suspendObservation;
- (void)_resumeObservation;
- (void)_observeTestExecutionForBlock:(CDUnknownBlockType)arg1;
- (void)_instantiateObserversFromObserverClassNames:(id)arg1;
- (void)removeTestObserver:(id)arg1;
- (void)addTestObserver:(id)arg1;
- (void)_addLegacyTestObserver:(id)arg1;
@property BOOL suspended;
@property(readonly) NSMutableSet *observers;
- (id)description;
- (id)init;

@end

@interface XCTestProbe : NSObject
{
}

+ (BOOL)isTesting;

@end

@interface XCTestSuiteRun : XCTestRun
{
    NSMutableArray *_testRuns;
}

- (void)recordFailureWithDescription:(id)arg1 inFile:(id)arg2 atLine:(unsigned long long)arg3 expected:(BOOL)arg4;
- (double)testDuration;
- (unsigned long long)unexpectedExceptionCount;
- (unsigned long long)failureCount;
- (unsigned long long)executionCount;
- (void)addTestRun:(id)arg1;
@property(readonly, copy) NSArray *testRuns;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)initWithTest:(id)arg1;

@end

@interface XCUIElement : NSObject <XCUIElementAttributes, XCUIElementTypeQueryProvider>
{
    BOOL _hasKeyboardFocus;
    BOOL _safeQueryResolutionEnabled;
    XCUIElementQuery *_query;
    XCElementSnapshot *_lastSnapshot;
}

+ (void)performWithKeyModifiers:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;
@property BOOL safeQueryResolutionEnabled; // @synthesize safeQueryResolutionEnabled=_safeQueryResolutionEnabled;
@property(readonly) BOOL hasKeyboardFocus; // @synthesize hasKeyboardFocus=_hasKeyboardFocus;
@property(retain) XCElementSnapshot *lastSnapshot; // @synthesize lastSnapshot=_lastSnapshot;
@property(readonly) XCUIElementQuery *query; // @synthesize query=_query;
@property(readonly, copy) XCUIElementQuery *otherElements;
@property(readonly, copy) XCUIElementQuery *handles;
@property(readonly, copy) XCUIElementQuery *layoutItems;
@property(readonly, copy) XCUIElementQuery *layoutAreas;
@property(readonly, copy) XCUIElementQuery *cells;
@property(readonly, copy) XCUIElementQuery *levelIndicators;
@property(readonly, copy) XCUIElementQuery *grids;
@property(readonly, copy) XCUIElementQuery *rulerMarkers;
@property(readonly, copy) XCUIElementQuery *rulers;
@property(readonly, copy) XCUIElementQuery *dockItems;
@property(readonly, copy) XCUIElementQuery *mattes;
@property(readonly, copy) XCUIElementQuery *helpTags;
@property(readonly, copy) XCUIElementQuery *colorWells;
@property(readonly, copy) XCUIElementQuery *relevanceIndicators;
@property(readonly, copy) XCUIElementQuery *splitters;
@property(readonly, copy) XCUIElementQuery *splitGroups;
@property(readonly, copy) XCUIElementQuery *valueIndicators;
@property(readonly, copy) XCUIElementQuery *ratingIndicators;
@property(readonly, copy) XCUIElementQuery *timelines;
@property(readonly, copy) XCUIElementQuery *decrementArrows;
@property(readonly, copy) XCUIElementQuery *incrementArrows;
@property(readonly, copy) XCUIElementQuery *steppers;
@property(readonly, copy) XCUIElementQuery *webViews;
@property(readonly, copy) XCUIElementQuery *maps;
@property(readonly, copy) XCUIElementQuery *menuBarItems;
@property(readonly, copy) XCUIElementQuery *menuBars;
@property(readonly, copy) XCUIElementQuery *menuItems;
@property(readonly, copy) XCUIElementQuery *menus;
@property(readonly, copy) XCUIElementQuery *textViews;
@property(readonly, copy) XCUIElementQuery *datePickers;
@property(readonly, copy) XCUIElementQuery *secureTextFields;
@property(readonly, copy) XCUIElementQuery *textFields;
@property(readonly, copy) XCUIElementQuery *staticTexts;
@property(readonly, copy) XCUIElementQuery *scrollBars;
@property(readonly, copy) XCUIElementQuery *scrollViews;
@property(readonly, copy) XCUIElementQuery *searchFields;
@property(readonly, copy) XCUIElementQuery *icons;
@property(readonly, copy) XCUIElementQuery *images;
@property(readonly, copy) XCUIElementQuery *links;
@property(readonly, copy) XCUIElementQuery *toggles;
@property(readonly, copy) XCUIElementQuery *switches;
@property(readonly, copy) XCUIElementQuery *pickerWheels;
@property(readonly, copy) XCUIElementQuery *pickers;
@property(readonly, copy) XCUIElementQuery *segmentedControls;
@property(readonly, copy) XCUIElementQuery *activityIndicators;
@property(readonly, copy) XCUIElementQuery *progressIndicators;
@property(readonly, copy) XCUIElementQuery *pageIndicators;
@property(readonly, copy) XCUIElementQuery *sliders;
@property(readonly, copy) XCUIElementQuery *collectionViews;
@property(readonly, copy) XCUIElementQuery *browsers;
@property(readonly, copy) XCUIElementQuery *outlineRows;
@property(readonly, copy) XCUIElementQuery *outlines;
@property(readonly, copy) XCUIElementQuery *tableColumns;
@property(readonly, copy) XCUIElementQuery *tableRows;
@property(readonly, copy) XCUIElementQuery *tables;
@property(readonly, copy) XCUIElementQuery *statusBars;
@property(readonly, copy) XCUIElementQuery *toolbars;
@property(readonly, copy) XCUIElementQuery *tabGroups;
@property(readonly, copy) XCUIElementQuery *tabs;
@property(readonly, copy) XCUIElementQuery *tabBars;
@property(readonly, copy) XCUIElementQuery *navigationBars;
@property(readonly, copy) XCUIElementQuery *keys;
@property(readonly, copy) XCUIElementQuery *keyboards;
@property(readonly, copy) XCUIElementQuery *popovers;
@property(readonly, copy) XCUIElementQuery *toolbarButtons;
@property(readonly, copy) XCUIElementQuery *menuButtons;
@property(readonly, copy) XCUIElementQuery *comboBoxes;
@property(readonly, copy) XCUIElementQuery *popUpButtons;
@property(readonly, copy) XCUIElementQuery *disclosureTriangles;
@property(readonly, copy) XCUIElementQuery *checkBoxes;
@property(readonly, copy) XCUIElementQuery *radioGroups;
@property(readonly, copy) XCUIElementQuery *radioButtons;
@property(readonly, copy) XCUIElementQuery *buttons;
@property(readonly, copy) XCUIElementQuery *dialogs;
@property(readonly, copy) XCUIElementQuery *alerts;
@property(readonly, copy) XCUIElementQuery *drawers;
@property(readonly, copy) XCUIElementQuery *sheets;
@property(readonly, copy) XCUIElementQuery *windows;
@property(readonly, copy) XCUIElementQuery *groups;
- (id)coordinateWithNormalizedOffset:(struct CGVector)arg1;
- (id)hitPointCoordinate;
@property(readonly, getter=isHittable) BOOL hittable;
@property(readonly) long long horizontalSizeClass;
@property(readonly) long long verticalSizeClass;
@property(readonly) unsigned long long elementType;
@property(readonly, copy) NSString *label;
@property(readonly, getter=isSelected) BOOL selected;
@property(readonly, getter=isEnabled) BOOL enabled;
@property(readonly) NSString *identifier;
@property(readonly) NSString *placeholderValue;
@property(readonly, copy) NSString *title;
@property(readonly) struct CGRect frame;
@property(readonly) id value;
- (void)resolveHandleUIInterruption:(BOOL)arg1;
- (void)resolve;
@property(readonly, copy) NSString *debugDescription;
- (id)childrenMatchingType:(unsigned long long)arg1;
- (id)descendantsMatchingType:(unsigned long long)arg1;
@property(readonly) BOOL exists;
@property(readonly, nonatomic) XCUIApplication *application;
- (id)description;
- (id)initWithElementQuery:(id)arg1;
- (void)dealloc;
- (void)typeKey:(id)arg1 modifierFlags:(unsigned long long)arg2;
- (void)typeText:(id)arg1;
- (void)scrollByDeltaX:(double)arg1 deltaY:(double)arg2;
- (void)clickForDuration:(double)arg1 thenDragToElement:(id)arg2;
- (void)rightClick;
- (void)doubleClick;
- (void)click;
- (void)hover;
- (struct CGPoint)_hitPointByAttemptingToScrollToVisibleSnapshot:(id)arg1;
- (void)_dispatchEvent:(id)arg1 block:(CDUnknownBlockType)arg2;
@property(readonly) double normalizedSliderPosition;
- (void)adjustToNormalizedSliderPosition:(double)arg1;

@end

@interface XCUIApplication : XCUIElement
{
    BOOL _accessibilityActive;
    BOOL _ancillary;
    BOOL _eventLoopIsIdle;
    int _processID;
    unsigned long long _state;
    XCUIElement *_keyboard;
    NSArray *_launchArguments;
    NSDictionary *_launchEnvironment;
    NSString *_path;
    NSString *_bundleID;
    long long _activationPolicy;
    XCApplicationQuery *_applicationQuery;
    unsigned long long _generation;
}

+ (id)keyPathsForValuesAffectingRunning;
+ (id)appWithPID:(int)arg1;
@property unsigned long long generation; // @synthesize generation=_generation;
@property BOOL eventLoopIsIdle; // @synthesize eventLoopIsIdle=_eventLoopIsIdle;
@property(retain) XCApplicationQuery *applicationQuery; // @synthesize applicationQuery=_applicationQuery;
@property long long activationPolicy; // @synthesize activationPolicy=_activationPolicy;
@property(readonly, copy) NSString *bundleID; // @synthesize bundleID=_bundleID;
@property(readonly, copy) NSString *path; // @synthesize path=_path;
@property BOOL ancillary; // @synthesize ancillary=_ancillary;
@property(nonatomic) BOOL accessibilityActive; // @synthesize accessibilityActive=_accessibilityActive;
@property(copy, nonatomic) NSDictionary *launchEnvironment; // @synthesize launchEnvironment=_launchEnvironment;
@property(copy, nonatomic) NSArray *launchArguments; // @synthesize launchArguments=_launchArguments;
@property(readonly) XCUIElement *keyboard; // @synthesize keyboard=_keyboard;
- (void)_restoreActiveState;
- (void)_handleAXNotification:(id)arg1 info:(id)arg2;
- (void)_waitForViewControllerViewDidDisappearWithTimeout:(double)arg1;
- (void)_waitForQuiescence;
- (void)terminate;
- (void)_launchUsingXcode:(BOOL)arg1;
- (void)launch;
- (void)_waitForLaunchProgressViaProxy:(id)arg1;
- (void)_waitForLaunchTokenViaProxy:(id)arg1;
- (id)application;
@property(readonly, nonatomic) BOOL running;
@property(nonatomic) int processID; // @synthesize processID=_processID;
@property unsigned long long state; // @synthesize state=_state;
- (id)description;
- (id)lastSnapshot;
- (id)query;
- (void)clearQuery;
@property(readonly) XCAccessibilityElement *accessibilityElement;
- (unsigned long long)elementType;
- (id)initPrivateWithPath:(id)arg1 bundleID:(id)arg2;
- (id)init;
- (void)dealloc;

@end

@interface XCUICoordinate : NSObject <NSCopying>
{
    XCUIElement *_element;
    XCUICoordinate *_coordinate;
    struct CGVector _normalizedOffset;
    struct CGVector _pointsOffset;
}

@property(readonly) struct CGVector pointsOffset; // @synthesize pointsOffset=_pointsOffset;
@property(readonly) struct CGVector normalizedOffset; // @synthesize normalizedOffset=_normalizedOffset;
@property(readonly) XCUICoordinate *coordinate; // @synthesize coordinate=_coordinate;
@property(readonly) XCUIElement *element; // @synthesize element=_element;
- (void)scrollByDeltaX:(double)arg1 deltaY:(double)arg2;
- (void)clickForDuration:(double)arg1 thenDragToCoordinate:(id)arg2;
- (void)rightClick;
- (void)doubleClick;
- (void)click;
- (void)hover;
@property(readonly) struct CGPoint screenPoint;
@property(readonly) XCUIElement *referencedElement;
- (id)coordinateWithOffset:(struct CGVector)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoordinate:(id)arg1 pointsOffset:(struct CGVector)arg2;
- (id)initWithElement:(id)arg1 normalizedOffset:(struct CGVector)arg2;
- (id)init;
- (void)dealloc;

@end

@interface XCUIElementAsynchronousHandlerWrapper : NSObject
{
    CDUnknownBlockType _handler;
    NSString *_handlerDescription;
    NSUUID *_identifier;
}

@property(copy) NSUUID *identifier; // @synthesize identifier=_identifier;
@property(copy) NSString *handlerDescription; // @synthesize handlerDescription=_handlerDescription;
@property(copy) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void)dealloc;

@end

@interface XCUIElementHitPointCoordinate : XCUICoordinate
{
}

- (id)description;
- (struct CGPoint)screenPoint;
- (id)initWithCoordinate:(id)arg1 pointsOffset:(struct CGVector)arg2;
- (id)initWithElement:(id)arg1 normalizedOffset:(struct CGVector)arg2;
- (id)initWithElement:(id)arg1;

@end

@interface XCUIRecorder : NSObject
{
    int _processPID;
    unsigned long long _language;
    XCSourceCodeRecording *_recording;
    CDUnknownBlockType _block;
    BOOL _isInvalid;
}

+ (id)iOSRecorderWithTransport:(id)arg1;
+ (id)macRecorder;
+ (void)initialize;
@property(retain) XCSourceCodeRecording *recording; // @synthesize recording=_recording;
@property(copy) CDUnknownBlockType block; // @synthesize block=_block;
@property unsigned long long language; // @synthesize language=_language;
@property int processPID; // @synthesize processPID=_processPID;
@property(readonly, getter=isValid) BOOL valid;
- (void)invalidate;
- (void)recordTargetProcessPID:(int)arg1 forLanguage:(unsigned long long)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)recordTargetProcessPID:(int)arg1 forLanguage:(unsigned long long)arg2 reservedNames:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (int)launchRecorderProcess;
- (void)launchRecorderProcessWithBlock:(CDUnknownBlockType)arg1;
- (BOOL)requiresPermissionForAccessibilityAPIs;
- (BOOL)loggingEnabled;

@end

@interface XCUIRecorderNodeFinder : NSObject
{
    unsigned long long _state;
    NSSet *_descendantsWithTargetElementType;
    NSArray *_childrenWithTargetElementType;
    BOOL _allowDirectChildrenMatches;
    BOOL _shouldAttemptToUseIdentifier;
    BOOL _shouldAttemptToUsePlaceholderValue;
    BOOL _shouldAttemptToUseLabel;
    BOOL _shouldAttemptToUseTitle;
    BOOL _shouldAttemptToUseTruncatedValueString;
    BOOL _allowElementQueries;
    BOOL _excludeUnlessNecessary;
    NSMutableArray *_mutableFoundNodeMatches;
    NSMutableArray *_unprocessedContainsMatches;
    XCUIRecorderNodeFinderMatch *_ancestorNodeFinderMatch;
    unsigned long long _targetSnapshotIndex;
    XCElementSnapshot *_targetSnapshot;
    unsigned long long _language;
    unsigned long long _platform;
}

+ (id)nodeToFindElementForSnapshots:(id)arg1 language:(unsigned long long)arg2 platform:(unsigned long long)arg3;
+ (id)_nodeFindersForSnapshots:(id)arg1 ancestorMatch:(id)arg2 ancestorIndex:(unsigned long long)arg3 stopCombinatorialExpansionIndexes:(id)arg4 excludeUnlessNecessaryElementTypes:(id)arg5 language:(unsigned long long)arg6 platform:(unsigned long long)arg7;
+ (id)_excludeUnlessNecessaryElementTypesForPlatform:(unsigned long long)arg1;
+ (id)_stopCombinatorialExpansionElementTypesForPlatform:(unsigned long long)arg1;
@property BOOL excludeUnlessNecessary; // @synthesize excludeUnlessNecessary=_excludeUnlessNecessary;
@property BOOL allowElementQueries; // @synthesize allowElementQueries=_allowElementQueries;
@property unsigned long long platform; // @synthesize platform=_platform;
@property unsigned long long language; // @synthesize language=_language;
@property(retain) XCElementSnapshot *targetSnapshot; // @synthesize targetSnapshot=_targetSnapshot;
@property unsigned long long targetSnapshotIndex; // @synthesize targetSnapshotIndex=_targetSnapshotIndex;
@property(retain) XCUIRecorderNodeFinderMatch *ancestorNodeFinderMatch; // @synthesize ancestorNodeFinderMatch=_ancestorNodeFinderMatch;
@property(retain) NSMutableArray *unprocessedContainsMatches; // @synthesize unprocessedContainsMatches=_unprocessedContainsMatches;
@property(retain) NSMutableArray *mutableFoundNodeMatches; // @synthesize mutableFoundNodeMatches=_mutableFoundNodeMatches;
- (id)descendantsQueryNodeWithTargetElementTypeContainingElementsOfType:(unsigned long long)arg1 identifierValue:(id)arg2;
- (id)childrenQueryNodeWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)descendantsQueryNodeWithElementType:(unsigned long long)arg1;
- (id)descendantsQueryNodeWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)childAtIndexNodeWithTargetElementType;
- (id)childAtIndexNodeWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)uniqueChildNodeWithTargetElementType;
- (id)uniqueChildNodeWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)uniqueDescendantNodeWithTargetElementType;
- (id)uniqueDescendantNodeWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)descendantsWithTargetElementTypeContainingDescendantElementsWithType:(unsigned long long)arg1 identifierValue:(id)arg2;
- (id)childrenWithTargetElementType;
- (id)childrenWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)descendantsWithTargetElementType;
- (id)descendantsWithTargetElementTypeAndIdentifierValue:(id)arg1;
- (id)nextNodeFinderMatch;
- (id)_stringConstantForString:(id)arg1;
- (void)removeFromAncestorNodeFinderMatch;
- (void)invalidate;
- (id)initWithTargetSnapshot:(id)arg1 targetSnapshotIndex:(unsigned long long)arg2 ancestorMatch:(id)arg3 allowElementQueries:(BOOL)arg4 excludeUnlessNecessary:(BOOL)arg5 language:(unsigned long long)arg6 platform:(unsigned long long)arg7;
- (id)description;

@end

@interface XCUIRecorderNodeFinderMatch : NSObject
{
    NSSet *_matchingSnapshots;
    XCSourceCodeTreeNode *_node;
    XCUIRecorderNodeFinder *_ancestorFinder;
    NSMutableArray *_descendantFinders;
}

@property(retain) NSMutableArray *descendantFinders; // @synthesize descendantFinders=_descendantFinders;
@property(retain) XCUIRecorderNodeFinder *ancestorFinder; // @synthesize ancestorFinder=_ancestorFinder;
@property(retain) XCSourceCodeTreeNode *node; // @synthesize node=_node;
@property(copy) NSSet *matchingSnapshots; // @synthesize matchingSnapshots=_matchingSnapshots;
- (void)invalidate;
- (id)nodeIncludingDescendants;
- (id)description;
- (id)initWithNode:(id)arg1 matchingSnapshots:(id)arg2 ancestorFinder:(id)arg3;

@end

@interface XCUIRecorderTimingMessage : NSObject
{
    double _start;
    NSString *_message;
}

+ (id)descriptionForTimingMessages:(id)arg1;
+ (id)messageWithString:(id)arg1;
@property(copy) NSString *message; // @synthesize message=_message;
@property double start; // @synthesize start=_start;

@end

@interface XCUIRecorderUtilities : NSObject
{
    unsigned long long _language;
    unsigned long long _platform;
    unsigned long long _compareSnapshotsLikePlatform;
    XCAccessibilityElement *_previousFocusedAccessibilityElement;
    NSMutableString *_previousTyping;
}

+ (id)applicationNodeForLanguage:(unsigned long long)arg1;
@property(retain) NSMutableString *previousTyping; // @synthesize previousTyping=_previousTyping;
@property(retain) XCAccessibilityElement *previousFocusedAccessibilityElement; // @synthesize previousFocusedAccessibilityElement=_previousFocusedAccessibilityElement;
@property unsigned long long _compareSnapshotsLikePlatform; // @synthesize _compareSnapshotsLikePlatform;
@property unsigned long long language; // @synthesize language=_language;
- (id)performWithKeyModifiersAndBlockNodeForModifierFlags:(unsigned long long)arg1;
- (id)gestureNodesForKeyDownEventWithCharacters:(id)arg1 charactersIgnoringModifiers:(id)arg2 modifierFlags:(unsigned long long)arg3 focusedAccessibilityElement:(id)arg4 didAppendToPreviousString:(char *)arg5;
- (id)_stringConstantForString:(id)arg1;
- (id)_hexStringForSpecialCharacterString:(id)arg1 characterDescription:(id *)arg2 isDeleteCharacter:(char *)arg3;
- (void)clearPreviousTyping;
- (id)nodeToFindElementForSnapshots:(id)arg1;
- (id)typeKeyNodeForKey:(id)arg1 modifierFlags:(unsigned long long)arg2;
- (id)typeStringNodeForString:(id)arg1;
- (id)stringForKeyModifierFlags:(unsigned long long)arg1;
- (id)simpleGestureNodeForMethodName:(id)arg1;
- (id)applicationNode;
- (id)focusedAccessibilityElementForApplicationSnapshot:(id)arg1;
- (id)snapshotsForAccessibilityElement:(id)arg1 applicationSnapshot:(id)arg2;
- (id)snapshotInTreeStartingWithSnapshot:(id)arg1 forElement:(id)arg2;
- (id)_snapshotInTreeStartingWithSnapshot:(id)arg1 passingPredicateBlock:(CDUnknownBlockType)arg2;
- (id)nodeForOrientationChangeWithSymbolName:(id)arg1;
@property unsigned long long platform; // @synthesize platform=_platform;

@end

@interface XCUIRecorder_Mac : XCUIRecorder
{
    NSXPCConnection *_connectionToService;
    NSMutableString *_previousTyping;
    BOOL _isRecording;
}

- (void)recordTargetProcessPID:(int)arg1 forLanguage:(unsigned long long)arg2 reservedNames:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (void)_recordTargetProcessPID:(int)arg1;
- (void)launchRecorderProcessWithBlock:(CDUnknownBlockType)arg1;
- (BOOL)requiresPermissionForAccessibilityAPIs;
- (void)_fetchEventSnapshots;
- (void)invalidate;

@end

@interface XCUIRecorder_iOS : XCUIRecorder <XCTestManager_IDEInterface>
{
    id <XCTestManager_DaemonConnectionInterface> _daemonProxy;
    XCUIRecorderUtilities *_utilities;
    NSObject<OS_dispatch_queue> *_processingQueue;
    DTXConnection *_connection;
    XCSourceCodeTreeNode *_deferredSoftKeyboardTapNode;
    unsigned long long _deferredSoftKeyboardTapGeneration;
    long long _testProtocolVersion;
}

@property long long testProtocolVersion; // @synthesize testProtocolVersion=_testProtocolVersion;
@property unsigned long long deferredSoftKeyboardTapGeneration; // @synthesize deferredSoftKeyboardTapGeneration=_deferredSoftKeyboardTapGeneration;
@property(retain) XCSourceCodeTreeNode *deferredSoftKeyboardTapNode; // @synthesize deferredSoftKeyboardTapNode=_deferredSoftKeyboardTapNode;
@property(retain) DTXConnection *connection; // @synthesize connection=_connection;
@property(retain) XCUIRecorderUtilities *utilities; // @synthesize utilities=_utilities;
@property(retain) id <XCTestManager_DaemonConnectionInterface> daemonProxy; // @synthesize daemonProxy=_daemonProxy;
- (id)_XCT_testCase:(id)arg1 method:(id)arg2 didFinishActivity:(id)arg3;
- (id)_XCT_testCase:(id)arg1 method:(id)arg2 willStartActivity:(id)arg3;
- (id)_XCT_getProgressForLaunch:(id)arg1;
- (id)_XCT_recordedEvent:(id)arg1 targetElementID:(id)arg2 applicationSnapshot:(id)arg3;
- (id)_XCT_recordedEvent:(id)arg1 forElement:(id)arg2;
- (id)_XCT_logMessage:(id)arg1;
- (id)_XCT_testMethod:(id)arg1 ofClass:(id)arg2 didMeasureMetric:(id)arg3 file:(id)arg4 line:(id)arg5;
- (id)_XCT_testCase:(id)arg1 method:(id)arg2 didStallOnMainThreadInFile:(id)arg3 line:(id)arg4;
- (id)_XCT_testCaseDidFinishForTestClass:(id)arg1 method:(id)arg2 withStatus:(id)arg3 duration:(id)arg4;
- (id)_XCT_testCaseDidFailForTestClass:(id)arg1 method:(id)arg2 withMessage:(id)arg3 file:(id)arg4 line:(id)arg5;
- (id)_XCT_testCaseDidStartForTestClass:(id)arg1 method:(id)arg2;
- (id)_XCT_testSuite:(id)arg1 didFinishAt:(id)arg2 runCount:(id)arg3 withFailures:(id)arg4 unexpected:(id)arg5 testDuration:(id)arg6 totalDuration:(id)arg7;
- (id)_XCT_testSuite:(id)arg1 didStartAt:(id)arg2;
- (id)_XCT_didFinishExecutingTestPlan;
- (id)_XCT_didBeginExecutingTestPlan;
- (id)_XCT_testBundleReadyWithProtocolVersion:(id)arg1 minimumVersion:(id)arg2;
- (id)_XCT_terminateProcess:(id)arg1;
- (id)_XCT_launchProcessWithPath:(id)arg1 bundleID:(id)arg2 arguments:(id)arg3 environmentVariables:(id)arg4;
- (id)elementSnapshotParameters;
- (id)applicationSnapshotParameters;
- (void)postGestureNode:(id)arg1 isSoftKeyTap:(BOOL)arg2;
- (void)postNode:(id)arg1 replaceLastNode:(BOOL)arg2;
- (id)_XCT_exchangeCurrentProtocolVersion:(id)arg1 minimumVersion:(id)arg2;
- (id)_XCT_recordedFirstResponderChangedWithApplicationSnapshot:(id)arg1;
- (id)_XCT_recordedOrientationChange:(id)arg1;
- (id)_XCT_recordedEventNames:(id)arg1 duration:(id)arg2 startLocation:(id)arg3 startElementSnapshot:(id)arg4 startApplicationSnapshot:(id)arg5 endLocation:(id)arg6 endElementSnapshot:(id)arg7 endApplicationSnapshot:(id)arg8;
- (id)_findBestMatchForElementSnapshot:(id)arg1 inApplicationSnapshot:(id)arg2;
- (id)_XCT_recordedEventNames:(id)arg1 duration:(id)arg2 startElement:(id)arg3 startApplicationSnapshot:(id)arg4 endElement:(id)arg5 endApplicationSnapshot:(id)arg6;
- (id)_XCT_recordedKeyEventsWithApplicationSnapshot:(id)arg1 characters:(id)arg2 charactersIgnoringModifiers:(id)arg3 modifierFlags:(id)arg4;
- (id)_XCT_recordedKeyEventsWithCharacters:(id)arg1 charactersIgnoringModifiers:(id)arg2 modifierFlags:(id)arg3;
- (id)_methodNameSimpleTargetGestureNames;
- (void)invalidate;
- (void)recordTargetProcessPID:(int)arg1 forLanguage:(unsigned long long)arg2 reservedNames:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (id)initWithTransport:(id)arg1;

@end

@interface _XCDarwinNotificationExpectation : XCTestExpectation
{
    NSString *_notificationName;
    int _notifyToken;
}

@property(copy) NSString *notificationName; // @synthesize notificationName=_notificationName;
- (void)cleanup;
- (void)fulfill;
- (void)startObserving;
- (void)dealloc;

@end

@interface _XCInternalTestRun : NSObject
{
    XCTest *_test;
    double _startTimeInterval;
    double _stopTimeInterval;
    unsigned long long _executionCount;
    unsigned long long _failureCount;
    unsigned long long _unexpectedExceptionCount;
    BOOL _hasStarted;
    BOOL _hasStopped;
}

@property(readonly) BOOL hasStopped; // @synthesize hasStopped=_hasStopped;
@property(readonly) XCTest *test; // @synthesize test=_test;
- (void)recordFailureWithDescription:(id)arg1 inFile:(id)arg2 atLine:(unsigned long long)arg3 expected:(BOOL)arg4;
@property(readonly) unsigned long long testCaseCount;
@property(readonly) unsigned long long unexpectedExceptionCount;
@property(readonly) unsigned long long failureCount;
@property(readonly) unsigned long long executionCount;
- (void)stop;
- (void)start;
@property(readonly, copy) NSDate *stopDate;
@property(readonly, copy) NSDate *startDate;
@property(readonly) double testDuration;
@property(readonly) double totalDuration;
- (id)initWithTest:(id)arg1;
- (void)dealloc;

@end

@interface _XCKVOExpectation : XCTestExpectation
{
    id _observedObject;
    NSString *_keyPath;
    id _expectedValue;
    CDUnknownBlockType _handler;
    BOOL _hasUnregistered;
    NSLock *_lock;
}

@property BOOL hasUnregistered; // @synthesize hasUnregistered=_hasUnregistered;
@property(copy) CDUnknownBlockType handler; // @synthesize handler=_handler;
@property(retain) id expectedValue; // @synthesize expectedValue=_expectedValue;
@property(copy) NSString *keyPath; // @synthesize keyPath=_keyPath;
@property(retain) id observedObject; // @synthesize observedObject=_observedObject;
- (void)dealloc;
- (void)cleanup;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_safelyUnregister;
- (void)startObserving;
- (id)_initForTestCase:(id)arg1 withDescription:(id)arg2;

@end

@interface _XCNotificationExpectation : XCTestExpectation
{
    id _observedObject;
    NSString *_notificationName;
    CDUnknownBlockType _handler;
}

@property(copy) CDUnknownBlockType handler; // @synthesize handler=_handler;
@property(copy) NSString *notificationName; // @synthesize notificationName=_notificationName;
@property(retain) id observedObject; // @synthesize observedObject=_observedObject;
- (void)_observeExpectedNotification:(id)arg1;
- (void)cleanup;
- (void)startObserving;
- (void)dealloc;

@end

@interface _XCPredicateExpectation : XCTestExpectation
{
    id _object;
    NSPredicate *_predicate;
    CDUnknownBlockType _handler;
    NSTimer *_timer;
}

@property(copy) CDUnknownBlockType handler; // @synthesize handler=_handler;
@property(copy) NSPredicate *predicate; // @synthesize predicate=_predicate;
@property(retain) id object; // @synthesize object=_object;
- (void)_considerFulfilling;
- (void)startObserving;
- (void)dealloc;

@end

@interface _XCTestCaseImplementation : NSObject
{
    NSInvocation *_invocation;
    XCTestCaseRun *_testCaseRun;
    BOOL _continueAfterFailure;
    NSMutableSet *_expectations;
    NSMutableArray *_fulfillments;
    NSObject<OS_dispatch_source> *_timeoutSource;
    double _timeoutDuration;
    BOOL _waiting;
    CDUnknownBlockType _completionHandler;
    NSArray *_performanceMetricIDs;
    NSArray *_activePerformanceMetricIDs;
    NSMutableDictionary *_perfMetricDataForID;
    unsigned long long _startWallClockTime;
    struct time_value _startUserTime;
    struct time_value _startSystemTime;
    unsigned long long _measuringIteration;
    BOOL _isMeasuringMetrics;
    BOOL _didMeasureMetrics;
    BOOL _didStartMeasuring;
    BOOL _didStopMeasuring;
    NSString *_filePathForUnexpectedFailure;
    unsigned long long _lineNumberForUnexpectedFailure;
    unsigned long long _callAddressForCurrentWait;
    NSArray *_callAddressesForLastCreatedExpectation;
    long long _runLoopNestingCount;
    NSMutableArray *_failureRecords;
    BOOL _shouldHaltWhenReceivesControl;
    BOOL _shouldIgnoreSubsequentFailures;
    NSMutableArray *_activityRecordStack;
    XCTestContext *_testContext;
}

@property(readonly) XCTestContext *testContext; // @synthesize testContext=_testContext;
@property(retain, nonatomic) NSMutableArray *activityRecordStack; // @synthesize activityRecordStack=_activityRecordStack;
@property BOOL shouldIgnoreSubsequentFailures; // @synthesize shouldIgnoreSubsequentFailures=_shouldIgnoreSubsequentFailures;
@property BOOL shouldHaltWhenReceivesControl; // @synthesize shouldHaltWhenReceivesControl=_shouldHaltWhenReceivesControl;
@property(retain, nonatomic) NSMutableArray *failureRecords; // @synthesize failureRecords=_failureRecords;
@property long long runLoopNestingCount; // @synthesize runLoopNestingCount=_runLoopNestingCount;
@property(nonatomic) NSObject<OS_dispatch_source> *timeoutSource; // @synthesize timeoutSource=_timeoutSource;
@property(copy) NSArray *callAddressesForLastCreatedExpectation; // @synthesize callAddressesForLastCreatedExpectation=_callAddressesForLastCreatedExpectation;
@property unsigned long long callAddressForCurrentWait; // @synthesize callAddressForCurrentWait=_callAddressForCurrentWait;
@property unsigned long long lineNumberForUnexpectedFailure; // @synthesize lineNumberForUnexpectedFailure=_lineNumberForUnexpectedFailure;
@property(copy) NSString *filePathForUnexpectedFailure; // @synthesize filePathForUnexpectedFailure=_filePathForUnexpectedFailure;
@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property double timeoutDuration; // @synthesize timeoutDuration=_timeoutDuration;
@property BOOL waiting; // @synthesize waiting=_waiting;
@property(retain, nonatomic) NSMutableArray *fulfillments; // @synthesize fulfillments=_fulfillments;
@property(retain, nonatomic) NSMutableSet *expectations; // @synthesize expectations=_expectations;
@property BOOL didStopMeasuring; // @synthesize didStopMeasuring=_didStopMeasuring;
@property BOOL didStartMeasuring; // @synthesize didStartMeasuring=_didStartMeasuring;
@property BOOL didMeasureMetrics; // @synthesize didMeasureMetrics=_didMeasureMetrics;
@property BOOL isMeasuringMetrics; // @synthesize isMeasuringMetrics=_isMeasuringMetrics;
@property unsigned long long measuringIteration; // @synthesize measuringIteration=_measuringIteration;
@property struct time_value startUserTime; // @synthesize startUserTime=_startUserTime;
@property struct time_value startSystemTime; // @synthesize startSystemTime=_startSystemTime;
@property unsigned long long startWallClockTime; // @synthesize startWallClockTime=_startWallClockTime;
@property(retain) NSMutableDictionary *perfMetricDataForID; // @synthesize perfMetricDataForID=_perfMetricDataForID;
@property(copy) NSArray *activePerformanceMetricIDs; // @synthesize activePerformanceMetricIDs=_activePerformanceMetricIDs;
@property(copy) NSArray *performanceMetricIDs; // @synthesize performanceMetricIDs=_performanceMetricIDs;
@property BOOL continueAfterFailure; // @synthesize continueAfterFailure=_continueAfterFailure;
@property(retain) XCTestCaseRun *testCaseRun; // @synthesize testCaseRun=_testCaseRun;
@property(retain) NSInvocation *invocation; // @synthesize invocation=_invocation;
- (void)resetExpectations;
- (void)addExpectation:(id)arg1;
- (id)init;
- (void)dealloc;

@end

@interface _XCTestCaseInterruptionException : NSException
{
}

+ (void)interruptTest;

@end

@interface _XCTestDriverTestObserver : NSObject <XCTestObservation>
{
    XCTestRun *_currentTestRun;
}

- (void)testBundleDidFinish:(id)arg1;
- (void)_testCase:(id)arg1 didFinishActivity:(id)arg2;
- (void)_testCase:(id)arg1 willStartActivity:(id)arg2;
- (void)_testCase:(id)arg1 didMeasureValues:(id)arg2 forPerformanceMetricID:(id)arg3 name:(id)arg4 unitsOfMeasurement:(id)arg5 baselineName:(id)arg6 baselineAverage:(id)arg7 maxPercentRegression:(id)arg8 maxPercentRelativeStandardDeviation:(id)arg9 maxRegression:(id)arg10 maxStandardDeviation:(id)arg11 file:(id)arg12 line:(unsigned long long)arg13;
- (void)testCase:(id)arg1 didFailWithDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)testCaseDidFinish:(id)arg1;
- (void)testCaseWillStart:(id)arg1;
- (void)testSuiteDidFinish:(id)arg1;
- (void)testSuite:(id)arg1 didFailWithDescription:(id)arg2 inFile:(id)arg3 atLine:(unsigned long long)arg4;
- (void)testSuiteWillStart:(id)arg1;
- (void)testBundleWillStart:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _XCTestExpectationImplementation : NSObject
{
    BOOL _hasCompleted;
    XCTestCase *_testCase;
    NSString *_expectationDescription;
}

@property(copy) NSString *expectationDescription; // @synthesize expectationDescription=_expectationDescription;
@property XCTestCase *testCase; // @synthesize testCase=_testCase;
@property BOOL hasCompleted; // @synthesize hasCompleted=_hasCompleted;
- (void)dealloc;

@end

@interface _XCTestImplementation : NSObject
{
    XCTestRun *_testRun;
}

@property(retain) XCTestRun *testRun; // @synthesize testRun=_testRun;
- (void)dealloc;

@end

@interface _XCTestObservationCenterImplementation : NSObject
{
    NSMutableSet *_observers;
    BOOL _suspended;
}

@property BOOL suspended; // @synthesize suspended=_suspended;
@property(retain) NSMutableSet *observers; // @synthesize observers=_observers;
- (id)init;

@end

@interface _XCUIWindowInfo : NSObject
{
    int _level;
    int _processID;
    struct CGRect _bounds;
}

@property int processID; // @synthesize processID=_processID;
@property struct CGRect bounds; // @synthesize bounds=_bounds;
@property int level; // @synthesize level=_level;
- (id)description;

@end

