//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Applications/Xcode-7GM.app/Contents/OtherFrameworks/DocSetViewing.framework/Versions/A/DocSetViewing
// UUID: 3088AFA9-4230-3AD9-88C7-896BB44309E7
//
//                           Arch: x86_64
//                Current version: 2301.0.0
//          Compatibility version: 1.0.0
//                 Source version: 2301.0.0.0.0
//       Minimum Mac OS X version: 10.10.0
//                    SDK version: 10.11.0
//
// Objective-C Garbage Collection: Supported
//
//                       Run path: @loader_path/../../../
//                               = /Applications/Xcode-7GM.app/Contents/OtherFrameworks
//

@protocol DSMQueryControllerBookTitleCallbacks
- (void)docSets:(NSArray *)arg1 didFindBookTitleResults:(NSArray *)arg2;
@end

@protocol NSAlertDelegate <NSObject>

@optional
- (BOOL)alertShowHelp:(NSAlert *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSMenuDelegate <NSObject>

@optional
- (struct CGRect)confinementRectForMenu:(NSMenu *)arg1 onScreen:(NSScreen *)arg2;
- (void)menu:(NSMenu *)arg1 willHighlightItem:(NSMenuItem *)arg2;
- (void)menuDidClose:(NSMenu *)arg1;
- (void)menuWillOpen:(NSMenu *)arg1;
- (BOOL)menuHasKeyEquivalent:(NSMenu *)arg1 forEvent:(NSEvent *)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)menu:(NSMenu *)arg1 updateItem:(NSMenuItem *)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (long long)numberOfItemsInMenu:(NSMenu *)arg1;
- (void)menuNeedsUpdate:(NSMenu *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (NSArray *)outlineView:(NSOutlineView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItems:(NSArray *)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(NSOutlineView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 writeItems:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(NSArray *)arg4;
- (id <NSPasteboardWriting>)outlineView:(NSOutlineView *)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (id)outlineView:(NSOutlineView *)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 byItem:(id)arg4;
- (id)outlineView:(NSOutlineView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(NSOutlineView *)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSSplitViewDelegate <NSObject>

@optional
- (void)splitViewDidResizeSubviews:(NSNotification *)arg1;
- (void)splitViewWillResizeSubviews:(NSNotification *)arg1;
- (struct CGRect)splitView:(NSSplitView *)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(NSSplitView *)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(NSSplitView *)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (BOOL)splitView:(NSSplitView *)arg1 shouldAdjustSizeOfSubview:(NSView *)arg2;
- (void)splitView:(NSSplitView *)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(NSSplitView *)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(NSSplitView *)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(NSSplitView *)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(NSSplitView *)arg1 shouldCollapseSubview:(NSView *)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(NSSplitView *)arg1 canCollapseSubview:(NSView *)arg2;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (NSArray *)tableView:(NSTableView *)arg1 rowActionsForRow:(long long)arg2 edge:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol NSUserInterfaceItemSearching <NSObject>
- (NSArray *)localizedTitlesForItem:(id)arg1;
- (void)searchForItemsWithSearchString:(NSString *)arg1 resultLimit:(long long)arg2 matchedItemHandler:(void (^)(NSArray *))arg3;

@optional
- (void)showAllHelpTopicsForSearchString:(NSString *)arg1;
- (void)performActionForItem:(id)arg1;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidChangeOcclusionState:(NSNotification *)arg1;
- (void)windowDidExitVersionBrowser:(NSNotification *)arg1;
- (void)windowWillExitVersionBrowser:(NSNotification *)arg1;
- (void)windowDidEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowWillEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowDidExitFullScreen:(NSNotification *)arg1;
- (void)windowWillExitFullScreen:(NSNotification *)arg1;
- (void)windowDidEnterFullScreen:(NSNotification *)arg1;
- (void)windowWillEnterFullScreen:(NSNotification *)arg1;
- (void)windowDidEndLiveResize:(NSNotification *)arg1;
- (void)windowWillStartLiveResize:(NSNotification *)arg1;
- (void)windowDidEndSheet:(NSNotification *)arg1;
- (void)windowWillBeginSheet:(NSNotification *)arg1;
- (void)windowDidChangeBackingProperties:(NSNotification *)arg1;
- (void)windowDidChangeScreenProfile:(NSNotification *)arg1;
- (void)windowDidChangeScreen:(NSNotification *)arg1;
- (void)windowDidUpdate:(NSNotification *)arg1;
- (void)windowDidDeminiaturize:(NSNotification *)arg1;
- (void)windowDidMiniaturize:(NSNotification *)arg1;
- (void)windowWillMiniaturize:(NSNotification *)arg1;
- (void)windowWillClose:(NSNotification *)arg1;
- (void)windowDidResignMain:(NSNotification *)arg1;
- (void)windowDidBecomeMain:(NSNotification *)arg1;
- (void)windowDidResignKey:(NSNotification *)arg1;
- (void)windowDidBecomeKey:(NSNotification *)arg1;
- (void)windowDidMove:(NSNotification *)arg1;
- (void)windowWillMove:(NSNotification *)arg1;
- (void)windowDidExpose:(NSNotification *)arg1;
- (void)windowDidResize:(NSNotification *)arg1;
- (void)window:(NSWindow *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)window:(NSWindow *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenOnScreen:(NSScreen *)arg2 withDuration:(double)arg3;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1 onScreen:(NSScreen *)arg2;
- (void)window:(NSWindow *)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToExitFullScreenForWindow:(NSWindow *)arg1;
- (void)windowDidFailToEnterFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1;
- (unsigned long long)window:(NSWindow *)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(NSWindow *)arg1 shouldDragDocumentWithEvent:(NSEvent *)arg2 from:(struct CGPoint)arg3 withPasteboard:(NSPasteboard *)arg4;
- (BOOL)window:(NSWindow *)arg1 shouldPopUpDocumentPathMenu:(NSMenu *)arg2;
- (struct CGRect)window:(NSWindow *)arg1 willPositionSheet:(NSWindow *)arg2 usingRect:(struct CGRect)arg3;
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)arg1;
- (BOOL)windowShouldZoom:(NSWindow *)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(NSWindow *)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(NSWindow *)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(NSWindow *)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

@protocol WebDocumentText <NSObject>
- (void)deselectAll;
- (void)selectAll;
- (NSAttributedString *)selectedAttributedString;
- (NSString *)selectedString;
- (NSAttributedString *)attributedString;
- (NSString *)string;
- (BOOL)supportsTextEncoding;
@end

@interface DSADocSet (TreeControllerSupport)
- (BOOL)isLeaf;
- (unsigned long long)childCount;
- (id)children;
- (id)name;
@end

@interface DSADocSetGroup (TreeControllerSupport)
- (unsigned long long)childCount;
- (BOOL)isLeaf;
- (id)localizedName;
- (id)children;
@end

@interface DSANode (TreeControllerSupport)
- (unsigned long long)childCount;
- (BOOL)isLeaf;
- (id)localizedName;
@end

@interface DVBookmarksArrayController : NSArrayController
{
    NSTableView *tableView;
    DVBookmarksOutlineViewController *controller;
}

@property(retain, nonatomic) DVBookmarksOutlineViewController *controller; // @synthesize controller;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(int)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(int)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (id)moveObjectsInArrangedObjectsFromIndexes:(id)arg1 toIndex:(unsigned int)arg2;
- (void)awakeFromNib;
- (void)objectDidEndEditing:(id)arg1;

@end

@interface DVBookmarksOutlineViewController : NSObject <NSTableViewDelegate, NSTableViewDataSource>
{
    NSWindow *m_bookmarksWindow;
    NSTableView *m_bookmarksTable;
    NSArrayController *m_bookmarksArrayController;
    DVMainController *m_mainController;
}

@property(nonatomic) DVMainController *mainController; // @synthesize mainController=m_mainController;
@property(retain, nonatomic) NSWindow *bookmarksWindow; // @synthesize bookmarksWindow=m_bookmarksWindow;
@property(retain, nonatomic) NSArrayController *bookmarksArrayController; // @synthesize bookmarksArrayController=m_bookmarksArrayController;
@property(retain, nonatomic) NSTableView *bookmarksTable; // @synthesize bookmarksTable=m_bookmarksTable;
- (void)deleteSelectedBookmarks:(id)arg1;
- (void)addBookmarkForCurrentPage:(id)arg1;
- (void)deleteSelectedBookmarks;
- (void)done:(id)arg1;
- (void)saveChanges;
- (id)bookmarkManager;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVBookmarksTableView : NSTableView
{
    DVBookmarksOutlineViewController *m_controller;
}

@property(retain, nonatomic) DVBookmarksOutlineViewController *controller; // @synthesize controller=m_controller;
- (void)keyDown:(id)arg1;

@end

@interface DVCustomToolbarItem : NSToolbarItem
{
    id _applicationController;
}

@property(nonatomic) id applicationController; // @synthesize applicationController=_applicationController;

@end

@interface DVBookmarksToolbarItem : DVCustomToolbarItem
{
    NSPopUpButton *popUpButton;
    NSImage *m_cachedBookmarksImage;
}

@property(retain, nonatomic) NSImage *cachedBookmarksImage; // @synthesize cachedBookmarksImage=m_cachedBookmarksImage;
- (void)updateBookmarksMenu:(id)arg1;
- (id)menuItemForBookmark:(id)arg1;
- (id)bookmarksImage;
- (void)awakeFromNib;
- (id)initWithItemIdentifier:(id)arg1;

@end

@interface DVBrowseToolbarItem : DVCustomToolbarItem
{
    NSButton *browseButton;
}

- (void)validate;

@end

@interface DVBrowserAndWebViewSplitView : NSSplitView
{
    id _applicationController;
}

- (double)dividerThickness;

@end

@interface DVConstants : NSObject
{
}

@end

@interface DVDocSetBrowserController : NSObject
{
    NSBrowser *_browser;
    NSTreeController *_docSetController;
    NSOutlineView *_outlineView;
    NSArray *m_treeControllerRootItems;
    BOOL m_addedObserver;
    id m_mainController;
}

+ (id)sharedController;
@property(retain, nonatomic) id mainController; // @synthesize mainController=m_mainController;
@property(nonatomic) BOOL addedObserver; // @synthesize addedObserver=m_addedObserver;
@property(readonly, nonatomic) NSTreeController *docSetController; // @synthesize docSetController=_docSetController;
@property(retain, nonatomic) NSArray *treeControllerRootItems; // @synthesize treeControllerRootItems=m_treeControllerRootItems;
- (void)loadBrowserSelectionInWebView:(id)arg1;
- (void)_selectTreeNodesMatchingDocSetNodes:(id)arg1 contextTreeNode:(id)arg2 treeController:(id)arg3;
- (id)_selectChildNodeInTreeNode:(id)arg1 matchingDocSetNode:(id)arg2 treeController:(id)arg3;
- (void)selectPathOfNode:(id)arg1 docSet:(id)arg2;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (id)docSetOutlineView;
- (id)docSetBrowser;
- (void)refreshDataSource;
- (void)docSetWasUnloaded:(id)arg1;
- (void)docSetWasLoaded:(id)arg1;
- (void)removeObserverOfDocSetsBrowserSelectionChanges:(id)arg1;
- (void)observeDocSetsBrowserSelectionChanges:(id)arg1 context:(void *)arg2;
- (id)init;

@end

@interface DVFileManagerUtilities : NSObject
{
}

+ (BOOL)fileExistsAtLocalURL:(id)arg1;
+ (BOOL)fileExistsAtPath:(id)arg1;

@end

@interface DVHomeToolbarItem : DVCustomToolbarItem
{
    NSPopUpButton *popUpButton;
    NSImage *m_cachedHomeImage;
    NSArray *m_loadedDocSets;
    BOOL m_menuNeedsUpdate;
}

@property(nonatomic) BOOL menuNeedsUpdate; // @synthesize menuNeedsUpdate=m_menuNeedsUpdate;
@property(retain, nonatomic) NSArray *loadedDocSets; // @synthesize loadedDocSets=m_loadedDocSets;
@property(retain, nonatomic) NSImage *cachedHomeImage; // @synthesize cachedHomeImage=m_cachedHomeImage;
- (void)validate;
- (void)popUpNote:(id)arg1;
- (id)docSetUpdatesSortedByName:(id)arg1;
- (void)docSetWasUnloaded:(id)arg1;
- (void)docSetWasLoaded:(id)arg1;
- (void)_rebuildPopUpMenu;
- (void)awakeFromNib;
- (id)configurePopUp;
- (id)initWithItemIdentifier:(id)arg1;
- (id)homeImage;

@end

@interface DVIconAndTextCell : NSTextFieldCell
{
    NSImage *icon;
    struct CGSize preferredIconSize;
}

- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (struct CGRect)titleEditingRectForBounds:(struct CGRect)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)isOpaque;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (struct CGRect)expansionFrameWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)iconRectForBounds:(struct CGRect)arg1;
- (struct CGRect)titleAndIconRectForBounds:(struct CGRect)arg1;
- (struct CGSize)titleSize;
- (id)attributedTitle;
- (double)textInsetForBounds:(struct CGRect)arg1;
- (double)iconInsetForBounds:(struct CGRect)arg1;
- (struct CGSize)iconSizeForBounds:(struct CGRect)arg1;
- (void)setPreferredIconSize:(struct CGSize)arg1;
- (struct CGSize)preferredIconSize;
- (id)icon;
- (void)setIcon:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initTextCell:(id)arg1;

@end

@interface DVImageUtilities : NSObject
{
}

+ (id)imageNamed:(id)arg1 extension:(id)arg2 inBundleOfClass:(Class)arg3;

@end

@interface DVMainController : NSObject <NSUserInterfaceItemSearching, NSWindowDelegate, NSSplitViewDelegate, NSAlertDelegate, NSMenuDelegate, DSMQueryControllerBookTitleCallbacks>
{
    DVWindow *mainWindow;
    NSOutlineView *queriesOutlineView;
    DVResultsOutlineViewController *outlineViewController;
    WVPageFindWebView *resultsWebView;
    WVPageFindContainerView *webViewContainerView;
    NSSplitView *splitView;
    NSView *leftSubview;
    NSView *rightSubview;
    NSSegmentedControl *backForwardControl;
    NSSearchField *searchField;
    NSToolbarItem *_searchFieldToolbarItem;
    DVSearchFieldController *searchFieldController;
    DVQueryOptionsController *queryOptionsController;
    DVScopeBarView *scopeBarView;
    DVScopeBarController *scopeBarController;
    DVStatusBarController *m_statusBarController;
    NSString *m_searchString;
    NSString *m_previousMainFrameURL;
    double m_greatestMaxRelevanceInSearchedDocSets;
    unsigned long long countOfDocSetsToSearch;
    unsigned long long completedFullTextSearchForDocSetsCounter;
    NSMutableArray *m_temporaryFulTextSearchResults;
    NSOutlineView *m_docSetBrowser;
    unsigned long long m_totalResourceCountForResultsWebView;
    unsigned long long m_completedResourceCountForResultsWebView;
    DVBookmarksOutlineViewController *m_bookmarksController;
    DVManPageController *m_cachedManPageController;
    id m_docWindowClient;
    NSString *m_shortcutMenuSearchString;
    DVWebViewDelegates *m_webViewDelegates;
    NSTimer *m_delayedSearchTimer;
    CDUnknownBlockType userInterfaceSearchingHandleBlock;
    NSMutableArray *m_apiSearchResults;
    BOOL m_finishedAPISearch;
    BOOL m_finishedTitleSearch;
    BOOL m_finishedFullTextSearch;
    NSMutableArray *_docSetUpdateIdentifiersInInstallationPhase;
}

+ (id)sharedMainController;
+ (void)initialize;
@property(retain, nonatomic) NSMutableArray *docSetUpdateIdentifiersInInstallationPhase; // @synthesize docSetUpdateIdentifiersInInstallationPhase=_docSetUpdateIdentifiersInInstallationPhase;
@property(nonatomic) BOOL finishedFullTextSearch; // @synthesize finishedFullTextSearch=m_finishedFullTextSearch;
@property(nonatomic) BOOL finishedTitleSearch; // @synthesize finishedTitleSearch=m_finishedTitleSearch;
@property(nonatomic) BOOL finishedAPISearch; // @synthesize finishedAPISearch=m_finishedAPISearch;
@property(retain, nonatomic) NSMutableArray *apiSearchResults; // @synthesize apiSearchResults=m_apiSearchResults;
@property(retain, nonatomic) DVSearchFieldController *searchFieldController; // @synthesize searchFieldController;
@property(retain, nonatomic) NSOutlineView *queriesOutlineView; // @synthesize queriesOutlineView;
@property(retain, nonatomic) NSTimer *delayedSearchTimer; // @synthesize delayedSearchTimer=m_delayedSearchTimer;
@property(retain, nonatomic) NSMutableArray *temporaryFulTextSearchResults; // @synthesize temporaryFulTextSearchResults=m_temporaryFulTextSearchResults;
@property(retain, nonatomic) DVWebViewDelegates *webViewDelegates; // @synthesize webViewDelegates=m_webViewDelegates;
@property(retain, nonatomic) NSString *shortcutMenuSearchString; // @synthesize shortcutMenuSearchString=m_shortcutMenuSearchString;
@property(retain, nonatomic) WebView *resultsWebView; // @synthesize resultsWebView;
@property(retain, nonatomic) DVScopeBarView *scopeBarView; // @synthesize scopeBarView;
@property(nonatomic) id docWindowClient; // @synthesize docWindowClient=m_docWindowClient;
@property(retain, nonatomic) DVManPageController *cachedManPageController; // @synthesize cachedManPageController=m_cachedManPageController;
@property(retain, nonatomic) DVBookmarksOutlineViewController *bookmarksController; // @synthesize bookmarksController=m_bookmarksController;
@property(nonatomic) unsigned long long completedResourceCountForResultsWebView; // @synthesize completedResourceCountForResultsWebView=m_completedResourceCountForResultsWebView;
@property(nonatomic) unsigned long long totalResourceCountForResultsWebView; // @synthesize totalResourceCountForResultsWebView=m_totalResourceCountForResultsWebView;
@property(retain, nonatomic) NSOutlineView *docSetBrowser; // @synthesize docSetBrowser=m_docSetBrowser;
@property(nonatomic) double greatestMaxRelevanceInSearchedDocSets; // @synthesize greatestMaxRelevanceInSearchedDocSets=m_greatestMaxRelevanceInSearchedDocSets;
@property(retain, nonatomic) NSString *previousMainFrameURL; // @synthesize previousMainFrameURL=m_previousMainFrameURL;
@property(retain, nonatomic) NSString *searchString; // @synthesize searchString=m_searchString;
@property(retain, nonatomic) DVStatusBarController *statusBarController; // @synthesize statusBarController=m_statusBarController;
- (void)logPerfResults:(id)arg1;
- (void)printFirstResponder:(id)arg1;
- (void)runFullGC:(id)arg1;
- (void)dumpPublishers:(id)arg1;
@property(readonly, nonatomic) NSWindowController *windowController;
- (void)docSet:(id)arg1 didFindTextSearchResults:(id)arg2 isFinished:(BOOL)arg3 contextInfo:(void *)arg4;
- (void)docSets:(id)arg1 didFindTokenSearchResults:(id)arg2 isFinished:(BOOL)arg3 contextInfo:(void *)arg4;
- (void)docSet:(id)arg1 didFindTokenSearchResults:(id)arg2 isFinished:(BOOL)arg3 contextInfo:(void *)arg4;
- (void)docSets:(id)arg1 didFindBookTitleResults:(id)arg2;
- (void)loadBookmark:(id)arg1;
- (void)addBookmark:(id)arg1;
- (id)titleOfDisplayedDocumentInMainWebView;
- (id)webViewOfMainWindow;
- (void)sheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)dismissManageBookmarksSheet:(id)arg1;
- (void)manageBookmarks:(id)arg1;
- (void)_clearSearchResults;
- (void)_cancelDocSetQueriesWithDelegate:(id)arg1;
- (void)searchWithNewCriteria;
- (id)_trimmedSearchString;
- (void)fullTextSearchForString:(id)arg1;
- (void)performSynchronousAPIQuery:(id)arg1;
- (void)searchForAPI:(id)arg1;
- (id)nameKeyAscendingCaseInsensitiveSortDescriptor;
- (id)tokensForAppleRef:(id)arg1 inDocSet:(id)arg2;
- (id)docSetsForSearching;
- (id)nodeForURL:(id)arg1 outDocSet:(id *)arg2;
- (void)_updateStatusBar;
- (void)hideClickablePath;
- (void)showClickablePath;
- (void)_showClickablePath:(BOOL)arg1;
- (void)pathControlSingleClick:(id)arg1;
- (void)_startObservingBrowserSelectionChanges;
- (void)_stopObservingBrowserSelectionChanges;
- (void)toggleBrowser:(id)arg1;
- (void)_selectPathOfDisplayedNodeInBrowser;
- (void)_showDocSetsBrowser;
- (void)_hideDocSetsBrowser;
- (void)doubleClickInDocSetsBrowser:(id)arg1;
- (void)haveWorkspaceOpenOrRevealURL:(id)arg1;
- (void)displayFileNotFoundInExtendedLocationsSheet;
- (id)manPageController;
- (void)makeTextSmallerOrLarger:(id)arg1;
- (void)zoomWebViewOut:(id)arg1;
- (void)zoomWebViewIn:(id)arg1;
- (void)printDocument:(id)arg1;
- (void)toggleSearchResultsList:(id)arg1;
- (void)showManPagePanel:(id)arg1;
- (void)showDocPreferences:(id)arg1;
- (BOOL)canShowDocumentationPreferences;
- (void)displayHomePage:(id)arg1;
- (void)displayDocSetRootNode:(id)arg1;
- (BOOL)validateToolbarItem:(id)arg1;
- (void)openWebViewInNewWindow:(id)arg1;
- (void)openPageInBrowser:(id)arg1;
- (id)openWebViewInNewWindowWithURL:(id)arg1;
- (void)loadContentForDSAObject:(id)arg1;
- (void)loadManPageInWebViewWithURL:(id)arg1;
- (void)loadWebViewWithRootNodeOfDocSet:(id)arg1;
- (void)loadWebViewWithURL:(id)arg1;
- (void)loadWebViewWithURL:(id)arg1 fromDocSet:(id)arg2;
- (void)loadWebViewWithURL:(id)arg1 fromDocSetWithIdentifier:(id)arg2;
- (void)reloadResultsWebView;
- (id)validURLForRequestURL:(id)arg1 actionInformation:(id)arg2;
- (id)validURLForProposedURL:(id)arg1 fromDocSet:(id)arg2;
- (id)docSetWithAbsolutePath:(id)arg1;
- (id)docSetForDocumentInWebView:(id)arg1;
- (BOOL)_fileExistsAtLocalURL:(id)arg1;
- (BOOL)_fileExistsAtPath:(id)arg1;
- (void)setSearchFieldStringAndExecuteSearch:(id)arg1;
- (void)searchFieldEndEditing:(id)arg1;
- (void)_delayedSearchExecution;
- (void)selectSearchFieldContents:(id)arg1;
- (BOOL)isSearchFieldVisible;
- (void)_putStringOnFindPasteboard:(id)arg1;
- (void)webViewFindPanelJumpToSelection:(id)arg1;
- (void)webViewFindPanelUseSelectionForFind:(id)arg1;
- (void)findPreviousInWebView:(id)arg1;
- (void)findNextInWebView:(id)arg1;
- (void)showFindPanelInWebView:(id)arg1;
- (id)selectedStringInWebView:(id)arg1;
- (void)goHome:(id)arg1;
- (void)backForwardControlClick:(id)arg1;
- (void)selectWebHistoryItem:(id)arg1 inWebView:(id)arg2;
- (void)webViewGoForward:(id)arg1;
- (void)webViewGoBack:(id)arg1;
- (void)showWebViewForwardHistoryMenu:(id)arg1;
- (void)showWebViewBackHistoryMenu:(id)arg1;
- (void)_resetQueryResultsLists;
- (void)selectFirstFullTextSearchResult;
- (void)selectFirstAPISearchResult;
- (void)_expandSearchResultsSubview;
- (BOOL)searchResultsAreVisible;
- (void)_collapseSearchResultsSubview;
- (void)_collapseSearchResultsSubviewPersistSplitterPosition:(BOOL)arg1;
- (double)_persistedWidthOfSearchResultsSubview;
- (void)_persistWidthOfSearchResultsSubview;
- (id)_searchResultsSubview;
- (BOOL)splitView:(id)arg1 shouldAdjustSizeOfSubview:(id)arg2;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (BOOL)resultsOnRightDefault;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (void)windowWillClose:(id)arg1;
@property(readonly, nonatomic) BOOL isSearching; // @dynamic isSearching;
- (void)reloadResultsView;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_firstResponderInWindowChanged:(id)arg1;
- (void)doubleClickSearchResult:(id)arg1;
- (void)setSearchMatchType:(long long)arg1;
@property(readonly, nonatomic) unsigned long long searchMatchType;
- (void)setSearchFieldString:(id)arg1;
- (void)clearSearchField:(id)arg1;
- (void)_hideSearchResultsAndSearchOptions;
- (id)localizedTitlesForItem:(id)arg1;
- (void)showAllHelpTopicsForSearchString:(id)arg1;
- (void)searchForItemsWithSearchString:(id)arg1 resultLimit:(long long)arg2 matchedItemHandler:(CDUnknownBlockType)arg3;
- (void)performHelpMenuSearch:(id)arg1;
- (void)reportHelpMenuSearchResults:(id)arg1;
- (void)performActionForItem:(id)arg1;
- (void)_shortcutShowItem:(id)arg1;
- (void)shortcutSearchInDocViewer:(id)arg1;
- (void)hideScopeBar;
- (void)showScopeBar;
- (BOOL)isScopeBarVisible;
- (id)scopeBarSuperview;
- (id)searchResultsAndContentWindow;
- (void)_updateWindowDocumentIcon:(id)arg1;
- (id)fileSystemImageOfDisplayedDocument:(id)arg1;
- (id)titleOfDisplayedDocument:(id)arg1;
- (id)URLOfDisplayedDocumentInWebView:(id)arg1;
- (id)project;
- (id)activeLanguages;
- (void)handleOptionDoubleClickEvent:(id)arg1 inWindow:(id)arg2;
- (void)beginWindowProxyDragForEvent:(id)arg1 inWindow:(id)arg2;
- (void)updateViewForLoadedContentInWebView:(id)arg1;
- (void)showGettingStartedWithXcode;
- (id)_gettingStartedWithXcodeURL;
- (void)showXcodeHomePage;
- (void)loadDocSetAtPath:(id)arg1;
- (void)applyPropertiesOfWebView:(id)arg1 toWebView:(id)arg2;
- (id)applicationNameForUserAgent;
- (void)setApplicationNameForUserAgent:(id)arg1;
- (id)preferencesIdentifier;
- (void)setPreferencesIdentifier:(id)arg1;
- (void)docSetUpdateEnteredInstallationPhase:(id)arg1;
- (void)docSetWasUnloaded:(id)arg1;
- (void)docSetWasLoaded:(id)arg1;
- (void)_updateUIForChangeInLoadedDocSets;
- (void)_perfWebViewDidFinishLoading:(id)arg1;
- (void)awakeFromNib;
- (id)init;
- (void)showDocumentationWindow:(id)arg1;
- (void)applicationDidFinishLaunching:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVManPageController : NSObject
{
    id manPageTextField;
    id inputTypeRadioButtons;
    id window;
    NSString *outputFolderPath;
    NSString *aproposScriptPath;
    NSString *rmanPath;
    NSString *manSearchString;
    int _inputType;
    NSArray *m_cachedManPaths;
    DVMainController *m_mainController;
}

+ (id)sharedManPageController;
@property(retain, nonatomic) NSArray *cachedManPaths; // @synthesize cachedManPaths=m_cachedManPaths;
@property(nonatomic) DVMainController *mainController; // @synthesize mainController=m_mainController;
- (void)setManSearchString:(id)arg1;
- (id)manSearchString;
- (void)dealloc;
- (id)outputFolderPath;
- (void)setOutputFolderPath:(id)arg1;
- (id)aproposScriptPath;
- (void)setAproposScriptPath:(id)arg1;
- (id)rmanPath;
- (void)setRmanPath:(id)arg1;
- (BOOL)openHTMLManPageAtPath:(id)arg1;
- (id)createHTMLManPageForName:(id)arg1 section:(id)arg2;
- (id)dataFromManCommandWithName:(id)arg1 section:(id)arg2;
- (id)dataFromRmanCommandWithSource:(id)arg1 name:(id)arg2 section:(id)arg3;
- (BOOL)htmlPageExistsForName:(id)arg1 section:(id)arg2;
- (BOOL)searchManPagesForString:(id)arg1;
- (id)pathForHTMLManPage:(id)arg1 section:(id)arg2 createIfNeeded:(BOOL)arg3;
- (BOOL)openManPageAtURL:(id)arg1;
- (BOOL)manPathsContainURL:(id)arg1;
- (id)manPaths;
- (BOOL)openManPage:(id)arg1 section:(id)arg2;
- (id)_sectionForManPage:(id)arg1;
- (id)_environmentWithCustomManPaths;
- (void)sheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)ok:(id)arg1;
- (void)_openManPageForPageSpecifiers:(id)arg1;
- (void)_displayNothingAppropriateSheetForString:(id)arg1 onWindow:(id)arg2;
- (BOOL)_beginSearchManPagesForString:(id)arg1;
- (id)_pageSpecifiersFromString:(id)arg1;
- (void)inputIsSearchString:(id)arg1;
- (void)inputIsManPageName:(id)arg1;
- (void)cancel:(id)arg1;
- (void)showManPagePanel:(id)arg1;
- (id)_outputPathForManPageWithName:(id)arg1 section:(id)arg2;
- (id)_uniqueIDString;
- (id)init;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)_ensureOutputFolderExists;
- (BOOL)_initializeAproposScriptPath;
- (BOOL)_initializeRmanExecutablePath;
- (BOOL)_verifyFolderExistsAtPath:(id)arg1;
- (BOOL)_verifyFileExistsAtPath:(id)arg1;

@end

@interface DVPathControl : NSPathControl
{
}

- (void)awakeFromNib;
- (BOOL)acceptsFirstResponder;

@end

@interface DVPreferencesToolbarItem : DVCustomToolbarItem
{
    NSButton *prefsButton;
}

- (void)validate;
- (void)awakeFromNib;

@end

@interface DVPublisherMenuCreator : NSObject
{
}

+ (void)populateMenu:(id)arg1 withAllPublishersAndDocSetsItemTarget:(id)arg2 selector:(SEL)arg3 itemFont:(id)arg4;
+ (BOOL)_isNameOfDocSetUnique:(id)arg1 amongDocSetUpdates:(id)arg2;
+ (void)_applyFont:(id)arg1 toMenuItemTitle:(id)arg2;

@end

@interface DVQueryCategoryCell : NSTextFieldCell
{
    DVQueryType *m_categoryItem;
    BOOL showMore;
    unsigned long long m_totalItemCount;
    unsigned long long m_limitedItemCount;
    DVResultsOutlineViewController *controller;
}

+ (void)resetButtonCache;
+ (id)showMoreLessButtons;
@property(retain, nonatomic) DVResultsOutlineViewController *controller; // @synthesize controller;
@property(nonatomic) unsigned long long limitedItemCount; // @synthesize limitedItemCount=m_limitedItemCount;
@property(nonatomic) unsigned long long totalItemCount; // @synthesize totalItemCount=m_totalItemCount;
@property(nonatomic) BOOL showMore; // @synthesize showMore;
@property(retain, nonatomic) DVQueryType *categoryItem; // @synthesize categoryItem=m_categoryItem;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)initWithItem:(id)arg1 controller:(id)arg2;
- (id)showMoreLessButton;

@end

@interface DVQueryOptionsController : NSObject
{
    DVMainController *mainController;
    NSTableView *docSetsTable;
    NSTableView *languagesTable;
    NSDictionaryController *_apiSearchLanguagesController;
    NSArrayController *_docSetsController;
    NSMutableDictionary *m_apiSearchSelectedLanguages;
}

@property(retain, nonatomic) NSMutableDictionary *apiSearchSelectedLanguages; // @synthesize apiSearchSelectedLanguages=m_apiSearchSelectedLanguages;
- (void)docSetCellStateChanged:(id)arg1;
- (unsigned long long)countOfEnabledDocSets:(unsigned long long *)arg1;
- (id)activeLanguages;
- (id)userEnabledLanguages;
- (void)setLanguage:(id)arg1 isEnabledForSearching:(BOOL)arg2;
- (void)persistLanguageFilter;
- (BOOL)searchAllLanguagesDefault;
- (void)setSearchAllLanguagesDefault:(BOOL)arg1;
- (id)languagesForSearching;
- (BOOL)isSearchingEnabledForLanguage:(id)arg1;
- (id)allLanguagesFromLoadedDocSets;
- (void)findAvailableLanguagesForAPISearch;
- (void)languageCellStateChanged:(id)arg1;
- (BOOL)searchAllDocSetsDefault;
- (void)setSearchAllDocSetsDefault:(BOOL)arg1;
- (void)docSetWasUnloaded:(id)arg1;
- (void)docSetWasLoaded:(id)arg1;
- (void)awakeFromNib;
- (void)toggleSearchingForLanguage:(id)arg1;
- (void)toggleSearchingForDocSet:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface DVQueryResultCell : DVIconAndTextCell
{
    id m_displayedItem;
    DVResultsOutlineViewController *controller;
    NSAttributedString *_displayString;
    BOOL m_isExtendedCell;
    BOOL m_showMoreLabelInExtendedCell;
}

+ (void)resetButtonCache;
+ (id)showMoreLessButtons;
@property(nonatomic) BOOL showMoreLabelInExtendedCell; // @synthesize showMoreLabelInExtendedCell=m_showMoreLabelInExtendedCell;
@property(nonatomic) BOOL isExtendedCell; // @synthesize isExtendedCell=m_isExtendedCell;
@property(retain, nonatomic) NSAttributedString *displayString; // @synthesize displayString=_displayString;
@property(retain, nonatomic) DVResultsOutlineViewController *controller; // @synthesize controller;
@property(retain, nonatomic) id displayedItem; // @synthesize displayedItem=m_displayedItem;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)highlight:(BOOL)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (id)_showMoreResultsString:(BOOL)arg1 remainingItemCount:(unsigned long long)arg2;
- (void)drawWithExpansionFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)expansionFrameWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)showMoreLessButton;

@end

@interface DVQueryType : NSObject
{
    NSString *title;
    NSString *identifier;
}

+ (id)searchingCategory;
+ (id)noResultsCategory;
+ (id)webResultsCategory;
+ (id)fullTextCategory;
+ (id)titleCategory;
+ (id)apiCategory;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier;
@property(retain, nonatomic) NSString *title; // @synthesize title;
- (BOOL)isSearchingCategory;
- (BOOL)isNoResultsCategory;
- (BOOL)isWebCategory;
- (BOOL)isFullTextCategory;
- (BOOL)isTitleCategory;
- (BOOL)isAPICategory;

@end

@interface DVResultsOutlineView : NSOutlineView
{
    NSButton *showMoreLessButton;
    DVResultsOutlineViewController *controller;
}

+ (void)initialize;
- (id)menuForEvent:(id)arg1;
- (id)menuItemTitleForSortDescriptor:(id)arg1;
- (void)highlightSelectionInClipRect:(struct CGRect)arg1;
- (void)reloadData;
- (id)controller;
- (id)showMoreLessButton;
- (void)updateTrackingAreas;
- (void)awakeFromNib;
- (double)preferredResultsListFontSize;

@end

@interface DVResultsOutlineViewController : NSObject <NSOutlineViewDataSource>
{
    DVResultsOutlineView *_outlineView;
    DVMainController *_mainController;
    NSMutableArray *m_apiSearchResults;
    BOOL m_showAllAPIResults;
    NSArray *m_textSearchResults;
    BOOL m_showAllTextSearchResults;
    NSArray *m_titleSearchResults;
    BOOL m_showAllTitleResults;
    NSArray *m_xCodeUserGuideFullTextResults;
    NSArray *m_cachedQueryCategories;
    NSSortDescriptor *m_tokenNameSortDescriptor;
    NSSortDescriptor *m_tokenScopeSortDescriptor;
    NSSortDescriptor *m_tokenTypeSortDescriptor;
    unsigned long long m_availableRowsForOutlineHeight;
    unsigned long long m_defaultResultsPerCategory;
    unsigned long long m_countOfDisplayedAPIResults;
    unsigned long long m_countOfDisplayedTitleResults;
    unsigned long long m_countOfDisplayedTextResults;
    unsigned long long m_resultCategoriesBeyondVisibleThreshold;
    double _preferredResultsListFontSize;
}

@property(nonatomic) unsigned long long resultCategoriesBeyondVisibleThreshold; // @synthesize resultCategoriesBeyondVisibleThreshold=m_resultCategoriesBeyondVisibleThreshold;
@property(nonatomic) unsigned long long countOfDisplayedTextResults; // @synthesize countOfDisplayedTextResults=m_countOfDisplayedTextResults;
@property(nonatomic) unsigned long long countOfDisplayedTitleResults; // @synthesize countOfDisplayedTitleResults=m_countOfDisplayedTitleResults;
@property(nonatomic) unsigned long long countOfDisplayedAPIResults; // @synthesize countOfDisplayedAPIResults=m_countOfDisplayedAPIResults;
@property(nonatomic) unsigned long long defaultResultsPerCategory; // @synthesize defaultResultsPerCategory=m_defaultResultsPerCategory;
@property(nonatomic) unsigned long long availableRowsForOutlineHeight; // @synthesize availableRowsForOutlineHeight=m_availableRowsForOutlineHeight;
@property(retain, nonatomic) NSSortDescriptor *tokenTypeSortDescriptor; // @synthesize tokenTypeSortDescriptor=m_tokenTypeSortDescriptor;
@property(retain, nonatomic) NSSortDescriptor *tokenScopeSortDescriptor; // @synthesize tokenScopeSortDescriptor=m_tokenScopeSortDescriptor;
@property(retain, nonatomic) NSSortDescriptor *tokenNameSortDescriptor; // @synthesize tokenNameSortDescriptor=m_tokenNameSortDescriptor;
@property(retain, nonatomic) NSArray *xCodeUserGuideFullTextResults; // @synthesize xCodeUserGuideFullTextResults=m_xCodeUserGuideFullTextResults;
@property(retain, nonatomic) NSArray *cachedQueryCategories; // @synthesize cachedQueryCategories=m_cachedQueryCategories;
@property(nonatomic) BOOL showAllTitleResults; // @synthesize showAllTitleResults=m_showAllTitleResults;
@property(nonatomic) BOOL showAllTextSearchResults; // @synthesize showAllTextSearchResults=m_showAllTextSearchResults;
@property(retain, nonatomic) NSArray *titleSearchResults; // @synthesize titleSearchResults=m_titleSearchResults;
@property(retain, nonatomic) NSArray *textSearchResults; // @synthesize textSearchResults=m_textSearchResults;
@property(nonatomic) BOOL showAllAPIResults; // @synthesize showAllAPIResults=m_showAllAPIResults;
@property(retain, nonatomic) NSMutableArray *apiSearchResults; // @synthesize apiSearchResults=m_apiSearchResults;
- (void)sortTokens:(id)arg1;
- (id)preferredTokenSortDescriptor;
- (id)tokenSortDescriptors;
- (id)tokenSortDescriptorForKey:(id)arg1;
- (void)resetButtonCache;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)clickInShowMoreLessRow:(id)arg1;
- (void)toggleNumberOfResultsShown:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldTrackCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (id)attributedStringForResult:(id)arg1 extendedDescription:(BOOL)arg2;
- (BOOL)_isTokenDeprecated:(id)arg1;
- (id)_tokenScopeAttributedString:(id)arg1 separateLine:(BOOL)arg2 color:(id)arg3;
- (BOOL)_showMoreOrLessResultsCellForItem:(id)arg1 inOutlineView:(id)arg2 showMore:(char *)arg3;
- (id)queryCategoryForItem:(id)arg1;
- (id)_imageForToken:(id)arg1;
- (long long)queriesOutlineViewNumberOfChildrenOfItem:(id)arg1 totalItemsForChild:(id *)arg2;
- (long long)_limitedChildCountForResultArray:(id)arg1 showAllResults:(BOOL)arg2;
- (BOOL)outlineView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 item:(id)arg3;
- (id)outlineView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (id)queriesOutlineViewChild:(long long)arg1 ofItem:(id)arg2;
- (id)queryCategoriesWithResults;
- (unsigned long long)countOfQueryCategoriesWithResultsBeyondVisibleThreshold;
- (BOOL)outlineView:(id)arg1 isGroupItem:(id)arg2;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (id)_imageForNodeOrTextResult:(id)arg1;
- (id)_imageForNode:(id)arg1;
- (double)outlineView:(id)arg1 heightOfRowByItem:(id)arg2;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)outlineViewItemDidExpand:(id)arg1;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)itemIsSearchResult:(id)arg1;
- (BOOL)itemIsQueryCategory:(id)arg1;
- (id)queryCategories;
- (BOOL)isOneOrMoreResultsCategoriesExpanded;
- (BOOL)isShowingAllResultsForDVQueryType:(id)arg1;
- (BOOL)categoryResultsAreVisible:(id)arg1;
- (long long)rowIndexOfAPIResultsCategory;
- (long long)rowIndexOfFullTextResultsCategory;
- (void)calculateVisibleRows;
- (void)appendToAPISearchResults:(id)arg1;
@property(readonly, nonatomic) BOOL hasSearchResults;
- (double)preferredResultsListFontSize;
- (void)resetSearchResultCollections;
- (void)awakeFromNib;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVScopeBarButton : NSButton
{
}

- (BOOL)canBecomeKeyView;
- (void)awakeFromNib;

@end

@interface DVScopeBarController : NSObject <NSMenuDelegate>
{
    DVMainController *mainController;
    DVQueryOptionsController *queryController;
    NSButton *containsButton;
    NSButton *prefixButton;
    NSButton *exactButton;
    NSButton *allDocSetsButton;
    NSPopUpButton *myDocSetsButton;
    NSButton *allLanguagesButton;
    NSPopUpButton *myLanguagesButton;
    NSBox *box1;
    NSBox *box2;
    DVScopeMultiSelectionWindow *multiSelectionWindow;
    DVScopeBarMultiSelectionViewFactory *multiSelectionFactory;
}

- (void)dismissOptionsWindow:(id)arg1;
- (void)showMultiSelectionWindowWithView:(id)arg1 relativeToScopeButton:(id)arg2;
- (BOOL)validateMenuItem:(id)arg1;
- (void)toggleSearchingForLanguage:(id)arg1;
- (void)toggleSearchingForDocSet:(id)arg1;
- (void)menuDidClose:(id)arg1;
- (void)popUpSearchOptionsMenu:(id)arg1 relativeToScopeButton:(id)arg2;
- (void)updateButtonTitles;
- (void)setMenu:(id)arg1 forPopUpButton:(id)arg2 title:(id)arg3;
- (void)positionScopeButtons;
- (void)docSetWasUnloaded:(id)arg1;
- (void)docSetWasLoaded:(id)arg1;
- (void)myLanguages:(id)arg1;
- (void)myDocSets:(id)arg1;
- (void)exactSearch:(id)arg1;
- (void)prefixSearch:(id)arg1;
- (void)containsSearch:(id)arg1;
- (void)refreshSearchResults;
- (void)setMatchTypeAndStartSearching:(unsigned long long)arg1;
- (void)update;
- (void)awakeFromNib;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVScopeBarMultiSelectionViewFactory : NSObject
{
    NSButton *doneButton;
    DVQueryOptionsController *queryController;
    DVScopeBarController *scopeBarController;
}

@property(readonly, nonatomic) DVScopeBarController *scopeBarController; // @synthesize scopeBarController;
@property(readonly, nonatomic) DVQueryOptionsController *controller; // @synthesize controller=queryController;
- (id)doneButton;
- (id)languagesSearchOptionsView;
- (id)languagesSearchOptionsMenu;
- (id)docSetSearchOptionsView;
- (id)docSetSearchOptionsMenu;
- (id)boxForPublisher:(id)arg1;
- (id)emptyCheckBoxMatrix;
- (id)languagesLabel;
- (id)labelForPublisher:(id)arg1;
- (id)boxForAllPublishers;
- (void)addButtonCellForDocSet:(id)arg1 toPublisherMatrix:(id)arg2 atRow:(unsigned long long)arg3;
- (void)addButtonCellForLanguage:(id)arg1 toLanguagesMatrix:(id)arg2 atRow:(unsigned long long)arg3;

@end

@interface DVScopeBarPopupButton : NSPopUpButton
{
}

- (BOOL)canBecomeKeyView;

@end

@interface DVScopeBarView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVScopeMultiSelectionWindow : NSWindow
{
}

- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;

@end

@interface DVScopeMultiSelectionWindowContentView : NSView
{
    DVQueryOptionsView *queryOptionsView;
}

@property(retain, nonatomic) DVQueryOptionsView *queryOptionsView; // @synthesize queryOptionsView;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVSearchField : NSSearchField
{
    DVSearchFieldController *controller;
}

- (void)awakeFromNib;
- (id)newSearchMenuTemplate:(unsigned long long)arg1;

@end

@interface DVSearchFieldController : NSObject
{
    DVSearchField *searchField;
    DVMainController *mainController;
}

@property(readonly, nonatomic) DVSearchField *searchField; // @synthesize searchField;
- (void)clearSearchField:(id)arg1;

@end

@interface DVShortcutMenuResult : NSObject
{
    NSString *m_title;
    id m_target;
    SEL m_action;
}

@property(nonatomic) SEL action; // @synthesize action=m_action;
@property(nonatomic) id target; // @synthesize target=m_target;
@property(retain, nonatomic) NSString *title; // @synthesize title=m_title;

@end

@interface DVShowMoreLessButton : NSButton
{
    id m_displayedItem;
}

@property(retain, nonatomic) id displayedItem; // @synthesize displayedItem=m_displayedItem;
- (void)resetCursorRects;

@end

@interface DVStatusBarController : NSObject
{
    NSTabView *_tabView;
    DVPathControl *_pathControl;
    NSTextField *_urlTextField;
    NSProgressIndicator *_progressBar;
    DVMainController *m_mainController;
}

@property(nonatomic) DVMainController *mainController; // @synthesize mainController=m_mainController;
@property(retain, nonatomic) DVPathControl *pathControl; // @synthesize pathControl=_pathControl;
@property(retain, nonatomic) NSTabView *tabView; // @synthesize tabView=_tabView;
- (id)_pathControlNodesForURL:(id)arg1 inWebView:(id)arg2 appendDocumentTitleNode:(BOOL)arg3;
- (id)_pathComponentCellWithString:(id)arg1 url:(id)arg2 representedObject:(id)arg3;
- (id)_remoteOrLocalImage:(BOOL)arg1;
- (void)updateForURL:(id)arg1 inWebView:(id)arg2 appendDocumentTitleNode:(BOOL)arg3;
- (void)_webViewMouseDidMoveOverElement:(id)arg1;
- (void)webViewDidFinishLoading:(id)arg1;
- (void)webViewDidBeginLoading:(id)arg1;
- (void)_selectURLAndProgressIndicatorTabViewItem;
- (void)_selectPathControlTabViewItem;
- (id)cachedProgressBar;
- (void)setDocumentNodePathStatus:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)awakeFromNib;
- (id)init;

@end

@interface DVTokenImageVendor : NSObject
{
    NSImage *_classImage;
    NSImage *_methodImage;
    NSImage *_propertyImage;
    NSImage *_constImage;
    NSImage *_typeImage;
    NSImage *_functionImage;
    NSImage *_globalImage;
    NSImage *_protocolImage;
    NSImage *_macroImage;
    NSImage *_bindingImage;
    NSImage *_structImage;
}

+ (id)sharedVendor;
@property(retain, nonatomic) NSImage *_structImage; // @synthesize _structImage;
@property(retain, nonatomic) NSImage *_bindingImage; // @synthesize _bindingImage;
@property(retain, nonatomic) NSImage *_macroImage; // @synthesize _macroImage;
@property(retain, nonatomic) NSImage *_protocolImage; // @synthesize _protocolImage;
@property(retain, nonatomic) NSImage *_globalImage; // @synthesize _globalImage;
@property(retain, nonatomic) NSImage *_functionImage; // @synthesize _functionImage;
@property(retain, nonatomic) NSImage *_typeImage; // @synthesize _typeImage;
@property(retain, nonatomic) NSImage *_constImage; // @synthesize _constImage;
@property(retain, nonatomic) NSImage *_propertyImage; // @synthesize _propertyImage;
@property(retain, nonatomic) NSImage *_methodImage; // @synthesize _methodImage;
@property(retain, nonatomic) NSImage *_classImage; // @synthesize _classImage;
- (id)structImage;
- (id)bindingImage;
- (id)macroImage;
- (id)protocolImage;
- (id)globalImage;
- (id)functionImage;
- (id)typeImage;
- (id)constImage;
- (id)propertyImage;
- (id)methodImage;
- (id)classImage;

@end

@interface DVURLUtilities : NSObject
{
}

+ (id)factoredURLFromRequest:(id)arg1 docSet:(id)arg2;
+ (id)anchorOfURLString:(id)arg1;
+ (id)URLStringWithoutAnchor:(id)arg1;

@end

@interface DVWebBackForwardToolbarItem : DVCustomToolbarItem
{
    NSSegmentedControl *segmentedControl;
    WebView *webView;
}

- (void)validate;
- (void)awakeFromNib;

@end

@interface DVWebHistoryMenu : NSMenu
{
    WebView *m_webView;
    BOOL m_isForwardList;
}

+ (id)historyMenuWithWebView:(id)arg1 isForwardList:(BOOL)arg2;
@property(nonatomic) BOOL isForwardList; // @synthesize isForwardList=m_isForwardList;
@property(retain, nonatomic) WebView *webView; // @synthesize webView=m_webView;
- (void)update;
- (id)_backList;
- (id)_forwardList;
- (void)webViewSelectHistoryItem:(id)arg1;
- (void)webViewGoForward:(id)arg1;
- (void)webViewGoBack:(id)arg1;
- (id)initWithWebView:(id)arg1 isForwardList:(BOOL)arg2;

@end

@interface DVWebViewAndSearchResultsSplitView : NSSplitView
{
    id _applicationController;
}

- (double)dividerThickness;

@end

@interface DVWebViewController : NSObject
{
    DVWindow *_window;
    WVPageFindWebView *_webView;
    WVPageFindContainerView *_containerView;
    DVMainController *_mainController;
}

@property(retain) WVPageFindContainerView *containerView; // @synthesize containerView=_containerView;
@property(retain) WVPageFindWebView *webView; // @synthesize webView=_webView;
@property(retain) DVWindow *window; // @synthesize window=_window;
@property(retain) DVMainController *mainController; // @synthesize mainController=_mainController;
- (void)makeTextSmallerOrLarger:(id)arg1;
- (void)backForwardControlClick:(id)arg1;
- (id)init;

@end

@interface DVWebViewDelegates : NSObject
{
    DVMainController *m_mainController;
    WebDownload *m_webDownload;
    NSURL *m_downloadDestinationDirectory;
    NSString *m_downloadDestinationFilePath;
    NSWindow *m_downloadOriginationWindow;
}

+ (void)initialize;
@property(retain, nonatomic) NSWindow *downloadOriginationWindow; // @synthesize downloadOriginationWindow=m_downloadOriginationWindow;
@property(retain, nonatomic) NSURL *downloadDestinationDirectory; // @synthesize downloadDestinationDirectory=m_downloadDestinationDirectory;
@property(retain, nonatomic) NSString *downloadDestinationFilePath; // @synthesize downloadDestinationFilePath=m_downloadDestinationFilePath;
@property(retain, nonatomic) WebDownload *webDownload; // @synthesize webDownload=m_webDownload;
@property(nonatomic) DVMainController *mainController; // @synthesize mainController=m_mainController;
- (BOOL)download:(id)arg1 shouldDecodeSourceDataOfMIMEType:(id)arg2;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (id)_moveExtractedContentInPath:(id)arg1;
- (id)_moveContentsOfDirectory:(id)arg1 toDirectory:(id)arg2;
- (void)_cleanUpDownloadState;
- (void)_openExtractedProjectInPath:(id)arg1;
- (void)_quarantineExtractedArchiveAtPath:(id)arg1 fromDownload:(id)arg2;
- (void)_quarantineFileAtPath:(id)arg1 quarantineDictionary:(id)arg2;
- (id)_fileNameFromPath:(id)arg1;
- (void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2;
- (void)downloadDidBegin:(id)arg1;
- (id)downloadWindowForAuthenticationSheet:(id)arg1;
- (id)webView:(id)arg1 createWebViewWithRequest:(id)arg2;
- (void)_findTextInDocumentation:(id)arg1;
- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (void)webView:(id)arg1 mouseDidMoveOverElement:(id)arg2 modifierFlags:(unsigned long long)arg3;
- (void)webView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3;
- (void)webView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4;
- (id)_textForLocalURLResourceLoadingFailure:(id)arg1;
- (id)_textForRemoteURLResourceLoadingFailure:(id)arg1;
- (id)webView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2;
- (void)resetResourceLoadCounters;
- (void)webView:(id)arg1 saveFrameView:(id)arg2 showingPanel:(BOOL)arg3;
- (void)webView:(id)arg1 decidePolicyForMIMEType:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (BOOL)_downloadAndExtractZipFilesUserDefault;
- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didChangeLocationWithinPageForFrame:(id)arg2;

@end

@interface DVWindow : NSWindow
{
    id _mainController;
    WVPageFindWebView *webView;
    BOOL _proxyWaitingForDragEvent;
    BOOL _proxyButtonWasDisabled;
    BOOL _firstResponderIsLocked;
}

@property(retain, nonatomic) WVPageFindWebView *webView; // @synthesize webView;
@property(retain, nonatomic) id mainController; // @synthesize mainController=_mainController;
- (void)PBX_nestRight:(id)arg1;
- (void)PBX_nestLeft:(id)arg1;
- (void)enterSelection:(id)arg1;
- (void)findSelectionInFile:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)findNext:(id)arg1;
- (void)showIncrementalFindBar:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)swipeWithEvent:(id)arg1;
- (void)selectKeyViewFollowingView:(id)arg1;
- (void)selectKeyViewPrecedingView:(id)arg1;
- (void)activateFromWindowMenu:(id)arg1;
- (void)activateFromDockMenu:(id)arg1;
- (void)setFirstResponderIsLocked:(BOOL)arg1;
- (BOOL)firstResponderIsLocked;
- (void)sendEvent:(id)arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;

@end

@interface MatchCountValueTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)arg1;

@end

@interface NSImage (DWImageAdditions)
- (id)thumbnailOfSize:(struct CGSize)arg1;
- (void)drawInRect:(struct CGRect)arg1 operation:(unsigned long long)arg2 fraction:(double)arg3 unflip:(BOOL)arg4;
@end

@interface WVPageFindBackgroundView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface WVPageFindContainerView : NSView
{
    WVPageFindWebView *_webView;
    WVPageFindController *_controller;
}

@property(retain, nonatomic) WVPageFindController *controller; // @synthesize controller=_controller;
@property(retain, nonatomic) WVPageFindWebView *webView; // @synthesize webView=_webView;
@property(readonly, nonatomic) WVPageFindController *pageFindController;

@end

@interface WVPageFindController : NSObject
{
    NSSegmentedControl *backForwardControl;
    NSSearchField *searchField;
    NSTextField *matchCountField;
    NSButton *doneButton;
    WVPageFindBackgroundView *_bannerView;
    WVPageFindWebView *_webView;
    BOOL isFindBannerVisible;
    unsigned long long _matchCount;
    unsigned long long _previousPasteboardChangeCount;
    NSString *_findString;
}

+ (id)pageFindControllerForWebView:(id)arg1;
@property(copy) NSString *findString; // @synthesize findString=_findString;
@property BOOL isFindBannerVisible; // @synthesize isFindBannerVisible;
@property unsigned long long matchCount; // @synthesize matchCount=_matchCount;
@property(retain) WVPageFindWebView *webView; // @synthesize webView=_webView;
@property(retain) WVPageFindBackgroundView *bannerView; // @synthesize bannerView=_bannerView;
- (void)dismissFindBanner:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)findNext:(id)arg1;
- (void)findFromSearchField:(id)arg1;
- (void)findFromNextPreviousControl:(id)arg1;
- (void)clearSearchField:(id)arg1;
- (void)_findPrevious;
- (void)_findNext;
- (void)_findFromSearchField:(id)arg1;
- (void)_findFromNextPreviousControl:(id)arg1;
- (BOOL)_findWithDirection:(BOOL)arg1 caseSensitive:(BOOL)arg2;
- (void)showFindBannerInContainer:(id)arg1;
- (void)_hideFindBanner;
- (void)_showFindBannerInContainer:(id)arg1;
- (struct CGRect)_findBannerWhenVisibleRect;
- (struct CGRect)_findBannerWhenHiddenRect;
- (void)_findPasteBoardChanged:(id)arg1;
- (id)_pasteboardFindString;
- (void)_windowDidBecomeKey:(id)arg1;
- (id)searchField;
- (id)doneButton;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)awakeFromNib;
- (id)_imageForBannerControlWithBaseName:(id)arg1;

@end

@interface WVPageFindWebView : WebView
{
    WVPageFindContainerView *_containerView;
}

@property(retain) WVPageFindContainerView *containerView; // @synthesize containerView=_containerView;
@property(readonly) WVPageFindController *pageFindController;

@end

