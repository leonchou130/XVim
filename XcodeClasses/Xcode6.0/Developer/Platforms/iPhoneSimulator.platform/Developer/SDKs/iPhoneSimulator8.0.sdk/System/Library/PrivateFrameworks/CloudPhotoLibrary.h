//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    long long batches;
    long long errors;
    long long assets;
    long long masters;
    long long retries;
    long long bytesCount;
    long long resourcesCount;
} CDStruct_e6f69ac3;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
// UUID: FED2660C-015F-37B0-86E9-4FE8AA393758
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 114.3.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CPLAbstractObject <NSObject>
+ (Protocol *)platformImplementationProtocol;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@end

@protocol CPLBackgroundDownloadsTaskDelegate <CPLEngineSyncTaskDelegate>
@end

@protocol CPLBackgroundUploadsTaskDelegate <CPLEngineSyncTaskDelegate>
@end

@protocol CPLChangeSessionImplementation <CPLPlatformImplementation>
- (void)tearDownWithCompletionHandler:(void (^)(void))arg1;
- (void)finalizeWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)beginSessionWithKnownLibraryVersion:(NSString *)arg1 completionHandler:(void (^)(NSError *))arg2;
@end

@protocol CPLClientLibraryManagerProtocol <NSObject>
- (void)libraryManagerDidUpdateSizeOfResourcesToUploadToSize:(unsigned long long)arg1;
- (void)libraryManagerDidUpdateStatusWithProperties:(NSDictionary *)arg1;
- (void)libraryManagerHasChangesToPull;
- (void)uploadOfResource:(CPLResource *)arg1 didFinishForResourceTransferTask:(NSString *)arg2 withError:(NSError *)arg3;
- (void)uploadOfResource:(CPLResource *)arg1 didProgress:(float)arg2 forResourceTransferTask:(NSString *)arg3;
- (void)uploadDidStartForResource:(CPLResource *)arg1 withResourceTransferTask:(NSString *)arg2;
- (void)backgroundDownloadDidFailForResource:(CPLResource *)arg1;
- (void)backgroundDownloadDidFinishForResource:(CPLResource *)arg1;
- (void)downloadDidFinishForResourceTransferTask:(NSString *)arg1 finalResource:(CPLResource *)arg2 withError:(NSError *)arg3;
- (void)downloadDidProgress:(float)arg1 forResourceTransferTask:(NSString *)arg2;
- (void)downloadDidStartForResourceTransferTask:(NSString *)arg1;
@end

@protocol CPLDaemonLibraryManagerMinimalProtocol
- (void)downloadOriginalsOfType:(NSString *)arg1 localIdentifiers:(NSArray *)arg2 destinationURL:(NSURL *)arg3 progressIdentifier:(NSString *)arg4 completionHandler:(void (^)(NSError *, NSArray *))arg5;
- (void)addInfoToLog:(NSString *)arg1;
- (void)compactFileCacheWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)getResourcesForItemWithIdentifier:(NSString *)arg1 completionHandler:(void (^)(NSError *, NSArray *))arg2;
- (void)cloudCacheGetDescriptionForRecordWithIdentifier:(NSString *)arg1 related:(_Bool)arg2 completionHandler:(void (^)(id, id, NSError *))arg3;
- (void)getStatusArrayForComponents:(NSArray *)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;
- (void)getStatusForComponents:(NSArray *)arg1 completionHandler:(void (^)(NSString *, NSError *))arg2;
- (void)getListOfComponentsWithCompletionHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)resetCacheWithOption:(unsigned long long)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)takeStatisticsSnapshotSinceDate:(NSDate *)arg1 completionHandler:(void (^)(NSDictionary *, NSError *))arg2;
- (void)setDiagnosticsEnabled:(_Bool)arg1;
- (void)enableSynchronizationWithReason:(NSString *)arg1;
- (void)disableSynchronizationWithReason:(NSString *)arg1;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)resetStatus;
- (void)startSyncSession;
- (void)cancelTaskWithIdentifier:(NSString *)arg1;
- (void)getMappedIdentifiersForIdentifiers:(NSArray *)arg1 inAreLocalIdentifiers:(_Bool)arg2 completionHandler:(void (^)(NSDictionary *, NSError *))arg3;
- (void)publishResource:(CPLResource *)arg1 completionHandler:(void (^)(NSURL *, NSDate *, NSError *))arg2;
- (void)beginDownloadForResource:(CPLResource *)arg1 clientBundleID:(NSString *)arg2 highPriority:(_Bool)arg3 reply:(void (^)(NSString *))arg4;
- (void)deactivateLibraryWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)removeLibraryWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)closeLibraryWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)openLibraryWithClientLibraryBaseURL:(NSURL *)arg1 cloudLibraryStateStorageURL:(NSURL *)arg2 cloudLibraryResourceStorageURL:(NSURL *)arg3 libraryIdentifier:(NSString *)arg4 completionHandler:(void (^)(NSError *, NSDictionary *, unsigned long long, NSString *, NSString *, NSURL *))arg5;
@end

@protocol CPLDaemonLibraryManagerProtocol <CPLDaemonLibraryManagerMinimalProtocol>
- (void)deleteResourcesIfSafe:(NSArray *)arg1 completionHandler:(void (^)(NSArray *, NSArray *))arg2;
- (void)commitChangeBatch:(CPLChangeBatch *)arg1 withCompletionHandler:(void (^)(NSError *, unsigned long long, NSString *))arg2;
- (void)acknowledgeChangeBatch:(CPLChangeBatch *)arg1 withCompletionHandler:(void (^)(NSError *, NSString *))arg2;
- (void)getChangeBatchWithCompletionHandler:(void (^)(NSError *, CPLChangeBatch *))arg1;
- (void)finalizeSessionWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)beginPullSessionWithKnownLibraryVersion:(NSString *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)beginPushSessionWithKnownLibraryVersion:(NSString *)arg1 completionHandler:(void (^)(NSError *))arg2;
@end

@protocol CPLEngineComponent <NSObject>
- (NSString *)componentName;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)openWithCompletionHandler:(void (^)(NSError *))arg1;

@optional
- (void)getStatusDictionaryWithCompletionHandler:(void (^)(NSDictionary *, NSError *))arg1;
- (void)getStatusWithCompletionHandler:(void (^)(NSString *, NSError *))arg1;
@end

@protocol CPLEngineSyncEmergencyTaskDelegate <CPLEngineSyncTaskDelegate>
@end

@protocol CPLEngineSyncTaskDelegate <NSObject>
- (void)task:(CPLEngineSyncTask *)arg1 didProgress:(float)arg2;
- (void)task:(CPLEngineSyncTask *)arg1 didFinishWithError:(NSError *)arg2;
@end

@protocol CPLLibraryManagerImplementation <CPLPlatformImplementation>
- (void)takeStatisticsSnapshotSinceDate:(NSDate *)arg1 completionHandler:(void (^)(NSDictionary *, NSError *))arg2;
- (void)setDiagnosticsEnabled:(_Bool)arg1;
- (_Bool)diagnosticsEnabled;
- (void)getMappedIdentifiersForIdentifiers:(NSArray *)arg1 inAreLocalIdentifiers:(_Bool)arg2 completionHandler:(void (^)(NSDictionary *, NSError *))arg3;
- (void)publishResource:(CPLResource *)arg1 completionHandler:(void (^)(NSURL *, NSDate *, NSError *))arg2;
- (void)beginDownloadForResource:(CPLResource *)arg1 clientBundleID:(NSString *)arg2 highPriority:(_Bool)arg3 completionHandler:(void (^)(CPLResourceTransferTask *))arg4;
- (void)enableSynchronizationWithReason:(NSString *)arg1;
- (void)disableSynchronizationWithReason:(NSString *)arg1;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)noteClientReceivedNotificationOfServerChanges;
- (void)startSyncSession;
- (void)resetStatus;
- (void)deactivateWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)removeCloudLibraryWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)closeWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)openWithCompletionHandler:(void (^)(NSError *, NSString *, NSString *, NSURL *))arg1;

@optional
- (void)downloadOriginalsOfType:(NSString *)arg1 localIdentifiers:(NSArray *)arg2 destinationURL:(NSURL *)arg3 progressIdentifier:(NSString *)arg4 completionHandler:(void (^)(NSError *, NSArray *))arg5;
- (void)addInfoToLog:(NSString *)arg1;
- (void)compactFileCacheWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)cloudCacheGetDescriptionForRecordWithIdentifier:(NSString *)arg1 related:(_Bool)arg2 completionHandler:(void (^)(id, id, NSError *))arg3;
- (void)getStatusArrayForComponents:(NSArray *)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;
- (void)getStatusForComponents:(NSArray *)arg1 completionHandler:(void (^)(NSString *, NSError *))arg2;
- (void)getListOfComponentsWithCompletionHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)resetCacheWithOption:(unsigned long long)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)getResourcesForItemWithIdentifier:(NSString *)arg1 completionHandler:(void (^)(NSError *, NSArray *))arg2;
- (void)deleteResourcesIfSafe:(NSArray *)arg1 completionHandler:(void (^)(NSArray *, NSArray *))arg2;
- (void)barrier;
@end

@protocol CPLMinglePulledChangesTaskDelegate <CPLEngineSyncTaskDelegate>
@end

@protocol CPLNetworkWatcherDelegate <NSObject>
- (void)networkStateDidChangeForNetworkWatched:(CPLNetworkWatcher *)arg1;
@end

@protocol CPLPlatformImplementation <NSObject>
@end

@protocol CPLPullChangeSessionImplementation <CPLChangeSessionImplementation>
- (void)acknowledgeChangeBatch:(CPLChangeBatch *)arg1 withCompletionHandler:(void (^)(NSError *, NSString *))arg2;
- (void)getChangeBatchWithCompletionHandler:(void (^)(NSError *, CPLChangeBatch *))arg1;
@end

@protocol CPLPullFromTransportTaskDelegate <CPLEngineSyncTaskDelegate>
- (id <CPLEngineTransportDownloadBatchTask>)task:(CPLPullFromTransportTask *)arg1 wantsToDownloadBatchesFromSyncAnchor:(NSData *)arg2 completionHandler:(void (^)(CPLChangeBatch *, NSData *, _Bool, NSError *))arg3;
@end

@protocol CPLPushChangeSessionImplementation <CPLChangeSessionImplementation>
- (void)commitChangeBatch:(CPLChangeBatch *)arg1 withCompletionHandler:(void (^)(NSError *, unsigned long long, NSString *))arg2;
@end

@protocol CPLPushToTransportTaskDelegate <CPLEngineSyncTaskDelegate>
- (id <CPLEngineTransportUploadBatchTask>)task:(CPLPushToTransportTask *)arg1 wantsToPushBatch:(CPLChangeBatch *)arg2 continuationBlock:(void (^)(NSError *))arg3;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCConnectionDelegate <NSObject>

@optional
- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;
- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;
@end

@interface CLLocation (CPLArchiver)
- (unsigned long long)cplSpecialHash;
- (_Bool)cplSpecialIsEqual:(id)arg1;
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface CPLAdjustmentFingerprinting : NSObject
{
    _Bool _hasRedEye;
    _Bool _hasAutoEnhance;
    _Bool _hasSimpleLightenDarken;
    _Bool _hasOtherAdjustments;
    CPLAdjustments *_otherAdjustments;
    CPLResource *_baseImage;
    CPLResource *_largeAdjustmentData;
    CPLResource *_secondaryAdjustmentData;
}

@property(retain, nonatomic) CPLResource *secondaryAdjustmentData; // @synthesize secondaryAdjustmentData=_secondaryAdjustmentData;
@property(retain, nonatomic) CPLResource *largeAdjustmentData; // @synthesize largeAdjustmentData=_largeAdjustmentData;
@property(retain, nonatomic) CPLResource *baseImage; // @synthesize baseImage=_baseImage;
@property(retain, nonatomic) CPLAdjustments *otherAdjustments; // @synthesize otherAdjustments=_otherAdjustments;
@property(nonatomic) _Bool hasOtherAdjustments; // @synthesize hasOtherAdjustments=_hasOtherAdjustments;
@property(nonatomic) _Bool hasSimpleLightenDarken; // @synthesize hasSimpleLightenDarken=_hasSimpleLightenDarken;
@property(nonatomic) _Bool hasAutoEnhance; // @synthesize hasAutoEnhance=_hasAutoEnhance;
@property(nonatomic) _Bool hasRedEye; // @synthesize hasRedEye=_hasRedEye;
- (void).cxx_destruct;
- (id)otherAdjustmentsFingerprint;
- (id)similarToOriginalAdjustmentsFingerprint;

@end

@interface CPLAdjustments : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_adjustmentType;
    NSString *_adjustmentCompoundVersion;
    NSString *_adjustmentCreatorCode;
    unsigned long long _adjustmentSourceType;
    NSData *_simpleAdjustmentData;
    NSString *_similarToOriginalAdjustmentsFingerprint;
    NSString *_otherAdjustmentsFingerprint;
    CPLResource *_adjustmentData;
    NSString *_creatorCode;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *creatorCode; // @synthesize creatorCode=_creatorCode;
@property(retain, nonatomic) CPLResource *adjustmentData; // @synthesize adjustmentData=_adjustmentData;
@property(copy, nonatomic) NSString *otherAdjustmentsFingerprint; // @synthesize otherAdjustmentsFingerprint=_otherAdjustmentsFingerprint;
@property(copy, nonatomic) NSString *similarToOriginalAdjustmentsFingerprint; // @synthesize similarToOriginalAdjustmentsFingerprint=_similarToOriginalAdjustmentsFingerprint;
@property(retain, nonatomic) NSData *simpleAdjustmentData; // @synthesize simpleAdjustmentData=_simpleAdjustmentData;
@property(nonatomic) unsigned long long adjustmentSourceType; // @synthesize adjustmentSourceType=_adjustmentSourceType;
@property(copy, nonatomic) NSString *adjustmentCreatorCode; // @synthesize adjustmentCreatorCode=_adjustmentCreatorCode;
@property(copy, nonatomic) NSString *adjustmentCompoundVersion; // @synthesize adjustmentCompoundVersion=_adjustmentCompoundVersion;
@property(copy, nonatomic) NSString *adjustmentType; // @synthesize adjustmentType=_adjustmentType;
- (void).cxx_destruct;
- (id)adjustmentSimpleDescription;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CPLRecordChange : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _shouldFilterDefaultValuesForNewProperties;
    _Bool _isSparseFullChange;
    _Bool _inTrash;
    _Bool _inExpunged;
    NSString *_identifier;
    NSDate *_recordModificationDate;
    unsigned long long _changeType;
    NSDate *_dateDeleted;
    NSString *_realIdentifier;
    NSData *_recordChangeData;
}

+ (id)_descriptionForChangeType:(unsigned long long)arg1 isSparseFullChange:(_Bool)arg2;
+ (id)descriptionForChangeType:(unsigned long long)arg1;
+ (id)newChangeWithIdentifier:(id)arg1 changeType:(unsigned long long)arg2;
+ (id)newChangeWithType:(unsigned long long)arg1;
+ (id)deleteChangeWithIdentifier:(id)arg1;
+ (id)newRecordWithIdentifier:(id)arg1;
+ (id)newRecord;
+ (_Bool)supportsSecureCoding;
+ (id)cplAdditionalSecureClassesForProperty:(id)arg1;
+ (Class)classForStoredClassName:(id)arg1 forCPLArchiver:(id)arg2;
@property(copy, nonatomic) NSData *recordChangeData; // @synthesize recordChangeData=_recordChangeData;
@property(copy, nonatomic) NSString *realIdentifier; // @synthesize realIdentifier=_realIdentifier;
@property(nonatomic) _Bool inExpunged; // @synthesize inExpunged=_inExpunged;
@property(nonatomic) _Bool inTrash; // @synthesize inTrash=_inTrash;
@property(copy, nonatomic) NSDate *dateDeleted; // @synthesize dateDeleted=_dateDeleted;
@property(nonatomic) unsigned long long changeType; // @synthesize changeType=_changeType;
@property(copy, nonatomic) NSDate *recordModificationDate; // @synthesize recordModificationDate=_recordModificationDate;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (void)markAsSparseFullChange;
- (_Bool)isSparseFullChange;
- (CDUnknownBlockType)checkDefaultValueBlockForPropertyWithSelector:(SEL)arg1;
- (_Bool)shouldFilterDefaultValuesForNewProperties;
- (void)setShouldFilterDefaultValuesForNewProperties:(_Bool)arg1;
- (_Bool)shouldApplyPropertiesWithSelector:(SEL)arg1;
- (id)resourcesDescription;
- (id)cplFullDescription;
- (long long)dequeueOrder;
- (void)awakeFromStorage;
- (void)prepareForStorage;
- (id)proposedLocalIdentifier;
- (void)setSecondaryIdentifier:(id)arg1;
- (id)secondaryIdentifier;
- (void)setRelatedIdentifier:(id)arg1;
- (id)relatedIdentifier;
- (id)propertiesForChangeType:(unsigned long long)arg1;
- (id)mergeRecordChangeWithNewRecordChange:(id)arg1;
- (id)realRecordChangeFromRecordChange:(id)arg1 newRecord:(id *)arg2;
- (id)realRecordChangeFromRecordChange:(id)arg1 newRecord:(id *)arg2 updatedProperties:(id *)arg3;
- (_Bool)applyChange:(id)arg1 copyPropertiesToFinalChange:(id)arg2 forChangeType:(unsigned long long)arg3 updatedProperty:(id *)arg4;
- (_Bool)decodePropertiesFromObject:(id)arg1;
- (_Bool)encodePropertiesInObject:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)propertiesDescription;
- (unsigned long long)realResourceSize;
- (unsigned long long)totalResourceSize;
- (id)resourceForType:(unsigned long long)arg1;
- (void)setResources:(id)arg1;
- (id)resources;
- (_Bool)supportsResources;
- (_Bool)isDelete;
- (_Bool)isFullRecord;
- (_Bool)hasChangeType:(unsigned long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)storedClassNameForCPLArchiver:(id)arg1;
- (id)proposedCloudIdentifierWithError:(id *)arg1;
- (id)translateToClientChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)translateToCloudChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)identifiersForMapping;
- (id)compactedChangeWithRelatedChanges:(id)arg1 isOnlyChange:(_Bool)arg2 usingClientCache:(id)arg3;
- (_Bool)addExpandedChangesToChangeBatch:(id)arg1 andApplyToClientCache:(id)arg2 error:(id *)arg3;
- (_Bool)_addRealChangeToChangeBatch:(id)arg1 withStoredRecord:(id)arg2 andApplyToClientCache:(id)arg3 error:(id *)arg4;

@end

@interface CPLContainerChange : CPLRecordChange
{
}

@end

@interface CPLAlbumChange : CPLContainerChange <NSSecureCoding, NSCopying>
{
    NSString *_keyAssetIdentifier;
    _Bool _albumSortAscending;
    unsigned long long _albumType;
    NSString *_name;
    long long _position;
    NSString *_parentIdentifier;
    unsigned long long _albumSortType;
}

@property(nonatomic) _Bool albumSortAscending; // @synthesize albumSortAscending=_albumSortAscending;
@property(nonatomic) unsigned long long albumSortType; // @synthesize albumSortType=_albumSortType;
@property(copy, nonatomic) NSString *parentIdentifier; // @synthesize parentIdentifier=_parentIdentifier;
@property(nonatomic) long long position; // @synthesize position=_position;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) unsigned long long albumType; // @synthesize albumType=_albumType;
- (void).cxx_destruct;
- (id)propertiesDescription;
- (void)setRelatedIdentifier:(id)arg1;
- (id)relatedIdentifier;
- (id)translateToClientChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)translateToCloudChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)identifiersForMapping;

@end

@interface CPLArchiver : NSCoder
{
    id _archive;
    id _archiveCursor;
    id _rootObject;
    _Bool _forDisplay;
}

+ (id)unarchiveObjectWithData:(id)arg1 ofClass:(Class)arg2;
+ (id)fullDescriptionForObject:(id)arg1;
+ (id)displayablePropertyListWithRootObject:(id)arg1;
+ (id)archivedDataWithRootObject:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (id)archivedPropertyListWithRootObject:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (id)archivedPropertyListWithRootObject:(id)arg1;
+ (id)archivedDataWithRootObject:(id)arg1;
@property(readonly, nonatomic) _Bool forDisplay; // @synthesize forDisplay=_forDisplay;
- (void).cxx_destruct;
- (struct CGRect)decodeRectForKey:(id)arg1;
- (struct CGSize)decodeSizeForKey:(id)arg1;
- (struct CGPoint)decodePointForKey:(id)arg1;
- (void)encodeRect:(struct CGRect)arg1 forKey:(id)arg2;
- (void)encodeSize:(struct CGSize)arg1 forKey:(id)arg2;
- (void)encodePoint:(struct CGPoint)arg1 forKey:(id)arg2;
- (id)decodePropertyListForKey:(id)arg1;
- (id)decodeObjectOfClasses:(id)arg1 forKey:(id)arg2;
- (id)decodeObjectOfClass:(Class)arg1 forKey:(id)arg2;
- (long long)decodeIntegerForKey:(id)arg1;
- (void)encodeInteger:(long long)arg1 forKey:(id)arg2;
- (const char *)decodeBytesForKey:(id)arg1 returnedLength:(unsigned long long *)arg2;
- (double)decodeDoubleForKey:(id)arg1;
- (float)decodeFloatForKey:(id)arg1;
- (long long)decodeInt64ForKey:(id)arg1;
- (int)decodeInt32ForKey:(id)arg1;
- (int)decodeIntForKey:(id)arg1;
- (_Bool)decodeBoolForKey:(id)arg1;
- (id)decodeObjectForKey:(id)arg1;
- (_Bool)containsValueForKey:(id)arg1;
- (void)encodeBytes:(const char *)arg1 length:(unsigned long long)arg2 forKey:(id)arg3;
- (void)encodeDouble:(double)arg1 forKey:(id)arg2;
- (void)encodeFloat:(float)arg1 forKey:(id)arg2;
- (void)encodeInt64:(long long)arg1 forKey:(id)arg2;
- (void)encodeInt32:(int)arg1 forKey:(id)arg2;
- (void)encodeInt:(int)arg1 forKey:(id)arg2;
- (void)encodeBool:(_Bool)arg1 forKey:(id)arg2;
- (void)encodeConditionalObject:(id)arg1 forKey:(id)arg2;
- (void)encodeObject:(id)arg1 forKey:(id)arg2;
- (struct _NSZone *)objectZone;
- (void)setObjectZone:(struct _NSZone *)arg1;
- (id)decodePropertyList;
- (void)encodePropertyList:(id)arg1;
- (void *)decodeBytesWithReturnedLength:(unsigned long long *)arg1;
- (void)decodeArrayOfObjCType:(const char *)arg1 count:(unsigned long long)arg2 at:(void *)arg3;
- (void)decodeValuesOfObjCTypes:(const char *)arg1;
- (id)decodeObject;
- (void)encodeBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)encodeArrayOfObjCType:(const char *)arg1 count:(unsigned long long)arg2 at:(const void *)arg3;
- (void)encodeValuesOfObjCTypes:(const char *)arg1;
- (void)encodeConditionalObject:(id)arg1;
- (void)encodeByrefObject:(id)arg1;
- (void)encodeBycopyObject:(id)arg1;
- (void)encodeRootObject:(id)arg1;
- (void)encodeObject:(id)arg1;
- (id)initWithArchive:(id)arg1 rootClass:(Class)arg2;
- (id)rootObject;
- (id)initWithRootObject:(id)arg1 forDisplay:(_Bool)arg2 block:(CDUnknownBlockType)arg3;
- (id)initWithRootObject:(id)arg1 forDisplay:(_Bool)arg2;
- (id)archivedPropertyList;
- (_Bool)allowsKeyedCoding;

@end

@interface CPLItemChange : CPLRecordChange <NSSecureCoding, NSCopying>
{
    NSArray *_containerRelations;
}

+ (_Bool)cplShouldIgnorePropertyForCoding:(id)arg1;
@property(copy, nonatomic) NSArray *containerRelations; // @synthesize containerRelations=_containerRelations;
- (void).cxx_destruct;
- (id)containerRelationChangesComparedToRelationEnumerator:(id)arg1 error:(id *)arg2;
- (id)propertiesForChangeType:(unsigned long long)arg1;
- (id)init;

@end

@interface CPLAssetChange : CPLItemChange
{
    _Bool _favorite;
    _Bool _hidden;
    NSString *_masterIdentifier;
    NSDate *_lastSharedDate;
    NSDate *_addedDate;
    NSDate *_assetDate;
    NSArray *_resources;
    NSString *_caption;
    NSString *_extendedDescription;
    long long _orientation;
    long long _duration;
    CLLocation *_location;
    NSArray *_keywords;
    NSString *_timeZoneName;
    NSString *_momentIdentifier;
    NSString *_momentName;
    NSString *_collectionIdentifier;
    NSString *_collectionName;
    unsigned long long _burstFlags;
    NSString *_burstIdentifier;
    unsigned long long _assetSubtype;
    unsigned long long _assetHDRType;
    CPLAdjustments *_adjustments;
    unsigned long long _originalChoice;
}

@property(nonatomic) unsigned long long originalChoice; // @synthesize originalChoice=_originalChoice;
@property(retain, nonatomic) CPLAdjustments *adjustments; // @synthesize adjustments=_adjustments;
@property(nonatomic) unsigned long long assetHDRType; // @synthesize assetHDRType=_assetHDRType;
@property(nonatomic) unsigned long long assetSubtype; // @synthesize assetSubtype=_assetSubtype;
@property(copy, nonatomic) NSString *burstIdentifier; // @synthesize burstIdentifier=_burstIdentifier;
@property(nonatomic) unsigned long long burstFlags; // @synthesize burstFlags=_burstFlags;
@property(copy, nonatomic) NSString *collectionName; // @synthesize collectionName=_collectionName;
@property(copy, nonatomic) NSString *collectionIdentifier; // @synthesize collectionIdentifier=_collectionIdentifier;
@property(copy, nonatomic) NSString *momentName; // @synthesize momentName=_momentName;
@property(copy, nonatomic) NSString *momentIdentifier; // @synthesize momentIdentifier=_momentIdentifier;
@property(copy, nonatomic) NSString *timeZoneName; // @synthesize timeZoneName=_timeZoneName;
@property(nonatomic, getter=isHidden) _Bool hidden; // @synthesize hidden=_hidden;
@property(copy, nonatomic) NSArray *keywords; // @synthesize keywords=_keywords;
@property(retain, nonatomic) CLLocation *location; // @synthesize location=_location;
@property(nonatomic) long long duration; // @synthesize duration=_duration;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(nonatomic, getter=isFavorite) _Bool favorite; // @synthesize favorite=_favorite;
@property(copy, nonatomic) NSString *extendedDescription; // @synthesize extendedDescription=_extendedDescription;
@property(copy, nonatomic) NSString *caption; // @synthesize caption=_caption;
@property(copy, nonatomic) NSArray *resources; // @synthesize resources=_resources;
@property(copy, nonatomic) NSDate *assetDate; // @synthesize assetDate=_assetDate;
@property(copy, nonatomic) NSDate *addedDate; // @synthesize addedDate=_addedDate;
@property(copy, nonatomic) NSDate *lastSharedDate; // @synthesize lastSharedDate=_lastSharedDate;
@property(copy, nonatomic) NSString *masterIdentifier; // @synthesize masterIdentifier=_masterIdentifier;
- (void).cxx_destruct;
- (CDUnknownBlockType)checkDefaultValueBlockForPropertyWithSelector:(SEL)arg1;
- (_Bool)supportsResources;
- (long long)dequeueOrder;
- (void)awakeFromStorage;
- (void)prepareForStorage;
- (void)setRelatedIdentifier:(id)arg1;
- (id)relatedIdentifier;
- (id)propertiesForChangeType:(unsigned long long)arg1;
- (id)propertiesDescription;
- (id)init;
- (id)translateToClientChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)translateToCloudChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)identifiersForMapping;
- (id)proposedCloudIdentifierWithError:(id *)arg1;
- (id)compactedChangeWithRelatedChanges:(id)arg1 isOnlyChange:(_Bool)arg2 usingClientCache:(id)arg3;
- (_Bool)addExpandedChangesToChangeBatch:(id)arg1 andApplyToClientCache:(id)arg2 error:(id *)arg3;

@end

@interface CPLAssetKeywordSortDescriptor : NSSortDescriptor
{
}

+ (id)sortedKeywordsForKeywordSet:(id)arg1;
- (id)description;
- (long long)compareObject:(id)arg1 toObject:(id)arg2;
- (id)init;

@end

@interface CPLEngineSyncTask : NSObject
{
    _Bool _foreground;
    _Bool _paused;
    _Bool _cancelled;
    id <CPLEngineSyncTaskDelegate> _delegate;
    CPLEngineLibrary *_engineLibrary;
    id <NSCoding> _transportUserIdentifier;
}

+ (id)taskWithEngineLibrary:(id)arg1;
- (void)_setCancelled:(_Bool)arg1;
@property(getter=isCancelled) _Bool cancelled; // @synthesize cancelled=_cancelled;
- (void)_setPaused:(_Bool)arg1;
@property(getter=isPaused) _Bool paused; // @synthesize paused=_paused;
@property(nonatomic) _Bool foreground; // @synthesize foreground=_foreground;
@property(retain, nonatomic) id <NSCoding> transportUserIdentifier; // @synthesize transportUserIdentifier=_transportUserIdentifier;
@property(readonly, nonatomic) CPLEngineLibrary *engineLibrary; // @synthesize engineLibrary=_engineLibrary;
@property(retain) id <CPLEngineSyncTaskDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)description;
- (void)taskDidProgress:(float)arg1;
- (void)taskDidFinishWithError:(id)arg1;
- (void)cancel;
- (void)resume;
- (void)pause;
- (void)launch;
@property(readonly, nonatomic) NSString *taskIdentifier;
- (unsigned long long)diskPressureState;
- (id)initWithEngineLibrary:(id)arg1;

@end

@interface CPLBackgroundDownloadsTask : CPLEngineSyncTask
{
    NSObject<OS_dispatch_queue> *_lock;
    NSMutableArray *_downloadTasks;
    _Bool _shouldStop;
    NSError *_badError;
    _Bool _hasResetQueue;
    unsigned long long _successfullyDownloadedResourcesCount;
    unsigned long long _failedDownloadedResourcesCount;
    unsigned long long _total;
}

- (void).cxx_destruct;
- (id)taskIdentifier;
- (void)cancel;
- (void)resume;
- (void)pause;
- (void)launch;
- (void)_downloadTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_enqueueTasksLocked;
- (void)_launchNecessaryDownloadTasksWithTransaction:(id)arg1;
- (void)_finishTaskLocked;
- (id)initWithEngineLibrary:(id)arg1;

@end

@interface CPLBackgroundUploadsTask : CPLEngineSyncTask
{
    NSObject<OS_dispatch_queue> *_lock;
    NSMutableArray *_uploadTasks;
    _Bool _shouldStop;
    _Bool _hasBadErrors;
    _Bool _hasResetQueue;
    unsigned long long _successfullyUploadedResourcesCount;
    unsigned long long _failedUploadedResourcesCount;
    unsigned long long _total;
    double _start;
}

- (void).cxx_destruct;
- (id)taskIdentifier;
- (void)cancel;
- (void)resume;
- (void)pause;
- (void)launch;
- (void)_uploadTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_enqueueTasksLocked;
- (void)_launchNecessaryUploadTasksWithTransaction:(id)arg1;
- (void)_finishTaskLocked;
- (id)initWithEngineLibrary:(id)arg1;

@end

@interface CPLBatteryMonitor : NSObject
{
}

+ (id)powerStatus;
+ (void)startMonitoringPowerEvents;

@end

@interface CPLChangeBatch : NSObject <NSSecureCoding, NSFastEnumeration>
{
    NSMutableArray *_records;
    NSMutableDictionary *_localResources;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
- (id)description;
- (void)appendLocalResources:(id)arg1 forItemWithCloudIdentifier:(id)arg2;
- (id)localResourceOfType:(unsigned long long)arg1 forItemWithCloudIdentifier:(id)arg2;
- (id)summaryDescription;
- (void)_setRecords:(id)arg1;
- (unsigned long long)count;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) NSArray *records;
- (void)addRecordsFromBatch:(id)arg1;
- (void)addRecord:(id)arg1;
- (id)_initWithRecords:(id)arg1;
- (id)initWithRecords:(id)arg1;
- (id)init;
- (id)cplFullDescription;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)extractInitialDownloadBatch:(id *)arg1 shouldConsiderRecordFilter:(CDUnknownBlockType)arg2;
- (void)sortBatch;
- (void)_addChange:(id)arg1 resultBatch:(id)arg2 changesPerIdentifier:(id)arg3 changesPerClass:(id)arg4;

@end

@interface CPLChangeSession : NSObject <CPLAbstractObject>
{
    CPLPlatformObject *_platformObject;
    NSProgress *_sessionProgress;
    NSString *_sessionIdentifier;
    CPLLibraryManager *_libraryManager;
    unsigned long long _state;
}

+ (id)platformImplementationProtocol;
+ (id)stateDescriptionForState:(unsigned long long)arg1;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(readonly, nonatomic) CPLLibraryManager *libraryManager; // @synthesize libraryManager=_libraryManager;
@property(readonly, nonatomic) NSString *sessionIdentifier; // @synthesize sessionIdentifier=_sessionIdentifier;
@property(readonly, nonatomic) NSProgress *sessionProgress; // @synthesize sessionProgress=_sessionProgress;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (void)tearDownWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finalizeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)beginSessionWithKnownLibraryVersion:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)resume;
- (void)pause;
- (void)dealloc;
- (id)_sessionLogDomain;
- (id)initWithLibraryManager:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLCodingPropertyEntry : NSObject
{
    BOOL _propertyType;
    _Bool _readOnly;
    NSSet *_propertyClasses;
    SEL _propertyGetter;
    SEL _propertySetter;
    CDUnknownFunctionPointerType _propertyGetterIMP;
    CDUnknownFunctionPointerType _propertySetterIMP;
    struct objc_ivar *_ivar;
    NSString *_structName;
}

@property(copy, nonatomic) NSString *structName; // @synthesize structName=_structName;
@property(nonatomic, getter=isReadOnly) _Bool readOnly; // @synthesize readOnly=_readOnly;
@property(nonatomic) struct objc_ivar *ivar; // @synthesize ivar=_ivar;
@property(nonatomic) CDUnknownFunctionPointerType propertySetterIMP; // @synthesize propertySetterIMP=_propertySetterIMP;
@property(nonatomic) CDUnknownFunctionPointerType propertyGetterIMP; // @synthesize propertyGetterIMP=_propertyGetterIMP;
@property(nonatomic) SEL propertySetter; // @synthesize propertySetter=_propertySetter;
@property(nonatomic) SEL propertyGetter; // @synthesize propertyGetter=_propertyGetter;
@property(retain, nonatomic) NSSet *propertyClasses; // @synthesize propertyClasses=_propertyClasses;
@property(nonatomic) BOOL propertyType; // @synthesize propertyType=_propertyType;
- (void).cxx_destruct;
- (void)setIvarValue:(id)arg1 forObject:(id)arg2;
- (id)ivarValueForObject:(id)arg1;
- (void *)ivarAddrForObject:(id)arg1;

@end

@interface CPLConfiguration : NSObject
{
    NSURL *_configurationFileURL;
    NSDictionary *_configuration;
    NSDate *_lastUpdate;
    double _updateInterval;
    NSURLSession *_currentSession;
    NSObject<OS_dispatch_queue> *_lock;
}

+ (void)disableConfigurationFetching;
- (void).cxx_destruct;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)valueForKey:(id)arg1;
- (void)refetchFromDisk;
- (void)_setContents:(id)arg1;
- (void)_load;
- (void)_save;
- (void)check;
- (double)_updateInterval;
- (id)initWithClientLibraryBaseURL:(id)arg1;

@end

@interface CPLContainerRelation : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _keyAsset;
    NSString *_containerIdentifier;
    long long _position;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic, getter=isKeyAsset) _Bool keyAsset; // @synthesize keyAsset=_keyAsset;
@property(nonatomic) long long position; // @synthesize position=_position;
@property(copy, nonatomic) NSString *containerIdentifier; // @synthesize containerIdentifier=_containerIdentifier;
- (void).cxx_destruct;
- (id)description;
- (id)proposedIdentifierForItemIdentifier:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CPLContainerRelationChange : CPLRecordChange
{
    NSString *_itemIdentifier;
    CPLContainerRelation *_relation;
}

+ (id)relationWithItemIdentifier:(id)arg1 containerIdentifier:(id)arg2;
+ (id)relationToContainerWithIdentifier:(id)arg1;
@property(retain, nonatomic) CPLContainerRelation *relation; // @synthesize relation=_relation;
@property(copy, nonatomic) NSString *itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
- (void).cxx_destruct;
- (id)description;
- (void)setSecondaryIdentifier:(id)arg1;
- (id)secondaryIdentifier;
- (void)setRelatedIdentifier:(id)arg1;
- (id)relatedIdentifier;
- (id)translateToClientChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)translateToCloudChangeUsingIDMapping:(id)arg1 error:(id *)arg2;
- (id)identifiersForMapping;
- (id)compactedChangeWithRelatedChanges:(id)arg1 isOnlyChange:(_Bool)arg2 usingClientCache:(id)arg3;

@end

@interface CPLDateFormatter : NSObject
{
}

+ (id)stringFromDate:(id)arg1;

@end

@interface CPLEngineSyncEmergencyTask : CPLEngineSyncTask <NSCoding>
{
    CPLEngineLibrary *_readwriteEngineLibrary;
    NSString *_taskIdentifier;
}

+ (_Bool)shouldCoalesceTasks;
+ (id)taskIdentifier;
+ (id)taskWithEngineLibrary:(id)arg1;
- (void).cxx_destruct;
- (_Bool)shouldStopSyncSession;
- (_Bool)shouldDiscardOnError;
@property(readonly, nonatomic) unsigned long long priority;
- (id)taskIdentifier;
@property(retain, nonatomic) CPLEngineLibrary *engineLibrary;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

// Remaining properties
@property(retain) id <CPLEngineSyncEmergencyTaskDelegate> delegate;

@end

@interface CPLDownloadOriginalsTask : CPLEngineSyncEmergencyTask
{
    NSMutableArray *_cloudResources;
    NSMutableArray *_failedIdentifiers;
    NSObject<OS_dispatch_queue> *_queue;
    id <CPLEngineTransportResourceDownloadTask> _downloadTask;
    NSMutableDictionary *_cloudIdentifierForLocalIdentifier;
    NSProgress *_progress;
    NSString *_typeIdentifier;
    NSString *_progressIdentifier;
    NSURL *_destinationURL;
    NSArray *_localIdentifiers;
}

+ (_Bool)shouldCoalesceTasks;
+ (id)taskIdentifier;
@property(readonly, nonatomic) NSArray *failedIdentifiers; // @synthesize failedIdentifiers=_failedIdentifiers;
@property(copy, nonatomic) NSArray *localIdentifiers; // @synthesize localIdentifiers=_localIdentifiers;
@property(copy, nonatomic) NSURL *destinationURL; // @synthesize destinationURL=_destinationURL;
@property(copy, nonatomic) NSString *progressIdentifier; // @synthesize progressIdentifier=_progressIdentifier;
@property(copy, nonatomic) NSString *typeIdentifier; // @synthesize typeIdentifier=_typeIdentifier;
- (void).cxx_destruct;
- (void)cancel;
- (void)launch;
- (void)_filterCloudCache;
- (void)_downloadNextResource;
- (void)taskDidFinishWithError:(id)arg1;
- (unsigned long long)priority;
- (_Bool)shouldStopSyncSession;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface CPLEngineStorage : NSObject <CPLAbstractObject>
{
    _Bool _superWasCalled;
    CPLPlatformObject *_platformObject;
    CPLEngineStore *_engineStore;
    NSString *_name;
}

+ (id)platformImplementationProtocol;
@property(readonly, copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) CPLEngineStore *engineStore; // @synthesize engineStore=_engineStore;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (_Bool)_checkSuperWasCalled;
- (id)statusDictionary;
- (id)status;
- (void)writeTransactionDidSucceed;
- (void)writeTransactionDidFail;
- (_Bool)closeWithError:(id *)arg1;
- (_Bool)openWithError:(id *)arg1;
@property(readonly, copy) NSString *description;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineChangePipe : CPLEngineStorage <CPLAbstractObject>
{
}

@property(nonatomic, getter=isLocked) _Bool locked;
- (id)allChangeBatches;
- (id)popAllChangeBatchesWithError:(id *)arg1;
- (_Bool)compactChangeBatchesWithError:(id *)arg1;
- (_Bool)deleteAllChangeBatchesWithError:(id *)arg1;
- (_Bool)popNextBatchWithError:(id *)arg1;
- (id)nextBatch;
- (_Bool)popChangeBatch:(id *)arg1 error:(id *)arg2;
- (_Bool)appendChangeBatch:(id)arg1 error:(id *)arg2;
- (unsigned long long)countOfQueuedBatches;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineClientCache : CPLEngineStorage <CPLAbstractObject>
{
}

- (id)resourceOfType:(unsigned long long)arg1 forRecordWithIdentifier:(id)arg2 error:(id *)arg3;
- (_Bool)applyBatch:(id)arg1 withError:(id *)arg2;
- (id)localChangeBatchFromCloudBatch:(id)arg1 usingMapping:(id)arg2 withError:(id *)arg3;
- (id)compactedBatchFromExpandedBatch:(id)arg1;
- (_Bool)resetWithError:(id *)arg1;
- (id)recordsWithRelatedIdentifier:(id)arg1;
- (id)relatedIdentifierForRecordWithIdentifier:(id)arg1;
- (id)_relatedIdentifierForRecordWithIdentifier:(id)arg1;
- (id)recordWithIdentifier:(id)arg1;
- (_Bool)deleteRecordWithIdentifier:(id)arg1 error:(id *)arg2;
- (_Bool)updateRecord:(id)arg1 error:(id *)arg2;
- (_Bool)addRecord:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineCloudCache : CPLEngineStorage <CPLAbstractObject>
{
}

- (id)recordsOfClass:(Class)arg1 isFinal:(_Bool)arg2;
- (void)getCommittedRecord:(id *)arg1 stagedRecord:(id *)arg2 forIdentifier:(id)arg3;
- (id)resourceOfType:(unsigned long long)arg1 forRecordWithIdentifier:(id)arg2 error:(id *)arg3;
@property(readonly) _Bool hasDoneAFirstSynchronization;
- (_Bool)resetSyncAnchorWithError:(id *)arg1;
- (_Bool)setSyncAnchor:(id)arg1 error:(id *)arg2;
- (id)syncAnchor;
- (_Bool)discardStagedChangesWithError:(id *)arg1;
- (_Bool)commitStagedChangesWithError:(id *)arg1;
- (_Bool)remapAllRecordsWithPreviousIdentifier:(id)arg1 newIdentifier:(id)arg2 error:(id *)arg3;
- (_Bool)resetWithError:(id *)arg1;
- (id)recordsWithRelatedIdentifier:(id)arg1 isFinal:(_Bool)arg2;
- (_Bool)hasRecordWithIdentifier:(id)arg1;
- (id)recordWithIdentifier:(id)arg1 isFinal:(_Bool)arg2;
- (_Bool)deleteRecordWithIdentifier:(id)arg1 isFinal:(_Bool)arg2 error:(id *)arg3;
- (id)cloudChangeBatchFromBatch:(id)arg1 usingMapping:(id)arg2 isFinal:(_Bool)arg3 withError:(id *)arg4;
- (_Bool)_remapRecord:(id)arg1 inBatch:(id)arg2 error:(id *)arg3;
- (_Bool)applyBatch:(id)arg1 isFinal:(_Bool)arg2 withError:(id *)arg3;
- (_Bool)updateRecord:(id)arg1 isFinal:(_Bool)arg2 error:(id *)arg3;
- (_Bool)addRecord:(id)arg1 isFinal:(_Bool)arg2 error:(id *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineComponentEnumerator : NSObject
{
    NSEnumerator *_enumerator;
    CDUnknownBlockType _handler;
}

- (void).cxx_destruct;
- (void)nextComponent;
- (id)initWithComponents:(id)arg1 handler:(CDUnknownBlockType)arg2;

@end

@interface CPLEngineFileStorage : NSObject <CPLAbstractObject>
{
    NSObject<OS_dispatch_queue> *_lock;
    NSString *_logDomain;
    NSURL *_crashMarkerURL;
    NSMutableArray *_uncommittedFiles;
    _Bool _keepOriginals;
    _Bool _deleteImmediately;
    CPLPlatformObject *_platformObject;
    NSURL *_baseURL;
}

+ (id)platformImplementationProtocol;
@property(nonatomic) _Bool deleteImmediately; // @synthesize deleteImmediately=_deleteImmediately;
@property(nonatomic) _Bool keepOriginals; // @synthesize keepOriginals=_keepOriginals;
@property(readonly, nonatomic) NSURL *baseURL; // @synthesize baseURL=_baseURL;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (id)fileEnumerator;
- (id)fileEnumeratorIncludingPropertiesForKeys:(id)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (_Bool)tryToFreeDiskSpace:(unsigned long long)arg1 actuallyFreedSpace:(unsigned long long *)arg2 includeOriginals:(_Bool)arg3 error:(id *)arg4;
- (_Bool)compactStorageIncludeOriginals:(_Bool)arg1 error:(id *)arg2;
- (_Bool)_compactStorageIncludeOriginals:(_Bool)arg1 desiredFreeSpace:(unsigned long long *)arg2 error:(id *)arg3;
- (_Bool)tryToFreeDiskSpace:(unsigned long long)arg1 actuallyFreedSpace:(unsigned long long *)arg2 error:(id *)arg3;
- (_Bool)compactStorage:(id *)arg1;
- (_Bool)discardAllRetainedFileURLsWithError:(id *)arg1;
- (_Bool)releaseFileURL:(id)arg1 error:(id *)arg2;
- (id)retainFileURLForIdentity:(id)arg1 resourceType:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)linkOrCopyFileWithIdentity:(id)arg1 destinationURL:(id)arg2 error:(id *)arg3;
- (void)checkFileSizeForIdentity:(id)arg1;
- (_Bool)hasFileWithIdentity:(id)arg1;
- (_Bool)storeUnretainedData:(id)arg1 identity:(id)arg2 isOriginal:(_Bool)arg3 error:(id *)arg4;
- (_Bool)storeUnretainedFileAtURL:(id)arg1 identity:(id)arg2 isOriginal:(_Bool)arg3 error:(id *)arg4;
- (_Bool)deleteFileWithIdentity:(id)arg1 includingOriginal:(_Bool)arg2 error:(id *)arg3;
- (_Bool)deleteFileWithIdentity:(id)arg1 error:(id *)arg2;
- (_Bool)discardUncommittedFileWithIdentity:(id)arg1 error:(id *)arg2;
- (_Bool)commitFileWithIdentity:(id)arg1 error:(id *)arg2;
- (_Bool)storeData:(id)arg1 identity:(id)arg2 isOriginal:(_Bool)arg3 needsCommit:(_Bool *)arg4 error:(id *)arg5;
- (_Bool)storeFileAtURL:(id)arg1 identity:(id)arg2 isOriginal:(_Bool)arg3 needsCommit:(_Bool *)arg4 error:(id *)arg5;
- (_Bool)_fixupIdentity:(id)arg1 fileURL:(id)arg2 data:(id)arg3 error:(id *)arg4;
- (void)_removeIdentityFromUncommittedFiles:(id)arg1;
- (void)_addIdentityToUncommittedFiles:(id)arg1;
- (_Bool)hasCrashMarker;
- (unsigned long long)countOfUncommittedFiles;
- (_Bool)closeWithError:(id *)arg1;
- (_Bool)openWithRecoveryHandler:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (_Bool)_recoverFromCrashWithRecoveryHandler:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (_Bool)doWrite:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (void)doRead:(CDUnknownBlockType)arg1;
- (id)initWithBaseURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineIDMapping : CPLEngineStorage <CPLAbstractObject>
{
}

- (_Bool)resetWithError:(id *)arg1;
- (_Bool)resetAllFinalCloudIdentifiersWithError:(id *)arg1;
- (_Bool)removeMappingForCloudIdentifier:(id)arg1 error:(id *)arg2;
- (_Bool)hasPendingIdentifiers;
- (_Bool)markAllPendingIdentifiersAsFinalWithError:(id *)arg1;
- (_Bool)setFinalCloudIdentifier:(id)arg1 forPendingCloudIdentifier:(id)arg2 error:(id *)arg3;
- (_Bool)addCloudIdentifier:(id)arg1 forLocalIdentifier:(id)arg2 isFinal:(_Bool)arg3 error:(id *)arg4;
- (id)localIdentifiersForCloudIdentifiers:(id)arg1;
- (id)cloudIdentifiersForLocalIdentifiers:(id)arg1;
- (id)localIdentifierForCloudIdentifier:(id)arg1 isFinal:(_Bool *)arg2;
- (id)cloudIdentifierForLocalIdentifier:(id)arg1 isFinal:(_Bool *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineLibrary : NSObject <CPLAbstractObject>
{
    NSArray *_components;
    NSObject<OS_dispatch_queue> *_queue;
    NSHashTable *_attachedObjects;
    NSError *_openingError;
    CPLStatus *_status;
    _Bool _closed;
    CPLPlatformObject *_platformObject;
    NSURL *_clientLibraryBaseURL;
    NSURL *_cloudLibraryStateStorageURL;
    NSURL *_cloudLibraryResourceStorageURL;
    NSString *_libraryIdentifier;
    CPLEngineStore *_store;
    CPLEngineScheduler *_scheduler;
    CPLEngineSyncManager *_syncManager;
    CPLEngineTransport *_transport;
    CPLStatistics *_statistics;
    CPLEngineSystemMonitor *_systemMonitor;
    CPLConfiguration *_configuration;
}

+ (id)platformImplementationProtocol;
@property(readonly, nonatomic) CPLConfiguration *configuration; // @synthesize configuration=_configuration;
@property(readonly, nonatomic) CPLEngineSystemMonitor *systemMonitor; // @synthesize systemMonitor=_systemMonitor;
@property(readonly, nonatomic) CPLStatistics *statistics; // @synthesize statistics=_statistics;
@property(readonly, nonatomic) CPLEngineTransport *transport; // @synthesize transport=_transport;
@property(readonly, nonatomic) CPLEngineSyncManager *syncManager; // @synthesize syncManager=_syncManager;
@property(readonly, nonatomic) CPLEngineScheduler *scheduler; // @synthesize scheduler=_scheduler;
@property(readonly, nonatomic) CPLEngineStore *store; // @synthesize store=_store;
@property(readonly, copy, nonatomic) NSString *libraryIdentifier; // @synthesize libraryIdentifier=_libraryIdentifier;
@property(readonly, copy, nonatomic) NSURL *cloudLibraryResourceStorageURL; // @synthesize cloudLibraryResourceStorageURL=_cloudLibraryResourceStorageURL;
@property(readonly, copy, nonatomic) NSURL *cloudLibraryStateStorageURL; // @synthesize cloudLibraryStateStorageURL=_cloudLibraryStateStorageURL;
@property(readonly, copy, nonatomic) NSURL *clientLibraryBaseURL; // @synthesize clientLibraryBaseURL=_clientLibraryBaseURL;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (id)componentName;
- (void)notifyAttachedObjectsSizeOfResourcesToUploadDidChangeToSize:(unsigned long long)arg1;
- (void)notifyAttachedObjectsUploadTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)notifyAttachedObjectsUploadTask:(id)arg1 didProgress:(float)arg2;
- (void)notifyAttachedObjectsUploadTaskDidStart:(id)arg1;
- (void)notifyAttachedObjectsResourceDidFailBackgroundDownloadOfResource:(id)arg1;
- (void)notifyAttachedObjectsResourceDidDowloadInBackground:(id)arg1;
- (void)notifyAttachedObjectsPullQueueIsFull;
- (void)_performBlockWithLibrary:(_Bool)arg1 enumerateAttachedObjects:(CDUnknownBlockType)arg2;
- (void)detachObject:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)attachObject:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
@property(readonly, copy) NSString *description;
- (void)startSyncSession;
@property(nonatomic) _Bool iCloudLibraryExists;
@property(nonatomic) _Bool iCloudLibraryHasBeenWiped;
@property(retain, nonatomic) NSDate *exitDeleteTime;
@property(nonatomic) _Bool isExceedingQuota;
@property(nonatomic) _Bool hasChangesToProcess;
- (void)reportUnsuccessfulSync;
- (void)updateLastSuccessfullSyncDate:(id)arg1;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_closeNextComponent:(id)arg1 deactivate:(_Bool)arg2 lastError:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_openNextComponent:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)initWithClientLibraryBaseURL:(id)arg1 cloudLibraryStateStorageURL:(id)arg2 cloudLibraryResourceStorageURL:(id)arg3 libraryIdentifier:(id)arg4;
- (void)getStatusArrayForComponents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getStatusForComponents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getListOfComponentsWithCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineRemappedDeletes : CPLEngineStorage <CPLAbstractObject>
{
}

- (_Bool)resetWithError:(id *)arg1;
- (void)discardDeleteForRemappedRecordWithIdentifier:(id)arg1;
- (void)scheduleDeleteForRemappedRecordWithIdentifier:(id)arg1 realIdentifier:(id)arg2 asap:(_Bool)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineResourceDownloadQueue : CPLEngineStorage <CPLAbstractObject>
{
    NSObject<OS_dispatch_queue> *_downloadQueue;
    NSMutableArray *_highPriorityTasksQueue;
    NSMutableArray *_highPriorityActiveTasks;
    NSMutableArray *_lowPriorityTasksQueue;
    NSMutableArray *_lowPriorityActiveTasks;
    NSMutableArray *_backgroundActiveTasks;
    unsigned long long _totalClientRequests;
    unsigned long long _totalClientRequestErrors;
    unsigned long long _totalPutInBackground;
    _Bool _shouldRequestABackgroundDownloadSyncPhase;
}

- (void).cxx_destruct;
- (unsigned long long)countOfQueuedDownloadTasks;
- (id)enumeratorForDownloadedResources;
- (_Bool)removeAllBackgroundDownloadTasksForItemWithIdentifier:(id)arg1 error:(id *)arg2;
- (_Bool)resetDequeuedBackgroundDownloadTasksWithError:(id *)arg1;
- (_Bool)dequeueNextBackgroundDownloadTask:(id *)arg1 resourceType:(unsigned long long)arg2 taskIdentifier:(unsigned long long *)arg3 error:(id *)arg4;
- (_Bool)markBackgroundDownloadTaskForResourceAsSuceeded:(id)arg1 taskIdentifier:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)removeBackgroundDownloadTaskForResource:(id)arg1 taskIdentifier:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)reenqueueBackgroundDownloadTaskForResource:(id)arg1 taskIdentifier:(unsigned long long)arg2 bumpRetryCount:(_Bool)arg3 didDiscard:(_Bool *)arg4 error:(id *)arg5;
- (_Bool)enqueueBackgroundDownloadTaskForResource:(id)arg1 taskIdentifier:(unsigned long long)arg2 error:(id *)arg3;
- (void)_downloadTaskDidFail:(id)arg1 withError:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_downloadTaskDidSucceed:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)_realDownloadTaskForCloudResource:(id)arg1 clientBundleID:(id)arg2 didStartHandler:(CDUnknownBlockType)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_finishDownloadTask:(id)arg1 error:(id)arg2;
- (_Bool)_cancelDownloadTask:(id)arg1;
- (void)_enqueueDownloadTask:(id)arg1;
- (void)_processQueuedDownloadTasks;
- (_Bool)_hasActiveForegroundTasks;
- (void)_reallyDispatchDownloadTask:(id)arg1;
- (id)_resourceStorageCopyTaskForResource:(id)arg1 clientBundleID:(id)arg2 didStartHandler:(CDUnknownBlockType)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (id)_failedTaskWithCompletionHandler:(CDUnknownBlockType)arg1 error:(id)arg2;
- (_Bool)resetWithError:(id *)arg1;
- (id)dequeueBackgroundDownloadTaskForResourceType:(unsigned long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)_downloadTaskForLocalResource:(id)arg1 clientBundleID:(id)arg2 highPriority:(_Bool)arg3 background:(_Bool)arg4 backgroundTaskIdentifier:(unsigned long long)arg5 didStartHandler:(CDUnknownBlockType)arg6 progressHandler:(CDUnknownBlockType)arg7 completionHandler:(CDUnknownBlockType)arg8;
- (id)downloadTaskForLocalResource:(id)arg1 clientBundleID:(id)arg2 highPriority:(_Bool)arg3 didStartHandler:(CDUnknownBlockType)arg4 progressHandler:(CDUnknownBlockType)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLResourceTransferTask : NSObject <NSSecureCoding>
{
    long long _priority;
    _Bool _cancelled;
    CPLResource *_resource;
    NSString *_taskIdentifier;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *taskIdentifier; // @synthesize taskIdentifier=_taskIdentifier;
@property(retain, nonatomic) CPLResource *resource; // @synthesize resource=_resource;
- (void).cxx_destruct;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic, getter=isCancelled) _Bool cancelled;
- (void)cancelTask;
- (void)launch;
@property(nonatomic, getter=isHighPriority) _Bool highPriority;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (Class)classForKeyedArchiver;
- (Class)classForCoder;

@end

@interface CPLEngineResourceDownloadTask : CPLResourceTransferTask
{
    _Bool _backgroundTask;
    CPLResource *_cloudResource;
    unsigned long long _taskIdentifierForQueue;
    NSString *_clientBundleID;
    id <CPLEngineTransportTask> _transportTask;
    CDUnknownBlockType _launchHandler;
    CDUnknownBlockType _cancelHandler;
    CDUnknownBlockType _didStartHandler;
    CDUnknownBlockType _progressHandler;
    CDUnknownBlockType _completionHandler;
}

@property(readonly, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(readonly, nonatomic) CDUnknownBlockType progressHandler; // @synthesize progressHandler=_progressHandler;
@property(readonly, nonatomic) CDUnknownBlockType didStartHandler; // @synthesize didStartHandler=_didStartHandler;
@property(readonly, nonatomic) CDUnknownBlockType cancelHandler; // @synthesize cancelHandler=_cancelHandler;
@property(readonly, nonatomic) CDUnknownBlockType launchHandler; // @synthesize launchHandler=_launchHandler;
@property(retain, nonatomic) id <CPLEngineTransportTask> transportTask; // @synthesize transportTask=_transportTask;
@property(retain, nonatomic) NSString *clientBundleID; // @synthesize clientBundleID=_clientBundleID;
@property(nonatomic, getter=isBackgroundTask) _Bool backgroundTask; // @synthesize backgroundTask=_backgroundTask;
@property(nonatomic) unsigned long long taskIdentifierForQueue; // @synthesize taskIdentifierForQueue=_taskIdentifierForQueue;
@property(retain, nonatomic) CPLResource *cloudResource; // @synthesize cloudResource=_cloudResource;
- (void).cxx_destruct;
- (void)cancelTask;
- (void)launch;
- (id)initWithLaunchHandler:(CDUnknownBlockType)arg1 cancelHandler:(CDUnknownBlockType)arg2 didStartHandler:(CDUnknownBlockType)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;

@end

@interface CPLEngineResourceStorage : CPLEngineStorage <CPLAbstractObject>
{
    NSMutableSet *_identitiesToCommit;
    NSMutableSet *_identitiesToDelete;
    NSURL *_tempFolderURL;
    _Bool _modifiedSizeOfResourcesToUpload;
    unsigned long long _previousSizeOfResourcesToUpload;
    CPLEngineFileStorage *_fileStorage;
}

@property(readonly, nonatomic) CPLEngineFileStorage *fileStorage; // @synthesize fileStorage=_fileStorage;
- (void).cxx_destruct;
- (void)writeTransactionDidSucceed;
- (void)writeTransactionDidFail;
- (_Bool)compactWithError:(id *)arg1;
- (_Bool)resetWithError:(id *)arg1;
- (_Bool)storeDownloadedResource:(id)arg1 atURL:(id)arg2 error:(id *)arg3;
- (id)createTempDestinationURLForResource:(id)arg1 error:(id *)arg2;
- (_Bool)storeResource:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
- (_Bool)hasResource:(id)arg1;
- (_Bool)releaseFileURL:(id)arg1 forResource:(id)arg2 error:(id *)arg3;
- (id)retainFileURLForResource:(id)arg1 error:(id *)arg2;
- (unsigned long long)sizeOfResourcesToUpload;
- (_Bool)markResourceFailedToUpload:(id)arg1 fromURL:(id)arg2 error:(id *)arg3;
- (_Bool)markResourceAsUploaded:(id)arg1 fromURL:(id)arg2 error:(id *)arg3;
- (_Bool)markResourceDoesNotNeedToBeUploaded:(id)arg1 error:(id *)arg2;
- (id)createFileURLForUploadForResource:(id)arg1 error:(id *)arg2;
- (_Bool)storeResourceForUpload:(id)arg1 error:(id *)arg2;
- (_Bool)openWithError:(id *)arg1;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineResourceUploadQueue : CPLEngineStorage <CPLAbstractObject>
{
    _Bool _immediateUploads[18];
}

- (_Bool)openWithError:(id *)arg1;
- (_Bool)resetWithError:(id *)arg1;
- (unsigned long long)countOfQueuedUploadTasks;
- (_Bool)resetDequeuedBackgroundUploadTasksWithError:(id *)arg1;
- (id)dequeueBackgroundUploadTaskForResourceType:(unsigned long long)arg1 foreground:(_Bool)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (id)_uploadTaskForResource:(id)arg1 foreground:(_Bool)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (_Bool)enqueueResourceForBackgroundUpload:(id)arg1 error:(id *)arg2;
- (_Bool)noteMedataWasUploadedForStaleOrNotAvailableResource:(id)arg1 error:(id *)arg2;
- (_Bool)reenqueueResource:(id)arg1 uploadURL:(id)arg2 failedToUploadWithUploadError:(id)arg3 error:(id *)arg4;
- (_Bool)markResourceAsSuccessfullyUploaded:(id)arg1 uploadURL:(id)arg2 error:(id *)arg3;
- (_Bool)_markResourcesAsStaleForItemWithIdentifier:(id)arg1 withResources:(id)arg2 includePending:(_Bool)arg3 error:(id *)arg4;
- (_Bool)markResourcesAsStaleForItemWithIdentifier:(id)arg1 withResources:(id)arg2 error:(id *)arg3;
- (_Bool)discardResourceForUpload:(id)arg1 error:(id *)arg2;
- (_Bool)prepareCloudResourceForUpload:(id)arg1 fromLocalResource:(id)arg2 error:(id *)arg3;
- (_Bool)enqueueResourcesForUploadForBatch:(id)arg1 error:(id *)arg2;
- (_Bool)shouldUploadResourceWithMetadata:(id)arg1;
- (_Bool)isResourceInQueue:(id)arg1;
- (unsigned long long)availabilityOfResource:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineResourceUploadTask : CPLResourceTransferTask
{
    _Bool _backgroundTask;
    CPLResource *_cloudResource;
    id <CPLEngineTransportTask> _transportTask;
    CDUnknownBlockType _launchHandler;
    CDUnknownBlockType _cancelHandler;
    CDUnknownBlockType _didStartHandler;
    CDUnknownBlockType _progressHandler;
    CDUnknownBlockType _completionHandler;
}

@property(readonly, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(readonly, nonatomic) CDUnknownBlockType progressHandler; // @synthesize progressHandler=_progressHandler;
@property(readonly, nonatomic) CDUnknownBlockType didStartHandler; // @synthesize didStartHandler=_didStartHandler;
@property(readonly, nonatomic) CDUnknownBlockType cancelHandler; // @synthesize cancelHandler=_cancelHandler;
@property(readonly, nonatomic) CDUnknownBlockType launchHandler; // @synthesize launchHandler=_launchHandler;
@property(retain, nonatomic) id <CPLEngineTransportTask> transportTask; // @synthesize transportTask=_transportTask;
@property(nonatomic, getter=isBackgroundTask) _Bool backgroundTask; // @synthesize backgroundTask=_backgroundTask;
@property(retain, nonatomic) CPLResource *cloudResource; // @synthesize cloudResource=_cloudResource;
- (void).cxx_destruct;
- (void)cancelTask;
- (void)launch;
- (id)initWithLaunchHandler:(CDUnknownBlockType)arg1 cancelHandler:(CDUnknownBlockType)arg2 didStartHandler:(CDUnknownBlockType)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;

@end

@interface CPLEngineScheduler : NSObject <CPLAbstractObject, CPLEngineComponent>
{
    unsigned long long _requiredFirstState;
    unsigned long long _lastRequestGeneration;
    unsigned long long _currentRequestGeneration;
    NSDate *_nextScheduledDate;
    double _intervalForRetry;
    NSObject<OS_dispatch_queue> *_queue;
    unsigned long long _currentSyncState;
    _Bool _opened;
    NSDate *_unavailabilityLimitDate;
    unsigned long long _foregroundCalls;
    NSCountedSet *_disablingReasons;
    NSDate *_lastSyncSessionDateCausedByForeground;
    _Bool _shouldRetryASyncSessionForResourcesUpload;
    CPLPlatformObject *_platformObject;
    CPLEngineLibrary *_engineLibrary;
}

+ (id)platformImplementationProtocol;
@property(readonly, nonatomic) __weak CPLEngineLibrary *engineLibrary; // @synthesize engineLibrary=_engineLibrary;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (void)getStatusDictionaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getStatusWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)componentName;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)resetBackoffInterval;
- (void)noteSyncSessionFailedDuringPhase:(unsigned long long)arg1 withError:(id)arg2;
- (void)_handleResetCloudCacheWithError:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_handleResetClientCacheWithError:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)noteSyncSessionSucceeded;
- (void)noteSyncSessionStateWillBeAttempted:(unsigned long long)arg1;
- (void)noteNetworkStateDidChange;
- (void)noteServerIsUnavailableWithError:(id)arg1;
- (void)_noteServerIsUnavailableWithErrorLocked:(id)arg1;
- (void)_disableRetryAfterLocked;
- (_Bool)isSynchronizationDisabledWithReasonError:(id *)arg1;
- (void)enableSynchronizationWithReason:(id)arg1;
- (void)_enableSynchronizationWithReasonLocked:(id)arg1;
- (void)disableSynchronizationWithReason:(id)arg1;
- (void)_disableSynchronizationWithReasonLocked:(id)arg1;
- (_Bool)isClientInForeground;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)noteResourceUploadQueueIsFull;
- (void)noteResourceDownloadQueueIsFull;
- (void)noteServerHasChanges;
- (void)noteClientIsNotInSyncWithClientCache;
- (void)noteClientIsInSyncWithClientCache;
- (void)notePullQueueIsFull;
- (void)notePushQueueIsFull;
- (void)notePushQueueIsEmpty;
- (void)startRequiredSyncSessionNow;
- (void)_backOff;
- (void)_noteSyncSessionNeededFromState:(unsigned long long)arg1;
- (void)_unscheduleNextSyncSession;
- (void)_reallyUnscheduleSession;
- (void)_scheduleNextSyncSession;
- (void)_startRequiredSyncSession;
- (void)_reallyStartSyncSession;
- (_Bool)_syncSessionIsPossible;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent>
{
    NSHashTable *_storages;
    NSObject<OS_dispatch_queue> *_batchedTransactionsQueue;
    NSMutableArray *_batchedTransactions;
    _Bool _batchedTransactionDequeueIsScheduled;
    NSURL *_resetEventsURL;
    NSMutableArray *_resetEvents;
    CPLPlatformObject *_platformObject;
    CPLEngineLibrary *_engineLibrary;
    CPLEngineChangePipe *_pushQueue;
    CPLEngineChangePipe *_pullQueue;
    CPLEngineIDMapping *_idMapping;
    CPLEngineClientCache *_clientCache;
    CPLEngineCloudCache *_cloudCache;
    CPLEngineTransientRepository *_transientPullRepository;
    CPLEngineResourceStorage *_resourceStorage;
    CPLEngineResourceDownloadQueue *_downloadQueue;
    CPLEngineResourceUploadQueue *_uploadQueue;
    CPLEngineRemappedDeletes *_remappedDeletes;
    unsigned long long _state;
}

+ (id)platformImplementationProtocol;
+ (id)stateDescriptionForState:(unsigned long long)arg1;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(readonly, nonatomic) CPLEngineRemappedDeletes *remappedDeletes; // @synthesize remappedDeletes=_remappedDeletes;
@property(readonly, nonatomic) CPLEngineResourceUploadQueue *uploadQueue; // @synthesize uploadQueue=_uploadQueue;
@property(readonly, nonatomic) CPLEngineResourceDownloadQueue *downloadQueue; // @synthesize downloadQueue=_downloadQueue;
@property(readonly, nonatomic) CPLEngineResourceStorage *resourceStorage; // @synthesize resourceStorage=_resourceStorage;
@property(readonly, nonatomic) CPLEngineTransientRepository *transientPullRepository; // @synthesize transientPullRepository=_transientPullRepository;
@property(readonly, nonatomic) CPLEngineCloudCache *cloudCache; // @synthesize cloudCache=_cloudCache;
@property(readonly, nonatomic) CPLEngineClientCache *clientCache; // @synthesize clientCache=_clientCache;
@property(readonly, nonatomic) CPLEngineIDMapping *idMapping; // @synthesize idMapping=_idMapping;
@property(readonly, nonatomic) CPLEngineChangePipe *pullQueue; // @synthesize pullQueue=_pullQueue;
@property(readonly, nonatomic) CPLEngineChangePipe *pushQueue; // @synthesize pushQueue=_pushQueue;
@property(readonly, nonatomic) __weak CPLEngineLibrary *engineLibrary; // @synthesize engineLibrary=_engineLibrary;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (void)getStatusDictionaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getStatusWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)componentName;
- (void)assertCanRead;
- (void)assertCanWrite;
- (_Bool)_canWrite;
- (_Bool)_canRead;
- (void)_removeTransactionOnCurrentThread:(id)arg1;
- (void)_setTransactionOnCurrentThread:(id)arg1;
- (id)_currentTransaction;
@property(readonly, copy) NSString *description;
- (_Bool)isClientInSyncWithClientCache;
- (_Bool)storeClientIsInSyncWithClientCacheWithError:(id *)arg1;
- (id)clientCacheIdentifier;
- (_Bool)storeUserIdentifier:(id)arg1 error:(id *)arg2;
- (id)userIdentifier;
- (id)createNewLibraryVersion;
- (id)libraryVersion;
- (_Bool)storeLibraryVersion:(id)arg1 withError:(id *)arg2;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)performBatchedWriteTransactionWithBlock:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)_scheduleBatchedTransactionsLocked;
- (id)performWriteTransactionWithBlock:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)performReadTransactionWithBlock:(CDUnknownBlockType)arg1;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_performTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (_Bool)resetCompleteSyncStateWithCause:(id)arg1 error:(id *)arg2;
- (_Bool)resetLocalSyncStateWithCause:(id)arg1 error:(id *)arg2;
- (id)_resetEventsDescriptions;
- (void)_storeResetEvent:(id)arg1 cause:(id)arg2;
- (_Bool)_resetLocalSyncStateWithError:(id *)arg1;
- (void)registerStorage:(id)arg1;
@property(readonly, nonatomic) NSArray *storages;
- (void)dealloc;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineStoreTransaction : NSObject
{
    NSThread *_currentThread;
    _Bool _forWrite;
    NSError *_error;
    NSString *_name;
}

@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(copy, nonatomic) NSError *error; // @synthesize error=_error;
- (void).cxx_destruct;
- (id)description;
- (_Bool)canRead;
- (_Bool)canWrite;
- (void)_transactionDidFinish;
- (void)_transactionWillBeginOnThread:(id)arg1;
- (_Bool)do:(CDUnknownBlockType)arg1;
- (_Bool)_forWrite;
- (id)initForWrite:(_Bool)arg1;

@end

__attribute__((visibility("hidden")))
@interface CPLEngineStoreCloseTransaction : CPLEngineStoreTransaction
{
}

@end

__attribute__((visibility("hidden")))
@interface CPLEngineStoreOpenTransaction : CPLEngineStoreTransaction
{
}

@end

@interface CPLEngineSyncManager : NSObject <CPLEngineSyncEmergencyTaskDelegate, CPLPushToTransportTaskDelegate, CPLPullFromTransportTaskDelegate, CPLMinglePulledChangesTaskDelegate, CPLBackgroundUploadsTaskDelegate, CPLBackgroundDownloadsTaskDelegate, CPLAbstractObject, CPLEngineComponent>
{
    id <CPLEngineStoreUserIdentifier> _transportUserIdentifier;
    _Bool _setupIsDone;
    id <CPLEngineTransportSetupTask> _setupTask;
    NSMutableArray *_setupBarriers;
    CDUnknownBlockType _closingCompletionHandler;
    NSObject<OS_dispatch_queue> *_lock;
    NSError *_lastError;
    CPLEngineSyncEmergencyTask *_managementTask;
    NSMutableArray *_archivedManagementTasks;
    NSMutableDictionary *_completionHandlerPerTaskIdentifier;
    CPLPushToTransportTask *_pushTask;
    CPLPullFromTransportTask *_pullTask;
    CPLMinglePulledChangesTask *_mingleTask;
    CPLBackgroundUploadsTask *_backgroundUploadsTask;
    CPLBackgroundDownloadsTask *_backgroundDownloadsTask;
    unsigned long long _shouldRestartSessionFromState;
    NSMutableArray *_lastErrors;
    _Bool _foreground;
    _Bool _hasTransactionForSyncSession;
    _Bool _shouldTryToMingleImmediately;
    CPLPlatformObject *_platformObject;
    CPLEngineLibrary *_engineLibrary;
    unsigned long long _state;
}

+ (id)platformImplementationProtocol;
+ (id)shortDescriptionForState:(unsigned long long)arg1;
+ (id)descriptionForState:(unsigned long long)arg1;
@property(nonatomic) _Bool shouldTryToMingleImmediately; // @synthesize shouldTryToMingleImmediately=_shouldTryToMingleImmediately;
@property(nonatomic, setter=_setState:) unsigned long long state; // @synthesize state=_state;
@property(readonly, nonatomic) __weak CPLEngineLibrary *engineLibrary; // @synthesize engineLibrary=_engineLibrary;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (void)getStatusDictionaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getStatusWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)componentName;
- (void)endClientWork:(id)arg1;
- (void)beginClientWork:(id)arg1;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)task:(id)arg1 didProgress:(float)arg2;
- (void)task:(id)arg1 didFinishWithError:(id)arg2;
- (_Bool)_didFinishBackgroundDownloadsTask:(id)arg1 withError:(id)arg2 shouldStop:(_Bool *)arg3;
- (float)_progressForBackgroundDownloadsTask:(id)arg1 progress:(float)arg2;
- (void)_cancelAllTasksForBackgroundDownloads;
- (_Bool)_launchNecessaryTasksForBackgroundDownloads;
- (id)_descriptionForBackgroundDownloadsTasks;
- (_Bool)_didFinishBackgroundUploadsTask:(id)arg1 withError:(id)arg2 shouldStop:(_Bool *)arg3;
- (float)_progressForBackgroundUploadsTask:(id)arg1 progress:(float)arg2;
- (void)_cancelAllTasksForBackgroundUploads;
- (_Bool)_launchNecessaryTasksForBackgroundUploads;
- (id)_descriptionForBackgroundUploadsTasks;
- (id)task:(id)arg1 wantsToDownloadBatchesFromSyncAnchor:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (_Bool)_didFinishPullTask:(id)arg1 withError:(id)arg2 shouldStop:(_Bool *)arg3;
- (float)_progressForPullTask:(id)arg1 progress:(float)arg2;
- (void)_cancelAllTasksForPull;
- (_Bool)_launchNecessaryTasksForPull;
- (id)_descriptionForPullTasks;
- (id)task:(id)arg1 wantsToPushBatch:(id)arg2 continuationBlock:(CDUnknownBlockType)arg3;
- (_Bool)_didFinishPushTask:(id)arg1 withError:(id)arg2 shouldStop:(_Bool *)arg3;
- (float)_progressForPushTask:(id)arg1 progress:(float)arg2;
- (void)_cancelAllTasksForPush;
- (_Bool)_launchNecessaryTasksForPush;
- (id)_descriptionForPushTasks;
- (_Bool)_didFinishManagementTask:(id)arg1 withError:(id)arg2 shouldStop:(_Bool *)arg3;
- (void)_cancelAllTasksForManagement;
- (_Bool)_launchManagementTask;
- (void)_loadManagementTasks;
- (void)_saveManagementTasks;
- (id)_descriptionForManagementTasks;
- (_Bool)_didFinishSetupTaskWithError:(id)arg1 shouldStop:(_Bool *)arg2;
- (void)_cancelAllTasksForSetup;
- (_Bool)_launchSetupTask;
- (id)_descriptionForSetupTasks;
- (_Bool)_prepareAndLaunchSyncTask:(id *)arg1;
- (void)setSyncSessionShouldBeForeground:(_Bool)arg1;
- (void)addSetupBarrier:(CDUnknownBlockType)arg1;
- (void)startEmergencyTask:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)resetTransportUserIdentifierAndRestartSync:(_Bool)arg1;
- (void)cancelCurrentSyncSession;
- (void)kickOffSyncSession;
- (void)startSyncSessionWithMinimalPhase:(unsigned long long)arg1;
- (void)_restartSyncSessionFromStateLocked:(unsigned long long)arg1 cancelIfNecessary:(_Bool)arg2;
- (void)_advanceToNextStateLocked;
- (void)_notifyEndOfSyncSession;
- (_Bool)_launchNecessaryTasksForCurrentStateLocked;
- (id)_descriptionForLaunchedTasks;
- (id)_descriptionForCurrentState;
- (void)_moveAllTasksToBackgroundLocked;
- (void)_cancelAllTasksLocked;
- (void)_resetErrorForSyncSession;
- (void)_setErrorForSyncSession:(id)arg1;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineSystemMonitor : NSObject <CPLNetworkWatcherDelegate, CPLEngineComponent>
{
    NSURL *_volumeURL;
    NSObject<OS_dispatch_queue> *_queue;
    CPLNetworkWatcher *_watcher;
    CPLEngineLibrary *_engineLibrary;
}

@property(readonly, nonatomic) __weak CPLEngineLibrary *engineLibrary; // @synthesize engineLibrary=_engineLibrary;
- (void).cxx_destruct;
- (void)networkStateDidChangeForNetworkWatched:(id)arg1;
- (_Bool)isNetworkConnected;
- (void)getStatusWithCompletionHandler:(CDUnknownBlockType)arg1;
- (unsigned long long)diskPressureState;
- (id)componentName;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineTransientRepository : CPLEngineStorage <CPLAbstractObject>
{
    unsigned long long _state;
    unsigned long long _popState;
    NSMutableArray *_remainingClassesToBePopped;
    unsigned long long _maximumCountOfRecordsInBatches;
}

+ (id)orderedClassesForChanges;
+ (id)orderedClassesForDelete;
@property(nonatomic) unsigned long long maximumCountOfRecordsInBatches; // @synthesize maximumCountOfRecordsInBatches=_maximumCountOfRecordsInBatches;
- (void).cxx_destruct;
- (_Bool)openWithError:(id *)arg1;
- (_Bool)resetTransientRepositoryWithError:(id *)arg1;
- (_Bool)deleteMingledRecordsWithError:(id *)arg1;
- (_Bool)resetMingledRecordsWithError:(id *)arg1;
- (_Bool)endTransientRepositoryWithError:(id *)arg1;
- (_Bool)popChangeBatch:(id *)arg1 error:(id *)arg2;
- (_Bool)_popChangeBatchOfChangedRecords:(id *)arg1 maximumCount:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)_popChangeBatchOfDeletedRecords:(id *)arg1 maximumCount:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)prepareForMinglingWithError:(id *)arg1;
- (_Bool)appendBatch:(id)arg1 alreadyMingled:(_Bool)arg2 error:(id *)arg3;
- (_Bool)_appendBatchToStorage:(id)arg1 alreadyMingled:(_Bool)arg2 error:(id *)arg3;
- (id)_changeWithIdentifier:(id)arg1;
- (_Bool)beginTransientRepositoryWithError:(id *)arg1;
- (_Bool)hasRecordWithIdentifier:(id)arg1;
- (_Bool)storeTransientSyncAnchor:(id)arg1 error:(id *)arg2;
- (id)transientSyncAnchor;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLEngineTransport : NSObject <CPLAbstractObject, CPLEngineComponent>
{
    CPLPlatformObject *_platformObject;
    CPLEngineLibrary *_engineLibrary;
}

+ (id)platformImplementationProtocol;
@property(readonly, nonatomic) __weak CPLEngineLibrary *engineLibrary; // @synthesize engineLibrary=_engineLibrary;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
- (void)getStatusDictionaryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getStatusWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)componentName;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)simpleDataForSyncAnchor:(id)arg1;
- (id)bestErrorForUnderlyingError:(id)arg1;
- (id)resourceUploadTaskForResource:(id)arg1 ofRecord:(id)arg2 didStartHandler:(CDUnknownBlockType)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (_Bool)supportsDelayedUploads;
- (id)removeLibraryTaskWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)resourcePublishTaskForResource:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)resourceDownloadTaskForResource:(id)arg1 clientBundleID:(id)arg2 didStartHandler:(CDUnknownBlockType)arg3 progressHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (id)downloadBatchTaskForSyncAnchor:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)uploadBatchTaskForBatch:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)setupTaskCreateLibraryIfNecessary:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLEngineUtils : NSObject
{
}

+ (struct CGSize)dimensionsOfImageAtPath:(id)arg1 outFileSize:(unsigned long long *)arg2;
+ (void)resizeImageAtPath:(id)arg1 toPath:(id)arg2 maxSide:(double)arg3;
+ (_Bool)reCreatePath:(id)arg1;
+ (_Bool)createPathIfNeeded:(id)arg1;

@end

@interface CPLErrors : NSObject
{
}

+ (id)missingError;
+ (id)cplErrorWithCode:(long long)arg1 underlyingError:(id)arg2 userInfo:(id)arg3 description:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
+ (id)cplErrorWithCode:(long long)arg1 underlyingError:(id)arg2 userInfo:(id)arg3 description:(id)arg4;
+ (id)cplErrorWithCode:(long long)arg1 underlyingError:(id)arg2 description:(id)arg3 arguments:(struct __va_list_tag [1])arg4;
+ (id)cplErrorWithCode:(long long)arg1 underlyingError:(id)arg2 description:(id)arg3;
+ (id)cplErrorWithCode:(long long)arg1 description:(id)arg2 arguments:(struct __va_list_tag [1])arg3;
+ (id)cplErrorWithCode:(long long)arg1 description:(id)arg2;
+ (id)operationCancelledError;
+ (id)posixErrorForURL:(id)arg1;
+ (id)invalidDaemonErrorWithConnectionError:(id)arg1;
+ (id)invalidCloudCacheError;
+ (id)invalidClientCacheError;
+ (id)libraryClosedError;
+ (id)transportErrorFromTransportError:(id)arg1;
+ (id)unknownError;
+ (id)notImplementedError;
+ (id)versionMismatchError;
+ (id)underlyingErrorWithReason:(id)arg1;
+ (id)incorrectMachineStateErrorWithReason:(id)arg1;
+ (id)incorrectParametersErrorForParameter:(id)arg1;

@end

@interface CPLFileStorageItem : NSObject <NSCopying>
{
    _Bool _original;
    _Bool _markedForDelete;
    CPLResourceIdentity *_identity;
    NSDate *_lastAccessDate;
}

@property(readonly, nonatomic) NSDate *lastAccessDate; // @synthesize lastAccessDate=_lastAccessDate;
@property(readonly, nonatomic, getter=isMarkedForDelete) _Bool markedForDelete; // @synthesize markedForDelete=_markedForDelete;
@property(readonly, nonatomic, getter=isOriginal) _Bool original; // @synthesize original=_original;
@property(readonly, nonatomic) CPLResourceIdentity *identity; // @synthesize identity=_identity;
- (void).cxx_destruct;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)getResourceValue:(out id *)arg1 forKey:(id)arg2 error:(out id *)arg3;
- (id)initWithIdentity:(id)arg1 original:(_Bool)arg2 markedForDelete:(_Bool)arg3 lastAccessDate:(id)arg4;

@end

@interface CPLFileWatcher : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_source> *_nodeSource;
    NSObject<OS_dispatch_source> *_parentSource;
    NSURL *_fileURL;
    id <CPLFileWatcherDelegate> _delegate;
}

@property(nonatomic) __weak id <CPLFileWatcherDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void).cxx_destruct;
- (void)stopWatching;
- (void)startWatching;
- (void)_stopWatchingParent;
- (void)_startWatchingParent;
- (void)_stopWatchingNode;
- (void)_startWatchingNode;
- (id)initWithFileURL:(id)arg1 delegate:(id)arg2 queue:(id)arg3;

@end

@interface CPLIDMapping : NSObject
{
    NSString *_cloudIdentifier;
    NSString *_localIdentifier;
    _Bool _final;
}

@property(readonly, nonatomic) NSString *localIdentifier; // @synthesize localIdentifier=_localIdentifier;
@property(readonly, nonatomic) NSString *cloudIdentifier; // @synthesize cloudIdentifier=_cloudIdentifier;
@property(readonly, nonatomic, getter=isFinal) _Bool final; // @synthesize final=_final;
- (void).cxx_destruct;

@end

@interface CPLLibraryManager : NSObject <CPLAbstractObject>
{
    CPLChangeSession *_currentSession;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_sessionLock;
    _Bool _sizeOfResourcesToUploadIsSet;
    long long _configurationOnce;
    long long _statusOnce;
    CPLConfiguration *_configuration;
    CPLStatus *_syncStatus;
    CPLPlatformObject *_platformObject;
    NSURL *_clientLibraryBaseURL;
    NSURL *_cloudLibraryStateStorageURL;
    NSURL *_cloudLibraryResourceStorageURL;
    NSString *_libraryIdentifier;
    NSString *_libraryVersion;
    unsigned long long _sizeOfResourcesToUpload;
    id <CPLLibraryManagerDelegate> _delegate;
    id <CPLResourceProgressDelegate> _resourceProgressDelegate;
    unsigned long long _status;
    NSError *_statusError;
    unsigned long long _state;
    NSString *_userOverride;
    NSString *_effectiveClientBundleIdentifier;
}

+ (id)platformImplementationProtocol;
+ (id)stateDescriptionForState:(unsigned long long)arg1;
+ (void)useCloudPhotoDaemonImplementation;
@property(copy, nonatomic) NSString *effectiveClientBundleIdentifier; // @synthesize effectiveClientBundleIdentifier=_effectiveClientBundleIdentifier;
@property(copy, nonatomic) NSString *userOverride; // @synthesize userOverride=_userOverride;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(readonly, nonatomic) NSError *statusError; // @synthesize statusError=_statusError;
@property(readonly, nonatomic) unsigned long long status; // @synthesize status=_status;
@property(nonatomic) __weak id <CPLResourceProgressDelegate> resourceProgressDelegate; // @synthesize resourceProgressDelegate=_resourceProgressDelegate;
@property(nonatomic) __weak id <CPLLibraryManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned long long sizeOfResourcesToUpload; // @synthesize sizeOfResourcesToUpload=_sizeOfResourcesToUpload;
@property(readonly, copy, nonatomic) NSString *libraryVersion; // @synthesize libraryVersion=_libraryVersion;
@property(readonly, copy, nonatomic) NSString *libraryIdentifier; // @synthesize libraryIdentifier=_libraryIdentifier;
@property(readonly, copy, nonatomic) NSURL *cloudLibraryResourceStorageURL; // @synthesize cloudLibraryResourceStorageURL=_cloudLibraryResourceStorageURL;
@property(readonly, copy, nonatomic) NSURL *cloudLibraryStateStorageURL; // @synthesize cloudLibraryStateStorageURL=_cloudLibraryStateStorageURL;
@property(readonly, copy, nonatomic) NSURL *clientLibraryBaseURL; // @synthesize clientLibraryBaseURL=_clientLibraryBaseURL;
@property(readonly, nonatomic) CPLPlatformObject *platformObject; // @synthesize platformObject=_platformObject;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
- (void)addInfoToLog:(id)arg1;
- (void)resetCacheWithOption:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)downloadOriginalsOfType:(id)arg1 localIdentifiers:(id)arg2 destinationURL:(id)arg3 progressIdentifier:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)compactFileCacheWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getResourcesForItemWithIdentifier:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)deleteResourcesIfSafe:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(nonatomic) _Bool diagnosticsEnabled;
- (void)takeStatisticsSnapshotSinceDate:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)enableSynchronizationWithReason:(id)arg1;
- (void)disableSynchronizationWithReason:(id)arg1;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)noteClientReceivedNotificationOfServerChanges;
- (id)addSubscriberUsingPublishingHandler:(CDUnknownBlockType)arg1;
- (void)startSyncSession;
- (void)resetStatus;
- (void)_setSizeOfResourcesToUpload:(unsigned long long)arg1;
- (_Bool)_setStatus:(unsigned long long)arg1 andError:(id)arg2;
- (void)getLocalIdentifiersForCloudIdentifiers:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getCloudIdentifiersForLocalIdentifiers:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_getMappedIdentifiersForIdentifiers:(id)arg1 inAreLocalIdentifiers:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)publishResource:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)beginDownloadForResource:(id)arg1 highPriority:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)beginDownloadForResource:(id)arg1 clientBundleID:(id)arg2 highPriority:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)beginPullChangeSessionWithKnownLibraryVersion:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)beginPushChangeSessionWithKnownLibraryVersion:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_setLibraryVersion:(id)arg1;
- (void)_setCurrentSession:(id)arg1;
- (void)discardCurrentSession;
- (id)currentSession;
- (void)removeCloudLibraryWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) CPLStatus *syncStatus;
- (void)_statusDidChange;
@property(readonly, nonatomic) CPLConfiguration *configuration;
- (void)_configurationDidChange;
- (void)deactivateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)closeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_closeDeactivating:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (void)barrier;
- (id)initForManagement;
- (id)initWithClientLibraryBaseURL:(id)arg1 cloudLibraryStateStorageURL:(id)arg2 cloudLibraryResourceStorageURL:(id)arg3 libraryIdentifier:(id)arg4;
- (void)cloudCacheGetDescriptionForRecordWithIdentifier:(id)arg1 related:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)cloudCacheGetDescriptionForRecordWithIdentifier:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getStatusArrayForComponents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getStatusForComponents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getListOfComponentsWithCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLMasterChange : CPLItemChange
{
    NSArray *_resources;
    NSDate *_creationDate;
    NSString *_itemType;
    NSDate *_importDate;
    NSString *_filename;
    NSString *_importGroupIdentifier;
    NSString *_mediaMetaDataType;
    NSData *_mediaMetaData;
    long long _originalOrientation;
    unsigned long long _fullSizeJPEGSource;
}

@property(nonatomic) unsigned long long fullSizeJPEGSource; // @synthesize fullSizeJPEGSource=_fullSizeJPEGSource;
@property(nonatomic) long long originalOrientation; // @synthesize originalOrientation=_originalOrientation;
@property(retain, nonatomic) NSData *mediaMetaData; // @synthesize mediaMetaData=_mediaMetaData;
@property(copy, nonatomic) NSString *mediaMetaDataType; // @synthesize mediaMetaDataType=_mediaMetaDataType;
@property(copy, nonatomic) NSString *importGroupIdentifier; // @synthesize importGroupIdentifier=_importGroupIdentifier;
@property(copy, nonatomic) NSString *filename; // @synthesize filename=_filename;
@property(copy, nonatomic) NSDate *importDate; // @synthesize importDate=_importDate;
@property(copy, nonatomic) NSString *itemType; // @synthesize itemType=_itemType;
@property(copy, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
@property(copy, nonatomic) NSArray *resources; // @synthesize resources=_resources;
- (void).cxx_destruct;
- (unsigned long long)dataClassType;
- (_Bool)supportsResources;
- (id)name;
- (void)setName:(id)arg1;
- (CDUnknownBlockType)checkDefaultValueBlockForPropertyWithSelector:(SEL)arg1;
- (void)awakeFromStorage;
- (void)prepareForStorage;
- (id)propertiesForChangeType:(unsigned long long)arg1;
- (id)propertiesDescription;
- (long long)dequeueOrder;
@property(readonly, nonatomic) _Bool isVideo;
@property(readonly, nonatomic) _Bool isImage;
- (id)init;

@end

@interface CPLMinglePulledChangesTask : CPLEngineSyncTask
{
    NSObject<OS_dispatch_queue> *_lock;
    NSString *_clientCacheIdentifier;
    _Bool _hasPreparedForMingling;
    unsigned long long _countOfNotifiedBatchesInPullQueue;
}

+ (_Bool)mingleBatch:(id)arg1 forStore:(id)arg2 putBatchesInPullQueue:(_Bool *)arg3 error:(id *)arg4;
- (void).cxx_destruct;
- (id)taskIdentifier;
- (void)cancel;
- (void)resume;
- (void)pause;
- (void)launch;
- (void)_launch;
- (void)_processNextBatch;
- (void)_taskDidFinishWithError:(id)arg1;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(retain) id <CPLMinglePulledChangesTaskDelegate> delegate;

@end

@interface CPLNetworkIndicator : NSObject
{
}

+ (void)hideNetworkIndicatorForBundleWithIdentifier:(id)arg1;
+ (void)showNetworkIndicatorForBundleWithIdentifier:(id)arg1;
+ (void)_doProtected:(CDUnknownBlockType)arg1;
+ (void)_reallyHideNetworkIndicatorForBundleWithIdentifierLocked:(id)arg1;
+ (void)_reallyShowNetworkIndicatorForBundleWithIdentifierLocked:(id)arg1;

@end

@interface CPLNetworkWatcher : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    struct __SCNetworkReachability *_reachability;
    unsigned int _reachabilityFlags;
    unsigned long long _networkState;
    id <CPLNetworkWatcherDelegate> _delegate;
}

+ (id)_descriptionForNetworkState:(unsigned long long)arg1;
@property(nonatomic) __weak id <CPLNetworkWatcherDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) unsigned long long networkState; // @synthesize networkState=_networkState;
- (void).cxx_destruct;
- (void)_initialReachabilityTestFailed;
- (void)_reachabilityFlagsDidChange:(unsigned int)arg1;
- (void)stop;
- (void)start;
- (void)_setupReachability;
- (void)_teardownReachability;
- (void)_updateState:(unsigned long long)arg1;
- (id)initWithQueue:(id)arg1;

@end

@interface CPLPlatform : NSObject
{
    NSMapTable *_abstractClassToImplementation;
    NSObject<OS_dispatch_queue> *_lock;
    NSString *_suffix;
}

+ (id)currentPlatform;
+ (id)defaultPlatform;
+ (void)setDefaultPlatform:(id)arg1;
+ (void)setProxyImplementationForPlatform:(id)arg1;
@property(copy, nonatomic) NSString *suffix; // @synthesize suffix=_suffix;
- (void).cxx_destruct;
- (id)description;
- (id)newPlatformImplementationForObject:(id)arg1;
- (Class)implementationClassForAbstractClass:(Class)arg1;
- (void)setPlatformImplementation:(Class)arg1 forClass:(Class)arg2;
- (id)init;

@end

@interface CPLPlatformObject : NSObject
{
    id <CPLAbstractObject> _abstractObject;
}

@property(readonly, nonatomic) __weak id <CPLAbstractObject> abstractObject; // @synthesize abstractObject=_abstractObject;
- (void).cxx_destruct;
- (id)description;
- (id)initWithAbstractObject:(id)arg1;
- (id)init;

@end

@interface CPLPowerAssertion : NSObject
{
}

+ (id)powerAssertionStatus;
+ (void)setHasEnoughPower:(_Bool)arg1;
+ (void)enableSleep;
+ (void)disableSleep;
+ (void)_releaseAssertion;
+ (void)_retainAssertion;
+ (void)_doProtected:(CDUnknownBlockType)arg1;

@end

@interface CPLProxyLibraryManager : CPLPlatformObject <CPLClientLibraryManagerProtocol, NSXPCConnectionDelegate, CPLLibraryManagerImplementation>
{
    NSXPCConnection *_connection;
    NSMutableDictionary *_downloadTasks;
    NSMutableDictionary *_uploadTasks;
    _Bool _diagnosticsEnabled;
    unsigned long long _foregroundCalls;
    NSCountedSet *_disablingReasons;
    NSMutableDictionary *_outstandingInvocations;
    unsigned long long _outstandingInvocationsCount;
    NSMutableArray *_pendingBlocksAfterOpening;
    int _openingStatus;
    int _notifyToken;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)clientProtocolInterface;
+ (id)daemonProtocolInterface;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void).cxx_destruct;
- (void)downloadOriginalsOfType:(id)arg1 localIdentifiers:(id)arg2 destinationURL:(id)arg3 progressIdentifier:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)addInfoToLog:(id)arg1;
- (void)cloudCacheGetDescriptionForRecordWithIdentifier:(id)arg1 related:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)getStatusArrayForComponents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getStatusForComponents:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)getListOfComponentsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)resetCacheWithOption:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)compactFileCacheWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getResourcesForItemWithIdentifier:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)barrier;
- (void)cancelTask:(id)arg1;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(_Bool)arg3;
- (void)libraryManagerDidUpdateSizeOfResourcesToUploadToSize:(unsigned long long)arg1;
- (void)libraryManagerDidUpdateStatusWithProperties:(id)arg1;
- (void)libraryManagerHasChangesToPull;
- (void)uploadOfResource:(id)arg1 didFinishForResourceTransferTask:(id)arg2 withError:(id)arg3;
- (void)uploadOfResource:(id)arg1 didProgress:(float)arg2 forResourceTransferTask:(id)arg3;
- (void)uploadDidStartForResource:(id)arg1 withResourceTransferTask:(id)arg2;
- (id)_uploadTaskDidStartForResource:(id)arg1 withTaskIdentifier:(id)arg2;
- (void)backgroundDownloadDidFailForResource:(id)arg1;
- (void)backgroundDownloadDidFinishForResource:(id)arg1;
- (void)downloadDidFinishForResourceTransferTask:(id)arg1 finalResource:(id)arg2 withError:(id)arg3;
- (void)downloadDidProgress:(float)arg1 forResourceTransferTask:(id)arg2;
- (void)downloadDidStartForResourceTransferTask:(id)arg1;
- (_Bool)_setStatusFromDictionary:(id)arg1;
- (void)enableSynchronizationWithReason:(id)arg1;
- (void)disableSynchronizationWithReason:(id)arg1;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)noteClientReceivedNotificationOfServerChanges;
- (void)startSyncSession;
- (void)resetStatus;
- (void)deleteResourcesIfSafe:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)takeStatisticsSnapshotSinceDate:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)setDiagnosticsEnabled:(_Bool)arg1;
- (_Bool)diagnosticsEnabled;
- (void)getMappedIdentifiersForIdentifiers:(id)arg1 inAreLocalIdentifiers:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)publishResource:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)beginDownloadForResource:(id)arg1 clientBundleID:(id)arg2 highPriority:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_dispatchFailedDownloadTaskForResource:(id)arg1 highPriority:(_Bool)arg2 withError:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)_invokeOutstandingInvocationsWithTaskIdentifier:(id)arg1;
- (void)deactivateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeCloudLibraryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)closeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)dispatchBlockWhenLibraryIsOpen:(CDUnknownBlockType)arg1;
- (void)_dispatchBlockWhenOpen:(CDUnknownBlockType)arg1;
- (void)_reallyOpenWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)proxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithAbstractObject:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLProxyLibraryManagerOutstandingInvocation : NSObject
{
    _Bool _didStart;
    _Bool _didFinish;
    float _progress;
    NSError *_finalError;
    CPLResource *_finalResource;
}

@property(retain, nonatomic) CPLResource *finalResource; // @synthesize finalResource=_finalResource;
@property(retain, nonatomic) NSError *finalError; // @synthesize finalError=_finalError;
@property(nonatomic) _Bool didFinish; // @synthesize didFinish=_didFinish;
@property(nonatomic) float progress; // @synthesize progress=_progress;
@property(nonatomic) _Bool didStart; // @synthesize didStart=_didStart;
- (void).cxx_destruct;
- (id)description;

@end

@interface CPLProxySession : CPLPlatformObject <CPLChangeSessionImplementation>
{
}

+ (void)beginSessionForProxy:(id)arg1 knownVersion:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)dispatchBlockWhenLibraryIsOpen:(CDUnknownBlockType)arg1;
- (void)tearDownWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finalizeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)beginSessionWithKnownLibraryVersion:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)proxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)proxyLibraryManager;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLProxyPullSession : CPLProxySession <CPLPullChangeSessionImplementation>
{
}

+ (void)beginSessionForProxy:(id)arg1 knownVersion:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)acknowledgeChangeBatch:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)getChangeBatchWithCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLProxyPushSession : CPLProxySession <CPLPushChangeSessionImplementation>
{
}

+ (void)beginSessionForProxy:(id)arg1 knownVersion:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)commitChangeBatch:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLProxyResourceTransferTask : CPLResourceTransferTask
{
    CPLProxyLibraryManager *_proxyLibraryManager;
}

@property(retain, nonatomic) CPLProxyLibraryManager *proxyLibraryManager; // @synthesize proxyLibraryManager=_proxyLibraryManager;
- (void).cxx_destruct;
- (void)cancelTask;

@end

@interface CPLPullChangeSession : CPLChangeSession <CPLAbstractObject>
{
}

- (void)acknowledgeChangeBatch:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)getChangeBatchWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_sessionLogDomain;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLPullFromTransportTask : CPLEngineSyncTask
{
    NSObject<OS_dispatch_queue> *_queue;
    NSData *_initialSyncAnchor;
    id <CPLEngineTransportDownloadBatchTask> _downloadTask;
    NSString *_clientCacheIdentifier;
    _Bool _didBeginTransientRepository;
    _Bool _resetSyncAnchor;
    _Bool _didGetSomeChanges;
}

@property(readonly, nonatomic) _Bool didGetSomeChanges; // @synthesize didGetSomeChanges=_didGetSomeChanges;
- (void).cxx_destruct;
- (id)taskIdentifier;
- (void)cancel;
- (void)resume;
- (void)pause;
- (void)launch;
- (void)_launch;
- (void)_handleNewBatch:(id)arg1 newSyncAnchor:(id)arg2;
- (void)_finishTaskWithErrorAndCleanupIfNecessary:(id)arg1;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(retain) id <CPLPullFromTransportTaskDelegate> delegate;

@end

@interface CPLPushChangeSession : CPLChangeSession <CPLAbstractObject>
{
}

- (void)commitChangeBatch:(id)arg1 withUnderlyingCompletionHandler:(CDUnknownBlockType)arg2;
- (void)commitChangeBatch:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)_sessionLogDomain;
- (id)initWithLibraryManager:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) CPLPlatformObject *platformObject;
@property(readonly) Class superclass;

@end

@interface CPLPushToTransportTask : CPLEngineSyncTask
{
    NSObject<OS_dispatch_queue> *_lock;
    CPLChangeBatch *_uploadBatch;
    NSArray *_uploadResourceTasks;
    NSArray *_staleOrUnavailableResources;
    NSArray *_resourcesForBackgroundUpload;
    id <CPLEngineTransportUploadBatchTask> _uploadTask;
    unsigned long long _lastReportedProgress;
    unsigned long long _countOfPushedBatches;
    NSString *_clientCacheIdentifier;
}

- (void).cxx_destruct;
- (id)taskIdentifier;
- (void)_pushTaskDidFinishWithError:(id)arg1;
- (void)cancel;
- (void)resume;
- (void)pause;
- (void)launch;
- (void)_doOneIteration;
- (_Bool)_discardResourcesToUploadFromBatch:(id)arg1 error:(id *)arg2;
- (_Bool)_markUploadedTasksDidFinishWithError:(id)arg1 error:(id *)arg2;
- (_Bool)_prepareResourcesToUploadInBatch:(id)arg1 error:(id *)arg2;
- (void)_popNextBatchAndContinue;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(retain) id <CPLPushToTransportTaskDelegate> delegate;

@end

@interface CPLRemoveCloudLibraryTask : CPLEngineSyncEmergencyTask
{
    id <CPLEngineTransportRemoveLibraryTask> _removeLibraryTask;
}

+ (_Bool)shouldCoalesceTasks;
+ (id)taskIdentifier;
- (void).cxx_destruct;
- (void)cancel;
- (void)launch;
- (unsigned long long)priority;
- (_Bool)shouldStopSyncSession;

@end

@interface CPLResource : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _generateDerivative;
    CPLResourceIdentity *_identity;
    NSString *_itemIdentifier;
    unsigned long long _resourceType;
}

+ (unsigned long long)maxPixelSizeForResourceType:(unsigned long long)arg1;
+ (id)shortDescriptionForResourceType:(unsigned long long)arg1;
+ (id)descriptionForResourceType:(unsigned long long)arg1;
+ (id)normalizedResourcesFromResources:(id)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool generateDerivative; // @synthesize generateDerivative=_generateDerivative;
@property(nonatomic) unsigned long long resourceType; // @synthesize resourceType=_resourceType;
@property(copy, nonatomic) NSString *itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
@property(retain, nonatomic) CPLResourceIdentity *identity; // @synthesize identity=_identity;
- (void).cxx_destruct;
- (id)bestFileNameForResource;
- (unsigned long long)maxPixelSizeForPhotoResource;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithResourceIdentity:(id)arg1 itemIdentifier:(id)arg2 resourceType:(unsigned long long)arg3;
- (id)initWithResourceIdentity:(id)arg1 itemIdentifier:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CPLResourceIdentity : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _available;
    NSURL *_fileURL;
    NSString *_fingerPrint;
    unsigned long long _fileSize;
    NSString *_fileUTI;
    struct CGSize _imageDimensions;
}

+ (id)identityForStorageName:(id)arg1;
+ (id)storageNameForFingerPrint:(id)arg1 fileUTI:(id)arg2 bucket:(id *)arg3;
+ (id)extensionForFileUTI:(id)arg1;
+ (id)fileUTIForExtension:(id)arg1;
+ (id)identityFromStoredIdentity:(id)arg1;
+ (id)alloc;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)fingerPrintForFD:(int)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (id)fingerPrintForData:(id)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (id)fingerPrintForFileAtURL:(id)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (Class)_identityImplementationClass;
+ (Class)resourceIdentityImplementation;
+ (void)setResourceIdentityImplementation:(Class)arg1;
+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *fileUTI; // @synthesize fileUTI=_fileUTI;
@property(nonatomic, getter=isAvailable) _Bool available; // @synthesize available=_available;
@property(nonatomic) struct CGSize imageDimensions; // @synthesize imageDimensions=_imageDimensions;
@property(nonatomic) unsigned long long fileSize; // @synthesize fileSize=_fileSize;
@property(copy, nonatomic) NSString *fingerPrint; // @synthesize fingerPrint=_fingerPrint;
@property(copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void).cxx_destruct;
- (id)identityForStorage;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithFileURL:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CPLResourceIdentityImplementation : CPLResourceIdentity
{
}

+ (id)identityForStorageName:(id)arg1;
+ (id)storageNameForFingerPrint:(id)arg1 fileUTI:(id)arg2 bucket:(id *)arg3;
+ (id)extensionForFileUTI:(id)arg1;
+ (id)fileUTIForExtension:(id)arg1;
+ (id)identityFromStoredIdentity:(id)arg1;
+ (id)fingerPrintForFD:(int)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (id)fingerPrintForData:(id)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (id)fingerPrintForFileAtURL:(id)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (id)_fingerPrintForFD:(int)arg1 typeIdentifier:(id)arg2 error:(id *)arg3;
+ (void)setMMCImplementationForPlatform:(id)arg1;
- (id)identityForStorage;

@end

@interface CPLStatistics : NSObject <CPLEngineComponent>
{
    NSURL *_logfileURL;
    struct {
        long long period;
        CDStruct_e6f69ac3 upstream;
        CDStruct_e6f69ac3 downstream;
        struct {
            long long setupErrors;
            long long pushErrors;
            long long pullErrors;
            long long managementErrors;
        } syncerrors;
    } _currentSnapshot;
    long long _lastServedAggregationWindow;
    NSObject<OS_dispatch_queue> *_workQueue;
    NSObject<OS_dispatch_queue> *_persistanceQueue;
    _Bool _closed;
    _Bool _statisticsEnabled;
}

@property _Bool statisticsEnabled; // @synthesize statisticsEnabled=_statisticsEnabled;
- (void).cxx_destruct;
- (id)componentName;
- (void)markAggregationWindowAsDirtyNow:(_Bool)arg1;
- (void)recordDownloadedResource:(id)arg1 withPotentialError:(id)arg2;
- (void)recordDownloadingResource:(id)arg1 progress:(float)arg2;
- (void)recordDownloadingResource:(id)arg1;
- (void)recordUploadedResource:(id)arg1 withPotentialError:(id)arg2;
- (void)recordUploadingResource:(id)arg1 progress:(float)arg2;
- (void)recordUploadingResource:(id)arg1;
- (void)recordDownloadedBatchWithError:(id)arg1;
- (void)recordUploadedBatchWithError:(id)arg1;
- (void)recordSyncErrorForState:(unsigned long long)arg1;
- (CDUnknownBlockType)attachToUploadRecordSaveHandler:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)attachToDownloadCompletionHandler:(CDUnknownBlockType)arg1 forResource:(id)arg2;
- (CDUnknownBlockType)attachToDownloadProgressHandler:(CDUnknownBlockType)arg1 forResource:(id)arg2;
- (CDUnknownBlockType)attachToDownloadStartHandler:(CDUnknownBlockType)arg1 forResource:(id)arg2;
- (id)statisticsSnapshotSinceDate:(id)arg1;
- (void)closeAndDeactivate:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)openWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initWithEngineLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPLStatus : NSObject
{
    NSURL *_statusFileURL;
    NSMutableDictionary *_status;
    NSObject<OS_dispatch_queue> *_lock;
    id <CPLStatusDelegate> _delegate;
}

+ (id)statusForSharedLibrary;
@property(nonatomic) __weak id <CPLStatusDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)statusDescription;
- (void)_statusDidChange;
@property(nonatomic) _Bool iCloudLibraryExists;
@property(nonatomic) _Bool iCloudLibraryHasBeenWiped;
@property(nonatomic) NSDate *exitDeleteTime;
@property(nonatomic) _Bool isExceedingQuota;
@property(nonatomic) _Bool hasChangesToProcess;
@property(nonatomic) NSDate *lastSuccessfulSyncDate;
- (void)refetchFromDisk;
- (void)_save;
- (void)_loadIfNecessary;
- (id)initWithClientLibraryBaseURL:(id)arg1;

@end

@interface CPLSyncIndicator : NSObject
{
}

+ (void)setForeground:(_Bool)arg1;
+ (void)hideSyncIndicator;
+ (void)showSyncIndicator;
+ (void)_reallyHideSyncIndicator;
+ (void)_reallyShowSyncIndicator;
+ (void)_doProtected:(CDUnknownBlockType)arg1;

@end

@interface CPLTransaction : NSObject
{
}

+ (unsigned long long)transactionCount;
+ (id)transactions;
+ (void)endTransactionWithReason:(id)arg1;
+ (void)beginTransactionWithReason:(id)arg1 keepPower:(_Bool)arg2;

@end

@interface CPTAppUtils : NSObject
{
}

+ (struct CGSize)dimensionsOfImageAtPath:(id)arg1 outFileSize:(unsigned long long *)arg2;
+ (void)resizeImageAtPath:(id)arg1 toPath:(id)arg2 maxPixelSize:(unsigned long long)arg3;
+ (_Bool)reCreatePath:(id)arg1;
+ (_Bool)createPathIfNeeded:(id)arg1;

@end

@interface NSArray (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSArray (CPLCopying)
- (id)cplDeepCopy;
@end

@interface NSData (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSData (CPLSyncAnchorDescription)
- (id)cplSyncAnchorDescription;
- (id)cplSyncAnchorSimpleDescription;
@end

@interface NSDate (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSDictionary (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSError (CPLAdditions)
- (id)cplShortDomainDescription;
- (id)cplUnderlyingPOSIXError;
- (_Bool)isCPLOperationCancelledError;
- (_Bool)isCPLError;
- (_Bool)isCPLErrorWithCode:(long long)arg1;
@end

@interface NSFileManager (CPLAdditions)
- (_Bool)cplFileExistsAtURL:(id)arg1;
- (_Bool)cplIsHardLinkNotPossibleError:(id)arg1;
- (_Bool)cplIsFileDoesNotExistError:(id)arg1;
- (_Bool)cplIsFileExistsError:(id)arg1;
- (_Bool)cplMoveItemAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
- (_Bool)cplCopyItemAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
- (_Bool)cplLinkItemAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
@end

@interface NSKeyedUnarchiver (PLKeyedUnarchiverAdditions)
+ (id)cpl_safeUnarchiveObjectWithFile:(id)arg1;
+ (id)cpl_safeUnarchiveObjectWithData:(id)arg1;
- (id)cpl_safeInitForReadingWithData:(id)arg1;
@end

@interface NSNumber (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSObject (CPLArchiver)
+ (Class)classForStoredClassName:(id)arg1 forCPLArchiver:(id)arg2;
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
- (id)storedClassNameForCPLArchiver:(id)arg1;
@end

@interface NSObject (CPLCodingProxy)
+ (id)cplAllPropertyNames;
+ (void)cplDumpProperties;
+ (id)_cplPropertyAttributeMap;
+ (void)_addPropertyAttributeMapToPropertyMapLocked:(id)arg1;
+ (_Bool)cplShouldIgnorePropertyForCoding:(id)arg1;
+ (id)cplAdditionalSecureClassesForProperty:(id)arg1;
- (unsigned long long)cplSpecialHash;
- (_Bool)cplSpecialIsEqual:(id)arg1;
- (id)cplFullDescription;
- (void)cplCopyProperties:(id)arg1 fromObject:(id)arg2;
- (void)cplCopyPropertiesFromObject:(id)arg1;
- (void)_cplCopyProperties:(id)arg1 fromOtherObject:(id)arg2;
- (unsigned long long)cplHash;
- (_Bool)cplProperties:(id)arg1 areEqualToPropertiesOf:(id)arg2;
- (_Bool)cplProperties:(id)arg1 areEqualToPropertiesOf:(id)arg2 differingProperty:(id *)arg3;
- (_Bool)cplIsEqual:(id)arg1;
- (void)cplDecodePropertiesFromCoder:(id)arg1;
- (void)cplEncodePropertiesWithCoder:(id)arg1;
- (id)cplDeepCopy;
@end

@interface NSString (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSURL (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSUUID (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface NSValue (CPLArchiver)
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
@end

@interface _CPLEngineStoreBatchedTransaction : NSObject
{
    CDUnknownBlockType _block;
    CDUnknownBlockType _completionHandler;
}

@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;

@end

