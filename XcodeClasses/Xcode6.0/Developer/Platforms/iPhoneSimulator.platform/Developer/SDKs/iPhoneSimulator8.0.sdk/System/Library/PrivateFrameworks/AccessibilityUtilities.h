//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AXLogColorTheme {
    long long errorColor;
    long long warningColor;
    long long infoColor;
    long long debugColor;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct NSString {
    Class _field1;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned int _field1[2];
} CDStruct_52eb0d21;

typedef struct {
    unsigned int val[8];
} CDStruct_4c969caf;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    float _field4;
    float _field5;
    struct CGPoint _field6;
    unsigned int _field7;
    void *_field8;
} CDStruct_723b0d29;

typedef struct {
    int _field1;
    int _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    unsigned int _field5;
    unsigned long long _field6;
    void *_field7;
    int _field8;
    int _field9;
    unsigned int _field10;
    unsigned char _field11[0];
} CDStruct_7f3c0925;

typedef struct {
    int _field1;
    unsigned short _field2;
    unsigned short _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    CDStruct_723b0d29 _field13[0];
} CDStruct_f2c5c900;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities
// UUID: 3430D67F-0C36-3EF3-A911-6E892C3A9050
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1541.4.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AVSpeechSynthesizerDelegate <NSObject>

@optional
- (void)speechSynthesizer:(AVSpeechSynthesizer *)arg1 willSpeakRangeOfSpeechString:(struct _NSRange)arg2 utterance:(AVSpeechUtterance *)arg3;
- (void)speechSynthesizer:(AVSpeechSynthesizer *)arg1 didCancelSpeechUtterance:(AVSpeechUtterance *)arg2;
- (void)speechSynthesizer:(AVSpeechSynthesizer *)arg1 didContinueSpeechUtterance:(AVSpeechUtterance *)arg2;
- (void)speechSynthesizer:(AVSpeechSynthesizer *)arg1 didPauseSpeechUtterance:(AVSpeechUtterance *)arg2;
- (void)speechSynthesizer:(AVSpeechSynthesizer *)arg1 didFinishSpeechUtterance:(AVSpeechUtterance *)arg2;
- (void)speechSynthesizer:(AVSpeechSynthesizer *)arg1 didStartSpeechUtterance:(AVSpeechUtterance *)arg2;
@end

@protocol AXTimer <NSObject>
@property(readonly, nonatomic, getter=isPending) _Bool pending;
@property(readonly, nonatomic, getter=isActive) _Bool active;
- (void)cancel;
- (void)afterDelay:(double)arg1 processBlock:(void (^)(void))arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface AVSpeechUtterance (Private)
@property(nonatomic) _Bool processEmoticons; // @dynamic processEmoticons;
@property(nonatomic) _Bool useCompactVoice; // @dynamic useCompactVoice;
@end

@interface AXAccessQueue : NSObject
{
    NSString *_threadLocalStorageKey;
    NSObject<OS_dispatch_queue> *_concurrentQueue;
    unsigned long long _specialBehaviors;
}

+ (id)backgroundAccessQueue;
+ (id)mainAccessQueue;
@property(nonatomic) unsigned long long specialBehaviors; // @synthesize specialBehaviors=_specialBehaviors;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *concurrentQueue; // @synthesize concurrentQueue=_concurrentQueue;
@property(copy, nonatomic) NSString *threadLocalStorageKey; // @synthesize threadLocalStorageKey=_threadLocalStorageKey;
- (void)_performBlock:(CDUnknownBlockType)arg1 withDispatchFunction:(CDUnknownFunctionPointerType)arg2 synchronously:(_Bool)arg3 accessQueueContext:(unsigned long long)arg4;
- (unsigned long long)_accessQueueContextInCurrentExecutionThread;
- (id)description;
- (_Bool)canOnlyReadInCurrentExecutionThread;
- (_Bool)canWriteInCurrentExecutionThread;
- (_Bool)canReadInCurrentExecutionThread;
- (void)afterDelay:(double)arg1 processWritingBlock:(CDUnknownBlockType)arg2;
- (void)afterDelay:(double)arg1 processReadingBlock:(CDUnknownBlockType)arg2;
- (void)performAsynchronousWritingBlock:(CDUnknownBlockType)arg1;
- (void)performAsynchronousReadingBlock:(CDUnknownBlockType)arg1;
- (void)performSynchronousWritingBlock:(CDUnknownBlockType)arg1;
- (void)performSynchronousReadingBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool behavesWithoutErrorReporting;
@property(readonly, nonatomic) _Bool behavesAsMainQueue;
@property(readonly, copy, nonatomic) NSString *label;
- (void)dealloc;
- (id)initWithParentClass:(Class)arg1 description:(id)arg2 appendUUIDToLabel:(_Bool)arg3;
- (id)_initWithLabel:(id)arg1 appendUUIDToLabel:(_Bool)arg2 specialBehaviors:(unsigned long long)arg3;
- (id)initWithLabel:(id)arg1 appendUUIDToLabel:(_Bool)arg2;
- (id)init;

@end

@interface AXAssertion : NSObject
{
    NSString *_assertionType;
    NSString *_identifier;
}

+ (id)assertionWithType:(id)arg1 identifier:(id)arg2;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain, nonatomic) NSString *assertionType; // @synthesize assertionType=_assertionType;
- (id)description;
- (void)_notifyServerAssertionWasRelinquished;
- (void)_notifyServerAssertionWasAcquired;
- (_Bool)_hasValidAssertionType;
- (void)dealloc;
- (id)initWithType:(id)arg1 identifier:(id)arg2;

@end

@interface AXServer : NSObject
{
    _Bool _shouldRegisterClientCallbackSourceOnMainRunloop;
    AXIPCServer *_server;
    AXIPCClient *_client;
    NSString *_serverIdentifier;
}

@property(nonatomic) _Bool shouldRegisterClientCallbackSourceOnMainRunloop; // @synthesize shouldRegisterClientCallbackSourceOnMainRunloop=_shouldRegisterClientCallbackSourceOnMainRunloop;
@property(copy, nonatomic) NSString *serverIdentifier; // @synthesize serverIdentifier=_serverIdentifier;
@property(retain, nonatomic) AXIPCClient *client; // @synthesize client=_client;
@property(retain, nonatomic) AXIPCServer *server; // @synthesize server=_server;
- (id)_serviceName;
- (void)_connectServerIfNecessary;
- (_Bool)_connectIfNecessary;
- (void)_willClearServer;
- (void)_didConnectToServer;
- (void)_wasDisconnectedFromClient;
- (void)_didConnectToClient;
- (void)relinquishAssertionWithType:(id)arg1 identifier:(id)arg2;
- (void)acquireAssertionWithType:(id)arg1 identifier:(id)arg2;
- (id)sendMessage:(id)arg1;
- (id)sendSimpleMessageWithObjectResult:(id)arg1;
- (_Bool)sendSimpleMessageWithResult:(id)arg1;
- (void)sendSimpleMessage:(id)arg1;
- (void)dealloc;

@end

@interface AXBackBoardServer : AXServer
{
    _Bool _overrideGestureRecognition;
    NSMutableArray *_eventListeners;
}

+ (id)server;
- (void)jetsamThirdPartyApps;
- (void)toggleGuidedAccess;
- (_Bool)isGuidedAccessSelfLockedToApp:(id)arg1;
- (_Bool)requestGuidedAccessSession:(_Bool)arg1 appID:(id)arg2;
- (unsigned long long)guidedAccessAvailability;
- (_Bool)isGuidedAccessActive;
- (id)_springboardParametersForGuidedAccessAvailability;
- (void)setAccessibilityPreferenceAsMobile:(id)arg1 value:(id)arg2 notification:(id)arg3;
- (void)setHearingAidControlIsVisible:(_Bool)arg1;
- (void)removeEventListener:(id)arg1;
- (void)registerEventListener:(CDUnknownBlockType)arg1 withIdentifierCallback:(CDUnknownBlockType)arg2;
- (void)setVoiceOverItemChooserVisible:(_Bool)arg1;
- (void)wakeUpDeviceIfNecessary;
- (void)userEventOccurred;
- (struct CGRect)convertFrame:(struct CGRect)arg1 forContextId:(unsigned int)arg2;
- (void)postEvent:(id)arg1 systemEvent:(_Bool)arg2;
- (void)postEvent:(id)arg1 afterNamedTap:(id)arg2 includeTaps:(id)arg3;
@property(nonatomic) _Bool invertColorsEnabled; // @dynamic invertColorsEnabled;
- (void)registerAssistiveTouchPID:(int)arg1;
@property(nonatomic) _Bool inPreboardMode;
- (id)backboardServiceInstance;
- (_Bool)_shouldDispatchLocally;
- (void)registerAccessibilityUIServicePID:(int)arg1;
- (void)registerSiriViewServicePID:(int)arg1;
- (void)setLockScreenDimTimerEnabled:(_Bool)arg1;
- (void)adjustSystemZoom:(int)arg1;
- (void)registerGestureConflictWithZoom:(id)arg1;
- (void)_willClearServer;
- (void)_didConnectToServer;
- (id)_handleEventListener:(id)arg1;
- (id)_serviceName;
- (void)dealloc;
- (id)init;

@end

@interface AXBinaryMonitor : NSObject
{
    NSMutableDictionary *_bundleHandlerMap;
    NSMutableDictionary *_frameworkHandlerMap;
    NSMutableDictionary *_dylibHandlerMap;
}

+ (id)sharedInstance;
+ (void)initialize;
@property(retain, nonatomic) NSMutableDictionary *dylibHandlerMap; // @synthesize dylibHandlerMap=_dylibHandlerMap;
@property(retain, nonatomic) NSMutableDictionary *frameworkHandlerMap; // @synthesize frameworkHandlerMap=_frameworkHandlerMap;
@property(retain, nonatomic) NSMutableDictionary *bundleHandlerMap; // @synthesize bundleHandlerMap=_bundleHandlerMap;
- (void)_handleLoadedImagePath:(id)arg1;
- (id)_dylibNameForImage:(id)arg1;
- (id)_bundleNameForImage:(id)arg1;
- (id)_frameworkNameForImage:(id)arg1;
- (_Bool)_loadImageIsDylib:(id)arg1;
- (_Bool)_loadImageIsBundle:(id)arg1;
- (_Bool)_loadImageIsFramework:(id)arg1;
- (void)_addHandler:(CDUnknownBlockType)arg1 withName:(id)arg2 toMap:(id *)arg3;
- (void)addHandler:(CDUnknownBlockType)arg1 forDylib:(id)arg2;
- (void)addHandler:(CDUnknownBlockType)arg1 forFramework:(id)arg2;
- (void)addHandler:(CDUnknownBlockType)arg1 forBundleName:(id)arg2;
- (void)addHandler:(CDUnknownBlockType)arg1 forBundleID:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface AXDialectMap : NSObject
{
    AXLangMap *_langMap;
    NSString *_voiceName;
    NSLocale *_locale;
    NSString *_specificLanguageID;
    NSCharacterSet *_speakableCharacters;
    NSCharacterSet *_secondaryLanguageRange;
}

@property(retain, nonatomic) NSCharacterSet *secondaryLanguageRange; // @synthesize secondaryLanguageRange=_secondaryLanguageRange;
@property(retain, nonatomic) NSCharacterSet *speakableCharacters; // @synthesize speakableCharacters=_speakableCharacters;
@property(copy, nonatomic) NSString *specificLanguageID; // @synthesize specificLanguageID=_specificLanguageID;
@property(retain, nonatomic) NSLocale *locale; // @synthesize locale=_locale;
@property(copy, nonatomic) NSString *voiceName; // @synthesize voiceName=_voiceName;
@property(nonatomic) AXLangMap *langMap; // @synthesize langMap=_langMap;
- (_Bool)canSpeakString:(id)arg1;
- (_Bool)canSpeakLongCharacter:(unsigned int)arg1;
- (_Bool)canSpeakCharacter:(unsigned short)arg1;
- (_Bool)isDialectSecondaryForCharacter:(unsigned short)arg1;
@property(readonly, nonatomic) NSString *languageNameAndLocaleInNativeLocale;
@property(readonly, nonatomic) NSString *localeNameInCurrentLocale;
@property(readonly, nonatomic) NSString *languageNameAndLocaleInCurrentLocale;
@property(readonly, nonatomic) NSString *languageNameInNativeLocale;
@property(readonly, nonatomic) NSString *languageNameInCurrentLocale;
@property(readonly, nonatomic) NSString *regionID;
@property(readonly, nonatomic) AXLanguageManager *langManager;
- (id)debugDescription;
- (id)basicDescription;
- (id)description;
- (void)dealloc;
- (id)initWithLocale:(id)arg1 voiceName:(id)arg2 specificLanguageID:(id)arg3 speakableCharacters:(id)arg4 secondaryLanguageRange:(id)arg5;

@end

@interface AXDispatchTimer : NSObject <AXTimer>
{
    _Bool _active;
    _Bool _pending;
    _Bool _cancelled;
    _Bool _automaticallyCancelPendingBlockUponSchedulingNewBlock;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    NSObject<OS_dispatch_source> *_dispatchTimer;
}

@property(retain, nonatomic) NSObject<OS_dispatch_source> *dispatchTimer; // @synthesize dispatchTimer=_dispatchTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(nonatomic) _Bool automaticallyCancelPendingBlockUponSchedulingNewBlock; // @synthesize automaticallyCancelPendingBlockUponSchedulingNewBlock=_automaticallyCancelPendingBlockUponSchedulingNewBlock;
@property(nonatomic, getter=isCancelled) _Bool cancelled; // @synthesize cancelled=_cancelled;
@property(nonatomic, getter=isPending) _Bool pending; // @synthesize pending=_pending;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
- (void)cancel;
- (void)_reallyCancel;
- (void)afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2 cancelBlock:(CDUnknownBlockType)arg3;
- (void)afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithTargetSerialQueue:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXDisplayLinkManager : NSObject
{
    _Bool _hasUpdatedTargetActions;
    _Bool _handlingDisplayRefresh;
    CADisplayLink *_storedDisplayLink;
    NSMutableSet *_activeTargetActions;
    NSMutableSet *_updatedTargetActions;
    unsigned long long _warmUpModeRequirementsCount;
}

+ (void)_releaseCurrentDisplayLinkManager;
+ (id)currentDisplayLinkManager;
@property(nonatomic) unsigned long long warmUpModeRequirementsCount; // @synthesize warmUpModeRequirementsCount=_warmUpModeRequirementsCount;
@property(nonatomic, getter=isHandlingDisplayRefresh) _Bool handlingDisplayRefresh; // @synthesize handlingDisplayRefresh=_handlingDisplayRefresh;
@property(nonatomic) _Bool hasUpdatedTargetActions; // @synthesize hasUpdatedTargetActions=_hasUpdatedTargetActions;
@property(retain, nonatomic) NSMutableSet *updatedTargetActions; // @synthesize updatedTargetActions=_updatedTargetActions;
@property(retain, nonatomic) NSMutableSet *activeTargetActions; // @synthesize activeTargetActions=_activeTargetActions;
@property(retain, nonatomic) CADisplayLink *storedDisplayLink; // @synthesize storedDisplayLink=_storedDisplayLink;
- (void)_displayDidRefresh:(id)arg1;
- (void)endRequiringWarmUpMode;
- (void)beginRequiringWarmUpMode;
@property(readonly, nonatomic, getter=isWarmUpModeEnabled) _Bool warmUpModeEnabled;
- (void)_didRemoveLastTargetAction;
- (void)_didAddFirstTargetAction;
- (id)_prepareUpdatedTargetActionsForModification;
- (void)removeTarget:(id)arg1 selector:(SEL)arg2;
- (void)addTarget:(id)arg1 selector:(SEL)arg2 frameInterval:(unsigned long long)arg3;
- (void)addTarget:(id)arg1 selector:(SEL)arg2;
@property(retain, nonatomic) CADisplayLink *displayLink;
@property(readonly, nonatomic) unsigned long long frameInterval;
@property(readonly, nonatomic) double timestamp;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic, getter=isPaused) _Bool paused;
- (void)dealloc;
- (id)init;

@end

@interface AXDisplayLinkManagerTargetAction : NSObject
{
    id _target;
    SEL _actionSelector;
    unsigned long long _frameInterval;
    unsigned long long _displayDidRefreshCount;
}

@property(nonatomic) unsigned long long displayDidRefreshCount; // @synthesize displayDidRefreshCount=_displayDidRefreshCount;
@property(nonatomic) unsigned long long frameInterval; // @synthesize frameInterval=_frameInterval;
@property(nonatomic) SEL actionSelector; // @synthesize actionSelector=_actionSelector;
@property(retain, nonatomic) id target; // @synthesize target=_target;
- (void)displayDidRefresh:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 actionSelector:(SEL)arg2 frameInterval:(unsigned long long)arg3;
- (id)initWithTarget:(id)arg1 actionSelector:(SEL)arg2;

@end

@interface AXEventHandInfoRepresentation : NSObject <NSSecureCoding, NSCopying>
{
    unsigned char _systemGesturePossible;
    unsigned char _swipe;
    unsigned short _initialFingerCount;
    unsigned short _currentFingerCount;
    unsigned int _eventType;
    unsigned int _handIdentity;
    unsigned int _handIndex;
    unsigned int _handEventMask;
    NSArray *_paths;
    struct CGPoint _handPosition;
}

+ (id)representationWithHandInfo:(CDStruct_f2c5c900 *)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned char swipe; // @synthesize swipe=_swipe;
@property(nonatomic) unsigned int handEventMask; // @synthesize handEventMask=_handEventMask;
@property(nonatomic) struct CGPoint handPosition; // @synthesize handPosition=_handPosition;
@property(nonatomic) unsigned int handIndex; // @synthesize handIndex=_handIndex;
@property(nonatomic) unsigned int handIdentity; // @synthesize handIdentity=_handIdentity;
@property(nonatomic) unsigned char systemGesturePossible; // @synthesize systemGesturePossible=_systemGesturePossible;
@property(retain, nonatomic) NSArray *paths; // @synthesize paths=_paths;
@property(nonatomic) unsigned short currentFingerCount; // @synthesize currentFingerCount=_currentFingerCount;
@property(nonatomic) unsigned short initialFingerCount; // @synthesize initialFingerCount=_initialFingerCount;
@property(nonatomic) unsigned int eventType; // @synthesize eventType=_eventType;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)writeToHandInfo:(CDStruct_f2c5c900 *)arg1;
- (unsigned long long)length;

@end

@interface AXEventKeyInfoRepresentation : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _keyDown;
    unsigned short _keyCode;
    unsigned int _modifierState;
    NSString *_unmodifiedInput;
    NSString *_modifiedInput;
    NSString *_shiftModifiedInput;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned int modifierState; // @synthesize modifierState=_modifierState;
@property(retain, nonatomic) NSString *shiftModifiedInput; // @synthesize shiftModifiedInput=_shiftModifiedInput;
@property(retain, nonatomic) NSString *modifiedInput; // @synthesize modifiedInput=_modifiedInput;
@property(retain, nonatomic) NSString *unmodifiedInput; // @synthesize unmodifiedInput=_unmodifiedInput;
@property(nonatomic) _Bool keyDown; // @synthesize keyDown=_keyDown;
@property(nonatomic) unsigned short keyCode; // @synthesize keyCode=_keyCode;
- (void)translateKeycode;
- (id)_hardwareKeyboardLayout;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface AXEventListenerContainer : NSObject
{
    CDUnknownBlockType handler;
    NSString *identifier;
}

@property(retain, nonatomic) NSString *identifier; // @synthesize identifier;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler;

@end

@interface AXEventPathInfoRepresentation : NSObject <NSSecureCoding, NSCopying>
{
    unsigned char _pathIndex;
    unsigned char _pathIdentity;
    unsigned char _pathProximity;
    unsigned int _pathWindowContextID;
    float _pathPressure;
    float _pathMajorRadius;
    float _pathMinorRadius;
    float _pathTwist;
    float _pathQuality;
    float _pathDensity;
    unsigned int _pathEventMask;
    void *_pathWindow;
    struct CGPoint _pathLocation;
}

+ (id)representationWithPathInfo:(CDStruct_723b0d29 *)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) void *pathWindow; // @synthesize pathWindow=_pathWindow;
@property(nonatomic) unsigned int pathEventMask; // @synthesize pathEventMask=_pathEventMask;
@property(nonatomic) float pathDensity; // @synthesize pathDensity=_pathDensity;
@property(nonatomic) float pathQuality; // @synthesize pathQuality=_pathQuality;
@property(nonatomic) float pathTwist; // @synthesize pathTwist=_pathTwist;
@property(nonatomic) float pathMinorRadius; // @synthesize pathMinorRadius=_pathMinorRadius;
@property(nonatomic) float pathMajorRadius; // @synthesize pathMajorRadius=_pathMajorRadius;
@property(nonatomic) float pathPressure; // @synthesize pathPressure=_pathPressure;
@property(nonatomic) unsigned char pathProximity; // @synthesize pathProximity=_pathProximity;
@property(nonatomic) unsigned int pathWindowContextID; // @synthesize pathWindowContextID=_pathWindowContextID;
@property(nonatomic) struct CGPoint pathLocation; // @synthesize pathLocation=_pathLocation;
@property(nonatomic) unsigned char pathIdentity; // @synthesize pathIdentity=_pathIdentity;
@property(nonatomic) unsigned char pathIndex; // @synthesize pathIndex=_pathIndex;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)writeToPathInfo:(CDStruct_723b0d29 *)arg1;

@end

@interface AXEventProcessor : NSObject
{
    _Bool _shouldRunHIDReceiveThreadRunloop;
    _Bool _shouldNotifyUserEventOccurred;
    _Bool _ignoreAllHIDEvents;
    _Bool _ignoreAllSystemEvents;
    _Bool _handlingHIDEvents;
    _Bool _handlingSystemEvents;
    int _HIDEventTapPriority;
    int _systemEventTapPriority;
    NSString *_HIDEventTapIdentifier;
    NSThread *_HIDEventReceiveThread;
    CDUnknownBlockType _HIDEventHandler;
    NSString *_systemEventTapIdentifier;
    CDUnknownBlockType _systemEventHandler;
    NSMutableArray *_hidActualEventTapEnabledReasons;
    NSMutableArray *_systemActualEventTapEnabledReasons;
}

@property(retain, nonatomic) NSMutableArray *systemActualEventTapEnabledReasons; // @synthesize systemActualEventTapEnabledReasons=_systemActualEventTapEnabledReasons;
@property(nonatomic, getter=isHandlingSystemEvents) _Bool handlingSystemEvents; // @synthesize handlingSystemEvents=_handlingSystemEvents;
@property(retain, nonatomic) NSMutableArray *hidActualEventTapEnabledReasons; // @synthesize hidActualEventTapEnabledReasons=_hidActualEventTapEnabledReasons;
@property(nonatomic, getter=isHandlingHIDEvents) _Bool handlingHIDEvents; // @synthesize handlingHIDEvents=_handlingHIDEvents;
@property(nonatomic) _Bool ignoreAllSystemEvents; // @synthesize ignoreAllSystemEvents=_ignoreAllSystemEvents;
@property(copy, nonatomic) CDUnknownBlockType systemEventHandler; // @synthesize systemEventHandler=_systemEventHandler;
@property(nonatomic) int systemEventTapPriority; // @synthesize systemEventTapPriority=_systemEventTapPriority;
@property(retain, nonatomic) NSString *systemEventTapIdentifier; // @synthesize systemEventTapIdentifier=_systemEventTapIdentifier;
@property(nonatomic) _Bool ignoreAllHIDEvents; // @synthesize ignoreAllHIDEvents=_ignoreAllHIDEvents;
@property(copy, nonatomic) CDUnknownBlockType HIDEventHandler; // @synthesize HIDEventHandler=_HIDEventHandler;
@property(retain, nonatomic) NSThread *HIDEventReceiveThread; // @synthesize HIDEventReceiveThread=_HIDEventReceiveThread;
@property(nonatomic) int HIDEventTapPriority; // @synthesize HIDEventTapPriority=_HIDEventTapPriority;
@property(retain, nonatomic) NSString *HIDEventTapIdentifier; // @synthesize HIDEventTapIdentifier=_HIDEventTapIdentifier;
@property(nonatomic) _Bool shouldNotifyUserEventOccurred; // @synthesize shouldNotifyUserEventOccurred=_shouldNotifyUserEventOccurred;
- (void)_uninstallSystemEventFilter;
- (void)_installSystemEventFilter;
- (void)_uninstallHIDEventFilter;
- (void)_installHIDEventFilter;
- (void)_runHIDEventReceiveThread;
- (void)restoreSystemEventTapPriorityToDefault;
- (void)raiseSystemEventTapPriorityToMaximum;
- (void)endHandlingSystemEventsForReason:(id)arg1;
- (void)beginHandlingSystemEventsForReason:(id)arg1;
@property(readonly, nonatomic) NSArray *systemEventTapEnabledReasons;
- (void)restoreHIDEventTapPriorityToDefault;
- (void)raiseHIDEventTapPriorityToMaximum;
- (void)endHandlingHIDEventsForReason:(id)arg1;
- (void)beginHandlingHIDEventsForReason:(id)arg1;
@property(readonly, nonatomic) NSArray *hidEventTapEnabledReasons;
- (void)dealloc;
- (id)initWithHIDTapIdentifier:(id)arg1 HIDEventTapPriority:(int)arg2 systemEventTapIdentifier:(id)arg3 systemEventTapPriority:(int)arg4;

@end

@interface AXEventRepresentation : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _isBuiltIn;
    _Bool _isGeneratedEvent;
    unsigned int _type;
    int _subtype;
    int _flags;
    unsigned int _taskPort;
    int _pid;
    unsigned int _contextId;
    unsigned long long _time;
    unsigned long long _senderID;
    AXEventHandInfoRepresentation *_handInfo;
    AXEventKeyInfoRepresentation *_keyInfo;
    NSString *_clientId;
    unsigned long long _HIDTime;
    NSData *_HIDAttributeData;
    unsigned long long _additionalFlags;
    void *_window;
    NSData *_data;
    struct CGPoint _location;
    struct CGPoint _windowLocation;
}

+ (id)touchRepresentationWithHandType:(unsigned int)arg1 location:(struct CGPoint)arg2;
+ (id)buttonRepresentationWithType:(unsigned int)arg1;
+ (id)keyRepresentationWithType:(unsigned int)arg1;
+ (id)representationWithEventRecord:(CDStruct_7f3c0925 *)arg1;
+ (id)representationWithHIDEvent:(struct __IOHIDEvent *)arg1 hidStreamIdentifier:(id)arg2;
+ (id)representationWithLocation:(struct CGPoint)arg1 windowLocation:(struct CGPoint)arg2 handInfo:(id)arg3;
+ (id)_keyboardButtonEvent:(struct __IOHIDEvent *)arg1;
+ (id)_digitizerRepresentation:(struct __IOHIDEvent *)arg1 hidStreamIdentifier:(id)arg2;
+ (id)representationWithType:(unsigned int)arg1 subtype:(int)arg2 time:(unsigned long long)arg3 location:(struct CGPoint)arg4 windowLocation:(struct CGPoint)arg5 handInfo:(id)arg6;
+ (id)representationWithData:(id)arg1;
+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(nonatomic) void *window; // @synthesize window=_window;
@property(nonatomic) _Bool isGeneratedEvent; // @synthesize isGeneratedEvent=_isGeneratedEvent;
@property(nonatomic) _Bool isBuiltIn; // @synthesize isBuiltIn=_isBuiltIn;
@property(nonatomic) unsigned int contextId; // @synthesize contextId=_contextId;
@property(nonatomic) unsigned long long additionalFlags; // @synthesize additionalFlags=_additionalFlags;
@property(retain, nonatomic) NSData *HIDAttributeData; // @synthesize HIDAttributeData=_HIDAttributeData;
@property(nonatomic) unsigned long long HIDTime; // @synthesize HIDTime=_HIDTime;
@property(nonatomic) int pid; // @synthesize pid=_pid;
@property(nonatomic) unsigned int taskPort; // @synthesize taskPort=_taskPort;
@property(retain, nonatomic) NSString *clientId; // @synthesize clientId=_clientId;
@property(retain, nonatomic) AXEventKeyInfoRepresentation *keyInfo; // @synthesize keyInfo=_keyInfo;
@property(retain, nonatomic) AXEventHandInfoRepresentation *handInfo; // @synthesize handInfo=_handInfo;
@property(nonatomic) unsigned long long senderID; // @synthesize senderID=_senderID;
@property(nonatomic) int flags; // @synthesize flags=_flags;
@property(nonatomic) unsigned long long time; // @synthesize time=_time;
@property(nonatomic) struct CGPoint windowLocation; // @synthesize windowLocation=_windowLocation;
@property(nonatomic) struct CGPoint location; // @synthesize location=_location;
@property(nonatomic) int subtype; // @synthesize subtype=_subtype;
@property(nonatomic) unsigned int type; // @synthesize type=_type;
- (id)description;
- (unsigned int)firstPathContextId;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct __GSEvent *)newGSEventRef;
- (CDStruct_7f3c0925 *)newEventRecord;
- (struct __IOHIDEvent *)_newHandHIDEventRef;
- (id)denormalizedEventRepresentation:(_Bool)arg1 descale:(_Bool)arg2;
- (id)fakeTouchScaleEventRepresentation:(_Bool)arg1;
- (id)normalizedEventRepresentation:(_Bool)arg1 scale:(_Bool)arg2;
- (struct __IOHIDEvent *)_newButtonHIDEventRef;
- (struct __IOHIDEvent *)_newKeyboardHIDEventRef;
- (struct __IOHIDEvent *)newHIDEventRef;
- (unsigned int)_contextIDFromHIDEvent:(struct __IOHIDEvent *)arg1;
- (id)dataRepresentation;

@end

@interface AXEventTapManager : NSObject
{
    NSMutableArray *_eventTaps;
    NSMutableArray *_addedEventTapPairs;
    NSMutableSet *_removedEventTapIdentifiers;
    _Bool _isEnumeratingEventTaps;
    _Bool _shouldReorderEventTaps;
    CDUnknownBlockType _installationGSCallback;
    CDUnknownBlockType _installationHIDCallback;
    NSRecursiveLock *_eventTapLock;
    struct __IOHIDEventSystemClient *_ioSystemPostBackClient;
    CDUnknownBlockType _installationEventRepPost;
}

+ (id)sharedManager;
@property(copy, nonatomic) CDUnknownBlockType installationEventRepPost; // @synthesize installationEventRepPost=_installationEventRepPost;
@property(copy, nonatomic) CDUnknownBlockType installationHIDCallback; // @synthesize installationHIDCallback=_installationHIDCallback;
@property(copy, nonatomic) CDUnknownBlockType installationGSCallback; // @synthesize installationGSCallback=_installationGSCallback;
- (void)_removeHIDEventTapFilter:(id)arg1;
- (void)removeEventTap:(id)arg1;
- (id)installEventTap:(CDUnknownBlockType)arg1 identifier:(id)arg2 type:(int)arg3;
- (void)_installSystemEventTap:(id)arg1;
- (void)_installHIDFilter:(id)arg1;
- (void)_installEventTap:(id)arg1;
- (void)_setEventTapPriority:(id)arg1 priority:(int)arg2;
- (void)setEventTapPriority:(id)arg1 priority:(int)arg2;
- (void)_reorderEventTaps;
- (_Bool)_processGSEvent:(CDStruct_7f3c0925 *)arg1;
- (_Bool)_processHIDEvent:(struct __IOHIDEvent *)arg1 taskPort:(unsigned int)arg2 bundleId:(id)arg3;
- (void)sendEvent:(id)arg1 afterTap:(id)arg2 useGSEvent:(_Bool)arg3 namedTaps:(id)arg4;
- (void)sendHIDSystemEvent:(id)arg1 senderID:(unsigned long long)arg2;
- (void)_enumerateEventTapPairsUsingBlock:(CDUnknownBlockType)arg1;
- (id)_copyCurrentEventTapPairs;
- (void)_setHIDEventTapCallback:(void *)arg1;
- (void)_setGSEventTapCallback:(void *)arg1;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface AXEventTapPair : NSObject
{
    int priority;
    int _type;
    CDUnknownBlockType handler;
    NSString *identifier;
    struct __IOHIDEventSystemClient *_systemClient;
}

@property(retain, nonatomic) struct __IOHIDEventSystemClient *systemClient; // @synthesize systemClient=_systemClient;
@property(nonatomic) int type; // @synthesize type=_type;
@property(nonatomic) int priority; // @synthesize priority;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler;
- (id)description;
- (void)dealloc;

@end

@interface AXFileLogger : NSObject
{
    NSString *_filePath;
}

+ (id)defaultFileLogger;
@property(copy, nonatomic) NSString *filePath; // @synthesize filePath=_filePath;
- (void)log:(id)arg1;
- (void)dealloc;
- (id)initWithFilePath:(id)arg1;

@end

@interface AXGestureOverrideHandler : NSObject
{
    CDUnknownBlockType _handler;
    unsigned long long _type;
    NSString *_identifier;
}

@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(nonatomic) unsigned long long type; // @synthesize type=_type;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void)dealloc;

@end

@interface AXIPCClient : NSObject
{
    struct __CFMachPort *_serverPort;
    NSLock *_serverPortLock;
    unsigned int _assignedServerMachPort;
    CDUnknownBlockType _portDeathHandler;
    float _timeout;
    NSString *_clientIdentifier;
    struct __CFRunLoopSource *_clientSource;
    unsigned long long _connectionAttempts;
    _Bool _connected;
    _Bool shouldRegisterCallbackSourceOnMainRunloop;
    _Bool _usesPerPidLookup;
    unsigned int clientCallbackPort;
    int _pid;
    NSString *_serviceName;
    NSMutableArray *_postConnectionTasks;
    AXAccessQueue *_connectionQueue;
    struct __CFRunLoopSource *clientCallbackSource;
    AXAccessQueue *_portDeathAccessQueue;
}

+ (id)allClients;
+ (void)initialize;
@property(retain, nonatomic) AXAccessQueue *portDeathAccessQueue; // @synthesize portDeathAccessQueue=_portDeathAccessQueue;
@property(nonatomic) int pid; // @synthesize pid=_pid;
@property(nonatomic) _Bool usesPerPidLookup; // @synthesize usesPerPidLookup=_usesPerPidLookup;
@property(nonatomic) _Bool shouldRegisterCallbackSourceOnMainRunloop; // @synthesize shouldRegisterCallbackSourceOnMainRunloop;
@property(retain, nonatomic) AXAccessQueue *connectionQueue; // @synthesize connectionQueue=_connectionQueue;
@property(retain, nonatomic) NSMutableArray *postConnectionTasks; // @synthesize postConnectionTasks=_postConnectionTasks;
@property(copy, nonatomic) NSString *clientIdentifier; // @synthesize clientIdentifier=_clientIdentifier;
@property(nonatomic) float timeout; // @synthesize timeout=_timeout;
@property(nonatomic) struct __CFMachPort *serverPort; // @synthesize serverPort=_serverPort;
@property(copy, nonatomic) CDUnknownBlockType portDeathHandler; // @synthesize portDeathHandler=_portDeathHandler;
@property(copy, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property(nonatomic, getter=isConnected) _Bool connected; // @synthesize connected=_connected;
- (_Bool)_handleErrorWithMessage:(id)arg1 outError:(id *)arg2;
- (void)establishConnectionWithTimeout:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_attemptToEstablishConnection;
- (void)_serverDied;
- (id)sendMessage:(id)arg1 withError:(id *)arg2;
- (_Bool)sendSimpleMessage:(id)arg1 synchronizationPort:(unsigned int)arg2 error:(id *)arg3;
- (_Bool)sendSimpleMessage:(id)arg1 withError:(id *)arg2;
- (void)sendSimpleMessage:(id)arg1;
- (_Bool)_verifyConnectionWithError:(id *)arg1;
- (_Bool)disconnectWithError:(id *)arg1;
- (_Bool)connectWithError:(id *)arg1;
- (_Bool)verifyConnectionExists;
- (void)_registerWithServer;
@property(readonly, nonatomic) unsigned int clientCallbackPort; // @synthesize clientCallbackPort;
@property(readonly, nonatomic) struct __CFRunLoopSource *clientCallbackSource; // @synthesize clientCallbackSource;
@property(readonly, nonatomic) unsigned int serviceMachPort;
- (id)description;
- (void)dealloc;
- (id)initWithPort:(unsigned int)arg1;
- (id)initWithServiceName:(id)arg1;
- (void)_commonInit;

@end

@interface AXIPCMessage : NSObject <NSSecureCoding>
{
    int _key;
    unsigned int _clientPort;
    NSDictionary *_payload;
    CDStruct_4c969caf _auditToken;
}

+ (_Bool)supportsSecureCoding;
+ (id)archivedMessageFromData:(id)arg1;
@property(nonatomic) CDStruct_4c969caf auditToken; // @synthesize auditToken=_auditToken;
@property(nonatomic) unsigned int clientPort; // @synthesize clientPort=_clientPort;
@property(retain, nonatomic) NSDictionary *payload; // @synthesize payload=_payload;
@property(nonatomic) int key; // @synthesize key=_key;
- (id)description;
- (void)dealloc;
@property(readonly, nonatomic) NSString *senderBundleId;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithKey:(int)arg1 payload:(id)arg2 keyDebugInfo:(id)arg3;
- (id)initWithKey:(int)arg1 payload:(id)arg2;
- (id)initWithKey:(int)arg1;

@end

@interface AXIPCServer : NSObject
{
    CDUnknownBlockType _defaultHandler;
    struct __CFRunLoopSource *_serverRunLoopSource;
    struct __CFRunLoopSource *_clientInvalidationSource;
    unsigned int _serverPort;
    unsigned int _clientInvalidationPort;
    NSMutableDictionary *_validSecurityTokens;
    NSMutableSet *_connectedClients;
    CDUnknownBlockType _clientInvalidationHandler;
    NSMutableDictionary *_entitlements;
    unsigned int _assignedServerPort;
    _Bool _running;
    _Bool _perPidService;
    NSString *_serviceName;
    NSMutableDictionary *_handlers;
}

@property(nonatomic) _Bool perPidService; // @synthesize perPidService=_perPidService;
@property(readonly, nonatomic) unsigned int machPort; // @synthesize machPort=_serverPort;
@property(retain, nonatomic) NSMutableDictionary *handlers; // @synthesize handlers=_handlers;
@property(retain, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property(nonatomic, getter=isRunning) _Bool running; // @synthesize running=_running;
- (id)_clientIdentificationForAuditToken:(CDStruct_4c969caf)arg1;
- (_Bool)_handleErrorWithMessage:(id)arg1 outError:(id *)arg2;
- (id)_handleIncomingMessage:(id)arg1 securityToken:(CDStruct_52eb0d21)arg2 auditToken:(CDStruct_4c969caf)arg3 clientPort:(unsigned int)arg4;
- (void)_handleClientRegistration:(id)arg1;
- (void)_startServerThread;
- (void)_handleClientInvalidation:(unsigned int)arg1;
- (_Bool)_clientWithPort:(unsigned int)arg1 auditToken:(CDStruct_4c969caf)arg2 hasAnyEntitlementRequiredForMessage:(id)arg3;
- (void)removePossibleRequiredEntitlement:(id)arg1 forMessageWithKey:(int)arg2;
- (void)addPossibleRequiredEntitlement:(id)arg1 forMessageWithKey:(int)arg2;
- (void)removeAllHandlersForTarget:(id)arg1;
- (void)setHandlerWithTarget:(id)arg1 selector:(SEL)arg2 forKey:(int)arg3 possibleRequiredEntitlements:(id)arg4;
- (void)setHandlerWithTarget:(id)arg1 selector:(SEL)arg2 forKey:(int)arg3;
- (void)removeHandlerForKey:(int)arg1;
- (void)setHandler:(CDUnknownBlockType)arg1 forKey:(int)arg2;
- (_Bool)stopServerWithError:(id *)arg1;
- (_Bool)startServerWithError:(id *)arg1;
@property(copy, nonatomic) CDUnknownBlockType clientInvalidationCallback;
@property(copy, nonatomic) CDUnknownBlockType defaultHandler;
- (void)setServiceRunLoopSource:(struct __CFRunLoopSource *)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithPort:(unsigned int)arg1 serviceRunLoopSource:(struct __CFRunLoopSource *)arg2;
- (id)initWithServiceName:(id)arg1 perPidService:(_Bool)arg2;

@end

@interface AXIPCServerClientRegistration : NSObject
{
    unsigned int _port;
    NSString *_identifier;
}

@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(nonatomic) unsigned int port; // @synthesize port=_port;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;

@end

@interface AXIPCServerMessageHandlerContext : NSObject
{
    CDUnknownBlockType _handler;
    id _target;
    SEL _selector;
}

@property(readonly, nonatomic) SEL selector; // @synthesize selector=_selector;
@property(readonly, nonatomic) id target; // @synthesize target=_target;
@property(readonly, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;
- (id)initWithHandler:(CDUnknownBlockType)arg1;

@end

@interface AXLangMap : NSObject
{
    _Bool _western;
    _Bool _ambiguous;
    AXDialectMap *userLocaleDialect;
    NSArray *_dialects;
    NSString *_generalLanguageID;
    AXDialectMap *_userPreferredDialect;
    NSArray *_alternateLanguageIDs;
    NSArray *_associatedAmbiguousLanguages;
}

@property(retain, nonatomic) NSArray *associatedAmbiguousLanguages; // @synthesize associatedAmbiguousLanguages=_associatedAmbiguousLanguages;
@property(retain, nonatomic) NSArray *alternateLanguageIDs; // @synthesize alternateLanguageIDs=_alternateLanguageIDs;
@property(nonatomic) AXDialectMap *userPreferredDialect; // @synthesize userPreferredDialect=_userPreferredDialect;
@property(copy, nonatomic) NSString *generalLanguageID; // @synthesize generalLanguageID=_generalLanguageID;
@property(nonatomic, getter=isAmbiguous) _Bool ambiguous; // @synthesize ambiguous=_ambiguous;
@property(nonatomic, getter=isWestern) _Bool western; // @synthesize western=_western;
@property(retain, nonatomic) NSArray *dialects; // @synthesize dialects=_dialects;
@property(readonly, nonatomic) NSArray *alternativeVoiceIdentifiers;
- (id)dialectWithLocaleIdentifier:(id)arg1;
@property(readonly, nonatomic) AXDialectMap *defaultDialect;
@property(readonly, nonatomic) AXDialectMap *userLocaleDialect; // @synthesize userLocaleDialect;
- (id)debugDescription;
- (id)basicDescription;
- (id)description;
- (void)dealloc;
- (id)initWithLanguageID:(id)arg1 isWestern:(_Bool)arg2 isAmbiguous:(_Bool)arg3 dialects:(id)arg4 alternateLanguageIDs:(id)arg5 associatedAmbiguousLanguages:(id)arg6;

@end

@interface AXLanguageManager : NSObject
{
    AXDialectMap *_dialectForSystemLanguage;
    AXDialectMap *_dialectForCurrentLocale;
    NSArray *_langMaps;
    NSCharacterSet *_commonCharacters;
    NSLocale *_userLocale;
}

+ (id)dialectForAlternativeVoiceIdentifier:(id)arg1;
+ (id)nameForAlternativeVoiceIdentifier:(id)arg1;
+ (_Bool)isDialectIdentifierAlternativeVoice:(id)arg1;
+ (id)stringByReplacingFatWidthCharactersWithBasicCharacters:(id)arg1;
+ (id)stringByReplacingEmojiCharactersWithEmojiDescriptions:(id)arg1;
+ (id)commonPunctuationCharacters;
+ (id)nonlocalizedNameForLanguage:(id)arg1;
+ (id)sharedInstance;
@property(copy, nonatomic) NSLocale *userLocale; // @synthesize userLocale=_userLocale;
@property(retain, nonatomic) NSCharacterSet *commonCharacters; // @synthesize commonCharacters=_commonCharacters;
@property(retain, nonatomic) NSArray *langMaps; // @synthesize langMaps=_langMaps;
- (void)_handleUserLocaleDidChange:(id)arg1;
- (id)_loadLangMaps;
- (id)characterSetForRanges:(id)arg1;
- (id)_preferredLanguageIDsFromUserSelectedKeyboards;
- (id)descriptionOfWord:(id)arg1 forLanguage:(id)arg2;
- (void)updateCachedDialects;
- (_Bool)isCharacterCommon:(unsigned short)arg1;
- (id)ambiguousDialectsFromUserKeyboardPreferences;
- (id)dialectThatCanSpeakCharacter:(unsigned short)arg1;
- (id)dialectsThatCanSpeakCharacter:(unsigned short)arg1;
- (id)dialectForLanguageID:(id)arg1;
@property(nonatomic) AXDialectMap *dialectForCurrentLocale;
@property(nonatomic) AXDialectMap *dialectForSystemLanguage;
@property(readonly, nonatomic) NSString *systemLanguageID;
- (id)debugDescription;
- (id)basicDescription;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface AXLanguageTag : NSObject <NSCopying>
{
    _Bool _wasPredicted;
    NSString *_content;
    NSMutableOrderedSet *_unambiguousDialects;
    NSMutableOrderedSet *_ambiguousDialects;
    struct _NSRange _range;
}

+ (id)tagWithDialects:(id)arg1 range:(struct _NSRange)arg2 content:(id)arg3 predictedByTagger:(_Bool)arg4;
@property(nonatomic) _Bool wasPredicted; // @synthesize wasPredicted=_wasPredicted;
@property(retain, nonatomic) NSMutableOrderedSet *ambiguousDialects; // @synthesize ambiguousDialects=_ambiguousDialects;
@property(retain, nonatomic) NSMutableOrderedSet *unambiguousDialects; // @synthesize unambiguousDialects=_unambiguousDialects;
@property(nonatomic) NSString *content; // @synthesize content=_content;
@property(nonatomic) struct _NSRange range; // @synthesize range=_range;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)canBeSpokenByLanguage:(id)arg1;
- (_Bool)canBeSpokenByDialect:(id)arg1;
- (id)description;
- (void)addAmbiguousDialects:(id)arg1;
- (void)addAmbiguousDialect:(id)arg1;
- (void)addUnambiguousDialect:(id)arg1;
- (void)dealloc;
@property(readonly, nonatomic) AXDialectMap *dialect;
@property(readonly, nonatomic) NSString *contentSubstring;
@property(readonly, nonatomic) AXDialectMap *preferredUnambiguousDialect;
@property(readonly, nonatomic) AXDialectMap *preferredAmbiguousDialect;
- (_Bool)hasAmbigiousDialects;

@end

@interface AXLanguageTaggedContent : NSObject
{
    NSArray *_currentDialects;
    struct _NSRange _currentChunk;
    _Bool _predictedByTagger;
    _Bool _tagged;
    _Bool _splitContentOnNewlines;
    NSMutableArray *_tags;
    NSLinguisticTagger *_linguisticTagger;
    NSMutableOrderedSet *_unpredictedAmbiguousLangMaps;
    NSString *_userPreferredLangID;
}

@property(retain, nonatomic) NSArray *currentDialects; // @synthesize currentDialects=_currentDialects;
@property(nonatomic) _Bool splitContentOnNewlines; // @synthesize splitContentOnNewlines=_splitContentOnNewlines;
@property(copy, nonatomic) NSString *userPreferredLangID; // @synthesize userPreferredLangID=_userPreferredLangID;
@property(retain, nonatomic) NSMutableOrderedSet *unpredictedAmbiguousLangMaps; // @synthesize unpredictedAmbiguousLangMaps=_unpredictedAmbiguousLangMaps;
@property(retain, nonatomic) NSLinguisticTagger *linguisticTagger; // @synthesize linguisticTagger=_linguisticTagger;
@property(nonatomic, getter=isTagged) _Bool tagged; // @synthesize tagged=_tagged;
@property(retain, nonatomic) NSMutableArray *tags; // @synthesize tags=_tags;
- (void)updateTagsForLocalePrefChange;
- (id)primaryUnambiguousDialect;
- (id)primaryAmbiguousDialect;
- (void)_addTag;
- (void)_manuallyProcessContentWithRange:(struct _NSRange)arg1;
- (_Bool)hasOnlyNonWesternLangMaps;
- (_Bool)hasOnlyWesternLangMaps;
- (id)ambiguousLangMaps;
- (id)unambiguousLangMaps;
- (id)significantAmbiguousLangMapsForUserKeyboards;
- (id)significantAmbiguousLangMaps;
- (_Bool)langMapIsSignificant:(id)arg1;
- (void)tagContent;
- (void)enumeratePredictedTags:(CDUnknownBlockType)arg1;
- (void)enumerateUnpredictedTags:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSString *content;
- (id)description;
- (void)dealloc;
- (id)initWithContent:(id)arg1;

@end

@interface AXLogColorizer : NSObject
{
    _Bool _active;
    _Bool _managedBySettings;
    _Bool _preferDarkColors;
    struct AXLogColorTheme _colorTheme;
}

+ (id)colorizeStringIfEnabled:(id)arg1 withColor:(long long)arg2;
+ (id)coloredString:(id)arg1 withColor:(long long)arg2;
+ (char *)ansiColorSeqForAXLogColor:(long long)arg1;
+ (struct AXLogColorTheme)defaultDarkColorsTheme;
+ (struct AXLogColorTheme)defaultLightColorsTheme;
+ (id)defaultColorizer;
@property(nonatomic) _Bool preferDarkColors; // @synthesize preferDarkColors=_preferDarkColors;
@property(nonatomic, getter=isManagedBySettings) _Bool managedBySettings; // @synthesize managedBySettings=_managedBySettings;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(nonatomic) struct AXLogColorTheme colorTheme; // @synthesize colorTheme=_colorTheme;
- (id)cyanString:(id)arg1;
- (id)magentaString:(id)arg1;
- (id)blueString:(id)arg1;
- (id)yellowString:(id)arg1;
- (id)greenString:(id)arg1;
- (id)redString:(id)arg1;
- (id)greyString:(id)arg1;
- (id)whiteOrBlackString:(id)arg1;
- (id)debugString:(id)arg1;
- (id)infoString:(id)arg1;
- (id)warningString:(id)arg1;
- (id)errorString:(id)arg1;
- (id)description;
- (void)_updateSettingsFromUserPrefs;
- (id)init;
- (id)_initAndManageWithSettings:(_Bool)arg1;

@end

@interface AXOrator : NSObject <AVSpeechSynthesizerDelegate>
{
    AVSpeechUtterance *_statusUtterance;
    _Bool _contentIsSpeakable;
    _Bool _shouldSpeakNextItemOnResume;
    _Bool _isAudioSessionActive;
    _Bool _isInAudioInterruption;
    _Bool _wasSpeakingBeforeAudioInterruption;
    _Bool _didRequestStartSpeakingDuringAudioInterruption;
    _Bool _didRequestPauseSpeakingDuringAudioInterruption;
    _Bool _didRequestResumeSpeakingDuringAudioInterruption;
    id <AXOratorDelegate> _delegate;
    AXLanguageTaggedContent *_selectedContent;
    NSString *_voiceIdentifier;
    AXLanguageTaggedContent *_speakingContent;
    NSArray *_speakingContentTokenRanges;
    unsigned long long _numberOfTokensToSkip;
    AVSpeechSynthesizer *_speechSynthesizer;
    NSMutableArray *_speechSequenceItems;
    NSString *_lastUtteranceLanguageCode;
    AVSpeechUtterance *_lastUtterance;
    AXLanguageTag *_lastUtteranceLanguageTag;
    NSString *_requestedLanguageCodeDuringAudioInterruption;
    struct _NSRange _lastSpokenSubstringRange;
    struct _NSRange _lastUtteranceSubstringRange;
}

@property(copy, nonatomic) NSString *requestedLanguageCodeDuringAudioInterruption; // @synthesize requestedLanguageCodeDuringAudioInterruption=_requestedLanguageCodeDuringAudioInterruption;
@property(nonatomic) _Bool didRequestResumeSpeakingDuringAudioInterruption; // @synthesize didRequestResumeSpeakingDuringAudioInterruption=_didRequestResumeSpeakingDuringAudioInterruption;
@property(nonatomic) _Bool didRequestPauseSpeakingDuringAudioInterruption; // @synthesize didRequestPauseSpeakingDuringAudioInterruption=_didRequestPauseSpeakingDuringAudioInterruption;
@property(nonatomic) _Bool didRequestStartSpeakingDuringAudioInterruption; // @synthesize didRequestStartSpeakingDuringAudioInterruption=_didRequestStartSpeakingDuringAudioInterruption;
@property(nonatomic) _Bool wasSpeakingBeforeAudioInterruption; // @synthesize wasSpeakingBeforeAudioInterruption=_wasSpeakingBeforeAudioInterruption;
@property(nonatomic) _Bool isInAudioInterruption; // @synthesize isInAudioInterruption=_isInAudioInterruption;
@property(nonatomic) _Bool isAudioSessionActive; // @synthesize isAudioSessionActive=_isAudioSessionActive;
@property(nonatomic) _Bool shouldSpeakNextItemOnResume; // @synthesize shouldSpeakNextItemOnResume=_shouldSpeakNextItemOnResume;
@property(retain, nonatomic) AXLanguageTag *lastUtteranceLanguageTag; // @synthesize lastUtteranceLanguageTag=_lastUtteranceLanguageTag;
@property(retain, nonatomic) AVSpeechUtterance *lastUtterance; // @synthesize lastUtterance=_lastUtterance;
@property(nonatomic) struct _NSRange lastUtteranceSubstringRange; // @synthesize lastUtteranceSubstringRange=_lastUtteranceSubstringRange;
@property(retain, nonatomic) NSString *lastUtteranceLanguageCode; // @synthesize lastUtteranceLanguageCode=_lastUtteranceLanguageCode;
@property(retain, nonatomic) NSMutableArray *speechSequenceItems; // @synthesize speechSequenceItems=_speechSequenceItems;
@property(retain, nonatomic) AVSpeechSynthesizer *speechSynthesizer; // @synthesize speechSynthesizer=_speechSynthesizer;
@property(nonatomic) unsigned long long numberOfTokensToSkip; // @synthesize numberOfTokensToSkip=_numberOfTokensToSkip;
@property(retain, nonatomic) NSArray *speakingContentTokenRanges; // @synthesize speakingContentTokenRanges=_speakingContentTokenRanges;
@property(retain, nonatomic) AXLanguageTaggedContent *speakingContent; // @synthesize speakingContent=_speakingContent;
@property(retain, nonatomic) NSString *voiceIdentifier; // @synthesize voiceIdentifier=_voiceIdentifier;
@property(retain, nonatomic) AXLanguageTaggedContent *selectedContent; // @synthesize selectedContent=_selectedContent;
@property(nonatomic) struct _NSRange lastSpokenSubstringRange; // @synthesize lastSpokenSubstringRange=_lastSpokenSubstringRange;
@property(nonatomic) id <AXOratorDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_handleMediaServicesWereReset:(id)arg1;
- (void)_handleMediaServicesWereLost:(id)arg1;
- (void)_handleAudioInterruption:(id)arg1;
- (void)speechSynthesizer:(id)arg1 willSpeakRangeOfSpeechString:(struct _NSRange)arg2 utterance:(id)arg3;
- (void)speechSynthesizer:(id)arg1 didCancelSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didStartSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didContinueSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didPauseSpeechUtterance:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didFinishSpeechUtterance:(id)arg2;
- (_Bool)_successWithCode:(long long)arg1 error:(id *)arg2;
- (void)_setAudioSessionActive:(_Bool)arg1;
- (void)_didEndInterruption;
- (void)_didBeginInterruption;
- (_Bool)_canSpeakTaggedContent:(id)arg1;
- (void)_clearAllContentState;
- (void)_tokenizeContentIfNeeded;
- (_Bool)_skipByUnit:(_Bool)arg1 boundary:(unsigned long long)arg2;
- (void)_speakNextTokenFromCurrentTokenIndex:(long long)arg1 forward:(_Bool)arg2 boundary:(unsigned long long)arg3;
- (long long)_currentTokenIndex:(_Bool)arg1;
- (void)_respeakUtteranceIfNeeded;
- (id)_speechSequenceItemsStartingAtContentLocation:(unsigned long long)arg1;
- (_Bool)_changeSpeakingSpeed:(_Bool)arg1;
- (void)_speakNextItemInSequence;
- (void)_startSpeakingSequence;
- (void)clearSelectedContent;
- (_Bool)canResumeWithContent:(id)arg1;
- (_Bool)contentIsSpeakable;
- (void)speakStatusWithLanguage:(id)arg1 rate:(id)arg2 useCompactVoice:(_Bool)arg3 alternateIdentifier:(id)arg4;
- (_Bool)rewindWithBoundary:(unsigned long long)arg1;
- (_Bool)fastForwardWithBoundary:(unsigned long long)arg1;
- (_Bool)speakSlower;
- (_Bool)speakFaster;
- (_Bool)isSpeaking;
- (_Bool)isPaused;
- (float)speechRate;
- (_Bool)resumeSpeaking:(id *)arg1;
- (_Bool)stopSpeaking:(id *)arg1;
- (_Bool)pauseSpeaking:(id *)arg1;
- (_Bool)startSpeakingWithPreferredLanguage:(id)arg1 alternativeVoiceId:(id)arg2 error:(id *)arg3;
@property(copy, nonatomic) NSString *content;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXPathWrapper : NSObject <NSSecureCoding>
{
    struct CGPath *_path;
}

+ (id)currentSharedInstance;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) struct CGPath *path; // @synthesize path=_path;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;

@end

@interface AXPostConnectionTask : NSObject
{
    _Bool _didTimeout;
    CDUnknownBlockType _postConnectionBlock;
    AXTimer *_timeoutTimer;
}

@property(nonatomic) _Bool didTimeout; // @synthesize didTimeout=_didTimeout;
@property(retain, nonatomic) AXTimer *timeoutTimer; // @synthesize timeoutTimer=_timeoutTimer;
@property(copy, nonatomic) CDUnknownBlockType postConnectionBlock; // @synthesize postConnectionBlock=_postConnectionBlock;
- (void)_performTask;
- (void)performTask;
- (void)dealloc;
- (id)initWithConnectBlock:(CDUnknownBlockType)arg1 timeout:(double)arg2 accessQueue:(id)arg3;

@end

@interface AXSettings : NSObject
{
    NSLock *_synchronizeDomainsLock;
    NSObject<OS_dispatch_queue> *_axFeatureQueue;
    NSMutableSet *_registeredNotifications;
    NSMutableDictionary *_synchronizeDomains;
    NSMutableDictionary *_updateBlocks;
}

+ (id)sharedInstance;
+ (void)initialize;
@property(retain, nonatomic) NSMutableDictionary *updateBlocks; // @synthesize updateBlocks=_updateBlocks;
@property(retain, nonatomic) NSMutableDictionary *synchronizeDomains; // @synthesize synchronizeDomains=_synchronizeDomains;
@property(retain, nonatomic) NSMutableSet *registeredNotifications; // @synthesize registeredNotifications=_registeredNotifications;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *axFeatureQueue; // @synthesize axFeatureQueue=_axFeatureQueue;
@property(nonatomic) float reduceWhitePointLevel;
@property(retain, nonatomic) NSURL *alexLocalAssetURL;
@property(nonatomic) _Bool shouldStreamToRightAid;
@property(nonatomic) _Bool shouldStreamToLeftAid;
@property(nonatomic) _Bool allowHearingAidControlOnLockScreen;
@property(nonatomic) _Bool independentHearingAidSettings;
@property(retain, nonatomic) NSDictionary *pairedHearingAids;
@property(nonatomic) _Bool voiceOverShouldOutputToHearingAid;
- (float)voiceOverSpeakingRateForLanguage:(id)arg1;
- (void)setVoiceOverSpeakingRate:(float)arg1 forLanguage:(id)arg2;
- (id)voiceOverAlternativeVoiceIdentifier:(id)arg1;
- (void)setVoiceOverAlternativeVoiceIdentifier:(id)arg1 forLanguage:(id)arg2;
- (_Bool)voiceOverPrefersCompact:(id)arg1;
- (void)setVoiceOverPrefersCompact:(_Bool)arg1 forLanguage:(id)arg2;
@property(nonatomic) _Bool voiceOverShowSoftwareKeyboardWithBraille;
@property(nonatomic) _Bool voiceOverBrailleGradeTwoAutoTranslateEnabled;
@property(retain, nonatomic) NSNumber *voiceOverHandwritingWasNativeSpellCheckingEnabled;
@property(retain, nonatomic) NSNumber *voiceOverHandwritingWasNativeAutocorrectEnabled;
@property(copy, nonatomic) NSString *voiceOverDefaultDialect;
@property(nonatomic) _Bool voiceOverAlwaysUseNemethCodeForMathEnabled;
@property(copy, nonatomic) NSString *voiceOverBrailleTableIdentifier;
@property(copy, nonatomic) NSArray *voiceOverRotorItems;
@property(nonatomic) _Bool voiceOverSpeakNotificationsEnabled;
@property(nonatomic) _Bool voiceOverSpeakingRateInRotorEnabled;
@property(nonatomic) _Bool voiceOverSoundEffectsEnabled;
@property(nonatomic) _Bool voiceOverPitchChangeEnabled;
@property(nonatomic) _Bool voiceOverAudioDuckingEnabled;
@property(nonatomic) _Bool voiceOverHintsEnabled;
@property(readonly, nonatomic) _Bool voiceOverBrailleGesturesEnabled;
@property(readonly, nonatomic) _Bool voiceOverHandwritingEnabled;
- (_Bool)_voiceOverRotorItemEnabled:(id)arg1;
@property(nonatomic) _Bool voiceOverCompactVoiceEnabled;
@property(nonatomic) long long voiceOverActivationWorkaround;
@property(nonatomic) long long voiceOverSoftwareTypingFeedback;
@property(nonatomic) long long voiceOverHardwareTypingFeedback;
@property(nonatomic) long long voiceOverPhoneticsFeedback;
@property(nonatomic) long long voiceOverNavigateImagesOption;
@property(nonatomic) long long voiceOverHelpMode;
@property(nonatomic) _Bool voiceOverLargeCursorEnabled;
@property(nonatomic) _Bool voiceOverTouchBraillePanningAutoTurnsReadingContent;
@property(nonatomic) long long voiceOverTouchBrailleGesturesInputMode;
@property(nonatomic) long long voiceOverTouchBrailleDisplayOutputMode;
@property(nonatomic) long long voiceOverTouchBrailleDisplayInputMode;
@property(retain, nonatomic) NSArray *voiceOverPronunciationDictionary;
@property(nonatomic) struct CGPoint quickSpeakNubbitNormalizedPosition;
- (float)quickSpeakSpeakingRateForLanguage:(id)arg1;
- (void)setQuickSpeakSpeakingRate:(float)arg1 forLanguage:(id)arg2;
- (void)setQuickSpeakAlternativeVoice:(id)arg1 forLanguage:(id)arg2;
- (id)quickSpeakAlternativeVoiceForLanguage:(id)arg1;
- (void)setQuickSpeakCompactPreference:(id)arg1 prefersCompact:(_Bool)arg2;
- (_Bool)quickSpeakCompactPreference:(id)arg1;
@property(nonatomic) float quickSpeakSpeakingRate;
@property(nonatomic) _Bool quickSpeakHighlightText;
@property(nonatomic) float quickSpeakVolume;
@property(nonatomic) _Bool speakCorrectionsEnabled;
@property(retain, nonatomic) NSNumber *guidedAccessOverrideTimeRestrictionDuration;
@property(nonatomic) _Bool guidedAccessDisallowDirectInactiveToActiveTransition;
@property(nonatomic) _Bool enableHearingAidReporter;
@property(nonatomic) _Bool skipHearingAidMFiAuth;
@property(nonatomic) _Bool voiceOverHearingAidRoutingEnabled;
@property(nonatomic) long long internalLoggingColorTheme;
@property(nonatomic) _Bool logAXNotificationPosting;
@property(nonatomic) _Bool ignoreAXServerEntitlements;
@property(nonatomic) _Bool ignoreAXAsserts;
@property(retain, nonatomic) NSArray *logToFileSubsystems;
@property(nonatomic) _Bool writeAXLogsToFile;
@property(nonatomic) _Bool includeBacktraceInLogs;
@property(nonatomic) _Bool validateSecondPartyApps;
@property(nonatomic) _Bool assistiveTouchHeadlessModeEnabled;
@property(nonatomic) _Bool assistiveTouchCameraSwitchPreviewEnabled;
@property(retain, nonatomic) NSDate *gaxInternalSettingsLastPasscodeSetDate;
@property(retain, nonatomic) NSDate *gaxInternalSettingsLastActivationDate;
@property(copy, nonatomic) NSString *gaxInternalSettingsProductBuildVersion;
@property(copy, nonatomic) NSString *gaxInternalSettingsDeviceID;
@property(nonatomic) _Bool gaxInternalSettingsSystemDidRestartDueToLowBattery;
@property(nonatomic) _Bool gaxInternalSettingsIsActiveAppSelfLocked;
@property(nonatomic) _Bool gaxInternalSettingsTimeRestrictionHasExpired;
@property(copy, nonatomic) NSString *gaxInternalSettingsActiveAppID;
@property(copy, nonatomic) NSNumber *gaxInternalSettingsActiveAppOrientation;
@property(retain, nonatomic) NSArray *gaxInternalSettingsUserConfiguredAppIDs;
@property(retain, nonatomic) NSArray *gaxInternalSettingsSavedAccessibilityTripleClickOptions;
@property(retain, nonatomic) NSDictionary *gaxInternalSettingsSavedAccessibilityFeatures;
@property(retain, nonatomic) NSDictionary *gaxInternalSettingsUserGlobalProfile;
@property(retain, nonatomic) NSDictionary *gaxInternalSettingsUserAppProfile;
@property(nonatomic) _Bool guidedAccessShouldSpeakForTimeRestrictionEvents;
@property(readonly, nonatomic) NSString *guidedAccessDefaultToneIdentifierForTimeRestrictionEvents;
@property(copy, nonatomic) NSString *guidedAccessToneIdentifierForTimeRestrictionEvents;
@property(nonatomic) _Bool guidedAccessAllowsUnlockWithTouchID;
@property(nonatomic) _Bool guidedAccessAXFeaturesEnabled;
@property(nonatomic) long long guidedAccessUsageCount;
@property(nonatomic) _Bool zoomDebugShowExternalFocusRect;
@property(nonatomic) _Bool zoomDebugDisableZoomLensScaleTransform;
- (void)zoomUserHadLegacyZoomEnabled:(_Bool *)arg1 wasZoomedIn:(_Bool *)arg2 withScale:(double *)arg3;
@property(nonatomic) _Bool zoomShouldAllowFullscreenAutopanning;
@property(nonatomic) double zoomIdleSlugOpacity;
@property(retain, nonatomic) NSOrderedSet *zoomPreferredLensModes;
@property(nonatomic) double zoomPreferredMaximumZoomScale;
@property(retain, nonatomic) NSString *zoomPreferredCurrentLensMode;
@property(nonatomic) _Bool zoomAlwaysUseWindowedZoomForTyping;
@property(nonatomic) _Bool zoomShouldShowSlug;
@property(nonatomic) _Bool zoomShouldFollowFocus;
@property(retain, nonatomic) NSString *zoomCurrentLensMode;
@property(nonatomic) _Bool zoomInStandby;
@property(retain, nonatomic) NSString *zoomCurrentLensEffect;
@property(nonatomic) struct CGPoint zoomSlugNormalizedPosition;
@property(nonatomic) struct CGPoint zoomPanOffset;
@property(nonatomic) double zoomScale;
@property(nonatomic) struct CGRect zoomWindowFrame;
@property(nonatomic) _Bool zoomPreferencesWereInitialized;
- (id)assistiveTouchScannerAlternativeVoiceId:(id)arg1;
- (void)setAssistiveTouchScannerAlternativeVoiceId:(id)arg1 forLanguage:(id)arg2;
- (_Bool)assistiveTouchScannerPrefersCompact:(id)arg1;
- (void)setAssistiveTouchScannerPrefersCompact:(_Bool)arg1 forLanguage:(id)arg2;
@property(retain, nonatomic) NSString *assistiveTouchScannerDefaultDialect;
@property(nonatomic) _Bool assistiveTouchScannerAddedTripleClickAutomatically;
@property(nonatomic) _Bool assistiveTouchSwitchUsageConfirmed;
@property(nonatomic) long long assistiveTouchHeadMovementSensitivity;
@property(nonatomic) long long assistiveTouchCursorColor;
@property(retain, nonatomic) NSSet *assistiveTouchSwitches;
@property(nonatomic) double assistiveTouchScannerSpeechRate;
@property(nonatomic) _Bool assistiveTouchScannerSpeechEnabled;
@property(nonatomic) _Bool assistiveTouchScannerSoundEnabled;
@property(nonatomic) long long assistiveTouchScanCycles;
@property(nonatomic) double assistiveTouchScanTimeout;
@property(nonatomic) _Bool assistiveTouchScanTimeoutEnabled;
@property(nonatomic) _Bool assistiveTouchSelectTimeoutEnabled;
@property(nonatomic) double assistiveTouchSelectTimeout;
@property(nonatomic) double assistiveTouchStepInterval;
@property(nonatomic) _Bool assistiveTouchInputCoalescingEnabled;
@property(nonatomic) double assistiveTouchInputCoalescingDuration;
@property(nonatomic) _Bool assistiveTouchInputHoldEnabled;
@property(nonatomic) double assistiveTouchInputHoldDuration;
@property(nonatomic) _Bool assistiveTouchDelayAfterInputEnabled;
@property(nonatomic) double assistiveTouchDelayAfterInput;
@property(nonatomic) _Bool assistiveTouchActionRepeatEnabled;
@property(nonatomic) double assistiveTouchActionRepeatInterval;
@property(nonatomic) double assistiveTouchAxisSweepSpeed;
@property(readonly, nonatomic) long long assistiveTouchScannerIncludedMenuItems;
@property(nonatomic) _Bool assistiveTouchScannerMenuIncludeSettingsItem;
@property(nonatomic) _Bool assistiveTouchScannerMenuIncludeGesturesItem;
@property(nonatomic) _Bool assistiveTouchScannerMenuIncludeDeviceItem;
@property(nonatomic) _Bool assistiveTouchScannerMenuIncludeScrollItem;
@property(nonatomic) _Bool assistiveTouchScannerMenuIncludeHomeItem;
@property(nonatomic) _Bool assistiveTouchScannerMenuLabelsEnabled;
@property(nonatomic) _Bool assistiveTouchScannerCompactMenuEnabled;
@property(nonatomic) _Bool assistiveTouchGroupElementsEnabled;
@property(nonatomic) _Bool assistiveTouchScannerPointPickerDefaultsToRescan;
@property(nonatomic) _Bool assistiveTouchAutoScanningEnabled;
@property(nonatomic) long long assistiveTouchScanningMode;
@property(nonatomic) _Bool assistiveTouchScannerCursorHighVisibilityEnabled;
@property(nonatomic) _Bool assistiveTouchScannerSpeechIsInterruptedByScanning;
@property(nonatomic) long long assistiveTouchPreferredPointPicker;
@property(retain, nonatomic) NSArray *assistiveTouchCommonTasks;
@property(retain, nonatomic) NSArray *assistiveTouchSavedGestures;
@property(retain, nonatomic) NSArray *assistiveTouchRecentGestures;
@property(retain, nonatomic) NSArray *assistiveTouchCustomGestures;
@property(nonatomic) double assistiveTouchSpeed;
@property(nonatomic) _Bool assistiveTouchOpenMenuSwaggleEnabled;
@property(nonatomic) _Bool assistiveTouchAlwaysShowMenuEnabled;
- (_Bool)preferenceHasDefaultValue:(SEL)arg1;
- (void)registerUpdateBlock:(CDUnknownBlockType)arg1 forRetrieveSelector:(SEL)arg2 withListener:(id)arg3;
- (void)_registerForNotification:(id)arg1;
- (void)_handlePreferenceChanged:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)_synchronizeIfNecessary:(id)arg1 domain:(int)arg2;
- (_Bool)_switchFromRootUserIfNecessary:(CDUnknownBlockType)arg1;
- (id)_valueForPreferenceKey:(id)arg1;
- (void)_setValue:(id)arg1 forPreferenceKey:(id)arg2;
- (id)_notificationForPreferenceKey:(id)arg1;
- (id)_migratePreferenceIfNecessary:(id)arg1;
- (struct __CFString *)_domainNameForDomain:(int)arg1;
- (id)_preferenceKeyForSelector:(SEL)arg1;
- (int)_domainForPreferenceKey:(id)arg1;

@end

@interface AXSettingsObjectDestructionHelper : NSObject
{
    void *_listenerAddress;
    NSMutableArray *_selectorKeys;
}

- (void)dealloc;
- (void)addSelectorKey:(SEL)arg1;
- (id)initWithListenerAddress:(void *)arg1;

@end

@interface AXSubsystem : NSObject
{
}

+ (void)setShouldLogToFile:(_Bool)arg1;
+ (_Bool)shouldLogToFile;
+ (_Bool)willLog;
+ (void)resetPreferredLogLevel;
+ (void)setPreferredLogLevel:(int)arg1;
+ (int)effectiveLogLevel;
+ (int)defaultLogLevel;
+ (_Bool)shouldProcessMessageForLogs;
+ (_Bool)shouldIncludeBacktraceInLogs;
+ (id)identifier;
+ (id)wrapError:(id)arg1 description:(id)arg2;
+ (id)errorWithDescription:(id)arg1;
+ (id)_errorWithMessage:(id)arg1 underlyingError:(id)arg2;
+ (id)subsystems;
+ (void)initialize;

@end

@interface AXSpeechAssetDownloader : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSpringBoardActionHandlerHolder : NSObject
{
    CDUnknownBlockType _handler;
    long long _type;
    NSString *_identifier;
}

@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(nonatomic) long long type; // @synthesize type=_type;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void)dealloc;

@end

@interface AXSpringBoardServer : AXServer
{
    AXAccessQueue *_accessQueue;
    CDUnknownBlockType _currentAlertHandler;
    NSMutableArray *_gestureOverrides;
    NSMutableArray *_actionHandlers;
    NSMutableDictionary *_reachabilityHandlers;
}

+ (id)server;
@property(retain, nonatomic) NSMutableDictionary *reachabilityHandlers; // @synthesize reachabilityHandlers=_reachabilityHandlers;
@property(retain, nonatomic) NSMutableArray *actionHandlers; // @synthesize actionHandlers=_actionHandlers;
@property(retain, nonatomic) NSMutableArray *gestureOverrides; // @synthesize gestureOverrides=_gestureOverrides;
@property(copy, nonatomic) CDUnknownBlockType currentAlertHandler; // @synthesize currentAlertHandler=_currentAlertHandler;
@property(retain, nonatomic) AXAccessQueue *accessQueue; // @synthesize accessQueue=_accessQueue;
- (void)copyStringToPasteboard:(id)arg1;
- (long long)activeInterfaceOrientation;
- (int)activeApplicationOrientation;
- (int)pid;
- (_Bool)isPointInsideAccessibilityInspector:(id)arg1;
- (_Bool)isInspectorMinimized;
- (void)removeReachabilityHandler:(id)arg1;
- (void)registerReachabilityHandler:(CDUnknownBlockType)arg1 withIdentifierCallback:(CDUnknownBlockType)arg2;
- (void)cancelReachabilityDetection;
- (void)registerOverrideIntentForGesture:(unsigned long long)arg1 withHandler:(CDUnknownBlockType)arg2 withIdentifierCallback:(CDUnknownBlockType)arg3;
- (void)setCancelGestureActivation:(unsigned long long)arg1 cancelEnabled:(_Bool)arg2;
- (void)removeOverrideIntent:(id)arg1;
- (void)registerSpringBoardActionHandler:(CDUnknownBlockType)arg1 withIdentifierCallback:(CDUnknownBlockType)arg2;
- (void)removeActionHandler:(id)arg1;
- (void)setShowSpeechPlaybackControls:(_Bool)arg1;
- (void)showAlert:(long long)arg1 withHandler:(CDUnknownBlockType)arg2 withData:(id)arg3;
- (void)showAlert:(long long)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)hideAlert;
- (void)cleanupAlertHandler;
- (double)volumeLevel;
- (double)reachabilityOffset;
- (_Bool)isRingerMuted;
- (_Bool)isSideSwitchUsedForOrientation;
- (void)resetDimTimer;
- (_Bool)isOrientationLocked;
- (int)topEventPidOverride;
- (void)startHearingAidServer;
- (void)setHearingAidControlVisible:(_Bool)arg1;
- (void)setVolume:(double)arg1;
- (void)openSCATCommonTasks;
- (void)openSCATCustomGestureCreation;
- (void)openAssistiveTouchCustomGestureCreation;
- (void)takeScreenshot;
- (void)_didConnectToClient;
- (void)_wasDisconnectedFromClient;
- (void)_willClearServer;
- (void)_didConnectToServer;
- (_Bool)_shouldValidateEntitlements;
- (id)_handleActionResult:(id)arg1;
- (id)_handleReachabilityResult:(id)arg1;
- (id)_handleGestureOverrideResult:(id)arg1;
- (id)_handleReplyResult:(id)arg1;
- (id)_serviceName;
- (void)dealloc;
- (id)init;
- (_Bool)isSettingsAppFrontmost;
- (_Bool)isPurpleBuddyAppFrontmost;
- (_Bool)_isSystemAppFrontmostExcludingSiri:(_Bool)arg1;
- (_Bool)isSystemAppFrontmostExludingSiri;
- (_Bool)isSystemAppFrontmost;
- (id)runningAppPIDs;
- (int)purpleBuddyPID;
- (id)focusedAppPID;
- (_Bool)isSystemAppShowingAnAlert;
- (id)systemAppInfoWithQuery:(unsigned long long)arg1;
- (_Bool)isSpeakThisTemporarilyDisabled;
- (_Bool)isGuidedAccessActive;
- (_Bool)isVoiceControlRunning;
- (void)openVoiceControl;
- (void)setSiriIsTalking:(_Bool)arg1;
- (_Bool)isSiriTalkingOrListening;
- (_Bool)isSiriVisible;
- (void)dismissSiri;
- (void)openSiri;
- (void)dismissAppSwitcher;
- (void)openAppSwitcher;
- (_Bool)isAppSwitcherVisible;
- (void)showControlCenter:(_Bool)arg1;
- (_Bool)showNotificationCenter:(_Bool)arg1;
- (_Bool)isControlCenterVisible;
- (void)hideNotificationCenter;
- (void)showNotificationCenter;
- (void)toggleNotificationCenter;
- (_Bool)isNotificationCenterVisible;
- (_Bool)isMakingEmergencyCall;
- (_Bool)hasActiveOrPendingCallOrFaceTime;
- (_Bool)hasActiveOrPendingCall;
- (_Bool)hasActiveCall;
- (void)resumeMedia;
- (void)pauseMedia;
- (_Bool)isMediaPlaying;
- (void)unlockDevice;
- (id)installedApps;
- (_Bool)areSystemGesturesDisabledByAccessibility;
- (_Bool)areSystemGesturesDisabledNatively;
- (_Bool)isSyncingRestoringResettingOrUpdating;
- (_Bool)isSystemSleeping;
- (_Bool)isScreenLockedWithPasscode:(_Bool *)arg1;
- (id)runningAppProcesses;
- (id)focusedAppProcess;
- (id)applicationWithIdentifier:(id)arg1;
- (_Bool)_shouldDispatchLocally;
- (id)_axSpringBoardServerInstanceDelegate;
- (id)_axSpringBoardServerInstanceIfExists;
- (id)_axSpringBoardServerInstance;

@end

@interface AXSubsystemAXCompareGeometry : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemAXIPC : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemBBServer : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemEventTap : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemGAX : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemGAXAppLaunching : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemGAXIntegrity : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemGAXTimeRestrictions : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemSBServer : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemUnitTesting : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemUserInterfaceService : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemVOTHandwriting : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemValidations : AXSubsystem
{
}

+ (_Bool)shouldProcessMessageForLogs;
+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSubsystemZoom : AXSubsystem
{
}

+ (int)defaultLogLevel;
+ (id)identifier;

@end

@interface AXSwitch : NSObject <NSSecureCoding>
{
    unsigned short _keyCode;
    long long _action;
    NSString *_name;
    struct NSString *_source;
    struct NSString *_type;
    NSString *_productName;
    NSString *_manufacturerName;
    long long _buttonNumber;
    long long _headSwitch;
    NSUUID *_uuid;
}

+ (id)switchWithAction:(long long)arg1 name:(id)arg2 source:(struct NSString *)arg3 type:(struct NSString *)arg4;
+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(nonatomic) long long headSwitch; // @synthesize headSwitch=_headSwitch;
@property(nonatomic) long long buttonNumber; // @synthesize buttonNumber=_buttonNumber;
@property(nonatomic) unsigned short keyCode; // @synthesize keyCode=_keyCode;
@property(copy, nonatomic) NSString *manufacturerName; // @synthesize manufacturerName=_manufacturerName;
@property(copy, nonatomic) NSString *productName; // @synthesize productName=_productName;
@property(retain, nonatomic) NSString *type; // @synthesize type=_type;
@property(retain, nonatomic) NSString *source; // @synthesize source=_source;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) long long action; // @synthesize action=_action;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithAction:(long long)arg1 name:(id)arg2 source:(struct NSString *)arg3 type:(struct NSString *)arg4;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface AXTestRunner : NSObject
{
    CDUnknownBlockType _preTestAction;
    CDUnknownBlockType _postTestAction;
}

@property(copy, nonatomic) CDUnknownBlockType postTestAction; // @synthesize postTestAction=_postTestAction;
@property(copy, nonatomic) CDUnknownBlockType preTestAction; // @synthesize preTestAction=_preTestAction;
- (void)runTest:(Class)arg1;
- (void)dealloc;

@end

@interface AXTestSuite : NSObject
{
}

- (id)overrideProcessName;
- (id)name;

@end

@interface AXThreadTimer : NSObject <AXTimer>
{
    NSThread *_thread;
    CDUnknownBlockType _cancelBlock;
    _Bool _automaticallyCancelPendingBlockUponSchedulingNewBlock;
    AXThreadTimerTask *_task;
}

@property(nonatomic) _Bool automaticallyCancelPendingBlockUponSchedulingNewBlock; // @synthesize automaticallyCancelPendingBlockUponSchedulingNewBlock=_automaticallyCancelPendingBlockUponSchedulingNewBlock;
@property(retain, nonatomic) AXThreadTimerTask *task; // @synthesize task=_task;
- (void)dealloc;
@property(readonly, nonatomic, getter=isActive) _Bool active;
@property(readonly, nonatomic, getter=isPending) _Bool pending;
@property(readonly, nonatomic, getter=isCancelled) _Bool cancelled;
- (void)cancel;
- (void)afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2 cancelBlock:(CDUnknownBlockType)arg3;
- (void)afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2;
- (void)_runAfterDelay:(id)arg1;
- (id)initWithThread:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXThreadTimerTask : NSObject
{
    _Bool cancel;
    _Bool finished;
    _Bool active;
    CDUnknownBlockType _block;
}

@property(nonatomic, getter=isActive) _Bool active; // @synthesize active;
@property(nonatomic, getter=isFinished) _Bool finished; // @synthesize finished;
@property(nonatomic, getter=isCancelled) _Bool cancel; // @synthesize cancel;
@property(copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void)dealloc;
- (void)runAfterDelay:(float)arg1;
- (void)run;

@end

@interface AXTimer : NSObject <AXTimer>
{
    _Bool _automaticallyCancelPendingBlockUponSchedulingNewBlock;
    _Bool _active;
    _Bool _accessQueueIsExternal;
    int _state;
    NSString *_label;
    AXAccessQueue *_accessQueue;
    NSObject<OS_dispatch_source> *_dispatchTimer;
}

+ (id)timerTargettingMainAccessQueue;
+ (void)initialize;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *dispatchTimer; // @synthesize dispatchTimer=_dispatchTimer;
@property(nonatomic) _Bool accessQueueIsExternal; // @synthesize accessQueueIsExternal=_accessQueueIsExternal;
@property(retain, nonatomic) AXAccessQueue *accessQueue; // @synthesize accessQueue=_accessQueue;
@property(nonatomic) int state; // @synthesize state=_state;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(nonatomic) _Bool automaticallyCancelPendingBlockUponSchedulingNewBlock; // @synthesize automaticallyCancelPendingBlockUponSchedulingNewBlock=_automaticallyCancelPendingBlockUponSchedulingNewBlock;
@property(copy) NSString *label; // @synthesize label=_label;
@property(readonly, copy) NSString *description;
- (void)_warnAboutAsynchronousCancelling;
- (void)_reallyCancel;
- (void)cancel;
- (void)_warnAboutAsynchronousScheduling;
- (void)_didFinishProcessingBlock;
- (void)_afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2 shouldTreatAsWritingBlock:(_Bool)arg3;
- (void)afterDelay:(double)arg1 processWritingBlock:(CDUnknownBlockType)arg2;
- (void)afterDelay:(double)arg1 processReadingBlock:(CDUnknownBlockType)arg2;
- (void)afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2;
- (void)_performEnqueuedWritingBlock:(CDUnknownBlockType)arg1 asynchronousExecutionWarningHandler:(SEL)arg2;
@property(readonly, nonatomic, getter=isPending) _Bool pending;
- (void)dealloc;
- (id)initWithTargetAccessQueue:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXTrampoline : NSObject
{
    _Bool _warnAboutUnknownSelectors;
    id _caller;
    Class _targetClass;
}

+ (id)methodNotFoundSentinal;
+ (void)methodDoesNotExistSentinal;
+ (id)trampolineWithCaller:(id)arg1 targetClass:(Class)arg2;
@property(nonatomic) _Bool warnAboutUnknownSelectors; // @synthesize warnAboutUnknownSelectors=_warnAboutUnknownSelectors;
@property(nonatomic) Class targetClass; // @synthesize targetClass=_targetClass;
@property(nonatomic) id caller; // @synthesize caller=_caller;
- (CDUnknownFunctionPointerType)_findIMPForSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (_Bool)callerIsClass;
- (id)description;
- (void)dealloc;
- (id)initWithCaller:(id)arg1 targetClass:(Class)arg2;

@end

@interface AXValidationManager : NSObject
{
    _Bool _shouldLogToConsole;
    _Bool _shouldCrashOnError;
    _Bool _shouldReportToServer;
    _Bool _forceDoNotReport;
    _Bool _debugBuild;
    unsigned long long _numberOfValidationErrors;
    NSString *_validationTargetName;
    NSString *_overrideProcessName;
    NSMutableArray *_consoleErrorMessages;
    id <AXValidationReportingServices> _validationReportingServices;
}

+ (id)sharedInstance;
@property(retain, nonatomic) id <AXValidationReportingServices> validateionReportingServices; // @synthesize validateionReportingServices=_validationReportingServices;
@property(nonatomic, getter=isDebugBuild) _Bool debugBuild; // @synthesize debugBuild=_debugBuild;
@property(retain, nonatomic) NSMutableArray *consoleErrorMessages; // @synthesize consoleErrorMessages=_consoleErrorMessages;
@property(copy, nonatomic) NSString *overrideProcessName; // @synthesize overrideProcessName=_overrideProcessName;
@property(copy, nonatomic) NSString *validationTargetName; // @synthesize validationTargetName=_validationTargetName;
@property(nonatomic) _Bool forceDoNotReport; // @synthesize forceDoNotReport=_forceDoNotReport;
@property(nonatomic) unsigned long long numberOfValidationErrors; // @synthesize numberOfValidationErrors=_numberOfValidationErrors;
@property(nonatomic) _Bool shouldReportToServer; // @synthesize shouldReportToServer=_shouldReportToServer;
@property(nonatomic) _Bool shouldCrashOnError; // @synthesize shouldCrashOnError=_shouldCrashOnError;
@property(nonatomic) _Bool shouldLogToConsole; // @synthesize shouldLogToConsole=_shouldLogToConsole;
- (void)sendFailedTestCase:(id)arg1 withTag:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendFailedAssertionWithErrorMessage:(id)arg1 overrideProcessName:(id)arg2;
- (void)sendValidateExceptionForProtocol:(id)arg1 hasProperty:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForProtocol:(id)arg1 hasMethod:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasProperty:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasClassMethod:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasInstanceMethod:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasInstanceVariable:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 conformsToProtocol:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 isKindOfClass:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 errorMessage:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendGenericReport:(id)arg1 withTag:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendExceptionForSafeBlock:(id)arg1 overrideProcessName:(id)arg2;
- (void)sendExceptionForSafeIVarKey:(id)arg1 onTarget:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendExceptionForSafeValueKey:(id)arg1 onTarget:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendExceptionForInstallingSafeCategory:(id)arg1 onTarget:(id)arg2 overrideProcessName:(id)arg3;
- (_Bool)installSafeCategory:(id)arg1 canInteractWithTargetClass:(_Bool)arg2;
- (_Bool)installSafeCategory:(id)arg1;
- (_Bool)validateProtocol:(id)arg1 hasProperty:(id)arg2;
- (_Bool)validateProtocol:(id)arg1 hasRequiredClassMethod:(id)arg2;
- (_Bool)validateProtocol:(id)arg1 hasOptionalClassMethod:(id)arg2;
- (_Bool)validateProtocol:(id)arg1 hasRequiredInstanceMethod:(id)arg2;
- (_Bool)validateProtocol:(id)arg1 hasOptionalInstanceMethod:(id)arg2;
- (_Bool)validateProtocol:(id)arg1 hasMethod:(id)arg2 isInstanceMethod:(_Bool)arg3 isRequired:(_Bool)arg4;
- (_Bool)validateClass:(id)arg1 conformsToProtocol:(id)arg2;
- (_Bool)validateClass:(id)arg1 hasProperty:(id)arg2;
- (_Bool)validateClass:(id)arg1 hasClassMethod:(id)arg2;
- (_Bool)validateClass:(id)arg1 hasInstanceMethod:(id)arg2;
- (_Bool)validateClass:(id)arg1 hasInstanceMethod:(id)arg2 withFullSignature:(char *)arg3;
- (_Bool)validateClass:(id)arg1 hasClassMethod:(id)arg2 withFullSignature:(char *)arg3;
- (_Bool)_validateClass:(id)arg1 hasMethod:(id)arg2 methodType:(int)arg3 returnType:(id)arg4 arguments:(id)arg5;
- (_Bool)_validateClass:(id)arg1 hasMethod:(id)arg2 methodType:(int)arg3;
- (_Bool)validateClass:(id)arg1 hasInstanceVariable:(id)arg2 withType:(char *)arg3;
- (_Bool)validateClass:(id)arg1 hasInstanceVariable:(id)arg2;
- (_Bool)validateClass:(id)arg1 isKindOfClass:(id)arg2;
- (_Bool)validateClass:(id)arg1;
- (void)_printConsoleReport:(_Bool)arg1 isDelayed:(_Bool)arg2;
- (void)installSafeCategories:(CDUnknownBlockType)arg1 afterDelay:(double)arg2 validationTargetName:(id)arg3 overrideProcessName:(id)arg4 forceDoNotReport:(_Bool)arg5;
- (void)installSafeCategories:(CDUnknownBlockType)arg1 afterDelay:(double)arg2 validationTargetName:(id)arg3 overrideProcessName:(id)arg4;
- (void)performValidations:(CDUnknownBlockType)arg1 withPreValidationHandler:(CDUnknownBlockType)arg2 postValidationHandler:(CDUnknownBlockType)arg3 safeCategoryInstallationHandler:(CDUnknownBlockType)arg4;
- (void)performValidations:(CDUnknownBlockType)arg1 withPreValidationHandler:(CDUnknownBlockType)arg2 postValidationHandler:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)init;

@end

@interface AXVoiceOverServer : AXServer
{
}

+ (id)server;
- (void)triggerCommand:(int)arg1;
- (_Bool)_connectIfNecessary;
- (id)_serviceName;

@end

@interface AXVoiceOverUserSubstitution : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _active;
    _Bool _ignoreCase;
    _Bool _appliesToAllApps;
    _Bool _isReplacementTextAllPunctuation;
    _Bool _isReplacementTextSurroundedByPunctuation;
    NSString *_originalString;
    NSString *_replacementString;
    NSSet *_bundleIdentifiers;
    NSUUID *_uuid;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(readonly, nonatomic) _Bool isReplacementTextSurroundedByPunctuation; // @synthesize isReplacementTextSurroundedByPunctuation=_isReplacementTextSurroundedByPunctuation;
@property(readonly, nonatomic) _Bool isReplacementTextAllPunctuation; // @synthesize isReplacementTextAllPunctuation=_isReplacementTextAllPunctuation;
@property(copy, nonatomic) NSSet *bundleIdentifiers; // @synthesize bundleIdentifiers=_bundleIdentifiers;
@property(nonatomic) _Bool appliesToAllApps; // @synthesize appliesToAllApps=_appliesToAllApps;
@property(nonatomic) _Bool ignoreCase; // @synthesize ignoreCase=_ignoreCase;
@property(nonatomic) _Bool active; // @synthesize active=_active;
@property(copy, nonatomic) NSString *replacementString; // @synthesize replacementString=_replacementString;
@property(copy, nonatomic) NSString *originalString; // @synthesize originalString=_originalString;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface AXWordDescriptionManager : NSObject
{
    NSManagedObjectContext *_managedObjectContext;
    NSPersistentStoreCoordinator *_persistentStoreCoordinator;
    NSManagedObjectModel *_managedObjectModel;
    NSString *languageDialectCode;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSString *languageDialectCode; // @synthesize languageDialectCode;
@property(readonly, nonatomic) NSManagedObjectModel *managedObjectModel; // @synthesize managedObjectModel=_managedObjectModel;
@property(readonly, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator; // @synthesize persistentStoreCoordinator=_persistentStoreCoordinator;
- (id)languageCode;
@property(readonly, nonatomic) NSManagedObjectContext *managedObjectContext; // @synthesize managedObjectContext=_managedObjectContext;
- (id)descriptionForWord:(id)arg1;
- (void)dealloc;

@end

@interface AXWordDescriptionManager_ja : AXWordDescriptionManager
{
}

- (id)descriptionForWord:(id)arg1;

@end

@interface AXWordDescriptionManager_zh : AXWordDescriptionManager
{
}

- (id)componentDescriptionForCharacter:(id)arg1;
- (id)descriptionForCharacter:(id)arg1 language:(id)arg2;
- (id)descriptionForWord:(id)arg1;

@end

@interface NSArray (AXEventPathInfoRepresentationExtension)
@property(readonly, nonatomic) AXEventPathInfoRepresentation *firstPath;
@end

@interface NSArray (AXExtensions)
+ (id)axArrayByIgnoringNilElementsWithCount:(unsigned long long)arg1;
@end

@interface NSError (AXExtensions)
+ (id)_ax_errorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 arguments:(struct __va_list_tag [1])arg4;
+ (id)ax_errorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3;
+ (id)ax_errorWithDomain:(id)arg1 description:(id)arg2;
- (id)ax_nonRedundantDescription;
@end

@interface NSKeyedUnarchiver (AXExtensions)
+ (id)secureUnarchiveData:(id)arg1 withExpectedClass:(Class)arg2 otherAllowedClasses:(id)arg3;
@end

@interface NSMutableArray (AXExtensions)
- (void)axSafelyAddObject:(id)arg1;
@end

@interface NSMutableArray (AXQueue)
- (id)ax_nextDequeuedObject;
- (id)ax_lastEnqueuedObject;
- (id)ax_dequeueObject;
- (void)ax_enqueueObject:(id)arg1;
@end

@interface NSMutableSet (AXExtensions)
- (void)axSafelyAddObject:(id)arg1;
@end

@interface NSObject (AXAssertionHelpers)
- (void)_accessibilitySetSpeakThisTemporarilyDisabled:(_Bool)arg1;
- (_Bool)_accessibilityIsSpeakThisTemporarilyDisabled;
@end

@interface NSObject (AXCollectionsExtensions)
- (id)ax_prettyDescription;
- (void)_ax_appendPrettyDescriptionToString:(id)arg1 indentationString:(id)arg2 visitedCollections:(id)arg3;
@end

@interface NSObject (AXSideTableStorage)
- (void)_accessibilityRemoveValueForKey:(id)arg1;
- (void)_accessibilitySetUnsignedIntegerValue:(unsigned long long)arg1 forKey:(id)arg2;
- (void)_accessibilitySetIntegerValue:(long long)arg1 forKey:(id)arg2;
- (void)_accessibilitySetBoolValue:(_Bool)arg1 forKey:(id)arg2;
- (void)_accessibilitySetRetainedValue:(id)arg1 forKey:(id)arg2;
- (void)_accessibilitySetAssignedValue:(id)arg1 forKey:(id)arg2;
- (void)_accessibilitySetValue:(id)arg1 forKey:(id)arg2 storageMode:(int)arg3;
- (unsigned long long)_accessibilityUnsignedIntegerValueForKey:(id)arg1;
- (long long)_accessibilityIntegerValueForKey:(id)arg1;
- (_Bool)_accessibilityBoolValueForKey:(id)arg1;
- (id)_accessibilityValueForKey:(id)arg1;
@end

@interface NSObject (AXTrmpoline)
- (id)axTrampolineForClass:(Class)arg1;
- (id)axSuperTrampoline;
@end

@interface NSObject (AXValidationManager)
+ (void)_accessibilityPerformValidations:(id)arg1;
@end

@interface NSObject (UIAccessibilitySafeCategory)
- (void)handleFailoversForClassNamed:(id)arg1;
- (id)safeValueForKeyPath:(id)arg1;
- (id)safeValueForKey:(id)arg1;
- (double)safeCGFloatForKey:(id)arg1;
- (struct _NSRange)safeRangeForKey:(id)arg1;
- (double)safeTimeIntervalForKey:(id)arg1;
- (double)safeDoubleForKey:(id)arg1;
- (float)safeFloatForKey:(id)arg1;
- (unsigned long long)safeUnsignedIntegerForKey:(id)arg1;
- (long long)safeIntegerForKey:(id)arg1;
- (unsigned int)safeUnsignedIntForKey:(id)arg1;
- (int)safeIntForKey:(id)arg1;
- (_Bool)safeBoolForKey:(id)arg1;
- (void *)safeIvarForKey:(id)arg1;
@end

@interface NSObject (UIAccessibilitySafeCategory_Private)
- (id)_safeValidatedValueForKey:(id)arg1 expectedClass:(Class)arg2 possibleExpectedTypeEncodings:(const char *)arg3;
- (id)_safeValidatedValueForKey:(id)arg1 expectedClass:(Class)arg2 expectedTypeEncoding:(const char *)arg3;
@end

@interface NSString (AXPriv)
+ (struct USet *)_japaneseLetterSet;
+ (struct USet *)_ideographSet;
+ (struct USet *)_characterSetWithPattern:(id)arg1;
- (_Bool)_isJapanesePhrase;
- (_Bool)_isOnlyIdeographs;
@end

@interface _AXAssertionServer : NSObject
{
    CDUnknownBlockType _assertionWasAcquiredHandler;
    CDUnknownBlockType _assertionWasReleasedHandler;
    NSMutableDictionary *_healdAssertionMap;
}

@property(retain, nonatomic) NSMutableDictionary *healdAssertionMap; // @synthesize healdAssertionMap=_healdAssertionMap;
@property(copy, nonatomic) CDUnknownBlockType assertionWasReleasedHandler; // @synthesize assertionWasReleasedHandler=_assertionWasReleasedHandler;
@property(copy, nonatomic) CDUnknownBlockType assertionWasAcquiredHandler; // @synthesize assertionWasAcquiredHandler=_assertionWasAcquiredHandler;
- (void)removeHeldAssertionOfType:(id)arg1 byClient:(id)arg2;
- (void)addHeldAssertionOfType:(id)arg1 byClient:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface __UIAccessibilityValidateBlockSignatureSentinel : NSObject
{
}

@end

