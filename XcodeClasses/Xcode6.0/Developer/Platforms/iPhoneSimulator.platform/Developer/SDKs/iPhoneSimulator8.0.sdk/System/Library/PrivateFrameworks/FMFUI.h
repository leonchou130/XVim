//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

#pragma mark Typedef'd Structures

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    CDStruct_c3b9c2ee _field1;
    CDStruct_c3b9c2ee _field2;
} CDStruct_90e2a262;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/FMFUI.framework/FMFUI
// UUID: 1888DDF2-6839-3A67-BB4A-7D4E9CFC3CCC
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 97.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol FMF3HiddenMapTrackingHandlerDelegate <NSObject>
- (void)hiddenMapTrackerDidUpdateMapToTrackingType:(long long)arg1;
@end

@protocol FMFMapOptionsViewControllerDelegate <NSObject>
- (void)mapTypeChanged:(unsigned long long)arg1;
- (void)_dismiss:(id)arg1;
- (void)openInMapsButtonTapped:(id)arg1;
- (MKMapView *)mapView;
@end

@protocol FMFMapViewDelegateInternalDelegate <NSObject>
- (UIColor *)_internalAnnotationTintColor;
- (UIImage *)annotationImageForHandle:(FMFHandle *)arg1;
- (struct UIEdgeInsets)edgeInsets;
- (_Bool)viewWillAppearCalled;
- (void)mapViewDidFinishRenderingMap;
- (_Bool)shouldZoomToFitMeAndLocations;
- (void)setShouldZoomToFitNewLocations:(_Bool)arg1;
- (void)didUpdateUserLocation:(MKUserLocation *)arg1;
- (void)reZoomToFit;
- (void)regionDidChangeAnimated:(_Bool)arg1;
- (void)regionWillChangeAnimated:(_Bool)arg1;
- (void)didDeselectLocation:(FMFLocation *)arg1;
- (void)didSelectLocation:(FMFLocation *)arg1;
@end

@protocol FMFNoLocationViewDelegate <NSObject>
- (struct UIEdgeInsets)edgeInsets;
- (UIImage *)personImageForNoLocationView;
- (NSSet *)handlesShowingLocations;
@end

@protocol FMFSessionDelegate <NSObject>

@optional
- (void)didReceiveServerError:(NSError *)arg1;
- (void)didUpdatePendingOffersForHandles:(NSSet *)arg1;
- (void)didUpdateActiveDeviceList:(NSSet *)arg1;
- (void)didChangeActiveLocationSharingDevice:(FMFDevice *)arg1;
- (void)didFailToHandleMappingPacket:(NSString *)arg1 error:(NSError *)arg2;
- (void)mappingPacketProcessingCompleted:(NSString *)arg1;
- (void)sendMappingPacket:(NSString *)arg1 toHandle:(FMFHandle *)arg2;
- (void)didUpdateHidingStatus:(_Bool)arg1;
- (void)didStopAbilityToGetLocationForHandle:(FMFHandle *)arg1;
- (void)didStartAbilityToGetLocationForHandle:(FMFHandle *)arg1;
- (void)didStopSharingMyLocationWithHandle:(FMFHandle *)arg1;
- (void)didStartSharingMyLocationWithHandle:(FMFHandle *)arg1;
- (void)didReceiveFriendshipRequest:(FMFFriendshipRequest *)arg1;
- (void)connectionError:(NSError *)arg1;
- (void)didFailToFetchLocationForHandle:(FMFHandle *)arg1 withError:(NSError *)arg2;
- (void)didReceiveLocation:(FMFLocation *)arg1;
@end

@protocol FMFSessionDelegateInternal <FMFSessionDelegate>

@optional
- (void)networkReachabilityUpdated:(_Bool)arg1;
- (void)removeAllFriendLocationsFromMap;
@end

@protocol MKMapViewDelegate <NSObject>

@optional
- (void)mapView:(MKMapView *)arg1 didAddOverlayViews:(NSArray *)arg2;
- (MKOverlayView *)mapView:(MKMapView *)arg1 viewForOverlay:(id <MKOverlay>)arg2;
- (void)mapView:(MKMapView *)arg1 didAddOverlayRenderers:(NSArray *)arg2;
- (MKOverlayRenderer *)mapView:(MKMapView *)arg1 rendererForOverlay:(id <MKOverlay>)arg2;
- (void)mapView:(MKMapView *)arg1 didChangeUserTrackingMode:(long long)arg2 animated:(_Bool)arg3;
- (void)mapView:(MKMapView *)arg1 annotationView:(MKAnnotationView *)arg2 didChangeDragState:(unsigned long long)arg3 fromOldState:(unsigned long long)arg4;
- (void)mapView:(MKMapView *)arg1 didFailToLocateUserWithError:(NSError *)arg2;
- (void)mapView:(MKMapView *)arg1 didUpdateUserLocation:(MKUserLocation *)arg2;
- (void)mapViewDidStopLocatingUser:(MKMapView *)arg1;
- (void)mapViewWillStartLocatingUser:(MKMapView *)arg1;
- (void)mapView:(MKMapView *)arg1 didDeselectAnnotationView:(MKAnnotationView *)arg2;
- (void)mapView:(MKMapView *)arg1 didSelectAnnotationView:(MKAnnotationView *)arg2;
- (void)mapView:(MKMapView *)arg1 annotationView:(MKAnnotationView *)arg2 calloutAccessoryControlTapped:(UIControl *)arg3;
- (void)mapView:(MKMapView *)arg1 didAddAnnotationViews:(NSArray *)arg2;
- (MKAnnotationView *)mapView:(MKMapView *)arg1 viewForAnnotation:(id <MKAnnotation>)arg2;
- (void)mapViewDidFinishRenderingMap:(MKMapView *)arg1 fullyRendered:(_Bool)arg2;
- (void)mapViewWillStartRenderingMap:(MKMapView *)arg1;
- (void)mapViewDidFailLoadingMap:(MKMapView *)arg1 withError:(NSError *)arg2;
- (void)mapViewDidFinishLoadingMap:(MKMapView *)arg1;
- (void)mapViewWillStartLoadingMap:(MKMapView *)arg1;
- (void)mapView:(MKMapView *)arg1 regionDidChangeAnimated:(_Bool)arg2;
- (void)mapView:(MKMapView *)arg1 regionWillChangeAnimated:(_Bool)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

__attribute__((visibility("hidden")))
@interface ActiveDeviceLinkCell : PSTableCell
{
}

+ (long long)cellStyle;
- (void)refreshCellContentsWithSpecifier:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface FMF3HiddenMapTrackingHandler : NSObject <MKMapViewDelegate>
{
    MKMapView *_hiddenMapView;
    id <FMF3HiddenMapTrackingHandlerDelegate> _delegate;
}

@property(nonatomic) __weak id <FMF3HiddenMapTrackingHandlerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) MKMapView *hiddenMapView; // @synthesize hiddenMapView=_hiddenMapView;
- (void).cxx_destruct;
- (void)mapView:(id)arg1 didChangeUserTrackingMode:(long long)arg2 animated:(_Bool)arg3;
- (void)dealloc;
- (id)initWithView:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FMFActiveDeviceSelectionViewController : PSListController <FMFSessionDelegate, UITableViewDelegate, UITableViewDataSource>
{
    NSMutableArray *_deviceList;
    FMFDevice *_currentActiveDevice;
    FMFDevice *_nowActiveDevice;
    FMFSession *_fmfSession;
    long long _specifierStartIndex;
}

@property(nonatomic) long long specifierStartIndex; // @synthesize specifierStartIndex=_specifierStartIndex;
@property(retain, nonatomic) FMFSession *fmfSession; // @synthesize fmfSession=_fmfSession;
@property(retain, nonatomic) FMFDevice *nowActiveDevice; // @synthesize nowActiveDevice=_nowActiveDevice;
@property(retain, nonatomic) FMFDevice *currentActiveDevice; // @synthesize currentActiveDevice=_currentActiveDevice;
@property(retain, nonatomic) NSMutableArray *deviceList; // @synthesize deviceList=_deviceList;
- (void).cxx_destruct;
- (void)didUpdateActiveDeviceList:(id)arg1;
- (void)didChangeActiveLocationSharingDevice:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(id)arg3;
- (long long)tableView:(id)arg1 editingStyleForRowAtIndexPath:(id)arg2;
- (_Bool)tableView:(id)arg1 canEditRowAtIndexPath:(id)arg2;
- (id)_specifierForRowIndex:(long long)arg1;
- (_Bool)_hasThisDeviceAtIndex:(unsigned long long)arg1;
- (_Bool)_hasActiveDeviceAtIndex:(unsigned long long)arg1;
- (void)sortDevicesList;
- (void)reloadSpecifiersOnMainQueue;
- (void)saveActiveDeviceSelection;
- (void)cancelActiveDeviceSelection;
- (id)specifiers;
- (void)viewDidLoad;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (id)initWithSession:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface FMFAnnotationView : MKAnnotationView
{
    _Bool _isRotating;
    _Bool _wantsRotation;
    long long _annotationSize;
    CAShapeLayer *_shapeLayer;
    CAShapeLayer *_circleLayer;
    CAShapeLayer *_markerOval;
    CAShapeLayer *_markerCenter;
    CAShapeLayer *_tailLayer;
    CALayer *_centerImageLayer;
    double _futureRotationAmount;
}

+ (id)circlePath;
@property(nonatomic) double futureRotationAmount; // @synthesize futureRotationAmount=_futureRotationAmount;
@property(nonatomic) _Bool wantsRotation; // @synthesize wantsRotation=_wantsRotation;
@property(nonatomic) _Bool isRotating; // @synthesize isRotating=_isRotating;
@property(retain, nonatomic) CALayer *centerImageLayer; // @synthesize centerImageLayer=_centerImageLayer;
@property(retain, nonatomic) CAShapeLayer *tailLayer; // @synthesize tailLayer=_tailLayer;
@property(retain, nonatomic) CAShapeLayer *markerCenter; // @synthesize markerCenter=_markerCenter;
@property(retain, nonatomic) CAShapeLayer *markerOval; // @synthesize markerOval=_markerOval;
@property(retain, nonatomic) CAShapeLayer *circleLayer; // @synthesize circleLayer=_circleLayer;
@property(retain, nonatomic) CAShapeLayer *shapeLayer; // @synthesize shapeLayer=_shapeLayer;
@property(nonatomic) long long annotationSize; // @synthesize annotationSize=_annotationSize;
- (void).cxx_destruct;
- (id)markerCenterPathSmall;
- (id)markerOvalPathSmall;
- (id)markerCenterPath;
- (id)markerOvalPath;
- (id)shutterCircle;
- (id)smallCircle;
- (id)largeCircle;
- (id)smallTail;
- (id)largeTail;
- (id)largeBezierPath;
- (id)smallBezierPath;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (struct CGRect)centerImageFrameForSize:(long long)arg1;
- (id)shutterLineWidthForSize:(long long)arg1;
- (id)lineWidthForSize:(long long)arg1;
- (id)shadowOpacityForSize:(long long)arg1;
- (void)sizeAnnotationView;
- (void)updateAnnotationShutter;
- (void)setAnnotationSize:(double)arg1 animated:(_Bool)arg2;
- (struct CGSize)intrinsicContentSize;
- (void)prepareForReuse;
- (void)setPersonImage:(id)arg1;
- (id)clipImageToCircle:(id)arg1;
- (id)fallbackPersonImage;
- (double)animationDuration;
- (struct CGRect)hitRectForSize;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2 tintColor:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface FMFBezierPath : UIBezierPath
{
}

@end

__attribute__((visibility("hidden")))
@interface FMFFamilyHandle : FMFHandle
{
    NSNumber *_dsid;
}

@property(copy, nonatomic) NSNumber *dsid; // @synthesize dsid=_dsid;
- (void).cxx_destruct;

@end

@interface FMFLocationSharingViewController : PSListController <FMFSessionDelegateInternal>
{
    _Bool _isMyLocationEnabled;
    _Bool _useFamilyCirclePhotos;
    _Bool _useFamilyCirclePhotosLoaded;
    NSArray *_allFollowersHandles;
    NSArray *_followersHandles;
    NSArray *_followersSpecifiers;
    NSArray *_familySpecifiers;
    NSMutableDictionary *_dsidToFamilyPhoto;
    NSArray *_hashedFamilyDsids;
    void *_addressBook;
    FMFHandle *_lastSelectedHandle;
    NSArray *_familyMembers;
    UIAlertView *_genericErrorAlert;
}

@property(nonatomic) _Bool useFamilyCirclePhotosLoaded; // @synthesize useFamilyCirclePhotosLoaded=_useFamilyCirclePhotosLoaded;
@property(nonatomic) _Bool useFamilyCirclePhotos; // @synthesize useFamilyCirclePhotos=_useFamilyCirclePhotos;
@property(retain, nonatomic) UIAlertView *genericErrorAlert; // @synthesize genericErrorAlert=_genericErrorAlert;
@property(retain, nonatomic) NSArray *familyMembers; // @synthesize familyMembers=_familyMembers;
@property(nonatomic) _Bool isMyLocationEnabled; // @synthesize isMyLocationEnabled=_isMyLocationEnabled;
@property(retain, nonatomic) FMFHandle *lastSelectedHandle; // @synthesize lastSelectedHandle=_lastSelectedHandle;
@property(nonatomic) void *addressBook; // @synthesize addressBook=_addressBook;
@property(retain, nonatomic) NSArray *hashedFamilyDsids; // @synthesize hashedFamilyDsids=_hashedFamilyDsids;
@property(retain, nonatomic) NSMutableDictionary *dsidToFamilyPhoto; // @synthesize dsidToFamilyPhoto=_dsidToFamilyPhoto;
@property(retain, nonatomic) NSArray *familySpecifiers; // @synthesize familySpecifiers=_familySpecifiers;
@property(retain, nonatomic) NSArray *followersSpecifiers; // @synthesize followersSpecifiers=_followersSpecifiers;
@property(retain, nonatomic) NSArray *followersHandles; // @synthesize followersHandles=_followersHandles;
@property(retain, nonatomic) NSArray *allFollowersHandles; // @synthesize allFollowersHandles=_allFollowersHandles;
- (void).cxx_destruct;
- (void)networkReachabilityUpdated:(_Bool)arg1;
- (void)didReceiveServerError:(id)arg1;
- (void)didUpdateActiveDeviceList:(id)arg1;
- (void)didChangeActiveLocationSharingDevice:(id)arg1;
- (void)didStopSharingMyLocationWithHandle:(id)arg1;
- (void)didStartSharingMyLocationWithHandle:(id)arg1;
- (void)didUpdateHidingStatus:(_Bool)arg1;
- (void)reloadSpecifiersOnMainQueue;
- (void)_meDeviceSpecifierWasTapped:(id)arg1;
- (void *)unknownRecordForData:(id)arg1 property:(int)arg2;
- (id)allHandlesMatchingABCardForSelectedHandle:(id)arg1;
- (void)shareMyLocation:(id)arg1;
- (id)_followerHandleWithHashedDSID:(id)arg1;
- (void)removeFollower:(id)arg1;
- (void)addShareActionToPersonViewController:(id)arg1;
- (void)addRemoveActionToPersonViewController:(id)arg1;
- (void *)recordForHandle:(id)arg1;
- (id)reverseString:(id)arg1;
- (id)stringByKeepingCharacterSet:(id)arg1 inString:(id)arg2;
- (_Bool)phoneNumberMatches:(id)arg1 phone2:(id)arg2;
- (int)identifierOfProperty:(int)arg1 withHandleId:(id)arg2 forRecord:(void *)arg3;
- (_Bool)_isFamilyMemberAFollower:(id)arg1;
- (_Bool)_isHandleAFollower:(id)arg1;
- (void)_pushAddressBookUIForHandle:(id)arg1;
- (void)_showFamilyMemberDetails:(id)arg1;
- (void)_showHandleDetails:(id)arg1;
- (id)_shareSwitchEnabled:(id)arg1;
- (void)displayGenericErrorAlert;
- (void)_setShareSwitchEnabled:(id)arg1 forSpecifier:(id)arg2;
- (id)formatStringForHours:(long long)arg1 minutes:(long long)arg2;
- (id)offerTimeRemaining:(double)arg1;
- (id)monogramForHandle:(id)arg1;
- (id)_specifierForHandle:(id)arg1;
- (_Bool)noMeDeviceSelected:(id)arg1;
- (id)sortedFollowersWithCombinedRecords:(id)arg1;
- (void)_loadFamilyMemberPhotos;
- (void)_loadFamilyMembers:(_Bool)arg1;
- (id)specifiers;
- (void)abChanged:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface FMFMapImageCache : NSObject
{
    NSCache *__cache;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSCache *_cache; // @synthesize _cache=__cache;
- (void).cxx_destruct;
- (id)_imageForMap:(id)arg1;
- (id)_keyForHandles:(id)arg1;
- (id)_orientationKey;
- (id)cachedMapForHandles:(id)arg1;
- (void)cacheMap:(id)arg1 forHandles:(id)arg2;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface FMFMapOptionsViewController : UIViewController
{
    id <FMFMapOptionsViewControllerDelegate> _delegate;
    UIButton *_mapAttributionButton;
    UIView *_topTapView;
    UISegmentedControl *_segmentedControl;
    UIView *_bottomWhitePane;
    MKMapAttribution *_mapAttribution;
}

@property(retain, nonatomic) MKMapAttribution *mapAttribution; // @synthesize mapAttribution=_mapAttribution;
@property(retain, nonatomic) UIView *bottomWhitePane; // @synthesize bottomWhitePane=_bottomWhitePane;
@property(retain, nonatomic) UISegmentedControl *segmentedControl; // @synthesize segmentedControl=_segmentedControl;
@property(retain, nonatomic) UIView *topTapView; // @synthesize topTapView=_topTapView;
@property(retain, nonatomic) UIButton *mapAttributionButton; // @synthesize mapAttributionButton=_mapAttributionButton;
@property(nonatomic) __weak id <FMFMapOptionsViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)segmentedControlChanged:(id)arg1;
- (void)attributionButtonPressed:(id)arg1;
- (void)openInMaps:(id)arg1;
- (void)viewDidLoad;
- (struct CGSize)paneSize;
- (void)_dismiss:(id)arg1;
- (void)awakeFromNib;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface FMFMapUtilities : NSObject
{
}

+ (_Bool)doNotAnimateToNewLocation:(CDStruct_c3b9c2ee)arg1 forMapView:(id)arg2;
+ (CDStruct_90e2a262)mapRectForCoordinateRegion:(CDStruct_90e2a262)arg1;
+ (CDStruct_90e2a262)regionForAnnotations:(id)arg1;

@end

@interface FMFMapViewController : UIViewController <FMFSessionDelegateInternal, FMFMapViewDelegateInternalDelegate, FMF3HiddenMapTrackingHandlerDelegate, FMFNoLocationViewDelegate, FMFMapOptionsViewControllerDelegate>
{
    _Bool _shouldZoomToFitNewLocations;
    _Bool _shouldZoomToFitMeAndLocations;
    _Bool _showFloatingMapLocationButton;
    _Bool _isSimpleMap;
    _Bool _canShowNoLocation;
    _Bool __refreshingIsPaused;
    _Bool __blockDidReceiveAnimation;
    _Bool __isRenderingInitialMap;
    _Bool _viewWillAppearCalled;
    _Bool _mapTypeLoaded;
    id <FMFMapViewControllerDelegate> _delegate;
    MKMapView *_mapView;
    UIColor *_annotationTintColor;
    FMFSession *_fmfSession;
    FMFMapViewDelegateInternal *_mapViewDelegate;
    NSSet *__preloadedHandles;
    FMFNoLocationView *_noLocationView;
    NSSet *__internalHandlesShowingLocations;
    FMFMapOptionsViewController *_mapOptionsVC;
    FMFTitleView *_titleView;
    void *_addressBook;
    UIToolbar *_toolbar;
    MKUserTrackingBarButtonItem *_userLocationButton;
    UIBarButtonItem *_directionsBarButtonItem;
    UIBarButtonItem *_infoBarButtonItem;
    FMF3HiddenMapTrackingHandler *_hiddenMap;
    UIToolbar *_floatingLocationToolbar;
    UIView *_floatingToolbarView;
    FMFRefreshBarButtonItem *_refreshButton;
    UIImageView *_cachedMapView;
    unsigned long long _defaultMapType;
    struct UIEdgeInsets _edgeInsets;
}

+ (id)smallAnnotationViewImage;
+ (id)smallAnnotationViewImageWithTintColor:(id)arg1;
+ (struct CGSize)annotationImageSize;
@property(nonatomic) _Bool mapTypeLoaded; // @synthesize mapTypeLoaded=_mapTypeLoaded;
@property(nonatomic) unsigned long long defaultMapType; // @synthesize defaultMapType=_defaultMapType;
@property(retain, nonatomic) UIImageView *cachedMapView; // @synthesize cachedMapView=_cachedMapView;
@property(retain, nonatomic) FMFRefreshBarButtonItem *refreshButton; // @synthesize refreshButton=_refreshButton;
@property(retain, nonatomic) UIView *floatingToolbarView; // @synthesize floatingToolbarView=_floatingToolbarView;
@property(retain, nonatomic) UIToolbar *floatingLocationToolbar; // @synthesize floatingLocationToolbar=_floatingLocationToolbar;
@property(retain, nonatomic) FMF3HiddenMapTrackingHandler *hiddenMap; // @synthesize hiddenMap=_hiddenMap;
@property(retain, nonatomic) UIBarButtonItem *infoBarButtonItem; // @synthesize infoBarButtonItem=_infoBarButtonItem;
@property(retain, nonatomic) UIBarButtonItem *directionsBarButtonItem; // @synthesize directionsBarButtonItem=_directionsBarButtonItem;
@property(retain, nonatomic) MKUserTrackingBarButtonItem *userLocationButton; // @synthesize userLocationButton=_userLocationButton;
@property(retain, nonatomic) UIToolbar *toolbar; // @synthesize toolbar=_toolbar;
@property(nonatomic) void *addressBook; // @synthesize addressBook=_addressBook;
@property(retain, nonatomic) FMFTitleView *titleView; // @synthesize titleView=_titleView;
@property(retain, nonatomic) FMFMapOptionsViewController *mapOptionsVC; // @synthesize mapOptionsVC=_mapOptionsVC;
@property(nonatomic) _Bool viewWillAppearCalled; // @synthesize viewWillAppearCalled=_viewWillAppearCalled;
@property(nonatomic) _Bool _isRenderingInitialMap; // @synthesize _isRenderingInitialMap=__isRenderingInitialMap;
@property(nonatomic) _Bool _blockDidReceiveAnimation; // @synthesize _blockDidReceiveAnimation=__blockDidReceiveAnimation;
@property(nonatomic) _Bool _refreshingIsPaused; // @synthesize _refreshingIsPaused=__refreshingIsPaused;
@property(retain, nonatomic) NSSet *_internalHandlesShowingLocations; // @synthesize _internalHandlesShowingLocations=__internalHandlesShowingLocations;
@property(retain, nonatomic) FMFNoLocationView *noLocationView; // @synthesize noLocationView=_noLocationView;
@property(nonatomic) _Bool canShowNoLocation; // @synthesize canShowNoLocation=_canShowNoLocation;
@property(nonatomic) _Bool isSimpleMap; // @synthesize isSimpleMap=_isSimpleMap;
@property(retain, nonatomic) NSSet *_preloadedHandles; // @synthesize _preloadedHandles=__preloadedHandles;
@property(retain, nonatomic) FMFMapViewDelegateInternal *mapViewDelegate; // @synthesize mapViewDelegate=_mapViewDelegate;
@property(retain, nonatomic) FMFSession *fmfSession; // @synthesize fmfSession=_fmfSession;
@property(copy, nonatomic) UIColor *annotationTintColor; // @synthesize annotationTintColor=_annotationTintColor;
@property(retain, nonatomic) MKMapView *mapView; // @synthesize mapView=_mapView;
@property(nonatomic) struct UIEdgeInsets edgeInsets; // @synthesize edgeInsets=_edgeInsets;
@property(nonatomic) _Bool showFloatingMapLocationButton; // @synthesize showFloatingMapLocationButton=_showFloatingMapLocationButton;
@property(nonatomic) _Bool shouldZoomToFitMeAndLocations; // @synthesize shouldZoomToFitMeAndLocations=_shouldZoomToFitMeAndLocations;
@property(nonatomic) _Bool shouldZoomToFitNewLocations; // @synthesize shouldZoomToFitNewLocations=_shouldZoomToFitNewLocations;
@property(nonatomic) __weak id <FMFMapViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)updateAllAnnotationsDueToAddressBookUpdate;
- (id)_internalAnnotationTintColor;
- (id)personImageForNoLocationView;
- (id)_selectedHandleAnnotation;
- (void)_updateTitleViewLocation:(id)arg1;
- (id)titleViewForSelectedHandle;
- (id)annotationImageForHandle:(id)arg1;
- (void)hideCachedMap;
- (void)mapViewDidFinishRenderingMap;
- (void)didReceiveLocationForDelegateCallback:(id)arg1;
- (void)didUpdateUserLocation:(id)arg1;
- (void)reZoomToFit;
- (void)regionDidChangeAnimated:(_Bool)arg1;
- (void)regionWillChangeAnimated:(_Bool)arg1;
- (void)didDeselectLocation:(id)arg1;
- (void)didSelectLocation:(id)arg1;
- (void)hiddenMapTrackerDidUpdateMapToTrackingType:(long long)arg1;
- (void)removeAllFriendLocationsFromMap;
- (void)didStopAbilityToGetLocationForHandle:(id)arg1;
- (void)updateRefreshForLocation:(id)arg1;
- (void)didReceiveLocation:(id)arg1;
- (void)zoomAndSelectHandle:(id)arg1;
- (void)zoomToFit:(_Bool)arg1;
- (void)zoomToFit;
- (void)stopShowingLocationsForHandles:(id)arg1;
- (void)startShowingLocationsForHandles:(id)arg1;
@property(copy, nonatomic) NSSet *handlesShowingLocations;
- (void)resumeRefreshingLocations;
- (void)stopRefreshingLocations;
- (void)mapTypeChanged:(unsigned long long)arg1;
- (void)mapTypeChangedNotification:(id)arg1;
- (void)_dismiss:(id)arg1;
- (void)presentMapOptionsModal:(id)arg1;
- (_Bool)isCompact;
- (void)infoButtonTapped:(id)arg1;
- (void)getDirections;
- (void)_updateDirectionsButtonEnabled;
- (void)openInMapsButtonTapped:(id)arg1;
- (void)refreshButtonTapped:(id)arg1;
- (_Bool)sessionContainsHandle:(id)arg1;
- (void)removeAnnotationsFromMapForHandle:(id)arg1;
- (id)locationOnMapForHandle:(id)arg1 enforceServerId:(_Bool)arg2;
- (_Bool)singleAnnotationOnMap;
- (void)selectAnnotationIfSingleFriend:(id)arg1;
- (void)deselectAllAnnotations;
- (void)selectAnnotationIfSingleForMac;
- (void)updateMapWithNewLocation:(id)arg1 animated:(_Bool)arg2;
- (_Bool)mapHasUserLocations;
- (void)updateNoLocationView:(_Bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize)arg1 withTransitionCoordinator:(id)arg2;
- (void)didReceiveMemoryWarning;
- (void)loadCachedLocationsForHandles;
- (void)enablePreloadedHandles;
- (void)loadDelegate;
- (void)destroySession;
- (void)removeHandlesFromSession;
- (void)addHandlesToSession;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)didMoveToParentViewController:(id)arg1;
- (void)willMoveToParentViewController:(id)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)viewWillAppearWillMoveToWindowSetup;
- (void)viewWillAppear:(_Bool)arg1;
- (void)_updateLocationButtonEnabled;
- (void)addFloatingToolbar;
- (void)viewDidLoad;
- (void)loadView;
- (void)_authorizeMonitoringLocation;
- (void)initializeDefaults;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 handles:(id)arg2;
- (id)initSimpleMapWithDelegate:(id)arg1 handles:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface FMFMapViewDelegateInternal : NSObject <MKMapViewDelegate>
{
    _Bool _respondingToUserTouch;
    id <FMFMapViewDelegateInternalDelegate> _delegate;
    FMFWildcardGestureRecognizer *_gr;
}

@property(retain, nonatomic) FMFWildcardGestureRecognizer *gr; // @synthesize gr=_gr;
@property(nonatomic) _Bool respondingToUserTouch; // @synthesize respondingToUserTouch=_respondingToUserTouch;
@property(nonatomic) __weak id <FMFMapViewDelegateInternalDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)regionIsValid:(CDStruct_90e2a262)arg1;
- (struct UIEdgeInsets)edgeInsetsWithMinApplied:(struct UIEdgeInsets)arg1;
- (void)zoomToFitAnnotationsForMapView:(id)arg1 includeMe:(_Bool)arg2 disallowAnimation:(_Bool)arg3;
- (void)zoomToFitLocation:(id)arg1 forMapView:(id)arg2;
- (void)_moveCenterByOffset:(struct CGPoint)arg1 from:(CDStruct_c3b9c2ee)arg2 mapView:(id)arg3;
- (void)slideAnnotation:(id)arg1 intoViewIfNeededForMapView:(id)arg2;
- (void)updateOverlaysForAnnotationMove:(id)arg1 mapView:(id)arg2;
- (id)accuracyCircleForLocation:(id)arg1;
- (id)fmfOverlayColorSatellite;
- (id)fmfOverlayColor;
- (id)mapView:(id)arg1 rendererForOverlay:(id)arg2;
- (void)mapViewDidFinishRenderingMap:(id)arg1 fullyRendered:(_Bool)arg2;
- (void)mapView:(id)arg1 didUpdateUserLocation:(id)arg2;
- (void)mapView:(id)arg1 regionDidChangeAnimated:(_Bool)arg2;
- (void)mapView:(id)arg1 regionWillChangeAnimated:(_Bool)arg2;
- (void)mapView:(id)arg1 didDeselectAnnotationView:(id)arg2;
- (void)mapView:(id)arg1 didSelectAnnotationView:(id)arg2;
- (id)mapView:(id)arg1 viewForAnnotation:(id)arg2;
- (void)endTouches;
- (id)initWithDelegate:(id)arg1 mapView:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface FMFNoLocationView : UIView
{
    _Bool _blockLabelUpdates;
    id <FMFNoLocationViewDelegate> _delegate;
    NSLayoutConstraint *_topInsetConstraint;
    NSLayoutConstraint *_bottomInsetConstraint;
    UIImage *_offlineProfileImage;
    UIImageView *_offlineProfileImageView;
    UIImageView *_personImageView;
    UILabel *_detailsLabel;
    UIView *_blur;
    UIView *_insetView;
}

@property(retain, nonatomic) UIView *insetView; // @synthesize insetView=_insetView;
@property(retain, nonatomic) UIView *blur; // @synthesize blur=_blur;
@property(retain, nonatomic) UILabel *detailsLabel; // @synthesize detailsLabel=_detailsLabel;
@property(retain, nonatomic) UIImageView *personImageView; // @synthesize personImageView=_personImageView;
@property(retain, nonatomic) UIImageView *offlineProfileImageView; // @synthesize offlineProfileImageView=_offlineProfileImageView;
@property(retain, nonatomic) UIImage *offlineProfileImage; // @synthesize offlineProfileImage=_offlineProfileImage;
@property(retain, nonatomic) NSLayoutConstraint *bottomInsetConstraint; // @synthesize bottomInsetConstraint=_bottomInsetConstraint;
@property(retain, nonatomic) NSLayoutConstraint *topInsetConstraint; // @synthesize topInsetConstraint=_topInsetConstraint;
@property(nonatomic) _Bool blockLabelUpdates; // @synthesize blockLabelUpdates=_blockLabelUpdates;
@property(nonatomic) __weak id <FMFNoLocationViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)updatePersonImageViewImage;
- (void)setAlpha:(double)arg1;
- (void)updateLabel;
- (void)updateLabelNotification:(id)arg1;
- (void)updateConstriantsForInsets;
- (void)addLayoutConstraints;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface FMFRefreshBarButtonItem : UIBarButtonItem
{
    NSSet *_locations;
    FMFRefreshWrapperButton *_wrapperButton;
    FMFTintedActivityIndicatorView *_aiv;
    UIImageView *_imageView;
    id _locateNotification;
}

@property(retain, nonatomic) id locateNotification; // @synthesize locateNotification=_locateNotification;
@property(retain, nonatomic) UIImageView *imageView; // @synthesize imageView=_imageView;
@property(retain, nonatomic) FMFTintedActivityIndicatorView *aiv; // @synthesize aiv=_aiv;
@property(retain, nonatomic) FMFRefreshWrapperButton *wrapperButton; // @synthesize wrapperButton=_wrapperButton;
@property(retain, nonatomic) NSSet *locations; // @synthesize locations=_locations;
- (void).cxx_destruct;
- (id)accessibilityHint;
- (id)accessibilityLabel;
- (_Bool)anyLocationIsUpdating;
- (void)_updateLocateInProgress;
- (void)locatingInProgressChanged:(id)arg1;
- (void)localTapped;
- (void)updateLocations;
- (void)removeLocationForHandle:(id)arg1;
- (void)addLocation:(id)arg1;
- (_Bool)isAnimating;
- (void)stopAnimating;
- (void)startAnimating;
- (void)setImageInsets:(struct UIEdgeInsets)arg1;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;

@end

__attribute__((visibility("hidden")))
@interface FMFRefreshWrapperButton : UIButton
{
    struct UIEdgeInsets _wrapperInsets;
}

@property(nonatomic) struct UIEdgeInsets wrapperInsets; // @synthesize wrapperInsets=_wrapperInsets;
- (struct UIEdgeInsets)alignmentRectInsets;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface FMFTintedActivityIndicatorView : UIActivityIndicatorView
{
}

- (void)tintColorDidChange;
- (void)awakeFromNib;

@end

__attribute__((visibility("hidden")))
@interface FMFTitleView : UIView
{
    UILabel *_titleLabel;
    UILabel *_subtitleLabel;
    FMFLocation *_location;
}

@property(retain, nonatomic) FMFLocation *location; // @synthesize location=_location;
@property(retain, nonatomic) UILabel *subtitleLabel; // @synthesize subtitleLabel=_subtitleLabel;
@property(retain, nonatomic) UILabel *titleLabel; // @synthesize titleLabel=_titleLabel;
- (void).cxx_destruct;
- (void)_updateLabels:(id)arg1;
- (void)updateLocation:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface FMFWildcardGestureRecognizer : UIGestureRecognizer
{
    CDUnknownBlockType _touchesBeganCallback;
    CDUnknownBlockType _touchesEndedCallback;
}

@property(copy, nonatomic) CDUnknownBlockType touchesEndedCallback; // @synthesize touchesEndedCallback=_touchesEndedCallback;
@property(copy, nonatomic) CDUnknownBlockType touchesBeganCallback; // @synthesize touchesBeganCallback=_touchesBeganCallback;
- (void).cxx_destruct;
- (_Bool)canPreventGestureRecognizer:(id)arg1;
- (void)ignoreTouch:(id)arg1 forEvent:(id)arg2;
- (void)reset;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface FollowerDetailsLinkCell : PSTableCell
{
}

+ (long long)cellStyle;
- (void)refreshCellContentsWithSpecifier:(id)arg1;

@end

@interface UIColor (FMF)
+ (id)fmfOrangeColor;
@end

@interface UIImage (FMFTinting)
- (id)tintedImageWithColor:(id)arg1;
@end

@interface UIView (FrameExtensions)
- (void)centerVerticalInView:(id)arg1;
- (void)centerHorizontalInView:(id)arg1;
@end

@interface UIViewController (FMFModal)
- (void)fmf_afterDismissAnimation:(id)arg1;
- (void)fmf_afterPresentAnimation:(id)arg1;
- (id)fmf_dimmingViewForViewController:(id)arg1;
- (void)fmf_dismissModalViewController:(id)arg1;
- (void)fmf_presentModalViewController:(id)arg1;
@end

