//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CloudKit.framework/CloudKit
// UUID: AE7263EA-3CB3-3FBE-BBEC-F022068F2DB9
//
//                           Arch: x86_64
//                Current version: 244.2.0
//          Compatibility version: 1.0.0
//                 Source version: 244.2.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CKBXPCClient <NSObject>
- (void)handleOperationCompletion:(CKOperationResult *)arg1 forOperationWithID:(NSString *)arg2;
- (void)handleOperationProgress:(NSDictionary *)arg1 forOperationWithID:(NSString *)arg2;
@end

@protocol CKDCancelling
- (void)cancel;
@end

@protocol CKPropertyCoding <NSObject>
- (NSDictionary *)dictionaryPropertyEncoding;
- (id)initWithPropertyDictionary:(NSDictionary *)arg1;
@end

@protocol CKRecordValue <NSObject>
@end

@protocol CKShortDescription <NSObject>
- (NSString *)ckShortDescription;
@end

@protocol CKXPCDaemon <NSObject>
- (void)tossConfigWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)repairZonePCSWithInfo:(CKRepairZonePCSOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)getPCSDiagnosticsForZonesWithCompletionHandler:(void (^)(CKPCSDiagnosticInformation *))arg1;
- (void)updatePushTokens;
- (void)wipeAllCachesAndDie;
- (void)statusGroupsForApplicationPermission:(unsigned long long)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;
- (void)resetAllApplicationPermissionsWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)setApplicationPermission:(unsigned long long)arg1 enabled:(_Bool)arg2 completionHandler:(void (^)(long long, NSError *))arg3;
- (void)accountChangedWithID:(NSString *)arg1;
- (void)accountsWillDeleteAccount:(NSString *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)accountsDidRevokeAccessToBundleID:(NSString *)arg1 containerIdentifiers:(NSArray *)arg2;
- (void)accountsDidGrantAccessToBundleID:(NSString *)arg1 containerIdentifiers:(NSArray *)arg2;
- (void)getBehaviorOptionForKey:(NSString *)arg1 isContainerOption:(_Bool)arg2 completionHandler:(void (^)(id))arg3;
- (void)clearAuthTokensForRecordWithID:(CKRecordID *)arg1 inScope:(long long)arg2;
- (void)clearRecordCacheWithDatabaseScope:(long long)arg1;
- (void)clearAssetCacheWithDatabaseScope:(long long)arg1;
- (void)setFakeError:(NSError *)arg1 forNextRequestOfClassName:(NSString *)arg2;
- (void)serverPreferredPushEnvironmentWithCompletionHandler:(void (^)(NSString *, NSError *))arg1;
- (void)performFetchUserQuotaOperation:(CKDatabaseOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performUpdateUserPresenceOperation:(CKUpdateUserPresenceOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchLikesOperation:(CKFetchLikesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performLikeItemsOperation:(CKLikeItemsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performModifyShareCommentsOperation:(CKModifyShareCommentsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchShareCommentsOperation:(CKFetchShareCommentsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performShareInvitationResponseOperation:(CKShareInvitationResponseOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchShareInvitationsOperation:(CKFetchShareInvitationsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performModifySharesOperation:(CKModifySharesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchSharesOperation:(CKFetchSharesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performMarkNotificationsReadOperation:(CKMarkNotificationsReadOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchNotificationChangesOperation:(CKFetchNotificationChangesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performModifyBadgeOperation:(CKModifyBadgeOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchRecordZonesOperation:(CKFetchRecordZonesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performModifyRecordZonesOperation:(CKModifyRecordZonesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchSubscriptionsOperation:(CKFetchSubscriptionsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performModifySubscriptionsOperation:(CKModifySubscriptionsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performQueryOperation:(CKQueryOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)getNewWebSharingIdentity:(void (^)(CKEncryptedData *, NSError *))arg1;
- (void)performModifyWebSharingOperation:(CKModifyWebSharingOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performPublishAssetsOperation:(CKPublishAssetsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchRecordVersionsOperation:(CKFetchRecordVersionsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchRecordChangesOperation:(CKFetchRecordChangesOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performModifyRecordsOperation:(CKModifyRecordsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performFetchRecordsOperation:(CKFetchRecordsOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performDiscoverAllContactsOperation:(CKDiscoverUserInfosOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)performDiscoverUserInfosOperation:(CKDiscoverUserInfosOperationInfo *)arg1 withBlock:(void (^)(void))arg2;
- (void)setContainerID:(CKContainerID *)arg1 bundleID:(NSString *)arg2 accountInfoOverride:(CKAccountInfo *)arg3 withBlock:(void (^)(NSArray *, NSError *))arg4;
- (void)requestApplicationPermission:(unsigned long long)arg1 completionHandler:(void (^)(long long, NSError *))arg2;
- (void)statusForApplicationPermission:(unsigned long long)arg1 completionHandler:(void (^)(long long, NSError *))arg2;
- (void)currentUserIDWithCompletionHandler:(void (^)(NSString *, NSError *))arg1;
- (void)accountStatusWithCompletionHandler:(void (^)(long long, NSError *))arg1;
- (void)cancelOperationWithIdentifier:(NSString *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

__attribute__((visibility("hidden")))
@interface CKASLClient : NSObject
{
    struct __asl_object_s *_aslClient;
    long long _logLevel;
    NSObject<OS_dispatch_queue> *_logQueue;
}

+ (id)ASLClient;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *logQueue; // @synthesize logQueue=_logQueue;
@property(nonatomic) long long logLevel; // @synthesize logLevel=_logLevel;
@property(nonatomic) struct __asl_object_s *aslClient; // @synthesize aslClient=_aslClient;
- (void).cxx_destruct;
- (void)performLoggingBlock:(CDUnknownBlockType)arg1;
- (void)slurpAndRemoveLookasideHumanFile:(id)arg1 binaryFile:(id)arg2 prefixString:(id)arg3 suffixString:(id)arg4 containerIdentifier:(id)arg5 sectionID:(id)arg6;
- (void)_slurpTrafficDataFromHumanReadableFile:(id)arg1 binaryFile:(id)arg2 prefixString:(id)arg3 suffixString:(id)arg4 containerIdentifier:(id)arg5 sectionID:(id)arg6;
- (void)_logTrafficData:(id)arg1 andBinaryData:(id)arg2 withContainerIdentifier:(id)arg3 sectionID:(id)arg4;
- (id)_nilTerminatedCopyOfData:(id)arg1;
- (void)_ensureLogDirectoryExists;
- (void)dealloc;
- (id)init;
- (void)_setLogLevelFromDefaults;
- (unsigned long long)logLevelForASL;

@end

@interface CKAccountInfo : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _isUnitTestingAccount;
    _Bool _accountWantsPushRegistration;
    NSString *_email;
    NSString *_password;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool accountWantsPushRegistration; // @synthesize accountWantsPushRegistration=_accountWantsPushRegistration;
@property(nonatomic) _Bool isUnitTestingAccount; // @synthesize isUnitTestingAccount=_isUnitTestingAccount;
@property(readonly, nonatomic) NSString *password; // @synthesize password=_password;
@property(readonly, nonatomic) NSString *email; // @synthesize email=_email;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)initWithEmail:(id)arg1 password:(id)arg2;

@end

@interface CKApplicationPermissionGroup : NSObject <NSSecureCoding>
{
    NSArray *_containerIDs;
    NSArray *_applicationBundleIDs;
    unsigned long long _enabledPermissions;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long enabledPermissions; // @synthesize enabledPermissions=_enabledPermissions;
@property(retain, nonatomic) NSArray *applicationBundleIDs; // @synthesize applicationBundleIDs=_applicationBundleIDs;
@property(retain, nonatomic) NSArray *containerIDs; // @synthesize containerIDs=_containerIDs;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKArchivedAnchoredPackage : NSObject <NSSecureCoding>
{
    NSString *_anchorPath;
    NSString *_packagePath;
    NSString *_UUID;
    NSArray *_assets;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *assets; // @synthesize assets=_assets;
@property(retain, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
@property(retain, nonatomic) NSString *packagePath; // @synthesize packagePath=_packagePath;
@property(retain, nonatomic) NSString *anchorPath; // @synthesize anchorPath=_anchorPath;
- (void).cxx_destruct;
- (id)awakeAfterUsingCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCKPackage:(id)arg1;

@end

@interface CKAsset : NSObject <CKRecordValue, NSSecureCoding>
{
    _Bool _wasCached;
    _Bool _hasSize;
    _Bool _uploaded;
    NSURL *_fileURL;
    NSData *_signature;
    unsigned long long _size;
    NSNumber *_deviceID;
    NSNumber *_fileID;
    NSNumber *_generationCountToSave;
    NSString *_assetHandleUUID;
    NSURL *_downloadURL;
    NSDate *_downloadURLExpiration;
    NSData *_assetKey;
    NSData *_wrappedAssetKey;
    NSData *_referenceSignature;
    NSString *_referenceIdentifierString;
    NSString *_uploadReceipt;
    CKRecord *_record;
    NSString *_recordKey;
    NSURL *_contentBaseURL;
    NSString *_owner;
    NSString *_requestor;
    NSString *_authToken;
    NSData *_authRequest;
    NSData *_inlineData;
    NSString *_downloadBaseURL;
}

+ (_Bool)supportsSecureCoding;
+ (id)assetWithFileURL:(id)arg1;
@property(retain, nonatomic) NSString *downloadBaseURL; // @synthesize downloadBaseURL=_downloadBaseURL;
@property(copy, nonatomic) NSData *inlineData; // @synthesize inlineData=_inlineData;
@property(copy, nonatomic) NSData *authRequest; // @synthesize authRequest=_authRequest;
@property(copy, nonatomic) NSString *authToken; // @synthesize authToken=_authToken;
@property(retain, nonatomic) NSString *requestor; // @synthesize requestor=_requestor;
@property(retain, nonatomic) NSString *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSURL *contentBaseURL; // @synthesize contentBaseURL=_contentBaseURL;
@property(copy, nonatomic) NSString *recordKey; // @synthesize recordKey=_recordKey;
@property(nonatomic) __weak CKRecord *record; // @synthesize record=_record;
@property(nonatomic, getter=isUploaded) _Bool uploaded; // @synthesize uploaded=_uploaded;
@property(nonatomic) _Bool hasSize; // @synthesize hasSize=_hasSize;
@property(nonatomic) _Bool wasCached; // @synthesize wasCached=_wasCached;
@property(copy, nonatomic) NSString *uploadReceipt; // @synthesize uploadReceipt=_uploadReceipt;
@property(retain, nonatomic) NSString *referenceIdentifierString; // @synthesize referenceIdentifierString=_referenceIdentifierString;
@property(retain, nonatomic) NSData *referenceSignature; // @synthesize referenceSignature=_referenceSignature;
@property(retain, nonatomic) NSData *wrappedAssetKey; // @synthesize wrappedAssetKey=_wrappedAssetKey;
@property(retain, nonatomic) NSData *assetKey; // @synthesize assetKey=_assetKey;
@property(retain, nonatomic) NSDate *downloadURLExpiration; // @synthesize downloadURLExpiration=_downloadURLExpiration;
@property(retain, nonatomic) NSURL *downloadURL; // @synthesize downloadURL=_downloadURL;
@property(retain, nonatomic) NSString *assetHandleUUID; // @synthesize assetHandleUUID=_assetHandleUUID;
@property(retain, nonatomic) NSNumber *generationCountToSave; // @synthesize generationCountToSave=_generationCountToSave;
@property(readonly, nonatomic) NSNumber *fileID; // @synthesize fileID=_fileID;
@property(readonly, nonatomic) NSNumber *deviceID; // @synthesize deviceID=_deviceID;
@property(nonatomic) unsigned long long size; // @synthesize size=_size;
@property(copy, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@property(readonly, copy) NSString *description;
- (id)CKPropertiesDescription;
- (id)initWithDeviceID:(id)arg1 fileID:(id)arg2 generationID:(id)arg3;
- (id)initWithFileURL:(id)arg1;
- (id)initWithFileURL:(id)arg1 signature:(id)arg2 assetHandleUUID:(id)arg3;
- (id)_initBare;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CKBehaviorOptions : NSObject
{
    NSMutableDictionary *_cachedPrefs;
    NSObject<OS_dispatch_queue> *_cachedPrefsQueue;
}

+ (id)sharedOptions;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *cachedPrefsQueue; // @synthesize cachedPrefsQueue=_cachedPrefsQueue;
@property(retain, nonatomic) NSMutableDictionary *cachedPrefs; // @synthesize cachedPrefs=_cachedPrefs;
- (void).cxx_destruct;
- (int)defaultRetryAfter;
- (_Bool)shouldLogProtobufBinary;
- (_Bool)shouldDecryptRecordsBeforeSave;
- (unsigned long long)maxBatchSize;
- (double)flowControlRegenerationOverride;
- (long long)flowControlBudgetOverride;
- (double)flowControlRegeneration;
- (long long)flowControlBudget;
- (void)setBuildVersion:(id)arg1;
- (id)buildVersion;
- (void)setProductVersion:(id)arg1;
- (id)productVersion;
- (void)setProductName:(id)arg1;
- (id)productName;
- (_Bool)_buildIsOverridden;
- (_Bool)useStingray;
- (void)setUseStingray:(_Bool)arg1;
- (_Bool)useEncryption;
- (void)setUseEncryption:(_Bool)arg1;
- (_Bool)optimisticPCS;
- (void)setOptimisticPCS:(_Bool)arg1;
- (unsigned long long)PCSCacheSize;
- (_Bool)sandboxCloudD;
- (_Bool)validateMescalResponses;
- (void)setEnableMescal:(_Bool)arg1;
- (_Bool)enableMescal;
- (_Bool)isAppleInternalInstall;
- (long long)defaultOperationQualityOfService;
- (unsigned long long)assetEvictionGracePeriodOnHighWatermarkWithDefaultValue:(unsigned long long)arg1;
- (unsigned long long)assetEvictionGracePeriodWithDefaultValue:(unsigned long long)arg1;
- (_Bool)evictRecentAssets;
- (id)contextLoggingBlacklist;
- (id)contextLoggingWhitelist;
- (void)setSecondaryAccountPasswordOverride:(id)arg1;
- (id)secondaryAccountPasswordOverride;
- (void)setSecondaryAccountEmailOverride:(id)arg1;
- (id)secondaryAccountEmailOverride;
- (void)setPrimaryAccountPasswordOverride:(id)arg1;
- (id)primaryAccountPasswordOverride;
- (void)setPrimaryAccountEmailOverride:(id)arg1;
- (id)primaryAccountEmailOverride;
- (void)setCustomDeviceServiceBaseURL:(id)arg1;
- (id)customDeviceServiceBaseURL;
- (void)setCustomShareServiceBaseURL:(id)arg1;
- (id)customShareServiceBaseURL;
- (void)setCustomCloudDBBaseURL:(id)arg1;
- (id)customCloudDBBaseURL;
- (void)setSetupBaseURL:(id)arg1;
- (id)setupBaseURL;
- (void)setConfigBaseURL:(id)arg1;
- (id)configBaseURL;
- (id)_urlForKey:(id)arg1 defaultURLString:(id)arg2;
- (int)clientThrottleQueueWidth;
- (void)setUseBackgroundSessions:(_Bool)arg1;
- (_Bool)useBackgroundSessions;
- (void)setCompressRequests:(_Bool)arg1;
- (_Bool)compressRequests;
- (void)setShouldProfileSQL:(_Bool)arg1;
- (_Bool)shouldProfileSQL;
- (void)setDisableCaching:(_Bool)arg1;
- (_Bool)disableCaching;
- (void)setCFNetworkLogging:(_Bool)arg1;
- (_Bool)CFNetworkLogging;
- (void)setCKCtlPrompt:(char *)arg1;
- (const char *)CKCtlPrompt;
- (void)setTrafficLogMaximumDataSize:(int)arg1;
- (int)trafficLogMaximumDataSize;
- (void)setOperationTimeout:(double)arg1;
- (double)operationTimeout;
- (void)setDefaultRequestTimeout:(double)arg1;
- (double)defaultRequestTimeout;
- (void)setServerIDExpiryTime:(int)arg1;
- (int)serverIDExpiryTime;
- (void)setCachedRecordExpiryTime:(int)arg1;
- (int)cachedRecordExpiryTime;
- (void)_setPref:(id)arg1 forKey:(id)arg2;
- (id)_getArrayOptionForKey:(id)arg1 defaultValue:(id)arg2;
- (id)_getStringOptionForKey:(id)arg1 defaultValue:(id)arg2;
- (id)_getStringOptionLockedForKey:(id)arg1 defaultValue:(id)arg2;
- (double)_getDoubleOptionForKey:(id)arg1 defaultValue:(double)arg2;
- (int)_getIntOptionForKey:(id)arg1 defaultValue:(int)arg2;
- (_Bool)_getBoolOptionForKey:(id)arg1 defaultValue:(_Bool)arg2;
- (id)_behaviorContainerOptionForKey:(id)arg1;
- (id)_behaviorOptionForKey:(id)arg1;
- (id)init;
- (void)_startListeningForNotifications;

@end

@interface CKComment : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_commentID;
    CKSharedItemID *_commentedItemID;
    NSString *_message;
    NSString *_context;
    NSString *_commenterID;
    NSDate *_creationDate;
    NSString *_localID;
    CKContainerID *_containerID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
@property(copy, nonatomic) NSString *localID; // @synthesize localID=_localID;
@property(copy, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
@property(copy, nonatomic) NSString *commenterID; // @synthesize commenterID=_commenterID;
@property(copy, nonatomic) NSString *context; // @synthesize context=_context;
@property(copy, nonatomic) NSString *message; // @synthesize message=_message;
@property(copy, nonatomic) CKSharedItemID *commentedItemID; // @synthesize commentedItemID=_commentedItemID;
@property(copy, nonatomic) NSString *commentID; // @synthesize commentID=_commentID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)sharedItemID;
- (void)CKAssignToContainerWithID:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initBare;
- (id)init;
- (id)initWithMessage:(id)arg1 item:(id)arg2;
- (id)_initWithMessage:(id)arg1 itemID:(id)arg2;

@end

@interface CKCommentCursor : NSObject <NSCopying, NSSecureCoding>
{
    NSData *_data;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithData:(id)arg1;
- (id)init;

@end

@interface CKNotification : NSObject <NSSecureCoding>
{
    _Bool _isPruned;
    long long _notificationType;
    CKNotificationID *_notificationID;
    NSString *_containerIdentifier;
    NSString *_alertBody;
    NSString *_alertLocalizationKey;
    NSArray *_alertLocalizationArgs;
    NSString *_alertActionLocalizationKey;
    NSString *_alertLaunchImage;
    NSNumber *_badge;
    NSString *_soundName;
}

+ (_Bool)supportsSecureCoding;
+ (id)notificationFromRemoteNotificationDictionary:(id)arg1;
+ (id)_realNotificationFromRemoteNotificationDictionary:(id)arg1;
@property(copy, nonatomic) NSString *soundName; // @synthesize soundName=_soundName;
@property(copy, nonatomic) NSNumber *badge; // @synthesize badge=_badge;
@property(copy, nonatomic) NSString *alertLaunchImage; // @synthesize alertLaunchImage=_alertLaunchImage;
@property(copy, nonatomic) NSString *alertActionLocalizationKey; // @synthesize alertActionLocalizationKey=_alertActionLocalizationKey;
@property(copy, nonatomic) NSArray *alertLocalizationArgs; // @synthesize alertLocalizationArgs=_alertLocalizationArgs;
@property(copy, nonatomic) NSString *alertLocalizationKey; // @synthesize alertLocalizationKey=_alertLocalizationKey;
@property(copy, nonatomic) NSString *alertBody; // @synthesize alertBody=_alertBody;
@property(nonatomic) _Bool isPruned; // @synthesize isPruned=_isPruned;
@property(copy, nonatomic) NSString *containerIdentifier; // @synthesize containerIdentifier=_containerIdentifier;
@property(copy, nonatomic) CKNotificationID *notificationID; // @synthesize notificationID=_notificationID;
@property(nonatomic) long long notificationType; // @synthesize notificationType=_notificationType;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (_Bool)isRead;
- (id)description;
- (id)CKPropertiesDescription;
- (id)_initBare;
- (id)init;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKCommentNotification : CKNotification <NSSecureCoding>
{
    CKShareID *_shareID;
    NSString *_commentID;
    CKSharedItemID *_commentedItemID;
    NSString *_commenterID;
    NSString *_message;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *message; // @synthesize message=_message;
@property(copy, nonatomic) NSString *commenterID; // @synthesize commenterID=_commenterID;
@property(copy, nonatomic) CKSharedItemID *commentedItemID; // @synthesize commentedItemID=_commentedItemID;
@property(copy, nonatomic) NSString *commentID; // @synthesize commentID=_commentID;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

@interface CKCommentQuery : NSObject <NSSecureCoding, NSCopying>
{
    CKShareID *_shareID;
    NSObject<CKCommenting> *_owner;
    NSString *_context;
    long long _resultsOrdering;
    CKSharedItemID *_creatorID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) CKSharedItemID *creatorID; // @synthesize creatorID=_creatorID;
@property(nonatomic) long long resultsOrdering; // @synthesize resultsOrdering=_resultsOrdering;
@property(retain, nonatomic) NSString *context; // @synthesize context=_context;
@property(retain, nonatomic) NSObject<CKCommenting> *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithShareID:(id)arg1;

@end

@interface CKContainer : NSObject
{
    _Bool _connectionIsInvalid;
    _Bool _shouldSendClientIDs;
    int _statusReportToken;
    int _killSwitchToken;
    CKContainerID *_containerID;
    CKRecordID *_containerScopedUserID;
    CKDatabase *_privateCloudDatabase;
    CKDatabase *_publicCloudDatabase;
    NSXPCConnection *_xpcConnection;
    NSOperationQueue *_convenienceOperationQueue;
    NSOperationQueue *_throttlingOperationQueue;
    CKOperationCallbackManager *_callbackManager;
    CKOperationFlowControlManager *_flowControlManager;
    CKAccountInfo *_accountInfoOverride;
    ACAccountStore *_accountStore;
    NSMutableArray *_sandboxExtensionHandles;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_sourceApplicationSecondaryIdentifier;
}

+ (void)getBehaviorOptionForKey:(id)arg1 isContainerOption:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (id)containerWithIdentifier:(id)arg1;
+ (id)defaultContainer;
@property(retain, nonatomic) NSString *sourceApplicationSecondaryIdentifier; // @synthesize sourceApplicationSecondaryIdentifier=_sourceApplicationSecondaryIdentifier;
@property(retain, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(retain, nonatomic) NSMutableArray *sandboxExtensionHandles; // @synthesize sandboxExtensionHandles=_sandboxExtensionHandles;
@property(nonatomic) int killSwitchToken; // @synthesize killSwitchToken=_killSwitchToken;
@property(nonatomic) int statusReportToken; // @synthesize statusReportToken=_statusReportToken;
@property(retain, nonatomic) ACAccountStore *accountStore; // @synthesize accountStore=_accountStore;
@property(copy, nonatomic) CKAccountInfo *accountInfoOverride; // @synthesize accountInfoOverride=_accountInfoOverride;
@property(retain, nonatomic) CKOperationFlowControlManager *flowControlManager; // @synthesize flowControlManager=_flowControlManager;
@property(retain, nonatomic) CKOperationCallbackManager *callbackManager; // @synthesize callbackManager=_callbackManager;
@property(retain, nonatomic) NSOperationQueue *throttlingOperationQueue; // @synthesize throttlingOperationQueue=_throttlingOperationQueue;
@property(retain, nonatomic) NSOperationQueue *convenienceOperationQueue; // @synthesize convenienceOperationQueue=_convenienceOperationQueue;
@property(nonatomic) _Bool shouldSendClientIDs; // @synthesize shouldSendClientIDs=_shouldSendClientIDs;
@property(nonatomic) _Bool connectionIsInvalid; // @synthesize connectionIsInvalid=_connectionIsInvalid;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(retain, nonatomic) CKDatabase *publicCloudDatabase; // @synthesize publicCloudDatabase=_publicCloudDatabase;
@property(retain, nonatomic) CKDatabase *privateCloudDatabase; // @synthesize privateCloudDatabase=_privateCloudDatabase;
@property(retain, nonatomic) CKRecordID *containerScopedUserID; // @synthesize containerScopedUserID=_containerScopedUserID;
@property(retain, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
- (void).cxx_destruct;
- (id)statusReport;
- (void)updatePushTokens;
- (void)wipeAllCachesAndDie;
- (void)setEffectiveClientBundleIdentifier:(id)arg1;
- (void)setFakeError:(id)arg1 forNextRequestOfClassName:(id)arg2;
- (void)serverPreferredPushEnvironmentWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)tossConfigWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)resetAllApplicationPermissionsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setApplicationPermission:(unsigned long long)arg1 enabled:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)accountChangedWithID:(id)arg1;
- (void)accountsWillDeleteAccount:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)accountsDidRevokeAccessToBundleID:(id)arg1 containerIdentifiers:(id)arg2;
- (void)accountsDidGrantAccessToBundleID:(id)arg1 containerIdentifiers:(id)arg2;
- (void)statusGroupsForApplicationPermission:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)addOperation:(id)arg1;
- (void)handleOperationCompletion:(id)arg1 forOperationWithID:(id)arg2;
- (void)handleOperationProgress:(id)arg1 forOperationWithID:(id)arg2;
- (id)daemonWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)connection;
- (void)_synchronouslySendContextInformation;
- (void)_consumeSandboxExtensions:(id)arg1;
- (void)_cleanupSandboxExtensionHandles:(id)arg1;
@property(readonly, nonatomic) NSString *containerIdentifier;
- (long long)_untrustedDatabaseEnvironment;
- (id)_checkSelfContainerIdentifier;
- (void)_checkSelfCloudServicesEntitlement;
- (id)_untrustedEntitlementForKey:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (void)dealloc;
- (id)initWithContainerID:(id)arg1;
- (id)initWithContainerID:(id)arg1 accountInfoOverride:(id)arg2;
- (id)_initWithContainerIdentifier:(id)arg1;
- (id)_initWithContainerIdentifier:(id)arg1 environment:(long long)arg2;
- (void)_setupWithContainerID:(id)arg1 accountInfoOverride:(id)arg2;
- (void)discoverUserInfoWithUserRecordID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)discoverUserInfoWithEmailAddress:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)discoverAllContactUserInfosWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)fetchUserRecordIDWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getNewWebSharingIdentity:(CDUnknownBlockType)arg1;
- (void)fetchLikesForItem:(id)arg1 inShareWithID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setLike:(_Bool)arg1 forItem:(id)arg2 inShareWithID:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)deleteCommentWithID:(id)arg1 inShareWithID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)saveComment:(id)arg1 inShareWithID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchCommentsForItem:(id)arg1 inShareWithID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)respondToInvitation:(id)arg1 accept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchAllReceivedInvitationsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)deleteShareWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveShare:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchAllSharesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)fetchShareWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)removePresenceObserver:(id)arg1 inShareWithID:(id)arg2;
- (void)addPresenceObserver:(id)arg1 inShareWithID:(id)arg2;
- (void)updateCurrentUserStatus:(long long)arg1 inShareWithID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)accountStatusWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)requestApplicationPermission:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)statusForApplicationPermission:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface CKContainerID : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_containerIdentifier;
    long long _environment;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) long long environment; // @synthesize environment=_environment;
@property(readonly, nonatomic) NSString *containerIdentifier; // @synthesize containerIdentifier=_containerIdentifier;
- (void).cxx_destruct;
- (id)dictionaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithContainerIdentifier:(id)arg1 environment:(long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface CKDCancelToken : NSObject <CKDCancelling>
{
    _Bool _isCancelled;
    CDUnknownBlockType _cancelAction;
}

@property(copy, nonatomic) CDUnknownBlockType cancelAction; // @synthesize cancelAction=_cancelAction;
- (void).cxx_destruct;
- (void)cancel;
- (_Bool)isCancelled;

@end

@interface CKDatabase : NSObject
{
    int _statusReportToken;
    CKContainer *_container;
    long long _scope;
    NSOperationQueue *_operationQueue;
}

@property(nonatomic) int statusReportToken; // @synthesize statusReportToken=_statusReportToken;
@property(readonly, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic) long long scope; // @synthesize scope=_scope;
@property(nonatomic) __weak CKContainer *container; // @synthesize container=_container;
- (void).cxx_destruct;
- (id)statusReport;
- (void)getPCSDiagnosticsForZonesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)clearAuthTokensForRecordWithID:(id)arg1;
- (void)clearRecordCache;
- (void)clearAssetCache;
- (id)daemonWithErrorHandler:(CDUnknownBlockType)arg1;
- (void)addOperation:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (void)dealloc;
- (id)_initWithContainer:(id)arg1 scope:(long long)arg2;
- (id)init;
- (void)fetchAllSubscriptionsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)fetchSubscriptionWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)deleteSubscriptionWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveSubscription:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)deleteRecordZoneWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveRecordZone:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchRecordZoneWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchAllRecordZonesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)performQuery:(id)arg1 inZoneWithID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)deleteRecordWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveRecord:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)fetchRecordWithID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_scheduleOperation:(id)arg1;

@end

@interface CKOperation : NSOperation
{
    _Bool _allowsCellularAccess;
    _Bool _isExecuting;
    _Bool _isFinished;
    _Bool _isDiscretionary;
    CKContainer *_container;
    CKPlaceholderOperation *_placeholderOperation;
    NSString *_operationID;
    NSError *_error;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSString *_sectionID;
    NSString *_parentSectionID;
    id _context;
    NSArray *_requestUUIDs;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_sourceApplicationSecondaryIdentifier;
    NSString *_deviceIdentifier;
    NSObject<OS_dispatch_source> *_timeoutSource;
    long long _usesBackgroundSessionOverride;
}

@property(nonatomic) long long usesBackgroundSessionOverride; // @synthesize usesBackgroundSessionOverride=_usesBackgroundSessionOverride;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *timeoutSource; // @synthesize timeoutSource=_timeoutSource;
@property(retain, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
@property(retain, nonatomic) NSString *sourceApplicationSecondaryIdentifier; // @synthesize sourceApplicationSecondaryIdentifier=_sourceApplicationSecondaryIdentifier;
@property(retain, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(retain, nonatomic) NSArray *requestUUIDs; // @synthesize requestUUIDs=_requestUUIDs;
@property(nonatomic) _Bool isDiscretionary; // @synthesize isDiscretionary=_isDiscretionary;
@property(readonly, nonatomic) id context; // @synthesize context=_context;
@property(readonly, nonatomic) NSString *parentSectionID; // @synthesize parentSectionID=_parentSectionID;
@property(retain, nonatomic) NSString *sectionID; // @synthesize sectionID=_sectionID;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) _Bool isFinished; // @synthesize isFinished=_isFinished;
@property(nonatomic) _Bool isExecuting; // @synthesize isExecuting=_isExecuting;
@property(retain, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
@property(retain, nonatomic) CKPlaceholderOperation *placeholderOperation; // @synthesize placeholderOperation=_placeholderOperation;
@property(nonatomic) _Bool allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property(retain, nonatomic) CKContainer *container; // @synthesize container=_container;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)finishWithError:(id)arg1;
- (void)_finishInternalOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
@property(nonatomic) _Bool usesBackgroundSession;
- (id)daemon;
- (id)description;
- (id)CKPropertiesDescription;
- (void)processOperationResult:(id)arg1;
- (void)_installTimeoutSource;
- (void)_uninstallTimeoutSource;
- (void)cancel;
@property(readonly, nonatomic) CKOperationInfo *operationInfo;
- (Class)operationInfoClass;
- (void)fillOutOperationInfo:(id)arg1;
- (_Bool)isConcurrent;
- (void)main;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)performCKOperation;
- (void)start;
- (void)dealloc;
- (id)init;

@end

@interface CKDatabaseOperation : CKOperation
{
    CKDatabase *_database;
}

- (void).cxx_destruct;
- (void)fillOutOperationInfo:(id)arg1;
@property(retain, nonatomic) CKDatabase *database; // @synthesize database=_database;

@end

@interface CKOperationInfo : NSObject <NSSecureCoding>
{
    _Bool _allowsCellularAccess;
    NSString *_operationID;
    NSString *_parentSectionID;
    long long _usesBackgroundSessionOverride;
    long long _qualityOfService;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_sourceApplicationSecondaryIdentifier;
    NSString *_deviceIdentifier;
    id _parentOperation;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) __weak id parentOperation; // @synthesize parentOperation=_parentOperation;
@property(retain, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
@property(retain, nonatomic) NSString *sourceApplicationSecondaryIdentifier; // @synthesize sourceApplicationSecondaryIdentifier=_sourceApplicationSecondaryIdentifier;
@property(retain, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(nonatomic) long long qualityOfService; // @synthesize qualityOfService=_qualityOfService;
@property(nonatomic) _Bool allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property(nonatomic) long long usesBackgroundSessionOverride; // @synthesize usesBackgroundSessionOverride=_usesBackgroundSessionOverride;
@property(retain, nonatomic) NSString *parentSectionID; // @synthesize parentSectionID=_parentSectionID;
@property(retain, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

@interface CKDatabaseOperationInfo : CKOperationInfo <NSSecureCoding>
{
    long long _databaseScope;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long databaseScope; // @synthesize databaseScope=_databaseScope;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKDiscoverAllContactsOperation : CKOperation
{
    CDUnknownBlockType _discoverAllContactsCompletionBlock;
    NSMutableArray *_discoveredUserInfos;
}

@property(retain, nonatomic) NSMutableArray *discoveredUserInfos; // @synthesize discoveredUserInfos=_discoveredUserInfos;
@property(copy, nonatomic) CDUnknownBlockType discoverAllContactsCompletionBlock; // @synthesize discoverAllContactsCompletionBlock=_discoverAllContactsCompletionBlock;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (Class)operationInfoClass;
- (id)init;

@end

@interface CKDiscoverUserInfosOperation : CKOperation
{
    NSArray *_emailAddresses;
    NSArray *_userRecordIDs;
    CDUnknownBlockType _discoverUserInfosCompletionBlock;
    NSMutableDictionary *_emailsToUserInfos;
    NSMutableDictionary *_userRecordIDsToUserInfos;
}

@property(retain, nonatomic) NSMutableDictionary *userRecordIDsToUserInfos; // @synthesize userRecordIDsToUserInfos=_userRecordIDsToUserInfos;
@property(retain, nonatomic) NSMutableDictionary *emailsToUserInfos; // @synthesize emailsToUserInfos=_emailsToUserInfos;
@property(copy, nonatomic) CDUnknownBlockType discoverUserInfosCompletionBlock; // @synthesize discoverUserInfosCompletionBlock=_discoverUserInfosCompletionBlock;
@property(copy, nonatomic) NSArray *userRecordIDs; // @synthesize userRecordIDs=_userRecordIDs;
@property(copy, nonatomic) NSArray *emailAddresses; // @synthesize emailAddresses=_emailAddresses;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithEmailAddresses:(id)arg1 userRecordIDs:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKDiscoverUserInfosOperationInfo : CKOperationInfo <NSSecureCoding>
{
    _Bool _shouldDiscoverAllContacts;
    NSArray *_emails;
    NSArray *_userRecordIDs;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool shouldDiscoverAllContacts; // @synthesize shouldDiscoverAllContacts=_shouldDiscoverAllContacts;
@property(retain, nonatomic) NSArray *userRecordIDs; // @synthesize userRecordIDs=_userRecordIDs;
@property(retain, nonatomic) NSArray *emails; // @synthesize emails=_emails;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKDiscoveredUserInfo : NSObject <NSSecureCoding, NSCopying>
{
    CKRecordID *_userRecordID;
    NSString *_firstName;
    NSString *_lastName;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *lastName; // @synthesize lastName=_lastName;
@property(copy, nonatomic) NSString *firstName; // @synthesize firstName=_firstName;
@property(copy, nonatomic) CKRecordID *userRecordID; // @synthesize userRecordID=_userRecordID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithUserRecordID:(id)arg1 firstName:(id)arg2 lastName:(id)arg3;

@end

@interface CKEncryptedData : NSObject <CKRecordValue, NSCopying, NSSecureCoding>
{
    NSData *_data;
    NSData *_encryptedData;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSData *encryptedData; // @synthesize encryptedData=_encryptedData;
@property(copy, nonatomic) NSData *data; // @synthesize data=_data;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (id)CKPropertiesDescription;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithEncryptedData:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface CKException : NSException
{
}

- (id)error;
- (int)errorCode;
- (id)initWithName:(id)arg1 format:(id)arg2 args:(struct __va_list_tag [1])arg3;
- (id)initWithName:(id)arg1 format:(id)arg2;
- (id)initWithCode:(int)arg1 format:(id)arg2 args:(struct __va_list_tag [1])arg3;
- (id)initWithCode:(int)arg1 format:(id)arg2;

@end

@interface CKFetchLikesOperation : CKOperation
{
    NSArray *_itemIDs;
    CKShareID *_shareID;
    unsigned long long _resultsLimit;
    CDUnknownBlockType _fetchLikesCompletionBlock;
    NSMutableDictionary *_userIDsByItemID;
    NSMutableDictionary *_likeCountByItemID;
    NSMutableDictionary *_errorsByItemID;
}

@property(retain, nonatomic) NSMutableDictionary *errorsByItemID; // @synthesize errorsByItemID=_errorsByItemID;
@property(retain, nonatomic) NSMutableDictionary *likeCountByItemID; // @synthesize likeCountByItemID=_likeCountByItemID;
@property(retain, nonatomic) NSMutableDictionary *userIDsByItemID; // @synthesize userIDsByItemID=_userIDsByItemID;
@property(copy, nonatomic) CDUnknownBlockType fetchLikesCompletionBlock; // @synthesize fetchLikesCompletionBlock=_fetchLikesCompletionBlock;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(copy, nonatomic) NSArray *itemIDs; // @synthesize itemIDs=_itemIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithItems:(id)arg1 inShareWithID:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CKFetchLikesOperationInfo : CKOperationInfo
{
    NSArray *_itemIDs;
    CKShareID *_shareID;
    unsigned long long _resultsLimit;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(retain, nonatomic) NSArray *itemIDs; // @synthesize itemIDs=_itemIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchNotificationChangesOperation : CKOperation
{
    _Bool _moreComing;
    CKServerChangeToken *_previousServerChangeToken;
    unsigned long long _resultsLimit;
    CDUnknownBlockType _notificationChangedBlock;
    CDUnknownBlockType _fetchNotificationChangesCompletionBlock;
    CKServerChangeToken *_resultServerChangeToken;
}

@property(retain, nonatomic) CKServerChangeToken *resultServerChangeToken; // @synthesize resultServerChangeToken=_resultServerChangeToken;
@property(copy, nonatomic) CDUnknownBlockType fetchNotificationChangesCompletionBlock; // @synthesize fetchNotificationChangesCompletionBlock=_fetchNotificationChangesCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType notificationChangedBlock; // @synthesize notificationChangedBlock=_notificationChangedBlock;
@property(readonly, nonatomic) _Bool moreComing; // @synthesize moreComing=_moreComing;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(copy, nonatomic) CKServerChangeToken *previousServerChangeToken; // @synthesize previousServerChangeToken=_previousServerChangeToken;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithPreviousServerChangeToken:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKFetchNotificationChangesOperationInfo : CKOperationInfo <NSSecureCoding>
{
    CKServerChangeToken *_previousServerChangeToken;
    unsigned long long _resultsLimit;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(retain, nonatomic) CKServerChangeToken *previousServerChangeToken; // @synthesize previousServerChangeToken=_previousServerChangeToken;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKOperationResult : NSObject <NSSecureCoding>
{
    NSString *_operationID;
    NSError *_error;
    NSArray *_requestUUIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *requestUUIDs; // @synthesize requestUUIDs=_requestUUIDs;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;

@end

@interface CKFetchNotificationChangesOperationResult : CKOperationResult <NSSecureCoding>
{
    _Bool _moreComing;
    CKServerChangeToken *_serverChangeToken;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool moreComing; // @synthesize moreComing=_moreComing;
@property(retain, nonatomic) CKServerChangeToken *serverChangeToken; // @synthesize serverChangeToken=_serverChangeToken;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;

@end

@interface CKFetchRecordChangesOperation : CKDatabaseOperation
{
    _Bool _shouldFetchAssetContents;
    CKRecordZoneID *_recordZoneID;
    CKServerChangeToken *_previousServerChangeToken;
    unsigned long long _resultsLimit;
    NSArray *_desiredKeys;
    CDUnknownBlockType _recordChangedBlock;
    CDUnknownBlockType _recordWithIDWasDeletedBlock;
    CDUnknownBlockType _fetchRecordChangesCompletionBlock;
    CKServerChangeToken *_resultServerChangeToken;
    NSData *_resultClientChangeTokenData;
    long long _status;
    NSMutableDictionary *_recordErrors;
}

@property(retain, nonatomic) NSMutableDictionary *recordErrors; // @synthesize recordErrors=_recordErrors;
@property(nonatomic) _Bool shouldFetchAssetContents; // @synthesize shouldFetchAssetContents=_shouldFetchAssetContents;
@property(nonatomic) long long status; // @synthesize status=_status;
@property(retain, nonatomic) NSData *resultClientChangeTokenData; // @synthesize resultClientChangeTokenData=_resultClientChangeTokenData;
@property(retain, nonatomic) CKServerChangeToken *resultServerChangeToken; // @synthesize resultServerChangeToken=_resultServerChangeToken;
@property(copy, nonatomic) CDUnknownBlockType fetchRecordChangesCompletionBlock; // @synthesize fetchRecordChangesCompletionBlock=_fetchRecordChangesCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType recordWithIDWasDeletedBlock; // @synthesize recordWithIDWasDeletedBlock=_recordWithIDWasDeletedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordChangedBlock; // @synthesize recordChangedBlock=_recordChangedBlock;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(copy, nonatomic) CKServerChangeToken *previousServerChangeToken; // @synthesize previousServerChangeToken=_previousServerChangeToken;
@property(copy, nonatomic) CKRecordZoneID *recordZoneID; // @synthesize recordZoneID=_recordZoneID;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
@property(readonly, nonatomic) _Bool moreComing;
- (id)initWithRecordZoneID:(id)arg1 previousServerChangeToken:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CKFetchRecordChangesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _shouldFetchAssetContents;
    CKRecordZoneID *_recordZoneID;
    CKServerChangeToken *_previousServerChangeToken;
    NSArray *_desiredKeys;
    unsigned long long _resultsLimit;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(nonatomic) _Bool shouldFetchAssetContents; // @synthesize shouldFetchAssetContents=_shouldFetchAssetContents;
@property(retain, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(retain, nonatomic) CKServerChangeToken *previousServerChangeToken; // @synthesize previousServerChangeToken=_previousServerChangeToken;
@property(retain, nonatomic) CKRecordZoneID *recordZoneID; // @synthesize recordZoneID=_recordZoneID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchRecordChangesOperationResult : CKOperationResult <NSSecureCoding>
{
    CKServerChangeToken *_serverChangeToken;
    NSData *_clientChangeTokenData;
    NSNumber *_status;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSNumber *status; // @synthesize status=_status;
@property(retain, nonatomic) NSData *clientChangeTokenData; // @synthesize clientChangeTokenData=_clientChangeTokenData;
@property(retain, nonatomic) CKServerChangeToken *serverChangeToken; // @synthesize serverChangeToken=_serverChangeToken;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;

@end

@interface CKFetchRecordVersionsOperation : CKDatabaseOperation
{
    _Bool _isDeleted;
    NSArray *_recordIDs;
    NSArray *_desiredKeys;
    NSString *_minimumVersionETag;
    CDUnknownBlockType _fetchRecordVersionsProgressBlock;
    CDUnknownBlockType _fetchRecordVersionsCompletionBlock;
    NSMutableDictionary *_recordErrors;
}

@property(nonatomic) _Bool isDeleted; // @synthesize isDeleted=_isDeleted;
@property(retain, nonatomic) NSMutableDictionary *recordErrors; // @synthesize recordErrors=_recordErrors;
@property(copy, nonatomic) CDUnknownBlockType fetchRecordVersionsCompletionBlock; // @synthesize fetchRecordVersionsCompletionBlock=_fetchRecordVersionsCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType fetchRecordVersionsProgressBlock; // @synthesize fetchRecordVersionsProgressBlock=_fetchRecordVersionsProgressBlock;
@property(copy, nonatomic) NSString *minimumVersionETag; // @synthesize minimumVersionETag=_minimumVersionETag;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(copy, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordIDs:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKFetchRecordVersionsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    NSArray *_recordIDs;
    NSArray *_desiredKeys;
    NSString *_minimumVersionETag;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *minimumVersionETag; // @synthesize minimumVersionETag=_minimumVersionETag;
@property(retain, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(retain, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchRecordZonesOperation : CKDatabaseOperation
{
    _Bool _isFetchAllRecordZonesOperation;
    _Bool _ignorePCSFailures;
    NSArray *_recordZoneIDs;
    CDUnknownBlockType _fetchRecordZonesCompletionBlock;
    NSArray *_recordZones;
    NSMutableDictionary *_recordZonesByZoneID;
    NSMutableDictionary *_recordZoneErrors;
    NSError *_fetchAllRecordZonesError;
}

+ (id)fetchAllRecordZonesOperation;
@property(nonatomic) _Bool ignorePCSFailures; // @synthesize ignorePCSFailures=_ignorePCSFailures;
@property(nonatomic) _Bool isFetchAllRecordZonesOperation; // @synthesize isFetchAllRecordZonesOperation=_isFetchAllRecordZonesOperation;
@property(retain, nonatomic) NSError *fetchAllRecordZonesError; // @synthesize fetchAllRecordZonesError=_fetchAllRecordZonesError;
@property(retain, nonatomic) NSMutableDictionary *recordZoneErrors; // @synthesize recordZoneErrors=_recordZoneErrors;
@property(retain, nonatomic) NSMutableDictionary *recordZonesByZoneID; // @synthesize recordZonesByZoneID=_recordZonesByZoneID;
@property(retain, nonatomic) NSArray *recordZones; // @synthesize recordZones=_recordZones;
@property(copy, nonatomic) CDUnknownBlockType fetchRecordZonesCompletionBlock; // @synthesize fetchRecordZonesCompletionBlock=_fetchRecordZonesCompletionBlock;
@property(copy, nonatomic) NSArray *recordZoneIDs; // @synthesize recordZoneIDs=_recordZoneIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordZoneIDs:(id)arg1;
- (id)init;

@end

@interface CKFetchRecordZonesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _isFetchAllRecordZonesOperation;
    _Bool _ignorePCSFailures;
    NSArray *_recordZoneIDs;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool ignorePCSFailures; // @synthesize ignorePCSFailures=_ignorePCSFailures;
@property(nonatomic) _Bool isFetchAllRecordZonesOperation; // @synthesize isFetchAllRecordZonesOperation=_isFetchAllRecordZonesOperation;
@property(retain, nonatomic) NSArray *recordZoneIDs; // @synthesize recordZoneIDs=_recordZoneIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchRecordsOperation : CKDatabaseOperation
{
    _Bool _shouldFetchAssetContent;
    _Bool _isFetchCurrentUserOperation;
    NSArray *_recordIDs;
    NSArray *_desiredKeys;
    CDUnknownBlockType _perRecordProgressBlock;
    CDUnknownBlockType _perRecordCompletionBlock;
    CDUnknownBlockType _fetchRecordsCompletionBlock;
    NSMutableDictionary *_signaturesOfAssetsByRecordIDAndKey;
    NSMutableDictionary *_recordIDsToRecords;
    NSMutableDictionary *_recordErrors;
    NSDictionary *_desiredPackageFileIndices;
    NSDictionary *_recordIDsToVersionETags;
    NSDictionary *_webSharingIdentityDataByRecordID;
}

+ (id)fetchCurrentUserRecordOperation;
@property(retain, nonatomic) NSDictionary *webSharingIdentityDataByRecordID; // @synthesize webSharingIdentityDataByRecordID=_webSharingIdentityDataByRecordID;
@property(retain, nonatomic) NSDictionary *recordIDsToVersionETags; // @synthesize recordIDsToVersionETags=_recordIDsToVersionETags;
@property(nonatomic) _Bool isFetchCurrentUserOperation; // @synthesize isFetchCurrentUserOperation=_isFetchCurrentUserOperation;
@property(copy, nonatomic) NSDictionary *desiredPackageFileIndices; // @synthesize desiredPackageFileIndices=_desiredPackageFileIndices;
@property(retain, nonatomic) NSMutableDictionary *recordErrors; // @synthesize recordErrors=_recordErrors;
@property(retain, nonatomic) NSMutableDictionary *recordIDsToRecords; // @synthesize recordIDsToRecords=_recordIDsToRecords;
@property(retain, nonatomic) NSMutableDictionary *signaturesOfAssetsByRecordIDAndKey; // @synthesize signaturesOfAssetsByRecordIDAndKey=_signaturesOfAssetsByRecordIDAndKey;
@property(nonatomic) _Bool shouldFetchAssetContent; // @synthesize shouldFetchAssetContent=_shouldFetchAssetContent;
@property(copy, nonatomic) CDUnknownBlockType fetchRecordsCompletionBlock; // @synthesize fetchRecordsCompletionBlock=_fetchRecordsCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType perRecordCompletionBlock; // @synthesize perRecordCompletionBlock=_perRecordCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType perRecordProgressBlock; // @synthesize perRecordProgressBlock=_perRecordProgressBlock;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(copy, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordIDs:(id)arg1;
- (id)init;

@end

@interface CKFetchRecordsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _isFetchCurrentUserOperation;
    _Bool _shouldFetchAssetContent;
    NSArray *_recordIDs;
    NSArray *_desiredKeys;
    NSDictionary *_recordIDsToVersionETags;
    NSDictionary *_desiredPackageFileIndices;
    NSDictionary *_signaturesOfAssetsByRecordIDAndKey;
    NSSet *_assetFieldNamesToPublishURLs;
    unsigned long long _requestedTTL;
    unsigned long long _URLOptions;
    NSDictionary *_webSharingIdentityDataByRecordID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSDictionary *webSharingIdentityDataByRecordID; // @synthesize webSharingIdentityDataByRecordID=_webSharingIdentityDataByRecordID;
@property(nonatomic) unsigned long long URLOptions; // @synthesize URLOptions=_URLOptions;
@property(nonatomic) unsigned long long requestedTTL; // @synthesize requestedTTL=_requestedTTL;
@property(retain, nonatomic) NSSet *assetFieldNamesToPublishURLs; // @synthesize assetFieldNamesToPublishURLs=_assetFieldNamesToPublishURLs;
@property(retain, nonatomic) NSDictionary *signaturesOfAssetsByRecordIDAndKey; // @synthesize signaturesOfAssetsByRecordIDAndKey=_signaturesOfAssetsByRecordIDAndKey;
@property(nonatomic) _Bool shouldFetchAssetContent; // @synthesize shouldFetchAssetContent=_shouldFetchAssetContent;
@property(retain, nonatomic) NSDictionary *desiredPackageFileIndices; // @synthesize desiredPackageFileIndices=_desiredPackageFileIndices;
@property(retain, nonatomic) NSDictionary *recordIDsToVersionETags; // @synthesize recordIDsToVersionETags=_recordIDsToVersionETags;
@property(retain, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(nonatomic) _Bool isFetchCurrentUserOperation; // @synthesize isFetchCurrentUserOperation=_isFetchCurrentUserOperation;
@property(retain, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchShareCommentsOperation : CKOperation
{
    CKCommentQuery *_query;
    CKCommentCursor *_cursor;
    unsigned long long _resultsLimit;
    CDUnknownBlockType _fetchShareCommentsCompletionBlock;
    NSMutableArray *_resultComments;
    CKCommentCursor *_nextCursor;
}

@property(retain, nonatomic) CKCommentCursor *nextCursor; // @synthesize nextCursor=_nextCursor;
@property(retain, nonatomic) NSMutableArray *resultComments; // @synthesize resultComments=_resultComments;
@property(copy, nonatomic) CDUnknownBlockType fetchShareCommentsCompletionBlock; // @synthesize fetchShareCommentsCompletionBlock=_fetchShareCommentsCompletionBlock;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(copy, nonatomic) CKCommentCursor *cursor; // @synthesize cursor=_cursor;
@property(copy, nonatomic) CKCommentQuery *query; // @synthesize query=_query;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithCursor:(id)arg1;
- (id)initWithShareCommentQuery:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKFetchShareCommentsOperationInfo : CKOperationInfo
{
    CKCommentQuery *_query;
    CKCommentCursor *_cursor;
    unsigned long long _resultsLimit;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(retain, nonatomic) CKCommentCursor *cursor; // @synthesize cursor=_cursor;
@property(retain, nonatomic) CKCommentQuery *query; // @synthesize query=_query;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchShareCommentsOperationResult : CKOperationResult
{
    CKCommentCursor *_cursor;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) CKCommentCursor *cursor; // @synthesize cursor=_cursor;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;

@end

@interface CKFetchShareInvitationsOperation : CKOperation
{
    _Bool _queryAllContainers;
    CDUnknownBlockType _fetchShareInvitationsCompletionBlock;
    long long _fetchType;
    NSMutableArray *_fetchedInvitations;
}

+ (id)fetchSentInvitationsOperation;
+ (id)fetchReceivedInvitationsOperation;
@property(retain, nonatomic) NSMutableArray *fetchedInvitations; // @synthesize fetchedInvitations=_fetchedInvitations;
@property(nonatomic) _Bool queryAllContainers; // @synthesize queryAllContainers=_queryAllContainers;
@property(nonatomic) long long fetchType; // @synthesize fetchType=_fetchType;
@property(copy, nonatomic) CDUnknownBlockType fetchShareInvitationsCompletionBlock; // @synthesize fetchShareInvitationsCompletionBlock=_fetchShareInvitationsCompletionBlock;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)_initWithFetchType:(long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKFetchShareInvitationsOperationInfo : CKOperationInfo
{
    _Bool _queryAllContainers;
    long long _fetchType;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool queryAllContainers; // @synthesize queryAllContainers=_queryAllContainers;
@property(nonatomic) long long fetchType; // @synthesize fetchType=_fetchType;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchSharesOperation : CKOperation
{
    _Bool _isFetchAllSharesOperation;
    NSArray *_shareIDs;
    CDUnknownBlockType _fetchSharesCompletionBlock;
    NSMutableDictionary *_sharesByShareID;
    NSMutableDictionary *_shareIDErrors;
}

+ (id)fetchAllSharesOperation;
@property(retain, nonatomic) NSMutableDictionary *shareIDErrors; // @synthesize shareIDErrors=_shareIDErrors;
@property(nonatomic) _Bool isFetchAllSharesOperation; // @synthesize isFetchAllSharesOperation=_isFetchAllSharesOperation;
@property(retain, nonatomic) NSMutableDictionary *sharesByShareID; // @synthesize sharesByShareID=_sharesByShareID;
@property(copy, nonatomic) CDUnknownBlockType fetchSharesCompletionBlock; // @synthesize fetchSharesCompletionBlock=_fetchSharesCompletionBlock;
@property(copy, nonatomic) NSArray *shareIDs; // @synthesize shareIDs=_shareIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithShareIDs:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKFetchSharesOperationInfo : CKOperationInfo <NSSecureCoding>
{
    _Bool _isFetchAllSharesOperation;
    NSArray *_shareIDsToFetch;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isFetchAllSharesOperation; // @synthesize isFetchAllSharesOperation=_isFetchAllSharesOperation;
@property(retain, nonatomic) NSArray *shareIDsToFetch; // @synthesize shareIDsToFetch=_shareIDsToFetch;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchSubscriptionsOperation : CKDatabaseOperation
{
    _Bool _isFetchAllSubscriptionsOperation;
    NSArray *_subscriptionIDs;
    CDUnknownBlockType _fetchSubscriptionCompletionBlock;
    NSArray *_subscriptions;
    NSMutableDictionary *_subscriptionsBySubscriptionID;
    NSMutableDictionary *_subscriptionErrors;
}

+ (id)fetchAllSubscriptionsOperation;
@property(nonatomic) _Bool isFetchAllSubscriptionsOperation; // @synthesize isFetchAllSubscriptionsOperation=_isFetchAllSubscriptionsOperation;
@property(retain, nonatomic) NSMutableDictionary *subscriptionErrors; // @synthesize subscriptionErrors=_subscriptionErrors;
@property(retain, nonatomic) NSMutableDictionary *subscriptionsBySubscriptionID; // @synthesize subscriptionsBySubscriptionID=_subscriptionsBySubscriptionID;
@property(retain, nonatomic) NSArray *subscriptions; // @synthesize subscriptions=_subscriptions;
@property(copy, nonatomic) CDUnknownBlockType fetchSubscriptionCompletionBlock; // @synthesize fetchSubscriptionCompletionBlock=_fetchSubscriptionCompletionBlock;
@property(copy, nonatomic) NSArray *subscriptionIDs; // @synthesize subscriptionIDs=_subscriptionIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithSubscriptionIDs:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKFetchSubscriptionsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _isFetchAllSubscriptionsOperation;
    NSArray *_subscriptionIDs;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isFetchAllSubscriptionsOperation; // @synthesize isFetchAllSubscriptionsOperation=_isFetchAllSubscriptionsOperation;
@property(retain, nonatomic) NSArray *subscriptionIDs; // @synthesize subscriptionIDs=_subscriptionIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKFetchUserPresenceOperation : CKOperation
{
    CKShareID *_shareID;
    CDUnknownBlockType _fetchUserPresenceCompletionBlock;
    NSMutableArray *_userPresence;
}

@property(retain, nonatomic) NSMutableArray *userPresence; // @synthesize userPresence=_userPresence;
@property(copy, nonatomic) CDUnknownBlockType fetchUserPresenceCompletionBlock; // @synthesize fetchUserPresenceCompletionBlock=_fetchUserPresenceCompletionBlock;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (Class)operationInfoClass;
- (id)initWithShareID:(id)arg1;

// Remaining properties
@property(retain, nonatomic) NSError *error;

@end

@interface CKFetchUserQuotaOperation : CKDatabaseOperation
{
    CDUnknownBlockType _fetchUserQuotaCompletionBlock;
    unsigned long long _quotaAvailable;
}

@property(nonatomic) unsigned long long quotaAvailable; // @synthesize quotaAvailable=_quotaAvailable;
@property(copy, nonatomic) CDUnknownBlockType fetchUserQuotaCompletionBlock; // @synthesize fetchUserQuotaCompletionBlock=_fetchUserQuotaCompletionBlock;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)performCKOperation;
- (Class)operationInfoClass;
- (id)init;

@end

@interface CKFetchUserQuotaOperationResult : CKOperationResult <NSSecureCoding>
{
    unsigned long long _quotaAvailable;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long quotaAvailable; // @synthesize quotaAvailable=_quotaAvailable;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)CKPropertiesDescription;

@end

@interface CKFlowControl : NSObject
{
    unsigned long long _budgetCap;
    double _regenerationPerSecond;
    unsigned long long _totalSamples;
    double _totalCost;
    double _budget;
    NSDate *_lastExpenditure;
}

+ (id)flowControlWithBudgetCap:(unsigned long long)arg1 andRegenerationPerSecond:(double)arg2;
@property(retain) NSDate *lastExpenditure; // @synthesize lastExpenditure=_lastExpenditure;
@property double budget; // @synthesize budget=_budget;
- (void).cxx_destruct;
- (_Bool)attemptBudgetedExpenditureWithCost:(double)arg1;
- (void)expendWithCost:(double)arg1;
- (_Bool)isLimited;
- (double)secondsUntilBudgetLimitationRemoved;
- (double)_secondsUntilBudgetLimitationRemovedNoRegen;
@property double regenerationPerSecond; // @synthesize regenerationPerSecond=_regenerationPerSecond;
@property unsigned long long budgetCap; // @synthesize budgetCap=_budgetCap;
- (void)regenerate;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithBudgetCap:(unsigned long long)arg1 andRegenerationPerSecond:(double)arg2;

@end

@interface CKPrettyError : NSError
{
}

+ (id)descriptionForError:(id)arg1 paths:(_Bool)arg2;
+ (id)descriptionForError:(id)arg1;
+ (id)secureCodableError:(id)arg1;
+ (id)errorWithDictionaryRepresentation:(id)arg1;
+ (id)dictionaryRepresentationForError:(id)arg1;
+ (id)itemErrorFromError:(id)arg1 forID:(id)arg2;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 path:(id)arg3 format:(id)arg4;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 format:(id)arg3;
+ (id)errorWithCode:(long long)arg1 error:(id)arg2 URL:(id)arg3 format:(id)arg4;
+ (id)errorWithCode:(long long)arg1 error:(id)arg2 path:(id)arg3 format:(id)arg4;
+ (id)errorWithCode:(long long)arg1 URL:(id)arg2 format:(id)arg3;
+ (id)errorWithCode:(long long)arg1 path:(id)arg2 format:(id)arg3;
+ (id)errorWithCode:(long long)arg1 error:(id)arg2 format:(id)arg3;
+ (id)errorWithCode:(long long)arg1 userInfo:(id)arg2 error:(id)arg3 format:(id)arg4;
+ (id)errorWithCode:(long long)arg1 userInfo:(id)arg2 format:(id)arg3;
+ (id)errorWithCode:(long long)arg1 format:(id)arg2;
+ (id)errorWithCode:(long long)arg1 userInfo:(id)arg2 error:(id)arg3 path:(id)arg4 URL:(id)arg5 description:(id)arg6;
+ (id)sanitizedError:(id)arg1;
+ (_Bool)isError:(id)arg1 withCodes:(id)arg2;
+ (_Bool)isError:(id)arg1 withCode:(long long)arg2;
+ (id)_errorDomain;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPartialErrorDescription;

@end

@interface CKInternalError : CKPrettyError
{
}

+ (id)_errorDomain;

@end

__attribute__((visibility("hidden")))
@interface CKInvitationNotification : CKNotification <NSSecureCoding>
{
    long long _invitationNotificationReason;
    NSString *_invitationID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *invitationID; // @synthesize invitationID=_invitationID;
@property(nonatomic) long long invitationNotificationReason; // @synthesize invitationNotificationReason=_invitationNotificationReason;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

@interface CKLikeItemsOperation : CKOperation
{
    CKShareID *_shareID;
    CDUnknownBlockType _likeItemsCompletionBlock;
    NSMutableDictionary *_itemsToLikeByID;
    NSMutableDictionary *_itemsToUnlikeByID;
    NSMutableArray *_likedItems;
    NSMutableArray *_unlikedItems;
    NSMutableDictionary *_errorsByItemID;
}

@property(retain, nonatomic) NSMutableDictionary *errorsByItemID; // @synthesize errorsByItemID=_errorsByItemID;
@property(retain, nonatomic) NSMutableArray *unlikedItems; // @synthesize unlikedItems=_unlikedItems;
@property(retain, nonatomic) NSMutableArray *likedItems; // @synthesize likedItems=_likedItems;
@property(retain, nonatomic) NSMutableDictionary *itemsToUnlikeByID; // @synthesize itemsToUnlikeByID=_itemsToUnlikeByID;
@property(retain, nonatomic) NSMutableDictionary *itemsToLikeByID; // @synthesize itemsToLikeByID=_itemsToLikeByID;
@property(copy, nonatomic) CDUnknownBlockType likeItemsCompletionBlock; // @synthesize likeItemsCompletionBlock=_likeItemsCompletionBlock;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
@property(copy, nonatomic) NSArray *itemsToUnlike;
@property(copy, nonatomic) NSArray *itemsToLike;
- (id)initWithItemsToLike:(id)arg1 itemsToUnlike:(id)arg2 inShareWithID:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface CKLikeItemsOperationInfo : CKOperationInfo
{
    NSArray *_itemIDsToLike;
    NSArray *_itemIDsToUnlike;
    CKShareID *_shareID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(retain, nonatomic) NSArray *itemIDsToUnlike; // @synthesize itemIDsToUnlike=_itemIDsToUnlike;
@property(retain, nonatomic) NSArray *itemIDsToLike; // @synthesize itemIDsToLike=_itemIDsToLike;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKLikeNotification : CKNotification <NSSecureCoding>
{
    _Bool _isLike;
    CKShareID *_shareID;
    CKSharedItemID *_likedItemID;
    NSString *_likingUserID;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isLike; // @synthesize isLike=_isLike;
@property(copy, nonatomic) NSString *likingUserID; // @synthesize likingUserID=_likingUserID;
@property(copy, nonatomic) CKSharedItemID *likedItemID; // @synthesize likedItemID=_likedItemID;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

@interface CKLocationSortDescriptor : NSSortDescriptor <NSSecureCoding>
{
    CLLocation *_relativeLocation;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) CLLocation *relativeLocation; // @synthesize relativeLocation=_relativeLocation;
- (void).cxx_destruct;
- (long long)compareObject:(id)arg1 toObject:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithCoder:(id)arg1;
- (id)initWithKey:(id)arg1 relativeLocation:(id)arg2;

@end

@interface CKMarkNotificationsReadOperation : CKOperation
{
    NSArray *_notificationIDs;
    CDUnknownBlockType _markNotificationsReadCompletionBlock;
    NSMutableArray *_notificationIDsMarkedRead;
    NSMutableDictionary *_errorsByNotificationID;
}

@property(retain, nonatomic) NSMutableDictionary *errorsByNotificationID; // @synthesize errorsByNotificationID=_errorsByNotificationID;
@property(retain, nonatomic) NSMutableArray *notificationIDsMarkedRead; // @synthesize notificationIDsMarkedRead=_notificationIDsMarkedRead;
@property(copy, nonatomic) CDUnknownBlockType markNotificationsReadCompletionBlock; // @synthesize markNotificationsReadCompletionBlock=_markNotificationsReadCompletionBlock;
@property(copy, nonatomic) NSArray *notificationIDs; // @synthesize notificationIDs=_notificationIDs;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithNotificationIDsToMarkRead:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKMarkNotificationsReadOperationInfo : CKOperationInfo
{
    NSArray *_notificationIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *notificationIDs; // @synthesize notificationIDs=_notificationIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifyBadgeOperation : CKOperation
{
    unsigned long long _badgeValue;
    CDUnknownBlockType _modifyBadgeCompletionBlock;
}

@property(copy, nonatomic) CDUnknownBlockType modifyBadgeCompletionBlock; // @synthesize modifyBadgeCompletionBlock=_modifyBadgeCompletionBlock;
@property(nonatomic) unsigned long long badgeValue; // @synthesize badgeValue=_badgeValue;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (void)performCKOperation;
- (id)initWithBadgeValue:(unsigned long long)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKModifyBadgeOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    unsigned long long _badgeValue;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long badgeValue; // @synthesize badgeValue=_badgeValue;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifyRecordZonesOperation : CKDatabaseOperation
{
    NSArray *_recordZonesToSave;
    NSArray *_recordZoneIDsToDelete;
    CDUnknownBlockType _modifyRecordZonesCompletionBlock;
    NSMutableArray *_savedRecordZones;
    NSMutableArray *_deletedRecordZoneIDs;
    NSMutableDictionary *_recordZonesByZoneIDs;
    NSMutableDictionary *_recordZoneErrors;
}

@property(retain, nonatomic) NSMutableDictionary *recordZoneErrors; // @synthesize recordZoneErrors=_recordZoneErrors;
@property(retain, nonatomic) NSMutableDictionary *recordZonesByZoneIDs; // @synthesize recordZonesByZoneIDs=_recordZonesByZoneIDs;
@property(retain, nonatomic) NSMutableArray *deletedRecordZoneIDs; // @synthesize deletedRecordZoneIDs=_deletedRecordZoneIDs;
@property(retain, nonatomic) NSMutableArray *savedRecordZones; // @synthesize savedRecordZones=_savedRecordZones;
@property(copy, nonatomic) CDUnknownBlockType modifyRecordZonesCompletionBlock; // @synthesize modifyRecordZonesCompletionBlock=_modifyRecordZonesCompletionBlock;
@property(copy, nonatomic) NSArray *recordZoneIDsToDelete; // @synthesize recordZoneIDsToDelete=_recordZoneIDsToDelete;
@property(copy, nonatomic) NSArray *recordZonesToSave; // @synthesize recordZonesToSave=_recordZonesToSave;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordZonesToSave:(id)arg1 recordZoneIDsToDelete:(id)arg2;
- (id)init;

@end

@interface CKModifyRecordZonesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _allowDefaultZoneSave;
    NSArray *_recordZonesToSave;
    NSArray *_recordZoneIDsToDelete;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool allowDefaultZoneSave; // @synthesize allowDefaultZoneSave=_allowDefaultZoneSave;
@property(retain, nonatomic) NSArray *recordZoneIDsToDelete; // @synthesize recordZoneIDsToDelete=_recordZoneIDsToDelete;
@property(retain, nonatomic) NSArray *recordZonesToSave; // @synthesize recordZonesToSave=_recordZonesToSave;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifyRecordsOperation : CKDatabaseOperation
{
    _Bool _atomic;
    _Bool _shouldOnlySaveAssetContent;
    NSArray *_recordsToSave;
    NSArray *_recordIDsToDelete;
    long long _savePolicy;
    NSData *_clientChangeTokenData;
    CDUnknownBlockType _perRecordProgressBlock;
    CDUnknownBlockType _perRecordCompletionBlock;
    CDUnknownBlockType _modifyRecordsCompletionBlock;
    NSDictionary *_recordIDsToDeleteToEtags;
    NSDictionary *_conflictLosersToResolveByRecordID;
    NSMutableArray *_savedRecords;
    NSMutableArray *_deletedRecordIDs;
    NSMutableDictionary *_recordsByRecordIDs;
    NSMutableDictionary *_recordErrors;
    NSMutableDictionary *_assetsByRecordIDAndRecordKey;
}

@property(retain, nonatomic) NSMutableDictionary *assetsByRecordIDAndRecordKey; // @synthesize assetsByRecordIDAndRecordKey=_assetsByRecordIDAndRecordKey;
@property(retain, nonatomic) NSMutableDictionary *recordErrors; // @synthesize recordErrors=_recordErrors;
@property(retain, nonatomic) NSMutableDictionary *recordsByRecordIDs; // @synthesize recordsByRecordIDs=_recordsByRecordIDs;
@property(retain, nonatomic) NSMutableArray *deletedRecordIDs; // @synthesize deletedRecordIDs=_deletedRecordIDs;
@property(retain, nonatomic) NSMutableArray *savedRecords; // @synthesize savedRecords=_savedRecords;
@property(retain, nonatomic) NSDictionary *conflictLosersToResolveByRecordID; // @synthesize conflictLosersToResolveByRecordID=_conflictLosersToResolveByRecordID;
@property(copy, nonatomic) NSDictionary *recordIDsToDeleteToEtags; // @synthesize recordIDsToDeleteToEtags=_recordIDsToDeleteToEtags;
@property(nonatomic) _Bool shouldOnlySaveAssetContent; // @synthesize shouldOnlySaveAssetContent=_shouldOnlySaveAssetContent;
@property(copy, nonatomic) CDUnknownBlockType modifyRecordsCompletionBlock; // @synthesize modifyRecordsCompletionBlock=_modifyRecordsCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType perRecordCompletionBlock; // @synthesize perRecordCompletionBlock=_perRecordCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType perRecordProgressBlock; // @synthesize perRecordProgressBlock=_perRecordProgressBlock;
@property(nonatomic) _Bool atomic; // @synthesize atomic=_atomic;
@property(copy, nonatomic) NSData *clientChangeTokenData; // @synthesize clientChangeTokenData=_clientChangeTokenData;
@property(nonatomic) long long savePolicy; // @synthesize savePolicy=_savePolicy;
@property(copy, nonatomic) NSArray *recordIDsToDelete; // @synthesize recordIDsToDelete=_recordIDsToDelete;
@property(copy, nonatomic) NSArray *recordsToSave; // @synthesize recordsToSave=_recordsToSave;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordsToSave:(id)arg1 recordIDsToDelete:(id)arg2;
- (id)init;

@end

@interface CKModifyRecordsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _atomic;
    _Bool _shouldOnlySaveAssetContent;
    NSArray *_recordsToSave;
    NSArray *_recordIDsToDelete;
    NSData *_clientChangeTokenData;
    long long _savePolicy;
    NSDictionary *_recordIDsToDeleteToEtags;
    NSDictionary *_conflictLosersToResolveByRecordID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSDictionary *conflictLosersToResolveByRecordID; // @synthesize conflictLosersToResolveByRecordID=_conflictLosersToResolveByRecordID;
@property(copy, nonatomic) NSDictionary *recordIDsToDeleteToEtags; // @synthesize recordIDsToDeleteToEtags=_recordIDsToDeleteToEtags;
@property(nonatomic) _Bool shouldOnlySaveAssetContent; // @synthesize shouldOnlySaveAssetContent=_shouldOnlySaveAssetContent;
@property(nonatomic) long long savePolicy; // @synthesize savePolicy=_savePolicy;
@property(nonatomic) _Bool atomic; // @synthesize atomic=_atomic;
@property(retain, nonatomic) NSData *clientChangeTokenData; // @synthesize clientChangeTokenData=_clientChangeTokenData;
@property(retain, nonatomic) NSArray *recordIDsToDelete; // @synthesize recordIDsToDelete=_recordIDsToDelete;
@property(retain, nonatomic) NSArray *recordsToSave; // @synthesize recordsToSave=_recordsToSave;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifyShareCommentsOperation : CKOperation
{
    NSArray *_commentsToSave;
    NSArray *_commentIDsToDelete;
    CKShareID *_shareID;
    CDUnknownBlockType _modifyShareCommentCompletionBlock;
    NSMutableArray *_savedComments;
    NSMutableDictionary *_commentsToSaveByLocalID;
    NSMutableArray *_deletedCommentIDs;
    NSMutableDictionary *_errorsByCommentID;
}

@property(retain, nonatomic) NSMutableDictionary *errorsByCommentID; // @synthesize errorsByCommentID=_errorsByCommentID;
@property(retain, nonatomic) NSMutableArray *deletedCommentIDs; // @synthesize deletedCommentIDs=_deletedCommentIDs;
@property(retain, nonatomic) NSMutableDictionary *commentsToSaveByLocalID; // @synthesize commentsToSaveByLocalID=_commentsToSaveByLocalID;
@property(retain, nonatomic) NSMutableArray *savedComments; // @synthesize savedComments=_savedComments;
@property(copy, nonatomic) CDUnknownBlockType modifyShareCommentCompletionBlock; // @synthesize modifyShareCommentCompletionBlock=_modifyShareCommentCompletionBlock;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(copy, nonatomic) NSArray *commentIDsToDelete; // @synthesize commentIDsToDelete=_commentIDsToDelete;
@property(copy, nonatomic) NSArray *commentsToSave; // @synthesize commentsToSave=_commentsToSave;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithCommentsToSave:(id)arg1 commentIDsToDelete:(id)arg2 inShareWithID:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface CKModifyShareCommentsOperationInfo : CKOperationInfo
{
    CKShareID *_shareID;
    NSArray *_commentsToSave;
    NSArray *_commentIDsToDelete;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *commentIDsToDelete; // @synthesize commentIDsToDelete=_commentIDsToDelete;
@property(retain, nonatomic) NSArray *commentsToSave; // @synthesize commentsToSave=_commentsToSave;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifySharesOperation : CKOperation
{
    NSArray *_sharesToSave;
    NSArray *_shareIDsToDelete;
    CDUnknownBlockType _modifyShareCompletionBlock;
    NSMutableDictionary *_savedSharesByShareID;
    NSMutableArray *_deletedShareIDs;
    NSMutableDictionary *_sharesByShareID;
    NSMutableDictionary *_shareErrorsByShareID;
    NSMutableSet *_sharesUpdatedFromServer;
}

@property(retain, nonatomic) NSMutableSet *sharesUpdatedFromServer; // @synthesize sharesUpdatedFromServer=_sharesUpdatedFromServer;
@property(retain, nonatomic) NSMutableDictionary *shareErrorsByShareID; // @synthesize shareErrorsByShareID=_shareErrorsByShareID;
@property(retain, nonatomic) NSMutableDictionary *sharesByShareID; // @synthesize sharesByShareID=_sharesByShareID;
@property(retain, nonatomic) NSMutableArray *deletedShareIDs; // @synthesize deletedShareIDs=_deletedShareIDs;
@property(retain, nonatomic) NSMutableDictionary *savedSharesByShareID; // @synthesize savedSharesByShareID=_savedSharesByShareID;
@property(copy, nonatomic) CDUnknownBlockType modifyShareCompletionBlock; // @synthesize modifyShareCompletionBlock=_modifyShareCompletionBlock;
@property(copy, nonatomic) NSArray *shareIDsToDelete; // @synthesize shareIDsToDelete=_shareIDsToDelete;
@property(copy, nonatomic) NSArray *sharesToSave; // @synthesize sharesToSave=_sharesToSave;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithSharesToSave:(id)arg1 shareIDsToDelete:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKModifySharesOperationInfo : CKOperationInfo
{
    NSArray *_sharesToSave;
    NSArray *_shareIDsToDelete;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *shareIDsToDelete; // @synthesize shareIDsToDelete=_shareIDsToDelete;
@property(retain, nonatomic) NSArray *sharesToSave; // @synthesize sharesToSave=_sharesToSave;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifySubscriptionsOperation : CKDatabaseOperation
{
    NSArray *_subscriptionsToSave;
    NSArray *_subscriptionIDsToDelete;
    CDUnknownBlockType _modifySubscriptionsCompletionBlock;
    NSMutableArray *_savedSubscriptions;
    NSMutableArray *_deletedSubscriptionIDs;
    NSMutableDictionary *_subscriptionsBySubscriptionIDs;
    NSMutableDictionary *_subscriptionErrors;
}

@property(retain, nonatomic) NSMutableDictionary *subscriptionErrors; // @synthesize subscriptionErrors=_subscriptionErrors;
@property(retain, nonatomic) NSMutableDictionary *subscriptionsBySubscriptionIDs; // @synthesize subscriptionsBySubscriptionIDs=_subscriptionsBySubscriptionIDs;
@property(retain, nonatomic) NSMutableArray *deletedSubscriptionIDs; // @synthesize deletedSubscriptionIDs=_deletedSubscriptionIDs;
@property(retain, nonatomic) NSMutableArray *savedSubscriptions; // @synthesize savedSubscriptions=_savedSubscriptions;
@property(copy, nonatomic) CDUnknownBlockType modifySubscriptionsCompletionBlock; // @synthesize modifySubscriptionsCompletionBlock=_modifySubscriptionsCompletionBlock;
@property(copy, nonatomic) NSArray *subscriptionIDsToDelete; // @synthesize subscriptionIDsToDelete=_subscriptionIDsToDelete;
@property(copy, nonatomic) NSArray *subscriptionsToSave; // @synthesize subscriptionsToSave=_subscriptionsToSave;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithSubscriptionsToSave:(id)arg1 subscriptionIDsToDelete:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKModifySubscriptionsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    NSArray *_subscriptionsToSave;
    NSArray *_subscriptionIDsToDelete;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *subscriptionIDsToDelete; // @synthesize subscriptionIDsToDelete=_subscriptionIDsToDelete;
@property(retain, nonatomic) NSArray *subscriptionsToSave; // @synthesize subscriptionsToSave=_subscriptionsToSave;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKModifyWebSharingOperation : CKDatabaseOperation
{
    NSArray *_recordIDsToShareReadWrite;
    CDUnknownBlockType _recordSharedBlock;
    CDUnknownBlockType _recordUnsharedBlock;
    CDUnknownBlockType _webShareRecordsCompletionBlock;
    NSArray *_recordIDsToShare;
    NSArray *_recordIDsToUnshare;
    NSMutableDictionary *_recordErrors;
    NSMutableArray *_sharedRecordIDs;
    NSMutableArray *_unsharedRecordIDs;
}

@property(retain, nonatomic) NSMutableArray *unsharedRecordIDs; // @synthesize unsharedRecordIDs=_unsharedRecordIDs;
@property(retain, nonatomic) NSMutableArray *sharedRecordIDs; // @synthesize sharedRecordIDs=_sharedRecordIDs;
@property(retain, nonatomic) NSMutableDictionary *recordErrors; // @synthesize recordErrors=_recordErrors;
@property(retain, nonatomic) NSArray *recordIDsToUnshare; // @synthesize recordIDsToUnshare=_recordIDsToUnshare;
@property(retain, nonatomic) NSArray *recordIDsToShare; // @synthesize recordIDsToShare=_recordIDsToShare;
@property(copy, nonatomic) CDUnknownBlockType webShareRecordsCompletionBlock; // @synthesize webShareRecordsCompletionBlock=_webShareRecordsCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType recordUnsharedBlock; // @synthesize recordUnsharedBlock=_recordUnsharedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordSharedBlock; // @synthesize recordSharedBlock=_recordSharedBlock;
@property(retain, nonatomic) NSArray *recordIDsToShareReadWrite; // @synthesize recordIDsToShareReadWrite=_recordIDsToShareReadWrite;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordIDsToWebShare:(id)arg1 recordIDsToUnshare:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CKModifyWebSharingOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    NSArray *_recordIDsToShare;
    NSArray *_recordIDsToUnshare;
    NSArray *_recordIDsToShareReadWrite;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *recordIDsToShareReadWrite; // @synthesize recordIDsToShareReadWrite=_recordIDsToShareReadWrite;
@property(retain, nonatomic) NSArray *recordIDsToUnshare; // @synthesize recordIDsToUnshare=_recordIDsToUnshare;
@property(retain, nonatomic) NSArray *recordIDsToShare; // @synthesize recordIDsToShare=_recordIDsToShare;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKNotificationID : NSObject <NSCopying, NSSecureCoding>
{
    NSString *_notificationUUID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *notificationUUID; // @synthesize notificationUUID=_notificationUUID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

@interface CKNotificationInfo : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _shouldBadge;
    _Bool _shouldSendContentAvailable;
    NSString *_alertBody;
    NSString *_alertLocalizationKey;
    NSArray *_alertLocalizationArgs;
    NSString *_alertActionLocalizationKey;
    NSString *_alertLaunchImage;
    NSString *_soundName;
    NSArray *_desiredKeys;
}

+ (_Bool)supportsSecureCoding;
+ (id)notificationInfo;
@property(nonatomic) _Bool shouldSendContentAvailable; // @synthesize shouldSendContentAvailable=_shouldSendContentAvailable;
@property(nonatomic) _Bool shouldBadge; // @synthesize shouldBadge=_shouldBadge;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(copy, nonatomic) NSString *soundName; // @synthesize soundName=_soundName;
@property(copy, nonatomic) NSString *alertLaunchImage; // @synthesize alertLaunchImage=_alertLaunchImage;
@property(copy, nonatomic) NSString *alertActionLocalizationKey; // @synthesize alertActionLocalizationKey=_alertActionLocalizationKey;
@property(copy, nonatomic) NSArray *alertLocalizationArgs; // @synthesize alertLocalizationArgs=_alertLocalizationArgs;
@property(copy, nonatomic) NSString *alertLocalizationKey; // @synthesize alertLocalizationKey=_alertLocalizationKey;
@property(copy, nonatomic) NSString *alertBody; // @synthesize alertBody=_alertBody;
- (void).cxx_destruct;
- (id)debugDescription;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKObjCClass : NSObject
{
    Class _handle;
    NSString *_name;
    NSDictionary *_propertiesByName;
    NSArray *_sortedProperties;
}

+ (id)classForObject:(id)arg1;
+ (id)classForHandle:(Class)arg1;
@property(readonly, nonatomic) NSArray *sortedProperties; // @synthesize sortedProperties=_sortedProperties;
@property(readonly, nonatomic) NSDictionary *propertiesByName; // @synthesize propertiesByName=_propertiesByName;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) Class handle; // @synthesize handle=_handle;
- (void).cxx_destruct;
- (id)propertyForName:(id)arg1;
- (id)allProperties;
- (id)initWithHandle:(Class)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKObjCProperty : NSObject
{
    Class _classHandle;
    CKObjCType *_type;
    NSString *_name;
    unsigned long long _flags;
    SEL _getterSelector;
    NSString *_getterSelectorName;
    NSMethodSignature *_getterMethodSignature;
    SEL _setterSelector;
    NSString *_setterSelectorName;
    NSMethodSignature *_setterMethodSignature;
    NSString *_instanceVariableName;
}

@property(readonly, nonatomic) NSString *instanceVariableName; // @synthesize instanceVariableName=_instanceVariableName;
@property(readonly, nonatomic) NSMethodSignature *setterMethodSignature; // @synthesize setterMethodSignature=_setterMethodSignature;
@property(readonly, nonatomic) NSString *setterSelectorName; // @synthesize setterSelectorName=_setterSelectorName;
@property(readonly, nonatomic) SEL setterSelector; // @synthesize setterSelector=_setterSelector;
@property(readonly, nonatomic) NSMethodSignature *getterMethodSignature; // @synthesize getterMethodSignature=_getterMethodSignature;
@property(readonly, nonatomic) NSString *getterSelectorName; // @synthesize getterSelectorName=_getterSelectorName;
@property(readonly, nonatomic) SEL getterSelector; // @synthesize getterSelector=_getterSelector;
@property(readonly, nonatomic) unsigned long long flags; // @synthesize flags=_flags;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) CKObjCType *type; // @synthesize type=_type;
@property(readonly, nonatomic) Class classHandle; // @synthesize classHandle=_classHandle;
- (void).cxx_destruct;
- (void)setValue:(id)arg1 onObject:(id)arg2;
- (id)getFromObject:(id)arg1;
- (long long)compareToProperty:(id)arg1;
- (long long)compare:(id)arg1;
- (id)initWithClass:(Class)arg1 property:(struct objc_property *)arg2;

@end

__attribute__((visibility("hidden")))
@interface CKObjCType : NSObject
{
    long long _code;
    NSString *_encoding;
    NSString *_name;
    NSString *_className;
    unsigned long long _size;
    unsigned long long _flags;
}

+ (id)typeForValue:(id)arg1;
+ (id)typeForEncoding:(const char *)arg1;
@property(readonly, nonatomic) unsigned long long flags; // @synthesize flags=_flags;
@property(readonly, nonatomic) unsigned long long size; // @synthesize size=_size;
@property(readonly, nonatomic) NSString *className; // @synthesize className=_className;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) NSString *encoding; // @synthesize encoding=_encoding;
@property(readonly, nonatomic) long long code; // @synthesize code=_code;
- (void).cxx_destruct;
- (void)getBytes:(void *)arg1 forObject:(id)arg2;
- (id)objectWithBytes:(const void *)arg1;
@property(readonly, nonatomic, getter=isObject) _Bool object;
@property(readonly, nonatomic, getter=isFloatingPointNumber) _Bool floatingPointNumber;
@property(readonly, nonatomic, getter=isIntegerNumber) _Bool integerNumber;
@property(readonly, nonatomic, getter=isNumber) _Bool number;
- (id)initWithCode:(long long)arg1 encoding:(id)arg2 name:(id)arg3 className:(id)arg4 size:(unsigned long long)arg5 flags:(unsigned long long)arg6;

@end

@interface CKObject : NSObject <CKPropertyCoding>
{
}

@property(readonly, copy) NSString *description;
- (id)dictionaryPropertyEncoding;
@property(readonly, nonatomic) NSSet *propertyNamesNotToEncode;
@property(readonly, nonatomic) CKObjCClass *objcClass;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)initWithPropertyDictionary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface CKOperationCallbackManager : NSObject
{
    NSMutableDictionary *_progressCallbacks;
    NSMutableDictionary *_completionCallbacks;
}

@property(retain) NSMutableDictionary *completionCallbacks; // @synthesize completionCallbacks=_completionCallbacks;
@property(retain) NSMutableDictionary *progressCallbacks; // @synthesize progressCallbacks=_progressCallbacks;
- (void).cxx_destruct;
- (void)removeAllCallbacks;
- (void)handleOperationCompletion:(id)arg1 forOperationWithID:(id)arg2;
- (void)handleOperationProgress:(id)arg1 forOperationWithID:(id)arg2;
- (void)unregisterAllCallbacksForOperation:(id)arg1;
- (void)registerCompletionCallback:(CDUnknownBlockType)arg1 forOperation:(id)arg2;
- (void)registerProgressCallback:(CDUnknownBlockType)arg1 forOperation:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKOperationFlowControlManager : NSObject
{
    NSMutableDictionary *_flowControlledOperationClasses;
}

@property(readonly) NSMutableDictionary *flowControlledOperationClasses; // @synthesize flowControlledOperationClasses=_flowControlledOperationClasses;
- (void).cxx_destruct;
- (void)unlimitAllOperations;
- (void)limitOperation:(id)arg1 retryAfter:(id)arg2;
- (double)secondsUntilUnlimited:(id)arg1;
- (_Bool)isOperationLimited:(id)arg1;
- (id)statusReport;
- (id)init;

@end

@interface CKPCSDiagnosticInformation : NSObject <NSSecureCoding>
{
    NSString *_identityInfo;
    NSString *_serviceIdentityInfo;
    NSMutableDictionary *_pcsInfoByZoneID;
    NSMutableArray *_notFoundZoneIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSMutableArray *notFoundZoneIDs; // @synthesize notFoundZoneIDs=_notFoundZoneIDs;
@property(retain, nonatomic) NSMutableDictionary *pcsInfoByZoneID; // @synthesize pcsInfoByZoneID=_pcsInfoByZoneID;
@property(retain, nonatomic) NSString *serviceIdentityInfo; // @synthesize serviceIdentityInfo=_serviceIdentityInfo;
@property(retain, nonatomic) NSString *identityInfo; // @synthesize identityInfo=_identityInfo;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

@interface CKPackage : NSObject <NSSecureCoding, CKRecordValue>
{
    struct _OpaquePCSShareProtection *_recordPCS;
    _Bool _wasCached;
    _Bool _open;
    _Bool _transaction;
    _Bool _ownsTheAnchor;
    NSArray *_assets;
    CKRecord *_record;
    NSString *_recordKey;
    NSURL *_fileURL;
    NSString *_applicationBundleID;
    NSString *_UUID;
    NSString *_anchorPath;
    CKSQLite *_sqlite;
    long long _packageID;
    unsigned long long _nextItemIndex;
}

+ (_Bool)supportsSecureCoding;
+ (void)destroyPackageAnchoredAtURL:(id)arg1;
+ (id)_packagesPathForBundleID:(id)arg1;
@property(nonatomic) _Bool ownsTheAnchor; // @synthesize ownsTheAnchor=_ownsTheAnchor;
@property(nonatomic, getter=inTransaction) _Bool transaction; // @synthesize transaction=_transaction;
@property(nonatomic, getter=isOpen) _Bool open; // @synthesize open=_open;
@property(nonatomic) unsigned long long nextItemIndex; // @synthesize nextItemIndex=_nextItemIndex;
@property(nonatomic) long long packageID; // @synthesize packageID=_packageID;
@property(retain, nonatomic) CKSQLite *sqlite; // @synthesize sqlite=_sqlite;
@property(retain, nonatomic) NSString *anchorPath; // @synthesize anchorPath=_anchorPath;
@property(retain, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
@property(nonatomic) _Bool wasCached; // @synthesize wasCached=_wasCached;
@property(retain, nonatomic) NSString *applicationBundleID; // @synthesize applicationBundleID=_applicationBundleID;
@property(retain, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(copy, nonatomic) NSString *recordKey; // @synthesize recordKey=_recordKey;
@property(nonatomic) __weak CKRecord *record; // @synthesize record=_record;
@property(copy, nonatomic) NSArray *assets; // @synthesize assets=_assets;
@property(nonatomic) struct _OpaquePCSShareProtection *recordPCS; // @synthesize recordPCS=_recordPCS;
- (void).cxx_destruct;
- (id)replacementObjectForCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(copy, nonatomic) NSData *signature;
- (void)endTransaction;
- (void)beginTransaction;
- (void)addSection:(id)arg1;
- (id)sectionAtIndex:(unsigned long long)arg1;
- (unsigned long long)sectionCount;
- (void)updateItemAtIndex:(long long)arg1 withFileURL:(id)arg2;
- (void)updateItemAtIndex:(long long)arg1 withSignature:(id)arg2 size:(unsigned long long)arg3 itemID:(unsigned long long)arg4 sectionIndex:(unsigned long long)arg5;
- (void)addItem:(id)arg1;
- (id)itemEnumeratorForSectionAtIndex:(unsigned long long)arg1;
- (id)itemEnumerator;
- (id)itemAtIndex:(unsigned long long)arg1;
- (id)_itemOrNilAtIndex:(unsigned long long)arg1;
- (id)_itemWithColumnsByName:(id)arg1;
- (unsigned long long)itemCount;
- (void)close;
- (void)open;
- (_Bool)decReferenceCount;
- (void)incReferenceCount;
- (_Bool)isAnchorStillValid;
- (void)_setReferenceCount:(long long)arg1;
@property(readonly, copy) NSString *description;
- (id)CKPropertiesDescription;
- (void)dealloc;
- (void)destroy;
- (id)initWithArchivedAnchoredPackage:(id)arg1;
- (id)initWithAnchorURL:(id)arg1;
- (id)init;
- (id)initWithBundleIdentifier:(id)arg1;
- (id)_initWithPath:(id)arg1 UUID:(id)arg2;
- (id)_packageDatabasePathWithUUID:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CKPackageItem : NSObject
{
    int _sectionIndex;
    long long _packageIndex;
    NSURL *_fileURL;
    unsigned long long _itemID;
    NSData *_signature;
    long long _size;
    long long _offset;
    NSNumber *_deviceID;
    NSNumber *_fileID;
    NSNumber *_generationID;
    NSData *_wrappedAssetKey;
    NSString *_referenceIdentifier;
}

@property(retain, nonatomic) NSString *referenceIdentifier; // @synthesize referenceIdentifier=_referenceIdentifier;
@property(retain, nonatomic) NSData *wrappedAssetKey; // @synthesize wrappedAssetKey=_wrappedAssetKey;
@property(retain, nonatomic) NSNumber *generationID; // @synthesize generationID=_generationID;
@property(retain, nonatomic) NSNumber *fileID; // @synthesize fileID=_fileID;
@property(retain, nonatomic) NSNumber *deviceID; // @synthesize deviceID=_deviceID;
@property(nonatomic) int sectionIndex; // @synthesize sectionIndex=_sectionIndex;
@property(nonatomic) long long offset; // @synthesize offset=_offset;
@property(nonatomic) long long size; // @synthesize size=_size;
@property(retain, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(nonatomic) unsigned long long itemID; // @synthesize itemID=_itemID;
@property(retain, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(nonatomic) long long packageIndex; // @synthesize packageIndex=_packageIndex;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithDeviceID:(id)arg1 fileID:(id)arg2 generationID:(id)arg3;
- (id)initWithFileURL:(id)arg1;

@end

@interface CKPackageSection : NSObject
{
    long long _index;
    NSData *_signature;
    long long _size;
}

@property(nonatomic) long long size; // @synthesize size=_size;
@property(readonly, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(readonly, nonatomic) long long index; // @synthesize index=_index;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithIndex:(long long)arg1 signature:(id)arg2 size:(long long)arg3;

@end

__attribute__((visibility("hidden")))
@interface CKPlaceholderOperation : NSOperation
{
    NSObject<OS_dispatch_group> *_group;
    _Bool _isFinished;
    _Bool _isExecuting;
    NSString *_sectionID;
    id _context;
    NSDate *_startDate;
    NSString *_operationID;
    CDUnknownBlockType _daemonInvokeBlock;
}

@property(readonly, nonatomic) CDUnknownBlockType daemonInvokeBlock; // @synthesize daemonInvokeBlock=_daemonInvokeBlock;
@property(readonly, nonatomic) NSString *operationID; // @synthesize operationID=_operationID;
@property(retain, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(retain, nonatomic) NSString *sectionID; // @synthesize sectionID=_sectionID;
@property(nonatomic) _Bool isExecuting; // @synthesize isExecuting=_isExecuting;
@property(nonatomic) _Bool isFinished; // @synthesize isFinished=_isFinished;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (_Bool)isConcurrent;
- (void)main;
- (void)start;
- (void)cancel;
- (id)initWithOperation:(id)arg1 daemonInvocationBlock:(CDUnknownBlockType)arg2;

@end

@interface CKPublishAssetsOperation : CKDatabaseOperation
{
    NSDictionary *_fileNamesByAssetFieldNames;
    unsigned long long _requestedTTL;
    unsigned long long _URLOptions;
    CDUnknownBlockType _assetPublishedBlock;
    CDUnknownBlockType _publishAssetCompletionBlock;
    NSArray *_recordIDs;
}

@property(retain, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
@property(copy, nonatomic) CDUnknownBlockType publishAssetCompletionBlock; // @synthesize publishAssetCompletionBlock=_publishAssetCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType assetPublishedBlock; // @synthesize assetPublishedBlock=_assetPublishedBlock;
@property(nonatomic) unsigned long long URLOptions; // @synthesize URLOptions=_URLOptions;
@property(nonatomic) unsigned long long requestedTTL; // @synthesize requestedTTL=_requestedTTL;
@property(retain, nonatomic) NSDictionary *fileNamesByAssetFieldNames; // @synthesize fileNamesByAssetFieldNames=_fileNamesByAssetFieldNames;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithRecordIDs:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKPublishAssetsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    NSArray *_recordIDs;
    NSDictionary *_fileNamesByAssetFieldNames;
    unsigned long long _requestedTTL;
    unsigned long long _URLOptions;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long URLOptions; // @synthesize URLOptions=_URLOptions;
@property(nonatomic) unsigned long long requestedTTL; // @synthesize requestedTTL=_requestedTTL;
@property(retain, nonatomic) NSDictionary *fileNamesByAssetFieldNames; // @synthesize fileNamesByAssetFieldNames=_fileNamesByAssetFieldNames;
@property(retain, nonatomic) NSArray *recordIDs; // @synthesize recordIDs=_recordIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKQuery : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_recordType;
    NSPredicate *_predicate;
    NSArray *_sortDescriptors;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSArray *sortDescriptors; // @synthesize sortDescriptors=_sortDescriptors;
@property(copy, nonatomic) NSPredicate *predicate; // @synthesize predicate=_predicate;
@property(copy, nonatomic) NSString *recordType; // @synthesize recordType=_recordType;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (id)debugDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRecordType:(id)arg1 predicate:(id)arg2;
- (id)init;

@end

@interface CKQueryCursor : NSObject <NSCopying, NSSecureCoding>
{
    NSData *_data;
    CKRecordZoneID *_zoneID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) CKRecordZoneID *zoneID; // @synthesize zoneID=_zoneID;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithData:(id)arg1 zoneID:(id)arg2;
- (id)init;

@end

@interface CKQueryNotification : CKNotification <NSSecureCoding>
{
    _Bool _isPublicDatabase;
    long long _queryNotificationReason;
    NSDictionary *_recordFields;
    CKRecordID *_recordID;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isPublicDatabase; // @synthesize isPublicDatabase=_isPublicDatabase;
@property(copy, nonatomic) CKRecordID *recordID; // @synthesize recordID=_recordID;
@property(copy, nonatomic) NSDictionary *recordFields; // @synthesize recordFields=_recordFields;
@property(nonatomic) long long queryNotificationReason; // @synthesize queryNotificationReason=_queryNotificationReason;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

@interface CKQueryOperation : CKDatabaseOperation
{
    _Bool _shouldFetchAssetContent;
    _Bool _isFinishing;
    CKQuery *_query;
    CKQueryCursor *_cursor;
    CKRecordZoneID *_zoneID;
    unsigned long long _resultsLimit;
    NSArray *_desiredKeys;
    CDUnknownBlockType _recordFetchedBlock;
    CDUnknownBlockType _queryCompletionBlock;
    NSArray *_results;
    CKQueryCursor *_resultsCursor;
    NSObject<OS_dispatch_queue> *_queryResultQueue;
}

@property(nonatomic) _Bool isFinishing; // @synthesize isFinishing=_isFinishing;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queryResultQueue; // @synthesize queryResultQueue=_queryResultQueue;
@property(nonatomic) _Bool shouldFetchAssetContent; // @synthesize shouldFetchAssetContent=_shouldFetchAssetContent;
@property(retain, nonatomic) CKQueryCursor *resultsCursor; // @synthesize resultsCursor=_resultsCursor;
@property(retain, nonatomic) NSArray *results; // @synthesize results=_results;
@property(copy, nonatomic) CDUnknownBlockType queryCompletionBlock; // @synthesize queryCompletionBlock=_queryCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType recordFetchedBlock; // @synthesize recordFetchedBlock=_recordFetchedBlock;
@property(copy, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(copy, nonatomic) CKRecordZoneID *zoneID; // @synthesize zoneID=_zoneID;
@property(copy, nonatomic) CKQueryCursor *cursor; // @synthesize cursor=_cursor;
@property(copy, nonatomic) CKQuery *query; // @synthesize query=_query;
- (void).cxx_destruct;
- (void)fillOutOperationInfo:(id)arg1;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (id)initWithCursor:(id)arg1;
- (id)initWithQuery:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKQueryOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    _Bool _shouldFetchAssetContent;
    CKQuery *_query;
    CKRecordZoneID *_zoneID;
    CKQueryCursor *_cursor;
    unsigned long long _resultsLimit;
    NSArray *_desiredKeys;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool shouldFetchAssetContent; // @synthesize shouldFetchAssetContent=_shouldFetchAssetContent;
@property(retain, nonatomic) NSArray *desiredKeys; // @synthesize desiredKeys=_desiredKeys;
@property(nonatomic) unsigned long long resultsLimit; // @synthesize resultsLimit=_resultsLimit;
@property(retain, nonatomic) CKQueryCursor *cursor; // @synthesize cursor=_cursor;
@property(retain, nonatomic) CKRecordZoneID *zoneID; // @synthesize zoneID=_zoneID;
@property(retain, nonatomic) CKQuery *query; // @synthesize query=_query;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKQueryOperationResult : CKOperationResult <NSSecureCoding>
{
    CKQueryCursor *_cursor;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) CKQueryCursor *cursor; // @synthesize cursor=_cursor;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;

@end

@interface CKRecord : NSObject <NSSecureCoding, NSCopying>
{
    NSMutableDictionary *_values;
    NSMutableDictionary *_originalValues;
    NSMutableSet *_changedKeysSet;
    _Bool _trackChanges;
    _Bool _knownToServer;
    _Bool _wasCached;
    _Bool _serializeProtectionData;
    NSString *_recordType;
    CKRecordID *_recordID;
    CKRecordID *_creatorUserRecordID;
    NSDate *_creationDate;
    CKRecordID *_lastModifiedUserRecordID;
    NSDate *_modificationDate;
    NSString *_modifiedByDevice;
    NSString *_etag;
    NSArray *_conflictLoserEtags;
    NSData *_protectionData;
    NSString *_previousProtectionEtag;
    NSString *_protectionEtag;
    NSString *_zoneProtectionEtag;
    NSDictionary *_pluginFields;
    CKContainerID *_containerID;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)accessInstanceVariablesDirectly;
@property(copy, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
@property(copy, nonatomic) NSDictionary *pluginFields; // @synthesize pluginFields=_pluginFields;
@property(retain, nonatomic) NSString *zoneProtectionEtag; // @synthesize zoneProtectionEtag=_zoneProtectionEtag;
@property(retain, nonatomic) NSString *protectionEtag; // @synthesize protectionEtag=_protectionEtag;
@property(retain, nonatomic) NSString *previousProtectionEtag; // @synthesize previousProtectionEtag=_previousProtectionEtag;
@property(retain, nonatomic) NSData *protectionData; // @synthesize protectionData=_protectionData;
@property(nonatomic) _Bool serializeProtectionData; // @synthesize serializeProtectionData=_serializeProtectionData;
@property(nonatomic) _Bool wasCached; // @synthesize wasCached=_wasCached;
@property(nonatomic, getter=isKnownToServer) _Bool knownToServer; // @synthesize knownToServer=_knownToServer;
@property(retain, nonatomic) NSSet *changedKeysSet; // @synthesize changedKeysSet=_changedKeysSet;
@property(retain, nonatomic) NSArray *conflictLoserEtags; // @synthesize conflictLoserEtags=_conflictLoserEtags;
@property(retain, nonatomic) NSString *etag; // @synthesize etag=_etag;
@property(copy, nonatomic) NSString *modifiedByDevice; // @synthesize modifiedByDevice=_modifiedByDevice;
@property(nonatomic) _Bool trackChanges; // @synthesize trackChanges=_trackChanges;
@property(retain, nonatomic) NSDictionary *originalValues; // @synthesize originalValues=_originalValues;
@property(retain, nonatomic) NSDictionary *values; // @synthesize values=_values;
@property(copy, nonatomic) NSDate *modificationDate; // @synthesize modificationDate=_modificationDate;
@property(copy, nonatomic) CKRecordID *lastModifiedUserRecordID; // @synthesize lastModifiedUserRecordID=_lastModifiedUserRecordID;
@property(copy, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
@property(copy, nonatomic) CKRecordID *creatorUserRecordID; // @synthesize creatorUserRecordID=_creatorUserRecordID;
@property(copy, nonatomic) CKRecordID *recordID; // @synthesize recordID=_recordID;
@property(copy, nonatomic) NSString *recordType; // @synthesize recordType=_recordType;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)encodeSystemFieldsWithCoder:(id)arg1;
- (id)sharedItemID;
- (void)CKAssignToContainerWithID:(id)arg1;
@property(readonly, nonatomic) _Bool hasModifiedEncryptedData;
@property(readonly, nonatomic) _Bool hasEncryptedData;
@property(readonly, nonatomic) _Bool hasModifiedPropertiesRequiringEncryption;
@property(readonly, nonatomic) _Bool hasPropertiesRequiringEncryption;
@property(readonly, nonatomic) _Bool containsAssetValues;
- (_Bool)_checkProperties:(_Bool)arg1 withValueCheckBlock:(CDUnknownBlockType)arg2;
- (id)allTokens;
- (id)_allStrings;
- (id)allKeys;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)_validateRecordValue:(id)arg1;
- (void)_validateRecordKey:(id)arg1;
- (void)_validateRecordName:(id)arg1;
- (void)setNilValueForKey:(id)arg1;
- (id)valueForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
@property(readonly, copy, nonatomic) NSString *recordChangeTag;
- (void)resetChangedKeys;
- (id)changedKeys;
- (id)description;
- (id)CKPropertiesDescription;
- (id)debugDescription;
- (id)copyWithOriginalValues;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRecordType:(id)arg1 zoneID:(id)arg2;
- (id)initWithRecordType:(id)arg1;
- (id)initWithRecordType:(id)arg1 recordID:(id)arg2;
- (id)_initSkippingValidationWithRecordType:(id)arg1 recordID:(id)arg2;
- (id)init;

@end

@interface CKRecordID : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_recordName;
    CKRecordZoneID *_zoneID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) CKRecordZoneID *zoneID; // @synthesize zoneID=_zoneID;
@property(retain, nonatomic) NSString *recordName; // @synthesize recordName=_recordName;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)ckShortDescription;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithSqliteRepresentation:(id)arg1;
- (id)sqliteRepresentation;
- (id)initWithRecordName:(id)arg1 zoneID:(id)arg2;
- (id)initWithRecordName:(id)arg1;

@end

@interface CKRecordZone : NSObject <NSSecureCoding, NSCopying>
{
    int _deviceCount;
    CKRecordZoneID *_zoneID;
    unsigned long long _capabilities;
    NSData *_currentServerContinuationToken;
    NSData *_clientChangeToken;
    NSData *_protectionData;
    NSString *_protectionEtag;
    NSString *_previousProtectionEtag;
    long long _assetQuotaUsage;
    long long _metadataQuotaUsage;
    CKContainerID *_containerID;
}

+ (_Bool)supportsSecureCoding;
+ (id)defaultRecordZone;
@property(copy, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
@property(nonatomic) long long metadataQuotaUsage; // @synthesize metadataQuotaUsage=_metadataQuotaUsage;
@property(nonatomic) long long assetQuotaUsage; // @synthesize assetQuotaUsage=_assetQuotaUsage;
@property(retain, nonatomic) NSString *previousProtectionEtag; // @synthesize previousProtectionEtag=_previousProtectionEtag;
@property(retain, nonatomic) NSString *protectionEtag; // @synthesize protectionEtag=_protectionEtag;
@property(retain, nonatomic) NSData *protectionData; // @synthesize protectionData=_protectionData;
@property(retain, nonatomic) NSData *clientChangeToken; // @synthesize clientChangeToken=_clientChangeToken;
@property(retain, nonatomic) NSData *currentServerContinuationToken; // @synthesize currentServerContinuationToken=_currentServerContinuationToken;
@property(nonatomic) int deviceCount; // @synthesize deviceCount=_deviceCount;
@property(nonatomic) unsigned long long capabilities; // @synthesize capabilities=_capabilities;
@property(retain, nonatomic) CKRecordZoneID *zoneID; // @synthesize zoneID=_zoneID;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)sharedItemID;
- (void)CKAssignToContainerWithID:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithZoneID:(id)arg1;
- (id)initWithZoneName:(id)arg1;
- (id)_initZoneWithIdentifier:(id)arg1 capabilities:(unsigned long long)arg2;

@end

@interface CKRecordZoneID : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_zoneName;
    NSString *_ownerName;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *ownerName; // @synthesize ownerName=_ownerName;
@property(retain, nonatomic) NSString *zoneName; // @synthesize zoneName=_zoneName;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)ckShortDescription;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithSqliteRepresentation:(id)arg1;
- (id)sqliteRepresentation;
- (id)initWithZoneName:(id)arg1 ownerName:(id)arg2;

@end

@interface CKRecordZoneNotification : CKNotification <NSSecureCoding>
{
    CKRecordZoneID *_recordZoneID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) CKRecordZoneID *recordZoneID; // @synthesize recordZoneID=_recordZoneID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

@interface CKReference : NSObject <CKRecordValue, NSSecureCoding, NSCopying>
{
    unsigned long long _referenceAction;
    CKRecordID *_recordID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) CKRecordID *recordID; // @synthesize recordID=_recordID;
@property(readonly, nonatomic) unsigned long long referenceAction; // @synthesize referenceAction=_referenceAction;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CKPropertiesDescription;
- (id)ckShortDescription;
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRecord:(id)arg1 action:(unsigned long long)arg2;
- (id)initWithRecordID:(id)arg1 action:(unsigned long long)arg2;
- (id)_initBare;
- (id)init;

// Remaining properties
@property(readonly) Class superclass;

@end

@interface CKRepairZonePCSOperation : CKDatabaseOperation
{
    NSArray *_zoneIDs;
    CDUnknownBlockType _zoneRepairedBlock;
}

@property(copy, nonatomic) CDUnknownBlockType zoneRepairedBlock; // @synthesize zoneRepairedBlock=_zoneRepairedBlock;
@property(retain, nonatomic) NSArray *zoneIDs; // @synthesize zoneIDs=_zoneIDs;
- (void).cxx_destruct;
- (void)_handleProgressCallback:(id)arg1;
- (void)performCKOperation;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithZoneIDsToRepair:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKRepairZonePCSOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
{
    NSArray *_zoneIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *zoneIDs; // @synthesize zoneIDs=_zoneIDs;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKSQLite : NSObject
{
    _Bool _corrupt;
    NSString *_path;
    NSString *_schemaPath;
    unsigned long long _schemaVersion;
    NSString *_objectClassPrefix;
    struct sqlite3 *_db;
    unsigned long long _openCount;
    NSMutableDictionary *_statementsBySQL;
    NSDateFormatter *_dateFormatter;
}

@property(retain, nonatomic) NSDateFormatter *dateFormatter; // @synthesize dateFormatter=_dateFormatter;
@property(readonly, nonatomic) NSMutableDictionary *statementsBySQL; // @synthesize statementsBySQL=_statementsBySQL;
@property(nonatomic) _Bool corrupt; // @synthesize corrupt=_corrupt;
@property(nonatomic) unsigned long long openCount; // @synthesize openCount=_openCount;
@property(nonatomic) struct sqlite3 *db; // @synthesize db=_db;
@property(retain, nonatomic) NSString *objectClassPrefix; // @synthesize objectClassPrefix=_objectClassPrefix;
@property(readonly, nonatomic) unsigned long long schemaVersion; // @synthesize schemaVersion=_schemaVersion;
@property(readonly, nonatomic) NSString *schemaPath; // @synthesize schemaPath=_schemaPath;
@property(readonly, nonatomic) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (id)_boxedValue:(id)arg1 forObjcCProperty:(id)arg2;
- (id)_boxedPropertyDictionary:(id)arg1 forObjCClass:(id)arg2;
- (id)selectObjectOfClass:(Class)arg1 where:(id)arg2 bindings:(id)arg3;
- (id)selectAllObjectsOfClass:(Class)arg1 where:(id)arg2 bindings:(id)arg3;
- (id)selectAllObjectsOfClass:(Class)arg1;
- (long long)insertOrReplaceObject:(id)arg1;
- (id)_tableNameForClass:(Class)arg1;
- (void)deleteFrom:(id)arg1 where:(id)arg2 bindings:(id)arg3;
- (long long)insertOrReplaceInto:(id)arg1 values:(id)arg2;
- (unsigned long long)selectCountFrom:(id)arg1 where:(id)arg2 bindings:(id)arg3;
- (id)selectAllFrom:(id)arg1 where:(id)arg2 bindings:(id)arg3;
- (id)select:(id)arg1 from:(id)arg2 where:(id)arg3 bindings:(id)arg4;
- (id)select:(id)arg1 from:(id)arg2;
- (id)creationDate;
- (void)removePropertyForKey:(id)arg1;
- (void)setDateProperty:(id)arg1 forKey:(id)arg2;
- (id)datePropertyForKey:(id)arg1;
- (void)setProperty:(id)arg1 forKey:(id)arg2;
- (id)propertyForKey:(id)arg1;
- (void)dropAllTables;
- (id)allTableNames;
- (void)removeAllStatements;
- (id)statementForSQL:(id)arg1;
- (void)executeSQL:(id)arg1 arguments:(struct __va_list_tag [1])arg2;
- (void)executeSQL:(id)arg1;
- (long long)lastInsertRowID;
- (void)raise:(id)arg1;
- (void)vacuum;
- (void)analyze;
- (void)rollback;
- (void)end;
- (void)begin;
- (void)remove;
- (id)_schemaVersionString;
- (id)_schemaString;
- (void)close;
- (void)open;
- (_Bool)openWithError:(id *)arg1;
@property(readonly, nonatomic) _Bool isOpen;
- (void)dealloc;
- (id)initWithPath:(id)arg1 schemaFilename:(id)arg2 schemaVersion:(unsigned long long)arg3;
- (id)initWithPath:(id)arg1 bundle:(id)arg2 schemaFilename:(id)arg3 schemaVersion:(unsigned long long)arg4;
- (id)initWithPath:(id)arg1 schemaPath:(id)arg2 schemaVersion:(unsigned long long)arg3;

@end

@interface CKSQLitePool : NSObject
{
    _Bool _drainScheduled;
    CDUnknownBlockType _factory;
    NSMutableArray *_dbs;
    NSObject<OS_dispatch_queue> *_queue;
}

@property(nonatomic) _Bool drainScheduled; // @synthesize drainScheduled=_drainScheduled;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) NSMutableArray *dbs; // @synthesize dbs=_dbs;
@property(readonly, copy, nonatomic) CDUnknownBlockType factory; // @synthesize factory=_factory;
- (void).cxx_destruct;
- (void)_drain;
- (void)_scheduleDrain;
- (void)_closeDatabase:(id)arg1;
- (id)_openDatabaseWithError:(id *)arg1;
- (void)performWithDatabase:(CDUnknownBlockType)arg1;
- (_Bool)performWithDatabase:(CDUnknownBlockType)arg1 error:(id *)arg2;
- (void)closeAll;
- (void)releaseDatabase:(id)arg1;
- (id)acquireDatabase:(_Bool)arg1;
- (id)_acquireDatabaseWithError:(id *)arg1;
- (id)initWithFactory:(CDUnknownBlockType)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKSQLiteStatement : NSObject
{
    _Bool _reset;
    CKSQLite *_SQLite;
    NSString *_SQL;
    struct sqlite3_stmt *_handle;
}

@property(nonatomic, getter=isReset) _Bool reset; // @synthesize reset=_reset;
@property(readonly, nonatomic) struct sqlite3_stmt *handle; // @synthesize handle=_handle;
@property(readonly, nonatomic) NSString *SQL; // @synthesize SQL=_SQL;
@property(readonly, nonatomic) __weak CKSQLite *SQLite; // @synthesize SQLite=_SQLite;
- (void).cxx_destruct;
- (id)allObjectsByColumnName;
- (id)allObjects;
- (id)objectAtIndex:(unsigned long long)arg1;
- (id)textAtIndex:(unsigned long long)arg1;
- (id)blobAtIndex:(unsigned long long)arg1;
- (double)doubleAtIndex:(unsigned long long)arg1;
- (long long)int64AtIndex:(unsigned long long)arg1;
- (int)intAtIndex:(unsigned long long)arg1;
- (id)columnNameAtIndex:(unsigned long long)arg1;
- (int)columnTypeAtIndex:(unsigned long long)arg1;
- (unsigned long long)columnCount;
- (void)bindValues:(id)arg1;
- (void)bindValue:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)bindNullAtIndex:(unsigned long long)arg1;
- (void)bindText:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)bindBlob:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)bindDouble:(double)arg1 atIndex:(unsigned long long)arg2;
- (void)bindInt64:(long long)arg1 atIndex:(unsigned long long)arg2;
- (void)bindInt:(int)arg1 atIndex:(unsigned long long)arg2;
- (void)reset;
- (_Bool)step;
- (void)finalizeStatement;
- (id)initWithSQLite:(id)arg1 SQL:(id)arg2 handle:(struct sqlite3_stmt *)arg3;

@end

__attribute__((visibility("hidden")))
@interface CKSQLiteStatementEnumerator : NSEnumerator
{
    _Bool _closed;
    CKSQLiteStatement *_statement;
    CDUnknownBlockType _block;
}

@property(nonatomic) _Bool closed; // @synthesize closed=_closed;
@property(copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
@property(retain, nonatomic) CKSQLiteStatement *statement; // @synthesize statement=_statement;
- (void).cxx_destruct;
- (void)close;
- (id)nextObject;
- (void)dealloc;
- (id)initWithStatement:(id)arg1 block:(CDUnknownBlockType)arg2;

@end

@interface CKServerChangeToken : NSObject <NSCopying, NSSecureCoding>
{
    NSData *_data;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithData:(id)arg1;
- (id)init;

@end

@interface CKShare : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _isKnownToServer;
    CKShareID *_shareID;
    CKSharedItemID *_sharedItemID;
    NSData *_protectionData;
    NSString *_protectionVersion;
    NSMutableArray *_existingParticipants;
    NSMapTable *_addedParticipantsToOutgoingInvitationsTable;
    NSMutableArray *_removedParticipants;
    NSMutableSet *_pendingServerParticipants;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSMutableSet *pendingServerParticipants; // @synthesize pendingServerParticipants=_pendingServerParticipants;
@property(retain, nonatomic) NSMutableArray *removedParticipants; // @synthesize removedParticipants=_removedParticipants;
@property(retain, nonatomic) NSMapTable *addedParticipantsToOutgoingInvitationsTable; // @synthesize addedParticipantsToOutgoingInvitationsTable=_addedParticipantsToOutgoingInvitationsTable;
@property(retain, nonatomic) NSMutableArray *existingParticipants; // @synthesize existingParticipants=_existingParticipants;
@property(nonatomic) _Bool isKnownToServer; // @synthesize isKnownToServer=_isKnownToServer;
@property(retain, nonatomic) NSString *protectionVersion; // @synthesize protectionVersion=_protectionVersion;
@property(retain, nonatomic) NSData *protectionData; // @synthesize protectionData=_protectionData;
@property(copy, nonatomic) CKSharedItemID *sharedItemID; // @synthesize sharedItemID=_sharedItemID;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_updateFromPendingServerParticipants;
- (void)_mergeServerParticipants:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *allParticipants;
- (void)removeParticipant:(id)arg1;
- (id)addParticipantWithEmailAddress:(id)arg1 invitationMessage:(id)arg2 invitationImageURL:(id)arg3;
- (id)addParticipantWithUserRecordID:(id)arg1 invitationMessage:(id)arg2 invitationImageURL:(id)arg3;
- (id)_addParticipantWithUserRecordID:(id)arg1 emailAddress:(id)arg2 invitationMessage:(id)arg3 invitationImageURL:(id)arg4;
- (id)_matchingParticipantWithUserRecordID:(id)arg1 emailAddress:(id)arg2;
- (void)_addParticipant:(id)arg1 invitationMessage:(id)arg2 invitationImageURL:(id)arg3;
- (long long)acceptanceStatusForParticipant:(id)arg1;
- (long long)participantListPermissionForParticipant:(id)arg1;
- (void)setParticipantListPermission:(long long)arg1 forParticipant:(id)arg2;
- (long long)itemPermissionForParticipant:(id)arg1;
- (void)setItemPermission:(long long)arg1 forParticipant:(id)arg2;
- (id)_knownParticipantEqualToParticipant:(id)arg1;
- (void)CKAssignToContainerWithID:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)debugDescription;
- (id)description;
- (id)CKPropertiesDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithItem:(id)arg1 error:(id *)arg2;
- (id)initWithItem:(id)arg1 shareName:(id)arg2 error:(id *)arg3;
- (id)initWithItem:(id)arg1;
- (id)initWithItem:(id)arg1 shareName:(id)arg2;
- (id)_initWithSharedItemID:(id)arg1 shareID:(id)arg2 error:(id *)arg3;
- (id)_initBare;
- (id)init;

@end

@interface CKShareID : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_shareName;
    NSString *_ownerName;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *ownerName; // @synthesize ownerName=_ownerName;
@property(retain, nonatomic) NSString *shareName; // @synthesize shareName=_shareName;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)ckShortDescription;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithShareName:(id)arg1 ownerName:(id)arg2;

@end

@interface CKShareInvitation : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_invitationID;
    CKShareParticipant *_participant;
    NSString *_message;
    NSURL *_imageURL;
    CKShareID *_shareID;
    CKRecordID *_senderRecordID;
    NSDate *_invitationDate;
    NSString *_applicationContainer;
    long long _environment;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long environment; // @synthesize environment=_environment;
@property(retain, nonatomic) NSString *applicationContainer; // @synthesize applicationContainer=_applicationContainer;
@property(retain, nonatomic) NSDate *invitationDate; // @synthesize invitationDate=_invitationDate;
@property(retain, nonatomic) CKRecordID *senderRecordID; // @synthesize senderRecordID=_senderRecordID;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(retain, nonatomic) NSURL *imageURL; // @synthesize imageURL=_imageURL;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) CKShareParticipant *participant; // @synthesize participant=_participant;
@property(retain, nonatomic) NSString *invitationID; // @synthesize invitationID=_invitationID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@property(readonly, nonatomic) long long status;
- (id)debugDescription;
- (id)description;
- (id)CKPropertiesDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParticipant:(id)arg1 message:(id)arg2 imageURL:(id)arg3;

@end

@interface CKShareInvitationResponseOperation : CKOperation
{
    NSArray *_invitationsToAccept;
    NSArray *_invitationsToDecline;
    CDUnknownBlockType _shareInvitationResponseCompletionBlock;
    NSMutableDictionary *_successfulResponsesByID;
    NSMutableDictionary *_invitationsByInvitationID;
    NSMutableDictionary *_responseErrorsByInvitationID;
}

@property(retain, nonatomic) NSMutableDictionary *responseErrorsByInvitationID; // @synthesize responseErrorsByInvitationID=_responseErrorsByInvitationID;
@property(retain, nonatomic) NSMutableDictionary *invitationsByInvitationID; // @synthesize invitationsByInvitationID=_invitationsByInvitationID;
@property(retain, nonatomic) NSMutableDictionary *successfulResponsesByID; // @synthesize successfulResponsesByID=_successfulResponsesByID;
@property(copy, nonatomic) CDUnknownBlockType shareInvitationResponseCompletionBlock; // @synthesize shareInvitationResponseCompletionBlock=_shareInvitationResponseCompletionBlock;
@property(copy, nonatomic) NSArray *invitationsToDecline; // @synthesize invitationsToDecline=_invitationsToDecline;
@property(copy, nonatomic) NSArray *invitationsToAccept; // @synthesize invitationsToAccept=_invitationsToAccept;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (_Bool)CKOperationShouldRun:(id *)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithInvitationsToAccept:(id)arg1 invitationsToDecline:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CKShareInvitationResponseOperationInfo : CKOperationInfo
{
    NSArray *_invitationsToAccept;
    NSArray *_invitationsToDecline;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSArray *invitationsToDecline; // @synthesize invitationsToDecline=_invitationsToDecline;
@property(retain, nonatomic) NSArray *invitationsToAccept; // @synthesize invitationsToAccept=_invitationsToAccept;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKShareNotification : CKNotification <NSSecureCoding>
{
    long long _shareNotificationReason;
    CKShareID *_shareID;
    CKDiscoveredUserInfo *_participantInfo;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) CKDiscoveredUserInfo *participantInfo; // @synthesize participantInfo=_participantInfo;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(nonatomic) long long shareNotificationReason; // @synthesize shareNotificationReason=_shareNotificationReason;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)initWithRemoteNotificationDictionary:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CKShareOutgoingInvitation : NSObject <NSSecureCoding>
{
    NSString *_invitationMessage;
    NSURL *_invitationImageURL;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSURL *invitationImageURL; // @synthesize invitationImageURL=_invitationImageURL;
@property(copy, nonatomic) NSString *invitationMessage; // @synthesize invitationMessage=_invitationMessage;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKShareParticipant : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _isCurrentUser;
    CKRecordID *_userRecordID;
    NSString *_firstName;
    NSString *_lastName;
    NSString *_emailAddress;
    NSString *_participantID;
    long long _acceptanceStatus;
    long long _itemPermission;
    long long _listPermission;
    long long _originalAcceptanceStatus;
    long long _originalItemPermission;
    long long _originalListPermission;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long originalListPermission; // @synthesize originalListPermission=_originalListPermission;
@property(nonatomic) long long originalItemPermission; // @synthesize originalItemPermission=_originalItemPermission;
@property(nonatomic) long long originalAcceptanceStatus; // @synthesize originalAcceptanceStatus=_originalAcceptanceStatus;
@property(nonatomic) long long listPermission; // @synthesize listPermission=_listPermission;
@property(nonatomic) long long itemPermission; // @synthesize itemPermission=_itemPermission;
@property(nonatomic) long long acceptanceStatus; // @synthesize acceptanceStatus=_acceptanceStatus;
@property(nonatomic) _Bool isCurrentUser; // @synthesize isCurrentUser=_isCurrentUser;
@property(copy, nonatomic) NSString *participantID; // @synthesize participantID=_participantID;
@property(copy, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(copy, nonatomic) NSString *lastName; // @synthesize lastName=_lastName;
@property(copy, nonatomic) NSString *firstName; // @synthesize firstName=_firstName;
@property(copy, nonatomic) CKRecordID *userRecordID; // @synthesize userRecordID=_userRecordID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)debugDescription;
- (id)description;
- (id)CKPropertiesDescription;
- (unsigned long long)hash;
- (_Bool)isEquivalentToParticipant:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithUserRecordID:(id)arg1 participantID:(id)arg2 emailAddress:(id)arg3 acceptanceStatus:(long long)arg4 itemPermission:(long long)arg5 listPermission:(long long)arg6;
- (id)init;

@end

@interface CKSharedItemID : NSObject <NSSecureCoding, NSCopying>
{
    long long _itemType;
    long long _scope;
    CKContainerID *_containerID;
    NSObject<NSSecureCoding><NSCopying> *_itemIdentifier;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSObject<NSSecureCoding><NSCopying> *itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
@property(copy, nonatomic) CKContainerID *containerID; // @synthesize containerID=_containerID;
@property(nonatomic) long long scope; // @synthesize scope=_scope;
@property(nonatomic) long long itemType; // @synthesize itemType=_itemType;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)CKAssignToContainerWithID:(id)arg1;
- (id)commentIdentifier;
- (id)UIDocumentIdentifier;
- (id)shareID;
- (id)zoneID;
- (id)recordID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
- (id)ckShortDescription;
- (id)_itemTypeDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithItemType:(long long)arg1 itemIdentifier:(id)arg2;
- (id)initWithItemType:(long long)arg1 itemIdentifier:(id)arg2 containerID:(id)arg3;
- (id)init;

@end

@interface CKSubscription : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_subscriptionID;
    long long _subscriptionType;
    NSString *_recordType;
    NSPredicate *_predicate;
    unsigned long long _subscriptionOptions;
    CKNotificationInfo *_notificationInfo;
    CKRecordZoneID *_zoneID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) CKRecordZoneID *zoneID; // @synthesize zoneID=_zoneID;
@property(copy, nonatomic) CKNotificationInfo *notificationInfo; // @synthesize notificationInfo=_notificationInfo;
@property(nonatomic) unsigned long long subscriptionOptions; // @synthesize subscriptionOptions=_subscriptionOptions;
@property(copy, nonatomic) NSPredicate *predicate; // @synthesize predicate=_predicate;
@property(copy, nonatomic) NSString *recordType; // @synthesize recordType=_recordType;
@property(nonatomic) long long subscriptionType; // @synthesize subscriptionType=_subscriptionType;
@property(copy, nonatomic) NSString *subscriptionID; // @synthesize subscriptionID=_subscriptionID;
- (void).cxx_destruct;
- (id)description;
- (id)CKPropertiesDescription;
- (id)debugDescription;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_validateSubscriptionOptions:(unsigned long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithZoneID:(id)arg1 subscriptionID:(id)arg2 options:(unsigned long long)arg3;
- (id)initWithZoneID:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithRecordType:(id)arg1 predicate:(id)arg2 subscriptionID:(id)arg3 options:(unsigned long long)arg4;
- (id)initWithRecordType:(id)arg1 predicate:(id)arg2 options:(unsigned long long)arg3;
- (id)_initBare;
- (id)init;

@end

@interface CKUpdateUserPresenceOperation : CKOperation
{
    CKShareID *_shareID;
    long long _status;
    unsigned long long _customStatusFlags;
    double _ttl;
    CDUnknownBlockType _updateUserPresenceCompletionBlock;
    NSString *_lastETag;
    NSArray *_userPresence;
    NSString *_nextETag;
    NSError *_savedError;
}

@property(retain, nonatomic) NSError *savedError; // @synthesize savedError=_savedError;
@property(retain, nonatomic) NSString *nextETag; // @synthesize nextETag=_nextETag;
@property(retain, nonatomic) NSArray *userPresence; // @synthesize userPresence=_userPresence;
@property(retain, nonatomic) NSString *lastETag; // @synthesize lastETag=_lastETag;
@property(copy, nonatomic) CDUnknownBlockType updateUserPresenceCompletionBlock; // @synthesize updateUserPresenceCompletionBlock=_updateUserPresenceCompletionBlock;
@property(nonatomic) double ttl; // @synthesize ttl=_ttl;
@property(nonatomic) unsigned long long customStatusFlags; // @synthesize customStatusFlags=_customStatusFlags;
@property(nonatomic) long long status; // @synthesize status=_status;
@property(copy, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
- (void).cxx_destruct;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)performCKOperation;
- (void)_handleProgressCallback:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (id)initWithStatus:(long long)arg1 inShareWithID:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CKUpdateUserPresenceOperationInfo : CKOperationInfo
{
    _Bool _isLurk;
    long long _status;
    unsigned long long _customStatusFlags;
    double _ttl;
    CKShareID *_shareID;
    NSString *_lastETag;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *lastETag; // @synthesize lastETag=_lastETag;
@property(retain, nonatomic) CKShareID *shareID; // @synthesize shareID=_shareID;
@property(nonatomic) _Bool isLurk; // @synthesize isLurk=_isLurk;
@property(nonatomic) double ttl; // @synthesize ttl=_ttl;
@property(nonatomic) unsigned long long customStatusFlags; // @synthesize customStatusFlags=_customStatusFlags;
@property(nonatomic) long long status; // @synthesize status=_status;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CKUserNotificationUtilities : NSObject
{
}

+ (void)showUserNotification:(struct __CFUserNotification *)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;

@end

@interface CKUserPresence : NSObject <NSSecureCoding, NSCopying>
{
    CKRecordID *_userRecordID;
    long long _status;
    long long _additionalStatusFlags;
    NSDate *_lastViewed;
    NSDate *_lastEdited;
    NSDate *_lastCustom;
    NSDate *_lastInvisible;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSDate *lastInvisible; // @synthesize lastInvisible=_lastInvisible;
@property(copy, nonatomic) NSDate *lastCustom; // @synthesize lastCustom=_lastCustom;
@property(copy, nonatomic) NSDate *lastEdited; // @synthesize lastEdited=_lastEdited;
@property(copy, nonatomic) NSDate *lastViewed; // @synthesize lastViewed=_lastViewed;
@property(nonatomic) long long additionalStatusFlags; // @synthesize additionalStatusFlags=_additionalStatusFlags;
@property(nonatomic) long long status; // @synthesize status=_status;
@property(copy, nonatomic) CKRecordID *userRecordID; // @synthesize userRecordID=_userRecordID;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)CKPropertiesDescription;
@property(readonly, nonatomic) NSDate *dateOfLastStatusChange;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface CKZonePCSDiagnosticInformation : NSObject <NSSecureCoding>
{
    _Bool _wasRepaired;
    int _pcsStatus;
    NSString *_pcsDiagnosticString;
    NSError *_pcsError;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSError *pcsError; // @synthesize pcsError=_pcsError;
@property(retain, nonatomic) NSString *pcsDiagnosticString; // @synthesize pcsDiagnosticString=_pcsDiagnosticString;
@property(nonatomic) int pcsStatus; // @synthesize pcsStatus=_pcsStatus;
@property(nonatomic) _Bool wasRepaired; // @synthesize wasRepaired=_wasRepaired;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface CLLocation (CKRecordValue) <CKRecordValue>

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSArray (CKAssignToContainer)
- (void)CKAssignToContainerWithID:(id)arg1;
@end

@interface NSArray (CKRecordValue) <CKRecordValue>

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSComparisonPredicate (Validation)
- (void)validate;
- (_Bool)validateBasicOperatorPredicate;
- (_Bool)validateFullTextSearchPredicate;
- (unsigned long long)_comparisonOptionForString:(id)arg1;
- (_Bool)validateBetweenPredicate;
- (_Bool)validateBeginsWithPredicate;
- (_Bool)validateContainsAllInPredicate;
- (_Bool)validateContainsAnyPredicate;
- (_Bool)validateInPredicate;
- (_Bool)validateContainsPredicate;
- (_Bool)validateNearPredicate;
@end

@interface NSCompoundPredicate (Validation)
- (void)validate;
@end

@interface NSConstantValueExpression (Validation)
- (id)CKExpressionValue;
@end

@interface NSData (CKRecordValue) <CKRecordValue>

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSData (CKUtilsAdditions)
+ (id)CKDataWithHexString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1 stringIsUppercase:(_Bool)arg2;
- (id)CKBase64URLSafeString;
- (id)CKUppercaseHexStringWithoutSpaces;
- (id)CKLowercaseHexStringWithoutSpaces;
- (id)CKHexString;
@end

@interface NSDate (CKRecordValue) <CKRecordValue>

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSDictionary (CKAssignToContainer)
- (void)CKAssignToContainerWithID:(id)arg1;
@end

@interface NSError (CKErrorGoo)
- (_Bool)CKIsNotFoundError;
- (id)CKClientSuitableError;
@end

@interface NSError (CKUtilsAdditions)
+ (id)errorFromErrno;
+ (id)errorWithPOSIXCode:(int)arg1;
- (_Bool)isPOSIXErrorCode:(long long)arg1;
@end

@interface NSExpression (Validation)
- (id)CKExpressionValue;
@end

@interface NSKeyPathExpression (Validation)
- (id)CKExpressionValue;
@end

@interface NSMapTable (CKUtilsAdditions)
- (id)CKAllKeys;
@end

@interface NSNumber (CKRecordValue) <CKRecordValue>

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSObject (CKAssignToContainer)
- (void)CKAssignToContainerWithID:(id)arg1;
@end

@interface NSObject (CKPropertiesDescription)
- (id)CKDescription;
- (id)CKPropertiesDescription;
@end

@interface NSPredicate (Validation)
- (void)validate;
@end

@interface NSSet (CKAssignToContainer)
- (void)CKAssignToContainerWithID:(id)arg1;
@end

@interface NSString (CKRecordValue) <CKRecordValue>

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSString (CKShortDescription) <CKShortDescription>
- (id)ckShortDescription;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSString (CKUtilsAdditions)
- (id)CKSafeHashStringForPathComponent;
- (id)CKSafeStringForPathComponent;
@end

@interface NSVariableExpression (Validation)
- (id)CKExpressionValue;
@end

