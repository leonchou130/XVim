//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AccountsDaemon.framework/AccountsDaemon
// UUID: D836B222-57E7-3082-A963-54C74DB6F712
//
//                           Arch: x86_64
//                Current version: 113.0.0
//          Compatibility version: 1.0.0
//                 Source version: 527.0.7.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ACAccountStoreProtocol <NSObject>
- (void)accountCredentialsDidChangeForAccountWithIdentifier:(NSString *)arg1;
@end

@protocol ACDAccountAuthenticationPlugin <NSObject>
- (void)verifyCredentialsForAccount:(ACAccount *)arg1 accountStore:(ACDAccountStore *)arg2 completion:(void (^)(ACAccount *, NSError *))arg3;

@optional
- (ACAccountCredential *)credentialForAccount:(ACAccount *)arg1 client:(ACDClient *)arg2 error:(id *)arg3;
- (ACAccountCredential *)credentialForAccount:(ACAccount *)arg1 client:(ACDClient *)arg2;
- (void)verifyCredentialsForAccount:(ACAccount *)arg1 client:(ACDClient *)arg2 withHandler:(void (^)(ACAccount *, NSError *))arg3;
- (void)renewCredentialsForAccount:(ACAccount *)arg1 accountStore:(ACDAccountStore *)arg2 reason:(NSString *)arg3 completion:(void (^)(long long, NSError *))arg4;
- (NSString *)renewalIDForAccount:(ACAccount *)arg1;
- (ACAccountCredential *)credentialForAccount:(ACAccount *)arg1 client:(ACDClient *)arg2 store:(ACDAccountStore *)arg3 error:(id *)arg4;
- (_Bool)isPushSupportedForAccount:(ACAccount *)arg1;
- (void)renewCredentialsForAccount:(ACAccount *)arg1 accountStore:(ACDAccountStore *)arg2 options:(NSDictionary *)arg3 completion:(void (^)(long long, NSError *))arg4;
@end

@protocol ACDAccountNotificationPlugin <NSObject>

@optional
- (void)account:(ACAccount *)arg1 didPerformActionsForDataclasses:(NSArray *)arg2;
- (void)account:(ACAccount *)arg1 willPerformActionsForDataclasses:(NSArray *)arg2;
- (void)account:(ACAccount *)arg1 didChangeWithType:(int)arg2 inStore:(ACDAccountStore *)arg3 oldAccount:(ACAccount *)arg4;
- (_Bool)account:(ACAccount *)arg1 willChangeWithType:(int)arg2 inStore:(ACDAccountStore *)arg3 oldAccount:(ACAccount *)arg4;
- (_Bool)canRemoveAccount:(ACAccount *)arg1 inStore:(ACDAccountStore *)arg2;
- (_Bool)canSaveAccount:(ACAccount *)arg1 inStore:(ACDAccountStore *)arg2;
@end

@protocol ACDAccountStoreDelegate
- (void)accountStoreDidSaveAccounts;
@end

@protocol ACDAccountStoreProtocol <NSObject>
- (void)notifyRemoteDevicesOfModifiedAccount:(ACAccount *)arg1 withChangeType:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)notifyRemoteDevicesOfModifiedAccount:(ACAccount *)arg1 withChangeType:(NSString *)arg2;
- (void)openAuthenticationURL:(NSURL *)arg1 forAccount:(ACAccount *)arg2 shouldConfirm:(_Bool)arg3 completion:(void (^)(_Bool, NSError *))arg4;
- (void)clientTokenForAccountIdentifier:(NSString *)arg1 completion:(void (^)(NSString *, NSError *))arg2;
- (void)addClientToken:(NSString *)arg1 forAccountIdentifier:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)handleURL:(NSURL *)arg1;
- (void)accountIdentifiersEnabledForDataclasses:(NSArray *)arg1 withAccountTypeIdentifiers:(NSArray *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)isPushSupportedForAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)tetheredSyncSourceTypeForDataclass:(NSString *)arg1 completion:(void (^)(NSString *, NSError *))arg2;
- (void)isTetheredSyncingEnabledForDataclass:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)renewCredentialsForAccount:(ACAccount *)arg1 options:(NSDictionary *)arg2 completion:(void (^)(NSNumber *, NSError *))arg3;
- (void)verifyCredentialsForAccount:(ACAccount *)arg1 saveWhenAuthorized:(_Bool)arg2 withHandler:(void (^)(ACAccount *, NSError *))arg3;
- (void)clearAllPermissionsGrantedForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(id, NSError *))arg2;
- (void)typeIdentifierForDomain:(NSString *)arg1 withHandler:(void (^)(NSString *, NSError *))arg2;
- (void)clearGrantedPermissionsForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSError *))arg2;
- (void)grantedPermissionsForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSSet *, NSError *))arg2;
- (void)permissionForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSNumber *, NSError *))arg2;
- (void)setPermissionGranted:(NSNumber *)arg1 forBundleID:(NSString *)arg2 onAccountType:(ACAccountType *)arg3 withHandler:(void (^)(id, NSError *))arg4;
- (void)appPermissionsForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSDictionary *, NSError *))arg2;
- (void)requestAccessForAccountTypeWithIdentifier:(NSString *)arg1 options:(NSDictionary *)arg2 withHandler:(void (^)(NSNumber *, NSError *))arg3;
- (void)removeAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSNumber *, NSError *))arg2;
- (void)insertAccountType:(ACAccountType *)arg1 withHandler:(void (^)(ACAccountType *, NSError *))arg2;
- (void)updateExistenceCacheOfAccountWithTypeIdentifier:(NSString *)arg1 withHandler:(void (^)(NSNumber *, NSError *))arg2;
- (void)saveAccount:(ACAccount *)arg1 verify:(_Bool)arg2 dataclassActions:(NSDictionary *)arg3 completion:(void (^)(NSURL *, NSError *))arg4;
- (void)saveAccount:(ACAccount *)arg1 withHandler:(void (^)(NSURL *, NSError *))arg2;
- (void)canSaveAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)removeAccount:(ACAccount *)arg1 withDataclassActions:(NSDictionary *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)accessKeysForAccountType:(ACAccountType *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)isPerformingDataclassActionsForAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)dataclassActionsForAccountDeletion:(ACAccount *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;
- (void)dataclassActionsForAccountSave:(ACAccount *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;
- (void)syncableDataclassesForAccountType:(ACAccountType *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)supportedDataclassesForAccountType:(ACAccountType *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)dataclassesWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)provisionedDataclassesForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)enabledDataclassesForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)credentialForAccount:(ACAccount *)arg1 serviceID:(NSString *)arg2 handler:(void (^)(ACAccountCredential *, NSError *))arg3;
- (void)credentialForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccountCredential *, NSError *))arg2;
- (void)accountTypeWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccountType *, NSError *))arg2;
- (void)displayAccountTypeForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccountType *, NSError *))arg2;
- (void)childAccountsWithAccountTypeIdentifier:(NSString *)arg1 parentAccountIdentifier:(NSString *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (void)accountsWithAccountTypeIdentifiers:(NSArray *)arg1 preloadedProperties:(NSArray *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)visibleTopLevelAccountsWithAccountTypeIdentifiers:(NSArray *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)kerberosAccountsForDomainFromURL:(NSURL *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)accountExistsWithDescription:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)accountIdentifiersEnabledForDataclass:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)accountIdentifiersEnabledToSyncDataclass:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)childAccountsForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)parentAccountForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccount *, NSError *))arg2;
- (void)accountsWithAccountType:(ACAccountType *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)accountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccount *, NSError *))arg2;
- (void)accountTypesWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)accountsWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)setNotificationsEnabled:(_Bool)arg1;
- (void)setClientBundleID:(NSString *)arg1 withHandler:(void (^)(_Bool, NSError *))arg2;
@end

@protocol ACDAuthenticationDialogManagerProtocol <NSObject>
- (void)authenticationDialogDidFinishWithSuccess:(_Bool)arg1;
- (void)contextForAuthenticationDialog:(void (^)(NSURL *, NSString *))arg1;
@end

@protocol ACDDataclassOwnersManagerProtocol <NSObject>
- (void)isPerformingDataclassActionsForAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)performDataclassActions:(NSDictionary *)arg1 forAccount:(ACAccount *)arg2 withChildren:(NSArray *)arg3 completion:(void (^)(_Bool, NSError *))arg4;
- (void)actionsForDisablingDataclass:(NSString *)arg1 onAccount:(ACAccount *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)actionsForEnablingDataclass:(NSString *)arg1 onAccount:(ACAccount *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)actionsForDeletingAccount:(ACAccount *)arg1 affectingDataclass:(NSString *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)actionsForAddingAccount:(ACAccount *)arg1 affectingDataclass:(NSString *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
@end

@protocol ACDOAuthSignerProtocol <NSObject>
- (void)setClientBundleID:(NSString *)arg1 withHandler:(void (^)(_Bool, NSError *))arg2;
- (void)signURLRequest:(NSURLRequest *)arg1 withAccount:(ACAccount *)arg2 applicationID:(NSString *)arg3 timestamp:(NSDate *)arg4 handler:(void (^)(NSURLRequest *, NSError *))arg5;
- (void)signURLRequest:(NSURLRequest *)arg1 withAccount:(ACAccount *)arg2 callingPID:(NSNumber *)arg3 timestamp:(NSDate *)arg4 handler:(void (^)(NSURLRequest *, NSError *))arg5;
- (void)setShouldIncludeAppIdInRequest:(_Bool)arg1;
@end

@protocol IDSServiceDelegate <NSObject>

@optional
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 inviteReceivedForSession:(IDSSession *)arg3 fromID:(NSString *)arg4 withContext:(NSData *)arg5;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 inviteReceivedForSession:(IDSSession *)arg3 fromID:(NSString *)arg4 withOptions:(NSDictionary *)arg5;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 inviteReceivedForSession:(IDSSession *)arg3 fromID:(NSString *)arg4;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 identifier:(NSString *)arg3 hasBeenDeliveredWithContext:(id)arg4;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 identifier:(NSString *)arg3 didSendWithSuccess:(_Bool)arg4 error:(NSError *)arg5;
- (void)service:(IDSService *)arg1 nearbyDevicesChanged:(NSArray *)arg2;
- (void)service:(IDSService *)arg1 devicesChanged:(NSArray *)arg2;
- (void)service:(IDSService *)arg1 activeAccountsChanged:(NSSet *)arg2;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingUnhandledProtobuf:(IDSProtobuf *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingData:(NSData *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;
- (void)service:(IDSService *)arg1 account:(IDSAccount *)arg2 incomingMessage:(NSDictionary *)arg3 fromID:(NSString *)arg4 context:(IDSMessageContext *)arg5;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@interface ACDAccessPluginManager : NSObject
{
    NSSet *_accessPlugins;
    NSObject<OS_dispatch_queue> *_accessPluginQueue;
}

- (void).cxx_destruct;
- (id)_authorizationPluginForAccountType:(id)arg1;
- (void)revokeAllAccessToAccountsOfType:(id)arg1 store:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)revokeAccessToAccountsOfType:(id)arg1 forClient:(id)arg2 store:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)authorizeAccessToAccountsOfType:(id)arg1 forClient:(id)arg2 store:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)handleAccessRequestToAccountsOfType:(id)arg1 forClient:(id)arg2 withOptions:(id)arg3 store:(id)arg4 allowUserInteraction:(_Bool)arg5 completion:(CDUnknownBlockType)arg6;
- (id)init;

@end

@interface ACDAccountChange : NSObject
{
    int _changeType;
    ACAccount *_account;
    ACAccount *_oldAccount;
}

+ (id)changeWithChangeType:(int)arg1 account:(id)arg2 oldAccount:(id)arg3;
@property(retain, nonatomic) ACAccount *oldAccount; // @synthesize oldAccount=_oldAccount;
@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
@property(nonatomic) int changeType; // @synthesize changeType=_changeType;
- (void).cxx_destruct;
- (id)initWithChangeType:(int)arg1 account:(id)arg2 oldAccount:(id)arg3;

@end

@interface ACDAccountNotifier : NSObject
{
    NSSet *_notificationPlugins;
}

+ (id)sharedAccountNotifier;
- (void).cxx_destruct;
@property(readonly) __weak NSSet *notificationPlugins;
- (void)postDidPerformDataclassActionsOnAccount:(id)arg1 forDataclasses:(id)arg2;
- (void)postWillPerformDataclassActionsOnAccount:(id)arg1 forDataclasses:(id)arg2;
- (void)postDidChangeNotificationForType:(int)arg1 inStore:(id)arg2 newAccount:(id)arg3 oldAccount:(id)arg4;
- (_Bool)postWillChangeNotificationForType:(int)arg1 inStore:(id)arg2 newAccount:(id)arg3 oldAccount:(id)arg4;
- (_Bool)canRemoveAccount:(id)arg1 inStore:(id)arg2;
- (_Bool)canSaveAccount:(id)arg1 inStore:(id)arg2;
- (void)_faultInNotificationPlugins;

@end

@interface ACDAccountStore : ACAccountStore <ACDAccountStoreProtocol>
{
    NSMutableArray *_accountChanges;
    ACDDatabase *_database;
    ACDClientAuthorizationManager *_authorizationManager;
    ACDFakeRemoteAccountStoreSession *_fakeRemoteAccountStoreSession;
    _Bool _notificationsEnabled;
    _Bool _migrationInProgress;
    id <ACDAccountStoreDelegate> _delegate;
    ACDClient *_client;
    ACDAccountStoreFilter *_filter;
    ACDAuthenticationPluginManager *_authenticationPluginManager;
    ACDAccessPluginManager *_accessPluginManager;
    ACDDataclassOwnersManager *_dataclassOwnersManager;
    ACDAuthenticationDialogManager *_authenticationDialogManager;
    ACRemoteDeviceProxy *_remoteDeviceProxy;
}

@property(nonatomic, getter=isMigrationInProgress) _Bool migrationInProgress; // @synthesize migrationInProgress=_migrationInProgress;
@property(nonatomic) _Bool notificationsEnabled; // @synthesize notificationsEnabled=_notificationsEnabled;
@property(retain, nonatomic) ACRemoteDeviceProxy *remoteDeviceProxy; // @synthesize remoteDeviceProxy=_remoteDeviceProxy;
@property(retain, nonatomic) ACDAuthenticationDialogManager *authenticationDialogManager; // @synthesize authenticationDialogManager=_authenticationDialogManager;
@property(retain, nonatomic) ACDDataclassOwnersManager *dataclassOwnersManager; // @synthesize dataclassOwnersManager=_dataclassOwnersManager;
@property(retain, nonatomic) ACDAccessPluginManager *accessPluginManager; // @synthesize accessPluginManager=_accessPluginManager;
@property(retain, nonatomic) ACDAuthenticationPluginManager *authenticationPluginManager; // @synthesize authenticationPluginManager=_authenticationPluginManager;
@property(nonatomic) __weak ACDAccountStoreFilter *filter; // @synthesize filter=_filter;
@property(readonly, nonatomic) ACDClientAuthorizationManager *authorizationManager; // @synthesize authorizationManager=_authorizationManager;
@property(nonatomic) __weak ACDClient *client; // @synthesize client=_client;
@property(nonatomic) __weak id <ACDAccountStoreDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)sendRenewCredentialsForAccount:(id)arg1;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)arg1 withChangeType:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)arg1 withChangeType:(id)arg2;
- (void)accountsWithAccountTypeIdentifiers:(id)arg1 preloadedProperties:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)visibleTopLevelAccountsWithAccountTypeIdentifiers:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)openAuthenticationURL:(id)arg1 forAccount:(id)arg2 shouldConfirm:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (id)remoteAccountStoreSession;
- (void)disconnectFromRemoteAccountStore;
- (void)connectToRemoteAccountStoreUsingEndpoint:(id)arg1;
- (void)handleURL:(id)arg1;
- (void)_removeClientTokenForAccountIdentifer:(id)arg1;
- (id)_clientTokenForAccountIdentifier:(id)arg1 error:(id)arg2;
- (void)clientTokenForAccountIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addClientToken:(id)arg1 forAccountIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_clientTokenQueue;
- (void)isPushSupportedForAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)kerberosAccountsForDomainFromURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)tetheredSyncSourceTypeForDataclass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)isTetheredSyncingEnabledForDataclass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)accountExistsWithDescription:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)isPerformingDataclassActionsForAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)dataclassActionsForAccountDeletion:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)dataclassActionsForAccountSave:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateExistenceCacheOfAccountWithTypeIdentifier:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)_updateExistenceCacheOfAccountWithTypeIdentifier:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)typeIdentifierForDomain:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)clearGrantedPermissionsForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)grantedPermissionsForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)permissionForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)clearAllPermissionsGrantedForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setPermissionGranted:(id)arg1 forBundleID:(id)arg2 onAccountType:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)appPermissionsForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)requestAccessForAccountTypeWithIdentifier:(id)arg1 options:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_requestAccessForAccountTypeWithIdentifier:(id)arg1 options:(id)arg2 allowUserInteraction:(_Bool)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)renewCredentialsForAccount:(id)arg1 options:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)verifyCredentialsForAccount:(id)arg1 saveWhenAuthorized:(_Bool)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_completeSave:(id)arg1 dataclassActions:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)saveAccount:(id)arg1 verify:(_Bool)arg2 dataclassActions:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)saveAccount:(id)arg1 pid:(id)arg2 verify:(_Bool)arg3 dataclassActions:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)saveAccount:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)canSaveAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)removeAccount:(id)arg1 withDataclassActions:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)removeAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)insertAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)accessKeysForAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)supportedDataclassesForAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)syncableDataclassesForAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)provisionedDataclassesForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)enabledDataclassesForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountIdentifiersEnabledForDataclasses:(id)arg1 withAccountTypeIdentifiers:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)_isManagedAccount:(id)arg1 enabledForManagedDataclass:(id)arg2;
- (_Bool)_canManagedAccountType:(id)arg1 syncManagedDataclass:(id)arg2;
- (void)accountIdentifiersEnabledToSyncDataclass:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountIdentifiersEnabledForDataclass:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (id)_childAccountsForAccountWithID:(id)arg1;
- (void)childAccountsWithAccountTypeIdentifier:(id)arg1 parentAccountIdentifier:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)childAccountsForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)parentAccountForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (id)_accountsWithAcountType:(id)arg1 error:(id *)arg2;
- (void)accountsWithAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)dataclassesWithHandler:(CDUnknownBlockType)arg1;
- (id)_legacyCredentialForAccount:(id)arg1 client:(id)arg2 error:(id *)arg3;
- (void)credentialForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)credentialForAccount:(id)arg1 serviceID:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (id)masterCredentialForAccountIdentifier:(id)arg1;
- (void)accountTypeWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)displayAccountTypeForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountTypesWithHandler:(CDUnknownBlockType)arg1;
- (void)accountsWithHandler:(CDUnknownBlockType)arg1;
- (id)_allAccounts_sync;
- (void)accountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)setClientBundleID:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (_Bool)_clientIsEntitledForAdHocAccountType:(id)arg1;
- (id)_handleAccountAdd:(id)arg1 withDataclassActions:(id)arg2;
- (id)_handleAccountMod:(id)arg1 withDataclassActions:(id)arg2;
- (void)_noteAccountStoreDidSaveAccountsWithAccountTypeIdentifiers:(id)arg1;
- (void)_setAccountManagedObjectRelationships:(id)arg1 withAccount:(id)arg2 isNew:(_Bool)arg3 error:(id *)arg4;
- (_Bool)_canSaveAccount:(id)arg1;
- (id)_dataclassWithName:(id)arg1 createIfNecessary:(_Bool)arg2;
- (id)_accountTypeWithIdentifier:(id)arg1;
- (id)_displayAccountForAccount:(id)arg1;
- (id)_accountWithIdentifier:(id)arg1;
- (void)_deleteAccountNoSave:(id)arg1 withDataclassActions:(id)arg2 error:(id *)arg3;
- (void)deleteAccountNoSave:(id)arg1 error:(id *)arg2;
- (void)_updateAccountNoSave:(id)arg1 withDataclassActions:(id)arg2 error:(id *)arg3;
- (void)updateAccountNoSave:(id)arg1 error:(id *)arg2;
- (id)_addAccountNoSave:(id)arg1 withDataclassActions:(id)arg2 error:(id *)arg3;
- (void)addAccountNoSave:(id)arg1 error:(id *)arg2;
- (id)_save;
- (id)_removeAccountNoSave:(id)arg1 withDataclassActions:(id)arg2;
- (_Bool)accountsExistWithAccountTypeIdentifier:(id)arg1;
- (id)accountsWithAccountTypeIdentifier:(id)arg1;
- (id)accountTypeWithIdentifier:(id)arg1;
- (id)initWithClient:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ACDAccountStoreFilter : NSObject <ACDAccountStoreProtocol>
{
    ACDAccountStore *_backingAccountStore;
}

+ (id)_whiteList;
@property(retain, nonatomic) ACDAccountStore *backingAccountStore; // @synthesize backingAccountStore=_backingAccountStore;
- (void).cxx_destruct;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)arg1 withChangeType:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)arg1 withChangeType:(id)arg2;
- (void)accountsWithAccountTypeIdentifiers:(id)arg1 preloadedProperties:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)visibleTopLevelAccountsWithAccountTypeIdentifiers:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)openAuthenticationURL:(id)arg1 forAccount:(id)arg2 shouldConfirm:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (void)clientTokenForAccountIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addClientToken:(id)arg1 forAccountIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)handleURL:(id)arg1;
- (void)accountIdentifiersEnabledForDataclasses:(id)arg1 withAccountTypeIdentifiers:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)isPushSupportedForAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)tetheredSyncSourceTypeForDataclass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)isTetheredSyncingEnabledForDataclass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)renewCredentialsForAccount:(id)arg1 options:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)verifyCredentialsForAccount:(id)arg1 saveWhenAuthorized:(_Bool)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)clearAllPermissionsGrantedForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)typeIdentifierForDomain:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)clearGrantedPermissionsForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)grantedPermissionsForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)permissionForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setPermissionGranted:(id)arg1 forBundleID:(id)arg2 onAccountType:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)appPermissionsForAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)requestAccessForAccountTypeWithIdentifier:(id)arg1 options:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)removeAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)insertAccountType:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)updateExistenceCacheOfAccountWithTypeIdentifier:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)saveAccount:(id)arg1 verify:(_Bool)arg2 dataclassActions:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)saveAccount:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)canSaveAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)removeAccount:(id)arg1 withDataclassActions:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)accessKeysForAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)isPerformingDataclassActionsForAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)dataclassActionsForAccountDeletion:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)dataclassActionsForAccountSave:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)syncableDataclassesForAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)supportedDataclassesForAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)dataclassesWithHandler:(CDUnknownBlockType)arg1;
- (void)provisionedDataclassesForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)enabledDataclassesForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)credentialForAccount:(id)arg1 serviceID:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)credentialForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountTypeWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)displayAccountTypeForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)childAccountsWithAccountTypeIdentifier:(id)arg1 parentAccountIdentifier:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)kerberosAccountsForDomainFromURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)accountExistsWithDescription:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)accountIdentifiersEnabledForDataclass:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountIdentifiersEnabledToSyncDataclass:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)childAccountsForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)parentAccountForAccountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountsWithAccountType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)accountTypesWithHandler:(CDUnknownBlockType)arg1;
- (void)accountsWithHandler:(CDUnknownBlockType)arg1;
- (void)setNotificationsEnabled:(_Bool)arg1;
- (void)setClientBundleID:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (_Bool)_clientHasPermissionToAddAccount:(id)arg1;
- (_Bool)_isClientPermittedToRemoveAccount:(id)arg1;
- (_Bool)_isClientPermittedToAccessAccount:(id)arg1;
- (id)_appPermissionsForAccountTypeIdentifier:(id)arg1;
- (_Bool)_wildCardAuthorizationMatchingForAccountTypeIdentifier:(id)arg1;
- (_Bool)_isClientPermittedToAccessAccountTypeWithIdentifier:(id)arg1;
- (_Bool)_accessGrantedForBundleID:(id)arg1 onAccountTypeID:(id)arg2;
- (_Bool)_accessGrantedForClient:(id)arg1 onAccountTypeID:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ACDAuthenticationDialogManager : NSObject <ACDAuthenticationDialogManagerProtocol>
{
    NSXPCListener *_authenticationDialogListener;
    ACDQueueDictionary *_dialogRequestQueues;
    NSString *_activeAccountID;
}

- (void).cxx_destruct;
- (void)authenticationDialogCrashed;
- (void)authenticationDialogDidFinishWithSuccess:(_Bool)arg1;
- (void)contextForAuthenticationDialog:(CDUnknownBlockType)arg1;
- (_Bool)_confirmUserWantsToOpenAuthenticationURLForAccount:(id)arg1;
- (void)_launchDialogContainerAppForAccount:(id)arg1 shouldConfirm:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)openAuthenticationURL:(id)arg1 forAccount:(id)arg2 shouldConfirm:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ACDAuthenticationDialogRequest : NSObject
{
    _Bool _confirmationRequired;
    NSURL *_url;
    ACAccount *_account;
    CDUnknownBlockType _completion;
}

@property(copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
@property(nonatomic) _Bool confirmationRequired; // @synthesize confirmationRequired=_confirmationRequired;
@property(copy, nonatomic) NSURL *url; // @synthesize url=_url;
- (void).cxx_destruct;

@end

@interface ACDAuthenticationPluginManager : NSObject
{
    ACDQueueDictionary *_verificationHandlerQueues;
    ACDQueueDictionary *_renewalHandlerQueues;
    NSLock *_verificationHandlersLock;
    NSLock *_renewalHandlersLock;
    NSMutableDictionary *_authenticationPluginsByType;
    NSObject<OS_dispatch_queue> *_authenticationPluginQueue;
}

- (void).cxx_destruct;
- (id)_descriptionForRenewalResult:(long long)arg1;
- (id)_authCapableParentAccountForAccount:(id)arg1;
- (id)_authenticationTypeForAccount:(id)arg1;
- (id)_pluginForAuthenticationType:(id)arg1;
- (void)_handleRenewalCompletionResult:(long long)arg1 forAccount:(id)arg2 renewalID:(id)arg3 accountStore:(id)arg4 error:(id)arg5;
- (void)renewCredentialsForAccount:(id)arg1 accountStore:(id)arg2 options:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_handleVerificationCompletionForAccount:(id)arg1 verifiedAccount:(id)arg2 error:(id)arg3 store:(id)arg4 shouldSave:(_Bool)arg5;
- (void)verifyCredentialsForAccount:(id)arg1 accountStore:(id)arg2 saveWhenAuthorized:(_Bool)arg3 handler:(CDUnknownBlockType)arg4;
- (void)credentialForAccount:(id)arg1 client:(id)arg2 store:(id)arg3 handler:(CDUnknownBlockType)arg4;
- (_Bool)isPushSupportedForAccount:(id)arg1;
- (id)init;

@end

@interface ACDClient : NSObject
{
    NSXPCConnection *_connection;
    ACDDatabase *_database;
    struct __CFBundle *_bundle;
    NSString *_bundleID;
    _Bool _didManuallySetBundleID;
    NSNumber *_pid;
    NSString *_localizedAppName;
    NSString *_name;
    NSMutableDictionary *_entitlementChecks;
}

+ (id)_bundleForPID:(int)arg1;
+ (id)_bundleIDForPID:(int)arg1;
+ (id)_bundleForNonPlugInPID:(int)arg1;
+ (id)clientWithBundleID:(id)arg1;
@property(readonly, nonatomic) ACDDatabase *database; // @synthesize database=_database;
@property(readonly, nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (id)longDebugDescription;
- (id)shortDebugDescription;
- (id)debugDescription;
- (id)description;
- (_Bool)hasEntitlement:(id)arg1;
@property(readonly, nonatomic) struct __CFBundle *bundle;
@property(readonly, nonatomic) NSString *adamOrDisplayID;
@property(readonly, nonatomic) NSString *name;
- (id)_displayNameFromBundleInfoDictionaryForPID:(int)arg1;
- (id)_displayNameFromSpringBoardForPID:(int)arg1;
@property(readonly, nonatomic) NSString *localizedAppName;
@property(retain, nonatomic) NSString *bundleID;
@property(readonly, nonatomic) NSNumber *pid;
- (void)dealloc;
- (id)initWithConnection:(id)arg1 database:(id)arg2;
- (id)initWithConnection:(id)arg1;

@end

@interface ACDClientAuthorization : NSObject
{
    _Bool _isGranted;
    ACDClient *_client;
    NSSet *_grantedPermissions;
    NSDictionary *_options;
}

@property(copy, nonatomic) NSDictionary *options; // @synthesize options=_options;
@property(retain, nonatomic) NSSet *grantedPermissions; // @synthesize grantedPermissions=_grantedPermissions;
@property(retain, nonatomic) ACDClient *client; // @synthesize client=_client;
@property(nonatomic) _Bool isGranted; // @synthesize isGranted=_isGranted;
- (void).cxx_destruct;
- (id)initForClient:(id)arg1;

@end

@interface ACDClientAuthorizationManager : NSObject
{
    ACDDatabase *_database;
}

- (void).cxx_destruct;
- (id)_setFromCSVString:(id)arg1;
- (id)_csvStringFromSet:(id)arg1;
- (id)removeAllClientAuthorizationsForAccountTypeWithIdentifier:(id)arg1;
- (id)removeAllClientAuthorizationsForAccountType:(id)arg1;
- (id)allAuthorizationsForAccountTypeWithIdentifier:(id)arg1;
- (id)allAuthorizationsForAccountType:(id)arg1;
- (id)removeAuthorizationForClient:(id)arg1 accountTypeWithIdentifier:(id)arg2;
- (id)removeAuthorizationForClient:(id)arg1 accountType:(id)arg2;
- (id)setAuthorization:(id)arg1 forClient:(id)arg2 onAccountType:(id)arg3;
- (id)authorizationForClient:(id)arg1 accountTypeWithIdentifier:(id)arg2;
- (id)authorizationForClient:(id)arg1 accountType:(id)arg2;
- (id)initWithDatabase:(id)arg1;

@end

@interface ACDDatabase : NSObject
{
    NSString *_path;
    NSManagedObjectContext *_context;
    NSManagedObjectModel *_model;
    NSPersistentStore *_store;
    id _contextDidSaveNotificationObserver;
}

+ (void)_resetPeristentStoreCoordinator;
+ (id)_optionsForOpeningPersistentStore;
+ (_Bool)_isUnrecoverableDatabaseError:(id)arg1;
+ (void)_removePersistentStoreAtURL:(id)arg1 forStoreCoordinator:(id)arg2;
+ (void)_replacePersistentStoreAtURL:(id)arg1 withCleanStoreForCoordinator:(id)arg2;
+ (_Bool)_addPersistentStoreWithURL:(id)arg1 toStoreCoordinator:(id)arg2 withOptions:(id)arg3 error:(id *)arg4;
+ (id)_sharedPersistentCoordinatorForStoreAtPath:(id)arg1;
+ (id)_managedObjectModel;
+ (struct __CFString *)_copyRootPath;
+ (id)defaultPath;
@property(readonly, nonatomic) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (void)_handleManagedObjectContextDidSaveNotification:(id)arg1;
- (_Bool)_databaseFileExists;
- (id)_store;
- (void)_setupManagedObjectContext;
- (_Bool)saveWithError:(id *)arg1 rollbackOnFailure:(_Bool)arg2;
- (_Bool)saveWithError:(id *)arg1;
- (id)managedObjectIDForURI:(id)arg1;
- (void)setAccountPropertyWithKey:(id)arg1 value:(id)arg2 owner:(id)arg3;
- (void)deleteAccountPropertyWithKey:(id)arg1 owner:(id)arg2;
- (id)_accountPropertyWithKey:(id)arg1 owner:(id)arg2;
- (unsigned long long)countOfEntityNamed:(id)arg1 withPredicate:(id)arg2;
- (id)existingObjectWithURI:(id)arg1;
- (id)objectForObjectURI:(id)arg1;
- (id)fetchObjectsForEntityNamed:(id)arg1 withPredicate:(id)arg2 sortDescriptor:(id)arg3;
- (id)fetchObjectsForEntityNamed:(id)arg1 withPredicate:(id)arg2;
- (id)fetchObjectsForEntityNamed:(id)arg1;
@property(nonatomic) long long version; // @dynamic version;
@property(readonly, nonatomic) NSManagedObjectContext *managedObjectContext; // @dynamic managedObjectContext;
- (void)dealloc;
- (id)initWithPath:(id)arg1;
- (id)initWithDefaultPath;

@end

@interface ACDDatabaseInitializer : NSObject
{
    ACDDatabase *_database;
    NSArray *_dataclasses;
    NSArray *_accountTypes;
    NSArray *_accounts;
    NSArray *_accessKeys;
}

- (void).cxx_destruct;
- (void)_setCloudKitCredentialType;
- (void)_addCloudKitDataclasses;
- (void)_removeLiverpoolTypes;
- (void)_addAccessKeysAttributeToCloudKitAccountType;
- (void)_addCloudKitAccountType;
- (void)_createLiverpoolDataclasses;
- (void)_setOwningBundleIDForNativeAccountTypes;
- (void)_addAppleIDAuthenticationAccountType;
- (void)_addFMFAccountType;
- (void)_addHolidayCalendarAccountType;
- (void)_makeTencentWeiboSingleton;
- (void)_updateIdentityServicesAccountDescription;
- (void)_updateIdentityServicesAccountTypeToSupportAuthenticationAndMultipleAccounts;
- (void)_addAccessKeysAttributeToTencentWeiboAccountType;
- (void)_addTencentWeiboAccessKeys;
- (void)_addFindMyiPhoneAccountType;
- (void)_updateTencentWeiboCredentialTypeToOAuth2;
- (void)_limitLinkedInToOneAccount;
- (void)_addIdentityServicesAccountType;
- (void)_addIMAPMailAccountType;
- (void)_addPOPAccountType;
- (void)_addIMAPAccountType;
- (void)_addTokenCredentialTypeToYahooAccountType;
- (void)_addPasswordCredentialTypeToGmailAccountType;
- (void)_addPasswordCredentialTypeToSMTPAccountType;
- (void)_ensureProperAccountTypeDataclasses;
- (void)_ensureDataclassesAllExist;
- (void)_ensureAccountTypeWithIdentifier:(id)arg1 supportsDataclasses:(id)arg2 syncsDataclasses:(id)arg3;
- (void)_addHotmailAccountType;
- (void)_addLDAPAccountType;
- (void)_addIMAPNotesAccountType;
- (void)_addExchangeAccountType;
- (void)_addBookmarkDAVAccountType;
- (void)_addSubscribedCalendarAccountType;
- (void)_updateVimeoCredentialTypeToOAuth;
- (void)_updateFlickrCredentialTypeToOAuth;
- (void)_limitVimeoToOneAccount;
- (void)_limitFlickrToOneAccount;
- (void)_addAccessKeysAttributeToLinkedInAccountType;
- (void)_addLinkedInAccessKeys;
- (void)_addRemindersDataclassToCalDAVAccountType;
- (void)_addYahooAccountType;
- (void)_addGmailAccountType;
- (void)_addSMTPAccountType;
- (void)_addFacebookAudienceAccessKeyToFacebookAccountType;
- (void)_addFacebookAudienceAccessKey;
- (void)_removeFacebookAppVersionAccessKey;
- (void)_removeFacebookPermissionGroupAccessKey;
- (void)_addAccessKeysAttributeToLiverpoolAccountType;
- (void)_addAccessKeysAttributeToFacebookAccountType;
- (void)_addLiverpoolAccessKeys;
- (void)_addFacebookAccessKeys;
- (void)_addSupportsMultipleAccountsAttributeToAccountTypes;
- (void)_addSyncableDataclassesToCardAndCalDAV;
- (void)_addMissingAccountTypes;
- (void)_addSupportsAuthenticationAttributeToAccounts;
- (void)_addSupportsAuthenticationAttributeToAccountTypes;
- (void)_addContactsCalendarsDataclassesToFB;
- (void)_upgradeLinkedInAccountType;
- (void)_addTencentWeiboAccountType;
- (void)_addLiverpoolAccountType;
- (void)_addAppleAccountType;
- (void)_addYelpAccountType;
- (void)_addYoukuAccountType;
- (void)_addTudouAccountType;
- (void)_addLinkedInAccountType;
- (void)_addVimeoAccountType;
- (void)_addFlickrAccountType;
- (void)_addCardDAVAccountType;
- (void)_addCalDAVAccountType;
- (void)_updateWeiboAccountTypeIfNecessary;
- (void)_addWeiboAccountType;
- (void)_addFacebookAccountType;
- (void)_addiTunesStoreAccountType;
- (void)_addGameCenterAccountType;
- (void)_addMadridAccountType;
- (void)_addFaceTimeAccountType;
- (void)_addAppleIDAccountType;
- (void)_addTwitterAccountType;
- (void)_addAccessKeyWithName:(id)arg1;
- (void)_addDataclassWithName:(id)arg1;
- (void)_addCredentialType:(id)arg1 toAccountType:(id)arg2 supportsAuthentication:(_Bool)arg3;
- (id)_addAccountTypeWithIdentifier:(id)arg1 displayName:(id)arg2 visibility:(int)arg3 supportedDataclasses:(id)arg4 syncableDataclasses:(id)arg5 credentialType:(id)arg6 supportsAuthentication:(_Bool)arg7 supportsMultipleAccounts:(_Bool)arg8 credentialProtectionPolicy:(id)arg9;
- (id)_addAccountTypeWithIdentifier:(id)arg1 displayName:(id)arg2 visibility:(int)arg3 supportedDataclasses:(id)arg4 syncableDataclasses:(id)arg5 credentialType:(id)arg6 supportsAuthentication:(_Bool)arg7 supportsMultipleAccounts:(_Bool)arg8;
- (id)_addAccountTypeWithIdentifier:(id)arg1 displayName:(id)arg2 visibility:(int)arg3 supportedDataclasses:(id)arg4 credentialType:(id)arg5 supportsAuthentication:(_Bool)arg6 supportsMultipleAccounts:(_Bool)arg7;
- (id)_accessKeyWithName:(id)arg1;
- (id)_accountTypeWithIdentifier:(id)arg1;
- (id)_dataclassWithName:(id)arg1;
- (void)updateDefaultContent;
- (void)insertAllDefaultContent;
- (id)_accessKeys;
- (id)_dataclasses;
- (id)_accountTypes;
- (id)_accounts;
- (id)_resultsForEntityNamed:(id)arg1;
- (id)initWithDatabase:(id)arg1;

@end

@interface ACDDatabaseMigrator : NSObject
{
    NSManagedObjectContext *_migrationContext;
    NSPersistentStoreCoordinator *_privateCoordinator;
    NSPersistentStoreCoordinator *_realCoordinator;
    NSString *_databasePath;
    NSMutableDictionary *_realOptions;
}

- (void).cxx_destruct;
- (void)_postProcessMigrationFromVersion:(long long)arg1 migrationData:(id)arg2;
- (long long)_versionForModel:(id)arg1;
- (id)_compatibleModelForStoreAtURL:(id)arg1;
- (id)_setUpContextForMigration;
- (id)_fetchAllAuthorizationEntitiesForModelVersion:(long long)arg1;
- (id)_fetchAllDataclassEntitles;
- (void)_migrateNameAttributeOfDataclassEntities;
- (void)_migrateOptionsAttributeOfAuthorizatinEntitiesFromModelVersion:(long long)arg1;
- (void)_migrateAccessAuthorizationsToTCCFromModelVersion:(long long)arg1;
- (_Bool)run;
- (id)initForDatabaseAtPath:(id)arg1 persistentStoreCoordinator:(id)arg2 options:(id)arg3;

@end

@interface ACDDataclassOwnersManager : NSObject
{
    id <ACDDataclassOwnersManagerProtocol> _remoteDOM;
    NSXPCConnection *_connection;
}

- (void).cxx_destruct;
- (void)_connectToRemoteDataclassOwnersManager;
- (_Bool)performDataclassActions:(id)arg1 forAccount:(id)arg2 withChildren:(id)arg3;
- (id)actionsForDisablingDataclass:(id)arg1 onAccount:(id)arg2;
- (id)actionsForEnablingDataclass:(id)arg1 onAccount:(id)arg2;
- (id)actionsForDeletingAccount:(id)arg1 affectingDataclass:(id)arg2;
- (id)actionsForAddingAccount:(id)arg1 affectingDataclass:(id)arg2;
- (_Bool)isPerformingDataclassActionsForAccount:(id)arg1;
- (id)_remoteDOM;

@end

@interface ACDDataclassOwnersManagerInterface : NSObject
{
}

+ (id)XPCInterface;

@end

@interface ACDFakeRemoteAccountStoreSession : ACRemoteAccountStoreSession
{
    NSObject *_proxy;
}

- (void).cxx_destruct;
- (id)remoteObjectProxy;
- (id)remoteObjectProxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)initWithFakeProxy:(id)arg1;

@end

@interface ACDKeychain : NSObject
{
}

+ (void)removeItemForServiceName:(id)arg1 username:(id)arg2 accessGroup:(id)arg3 error:(id *)arg4;
+ (void)addItemWithServiceName:(id)arg1 username:(id)arg2 accessGroup:(id)arg3 passwordData:(id)arg4 options:(id)arg5 error:(id *)arg6;
+ (void)updateItemForServiceName:(id)arg1 username:(id)arg2 accessGroup:(id)arg3 newValues:(id)arg4 error:(id *)arg5;
+ (id)passwordForServiceName:(id)arg1 username:(id)arg2 accessGroup:(id)arg3 error:(id *)arg4;
+ (_Bool)canAccessPasswordsWithPolicy:(id)arg1;
+ (id)_missingKeychainItemSpecifierForService:(id)arg1 username:(id)arg2;
+ (id)_knownMissingKeychainItems;

@end

@interface ACDKeychainManager : NSObject
{
}

+ (void)_removeAllItemsForUsername:(id)arg1;
+ (void)_removeAllItemsForService:(id)arg1;
+ (_Bool)_removeItemForService:(id)arg1 username:(id)arg2 accessGroup:(id)arg3 error:(id *)arg4;
+ (void)_setItem:(id)arg1 forServiceName:(id)arg2 username:(id)arg3 accessGroup:(id)arg4 accessibility:(id)arg5 syncable:(_Bool)arg6 error:(id *)arg7;
+ (_Bool)_shouldSyncCredentialForAccountType:(id)arg1;
+ (id)_itemForServiceName:(id)arg1 username:(id)arg2 accessGroup:(id)arg3 error:(id *)arg4;
+ (void)_migrateCredential:(id)arg1 forAccount:(id)arg2 clientID:(id)arg3;
+ (id)_keychainServiceNameForClientID:(id)arg1 accountTypeIdentifier:(id)arg2 key:(id)arg3;
+ (void)_removeCredentialItemWithKey:(id)arg1 forAccountWithID:(id)arg2 username:(id)arg3 accountTypeID:(id)arg4 clientID:(id)arg5 error:(id *)arg6;
+ (void)_removeCredentialItemWithKey:(id)arg1 forAccountWithID:(id)arg2 accountTypeID:(id)arg3 clientID:(id)arg4 error:(id *)arg5;
+ (void)_removeNonPersistentCredentialItemsForAccount:(id)arg1;
+ (void)_removeCredentialForAccountWithUsername:(id)arg1 accountIdentifier:(id)arg2 accountTypeIdentifier:(id)arg3 credentialType:(id)arg4 clientID:(id)arg5 error:(id *)arg6;
+ (void)removeCredentialForAccount:(id)arg1 clientID:(id)arg2 error:(id *)arg3;
+ (void)removeCredentialForAccount:(id)arg1 error:(id *)arg2;
+ (void)removeCredentialForAccount:(id)arg1 clientID:(id)arg2;
+ (void)removeCredentialForAccount:(id)arg1;
+ (void)_setNonPersistentCredentialTimerForAccount:(id)arg1;
+ (void)_saveCredential:(id)arg1 forAccount:(id)arg2 clientID:(id)arg3 error:(id *)arg4;
+ (void)_setCredentialForAccount:(id)arg1 clientID:(id)arg2 handleCredentialItemRemovals:(_Bool)arg3 error:(id *)arg4;
+ (void)setCredentialForNewAccount:(id)arg1 clientID:(id)arg2 error:(id *)arg3;
+ (void)setCredentialForAccount:(id)arg1 clientID:(id)arg2 error:(id *)arg3;
+ (void)setCredentialForAccount:(id)arg1 error:(id *)arg2;
+ (void)setCredentialForAccount:(id)arg1 clientID:(id)arg2;
+ (void)setCredentialForAccount:(id)arg1;
+ (id)_credentialForAccountWithID:(id)arg1 accountTypeID:(id)arg2 credentialType:(id)arg3 clientID:(id)arg4 error:(id *)arg5;
+ (id)credentialForAccount:(id)arg1 clientID:(id)arg2 error:(id *)arg3;
+ (id)credentialForAccount:(id)arg1 clientID:(id)arg2;
+ (id)credentialForManagedAccountObject:(id)arg1;
+ (id)credentialForManagedAccountObject:(id)arg1 clientID:(id)arg2;
+ (void)initialize;

@end

@interface ACDOAuthSigner : NSObject <ACDOAuthSignerProtocol>
{
    ACDDatabase *_database;
    ACDClient *_client;
    ACDClientAuthorizationManager *_authorizationManager;
    _Bool _shouldIncludeAppIdInRequest;
}

- (void).cxx_destruct;
- (id)csForAccountType:(id)arg1;
- (id)ckForAccountType:(id)arg1;
- (_Bool)_permissionGrantedForBundleID:(id)arg1 onAccountType:(id)arg2;
- (void)signURLRequest:(id)arg1 withAccount:(id)arg2 applicationID:(id)arg3 timestamp:(id)arg4 handler:(CDUnknownBlockType)arg5;
- (id)signedRequest:(id)arg1 withAccount:(id)arg2 applicationID:(id)arg3 timestamp:(id)arg4;
- (void)signURLRequest:(id)arg1 withAccount:(id)arg2 callingPID:(id)arg3 timestamp:(id)arg4 handler:(CDUnknownBlockType)arg5;
- (id)_signedRequest:(id)arg1 withAccountObject:(id)arg2 applicationID:(id)arg3 timestamp:(id)arg4;
- (void)setClientBundleID:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setShouldIncludeAppIdInRequest:(_Bool)arg1;
- (id)initWithClient:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ACDPluginLoader : NSObject
{
}

+ (id)pluginForIdentifier:(id)arg1 subpath:(id)arg2;
+ (id)_buildPluginCache;
+ (id)_currentSystemVersion;
+ (id)pluginWithName:(id)arg1 inSubpath:(id)arg2;
+ (id)pluginBundlesAtSubpath:(id)arg1;
+ (id)_validateAndLoadBundle:(id)arg1;
+ (id)_accountsPluginDirectoryURL:(id)arg1;

@end

@interface ACDPreferences : NSObject
{
}

+ (id)sharedPreferences;
- (void)reset;
- (void)synchronize;
- (double)serverTimeoutInterval;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;

@end

@interface ACDQueueDictionary : NSObject
{
    NSMutableDictionary *_allQueuesByID;
}

- (void).cxx_destruct;
- (id)description;
- (id)keyForRandomQueue;
- (id)dequeueAllObjectsInQueueForKey:(id)arg1;
- (id)firstObjectInQueueForKey:(id)arg1;
- (id)dequeueFirstObjectInQueueForKey:(id)arg1;
- (void)addObject:(id)arg1 toQueueForKey:(id)arg2;
- (_Bool)isQueueEmptyForKey:(id)arg1;
- (_Bool)isEmpty;
- (id)init;

@end

@interface ACDServer : NSObject <NSXPCListenerDelegate, ACDAccountStoreDelegate>
{
    NSXPCListener *_accountStoreListener;
    NSXPCListener *_oauthSignerListener;
    NSXPCListener *_authenticationDialogListener;
    NSMutableArray *_accountStoreClients;
    NSMutableArray *_oauthSignerClients;
    NSMutableArray *_authenticationDialogManagerClients;
    NSMutableDictionary *_entitlementsByConnection;
    NSMutableDictionary *_clientsByConnection;
    NSObject<OS_dispatch_queue> *_deferredConnectionResumeQueue;
    NSObject<OS_dispatch_semaphore> *_deferredConnectionResumeQueueSemaphore;
    NSObject<OS_dispatch_queue> *_performMigrationQueue;
    ACDAuthenticationPluginManager *_authenticationPluginManager;
    ACDAccessPluginManager *_accessPluginManager;
    ACDDataclassOwnersManager *_dataclassOwnersManager;
    ACDAuthenticationDialogManager *_authenticationDialogManager;
    ACRemoteDeviceProxy *_remoteDeviceProxy;
}

+ (id)sharedServer;
@property(retain, nonatomic) ACRemoteDeviceProxy *remoteDeviceProxy; // @synthesize remoteDeviceProxy=_remoteDeviceProxy;
@property(retain, nonatomic) ACDAuthenticationDialogManager *authenticationDialogManager; // @synthesize authenticationDialogManager=_authenticationDialogManager;
@property(retain, nonatomic) ACDDataclassOwnersManager *dataclassOwnersManager; // @synthesize dataclassOwnersManager=_dataclassOwnersManager;
@property(retain, nonatomic) ACDAccessPluginManager *accessPluginManager; // @synthesize accessPluginManager=_accessPluginManager;
@property(retain, nonatomic) ACDAuthenticationPluginManager *authenticationPluginManager; // @synthesize authenticationPluginManager=_authenticationPluginManager;
- (void).cxx_destruct;
- (void)_beginObservingIDSProxyNotifications;
- (void)_beginObservingLaunchNotifications;
- (void)credentialsDidChangeForAccountWithIdentifier:(id)arg1;
- (void)accountStoreDidSaveAccounts;
- (void)_stopObservingLanguageChangeNotification;
- (void)_beginObservingLanguageChangeNotfication;
- (void)_signalDeferredConnectionResumeQueueSemaphore;
- (id)_newOAuthSignerForClient:(id)arg1;
- (id)_newDaemonAccountStoreFilterForClient:(id)arg1;
- (id)createClientForConnection:(id)arg1;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (id)_enumerateAllEntitlementForConnection:(id)arg1;
- (id)_keyForConnection:(id)arg1;
- (id)entitlementsForConnection:(id)arg1;
- (id)clientForConnection:(id)arg1;
- (void)shutdown;
- (void)setUpWithAccountStoreConnectionListener:(id)arg1 oauthSignerConnectionListener:(id)arg2 authenticationDialogConnectionListener:(id)arg3;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ACDTCCUtilities : NSObject
{
}

+ (struct __CFString *)_TCCServiceForAccountTypeID:(id)arg1;
+ (_Bool)clearAllTCCStatesForAccountTypeID:(id)arg1;
+ (id)allTCCStatesForAccountTypeID:(id)arg1;
+ (_Bool)clearTCCStateForClient:(id)arg1 accountTypeID:(id)arg2;
+ (_Bool)setTCCStateForClient:(id)arg1 accountTypeID:(id)arg2 toGranted:(_Bool)arg3;
+ (int)TCCStateForClient:(id)arg1 accountTypeID:(id)arg2;
+ (_Bool)TCCSupportedForAccountTypeID:(id)arg1;

@end

@interface ACDTestManager : NSObject
{
    NSXPCListener *_accountStoreConnectionListener;
    NSXPCListener *_oauthSignerConnectionListener;
    NSXPCListener *_authenticationDialogConnectionListener;
    NSString *_storePath;
}

+ (id)testServer;
- (void).cxx_destruct;
- (id)_pseudoUniqueDatabasePath;
@property(readonly, nonatomic) NSXPCListenerEndpoint *remoteOAuthSignerEndpoint;
@property(readonly, nonatomic) NSXPCListenerEndpoint *remoteAccountStoreEndpoint;
- (void)stopTestServer;
- (void)startTestServer;

@end

@interface ACDUserNotification : NSObject
{
}

+ (void)showUserNotificationWithTitle:(id)arg1 message:(id)arg2 cancelButtonTitle:(id)arg3 otherButtonTitle:(id)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;

@end

@interface ACRemoteCommandHandler : NSObject
{
    ACAccountStore *_accountStore;
}

- (void).cxx_destruct;
- (void)_deleteAccount:(id)arg1;
- (void)_promptUserForAccountCredential:(id)arg1;
- (void)_authenticateAccount:(id)arg1;
- (void)_updateAccount:(id)arg1;
- (void)_addAccount:(id)arg1;
- (void)handleCommand:(id)arg1 forAccount:(id)arg2;
- (id)init;

@end

@interface ACRemoteDeviceMessage : NSObject
{
    NSString *_command;
    NSData *_data;
    ACAccount *_account;
}

@property(readonly, nonatomic) ACAccount *account; // @synthesize account=_account;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) NSString *command; // @synthesize command=_command;
- (void).cxx_destruct;
- (id)initWithData:(id)arg1;
- (id)initWithCommand:(id)arg1 account:(id)arg2;
- (id)init;

@end

@interface ACRemoteDeviceProxy : NSObject <IDSServiceDelegate>
{
    IDSService *_messageSendingService;
    ACRemoteCommandHandler *_remoteCommandHandler;
    NSMutableDictionary *_completionHandlersByMessageID;
    NSLock *_completionHandlersLock;
}

- (void).cxx_destruct;
- (_Bool)_isValidCommandForOutgoingMessage:(id)arg1;
- (void)_dequeueCompletionHandlersForMessageID:(id)arg1 withSuccess:(_Bool)arg2 error:(id)arg3;
- (void)_enqueueCompletionHandler:(CDUnknownBlockType)arg1 forMessageID:(id)arg2;
- (void)service:(id)arg1 account:(id)arg2 incomingData:(id)arg3 fromID:(id)arg4 context:(id)arg5;
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(_Bool)arg4 error:(id)arg5;
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 hasBeenDeliveredWithContext:(id)arg4;
- (void)sendCommand:(id)arg1 withAccount:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)sendCommand:(id)arg1 withAccount:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _ACDTestServer : ACDServer
{
    NSString *_databasePath;
}

- (void).cxx_destruct;
- (id)createClientForConnection:(id)arg1;
- (id)initWithDatabasePath:(id)arg1;

@end

