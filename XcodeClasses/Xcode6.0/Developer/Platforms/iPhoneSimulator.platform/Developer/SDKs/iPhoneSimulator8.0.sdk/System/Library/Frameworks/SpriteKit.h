//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPath;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct MaxRectTexturePacker;

struct PKCAether;

struct PKPath;

struct SCNVector3 {
    float x;
    float y;
    float z;
};

struct SKCAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct SKCAnimate {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct vector<SKTexture *, std::__1::allocator<SKTexture *>> _field20;
    double _field21;
    id _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
};

struct SKCColorize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field20;
    float _field21;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field22;
    float _field23;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field24;
    float _field25;
    _Bool _field26;
};

struct SKCCustomAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    CDUnknownBlockType _field20;
};

struct SKCEmitterSprite {
    CDUnknownFunctionPointerType *_field1;
    struct list<SKCAction *, std::__1::allocator<SKCAction *>> _field2;
    struct shared_ptr<PKPath> _field3;
    id _field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    _Bool _field5;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    float _field6;
    struct SKCSprite *_field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    id _field11;
    id _field12;
    _Bool _field13;
    _Bool _field14;
    struct __CVBuffer *_field15;
    struct __CVBuffer *_field16;
    struct __CVOpenGLESTextureCache *_field17;
    id _field18;
    id _field19;
    id _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    struct {
        float _field1;
        float _field2;
    } _field24;
    struct {
        float _field1;
        float _field2;
    } _field25;
    struct {
        float _field1;
        float _field2;
    } _field26;
    CDStruct_c7fe8b62 _field27;
    struct __CVBuffer *_field28;
    struct __CVBuffer *_field29;
    _Bool _field30;
    CDStruct_dd1bd620 _field31;
    CDStruct_183601bc *_field32;
    CDStruct_183601bc *_field33;
    CDStruct_31cefc2d _field34;
    CDStruct_c7fe8b62 _field35;
    long long _field36;
    CDStruct_c7fe8b62 _field37;
    struct SKCSprite *_field38;
    union _GLKMatrix4 _field39;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> _field40;
    struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> *_field41;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> *_field42;
    unsigned int _field43;
    unsigned int _field44;
    _Bool _field45;
    struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> _field46;
    struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *>> _field47;
    float _field48;
    float _field49;
    float _field50;
    id _field51;
    struct {
        float _field1;
        float _field2;
    } _field52;
    id _field53;
    _Bool _field54;
    CDStruct_c7fe8b62 _field55;
    struct {
        float _field1;
        float _field2;
    } _field56;
    unsigned int _field57;
    struct {
        float _field1;
        float _field2;
    } _field58;
    struct {
        float _field1;
        float _field2;
    } _field59;
    float _field60;
    float _field61;
    float _field62;
    float _field63;
    float _field64;
    float _field65;
    float _field66;
    float _field67;
    float _field68;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field69;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field70;
    float _field71;
    float _field72;
    float _field73;
    CDStruct_c7fe8b62 _field74;
    id _field75;
    float _field76;
    id _field77;
    shared_ptr_11a7378b _field78;
    struct SKCSprite *_field79;
    id _field80;
    double _field81;
    _Bool _field82;
    struct SKCKeyframeSequence *_field83;
    struct SKCKeyframeSequence *_field84;
    struct SKCKeyframeSequence *_field85;
    struct SKCKeyframeSequence *_field86;
    struct SKCKeyframeSequence *_field87;
    struct SKCKeyframeSequence *_field88;
    unsigned long long _field89;
    unsigned long long _field90;
    int _field91;
    int _field92;
    struct vector<SKCParticle *, std::__1::allocator<SKCParticle *>> _field93;
    struct vector<SKCParticle *, std::__1::allocator<SKCParticle *>> _field94;
    double _field95;
    double _field96;
    double _field97;
    double _field98;
    struct CGSize _field99;
    float _field100;
    float _field101;
    float _field102;
    float _field103;
    float _field104;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field105;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field106;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field107;
    float _field108;
    float _field109;
    float _field110;
    struct list<PKPoint, std::__1::allocator<PKPoint>> _field111;
    struct {
        float _field1;
        float _field2;
    } _field112;
    struct {
        float _field1;
        float _field2;
    } _field113;
    float _field114;
    float _field115;
    float _field116;
    float _field117;
    struct {
        float _field1;
        float _field2;
    } _field118;
    float _field119;
    float _field120;
    float _field121;
    float _field122;
    float _field123;
    float _field124;
    float _field125;
    float _field126;
    float _field127;
    float _field128;
    float _field129;
    float _field130;
    id _field131;
    long long _field132;
    unsigned int _field133;
};

struct SKCFade {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    _Bool _field23;
};

struct SKCFalloff {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCFollowPath {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    unsigned int _field21;
    struct PKPath *_field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
};

struct SKCGroup {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct list<SKCAction *, std::__1::allocator<SKCAction *>> _field20;
};

struct SKCHide {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    _Bool _field20;
};

struct SKCKeyframeSequence {
    int _field1;
    int _field2;
    long long _field3;
    long long _field4;
    float *_field5;
    float *_field6;
};

struct SKCMove {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCParticle;

struct SKCPlaySound {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    id _field20;
    _Bool _field21;
    _Bool _field22;
};

struct SKCRenderPassNew {
    struct xglProgram *_field1;
    union _GLKMatrix4 _field2;
    unsigned int _field3;
    unsigned long long _field4;
    unsigned int _field5;
    unsigned int _field6;
    long long _field7;
    CDStruct_c7fe8b62 _field8;
    struct SKCSprite *_field9;
    unsigned int _field10;
    unsigned int _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    CDStruct_482da59b _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    id _field34;
    float _field35;
    float _field36;
    unsigned int _field37;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field38;
    id _field39;
    CDStruct_c7fe8b62 _field40;
    CDStruct_c7fe8b62 _field41;
    struct {
        float _field1;
        float _field2;
    } _field42;
    float _field43;
    unsigned int _field44;
    _Bool _field45;
    char *_field46;
    id _field47;
};

struct SKCRenderer {
    id _field1;
    id _field2;
    _Bool _field3;
    _Bool _field4;
    float _field5;
    float _field6;
    id _field7;
    id _field8;
    float _field9;
    struct {
        float _field1;
        float _field2;
    } _field10;
    CDStruct_3a240c91 _field11;
    CDStruct_3a240c91 _field12;
    struct stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect>>> _field13;
    struct stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4>>> _field14;
    struct stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment>>> _field15;
    struct {
        float _field1;
        float _field2;
    } _field16;
    struct {
        float _field1;
        float _field2;
    } _field17;
    struct SKCRenderPassNew _field18;
    unsigned int _field19;
    int _field20;
    int _field21;
    float _field22;
    float _field23;
    int _field24;
    double _field25;
    unsigned long long _field26;
    unsigned long long _field27;
    unsigned long long _field28;
    unsigned long long _field29;
    unsigned long long _field30;
    unsigned long long _field31;
    float _field32;
    float _field33;
    unsigned int _field34;
    unsigned int _field35;
    unsigned int _field36;
    unsigned int _field37;
    double _field38;
    float _field39;
    unsigned int _field40;
    int _field41;
    id _field42;
    id _field43;
    id _field44;
    id _field45;
    _Bool _field46;
    _Bool _field47;
    _Bool _field48;
    _Bool _field49;
    struct list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew>> _field50;
    unsigned int _field51;
    unsigned int _field52;
    unsigned short *_field53;
    CDStruct_dd1bd620 _field54[10500];
    unsigned int _field55;
    unsigned int _field56;
    unsigned int _field57;
    unsigned int _field58;
    struct xglProgram *_field59;
    struct xglProgram *_field60;
    struct xglProgram *_field61;
    struct xglProgram *_field62;
    struct xglProgram *_field63;
    struct xglProgram *_field64;
    id _field65;
    int _field66;
    id _field67;
    int _field68;
    unsigned int _field69;
    unsigned int _field70;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> _field71;
    struct vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>> _field72;
    struct vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo>> _field73;
    struct SKRenderQuadPool _field74;
    struct map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint>>> _field75;
    struct list<const SKCSprite *, std::__1::allocator<const SKCSprite *>> _field76;
    struct map<const SKCSprite *, ShadowInfo *, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, ShadowInfo *>>> _field77;
    struct map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>>> _field78;
    id _field79;
    _Bool _field80;
    _Bool _field81;
    _Bool _field82;
    _Bool _field83;
    _Bool _field84;
    _Bool _field85;
    _Bool _field86;
    _Bool _field87;
    _Bool _field88;
    _Bool _field89;
    _Bool _field90;
    _Bool _field91;
    _Bool _field92;
    _Bool _field93;
};

struct SKCRepeat {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct SKCAction *_field20;
    unsigned long long _field21;
    unsigned long long _field22;
    _Bool _field23;
};

struct SKCResize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCRotate {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
};

struct SKCScale {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
};

struct SKCSequence {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct vector<SKCAction *, std::__1::allocator<SKCAction *>> _field20;
    unsigned long long _field21;
};

struct SKCShapeSprite {
    CDUnknownFunctionPointerType *_field1;
    struct list<SKCAction *, std::__1::allocator<SKCAction *>> _field2;
    struct shared_ptr<PKPath> _field3;
    id _field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    _Bool _field5;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    float _field6;
    struct SKCSprite *_field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    id _field11;
    id _field12;
    _Bool _field13;
    _Bool _field14;
    struct __CVBuffer *_field15;
    struct __CVBuffer *_field16;
    struct __CVOpenGLESTextureCache *_field17;
    id _field18;
    id _field19;
    id _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    struct {
        float _field1;
        float _field2;
    } _field24;
    struct {
        float _field1;
        float _field2;
    } _field25;
    struct {
        float _field1;
        float _field2;
    } _field26;
    CDStruct_c7fe8b62 _field27;
    struct __CVBuffer *_field28;
    struct __CVBuffer *_field29;
    _Bool _field30;
    CDStruct_dd1bd620 _field31;
    CDStruct_183601bc *_field32;
    CDStruct_183601bc *_field33;
    CDStruct_31cefc2d _field34;
    CDStruct_c7fe8b62 _field35;
    long long _field36;
    CDStruct_c7fe8b62 _field37;
    struct SKCSprite *_field38;
    union _GLKMatrix4 _field39;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> _field40;
    struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> *_field41;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> *_field42;
    unsigned int _field43;
    unsigned int _field44;
    _Bool _field45;
    struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> _field46;
    struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *>> _field47;
    float _field48;
    float _field49;
    float _field50;
    id _field51;
    struct {
        float _field1;
        float _field2;
    } _field52;
    id _field53;
    _Bool _field54;
    CDStruct_c7fe8b62 _field55;
    struct {
        float _field1;
        float _field2;
    } _field56;
    unsigned int _field57;
    struct {
        float _field1;
        float _field2;
    } _field58;
    struct {
        float _field1;
        float _field2;
    } _field59;
    float _field60;
    float _field61;
    float _field62;
    float _field63;
    float _field64;
    float _field65;
    float _field66;
    float _field67;
    float _field68;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field69;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field70;
    float _field71;
    float _field72;
    float _field73;
    CDStruct_c7fe8b62 _field74;
    id _field75;
    float _field76;
    id _field77;
    shared_ptr_11a7378b _field78;
    struct SKCompositeBezierPath *_field79;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field80;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field81;
    int _field82;
    float _field83;
    _Bool _field84;
    struct CGPath *_field85;
    float _field86;
    _Bool _field87;
    float _field88;
    int _field89;
    int _field90;
    float _field91;
};

struct SKCSpeed {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCSprite {
    CDUnknownFunctionPointerType *_field1;
    struct list<SKCAction *, std::__1::allocator<SKCAction *>> _field2;
    struct shared_ptr<PKPath> _field3;
    id _field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    _Bool _field5;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    float _field6;
    struct SKCSprite *_field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    id _field11;
    id _field12;
    _Bool _field13;
    _Bool _field14;
    struct __CVBuffer *_field15;
    struct __CVBuffer *_field16;
    struct __CVOpenGLESTextureCache *_field17;
    id _field18;
    id _field19;
    id _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    struct {
        float _field1;
        float _field2;
    } _field24;
    struct {
        float _field1;
        float _field2;
    } _field25;
    struct {
        float _field1;
        float _field2;
    } _field26;
    CDStruct_c7fe8b62 _field27;
    struct __CVBuffer *_field28;
    struct __CVBuffer *_field29;
    _Bool _field30;
    CDStruct_dd1bd620 _field31;
    CDStruct_183601bc *_field32;
    CDStruct_183601bc *_field33;
    CDStruct_31cefc2d _field34;
    CDStruct_c7fe8b62 _field35;
    long long _field36;
    CDStruct_c7fe8b62 _field37;
    struct SKCSprite *_field38;
    union _GLKMatrix4 _field39;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> _field40;
    struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> *_field41;
    struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> *_field42;
    unsigned int _field43;
    unsigned int _field44;
    _Bool _field45;
    struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> _field46;
    struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *>> _field47;
    float _field48;
    float _field49;
    float _field50;
    id _field51;
    struct {
        float _field1;
        float _field2;
    } _field52;
    id _field53;
    _Bool _field54;
    CDStruct_c7fe8b62 _field55;
    struct {
        float _field1;
        float _field2;
    } _field56;
    unsigned int _field57;
    struct {
        float _field1;
        float _field2;
    } _field58;
    struct {
        float _field1;
        float _field2;
    } _field59;
    float _field60;
    float _field61;
    float _field62;
    float _field63;
    float _field64;
    float _field65;
    float _field66;
    float _field67;
    float _field68;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field69;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field70;
    float _field71;
    float _field72;
    float _field73;
    CDStruct_c7fe8b62 _field74;
    id _field75;
    float _field76;
    id _field77;
    shared_ptr_11a7378b _field78;
};

struct SKCStrength {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCWait {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct SKCompositeBezierPath;

struct SKRenderQuadPool {
    struct vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *>> _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    CDStruct_183601bc *_field4;
    unsigned long long _field5;
};

struct SpriteRenderInfo;

struct TextureInfo;

struct Token;

struct __CVBuffer;

struct __CVOpenGLESTextureCache;

struct __hash_node<SKCAction *, void *>;

struct __list_node<PKPoint, void *>;

struct __list_node<SKCAction *, void *>;

struct __list_node<SKCRenderPassNew, void *>;

struct __list_node<SKCSprite *, void *>;

struct __list_node<const SKCSprite *, void *>;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct deque<PKRect, std::__1::allocator<PKRect>> {
    struct __split_buffer<PKRect *, std::__1::allocator<PKRect *>> {
        CDStruct_183601bc **_field1;
        CDStruct_183601bc **_field2;
        CDStruct_183601bc **_field3;
        struct __compressed_pair<PKRect **, std::__1::allocator<PKRect *>> {
            CDStruct_183601bc **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<PKRect>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment>> {
    struct __split_buffer<SKCTextureAttachment *, std::__1::allocator<SKCTextureAttachment *>> {
        CDStruct_183601bc **_field1;
        CDStruct_183601bc **_field2;
        CDStruct_183601bc **_field3;
        struct __compressed_pair<SKCTextureAttachment **, std::__1::allocator<SKCTextureAttachment *>> {
            CDStruct_183601bc **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<SKCTextureAttachment>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4>> {
    struct __split_buffer<_GLKMatrix4 *, std::__1::allocator<_GLKMatrix4 *>> {
        union _GLKMatrix4 **_field1;
        union _GLKMatrix4 **_field2;
        union _GLKMatrix4 **_field3;
        struct __compressed_pair<_GLKMatrix4 **, std::__1::allocator<_GLKMatrix4 *>> {
            union _GLKMatrix4 **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<_GLKMatrix4>> {
        unsigned long long _field1;
    } _field3;
};

struct list<PKPoint, std::__1::allocator<PKPoint>> {
    struct __list_node_base<PKPoint, void *> {
        struct __list_node<PKPoint, void *> *_field1;
        struct __list_node<PKPoint, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PKPoint, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<SKCAction *, std::__1::allocator<SKCAction *>> {
    struct __list_node_base<SKCAction *, void *> {
        struct __list_node<SKCAction *, void *> *_field1;
        struct __list_node<SKCAction *, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew>> {
    struct __list_node_base<SKCRenderPassNew, void *> {
        struct __list_node<SKCRenderPassNew, void *> *_field1;
        struct __list_node<SKCRenderPassNew, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderPassNew, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<SKCSprite *, std::__1::allocator<SKCSprite *>> {
    struct __list_node_base<SKCSprite *, void *> {
        struct __list_node<SKCSprite *, void *> *_field1;
        struct __list_node<SKCSprite *, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<const SKCSprite *, std::__1::allocator<const SKCSprite *>> {
    struct __list_node_base<const SKCSprite *, void *> {
        struct __list_node<const SKCSprite *, void *> *_field1;
        struct __list_node<const SKCSprite *, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<const SKCSprite *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint>>> {
    struct __tree<std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, PKPoint>>> {
        struct __tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<const SKCSprite *, ShadowInfo *, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, ShadowInfo *>>> {
    struct __tree<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, ShadowInfo *>>> {
        struct __tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>>> {
    struct __tree<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>>> {
        struct __tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>>>, std::__1::less<const SKCSprite *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, double, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, double>>> {
    struct __tree<std::__1::__value_type<unsigned int, double>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, double>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, double>>> {
        struct __tree_node<std::__1::__value_type<unsigned int, double>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, double>, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, SKSpriteNode *, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, SKSpriteNode *>>> {
    struct __tree<std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, SKSpriteNode *>>> {
        struct __tree_node<std::__1::__value_type<unsigned short, SKSpriteNode *>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, SKSpriteNode *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::less<unsigned short>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, double, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, double>>> {
    struct __tree<std::__1::__value_type<unsigned short, double>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, double>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, double>>> {
        struct __tree_node<std::__1::__value_type<unsigned short, double>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, double>, std::__1::less<unsigned short>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> {
    struct __tree<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *>> {
        struct __tree_node<SKCSprite *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<SKCSprite *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<SKCSprite *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
    struct __tree<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
        struct __tree_node<SKNode *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<SKNode *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<SKNode *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PKCAether> {
    struct PKCAether *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PKPath> {
    struct PKPath *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<char> {
    char *_field1;
    struct __shared_weak_count *_field2;
};

struct stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect>>> {
    struct deque<PKRect, std::__1::allocator<PKRect>> _field1;
};

struct stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment>>> {
    struct deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment>> _field1;
};

struct stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4>>> {
    struct deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4>> _field1;
};

struct unique_ptr<std::__1::__hash_node<SKCAction *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<SKCAction *, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *>*>>> {
        struct __hash_node<SKCAction *, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *>> {
    struct __hash_table<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *>> {
        struct unique_ptr<std::__1::__hash_node<SKCAction *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<SKCAction *, void *>*>, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<SKCAction *, void *>*> {
                struct __hash_node<SKCAction *, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<SKCAction *>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<SKCAction *>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<CGRect, std::__1::allocator<CGRect>> {
    struct CGRect *_field1;
    struct CGRect *_field2;
    struct __compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
        struct CGRect *_field1;
    } _field3;
};

struct vector<CGSize, std::__1::allocator<CGSize>> {
    struct CGSize *_field1;
    struct CGSize *_field2;
    struct __compressed_pair<CGSize *, std::__1::allocator<CGSize>> {
        struct CGSize *_field1;
    } _field3;
};

struct vector<SKCAction *, std::__1::allocator<SKCAction *>> {
    struct SKCAction **_field1;
    struct SKCAction **_field2;
    struct __compressed_pair<SKCAction **, std::__1::allocator<SKCAction *>> {
        struct SKCAction **_field1;
    } _field3;
};

struct vector<SKCParticle *, std::__1::allocator<SKCParticle *>> {
    struct SKCParticle **_field1;
    struct SKCParticle **_field2;
    struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *>> {
        struct SKCParticle **_field1;
    } _field3;
};

struct vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo>> {
    struct SpriteRenderInfo *_field1;
    struct SpriteRenderInfo *_field2;
    struct __compressed_pair<SKCRenderer::SpriteRenderInfo *, std::__1::allocator<SKCRenderer::SpriteRenderInfo>> {
        struct SpriteRenderInfo *_field1;
    } _field3;
};

struct vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *>> {
    CDStruct_183601bc **_field1;
    CDStruct_183601bc **_field2;
    struct __compressed_pair<SKRenderQuad **, std::__1::allocator<SKRenderQuad *>> {
        CDStruct_183601bc **_field1;
    } _field3;
};

struct vector<SKTexture *, std::__1::allocator<SKTexture *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<SKTexture *__strong *, std::__1::allocator<SKTexture *>> {
        id *_field1;
    } _field3;
};

struct vector<TextureInfo, std::__1::allocator<TextureInfo>> {
    struct TextureInfo *_field1;
    struct TextureInfo *_field2;
    struct __compressed_pair<TextureInfo *, std::__1::allocator<TextureInfo>> {
        struct TextureInfo *_field1;
    } _field3;
};

struct vector<Token, std::__1::allocator<Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<Token *, std::__1::allocator<Token>> {
        struct Token *_field1;
    } _field3;
};

struct vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>> {
    struct SpriteRenderInfo **_field1;
    struct SpriteRenderInfo **_field2;
    struct __compressed_pair<const SKCRenderer::SpriteRenderInfo **, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *>> {
        struct SpriteRenderInfo **_field1;
    } _field3;
};

struct xglProgram {
    _Bool _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct shared_ptr<char> _field5;
    struct shared_ptr<char> _field6;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field7;
    struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> _field8;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct CDStruct_183601bc;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct {
        float _field1;
        float _field2;
    } _field5;
    _Bool _field6;
} CDStruct_482da59b;

typedef struct {
    int type;
    float duration;
    CDStruct_83984b6f color;
} CDStruct_eed8e9f9;

typedef struct {
    struct {
        float _field1;
        float _field2;
    } _field1;
    struct {
        float _field1;
        float _field2;
    } _field2;
    struct {
        float _field1;
        float _field2;
    } _field3;
    struct {
        float _field1;
        float _field2;
    } _field4;
} CDStruct_31cefc2d;

typedef struct {
    struct {
        float _field1;
        float _field2;
    } _field1;
    struct {
        float _field1;
        float _field2;
    } _field2;
} CDStruct_c7fe8b62;

typedef struct {
    struct xglProgram *_field1;
    CDStruct_c7fe8b62 _field2;
    unsigned int _field3;
    union _GLKMatrix4 _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field8;
    long long _field9;
    struct {
        float _field1;
        float _field2;
    } _field10;
    CDStruct_482da59b _field11;
} CDStruct_3a240c91;

typedef struct {
    struct {
        union _GLKVector4 _field1;
        unsigned char _field2[4];
        float _field3[3];
    } _field1[4];
} CDStruct_dd1bd620;

// Ambiguous groups
typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float r;
    float g;
    float b;
    float a;
} CDStruct_83984b6f;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct set<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
    struct __tree<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *>> {
        struct __tree_node<SKNode *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<SKNode *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<SKNode *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} set_23ab0f84;

typedef struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7747cbe3;

typedef struct shared_ptr<PKCAether> {
    struct PKCAether *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_11a7378b;

typedef struct vector<CGRect, std::__1::allocator<CGRect>> {
    struct CGRect *_field1;
    struct CGRect *_field2;
    struct __compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
        struct CGRect *_field1;
    } _field3;
} vector_ea45b3ba;

typedef struct vector<CGSize, std::__1::allocator<CGSize>> {
    struct CGSize *_field1;
    struct CGSize *_field2;
    struct __compressed_pair<CGSize *, std::__1::allocator<CGSize>> {
        struct CGSize *_field1;
    } _field3;
} vector_c74fc2b3;

typedef struct vector<TextureInfo, std::__1::allocator<TextureInfo>> {
    struct TextureInfo *_field1;
    struct TextureInfo *_field2;
    struct __compressed_pair<TextureInfo *, std::__1::allocator<TextureInfo>> {
        struct TextureInfo *_field1;
    } _field3;
} vector_65e381fc;

typedef struct vector<Token, std::__1::allocator<Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<Token *, std::__1::allocator<Token>> {
        struct Token *_field1;
    } _field3;
} vector_408ca79d;

#pragma mark Named Unions

union _GLKMatrix2 {
    struct {
        float m00;
        float m01;
        float m10;
        float m11;
    } ;
    float m2[2][2];
    float m[4];
};

union _GLKMatrix3 {
    struct {
        float m00;
        float m01;
        float m02;
        float m10;
        float m11;
        float m12;
        float m20;
        float m21;
        float m22;
    } ;
    float m[9];
};

union _GLKMatrix4 {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
};

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

union _GLKVector3 {
    struct {
        float x;
        float y;
        float z;
    } ;
    struct {
        float r;
        float g;
        float b;
    } ;
    struct {
        float s;
        float t;
        float p;
    } ;
    float v[3];
};

union _GLKVector4 {
    struct {
        float x;
        float y;
        float z;
        float w;
    } ;
    CDStruct_83984b6f ;
    struct {
        float s;
        float t;
        float p;
        float q;
    } ;
    float v[4];
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/SpriteKit.framework/SpriteKit
// UUID: 5F4684C2-3968-33E7-987B-2A938A564733
//
//                           Arch: x86_64
//                Current version: 2.0.0
//          Compatibility version: 1.0.0
//                 Source version: 15.17.2.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXMLParserDelegate <NSObject>

@optional
- (void)parser:(NSXMLParser *)arg1 validationErrorOccurred:(NSError *)arg2;
- (void)parser:(NSXMLParser *)arg1 parseErrorOccurred:(NSError *)arg2;
- (NSData *)parser:(NSXMLParser *)arg1 resolveExternalEntityName:(NSString *)arg2 systemID:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundCDATA:(NSData *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundComment:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundProcessingInstructionWithTarget:(NSString *)arg2 data:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundIgnorableWhitespace:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundCharacters:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 didEndMappingPrefix:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 didStartMappingPrefix:(NSString *)arg2 toURI:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 didEndElement:(NSString *)arg2 namespaceURI:(NSString *)arg3 qualifiedName:(NSString *)arg4;
- (void)parser:(NSXMLParser *)arg1 didStartElement:(NSString *)arg2 namespaceURI:(NSString *)arg3 qualifiedName:(NSString *)arg4 attributes:(NSDictionary *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundExternalEntityDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4;
- (void)parser:(NSXMLParser *)arg1 foundInternalEntityDeclarationWithName:(NSString *)arg2 value:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundElementDeclarationWithName:(NSString *)arg2 model:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundAttributeDeclarationWithName:(NSString *)arg2 forElement:(NSString *)arg3 type:(NSString *)arg4 defaultValue:(NSString *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundUnparsedEntityDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4 notationName:(NSString *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundNotationDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4;
- (void)parserDidEndDocument:(NSXMLParser *)arg1;
- (void)parserDidStartDocument:(NSXMLParser *)arg1;
@end

__attribute__((visibility("hidden")))
@interface IKLink : NSObject
{
    float _angleInitial;
    float _angle;
    float _length;
    SKNode *_node;
    union _GLKVector2 _position;
    union _GLKVector2 _size;
}

@property(nonatomic) union _GLKVector2 size; // @synthesize size=_size;
@property(nonatomic) float length; // @synthesize length=_length;
@property(readonly, nonatomic) float angle; // @synthesize angle=_angle;
@property(nonatomic) float angleInitial; // @synthesize angleInitial=_angleInitial;
@property(nonatomic) union _GLKVector2 position; // @synthesize position=_position;
@property(retain, nonatomic) SKNode *node; // @synthesize node=_node;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)rotateByAngle:(float)arg1;
- (double)normalizeAngle:(double)arg1;
- (id)initWithNode:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface ImageCollider : NSObject
{
}

- (struct CGImage *)newCollidingImg:(struct CGImage *)arg1 xform1:(struct CGAffineTransform)arg2 displaySize1:(struct CGSize)arg3 pos1:(struct CGPoint)arg4 anchor1:(struct CGPoint)arg5 mask2:(struct CGImage *)arg6 xform2:(struct CGAffineTransform)arg7 displaySize2:(struct CGSize)arg8 pos2:(struct CGPoint)arg9 anchor2:(struct CGPoint)arg10;
- (struct CGImage *)_newCollidingImg:(struct CGImage *)arg1 xform1:(struct CGAffineTransform)arg2 displaySize1:(struct CGSize)arg3 pos1:(struct CGPoint)arg4 anchor1:(struct CGPoint)arg5 mask2:(struct CGImage *)arg6 xform2:(struct CGAffineTransform)arg7 displaySize2:(struct CGSize)arg8 pos2:(struct CGPoint)arg9 anchor2:(struct CGPoint)arg10;
- (_Bool)isColliding:(struct CGImage *)arg1 xform1:(struct CGAffineTransform)arg2 displaySize1:(struct CGSize)arg3 pos1:(struct CGPoint)arg4 anchor1:(struct CGPoint)arg5 mask2:(struct CGImage *)arg6 xform2:(struct CGAffineTransform)arg7 displaySize2:(struct CGSize)arg8 pos2:(struct CGPoint)arg9 anchor2:(struct CGPoint)arg10;
- (_Bool)_isColliding:(struct CGImage *)arg1 xform1:(struct CGAffineTransform)arg2 displaySize1:(struct CGSize)arg3 pos1:(struct CGPoint)arg4 anchor1:(struct CGPoint)arg5 mask2:(struct CGImage *)arg6 xform2:(struct CGAffineTransform)arg7 displaySize2:(struct CGSize)arg8 pos2:(struct CGPoint)arg9 anchor2:(struct CGPoint)arg10;

@end

@interface NSData (GZip)
+ (id)makeArchive:(const void *)arg1 length:(unsigned long long)arg2 level:(float)arg3;
- (id)gzipInflate;
- (id)gzipDeflate:(float)arg1;
@end

@interface PKPhysicsBody (SKPhysicsBody)
- (id)_descriptionClassName;
@property(readonly, nonatomic) __weak SKNode *node;
@end

@interface SKNode : UIResponder <NSCopying, NSCoding>
{
    _Bool _spritesNeedsRemove;
    void *csprite;
    SKNode *_parent;
    NSMutableArray *_children;
    NSMutableArray *_actions;
    NSMutableDictionary *_keyedActions;
    NSMutableDictionary *_keyedSubSprites;
    NSMutableDictionary *_info;
    _Bool _needsDelete;
    NSMutableArray *_deleteList;
    NSString *_name;
    NSMutableDictionary *_userData;
    NSArray *_constraints;
    unsigned int _version;
    SKReachConstraints *_reachConstraints;
}

+ (id)nodeWithFileNamed:(id)arg1;
+ (id)node;
+ (unsigned long long)hashDataWithBuffer:(char *)arg1 ofSize:(unsigned long long)arg2;
@property(retain, nonatomic) NSMutableDictionary *userData; // @synthesize userData=_userData;
@property(copy, nonatomic) SKReachConstraints *reachConstraints; // @synthesize reachConstraints=_reachConstraints;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)dealloc;
- (_Bool)hasUniformAlphaAndIsVisible;
- (_Bool)intersectsNode:(id)arg1;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toNode:(id)arg2;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 fromNode:(id)arg2;
- (struct CGPoint)convertPointToParent:(struct CGPoint)arg1;
- (struct CGPoint)convertPointFromParent:(struct CGPoint)arg1;
- (id)nodesAtPoint:(struct CGPoint)arg1;
- (id)nodeAtPoint:(struct CGPoint)arg1;
- (id)nodeAtPoint:(struct CGPoint)arg1 recursive:(_Bool)arg2;
- (_Bool)containsPoint:(struct CGPoint)arg1 withRadius:(double)arg2;
- (_Bool)containsPoint:(struct CGPoint)arg1;
@property(nonatomic, getter=isUserInteractionEnabled) _Bool userInteractionEnabled;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(nonatomic, getter=isHidden) _Bool hidden;
- (void)setScale:(double)arg1;
@property(nonatomic) double yScale;
@property(nonatomic) double xScale;
@property(nonatomic) double yRotation;
@property(nonatomic) double xRotation;
@property(nonatomic) double zRotation;
@property(nonatomic) double zPosition;
- (struct CGRect)calculateAccumulatedFrame;
@property(nonatomic) struct CGPoint position;
- (id)physicsField;
@property(retain, nonatomic) SKPhysicsBody *physicsBody;
- (id)description;
- (_Bool)needsUpdate;
- (_Bool)hasActions;
- (id)containingView;
- (void)removeAllActions;
- (void)removeActionForKey:(id)arg1;
- (id)actionForKey:(id)arg1;
- (void)runAction:(id)arg1 withKey:(id)arg2;
@property(nonatomic) double alpha;
@property(nonatomic) double speed;
- (void)runAction:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)runAction:(id)arg1;
@property(readonly, nonatomic) NSArray *children;
- (_Bool)hasChildren;
- (void)_processSearchTokens:(vector_408ca79d)arg1 visited:(set_23ab0f84 *)arg2 usingBlock:(CDUnknownBlockType)arg3 stopPointer:(_Bool *)arg4;
- (void)_enumerateChildNodesWithName:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 stopPointer:(_Bool *)arg3;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)enumerateChildNodesWithName:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)childNodeWithName:(id)arg1;
- (void)addChild:(id)arg1 withKey:(id)arg2;
- (void)_flippedChangedFrom:(_Bool)arg1 to:(_Bool)arg2;
- (void)_scaleFactorChangedFrom:(float)arg1 to:(float)arg2;
@property(copy, nonatomic) NSArray *constraints;
- (void)_performCleanup;
- (void)removeAllChildren;
- (void)removeChildrenInArray:(id)arg1;
- (void)removeChild:(id)arg1;
- (void)removeChildAtIndex:(long long)arg1;
@property(readonly, nonatomic) struct CGRect frame;
- (void)insertChild:(id)arg1 atIndex:(long long)arg2;
- (void)addChild:(id)arg1;
- (_Bool)inParentHierarchy:(id)arg1;
@property(readonly, nonatomic) struct CGPath *outline;
@property(readonly, nonatomic) SKNode *parent;
@property(readonly, nonatomic) SKScene *scene;
- (void)_update:(double)arg1;
- (void)removeFromParent;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) shared_ptr_11a7378b _aether;
- (void)setPhysicsField:(id)arg1;
- (id)allIntersectionsWithNode:(id)arg1 useAlphaTest:(_Bool)arg2;
- (_Bool)intersectsNode:(id)arg1 useAlphaTest:(_Bool)arg2;
@property(readonly, nonatomic) struct CGSize _size;
@property(nonatomic) struct CGPoint _anchorPoint;
@property(readonly, nonatomic) struct CGRect _untransformedBounds;
@property(nonatomic) _Bool _showBounds;
@property(retain, nonatomic) NSMutableDictionary *_info;
- (id)childrenInRect:(struct CGRect)arg1;
- (void)updatePhysicsPositionAndScaleFromSprite;
- (void)_getWorldTransform:(float *)arg1 positionY:(float *)arg2 rotation:(float *)arg3 xScale:(float *)arg4 yScale:(float *)arg5;
- (void)setParent:(id)arg1;
- (void)removeAction:(id)arg1;
- (struct SKCSprite *)csprite;

@end

@interface SK3DNode : SKNode
{
    id <SCNRenderer> _scnRenderer;
    struct SCNVector3 _originalCameraPosition;
    SCNScene *_scene;
    _Bool playing;
    _Bool loops;
    _Bool autoenablesDefaultLighting;
    double sceneTime;
    SCNNode *pointOfView;
}

+ (id)nodeWithViewportSize:(struct CGSize)arg1;
@property(nonatomic) _Bool autoenablesDefaultLighting; // @synthesize autoenablesDefaultLighting;
@property(retain, nonatomic) SCNNode *pointOfView; // @synthesize pointOfView;
@property(nonatomic) _Bool loops; // @synthesize loops;
@property(getter=isPlaying) _Bool playing; // @synthesize playing;
@property(nonatomic) double sceneTime; // @synthesize sceneTime;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_renderForTime:(double)arg1;
-     // Error parsing type: 32@0:816, name: unprojectPoint:
-     // Error parsing type: 32@0:816, name: projectPoint:
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
@property(retain, nonatomic) SCNScene *scnScene;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property struct CGSize viewportSize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithViewportSize:(struct CGSize)arg1;
- (id)init;
- (void)commonInit;

@end

@interface SKAction : NSObject <NSCopying, NSCoding>
{
    struct SKCAction *_caction;
}

+ (id)customActionWithDuration:(double)arg1 actionBlock:(CDUnknownBlockType)arg2;
+ (id)javaScriptActionWithDuration:(double)arg1 script:(id)arg2;
+ (id)runAction:(id)arg1 onChildWithName:(id)arg2;
+ (id)runBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
+ (id)runBlock:(CDUnknownBlockType)arg1;
+ (id)performSelector:(SEL)arg1 onTarget:(id)arg2;
+ (id)removeFromParent;
+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)waitForDuration:(double)arg1;
+ (id)reachToNode:(id)arg1 rootNode:(id)arg2 velocity:(double)arg3;
+ (id)reachToNode:(id)arg1 rootNode:(id)arg2 duration:(double)arg3;
+ (id)reachTo:(struct CGPoint)arg1 rootNode:(id)arg2 velocity:(double)arg3;
+ (id)reachTo:(struct CGPoint)arg1 rootNode:(id)arg2 duration:(double)arg3;
+ (id)strengthBy:(float)arg1 duration:(double)arg2;
+ (id)strengthTo:(float)arg1 duration:(double)arg2;
+ (id)speedTo:(double)arg1 duration:(double)arg2;
+ (id)speedBy:(double)arg1 duration:(double)arg2;
+ (id)followPath:(struct CGPath *)arg1 asOffset:(_Bool)arg2 orientToPath:(_Bool)arg3 speed:(double)arg4;
+ (id)followPath:(struct CGPath *)arg1 speed:(double)arg2;
+ (id)followPath:(struct CGPath *)arg1 asOffset:(_Bool)arg2 orientToPath:(_Bool)arg3 duration:(double)arg4;
+ (id)followPath:(struct CGPath *)arg1 duration:(double)arg2;
+ (id)colorizeWithColorBlendFactor:(double)arg1 duration:(double)arg2;
+ (id)colorizeWithColor:(id)arg1 colorBlendFactor:(double)arg2 duration:(double)arg3;
+ (id)playSoundFileNamed:(id)arg1 atPosition:(struct CGPoint)arg2 waitForCompletion:(_Bool)arg3;
+ (id)playSoundFileNamed:(id)arg1 waitForCompletion:(_Bool)arg2;
+ (id)playSoundFileNamed:(id)arg1;
+ (id)animateWithTextures:(id)arg1 timePerFrame:(double)arg2 resize:(_Bool)arg3 restore:(_Bool)arg4;
+ (id)animateWithTextures:(id)arg1 timePerFrame:(double)arg2;
+ (id)setTexture:(id)arg1 resize:(_Bool)arg2;
+ (id)setTexture:(id)arg1;
+ (id)unhide;
+ (id)hide;
+ (id)falloffBy:(float)arg1 duration:(double)arg2;
+ (id)falloffTo:(float)arg1 duration:(double)arg2;
+ (id)fadeAlphaTo:(double)arg1 duration:(double)arg2;
+ (id)fadeAlphaBy:(double)arg1 duration:(double)arg2;
+ (id)fadeOutWithDuration:(double)arg1;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)repeatActionForever:(id)arg1;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
+ (id)group:(id)arg1;
+ (id)sequence:(id)arg1;
+ (id)resizeToHeight:(double)arg1 duration:(double)arg2;
+ (id)resizeToWidth:(double)arg1 duration:(double)arg2;
+ (id)resizeToWidth:(double)arg1 height:(double)arg2 duration:(double)arg3;
+ (id)resizeByWidth:(double)arg1 height:(double)arg2 duration:(double)arg3;
+ (id)scaleYTo:(double)arg1 duration:(double)arg2;
+ (id)scaleXTo:(double)arg1 duration:(double)arg2;
+ (id)scaleXTo:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleXBy:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
+ (id)rotateToAngle:(double)arg1 duration:(double)arg2 shortestUnitArc:(_Bool)arg3;
+ (id)rotateToAngle:(double)arg1 duration:(double)arg2;
+ (id)rotateByAngle:(double)arg1 duration:(double)arg2;
+ (id)moveToY:(double)arg1 duration:(double)arg2;
+ (id)moveToX:(double)arg1 duration:(double)arg2;
+ (id)moveTo:(struct CGPoint)arg1 duration:(double)arg2;
+ (id)moveBY:(struct CGVector)arg1 duration:(double)arg2;
+ (id)moveBy:(struct CGVector)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 duration:(double)arg3;
- (void)dealloc;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
@property(nonatomic) double speed;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
@property(nonatomic) long long timingMode;
@property(nonatomic) double duration;
@property(nonatomic) CDUnknownBlockType timingFunction;
- (struct SKCAction *)caction;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasRemovedFromTarget:(id)arg1 atTime:(double)arg2;
- (void)wasAddedToTarget:(id)arg1 atTime:(double)arg2;
- (double)ratioForTime:(double)arg1;
@property(nonatomic) _Bool finished;
- (void)willResumeWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasPausedWithTarget:(id)arg1 atTime:(double)arg2;
- (void)setCppAction:(void *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKAnimate : SKAction
{
    struct SKCAnimate *_mycaction;
    NSArray *_textures;
}

+ (id)animateWithTextures:(id)arg1 timePerFrame:(double)arg2 resize:(_Bool)arg3 restore:(_Bool)arg4;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(nonatomic) double timePerFrame;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKBitmapFont : NSObject <NSCoding>
{
    NSString *_fontName;
    NSString *_filePath;
    double _lineHeight;
    double _baseLine;
    NSArray *_characterSprites;
    struct map<unsigned short, SKSpriteNode *, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, SKSpriteNode *>>> _characterSpriteByChar;
    struct map<unsigned short, double, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, double>>> _characterAdvanceByChar;
    struct map<unsigned int, double, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, double>>> _characterKerningByCharPair;
    _Bool _internal;
    NSString *_fileName;
}

+ (id)fontWithTexture:(id)arg1 fontDataString:(id)arg2;
+ (id)fontForFileNamed:(id)arg1;
+ (id)_fontForFileNamed:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (double)kerningForCharacterNamed:(unsigned short)arg1 followedBy:(unsigned short)arg2;
- (double)advanceForCharacterNamed:(unsigned short)arg1;
- (double)lineHeight;
- (id)spriteForCharacterNamed:(unsigned short)arg1;
- (_Bool)loadFontWithTexture:(id)arg1 fontDataString:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)fontName;

@end

@interface SKLabelNode : SKNode
{
    float _fontSize;
    CDStruct_83984b6f _fontColor;
    NSString *_fontName;
    NSString *_text;
    SKBitmapFont *_bmf;
    NSMutableArray *_textSprites;
    UIColor *_labelColor;
    float _labelColorBlend;
    long long _labelBlendMode;
    SKSpriteNode *_textSprite;
    long long _horizontalAlignmentMode;
    long long _verticalAlignmentMode;
    struct CGRect _textRect;
}

+ (id)labelNodeWithFontNamed:(id)arg1;
+ (id)labelNodeWithText:(id)arg1;
+ (id)_labelNodeWithFontTexture:(id)arg1 fontDataString:(id)arg2;
+ (id)_labelNodeWithFontNamed:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)description;
@property(copy, nonatomic) NSString *text;
- (void)createSpritesForText;
- (void)_scaleFactorChangedFrom:(float)arg1 to:(float)arg2;
- (void)_flippedChangedFrom:(_Bool)arg1 to:(_Bool)arg2;
- (void)createBitmapSpritesForText;
- (struct CGRect)frame;
- (id)nodeAtPoint:(struct CGPoint)arg1 recursive:(_Bool)arg2;
- (id)nodesAtPoint:(struct CGPoint)arg1;
- (id)childrenInRect:(struct CGRect)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
@property(nonatomic) long long blendMode;
@property(nonatomic) double colorBlendFactor;
@property(retain, nonatomic) UIColor *color;
@property(retain, nonatomic) UIColor *fontColor;
@property(nonatomic) double fontSize;
@property(copy, nonatomic) NSString *fontName;
@property(nonatomic) long long horizontalAlignmentMode;
@property(nonatomic) long long verticalAlignmentMode;
- (id)initWithFontNamed:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_initialize;
- (id)init;
- (id)_getTextSprites;

@end

@interface SKButtonNode : SKLabelNode
{
    NSObject<SKButtonNodeDelegate> *_delegate;
    SKAction *_downAction;
    SKAction *_upAction;
    CDUnknownBlockType _downBlock;
    CDUnknownBlockType _upBlock;
    CDUnknownBlockType _upInsideBlock;
    int _touches;
}

+ (id)buttonWithFontNamed:(id)arg1;
@property(retain, nonatomic) SKAction *upAction; // @synthesize upAction=_upAction;
@property(retain, nonatomic) SKAction *downAction; // @synthesize downAction=_downAction;
@property(nonatomic) __weak NSObject<SKButtonNodeDelegate> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)onTouchDownInside:(CDUnknownBlockType)arg1;
- (void)onTouchUp:(CDUnknownBlockType)arg1;
- (void)onTouchUpInside:(CDUnknownBlockType)arg1;
- (void)touchEnded:(unsigned long long)arg1 location:(struct CGPoint)arg2;
- (void)touchMoved:(unsigned long long)arg1 location:(struct CGPoint)arg2;
- (void)touchBegan:(unsigned long long)arg1 location:(struct CGPoint)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKSpriteNode : SKNode
{
    SKLightNode *_light;
    _Bool _shouldRepeatTexture;
}

+ (id)spriteNodeWithColor:(id)arg1 size:(struct CGSize)arg2;
+ (id)spriteNodeWithTexture:(id)arg1 normalMap:(id)arg2;
+ (id)spriteNodeWithTexture:(id)arg1 size:(struct CGSize)arg2;
+ (id)spriteNodeWithTexture:(id)arg1;
+ (id)spriteNodeWithImageNamed:(id)arg1 normalMapped:(_Bool)arg2;
+ (id)spriteNodeWithImageNamed:(id)arg1;
@property(nonatomic) _Bool shouldRepeatTexture; // @synthesize shouldRepeatTexture=_shouldRepeatTexture;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
- (_Bool)containsPoint:(struct CGPoint)arg1;
@property(nonatomic) long long blendMode;
@property(nonatomic) unsigned int shadowedBitMask;
@property(nonatomic) unsigned int shadowCastBitMask;
@property(nonatomic) unsigned int lightingBitMask;
@property(nonatomic) struct CGSize repeatTextureSize;
- (void)setRepeatTexture:(_Bool)arg1;
- (_Bool)repeatTexture;
@property(nonatomic) struct CGRect centerRect;
@property(nonatomic) struct CGSize size;
@property(nonatomic) struct CGPoint anchorPoint;
@property(retain, nonatomic) UIColor *color;
@property(nonatomic) double colorBlendFactor;
@property(retain, nonatomic) SKShader *shader;
@property(retain, nonatomic) SKTexture *normalTexture;
@property(retain, nonatomic) SKTexture *texture;
- (id)description;
- (id)initWithTexture:(id)arg1;
- (id)initWithColor:(id)arg1 size:(struct CGSize)arg2;
- (void)setBounds:(struct CGRect)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithImageNamed:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithTexture:(id)arg1 color:(id)arg2 size:(struct CGSize)arg3;
- (id)_copyImageData;

@end

@interface SKButtonNodeSprite : SKSpriteNode
{
    NSObject<SKButtonNodeSpriteDelegate> *_delegate;
    SKAction *_downAction;
    SKAction *_upAction;
    CDUnknownBlockType _downBlock;
    CDUnknownBlockType _upBlock;
    CDUnknownBlockType _upInsideBlock;
    int _touches;
}

+ (id)buttonWithFontNamed:(id)arg1;
@property(retain, nonatomic) SKAction *upAction; // @synthesize upAction=_upAction;
@property(retain, nonatomic) SKAction *downAction; // @synthesize downAction=_downAction;
@property(nonatomic) __weak NSObject<SKButtonNodeSpriteDelegate> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)onTouchDownInside:(CDUnknownBlockType)arg1;
- (void)onTouchUp:(CDUnknownBlockType)arg1;
- (void)onTouchUpInside:(CDUnknownBlockType)arg1;
- (void)touchEnded:(unsigned long long)arg1 location:(struct CGPoint)arg2;
- (void)touchMoved:(unsigned long long)arg1 location:(struct CGPoint)arg2;
- (void)touchBegan:(unsigned long long)arg1 location:(struct CGPoint)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKColorize : SKAction
{
    struct SKCColorize *_mycaction;
}

+ (id)colorizeWithColorBlendFactor:(double)arg1 duration:(double)arg2;
+ (id)colorizeWithColor:(id)arg1 colorBlendFactor:(double)arg2 duration:(double)arg3;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKConstraint : NSObject <NSCoding, NSCopying>
{
    _Bool _enabled;
    SKNode *_referenceNode;
}

+ (id)scaleX:(id)arg1 scaleY:(id)arg2;
+ (id)scaleY:(id)arg1;
+ (id)scaleX:(id)arg1;
+ (id)scale:(id)arg1;
+ (id)width:(id)arg1 height:(id)arg2;
+ (id)height:(id)arg1;
+ (id)width:(id)arg1;
+ (id)orientToPoint:(struct CGPoint)arg1 offset:(id)arg2;
+ (id)orientToNode:(id)arg1 offset:(id)arg2;
+ (id)orientToPoint:(struct CGPoint)arg1 inNode:(id)arg2 offset:(id)arg3;
+ (id)zRotation:(id)arg1;
+ (id)distance:(id)arg1 toPoint:(struct CGPoint)arg2 inNode:(id)arg3;
+ (id)distance:(id)arg1 toPoint:(struct CGPoint)arg2;
+ (id)distance:(id)arg1 toNode:(id)arg2;
+ (id)positionX:(id)arg1 Y:(id)arg2;
+ (id)positionY:(id)arg1;
+ (id)positionX:(id)arg1;
@property(retain) SKNode *referenceNode; // @synthesize referenceNode=_referenceNode;
@property _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKCropNode : SKNode
{
    SKNode *_mask;
    struct SKCSprite *_csprite;
}

- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(retain, nonatomic) SKNode *maskNode;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKCustomAction : SKAction
{
    struct SKCCustomAction *_mycaction;
}

+ (id)customActionWithDuration:(double)arg1 actionBlock:(CDUnknownBlockType)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

@interface SKFieldNode : SKNode
{
    PKPhysicsField *_field;
    SKRegion *_region;
    float _smoothness;
    float _animationSpeed;
    SKTexture *_texture;
    _Bool _exclusive;
}

+ (id)customFieldWithEvaluationBlock:(CDUnknownBlockType)arg1;
+ (id)magneticField;
+ (id)electricField;
+ (id)springField;
+ (id)turbulenceFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (id)noiseFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (id)velocityFieldWithTexture:(id)arg1;
+ (id)velocityFieldWithVector: /* Error: Ran out of types for this method. */;
+ (id)linearGravityFieldWithVector: /* Error: Ran out of types for this method. */;
+ (id)radialGravityField;
+ (id)vortexField;
+ (id)dragField;
@property(nonatomic, getter=isExclusive) _Bool exclusive; // @synthesize exclusive=_exclusive;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(retain, nonatomic) SKRegion *region;
@property(nonatomic, getter=isEnabled) _Bool enabled;
@property(nonatomic) float falloff;
@property(nonatomic) float minimumRadius;
@property(nonatomic) float strength;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1 field:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)_descriptionClassName;
- (id)init;
@property(retain, nonatomic) SKTexture *texture;
@property(nonatomic) float animationSpeed;
@property(nonatomic) float smoothness;
// Error parsing type for property direction:
// Property attributes: T,N

@property(nonatomic) unsigned int categoryBitMask;
- (id)field;

@end

@interface SKCustomFieldNode : SKFieldNode
{
}

@property(copy, nonatomic) CDUnknownBlockType block;
- (CDUnknownBlockType)batchBlock;
- (void)setBatchBlock:(CDUnknownBlockType)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

__attribute__((visibility("hidden")))
@interface SKDisplayLink : NSObject
{
    NSTimer *_timer;
    CADisplayLink *_caDisplayLink;
    unsigned long long _mode;
    _Bool _paused;
    _Bool _asynchronous;
    long long _frameInterval;
    double _previousFrameTime;
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
    float _averageFrameTime;
    long long _frameCount;
    double _frameCountBeginTime;
    int _queuedFrameCount;
    unsigned long long _maxQueuedFrameCount;
}

+ (id)displayLinkWithBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
@property unsigned long long maxQueuedFrameCount; // @synthesize maxQueuedFrameCount=_maxQueuedFrameCount;
- (void).cxx_destruct;
- (void)_nsTimerCallback;
- (void)_caDisplayLinkCallback;
- (void)dealloc;
- (void)_callbackForNextFrame:(double)arg1;
- (void)_restart;
- (void)_teardown;
- (void)_start;
- (void)_setup;
@property(nonatomic) unsigned long long mode;
@property(nonatomic) long long frameInterval;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(nonatomic) _Bool asynchronous;
- (id)init;
- (id)initWithBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SKDistanceConstraint : SKConstraint
{
    SKRange *_distanceRange;
    SKNode *_node;
    struct CGPoint _point;
}

+ (id)constraintWithPoint:(struct CGPoint)arg1 inNode:(id)arg2 distanceRange:(id)arg3;
+ (id)constraintWithPoint:(struct CGPoint)arg1 distanceRange:(id)arg2;
+ (id)constraintWithNode:(id)arg1 distanceRange:(id)arg2;
@property struct CGPoint point; // @synthesize point=_point;
@property __weak SKNode *node; // @synthesize node=_node;
@property(copy) SKRange *distanceRange; // @synthesize distanceRange=_distanceRange;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPoint:(struct CGPoint)arg1 inNode:(id)arg2 distanceRange:(id)arg3;

@end

@interface SKDragFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKEffectNode : SKNode
{
}

@property(retain, nonatomic) SKShader *shader;
- (void)dealloc;
@property(nonatomic) _Bool shouldCenterFilter;
- (void)_flippedChangedFrom:(_Bool)arg1 to:(_Bool)arg2;
- (void)_scaleFactorChangedFrom:(float)arg1 to:(float)arg2;
@property(nonatomic) long long blendMode;
@property(nonatomic) _Bool shouldRasterize;
@property(nonatomic) _Bool shouldEnableEffects;
@property(retain, nonatomic) CIFilter *filter;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKElectricFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKEmitterNode : SKNode
{
    SKTexture *_particleTexture;
    struct SKCEmitterSprite *_eSprite;
    SKNode *_target;
    SKKeyframeSequence *_colorSequence;
    SKKeyframeSequence *_colorBlendSequence;
    SKKeyframeSequence *_alphaSequence;
    SKKeyframeSequence *_scaleSequence;
    SKKeyframeSequence *_rotationSequence;
    SKKeyframeSequence *_fieldInfluenceSequence;
}

- (void).cxx_destruct;
@property(retain, nonatomic) SKShader *shader;
- (void)advanceSimulationTime:(double)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setPaused:(_Bool)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
@property(nonatomic) unsigned int fieldBitMask;
- (void)resetSimulation;
@property(nonatomic) unsigned long long numParticlesToEmit;
@property(copy, nonatomic) SKAction *particleAction;
@property(nonatomic) long long particleBlendMode;
@property(retain, nonatomic) SKTexture *particleTexture;
@property(nonatomic) double emissionAngleRange;
@property(nonatomic) double emissionAngle;
@property(nonatomic) double particleSpeedRange;
@property(nonatomic) double particleSpeed;
@property(nonatomic) double particleAlphaSpeed;
@property(nonatomic) double particleAlphaRange;
@property(nonatomic) double particleAlpha;
@property(nonatomic) double particleScaleSpeed;
@property(nonatomic) double particleScaleRange;
@property(nonatomic) double particleScale;
@property(nonatomic) double particleRotationSpeed;
@property(nonatomic) double particleRotationRange;
@property(nonatomic) double particleRotation;
@property(nonatomic) double particleLifetimeRange;
@property(nonatomic) double particleLifetime;
@property(nonatomic) double particleColorBlendFactorSpeed;
@property(nonatomic) double particleColorBlendFactorRange;
@property(nonatomic) double particleColorBlendFactor;
@property(nonatomic) double particleBirthRate;
@property(nonatomic) double yAcceleration;
@property(nonatomic) double xAcceleration;
@property(nonatomic) struct CGVector particlePositionRange;
@property(nonatomic) struct CGPoint particlePosition;
@property(nonatomic) double particleColorAlphaSpeed;
@property(nonatomic) double particleColorBlueSpeed;
@property(nonatomic) double particleColorGreenSpeed;
@property(nonatomic) double particleColorRedSpeed;
@property(nonatomic) double particleColorAlphaRange;
@property(nonatomic) double particleColorBlueRange;
@property(nonatomic) double particleColorGreenRange;
@property(nonatomic) double particleColorRedRange;
@property(retain, nonatomic) UIColor *particleColor;
@property(nonatomic) double particleZPositionRange;
@property(nonatomic) double particleZPosition;
@property(nonatomic) struct CGSize particleSize;
@property(nonatomic) double particleZPositionSpeed;
@property(nonatomic) __weak SKNode *targetNode;
- (double)particleDensity;
- (void)setParticleDensity:(double)arg1;
- (_Bool)densityBased;
- (void)setDensityBased:(_Bool)arg1;
- (double)emissionDistanceRange;
- (void)setEmissionDistanceRange:(double)arg1;
- (double)emissionDistance;
- (void)setEmissionDistance:(double)arg1;
- (id)particleRotationSequence;
- (void)setParticleRotationSequence:(id)arg1;
@property(retain, nonatomic) SKKeyframeSequence *particleScaleSequence;
@property(retain, nonatomic) SKKeyframeSequence *particleColorSequence;
@property(retain, nonatomic) SKKeyframeSequence *particleColorBlendFactorSequence;
@property(retain, nonatomic) SKKeyframeSequence *particleAlphaSequence;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (id)description;
- (void)setPhysicsWorld:(id)arg1;
- (id)physicsWorld;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)setFieldInfluenceSequence:(id)arg1;
- (id)fieldInfluenceSequence;

@end

__attribute__((visibility("hidden")))
@interface SKFade : SKAction
{
    struct SKCFade *_mycaction;
}

+ (id)fadeOutWithDuration:(double)arg1;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)fadeAlphaTo:(double)arg1 duration:(double)arg2;
+ (id)fadeAlphaBy:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKFalloff : SKAction
{
    struct SKCFalloff *_mycaction;
}

+ (id)falloffBy:(double)arg1 duration:(double)arg2;
+ (id)falloffTo:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKFollowPath : SKAction
{
    struct SKCFollowPath *_mycaction;
    struct CGPath *_cgPath;
}

+ (id)followPath:(struct CGPath *)arg1 asOffset:(_Bool)arg2 orientToPath:(_Bool)arg3 speed:(double)arg4;
+ (id)followPath:(struct CGPath *)arg1 speed:(double)arg2;
+ (id)followPath:(struct CGPath *)arg1 asOffset:(_Bool)arg2 orientToPath:(_Bool)arg3 duration:(double)arg4;
+ (id)followPath:(struct CGPath *)arg1 duration:(double)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)reversedAction;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKGlobalSharedContextRegistry : NSObject
{
}

+ (void)setGlobalGLSharedContext:(id)arg1;
+ (id)globalGLSharedContext;

@end

__attribute__((visibility("hidden")))
@interface SKGroup : SKAction
{
    struct SKCGroup *_mycaction;
    NSArray *_actions;
}

+ (id)groupWithActions:(id)arg1;
- (void).cxx_destruct;
- (_Bool)finished;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKHide : SKAction
{
    struct SKCHide *_mycaction;
}

+ (id)unhide;
+ (id)hide;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)reversedAction;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKJavaScriptAction : SKAction
{
}

+ (id)javaScriptActionWithDuration:(double)arg1 script:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SKKeyedUnarchiver : NSKeyedUnarchiver
{
    NSArray *searchPaths;
}

@property(retain, nonatomic) NSArray *searchPaths; // @synthesize searchPaths;
- (void).cxx_destruct;

@end

@interface SKKeyframeSequence : NSObject <NSCoding, NSCopying>
{
    unsigned long long _count;
    NSMutableArray *_values;
    NSMutableArray *_times;
    long long _interpolationMode;
    long long _repeatMode;
    struct SKCKeyframeSequence *_cKeyframeSequence;
}

- (void).cxx_destruct;
- (double)getKeyframeTimeForIndex:(unsigned long long)arg1;
- (id)sampleAtTime:(double)arg1;
- (void)_dirtySKCKeyframeSequence;
- (struct SKCKeyframeSequence *)_createSKCKeyframeSequence;
- (Class)_valueClass;
- (id)getKeyframeValueForIndex:(unsigned long long)arg1;
- (void)setKeyframeValue:(id)arg1 time:(double)arg2 forIndex:(unsigned long long)arg3;
- (void)setKeyframeTime:(double)arg1 forIndex:(unsigned long long)arg2;
- (void)setKeyframeValue:(id)arg1 forIndex:(unsigned long long)arg2;
- (void)removeKeyframeAtIndex:(unsigned long long)arg1;
- (void)removeAllKeyframes;
- (void)removeLastKeyframe;
- (void)addKeyframeValue:(id)arg1 time:(double)arg2;
@property(nonatomic) long long repeatMode;
@property(nonatomic) long long interpolationMode;
- (unsigned long long)count;
- (id)initWithKeyframeValues:(id)arg1 times:(id)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
- (id)initWithCount:(unsigned long long)arg1;

@end

@interface SKLightNode : SKNode
{
    _Bool _enabled;
    unsigned int _categoryBitMask;
    UIColor *_lightColor;
    UIColor *_ambientColor;
    UIColor *_shadowColor;
    double _falloff;
}

@property(nonatomic) unsigned int categoryBitMask; // @synthesize categoryBitMask=_categoryBitMask;
@property(nonatomic) double falloff; // @synthesize falloff=_falloff;
@property(retain, nonatomic) UIColor *shadowColor; // @synthesize shadowColor=_shadowColor;
@property(retain, nonatomic) UIColor *ambientColor; // @synthesize ambientColor=_ambientColor;
@property(retain, nonatomic) UIColor *lightColor; // @synthesize lightColor=_lightColor;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (void)setLightCategoryBitMask:(unsigned int)arg1;
- (unsigned int)lightCategoryBitMask;
- (void)setLightDecay:(double)arg1;
- (double)lightDecay;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKLinearGravityFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKMagneticFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

__attribute__((visibility("hidden")))
@interface SKMove : SKAction
{
    struct SKCMove *_mycaction;
}

+ (id)moveByY:(double)arg1 duration:(double)arg2;
+ (id)moveToY:(double)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 duration:(double)arg2;
+ (id)moveToX:(double)arg1 duration:(double)arg2;
+ (id)moveToX:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)moveTo:(struct CGPoint)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)moveBy:(struct CGPoint)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKTexture : NSObject <NSCopying, NSCoding>
{
    _Bool _shouldGenerateMipmaps;
    _Bool _didGenerateMipmaps;
    _Bool _isPath;
    _Bool _isData;
    NSString *_imgName;
    NSArray *_searchPaths;
    struct CGRect _textRect;
    struct CGRect _textCoords;
    _Bool _disableAlpha;
    _Bool _isRotated;
    struct CGPoint _cropScale;
    struct CGPoint _cropOffset;
    int _alignment;
    int _rowLength;
    _Bool _isCompressed;
    int _compressedSize;
    unsigned int _compressedFormat;
    CIFilter *_filter;
    SKTexture *_originalTexture;
    unsigned int _textureTarget;
    NSString *_originalAtlasName;
    NSString *_subTextureName;
    SKTextureCache *_textureCache;
    unsigned int *_alphaMap;
    struct CGSize _alphaMapSize;
}

+ (id)_textureWithImageNamed:(id)arg1;
+ (void)updateTextures;
+ (void)preloadTextures;
+ (void)deleteUnusedTextures;
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2 flipped:(_Bool)arg3;
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2;
+ (id)textureWithImage:(id)arg1;
+ (id)textureWithCGImage:(struct CGImage *)arg1;
+ (id)textureWithCGImage:(struct CGImage *)arg1 pointSize:(struct CGSize)arg2;
+ (id)textureNoiseWithSmoothness:(double)arg1 size:(struct CGSize)arg2 grayscale:(_Bool)arg3;
+ (id)textureVectorNoiseWithSmoothness:(double)arg1 size:(struct CGSize)arg2;
+ (id)textureWithRect:(struct CGRect)arg1 inTexture:(id)arg2;
+ (id)textureWithImageNamed:(id)arg1 rect:(struct CGRect)arg2;
+ (id)textureWithImageNamed:(id)arg1;
+ (void)preloadTextures:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)_addTextureToPreloadlist:(id)arg1;
+ (id)lookupTextureCacheForName:(id)arg1;
+ (void)registerTextureCache:(id)arg1 forName:(id)arg2;
+ (id)_textureWithGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2;
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2;
+ (id)textureWithImagePath:(id)arg1;
+ (id)compressedTextureWithData:(id)arg1 size:(struct CGSize)arg2 bitsPerPixel:(unsigned int)arg3 hasAlpha:(_Bool)arg4;
+ (id)compressedTextureWithData:(id)arg1;
@property(readonly, nonatomic) struct CGSize alphaMapSize; // @synthesize alphaMapSize=_alphaMapSize;
@property(readonly, nonatomic) unsigned int *alphaMap; // @synthesize alphaMap=_alphaMap;
@property(copy, nonatomic) NSString *subTextureName; // @synthesize subTextureName=_subTextureName;
@property(copy, nonatomic) NSString *originalAtlasName; // @synthesize originalAtlasName=_originalAtlasName;
@property(nonatomic) struct CGPoint cropOffset; // @synthesize cropOffset=_cropOffset;
@property(nonatomic) struct CGPoint cropScale; // @synthesize cropScale=_cropScale;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (void)preload;
- (void)unload;
@property(nonatomic) long long filteringMode;
@property(nonatomic) int wrapMode;
@property(readonly, nonatomic) _Bool isRepeatable;
- (void)_loadOnTextureQueue;
- (void)_ensureImageData;
@property(nonatomic) _Bool usesMipmaps;
- (id)description;
- (id)textureByApplyingCIFilter:(id)arg1;
- (struct CGSize)size;
@property(readonly, nonatomic) struct CGSize pixelSize;
- (_Bool)isInMemory;
- (struct CGRect)textureRect;
@property(nonatomic) _Bool disableAlpha;
@property(readonly, nonatomic) _Bool useAlpha;
@property(readonly, nonatomic) _Bool hasAlpha;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithImagePath:(id)arg1;
- (id)init;
- (id)initWithImageNamed:(id)arg1;
- (void)loadImageData;
- (void)initTextureCacheWithImageData;
- (void)preloadWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadImageDataFromCGImage:(struct CGImage *)arg1 pointsSize:(struct CGSize)arg2;
- (_Bool)loadImageDataFromPVRData:(id)arg1;
- (_Bool)loadImageDataFromPVRGZData:(id)arg1;
- (void)setTextureDimension:(const struct CGSize *)arg1 withPixelSize:(const struct CGSize *)arg2;
- (void)commonInit;
- (struct CGImage *)alphaMask;
- (_Bool)alphaTestX:(double)arg1 y:(double)arg2;
- (void)generateAlphaMapOfSize:(struct CGSize)arg1 fromImage:(struct CGImage *)arg2;
- (id)textureByGeneratingNormalMapWithSmoothness:(double)arg1 contrast:(double)arg2;
- (id)textureByGeneratingNormalMap;
- (id)_textureCache;
- (id)imgName;
- (void)_savePngFromGLCache:(id)arg1;
- (struct CGImage *)_newTextureFromGLCache;
- (struct CGImage *)_createCGImage;
- (struct CGImage *)_rotateCGImage:(struct CGImage *)arg1;
- (id)_initWithGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2;
@property(readonly, nonatomic) NSString *imageNameOrPath;
- (id)_generateNormalMap:(double)arg1 contrast:(double)arg2 multiPass:(unsigned long long)arg3;
- (id)_copyImageData;
- (void)load;
@property(nonatomic) unsigned int textureTarget;
@property(nonatomic) _Bool isRotated;
- (int)glTextureId;

@end

@interface SKMutableTexture : SKTexture
{
    void *_ioSurface;
    _Bool _ioSurfaceBacked;
    struct CGSize _textureSize;
    void *_pixelData;
    unsigned long long _pixelDataLength;
    int _pixelFormat;
}

+ (id)mutableTextureWithSize:(struct CGSize)arg1;
- (id).cxx_construct;
- (void)dealloc;
- (id)description;
- (void)load;
- (void)modifyPixelDataWithBlock:(CDUnknownBlockType)arg1;
- (id)initWithSize:(struct CGSize)arg1 pixelFormat:(int)arg2;
- (id)initWithSize:(struct CGSize)arg1;
- (id)initWithSize:(struct CGSize)arg1 ioSurfaceBacked:(_Bool)arg2 pixelFormat:(int)arg3;

@end

@interface SKNoiseFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(nonatomic) float animationSpeed;
@property(nonatomic) float smoothness;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKOpenGLNode : SKNode
{
}

+ (id)openGLNodeWithViewportSize:(struct CGSize)arg1;
- (void)renderForTime:(double)arg1;
- (void)_renderForTime:(double)arg1;
- (_Bool)needsRenderForTime:(double)arg1;
@property struct CGSize viewportSize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithViewportSize:(struct CGSize)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKOrientationConstraint : SKConstraint
{
    SKNode *_node;
    SKRange *_offset;
    struct CGPoint _point;
}

+ (id)constraintOrientingToPoint:(struct CGPoint)arg1 offset:(id)arg2;
+ (id)constraintOrientingToNode:(id)arg1 offset:(id)arg2;
+ (id)constraintOrientingToPoint:(struct CGPoint)arg1 inNode:(id)arg2 offset:(id)arg3;
@property(copy) SKRange *offset; // @synthesize offset=_offset;
@property struct CGPoint point; // @synthesize point=_point;
@property __weak SKNode *node; // @synthesize node=_node;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithNode:(id)arg1 point:(struct CGPoint)arg2 offset:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface SKPerformSelector : SKAction
{
    SEL _selector;
    id _target;
}

+ (id)perfromSelector:(SEL)arg1 onTarget:(id)arg2;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKPhysicsBody : NSObject <NSCopying, NSCoding>
{
    _Bool _dynamic;
    _Bool _usesPreciseCollisionDetection;
    _Bool _allowsRotation;
    _Bool _pinned;
    _Bool _resting;
    _Bool _affectedByGravity;
    unsigned int _fieldBitMask;
    unsigned int _categoryBitMask;
    unsigned int _collisionBitMask;
    unsigned int _contactTestBitMask;
    double _friction;
    double _charge;
    double _restitution;
    double _linearDamping;
    double _angularDamping;
    double _density;
    double _mass;
    double _area;
    NSArray *_joints;
    SKNode *_node;
    double _angularVelocity;
    struct CGVector _velocity;
}

+ (id)bodyWithBodies:(id)arg1;
+ (id)bodyWithTexture:(id)arg1 alphaThreshold:(float)arg2 size:(struct CGSize)arg3;
+ (id)bodyWithTexture:(id)arg1 size:(struct CGSize)arg2;
+ (id)bodyWithEdgeLoopFromRect:(struct CGRect)arg1;
+ (id)bodyWithEdgeLoopFromPath:(struct CGPath *)arg1;
+ (id)bodyWithEdgeChainFromPath:(struct CGPath *)arg1;
+ (id)bodyWithEdgeFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
+ (id)bodyWithPolygonFromPath:(struct CGPath *)arg1;
+ (id)bodyWithRectangleOfSize:(struct CGSize)arg1 center:(struct CGPoint)arg2;
+ (id)bodyWithRectangleOfSize:(struct CGSize)arg1;
+ (id)bodyWithCircleOfRadius:(double)arg1 center:(struct CGPoint)arg2;
+ (id)bodyWithCircleOfRadius:(double)arg1;
+ (id)copyWithZone:(struct _NSZone *)arg1;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) double angularVelocity; // @synthesize angularVelocity=_angularVelocity;
@property(nonatomic) struct CGVector velocity; // @synthesize velocity=_velocity;
@property(readonly, nonatomic) __weak SKNode *node; // @synthesize node=_node;
@property(readonly, nonatomic) NSArray *joints; // @synthesize joints=_joints;
@property(nonatomic) unsigned int contactTestBitMask; // @synthesize contactTestBitMask=_contactTestBitMask;
@property(nonatomic) unsigned int collisionBitMask; // @synthesize collisionBitMask=_collisionBitMask;
@property(nonatomic) unsigned int categoryBitMask; // @synthesize categoryBitMask=_categoryBitMask;
@property(nonatomic) unsigned int fieldBitMask; // @synthesize fieldBitMask=_fieldBitMask;
@property(nonatomic) _Bool affectedByGravity; // @synthesize affectedByGravity=_affectedByGravity;
@property(readonly, nonatomic) double area; // @synthesize area=_area;
@property(nonatomic) double mass; // @synthesize mass=_mass;
@property(nonatomic) double density; // @synthesize density=_density;
@property(nonatomic) double angularDamping; // @synthesize angularDamping=_angularDamping;
@property(nonatomic) double linearDamping; // @synthesize linearDamping=_linearDamping;
@property(nonatomic) double restitution; // @synthesize restitution=_restitution;
@property(nonatomic) double charge; // @synthesize charge=_charge;
@property(nonatomic) double friction; // @synthesize friction=_friction;
@property(nonatomic, getter=isResting) _Bool resting; // @synthesize resting=_resting;
@property(nonatomic) _Bool pinned; // @synthesize pinned=_pinned;
@property(nonatomic) _Bool allowsRotation; // @synthesize allowsRotation=_allowsRotation;
@property(nonatomic) _Bool usesPreciseCollisionDetection; // @synthesize usesPreciseCollisionDetection=_usesPreciseCollisionDetection;
@property(nonatomic, getter=isDynamic) _Bool dynamic; // @synthesize dynamic=_dynamic;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)allContactedBodies;
- (void)applyAngularImpulse:(double)arg1;
- (void)applyImpulse:(struct CGVector)arg1 atPoint:(struct CGPoint)arg2;
- (void)applyImpulse:(struct CGVector)arg1;
- (void)applyTorque:(double)arg1;
- (void)applyForce:(struct CGVector)arg1 atPoint:(struct CGPoint)arg2;
- (void)applyForce:(struct CGVector)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface SKPhysicsContact : NSObject
{
    SKPhysicsBody *_bodyA;
    SKPhysicsBody *_bodyB;
    double _collisionImpulse;
    struct CGPoint _contactPoint;
    struct CGVector _contactNormal;
}

+ (id)copyWithZone:(struct _NSZone *)arg1;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) double collisionImpulse; // @synthesize collisionImpulse=_collisionImpulse;
@property(readonly, nonatomic) struct CGVector contactNormal; // @synthesize contactNormal=_contactNormal;
@property(readonly, nonatomic) struct CGPoint contactPoint; // @synthesize contactPoint=_contactPoint;
@property(readonly, nonatomic) SKPhysicsBody *bodyB; // @synthesize bodyB=_bodyB;
@property(readonly, nonatomic) SKPhysicsBody *bodyA; // @synthesize bodyA=_bodyA;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface SKPhysicsGrid : NSObject
{
    float _width;
    float _height;
}

+ (id)vectorGridFromTexture:(id)arg1 accuracy:(float)arg2;
+ (id)gridFromTexture:(id)arg1 alphaThreshold:(float)arg2 accuracy:(float)arg3;
+ (id)gridFromOccupancyArray:(const char *)arg1 width:(int)arg2 height:(int)arg3;
@property(readonly, nonatomic) float height; // @synthesize height=_height;
@property(readonly, nonatomic) float width; // @synthesize width=_width;
- (void)spritesFromGrid:(id)arg1 xDivisions:(int)arg2 zPosition:(double)arg3 spriteSize:(struct CGSize)arg4 texture:(id)arg5 physicsBody:(id)arg6;
- (void)spritesFromGrid:(id)arg1 gridSize:(struct CGSize)arg2 zPosition:(double)arg3 edgeColor:(id)arg4 interiorColor:(id)arg5 spriteSize:(struct CGSize)arg6 physicsBody:(id)arg7;

@end

@interface SKPhysicsJoint : NSObject <NSCoding>
{
    _Bool __implicit;
    SKPhysicsBody *bodyA;
    SKPhysicsBody *bodyB;
    double reactionTorque;
    struct CGVector reactionForce;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) _Bool _implicit; // @synthesize _implicit=__implicit;
@property(readonly, nonatomic) double reactionTorque; // @synthesize reactionTorque;
@property(readonly, nonatomic) struct CGVector reactionForce; // @synthesize reactionForce;
@property(retain, nonatomic) SKPhysicsBody *bodyB; // @synthesize bodyB;
@property(retain, nonatomic) SKPhysicsBody *bodyA; // @synthesize bodyA;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface SKPhysicsJointFixed : SKPhysicsJoint
{
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3;
+ (id)allocWithZone:(struct _NSZone *)arg1;

@end

@interface SKPhysicsJointLimit : SKPhysicsJoint
{
    double _maxLength;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchorA:(struct CGPoint)arg3 anchorB:(struct CGPoint)arg4;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) double maxLength; // @synthesize maxLength=_maxLength;

@end

@interface SKPhysicsJointPin : SKPhysicsJoint
{
    _Bool _shouldEnableLimits;
    double _lowerAngleLimit;
    double _upperAngleLimit;
    double _frictionTorque;
    double _rotationSpeed;
    struct CGPoint _anchor;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(readonly) struct CGPoint anchor; // @synthesize anchor=_anchor;
@property(nonatomic) double rotationSpeed; // @synthesize rotationSpeed=_rotationSpeed;
@property(nonatomic) double frictionTorque; // @synthesize frictionTorque=_frictionTorque;
@property(nonatomic) double upperAngleLimit; // @synthesize upperAngleLimit=_upperAngleLimit;
@property(nonatomic) double lowerAngleLimit; // @synthesize lowerAngleLimit=_lowerAngleLimit;
@property(nonatomic) _Bool shouldEnableLimits; // @synthesize shouldEnableLimits=_shouldEnableLimits;
- (id).cxx_construct;

@end

@interface SKPhysicsJointSliding : SKPhysicsJoint
{
    _Bool _shouldEnableLimits;
    double _lowerDistanceLimit;
    double _upperDistanceLimit;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3 axis:(struct CGVector)arg4;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) double upperDistanceLimit; // @synthesize upperDistanceLimit=_upperDistanceLimit;
@property(nonatomic) double lowerDistanceLimit; // @synthesize lowerDistanceLimit=_lowerDistanceLimit;
@property(nonatomic) _Bool shouldEnableLimits; // @synthesize shouldEnableLimits=_shouldEnableLimits;

@end

@interface SKPhysicsJointSpring : SKPhysicsJoint
{
    double _damping;
    double _frequency;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchorA:(struct CGPoint)arg3 anchorB:(struct CGPoint)arg4;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) double frequency; // @synthesize frequency=_frequency;
@property(nonatomic) double damping; // @synthesize damping=_damping;

@end

@interface SKPhysicsWorld : NSObject <NSCoding>
{
    double speed;
    id <SKPhysicsContactDelegate> _contactDelegate;
    struct CGVector _gravity;
}

+ (id)copyWithZone:(struct _NSZone *)arg1;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) id <SKPhysicsContactDelegate> contactDelegate; // @synthesize contactDelegate=_contactDelegate;
@property(nonatomic) struct CGVector gravity; // @synthesize gravity=_gravity;
@property(nonatomic) double speed; // @synthesize speed;
- (id).cxx_construct;
-     // Error parsing type: 32@0:816, name: sampleFieldsAt:
-     // Error parsing type: 32@0:816, name: sampleFields:
- (id)bodyAlongRayStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2;
- (id)bodyInRect:(struct CGRect)arg1;
- (id)bodyAtPoint:(struct CGPoint)arg1;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumerateBodiesInRect:(struct CGRect)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateBodiesAtPoint:(struct CGPoint)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)hasFields;
- (void)removeAllJoints;
- (void)removeJoint:(id)arg1;
- (void)addJoint:(id)arg1;
- (id)fields;
- (id)bodies;
- (_Bool)hasBodies;
- (void)removeAllBodies;
- (void)removeBody:(id)arg1;
- (void)addBody:(id)arg1;
- (_Bool)stepWithTime:(double)arg1 velocityIterations:(unsigned long long)arg2 positionIterations:(unsigned long long)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKPlaySound : SKAction
{
    NSString *_filePath;
    struct SKCPlaySound *_mycaction;
    struct CGPoint _position;
    SKSoundSource *_soundSource;
}

+ (id)playSoundFileNamed:(id)arg1 atPosition:(struct CGPoint)arg2 waitForCompletion:(_Bool)arg3;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKPositionConstraint : SKConstraint
{
    SKRange *_xRange;
    SKRange *_yRange;
}

+ (id)constraintWithYRange:(id)arg1;
+ (id)constraintWithXRange:(id)arg1;
+ (id)constraintWithXRange:(id)arg1 YRange:(id)arg2;
@property(copy) SKRange *yRange; // @synthesize yRange=_yRange;
@property(copy) SKRange *xRange; // @synthesize xRange=_xRange;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithXRange:(id)arg1 YRange:(id)arg2;

@end

@interface SKRadialGravityFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKRange : NSObject <NSCoding, NSCopying>
{
    double _lowerLimit;
    double _upperLimit;
}

+ (id)rangeWithValue:(double)arg1 variance:(double)arg2;
+ (id)rangeWithConstantValue:(double)arg1;
+ (id)rangeWithUpperLimit:(double)arg1;
+ (id)rangeWithLowerLimit:(double)arg1;
+ (id)rangeWithNoLimits;
+ (id)rangeWithLowerLimit:(double)arg1 upperLimit:(double)arg2;
@property double upperLimit; // @synthesize upperLimit=_upperLimit;
@property double lowerLimit; // @synthesize lowerLimit=_lowerLimit;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithLowerLimit:(double)arg1 upperLimit:(double)arg2;

@end

__attribute__((visibility("hidden")))
@interface SKReach : SKAction
{
    SKNode *_ikRoot;
    struct CGPoint _goalPosition;
    NSMutableArray *_ikChain;
    double _velocity;
    _Bool _timeConstrained;
    double _zRotationSpeed;
}

+ (id)reachToNode:(id)arg1 rootNode:(id)arg2 velocity:(double)arg3;
+ (id)reachToNode:(id)arg1 rootNode:(id)arg2 duration:(double)arg3;
+ (id)reachTo:(struct CGPoint)arg1 rootNode:(id)arg2 velocity:(double)arg3;
+ (id)reachTo:(struct CGPoint)arg1 rootNode:(id)arg2 duration:(double)arg3;
+ (id)reachTo:(struct CGPoint)arg1 rootNode:(id)arg2 duration:(double)arg3 maxZRotationSpeed:(double)arg4;
+ (id)reachTo:(struct CGPoint)arg1 rootNode:(id)arg2 zRotationSpeed:(double)arg3 maxDuration:(double)arg4;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)solveIKWithTarget:(id)arg1;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (id)init;

@end

@interface SKReachConstraints : NSObject <NSCoding>
{
    double _lowerAngleLimit;
    double _upperAngleLimit;
}

@property(nonatomic) double upperAngleLimit; // @synthesize upperAngleLimit=_upperAngleLimit;
@property(nonatomic) double lowerAngleLimit; // @synthesize lowerAngleLimit=_lowerAngleLimit;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithLowerAngleLimit:(double)arg1 upperAngleLimit:(double)arg2;

@end

@interface SKRegion : NSObject <NSCopying, NSCoding>
{
    PKRegion *_region;
}

+ (id)infiniteRegion;
- (void).cxx_destruct;
- (void)containsPoints:(const float *)arg1 locationStride:(long long)arg2 results:(char *)arg3 resultsStride:(long long)arg4 count:(int)arg5;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (id)regionByIntersectionWithRegion:(id)arg1;
- (id)regionByDifferenceFromRegion:(id)arg1;
- (id)regionByUnionWithRegion:(id)arg1;
- (id)inverseRegion;
- (id)initWithPath:(struct CGPath *)arg1;
- (id)initWithSize:(struct CGSize)arg1;
- (id)initWithRadius:(float)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, nonatomic) struct CGPath *path;

@end

__attribute__((visibility("hidden")))
@interface SKRemove : SKAction
{
    _Bool _hasFired;
}

+ (id)removeFromParent;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKRepeat : SKAction
{
    struct SKCRepeat *_mycaction;
    SKAction *_repeatedAction;
}

+ (id)repeatActionForever:(id)arg1;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKResize : SKAction
{
    struct SKCResize *_mycaction;
}

+ (id)resizeByWidth:(double)arg1 height:(double)arg2 duration:(double)arg3;
+ (id)resizeToHeight:(double)arg1 duration:(double)arg2;
+ (id)resizeToWidth:(double)arg1 height:(double)arg2 duration:(double)arg3;
+ (id)resizeToWidth:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKRotate : SKAction
{
    struct SKCRotate *_mycaction;
}

+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)rotateToY:(double)arg1 duration:(double)arg2;
+ (id)rotateByY:(double)arg1 duration:(double)arg2;
+ (id)rotateToX:(double)arg1 duration:(double)arg2;
+ (id)rotateByX:(double)arg1 duration:(double)arg2;
+ (id)rotateToAngle:(double)arg1 duration:(double)arg2 shortestUnitArc:(_Bool)arg3;
+ (id)rotateToAngle:(double)arg1 duration:(double)arg2;
+ (id)rotateByAngle:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKRotationConstraint : SKConstraint
{
    SKRange *_zRotationRange;
}

+ (id)constraintWithZRotationRange:(id)arg1;
@property(copy) SKRange *zRotationRange; // @synthesize zRotationRange=_zRotationRange;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithZRotationRange:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKRunAction : SKAction
{
    SKAction *_action;
    NSString *_subSpriteKey;
    NSString *_actionKey;
    _Bool _waitForKeyedAction;
    _Bool _runOnSubSprite;
    _Bool _fired;
}

+ (id)runAction:(id)arg1 afterActionWithKey:(id)arg2;
+ (id)runAction:(id)arg1 onFirstChildWithName:(id)arg2;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKRunBlock : SKAction
{
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)runBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

@interface SKSCNRenderer : NSObject
{
    double _timePreviousUpdate;
    SKLabelNode *_statsLabel;
    double _prevViewAspect;
    unsigned int _spritesRendered;
    unsigned int _spritesSubmitted;
    int _frames;
    unsigned int _prevSpritesRendered;
    unsigned int _prevSpritesRenderedSubmitted;
    double _timeBeginFrameCount;
    float _fps;
    _Bool _hasRenderedOnce;
    _Bool _hasRenderedForCurrentUpdate;
    _Bool _isInTransition;
    _Bool _disableInput;
    SKScene *_scene;
    struct SKCRenderer *_renderer;
    float _prevBackingScaleFactor;
    _Bool showsFPS;
    _Bool showsNodeCount;
    double _backingScaleFactor;
    struct CGRect _bounds;
}

+ (id)rendererWithContext:(id)arg1 options:(id)arg2;
@property(nonatomic) double backingScaleFactor; // @synthesize backingScaleFactor=_backingScaleFactor;
@property(nonatomic) struct CGRect bounds; // @synthesize bounds=_bounds;
@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (id).cxx_construct;
- (void).cxx_destruct;
- (int)_spriteSubmitCount;
- (int)_spriteRenderCount;
- (double)_fps;
- (id)_scene;
- (void)_update:(double)arg1;
- (void)_showAllStats;
- (void)set_showsTotalAreaRendered:(_Bool)arg1;
- (_Bool)_showsTotalAreaRendered;
- (void)set_showsCulledNodesInNodeCount:(_Bool)arg1;
- (_Bool)_showsCulledNodesInNodeCount;
- (_Bool)_showsGPUStats;
- (void)set_showsGPUStats:(_Bool)arg1;
- (_Bool)_showsCPUStats;
- (void)set_showsCPUStats:(_Bool)arg1;
- (_Bool)_showsCoreAnimationFPS;
- (void)set_showsCoreAnimationFPS:(_Bool)arg1;
- (_Bool)_shouldCenterStats;
- (void)set_shouldCenterStats:(_Bool)arg1;
- (_Bool)_showsSpriteBounds;
- (void)set_showsSpriteBounds:(_Bool)arg1;
- (id)init;
@property(nonatomic) _Bool showsFields;
- (_Bool)_showsOutlineInterior;
- (void)set_showsOutlineInterior:(_Bool)arg1;
@property(nonatomic) _Bool showsPhysics;
@property(nonatomic) _Bool showsDrawCount;
- (_Bool)showsQuadCount;
- (void)setShowsQuadCount:(_Bool)arg1;
@property(nonatomic) _Bool showsNodeCount; // @synthesize showsNodeCount;
@property(nonatomic) _Bool showsFPS; // @synthesize showsFPS;
- (_Bool)showsSpriteBounds;
- (void)setShowsSpriteBounds:(_Bool)arg1;
- (struct CGSize)pixelSize;
- (void)render:(_Bool)arg1;
- (void)updateAtTime:(double)arg1;
- (void)setupContext;
- (void)_initialize;
- (void)dealloc;
@property(nonatomic) _Bool ignoresSiblingOrder;

@end

__attribute__((visibility("hidden")))
@interface SKScale : SKAction
{
    struct SKCScale *_mycaction;
}

+ (id)scaleYTo:(double)arg1 duration:(double)arg2;
+ (id)scaleXTo:(double)arg1 duration:(double)arg2;
+ (id)scaleXTo:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleYBy:(double)arg1 duration:(double)arg2;
+ (id)scaleXBy:(double)arg1 duration:(double)arg2;
+ (id)scaleXBy:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKScaleConstraint : SKConstraint
{
    SKRange *_xRange;
    SKRange *_yRange;
}

+ (id)constraintWithYRange:(id)arg1;
+ (id)constraintWithXRange:(id)arg1;
+ (id)constraintWithScaleRange:(id)arg1;
+ (id)constraintWithXRange:(id)arg1 YRange:(id)arg2;
@property(copy) SKRange *yRange; // @synthesize yRange=_yRange;
@property(copy) SKRange *xRange; // @synthesize xRange=_xRange;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithXRange:(id)arg1 YRange:(id)arg2;

@end

@interface SKScene : SKEffectNode
{
    double _lastUpdate;
    double _pausedTime;
    struct CGRect _visibleRect;
    long long _scaleMode;
    NSMutableDictionary *_touchMap;
    NSMutableArray *_allChildenWithConstraints;
    struct CGRect _bounds;
    _Bool _isSetup;
    _Bool _usesExplicitUpdate;
    _Bool _usesExplicitRender;
    SKPhysicsBody *_scenePinBody;
    id _view;
    _Bool __needsUpdate;
    _Bool __needsRender;
    SKPhysicsWorld *_physicsWorld;
    id <SKSceneDelegate> _delegate;
    PKPhysicsWorld *__pkPhysicsWorld;
}

+ (id)sceneWithContentsOfFile:(id)arg1 size:(struct CGSize)arg2;
+ (id)sceneWithContentsOfFile:(id)arg1;
+ (id)sceneWithSize:(struct CGSize)arg1;
@property(retain, nonatomic) PKPhysicsWorld *_pkPhysicsWorld; // @synthesize _pkPhysicsWorld=__pkPhysicsWorld;
@property _Bool _needsRender; // @synthesize _needsRender=__needsRender;
@property _Bool _needsUpdate; // @synthesize _needsUpdate=__needsUpdate;
@property(nonatomic) id <SKSceneDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long scaleMode; // @synthesize scaleMode=_scaleMode;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) __weak SKView *view;
- (void)setPaused:(_Bool)arg1;
- (void)didFinishUpdate;
- (void)didApplyConstraints;
- (void)didSimulatePhysics;
- (void)didEvaluateActions;
- (void)_update:(double)arg1;
- (void)update:(double)arg1;
- (void)didChangeSize:(struct CGSize)arg1;
- (void)willMoveFromView:(id)arg1;
- (void)didMoveToView:(id)arg1;
- (void)_didMoveToView:(id)arg1;
@property(readonly, nonatomic) SKPhysicsWorld *physicsWorld; // @synthesize physicsWorld=_physicsWorld;
@property(nonatomic) struct CGSize size;
@property(nonatomic) struct CGPoint visibleRectCenter;
@property(nonatomic) struct CGSize visibleRectSize;
@property(nonatomic) struct CGRect visibleRect; // @synthesize visibleRect=_visibleRect;
- (struct CGPoint)convertPointToView:(struct CGPoint)arg1;
- (struct CGPoint)convertPointFromView:(struct CGPoint)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)setZPosition:(double)arg1;
- (double)zPosition;
- (void)setZRotation:(double)arg1;
- (double)zRotation;
- (void)setYScale:(double)arg1;
- (double)yScale;
- (void)setXScale:(double)arg1;
- (double)xScale;
- (void)setScale:(double)arg1;
- (void)setPosition:(struct CGPoint)arg1;
- (struct CGPoint)position;
@property(nonatomic) struct CGPoint anchorPoint;
@property(retain, nonatomic) UIColor *backgroundColor;
- (void)_removeConstraintsForNode:(id)arg1;
- (void)_registerConstraintsForNode:(id)arg1;
- (_Bool)_hasConstraints;
- (id)initWithCoder:(id)arg1;
- (id)initWithSize:(struct CGSize)arg1;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setNeedsRender;
- (void)_setNeedsUpdate;
@property _Bool _usesExplicitRender;
@property _Bool _usesExplicitUpdate;
- (void)didContinueContact:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKSequence : SKAction
{
    struct SKCSequence *_mycaction;
    NSArray *_actions;
    unsigned long long _animIndex;
}

+ (id)sequenceWithActions:(id)arg1;
- (void).cxx_destruct;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKShader : NSObject <NSCopying, NSCoding>
{
    _Bool _builtInUniformsDirty;
    _Bool _programIsDirty;
    double _prevUniformUpdateTime;
    NSMutableArray *_uniforms;
    NSMutableDictionary *_uniformData;
    NSString *_source;
    struct xglProgram *_xglProgram;
}

+ (id)shaderWithFileNamed:(id)arg1;
+ (id)shaderWithSource:(id)arg1 uniforms:(id)arg2;
+ (id)shaderWithSource:(id)arg1;
+ (id)shader;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_getShaderCompilationLog;
@property struct xglProgram *_xglProgram;
- (_Bool)isValid;
@property(readonly) NSArray *_textureUniforms;
- (struct xglProgram *)_updateUniforms;
- (struct xglProgram *)_syncUniformsForTime:(double)arg1;
- (void)_createProgram;
- (void)removeUniformNamed:(id)arg1;
- (id)uniformNamed:(id)arg1;
- (void)addUniform:(id)arg1;
@property(copy) NSArray *uniforms;
@property(copy) NSString *source;
- (id)initWithSource:(id)arg1 uniforms:(id)arg2;
- (id)initWithSource:(id)arg1;
- (id)init;

@end

@interface SKShapeNode : SKNode
{
    struct SKCShapeSprite *ss;
}

+ (id)shapeNodeWithSplinePoints:(struct CGPoint *)arg1 count:(unsigned long long)arg2;
+ (id)shapeNodeWithPoints:(struct CGPoint *)arg1 count:(unsigned long long)arg2;
+ (id)shapeNodeWithTriangleA:(struct CGPoint)arg1 B:(struct CGPoint)arg2 C:(struct CGPoint)arg3;
+ (id)shapeNodeWithRectOfSize:(struct CGSize)arg1 cornerRadius:(double)arg2;
+ (id)shapeNodeWithRect:(struct CGRect)arg1 cornerRadius:(double)arg2;
+ (id)shapeNodeWithRectOfSize:(struct CGSize)arg1;
+ (id)shapeNodeWithRect:(struct CGRect)arg1;
+ (id)shapeNodeWithCircleOfRadius:(double)arg1;
+ (id)shapeNodeWithEllipseOfSize:(struct CGSize)arg1;
+ (id)shapeNodeWithEllipseInRect:(struct CGRect)arg1;
+ (id)shapeNodeWithPath:(struct CGPath *)arg1 centered:(_Bool)arg2;
+ (id)shapeNodeWithPath:(struct CGPath *)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) double lineLength;
@property(nonatomic) double miterLimit;
@property(nonatomic) int lineJoin;
@property(nonatomic) int lineCap;
@property(retain, nonatomic) UIColor *strokeColor;
@property(retain, nonatomic) UIColor *fillColor;
- (void)setFillPath:(_Bool)arg1;
- (_Bool)fillPath;
@property(nonatomic) double lineWidth;
@property(nonatomic, getter=isAntialiased) _Bool antialiased;
@property(nonatomic) long long blendMode;
@property(nonatomic) double renderQualityRatio;
@property(retain, nonatomic) SKShader *strokeShader;
@property(retain, nonatomic) SKTexture *strokeTexture;
@property(retain, nonatomic) SKShader *fillShader;
@property(retain, nonatomic) SKTexture *fillTexture;
@property(nonatomic) double glowWidth;
- (void)_scaleFactorChangedFrom:(float)arg1 to:(float)arg2;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (struct CGRect)calculateAccumulatedFrame;
- (struct CGRect)frame;
@property(nonatomic) struct CGPath *path;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)_copyImageData;

@end

__attribute__((visibility("hidden")))
@interface SKSizeConstraint : SKConstraint
{
    SKRange *_widthRange;
    SKRange *_heightRange;
}

+ (id)constraintWithHeightRange:(id)arg1;
+ (id)constraintWithWidthRange:(id)arg1;
+ (id)constraintWithWidthRange:(id)arg1 heightRange:(id)arg2;
@property(copy) SKRange *heightRange; // @synthesize heightRange=_heightRange;
@property(copy) SKRange *widthRange; // @synthesize widthRange=_widthRange;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithWidthRange:(id)arg1 heightRange:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SKSoundBuffer : NSObject
{
    unsigned int _bufferId;
    NSString *_path;
    double _duration;
}

+ (id)bufferWithFileNamed:(id)arg1;
- (void).cxx_destruct;
- (void)dealloc;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) unsigned int bufferId;
- (id)description;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKSoundContext : NSObject
{
    struct ALCdevice_struct *_device;
    struct ALCcontext_struct *_context;
    _Bool _suspended;
}

+ (id)currentContext;
+ (id)context;
- (void)dealloc;
@property(nonatomic) double gain;
@property(nonatomic) struct CGPoint listenerPosition;
- (void)makeCurrentContext;
@property(nonatomic) _Bool suspended;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKSoundSource : NSObject
{
    unsigned int _sourceId;
    NSMutableArray *_buffers;
}

+ (id)sourceWithBuffer:(id)arg1;
+ (id)source;
- (void).cxx_destruct;
- (void)dealloc;
- (id)description;
- (void)purgeCompletedBuffers;
@property(readonly, nonatomic) int queuedBufferCount;
@property(readonly, nonatomic) int completedBufferCount;
@property(readonly, nonatomic) _Bool isPlaying;
@property(nonatomic) struct CGPoint position;
@property(nonatomic) double gain;
@property(nonatomic) _Bool shouldLoop;
- (void)stop;
- (void)pause;
- (void)play;
- (void)queueBuffer:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKSpeed : SKAction
{
    struct SKCSpeed *_mycaction;
}

+ (id)speedTo:(double)arg1 duration:(double)arg2;
+ (id)speedBy:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKSpringFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

__attribute__((visibility("hidden")))
@interface SKStrength : SKAction
{
    struct SKCStrength *_mycaction;
}

+ (id)strengthBy:(double)arg1 duration:(double)arg2;
+ (id)strengthTo:(double)arg1 duration:(double)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKTextureAtlas : NSObject <NSCoding>
{
    NSDictionary *_textureDict;
    NSString *_atlasName;
}

+ (void)preloadTextureAtlases:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (id)atlasNamed:(id)arg1;
+ (id)atlasWithDictionary:(id)arg1;
+ (_Bool)canUseObjectForAtlas:(id)arg1;
+ (id)findTextureNamed:(id)arg1;
+ (id)getSupportedPostfixes;
- (void).cxx_destruct;
- (id)textureNamed:(id)arg1;
- (id)findTextureNamedFromAtlas:(id)arg1;
- (void)dealloc;
- (id)description;
- (void)preloadWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadTextures;
- (void)parseAtlasPropertyList:(id)arg1 withPath:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
@property(readonly, nonatomic) NSArray *textureNames;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)unload;
- (void)preload;
- (id)_copyImageData;

@end

__attribute__((visibility("hidden")))
@interface SKTextureAtlasPacker : NSObject
{
}

+ (struct CGImage *)copyProcessedImageSource:(id)arg1;
- (void)generateTextureAtlasImages:(id)arg1 outputDictionary:(id *)arg2;
- (id)processPackedTextureAtlas:(const vector_c74fc2b3 *)arg1 suffix:(id)arg2 packer:(shared_ptr_7747cbe3)arg3 sortedTrimArray:(const vector_ea45b3ba *)arg4 sortedTextureArray:(const vector_65e381fc *)arg5;
- (id)generateMetaData;
- (id)getTextureFileList:(id)arg1 modDate:(id *)arg2;
- (id)partitionTextureFilesByResolution:(id)arg1;
- (_Bool)isFullyOpaque:(struct CGImage *)arg1;
- (struct CGRect)calcNonAlphaArea:(struct CGImage *)arg1;
- (struct CGImage *)copyRotateCGImage:(struct CGImage *)arg1 direction:(_Bool)arg2;

@end

__attribute__((visibility("hidden")))
@interface SKTextureCache : NSObject
{
    long long filteringMode;
    unsigned int texId;
    int texInternalFormat;
    unsigned int texFormat;
    unsigned int texType;
    struct CGSize size;
    struct CGSize pixelSize;
    _Bool isLoaded;
    _Bool hasAlpha;
    _Bool isPOT;
    char *pixelData;
    unsigned int *alphaMap;
    struct CGSize alphaMapSize;
    int state;
    int lock;
    struct CGImage *collisionMask;
    int wrapMode;
}

@property(nonatomic) int wrapMode; // @synthesize wrapMode;
@property(nonatomic) long long filteringMode; // @synthesize filteringMode;
@property(nonatomic) int state; // @synthesize state;
@property(nonatomic) unsigned int texType; // @synthesize texType;
@property(nonatomic) unsigned int texFormat; // @synthesize texFormat;
@property(nonatomic) int texInternalFormat; // @synthesize texInternalFormat;
@property(nonatomic) struct CGSize alphaMapSize; // @synthesize alphaMapSize;
@property(nonatomic) unsigned int *alphaMap; // @synthesize alphaMap;
@property(nonatomic) struct CGSize pixelSize; // @synthesize pixelSize;
@property(nonatomic) char *pixelData; // @synthesize pixelData;
@property(nonatomic) _Bool hasAlpha; // @synthesize hasAlpha;
@property(nonatomic) _Bool isPOT; // @synthesize isPOT;
@property(nonatomic) _Bool isLoaded; // @synthesize isLoaded;
@property(nonatomic) struct CGSize size; // @synthesize size;
@property(nonatomic) unsigned int texId; // @synthesize texId;
- (id).cxx_construct;
@property(readonly, nonatomic, getter=getLock) int *lock;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SKThreadSafeMapTable : NSObject <NSCopying, NSCoding, NSFastEnumeration>
{
    int _storageLock;
    NSMutableArray *_storage;
}

- (void).cxx_destruct;
- (id)description;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithNSMapTable:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKThreadSafeMutableArray : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
{
    int _storageLock;
    NSMutableArray *_storage;
}

- (void).cxx_destruct;
@property(readonly) __weak NSArray *arrayRepresentation;
- (id)description;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)removeObjectsInArray:(id)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithNSMutableArray:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKThreadSafeMutableDictionary : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
{
    int _storageLock;
    NSMutableDictionary *_storage;
}

- (void).cxx_destruct;
- (id)description;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithNSMutableDictionary:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SKTileMap : SKNode <NSXMLParserDelegate>
{
    _Bool _loading;
    _Bool _loaded;
    _Bool _skipSprites;
    _Bool _isometric;
    NSXMLParser *_parser;
    int _mapWidth;
    int _mapHeight;
    int _mapTileWidth;
    int _mapTileHeight;
    int _firstGid;
    int _tileWidth;
    int _tileHeight;
    int _spacing;
    int _margin;
    NSString *_imgName;
    NSString *_tilesetName;
    int _imgWidth;
    int _imgHeight;
    int _tileIndex;
    NSString *_layerName;
    int _layerWidth;
    int _layerHeight;
    NSMutableArray *_layerTiles;
    NSString *_mapName;
}

+ (id)tileMapWithName:(id)arg1;
- (void).cxx_destruct;
- (void)parser:(id)arg1 parseErrorOccurred:(id)arg2;
- (void)parserDidEndDocument:(id)arg1;
- (void)parserDidStartDocument:(id)arg1;
- (void)parser:(id)arg1 foundCharacters:(id)arg2;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)loadMap;
@property(readonly, nonatomic) struct CGSize mapSize;
@property(readonly, nonatomic) struct CGSize tileSize;
- (id)textureForGid:(unsigned int)arg1;
- (id)tileAtGridLocationX:(unsigned int)arg1 y:(unsigned int)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SKTransition : NSObject
{
    CDStruct_eed8e9f9 _data;
    CIFilter *_filter;
    _Bool _pauseIncoming;
    _Bool _pauseOutgoing;
}

+ (id)transitionWithCIFilter:(id)arg1 duration:(double)arg2;
+ (id)doorwayWithDuration:(double)arg1;
+ (id)doorsCloseVerticalWithDuration:(double)arg1;
+ (id)doorsCloseHorizontalWithDuration:(double)arg1;
+ (id)doorsOpenVerticalWithDuration:(double)arg1;
+ (id)doorsOpenHorizontalWithDuration:(double)arg1;
+ (id)pushRightWithDuration:(double)arg1;
+ (id)pushLeftWithDuration:(double)arg1;
+ (id)pushDownWithDuration:(double)arg1;
+ (id)pushUpWithDuration:(double)arg1;
+ (id)moveInRightWithDuration:(double)arg1;
+ (id)moveInLeftWithDuration:(double)arg1;
+ (id)moveInDownWithDuration:(double)arg1;
+ (id)moveInUpWithDuration:(double)arg1;
+ (id)revealRightWithDuration:(double)arg1;
+ (id)revealLeftWithDuration:(double)arg1;
+ (id)revealDownWithDuration:(double)arg1;
+ (id)revealUpWithDuration:(double)arg1;
+ (id)flipVerticalWithDuration:(double)arg1;
+ (id)flipHorizontalWithDuration:(double)arg1;
+ (id)crossFadeWithDuration:(double)arg1;
+ (id)fadeWithColor:(id)arg1 duration:(double)arg2;
+ (id)fadeWithDuration:(double)arg1;
+ (id)pushWithDirection:(long long)arg1 duration:(double)arg2;
+ (id)moveInWithDirection:(long long)arg1 duration:(double)arg2;
+ (id)revealWithDirection:(long long)arg1 duration:(double)arg2;
@property(nonatomic) _Bool pausesOutgoingScene; // @synthesize pausesOutgoingScene=_pauseOutgoing;
@property(nonatomic) _Bool pausesIncomingScene; // @synthesize pausesIncomingScene=_pauseIncoming;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_filter;
- (CDStruct_eed8e9f9)_data;
- (id)init;

@end

@interface SKTurbulenceFieldNode : SKNoiseFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKUniform : NSObject <NSCopying, NSCoding>
{
    long long _type;
    NSString *_name;
    unsigned long long _seed;
    SKTexture *_textureValue;
    union {
        float _floatValue;
        union _GLKVector2 _floatVector2Value;
        union _GLKVector3 _floatVector3Value;
        union _GLKVector4 _floatVector4Value;
        union _GLKMatrix2 _floatMatrix2Value;
        union _GLKMatrix3 _floatMatrix3Value;
        union _GLKMatrix4 _floatMatrix4Value;
    } _value;
}

+ (id)uniformWithName:(id)arg1 texture:(id)arg2;
+ (id)uniformWithName:(id)arg1 floatMatrix4:(union _GLKMatrix4)arg2;
+ (id)uniformWithName:(id)arg1 floatMatrix3:(union _GLKMatrix3)arg2;
+ (id)uniformWithName:(id)arg1 floatMatrix2:(union _GLKMatrix2)arg2;
+ (id)uniformWithName:(id)arg1 floatVector4:(union _GLKVector4)arg2;
+ (id)uniformWithName:(id)arg1 floatVector3:(union _GLKVector3)arg2;
+ (id)uniformWithName:(id)arg1 floatVector2:(union _GLKVector2)arg2;
+ (id)uniformWithName:(id)arg1 float:(float)arg2;
+ (id)uniformWithName:(id)arg1;
@property unsigned long long _seed; // @synthesize _seed;
@property(readonly) NSString *name; // @synthesize name=_name;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly) long long uniformType;
@property float floatValue;
@property(retain) SKTexture *textureValue;
@property union _GLKMatrix4 floatMatrix4Value;
@property union _GLKMatrix3 floatMatrix3Value;
@property union _GLKMatrix2 floatMatrix2Value;
@property union _GLKVector4 floatVector4Value;
@property union _GLKVector3 floatVector3Value;
@property union _GLKVector2 floatVector2Value;
- (id)initWithName:(id)arg1 floatMatrix4:(union _GLKMatrix4)arg2;
- (id)initWithName:(id)arg1 floatMatrix3:(union _GLKMatrix3)arg2;
- (id)initWithName:(id)arg1 floatMatrix2:(union _GLKMatrix2)arg2;
- (id)initWithName:(id)arg1 floatVector4:(union _GLKVector4)arg2;
- (id)initWithName:(id)arg1 floatVector3:(union _GLKVector3)arg2;
- (id)initWithName:(id)arg1 floatVector2:(union _GLKVector2)arg2;
- (id)initWithName:(id)arg1 texture:(id)arg2;
- (id)initWithName:(id)arg1 float:(float)arg2;
- (id)initWithName:(id)arg1;
- (id)description;

@end

__attribute__((visibility("hidden")))
@interface SKUniformInfo : NSObject
{
    unsigned long long seed;
    unsigned long long textureTarget;
    SKUniform *uniform;
}

@property(retain) SKUniform *uniform; // @synthesize uniform;
@property unsigned long long textureTarget; // @synthesize textureTarget;
@property unsigned long long seed; // @synthesize seed;
- (void).cxx_destruct;
- (id)init;

@end

@interface SKVelocityFieldNode : SKFieldNode
{
    SKTexture *_velocityTexture;
}

@property(retain, nonatomic) SKTexture *velocityTexture; // @synthesize velocityTexture=_velocityTexture;
- (void).cxx_destruct;
// Error parsing type for property velocity:
// Property attributes: T,N

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

@interface SKVideoNode : SKNode
{
    _Bool _isLoaded;
    NSString *_videoFileName;
    NSURL *_videoFileURL;
    AVPlayer *_player;
}

+ (id)videoNodeWithAVPlayer:(id)arg1;
+ (id)videoNodeWithVideoURL:(id)arg1;
+ (id)videoNodeWithVideoFileNamed:(id)arg1;
@property(retain, nonatomic) AVPlayer *_player; // @synthesize _player;
- (void).cxx_destruct;
@property(nonatomic) struct CGPoint anchorPoint;
@property(nonatomic) struct CGSize size;
- (void)pause;
- (void)play;
- (void)setPaused:(_Bool)arg1;
- (_Bool)isPaused;
- (id)initWithAVPlayer:(id)arg1;
- (id)initWithVideoFileNamed:(id)arg1;
- (id)initWithVideoURL:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SKView : UIView
{
    _Bool _allowsTransparency;
    _Bool _priorResignActivePausedState;
    unsigned long long _frameInterval;
    SKDisplayLink *_displayLink;
    NSObject<OS_dispatch_queue> *_updateQueue;
    double _timePreviousUpdate;
    SKLabelNode *_statsLabel;
    double _prevViewAspect;
    unsigned int _spritesRendered;
    unsigned int _spritesSubmitted;
    int _frames;
    unsigned int _prevSpritesRendered;
    unsigned int _prevSpritesRenderedSubmitted;
    double _timeBeginFrameCount;
    float _fps;
    EAGLContext *_context;
    unsigned int _colorRenderBuffer;
    unsigned int _depthStencilRenderBuffer;
    unsigned int _frameBuffer;
    _Bool _prefersLowPowerGPU;
    _Bool _usesAsyncUpdateQueue;
    _Bool _hasRenderedOnce;
    _Bool _hasRenderedForCurrentUpdate;
    _Bool _isInTransition;
    _Bool _disableInput;
    _Bool _mouseIsDown;
    SKNode *_nodeUnderCursor;
    float _transitionDuration;
    float _transitionTime;
    SKScene *_nextScene;
    SKScene *_scene;
    _Bool _paused;
    NSData *_spriteArrayHint;
    struct SKCRenderer *_renderer;
    NSMutableDictionary *_touchMap;
    float _prevBackingScaleFactor;
    NSObject<OS_dispatch_queue> *_renderQueue;
    _Bool showsFPS;
    _Bool showsNodeCount;
}

+ (Class)layerClass;
- (void).cxx_destruct;
- (void)layoutSubviews;
@property(readonly, nonatomic) SKScene *scene;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_setUpdateQueue:(id)arg1;
@property(nonatomic) double physicsDebugStrokeWidth;
- (id)initWithFrame:(struct CGRect)arg1 updateQueue:(id)arg2;
- (id)init;
- (id)_textureFromNode:(id)arg1 crop:(struct CGRect)arg2;
- (id)textureFromNode:(id)arg1 crop:(struct CGRect)arg2;
- (id)textureFromNode:(id)arg1;
@property(nonatomic) _Bool showsFields;
@property(nonatomic) _Bool _showsOutlineInterior;
@property(nonatomic) _Bool showsPhysics;
@property(nonatomic) _Bool showsDrawCount;
@property(nonatomic) _Bool showsQuadCount;
@property(nonatomic) _Bool showsNodeCount; // @synthesize showsNodeCount;
@property(nonatomic) _Bool showsFPS; // @synthesize showsFPS;
- (_Bool)showsSpriteBounds;
- (void)setShowsSpriteBounds:(_Bool)arg1;
@property(nonatomic) _Bool shouldCullNonVisibleNodes;
@property(readonly, nonatomic) struct CGSize pixelSize;
- (void)writeContentsToPNG:(id)arg1;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(nonatomic) long long frameInterval;
- (void)willMoveToSuperview:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)_renderContent;
- (void)renderContent;
- (void)renderCallback:(double)arg1;
- (void)presentScene:(id)arg1 transition:(id)arg2;
- (void)presentScene:(id)arg1;
- (void)_setupContext;
@property(retain) EAGLContext *_context;
- (void)displayLayer:(id)arg1;
@property(nonatomic) _Bool allowsTransparency;
- (_Bool)isOpaque;
- (void)remakeFramebuffer:(double)arg1;
- (void)CBApplicationDidBecomeActive;
- (void)CBApplicationWillResignActive;
- (void)_initialize;
- (void)dealloc;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 fromScene:(id)arg2;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toScene:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)stopRenderCallbacks;
- (void)startRenderCallbacks;
- (void)setUpRenderCallback;
- (void)bindOpenGLContext;
@property(nonatomic) _Bool _usesAsyncUpdateQueue;
@property(nonatomic) _Bool ignoresSiblingOrder;
@property(nonatomic, getter=isAsynchronous) _Bool asynchronous;
@property(readonly, nonatomic) int _spriteSubmitCount;
@property(readonly, nonatomic) int _spriteRenderCount;
@property(readonly, nonatomic) double _fps;
@property(readonly, nonatomic) SKScene *_nextScene;
@property(readonly, nonatomic) SKScene *_scene;
- (void)_update:(double)arg1;
- (void)_showAllStats;
@property(nonatomic) _Bool _showsTotalAreaRendered;
@property(nonatomic) _Bool _showsCulledNodesInNodeCount;
@property(nonatomic) _Bool _showsGPUStats;
@property(nonatomic) _Bool _showsCPUStats;
@property(nonatomic) _Bool _showsCoreAnimationFPS;
@property(nonatomic) _Bool _shouldCenterStats;
@property(nonatomic) _Bool _showsSpriteBounds;
@property(nonatomic) struct CGPoint _viewTranslation;
@property(nonatomic) double _viewScale;
- (void)renderToOpenGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2 scaleFactor:(double)arg3;
- (id)snapshot;

@end

@interface SKVortexFieldNode : SKFieldNode
{
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)_initialize;
- (id)_descriptionClassName;

@end

__attribute__((visibility("hidden")))
@interface SKWait : SKAction
{
    struct SKCWait *_mycaction;
}

+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)waitForDuration:(double)arg1;
- (id)reversedAction;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface UIColor (UIColor)
+ (id)colorWithComponentRGBA:(CDStruct_818bb265)arg1;
- (double)alpha;
- (double)blue;
- (double)green;
- (double)red;
- (CDStruct_818bb265)componentRGBA;
@end

@interface UITouch (SKNodeTouches)
- (struct CGPoint)previousLocationInNode:(id)arg1;
- (struct CGPoint)locationInNode:(id)arg1;
@end

