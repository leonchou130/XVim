//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreAuthentication.framework/CoreAuthentication
// UUID: 52277F5C-3A75-3380-91AF-CAC817F1B55E
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 68.1.5.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol LAUIDelegate
- (void)event:(long long)arg1 params:(NSDictionary *)arg2 reply:(void (^)(NSDictionary *, NSError *))arg3;
@end

@interface DelegateProxy : NSObject <LAUIDelegate>
{
    id <VRUIDelegate> _vruiDelegate;
}

- (void).cxx_destruct;
- (void)event:(long long)arg1 params:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (id)initWithVRUIDelegate:(id)arg1;

@end

@interface LALegacyHelper : NSObject
{
}

+ (id)vrErrorWithCode:(long long)arg1 andMessage:(id)arg2;
+ (id)vrErrorFromLAError:(id)arg1;
+ (id)uiDelegateFromVRUIDelegate:(id)arg1;
+ (id)_eventProcessingFromVREventFilter:(id)arg1 error:(id *)arg2;
+ (id)_eventProcessingFromVREventProcessing:(id)arg1 error:(id *)arg2;
+ (id)optionsFromVRHints:(id)arg1;
+ (id)optionsFromVRHints:(id)arg1 error:(id *)arg2;
+ (long long)resultFromVRResult:(id)arg1;
+ (long long)resultFromVRResult:(id)arg1 error:(id *)arg2;
+ (long long)eventFromVREvent:(id)arg1;
+ (long long)eventFromVREvent:(id)arg1 error:(id *)arg2;
+ (long long)optionFromVRHint:(id)arg1 error:(id *)arg2;
+ (long long)policyFromVRPolicy:(id)arg1;
+ (long long)policyFromVRPolicy:(id)arg1 error:(id *)arg2;

@end

@interface VRCredentialReference : NSObject
{
    LAClient *_client;
    id <LAUIDelegate> _delegateProxy;
    NSDictionary *_lastEvaluatePolicyResult;
    NSString *_creatorDisplayName;
    NSData *_credentialHandle;
}

@property(readonly) NSData *credentialHandle; // @synthesize credentialHandle=_credentialHandle;
@property(readonly) NSString *creatorDisplayName; // @synthesize creatorDisplayName=_creatorDisplayName;
- (void).cxx_destruct;
- (void)sendClientRequest:(id)arg1 params:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)resultForTag:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (id)resultForTag:(id)arg1;
- (_Bool)evaluateACL:(id)arg1 operation:(id)arg2 hints:(id)arg3 error:(id *)arg4;
- (void)evaluateACL:(id)arg1 operation:(id)arg2 hints:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (_Bool)evaluatePolicy:(id)arg1 hints:(id)arg2 error:(id *)arg3;
- (void)evaluatePolicy:(id)arg1 hints:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)invalidate;
- (_Bool)setupWithCredentialHandle:(id)arg1 error:(id *)arg2;
- (_Bool)setupNewReferenceWithError:(id *)arg1;
- (void)setupWithCredentialHandle:(id)arg1 domain:(id)arg2 uiDelegate:(id)arg3 reply:(CDUnknownBlockType)arg4;
- (void)setupWithCredentialHandle:(id)arg1 uiDelegate:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)setupWithCredentialHandle:(id)arg1 domain:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)setupWithCredentialHandle:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)setupNewReferenceWithReply:(CDUnknownBlockType)arg1;

@end

@interface VRCredReference : VRCredentialReference
{
}

@end

