//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CAMShutterButtonSpec {
    double outerRingDiameter;
    double outerRingStrokeWidth;
    double stopSquareSideLength;
    double stopSquareCornerRadius;
};

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

#pragma mark Typedef'd Structures

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    double _field5;
    int _field6;
} CDStruct_ebaa735e;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CameraKit.framework/CameraKit
// UUID: 3A2E2507-82CA-3C04-B01B-BF35A4A9C526
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 2369.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AVCaptureFileOutputRecordingDelegate <NSObject>
- (void)captureOutput:(AVCaptureFileOutput *)arg1 didFinishRecordingToOutputFileAtURL:(NSURL *)arg2 fromConnections:(NSArray *)arg3 error:(NSError *)arg4;

@optional
- (void)captureOutput:(AVCaptureFileOutput *)arg1 didStartRecordingToOutputFileAtURL:(NSURL *)arg2 fromConnections:(NSArray *)arg3;
@end

@protocol AVCaptureMetadataOutputObjectsDelegate <NSObject>

@optional
- (void)captureOutput:(AVCaptureOutput *)arg1 didOutputMetadataObjects:(NSArray *)arg2 fromConnection:(AVCaptureConnection *)arg3;
@end

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>

@optional
- (void)captureOutput:(AVCaptureOutput *)arg1 didDropSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(AVCaptureConnection *)arg3;
- (void)captureOutput:(AVCaptureOutput *)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(AVCaptureConnection *)arg3;
@end

@protocol BKSAccelerometerDelegate <NSObject>
- (void)accelerometer:(BKSAccelerometer *)arg1 didAccelerateWithTimeStamp:(double)arg2 x:(float)arg3 y:(float)arg4 z:(float)arg5 eventType:(int)arg6;

@optional
- (void)accelerometer:(BKSAccelerometer *)arg1 didChangeDeviceOrientation:(int)arg2;
@end

@protocol CAMBottomBarDelegate <NSObject>
- (_Bool)bottomBarShouldHideTimerButton:(CAMBottomBar *)arg1;
- (_Bool)bottomBarShouldHideFlipButton:(CAMBottomBar *)arg1;
- (_Bool)bottomBarShouldHideElapsedTimeView:(CAMBottomBar *)arg1;
- (_Bool)bottomBarShouldHideHDRButton:(CAMBottomBar *)arg1;
@end

@protocol CAMCameraRollObserver <NSObject, PHPhotoLibraryChangeObserver, PLCameraPreviewWellImageChangeObserver>
@end

@protocol CAMExpandableMenuButtonDelegate
- (void)expandMenuButton:(CAMExpandableMenuButton *)arg1 animated:(_Bool)arg2;
- (struct CGRect)expandedFrameForMenuButton:(CAMExpandableMenuButton *)arg1;
- (void)collapseMenuButton:(CAMExpandableMenuButton *)arg1 animated:(_Bool)arg2;
- (struct CGRect)collapsedFrameForMenuButton:(CAMExpandableMenuButton *)arg1;
@end

@protocol CAMModeDialDataSource <NSObject>
- (NSString *)modeDial:(CAMModeDial *)arg1 titleForItemAtIndex:(unsigned long long)arg2;
- (long long)numberOfItemsInModeDial:(CAMModeDial *)arg1;
@end

@protocol CAMNebulaDaemonClientProtocol <NSObject>
- (void)forceStopCaptureWithReasons:(long long)arg1;
@end

@protocol CAMNebulaDaemonProtocol <CAMNebulaDaemonProtocolLimited>
- (void)stopNebulaWithUUID:(NSString *)arg1;
- (void)finishCaptureForNebulaWithUUID:(NSString *)arg1;
- (void)updateNebulaWithUUID:(NSString *)arg1;
- (void)resumeNebulaWithUUID:(NSString *)arg1;
- (void)startNebulaWithUUID:(NSString *)arg1;
@end

@protocol CAMNebulaDaemonProtocolLimited <NSObject>
- (void)updatePendingWorkFromDiskForceEndLastSession:(_Bool)arg1;
@end

@protocol CAMStillImageCaptureRequestDelegate <NSObject>

@optional
- (void)captureController:(CAMCaptureController *)arg1 didFinishWriteForResponse:(CAMStillImageCaptureResponse *)arg2 forStillImageRequest:(CAMStillImageCaptureRequest *)arg3 error:(NSError *)arg4;
- (void)captureController:(CAMCaptureController *)arg1 didCompleteResponse:(CAMStillImageCaptureResponse *)arg2 forStillImageRequest:(CAMStillImageCaptureRequest *)arg3 error:(NSError *)arg4;
- (void)captureController:(CAMCaptureController *)arg1 didGenerateResponse:(CAMStillImageCaptureResponse *)arg2 forStillImageRequest:(CAMStillImageCaptureRequest *)arg3 error:(NSError *)arg4;
- (void)captureController:(CAMCaptureController *)arg1 didCaptureStillImageForRequest:(CAMStillImageCaptureRequest *)arg2;
- (void)captureController:(CAMCaptureController *)arg1 willCaptureStillImageForRequest:(CAMStillImageCaptureRequest *)arg2;
@end

@protocol CAMTimerButtonDelegate <NSObject>
- (double)timeIntervalForDuration:(long long)arg1;
@end

@protocol CAMTopBarDelegate <NSObject>
- (_Bool)topBarShouldHideTimerButton:(CAMTopBar *)arg1;
- (_Bool)topBarShouldHideFlipButton:(CAMTopBar *)arg1;
- (_Bool)topBarShouldHideElapsedTimeView:(CAMTopBar *)arg1;
- (_Bool)topBarShouldHideHDRButton:(CAMTopBar *)arg1;
- (_Bool)topBarShouldHideFlashButton:(CAMTopBar *)arg1;
@end

@protocol CAMZoomSliderDelegate <NSObject>
- (void)didHideZoomSlider:(CAMZoomSlider *)arg1;
- (void)didShowZoomSlider:(CAMZoomSlider *)arg1;
- (void)zoomSliderDidEndAutozooming:(CAMZoomSlider *)arg1;
- (void)zoomSliderDidBeginAutozooming:(CAMZoomSlider *)arg1;
@end

@protocol CLLocationManagerDelegate <NSObject>

@optional
- (void)locationManager:(CLLocationManager *)arg1 didVisit:(CLVisit *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didFinishDeferredUpdatesWithError:(NSError *)arg2;
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didStartMonitoringForRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(CLLocationManager *)arg1 monitoringDidFailForRegion:(CLRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didFailWithError:(NSError *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didExitRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didEnterRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 rangingBeaconsDidFailForRegion:(CLBeaconRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didRangeBeacons:(NSArray *)arg2 inRegion:(CLBeaconRegion *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didDetermineState:(long long)arg2 forRegion:(CLRegion *)arg3;
- (_Bool)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateHeading:(CLHeading *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateLocations:(NSArray *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateToLocation:(CLLocation *)arg2 fromLocation:(CLLocation *)arg3;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol PHPhotoLibraryChangeObserver <NSObject>
- (void)photoLibraryDidChange:(PHChange *)arg1;
@end

@protocol PLCameraControllerDelegate <NSObject>

@optional
- (void)captureController:(CAMCaptureController *)arg1 didOutputPanoramaCaptureParameters:(CAMPanoramaCaptureParameters *)arg2;
- (void)captureControllerPanoramaConfigurationChanged:(CAMCaptureController *)arg1;
- (void)captureController:(CAMCaptureController *)arg1 didFinishPanoramaRequest:(CAMPanoramaCaptureRequest *)arg2 withResponse:(CAMStillImageCaptureResponse *)arg3;
- (void)captureController:(CAMCaptureController *)arg1 didStopProcessingForPanoramaRequest:(CAMPanoramaCaptureRequest *)arg2;
- (void)captureController:(CAMCaptureController *)arg1 didStartProcessingForPanoramaRequest:(CAMPanoramaCaptureRequest *)arg2;
- (void)captureController:(CAMCaptureController *)arg1 didStopCapturingForPanoramaRequest:(CAMPanoramaCaptureRequest *)arg2;
- (void)captureController:(CAMCaptureController *)arg1 didStartCapturingForPanoramaRequest:(CAMPanoramaCaptureRequest *)arg2;
- (void)captureController:(CAMCaptureController *)arg1 didFinishRecordingForVideoRequest:(CAMVideoCaptureRequest *)arg2 withResponse:(CAMVideoCaptureResponse *)arg3;
- (void)captureController:(CAMCaptureController *)arg1 didStopRecordingForVideoRequest:(CAMVideoCaptureRequest *)arg2;
- (void)captureController:(CAMCaptureController *)arg1 didStartRecordingForVideoRequest:(CAMVideoCaptureRequest *)arg2;
- (void)cameraControllerDidChangeHDRSuggestion:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 didFinishTransitionToShowEffectsGrid:(_Bool)arg2;
- (void)cameraController:(CAMCaptureController *)arg1 didStartTransitionToShowEffectsGrid:(_Bool)arg2 animated:(_Bool)arg3;
- (void)cameraController:(CAMCaptureController *)arg1 willTransitionToShowEffectsGrid:(_Bool)arg2;
- (void)cameraControllerDidChangeEffectFilterIndex:(CAMCaptureController *)arg1;
- (void)cameraControllerTorchAvailabilityChanged:(CAMCaptureController *)arg1;
- (void)cameraControllerTorchActiveChanged:(CAMCaptureController *)arg1;
- (void)cameraControllerFlashWillFireChanged:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 videoZoomFactorDidChange:(double)arg2;
- (void)cameraController:(CAMCaptureController *)arg1 faceMetadataDidChange:(NSArray *)arg2;
- (void)cameraControllerDidChangeExposureTargetBias:(CAMCaptureController *)arg1;
- (void)cameraControllerDidChangeUserLockedExposure:(CAMCaptureController *)arg1;
- (void)cameraControllerDidChangeUserLockedFocus:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 willResetFocus:(_Bool)arg2 exposure:(_Bool)arg3;
- (void)cameraControllerExposureDidEnd:(CAMCaptureController *)arg1;
- (void)cameraControllerExposureDidStart:(CAMCaptureController *)arg1;
- (void)cameraControllerFocusDidEnd:(CAMCaptureController *)arg1;
- (void)cameraControllerFocusDidStart:(CAMCaptureController *)arg1;
- (void)cameraControllerDidChangeExposureMode:(CAMCaptureController *)arg1;
- (void)cameraControllerDidChangeFocusMode:(CAMCaptureController *)arg1;
- (void)cameraControllerVideoCaptureDidStop:(CAMCaptureController *)arg1 withReason:(int)arg2 userInfo:(NSDictionary *)arg3;
- (void)cameraControllerDidStopVideoCapture:(CAMCaptureController *)arg1;
- (void)cameraControllerVideoCaptureDidStart:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 capturedPanorama:(NSDictionary *)arg2 error:(NSError *)arg3;
- (void)cameraControllerPanoramaDidStopProcessing:(CAMCaptureController *)arg1;
- (void)cameraControllerPanoramaWillStartProcessing:(CAMCaptureController *)arg1;
- (void)cameraControllerWillStopPanoramaCapture:(CAMCaptureController *)arg1;
- (void)cameraControllerDidStartPanoramaCapture:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 didReceivePanoramaIssue:(int)arg2;
- (void)cameraController:(CAMCaptureController *)arg1 didUpdatePanoramaPreview:(NSDictionary *)arg2;
- (void)cameraControllerDidChangePanoramaConfiguration:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 didChangeCaptureAbility:(_Bool)arg2;
- (void)cameraController:(CAMCaptureController *)arg1 capturedPhoto:(NSDictionary *)arg2 error:(NSError *)arg3;
- (void)cameraControllerDidTakePhoto:(CAMCaptureController *)arg1;
- (void)cameraControllerWillTakePhoto:(CAMCaptureController *)arg1;
- (void)cameraControllerModeDidChange:(CAMCaptureController *)arg1;
- (void)cameraController:(CAMCaptureController *)arg1 willChangeToMode:(long long)arg2 device:(long long)arg3;
- (void)cameraController:(CAMCaptureController *)arg1 cleanApertureDidChange:(struct CGRect)arg2;
- (void)cameraControllerServerDied:(CAMCaptureController *)arg1;
- (void)cameraControllerSessionInterruptionEnded:(CAMCaptureController *)arg1;
- (void)cameraControllerSessionWasInterrupted:(CAMCaptureController *)arg1;
- (void)cameraControllerSessionDidStop:(CAMCaptureController *)arg1;
- (void)cameraControllerWillStopSession:(CAMCaptureController *)arg1;
- (void)cameraControllerDidStopSession:(CAMCaptureController *)arg1;
- (void)cameraControllerSessionDidStart:(CAMCaptureController *)arg1;
- (void)cameraControllerPreviewDidStart:(CAMCaptureController *)arg1;
- (void)cameraControllerWillStartPreview:(CAMCaptureController *)arg1;
- (void)cameraControllerDidStartSession:(CAMCaptureController *)arg1;
- (void)cameraControllerDidSetupSession:(CAMCaptureController *)arg1;
@end

@protocol PLCameraEffectsRendererDelegate <NSObject>
- (void)cameraEffectsRenderer:(CAMEffectsRenderer *)arg1 didFinishTransitionToShowGrid:(_Bool)arg2;
- (void)cameraEffectsRenderer:(CAMEffectsRenderer *)arg1 didStartTransitionToShowGrid:(_Bool)arg2 animated:(_Bool)arg3;
- (void)cameraEffectsRenderer:(CAMEffectsRenderer *)arg1 willTransitionToShowGrid:(_Bool)arg2;
- (void)cameraEffectsRenderer:(CAMEffectsRenderer *)arg1 requestsVideoDataOutputEnabled:(_Bool)arg2;
- (void)cameraEffectsRenderer:(CAMEffectsRenderer *)arg1 requestsPreviewLayerEnabled:(_Bool)arg2;
- (void)cameraEffectsRendererDidStartPreview:(CAMEffectsRenderer *)arg1;
@end

@protocol PLCameraPanoramaViewDelegate <NSObject>

@optional
- (void)panoramaView:(CAMPanoramaView *)arg1 didChangeDirection:(int)arg2;
@end

@protocol PLCameraPreviewWellImageChangeObserver
- (void)cameraPreviewWellImageDidChange:(PLCameraPreviewImageWellChangeNotification *)arg1;
@end

@protocol PLDismissableViewController <NSObject>
- (_Bool)prepareForDismissingForced:(_Bool)arg1;
@end

@protocol PLPhotoBrowserControllerDelegate <NSObject>

@optional
- (void)photoBrowserControllerDidEndPaging:(PLPhotoBrowserController *)arg1;
- (void)photoBrowserControllerWillBeginPaging:(PLPhotoBrowserController *)arg1;
@end

@protocol UIAccelerometerDelegate <NSObject>

@optional
- (void)accelerometer:(UIAccelerometer *)arg1 didAccelerate:(UIAcceleration *)arg2;
@end

@protocol UIAlertViewDelegate <NSObject>

@optional
- (_Bool)alertViewShouldEnableFirstOtherButton:(UIAlertView *)arg1;
- (void)alertView:(UIAlertView *)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)alertView:(UIAlertView *)arg1 willDismissWithButtonIndex:(long long)arg2;
- (void)didPresentAlertView:(UIAlertView *)arg1;
- (void)willPresentAlertView:(UIAlertView *)arg1;
- (void)alertViewCancel:(UIAlertView *)arg1;
- (void)alertView:(UIAlertView *)arg1 clickedButtonAtIndex:(long long)arg2;
@end

@protocol UICollectionViewDataSource <NSObject>
- (UICollectionViewCell *)collectionView:(UICollectionView *)arg1 cellForItemAtIndexPath:(NSIndexPath *)arg2;
- (long long)collectionView:(UICollectionView *)arg1 numberOfItemsInSection:(long long)arg2;

@optional
- (UICollectionReusableView *)collectionView:(UICollectionView *)arg1 viewForSupplementaryElementOfKind:(NSString *)arg2 atIndexPath:(NSIndexPath *)arg3;
- (long long)numberOfSectionsInCollectionView:(UICollectionView *)arg1;
@end

@protocol UICollectionViewDelegate <UIScrollViewDelegate>

@optional
- (UICollectionViewTransitionLayout *)collectionView:(UICollectionView *)arg1 transitionLayoutForOldLayout:(UICollectionViewLayout *)arg2 newLayout:(UICollectionViewLayout *)arg3;
- (void)collectionView:(UICollectionView *)arg1 performAction:(SEL)arg2 forItemAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)collectionView:(UICollectionView *)arg1 canPerformAction:(SEL)arg2 forItemAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldShowMenuForItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didEndDisplayingSupplementaryView:(UICollectionReusableView *)arg2 forElementOfKind:(NSString *)arg3 atIndexPath:(NSIndexPath *)arg4;
- (void)collectionView:(UICollectionView *)arg1 didEndDisplayingCell:(UICollectionViewCell *)arg2 forItemAtIndexPath:(NSIndexPath *)arg3;
- (void)collectionView:(UICollectionView *)arg1 willDisplaySupplementaryView:(UICollectionReusableView *)arg2 forElementKind:(NSString *)arg3 atIndexPath:(NSIndexPath *)arg4;
- (void)collectionView:(UICollectionView *)arg1 willDisplayCell:(UICollectionViewCell *)arg2 forItemAtIndexPath:(NSIndexPath *)arg3;
- (void)collectionView:(UICollectionView *)arg1 didDeselectItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didSelectItemAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldDeselectItemAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldSelectItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didUnhighlightItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didHighlightItemAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldHighlightItemAtIndexPath:(NSIndexPath *)arg2;
@end

@protocol UIGestureRecognizerDelegate <NSObject>

@optional
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldReceiveTouch:(UITouch *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizerShouldBegin:(UIGestureRecognizer *)arg1;
@end

@protocol UINavigationControllerDelegate <NSObject>

@optional
- (id <UIViewControllerAnimatedTransitioning>)navigationController:(UINavigationController *)arg1 animationControllerForOperation:(long long)arg2 fromViewController:(UIViewController *)arg3 toViewController:(UIViewController *)arg4;
- (id <UIViewControllerInteractiveTransitioning>)navigationController:(UINavigationController *)arg1 interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning>)arg2;
- (long long)navigationControllerPreferredInterfaceOrientationForPresentation:(UINavigationController *)arg1;
- (unsigned long long)navigationControllerSupportedInterfaceOrientations:(UINavigationController *)arg1;
- (void)navigationController:(UINavigationController *)arg1 didShowViewController:(UIViewController *)arg2 animated:(_Bool)arg3;
- (void)navigationController:(UINavigationController *)arg1 willShowViewController:(UIViewController *)arg2 animated:(_Bool)arg3;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol _UIBackdropViewObserver
- (void)backdropViewDidChange:(_UIBackdropView *)arg1;
@end

@interface CAMAnimationDelegate : NSObject
{
    CDUnknownBlockType _completion;
    CDUnknownBlockType _start;
}

@property(copy, nonatomic) CDUnknownBlockType start; // @synthesize start=_start;
@property(copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
- (void).cxx_destruct;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (void)animationDidStart:(id)arg1;

@end

@interface CAMAnimationHelper : NSObject
{
}

+ (id)_animationWithKeyPath:(id)arg1;
+ (void)animateLayer:(id)arg1 toFrame:(struct CGRect)arg2 fromCurrentState:(_Bool)arg3;

@end

@interface CAMCameraSpec : NSObject
{
}

+ (id)specForCurrentPlatform;
+ (id)specForPad;
+ (id)specForPhone;
@property(readonly, nonatomic) _Bool shouldCreateTimerButton;
@property(readonly, nonatomic) _Bool shouldCreateSlalomIndicator;
@property(readonly, nonatomic) _Bool shouldCreateAvalancheIndicator;
@property(readonly, nonatomic) _Bool shouldCreateZoomSlider;
@property(readonly, nonatomic) _Bool shouldCreatePanoramaView;
@property(readonly, nonatomic) _Bool shouldCreateHDRButton;
@property(readonly, nonatomic) _Bool shouldCreateModeDial;
@property(readonly, nonatomic) _Bool shouldCreateFiltersButton;
@property(readonly, nonatomic) _Bool shouldCreateShutterButton;
@property(readonly, nonatomic) _Bool shouldCreateImageWell;
@property(readonly, nonatomic) _Bool shouldCreateStillDuringVideo;
@property(readonly, nonatomic) _Bool shouldCreateFlipButton;
@property(readonly, nonatomic) _Bool shouldCreateElapsedTimeView;
@property(readonly, nonatomic) _Bool shouldCreateFlashButton;
@property(readonly, nonatomic) _Bool shouldCreateTopBar;
@property(readonly, nonatomic) _Bool shouldCreateBottomBar;
@property(readonly, nonatomic) long long modeDialOrientation;
- (struct CGRect)initialFrameForOrientation:(long long)arg1;
@property(readonly, nonatomic) long long bottomBarOrientation;
- (int)rotationStyle;
- (_Bool)isPad;
- (_Bool)isPhone;
- (_Bool)isCameraApp;

@end

@interface CAMApplicationSpec : CAMCameraSpec
{
}

+ (id)specForPad;
+ (id)specForPhone;

@end

@interface CAMCameraViewController : UIViewController
{
    CAMCameraView *_cameraView;
}

- (void).cxx_destruct;
- (void)_getRotationContentSettings:(CDStruct_ebaa735e *)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)dealloc;
- (_Bool)_displaysFullScreen;

@end

@interface CAMApplicationViewController : CAMCameraViewController <CAMCameraRollObserver, PLPhotoBrowserControllerDelegate, UINavigationControllerDelegate>
{
    CDUnknownBlockType _previewButtonAction;
    CDUnknownBlockType _doneButtonAction;
    NSDictionary *_configuration;
    id <PLApplicationCameraViewControllerDelegate> _delegate;
    _Bool _usesSessionAlbum;
    double _sessionStartTime;
    CAMKeepDaemonAliveAssertion *_keepDaemonAliveAssertion;
    _Bool _isReadyToTest;
    long long _testPictureCounter;
    long long _testPicturesReceivedCounter;
    double _testPictureRepeatDelay;
    _Bool __shouldShowCameraRoll;
    _Bool __dismissingCameraRoll;
    _Bool __dismissingCameraRollForSuspension;
    _Bool __shouldRetryDismissal;
    _Bool __handlesVolumeButtons;
    _Bool __ignoringVolumeButtons;
    _Bool __hasLockedSinceLastConfigurationChange;
    _Bool __didApplyConfigurationToCameraView;
    int __lockToResetToken;
    UIViewController *__cameraRollViewController;
    UIView *__rootContainerView;
    UIView *__autorotationCorrectionView;
    id <NSObject> __cameraRollNotificationToken;
}

@property(readonly, nonatomic) id <NSObject> _cameraRollNotificationToken; // @synthesize _cameraRollNotificationToken=__cameraRollNotificationToken;
@property(nonatomic) _Bool _didApplyConfigurationToCameraView; // @synthesize _didApplyConfigurationToCameraView=__didApplyConfigurationToCameraView;
@property(readonly, nonatomic) int _lockToResetToken; // @synthesize _lockToResetToken=__lockToResetToken;
@property(readonly, nonatomic) UIView *_autorotationCorrectionView; // @synthesize _autorotationCorrectionView=__autorotationCorrectionView;
@property(readonly, nonatomic) UIView *_rootContainerView; // @synthesize _rootContainerView=__rootContainerView;
@property(nonatomic, setter=_setHasLockedSinceLastConfigurationChange:) _Bool _hasLockedSinceLastConfigurationChange; // @synthesize _hasLockedSinceLastConfigurationChange=__hasLockedSinceLastConfigurationChange;
@property(nonatomic, setter=_setIgnoringVolumeButtons:) _Bool _ignoringVolumeButtons; // @synthesize _ignoringVolumeButtons=__ignoringVolumeButtons;
@property(nonatomic, setter=_setHandlesVolumeButtons:) _Bool _handlesVolumeButtons; // @synthesize _handlesVolumeButtons=__handlesVolumeButtons;
@property(readonly, nonatomic) UIViewController *_cameraRollViewController; // @synthesize _cameraRollViewController=__cameraRollViewController;
@property(readonly, nonatomic) _Bool _shouldRetryDismissal; // @synthesize _shouldRetryDismissal=__shouldRetryDismissal;
@property(nonatomic, getter=_isDismissingCameraRollForSuspension, setter=_setDismissingCameraRollForSuspension:) _Bool _dismissingCameraRollForSuspension; // @synthesize _dismissingCameraRollForSuspension=__dismissingCameraRollForSuspension;
@property(nonatomic, getter=_isDismissingCameraRoll, setter=_setDismissingCameraRoll:) _Bool _dismissingCameraRoll; // @synthesize _dismissingCameraRoll=__dismissingCameraRoll;
@property(nonatomic, setter=_setShouldShowCameraRoll:) _Bool _shouldShowCameraRoll; // @synthesize _shouldShowCameraRoll=__shouldShowCameraRoll;
@property(nonatomic) id <PLApplicationCameraViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy, nonatomic) CDUnknownBlockType previewButtonAction; // @synthesize previewButtonAction=_previewButtonAction;
@property(nonatomic) double testPictureRepeatDelay; // @synthesize testPictureRepeatDelay=_testPictureRepeatDelay;
@property(nonatomic) long long testPictureCounter; // @synthesize testPictureCounter=_testPictureCounter;
- (void).cxx_destruct;
- (void)setUsesSessionAlbum:(_Bool)arg1;
- (void)_previewStarted:(id)arg1;
- (void)preferencesDidChange;
- (void)photoBrowserControllerDidEndPaging:(id)arg1;
- (void)photoBrowserControllerWillBeginPaging:(id)arg1;
- (void)navigationController:(id)arg1 didShowViewController:(id)arg2 animated:(_Bool)arg3;
- (void)_teardownLockToResetNotifications;
- (void)_setupLockToResetNotifications;
- (void)_setWantsVolumeButtonEvents:(_Bool)arg1;
- (void)_updateVolumeButtonEventsAbility;
- (void)_updateCameraRollSession;
- (void)dismissCameraRollAnimated:(_Bool)arg1 forSuspension:(_Bool)arg2;
- (void)dismissCameraRoll:(id)arg1;
- (id)_currentPhotoBrowser;
- (void)_makeViewControllersPerformSelector:(SEL)arg1 withNotification:(id)arg2;
- (void)_cameraRollReload:(id)arg1;
- (void)_refreshCameraUIForAlbumChange;
- (void)photoLibraryDidChange:(id)arg1;
- (void)_handleVolumeButtonUp;
- (void)_handleVolumeButtonDown;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)cameraPreviewWellImageDidChange:(id)arg1;
- (_Bool)_shouldResumeTorch;
- (id)_dictionaryFromPackedArray:(id)arg1;
- (id)_packedArrayFromDictionary:(id)arg1;
- (void)_saveConfiguration;
- (id)_stringForTimerDuration:(long long)arg1;
- (id)_stringForHDRMode:(int)arg1;
- (void)_applyConfiguration;
- (void)_defaultCameraDevice:(id *)arg1 cameraMode:(id *)arg2;
- (_Bool)_shouldResetMode:(id)arg1;
- (void)prepareForDefaultImageSnapshot;
- (void)animateBlurForSuspension;
- (_Bool)shouldAnimateBlurForSuspension;
- (void)stopCameraPreviewAnimated:(_Bool)arg1;
- (void)_startCameraPreviewWithPreviewStartedBlock:(CDUnknownBlockType)arg1;
- (_Bool)showingCameraPreview;
- (void)reloadAlbumNavigationController:(id)arg1 withCameraRoll:(id)arg2;
- (void)prepareAlbumNavigationControllerForReuse:(id)arg1 withCameraRoll:(id)arg2;
- (id)newAlbumNavigationControllerForCameraRoll:(id)arg1;
- (_Bool)_cameraIsRunning;
- (void)_kickoffCameraControllerPreview;
- (void)cameraViewFinishedTakingPicture:(id)arg1;
- (void)takePicture;
- (void)startPictureTest;
- (void)_startPictureTestAfterSeconds:(double)arg1;
- (void)testSetAutofocusDisabled:(_Bool)arg1;
- (void)testSetHDROn:(_Bool)arg1;
- (void)cameraViewDidFinishUnblurringForPreview:(id)arg1;
- (void)cameraViewFinishedSuspensionBlur:(id)arg1;
- (_Bool)cameraViewShouldShowPreviewAfterSelection:(id)arg1;
- (void)presentCameraRollAboveCameraView:(id)arg1;
- (void)viewWillTransitionToSize:(struct CGSize)arg1 withTransitionCoordinator:(id)arg2;
- (void)_applyAutorotationCorrectingTransformForOrientation:(long long)arg1;
- (struct CGAffineTransform)_autorotationCorrectingTransformFromOrientation:(long long)arg1;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (void)_getRotationContentSettings:(CDStruct_ebaa735e *)arg1;
- (void)applicationDidResume;
- (void)applicationWillSuspend;
- (void)viewWillLayoutSubviews;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)prepareForSuspension;
- (void)viewWillShowForLaunch;
- (void)loadView;
- (void)dealloc;
- (id)init;
- (id)initWithSessionID:(id)arg1 usesCameraLocationBundleID:(_Bool)arg2 startPreviewImmediately:(_Bool)arg3;
- (id)initWithSessionID:(id)arg1 startPreviewImmediately:(_Bool)arg2;
- (void)stopCameraPreview;
- (void)setSessionID:(id)arg1;
- (void)saveCameraConfiguration;
- (void)startCameraPreviewWithSavedConfiguration;
- (void)startCameraPreview;
- (void)dismissCameraRollForSuspension;
- (void)prepareForDismissal;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMAssetSaver : NSObject
{
    NSMutableDictionary *__inflightAssets;
    NSMutableArray *__pendingImageJobs;
    NSMutableDictionary *__inProgressAvalancheFileDescriptors;
    NSMutableDictionary *__inProgressNebulaFileDescriptors;
    NSMutableArray *__transientStillImageResponses;
}

+ (id)takingNebulaIndicatorFilePath;
+ (id)takingVideoIndicatorFilePath;
+ (id)takingPhotoIndicatorFilePath;
+ (void)resetNebulaCaptureIsBusy;
+ (void)setNebulaCaptureIsBusy:(_Bool)arg1;
+ (void)setTakingPhotoIsBusy:(_Bool)arg1;
+ (void)setVideoCaptureIsBusy:(_Bool)arg1;
+ (id)sharedAssetSaver;
@property(readonly, nonatomic) NSMutableArray *_transientStillImageResponses; // @synthesize _transientStillImageResponses=__transientStillImageResponses;
@property(retain, nonatomic) NSMutableDictionary *_inProgressNebulaFileDescriptors; // @synthesize _inProgressNebulaFileDescriptors=__inProgressNebulaFileDescriptors;
@property(retain, nonatomic) NSMutableDictionary *_inProgressAvalancheFileDescriptors; // @synthesize _inProgressAvalancheFileDescriptors=__inProgressAvalancheFileDescriptors;
@property(retain, nonatomic) NSMutableArray *_pendingImageJobs; // @synthesize _pendingImageJobs=__pendingImageJobs;
@property(readonly, nonatomic) NSMutableDictionary *_inflightAssets; // @synthesize _inflightAssets=__inflightAssets;
- (void).cxx_destruct;
- (id)_saveIsolationQueue;
- (void)setAvalancheInProgress:(_Bool)arg1 uuid:(id)arg2;
- (void)setNebulaInProgress:(_Bool)arg1 uuid:(id)arg2;
- (void)resetAllNebulaProgress;
- (void)_setIsTakingPhoto:(_Bool)arg1;
- (void)dropAllTransientResponses;
- (void)saveAllTransientResponses;
- (id)enqueueTransientResponse:(id)arg1 requestEnqueuedBlock:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)saveAvalancheWithUUID:(id)arg1 allAssetUUIDs:(id)arg2 bestAssetUUIDs:(id)arg3 stackAssetUUID:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)batchSavePendingAssetJobs;
- (void)queueJobDictionary:(id)arg1 asset:(id)arg2 requestEnqueuedBlock:(CDUnknownBlockType)arg3 completionBlock:(CDUnknownBlockType)arg4 imageSurface:(void *)arg5 previewImageSurface:(void *)arg6 transient:(_Bool)arg7;
- (void)queueJobDictionary:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (id)_addInflightAssetWithPath:(id)arg1 thumbnailImage:(id)arg2 assetUUID:(id)arg3 metadata:(id)arg4 assetType:(short)arg5 kind:(short)arg6 kindSubtype:(short)arg7 avalancheUUID:(id)arg8 completionHandler:(CDUnknownBlockType)arg9;
- (id)_addInflightAssetWithPath:(id)arg1 withUUID:(id)arg2 avalancheUUID:(id)arg3;
- (id)saveVideoCaptureResponse:(id)arg1 assetUUID:(id)arg2 jobTypeOverride:(id)arg3 requestEnqueuedBlock:(CDUnknownBlockType)arg4;
- (void)saveCameraVideoAtPath:(id)arg1 withMetadata:(id)arg2 thumbnailImage:(id)arg3 createPreviewWellImage:(_Bool)arg4 isSlalom:(_Bool)arg5 videoHandler:(CDUnknownBlockType)arg6 requestEnqueuedBlock:(CDUnknownBlockType)arg7 completionBlock:(CDUnknownBlockType)arg8;
- (id)saveCameraImage:(id)arg1 metadata:(id)arg2 additionalProperties:(id)arg3 diagnostics:(id)arg4 previouslyPendingAsset:(id)arg5 requestEnqueuedBlock:(CDUnknownBlockType)arg6;
- (void)saveCameraImage:(id)arg1 metadata:(id)arg2 additionalProperties:(id)arg3 requestEnqueuedBlock:(CDUnknownBlockType)arg4;
- (void)saveTimelapseCaptureResponse:(id)arg1 requestEnqueuedBlock:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (id)saveStillImageCaptureResponse:(id)arg1 requestEnqueuedBlock:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (id)_imageJobForStillImageCaptureResponse:(id)arg1;
- (void)requestAssetSavingAccess;
- (id)init;

@end

@interface CAMAvalanche : NSObject
{
}

+ (id)updatePropertiesForAssets:(id)arg1 autoPicks:(id)arg2 stackAsset:(id)arg3 userFavorites:(id)arg4 dissolveBurst:(_Bool)arg5;

@end

@interface CAMCaptureService : NSObject
{
}

- (void)responseWasCompleted:(id)arg1 error:(id)arg2;
- (void)responseWasGenerated:(id)arg1 error:(id)arg2;
- (void)requestWasEnqueued:(id)arg1;

@end

@interface CAMAvalancheCaptureService : CAMCaptureService
{
    _Bool _supportsAvalancheAnalysis;
    NSArray *_recentFaceMetadata;
    NSMutableDictionary *__avalancheSessionsByUUID;
    CAMAvalancheSession *__activeAvalancheSession;
    NSCountedSet *__inflightRequestsByUUID;
    NSMutableSet *__avalancheSessionsToBeFinalizedAfterNextResponseCompletion;
    double __avalancheStartTime;
}

@property(readonly, nonatomic) double _avalancheStartTime; // @synthesize _avalancheStartTime=__avalancheStartTime;
@property(readonly, nonatomic) NSMutableSet *_avalancheSessionsToBeFinalizedAfterNextResponseCompletion; // @synthesize _avalancheSessionsToBeFinalizedAfterNextResponseCompletion=__avalancheSessionsToBeFinalizedAfterNextResponseCompletion;
@property(readonly, nonatomic) NSCountedSet *_inflightRequestsByUUID; // @synthesize _inflightRequestsByUUID=__inflightRequestsByUUID;
@property(readonly, nonatomic) CAMAvalancheSession *_activeAvalancheSession; // @synthesize _activeAvalancheSession=__activeAvalancheSession;
@property(readonly, nonatomic) NSMutableDictionary *_avalancheSessionsByUUID; // @synthesize _avalancheSessionsByUUID=__avalancheSessionsByUUID;
@property(copy, nonatomic) NSArray *recentFaceMetadata; // @synthesize recentFaceMetadata=_recentFaceMetadata;
@property(nonatomic) _Bool supportsAvalancheAnalysis; // @synthesize supportsAvalancheAnalysis=_supportsAvalancheAnalysis;
- (void).cxx_destruct;
- (void)responseWasCompleted:(id)arg1 error:(id)arg2;
- (void)responseWasGenerated:(id)arg1 error:(id)arg2;
- (void)requestWasEnqueued:(id)arg1;
- (void)_finalizeAndBeginNewAvalancheSession;
- (void)_cancelAvalancheSession:(id)arg1;
- (void)_finalizeAvalancheSession:(id)arg1;
- (void)_ensureValidAvalancheSession;
- (_Bool)_canFinishCapturingActiveAvalanche;
- (long long)numberOfPhotos;
- (_Bool)canContinueAvalancheCapture;
- (void)cancelAvalancheCapture;
- (void)finishAvalancheCapture;
- (void)startAvalancheCapture;
- (id)init;

@end

@interface CAMAvalancheIndicatorView : UIView
{
    _Bool _showsWhenStarted;
    UIView *__backgroundView;
    UILabel *__countLabel;
    long long __numberOfPhotos;
}

@property(readonly, nonatomic) long long _numberOfPhotos; // @synthesize _numberOfPhotos=__numberOfPhotos;
@property(readonly, nonatomic) UILabel *_countLabel; // @synthesize _countLabel=__countLabel;
@property(readonly, nonatomic) UIView *_backgroundView; // @synthesize _backgroundView=__backgroundView;
@property(nonatomic) _Bool showsWhenStarted; // @synthesize showsWhenStarted=_showsWhenStarted;
- (void).cxx_destruct;
- (void)_updateCountLabelWithNumberOfPhotos;
- (void)_performCaptureAnimation;
- (void)reset;
- (void)incrementWithCaptureAnimation:(_Bool)arg1;
- (void)finishIncrementingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)layoutSubviews;
- (struct CGSize)intrinsicContentSize;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMAvalancheIndicatorViewInitialization;

@end

@interface CAMAvalancheSession : NSObject
{
    long long _type;
    id <CAMAvalancheSessionDelegate> _delegate;
    long long _state;
    NSString *_uuid;
    unsigned long long _numberOfPhotos;
    CAMInflightAsset *_possibleAvalancheAsset;
    NSMutableDictionary *__assets;
    NSDate *__expirationDate;
    NSObject<OS_dispatch_source> *__expirationTimer;
    NSObject<OS_dispatch_queue> *__expirationQueue;
    CIBurstImageSet *__burstImageSet;
}

@property(readonly, nonatomic) CIBurstImageSet *_burstImageSet; // @synthesize _burstImageSet=__burstImageSet;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_expirationQueue; // @synthesize _expirationQueue=__expirationQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_source> *_expirationTimer; // @synthesize _expirationTimer=__expirationTimer;
@property(retain, nonatomic, setter=_setExpirationDate:) NSDate *_expirationDate; // @synthesize _expirationDate=__expirationDate;
@property(readonly, nonatomic) NSMutableDictionary *_assets; // @synthesize _assets=__assets;
- (void)_setPossibleAvalancheAsset:(id)arg1;
@property(retain, nonatomic) CAMInflightAsset *possibleAvalancheAsset; // @synthesize possibleAvalancheAsset=_possibleAvalancheAsset;
@property(readonly, nonatomic) unsigned long long numberOfPhotos; // @synthesize numberOfPhotos=_numberOfPhotos;
@property(readonly, copy, nonatomic) NSString *uuid; // @synthesize uuid=_uuid;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(nonatomic) id <CAMAvalancheSessionDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (void).cxx_destruct;
- (id)assetsWithUUIDs:(id)arg1;
- (id)assetWithUUID:(id)arg1;
- (void)_didTransitionToState:(long long)arg1;
- (void)_setState:(long long)arg1;
- (void)_transitionToState:(long long)arg1;
- (_Bool)_ensureValidStateChange:(long long)arg1;
- (id)stackAssetIdentifier;
- (id)bestAssetIndentifiers;
- (id)allAssetIdentifiers;
- (void)_expirationTimerFired;
- (void)_setupExpirationTimer;
- (void)_teardownExpirationTimer;
- (void)finalizeWithAnalysis:(_Bool)arg1;
- (_Bool)extend;
- (void)dealloc;
- (id)initWithType:(long long)arg1;
- (id)init;

@end

@interface CAMBadgeView : UIView
{
}

- (id)_maskImage;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit;

@end

@interface CAMBadgeTextView : CAMBadgeView
{
}

- (double)_textVerticalInset;
- (double)_textHorizontalKerningOffset;
- (double)_textHorizontalInset;
- (id)_textAttributes;
- (id)_text;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (struct CGSize)_textSize;
- (id)_maskImage;

@end

@interface CAMBlurredSnapshotView : UIView
{
    _Bool _blurred;
    _Bool _dimmed;
    _Bool __supportsBlur;
    long long _style;
    UIView *_snapshotView;
    UIView *__lowQualityBlurView;
    UIView *__dimmingView;
    struct CGRect _targetFrame;
}

@property(readonly, nonatomic) UIView *_dimmingView; // @synthesize _dimmingView=__dimmingView;
@property(readonly, nonatomic) UIView *_lowQualityBlurView; // @synthesize _lowQualityBlurView=__lowQualityBlurView;
@property(readonly, nonatomic) _Bool _supportsBlur; // @synthesize _supportsBlur=__supportsBlur;
@property(nonatomic) struct CGRect targetFrame; // @synthesize targetFrame=_targetFrame;
@property(nonatomic) _Bool dimmed; // @synthesize dimmed=_dimmed;
@property(nonatomic) _Bool blurred; // @synthesize blurred=_blurred;
@property(readonly, nonatomic) UIView *snapshotView; // @synthesize snapshotView=_snapshotView;
@property(nonatomic) long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (void)_removeSnapshotDimAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_applySnapshotDimAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_setupDimOnSnapshot;
- (void)_removeLowQualityBlurAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_applyLowQualityBlurAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_prepareForApplyingLowQualityBlurAnimation:(_Bool)arg1 opacityAmount:(double *)arg2 opacityDuration:(double *)arg3 opacityDelay:(double *)arg4 opacityTimingFunction:(id *)arg5 targetView:(id *)arg6;
- (void)_setupLowQualityBlurOnSnapshot;
- (void)_removeSnapshotBlurAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_applySnapshotBlurAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_setupBlurOnSnapshot;
- (void)_prepareForApplyingBlurAnimation:(_Bool)arg1 inputRadiusAmount:(double *)arg2 inputRadiusDuration:(double *)arg3 inputRadiusDelay:(double *)arg4 inputRadiusTimingFunction:(id *)arg5 opacityAmount:(double *)arg6 opacityDuration:(double *)arg7 opacityDelay:(double *)arg8 opacityTimingFunction:(id *)arg9;
- (void)setDimmed:(_Bool)arg1 animated:(_Bool)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)setBlurred:(_Bool)arg1 animated:(_Bool)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (id)initWithView:(id)arg1;

@end

@interface CAMBottomBar : UIView <CAMExpandableMenuButtonDelegate>
{
    _Bool __HDRButtonExpanded;
    _Bool __timerButtonExpanded;
    id <CAMBottomBarDelegate> _delegate;
    long long _orientation;
    long long _backgroundStyle;
    UIView *_backgroundView;
    CAMModeDial *_modeDial;
    CAMImageWell *_imageWell;
    CAMShutterButton *_stillDuringVideoButton;
    CAMShutterButton *_shutterButton;
    CAMFilterButton *_filterButton;
    CAMFlipButton *_flipButton;
    CAMElapsedTimeView *_elapsedTimeView;
    CAMHDRButton *_HDRButton;
    CAMTimerButton *_timerButton;
    CAMSlalomIndicatorView *_slalomIndicatorView;
    UIButton *_cancelButton;
    CAMExpandableMenuButton *__expandedMenuButton;
    UIView *__shutterButtomBottomLayoutSpacer;
    UIView *__imageWellBottomLayoutSpacer;
    UIView *__filterButtonBottomLayoutSpacer;
    UIView *__slalomIndicatorBottomLayoutSpacer;
    UIView *__stillDuringVideoButtonBottomLayoutSpacer;
    UIView *__elapsedTimeViewCenteringLayoutSpacer;
    UIView *__hdrButtonCenteringLayoutSpacer;
}

+ (_Bool)requiresConstraintBasedLayout;
@property(readonly, nonatomic) UIView *_hdrButtonCenteringLayoutSpacer; // @synthesize _hdrButtonCenteringLayoutSpacer=__hdrButtonCenteringLayoutSpacer;
@property(readonly, nonatomic) UIView *_elapsedTimeViewCenteringLayoutSpacer; // @synthesize _elapsedTimeViewCenteringLayoutSpacer=__elapsedTimeViewCenteringLayoutSpacer;
@property(readonly, nonatomic) UIView *_stillDuringVideoButtonBottomLayoutSpacer; // @synthesize _stillDuringVideoButtonBottomLayoutSpacer=__stillDuringVideoButtonBottomLayoutSpacer;
@property(readonly, nonatomic) UIView *_slalomIndicatorBottomLayoutSpacer; // @synthesize _slalomIndicatorBottomLayoutSpacer=__slalomIndicatorBottomLayoutSpacer;
@property(readonly, nonatomic) UIView *_filterButtonBottomLayoutSpacer; // @synthesize _filterButtonBottomLayoutSpacer=__filterButtonBottomLayoutSpacer;
@property(readonly, nonatomic) UIView *_imageWellBottomLayoutSpacer; // @synthesize _imageWellBottomLayoutSpacer=__imageWellBottomLayoutSpacer;
@property(readonly, nonatomic) UIView *_shutterButtomBottomLayoutSpacer; // @synthesize _shutterButtomBottomLayoutSpacer=__shutterButtomBottomLayoutSpacer;
@property(nonatomic, getter=_isTimerButtonExpanded, setter=_setTimerButtonExpanded:) _Bool _timerButtonExpanded; // @synthesize _timerButtonExpanded=__timerButtonExpanded;
@property(nonatomic, getter=_isHDRButtonExpanded, setter=_setHDRButtonExpanded:) _Bool _HDRButtonExpanded; // @synthesize _HDRButtonExpanded=__HDRButtonExpanded;
@property(retain, nonatomic, setter=_setExpandedMenuButton:) CAMExpandableMenuButton *_expandedMenuButton; // @synthesize _expandedMenuButton=__expandedMenuButton;
@property(retain, nonatomic) UIButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property(retain, nonatomic) CAMSlalomIndicatorView *slalomIndicatorView; // @synthesize slalomIndicatorView=_slalomIndicatorView;
@property(retain, nonatomic) CAMTimerButton *timerButton; // @synthesize timerButton=_timerButton;
@property(retain, nonatomic) CAMHDRButton *HDRButton; // @synthesize HDRButton=_HDRButton;
@property(retain, nonatomic) CAMElapsedTimeView *elapsedTimeView; // @synthesize elapsedTimeView=_elapsedTimeView;
@property(retain, nonatomic) CAMFlipButton *flipButton; // @synthesize flipButton=_flipButton;
@property(retain, nonatomic) CAMFilterButton *filterButton; // @synthesize filterButton=_filterButton;
@property(retain, nonatomic) CAMShutterButton *shutterButton; // @synthesize shutterButton=_shutterButton;
@property(retain, nonatomic) CAMShutterButton *stillDuringVideoButton; // @synthesize stillDuringVideoButton=_stillDuringVideoButton;
@property(retain, nonatomic) CAMImageWell *imageWell; // @synthesize imageWell=_imageWell;
@property(retain, nonatomic) CAMModeDial *modeDial; // @synthesize modeDial=_modeDial;
@property(readonly, nonatomic) UIView *backgroundView; // @synthesize backgroundView=_backgroundView;
@property(nonatomic) long long backgroundStyle; // @synthesize backgroundStyle=_backgroundStyle;
@property(readonly, nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(nonatomic) __weak id <CAMBottomBarDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)expandMenuButton:(id)arg1 animated:(_Bool)arg2;
- (struct CGRect)expandedFrameForMenuButton:(id)arg1;
- (void)collapseMenuButton:(id)arg1 animated:(_Bool)arg2;
- (struct CGRect)collapsedFrameForMenuButton:(id)arg1;
- (_Bool)_shouldHideFlipButton;
- (_Bool)_shouldHideTimerButton;
- (_Bool)_shouldHideHDRButton;
- (_Bool)_shouldHideElapsedTimeView;
- (void)_updateHiddenViewsForButtonExpansionAnimated:(_Bool)arg1;
- (void)_layoutMenuButtons:(id)arg1 apply:(_Bool)arg2 withExpandedMenuButton:(id)arg3 collapsingMenuButton:(id)arg4 collapsingFrame:(struct CGRect *)arg5;
- (id)_currentMenuButtons;
- (void)_updateBackgroundStyleAnimated:(_Bool)arg1;
- (void)setBackgroundStyle:(long long)arg1 animated:(_Bool)arg2;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)_layoutForVerticalOrientation;
- (void)_layoutForHorizontalOrientation;
- (void)updateConstraints;
- (void)_setupVerticalConstraints;
- (void)_setupVerticalCancelButtonConstraints;
- (void)_setupVerticalImageWellConstraints;
- (void)_setupVerticalModeDialConstraints;
- (void)_setupVerticalShutterButtonConstraints;
- (void)_setupVerticalElapsedTimeViewConstraints;
- (void)_setupVerticalFlipButtonConstraints;
- (void)_setupVerticalBackgroundViewConstraints;
- (void)_setupHorizontalConstraints;
- (void)_setupHorizontalCancelButtonConstraints;
- (void)_setupHorizontalStillDuringVideoButtonConstraints;
- (void)_setupHorizontalSlalomIndicatorConstraints;
- (void)_setupHorizontalFilterButtonConstraints;
- (void)_setupHorizontalImageWellConstraints;
- (void)_setupHorizontalShutterButtonConstraints;
- (void)_setupHorizontalModeDialConstraints;
- (void)_setupHorizontalBackgroundViewConstraints;
- (id)initWithOrientation:(long long)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMBottomBarInitialization;

@end

@interface CAMButtonLabel : UIView
{
    _Bool _useLegibilityView;
    UILabel *__label;
    _UILegibilityView *__legibilityView;
    struct CGSize _contentSize;
}

@property(readonly, retain, nonatomic) _UILegibilityView *_legibilityView; // @synthesize _legibilityView=__legibilityView;
@property(readonly, retain, nonatomic) UILabel *_label; // @synthesize _label=__label;
@property(nonatomic, getter=isUsingLegibilityView) _Bool useLegibilityView; // @synthesize useLegibilityView=_useLegibilityView;
@property(readonly, nonatomic) struct CGSize contentSize; // @synthesize contentSize=_contentSize;
- (void).cxx_destruct;
- (void)updateToContentSize:(id)arg1;
- (void)layoutSubviews;
- (void)_createLegibilityView;
- (void)_updateViewAlphas;
@property(nonatomic) long long textAlignment;
- (void)setHighlightedTextColor:(id)arg1;
- (id)highlightedTextColor;
@property(retain, nonatomic) UIColor *textColor;
@property(copy, nonatomic) NSString *text;
- (void)_updateAttributedText;
- (void)_updateInternalContentSize;
- (struct CGSize)intrinsicContentSize;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMCameraRoll : NSObject
{
    _Bool _changeNotificationsEnabled;
    _Bool __weakAssetCollectionLoaded;
    _Bool __hasPendingSessionAssets;
    _Bool __hasLoadedCameraRollFrameworks;
    NSDate *_sessionIdentifier;
    PHFetchResult *__weakAssetCollectionFetchResult;
    PHAssetCollection *__weakAssetCollection;
    PHFetchResult *__recentlyAddedAssetsFetchResult;
    NSMutableSet *__cachedChangeObservers;
    NSMutableDictionary *__inflightAssets;
    NSMutableSet *__sessionAssetUUIDs;
}

+ (id)sharedCameraRoll;
@property(readonly, nonatomic) _Bool _hasLoadedCameraRollFrameworks; // @synthesize _hasLoadedCameraRollFrameworks=__hasLoadedCameraRollFrameworks;
@property(readonly, nonatomic) _Bool _hasPendingSessionAssets; // @synthesize _hasPendingSessionAssets=__hasPendingSessionAssets;
@property(readonly, nonatomic) NSMutableSet *_sessionAssetUUIDs; // @synthesize _sessionAssetUUIDs=__sessionAssetUUIDs;
@property(readonly, nonatomic) NSMutableDictionary *_inflightAssets; // @synthesize _inflightAssets=__inflightAssets;
@property(readonly, nonatomic) NSMutableSet *_cachedChangeObservers; // @synthesize _cachedChangeObservers=__cachedChangeObservers;
@property(readonly, nonatomic) PHFetchResult *_recentlyAddedAssetsFetchResult; // @synthesize _recentlyAddedAssetsFetchResult=__recentlyAddedAssetsFetchResult;
@property(readonly, nonatomic) PHAssetCollection *_weakAssetCollection; // @synthesize _weakAssetCollection=__weakAssetCollection;
@property(readonly, nonatomic) PHFetchResult *_weakAssetCollectionFetchResult; // @synthesize _weakAssetCollectionFetchResult=__weakAssetCollectionFetchResult;
@property(readonly, nonatomic, getter=_isWeakAssetCollectionLoaded) _Bool _weakAssetCollectionLoaded; // @synthesize _weakAssetCollectionLoaded=__weakAssetCollectionLoaded;
@property(nonatomic) _Bool changeNotificationsEnabled; // @synthesize changeNotificationsEnabled=_changeNotificationsEnabled;
@property(readonly, nonatomic) NSDate *sessionIdentifier; // @synthesize sessionIdentifier=_sessionIdentifier;
- (void).cxx_destruct;
- (void)preflightCameraRollFrameworks;
- (_Bool)isCameraSessionActive;
- (_Bool)updateFromChanges:(id)arg1;
- (void)removeInflightAsset:(id)arg1;
- (void)addInflightAsset:(id)arg1;
- (_Bool)hasInflightAssets;
- (void)_removeAllSessionAssets;
- (void)_reloadSessionAssets;
- (void)_removeSessionAssets:(id)arg1;
- (void)addSessionAsset:(id)arg1;
- (id)_sessionLocalIdentifiers;
- (void)_ensureFetchedSessionAssets;
- (void)removeChangeNotificationsObserver:(id)arg1;
- (void)addChangeNotificationsObserver:(id)arg1;
- (void)_unregisterAllObjectsForChangeNotifications;
- (void)_unregisterChangeNotificationObserver:(id)arg1;
- (void)_registerAllChangeNotificationObservers;
- (void)_registerChangeNotificationObserver:(id)arg1;
- (id)album;
- (id)fetchResultContainingAssetCollection;
- (id)realizedWeakAssetCollection;
- (void)_ensureWeakAssetCollection;
- (void)_invalidateAssetCollection;
- (void)_updateWeakAlbumChangeNotificationsState;
- (void)finishSession;
- (void)startNewSession;
- (void)startNewSessionWithIdentifier:(id)arg1;
- (void)_updateWeakAssetCollectionFromSessionChange;
- (void)dealloc;
- (id)init;

@end

@interface CAMCameraRollSpec : NSObject
{
}

- (void)reloadAlbumViewController:(id)arg1 withAssetCollection:(id)arg2 fetchResultContainingAssetCollection:(id)arg3;
- (void)prepareAlbumViewControllerForReuse:(id)arg1 withAssetCollection:(id)arg2 inApplicationViewController:(id)arg3;
- (id)newAlbumNavigationControllerForAssetCollection:(id)arg1 fetchResultContainingAssetCollection:(id)arg2 inApplicationViewController:(id)arg3;

@end

@interface CAMCameraView : UIView <CAMModeDialDataSource, CAMTopBarDelegate, CAMBottomBarDelegate, CAMZoomSliderDelegate, CAMTimerButtonDelegate, CAMStillImageCaptureRequestDelegate, PLCameraControllerDelegate, PLCameraPanoramaViewDelegate, UIGestureRecognizerDelegate, UIAccelerometerDelegate>
{
    int _captureOrientation;
    CAMCaptureController *_cameraController;
    CALayer *_panoramaPreviewLayer;
    CAMPanoramaView *_panoramaView;
    double _panoramaProgress;
    struct CGSize _previewContentSize;
    _Bool _previewOriginShouldBeZero;
    int _previewViewAspectMode;
    long long _flashModeBeforeCapture;
    UIView *_previewViewSnapshotView;
    UIView *_flipView;
    double _initialPinchZoomValue;
    UIView *_textOverlayView;
    UITapGestureRecognizer *_singleTapGestureRecognizer;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    UIPanGestureRecognizer *_focusPanGestureRecognizer;
    UIPanGestureRecognizer *_exposureBiasPanGestureRecognizer;
    PLCameraOverlayTextLabelView *_aeafLockView;
    NSTimer *_aeafLockTimer;
    _Bool _shouldEndFocusOnTapUp;
    _Bool _showFaceTracking;
    unsigned long long _currentFacesCount;
    NSTimer *_faceFadeOutTimer;
    CAMGridView *_guideView;
    PLCameraIrisAnimationView *_irisView;
    UIImageView *_staticIrisView;
    _Bool _delayStaticClosedIrisLoading;
    UIImageView *_bottomShadowView;
    _Bool _irisIsClosed;
    _Bool _irisWillOpen;
    NSMutableArray *_openIrisDidFinishSelectors;
    NSMutableArray *_closeIrisDidFinishSelectors;
    long long _modeToOpenIris;
    UIAlertView *_torchDisabledAlert;
    CAMLowDiskSpaceAlertView *_diskSpaceAlert;
    _Bool _gridIsOn;
    _Bool _internalOnlyDisableIrisViews;
    id _delegate;
    unsigned int _needToShowDiskSpaceWarning:1;
    unsigned int _shouldShowFocus:1;
    unsigned int _capturePhotoWhenFocusFinished:1;
    unsigned int _capturePhotoWhenExposureFinished:1;
    unsigned int _isMidSuspension:1;
    unsigned int _capturingPhoto:1;
    unsigned int _fastIrisAnimation:1;
    unsigned int _currentCaptureIsExtendedDuration:1;
    unsigned int _flashModeDidChangeDuringCapture:1;
    unsigned int _imageWriterQueueIsFull:1;
    unsigned int _isCameraApp:1;
    unsigned int _staticIrisIsClosing:1;
    unsigned int _irisIsOpening:1;
    unsigned int _wasInterrupted:1;
    unsigned int _suppressIrisAnimations:1;
    unsigned int _shouldAnimateIrisClosed:1;
    unsigned int _enableCameraAfterDidMoveToWindow:1;
    unsigned int _previewStartedBeforeViewMovedToWindow:1;
    unsigned int _didEverMoveToWindow:1;
    int _rotationStyle;
    _Bool _enableAutorotationAfterRecording;
    _Bool _maskSetBeforeModeChange;
    _Bool _squareMaskActive;
    _Bool _userChangedHDRAfterFlash;
    _Bool _gridVisible;
    _Bool _controlsAreVisible;
    _Bool _allowsMultipleModes;
    _Bool _userInteractionLoggingEnabled;
    _Bool __capturingFromVolumeButtons;
    _Bool __HDRSuggested;
    _Bool __HDRUsedForLastCapture;
    _Bool __ignoringAutomaticBadgeUpdatesForAvalancheIndicator;
    _Bool __ignoringAutomaticBadgeUpdatesDuringCapture;
    _Bool __receivedInitialPreviewDidStartNotification;
    _Bool __tallScreenDevice;
    _Bool __badgesNeedLayoutForZoomSliderAnimation;
    _Bool __cameraEnabled;
    _Bool __capturing;
    _Bool __waitingForStillImageCaptureToComplete;
    _Bool __hasMaximumNumberOfInflightImageRequests;
    _Bool __preparingToRecord;
    _Bool __postprocessing;
    _Bool __processingHDR;
    _Bool __changingModes;
    _Bool __flipping;
    _Bool __performingFilterTransition;
    _Bool __hidingBadgesForFilterUI;
    _Bool __viewingCameraRoll;
    _Bool __reviewingImagePickerCapture;
    _Bool __blurredFromSuspension;
    _Bool __switchingBetweenCameras;
    _Bool __processingModeChange;
    _Bool __avalancheCaptureRecognized;
    _Bool __avalancheCaptureInProgress;
    _Bool __avalancheCaptureAsSoonAsPossible;
    _Bool __avalancheIndicatorVisible;
    _Bool __ignoringSubsequentAvalancheCaptureRequests;
    _Bool __needToStartAvalancheSound;
    _Bool __performingDelayedCapture;
    _Bool __capturingAvalancheForDelayedCapture;
    _Bool __delayedCaptureIndicatorVisible;
    _Bool __hideFocusForFilterSelection;
    _Bool __hideGridViewForFilterSelection;
    _Bool __stopVideoCaptureWhenRecordingStarts;
    _Bool __panningExposureRect;
    _Bool __panningExposureBias;
    int _lastSelectedHDRMode;
    int __windowEdgeClip;
    float __exposureBiasPanStartValue;
    CAMCameraSpec *_spec;
    long long _videoFlashMode;
    long long _lastSelectedPhotoFlashMode;
    long long _timerDuration;
    double __timeIntervalOfTouchDown;
    long long __numberOfInflightStillImageRequests;
    UIView *_previewContainerView;
    CAMPreviewView *_previewView;
    PLPreviewOverlayView *_overlayView;
    UIView *__previewMaskingView;
    UIView *__previewCounterRotatingView;
    UIView *__nonWidescreenSquareBottomMarginLayoutSpacer;
    CAMTopBar *__topBar;
    CAMFlashButton *__flashButton;
    CAMFlashBadge *__flashBadge;
    CAMHDRButton *__HDRButton;
    CAMHDRBadge *__HDRBadge;
    CAMElapsedTimeView *__elapsedTimeView;
    CAMFlipButton *__flipButton;
    CAMBottomBar *__bottomBar;
    CAMModeDial *__modeDial;
    CAMImageWell *__imageWell;
    CAMShutterButton *__stillDuringVideoButton;
    CAMShutterButton *__shutterButton;
    CAMFilterButton *__filterButton;
    CAMZoomSlider *__zoomSlider;
    CAMAvalancheIndicatorView *__avalancheIndicator;
    CAMSlalomIndicatorView *__slalomIndicator;
    CAMHardwareLockIndicatorView *__hardwareLockIndicator;
    CAMTimerButton *__timerButton;
    CAMTimerIndicatorView *__timerIndicator;
    CAMExposureBiasTextView *__exposureBiasTextView;
    CAMBlurredSnapshotView *__suspensionSnapshotView;
    CAMBlurredSnapshotView *__captureSnapshotView;
    CAMBlurredSnapshotView *__currentDeviceFrontSnapshotView;
    CAMBlurredSnapshotView *__currentDeviceBackSnapshotView;
    CAMBlurredSnapshotView *__targetDeviceSnapshotView;
    UISwipeGestureRecognizer *__nextModeGestureRecognizer;
    UISwipeGestureRecognizer *__previousModeGestureRecognizer;
    CAMBlurredSnapshotView *__modeSwitchingSnapshotView;
    long long _selectedModeIndex;
    long long __pendingModeIndex;
    long long __deferredModeIndex;
    NSObject<OS_dispatch_source> *__avalancheCaptureTimer;
    NSObject<OS_dispatch_source> *__avalancheRecognitionTimer;
    long long __desiredNumberOfAvalancheCaptures;
    CAMAnimationDelegate *__delayedCaptureAnimationDelegate;
    NSObject<OS_dispatch_source> *__delayedCaptureTimer;
    long long __remainingDelayedCaptureTicks;
    CAMTorchPatternController *__torchPatternController;
    NSDate *__lastDelayedCaptureIndicatorUpdateDate;
    NSDate *__lastAutoTimerCaptureDate;
    unsigned long long __numFilterSelectionsBeforeCapture;
    NSMutableSet *__filterNamesSelectedBeforeCapture;
    double __exposureBiasVirtualSliderExponent;
    double __exposureBiasVirtualSliderPointsForFirstStop;
    UITapGestureRecognizer *__slalomIndicatorTapGestureRecognizer;
    struct CGPoint __lastFocusPanPoint;
    struct CGPoint __focusPanStartPoint;
    struct CGAffineTransform _previewViewTransform;
}

+ (_Bool)requiresConstraintBasedLayout;
@property(readonly, nonatomic) UITapGestureRecognizer *_slalomIndicatorTapGestureRecognizer; // @synthesize _slalomIndicatorTapGestureRecognizer=__slalomIndicatorTapGestureRecognizer;
@property(nonatomic, setter=_setExposureBiasVirtualSliderPointsForFirstStop:) double _exposureBiasVirtualSliderPointsForFirstStop; // @synthesize _exposureBiasVirtualSliderPointsForFirstStop=__exposureBiasVirtualSliderPointsForFirstStop;
@property(nonatomic, setter=_setExposureBiasVirtualSliderExponent:) double _exposureBiasVirtualSliderExponent; // @synthesize _exposureBiasVirtualSliderExponent=__exposureBiasVirtualSliderExponent;
@property(readonly, nonatomic) _Bool _panningExposureBias; // @synthesize _panningExposureBias=__panningExposureBias;
@property(readonly, nonatomic) float _exposureBiasPanStartValue; // @synthesize _exposureBiasPanStartValue=__exposureBiasPanStartValue;
@property(readonly, nonatomic) struct CGPoint _focusPanStartPoint; // @synthesize _focusPanStartPoint=__focusPanStartPoint;
@property(readonly, nonatomic) struct CGPoint _lastFocusPanPoint; // @synthesize _lastFocusPanPoint=__lastFocusPanPoint;
@property(readonly, nonatomic) _Bool _panningExposureRect; // @synthesize _panningExposureRect=__panningExposureRect;
@property(nonatomic, setter=_setStopVideoCaptureWhenRecordingStarts:) _Bool _stopVideoCaptureWhenRecordingStarts; // @synthesize _stopVideoCaptureWhenRecordingStarts=__stopVideoCaptureWhenRecordingStarts;
@property(readonly, nonatomic) NSMutableSet *_filterNamesSelectedBeforeCapture; // @synthesize _filterNamesSelectedBeforeCapture=__filterNamesSelectedBeforeCapture;
@property(nonatomic, setter=_setNumFilterSelectionsBeforeCapture:) unsigned long long _numFilterSelectionsBeforeCapture; // @synthesize _numFilterSelectionsBeforeCapture=__numFilterSelectionsBeforeCapture;
@property(nonatomic, setter=_setHideGridViewForFilterSelection:) _Bool _hideGridViewForFilterSelection; // @synthesize _hideGridViewForFilterSelection=__hideGridViewForFilterSelection;
@property(nonatomic, setter=_setHideFocusForFilterSelection:) _Bool _hideFocusForFilterSelection; // @synthesize _hideFocusForFilterSelection=__hideFocusForFilterSelection;
@property(readonly, nonatomic) NSDate *_lastAutoTimerCaptureDate; // @synthesize _lastAutoTimerCaptureDate=__lastAutoTimerCaptureDate;
@property(readonly, nonatomic) NSDate *_lastDelayedCaptureIndicatorUpdateDate; // @synthesize _lastDelayedCaptureIndicatorUpdateDate=__lastDelayedCaptureIndicatorUpdateDate;
@property(readonly, nonatomic) CAMTorchPatternController *_torchPatternController; // @synthesize _torchPatternController=__torchPatternController;
@property(nonatomic, getter=_isDelayedCaptureIndicatorVisible, setter=_setDelayedCaptureIndicatorVisible:) _Bool _delayedCaptureIndicatorVisible; // @synthesize _delayedCaptureIndicatorVisible=__delayedCaptureIndicatorVisible;
@property(nonatomic, setter=_setCapturingAvalancheForDelayedCapture:) _Bool _capturingAvalancheForDelayedCapture; // @synthesize _capturingAvalancheForDelayedCapture=__capturingAvalancheForDelayedCapture;
@property(nonatomic, setter=_setPerformingDelayedCapture:) _Bool _performingDelayedCapture; // @synthesize _performingDelayedCapture=__performingDelayedCapture;
@property(readonly, nonatomic) long long _remainingDelayedCaptureTicks; // @synthesize _remainingDelayedCaptureTicks=__remainingDelayedCaptureTicks;
@property(readonly, nonatomic) NSObject<OS_dispatch_source> *_delayedCaptureTimer; // @synthesize _delayedCaptureTimer=__delayedCaptureTimer;
@property(readonly, nonatomic) CAMAnimationDelegate *_delayedCaptureAnimationDelegate; // @synthesize _delayedCaptureAnimationDelegate=__delayedCaptureAnimationDelegate;
@property(nonatomic) long long _desiredNumberOfAvalancheCaptures; // @synthesize _desiredNumberOfAvalancheCaptures=__desiredNumberOfAvalancheCaptures;
@property(readonly, nonatomic) _Bool _needToStartAvalancheSound; // @synthesize _needToStartAvalancheSound=__needToStartAvalancheSound;
@property(readonly, nonatomic) _Bool _ignoringSubsequentAvalancheCaptureRequests; // @synthesize _ignoringSubsequentAvalancheCaptureRequests=__ignoringSubsequentAvalancheCaptureRequests;
@property(nonatomic, getter=_isAvalancheIndicatorVisible, setter=_setAvalancheIndicatorVisible:) _Bool _avalancheIndicatorVisible; // @synthesize _avalancheIndicatorVisible=__avalancheIndicatorVisible;
@property(readonly, nonatomic) _Bool _avalancheCaptureAsSoonAsPossible; // @synthesize _avalancheCaptureAsSoonAsPossible=__avalancheCaptureAsSoonAsPossible;
@property(readonly, nonatomic) NSObject<OS_dispatch_source> *_avalancheRecognitionTimer; // @synthesize _avalancheRecognitionTimer=__avalancheRecognitionTimer;
@property(readonly, nonatomic) NSObject<OS_dispatch_source> *_avalancheCaptureTimer; // @synthesize _avalancheCaptureTimer=__avalancheCaptureTimer;
@property(readonly, nonatomic) _Bool _avalancheCaptureInProgress; // @synthesize _avalancheCaptureInProgress=__avalancheCaptureInProgress;
@property(nonatomic, setter=_setAvalancheCaptureRecognized:) _Bool _avalancheCaptureRecognized; // @synthesize _avalancheCaptureRecognized=__avalancheCaptureRecognized;
@property(readonly, nonatomic, getter=_isProcessingModeChange) _Bool _processingModeChange; // @synthesize _processingModeChange=__processingModeChange;
@property(nonatomic, setter=_setDeferredModeIndex:) long long _deferredModeIndex; // @synthesize _deferredModeIndex=__deferredModeIndex;
@property(nonatomic, setter=_setPendingModeIndex:) long long _pendingModeIndex; // @synthesize _pendingModeIndex=__pendingModeIndex;
@property(nonatomic) long long selectedModeIndex; // @synthesize selectedModeIndex=_selectedModeIndex;
@property(readonly, nonatomic) CAMBlurredSnapshotView *_modeSwitchingSnapshotView; // @synthesize _modeSwitchingSnapshotView=__modeSwitchingSnapshotView;
@property(readonly, nonatomic) UISwipeGestureRecognizer *_previousModeGestureRecognizer; // @synthesize _previousModeGestureRecognizer=__previousModeGestureRecognizer;
@property(readonly, nonatomic) UISwipeGestureRecognizer *_nextModeGestureRecognizer; // @synthesize _nextModeGestureRecognizer=__nextModeGestureRecognizer;
@property(readonly, nonatomic) CAMBlurredSnapshotView *_targetDeviceSnapshotView; // @synthesize _targetDeviceSnapshotView=__targetDeviceSnapshotView;
@property(readonly, nonatomic) CAMBlurredSnapshotView *_currentDeviceBackSnapshotView; // @synthesize _currentDeviceBackSnapshotView=__currentDeviceBackSnapshotView;
@property(readonly, nonatomic) CAMBlurredSnapshotView *_currentDeviceFrontSnapshotView; // @synthesize _currentDeviceFrontSnapshotView=__currentDeviceFrontSnapshotView;
@property(readonly, nonatomic) _Bool _switchingBetweenCameras; // @synthesize _switchingBetweenCameras=__switchingBetweenCameras;
@property(readonly, nonatomic) CAMBlurredSnapshotView *_captureSnapshotView; // @synthesize _captureSnapshotView=__captureSnapshotView;
@property(readonly, nonatomic) CAMBlurredSnapshotView *_suspensionSnapshotView; // @synthesize _suspensionSnapshotView=__suspensionSnapshotView;
@property(nonatomic, setter=_setBlurredFromSuspension:) _Bool _blurredFromSuspension; // @synthesize _blurredFromSuspension=__blurredFromSuspension;
@property(nonatomic, getter=_isReviewingImagePickerCapture, setter=_setReviewingImagePickerCapture:) _Bool _reviewingImagePickerCapture; // @synthesize _reviewingImagePickerCapture=__reviewingImagePickerCapture;
@property(nonatomic, getter=_isViewingCameraRoll, setter=_setViewingCameraRoll:) _Bool _viewingCameraRoll; // @synthesize _viewingCameraRoll=__viewingCameraRoll;
@property(nonatomic, getter=_isHidingBadgesForFilterUI, setter=_setHidingBadgesForFilterUI:) _Bool _hidingBadgesForFilterUI; // @synthesize _hidingBadgesForFilterUI=__hidingBadgesForFilterUI;
@property(nonatomic, getter=_isPerformingFilterTransition, setter=_setPerformingFilterTransition:) _Bool _performingFilterTransition; // @synthesize _performingFilterTransition=__performingFilterTransition;
@property(nonatomic, getter=_isFlipping, setter=_setFlipping:) _Bool _flipping; // @synthesize _flipping=__flipping;
@property(nonatomic, getter=_isChangingModes, setter=_setChangingModes:) _Bool _changingModes; // @synthesize _changingModes=__changingModes;
@property(nonatomic, getter=_isProcessingHDR, setter=_setProcessingHDR:) _Bool _processingHDR; // @synthesize _processingHDR=__processingHDR;
@property(nonatomic, getter=_isPostprocessing, setter=_setPostprocessing:) _Bool _postprocessing; // @synthesize _postprocessing=__postprocessing;
@property(nonatomic, getter=_isPreparingToRecord, setter=_setPreparingToRecord:) _Bool _preparingToRecord; // @synthesize _preparingToRecord=__preparingToRecord;
@property(nonatomic, getter=_hasMaximumNumberOfInflightImageRequests, setter=_setHasMaximumNumberOfInflightImageRequests:) _Bool _hasMaximumNumberOfInflightImageRequests; // @synthesize _hasMaximumNumberOfInflightImageRequests=__hasMaximumNumberOfInflightImageRequests;
@property(nonatomic, getter=_isWaitingForStillImageCaptureToComplete, setter=_setWaitingForStillImageCaptureToComplete:) _Bool _waitingForStillImageCaptureToComplete; // @synthesize _waitingForStillImageCaptureToComplete=__waitingForStillImageCaptureToComplete;
@property(nonatomic, getter=_isCapturing, setter=_setCapturing:) _Bool _capturing; // @synthesize _capturing=__capturing;
@property(nonatomic, getter=_isCameraEnabled, setter=_setCameraEnabled:) _Bool _cameraEnabled; // @synthesize _cameraEnabled=__cameraEnabled;
@property(readonly, nonatomic) _Bool _badgesNeedLayoutForZoomSliderAnimation; // @synthesize _badgesNeedLayoutForZoomSliderAnimation=__badgesNeedLayoutForZoomSliderAnimation;
@property(readonly, nonatomic) CAMExposureBiasTextView *_exposureBiasTextView; // @synthesize _exposureBiasTextView=__exposureBiasTextView;
@property(readonly, nonatomic) CAMTimerIndicatorView *_timerIndicator; // @synthesize _timerIndicator=__timerIndicator;
@property(readonly, nonatomic) CAMTimerButton *_timerButton; // @synthesize _timerButton=__timerButton;
@property(readonly, nonatomic) CAMHardwareLockIndicatorView *_hardwareLockIndicator; // @synthesize _hardwareLockIndicator=__hardwareLockIndicator;
@property(readonly, nonatomic) CAMSlalomIndicatorView *_slalomIndicator; // @synthesize _slalomIndicator=__slalomIndicator;
@property(readonly, nonatomic) CAMAvalancheIndicatorView *_avalancheIndicator; // @synthesize _avalancheIndicator=__avalancheIndicator;
@property(readonly, nonatomic) CAMZoomSlider *_zoomSlider; // @synthesize _zoomSlider=__zoomSlider;
@property(readonly, nonatomic) CAMFilterButton *_filterButton; // @synthesize _filterButton=__filterButton;
@property(readonly, nonatomic) CAMShutterButton *_shutterButton; // @synthesize _shutterButton=__shutterButton;
@property(readonly, nonatomic) CAMShutterButton *_stillDuringVideoButton; // @synthesize _stillDuringVideoButton=__stillDuringVideoButton;
@property(readonly, nonatomic) CAMImageWell *_imageWell; // @synthesize _imageWell=__imageWell;
@property(readonly, nonatomic) CAMModeDial *_modeDial; // @synthesize _modeDial=__modeDial;
@property(readonly, nonatomic) CAMBottomBar *_bottomBar; // @synthesize _bottomBar=__bottomBar;
@property(readonly, nonatomic) CAMFlipButton *_flipButton; // @synthesize _flipButton=__flipButton;
@property(readonly, nonatomic) CAMElapsedTimeView *_elapsedTimeView; // @synthesize _elapsedTimeView=__elapsedTimeView;
@property(readonly, nonatomic) CAMHDRBadge *_HDRBadge; // @synthesize _HDRBadge=__HDRBadge;
@property(readonly, nonatomic) CAMHDRButton *_HDRButton; // @synthesize _HDRButton=__HDRButton;
@property(readonly, nonatomic) CAMFlashBadge *_flashBadge; // @synthesize _flashBadge=__flashBadge;
@property(readonly, nonatomic) CAMFlashButton *_flashButton; // @synthesize _flashButton=__flashButton;
@property(readonly, nonatomic) CAMTopBar *_topBar; // @synthesize _topBar=__topBar;
@property(readonly, nonatomic, getter=_isTallScreenDevice) _Bool _tallScreenDevice; // @synthesize _tallScreenDevice=__tallScreenDevice;
@property(readonly, nonatomic) UIView *_nonWidescreenSquareBottomMarginLayoutSpacer; // @synthesize _nonWidescreenSquareBottomMarginLayoutSpacer=__nonWidescreenSquareBottomMarginLayoutSpacer;
@property(readonly, nonatomic) int _windowEdgeClip; // @synthesize _windowEdgeClip=__windowEdgeClip;
@property(readonly, nonatomic) UIView *_previewCounterRotatingView; // @synthesize _previewCounterRotatingView=__previewCounterRotatingView;
@property(readonly, nonatomic) UIView *_previewMaskingView; // @synthesize _previewMaskingView=__previewMaskingView;
@property(readonly, nonatomic) PLPreviewOverlayView *overlayView; // @synthesize overlayView=_overlayView;
@property(readonly, nonatomic) CAMPreviewView *previewView; // @synthesize previewView=_previewView;
@property(readonly, nonatomic) UIView *previewContainerView; // @synthesize previewContainerView=_previewContainerView;
@property(readonly, nonatomic) _Bool _receivedInitialPreviewDidStartNotification; // @synthesize _receivedInitialPreviewDidStartNotification=__receivedInitialPreviewDidStartNotification;
@property(nonatomic, setter=_setIgnoringAutomaticBadgeUpdatesDuringCapture:) _Bool _ignoringAutomaticBadgeUpdatesDuringCapture; // @synthesize _ignoringAutomaticBadgeUpdatesDuringCapture=__ignoringAutomaticBadgeUpdatesDuringCapture;
@property(nonatomic, setter=_setIgnoringAutomaticBadgeUpdatesForAvalancheIndicator:) _Bool _ignoringAutomaticBadgeUpdatesForAvalancheIndicator; // @synthesize _ignoringAutomaticBadgeUpdatesForAvalancheIndicator=__ignoringAutomaticBadgeUpdatesForAvalancheIndicator;
@property(readonly, nonatomic) _Bool _HDRUsedForLastCapture; // @synthesize _HDRUsedForLastCapture=__HDRUsedForLastCapture;
@property(nonatomic, getter=_isHDRSuggested, setter=_setHDRSuggested:) _Bool _HDRSuggested; // @synthesize _HDRSuggested=__HDRSuggested;
@property(readonly, nonatomic) _Bool _capturingFromVolumeButtons; // @synthesize _capturingFromVolumeButtons=__capturingFromVolumeButtons;
@property(readonly, nonatomic) long long _numberOfInflightStillImageRequests; // @synthesize _numberOfInflightStillImageRequests=__numberOfInflightStillImageRequests;
@property(readonly, nonatomic) double _timeIntervalOfTouchDown; // @synthesize _timeIntervalOfTouchDown=__timeIntervalOfTouchDown;
@property(nonatomic, getter=isUserInteractionLoggingEnabled) _Bool userInteractionLoggingEnabled; // @synthesize userInteractionLoggingEnabled=_userInteractionLoggingEnabled;
@property(nonatomic) struct CGAffineTransform previewViewTransform; // @synthesize previewViewTransform=_previewViewTransform;
@property(readonly, nonatomic) _Bool allowsMultipleModes; // @synthesize allowsMultipleModes=_allowsMultipleModes;
@property(readonly, nonatomic) _Bool controlsAreVisible; // @synthesize controlsAreVisible=_controlsAreVisible;
@property(nonatomic, getter=isGridVisible) _Bool gridVisible; // @synthesize gridVisible=_gridVisible;
@property(nonatomic) long long timerDuration; // @synthesize timerDuration=_timerDuration;
@property(nonatomic) _Bool userChangedHDRAfterFlash; // @synthesize userChangedHDRAfterFlash=_userChangedHDRAfterFlash;
@property(nonatomic) int lastSelectedHDRMode; // @synthesize lastSelectedHDRMode=_lastSelectedHDRMode;
@property(nonatomic) long long lastSelectedPhotoFlashMode; // @synthesize lastSelectedPhotoFlashMode=_lastSelectedPhotoFlashMode;
@property(nonatomic) long long videoFlashMode; // @synthesize videoFlashMode=_videoFlashMode;
@property(readonly, nonatomic) CAMCameraSpec *spec; // @synthesize spec=_spec;
@property(nonatomic) int rotationStyle; // @synthesize rotationStyle=_rotationStyle;
- (void).cxx_destruct;
- (void)_updateSphereAggregateDictionariesForResponse:(id)arg1;
- (void)_presentCameraRoll;
- (void)performPostcapturePreviewForVideoAtPath:(id)arg1;
- (void)embedControlsIntoNavigationItem:(id)arg1 animated:(_Bool)arg2;
- (void)_capturedPhotoWithCaptureDictionary:(id)arg1 metadata:(id)arg2;
@property(readonly, nonatomic, getter=_isLockedToPortraitOrientation) _Bool _lockedToPortraitOrientation;
@property(readonly, nonatomic) _Bool _supportsPreviewingAfterCapture;
@property(readonly, nonatomic) _Bool _wantsPreviewSizeAdjustmentForBars;
@property(readonly, nonatomic) _Bool _wantsOrientationAnimations;
@property(readonly, nonatomic) _Bool _wantsCaptureAnimations;
@property(readonly, nonatomic) _Bool _wantsForcedPreviewAspectRatio;
@property(readonly, nonatomic) _Bool _wantsFullScreenPreview;
@property(readonly, nonatomic) _Bool _shouldStartPreviewWhenApplicationBecomesActive;
@property(readonly, nonatomic) _Bool _shouldPausePreviewDuringCapture;
@property(readonly, nonatomic) _Bool _shouldBlurWhenSessionStops;
@property(readonly, nonatomic) _Bool _wantsSuspensionBlurs;
- (void)setControlsAreVisible:(_Bool)arg1;
- (void)setAllowsMultipleModes:(_Bool)arg1;
- (void)_updateCaptureAggregateDictionariesForResponse:(id)arg1;
- (struct __CFString *)_aggregateDictionaryKeyForFlashMode:(long long)arg1;
- (struct __CFString *)_aggregateDictionaryKeyForCameraMode:(long long)arg1 device:(long long)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (_Bool)_isTouchWithinRect:(struct CGRect)arg1 insets:(struct UIEdgeInsets)arg2 referenceView:(id)arg3 gestureRecognizer:(id)arg4;
- (_Bool)_isTouchWithinView:(id)arg1 forGestureRecognizer:(id)arg2 insets:(struct UIEdgeInsets)arg3;
- (_Bool)_isTouch:(id)arg1 withinView:(id)arg2 insets:(struct UIEdgeInsets)arg3;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (_Bool)_modeChangeSwipeMatchesExposureBiasPanDirection;
- (void)cameraController:(id)arg1 didFinishTransitionToShowEffectsGrid:(_Bool)arg2;
- (void)cameraController:(id)arg1 didStartTransitionToShowEffectsGrid:(_Bool)arg2 animated:(_Bool)arg3;
- (void)cameraController:(id)arg1 willTransitionToShowEffectsGrid:(_Bool)arg2;
- (void)_updateFilterButtonOnState;
- (void)cameraControllerDidChangeEffectFilterIndex:(id)arg1;
- (void)_filterButtonTapped:(id)arg1;
- (id)_scriptingInfo;
@property(readonly, nonatomic) _Bool isCameraReady;
- (void)_cameraOrientationChanged:(id)arg1;
- (void)_rotateCameraControlsAndInterface;
- (long long)_deviceOrientationForPreviewView;
- (long long)_deviceOrientationForUI;
- (void)_applyTopBarRotationForDeviceOrientation:(long long)arg1;
- (_Bool)_shouldApplyRotationDirectlyToTopBarForOrientation:(long long)arg1 cameraMode:(long long)arg2;
- (long long)_glyphOrientationForCameraOrientation:(long long)arg1;
- (void)_deviceOrientationChanged:(id)arg1;
- (void)_createOrDestroyPanoramaViewIfNecessary;
- (void)_updatePanoramaImageQueue;
- (_Bool)bottomBarShouldHideTimerButton:(id)arg1;
- (_Bool)bottomBarShouldHideFlipButton:(id)arg1;
- (_Bool)bottomBarShouldHideElapsedTimeView:(id)arg1;
- (_Bool)bottomBarShouldHideHDRButton:(id)arg1;
- (_Bool)topBarShouldHideTimerButton:(id)arg1;
- (_Bool)topBarShouldHideFlipButton:(id)arg1;
- (_Bool)topBarShouldHideFlashButton:(id)arg1;
- (_Bool)topBarShouldHideHDRButton:(id)arg1;
- (_Bool)topBarShouldHideElapsedTimeView:(id)arg1;
- (id)modeDial:(id)arg1 titleForItemAtIndex:(unsigned long long)arg2;
- (long long)numberOfItemsInModeDial:(id)arg1;
- (_Bool)_processDeferredModeChange;
- (_Bool)_processPendingModeChange;
- (void)_switchFromCameraModeAtIndex:(long long)arg1 toCameraModeAtIndex:(long long)arg2;
- (void)modeDialWasTapped:(id)arg1;
- (void)swipedToPreviousCameraMode;
- (void)swipedToNextCameraMode;
- (void)_removeModeSwitchingBlurAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_applyModeSwitchingBlurAnimated:(_Bool)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)_updateModeSwitchingGestureRecognizersForOrientation:(long long)arg1;
- (void)_updateModeSwitchingAvailability;
@property(nonatomic, getter=_isSwipeToModeSwitchEnabled, setter=_setSwipeToModeSwitchEnabled:) _Bool _swipeToModeSwitchEnabled;
- (_Bool)_isSwipeToModeSwitchAllowed;
- (void)_updateExposureBiasPanGestureRecognizersForOrientation:(long long)arg1;
- (void)_updateGestureRecognizersForOrientation;
- (long long)_orientationForGestureRecognizers;
- (void)_finishAvalancheCapture;
- (void)_setupAvalancheTimerAndBeginCapturing;
- (void)_startAvalancheCapture;
- (_Bool)_isInstantBurstEnabled;
- (void)_teardownRecognitionTimer;
- (void)_teardownAvalancheCaptureTimer;
- (void)_setupAvalancheRecognitionTimer;
- (void)_setupAvalancheCaptureTimer;
- (void)_avalancheRecognitionTimerFired;
- (void)_avalancheCaptureTimerFired;
- (double)_avalancheInterval;
- (void)_setReviewingImagePickerCapture:(_Bool)arg1 updateUI:(_Bool)arg2;
- (id)_debugEnabledDescriptionForControl:(id)arg1 withReason:(id)arg2;
- (void)_updateEnabledControlsWithReason:(id)arg1 forceLog:(_Bool)arg2;
- (void)_updateEnabledControlsWithReason:(id)arg1;
- (_Bool)_shouldEnableZoomSlider;
- (_Bool)_shouldEnableFilterButton;
- (_Bool)_shouldEnableShutterButton;
- (_Bool)_shouldEnableModeDial;
- (_Bool)_shouldEnableImageWell;
- (_Bool)_shouldEnableFlipButton;
- (_Bool)_shouldEnableHDRButton;
- (_Bool)_shouldEnableFlashButton;
- (void)_updateForStartTransitionToShowFilterSelection:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_hideControlsForCapturingTimelapseAnimated:(_Bool)arg1;
- (void)_showControlsForCapturingTimelapseAnimated:(_Bool)arg1;
- (void)_hideControlsForCapturingPanoramaAnimated:(_Bool)arg1;
- (void)_showControlsForCapturingPanoramaAnimated:(_Bool)arg1;
- (void)_hideControlsForCapturingVideoAnimated:(_Bool)arg1;
- (void)_showControlsForCapturingVideoAnimated:(_Bool)arg1;
- (void)_showControlsForReturningFromSuspensionAnimated:(_Bool)arg1;
- (void)_hideControlsForSuspensionAnimated:(_Bool)arg1;
- (void)_showControlsForChangeToMode:(long long)arg1 animated:(_Bool)arg2;
- (void)_hideControlsForChangeToMode:(long long)arg1 animated:(_Bool)arg2;
- (long long)_bottomBarBackgroundStyleForMode:(long long)arg1;
- (long long)_topBarBackgroundStyleForMode:(long long)arg1;
- (_Bool)_shouldHideTimerButtonForMode:(long long)arg1;
- (_Bool)_shouldHideHardwareLockIndicatorForMode:(long long)arg1;
- (_Bool)_shouldHideSlalomIndicatorForMode:(long long)arg1;
- (_Bool)_shouldHideGridView;
- (_Bool)_shouldHideZoomSliderForMode:(long long)arg1;
- (_Bool)_shouldHidePanoramaViewForMode:(long long)arg1;
- (_Bool)_shouldHideFilterButtonForMode:(long long)arg1;
- (_Bool)_shouldHideShutterButtonForMode:(long long)arg1;
- (_Bool)_shouldHideStillDuringVideoButtonForMode:(long long)arg1;
- (_Bool)_shouldHideImageWellForMode:(long long)arg1;
- (_Bool)_shouldHideModeDialForMode:(long long)arg1;
- (_Bool)_shouldHideFlipButtonForMode:(long long)arg1;
- (_Bool)_shouldHideElapsedTimeViewForMode:(long long)arg1;
- (_Bool)_shouldHideExposureBiasTextViewForMode:(long long)arg1;
- (_Bool)_shouldHideHDRBadgeForMode:(long long)arg1;
- (_Bool)_shouldHideHDRButtonForMode:(long long)arg1;
- (_Bool)_shouldHideFlashBadgeForMode:(long long)arg1;
- (_Bool)_shouldHideFlashButtonForMode:(long long)arg1;
- (_Bool)_shouldHideTopBarForMode:(long long)arg1;
- (void)_unblurForSuspensionWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_blurForSuspensionWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_setupSuspensionSnapshotViewWithBlur:(_Bool)arg1;
- (void)_fadeAndUnblurPreviewWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_setupTargetDeviceSnapshotView;
- (void)_cleanupAfterZPositionAnimations;
- (void)_flipToBlurredPreviewWithCompletionBlock:(CDUnknownBlockType)arg1;
- (id)_newSnapshotView;
- (void)_enableNextCapture;
- (void)_performCaptureBlink;
- (void)_performCaptureAnimation;
- (void)updateImageWellImage:(id)arg1 uuid:(id)arg2 animated:(_Bool)arg3;
- (void)_updateGridVisibilityAnimated:(_Bool)arg1;
- (void)_setHideGridViewForFilterSelection:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_snapshotView:(id)arg1 andLayoutForOrientation:(long long)arg2 leaveHidden:(_Bool)arg3 withBlock:(CDUnknownBlockType)arg4;
- (void)_updateBadgeOrientationWithDeviceOrientation:(long long)arg1;
- (void)_updateExposureBiasViewsWithExposureBias:(float)arg1;
- (void)_updateExposureBiasViews;
- (float)_effectiveExposureBias;
- (_Bool)_allowExposureBiasForMode:(long long)arg1;
- (_Bool)_canModifyExposureBias;
- (int)_exposureBiasSide;
- (_Bool)_showExposureBiasSliderOnChange;
- (int)_exposureBiasScheme;
- (void)_updateHardwareLockIndicatorStateAnimated:(_Bool)arg1;
- (void)_updateHardwareLockIndicatorVisibility;
- (void)_layoutTopCenteredView:(id)arg1 forOrientation:(long long)arg2;
- (void)_layoutHardwareLockIndicatorForOrientation:(long long)arg1;
- (void)_updateDelayedCaptureIndicatorWithFace:(id)arg1;
- (double)timeIntervalForDuration:(long long)arg1;
- (long long)_numberOfTicksForTimerDuration:(long long)arg1;
- (void)_teardownDelayedCaptureDelegate;
- (void)_startDelayedCaptureDelegate;
- (void)_setupDelayedCaptureDelegate;
- (void)_delayedCaptureDelegateFired:(id)arg1;
- (_Bool)_shouldUseAvalancheForDelayedCapture;
- (void)_stopDelayedCapture;
- (void)_startDelayedCapture;
- (void)_indicateDelayedCaptureProgressUsingTorch;
- (long long)_currentTimerDuration;
- (_Bool)_shouldStartDelayedCapture;
- (void)_updateFromTimerDurationChange;
- (void)timerButtonDidChangeDuration:(id)arg1;
- (void)_layoutExposureBiasTextViewForOrientation:(long long)arg1;
- (void)_layoutBottomCenteredView:(id)arg1 forOrientation:(long long)arg2;
- (void)_layoutFlashBadgeForOrientation:(long long)arg1;
- (void)_layoutHDRBadgeForOrientation:(long long)arg1;
- (void)_updateFlashAndHDR;
- (int)_HDRMode;
- (long long)_photoFlashMode;
- (_Bool)_useHDR;
- (void)_updateHDRBadge;
- (void)_updateHDRSuggested;
- (void)cameraControllerDidChangeHDRSuggestion:(id)arg1;
- (void)_setHDRMode:(int)arg1;
- (void)_updateFlashBadge;
- (void)_updateFlashModeIfNecessary;
- (long long)_currentFlashMode;
- (void)_setFlashMode:(long long)arg1;
- (void)_snapshotAndHideTopBarAnimated:(_Bool)arg1;
- (void)_updateTopBarOrientationWithDeviceOrientation:(long long)arg1;
- (void)_layoutTopBarForOrientation:(long long)arg1;
- (double)_interpolatedTopBarHeight;
- (void)_updateTopBarStyleForDeviceOrientation:(long long)arg1;
- (void)stopVideoCapture;
- (_Bool)startVideoCapture;
@property(nonatomic) long long flashMode;
- (void)setCameraMode:(long long)arg1 device:(long long)arg2;
@property(nonatomic) long long cameraMode;
@property(nonatomic) long long cameraDevice;
@property(nonatomic, setter=_setAllowsStillFromVideoModeWhenNotRecording:) _Bool _allowsStillFromVideoModeWhenNotRecording;
- (_Bool)_allowsStillFromVideoMode;
- (void)takePicture;
- (void)_applicationPreferredContentSizeChanged:(id)arg1;
- (void)_updateAllControlsWithContentSize:(id)arg1;
- (id)currentContentSize;
- (void)_destroyAllControls;
- (void)_createTimelapseControlsIfNecessary;
- (void)_createPanoControlsIfNecessary;
- (void)_createSlalomControlsIfNecessary;
- (void)_createVideoControlsIfNecessary;
- (void)_createStillImageControlsIfNecessary;
- (void)_createControlsForCurrentModeIfNecessary;
- (void)_createDefaultControlsIfNecessary;
- (void)_createExposureBiasTextViewIfNecessary;
- (_Bool)_allowExposureBiasTextView;
- (void)_createTimerIndicatorIfNecessary;
- (void)_createTimerButtonIfNecessary;
- (void)_createHardwareLockIndicatorIfNecessary;
- (void)_updateSlalomIndicator;
- (void)_updateSlalomIndicatorText;
- (void)_slalomIndicatorTapped:(id)arg1;
- (void)_createSlalomIndicatorIfNecessary;
- (void)_createAvalancheIndicatorIfNecessary;
- (void)_createFlipButtonIfNecessary;
- (void)_createElapsedTimeViewIfNecessary;
- (void)_createHDRButtonIfNecessary;
- (void)_createHDRBadgeIfNecessary;
- (void)_createFlashBadgeIfNecessary;
- (void)_createFlashButtonIfNecessary;
- (void)_createTopBarIfNecessary;
- (void)_createZoomSliderIfNecessary;
- (void)_createFilterButtonIfNecessary;
- (void)_createShutterButtonIfNecessary;
- (void)_createStillDuringVideoButtonIfNecessary;
- (void)_createImageWellIfNecessary;
- (void)_createModeDialIfNecessary;
- (void)_createBottomBarIfNecessary;
- (void)_setupBadgeConstraintsWithVisibleZoomSliderForMode:(long long)arg1;
- (id)_zoomSliderOffsetConstraintsForView:(id)arg1;
- (void)_setupTimerIndicatorConstraintsForMode:(long long)arg1;
- (id)_constraintsForTimerIndicatorWithVerticalBottomBarForMode:(long long)arg1;
- (id)_constraintsForTimerIndicatorWithHorizontalBottomBarForMode:(long long)arg1;
- (void)_setupAvalancheIndicatorConstraintsForMode:(long long)arg1;
- (id)_constraintsForAvalancheIndicatorWithVerticalBottomBarForMode:(long long)arg1;
- (id)_constraintsForAvalancheIndicatorWithHorizontalBottomBarForMode:(long long)arg1;
- (void)_setupZoomSliderConstraints;
- (id)_constraintsForZoomSliderWithHorizontalBottomBar;
- (void)_setupBottomBarConstraints;
- (id)_constraintsForVerticalBottomBar;
- (id)_constraintsForHorizontalBottomBar;
- (void)_setupLivePreviewGridConstraintsForMode:(long long)arg1;
- (void)_setupLivePreviewHierarchyConstraintsForMode:(long long)arg1;
- (id)_constraintsForGridViewWithMode:(long long)arg1;
- (id)_constraintsForLivePreviewMaskWithMode:(long long)arg1;
- (id)_constraintsForLivePreviewContainerWithMode:(long long)arg1;
- (id)_constraintsForLivePreviewWithMode:(long long)arg1;
- (id)_viewWhichOwnsLivePreviewConstraints;
- (void)_ensureLivePreviewHierarchyIsValid;
- (_Bool)_allowFocusRectPanning;
- (void)_createLivePreviewHierarchyIfNecessary;
- (void)_setupPreviewLayer;
- (id)videoPreviewView;
- (void)_setupPreviewView;
- (void)_updateMaskingViewForCameraMode:(long long)arg1 animated:(_Bool)arg2;
- (_Bool)_previewShouldFillScreenForCameraMode:(long long)arg1;
- (void)prepareForDefaultImageSnapshot;
- (void)animateBlurForSuspension;
- (double)_exposureBiasForVirtualSliderPosition:(double)arg1;
- (double)_virtualSliderPositionForExposureBias:(double)arg1;
- (void)_initializeExposureBiasSliderParameters;
- (double)_effectiveExposureBiasMovementForTranslation:(struct CGPoint)arg1;
- (void)_handleExposureBiasPan:(id)arg1;
- (void)_handleFocusRectPan:(id)arg1;
- (void)_handleOverlayViewLongPress:(id)arg1;
- (void)_handleOverlayViewDoubleTap:(id)arg1;
- (_Bool)_handleFocusTap:(id)arg1;
- (void)_resetExposureBias;
- (_Bool)_handleExposureBiasTextViewTap:(id)arg1;
- (_Bool)_handleDismissFocusTap:(id)arg1;
- (_Bool)_handleLockFocusAttachmentTap:(id)arg1;
- (void)_setSplitFocusAndExposure:(_Bool)arg1;
- (_Bool)_handleSplitFocusAndExposureTap:(id)arg1;
- (_Bool)_handleEffectsGridTap:(id)arg1;
- (void)_handleOverlayViewSingleTap:(id)arg1;
- (_Bool)_pointIsOnPanoControls:(struct CGPoint)arg1;
- (_Bool)_pointIsWithinOverlayView:(struct CGPoint)arg1;
- (_Bool)_pointIsWithinOverlayView:(struct CGPoint)arg1 hitView:(id *)arg2;
- (void)_finishCommonTapGesture;
- (void)_togglePreviewViewAspectMode;
@property(nonatomic) int previewViewAspectMode; // @synthesize previewViewAspectMode=_previewViewAspectMode;
- (void)_updateVideoPreviewViewVideoGravity;
- (void)_setPreviewViewAspectMode:(int)arg1;
- (_Bool)_isPreviewViewAspectModeAllowed:(int)arg1;
- (void)_clearAEAFLockTimer;
- (void)_aeafLockTimerDidFire;
- (_Bool)_previewView:(id)arg1 shouldFocusAtPoint:(struct CGPoint)arg2;
- (void)cameraController:(id)arg1 faceMetadataDidChange:(id)arg2;
- (void)cameraControllerDidChangeExposureTargetBias:(id)arg1;
- (void)cameraController:(id)arg1 willResetFocus:(_Bool)arg2 exposure:(_Bool)arg3;
- (void)cameraControllerExposureDidEnd:(id)arg1;
- (void)cameraControllerExposureDidStart:(id)arg1;
- (void)_timeoutFocusDidStart;
- (void)_cancelFocusDidStartTimeout;
- (void)_scheduleFocusDidStartTimeout;
- (void)_updatePreviewForFocusDidEnd;
- (void)_expectedFocusOrExposureOperationDidEnd;
- (void)cameraControllerFocusDidEnd:(id)arg1;
- (void)_showContinuousAEAFView;
- (void)cameraControllerFocusDidStart:(id)arg1;
- (void)_fadeOutFaceRects;
- (void)_startFaceFadeOutTimerWithTimeInterval:(double)arg1;
- (void)_clearFaceFadeOutTimer;
- (struct CGRect)aspectFaceRectFromSquareFaceRect:(struct CGRect)arg1 angle:(double)arg2;
- (void)cameraControllerDidChangeUserLockedExposure:(id)arg1;
- (void)cameraControllerDidChangeUserLockedFocus:(id)arg1;
- (void)_pptTestSetAutofocusDisabled:(_Bool)arg1;
- (void)_resetFaceTracking;
- (void)_clearFocusViews;
- (void)_updateFocusViewHiddenStateAnimated:(_Bool)arg1;
- (void)_setHideFocusForFilterSelection:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_setShouldShowFocus:(_Bool)arg1;
- (_Bool)_shouldShowFocus;
- (void)_unlockFocus:(_Bool)arg1 andExposure:(_Bool)arg2 forFocusAttachment:(_Bool)arg3;
- (void)_lockFocus:(_Bool)arg1 andExposure:(_Bool)arg2 initiatedByUser:(_Bool)arg3;
- (_Bool)_shouldResetExposureWhenSubjectAreaChanged;
- (_Bool)_shouldResetFocusWhenSubjectAreaChanged;
- (_Bool)_shouldResetFocusAndExposureWhenSubjectAreaChanged;
- (_Bool)_canLockFocusOrExposure;
- (_Bool)_canLockExposure;
- (_Bool)_canLockFocus;
- (_Bool)_shouldShowFocusAttachmentAsLocked;
- (_Bool)_longPressTapIsDown;
- (void)_endPanFocus:(_Bool)arg1 exposure:(_Bool)arg2 atPoint:(struct CGPoint)arg3;
- (_Bool)_panFocus:(_Bool)arg1 exposure:(_Bool)arg2 atPoint:(struct CGPoint)arg3;
- (void)_startFocus:(_Bool)arg1 andExposure:(_Bool)arg2 atPoint:(struct CGPoint)arg3 startFocusAnimation:(_Bool)arg4;
- (void)_focusAtPoint:(struct CGPoint)arg1;
- (_Bool)_isValidFocusOrExposurePoint:(struct CGPoint)arg1 outAdjustedPoint:(struct CGPoint *)arg2;
- (struct CGPoint)convertToPointOfInterestFromViewCoordinates:(struct CGPoint)arg1 pointIsInsideContent:(_Bool *)arg2;
- (void)_updateForFocusCapabilities;
- (_Bool)_canAutoExposeAtPoint;
- (_Bool)_canAutoFocusAtPoint;
- (int)_exposureModeForTapToFocus;
- (int)_focusModeForTapToFocus;
- (void)_removeVideoCaptureFileAtPath:(id)arg1;
- (void)_applicationDidEnterBackground;
- (void)disableCamera;
- (void)enableCamera;
- (_Bool)_didEverMoveToWindow;
- (void)didHideZoomSlider:(id)arg1;
- (void)didShowZoomSlider:(id)arg1;
- (void)zoomSliderDidEndAutozooming:(id)arg1;
- (void)zoomSliderDidBeginAutozooming:(id)arg1;
- (void)_updateFocusAfterZoom;
- (void)_zoomSliderDidEndDragging:(id)arg1;
- (void)_zoomSliderValueDidChange:(id)arg1 forEvent:(id)arg2;
- (void)_handlePreviewPinchGestureRecognizer:(id)arg1;
- (void)_pinchZoomWithScale:(double)arg1;
- (void)cameraController:(id)arg1 videoZoomFactorDidChange:(double)arg2;
- (void)_resetZoom;
- (void)_setZoomFactor:(double)arg1;
- (void)hideZoomSlider;
- (void)showZoomSlider;
- (void)_cancelZoomSliderTimer;
- (void)_startZoomSliderTimer;
- (_Bool)_zoomIsAllowed;
- (void)_toggleCameraButtonWasPressed:(id)arg1;
- (void)_reallyToggleCamera;
- (void)hdrButtonDidChangeHDRMode:(id)arg1;
- (void)flashButtonDidChangeAvailability:(id)arg1;
- (void)flashButtonDidChangeFlashMode:(id)arg1;
- (void)_imageWellTapped:(id)arg1;
- (void)_simpleRemoteActionDidOccur:(id)arg1;
- (void)_collapseExpandedButtonsAnimated:(_Bool)arg1;
- (void)cameraControllerModeDidChange:(id)arg1;
- (void)cameraController:(id)arg1 willChangeToMode:(long long)arg2 device:(long long)arg3;
- (void)cameraShutterCancelled:(id)arg1;
- (_Bool)cameraShutterReleased:(id)arg1;
- (void)cameraShutterPressed:(id)arg1;
- (long long)_shutterButtonModeForCameraMode:(long long)arg1 isCapturing:(_Bool)arg2;
- (void)didPlayVideoRecordingSound;
- (void)_resetAggregateInfoForPhotoFilters;
- (void)_updateFilterAggregateDictionaries;
- (int)_getCaptureOrientation;
- (void)_inCallStatusChanged:(id)arg1;
- (struct CGRect)_floatingShutterButtonFrame;
- (struct CGRect)_topBarFrame;
- (struct CGRect)_bottomBarFrame;
- (void)setDelegate:(id)arg1;
- (void)_registerForSystemSound;
@property(readonly, nonatomic) struct CGRect _unzoomedPreviewFrame;
- (void)_windowDidRotate:(id)arg1;
- (void)transitionToSize:(struct CGSize)arg1 withCoordinator:(id)arg2;
- (void)_postCaptureCleanup;
- (void)_updatePreviewWellImage:(id)arg1;
- (_Bool)hasInFlightCaptures;
- (id)_timelapseStartTime;
- (void)_updateImageWellFromTimelapseThumbnailImage:(id)arg1;
- (void)_timelapseControllerDidChangeCapturingNotification:(id)arg1;
- (void)_stopTimelapse;
- (void)_startTimelapse;
- (_Bool)_isCapturingTimelapse;
- (void)panoramaView:(id)arg1 didChangeDirection:(int)arg2;
- (void)captureController:(id)arg1 didOutputPanoramaCaptureParameters:(id)arg2;
- (void)captureControllerPanoramaConfigurationChanged:(id)arg1;
- (void)captureController:(id)arg1 didFinishPanoramaRequest:(id)arg2 withResponse:(id)arg3;
- (void)captureController:(id)arg1 didStartProcessingForPanoramaRequest:(id)arg2;
- (void)captureController:(id)arg1 didStopCapturingForPanoramaRequest:(id)arg2;
- (void)captureController:(id)arg1 didStartCapturingForPanoramaRequest:(id)arg2;
- (void)_stopCapturingPanorama;
- (void)_startCapturingPanorama;
- (void)_capturePanorama;
- (id)_panoramaCaptureRequestWithCurrentSettings;
- (void)_teardownPanoUI;
- (void)_setupPanoUI;
- (void)_cleanupPostVideoCaptureState;
- (void)_removeVideoCaptureControls;
- (void)_showVideoCaptureControls;
- (void)captureController:(id)arg1 didFinishRecordingForVideoRequest:(id)arg2 withResponse:(id)arg3;
- (void)captureController:(id)arg1 didStopRecordingForVideoRequest:(id)arg2;
- (void)captureController:(id)arg1 didStartRecordingForVideoRequest:(id)arg2;
- (void)_stillDuringVideoPressed:(id)arg1;
- (void)_performVideoCapture;
- (id)_videoCaptureRequestWithCurrentSettings;
- (id)_stillImageCaptureRequestWithCurrentSettings;
- (id)_avalancheCaptureRequest;
- (void)captureController:(id)arg1 didCompleteResponse:(id)arg2 forStillImageRequest:(id)arg3 error:(id)arg4;
- (void)captureController:(id)arg1 didGenerateResponse:(id)arg2 forStillImageRequest:(id)arg3 error:(id)arg4;
- (void)captureController:(id)arg1 didCaptureStillImageForRequest:(id)arg2;
- (void)captureController:(id)arg1 willCaptureStillImageForRequest:(id)arg2;
- (void)_captureStillImageWithRequest:(id)arg1;
- (void)_captureAvalancheStillImage;
- (void)_captureStillImage;
- (void)setImagePickerWantsVolumeButtonEvents:(_Bool)arg1;
- (void)_handleVolumeButtonUp;
- (void)_handleVolumeButtonDown;
- (void)_handleVolumeUpEvents:(unsigned long long)arg1;
- (void)_resetInflightImageRequests;
- (void)_decrementInflightImageRequests;
- (void)_incrementInflightImageRequests;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)_showTorchDisabledAlert;
- (void)cameraControllerTorchAvailabilityChanged:(id)arg1;
- (void)cameraControllerTorchActiveChanged:(id)arg1;
- (void)cameraControllerFlashWillFireChanged:(id)arg1;
- (void)cameraController:(id)arg1 didChangeCaptureAbility:(_Bool)arg2;
- (void)_resetDiskSpaceWarning;
- (void)_showDiskSpaceWarning;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidResignActive:(id)arg1;
- (void)_checkDiskSpaceAfterCapture;
- (void)_diskSpaceDidChange;
- (id)delegate;
- (id)captureController;
- (void)cameraControllerServerDied:(id)arg1;
- (void)cameraControllerSessionInterruptionEnded:(id)arg1;
- (void)cameraControllerSessionWasInterrupted:(id)arg1;
- (void)cameraControllerSessionDidStop:(id)arg1;
- (void)cameraControllerWillStopSession:(id)arg1;
- (void)cameraControllerSessionDidStart:(id)arg1;
- (void)cameraControllerPreviewDidStart:(id)arg1;
- (void)cameraController:(id)arg1 cleanApertureDidChange:(struct CGRect)arg2;
- (void)cameraControllerDidSetupSession:(id)arg1;
- (void)_attachVideoPreviewToEffectsRenderer;
- (void)_updatePreviewContentSizeWithCleanAperture:(struct CGRect)arg1;
- (void)_updateToggleAspectModeAbility;
- (void)resumePreview;
- (void)pausePreview;
- (void)_setPreviewPaused:(_Bool)arg1;
- (void)stopPreviewAnimated:(_Bool)arg1;
- (void)stopPreview;
- (void)startPreview:(CDUnknownBlockType)arg1;
- (void)startPreview;
- (void)clearImageWellForNewSessionAlbum;
- (void)resetImageWellForFinishedSessionAlbum;
- (void)_startPreview:(CDUnknownBlockType)arg1;
- (void)_setBadgesNeedLayoutForZoomSliderAnimation;
- (void)_setBadgesNeedInitialLayout;
- (_Bool)_readyToLayoutBadge:(id)arg1;
- (_Bool)_initialLayoutNeededForBadge:(id)arg1;
- (void)layoutSubviews;
- (void)updateConstraints;
- (void)_updateConstraintsForMode:(long long)arg1;
- (void)_invalidateConstraintsForMaskingChange;
- (void)verifyViewOrdering;
- (void)cameraControllerWillStartPreview:(id)arg1;
- (void)_applicationSuspended:(id)arg1;
- (void)_beginSuspendAnimation:(id)arg1;
- (void)viewWillBeRemoved;
- (void)viewDidAppear;
- (void)viewWillBeDisplayed;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 spec:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMCaptureController : NSObject <AVCaptureMetadataOutputObjectsDelegate, PLCameraEffectsRendererDelegate, BKSAccelerometerDelegate, AVCaptureFileOutputRecordingDelegate, AVCaptureVideoDataOutputSampleBufferDelegate>
{
    AVCaptureSession *_avCaptureSession;
    AVCaptureDevice *_avCaptureDeviceFront;
    AVCaptureDevice *_avCaptureDeviceBack;
    AVCaptureDevice *_avCaptureDeviceAudio;
    AVCaptureDeviceInput *_avCaptureInputFront;
    AVCaptureDeviceInput *_avCaptureInputBack;
    AVCaptureDeviceInput *_avCaptureInputAudio;
    AVCaptureStillImageOutput *_avCaptureOutputPhoto;
    AVCaptureMovieFileOutput *_avCaptureOutputVideo;
    AVCaptureVideoDataOutput *_avCaptureOutputPanorama;
    AVCaptureVideoDataOutput *_avCaptureOutputEffectPreview;
    AVCaptureMetadataOutput *_avCaptureOutputMetadata;
    AVCaptureDeviceFormat *_mogulFormatBack;
    AVCaptureDeviceFormat *_mogulFormatFront;
    _Bool _mogulFormatBackSupportsAlternate;
    _Bool _mogulFormatFrontSupportsAlternate;
    id _panoramaProcessor;
    id _panoramaImageQueue;
    struct CGSize _panoramaPreviewSize;
    float _panoramaPreviewScale;
    NSObject<OS_dispatch_queue> *_avCaptureSessionDispatchQueue;
    NSObject<OS_dispatch_queue> *_avCaptureOutputMetadataQueue;
    AVCaptureDevice *_currentDevice;
    AVCaptureDeviceInput *_currentInput;
    AVCaptureOutput *_currentOutput;
    AVCaptureVideoPreviewLayer *_previewLayer;
    struct CGRect _cleanAperture;
    _Bool _shouldBeStopped;
    long long _cameraMode;
    long long _cameraDevice;
    long long _flashMode;
    int _captureOrientation;
    _Bool _imageWriterQueueIsAvailable;
    unsigned long long _ioSurfaceCounter;
    _Bool _hdrCaptureIncludesEV0Image;
    int _hdrEV0PhotoCaptureCount;
    id <PLCameraControllerDelegate> _delegate;
    double _maximumCaptureDuration;
    int _videoCaptureQuality;
    NSString *_videoCapturePath;
    BKSAccelerometer *_accelerometer;
    struct CGImage *_lastVideoPreviewFrameImageRef;
    _Bool _isFocusingOnFace;
    long long _cameraOrientation;
    NSTimer *_idleTimerTimer;
    _Bool _delaySuspend;
    NSTimer *_delaySuspendTimer;
    double _maxVideoZoomFactorRear;
    double _maxVideoZoomFactorFront;
    unsigned long long _keepAliveCounter;
    NSTimer *_keepAliveTimer;
    NSTimer *_keepAliveFailsafeTimer;
    struct {
        unsigned int supportsVideo:1;
        unsigned int supportsHDRRear:1;
        unsigned int supportsHDRFront:1;
        unsigned int supportsSuggestedHDRRear:1;
        unsigned int supportsSuggestedHDRFront:1;
        unsigned int supportsAvalancheAnalysisRear:1;
        unsigned int supportsAvalancheAnalysisFront:1;
        unsigned int supportsMogulRear:1;
        unsigned int supportsMogulFront:1;
        unsigned int supportsLiveEffects:1;
        unsigned int supportsPanorama:1;
        unsigned int supportsVideoStillCapture:1;
        unsigned int supportsPreviewDuringHDR:1;
        unsigned int supportsTimelapse:1;
        unsigned int hasFlash:1;
        unsigned int hasBackCamera:1;
        unsigned int hasFrontCamera:1;
        unsigned int deferStartVideoCapture:1;
        unsigned int inCall:1;
        unsigned int isCapturingPanorama:1;
        unsigned int isProcessingPanorama:1;
        unsigned int focusDisabled:1;
        unsigned int serverDied:1;
        unsigned int didGetDeviceUnavailableInBackground:1;
        unsigned int didSetLocationData:1;
        unsigned int isChangingMode:1;
        unsigned int flashWillFireAutomatically:1;
        unsigned int torchWillFireAutomatically:1;
        unsigned int isCameraApp:1;
        unsigned int didSendPreviewStartedCallbackToEmptyDelegate:1;
        unsigned int didGetPreviewStartedCallbackAfterResume:1;
        unsigned int logFocusInfo:1;
        unsigned int logPreviewInfo:1;
        unsigned int logCaptureInfo:1;
        unsigned int logFlashInfo:1;
        unsigned int logDebugInfo:1;
        unsigned int logPanoInfo:1;
        unsigned int enable720p60Recording:1;
        unsigned int isInternalInstall:1;
        unsigned int shouldTearDownPano:1;
        unsigned int convertSampleBufferToJPEG:1;
        unsigned int delegateDidStartSession:1;
        unsigned int delegateWillStartPreview:1;
        unsigned int delegatePreviewDidStart:1;
        unsigned int delegateSessionDidStart:1;
        unsigned int delegateDidStopSession:1;
        unsigned int delegateWillStopSession:1;
        unsigned int delegateSessionDidStop:1;
        unsigned int delegateSessionWasInterrupted:1;
        unsigned int delegateSessionInterruptionEnded:1;
        unsigned int delegateServerDied:1;
        unsigned int delegateCleanApertureDidChange:1;
        unsigned int delegateModeWillChange:1;
        unsigned int delegateModeDidChange:1;
        unsigned int delegateWillTakePhoto:1;
        unsigned int delegateDidTakePhoto:1;
        unsigned int delegateCapturedPhoto:1;
        unsigned int delegateDidChangeCaptureAbility:1;
        unsigned int delegateDidChangePanoramaConfiguration:1;
        unsigned int delegateDidUpdatePanoramaPreview:1;
        unsigned int delegateDidReceivePanoramaIssue:1;
        unsigned int delegateDidStartPanoramaCapture:1;
        unsigned int delegateWillStopPanoramaCapture:1;
        unsigned int delegatePanoramaWillStartProcessing:1;
        unsigned int delegatePanoramaDidStopProcessing:1;
        unsigned int delegateCapturedPanorama:1;
        unsigned int delegateVideoCaptureDidStart:1;
        unsigned int delegateDidStopVideoCapture:1;
        unsigned int delegateVideoCaptureDidStop:1;
        unsigned int delegateDidChangeFocusMode:1;
        unsigned int delegateDidChangeExposureMode:1;
        unsigned int delegateFocusDidStart:1;
        unsigned int delegateFocusDidEnd:1;
        unsigned int delegateExposureDidStart:1;
        unsigned int delegateExposureDidEnd:1;
        unsigned int delegateWillResetFocusExposure:1;
        unsigned int delegateDidChangeUserLockedFocus:1;
        unsigned int delegateDidChangeUserLockedExposure:1;
        unsigned int delegateDidChangeExposureTargetBias:1;
        unsigned int delegateFaceMetadataDidChange:1;
        unsigned int delegateVideoZoomFactorDidChange:1;
        unsigned int delegateFlashWillFireChanged:1;
        unsigned int delegateTorchActiveChanged:1;
        unsigned int delegateTorchAvailabilityChanged:1;
        unsigned int delegateHDRSuggestionChanged:1;
        unsigned int delegateDidStartVideoRequest:1;
        unsigned int delegateDidStopVideoRequest:1;
        unsigned int delegateDidFinishVideoRequest:1;
        unsigned int delegateDidStartCapturingPanoramaRequest:1;
        unsigned int delegateDidStopCapturingPanoramaRequest:1;
        unsigned int delegateDidStartProcessingPanoramaRequest:1;
        unsigned int delegateDidStopProcessingPanoramaRequest:1;
        unsigned int delegateDidFinishPanoramaRequest:1;
        unsigned int delegatePanoramaConfigurationChanged:1;
        unsigned int delegateDidOutputPanoramaParameters:1;
    } _cameraFlags;
    NSObject<OS_dispatch_queue> *_dispatchTimerQueue;
    NSObject<OS_dispatch_source> *_dispatchTimer;
    _Bool __previewPaused;
    _Bool __previewLayerEnabledForRenderer;
    _Bool __videoDataOutputEnabledForRenderer;
    _Bool _canCapturePhotoFromVideoModeWhenNotRecording;
    _Bool _use60FPSVideo;
    _Bool _capturingTimelapse;
    _Bool _resetFocusWhenSubjectAreaChanged;
    _Bool _resetExposureWhenSubjectAreaChanged;
    _Bool _userLockedFocus;
    _Bool _userLockedExposure;
    _Bool _HDRDetectionEnabled;
    _Bool _useAlternateSlomoFront;
    _Bool _useAlternateSlomoRear;
    _Bool _performingAvalancheCapture;
    _Bool _disableAllPreviewSuspensionDuringCapture;
    _Bool __atomicEffectsAvailable;
    _Bool __configuringCamera;
    _Bool __sessionReady;
    _Bool __rebuildingSession;
    _Bool __atomicModeChangeWaitingForPreviewStarted;
    _Bool __atomicModeChangeWaitingForConfigureSession;
    _Bool __panoramaProcessorReadyForSampleBuffers;
    _Bool __wasStillImageStabilzationOnBeforeTimedCapture;
    _Bool __ignoreSubjectAreaChanges;
    _Bool __lockFocusAfterFocusFinishes;
    _Bool __lockExposureAfterExposeFinishes;
    _Bool __locationAcquiredForTimelapseCapture;
    float __lockLensPositionTarget;
    CDUnknownBlockType postSessionSetupBlock;
    CAMEffectsRenderer *_effectsRenderer;
    NSArray *_supportedCameraModes;
    NSObject<OS_dispatch_queue> *__effectFilterIndexQueue;
    NSDictionary *__effectFilterIndices;
    NSObject<OS_dispatch_queue> *__captureIsolationQueue;
    NSObject<OS_dispatch_queue> *__effectRenderingQueue;
    NSMutableArray *__inflightStillImageCaptureRequests;
    NSMutableArray *__inflightVideoCaptureResponses;
    NSMutableArray *__deferredVideoCaptureRequests;
    NSMutableArray *__inflightPanoramaCaptureRequests;
    NSMutableArray *__processingPanoramaCaptureRequests;
    NSMutableArray *__currentFaceMetadata;
    NSMutableDictionary *__servicesByType;
    CAMAvalancheCaptureService *__avalancheCaptureService;
    CAMDebugCaptureService *__debugCaptureService;
    long long __deviceLockCount;
    double __ignoreSubjectAreaChangesUntilTime;
    CDUnknownBlockType __lockLensPositionCompletionBlock;
}

+ (_Bool)_shouldExtractDiagnostics;
+ (double)panoramaPreviewHorizontalInset;
+ (struct CGSize)panoramaPreviewSize;
+ (float)focusLensPositionCurrentSentinel;
+ (id)_dateFormatterForVideoMetadata;
+ (id)videoMetadataArrayWithLocation:(id)arg1 date:(id)arg2 didSetLocationData:(_Bool *)arg3;
+ (_Bool)isVideoMode:(long long)arg1;
+ (_Bool)isStillImageMode:(long long)arg1;
+ (id)sharedInstance;
@property(readonly, nonatomic) _Bool _locationAcquiredForTimelapseCapture; // @synthesize _locationAcquiredForTimelapseCapture=__locationAcquiredForTimelapseCapture;
@property(nonatomic, setter=_setLockLensPositionTarget:) float _lockLensPositionTarget; // @synthesize _lockLensPositionTarget=__lockLensPositionTarget;
@property(copy, nonatomic, setter=_setLockLensPositionCompletionBlock:) CDUnknownBlockType _lockLensPositionCompletionBlock; // @synthesize _lockLensPositionCompletionBlock=__lockLensPositionCompletionBlock;
@property(readonly, nonatomic) _Bool _lockExposureAfterExposeFinishes; // @synthesize _lockExposureAfterExposeFinishes=__lockExposureAfterExposeFinishes;
@property(readonly, nonatomic) _Bool _lockFocusAfterFocusFinishes; // @synthesize _lockFocusAfterFocusFinishes=__lockFocusAfterFocusFinishes;
@property(readonly, nonatomic) double _ignoreSubjectAreaChangesUntilTime; // @synthesize _ignoreSubjectAreaChangesUntilTime=__ignoreSubjectAreaChangesUntilTime;
@property(readonly, nonatomic) _Bool _ignoreSubjectAreaChanges; // @synthesize _ignoreSubjectAreaChanges=__ignoreSubjectAreaChanges;
@property(setter=_setDeviceLockCount:) long long _deviceLockCount; // @synthesize _deviceLockCount=__deviceLockCount;
@property(readonly, nonatomic) CAMDebugCaptureService *_debugCaptureService; // @synthesize _debugCaptureService=__debugCaptureService;
@property(readonly, nonatomic) CAMAvalancheCaptureService *_avalancheCaptureService; // @synthesize _avalancheCaptureService=__avalancheCaptureService;
@property(readonly, nonatomic) NSMutableDictionary *_servicesByType; // @synthesize _servicesByType=__servicesByType;
@property(readonly, nonatomic) NSMutableArray *_currentFaceMetadata; // @synthesize _currentFaceMetadata=__currentFaceMetadata;
@property(readonly, nonatomic) _Bool _wasStillImageStabilzationOnBeforeTimedCapture; // @synthesize _wasStillImageStabilzationOnBeforeTimedCapture=__wasStillImageStabilzationOnBeforeTimedCapture;
@property(readonly, nonatomic) _Bool _panoramaProcessorReadyForSampleBuffers; // @synthesize _panoramaProcessorReadyForSampleBuffers=__panoramaProcessorReadyForSampleBuffers;
@property(readonly, nonatomic) NSMutableArray *_processingPanoramaCaptureRequests; // @synthesize _processingPanoramaCaptureRequests=__processingPanoramaCaptureRequests;
@property(readonly, nonatomic) NSMutableArray *_inflightPanoramaCaptureRequests; // @synthesize _inflightPanoramaCaptureRequests=__inflightPanoramaCaptureRequests;
@property(readonly, nonatomic) NSMutableArray *_deferredVideoCaptureRequests; // @synthesize _deferredVideoCaptureRequests=__deferredVideoCaptureRequests;
@property(readonly, nonatomic) NSMutableArray *_inflightVideoCaptureResponses; // @synthesize _inflightVideoCaptureResponses=__inflightVideoCaptureResponses;
@property(readonly, nonatomic) NSMutableArray *_inflightStillImageCaptureRequests; // @synthesize _inflightStillImageCaptureRequests=__inflightStillImageCaptureRequests;
@property(getter=_isAtomicModeChangeWaitingForConfigureSession, setter=_setAtomicModeChangeWaitingForConfigureSession:) _Bool _atomicModeChangeWaitingForConfigureSession; // @synthesize _atomicModeChangeWaitingForConfigureSession=__atomicModeChangeWaitingForConfigureSession;
@property(getter=_isAtomicModeChangeWaitingForPreviewStarted, setter=_setAtomicModeChangeWaitingForPreviewStarted:) _Bool _atomicModeChangeWaitingForPreviewStarted; // @synthesize _atomicModeChangeWaitingForPreviewStarted=__atomicModeChangeWaitingForPreviewStarted;
@property(nonatomic) _Bool _rebuildingSession; // @synthesize _rebuildingSession=__rebuildingSession;
@property(nonatomic, getter=_isSessionReady, setter=_setSessionReady:) _Bool _sessionReady; // @synthesize _sessionReady=__sessionReady;
@property(readonly, retain) NSObject<OS_dispatch_queue> *_effectRenderingQueue; // @synthesize _effectRenderingQueue=__effectRenderingQueue;
@property(readonly, retain) NSObject<OS_dispatch_queue> *_captureIsolationQueue; // @synthesize _captureIsolationQueue=__captureIsolationQueue;
@property(getter=_isConfiguringCamera, setter=_setConfiguringCamera:) _Bool _configuringCamera; // @synthesize _configuringCamera=__configuringCamera;
@property(retain, nonatomic, setter=_setEffectFilterIndices:) NSDictionary *_effectFilterIndices; // @synthesize _effectFilterIndices=__effectFilterIndices;
@property(readonly, retain) NSObject<OS_dispatch_queue> *_effectFilterIndexQueue; // @synthesize _effectFilterIndexQueue=__effectFilterIndexQueue;
@property(setter=_setAtomicEffectsAvailable:) _Bool _atomicEffectsAvailable; // @synthesize _atomicEffectsAvailable=__atomicEffectsAvailable;
@property(nonatomic) _Bool disableAllPreviewSuspensionDuringCapture; // @synthesize disableAllPreviewSuspensionDuringCapture=_disableAllPreviewSuspensionDuringCapture;
- (void)_setPerformingAvalancheCapture:(_Bool)arg1;
@property(nonatomic) _Bool performingAvalancheCapture; // @synthesize performingAvalancheCapture=_performingAvalancheCapture;
- (void)_setSupportedCameraModes:(id)arg1;
@property(copy, nonatomic) NSArray *supportedCameraModes; // @synthesize supportedCameraModes=_supportedCameraModes;
- (void)_setEffectsRenderer:(id)arg1;
@property(retain) CAMEffectsRenderer *effectsRenderer; // @synthesize effectsRenderer=_effectsRenderer;
@property(nonatomic) _Bool useAlternateSlomoRear; // @synthesize useAlternateSlomoRear=_useAlternateSlomoRear;
@property(nonatomic) _Bool useAlternateSlomoFront; // @synthesize useAlternateSlomoFront=_useAlternateSlomoFront;
@property(nonatomic, getter=isHDRDetectionEnabled) _Bool HDRDetectionEnabled; // @synthesize HDRDetectionEnabled=_HDRDetectionEnabled;
@property(nonatomic) _Bool userLockedExposure; // @synthesize userLockedExposure=_userLockedExposure;
@property(nonatomic) _Bool userLockedFocus; // @synthesize userLockedFocus=_userLockedFocus;
@property(nonatomic) _Bool resetExposureWhenSubjectAreaChanged; // @synthesize resetExposureWhenSubjectAreaChanged=_resetExposureWhenSubjectAreaChanged;
@property(nonatomic) _Bool resetFocusWhenSubjectAreaChanged; // @synthesize resetFocusWhenSubjectAreaChanged=_resetFocusWhenSubjectAreaChanged;
@property(nonatomic, getter=isCapturingTimelapse) _Bool capturingTimelapse; // @synthesize capturingTimelapse=_capturingTimelapse;
@property(nonatomic) _Bool use60FPSVideo; // @synthesize use60FPSVideo=_use60FPSVideo;
@property(nonatomic) _Bool canCapturePhotoFromVideoModeWhenNotRecording; // @synthesize canCapturePhotoFromVideoModeWhenNotRecording=_canCapturePhotoFromVideoModeWhenNotRecording;
@property(nonatomic) int captureOrientation; // @synthesize captureOrientation=_captureOrientation;
@property(copy, nonatomic) CDUnknownBlockType postSessionSetupBlock; // @synthesize postSessionSetupBlock;
@property(readonly, nonatomic) struct CGRect cleanAperture; // @synthesize cleanAperture=_cleanAperture;
@property(readonly, nonatomic) struct CGSize panoramaPreviewSize; // @synthesize panoramaPreviewSize=_panoramaPreviewSize;
@property(readonly, nonatomic) float panoramaPreviewScale; // @synthesize panoramaPreviewScale=_panoramaPreviewScale;
@property(readonly, nonatomic) AVCaptureVideoPreviewLayer *previewLayer; // @synthesize previewLayer=_previewLayer;
@property(readonly, nonatomic) AVCaptureStillImageOutput *imageOutput; // @synthesize imageOutput=_avCaptureOutputPhoto;
@property(nonatomic) AVCaptureOutput *currentOutput; // @synthesize currentOutput=_currentOutput;
@property(nonatomic) AVCaptureDeviceInput *currentInput; // @synthesize currentInput=_currentInput;
@property(nonatomic) AVCaptureDevice *currentDevice; // @synthesize currentDevice=_currentDevice;
@property(readonly, nonatomic) AVCaptureSession *currentSession; // @synthesize currentSession=_avCaptureSession;
- (void).cxx_destruct;
- (void)_panoramaDidReceiveErrorNotificationString:(struct __CFString *)arg1;
- (void)_panoramaDidReceiveWarningNotificationString:(struct __CFString *)arg1;
- (void)_panoramaDidReceiveStatusNotificationString:(struct __CFString *)arg1;
- (void)_panoramaDidReceiveIssueWithPanoramaString:(struct __CFString *)arg1;
- (void)_deviceConfigurationForPanoramaOptions:(struct __CFDictionary *)arg1 captureDevice:(id)arg2 deviceFormat:(id *)arg3 minFrameDuration:(CDStruct_198678f7 *)arg4 maxFrameDuration:(CDStruct_198678f7 *)arg5;
- (void)_createAssetForPanoramaResponse:(id)arg1;
- (void)_processPanoramaRequest:(id)arg1;
- (void)stopPanoramaCapture;
- (void)enqueuePanoramaRequest:(id)arg1;
- (id)_sanitizePanoramaCaptureRequest:(id)arg1;
- (void)_verifyVideoConsolidationForVideoResponse:(id)arg1;
- (void)_movieFileRecordingCompleted:(id)arg1;
- (void)_createAssetForVideoCaptureResponse:(id)arg1;
- (void)captureOutput:(id)arg1 didFinishRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3 error:(id)arg4;
- (void)captureOutput:(id)arg1 didStartRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3;
- (void)_applyCaptureSettingsFromVideoRequest:(id)arg1;
- (void)_applyTorchSettingsFromVideoRequest:(id)arg1;
- (void)enqueueVideoCaptureRequest:(id)arg1;
- (id)_sanitizeVideoCaptureRequest:(id)arg1;
- (void)_updateImagePickerMetadataForResponse:(id)arg1;
- (void)_updateResponse:(id)arg1 withSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 metadata:(id)arg3 error:(id)arg4;
- (void)_saveStillImageResponse:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_completedWriteForResponse:(id)arg1 request:(id)arg2 error:(id)arg3;
- (void)_completedResponse:(id)arg1 forRequest:(id)arg2 error:(id)arg3;
- (void)_generatedResponse:(id)arg1 forRequest:(id)arg2 error:(id)arg3;
- (id)_stillImageCaptureResponseForRequest:(id)arg1 error:(id)arg2;
- (_Bool)enqueueStillImageCaptureRequest:(id)arg1;
- (void)_applyCaptureSettingsFromStillImageRequest:(id)arg1 withConnection:(id)arg2;
- (void)_applyAudioSettingsFromRequest:(id)arg1;
- (void)_applyStillImageStabilizationSettingsFromRequest:(id)arg1;
- (void)_applyHDRSettingsFromRequest:(id)arg1;
- (void)_applyFlashSettingsFromRequest:(id)arg1;
- (id)_sanitizeStillImageRequest:(id)arg1;
- (_Bool)_isCapturingStillFromVideoMode;
- (void)_updateOrientationForConnection:(id)arg1;
- (long long)_addOrientationMetadataToResponse:(id)arg1;
- (id)_captureConnectionForStillImageCapture;
- (void)_notifyServicesOfCompletedResponse:(id)arg1 error:(id)arg2;
- (void)_notifyServicesOfGeneratedResponse:(id)arg1 error:(id)arg2;
- (void)_notifyServicesOfEnqueuedRequest:(id)arg1;
- (long long)_serviceTypeForCaptureRequest:(id)arg1;
- (void)_destroyAllServices;
- (void)_createTimelapseServicesIfNecessary;
- (void)_createPanoramaServicesIfNecessary;
- (void)_createVideoServicesIfNecessary;
- (void)_createStillImageServicesIfNecessary;
- (void)_createServicesIfNecessaryForMode:(long long)arg1;
- (void)_capturedPhotoWithCaptureDictionary:(id)arg1 metadata:(id)arg2;
- (void)_enableKeepAliveFailsafeTimer;
- (void)_forceKeepAliveFailsafeTimeout;
- (void)_teardownKeepAliveFailsafeTimer;
- (void)_setKeepAlive:(_Bool)arg1 forVideoCapture:(_Bool)arg2;
- (void)_checkKeepAliveStatus;
- (void)_teardownKeepAliveTimer;
- (void)captureOutput:(id)arg1 didOutputMetadataObjects:(id)arg2 fromConnection:(id)arg3;
- (void)cameraEffectsRenderer:(id)arg1 didFinishTransitionToShowGrid:(_Bool)arg2;
- (void)cameraEffectsRenderer:(id)arg1 didStartTransitionToShowGrid:(_Bool)arg2 animated:(_Bool)arg3;
- (void)cameraEffectsRenderer:(id)arg1 willTransitionToShowGrid:(_Bool)arg2;
- (void)cameraEffectsRenderer:(id)arg1 requestsVideoDataOutputEnabled:(_Bool)arg2;
- (void)cameraEffectsRenderer:(id)arg1 requestsPreviewLayerEnabled:(_Bool)arg2;
- (void)cameraEffectsRendererDidStartPreview:(id)arg1;
- (void)_updateEffectsVideoDataOutputEnabled;
@property(nonatomic, setter=_setVideoDataOutputEnabledForRenderer:) _Bool _videoDataOutputEnabledForRenderer; // @synthesize _videoDataOutputEnabledForRenderer=__videoDataOutputEnabledForRenderer;
- (void)_updatePreviewLayerEnabled;
@property(nonatomic, setter=_setPreviewLayerEnabledForRenderer:) _Bool _previewLayerEnabledForRenderer; // @synthesize _previewLayerEnabledForRenderer=__previewLayerEnabledForRenderer;
@property(nonatomic, getter=_isPreviewPaused, setter=_setPreviewPaused:) _Bool _previewPaused; // @synthesize _previewPaused=__previewPaused;
- (void)resumePreview;
- (void)pausePreview;
- (id)recentFaceMetadata;
- (void)_resetRecentFaceMetadata;
- (long long)numberOfCapturedAvalanchePhotos;
- (_Bool)canContinueAvalancheCapture;
- (void)finishAvalancheCapture;
- (void)cancelAvalancheCapture;
- (void)startAvalancheCapture;
- (id)_mogulFormatFromDevice:(id)arg1 frameRate:(double)arg2;
@property(readonly, nonatomic) _Bool allowsAlternateSlomoRear;
@property(readonly, nonatomic) _Bool allowsAlternateSlomoFront;
- (double)mogulFrameRate;
- (double)currentMaxFrameDuration;
- (double)currentMinFrameDuration;
@property(nonatomic, setter=_setEffectsAvailable:) _Bool _effectsAvailable;
- (void)setEffectFilterIndices:(id)arg1 forceStateChange:(_Bool)arg2;
- (id)effectFilterIndices;
- (void)_notifyEffectFilterIndexChanged;
- (void)setEffectFilterIndex:(unsigned long long)arg1 forMode:(long long)arg2;
- (unsigned long long)_sanitizeEffectFilterIndex:(unsigned long long)arg1 forMode:(long long)arg2;
- (unsigned long long)effectFilterIndexForMode:(long long)arg1;
@property(readonly, retain, nonatomic) CIFilter *activeFilter;
- (unsigned long long)_activeFilterIndex;
- (void)_updateEffectsRendererFilterIndexForceStateChange:(_Bool)arg1 renderNotifyBlock:(CDUnknownBlockType)arg2;
- (void)_updateEffectsRendererMirroring;
- (void)_updateSupportedCameraModes;
- (void)cancelVideoZoomRamp;
- (void)rampToVideoZoomFactor:(double)arg1 withRate:(float)arg2;
@property(nonatomic) double videoZoomFactor;
- (double)_limitZoomFactor:(double)arg1 forDevice:(id)arg2;
- (void)_setOrientationEventsEnabled:(_Bool)arg1;
@property(readonly, nonatomic) long long cameraOrientation;
- (void)accelerometer:(id)arg1 didChangeDeviceOrientation:(int)arg2;
- (void)accelerometer:(id)arg1 didAccelerateWithTimeStamp:(double)arg2 x:(float)arg3 y:(float)arg4 z:(float)arg5 eventType:(int)arg6;
- (void)postOrientationChangedNotification:(long long)arg1 force:(_Bool)arg2;
@property(readonly, nonatomic) _Bool isStillImageStabilizationActive;
- (_Bool)supportsLiveEffects;
- (_Bool)supportsAvalancheAnalysisForDevice:(long long)arg1;
- (void)_synchronizeSettings;
- (_Bool)supportsPreviewDuringHDR;
- (void)_suggestedHDRChanged;
@property(readonly, nonatomic, getter=isHDRSuggested) _Bool HDRSuggested;
- (_Bool)_supportsHDRSuggestionForCaptureDevice:(id)arg1;
- (_Bool)supportsHDRSuggestionForDevice:(long long)arg1;
@property(readonly, nonatomic) _Bool supportsHDRSuggestion;
- (_Bool)supportsHDRForDevice:(long long)arg1 mode:(long long)arg2;
@property(readonly, nonatomic) _Bool supportsHDR;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)isTorchDisabled;
- (void)_updateTorchAvailability;
- (_Bool)isTorchOn;
- (_Bool)isTorchActive;
- (_Bool)flashWillFire;
@property(nonatomic) long long flashMode;
- (_Bool)hasFlash;
- (void)_setFlashMode:(long long)arg1 force:(_Bool)arg2;
- (void)_torchLevelChanged;
- (void)_runOnMainThreadImmediatelyIfPossibleWithBlock:(CDUnknownBlockType)arg1;
- (void)_torchActiveChanged;
- (void)_flashStateChanged;
- (void)_setEndianAndCircularTestEnabled:(_Bool)arg1;
- (void)setFaceDetectionEnabled:(_Bool)arg1 forceDisableImageProcessing:(_Bool)arg2;
- (void)_setFaceDetectionEnabled:(_Bool)arg1 forceDisableImageProcessing:(_Bool)arg2 forCaptureDevice:(id)arg3 captureOutput:(id)arg4;
- (void)_faceMetadataDidChange:(id)arg1;
- (void)_faceRectangleChanged;
- (struct CGRect)faceRectangle;
- (_Bool)isFocusingOnFace;
- (void)_debugFocusState;
- (void)_setSubjectAreaChangeMonitoringEnabled:(_Bool)arg1;
- (void)_enableSubjectAreaChangedMonitoringIfNeededFromFocusCompleted:(_Bool)arg1 fromExposureCompleted:(_Bool)arg2;
- (_Bool)_shouldResetExposureWhenSubjectAreaChanged;
- (_Bool)_shouldResetFocusWhenSubjectAreaChanged;
- (void)_disableSubjectAreaChangeMonitoringIfNeeded;
- (void)_resetFocus:(_Bool)arg1 andExposure:(_Bool)arg2;
- (void)_resetFocusAndExposureIfNotExplicitlyLocked;
- (void)resetFocusAndExposureIfNotExplicitlyLocked;
- (void)resumeSubjectAreaChangesAfterDelay:(double)arg1;
- (void)suspendSubjectAreaChanges;
- (void)_subjectAreaDidChange:(id)arg1;
- (void)_exposureTargetBiasChanged;
- (void)_whiteBalanceCompleted;
- (void)_whiteBalanceStarted;
- (void)_exposureCompleted;
- (void)_exposureStarted;
- (void)_focusCompleted;
- (void)_focusStarted;
- (void)_lockFocusForAvalancheCapture;
- (_Bool)_useSmoothFocus;
- (void)_updateFocusAndExposureForVideoRecording;
- (void)_lockFocusAndExposureForPano;
- (void)_cancelDelayedFocusRequests;
- (void)performAutofocusAfterCapture;
- (void)_autofocusAfterCapture;
- (_Bool)isExposureModeCenteredContinuous;
- (void)_startContinuousAutoExposureAtCenter;
- (_Bool)_isFocusModeContinuousAutoFocusAtCenter;
- (void)_startContinuousAutoFocusAtCenter;
- (void)_startContinuousAEAFAtCenter;
- (void)restartContinuousAEAFAtCenter;
- (void)smoothFocusAtCenterForVideoRecording;
@property(nonatomic) struct CGPoint exposurePointOfInterest;
@property(nonatomic) struct CGPoint focusPointOfInterest;
- (_Bool)isExposurePointOfInterestSupported;
- (_Bool)isFocusPointOfInterestSupported;
- (_Bool)isExposing;
- (_Bool)isFocusing;
@property(nonatomic) float exposureTargetBias;
@property(readonly, nonatomic) float exposureTargetBiasMax;
@property(readonly, nonatomic) float exposureTargetBiasMin;
@property(readonly, nonatomic) float exposureTargetBiasDefault;
- (long long)_whiteBalanceModeForExposureMode:(long long)arg1;
- (void)_updateWhiteBalanceModeForExposureMode:(long long)arg1;
- (void)_setExposureMode:(long long)arg1;
- (void)setExposureMode:(int)arg1;
- (void)_pptTestSetAutofocusDisabled:(_Bool)arg1;
- (void)_setFocusModeLockedWithLensPosition;
- (void)_setFocusMode:(long long)arg1 forceSmoothFocus:(_Bool)arg2;
- (float)focusLensPosition;
- (void)setFocusModeLockedWithLensPosition:(float)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)setFocusMode:(int)arg1;
- (int)effectiveExposureMode;
- (int)effectiveFocusMode;
- (void)setUserLockedFocus:(_Bool)arg1 exposure:(_Bool)arg2;
- (_Bool)isSupportedExposureMode:(int)arg1;
- (_Bool)isSupportedFocusMode:(int)arg1;
- (void)setFocusDisabled:(_Bool)arg1;
- (_Bool)_modeAllowsAEAF;
- (_Bool)currentlyAllowedToExposeAtPointOfInterestWithMode:(int)arg1;
- (_Bool)currentlyAllowedToFocusAtPointOfInterestWithMode:(int)arg1;
- (_Bool)canChangeFocusOrExposure;
- (void)unlockDeviceForFocusConfiguration;
- (_Bool)lockDeviceForFocusConfiguration;
- (int)_CAMExposureModeForAVExposureMode:(long long)arg1;
- (int)_CAMFocusModeForAVFocusMode:(long long)arg1;
- (long long)_AVExposureModeForCAMExposureMode:(int)arg1;
- (long long)_AVFocusModeForCAMFocusMode:(int)arg1;
- (void)_updateIdleTimerForCapturingTimelapseChanged;
- (void)_updateIdleTimerForDidFinishRecording;
- (void)_updateIdleTimerForDidFinishVideoRecording;
- (void)_updateIdleTimerForStopVideoCapture;
- (void)_disableIdleIndefinitely;
- (void)_updateIdleTimerForStartVideoCapture;
- (void)_updateIdleTimerForStillImageCaptured;
- (void)_updateIdleTimerForPreviewStopped;
- (void)_updateIdleTimerForPreviewStarted;
- (void)_resetIdleTimer;
- (void)_delayIdleTimerByTimeInterval:(double)arg1;
- (_Bool)_shouldDisableLocationForTimelapseRecording;
- (void)notifyLocationAcquiredForTimelapse;
- (void)setPanoramaImageQueueLayer:(id)arg1;
- (_Bool)isCapturingPanorama;
- (_Bool)canCapturePanorama;
- (_Bool)supportsPanorama;
- (void)setVideoCaptureMaximumDuration:(double)arg1;
- (void)setVideoCaptureQuality:(int)arg1;
- (id)videoCapturePath;
- (void)stopVideoCapture;
- (double)minimumVideoCaptureDuration;
- (void)startVideoCapture;
- (void)_setVideoCapturePath:(id)arg1;
- (id)_videoMetadataArrayIncludingSensitiveProperties:(_Bool)arg1;
- (void)_setOrientation;
- (void)_setOrientationForConnection:(id)arg1;
- (_Bool)canCaptureVideo;
- (void)_verifyVideoConsolidationForVideoAtPath:(id)arg1 outUserInfo:(id *)arg2;
- (void)_removeVideoCaptureFileAndDirectoryAtPath:(id)arg1;
- (_Bool)isCapturingVideo;
- (void *)_newFilteredSurfaceFromSurface:(void *)arg1 filters:(id)arg2;
- (_Bool)capturePhotoUsingHDR:(_Bool)arg1;
- (void)capturePhoto;
- (_Bool)imageWriterQueueIsAvailable;
- (_Bool)_canCapturePhotoFromVideoMode;
- (_Bool)canCapturePhotoDuringRecording;
- (_Bool)canCapturePhoto;
- (void)_didTakePhoto;
- (void)_willTakePhoto;
- (void)_capturedPhotoWithDictionary:(id)arg1 error:(id)arg2 HDRUsed:(_Bool)arg3;
- (void)_processCapturedPhotoWithDictionary:(id)arg1 error:(id)arg2 HDRUsed:(_Bool)arg3;
- (_Bool)_sanityCheckSessionCanCaptureWithOutput:(id)arg1;
- (void)_sessionRuntimeErrored:(id)arg1;
- (void)_interruptionEnded:(id)arg1;
- (void)_wasInterrupted:(id)arg1;
- (void)_serverDied:(id)arg1;
- (void)_recoverFromServerError;
- (void)stopPreview;
- (void)_previewStarted;
- (void)_clearPreviewLayer;
- (_Bool)isPreviewMirrored;
@property(nonatomic) int previewOrientation;
- (void)startPreview;
- (void)startPreview:(CDUnknownBlockType)arg1;
- (void)_startPreview:(CDUnknownBlockType)arg1;
- (void)_startPreviewWithCameraDevice:(long long)arg1 cameraMode:(long long)arg2 effectFilterIndices:(id)arg3;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (_Bool)_didSendPreviewStartedCallbackToEmptyDelegate;
- (void)_sessionStopped:(id)arg1;
- (void)_sessionStarted:(id)arg1;
- (void)_deviceStarted:(id)arg1;
- (void)_tearDownCamera;
- (void)_setDelaySuspend:(_Bool)arg1;
- (void)_forceDelaySuspendTimeout;
- (void)_teardownDelaySuspendTimer;
- (void)_destroyCamera;
- (_Bool)_setupCamera;
- (id)_currentVideoConnection;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_debug_checkIris;
- (void)_debug_cancelWaitForIris;
- (void)_debug_waitForIrisToOpen;
- (id)_debug_dispatchTimerQueue;
- (void)_debug_teardownDispatchTimer;
- (void)_jankyPreviewStartedWorkaround;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationSuspended:(id)arg1;
- (double)maximumZoomFactorForDevice:(long long)arg1;
- (double)minimumZoomFactorForDevice:(long long)arg1;
- (void)_unlockCurrentDeviceForConfiguration;
- (_Bool)_lockCurrentDeviceForConfiguration;
@property(nonatomic) _Bool isCameraApp;
- (void)_setLocationEnabled:(_Bool)arg1;
- (_Bool)_modeUsesCompassHeading;
- (void)_inputPortFormatDescriptionDidChange:(id)arg1;
@property(nonatomic) _Bool convertSampleBufferToJPEG;
@property(nonatomic) long long cameraDevice;
- (_Bool)hasRearCamera;
- (_Bool)hasFrontCamera;
- (void)_setDefaultPrewarmDate:(id)arg1;
@property(nonatomic, getter=_isModeChangeWaitingForConfigureSession, setter=_setModeChangeWaitingForConfigureSession:) _Bool _modeChangeWaitingForConfigureSession;
@property(nonatomic, getter=_isModeChangeWaitingForPreviewStarted, setter=_setModeChangeWaitingForPreviewStarted:) _Bool _modeChangeWaitingForPreviewStarted;
- (void)_notifyControllerModeDidChange;
- (id)_captureMainQueueConfigurationOptions;
- (void)_setCameraMode:(long long)arg1 cameraDevice:(long long)arg2 forceConfigure:(_Bool)arg3;
- (void)_setCameraMode:(long long)arg1 cameraDevice:(long long)arg2;
@property(nonatomic) long long cameraMode;
- (void)setCameraMode:(long long)arg1 device:(long long)arg2;
- (id)_videoModeSessionPresetForDevice:(long long)arg1 options:(id)arg2;
- (id)_photoModeSessionPresetForMode:(long long)arg1 device:(long long)arg2;
- (_Bool)_configureSessionWithCameraMode:(long long)arg1 cameraDevice:(long long)arg2 options:(id)arg3;
- (_Bool)_safeSetCameraMode:(long long)arg1 cameraDevice:(long long)arg2;
- (_Bool)supportsVideoCapture;
- (_Bool)isChangingModes;
- (void)executeBlockOnMainQueue:(CDUnknownBlockType)arg1;
- (void)enqueueBlockOnMainQueue:(CDUnknownBlockType)arg1;
- (void)enqueueBlockInCaptureSessionQueue:(CDUnknownBlockType)arg1;
- (_Bool)isReady;
- (void)_imageWriterQueueAvailabilityChanged;
- (void)releaseIOSurface;
- (void)captureIOSurface;
- (_Bool)hasInheritedForegroundState;
- (_Bool)inCall;
- (void)_inCallStatusChanged:(_Bool)arg1;
- (void)_callStateDidChange:(id)arg1;
- (void)_updateCallStatus;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMCaptureRequest : NSObject <NSCopying, NSMutableCopying>
{
    NSMutableDictionary *__parameterStorage;
    long long _type;
}

@property(readonly, nonatomic) NSMutableDictionary *_parameterStorage; // @synthesize _parameterStorage=__parameterStorage;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSDictionary *_customParameterStorage;
- (id)parameterForKey:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithType:(long long)arg1;
- (id)init;

@end

@interface CAMCaptureResponse : NSObject
{
    _Bool _completed;
    long long _type;
    CAMInflightAsset *_asset;
    NSMutableDictionary *_metadata;
    NSDictionary *_additionalInformation;
    NSDictionary *_diagnostics;
    CAMCaptureRequest *_request;
    NSDictionary *__parameterStorage;
}

@property(readonly, copy, nonatomic) NSDictionary *_parameterStorage; // @synthesize _parameterStorage=__parameterStorage;
@property(copy, nonatomic) CAMCaptureRequest *request; // @synthesize request=_request;
@property(copy, nonatomic) NSDictionary *diagnostics; // @synthesize diagnostics=_diagnostics;
@property(copy, nonatomic) NSDictionary *additionalInformation; // @synthesize additionalInformation=_additionalInformation;
@property(retain, nonatomic) NSMutableDictionary *metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) CAMInflightAsset *asset; // @synthesize asset=_asset;
@property(nonatomic, getter=isCompleted) _Bool completed; // @synthesize completed=_completed;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (void).cxx_destruct;
- (void)releaseCachedImages;
- (id)parameterForKey:(id)arg1;
- (id)initWithType:(long long)arg1;
- (id)init;

@end

@interface CAMCaptureSessionConfigurationOptions : NSObject
{
    _Bool _HDRDetectionEnabled;
    _Bool _use60FPSVideo;
    _Bool _useAlternateSlomoFront;
    _Bool _useAlternateSlomoRear;
}

@property(readonly, nonatomic) _Bool useAlternateSlomoRear; // @synthesize useAlternateSlomoRear=_useAlternateSlomoRear;
@property(readonly, nonatomic) _Bool useAlternateSlomoFront; // @synthesize useAlternateSlomoFront=_useAlternateSlomoFront;
@property(readonly, nonatomic) _Bool use60FPSVideo; // @synthesize use60FPSVideo=_use60FPSVideo;
@property(readonly, nonatomic) _Bool HDRDetectionEnabled; // @synthesize HDRDetectionEnabled=_HDRDetectionEnabled;
- (id)init;
- (id)initWithHDRDetectionEnabled:(_Bool)arg1 use60FPSVideo:(_Bool)arg2 useAlternateSlomoFront:(_Bool)arg3 useAlternateSlomoRear:(_Bool)arg4;

@end

@interface CAMDebugCaptureService : CAMCaptureService
{
    _Bool _debugLoggingEnabled;
    double __enqueueTime;
}

@property(readonly, nonatomic) double _enqueueTime; // @synthesize _enqueueTime=__enqueueTime;
@property(nonatomic, getter=isDebugLoggingEnabled) _Bool debugLoggingEnabled; // @synthesize debugLoggingEnabled=_debugLoggingEnabled;
- (void)responseWasCompleted:(id)arg1 error:(id)arg2;
- (void)responseWasGenerated:(id)arg1 error:(id)arg2;
- (void)receivedStillImageForRequest:(id)arg1;
- (void)didCaptureStillImageForRequest:(id)arg1;
- (void)willCaptureStillImageForRequest:(id)arg1;
- (void)requestWasEnqueued:(id)arg1;

@end

@interface CAMEffectFilterManager : NSObject
{
    NSMutableArray *_effects;
    NSMutableArray *_names;
    NSMutableArray *_aggdNames;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (id)aggdNameForFilter:(id)arg1;
- (id)displayNameForFilter:(id)arg1;
- (unsigned long long)_indexForFilter:(id)arg1;
- (id)displayNameForIndex:(unsigned long long)arg1;
- (id)filterForIndex:(unsigned long long)arg1;
- (unsigned long long)blackAndWhiteFilterCount;
- (unsigned long long)blackAndWhiteFilterStartIndex;
- (unsigned long long)filterCount;
- (void)_addEffectNamed:(id)arg1 aggdName:(id)arg2 filter:(id)arg3;
- (id)init;

@end

@interface CAMEffectPreviewView : UICollectionViewCell
{
    UILabel *_nameLabel;
    UIView *_thumbnailView;
    UIView *_dimmingView;
    struct CGSize _thumbnailSize;
}

+ (struct CGSize)sizeForImageSize:(struct CGSize)arg1;
+ (struct CGSize)thumbnailSizeForImageSize:(struct CGSize)arg1;
+ (double)defaultSpacing;
@property(retain, nonatomic) UIView *thumbnailView; // @synthesize thumbnailView=_thumbnailView;
@property(nonatomic) struct CGSize thumbnailSize; // @synthesize thumbnailSize=_thumbnailSize;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (void)_updateAppearance;
- (void)setHighlighted:(_Bool)arg1;
- (void)setSelected:(_Bool)arg1;
- (void)prepareForReuse;
@property(copy, nonatomic) NSString *text;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMEffectSelectionViewController : UIViewController <UICollectionViewDelegate, UICollectionViewDataSource>
{
    UICollectionView *_collectionView;
    UICollectionViewFlowLayout *_layout;
    NSArray *_effects;
    NSIndexPath *__selectedIndexPath;
    struct CGSize _cellSize;
    struct CGSize _thumbnailSize;
    id <CAMEffectSelectionViewControllerDelegate> _delegate;
}

@property(nonatomic) id <CAMEffectSelectionViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (struct UIEdgeInsets)collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (void)_scrollToShowNextFilterNearEdge;
- (void)_notifyEffectSelectedAndScrollIfNecessary;
- (_Bool)collectionView:(id)arg1 shouldDeselectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didDeselectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (id)_textForItemAtIndexPath:(id)arg1;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)_scrollToSelectedIndexAnimated:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)loadView;
@property(retain, nonatomic) CIFilter *selectedEffect;
- (void)_resetSelectedToOriginal;
- (void)_setSelectedIndexPath:(id)arg1;
- (id)_selectedIndexPath;
- (void)_generateFilters;
- (void)dealloc;
- (id)init;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithImageSize:(struct CGSize)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMEffectSelectionViewControllerView : UIView
{
    UICollectionView *_collectionView;
}

@property(retain, nonatomic) UICollectionView *collectionView; // @synthesize collectionView=_collectionView;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMGLView : UIView
{
    unsigned int _framebuffer;
    unsigned int _renderbuffer;
    CAEAGLLayer *_glLayer;
    PLGLLayerDelegate *_glLayerDelegate;
    _Bool _disableLayoutForGLLayer;
    _Bool __atomicRetainedBacking;
    _Bool __shouldDeleteFramebuffer;
    _Bool __disableLayoutForGLLayerInternal;
    long long _drawableWidth;
    long long _drawableHeight;
    CDUnknownBlockType _renderNotifyBlock;
    EAGLContext *__atomicContext;
    struct CGSize __atomicFixedSize;
}

@property(nonatomic, getter=_isDisabledLayoutForGLLayerInternal, setter=_setDisableLayoutForGLLayerInternal:) _Bool _disableLayoutForGLLayerInternal; // @synthesize _disableLayoutForGLLayerInternal=__disableLayoutForGLLayerInternal;
@property(setter=_setShouldDeleteFramebuffer:) _Bool _shouldDeleteFramebuffer; // @synthesize _shouldDeleteFramebuffer=__shouldDeleteFramebuffer;
@property(setter=_setAtomicFixedSize:) struct CGSize _atomicFixedSize; // @synthesize _atomicFixedSize=__atomicFixedSize;
@property(setter=_setAtomicRetainedBacking:) _Bool _atomicRetainedBacking; // @synthesize _atomicRetainedBacking=__atomicRetainedBacking;
@property(retain, setter=_setAtomicContext:) EAGLContext *_atomicContext; // @synthesize _atomicContext=__atomicContext;
@property(copy, nonatomic) CDUnknownBlockType renderNotifyBlock; // @synthesize renderNotifyBlock=_renderNotifyBlock;
@property long long drawableHeight; // @synthesize drawableHeight=_drawableHeight;
@property long long drawableWidth; // @synthesize drawableWidth=_drawableWidth;
@property(nonatomic, getter=isDisabledLayoutForGLLayer) _Bool disableLayoutForGLLayer; // @synthesize disableLayoutForGLLayer=_disableLayoutForGLLayer;
@property(readonly, retain, nonatomic) CAEAGLLayer *glLayer; // @synthesize glLayer=_glLayer;
- (void).cxx_destruct;
- (void)_layoutGLLayer;
- (void)layoutSubviews;
- (void)setContentScaleFactor:(double)arg1;
- (void)forceDestroyGLResources;
- (void)renderPixelBuffer:(struct __CVBuffer *)arg1 ciContext:(id)arg2 mirrorRendering:(_Bool)arg3;
- (void)_handleRenderNotifyBlock;
- (void)renderWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)_setFramebuffer:(_Bool *)arg1 context:(id)arg2;
- (void)_deleteFramebufferInContext:(id)arg1;
- (void)_createFramebufferInContext:(id)arg1;
- (void)setContentMode:(long long)arg1;
@property(nonatomic) struct CGSize fixedSize;
@property(retain, nonatomic) EAGLContext *context;
@property(nonatomic) _Bool retainedBacking;
- (void)_configureLayer;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMEffectsFullsizeView : CAMGLView
{
    CIFilter *_selectedFilter;
    unsigned long long _selectedFilterIndex;
    unsigned long long _filterIndex;
}

@property unsigned long long filterIndex; // @synthesize filterIndex=_filterIndex;
- (void).cxx_destruct;
- (void)_renderWithInputImage:(id)arg1 ciContext:(id)arg2 mirrorRendering:(_Bool)arg3;
- (void)renderPixelBuffer:(struct __CVBuffer *)arg1 ciContext:(id)arg2 mirrorRendering:(_Bool)arg3;
- (id)_updateSelectedFilter;
- (void)setFixedSize:(struct CGSize)arg1;
- (void)_layoutGLLayer;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMEffectsGridLabelsView : UIView <_UIBackdropViewObserver>
{
    _Bool _disableLayoutForLabels;
    CAMEffectsGridView *_gridView;
    long long _orientation;
    NSArray *_filterLabelViews;
    NSArray *_filterIndices;
    _UIBackdropView *__backdropView;
    _UILegibilitySettingsProvider *__legibilitySettingsProvider;
}

@property(retain, nonatomic) _UILegibilitySettingsProvider *_legibilitySettingsProvider; // @synthesize _legibilitySettingsProvider=__legibilitySettingsProvider;
@property(retain, nonatomic) _UIBackdropView *_backdropView; // @synthesize _backdropView=__backdropView;
- (void)_setFilterIndices:(id)arg1;
@property(retain, nonatomic) NSArray *filterIndices; // @synthesize filterIndices=_filterIndices;
@property(retain, nonatomic) NSArray *filterLabelViews; // @synthesize filterLabelViews=_filterLabelViews;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(nonatomic, getter=isDisabledLayoutForLabels) _Bool disableLayoutForLabels; // @synthesize disableLayoutForLabels=_disableLayoutForLabels;
@property(retain, nonatomic) CAMEffectsGridView *gridView; // @synthesize gridView=_gridView;
- (void).cxx_destruct;
- (void)backdropViewDidChange:(id)arg1;
- (void)updateToContentSize:(id)arg1;
- (struct CGAffineTransform)_transformForOrientation:(long long)arg1;
- (struct CGRect)frameForLabelView:(id)arg1 withinGridFrame:(struct CGRect)arg2;
- (void)layoutSubviews;
- (void)_setFilterLabelViews:(id)arg1;
- (void)_rebuildLabelViews;
- (void)updateFilterLabels;
- (void)_replaceLabelViews:(_Bool)arg1;
- (void)setOrientation:(long long)arg1 animated:(_Bool)arg2;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMEffectsGridView : CAMGLView
{
    _Bool _square;
    _Bool __fetchingGridFilters;
    _Bool __atomicBlackAndWhite;
    NSDictionary *__gridFilters;
}

@property(getter=_isAtomicBlackAndWhite, setter=_setAtomicBlackAndWhite:) _Bool _atomicBlackAndWhite; // @synthesize _atomicBlackAndWhite=__atomicBlackAndWhite;
@property(setter=_setFetchingGridFilters:) _Bool _fetchingGridFilters; // @synthesize _fetchingGridFilters=__fetchingGridFilters;
@property(retain, setter=_setGridFilters:) NSDictionary *_gridFilters; // @synthesize _gridFilters=__gridFilters;
@property(getter=isSquare) _Bool square; // @synthesize square=_square;
- (void).cxx_destruct;
- (id)filterIndices;
- (unsigned long long)filterIndexForPoint:(struct CGPoint)arg1;
- (struct CGRect)rectForFilterIndex:(unsigned long long)arg1;
- (unsigned long long)_filterIndexForGridIndex:(unsigned long long)arg1;
- (unsigned long long)_gridIndexForFilterIndex:(unsigned long long)arg1;
- (unsigned long long)_cellCount;
- (unsigned long long)_cellsPerRow;
- (void)_setupGridFiltersIfNecessary;
- (struct CGRect)_squareCropFromRect:(struct CGRect)arg1;
- (void)_renderGridFilters:(id)arg1 withInputImage:(id)arg2 ciContext:(id)arg3 mirrorRendering:(_Bool)arg4;
- (void)renderPixelBuffer:(struct __CVBuffer *)arg1 ciContext:(id)arg2 mirrorRendering:(_Bool)arg3;
@property(getter=isBlackAndWhite) _Bool blackAndWhite;
- (void)dealloc;

@end

@interface CAMEffectsRenderer : NSObject
{
    EAGLContext *_eaglContext;
    CIContext *_ciContext;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    _Bool _isShowingGrid;
    _Bool _gridTransitionInFlight;
    _Bool _gridTransitionIsAnimated;
    id <PLCameraEffectsRendererDelegate> _delegate;
    double _lastReportedFrameDropTime;
    unsigned long long _totalFramesSinceLastReportedFrameDrop;
    unsigned long long _droppedFramesSinceLastReportedFrameDrop;
    _Bool __atomicPreviewStartedNotificationNeeded;
    _Bool _atomicMirrorFilterRendering;
    _Bool __previewLayerEnabled;
    _Bool __inBackground;
    CAMEffectsFullsizeView *__renderEffectsFullsizeView;
    CAMEffectsGridView *__renderGridView;
    CAMVideoPreviewView *_atomicVideoPreviewView;
    unsigned long long _atomicFilterIndex;
    CDUnknownBlockType __atomicPreviewStartedBlock;
    long long _atomicCameraMode;
}

@property(getter=_isInBackground, setter=_setInBackground:) _Bool _inBackground; // @synthesize _inBackground=__inBackground;
@property(nonatomic, setter=_setPreviewLayerEnabled:) _Bool _previewLayerEnabled; // @synthesize _previewLayerEnabled=__previewLayerEnabled;
@property long long cameraMode; // @synthesize cameraMode=_atomicCameraMode;
@property _Bool mirrorFilterRendering; // @synthesize mirrorFilterRendering=_atomicMirrorFilterRendering;
@property(copy, setter=_setPreviewStartedBlock:) CDUnknownBlockType _previewStartedBlock; // @synthesize _previewStartedBlock=__atomicPreviewStartedBlock;
@property(setter=_setPreviewStartedNotificationNeeded:) _Bool _previewStartedNotificationNeeded; // @synthesize _previewStartedNotificationNeeded=__atomicPreviewStartedNotificationNeeded;
@property unsigned long long atomicFilterIndex; // @synthesize atomicFilterIndex=_atomicFilterIndex;
@property(retain) CAMVideoPreviewView *atomicVideoPreviewView; // @synthesize atomicVideoPreviewView=_atomicVideoPreviewView;
@property(retain, setter=_setRenderGridView:) CAMEffectsGridView *_renderGridView; // @synthesize _renderGridView=__renderGridView;
@property(retain, setter=_setRenderEffectsFullsizeView:) CAMEffectsFullsizeView *_renderEffectsFullsizeView; // @synthesize _renderEffectsFullsizeView=__renderEffectsFullsizeView;
@property(nonatomic) id <PLCameraEffectsRendererDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (struct CGRect)_gridFrameForCurrentFilters;
- (struct CGRect)_zoomedFrameForRect:(struct CGRect)arg1 fromFullFrame:(struct CGRect)arg2 toZoomFrame:(struct CGRect)arg3;
- (struct CGRect)_frameToZoomFromFrame:(struct CGRect)arg1 toFrame:(struct CGRect)arg2 withinFrame:(struct CGRect)arg3;
- (void)_animateLayer:(id)arg1 startFrame:(struct CGRect)arg2 endFrame:(struct CGRect)arg3 viewTransform:(struct CGAffineTransform)arg4 animationDuration:(double)arg5 animationTimingFunction:(id)arg6 animationDelegate:(id)arg7;
- (void)_animateGridLayerZoomToGrid:(_Bool)arg1;
- (void)_animateToGrid:(_Bool)arg1 layer:(id)arg2 fadeOutLayer:(id)arg3 startFrame:(struct CGRect)arg4 endFrame:(struct CGRect)arg5 completion:(CDUnknownBlockType)arg6;
- (id)_animatedLayerForView:(id)arg1;
- (void)_forceResetToFilteredRendering:(_Bool)arg1;
- (void)_transitionFromGrid:(CDUnknownBlockType)arg1;
- (void)_transitionToGrid:(CDUnknownBlockType)arg1;
- (void)_setGridTransitionIsInFlight:(_Bool)arg1;
- (_Bool)_gridTransitionInFlight;
- (void)setShowGrid:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isShowingGrid) _Bool showGrid;
- (void)_handlePreviewStartedFiltered:(_Bool)arg1;
- (void)_notifyOfRenderIfNecessary;
- (void)_runOnMainThreadImmediatelyIfPossibleWithBlock:(CDUnknownBlockType)arg1;
- (void)_previewStarted:(id)arg1;
- (void)_deviceStarted:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_resumeRendering;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_updateStatsForFrameWasDropped:(_Bool)arg1;
- (void)_reportStatsForFrameDrops;
- (void)didDropSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)renderWithSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)_renderWithSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)_destroyEffectsGridView;
- (void)_destroyEffectsFullsizeView;
- (id)_setupEffectsGridView;
- (id)_setupEffectsFullsizeView;
- (void)_tearDownEffectsView:(id)arg1 removeFromSuperview:(_Bool)arg2;
- (void)_setupEffectsView:(id)arg1;
@property(retain, nonatomic) CAMVideoPreviewView *videoPreviewView;
- (void)_updateEffectsFullsizeView;
- (void)setFilterIndex:(unsigned long long)arg1 forceStateChange:(_Bool)arg2 renderNotifyBlock:(CDUnknownBlockType)arg3;
@property(nonatomic) unsigned long long filterIndex;
- (void)_setVideoDataOutputEnabled:(_Bool)arg1;
- (void)_createContextIfNecessary;
- (void)dealloc;
- (id)init;
- (id)initWithDispatchQueue:(id)arg1;

@end

@interface CAMElapsedTimeView : UIView
{
    UILabel *__timeLabel;
    UIImageView *__recordingImageView;
    NSTimer *__updateTimer;
    NSDate *__startTime;
}

@property(readonly, nonatomic) NSDate *_startTime; // @synthesize _startTime=__startTime;
@property(readonly, nonatomic) NSTimer *_updateTimer; // @synthesize _updateTimer=__updateTimer;
@property(readonly, nonatomic) UIImageView *_recordingImageView; // @synthesize _recordingImageView=__recordingImageView;
@property(readonly, nonatomic) UILabel *_timeLabel; // @synthesize _timeLabel=__timeLabel;
- (void).cxx_destruct;
- (void)_endRecordingAnimation;
- (void)_beginRecordingAnimation;
- (void)resetTimer;
- (void)endTimer;
- (void)_setStartTime:(id)arg1;
- (void)startTimer;
- (void)_update:(id)arg1;
- (void)updateToContentSize:(id)arg1;
- (void)layoutSubviews;
- (struct CGSize)intrinsicContentSize;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMElapsedTimeViewInitialization;

@end

@interface CAMExpandableMenuButton : UIControl
{
    _Bool _expanded;
    long long _selectedIndex;
    long long _expansionOrientation;
    long long _orientation;
    id <CAMExpandableMenuButtonDelegate> _expandableMenuDelegate;
    NSMutableArray *__menuItems;
    UIView *__headerView;
    NSIndexSet *__hiddenIndexesWhileCollapsed;
    NSMutableIndexSet *__highlightedIndexesWhileCollapsed;
    struct UIEdgeInsets _tappableEdgeInsets;
}

+ (double)expansionDuration;
@property(readonly, copy, nonatomic) NSMutableIndexSet *_highlightedIndexesWhileCollapsed; // @synthesize _highlightedIndexesWhileCollapsed=__highlightedIndexesWhileCollapsed;
@property(readonly, copy, nonatomic) NSIndexSet *_hiddenIndexesWhileCollapsed; // @synthesize _hiddenIndexesWhileCollapsed=__hiddenIndexesWhileCollapsed;
@property(readonly, nonatomic) UIView *_headerView; // @synthesize _headerView=__headerView;
@property(readonly, nonatomic) NSMutableArray *_menuItems; // @synthesize _menuItems=__menuItems;
@property(nonatomic) __weak id <CAMExpandableMenuButtonDelegate> expandableMenuDelegate; // @synthesize expandableMenuDelegate=_expandableMenuDelegate;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(nonatomic) long long expansionOrientation; // @synthesize expansionOrientation=_expansionOrientation;
@property(readonly, nonatomic, getter=isExpanded) _Bool expanded; // @synthesize expanded=_expanded;
@property(nonatomic) long long selectedIndex; // @synthesize selectedIndex=_selectedIndex;
- (void).cxx_destruct;
- (_Bool)shouldIgnoreMenuInteraction;
- (id)hiddenIndexesWhileCollapsed;
- (id)headerView;
- (id)titleForMenuItemAtIndex:(long long)arg1;
- (long long)numberOfMenuItems;
- (void)updateToContentSize:(id)arg1;
@property(nonatomic) struct UIEdgeInsets tappableEdgeInsets; // @synthesize tappableEdgeInsets=_tappableEdgeInsets;
- (void)_handleTapGestureRecognizer:(id)arg1;
- (void)setHighlighted:(_Bool)arg1 forIndex:(long long)arg2;
- (void)_updateFromOrientationChangeAnimated:(_Bool)arg1;
- (void)setOrientation:(long long)arg1 animated:(_Bool)arg2;
- (void)_applyMenuItemTextAlignmentForCurrentOrientation;
- (void)completeExpansionToProposedFrame:(struct CGRect)arg1;
- (void)finishExpansionAnimated:(_Bool)arg1;
- (void)startExpansionWithProposedFrame:(struct CGRect)arg1;
- (void)finishCollapsingAnimated:(_Bool)arg1;
- (void)startCollapsingWithProposedFrame:(struct CGRect)arg1;
- (void)_convertAllSubviewsToProposedFrame:(struct CGRect)arg1;
- (void)_updateFromExpansionChangeAnimated:(_Bool)arg1;
- (void)_applyMenuItemAlphaForCurrentExpansionState;
- (void)_applyMenuItemColorsForCurrentState;
- (void)collapseMenuAnimated:(_Bool)arg1;
- (void)expandMenuAnimated:(_Bool)arg1;
- (void)reloadData;
- (void)_updateFromSelectedIndexChange;
- (id)_selectedLabel;
- (_Bool)_wantsSelectedItemToBeVisible;
- (void)layoutSubviews;
- (struct CGSize)_layoutMenuButton:(_Bool)arg1 expanded:(_Bool)arg2;
- (struct CGSize)_layoutForVerticalExpansionOrientation:(_Bool)arg1 expanded:(_Bool)arg2;
- (struct CGSize)_layoutForHorizontalExpansionOrientation:(_Bool)arg1 expanded:(_Bool)arg2;
- (struct CGSize)_layoutForVerticalExpandedLandscapeButton:(_Bool)arg1;
- (struct CGSize)_layoutForHorizontalExpandedLandscapeButton:(_Bool)arg1;
- (struct CGSize)_layoutForVerticalExpandedPortraitButton:(_Bool)arg1;
- (struct CGSize)_layoutForHorizontalExpandedPortraitButton:(_Bool)arg1;
- (struct CGSize)_layoutForVerticalCollapsedLandscapeButton:(_Bool)arg1;
- (struct CGSize)_layoutForHorizontalCollapsedLandscapeButton:(_Bool)arg1;
- (struct CGSize)_layoutForVerticalCollapsedPortraitButton:(_Bool)arg1;
- (struct CGSize)_layoutForHorizontalCollapsedPortraitButton:(_Bool)arg1;
- (struct CGSize)intrinsicContentSize;
- (struct UIEdgeInsets)alignmentRectInsets;
- (struct CGSize)intrinsicContentSizeForExpansion:(_Bool)arg1;
- (struct CGRect)frameForAlignmentRect:(struct CGRect)arg1 expanded:(_Bool)arg2;
- (struct CGRect)alignmentRectForFrame:(struct CGRect)arg1 expanded:(_Bool)arg2;
- (id)initWithExpansionOrientation:(long long)arg1;
- (id)init;

@end

@interface CAMExposureBiasSlider : UIView
{
    _Bool _suspendTrackFadeOut;
    float _exposureBiasMin;
    float _exposureBiasMax;
    float _exposureBiasValue;
    CAMExposureBiasSliderThumb *__thumbView;
    UIView *__minTrackView;
    UIView *__maxTrackView;
    UIView *__minTrackMaskView;
    UIView *__maxTrackMaskView;
    double __lastInteractionTime;
}

@property(readonly, nonatomic) double _lastInteractionTime; // @synthesize _lastInteractionTime=__lastInteractionTime;
@property(readonly, retain, nonatomic) UIView *_maxTrackMaskView; // @synthesize _maxTrackMaskView=__maxTrackMaskView;
@property(readonly, retain, nonatomic) UIView *_minTrackMaskView; // @synthesize _minTrackMaskView=__minTrackMaskView;
@property(readonly, retain, nonatomic) UIView *_maxTrackView; // @synthesize _maxTrackView=__maxTrackView;
@property(readonly, retain, nonatomic) UIView *_minTrackView; // @synthesize _minTrackView=__minTrackView;
@property(readonly, retain, nonatomic) CAMExposureBiasSliderThumb *_thumbView; // @synthesize _thumbView=__thumbView;
@property(nonatomic) _Bool suspendTrackFadeOut; // @synthesize suspendTrackFadeOut=_suspendTrackFadeOut;
@property(nonatomic) float exposureBiasValue; // @synthesize exposureBiasValue=_exposureBiasValue;
@property(nonatomic) float exposureBiasMax; // @synthesize exposureBiasMax=_exposureBiasMax;
@property(nonatomic) float exposureBiasMin; // @synthesize exposureBiasMin=_exposureBiasMin;
- (void).cxx_destruct;
- (double)_trackAlpha;
- (void)_animateTrackAlpha:(double)arg1 withDuration:(double)arg2;
- (void)_dimTrackForInactivity;
- (void)_cancelDelayedDim;
- (void)_scheduleDelayedDim;
- (void)updateLastInteractionTime;
- (void)forceTrackDimmed;
- (float)_normalizedExposureValue;
- (struct CGPoint)_sunCenterForNormalizedValue:(float)arg1;
- (void)layoutSubviews;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)_updateForChangedNormalizedExposureValue;
@property(readonly, nonatomic) double thumbMaxExtension;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMExposureBiasSliderThumb : UIView
{
    float _normalizedExposureValue;
}

@property(nonatomic) float normalizedExposureValue; // @synthesize normalizedExposureValue=_normalizedExposureValue;
- (double)_sunRaySpacing;
- (double)_sunRayLength;
- (double)_sunRadius;
- (double)_interpolatedValueWithMin:(double)arg1 mid:(double)arg2 max:(double)arg3;
- (void)drawRect:(struct CGRect)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
@property(readonly, nonatomic) double maxRadius;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMExposureBiasTextView : CAMBadgeTextView
{
    float _exposureBias;
    NSString *__lastText;
}

@property(retain, nonatomic) NSString *_lastText; // @synthesize _lastText=__lastText;
@property(nonatomic) float exposureBias; // @synthesize exposureBias=_exposureBias;
- (void).cxx_destruct;
- (double)_textVerticalInset;
- (double)_textHorizontalKerningOffset;
- (double)_textHorizontalInset;
- (id)_textAttributes;
- (id)_textForExposureBias:(float)arg1;
- (id)_text;
- (struct CGSize)_textSize;

@end

@interface CAMFocusView : UIView
{
    NSArray *_images;
    CAKeyframeAnimation *_contentsAnimation;
    CAKeyframeAnimation *_boundsAnimation;
    double _animationStartTime;
    double _lastInteractionTime;
    _Bool _fadingOut;
    long long _suspendCount;
    _Bool _shouldFadeOut;
    _Bool _fadeOutStarted;
    double _lastFadeOutTime;
    UIColor *_color;
}

+ (double)minimumTimeBeforeFadeOut;
@property(retain, nonatomic) UIColor *color; // @synthesize color=_color;
@property(readonly, nonatomic) double lastFadeOutTime; // @synthesize lastFadeOutTime=_lastFadeOutTime;
- (void).cxx_destruct;
- (void)_animateAlpha:(double)arg1 withDuration:(double)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_dimForInactivity;
- (void)_scheduleDelayedDim;
- (void)updateLastInteractionTime;
- (void)resetFadeOutSuspension;
- (void)resumeFadeOutResetPending:(_Bool)arg1;
- (void)suspendFadeOut;
- (void)cancelFadeOut;
- (_Bool)_cancelFadeOutForSuspend;
- (void)_cancelDelayedDim;
- (void)_cancelDelayedFadeOut;
- (void)_fadeOutIfNeeded;
- (void)_cancelDelayedPauseContentsAnimation;
- (void)_pauseContentsAnimation;
- (void)stopContentsAnimation;
- (void)focusDidEnd;
- (void)_fadeOutDidStop:(id)arg1 finished:(id)arg2 context:(void *)arg3;
- (void)_fadeOut;
- (void)stopAnimating;
- (void)startAnimatingContents:(_Bool)arg1 bounds:(_Bool)arg2 fadeIn:(_Bool)arg3;
- (void)startAnimating;
- (id)_createBoundsAnimation;
- (id)_createContentsAnimation;
- (double)dimAfterInteractionDelay;
- (double)fadeOutDuration;
- (double)fadeInDuration;
- (id)nameForDarkImage;
- (id)nameForLightImage;
- (void)setDefaultContents;
- (void)_loadImagesWithColor:(id)arg1 imageSize:(struct CGSize *)arg2;
- (void)dealloc;
- (id)init;
- (id)initWithColor:(id)arg1;

@end

@interface CAMFaceTrackingView : CAMFocusView
{
    _Bool _isInFrame;
}

@property(nonatomic) _Bool isInFrame; // @synthesize isInFrame=_isInFrame;
- (void)animateToFrame:(struct CGRect)arg1;
- (void)fadeOut;
- (void)fadeIn;
- (id)_createBoundsAnimation;
- (id)_createContentsAnimation;
- (double)fadeOutDuration;
- (void)_loadImagesWithColor:(id)arg1 imageSize:(struct CGSize *)arg2;
- (id)init;

@end

@interface CAMFilterButton : UIButton
{
    UIImageView *__circlesImageView;
    struct UIEdgeInsets _tappableEdgeInsets;
}

+ (id)filterButton;
@property(readonly, nonatomic) UIImageView *_circlesImageView; // @synthesize _circlesImageView=__circlesImageView;
@property(nonatomic) struct UIEdgeInsets tappableEdgeInsets; // @synthesize tappableEdgeInsets=_tappableEdgeInsets;
- (void).cxx_destruct;
- (id)_filterOnImage;
- (id)_filterImage;
@property(nonatomic, getter=isOn) _Bool on;
- (double)_selectedIndicatorAlpha;
- (struct CGSize)intrinsicContentSize;
- (struct UIEdgeInsets)alignmentRectInsets;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMFilterButtonInitialization;

@end

@interface CAMFlashBadge : CAMBadgeView
{
    UIImage *__contentImage;
}

@property(retain, nonatomic) UIImage *_contentImage; // @synthesize _contentImage=__contentImage;
- (void).cxx_destruct;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)_maskImage;
- (struct UIEdgeInsets)_imageInsets;
- (struct CGSize)_imageSize;
- (void)_commonInit;

@end

@interface CAMFlashButton : CAMExpandableMenuButton
{
    _Bool _allowsAutomaticFlash;
    _Bool _unavailable;
    UIImageView *__glyphView;
    UIImageView *__warningIndicatorView;
}

@property(readonly, nonatomic) UIImageView *_warningIndicatorView; // @synthesize _warningIndicatorView=__warningIndicatorView;
@property(readonly, nonatomic) UIImageView *_glyphView; // @synthesize _glyphView=__glyphView;
@property(nonatomic, getter=isUnavailable) _Bool unavailable; // @synthesize unavailable=_unavailable;
@property(nonatomic) _Bool allowsAutomaticFlash; // @synthesize allowsAutomaticFlash=_allowsAutomaticFlash;
- (void).cxx_destruct;
- (_Bool)shouldIgnoreMenuInteraction;
- (void)reloadData;
- (id)hiddenIndexesWhileCollapsed;
- (id)headerView;
- (id)titleForMenuItemAtIndex:(long long)arg1;
- (long long)numberOfMenuItems;
- (long long)indexForMode:(long long)arg1;
- (long long)modeForIndex:(long long)arg1;
@property(nonatomic) long long flashMode;
- (id)initWithExpansionOrientation:(long long)arg1;
- (void)_commonCAMFlashButtonInitialization;

@end

@interface CAMFlipButton : UIButton
{
    struct UIEdgeInsets _tappableEdgeInsets;
}

+ (id)flipButton;
@property(nonatomic) struct UIEdgeInsets tappableEdgeInsets; // @synthesize tappableEdgeInsets=_tappableEdgeInsets;
- (id)_flipImage;
- (struct CGSize)intrinsicContentSize;
- (struct UIEdgeInsets)alignmentRectInsets;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMFlipButtonInitialization;

@end

@interface CAMFocusAttachmentView : UIView
{
    UILabel *__label;
    struct UIEdgeInsets _textInsets;
}

@property(retain, nonatomic) UILabel *_label; // @synthesize _label=__label;
@property(nonatomic) struct UIEdgeInsets textInsets; // @synthesize textInsets=_textInsets;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (void)setFrame:(struct CGRect)arg1;
- (void)setText:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMFocusLockAttachmentView : CAMFocusAttachmentView
{
    _Bool _locked;
}

@property(nonatomic, getter=isLocked) _Bool locked; // @synthesize locked=_locked;
- (void)_updateText;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMFocusLockView : CAMFocusView
{
    CAKeyframeAnimation *_lockBoundsAnimation;
}

- (void).cxx_destruct;
- (void)animateScaleDownWithCompletion:(CDUnknownBlockType)arg1;
- (void)animateLock;
- (id)_createLockBoundsAnimation;
- (void)startAnimatingContents:(_Bool)arg1 bounds:(_Bool)arg2 fadeIn:(_Bool)arg3;
- (double)fadeInDuration;
- (id)_createBoundsAnimation;

@end

@interface CAMFocusPointView : CAMFocusView
{
}

- (double)dimAfterInteractionDelay;
- (id)nameForDarkImage;
- (id)nameForLightImage;

@end

@interface CAMFocusSplitAttachmentView : CAMFocusAttachmentView
{
    _Bool _split;
}

@property(nonatomic) _Bool split; // @synthesize split=_split;
- (void)_updateText;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMFormattingManager : NSObject
{
    _Bool _wantsCustomKerning;
    _Bool _supportsVerticalText;
}

+ (id)sharedManager;
@property(readonly, nonatomic) _Bool supportsVerticalText; // @synthesize supportsVerticalText=_supportsVerticalText;
@property(readonly, nonatomic) _Bool wantsCustomKerning; // @synthesize wantsCustomKerning=_wantsCustomKerning;
- (id)init;
- (void)_commonCAMFormattingManagerInitialization;

@end

@interface CAMGridView : UIView
{
}

- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (void)_drawLinesWithInset:(float)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMHDRBadge : CAMBadgeTextView
{
}

- (double)_textVerticalInset;
- (double)_textHorizontalKerningOffset;
- (double)_textHorizontalInset;
- (id)_textAttributes;
- (id)_text;

@end

@interface CAMHDRButton : CAMExpandableMenuButton
{
    _Bool _allowsAutomaticHDR;
    CAMButtonLabel *__headerLabel;
}

@property(readonly, nonatomic) CAMButtonLabel *_headerLabel; // @synthesize _headerLabel=__headerLabel;
@property(nonatomic) _Bool allowsAutomaticHDR; // @synthesize allowsAutomaticHDR=_allowsAutomaticHDR;
- (void).cxx_destruct;
- (void)updateToContentSize:(id)arg1;
- (void)reloadData;
- (id)hiddenIndexesWhileCollapsed;
- (id)headerView;
- (id)titleForMenuItemAtIndex:(long long)arg1;
- (long long)numberOfMenuItems;
- (long long)indexForMode:(int)arg1;
- (int)modeForIndex:(long long)arg1;
@property(nonatomic) int HDRMode;
- (id)initWithExpansionOrientation:(long long)arg1;
- (void)_commonCAMHDRButtonInitialization;

@end

@interface CAMHardwareLockIndicatorView : UIView
{
    _Bool _focusLocked;
    _Bool _exposureLocked;
    NSDictionary *__indicatorTextAttributes;
}

@property(readonly, nonatomic) NSDictionary *_indicatorTextAttributes; // @synthesize _indicatorTextAttributes=__indicatorTextAttributes;
@property(nonatomic, getter=isExposureLocked) _Bool exposureLocked; // @synthesize exposureLocked=_exposureLocked;
@property(nonatomic, getter=isFocusLocked) _Bool focusLocked; // @synthesize focusLocked=_focusLocked;
- (void).cxx_destruct;
- (void)_updateFromHardwareChange;
- (id)_textForCurrentHardwareState;
- (struct CGSize)_roundedSizeOfText:(id)arg1 withAttributes:(id)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMHardwareLockIndicatorViewInitialization;

@end

@interface CAMImagePickerSpec : CAMCameraSpec
{
}

+ (id)specForPad;
+ (id)specForPhone;
- (_Bool)isCameraApp;

@end

@interface CAMImageWell : UIButton
{
    long long _cameraOrientation;
    UIView *__containerView;
    UIImageView *__thumbnailImageView;
    UIImageView *__maskImageView;
    NSMutableArray *__dimmingViewQueue;
    NSString *__uuid;
    struct UIEdgeInsets _tappableEdgeInsets;
}

@property(retain, nonatomic, setter=_setUuid:) NSString *_uuid; // @synthesize _uuid=__uuid;
@property(readonly, nonatomic) NSMutableArray *_dimmingViewQueue; // @synthesize _dimmingViewQueue=__dimmingViewQueue;
@property(readonly, nonatomic) UIImageView *_maskImageView; // @synthesize _maskImageView=__maskImageView;
@property(readonly, nonatomic) UIImageView *_thumbnailImageView; // @synthesize _thumbnailImageView=__thumbnailImageView;
@property(readonly, nonatomic) UIView *_containerView; // @synthesize _containerView=__containerView;
@property(nonatomic) struct UIEdgeInsets tappableEdgeInsets; // @synthesize tappableEdgeInsets=_tappableEdgeInsets;
@property(nonatomic) long long cameraOrientation; // @synthesize cameraOrientation=_cameraOrientation;
- (void).cxx_destruct;
- (id)_maskImage;
- (void)_removeFirstDimmingView;
- (void)_performEmitAnimationWithImage:(id)arg1 orientation:(long long)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (struct CGAffineTransform)_affineTransformForImageOrientation:(long long)arg1;
- (void)_updateThumbnailTransformFromCameraOrientation;
- (void)recoverFromFailedThumbnailUpdate;
- (void)prepareForThumbnailUpdateFromCapture;
- (void)setThumbnailImage:(id)arg1 uuid:(id)arg2 animated:(_Bool)arg3;
- (void)setThumbnailImage:(id)arg1 animated:(_Bool)arg2;
- (void)setCameraOrientation:(long long)arg1 animated:(_Bool)arg2;
- (void)layoutSubviews;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (struct UIEdgeInsets)alignmentRectInsets;
- (struct CGSize)intrinsicContentSize;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMImageWellInitialization;

@end

@interface CAMInflightAsset : NSObject
{
    _Bool _isVideo;
    _Bool __didPersistAvalanche;
    _Bool __hasPendingAvalanchePersistenceUpdate;
    short _visibilityState;
    int _avalanchePickType;
    NSString *_uuid;
    NSString *_directory;
    NSString *_filename;
    NSDate *_dateCreated;
    long long _deviceOrientationDuringCapture;
    long long _captureDeviceDuringCapture;
    NSString *_avalancheUUID;
}

@property(readonly, nonatomic) _Bool _hasPendingAvalanchePersistenceUpdate; // @synthesize _hasPendingAvalanchePersistenceUpdate=__hasPendingAvalanchePersistenceUpdate;
@property(readonly, nonatomic) _Bool _didPersistAvalanche; // @synthesize _didPersistAvalanche=__didPersistAvalanche;
@property(nonatomic) short visibilityState; // @synthesize visibilityState=_visibilityState;
@property(nonatomic) int avalanchePickType; // @synthesize avalanchePickType=_avalanchePickType;
@property(retain, nonatomic) NSString *avalancheUUID; // @synthesize avalancheUUID=_avalancheUUID;
@property(nonatomic) _Bool isVideo; // @synthesize isVideo=_isVideo;
@property(nonatomic) long long captureDeviceDuringCapture; // @synthesize captureDeviceDuringCapture=_captureDeviceDuringCapture;
@property(nonatomic) long long deviceOrientationDuringCapture; // @synthesize deviceOrientationDuringCapture=_deviceOrientationDuringCapture;
@property(retain, nonatomic) NSDate *dateCreated; // @synthesize dateCreated=_dateCreated;
@property(retain, nonatomic) NSString *filename; // @synthesize filename=_filename;
@property(retain, nonatomic) NSString *directory; // @synthesize directory=_directory;
@property(retain, nonatomic) NSString *uuid; // @synthesize uuid=_uuid;
- (void).cxx_destruct;
- (void)_persistAvalancheToFilesystem;
- (void)_avalanchePersistenceStateDidChange;
- (id)pathForVideoFile;
- (id)pathForImageFile;
- (id)pathForOriginalFile;
- (id)mainFileURL;
- (id)init;

@end

@interface CAMKeepDaemonAliveAssertion : NSObject
{
    NSObject<OS_xpc_object> *_keepaliveConnection;
}

+ (id)assertion;
- (void).cxx_destruct;
- (void)_setupHeartBeatForConnection:(id)arg1;
- (void)_tearDownConnection;
- (void)_setupConnection;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_unregisterForAppActiveNotifications;
- (void)_registerForAppActiveNotifications;
- (void)dealloc;
- (id)init;

@end

@interface CAMLegibilityViewHelper : NSObject
{
}

+ (id)imageForText:(id)arg1 font:(id)arg2 textAlignment:(long long)arg3 constrainedToSize:(struct CGSize)arg4;
+ (id)_imageFromLabel:(id)arg1 sizeToFit:(_Bool)arg2;
+ (id)newLegibilityViewWithSettings:(id)arg1 forLabel:(id)arg2 sizeToFit:(_Bool)arg3;

@end

@interface CAMLocationCaptureService : CAMCaptureService
{
}

@end

@interface CAMLocationController : NSObject <CLLocationManagerDelegate>
{
    _Bool _enabled;
    _Bool _headingEnabled;
    _Bool __monitoringLocation;
    CLLocation *_currentLocation;
    CLLocationManager *__locationManager;
    NSMutableArray *__assetsWaitingForLocation;
}

+ (id)_sharedGPSDatestampFormatter;
+ (id)_sharedGPSTimestampFormatter;
+ (void)setUsesEffectiveBundleIdentifier:(_Bool)arg1;
+ (_Bool)usesEffectiveBundleIdentifier;
+ (id)sharedInstance;
@property(readonly, nonatomic) NSMutableArray *_assetsWaitingForLocation; // @synthesize _assetsWaitingForLocation=__assetsWaitingForLocation;
@property(readonly, nonatomic) CLLocationManager *_locationManager; // @synthesize _locationManager=__locationManager;
@property(readonly, nonatomic, getter=_isMonitoringLocation) _Bool _monitoringLocation; // @synthesize _monitoringLocation=__monitoringLocation;
@property(readonly, nonatomic) CLLocation *currentLocation; // @synthesize currentLocation=_currentLocation;
@property(nonatomic, getter=isHeadingEnabled) _Bool headingEnabled; // @synthesize headingEnabled=_headingEnabled;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)_applicationStateChanged:(id)arg1;
- (void)addLocationToAssetWhenAvailable:(id)arg1;
- (_Bool)_updateLocationMetadataForAsset:(id)arg1;
- (_Bool)addLocationToMetadata:(id)arg1 withOrientation:(long long)arg2 device:(long long)arg3;
- (id)_currentLocationMetadataWithDeviceOrientation:(long long)arg1 forDevice:(long long)arg2;
- (void)_updateAssetsWaitingOnLocation;
- (void)_updateLocationMonitoring;
- (void)_stopMonitoringLocationUpdates;
- (void)_authorizeOrStartLocationManager;
- (void)_startMonitoringLocationUpdates;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMLowDiskSpaceAlertView : UIAlertView
{
}

+ (void)showUsageSettings;
- (id)initWithTitle:(id)arg1 message:(id)arg2 delegate:(id)arg3 cancelButtonTitle:(id)arg4 otherButtonTitles:(id)arg5;
- (id)initWithTitle:(id)arg1 message:(id)arg2 showSettingsButton:(_Bool)arg3 delegate:(id)arg4;

@end

@interface CAMModeDial : UIControl
{
    long long _orientation;
    id <CAMModeDialDataSource> _dataSource;
    unsigned long long _selectedIndex;
    NSMutableArray *__items;
    UIView *__dialContainerView;
    UIView *__itemsContainerView;
    UIImageView *__dotImageView;
    CAGradientLayer *__dialGradientLayer;
    struct CGRect *__tapZones;
    NSString *__contentSizeCategory;
    UIView *__dotTopMarginLayoutSpacer;
    UIView *__centeringDebugView;
}

@property(readonly, nonatomic) UIView *_centeringDebugView; // @synthesize _centeringDebugView=__centeringDebugView;
@property(readonly, nonatomic) UIView *_dotTopMarginLayoutSpacer; // @synthesize _dotTopMarginLayoutSpacer=__dotTopMarginLayoutSpacer;
@property(readonly, copy, nonatomic) NSString *_contentSizeCategory; // @synthesize _contentSizeCategory=__contentSizeCategory;
@property(readonly, nonatomic) struct CGRect *_tapZones; // @synthesize _tapZones=__tapZones;
@property(readonly, nonatomic) CAGradientLayer *_dialGradientLayer; // @synthesize _dialGradientLayer=__dialGradientLayer;
@property(readonly, nonatomic) UIImageView *_dotImageView; // @synthesize _dotImageView=__dotImageView;
@property(readonly, nonatomic) UIView *_itemsContainerView; // @synthesize _itemsContainerView=__itemsContainerView;
@property(readonly, nonatomic) UIView *_dialContainerView; // @synthesize _dialContainerView=__dialContainerView;
@property(readonly, nonatomic) NSMutableArray *_items; // @synthesize _items=__items;
@property(nonatomic) unsigned long long selectedIndex; // @synthesize selectedIndex=_selectedIndex;
@property(nonatomic) id <CAMModeDialDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property(readonly, nonatomic) long long orientation; // @synthesize orientation=_orientation;
- (void).cxx_destruct;
- (id)_dotImage;
- (id)_fontForOrientation:(long long)arg1;
- (id)_verticalDialMeshTransform;
- (id)_horizontalDialMeshTransform;
- (void)updateToContentSize:(id)arg1;
- (void)_updateContainerViewPositionFromSelectedIndex;
- (struct CGPoint)_containerPositionFromSelectedIndex;
- (struct CGRect)_frameForOrientation:(long long)arg1;
- (void)_layoutVerticalTapZones;
- (void)_layoutHorizontalTapZones;
- (double)_approximateWidthOfLabelAtIndex:(long long)arg1;
- (void)setSelectedIndex:(unsigned long long)arg1 animated:(_Bool)arg2;
- (void)reloadData;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)layoutSubviews;
- (void)_layoutForVerticalOrientation;
- (void)_layoutForHorizontalOrientation;
- (void)_setupHorizontalDotConstraints;
- (void)dealloc;
- (id)initWithOrientation:(long long)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMModeDialInitialization;

@end

@interface CAMModeDialItem : UIView
{
    _Bool _selected;
    NSString *_title;
    UIFont *_font;
    UILabel *__titleLabel;
    UILabel *__selectedTitleLabel;
}

@property(readonly, nonatomic) UILabel *_selectedTitleLabel; // @synthesize _selectedTitleLabel=__selectedTitleLabel;
@property(readonly, nonatomic) UILabel *_titleLabel; // @synthesize _titleLabel=__titleLabel;
@property(retain, nonatomic) UIFont *font; // @synthesize font=_font;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic, getter=isSelected) _Bool selected; // @synthesize selected=_selected;
- (void).cxx_destruct;
- (void)setSelected:(_Bool)arg1 animated:(_Bool)arg2;
- (void)tintColorDidChange;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMModeDialItemInitialization;

@end

@interface CAMPanoramaCaptureRequest : CAMCaptureRequest <NSCopying, NSMutableCopying>
{
    long long _deviceOrientation;
    long long _captureDevice;
}

@property(readonly, nonatomic) long long captureDevice; // @synthesize captureDevice=_captureDevice;
@property(readonly, nonatomic) long long deviceOrientation; // @synthesize deviceOrientation=_deviceOrientation;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface CAMMutablePanoramaCaptureRequest : CAMPanoramaCaptureRequest
{
}

- (void)setParameter:(id)arg1 forKey:(id)arg2;
@property(nonatomic) long long captureDevice;
@property(nonatomic) long long deviceOrientation;

@end

@interface CAMStillImageCaptureRequest : CAMCaptureRequest <NSCopying, NSMutableCopying>
{
    _Bool _transient;
    long long _deviceOrientation;
    long long _captureDevice;
    long long _flashMode;
    int _hdrMode;
    _Bool _usesStillImageStabilization;
    _Bool _wantsAudioForCapture;
    id <CAMStillImageCaptureRequestDelegate> _delegate;
}

@property(readonly, nonatomic) __weak id <CAMStillImageCaptureRequestDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) _Bool wantsAudioForCapture; // @synthesize wantsAudioForCapture=_wantsAudioForCapture;
@property(readonly, nonatomic) _Bool usesStillImageStabilization; // @synthesize usesStillImageStabilization=_usesStillImageStabilization;
@property(readonly, nonatomic) int hdrMode; // @synthesize hdrMode=_hdrMode;
@property(readonly, nonatomic) long long flashMode; // @synthesize flashMode=_flashMode;
@property(readonly, nonatomic) long long captureDevice; // @synthesize captureDevice=_captureDevice;
@property(readonly, nonatomic) long long deviceOrientation; // @synthesize deviceOrientation=_deviceOrientation;
@property(readonly, nonatomic, getter=isTransient) _Bool transient; // @synthesize transient=_transient;
- (void).cxx_destruct;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface CAMMutableStillImageCaptureRequest : CAMStillImageCaptureRequest
{
}

- (void)setParameter:(id)arg1 forKey:(id)arg2;
@property(nonatomic) __weak id <CAMStillImageCaptureRequestDelegate> delegate;
@property(nonatomic) _Bool wantsAudioForCapture;
@property(nonatomic) _Bool usesStillImageStabilization;
@property(nonatomic) int hdrMode;
@property(nonatomic) long long flashMode;
@property(nonatomic) long long captureDevice;
@property(nonatomic) long long deviceOrientation;
@property(nonatomic, getter=isTransient) _Bool transient;

@end

@interface CAMVideoCaptureRequest : CAMCaptureRequest <NSCopying, NSMutableCopying>
{
    long long _deviceOrientation;
    long long _captureDevice;
    long long _torchMode;
}

@property(readonly, nonatomic) long long torchMode; // @synthesize torchMode=_torchMode;
@property(readonly, nonatomic) long long captureDevice; // @synthesize captureDevice=_captureDevice;
@property(readonly, nonatomic) long long deviceOrientation; // @synthesize deviceOrientation=_deviceOrientation;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface CAMMutableVideoCaptureRequest : CAMVideoCaptureRequest
{
}

- (void)setParameter:(id)arg1 forKey:(id)arg2;
@property(nonatomic) long long torchMode;
@property(nonatomic) long long captureDevice;
@property(nonatomic) long long deviceOrientation;

@end

@interface CAMNebulaDaemonProxyManager : NSObject <CAMNebulaDaemonClientProtocol, CAMNebulaDaemonProtocol>
{
    NSObject<OS_dispatch_queue> *__queue;
    NSXPCConnection *__connection;
    long long __connectionCount;
}

+ (id)_clientProtocolInterface;
+ (id)_daemonProtocolInterface;
+ (id)sharedInstance;
@property(readonly, nonatomic) long long _connectionCount; // @synthesize _connectionCount=__connectionCount;
@property(readonly, nonatomic) NSXPCConnection *_connection; // @synthesize _connection=__connection;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_queue; // @synthesize _queue=__queue;
- (void).cxx_destruct;
- (void)forceStopCaptureWithReasons:(long long)arg1;
- (void)updatePendingWorkFromDiskForceEndLastSession:(_Bool)arg1;
- (void)stopNebulaWithUUID:(id)arg1;
- (void)finishCaptureForNebulaWithUUID:(id)arg1;
- (void)updateNebulaWithUUID:(id)arg1;
- (void)resumeNebulaWithUUID:(id)arg1;
- (void)startNebulaWithUUID:(id)arg1;
- (void)_getProxyForExecutingBlock:(CDUnknownBlockType)arg1;
- (void)_closeConnectionToDaemon;
- (void)_ensureConnectionToDaemon;
- (void)closeConnectionToDaemon;
- (void)ensureConnectionToDaemon;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMNebulaSecondaryState : NSObject <NSCoding>
{
    NSDate *_stopTime;
    long long _stopReasons;
    NSDate *_lastMovieWriteAttemptTime;
    long long _movieWriteAttemptsCount;
    long long _failedStateReadAttemptsCount;
}

+ (id)secondaryStateWithContentsOfFile:(id)arg1;
@property(nonatomic) long long failedStateReadAttemptsCount; // @synthesize failedStateReadAttemptsCount=_failedStateReadAttemptsCount;
@property(readonly, nonatomic) long long movieWriteAttemptsCount; // @synthesize movieWriteAttemptsCount=_movieWriteAttemptsCount;
@property(readonly, nonatomic) NSDate *lastMovieWriteAttemptTime; // @synthesize lastMovieWriteAttemptTime=_lastMovieWriteAttemptTime;
@property(nonatomic) long long stopReasons; // @synthesize stopReasons=_stopReasons;
@property(retain, nonatomic) NSDate *stopTime; // @synthesize stopTime=_stopTime;
- (void).cxx_destruct;
- (_Bool)writeToFile:(id)arg1;
- (void)notifyWillAttemptToWriteMovie;
- (_Bool)addStopReasons:(long long)arg1 stopTime:(id)arg2;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface CAMNebulaUtilities : NSObject
{
}

+ (id)locationFromJPEGAtPath:(id)arg1;

@end

@interface CAMPadApplicationSpec : CAMApplicationSpec
{
}

- (_Bool)shouldCreateTimerButton;
- (_Bool)shouldCreateAvalancheIndicator;
- (_Bool)shouldCreateZoomSlider;
- (_Bool)shouldCreatePanoramaView;
- (_Bool)shouldCreateHDRButton;
- (_Bool)shouldCreateModeDial;
- (_Bool)shouldCreateFiltersButton;
- (_Bool)shouldCreateShutterButton;
- (_Bool)shouldCreateImageWell;
- (_Bool)shouldCreateStillDuringVideo;
- (_Bool)shouldCreateFlipButton;
- (_Bool)shouldCreateElapsedTimeView;
- (_Bool)shouldCreateFlashButton;
- (_Bool)shouldCreateTopBar;
- (_Bool)shouldCreateBottomBar;
- (int)rotationStyle;
- (long long)modeDialOrientation;
- (long long)bottomBarOrientation;

@end

@interface CAMPadImagePickerSpec : CAMImagePickerSpec
{
}

- (_Bool)shouldCreateZoomSlider;
- (_Bool)shouldCreatePanoramaView;
- (_Bool)shouldCreateHDRButton;
- (_Bool)shouldCreateModeDial;
- (_Bool)shouldCreateFiltersButton;
- (_Bool)shouldCreateShutterButton;
- (_Bool)shouldCreateImageWell;
- (_Bool)shouldCreateStillDuringVideo;
- (_Bool)shouldCreateFlipButton;
- (_Bool)shouldCreateElapsedTimeView;
- (_Bool)shouldCreateFlashButton;
- (_Bool)shouldCreateTopBar;
- (_Bool)shouldCreateBottomBar;
- (long long)modeDialOrientation;
- (long long)bottomBarOrientation;

@end

@interface CAMPanoramaArrowView : UIView
{
    UIImageView *_arrowHead;
    UIView *_arrowTail;
    CAShapeLayer *_arrowTailPiecesLayer;
    struct CGPath *_currentTailPiecesPath;
    struct CGRect _arrowTailRect;
    double _currentNormalizedSpeed;
    double _tailBiggestDelta;
    double _tailBigDelta;
    double _tailMediumDelta;
    double _tailSmallDelta;
}

- (void).cxx_destruct;
- (void)animateArrowSpeedWithNormalizedSpeed:(double)arg1 duration:(double)arg2;
- (void)resetArrow;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_updateTailWithAnimationDuration:(double)arg1;
- (struct CGPath *)_newTailPiecesPathOfWidth:(double *)arg1;

@end

@interface CAMPanoramaCaptureParameters : NSObject
{
    double _speed;
    struct CGRect _cropRectangle;
}

@property(nonatomic) struct CGRect cropRectangle; // @synthesize cropRectangle=_cropRectangle;
@property(nonatomic) double speed; // @synthesize speed=_speed;

@end

@interface CAMPanoramaLabel : UIView <_UIBackdropViewObserver>
{
    _UIBackdropView *_backdropView;
    _UILegibilityView *_legibilityView;
    _UILegibilitySettingsProvider *_legibilitySettingsProvider;
    NSString *_text;
}

@property(copy, nonatomic) NSString *text; // @synthesize text=_text;
- (void).cxx_destruct;
- (void)backdropViewDidChange:(id)arg1;
- (void)updateToContentSize:(id)arg1;
- (void)layoutSubviews;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)_updateLegibilityView;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMPanoramaLevelView : UIView
{
    UIView *_lineView;
}

- (void).cxx_destruct;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMPanoramaView : UIView <UIAccelerometerDelegate>
{
    id <PLCameraPanoramaViewDelegate> _delegate;
    float _previewScale;
    _Bool _isCapturing;
    _Bool _isProcessing;
    int _direction;
    double _currentSpeed;
    UIImageView *_previewBackgroundImageView;
    UIView *_previewContainer;
    UIView *_previewMaskingContainer;
    CALayer *_previewLayer;
    UIImageView *_previewGhostImageView;
    CAMPanoramaLabel *_instructionalText;
    UIView *_instructionalTextBackground;
    CAMPanoramaArrowView *_arrowView;
    CAMPanoramaLevelView *_levelView;
    struct CGPoint _arrowViewBeginCenter;
    struct CGRect _initialArrowFrame;
    struct CGRect _currentArrowFrame;
    struct CGRect _initialMaskFrame;
    struct CGRect _currentMaskFrame;
    _Bool _isAnimatingTextIn;
    _Bool _isAnimatingTextOut;
    _Bool _showingFastText;
    _Bool _isAnimatingDirection;
    _Bool _showingMoveText;
    struct CGRect _visiblePreviewRect;
    _Bool _ignorePreviewUpdates;
    CADisplayLink *_displayLink;
    long long _frameCounter;
    CMMotionManager *_motionManager;
    NSOperationQueue *_accelerometerQueue;
    float _initialAcceleration;
    float _currentAcceleration;
    long long _deviceOrientation;
    long long _deferredDeviceOrientation;
}

@property(readonly, nonatomic) CALayer *panoramaPreviewLayer; // @synthesize panoramaPreviewLayer=_previewLayer;
@property(nonatomic) id <PLCameraPanoramaViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)updateToContentSize:(id)arg1;
- (double)_ghostWidth;
- (void)setDeviceOrientation:(long long)arg1;
- (void)updateUI;
- (void)_arrowWasTapped:(id)arg1;
- (void)setCaptureDirection:(int)arg1;
- (void)setMaskingContainerFrame:(struct CGRect)arg1 direction:(int)arg2;
- (void)showMoveDownText;
- (void)showMoveUpText;
- (void)_cancelDelayedShowMoveText;
- (void)showMoveDownTextAfterDelay;
- (void)showMoveUpTextAfterDelay;
- (void)_showMoveDownText;
- (void)_showMoveUpText;
- (void)showFastMovementText;
- (void)hideFastMovementTextAfterDelay;
- (void)_updateInstructionalText:(id)arg1;
- (void)_updateInstructionalTextBackground;
- (void)hideInstructionalText;
- (void)hideArrowTextAfterDelay;
- (void)_hideText;
- (void)updateWithParameters:(id)arg1;
- (void)panoramaWillStart;
- (void)showSavingHUD:(_Bool)arg1;
- (void)_createMotionManagerAndDisplayLink;
- (struct CGRect)visiblePreviewRect;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)viewWillDisappear;
- (void)viewWillAppear;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 centerYOffset:(double)arg2 panoramaPreviewScale:(float)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMPhoneApplicationSpec : CAMApplicationSpec
{
}

- (_Bool)shouldCreateTimerButton;
- (_Bool)shouldCreateSlalomIndicator;
- (_Bool)shouldCreateAvalancheIndicator;
- (_Bool)shouldCreateZoomSlider;
- (_Bool)shouldCreatePanoramaView;
- (_Bool)shouldCreateHDRButton;
- (_Bool)shouldCreateModeDial;
- (_Bool)shouldCreateFiltersButton;
- (_Bool)shouldCreateShutterButton;
- (_Bool)shouldCreateImageWell;
- (_Bool)shouldCreateStillDuringVideo;
- (_Bool)shouldCreateFlipButton;
- (_Bool)shouldCreateElapsedTimeView;
- (_Bool)shouldCreateFlashButton;
- (_Bool)shouldCreateTopBar;
- (_Bool)shouldCreateBottomBar;
- (long long)bottomBarOrientation;

@end

@interface CAMPhoneImagePickerSpec : CAMImagePickerSpec
{
}

- (_Bool)shouldCreateZoomSlider;
- (_Bool)shouldCreatePanoramaView;
- (_Bool)shouldCreateHDRButton;
- (_Bool)shouldCreateModeDial;
- (_Bool)shouldCreateFiltersButton;
- (_Bool)shouldCreateShutterButton;
- (_Bool)shouldCreateImageWell;
- (_Bool)shouldCreateStillDuringVideo;
- (_Bool)shouldCreateFlipButton;
- (_Bool)shouldCreateElapsedTimeView;
- (_Bool)shouldCreateFlashButton;
- (_Bool)shouldCreateTopBar;
- (_Bool)shouldCreateBottomBar;
- (_Bool)isPad;
- (_Bool)isPhone;

@end

@interface CAMPreviewView : UIView
{
    UIView *_maskingContainerView;
    UIView *_previewContainer;
    CAMVideoPreviewView *_videoPreviewView;
    UIView *_focusContainerView;
    CAMFocusPointView *_focusView;
    CAMFocusPointView *_exposureView;
    CAMFocusView *_continuousAutoFocusView;
    CAMFocusLockView *_lockFocusView;
    CAMFocusSplitAttachmentView *_splitFocusAndExposureAttachment;
    CAMFocusLockAttachmentView *_lockFocusAttachment;
    CAMFocusAttachmentView *_dismissFocusAttachment;
    CAMExposureBiasSlider *_exposureBiasSlider;
    UIView *_facesContainerView;
    NSMutableDictionary *_faceIDsToViews;
    UIView *_dimmingView;
    double _dimmingStrength;
    unsigned int _canShowFocus:1;
    unsigned int _controlsAreVisible:1;
    _Bool _square;
    _Bool _showSplitFocusAndExposureAttachment;
    _Bool _splitFocusAndExposure;
    _Bool _showLockFocusAttachment;
    _Bool _showExposureBiasSliderOnChange;
    _Bool _hideExposureBiasSlider;
    _Bool __showExposureBiasSlider;
    float _exposureBiasMin;
    float _exposureBiasMax;
    float _exposureBiasValue;
    int __exposureBiasSide;
    CAMCaptureController *__sharedCameraController;
    struct CGRect _lastFocusFrame;
    struct CGRect _lastExposureFrame;
}

@property(nonatomic) __weak CAMCaptureController *_sharedCameraController; // @synthesize _sharedCameraController=__sharedCameraController;
@property(nonatomic, setter=_setShowExposureBiasSlider:) _Bool _showExposureBiasSlider; // @synthesize _showExposureBiasSlider=__showExposureBiasSlider;
@property(readonly, nonatomic) int _exposureBiasSide; // @synthesize _exposureBiasSide=__exposureBiasSide;
@property(nonatomic) _Bool hideExposureBiasSlider; // @synthesize hideExposureBiasSlider=_hideExposureBiasSlider;
@property(nonatomic) _Bool showExposureBiasSliderOnChange; // @synthesize showExposureBiasSliderOnChange=_showExposureBiasSliderOnChange;
@property(nonatomic) float exposureBiasValue; // @synthesize exposureBiasValue=_exposureBiasValue;
@property(nonatomic) float exposureBiasMax; // @synthesize exposureBiasMax=_exposureBiasMax;
@property(nonatomic) float exposureBiasMin; // @synthesize exposureBiasMin=_exposureBiasMin;
@property(nonatomic) _Bool showLockFocusAttachment; // @synthesize showLockFocusAttachment=_showLockFocusAttachment;
@property(nonatomic) _Bool splitFocusAndExposure; // @synthesize splitFocusAndExposure=_splitFocusAndExposure;
@property(nonatomic) _Bool showSplitFocusAndExposureAttachment; // @synthesize showSplitFocusAndExposureAttachment=_showSplitFocusAndExposureAttachment;
@property(readonly, nonatomic) struct CGRect lastExposureFrame; // @synthesize lastExposureFrame=_lastExposureFrame;
@property(readonly, nonatomic) struct CGRect lastFocusFrame; // @synthesize lastFocusFrame=_lastFocusFrame;
@property(nonatomic, getter=isSquare) _Bool square; // @synthesize square=_square;
@property(nonatomic) double dimmingStrength; // @synthesize dimmingStrength=_dimmingStrength;
@property(readonly, retain, nonatomic) CAMVideoPreviewView *videoPreviewView; // @synthesize videoPreviewView=_videoPreviewView;
- (void).cxx_destruct;
- (void)_setExposureBiasSliderAlpha:(double)arg1 animationDuration:(double)arg2;
- (void)fadeOutFaceTrackingViews;
- (void)showFaceTrackingViewsForFaces:(id)arg1;
- (id)dismissFocusAttachment;
- (id)lockFocusAttachment;
- (void)_updateLockFocusAttachment;
- (_Bool)_shouldVendAttachment:(id)arg1;
- (id)splitFocusAndExposureAttachment;
- (void)_updateSplitFocusAndExposureAttachment;
- (void)setDimmingStrength:(double)arg1 duration:(double)arg2;
- (void)setExposureBiasSide:(int)arg1 animated:(_Bool)arg2;
- (void)setControlsAreVisible:(_Bool)arg1;
- (void)setFocusViewsHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setShouldShowFocus:(_Bool)arg1;
- (void)resetFocusViewFadeOutSuspensions;
- (void)resumeFocusViewFadeOutResetPending:(_Bool)arg1;
- (void)suspendFocusViewFadeOut;
- (void)dismissFocusViews;
- (_Bool)_shouldDismissFocusViewsOnFocusDidEnd;
- (void)updateFocusViewsLastInteractionTime;
- (void)focusDidEnd;
- (void)removeContinuousAutoFocusView;
- (void)showContinuousAutoFocusView;
- (void)removeAllFocusViewsLeavingActivePointViews:(_Bool)arg1;
- (void)motionEnded:(long long)arg1 withEvent:(id)arg2;
- (void)setFrame:(struct CGRect)arg1;
- (void)animateFocusLockScaleDown;
- (void)animateFocusLock;
- (void)showLockFocusAtPoint:(struct CGPoint)arg1;
- (id)exposureBiasSlider;
- (id)exposurePointView;
- (id)focusPointView;
- (void)updateExposurePoint:(struct CGPoint)arg1;
- (void)updateFocusPoint:(struct CGPoint)arg1;
- (struct CGPoint)currentExposurePoint;
- (struct CGPoint)currentFocusPoint;
@property(readonly, nonatomic) double lastExposureFadeOutTime;
@property(readonly, nonatomic) double lastFocusFadeOutTime;
- (void)_updateExposureFrameForPoint:(struct CGPoint)arg1;
- (void)_updateFocusFrameForPoint:(struct CGPoint)arg1;
- (void)_layoutExposureBiasSlider;
- (void)_attachAttachment:(id)arg1 toFocusView:(id)arg2 position:(int)arg3;
- (_Bool)_enableExposureBias;
- (_Bool)_allowDismissFocusAttachment;
- (_Bool)_allowFocusLockAttachments;
- (_Bool)_allowSplitFocusAndExposure;
- (void)_createExposureBiasSlider;
- (void)_showFocusAtPoint:(struct CGPoint)arg1 startAnimating:(_Bool)arg2;
- (void)showFocusAtPoint:(struct CGPoint)arg1;
- (void)_createFocusViewIfNeeded;
- (void)setSquare:(_Bool)arg1 animated:(_Bool)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMSecureWindow : UIWindow
{
}

+ (_Bool)_isSecure;

@end

@interface CAMShutterButton : UIButton
{
    _Bool _pulsing;
    _Bool _spinning;
    long long _mode;
    UIView *__outerView;
    UIImageView *__outerImageView;
    CAMTimelapseShutterRingView *__timelapseOuterView;
    UIView *__innerView;
    UIActivityIndicatorView *__progressActivityIndicatorView;
    struct CAMShutterButtonSpec _spec;
}

+ (id)shutterButtonWithSpec:(struct CAMShutterButtonSpec)arg1;
+ (id)tinyShutterButton;
+ (id)smallShutterButton;
+ (id)shutterButton;
@property(readonly, nonatomic) UIActivityIndicatorView *_progressActivityIndicatorView; // @synthesize _progressActivityIndicatorView=__progressActivityIndicatorView;
@property(readonly, nonatomic) UIView *_innerView; // @synthesize _innerView=__innerView;
@property(readonly, nonatomic) CAMTimelapseShutterRingView *_timelapseOuterView; // @synthesize _timelapseOuterView=__timelapseOuterView;
@property(readonly, nonatomic) UIImageView *_outerImageView; // @synthesize _outerImageView=__outerImageView;
@property(readonly, nonatomic) UIView *_outerView; // @synthesize _outerView=__outerView;
@property(nonatomic, getter=isSpinning) _Bool spinning; // @synthesize spinning=_spinning;
@property(nonatomic, getter=isPulsing) _Bool pulsing; // @synthesize pulsing=_pulsing;
@property(nonatomic) struct CAMShutterButtonSpec spec; // @synthesize spec=_spec;
@property(nonatomic) long long mode; // @synthesize mode=_mode;
- (void).cxx_destruct;
- (void)_updateSpinningAnimations;
- (void)_performModeSwitchAnimationFromMode:(long long)arg1 toMode:(long long)arg2 animated:(_Bool)arg3;
- (void)_performHighlightAnimation;
- (void)_updateOuterAndInnerLayers;
- (_Bool)_shouldUseTimelapseOuterViewForMode:(long long)arg1;
- (_Bool)_shouldUseImageViewForMode:(long long)arg1;
- (_Bool)_isStopMode:(long long)arg1;
- (id)_outerImageForMode:(long long)arg1;
- (double)_borderWidthForMode:(long long)arg1;
- (double)_cornerRadiusForMode:(long long)arg1;
- (struct CGSize)_sizeForMode:(long long)arg1;
- (id)_colorForMode:(long long)arg1;
- (double)_innerCircleDiameter;
- (void)_setSpec:(struct CAMShutterButtonSpec)arg1;
- (void)setMode:(long long)arg1 animated:(_Bool)arg2;
- (void)setHighlighted:(_Bool)arg1;
- (void)layoutSubviews;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (struct CGSize)intrinsicContentSize;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMShutterButtonInitialization;

@end

@interface CAMSlalomIndicatorView : UIView
{
    long long _framesPerSecond;
    UILabel *__framerateLabel;
}

@property(readonly, nonatomic) UILabel *_framerateLabel; // @synthesize _framerateLabel=__framerateLabel;
@property(nonatomic) long long framesPerSecond; // @synthesize framesPerSecond=_framesPerSecond;
- (void).cxx_destruct;
- (void)_updateFramerateLabel;
- (void)layoutSubviews;
- (struct UIEdgeInsets)alignmentRectInsets;
- (struct CGSize)intrinsicContentSize;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMSlalomIndicatorViewInitialization;

@end

@interface CAMStillImageCaptureResponse : CAMCaptureResponse
{
    _Bool _transient;
    _Bool _finalResponse;
    UIImage *_stillImageOriginalImage;
    NSData *_stillImageJPEGData;
    struct opaqueCMSampleBuffer *_stillImageOriginalSampleBuffer;
    UIImage *_stillImageUnfilteredPreviewImage;
    UIImage *_stillImageFilteredPreviewImage;
    NSMutableDictionary *_stillImageJob;
    CDUnknownBlockType _stillImageRequestEnqueuedBlock;
    CDUnknownBlockType _stillImageCompletionBlock;
    CIFilter *_effectFilter;
    NSString *_avalancheUUID;
    NSString *_timelapseDestinationPath;
}

@property(copy, nonatomic) NSString *timelapseDestinationPath; // @synthesize timelapseDestinationPath=_timelapseDestinationPath;
@property(copy, nonatomic) NSString *avalancheUUID; // @synthesize avalancheUUID=_avalancheUUID;
@property(copy, nonatomic) CIFilter *effectFilter; // @synthesize effectFilter=_effectFilter;
@property(copy, nonatomic) CDUnknownBlockType stillImageCompletionBlock; // @synthesize stillImageCompletionBlock=_stillImageCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType stillImageRequestEnqueuedBlock; // @synthesize stillImageRequestEnqueuedBlock=_stillImageRequestEnqueuedBlock;
@property(retain, nonatomic) NSMutableDictionary *stillImageJob; // @synthesize stillImageJob=_stillImageJob;
@property(retain, nonatomic) UIImage *stillImageFilteredPreviewImage; // @synthesize stillImageFilteredPreviewImage=_stillImageFilteredPreviewImage;
@property(retain, nonatomic) UIImage *stillImageUnfilteredPreviewImage; // @synthesize stillImageUnfilteredPreviewImage=_stillImageUnfilteredPreviewImage;
@property(nonatomic) struct opaqueCMSampleBuffer *stillImageOriginalSampleBuffer; // @synthesize stillImageOriginalSampleBuffer=_stillImageOriginalSampleBuffer;
@property(retain, nonatomic) NSData *stillImageJPEGData; // @synthesize stillImageJPEGData=_stillImageJPEGData;
@property(retain, nonatomic) UIImage *stillImageOriginalImage; // @synthesize stillImageOriginalImage=_stillImageOriginalImage;
@property(nonatomic, getter=isFinalResponse) _Bool finalResponse; // @synthesize finalResponse=_finalResponse;
@property(nonatomic, getter=isTransient) _Bool transient; // @synthesize transient=_transient;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSDictionary *stillImageMetadata;
@property(readonly, nonatomic) UIImage *thumbnailImage;
- (void)dealloc;
- (id)init;

@end

@interface CAMTimelapseBackendController : NSObject <CAMNebulaDaemonProtocol>
{
    _Bool __writingMovie;
    _Bool __capturing;
    NSMutableArray *__sessionContexts;
    NSObject<OS_dispatch_queue> *__workQueue;
    CAMTimelapseMovieWriter *__movieWriter;
    CAMTimelapseState *__currentState;
}

+ (id)sharedInstance;
@property(nonatomic, getter=_isCapturing, setter=_setCapturing:) _Bool _capturing; // @synthesize _capturing=__capturing;
@property(retain, nonatomic, setter=_setCurrentState:) CAMTimelapseState *_currentState; // @synthesize _currentState=__currentState;
@property(readonly, nonatomic) CAMTimelapseMovieWriter *_movieWriter; // @synthesize _movieWriter=__movieWriter;
@property(readonly, nonatomic) _Bool _writingMovie; // @synthesize _writingMovie=__writingMovie;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_workQueue; // @synthesize _workQueue=__workQueue;
@property(readonly, nonatomic) NSMutableArray *_sessionContexts; // @synthesize _sessionContexts=__sessionContexts;
- (void).cxx_destruct;
- (_Bool)_isCameraRunning;
- (void)handleClientDisconnection;
- (void)handleClientConnection:(id)arg1;
- (struct CGAffineTransform)_frameTransformForState:(id)arg1;
- (void)_notifyAssetsdOfIncomingMovieAtPath:(id)arg1 duration:(double)arg2 state:(id)arg3;
- (void)_movieWrittenToFilePath:(id)arg1 duration:(double)arg2 state:(id)arg3;
- (void)_createPlaceholderAssetForState:(id)arg1;
- (void)_reserveDummyFileForTimelapseUUID:(id)arg1 firstImageFilePath:(id)arg2;
- (void)_writeMovieForSessionContext:(id)arg1;
- (_Bool)_deleteItemAtPath:(id)arg1;
- (_Bool)_scheduleDelayedMovieWriteIfNeededForTimelapseUUID:(id)arg1;
- (void)_permanentlyFailTimelapseUUID:(id)arg1;
- (void)_performPendingWork;
- (id)_getOrCreateSessionContextForTimelapseUUID:(id)arg1;
- (void)_updateSessionContext:(id)arg1 withState:(id)arg2;
- (void)_updatePendingWorkFromDiskForceEndLastSession:(_Bool)arg1;
- (void)updatePendingWorkFromDiskForceEndLastSession:(_Bool)arg1;
- (void)stopNebulaWithUUID:(id)arg1;
- (void)finishCaptureForNebulaWithUUID:(id)arg1;
- (void)updateNebulaWithUUID:(id)arg1;
- (void)resumeNebulaWithUUID:(id)arg1;
- (void)startNebulaWithUUID:(id)arg1;
- (void)_dispatchToMainQueueWithBlock:(CDUnknownBlockType)arg1;
- (void)_dispatchToWorkQueueAfterDelay:(double)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)_dispatchToWorkQueueWithBlock:(CDUnknownBlockType)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMTimelapseBackendSessionContext : NSObject
{
    NSString *_timelapseUUID;
    CAMTimelapseState *_state;
    NSArray *_filesToDelete;
    NSArray *_filesToWrite;
}

@property(retain, nonatomic) NSArray *filesToWrite; // @synthesize filesToWrite=_filesToWrite;
@property(retain, nonatomic) NSArray *filesToDelete; // @synthesize filesToDelete=_filesToDelete;
@property(retain, nonatomic) CAMTimelapseState *state; // @synthesize state=_state;
@property(readonly, nonatomic) NSString *timelapseUUID; // @synthesize timelapseUUID=_timelapseUUID;
- (void).cxx_destruct;
- (id)description;
- (id)init;
- (id)initWithTimelapseUUID:(id)arg1;

@end

@interface CAMTimelapseController : NSObject <CAMStillImageCaptureRequestDelegate, UIAlertViewDelegate>
{
    _Bool __ignoringTimerCallbacksForTearDown;
    _Bool __ignoringTimerCallbacksWaitingForCaptureResponse;
    _Bool __backendRecoveryNeeded;
    _Bool __previewStarted;
    CAMTimelapseState *__state;
    NSObject<OS_dispatch_source> *__captureTimer;
    NSCountedSet *__inFlightTimelapseUUIDs;
    NSMutableSet *__pendingCompletedStates;
    CAMLowDiskSpaceAlertView *__diskSpaceAlert;
}

+ (void)recoverFromCrashIfNeededForceEndLastSession:(_Bool)arg1;
+ (id)_videoPreviewImageForTimelapseState:(id)arg1;
+ (id)createPlaceholderAssetResponseForTimelapseState:(id)arg1;
+ (id)sharedInstance;
@property(nonatomic, setter=_setPreviewStarted:) _Bool _previewStarted; // @synthesize _previewStarted=__previewStarted;
@property(nonatomic, setter=_setBackendRecoveryNeeded:) _Bool _backendRecoveryNeeded; // @synthesize _backendRecoveryNeeded=__backendRecoveryNeeded;
@property(readonly, nonatomic) CAMLowDiskSpaceAlertView *_diskSpaceAlert; // @synthesize _diskSpaceAlert=__diskSpaceAlert;
@property(readonly, nonatomic) NSMutableSet *_pendingCompletedStates; // @synthesize _pendingCompletedStates=__pendingCompletedStates;
@property(readonly, nonatomic) NSCountedSet *_inFlightTimelapseUUIDs; // @synthesize _inFlightTimelapseUUIDs=__inFlightTimelapseUUIDs;
@property(readonly, nonatomic) _Bool _ignoringTimerCallbacksWaitingForCaptureResponse; // @synthesize _ignoringTimerCallbacksWaitingForCaptureResponse=__ignoringTimerCallbacksWaitingForCaptureResponse;
@property(readonly, nonatomic) _Bool _ignoringTimerCallbacksForTearDown; // @synthesize _ignoringTimerCallbacksForTearDown=__ignoringTimerCallbacksForTearDown;
@property(readonly, nonatomic) NSObject<OS_dispatch_source> *_captureTimer; // @synthesize _captureTimer=__captureTimer;
@property(readonly, nonatomic) CAMTimelapseState *_state; // @synthesize _state=__state;
- (void).cxx_destruct;
- (void)_updateLocationIfNecessary;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)_dismissDiskSpaceAlert;
- (void)_notifyInsufficientDiskSpaceForContinuingCapture;
- (void)_notifyInsufficientDiskSpaceForStartingCaptureWithNeededBytes:(long long)arg1 availableBytes:(long long)arg2;
- (void)_previewStarted:(id)arg1;
- (void)_sessionRuntimeErrored:(id)arg1;
- (void)_sessionStarted:(id)arg1;
- (void)_deviceStarted:(id)arg1;
- (void)_resetIgnoringTimerCallbacksWaitingForCaptureResponse;
- (id)_createPlaceholderAssetForTimelapseState:(id)arg1;
- (void)captureController:(id)arg1 didFinishWriteForResponse:(id)arg2 forStillImageRequest:(id)arg3 error:(id)arg4;
- (void)captureController:(id)arg1 didGenerateResponse:(id)arg2 forStillImageRequest:(id)arg3 error:(id)arg4;
- (void)_saveStateToDisk:(id)arg1;
- (void)_updateFocusLensPosition:(float)arg1 forTimelapseUUID:(id)arg2 forceUpdate:(_Bool)arg3;
- (void)_updateFocusAndExposureForStopCapturing;
- (void)_updateFocusAndExposureForStartCapturing;
- (_Bool)_enqueueCaptureRequest;
- (void)_captureTimerFired;
- (void)_teardownCaptureTimer;
- (void)_startCaptureTimer;
@property(readonly, nonatomic) NSDate *captureStartTime;
- (_Bool)_reserveDiskSpaceForTimelapseUUID:(id)arg1;
- (void)_restoreCaptureStateFromDisk;
- (void)_setNewCaptureState;
- (void)_stopCapturingWithReasons:(long long)arg1;
- (_Bool)_startCapturing;
- (void)stopCapturingWithReasons:(long long)arg1;
- (_Bool)startCapturing;
@property(readonly, nonatomic, getter=isCapturing) _Bool capturing;
- (void)_prepareForTimelapseCapture;
- (void)_triggerBackendCrashRecoveryIfNeeded;
- (void)restoreConfiguration;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAMTimelapseDiskUtilities : NSObject
{
}

+ (_Bool)hasPendingWork;
+ (_Bool)removeDummyFileForTimelapseUUID:(id)arg1;
+ (_Bool)reserveDummyFileForTimelapseUUID:(id)arg1 width:(long long)arg2 height:(long long)arg3;
+ (id)dummyFilePathForTimelapseUUID:(id)arg1;
+ (id)dummyFileName;
+ (id)sortedArrayFromFilePathDictionary:(id)arg1 reverse:(_Bool)arg2;
+ (id)readFrameFilePathsForTimelapseUUID:(id)arg1;
+ (id)readSortedStatesFromDiskMergeSecondaryState:(_Bool)arg1;
+ (id)updateSecondaryStateForTimelapseUUID:(id)arg1 forStateReadSuccessfully:(_Bool)arg2;
+ (id)updateSecondaryStateForMovieWriteAttemptForTimelapseUUID:(id)arg1;
+ (id)updateSecondaryStateForTimelapseUUID:(id)arg1 withStopReasons:(long long)arg2 stopTime:(id)arg3;
+ (_Bool)writeSecondaryStateToDisk:(id)arg1 forTimelapseUUID:(id)arg2;
+ (id)readSecondaryStateForTimelapseUUID:(id)arg1;
+ (id)secondaryStateFilePathForTimelapseUUID:(id)arg1;
+ (_Bool)writeStateToDisk:(id)arg1 createDirectoryIfNeeded:(_Bool)arg2;
+ (id)readStateForTimelapseUUID:(id)arg1 mergeSecondaryState:(_Bool)arg2;
+ (id)stateFilePathForTimelapseUUID:(id)arg1;
+ (id)timelapseUUIDsOnDisk;
+ (long long)frameIndexFromImageFileName:(id)arg1;
+ (id)fileNameForImageFrameIndex:(long long)arg1;
+ (id)directoryPathForTimelapseUUID:(id)arg1;
+ (id)timelapseDirectoryPathCreateIfNeeded:(_Bool)arg1;
+ (id)timelapseDirectoryPath;
+ (id)secondaryStateFileName;
+ (id)stateFileName;

@end

@interface CAMTimelapseJPEGReader : NSObject
{
}

+ (struct CGImage *)createCGImageFromData:(id)arg1 applyTransform:(_Bool)arg2 maxPixelSize:(long long)arg3 useBGRA:(_Bool)arg4;
+ (struct __CVBuffer *)createPixelBufferFromData:(id)arg1 applyTransform:(_Bool)arg2 maxPixelSize:(long long)arg3 useBGRA:(_Bool)arg4;
+ (id)_decodeOptionsWithMaxPixelSize:(long long)arg1 applyTransform:(_Bool)arg2 useBGRA:(_Bool)arg3;
+ (id)newDataFromFilePath:(id)arg1;

@end

@interface CAMTimelapseMovieWriter : NSObject
{
    NSArray *__frameFilePaths;
    long long __nextReadFileIndex;
    long long __residentImageDataCount;
    long long __residentPixelBufferCount;
    NSMutableDictionary *__availableImageData;
    NSMutableDictionary *__availablePixelBuffers;
    NSMutableSet *__inFlightReadFrameIndexes;
    NSObject<OS_dispatch_queue> *__synchronizationQueue;
    NSOperationQueue *__imageReadQueue;
    NSOperationQueue *__imageDecodeQueue;
    NSObject<OS_dispatch_queue> *__movieWritingQueue;
    AVAssetWriter *__writer;
    AVAssetWriterInput *__videoInput;
    AVAssetWriterInputPixelBufferAdaptor *__pixelBufferAdaptor;
    long long __framesPerSecond;
    long long __nextWriteFileIndex;
    long long __currentOutputFrameIndex;
    CDUnknownBlockType __completion;
}

@property(readonly, copy, nonatomic) CDUnknownBlockType _completion; // @synthesize _completion=__completion;
@property(readonly, nonatomic) long long _currentOutputFrameIndex; // @synthesize _currentOutputFrameIndex=__currentOutputFrameIndex;
@property(readonly, nonatomic) long long _nextWriteFileIndex; // @synthesize _nextWriteFileIndex=__nextWriteFileIndex;
@property(readonly, nonatomic) long long _framesPerSecond; // @synthesize _framesPerSecond=__framesPerSecond;
@property(readonly, nonatomic) AVAssetWriterInputPixelBufferAdaptor *_pixelBufferAdaptor; // @synthesize _pixelBufferAdaptor=__pixelBufferAdaptor;
@property(readonly, nonatomic) AVAssetWriterInput *_videoInput; // @synthesize _videoInput=__videoInput;
@property(readonly, nonatomic) AVAssetWriter *_writer; // @synthesize _writer=__writer;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_movieWritingQueue; // @synthesize _movieWritingQueue=__movieWritingQueue;
@property(readonly, nonatomic) NSOperationQueue *_imageDecodeQueue; // @synthesize _imageDecodeQueue=__imageDecodeQueue;
@property(readonly, nonatomic) NSOperationQueue *_imageReadQueue; // @synthesize _imageReadQueue=__imageReadQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_synchronizationQueue; // @synthesize _synchronizationQueue=__synchronizationQueue;
@property(readonly, nonatomic) NSMutableSet *_inFlightReadFrameIndexes; // @synthesize _inFlightReadFrameIndexes=__inFlightReadFrameIndexes;
@property(readonly, nonatomic) NSMutableDictionary *_availablePixelBuffers; // @synthesize _availablePixelBuffers=__availablePixelBuffers;
@property(readonly, nonatomic) NSMutableDictionary *_availableImageData; // @synthesize _availableImageData=__availableImageData;
@property(readonly, nonatomic) long long _residentPixelBufferCount; // @synthesize _residentPixelBufferCount=__residentPixelBufferCount;
@property(readonly, nonatomic) long long _residentImageDataCount; // @synthesize _residentImageDataCount=__residentImageDataCount;
@property(readonly, nonatomic) long long _nextReadFileIndex; // @synthesize _nextReadFileIndex=__nextReadFileIndex;
@property(readonly, nonatomic) NSArray *_frameFilePaths; // @synthesize _frameFilePaths=__frameFilePaths;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_finishMovieWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)_appendPixelBuffer:(struct __CVBuffer *)arg1;
- (void)_setMetadataOnVideoTrackAssetWriterInput:(id)arg1;
- (_Bool)_startWritingWithOutputPath:(id)arg1 width:(long long)arg2 height:(long long)arg3 videoFormatDescription:(struct opaqueCMFormatDescription *)arg4 transform:(struct CGAffineTransform)arg5 framesPerSecond:(long long)arg6 frameCount:(long long)arg7 videoMetadata:(id)arg8;
- (struct CGSize)_desiredOutputSizeForFrameSize:(struct CGSize)arg1;
- (void)_enqueueNextWrite;
- (void)_enqueueNextDecode;
- (void)_enqueueNextRead;
- (void)writeMovieFromFiles:(id)arg1 startDate:(id)arg2 location:(id)arg3 outputPath:(id)arg4 transform:(struct CGAffineTransform)arg5 framesPerSecond:(long long)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (void)_reset;
- (id)init;

@end

@interface CAMTimelapseSettings : NSObject
{
    double _initialCaptureTimeInterval;
    double _maxOutputFPS;
    double _maxOutputLength;
}

+ (id)sharedInstance;
@property(readonly, nonatomic) double maxOutputLength; // @synthesize maxOutputLength=_maxOutputLength;
@property(readonly, nonatomic) double maxOutputFPS; // @synthesize maxOutputFPS=_maxOutputFPS;
@property(readonly, nonatomic) double initialCaptureTimeInterval; // @synthesize initialCaptureTimeInterval=_initialCaptureTimeInterval;
@property(readonly, nonatomic) long long maxFailedStateReadAttempts;
- (double)waitTimeBeforeNextWriteForNumberOfPreviousAttempts:(long long)arg1;
@property(readonly, nonatomic) long long maxMovieWriteAttempts;
- (id)outputSettingsPresetForWidth:(long long)arg1 height:(long long)arg2;
- (long long)minAvailableBytesNeededForCaptureForWidth:(long long)arg1 height:(long long)arg2;
- (long long)maxMovieFileLengthForWidth:(long long)arg1 height:(long long)arg2;
- (long long)averageMovieBitrateForWidth:(long long)arg1 height:(long long)arg2;
- (double)outputFPSForFrameCount:(long long)arg1;
@property(readonly, nonatomic) long long maxOutputFrames;
- (id)init;

@end

@interface CAMTimelapseShutterRingView : UIView
{
    _Bool _animating;
    CALayer *__smallTickLayer;
    CALayer *__largeTickLayer;
    CAReplicatorLayer *__smallTickReplicatorLayer;
    CAReplicatorLayer *__largeTickReplicatorLayer;
    CALayer *__timerHandLayer;
    CALayer *__timerHandParentLayer;
}

@property(readonly, nonatomic) CALayer *_timerHandParentLayer; // @synthesize _timerHandParentLayer=__timerHandParentLayer;
@property(readonly, nonatomic) CALayer *_timerHandLayer; // @synthesize _timerHandLayer=__timerHandLayer;
@property(readonly, nonatomic) CAReplicatorLayer *_largeTickReplicatorLayer; // @synthesize _largeTickReplicatorLayer=__largeTickReplicatorLayer;
@property(readonly, nonatomic) CAReplicatorLayer *_smallTickReplicatorLayer; // @synthesize _smallTickReplicatorLayer=__smallTickReplicatorLayer;
@property(readonly, nonatomic) CALayer *_largeTickLayer; // @synthesize _largeTickLayer=__largeTickLayer;
@property(readonly, nonatomic) CALayer *_smallTickLayer; // @synthesize _smallTickLayer=__smallTickLayer;
@property(nonatomic, getter=isAnimating) _Bool animating; // @synthesize animating=_animating;
- (void).cxx_destruct;
- (double)_rotationZFromTransform:(struct CATransform3D)arg1;
- (void)_addStopAnimations;
- (void)_addStartAnimations;
- (_Bool)_shouldUseAnimations;
- (void)_removeStopAnimations;
- (void)_removeStartAnimations;
- (void)_stopAnimating;
- (void)_startAnimating;
- (void)layoutSublayersOfLayer:(id)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMTimelapseState : NSObject <NSCoding, NSCopying>
{
    _Bool _usingFrontCamera;
    _Bool _allFramesWritten;
    int _captureOrientation;
    float _focusLensPosition;
    NSString *_timelapseUUID;
    NSDate *_startTime;
    CLLocation *_startLocation;
    NSDate *_lastFrameResponseTime;
    NSDate *_stopTime;
    long long _stopReasons;
    double _captureTimeInterval;
    long long _frameIndexStride;
    long long _nextFrameIndex;
}

+ (id)stateWithContentsOfFile:(id)arg1;
+ (double)maxTimeToWaitForWrittenFrameAfterStop;
@property(nonatomic) float focusLensPosition; // @synthesize focusLensPosition=_focusLensPosition;
@property(readonly, nonatomic) long long nextFrameIndex; // @synthesize nextFrameIndex=_nextFrameIndex;
@property(readonly, nonatomic) long long frameIndexStride; // @synthesize frameIndexStride=_frameIndexStride;
@property(readonly, nonatomic) double captureTimeInterval; // @synthesize captureTimeInterval=_captureTimeInterval;
@property(nonatomic) _Bool allFramesWritten; // @synthesize allFramesWritten=_allFramesWritten;
@property(nonatomic) long long stopReasons; // @synthesize stopReasons=_stopReasons;
@property(retain, nonatomic) NSDate *stopTime; // @synthesize stopTime=_stopTime;
@property(retain, nonatomic) NSDate *lastFrameResponseTime; // @synthesize lastFrameResponseTime=_lastFrameResponseTime;
@property(retain, nonatomic) CLLocation *startLocation; // @synthesize startLocation=_startLocation;
@property(retain, nonatomic) NSDate *startTime; // @synthesize startTime=_startTime;
@property(nonatomic) int captureOrientation; // @synthesize captureOrientation=_captureOrientation;
@property(nonatomic, getter=isUsingFrontCamera) _Bool usingFrontCamera; // @synthesize usingFrontCamera=_usingFrontCamera;
@property(retain, nonatomic) NSString *timelapseUUID; // @synthesize timelapseUUID=_timelapseUUID;
- (void).cxx_destruct;
@property(readonly, nonatomic) long long connectionMode;
- (_Bool)writeToFile:(id)arg1 createDirectoryIfNeeded:(_Bool)arg2;
- (void)forceCompleted;
- (_Bool)isReadyForWritingMovie;
- (_Bool)canContinueCapture;
- (_Bool)addStopReasons:(long long)arg1 stopTime:(id)arg2;
- (id)filePathForNextFrameIndex;
- (_Bool)incrementFrameIndex;
- (_Bool)isEqualToState:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (_Bool)mergeSecondaryState:(id)arg1;

@end

@interface CAMTimerButton : CAMExpandableMenuButton
{
    _Bool _hideOffWhenCollapsed;
    id <CAMTimerButtonDelegate> _delegate;
    UIImageView *__glyphView;
}

@property(readonly, nonatomic) UIImageView *_glyphView; // @synthesize _glyphView=__glyphView;
@property(nonatomic) _Bool hideOffWhenCollapsed; // @synthesize hideOffWhenCollapsed=_hideOffWhenCollapsed;
@property(nonatomic) __weak id <CAMTimerButtonDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)hiddenIndexesWhileCollapsed;
- (id)headerView;
- (id)titleForMenuItemAtIndex:(long long)arg1;
- (long long)numberOfMenuItems;
- (void)setDuration:(long long)arg1 animated:(_Bool)arg2;
@property(nonatomic) long long duration;
- (id)initWithExpansionOrientation:(long long)arg1;
- (void)_commonCAMTimerButtonInitialization;

@end

@interface CAMTimerIndicatorView : UIView
{
    _Bool __performingStyleAnimation;
    long long _style;
    UIView *__dimmingView;
    UILabel *__countdownLabel;
    long long __startingTicks;
    long long __remainingTicks;
    long long __labelOrientation;
    CAMAnimationDelegate *__animationDelegate;
    long long __deferredLabelOrientation;
}

@property(nonatomic, setter=_setDeferredOrientation:) long long _deferredLabelOrientation; // @synthesize _deferredLabelOrientation=__deferredLabelOrientation;
@property(nonatomic, getter=_isPerformingStyleAnimation, setter=_setPerformingStyleAnimation:) _Bool _performingStyleAnimation; // @synthesize _performingStyleAnimation=__performingStyleAnimation;
@property(readonly, nonatomic) CAMAnimationDelegate *_animationDelegate; // @synthesize _animationDelegate=__animationDelegate;
@property(nonatomic, setter=_setLabelOrientation:) long long _labelOrientation; // @synthesize _labelOrientation=__labelOrientation;
@property(readonly, nonatomic) long long _remainingTicks; // @synthesize _remainingTicks=__remainingTicks;
@property(readonly, nonatomic) long long _startingTicks; // @synthesize _startingTicks=__startingTicks;
@property(readonly, nonatomic) UILabel *_countdownLabel; // @synthesize _countdownLabel=__countdownLabel;
@property(readonly, nonatomic) UIView *_dimmingView; // @synthesize _dimmingView=__dimmingView;
@property(nonatomic) long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (void)_handleOrientationChange:(long long)arg1;
- (void)cam_rotateWithDeviceOrientation:(long long)arg1 animated:(_Bool)arg2;
- (void)_addDimmingAnimationForTick:(long long)arg1;
- (id)_dimmingAnimationForTick:(long long)arg1;
- (void)_transitionDimmingViewFromStyle:(long long)arg1;
- (id)_finalDimmingAnimation;
- (void)_addDecrementAnimationForTick:(long long)arg1;
- (id)_decrementAnimationForTick:(long long)arg1;
- (void)_updateCountdownLabelWithTicksRemaining;
- (void)resetWithNumberOfTicks:(long long)arg1;
- (void)decrement;
- (void)stopCountdown;
- (void)startCountdownWithAnimationDelegate:(id)arg1;
- (void)_updateFromChangeToStyle:(long long)arg1 animated:(_Bool)arg2;
- (id)_fontForStyle:(long long)arg1;
- (void)setStyle:(long long)arg1 animated:(_Bool)arg2;
- (void)setFont:(id)arg1;
- (id)font;
- (void)_layoutCountdownLabelForStyle:(long long)arg1;
- (void)_layoutCountdownLabelForLargeStyle;
- (void)_layoutCountdownLabelForSmallStyle;
- (struct CGRect)_landscapeSwapBoundsCoordinates:(struct CGRect)arg1;
- (void)layoutSubviews;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMTimerIndicatorViewInitialization;

@end

@interface CAMTopBar : UIView <CAMExpandableMenuButtonDelegate>
{
    _Bool __flashButtonExpanded;
    _Bool __HDRButtonExpanded;
    _Bool __timerButtonExpanded;
    long long _style;
    long long _backgroundStyle;
    id <CAMTopBarDelegate> _delegate;
    CAMFlashButton *_flashButton;
    CAMElapsedTimeView *_elapsedTimeView;
    CAMHDRButton *_HDRButton;
    CAMFlipButton *_flipButton;
    CAMTimerButton *_timerButton;
    long long _orientation;
    UIView *__backgroundView;
    NSMutableArray *__allowedControls;
    CAMExpandableMenuButton *__expandedMenuButton;
    UIView *__flipButtonTopLayoutSpacer;
    struct UIEdgeInsets __expandedMenuButtonTappableInsets;
}

@property(readonly, nonatomic) UIView *_flipButtonTopLayoutSpacer; // @synthesize _flipButtonTopLayoutSpacer=__flipButtonTopLayoutSpacer;
@property(nonatomic, setter=_setExpandedMenuButtonTappableInsets:) struct UIEdgeInsets _expandedMenuButtonTappableInsets; // @synthesize _expandedMenuButtonTappableInsets=__expandedMenuButtonTappableInsets;
@property(retain, nonatomic, setter=_setExpandedMenuButton:) CAMExpandableMenuButton *_expandedMenuButton; // @synthesize _expandedMenuButton=__expandedMenuButton;
@property(nonatomic, getter=_isTimerButtonExpanded, setter=_setTimerButtonExpanded:) _Bool _timerButtonExpanded; // @synthesize _timerButtonExpanded=__timerButtonExpanded;
@property(nonatomic, getter=_isHDRButtonExpanded, setter=_setHDRButtonExpanded:) _Bool _HDRButtonExpanded; // @synthesize _HDRButtonExpanded=__HDRButtonExpanded;
@property(nonatomic, getter=_isFlashButtonExpanded, setter=_setFlashButtonExpanded:) _Bool _flashButtonExpanded; // @synthesize _flashButtonExpanded=__flashButtonExpanded;
@property(readonly, nonatomic) NSMutableArray *_allowedControls; // @synthesize _allowedControls=__allowedControls;
@property(readonly, nonatomic) UIView *_backgroundView; // @synthesize _backgroundView=__backgroundView;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(retain, nonatomic) CAMTimerButton *timerButton; // @synthesize timerButton=_timerButton;
@property(retain, nonatomic) CAMFlipButton *flipButton; // @synthesize flipButton=_flipButton;
@property(retain, nonatomic) CAMHDRButton *HDRButton; // @synthesize HDRButton=_HDRButton;
@property(retain, nonatomic) CAMElapsedTimeView *elapsedTimeView; // @synthesize elapsedTimeView=_elapsedTimeView;
@property(retain, nonatomic) CAMFlashButton *flashButton; // @synthesize flashButton=_flashButton;
@property(nonatomic) id <CAMTopBarDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long backgroundStyle; // @synthesize backgroundStyle=_backgroundStyle;
@property(nonatomic) long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (void)expandMenuButton:(id)arg1 animated:(_Bool)arg2;
- (struct CGRect)expandedFrameForMenuButton:(id)arg1;
- (void)collapseMenuButton:(id)arg1 animated:(_Bool)arg2;
- (struct CGRect)collapsedFrameForMenuButton:(id)arg1;
- (void)configureForMode:(long long)arg1;
- (id)_allowedControlsForTimelapseMode;
- (id)_allowedControlsForPanoramaMode;
- (id)_allowedControlsForVideoMode;
- (id)_allowedControlsForStillImageMode;
- (void)layoutSubviews;
- (void)_layoutControls:(id)arg1 apply:(_Bool)arg2 withExpandedMenuButton:(id)arg3 collapsingMenuButton:(id)arg4 collapsingFrame:(struct CGRect *)arg5;
- (void)_layoutFloatingRecordingStyle;
- (void)_layoutFloatingStyle;
- (void)_layoutDefaultStyle;
- (void)_layoutDefaultMenuButton:(id)arg1;
- (struct UIEdgeInsets)_backgroundEdgeInsetsForStyle:(long long)arg1;
- (void)_setupConstraintsForFloatingRecordingStyle;
- (void)_setupFloatingRecordingElapsedTimeViewConstraints;
- (void)_setupFloatingRecordingBackgroundConstraints;
- (void)_setupConstraintsForFloatingStyle;
- (void)_setupFloatingFlipButtonConstraints;
- (void)_setupFloatingBackgroundConstraints;
- (void)_setupConstraintsForDefaultStyle;
- (void)_setupDefaultElapsedTimeViewConstraints;
- (void)_setupDefaultFlipButtonConstraints;
- (void)_setupDefaultBackgroundConstraints;
- (_Bool)_shouldHideFlipButton;
- (_Bool)_shouldHideTimerButton;
- (_Bool)_shouldHideFlashButton;
- (_Bool)_shouldHideHDRButton;
- (_Bool)_shouldHideElapsedTimeView;
- (_Bool)_buttonsExpandHorizontally;
- (void)_updateHiddenViewsForButtonExpansionAnimated:(_Bool)arg1;
- (void)_updateBackgroundStyleAnimated:(_Bool)arg1;
- (void)_updateStyleAnimated:(_Bool)arg1;
@property(readonly, nonatomic, getter=isFloating) _Bool floating;
- (void)setBackgroundStyle:(long long)arg1 animated:(_Bool)arg2;
- (void)setStyle:(long long)arg1 animated:(_Bool)arg2;
- (struct CGSize)intrinsicContentSize;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMTopBarInitialization;

@end

@interface CAMTorchPattern : NSObject
{
    float _torchLevel;
    double _startTime;
    long long __type;
    CAAnimationGroup *__animationGroup;
    double __lastUpdateTime;
}

@property(readonly, nonatomic) double _lastUpdateTime; // @synthesize _lastUpdateTime=__lastUpdateTime;
@property(readonly, nonatomic) CAAnimationGroup *_animationGroup; // @synthesize _animationGroup=__animationGroup;
@property(readonly, nonatomic) long long _type; // @synthesize _type=__type;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(readonly, nonatomic) float torchLevel; // @synthesize torchLevel=_torchLevel;
- (void).cxx_destruct;
- (void)updateAtTime:(double)arg1;
- (void)_updateAnimationGroup;
- (id)_doubleBlinkAnimationGroup;
- (id)_blinkAnimationGroup;
- (id)_blinkAnimationWithBeginTime:(double)arg1 duration:(double)arg2 repeatCount:(long long)arg3;
- (id)_longPatternAnimationGroup;
- (id)_shortPatternAnimationGroup;
- (id)_patternAnimationWithBeginTime:(double)arg1 duration:(double)arg2 repeatCount:(long long)arg3;
- (id)initWithType:(long long)arg1;
- (id)init;

@end

@interface CAMTorchPatternController : NSObject
{
    _Bool __performing;
    double _stepInterval;
    AVCaptureDevice *_captureDevice;
    CAMTorchPattern *__currentPattern;
    double __startTime;
    CADisplayLink *__displayLink;
}

@property(readonly, nonatomic) CADisplayLink *_displayLink; // @synthesize _displayLink=__displayLink;
@property(readonly, nonatomic) double _startTime; // @synthesize _startTime=__startTime;
@property(readonly, nonatomic) CAMTorchPattern *_currentPattern; // @synthesize _currentPattern=__currentPattern;
@property(nonatomic, setter=_setPerforming:) _Bool _performing; // @synthesize _performing=__performing;
@property(retain, nonatomic) AVCaptureDevice *captureDevice; // @synthesize captureDevice=_captureDevice;
@property(nonatomic) double stepInterval; // @synthesize stepInterval=_stepInterval;
- (void).cxx_destruct;
- (void)displayLinkFired:(id)arg1;
- (void)doubleBlink;
- (void)blink;
- (void)_applyTorchLevel:(float)arg1;
- (void)_resetTorchLevel;
- (void)stopPerformingPattern;
- (void)startPerformingPattern:(id)arg1;
- (id)init;

@end

@interface CAMVideoCaptureResponse : CAMCaptureResponse
{
    _Bool _unplayable;
    _Bool _didCompleteUnexpectedly;
    short _assetSubtype;
    int _recordingStoppedReason;
    NSString *_videoCapturePath;
    UIImage *_videoPreviewImage;
    double _duration;
}

+ (double)minimumVideoCaptureDuration;
@property(nonatomic) _Bool didCompleteUnexpectedly; // @synthesize didCompleteUnexpectedly=_didCompleteUnexpectedly;
@property(nonatomic, getter=isUnplayable) _Bool unplayable; // @synthesize unplayable=_unplayable;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) short assetSubtype; // @synthesize assetSubtype=_assetSubtype;
@property(retain, nonatomic) UIImage *videoPreviewImage; // @synthesize videoPreviewImage=_videoPreviewImage;
@property(nonatomic) int recordingStoppedReason; // @synthesize recordingStoppedReason=_recordingStoppedReason;
@property(copy, nonatomic) NSString *videoCapturePath; // @synthesize videoCapturePath=_videoCapturePath;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isSuccessful) _Bool successful;
- (id)init;

@end

@interface CAMVideoPreviewView : UIView
{
    NSString *_videoGravity;
    _Bool _disableLayoutForPreviewView;
    _Bool _disableLayoutForEffectsFullsizeView;
    _Bool _disableLayoutForEffectsGridViews;
    _Bool _square;
    AVCaptureVideoPreviewLayer *_previewLayer;
    long long _orientation;
    UIView *_previewLayerView;
    CAMEffectsFullsizeView *_effectsFullsizeView;
    CAMEffectsGridView *_effectsGridView;
    CAMEffectsGridLabelsView *_effectsGridLabelsView;
    UIView *_fadeOutView;
}

@property(nonatomic, getter=isSquare) _Bool square; // @synthesize square=_square;
@property(nonatomic, getter=isDisabledLayoutForEffectsGridViews) _Bool disableLayoutForEffectsGridViews; // @synthesize disableLayoutForEffectsGridViews=_disableLayoutForEffectsGridViews;
@property(nonatomic, getter=isDisabledLayoutForEffectsFullsizeView) _Bool disableLayoutForEffectsFullsizeView; // @synthesize disableLayoutForEffectsFullsizeView=_disableLayoutForEffectsFullsizeView;
@property(nonatomic, getter=isDisabledLayoutForPreviewView) _Bool disableLayoutForPreviewView; // @synthesize disableLayoutForPreviewView=_disableLayoutForPreviewView;
@property(readonly, retain, nonatomic) UIView *fadeOutView; // @synthesize fadeOutView=_fadeOutView;
@property(readonly, retain, nonatomic) CAMEffectsGridLabelsView *effectsGridLabelsView; // @synthesize effectsGridLabelsView=_effectsGridLabelsView;
@property(readonly, retain, nonatomic) CAMEffectsGridView *effectsGridView; // @synthesize effectsGridView=_effectsGridView;
@property(readonly, retain, nonatomic) CAMEffectsFullsizeView *effectsFullsizeView; // @synthesize effectsFullsizeView=_effectsFullsizeView;
@property(readonly, retain, nonatomic) UIView *previewLayerView; // @synthesize previewLayerView=_previewLayerView;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(retain, nonatomic) AVCaptureVideoPreviewLayer *previewLayer; // @synthesize previewLayer=_previewLayer;
- (void).cxx_destruct;
- (void)updateToContentSize:(id)arg1;
- (void)layoutSubviews;
- (struct CGRect)convertRect:(struct CGRect)arg1 toSublayer:(id)arg2;
- (struct CGRect)frameForView:(id)arg1;
- (struct CGRect)_frameForSubviewsAccountForSquare:(_Bool)arg1;
- (struct CGRect)rectForCaptureDeviceFace:(id)arg1;
- (void)destroyEffectsGridViewsRemoveFromSuperview:(_Bool)arg1;
- (void)createEffectsGridViews;
- (void)destroyEffectsFullsizeViewRemoveFromSuperview:(_Bool)arg1;
- (void)createEffectsFullsizeView;
- (void)_updateGravityForLayers;
- (void)setOrientation:(long long)arg1 animated:(_Bool)arg2;
@property(copy, nonatomic) NSString *videoGravity;
- (void)setSquare:(_Bool)arg1 animated:(_Bool)arg2;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface CAMZoomSlider : UISlider
{
    _Bool _minimumAutozooming;
    _Bool _maximumAutozooming;
    _Bool __autozooming;
    id <CAMZoomSliderDelegate> _delegate;
    NSTimer *__visibilityTimer;
    UIImageView *__thumbImageView;
    UIView *__minTrackMaskView;
    UIView *__maxTrackMaskView;
}

@property(readonly, nonatomic) UIView *_maxTrackMaskView; // @synthesize _maxTrackMaskView=__maxTrackMaskView;
@property(readonly, nonatomic) UIView *_minTrackMaskView; // @synthesize _minTrackMaskView=__minTrackMaskView;
@property(readonly, nonatomic) UIImageView *_thumbImageView; // @synthesize _thumbImageView=__thumbImageView;
@property(nonatomic, getter=_isAutozooming, setter=_setAutozooming:) _Bool _autozooming; // @synthesize _autozooming=__autozooming;
@property(readonly, nonatomic) NSTimer *_visibilityTimer; // @synthesize _visibilityTimer=__visibilityTimer;
@property(nonatomic, getter=isMaximumAutozooming) _Bool maximumAutozooming; // @synthesize maximumAutozooming=_maximumAutozooming;
@property(nonatomic, getter=isMinimumAutozooming) _Bool minimumAutozooming; // @synthesize minimumAutozooming=_minimumAutozooming;
@property(nonatomic) id <CAMZoomSliderDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_hideZoomSlider:(id)arg1;
- (void)_postHideZoomSliderAnimation;
- (void)makeInvisible;
- (void)makeVisible;
- (void)stopVisibilityTimer;
- (void)startVisibilityTimer;
- (_Bool)visibilityTimerIsValid;
- (void)_endAutozooming;
- (void)_updateAutozooming;
- (void)_beginAutozooming;
- (_Bool)_isMinimumOrMaximumAutozooming;
- (void)_setMaximumAutozooming:(_Bool)arg1;
- (void)_setMinimumAutozooming:(_Bool)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (long long)locationOfTouch:(id)arg1;
- (void)layoutSubviews;
- (id)createThumbView;
- (struct UIEdgeInsets)alignmentRectInsets;
- (struct CGSize)intrinsicContentSize;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonCAMZoomSliderInitialization;

@end

@interface CLLocation (VideoMetadata)
- (id)cam_videoMetadataRepresentation;
@end

@interface DeferredCAMCameraRollSpec : CAMCameraRollSpec
{
    _Bool _isPad;
    CAMCameraRollSpec *_spec;
    DeferredFrameworkLoader *_loader;
}

@property(nonatomic) _Bool isPad; // @synthesize isPad=_isPad;
@property(retain, nonatomic) DeferredFrameworkLoader *loader; // @synthesize loader=_loader;
@property(retain, nonatomic) CAMCameraRollSpec *spec; // @synthesize spec=_spec;
- (void).cxx_destruct;
- (void)dealloc;
- (void)reloadAlbumViewController:(id)arg1 withAssetCollection:(id)arg2 fetchResultContainingAssetCollection:(id)arg3;
- (void)prepareAlbumViewControllerForReuse:(id)arg1 withAssetCollection:(id)arg2 inApplicationViewController:(id)arg3;
- (id)newAlbumNavigationControllerForAssetCollection:(id)arg1 fetchResultContainingAssetCollection:(id)arg2 inApplicationViewController:(id)arg3;
- (void)ensureCAMCameraRollSpec;
- (id)initWithDeferredLoader:(id)arg1 isPad:(_Bool)arg2;

@end

@interface DeferredFrameworkLoader : NSObject
{
    NSString *_path;
    void *_frameworkHandle;
    long long _frameworkLoadedToken;
}

+ (id)PhotosUIFrameworkPath;
@property(nonatomic) long long frameworkLoadedToken; // @synthesize frameworkLoadedToken=_frameworkLoadedToken;
@property(nonatomic) void *frameworkHandle; // @synthesize frameworkHandle=_frameworkHandle;
@property(retain, nonatomic) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (void)dealloc;
- (Class)classFromString:(id)arg1;
- (id)initWithPath:(id)arg1;

@end

@interface DeferredPUCameraApplicationViewController : CAMApplicationViewController
{
    CAMCameraRollSpec *_spec;
    DeferredFrameworkLoader *_deferredLoader;
}

@property(retain, nonatomic) DeferredFrameworkLoader *deferredLoader; // @synthesize deferredLoader=_deferredLoader;
@property(retain, nonatomic) CAMCameraRollSpec *spec; // @synthesize spec=_spec;
- (void).cxx_destruct;
- (void)presentViewController:(id)arg1 animated:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)definesPresentationContext;
- (id)navigationController:(id)arg1 animatorForOperation:(long long)arg2 fromViewController:(id)arg3 toViewController:(id)arg4;
- (id)navigationController:(id)arg1 interactionControllerUsingAnimator:(id)arg2;
- (_Bool)_navigationControllerShouldCrossFadeBottomBars:(id)arg1;
- (void)reloadAlbumNavigationController:(id)arg1 withCameraRoll:(id)arg2;
- (void)prepareAlbumNavigationControllerForReuse:(id)arg1 withCameraRoll:(id)arg2;
- (id)newAlbumNavigationControllerForCameraRoll:(id)arg1;
- (id)initForCurrentPlatformWithSessionID:(id)arg1 usesCameraLocationBundleID:(_Bool)arg2 startPreviewImmediately:(_Bool)arg3;
- (id)initForCurrentPlatformWithSessionID:(id)arg1 startPreviewImmediately:(_Bool)arg2;
- (id)_initWithSessionID:(id)arg1 usesCameraLocationBundleID:(_Bool)arg2 startPreviewImmediately:(_Bool)arg3;

@end

@interface PLCameraIrisAnimationView : UIView
{
    _Bool shouldSetupAnimationInDidMoveToWindow;
    id irisAnimationDelegate;
    SEL irisAnimationDidStopSelector;
    double irisAnimationDuration;
    struct CGPoint irisAnimationPosition;
}

@property(nonatomic) _Bool shouldSetupAnimationInDidMoveToWindow; // @synthesize shouldSetupAnimationInDidMoveToWindow;
@property(nonatomic) struct CGPoint irisAnimationPosition; // @synthesize irisAnimationPosition;
@property(nonatomic) double irisAnimationDuration; // @synthesize irisAnimationDuration;
@property(nonatomic) SEL irisAnimationDidStopSelector; // @synthesize irisAnimationDidStopSelector;
@property(nonatomic) id irisAnimationDelegate; // @synthesize irisAnimationDelegate;
- (void)didMoveToWindow;
- (void)animateIrisOpen;
- (void)unpauseIrisAnimation;
- (void)pauseIrisAnimation;
- (void)setupAnimation;
- (void)dealloc;

@end

@interface PLGLLayerDelegate : NSObject
{
}

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;

@end

@interface PLPreviewOverlayView : UIView
{
    CAMCameraView *cameraView;
}

@property(nonatomic) CAMCameraView *cameraView; // @synthesize cameraView;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

@interface UIButton (Camera)
- (void)cam_updateContentInsetsToCenterImageWithinMinimumSize:(struct CGSize)arg1;
@end

@interface UIFont (Camera)
+ (id)cam_cameraModeDialKerningForContentSize:(id)arg1;
+ (id)cam_cameraKerningForContentSize:(id)arg1;
+ (id)cam_cameraPadModeDialFontForContentSize:(id)arg1;
+ (id)cam_cameraModeDialApproximateFontForContentSize:(id)arg1;
+ (id)cam_cameraModeDialFontForContentSize:(id)arg1;
+ (id)cam_cameraTimerFontForContentSize:(id)arg1;
+ (id)cam_cameraFontForContentSize:(id)arg1;
+ (double)_interpolatedAdditionalFontSizeForMainScreen;
+ (id)cam_cameraFontOfSize:(double)arg1;
@end

@interface UIImage (CameraKit)
@end

@interface UIView (CAMFrameworkUtilities)
- (_Bool)cam_isOnScreen:(id)arg1;
@end

@interface UIView (CAMRotatingView)
+ (struct CGAffineTransform)cam_transformForDeviceOrientation:(long long)arg1;
- (void)cam_rotateWithDeviceOrientation:(long long)arg1 animated:(_Bool)arg2;
@end

@interface UIView (CameraKit)
+ (double)cam_setHiddenAnimationDuration;
- (void)cam_setHidden:(_Bool)arg1 delay:(double)arg2 animated:(_Bool)arg3;
- (void)cam_setHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (_Bool)cam_isOnScreen:(id)arg1;
@end

@interface UIView (Constraints)
- (id)cam_constraintsForKey:(id)arg1;
- (void)cam_clearAllConstraintsForKey:(id)arg1;
- (void)cam_removeAllConstraintsForKey:(id)arg1;
- (void)cam_addConstraints:(id)arg1 forKey:(id)arg2;
- (void)cam_addConstraint:(id)arg1 forKey:(id)arg2;
- (_Bool)cam_hasConstraintForKey:(id)arg1;
- (id)_cam_associatedConstraints;
@end

@interface _UILegibilitySettingsProvider (PhotoLibraryAdditions)
- (void)pl_primeForUseWithCameraOverlays;
@end

