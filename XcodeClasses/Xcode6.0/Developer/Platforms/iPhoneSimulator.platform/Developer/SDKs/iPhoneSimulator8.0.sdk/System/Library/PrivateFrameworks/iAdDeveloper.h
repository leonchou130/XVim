//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/iAdDeveloper.framework/iAdDeveloper
// UUID: 30A7ED00-921A-33E6-B306-8ADA2249F766
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 813.30.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol HTSHTTPServerDelegate <NSObject>

@optional
- (HTSHTTPMessageResponse *)httpServer:(HTSHTTPServer *)arg1 proposedResponse:(HTSHTTPMessageResponse *)arg2;
- (HTSHTTPMessageResponse *)httpServer:(HTSHTTPServer *)arg1 unhandledRequest:(HTSHTTPMessageRequest *)arg2;
- (void)httpServer:(HTSHTTPServer *)arg1 dataForRequest:(HTSHTTPMessageRequest *)arg2 resolvedPath:(NSString *)arg3 handler:(void (^)(NSData *, NSString *))arg4;
- (NSString *)httpServer:(HTSHTTPServer *)arg1 rewritePath:(NSString *)arg2;
- (_Bool)httpServer:(HTSHTTPServer *)arg1 shouldAllowRequest:(HTSHTTPMessageRequest *)arg2 withAuthorization:(NSString *)arg3;
- (void)httpServerListenSocketFailed:(HTSHTTPServer *)arg1;
- (void)httpServer:(HTSHTTPServer *)arg1 logMessage:(NSString *)arg2;
- (void)httpServer:(HTSHTTPServer *)arg1 connection:(HTSHTTPServerConnection *)arg2 blockedSandboxViolation:(NSString *)arg3;
- (void)httpServer:(HTSHTTPServer *)arg1 connection:(HTSHTTPServerConnection *)arg2 droppedResponseToRequestBeforeClosing:(NSString *)arg3;
- (void)httpServer:(HTSHTTPServer *)arg1 connection:(HTSHTTPServerConnection *)arg2 wroteBytes:(unsigned long long)arg3 andCompletedResponseToRequest:(NSString *)arg4;
- (void)httpServer:(HTSHTTPServer *)arg1 connection:(HTSHTTPServerConnection *)arg2 wroteBytes:(unsigned long long)arg3 forResponseToRequest:(NSString *)arg4 remaining:(unsigned long long)arg5;
- (void)httpServer:(HTSHTTPServer *)arg1 connection:(HTSHTTPServerConnection *)arg2 enqueuedResponseToRequest:(NSString *)arg3 statusCode:(int)arg4 length:(unsigned long long)arg5;
- (void)httpServer:(HTSHTTPServer *)arg1 closedConnection:(HTSHTTPServerConnection *)arg2 withError:(NSError *)arg3;
- (void)httpServer:(HTSHTTPServer *)arg1 closedConnection:(HTSHTTPServerConnection *)arg2;
- (void)httpServer:(HTSHTTPServer *)arg1 receivedConnection:(HTSHTTPServerConnection *)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSStreamDelegate <NSObject>

@optional
- (void)stream:(NSStream *)arg1 handleEvent:(unsigned long long)arg2;
@end

@interface ADEmbeddedAdServer : NSObject <HTSHTTPServerDelegate>
{
    HTSHTTPServer *_server;
    NSMutableDictionary *_authTokens;
    struct __FSEventStream *_stream;
    _Bool _defaultsToNoQualifiedAds;
    _Bool _alwaysRegenerateWebArchives;
    id <ADEmbeddedAdServerDelegate> _delegate;
    NSString *_publicURLRoot;
    NSDictionary *_defaultAdData;
    NSString *_adPath;
    NSArray *_adManifests;
}

+ (id)manifestForAdAtURL:(id)arg1;
+ (id)creativesForAdBundleAtURL:(id)arg1 matchingRequest:(id)arg2;
+ (_Bool)adBundleAtURL:(id)arg1 matchesRequest:(id)arg2;
@property(nonatomic) _Bool alwaysRegenerateWebArchives; // @synthesize alwaysRegenerateWebArchives=_alwaysRegenerateWebArchives;
@property(retain, nonatomic) NSArray *adManifests; // @synthesize adManifests=_adManifests;
@property(copy, nonatomic) NSString *adPath; // @synthesize adPath=_adPath;
@property(retain, nonatomic) NSDictionary *defaultAdData; // @synthesize defaultAdData=_defaultAdData;
@property(nonatomic) _Bool defaultsToNoQualifiedAds; // @synthesize defaultsToNoQualifiedAds=_defaultsToNoQualifiedAds;
@property(copy, nonatomic) NSString *publicURLRoot; // @synthesize publicURLRoot=_publicURLRoot;
@property(nonatomic) id <ADEmbeddedAdServerDelegate> delegate; // @synthesize delegate=_delegate;
- (id)adDataForAdBundleAtPath:(id)arg1 creative:(id)arg2 allowWebArchive:(_Bool)arg3;
- (id)_adDataForPath:(id)arg1 creative:(id)arg2 error:(id *)arg3;
- (id)_integerColorFromStringColor:(id)arg1;
- (id)_webArchiveFilenameForDirectory:(id)arg1 withBaseURL:(id)arg2;
- (id)webArchiveForDirectory:(id)arg1 withBaseURL:(id)arg2;
- (id)_webResourcesInDirectory:(id)arg1 baseURL:(id)arg2;
- (id)_webResourceForPath:(id)arg1 url:(id)arg2;
- (id)_handleManifestRequest:(id)arg1 message:(id)arg2;
- (id)_handlePurchaseRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogPassEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogStationClientEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogAggregateMetricsRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogTileImpressionEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleListeningPresenceEventsRequest:(id)arg1 message:(id)arg2;
- (id)_handleMescalSignSAPSetupRequest:(id)arg1 message:(id)arg2;
- (id)_handleMescalSignSAPSetupCertificateRequest:(id)arg1 message:(id)arg2;
- (id)_handleOptOutRequest:(id)arg1 message:(id)arg2;
- (id)_handleRewardsCodeResultRequest:(id)arg1 message:(id)arg2;
- (id)_handleRewardRequest:(id)arg1 message:(id)arg2;
- (id)_handleHeartbeatTokenRequest:(id)arg1 message:(id)arg2;
- (id)_handleSegmentUpdateRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogAdContentErrorRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogAdEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleServerErrorRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogSysEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogImpressionRequest:(id)arg1 message:(id)arg2;
- (id)_handleGenericAnalyticsRequest:(id)arg1 message:(id)arg2 type:(int)arg3;
- (id)_handleAdSlotRequest:(id)arg1 message:(id)arg2;
- (id)_handleBatchRequest:(id)arg1 message:(id)arg2;
- (id)_defaultResponseForBatchRequest:(id)arg1;
- (id)_handlePostRequest:(id)arg1;
- (id)_handleGenericPostRequest:(id)arg1;
- (id)httpServer:(id)arg1 proposedResponse:(id)arg2;
- (id)httpServer:(id)arg1 unhandledRequest:(id)arg2;
- (void)httpServer:(id)arg1 dataForRequest:(id)arg2 resolvedPath:(id)arg3 handler:(CDUnknownBlockType)arg4;
- (id)httpServer:(id)arg1 rewritePath:(id)arg2;
- (_Bool)httpServer:(id)arg1 shouldAllowRequest:(id)arg2 withAuthorization:(id)arg3;
- (void)httpServer:(id)arg1 logMessage:(id)arg2;
- (void)httpServer:(id)arg1 connection:(id)arg2 blockedSandboxViolation:(id)arg3;
- (void)httpServer:(id)arg1 connection:(id)arg2 droppedResponseToRequestBeforeClosing:(id)arg3;
- (void)httpServer:(id)arg1 connection:(id)arg2 wroteBytes:(unsigned long long)arg3 andCompletedResponseToRequest:(id)arg4;
- (void)httpServer:(id)arg1 connection:(id)arg2 wroteBytes:(unsigned long long)arg3 forResponseToRequest:(id)arg4 remaining:(unsigned long long)arg5;
- (void)httpServer:(id)arg1 connection:(id)arg2 enqueuedResponseToRequest:(id)arg3 statusCode:(int)arg4 length:(unsigned long long)arg5;
- (void)httpServer:(id)arg1 closedConnection:(id)arg2 withError:(id)arg3;
- (void)httpServer:(id)arg1 closedConnection:(id)arg2;
- (void)httpServer:(id)arg1 receivedConnection:(id)arg2;
- (void)httpServerListenSocketFailed:(id)arg1;
- (id)_mimeTypeForExtension:(id)arg1;
@property(nonatomic) _Bool pipeliningEnabled;
@property(readonly, nonatomic) unsigned long long totalBytesWritten;
@property(nonatomic) double bandwidthStddev;
@property(nonatomic) double kbps;
@property(nonatomic) double latencyStddev;
@property(nonatomic) double latency;
- (void)resetNetworkSetup;
@property(nonatomic) int cacheMaxAge;
@property(nonatomic) _Bool digestAuthenticationEnabled;
@property(readonly, nonatomic) NSString *urlString;
@property(readonly, nonatomic) unsigned short port;
- (id)init;
- (id)initWithPort:(unsigned short)arg1 adPath:(id)arg2;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface HTSHTTPMessage : NSObject
{
    NSMutableDictionary *_headers;
    NSData *_body;
    NSString *_versionString;
}

@property(copy, nonatomic) NSString *versionString; // @synthesize versionString=_versionString;
@property(retain, nonatomic) NSData *body; // @synthesize body=_body;
@property(retain, nonatomic) NSMutableDictionary *headers; // @synthesize headers=_headers;
- (id)valueForHeaderField:(id)arg1;
- (struct __CFHTTPMessage *)copyMessage;
- (void)addHeadersToMessage:(struct __CFHTTPMessage *)arg1;
- (void)dealloc;

@end

@interface HTSHTTPMessageRequest : HTSHTTPMessage
{
    NSString *_requestMethod;
    NSURL *_requestURL;
}

@property(copy, nonatomic) NSURL *requestURL; // @synthesize requestURL=_requestURL;
@property(copy, nonatomic) NSString *requestMethod; // @synthesize requestMethod=_requestMethod;
- (_Bool)responseCanUseGZip;
- (id)responseWithStatus:(int)arg1;
- (struct __CFHTTPMessage *)copyMessage;
- (id)initWithRequest:(struct __CFHTTPMessage *)arg1;
- (void)dealloc;

@end

@interface HTSHTTPMessageResponse : HTSHTTPMessage
{
    int _statusCode;
    NSString *_statusDescription;
    NSString *_trackingDescription;
    HTSHTTPMessageRequest *_request;
    NSMutableData *_serializedData;
    double _sendTime;
    unsigned long long _written;
}

@property(nonatomic) unsigned long long written; // @synthesize written=_written;
@property(nonatomic) double sendTime; // @synthesize sendTime=_sendTime;
@property(retain, nonatomic) NSMutableData *serializedData; // @synthesize serializedData=_serializedData;
@property(retain, nonatomic) HTSHTTPMessageRequest *request; // @synthesize request=_request;
@property(copy, nonatomic) NSString *trackingDescription; // @synthesize trackingDescription=_trackingDescription;
@property(copy, nonatomic) NSString *statusDescription; // @synthesize statusDescription=_statusDescription;
@property(nonatomic) int statusCode; // @synthesize statusCode=_statusCode;
- (struct __CFHTTPMessage *)copyMessage;
- (void)dealloc;

@end

@interface HTSHTTPServer : NSObject
{
    int _listenSocket4;
    NSMutableArray *_activeConnections;
    NSObject<OS_dispatch_queue> *_serverQueue;
    NSObject<OS_dispatch_source> *_listenSource4;
    NSString *_nodename;
    unsigned long long _bytesWritten;
    double _lastReplenishTime;
    NSMutableDictionary *_authTokens;
    _Bool _digestAuthenticationEnabled;
    _Bool _pipeliningEnabled;
    unsigned short _port;
    int _cacheMaxAge;
    id <HTSHTTPServerDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    double _latency;
    double _latencyStddev;
    double _kbps;
    double _bandwidthStddev;
    unsigned long long _totalBytesWritten;
    struct __CFHTTPMessage *_currentRequest;
    NSString *_documentRoot;
}

@property(nonatomic) _Bool pipeliningEnabled; // @synthesize pipeliningEnabled=_pipeliningEnabled;
@property(nonatomic) int cacheMaxAge; // @synthesize cacheMaxAge=_cacheMaxAge;
@property(copy, nonatomic) NSString *documentRoot; // @synthesize documentRoot=_documentRoot;
@property(nonatomic) struct __CFHTTPMessage *currentRequest; // @synthesize currentRequest=_currentRequest;
@property(readonly, nonatomic) unsigned long long totalBytesWritten; // @synthesize totalBytesWritten=_totalBytesWritten;
@property(nonatomic) double bandwidthStddev; // @synthesize bandwidthStddev=_bandwidthStddev;
@property(nonatomic) double kbps; // @synthesize kbps=_kbps;
@property(nonatomic) double latencyStddev; // @synthesize latencyStddev=_latencyStddev;
@property(nonatomic) double latency; // @synthesize latency=_latency;
@property(nonatomic) _Bool digestAuthenticationEnabled; // @synthesize digestAuthenticationEnabled=_digestAuthenticationEnabled;
@property(readonly, nonatomic) unsigned short port; // @synthesize port=_port;
@property(nonatomic) NSObject<OS_dispatch_queue> *delegateQueue; // @synthesize delegateQueue=_delegateQueue;
@property(nonatomic) id <HTSHTTPServerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)consumedBandwidth:(unsigned long long)arg1;
- (unsigned long long)availableBandwidth;
- (double)_currentLatency;
- (void)resetNetworkSetup;
- (void)_handleGeneralRequest:(id)arg1 fromConnection:(id)arg2;
- (id)_authenticationResponseForRequest:(id)arg1;
- (void)_respondWithData:(id)arg1 mimeType:(id)arg2 toRequest:(id)arg3 connection:(id)arg4;
- (void)_connection:(id)arg1 didReceiveRequest:(id)arg2;
- (void)_returnResponse:(id)arg1 toConnection:(id)arg2 closeAfterSending:(_Bool)arg3;
- (id)_restrictedFilePathForRelativePath:(id)arg1;
- (void)_connection:(id)arg1 hadError:(id)arg2;
- (void)_connectionComplete:(id)arg1;
- (id)_mimeTypeForExtension:(id)arg1;
- (_Bool)_listenOnPort:(unsigned short)arg1;
- (void)_cleanupListenSocket;
@property(readonly, nonatomic) NSString *urlString;
- (id)init;
- (id)initWithPort:(unsigned short)arg1 documentRoot:(id)arg2;
- (void)dealloc;

@end

@interface HTSHTTPServerConnection : NSObject <NSStreamDelegate>
{
    HTSHTTPServer *_server;
    NSObject<OS_dispatch_queue> *_connectionQueue;
    NSObject<OS_dispatch_source> *_readSource;
    _Bool _readActive;
    NSObject<OS_dispatch_source> *_writeSource;
    _Bool _writeActive;
    int _socket;
    int _socketRefCount;
    struct __CFHTTPMessage *_incomingMessage;
    NSMutableArray *_incomingQueue;
    NSMutableArray *_outputQueue;
    _Bool _outputStalled;
    _Bool _closeOnEmptyQueue;
    NSString *_identifier;
    double _lastActivity;
    NSTimer *_idleTimer;
}

@property(retain, nonatomic) NSTimer *idleTimer; // @synthesize idleTimer=_idleTimer;
@property(nonatomic) double lastActivity; // @synthesize lastActivity=_lastActivity;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void)printData:(id)arg1 withMessage:(id)arg2;
- (void)_shutdownIdleConnection:(id)arg1;
- (void)_closeInputStream;
- (void)_closeOutputStream;
- (void)_processStreamOutput;
- (void)_processStreamInput;
- (void)_processIncomingBytes:(const char *)arg1 length:(long long)arg2;
- (void)sendResponse:(id)arg1 withLatency:(double)arg2 closeAfterSending:(_Bool)arg3;
- (id)initWithServer:(id)arg1 socket:(int)arg2;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NSData (HTSHTTPServerDataAdditions)
- (id)copyDeflatedData;
@end

@interface NSString (ADEmbeddedAdServerStringAdditions)
- (id)md5;
@end

@interface NSString (HTSHTTPServerStringAdditions)
- (id)md5;
@end

