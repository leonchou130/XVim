//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AVControllerPrivate {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    Class _field6;
    id _field7;
    long long _field8;
    long long _field9;
    float _field10;
    float _field11;
    long long _field12;
    _Bool _field13;
    id _field14;
    float _field15;
    struct __CFString *_field16;
    id _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    id _field21;
    struct OpaqueFigVisualContext *_field22;
    id _field23;
    struct __CFRunLoop *_field24;
    unsigned long long _field25;
    int _field26;
    int _field27;
    int _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    id _field33;
    struct OpaqueFigPlayer *_field34;
    id _field35;
    id _field36;
    id _field37;
    _Bool _field38;
    _Bool _field39;
    id _field40;
    id _field41;
    _Bool _field42;
    _Bool _field43;
    _Bool _field44;
    int _field45;
    _Bool _field46;
};

struct AVFileValidatorPrivate {
    id _field1;
    id _field2;
    struct FigOpaqueMediaValidator *_field3;
    struct FigMediaValidatorDataLocation _field4;
    struct OpaqueCMByteStream *_field5;
    _Bool _field6;
    _Bool _field7;
    id _field8;
};

struct AVItemPrivate {
    id _field1;
    id _field2;
    double _field3;
    float _field4;
    float _field5;
    float _field6;
    unsigned long long _field7;
    _Bool _field8;
    _Bool _field9;
    id _field10;
    long long _field11;
    long long _field12;
    long long _field13;
    _Bool _field14;
    id _field15;
    id _field16;
    _Bool _field17;
    _Bool _field18;
    id _field19;
    id _field20;
    struct OpaqueFigThread *_field21;
    struct OpaqueCMByteStream *_field22;
    int _field23;
    id _field24;
    id _field25;
};

struct AVRecorderPrivate {
    id _field1;
    id _field2;
};

struct AVSystemControllerPrivate {
    _Bool _field1;
    _Bool _field2;
    float _field3;
    id _field4;
    struct OpaqueFigPlayer *_field5;
};

struct AudioQueueBuffer {
    unsigned int _field1;
    void *_field2;
    unsigned int _field3;
    void *_field4;
    unsigned int _field5;
    struct AudioStreamPacketDescription *_field6;
    unsigned int _field7;
};

struct AudioQueueLevelMeterState {
    float _field1;
    float _field2;
};

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioStreamPacketDescription {
    long long _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct AudioTimeStamp {
    double _field1;
    unsigned long long _field2;
    double _field3;
    unsigned long long _field4;
    struct SMPTETime _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct FigMediaValidatorDataLocation {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct FigOpaqueMediaValidator;

struct OpaqueCMByteStream;

struct OpaqueFigPlayer;

struct OpaqueFigThread;

struct OpaqueFigVisualContext;

struct SMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/Celestial.framework/Celestial
// UUID: 2B4C9A61-20BC-39D4-A99E-A23E4F2DAEBB
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1560.28.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AVRecorderImpl <NSObject>
- (double)recordedDuration;
- (long long)recordedFileSizeInBytes;
- (_Bool)audioCurrentAverageDecibelLevels:(float *)arg1 andPeakDecibelLevels:(float *)arg2;
- (_Bool)audioCurrentAverageVolumeLevels:(float *)arg1 andPeakVolumeLevels:(float *)arg2;
- (unsigned long long)audioNumDeviceChannels;
- (void)setMicVolume:(float)arg1;
- (float)micVolume;
- (_Bool)autoFocusAtPoint:(struct CGPoint)arg1;
- (_Bool)takePhoto;
- (_Bool)isRecording;
- (void)stop;
- (_Bool)start;
- (_Bool)isActive;
- (void)deactivate;
- (_Bool)activate:(id *)arg1;
- (id)attributeForKey:(NSString *)arg1;
- (void)setAttribute:(id)arg1 forKey:(NSString *)arg2;
- (NSURL *)filePath;
- (void)setFilePath:(NSURL *)arg1;
- (id)init;
@end

@protocol FigXPCCoding <NSObject>
- (NSObject<OS_xpc_object> *)copyXPCEncoding;
- (id)initWithXPCEncoding:(NSObject<OS_xpc_object> *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@interface AVQueueFeeder : NSObject
{
}

- (double)bookmarkTimeForIndex:(unsigned long long)arg1;
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned int)arg1;
- (void)contentsDidChangeByRemovingRange:(struct _NSRange)arg1;
- (void)contentsDidChangeByInsertingRange:(struct _NSRange)arg1;
- (id)playbackInfoAtIndex:(unsigned long long)arg1;
- (id)pathAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemCount;
- (unsigned long long)numberOfPaths;
- (id)init;

@end

@interface AVArrayQueueFeeder : AVQueueFeeder
{
    NSMutableArray *_items;
}

- (void)shuffleWithCurrentIndex:(unsigned int)arg1;
- (void)removeObjectAtIndex:(unsigned int)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned int)arg2;
- (id)pathAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfPaths;
- (unsigned long long)itemCount;
- (id)itemForIndex:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithArray:(id)arg1;
- (id)init;

@end

@interface AVCallbackHandler : NSObject
{
    id _target;
    SEL _action;
    SEL _mainThreadAction;
    NSCondition *_condition;
    id _params;
}

@property SEL mainThreadAction; // @synthesize mainThreadAction=_mainThreadAction;
@property SEL action; // @synthesize action=_action;
@property id target; // @synthesize target=_target;
- (_Bool)hasParams;
- (id)waitForCallbackParams;
- (void)setCallbackParams:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AVController : NSObject
{
    struct AVControllerPrivate *_priv;
}

+ (id)convertFigTimeDictionaryToTimeIntervalWithKey:(id)arg1 stringURLToNSURLWithKey:(id)arg2 inDictionaries:(id)arg3;
+ (id)avControllerWithQueue:(id)arg1 error:(id *)arg2;
+ (id)avController;
+ (_Bool)isNetworkSupportedPath:(id)arg1;
+ (_Bool)isSupportedFileExtension:(id)arg1;
+ (_Bool)isSupportedMimeType:(id)arg1;
+ (void)setEnableNetworkMode:(_Bool)arg1;
+ (id)compatibleAudioRouteForRoute:(id)arg1;
- (void)figPlayerNotificationHandler:(id)arg1;
- (void)fpItemNotification:(id)arg1 sender:(id)arg2;
- (void)dequeueDeadItem;
- (void)avPlaybackQueueCurrentItemChangedNotification:(id)arg1;
- (_Bool)setPickedRouteWithPassword:(id)arg1 withPassword:(id)arg2;
- (struct OpaqueFigPlaybackItem *)createItemWithURL:(id)arg1 flags:(unsigned int)arg2 error:(int *)arg3;
- (double)bookmarkTimeForAVItem:(id)arg1;
- (id)bookmarkGroupIDForAVItem:(id)arg1;
- (void)ensurePlaybackQueueImmed;
- (struct OpaqueFigPlaybackItem *)currentFPItem;
- (id)currentItem;
- (void)makeCurrentItemReady;
- (_Bool)isCurrentItemReady;
- (void)unregisterTimeMarkerObserver:(id)arg1 forItem:(id)arg2;
- (void)removeObserver:(id)arg1 fromTMOArray:(id)arg2;
- (void)registerTimeMarkerObserver:(id)arg1 forItem:(id)arg2 times:(id)arg3 context:(id)arg4;
- (void)scheduleUpdateTimeMarkerObservations;
- (void)updateTimeMarkerObservations;
- (void)setQueue:(id)arg1;
- (void)logPerformanceDataForCurrentItem;
- (id)initWithQueue:(id)arg1 fmpType:(unsigned int)arg2 error:(id *)arg3;
- (id)_figPlayerNotifications;
- (_Bool)isValid;
- (id)initWithQueue:(id)arg1 error:(id *)arg2;
- (void)safeSubtitleCommandPosted:(void *)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)itemHasFinishedPlayingNotification:(id)arg1;
- (void)currentItemHasChanged:(id)arg1;
- (void)currentItemWillChangeToItem:(id)arg1 oldItemCurrentTime:(double)arg2;
- (void)applyDesiredRepeatMode;
- (void)rateDidChangeToRate:(float)arg1;
- (void)fmpEffectiveVolumeDidChange;
- (void)cancelAllCGImageRequests;
- (void)requestAsyncCGImagesAtTimes:(id)arg1 requestIDs:(id)arg2 withTimeOptions:(long long)arg3 withImageOptions:(id)arg4;
- (void)requestAsyncCGImagesAtTimes:(id)arg1 withTimeOptions:(long long)arg2 withImageOptions:(id)arg3;
- (struct CGImage *)grabCGImageAtTime:(double)arg1 withTimeOptions:(long long)arg2 withImageOptions:(id)arg3 actualTime:(double *)arg4;
- (_Bool)okToNotifyFromThisThread;
- (int)updateActionAtEnd;
- (_Bool)setAttribute:(id)arg1 forKey:(id)arg2 error:(id *)arg3;
- (void)setApplyVideoTrackMatrix;
- (id)attributeForKey:(id)arg1;
- (void)setSubtitleRecipient:(id)arg1;
- (void)setShouldDisplayClosedCaptions:(_Bool)arg1;
- (_Bool)shouldDisplayClosedCaptions;
- (void)setLayer:(id)arg1;
- (id)lkLayer;
- (void)setOutputQTESFilePath:(id)arg1;
- (id)outputQTESFilePath;
- (void)setVisualContext:(struct OpaqueFigVisualContext *)arg1;
- (struct OpaqueFigVisualContext *)visualContext;
- (long long)eqPreset;
- (void)setEQPreset:(long long)arg1;
- (void)setMuted:(_Bool)arg1;
- (_Bool)muted;
- (void)stepByCount:(int)arg1;
- (void)seekToDate:(id)arg1;
- (void)setCurrentTime:(double)arg1 options:(long long)arg2;
- (void)setCurrentTime:(double)arg1;
- (double)currentTime;
- (void)setVolume:(float)arg1;
- (float)volume;
- (void)endInterruptionWithStatus:(id)arg1;
- (_Bool)activate:(id *)arg1;
- (_Bool)canBeginInterruption;
- (_Bool)beginInterruption:(id *)arg1;
- (void)makeError:(id *)arg1 withDescription:(id)arg2 code:(int)arg3;
- (id)errorWithDescription:(id)arg1 code:(int)arg2;
- (_Bool)resumePlayback:(double)arg1 error:(id *)arg2;
- (_Bool)setRate:(float)arg1 error:(id *)arg2;
- (_Bool)shouldBeginPlayingItem:(id)arg1 error:(id *)arg2;
- (float)rate;
- (_Bool)playNextItem:(id *)arg1;
- (id)addNextFeederItemToQueue;
- (_Bool)setIndexOfCurrentQueueFeederItem:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)indexOfCurrentQueueFeederItem;
- (void)dequeueFirstItem;
- (void)pause;
- (_Bool)play:(id *)arg1;
- (_Bool)beginRepeatGap;
- (void)cancelContinueAfterRepeatGap;
- (void)continueAfterRepeatGap;
- (_Bool)havePlayedCurrentItem;
- (long long)repeatMode;
- (_Bool)setRepeatMode:(long long)arg1;
- (id)queueFeeder;
- (void)setQueueFeeder:(id)arg1;
- (void)setQueueFeeder:(id)arg1 withIndex:(int)arg2;
- (void)feederInvalidatedWithCurrentItemMoved:(id)arg1;
- (void)feederRangeWasRemoved:(id)arg1;
- (void)feederRangeWasInserted:(id)arg1;
- (id)queue;
- (void)checkQueueSpace;
- (void)scheduleQueueSpaceCheck;
- (int)copyImageForTime:(struct __CVBuffer **)arg1 time:(const CDStruct_1b6d18a9 *)arg2;
- (_Bool)isNewImageAvailableForTime:(const CDStruct_1b6d18a9 *)arg1 willNeverBeAvailable:(_Bool *)arg2;
- (struct AVControllerPrivate *)privateStorage;
- (void)dealloc;
- (id)initForStreaming;
- (id)init;
- (void)setAVItemClass:(Class)arg1;
- (id)initWithError:(id *)arg1;
- (id)vibrationPattern;
- (void)setVibrationPattern:(id)arg1;
- (void)setVibrationEnabled:(_Bool)arg1;
- (_Bool)vibrationEnabled;

@end

@interface AVControllerFig : AVController
{
}

- (id)initWithQueue:(id)arg1 error:(id *)arg2;

@end

@interface AVControllerRemoteFig : AVController
{
}

- (id)initWithQueue:(id)arg1 error:(id *)arg2;

@end

@interface AVControllerRemoteFigStream : AVController
{
}

- (id)initWithQueue:(id)arg1 error:(id *)arg2;

@end

@interface AVFileProcessor : NSObject
{
    float _percentComplete;
}

+ (id)fileProcessor;
- (id)sinfInfoFromFilePath:(id)arg1;
- (id)sinfsFromFilePath:(id)arg1;
- (id)rentalInfo:(id)arg1;
- (id)processPurchasedItem:(id)arg1 withAttributes:(id)arg2 resultInfo:(id *)arg3 progressBlock:(CDUnknownBlockType)arg4;
- (id)processPurchasedItem:(id)arg1 withAttributes:(id)arg2 resultInfo:(id *)arg3;
- (id)processPurchasedItem:(id)arg1 withAttributes:(id)arg2 progressBlock:(CDUnknownBlockType)arg3;
- (id)processPurchasedItem:(id)arg1 withAttributes:(id)arg2;

@end

@interface AVFileValidator : NSObject
{
    struct AVFileValidatorPrivate *_priv;
    NSString *_validationRules;
}

@property(retain) NSString *validationRules; // @synthesize validationRules=_validationRules;
- (float)progress;
- (_Bool)isCompleted;
- (void)cancel;
- (_Bool)validateSyncWithError:(id *)arg1;
- (void)validate;
- (void)validateForCameraRoll;
- (id)validateBlocking:(_Bool)arg1;
- (void)postNotificationForCallback:(id)arg1;
- (id)notificationForFileCheckResult:(id)arg1;
- (_Bool)isStreaming;
- (id)url;
- (void)dealloc;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)initWithURL:(id)arg1;

@end

@interface AVFromMainThreadPostNotificationNameDict : NSObject
{
    NSMutableDictionary *_obj;
}

+ (id)dict;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (oneway void)release;
- (void)dealloc;
- (id)init;

@end

@interface AVFromNotifySafeThreadPostNotificationNameDict : NSObject
{
    NSMutableDictionary *_obj;
}

+ (id)dict;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (oneway void)release;
- (void)dealloc;
- (id)init;

@end

@interface AVItem : NSObject
{
    struct AVItemPrivate *_priv;
}

+ (id)avItemWithPath:(id)arg1 error:(id *)arg2;
+ (id)avItem;
- (void)cancelDownload;
- (int)downloadStatus;
- (float)downloadProgress;
- (void)stopDownload;
- (int)beginDownloading;
- (void *)downloadThread;
- (id)url;
- (id)urlFromPath:(id)arg1;
- (id)evenlySpacedThumbnailTimesFromStartTime:(double)arg1 toEndTime:(double)arg2 maxCount:(long long)arg3;
- (id)nextThumbnailTimesStartingAt:(double)arg1 minimumInterval:(double)arg2 forwards:(_Bool)arg3 maxCount:(long long)arg4;
- (id)chapterImageForImageID:(long long)arg1;
- (id)formatDetailsForTracks;
- (_Bool)setAttribute:(id)arg1 forKey:(id)arg2 error:(id *)arg3;
- (id)attributeForKey:(id)arg1;
- (long long)eqPreset;
- (void)setEQPreset:(long long)arg1;
- (void)setVolume:(float)arg1;
- (float)volume;
- (struct CGSize)naturalSize;
- (double)duration;
- (id)path;
- (int)_instantiateItem;
- (_Bool)setPath:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)initWithPath:(id)arg1 error:(id *)arg2;
- (id)init;
- (id)initWithError:(id *)arg1;
- (id)errorLog;
- (id)accessLog;

@end

@interface AVItemAccessLog : NSObject <NSCopying>
{
    AVItemAccessLogInternal *_playerItemAccessLog;
}

@property(readonly, nonatomic) NSArray *events;
- (unsigned long long)extendedLogDataStringEncoding;
- (id)extendedLogData;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithLogArray:(id)arg1;
- (id)init;

@end

@interface AVItemAccessLogEvent : NSObject <NSCopying>
{
    AVItemAccessLogEventInternal *_playerItemAccessLogEvent;
}

@property(readonly, nonatomic) long long numberOfDroppedVideoFrames;
@property(readonly, nonatomic) double indicatedBitrate;
@property(readonly, nonatomic) double observedBitrate;
@property(readonly, nonatomic) long long numberOfBytesTransferred;
@property(readonly, nonatomic) long long numberOfStalls;
@property(readonly, nonatomic) double durationWatched;
@property(readonly, nonatomic) double segmentsDownloadedDuration;
@property(readonly, nonatomic) double playbackStartOffset;
@property(readonly, nonatomic) NSString *playbackSessionID;
@property(readonly, nonatomic) long long numberOfServerAddressChanges;
@property(readonly, nonatomic) NSString *serverAddress;
@property(readonly, nonatomic) NSString *URI;
@property(readonly, nonatomic) NSDate *playbackStartDate;
@property(readonly, nonatomic) long long numberOfSegmentsDownloaded;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface AVItemAccessLogEventInternal : NSObject
{
    NSDictionary *dict;
}

@end

@interface AVItemAccessLogInternal : NSObject
{
    NSArray *logArray;
}

@end

@interface AVItemErrorLog : NSObject <NSCopying>
{
    AVItemErrorLogInternal *_playerItemErrorLog;
}

@property(readonly, nonatomic) NSArray *events;
- (unsigned long long)extendedLogDataStringEncoding;
- (id)extendedLogData;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithLogArray:(id)arg1;
- (id)init;

@end

@interface AVItemErrorLogEvent : NSObject <NSCopying>
{
    AVItemErrorLogEventInternal *_playerItemErrorLogEvent;
}

@property(readonly, nonatomic) NSString *errorComment;
@property(readonly, nonatomic) NSString *errorDomain;
@property(readonly, nonatomic) long long errorStatusCode;
@property(readonly, nonatomic) NSString *playbackSessionID;
@property(readonly, nonatomic) NSString *serverAddress;
@property(readonly, nonatomic) NSString *URI;
@property(readonly, nonatomic) NSDate *date;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface AVItemErrorLogEventInternal : NSObject
{
    NSDictionary *dict;
}

@end

@interface AVItemErrorLogInternal : NSObject
{
    NSArray *logArray;
}

@end

@interface AVObjectRegistry : NSObject
{
    NSHashTable *_registeredObjects;
    NSRecursiveLock *_lock;
}

+ (id)defaultObjectRegistry;
- (void)safePostDelayedNotificationFromThread:(id)arg1 target:(id)arg2 name:(id)arg3 userInfo:(id)arg4;
- (void)safePostNotificationFromThread:(id)arg1 target:(id)arg2 name:(id)arg3 userInfo:(id)arg4;
- (void)safePerformOnThread:(id)arg1 target:(id)arg2 selector:(SEL)arg3 object:(id)arg4;
- (void)safePostNotificationFromMainThreadTarget:(id)arg1 name:(id)arg2 userInfo:(id)arg3;
- (void)safePostDelayedNotificationFromMainThreadTarget:(id)arg1 name:(id)arg2 userInfo:(id)arg3;
- (void)safePerformOnMainThreadTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
- (void)safePerformOnMainThreadTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3 delay:(double)arg4;
- (void)safePerformTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3 delay:(double)arg4;
- (void)safeInvokeWithDescriptionDelayed:(id)arg1;
- (void)safeInvokeWithDescription:(id)arg1;
- (void)unregisterObject:(id)arg1;
- (void)registerObject:(id)arg1;
- (_Bool)safeRetainObject:(id)arg1;
- (void)registerObjectForSafeRetain:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AVPlaybackItem : NSObject
{
    id _delegate;
    AVItem *_avItem;
    struct OpaqueFigPlaybackItem *_fpItem;
    CDStruct_1b6d18a9 _currentDuration;
    struct CGSize _currentSize;
    _Bool _currentSizeIsValid;
    _Bool _isPreparingForInspectionInitialSamples;
    _Bool _isPreparingForInspectionAccurateDuration;
    _Bool _isInPlayQueue;
    double _bookmarkTime;
    NSDictionary *_streamStateNotificationInfo;
    NSDictionary *_lyricsNotificationInfo;
    NSDictionary *_inspectionNotificationInfo;
    NSDictionary *_playToEndNotificationInfo;
}

+ (id)convertFigTimeDictionaryToTimeIntervalWithKey:(id)arg1 stringURLToNSURLWithKey:(id)arg2 inArrayOfDictionaries:(id)arg3;
@property _Bool isPreparingForInspectionAccurateDuration; // @synthesize isPreparingForInspectionAccurateDuration=_isPreparingForInspectionAccurateDuration;
@property _Bool isPreparingForInspectionInitialSamples; // @synthesize isPreparingForInspectionInitialSamples=_isPreparingForInspectionInitialSamples;
@property _Bool isInPlayQueue; // @synthesize isInPlayQueue=_isInPlayQueue;
@property(retain) NSDictionary *lyricsNotificationInfo; // @synthesize lyricsNotificationInfo=_lyricsNotificationInfo;
@property(retain) NSDictionary *streamStateNotificationInfo; // @synthesize streamStateNotificationInfo=_streamStateNotificationInfo;
@property(retain) NSDictionary *playToEndNotificationInfo; // @synthesize playToEndNotificationInfo=_playToEndNotificationInfo;
@property(retain) NSDictionary *inspectionNotificationInfo; // @synthesize inspectionNotificationInfo=_inspectionNotificationInfo;
- (id)evenlySpacedThumbnailTimesFromStartTime:(double)arg1 toEndTime:(double)arg2 maxCount:(long long)arg3;
- (id)nextThumbnailTimesStartingAt:(double)arg1 minimumInterval:(double)arg2 forwards:(_Bool)arg3 maxCount:(long long)arg4;
- (void)stealControlOfAVItem;
- (void)setBookmarkTime:(double)arg1;
- (struct OpaqueFigPlaybackItem *)fpItem;
- (id)avItem;
- (void)fpItemNotificationInfo:(id)arg1;
- (void)fpItemNotificationName:(id)arg1 userInfo:(id)arg2;
- (void)removeFromPlayQueue:(struct OpaqueFigPlayer *)arg1;
- (_Bool)addToPlayQueue:(struct OpaqueFigPlayer *)arg1 afterItem:(struct OpaqueFigPlaybackItem *)arg2;
- (void)makeReadyForInspection;
- (void)ensureFPItem;
- (void)applyBookmarkTime;
- (id)propertiesNeededForInspection;
- (void)applyAttributesFromAVItemToFPItem:(id)arg1;
- (void)removeFPListeners;
- (void)addFPListeners;
- (id)fpNotificationNames;
- (void)setItemAttribute:(id)arg1 value:(id)arg2 forKey:(id)arg3 error:(id *)arg4;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (id)itemAttribute:(id)arg1 forKey:(id)arg2;
- (id)attributeForKey:(id)arg1;
- (id)formatDetailsForTracks;
- (void)cacheCurrentDuration;
- (void)cacheCurrentSize;
@property(readonly) _Bool isPreparingForInspection;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 item:(id)arg2;

@end

@interface AVPlaybackQueue : NSObject
{
    id _delegate;
    AVQueue *_avItemQueue;
    NSMutableArray *_pbItemQueue;
    struct OpaqueFigPlayer *_figPlayer;
    int _ignoreAVQueueModifications;
    _Bool _hasBuiltPlaybackQueue;
    _Bool _waitingToAddFirstItem;
    int _avQueueTransactionCount;
    long long _repeatMode;
}

- (void)playbackItemInspectionComplete:(id)arg1;
- (void)ensurePlaybackQueueImmed;
- (void)playbackItemWasRemovedFromPlayQueue:(id)arg1;
- (void)scheduleRemoveItemsNoLongerInPlayQueue;
- (void)removeItemsNoLongerInPlayQueue;
- (void)queueItemWillBeRemovedNotification:(id)arg1;
- (void)queueItemWasAddedNotification:(id)arg1;
- (void)endAVQueueTransaction;
- (void)beginAVQueueTransaction;
- (void)updateBookmarkTimesIncludeFirst:(_Bool)arg1 updateFirst:(_Bool)arg2;
- (void)setRepeatMode:(long long)arg1;
- (id)currentPlaybackItem;
- (void)ensurePlaybackQueue;
- (void)setAVItemQueue:(id)arg1;
- (void)fillInPBItemQueue;
- (void)clearPBItemQueueFromIndex:(int)arg1;
- (void)checkQueueConsistency;
- (void)setDelegate:(id)arg1;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 figPlayer:(struct OpaqueFigPlayer *)arg2;

@end

@interface AVQueue : NSObject
{
    NSRecursiveLock *_mutex;
    NSMutableArray *_items;
    void *_reserved;
    int _isBeingModifiedCount;
}

+ (id)queueWithArray:(id)arg1 error:(id *)arg2;
+ (id)avQueue;
- (_Bool)isBeingModified;
- (void)removeAllItems;
- (void)removeItemsInRange:(struct _NSRange)arg1;
- (_Bool)removeItemAtIndex:(unsigned long long)arg1;
- (_Bool)removeItem:(id)arg1;
- (void)itemWillBeRemoved:(id)arg1 atIndex:(long long)arg2;
- (_Bool)insertItem:(id)arg1 afterItem:(id)arg2 error:(id *)arg3;
- (_Bool)insertItem:(id)arg1 atIndex:(unsigned long long)arg2 error:(id *)arg3;
- (void)itemWasAdded:(id)arg1 atIndex:(long long)arg2;
- (_Bool)appendItem:(id)arg1 error:(id *)arg2;
- (_Bool)appendItemsFromArray:(id)arg1 error:(id *)arg2;
- (id)itemAfterItem:(id)arg1;
- (unsigned long long)indexOfItem:(id)arg1;
- (id)itemAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemCount;
- (long long)_instantiateItem;
- (void)dealloc;
- (id)initWithArray:(id)arg1 error:(id *)arg2;
- (id)init;
- (id)initWithError:(id *)arg1;

@end

@interface AVRecorder : NSObject
{
    struct AVRecorderPrivate *_priv;
}

- (void)makeError:(id *)arg1 withDescription:(id)arg2 code:(int)arg3;
- (_Bool)audioCurrentAverageDecibelLevels:(float *)arg1 andPeakDecibelLevels:(float *)arg2;
- (_Bool)audioCurrentAverageVolumeLevels:(float *)arg1 andPeakVolumeLevels:(float *)arg2;
- (unsigned long long)audioNumDeviceChannels;
- (double)recordedDuration;
- (long long)recordedFileSizeInBytes;
- (void)setMicVolume:(float)arg1;
- (float)micVolume;
- (void)deactivate;
- (_Bool)autoFocusAtPoint:(struct CGPoint)arg1;
- (_Bool)takePhoto;
- (_Bool)isActive;
- (_Bool)isRecording;
- (void)stop;
- (_Bool)start;
- (_Bool)activate:(id *)arg1;
- (void)implNotification:(id)arg1;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (id)filePath;
- (void)setFilePath:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AVRecorderAudioQueueImpl : NSObject <AVRecorderImpl>
{
    _Bool _isActive;
    _Bool _isRecording;
    _Bool _isWriting;
    NSMutableDictionary *_attributes;
    unsigned int _fileType;
    unsigned int _audioCodec;
    long long _maxPCMFramesToRecord;
    _Bool _haveRecordedMaxPCMFrames;
    struct AudioStreamBasicDescription _recordingFormat;
    struct OpaqueAudioFileID *_audioFile;
    struct OpaqueAudioQueue *_audioQueue;
    unsigned int _numDeviceChannels;
    struct AudioQueueLevelMeterState *_audioLevels;
    struct AudioQueueLevelMeterState *_audioLevelsDB;
    unsigned long long _totalBytesRecorded;
    unsigned long long _totalPacketsRecorded;
    unsigned long long _totalFramesRecorded;
    struct AudioQueueBuffer *_buffers[3];
    _Bool _bufferUsed[3];
}

- (void)haveABuffer:(struct AudioQueueBuffer *)arg1 withTimeStamp:(const struct AudioTimeStamp *)arg2 andNumPackets:(unsigned int)arg3 andPacketDescs:(const struct AudioStreamPacketDescription *)arg4;
- (void)copyEncoderCookieToFile;
- (_Bool)audioCurrentAverageDecibelLevels:(float *)arg1 andPeakDecibelLevels:(float *)arg2;
- (_Bool)audioCurrentAverageVolumeLevels:(float *)arg1 andPeakVolumeLevels:(float *)arg2;
- (_Bool)audioCurrentAverageVolumeLevels:(float *)arg1 andPeakVolumeLevels:(float *)arg2 useDB:(_Bool)arg3;
- (unsigned long long)audioNumDeviceChannels;
- (double)recordedDuration;
- (long long)recordedFileSizeInBytes;
- (void)setMicVolume:(float)arg1;
- (float)micVolume;
- (_Bool)isRecording;
- (void)stop;
- (_Bool)start;
- (_Bool)autoFocusAtPoint:(struct CGPoint)arg1;
- (_Bool)takePhoto;
- (_Bool)isActive;
- (void)deactivate;
- (_Bool)activate:(id *)arg1;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (id)filePath;
- (void)setFilePath:(id)arg1;
- (void)dealloc;
- (id)initWithAttributes:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVSafePerformOnMainThreadTargetDict : NSObject
{
    NSMutableDictionary *_obj;
}

+ (id)dict;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (oneway void)release;
- (void)dealloc;
- (id)init;

@end

@interface AVSafePostDelayedNotificationFromMainThreadTargetDict : NSObject
{
    NSMutableDictionary *_obj;
}

+ (id)dict;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (oneway void)release;
- (void)dealloc;
- (id)init;

@end

@interface AVSystemController : NSObject
{
    struct AVSystemControllerPrivate *_priv;
}

+ (id)sharedAVSystemController;
+ (void)initialize;
- (void)postEffectiveVolumeNotification:(void *)arg1;
- (void)postFullMuteDidChangeNotification:(void *)arg1;
- (void)handleServerDied;
- (_Bool)okToNotifyFromThisThread;
- (void)makeError:(id *)arg1 withDescription:(id)arg2 code:(int)arg3;
- (_Bool)setAttribute:(id)arg1 forKey:(id)arg2 error:(id *)arg3;
- (id)attributeForKey:(id)arg1;
- (_Bool)allowUserToExceedEUVolumeLimit;
- (_Bool)currentRouteHasVolumeControl;
- (id)pickableRoutesForCategory:(id)arg1;
- (id)pickableRoutesForCategory:(id)arg1 andMode:(id)arg2;
- (id)volumeCategoryForAudioCategory:(id)arg1;
- (id)routeForCategory:(id)arg1;
- (_Bool)getVolume:(float *)arg1 forCategory:(id)arg2;
- (_Bool)enablePortDiscovery:(_Bool)arg1;
- (_Bool)getPortDiscoveryEnabled;
- (_Bool)setPickedRouteWithPassword:(id)arg1 withPassword:(id)arg2;
- (_Bool)setBTHFPRoute:(id)arg1 availableForVoicePrompts:(_Bool)arg2;
- (_Bool)setVolumeTo:(float)arg1 forCategory:(id)arg2;
- (_Bool)changeVolumeBy:(float)arg1 forCategory:(id)arg2;
- (_Bool)getActiveCategoryMuted:(_Bool *)arg1 forRoute:(id)arg2 andDeviceIdentifier:(id)arg3;
- (_Bool)getActiveCategoryMuted:(_Bool *)arg1;
- (_Bool)toggleActiveCategoryMutedForRoute:(id)arg1 andDeviceIdentifier:(id)arg2;
- (_Bool)toggleActiveCategoryMuted;
- (_Bool)getVolumeForAccessory:(float *)arg1 forCategory:(id)arg2 accessoryRoute:(id)arg3 andAccessoryDeviceIdentifier:(id)arg4;
- (_Bool)setVolumeForAccessoryTo:(float)arg1 forCategory:(id)arg2 accessoryRoute:(id)arg3 andAccessoryDeviceIdentifier:(id)arg4;
- (_Bool)changeVolumeForAccessoryBy:(float)arg1 forCategory:(id)arg2 accessoryRoute:(id)arg3 andAccessoryDeviceIdentifier:(id)arg4;
- (_Bool)getActiveCategoryVolume:(float *)arg1 andName:(id *)arg2 forRoute:(id)arg3 andDeviceIdentifier:(id)arg4;
- (_Bool)setActiveCategoryVolumeTo:(float)arg1 forRoute:(id)arg2 andDeviceIdentifier:(id)arg3;
- (_Bool)changeActiveCategoryVolumeBy:(float)arg1 forRoute:(id)arg2 andDeviceIdentifier:(id)arg3;
- (_Bool)getActiveCategoryVolume:(float *)arg1 andName:(id *)arg2;
- (_Bool)getActiveCategoryVolume:(float *)arg1 andName:(id *)arg2 fallbackCategory:(id)arg3;
- (_Bool)setActiveCategoryVolumeTo:(float)arg1;
- (_Bool)setActiveCategoryVolumeTo:(float)arg1 fallbackCategory:(id)arg2 resultVolume:(float *)arg3 affectedCategory:(id *)arg4;
- (_Bool)changeActiveCategoryVolumeBy:(float)arg1;
- (_Bool)getVibeIntensity:(float *)arg1;
- (_Bool)setVibeIntensityTo:(float)arg1;
- (_Bool)changeActiveCategoryVolumeBy:(float)arg1 fallbackCategory:(id)arg2 resultVolume:(float *)arg3 affectedCategory:(id *)arg4;
- (void)dealloc;
- (id)init;

@end

@interface AVTimeMarkerObservation : NSObject
{
    id _observer;
    NSArray *_times;
    id _context;
    int _currentIndex;
}

- (int)currentIndex;
- (id)context;
- (id)observer;
- (double)prevInterestingTime;
- (double)nextInterestingTime;
- (_Bool)gotoTime:(double)arg1;
- (void)dealloc;
- (id)initWithObserver:(id)arg1 times:(id)arg2 context:(id)arg3 currentIndex:(int)arg4;

@end

@interface AVValue : NSObject
{
    SEL _selector;
}

+ (id)valueWithSelector:(SEL)arg1;
- (SEL)selectorValue;
- (id)initWithSelector:(SEL)arg1;

@end

@interface FigCaptureConnectionConfiguration : NSObject <FigXPCCoding, NSCopying>
{
    NSString *_connectionID;
    unsigned int _mediaType;
    FigCaptureSourceConfiguration *_sourceConfiguration;
    FigCaptureSinkConfiguration *_sinkConfiguration;
    _Bool _enabled;
}

+ (void)initialize;
@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) FigCaptureSinkConfiguration *sinkConfiguration; // @synthesize sinkConfiguration=_sinkConfiguration;
@property(retain, nonatomic) FigCaptureSourceConfiguration *sourceConfiguration; // @synthesize sourceConfiguration=_sourceConfiguration;
@property(nonatomic) unsigned int mediaType; // @synthesize mediaType=_mediaType;
@property(copy, nonatomic) NSString *connectionID; // @synthesize connectionID=_connectionID;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FigAudioCaptureConnectionConfiguration : FigCaptureConnectionConfiguration
{
}

- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;

@end

@interface FigCaptureRecordingSettings : NSObject <NSCoding>
{
    long long _settingsID;
    NSURL *_outputURL;
    NSString *_outputFileType;
    CDStruct_1b6d18a9 _maxDuration;
    long long _maxFileSize;
    long long _minFreeDiskSpaceLimit;
}

@property(nonatomic) long long minFreeDiskSpaceLimit; // @synthesize minFreeDiskSpaceLimit=_minFreeDiskSpaceLimit;
@property(nonatomic) long long maxFileSize; // @synthesize maxFileSize=_maxFileSize;
@property(nonatomic) CDStruct_1b6d18a9 maxDuration; // @synthesize maxDuration=_maxDuration;
@property(copy, nonatomic) NSString *outputFileType; // @synthesize outputFileType=_outputFileType;
@property(copy, nonatomic) NSURL *outputURL; // @synthesize outputURL=_outputURL;
@property(nonatomic) long long settingsID; // @synthesize settingsID=_settingsID;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface FigCaptureAudioFileRecordingSettings : FigCaptureRecordingSettings <NSCoding>
{
    NSDictionary *_audioSettings;
    NSDictionary *_metadata;
}

@property(copy, nonatomic) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(copy, nonatomic) NSDictionary *audioSettings; // @synthesize audioSettings=_audioSettings;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface FigCaptureMovieFileRecordingSettings : FigCaptureRecordingSettings <NSCoding>
{
    NSDictionary *_videoSettings;
    NSDictionary *_audioSettings;
    _Bool _videoMirrored;
    int _videoOrientation;
    CDStruct_1b6d18a9 _movieFragmentInterval;
    NSDictionary *_movieLevelMetadata;
    _Bool _sendThumbnailIOSurface;
}

@property(nonatomic) _Bool sendThumbnailIOSurface; // @synthesize sendThumbnailIOSurface=_sendThumbnailIOSurface;
@property(copy, nonatomic) NSDictionary *movieLevelMetadata; // @synthesize movieLevelMetadata=_movieLevelMetadata;
@property(nonatomic) CDStruct_1b6d18a9 movieFragmentInterval; // @synthesize movieFragmentInterval=_movieFragmentInterval;
@property(nonatomic) int videoOrientation; // @synthesize videoOrientation=_videoOrientation;
@property(nonatomic) _Bool videoMirrored; // @synthesize videoMirrored=_videoMirrored;
@property(copy, nonatomic) NSDictionary *audioSettings; // @synthesize audioSettings=_audioSettings;
@property(copy, nonatomic) NSDictionary *videoSettings; // @synthesize videoSettings=_videoSettings;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface FigCaptureSessionConfiguration : NSObject <FigXPCCoding, NSCopying>
{
    NSMutableArray *_connections;
    long long _configurationID;
    _Bool _usesAppAudioSession;
    _Bool _configuresAppAudioSession;
}

+ (void)initialize;
@property(nonatomic) _Bool configuresAppAudioSession; // @synthesize configuresAppAudioSession=_configuresAppAudioSession;
@property(nonatomic) _Bool usesAppAudioSession; // @synthesize usesAppAudioSession=_usesAppAudioSession;
@property(nonatomic) long long configurationID; // @synthesize configurationID=_configurationID;
@property(readonly, nonatomic) NSArray *sinkConfigurations;
@property(readonly, nonatomic) NSArray *sourceConfigurations;
@property(readonly, nonatomic) NSArray *connectionConfigurations;
- (void)removeConnectionConfiguration:(id)arg1;
- (void)addConnectionConfiguration:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FigCaptureSinkConfiguration : NSObject <FigXPCCoding, NSCopying>
{
    NSString *_sinkID;
    int _sinkType;
    _Bool _videoDataDiscardsLateVideoFrames;
    _Bool _videoDataDerivedFromPreview;
}

+ (int)sinkTypeForString:(id)arg1;
+ (id)stringForSinkType:(int)arg1;
+ (void)initialize;
@property(nonatomic) _Bool videoDataDerivedFromPreview; // @synthesize videoDataDerivedFromPreview=_videoDataDerivedFromPreview;
@property(nonatomic) _Bool videoDataDiscardsLateVideoFrames; // @synthesize videoDataDiscardsLateVideoFrames=_videoDataDiscardsLateVideoFrames;
@property(nonatomic) int sinkType; // @synthesize sinkType=_sinkType;
@property(copy, nonatomic) NSString *sinkID; // @synthesize sinkID=_sinkID;
- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FigCaptureSourceConfiguration : NSObject <FigXPCCoding, NSCopying>
{
    NSString *_sourceID;
    struct OpaqueFigCaptureSource *_source;
    int _sourceType;
    NSDictionary *_sourceAttributes;
    FigCaptureSourceFormat *_requiredFormat;
    float _requiredMaxFrameRate;
    float _requiredMinFrameRate;
    float _videoZoomFactor;
    float _videoZoomRampAcceleration;
    int _imageControlMode;
    _Bool _automaticallyEnablesLowLightBoostWhenAvailable;
    _Bool _applyMaxIntegrationTimeOverrideWhenAvailable;
    NSDictionary *_faceDetectionConfiguration;
    _Bool _sensorHDREnabled;
}

+ (int)sourceTypeForString:(id)arg1;
+ (id)stringForSourceType:(int)arg1;
+ (void)initialize;
@property(nonatomic) _Bool sensorHDREnabled; // @synthesize sensorHDREnabled=_sensorHDREnabled;
@property(copy, nonatomic) NSDictionary *faceDetectionConfiguration; // @synthesize faceDetectionConfiguration=_faceDetectionConfiguration;
@property(nonatomic) _Bool applyMaxIntegrationTimeOverrideWhenAvailable; // @synthesize applyMaxIntegrationTimeOverrideWhenAvailable=_applyMaxIntegrationTimeOverrideWhenAvailable;
@property(nonatomic) _Bool automaticallyEnablesLowLightBoostWhenAvailable; // @synthesize automaticallyEnablesLowLightBoostWhenAvailable=_automaticallyEnablesLowLightBoostWhenAvailable;
@property(nonatomic) int imageControlMode; // @synthesize imageControlMode=_imageControlMode;
@property(nonatomic) float videoZoomRampAcceleration; // @synthesize videoZoomRampAcceleration=_videoZoomRampAcceleration;
@property(nonatomic) float videoZoomFactor; // @synthesize videoZoomFactor=_videoZoomFactor;
@property(nonatomic) float requiredMinFrameRate; // @synthesize requiredMinFrameRate=_requiredMinFrameRate;
@property(nonatomic) float requiredMaxFrameRate; // @synthesize requiredMaxFrameRate=_requiredMaxFrameRate;
@property(retain, nonatomic) FigCaptureSourceFormat *requiredFormat; // @synthesize requiredFormat=_requiredFormat;
@property(copy, nonatomic) NSString *sourceID; // @synthesize sourceID=_sourceID;
- (id)_sourceUID;
- (int)_sourceToken;
- (_Bool)_isCameraSource;
- (id)_sourceAttributes;
@property(readonly, nonatomic) struct OpaqueFigCaptureSource *source;
@property(readonly, nonatomic) int sourceType;
@property(readonly, nonatomic) int sourcePosition;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)initWithSourceType:(int)arg1;
- (id)initWithSource:(struct OpaqueFigCaptureSource *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FigCaptureSourceFormat : NSObject <FigXPCCoding>
{
    NSDictionary *_formatDictionary;
    _Bool _isMultiStreamFormat;
    struct opaqueCMFormatDescription *_formatDescription;
}

+ (void)initialize;
- (CDStruct_1ef3fb1f)_visibleSensorDimensionsIncludingCinematic:(_Bool)arg1;
- (CDStruct_1ef3fb1f)_maxUseableSensorDimensions;
- (CDStruct_1ef3fb1f)_outputDimensions;
@property(readonly) NSArray *AVCaptureSessionPresets;
@property(readonly, getter=isHighProfileH264Supported) _Bool highProfileH264Supported;
@property(readonly) CDStruct_1ef3fb1f highResStillImageDimensions;
@property(readonly, getter=isHighResStillImageSupported) _Bool highResStillImageSupported;
@property(readonly, getter=isHDRSupported) _Bool hdrSupported;
@property(readonly, getter=isStillImageStabilizationSupported) _Bool stillImageStabilizationSupported;
@property(readonly) _Bool needsPreviewDPCC;
@property(readonly, getter=isHighResPhotoFormat) _Bool highResPhotoFormat;
@property(readonly, getter=isPhotoFormat) _Bool photoFormat;
@property(readonly) _Bool prefersSensorHDREnabled;
@property(readonly) int sensorHDRCompanionIndex;
@property(readonly) _Bool hasSensorHDRCompanionIndex;
@property(readonly) CDStruct_1ef3fb1f sourceCropAspectRatio;
@property(readonly) CDStruct_1ef3fb1f sensorCropDimensions;
@property(readonly) int frontEndScalerCompanionIndex;
@property(readonly) _Bool hasFrontEndScalerCompanionIndex;
@property(readonly, getter=isMultiStreamFormat) _Bool multiStreamFormat;
@property(readonly) int autoFocusSystem;
@property(readonly) int maxIntegrationTimeOverride;
@property(readonly) float aeMaxGain;
@property(readonly) CDStruct_1b6d18a9 maxExposureDuration;
@property(readonly) CDStruct_1b6d18a9 minExposureDuration;
@property(readonly) float maxISO;
@property(readonly) float minISO;
@property(readonly) _Bool ispChromaNoiseReduction;
@property(readonly) int temporalNoiseReductionMode;
@property(readonly) float videoScaleFactor;
@property(readonly) int videoRawBitDepth;
@property(readonly, getter=isVideoLowLightBinningSwitchSupported) _Bool videoLowLightBinningSwitchSupported;
@property(readonly, getter=isVideoZoomDynamicSensorCropSupported) _Bool videoZoomDynamicSensorCropSupported;
@property(readonly) float videoZoomFactorUpscaleThreshold;
@property(readonly) float videoMaxZoomFactor;
@property(readonly, getter=isVideoZoomSupported) _Bool videoZoomSupported;
@property(readonly) int videoStabilizationTypeOverrideForStandard;
- (_Bool)isVideoStabilizationModeSupported:(int)arg1;
@property(readonly, getter=isVideoBinned) _Bool videoBinned;
@property(readonly) float videoFieldOfView;
@property(readonly) float videoDefaultMaxFrameRate;
@property(readonly) float videoDefaultMinFrameRate;
@property(readonly) float videoMaxSupportedFrameRate;
@property(readonly) float videoMinSupportedFrameRate;
@property(readonly) CDStruct_1ef3fb1f sensorDimensions;
@property(readonly) CDStruct_1ef3fb1f videoDimensions;
@property(readonly) unsigned int videoFormat;
@property(readonly) int videoFormatIndex;
@property(readonly, getter=isDefaultActiveFormat) _Bool defaultActiveFormat;
@property(readonly, getter=isExperimental) _Bool experimental;
@property(readonly) struct opaqueCMFormatDescription *formatDescription;
@property(readonly) unsigned int mediaType;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)copyWithNewVideoPixelFormat:(unsigned int)arg1;
- (id)initWithFigCaptureStreamFormatDictionary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface FigCaptureStillImageSettings : NSObject <NSCoding>
{
    long long _settingsID;
    int _payloadType;
    unsigned int _outputFormat;
    unsigned int _outputWidth;
    unsigned int _outputHeight;
    _Bool _outputMirroring;
    int _outputOrientation;
    _Bool _thumbnailEnabled;
    unsigned int _thumbnailFormat;
    unsigned int _thumbnailWidth;
    unsigned int _thumbnailHeight;
    _Bool _thumbnailMirroring;
    int _thumbnailOrientation;
    _Bool _noiseReductionEnabled;
    float _scaleFactor;
    unsigned int _shutterSound;
    int _flashMode;
    int _HDRMode;
    _Bool _providesEV0Image;
    int _SISMode;
    NSString *_colorPrimaries;
    NSString *_transferFunction;
    NSString *_yCbCrMatrix;
    NSDictionary *_vtCompressionProperties;
    int _bracketType;
    unsigned int _bracketImageCount;
    CDStruct_1b6d18a9 *_exposureDurations;
    float *_ISOs;
    float *_exposureTargetBiases;
    long long _stillImageStartTime;
}

@property(nonatomic) long long stillImageStartTime; // @synthesize stillImageStartTime=_stillImageStartTime;
@property(readonly, nonatomic) float *exposureTargetBiases; // @synthesize exposureTargetBiases=_exposureTargetBiases;
@property(readonly, nonatomic) float *ISOs; // @synthesize ISOs=_ISOs;
@property(readonly, nonatomic) CDStruct_1b6d18a9 *exposureDurations; // @synthesize exposureDurations=_exposureDurations;
@property(readonly, nonatomic) unsigned int bracketImageCount; // @synthesize bracketImageCount=_bracketImageCount;
@property(readonly, nonatomic) int bracketType; // @synthesize bracketType=_bracketType;
@property(copy, nonatomic) NSDictionary *vtCompressionProperties; // @synthesize vtCompressionProperties=_vtCompressionProperties;
@property(copy, nonatomic) NSString *yCbCrMatrix; // @synthesize yCbCrMatrix=_yCbCrMatrix;
@property(copy, nonatomic) NSString *transferFunction; // @synthesize transferFunction=_transferFunction;
@property(copy, nonatomic) NSString *colorPrimaries; // @synthesize colorPrimaries=_colorPrimaries;
@property(nonatomic) int SISMode; // @synthesize SISMode=_SISMode;
@property(nonatomic) _Bool providesEV0Image; // @synthesize providesEV0Image=_providesEV0Image;
@property(nonatomic) int HDRMode; // @synthesize HDRMode=_HDRMode;
@property(nonatomic) int flashMode; // @synthesize flashMode=_flashMode;
@property(nonatomic) unsigned int shutterSound; // @synthesize shutterSound=_shutterSound;
@property(nonatomic) float scaleFactor; // @synthesize scaleFactor=_scaleFactor;
@property(nonatomic) _Bool noiseReductionEnabled; // @synthesize noiseReductionEnabled=_noiseReductionEnabled;
@property(nonatomic) int thumbnailOrientation; // @synthesize thumbnailOrientation=_thumbnailOrientation;
@property(nonatomic) _Bool thumbnailMirroring; // @synthesize thumbnailMirroring=_thumbnailMirroring;
@property(nonatomic) unsigned int thumbnailHeight; // @synthesize thumbnailHeight=_thumbnailHeight;
@property(nonatomic) unsigned int thumbnailWidth; // @synthesize thumbnailWidth=_thumbnailWidth;
@property(nonatomic) unsigned int thumbnailFormat; // @synthesize thumbnailFormat=_thumbnailFormat;
@property(nonatomic) _Bool thumbnailEnabled; // @synthesize thumbnailEnabled=_thumbnailEnabled;
@property(nonatomic) int outputOrientation; // @synthesize outputOrientation=_outputOrientation;
@property(nonatomic) _Bool outputMirroring; // @synthesize outputMirroring=_outputMirroring;
@property(nonatomic) unsigned int outputHeight; // @synthesize outputHeight=_outputHeight;
@property(nonatomic) unsigned int outputWidth; // @synthesize outputWidth=_outputWidth;
@property(nonatomic) unsigned int outputFormat; // @synthesize outputFormat=_outputFormat;
@property(nonatomic) int payloadType; // @synthesize payloadType=_payloadType;
@property(nonatomic) long long settingsID; // @synthesize settingsID=_settingsID;
- (void)_teardownBracketStorage;
- (void)setBracketType:(int)arg1 imageCount:(unsigned int)arg2;
@property(readonly, nonatomic) NSDictionary *thumbnailPixelBufferAttributes;
@property(readonly, nonatomic) NSDictionary *outputPixelBufferAttributes;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface FigMetadataItemCaptureConnectionConfiguration : FigCaptureConnectionConfiguration
{
    struct opaqueCMFormatDescription *_formatDescription;
    struct OpaqueCMClock *_clock;
}

@property(retain, nonatomic) struct OpaqueCMClock *clock; // @synthesize clock=_clock;
@property(retain, nonatomic) struct opaqueCMFormatDescription *formatDescription; // @synthesize formatDescription=_formatDescription;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;

@end

@interface FigMetadataObjectCaptureConnectionConfiguration : FigCaptureConnectionConfiguration
{
    NSArray *_metadataIdentifiers;
    struct CGRect _metadataRectOfInterest;
}

@property(nonatomic) struct CGRect metadataRectOfInterest; // @synthesize metadataRectOfInterest=_metadataRectOfInterest;
@property(copy, nonatomic) NSArray *metadataIdentifiers; // @synthesize metadataIdentifiers=_metadataIdentifiers;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;

@end

@interface FigVideoCaptureConnectionConfiguration : FigCaptureConnectionConfiguration
{
    int _outputFormat;
    int _outputWidth;
    int _outputHeight;
    int _videoStabilizationMethod;
    _Bool _mirroringEnabled;
    int _orientation;
    int _retainedBufferCount;
}

@property(nonatomic) int retainedBufferCount; // @synthesize retainedBufferCount=_retainedBufferCount;
@property(nonatomic) int orientation; // @synthesize orientation=_orientation;
@property(nonatomic) _Bool mirroringEnabled; // @synthesize mirroringEnabled=_mirroringEnabled;
@property(nonatomic) int videoStabilizationMethod; // @synthesize videoStabilizationMethod=_videoStabilizationMethod;
@property(nonatomic) int outputHeight; // @synthesize outputHeight=_outputHeight;
@property(nonatomic) int outputWidth; // @synthesize outputWidth=_outputWidth;
@property(nonatomic) int outputFormat; // @synthesize outputFormat=_outputFormat;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)dealloc;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (id)init;

@end

@interface NSArray (PickableRoutes)
- (id)pickableRouteWithUID:(id)arg1;
@end

@interface NSDictionary (PickableRoute)
- (_Bool)matchesUID:(id)arg1;
@end

@interface NSObject (NSObject_AVShared)
- (void)fromMainThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)fromNotifySafeThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)fromNotifySafeThreadPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (_Bool)okToNotifyFromThisThread;
- (void)disallowSafePerformSelector;
- (void)allowSafePerformSelector;
- (void)postNotificationWithDescription:(id)arg1;
@end

