//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct C3DColor4 {
    union {
        float rgba[4];
        struct {
            float r;
            float g;
            float b;
            float a;
        } ;
    } ;
};

struct CGPath;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct InplaceSolverIslandCallback;

struct SCNCAction {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
};

struct SCNCActionCustom {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    CDUnknownBlockType _field20;
};

struct SCNCActionFade {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    float _field20;
    float _field21;
    float _field22;
    _Bool _field23;
};

struct SCNCActionGroup {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct list<SCNCAction *, std::__1::allocator<SCNCAction *>> _field20;
};

struct SCNCActionMove {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    _Bool _field21;
    _Bool _field22;
};

struct SCNCActionRepeat {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct SCNCAction *_field20;
    unsigned long long _field21;
    unsigned long long _field22;
    _Bool _field23;
};

struct SCNCActionRotate {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    float _field20;
    struct __C3DQuaternion _field21;
    struct __C3DQuaternion _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SCNCActionScale {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SCNCActionSequence {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct vector<SCNCAction *, std::__1::allocator<SCNCAction *>> _field20;
    unsigned long long _field21;
};

struct SCNCActionWait {
    CDUnknownFunctionPointerType *_field1;
    float _field2;
    CDUnknownBlockType _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    CDUnknownBlockType _field13;
    struct __CFString *_field14;
    long long _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
};

struct SCNMatrix4 {
    float m11;
    float m12;
    float m13;
    float m14;
    float m21;
    float m22;
    float m23;
    float m24;
    float m31;
    float m32;
    float m33;
    float m34;
    float m41;
    float m42;
    float m43;
    float m44;
};

struct SCNVector3 {
    float x;
    float y;
    float z;
};

struct SCNVector4 {
    float x;
    float y;
    float z;
    float w;
};

struct UIBezierPath {
    Class _field1;
    struct CGPath *_field2;
    double *_field3;
    unsigned long long _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    int _field10;
    _Bool _field11;
    struct CGPath *_field12;
    _Bool _field13;
};

struct UIImage {
    Class _field1;
    void *_field2;
    double _field3;
    struct {
        unsigned int :1;
        unsigned int :3;
        unsigned int :1;
        unsigned int :1;
        unsigned int :1;
        unsigned int :2;
        unsigned int :1;
        unsigned int :1;
    } _field4;
};

struct _C3DAnimationPendingEvent;

struct __C3DAnimation {
    struct __C3DEntity _field1;
    double _field2;
    float _field3;
    struct __C3DTimingFunction *_field4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    double _field5;
    double _field6;
    double _field7;
    float _field8;
    float _field9;
    float _field10;
    CDUnknownFunctionPointerType _field11;
    void *_field12;
    void *_field13;
    void *_field14;
    struct __C3DAnimationEvents *_field15;
    CDStruct_2921ca3b _field16;
};

struct __C3DAnimationChannel {
    struct __CFRuntimeBase _field1;
    struct __C3DAnimation *_field2;
    struct __CFArray *_field3;
    void *_field4;
    struct __C3DModelTarget *_field5;
    struct __CFString *_field6;
};

struct __C3DAnimationManager {
    struct __CFRuntimeBase _field1;
    struct __C3DModelValueStorage *_field2;
    struct __CFDictionary *_field3;
    struct __CFDictionary *_field4;
    struct __CFSet *_field5;
    struct __CFArray *_field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    struct _C3DAnimationPendingEvent *_field10;
    struct __C3DAllocator *_field11;
    struct __CFDictionary *_field12;
    struct __CFArray *_field13;
    double _field14;
    double _field15;
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } _field16;
    int _field17;
    int _field18;
    int _field19;
    int _field20;
};

struct __C3DConstraint {
    struct __C3DEntity _field1;
    struct __CFString *_field2;
    CDStruct_2921ca3b _field3;
    float _field4;
    _Bool _field5;
};

struct __C3DEffectCommonProfile {
    struct __C3DEffectProfile {
        struct __CFRuntimeBase _field1;
        int _field2;
    } _field1;
    struct __C3DMaterial *_field2;
    int _field3;
    struct __C3DEffectSlot *_field4;
    struct __C3DEffectSlot *_field5;
    struct __C3DEffectSlot *_field6;
    struct __C3DEffectSlot *_field7;
    struct __C3DEffectSlot *_field8;
    struct __C3DEffectSlot *_field9;
    struct __C3DEffectSlot *_field10;
    struct __C3DEffectSlot *_field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    char _field17;
    long long _field18;
    _Bool _field19;
    _Bool _field20;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :10;
    struct __C3DFXProgram *_field21;
};

struct __C3DEffectSlot {
    struct __CFRuntimeBase _field1;
    struct C3DColor4 _field2;
    struct __C3DImage *_field3;
    struct __C3DTextureSampler *_field4;
    struct __C3DTexture *_field5;
    struct __C3DImageProxy *_field6;
    struct __C3DTransforms *_field7;
    int _field8;
    float _field9;
    int _field10;
    void *_field11;
};

struct __C3DEntity {
    struct __CFRuntimeBase _field1;
    void *_field2;
    struct __CFString *_field3;
    struct __CFString *_field4;
    struct __CFDictionary *_field5;
    long long _field6;
    long long _field7;
};

struct __C3DFloor {
    struct __C3DGeometry _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    int _field6;
    float _field7;
};

struct __C3DFramebuffer;

struct __C3DGenericSource {
    struct __C3DEntity _field1;
    struct __C3DSourceAccessor *_field2;
    union {
        struct __CFData *_field1;
        void *_field2;
    } _field3;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct __C3DGeometry {
    struct __C3DEntity _field1;
    struct __C3DMesh *_field2;
    struct __C3DMaterial *_field3;
    struct __CFArray *_field4;
    struct __CFArray *_field5;
    struct __CFSet *_field6;
    struct __CFArray *_field7;
    struct __C3DAABB *_field8;
    CDUnknownFunctionPointerType _field9;
    struct {
        _Bool _field1;
        _Bool _field2;
        unsigned short _field3;
        unsigned short _field4;
        float _field5;
        float _field6;
        unsigned char _field7;
        unsigned char _field8;
        unsigned char _field9;
        unsigned char _field10;
        struct __C3DMeshElement *_field11;
        struct __C3DMeshSource *_field12;
        struct __C3DMesh *_field13;
        _Bool _field14;
        _Bool _field15;
        void *_field16;
        void *_field17;
    } _field10;
};

struct __C3DKeyframedAnimation {
    struct __C3DAnimation _field1;
    struct __C3DKeyframeController *_field2;
};

struct __C3DLight {
    struct __C3DEntity _field1;
    struct C3DColor4 _field2;
    int _field3;
    float _field4[6];
    struct C3DColor4 _field5;
    union C3DVector2 _field6;
    float _field7;
    float _field8;
    unsigned int _field9;
    unsigned long long _field10;
    _Bool _field11;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    double _field12;
    double _field13;
    double _field14;
    struct __C3DEffectSlot *_field15;
    struct __C3DFXTechnique *_field16;
};

struct __C3DMaterial;

struct __C3DMesh;

struct __C3DMeshSource {
    struct __C3DGenericSource _field1;
    unsigned short _field2;
    unsigned short _field3;
};

struct __C3DMorph {
    struct __C3DEntity _field1;
    int _field2;
    struct __CFArray *_field3;
    struct __C3DGenericSource *_field4;
    unsigned int _field5;
    _Bool _field6;
};

struct __C3DParametricGeometry {
    struct __C3DGeometry _field1;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
        float _field10;
        float _field11;
        float _field12;
        int _field13;
        int _field14;
        int _field15;
        int _field16;
        int _field17;
        int _field18;
        int _field19;
        int _field20;
        int _field21;
        int _field22;
        int _field23;
        unsigned int _field24;
    } _field2;
    struct {
        CDUnknownFunctionPointerType _field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
    } _field3;
    struct __CFData *_field4;
};

struct __C3DQuaternion {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct __C3DShapeGeometry {
    struct __C3DGeometry _field1;
    struct {
        char _field1;
        float _field2;
        float _field3;
        float _field4;
        int _field5;
        float _field6;
        struct CGPath *_field7;
        void *_field8;
        struct CGPath *_field9;
        void *_field10;
    } _field2;
    struct __C3DMesh *_field3;
    unsigned char _field4[16];
};

struct __C3DTextGeometry {
    struct __C3DShapeGeometry _field1;
    struct {
        struct __CTFrame *_field1;
        void *_field2;
        void *_field3;
        int _field4;
        int _field5;
        _Bool _field6;
        _Bool _field7;
        _Bool _field8;
        struct CGRect _field9;
    } _field2;
};

struct __C3DTextureSampler {
    struct __CFRuntimeBase _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    struct C3DColor4 _field8;
    float _field9;
    unsigned char _field10;
    int _field11;
    unsigned long long _field12;
};

struct __C3DValue {
    struct __CFRuntimeBase _field1;
    short _field2;
    short _field3;
    char *_field4;
    long long _field5;
};

struct __CFArray;

struct __CFData;

struct __CFDictionary;

struct __CFRuntimeBase {
    unsigned long long _field1;
    unsigned char _field2[4];
    unsigned int _field3;
};

struct __CFSet;

struct __CFString;

struct __list_node<SCNCAction *, void *>;

struct btActionInterface;

struct btAlignedAllocator<btActionInterface *, 16>;

struct btAlignedAllocator<btCollisionObject *, 16>;

struct btAlignedAllocator<btPersistentManifold *, 16>;

struct btAlignedAllocator<btRigidBody *, 16>;

struct btAlignedAllocator<btTypedConstraint *, 16>;

struct btAlignedAllocator<btVector3, 16>;

struct btAlignedAllocator<btWheelInfo, 16>;

struct btAlignedAllocator<float, 16>;

struct btAlignedObjectArray<btActionInterface *> {
    struct btAlignedAllocator<btActionInterface *, 16> _field1;
    int _field2;
    int _field3;
    struct btActionInterface **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btCollisionObject *> {
    struct btAlignedAllocator<btCollisionObject *, 16> _field1;
    int _field2;
    int _field3;
    struct btCollisionObject **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btPersistentManifold *> {
    struct btAlignedAllocator<btPersistentManifold *, 16> _field1;
    int _field2;
    int _field3;
    struct btPersistentManifold **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btRigidBody *> {
    struct btAlignedAllocator<btRigidBody *, 16> _field1;
    int _field2;
    int _field3;
    struct btRigidBody **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btTypedConstraint *> {
    struct btAlignedAllocator<btTypedConstraint *, 16> _field1;
    int _field2;
    int _field3;
    struct btTypedConstraint **_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btVector3> {
    struct btAlignedAllocator<btVector3, 16> _field1;
    int _field2;
    int _field3;
    struct btVector3 *_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<btWheelInfo> {
    struct btAlignedAllocator<btWheelInfo, 16> _field1;
    int _field2;
    int _field3;
    struct btWheelInfo *_field4;
    _Bool _field5;
};

struct btAlignedObjectArray<float> {
    struct btAlignedAllocator<float, 16> _field1;
    int _field2;
    int _field3;
    float *_field4;
    _Bool _field5;
};

struct btAngularLimit {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    _Bool _field8;
};

struct btBroadphaseInterface;

struct btBroadphaseProxy;

struct btC3DDebugDraw {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
};

struct btCapsuleShape {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    float _field6;
    float _field7;
    int _field8;
};

struct btCharacterControllerInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct btCollisionObject;

struct btCollisionShape {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
};

struct btConstraintSetting {
    float _field1;
    float _field2;
    float _field3;
};

struct btConstraintSolver;

struct btContactSolverInfo {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    int _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    int _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    int _field18;
    int _field19;
    float _field20;
    float _field21;
};

struct btDiscreteDynamicsWorld {
    CDUnknownFunctionPointerType *_field1;
    struct btAlignedObjectArray<btCollisionObject *> _field2;
    struct btDispatcher *_field3;
    struct btDispatcherInfo _field4;
    struct btBroadphaseInterface *_field5;
    struct btIDebugDraw *_field6;
    _Bool _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    void *_field10;
    struct btContactSolverInfo _field11;
    float _field12;
    struct btAlignedObjectArray<btTypedConstraint *> _field13;
    struct InplaceSolverIslandCallback *_field14;
    struct btConstraintSolver *_field15;
    struct btSimulationIslandManager *_field16;
    struct btAlignedObjectArray<btTypedConstraint *> _field17;
    struct btAlignedObjectArray<btRigidBody *> _field18;
    struct btVector3 _field19;
    float _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    struct btAlignedObjectArray<btActionInterface *> _field25;
    int _field26;
    struct btAlignedObjectArray<btPersistentManifold *> _field27;
    _Bool _field28;
};

struct btDispatcher;

struct btDispatcherInfo {
    float _field1;
    int _field2;
    int _field3;
    float _field4;
    _Bool _field5;
    struct btIDebugDraw *_field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    float _field10;
    _Bool _field11;
    float _field12;
};

struct btDynamicsWorld {
    CDUnknownFunctionPointerType *_field1;
    struct btAlignedObjectArray<btCollisionObject *> _field2;
    struct btDispatcher *_field3;
    struct btDispatcherInfo _field4;
    struct btBroadphaseInterface *_field5;
    struct btIDebugDraw *_field6;
    _Bool _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    void *_field10;
    struct btContactSolverInfo _field11;
    float _field12;
};

struct btHashedOverlappingPairCache;

struct btHingeConstraint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    CDUnion_15924c16 _field4;
    float _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
    struct btRigidBody *_field9;
    struct btRigidBody *_field10;
    float _field11;
    float _field12;
    struct btJointFeedback *_field13;
    struct btJacobianEntry _field14[3];
    struct btJacobianEntry _field15[3];
    struct btTransform _field16;
    struct btTransform _field17;
    float _field18;
    float _field19;
    struct btAngularLimit _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    float _field30;
    int _field31;
    float _field32;
    float _field33;
    float _field34;
};

struct btIDebugDraw;

struct btJacobianEntry {
    struct btVector3 _field1;
    struct btVector3 _field2;
    struct btVector3 _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    float _field6;
};

struct btJointFeedback;

struct btManifoldPoint {
    struct btVector3 _field1;
    struct btVector3 _field2;
    struct btVector3 _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    void *_field14;
    _Bool _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    int _field23;
    struct btVector3 _field24;
    struct btVector3 _field25;
};

struct btMatrix3x3 {
    struct btVector3 _field1[3];
};

struct btMotionState;

struct btOverlapFilterCallback {
    CDUnknownFunctionPointerType *_field1;
};

struct btOverlappingPairCallback {
    CDUnknownFunctionPointerType *_field1;
};

struct btPairCachingGhostObject {
    CDUnknownFunctionPointerType *_field1;
    struct btTransform _field2;
    struct btTransform _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    struct btVector3 _field6;
    int _field7;
    float _field8;
    struct btBroadphaseProxy *_field9;
    struct btCollisionShape *_field10;
    void *_field11;
    struct btCollisionShape *_field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    int _field21;
    void *_field22;
    float _field23;
    float _field24;
    float _field25;
    int _field26;
    struct btAlignedObjectArray<btCollisionObject *> _field27;
    struct btHashedOverlappingPairCache *_field28;
};

struct btPersistentManifold {
    int _field1;
    struct btManifoldPoint _field2[4];
    struct btCollisionObject *_field3;
    struct btCollisionObject *_field4;
    int _field5;
    float _field6;
    float _field7;
    int _field8;
    int _field9;
    int _field10;
    struct c3dContactCallback *_field11;
};

struct btPoint2PointConstraint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    CDUnion_15924c16 _field4;
    float _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
    struct btRigidBody *_field9;
    struct btRigidBody *_field10;
    float _field11;
    float _field12;
    struct btJointFeedback *_field13;
    struct btJacobianEntry _field14[3];
    struct btVector3 _field15;
    struct btVector3 _field16;
    int _field17;
    float _field18;
    float _field19;
    _Bool _field20;
    struct btConstraintSetting _field21;
};

struct btRaycastVehicle {
    CDUnknownFunctionPointerType *_field1;
    struct btAlignedObjectArray<btVector3> _field2;
    struct btAlignedObjectArray<btVector3> _field3;
    struct btAlignedObjectArray<float> _field4;
    struct btAlignedObjectArray<float> _field5;
    int _field6;
    int _field7;
    float _field8;
    float _field9;
    struct btVehicleRaycaster *_field10;
    float _field11;
    float _field12;
    float _field13;
    struct btRigidBody *_field14;
    int _field15;
    int _field16;
    int _field17;
    struct btAlignedObjectArray<btWheelInfo> _field18;
};

struct btRigidBody {
    CDUnknownFunctionPointerType *_field1;
    struct btTransform _field2;
    struct btTransform _field3;
    struct btVector3 _field4;
    struct btVector3 _field5;
    struct btVector3 _field6;
    int _field7;
    float _field8;
    struct btBroadphaseProxy *_field9;
    struct btCollisionShape *_field10;
    void *_field11;
    struct btCollisionShape *_field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    int _field21;
    void *_field22;
    float _field23;
    float _field24;
    float _field25;
    int _field26;
    struct btMatrix3x3 _field27;
    struct btVector3 _field28;
    struct btVector3 _field29;
    float _field30;
    struct btVector3 _field31;
    struct btVector3 _field32;
    struct btVector3 _field33;
    struct btVector3 _field34;
    struct btVector3 _field35;
    struct btVector3 _field36;
    float _field37;
    float _field38;
    _Bool _field39;
    float _field40;
    float _field41;
    float _field42;
    float _field43;
    float _field44;
    float _field45;
    float _field46;
    struct btMotionState *_field47;
    struct btAlignedObjectArray<btTypedConstraint *> _field48;
    int _field49;
    int _field50;
    struct btVector3 _field51;
    struct btVector3 _field52;
    struct btVector3 _field53;
    struct btVector3 _field54;
    struct btVector3 _field55;
    struct btVector3 _field56;
    int _field57;
    int _field58;
};

struct btSimulationIslandManager;

struct btSliderConstraint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    CDUnion_15924c16 _field4;
    float _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
    struct btRigidBody *_field9;
    struct btRigidBody *_field10;
    float _field11;
    float _field12;
    struct btJointFeedback *_field13;
    _Bool _field14;
    _Bool _field15;
    struct btTransform _field16;
    struct btTransform _field17;
    _Bool _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    float _field30;
    float _field31;
    float _field32;
    float _field33;
    float _field34;
    float _field35;
    float _field36;
    float _field37;
    float _field38;
    float _field39;
    float _field40;
    float _field41;
    float _field42;
    float _field43;
    float _field44;
    float _field45;
    float _field46;
    _Bool _field47;
    _Bool _field48;
    int _field49;
    struct btJacobianEntry _field50[3];
    float _field51[3];
    struct btJacobianEntry _field52[3];
    float _field53;
    struct btTransform _field54;
    struct btTransform _field55;
    struct btVector3 _field56;
    struct btVector3 _field57;
    struct btVector3 _field58;
    struct btVector3 _field59;
    struct btVector3 _field60;
    struct btVector3 _field61;
    struct btVector3 _field62;
    struct btVector3 _field63;
    float _field64;
    float _field65;
    float _field66;
    float _field67;
    _Bool _field68;
    float _field69;
    float _field70;
    float _field71;
    _Bool _field72;
    float _field73;
    float _field74;
    float _field75;
};

struct btTransform {
    struct btMatrix3x3 _field1;
    struct btVector3 _field2;
};

struct btTypedConstraint;

struct btVector3 {
    union {
        float _field1[4];
    } _field1;
};

struct btVehicleRaycaster {
    CDUnknownFunctionPointerType *_field1;
};

struct btWheelInfo;

struct c3dAether {
    struct vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *>> _fields;
};

struct c3dContactCallback;

struct c3dPhysicsField;

struct list<SCNCAction *, std::__1::allocator<SCNCAction *>> {
    struct __list_node_base<SCNCAction *, void *> {
        struct __list_node<SCNCAction *, void *> *_field1;
        struct __list_node<SCNCAction *, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SCNCAction *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct vector<SCNCAction *, std::__1::allocator<SCNCAction *>> {
    struct SCNCAction **_field1;
    struct SCNCAction **_field2;
    struct __compressed_pair<SCNCAction **, std::__1::allocator<SCNCAction *>> {
        struct SCNCAction **_field1;
    } _field3;
};

struct vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *>> {
    struct c3dPhysicsField **__begin_;
    struct c3dPhysicsField **__end_;
    struct __compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *>> {
        struct c3dPhysicsField **__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
} CDStruct_2921ca3b;

typedef struct {
    char _field1;
    double _field2;
    double _field3;
    int _field4;
    double _field5;
    void *_field6;
    void *_field7;
} CDStruct_d3ce6806;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    id _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct SCNVector3 _field4;
    struct SCNVector3 _field5;
    double _field6;
} CDStruct_edec59f9;

typedef struct {
    struct __C3DFXGLSLProgram *weakProgram;
    struct {
        unsigned int vbo;
        unsigned int ibo;
        unsigned int baseIndex;
        unsigned int baseVertex;
        unsigned int vertexSize;
        unsigned int allocatedVerticesSize;
        unsigned int allocatedIndicesSize;
    } dynamicVBOInfo;
    unsigned int textureID;
    unsigned int vao;
    unsigned int drawMode;
    _Bool orthographic;
    _Bool clearDepthBuffer;
    _Bool enableDepthTest;
    _Bool enableCulling;
    _Bool isDynamic;
} CDStruct_cec9a5d8;

typedef struct {
    struct {
        unsigned int textureID;
        struct CGSize textureSize;
        _Bool isRetina;
    } textureInfo;
    double lineHeight;
    short characterWidth_texture;
    double characterWidth_typography;
    short characterHeight_texture;
    struct *symbolRects;
} CDStruct_a02c98f3;

typedef struct {
    CDStruct_d3ce6806 _field1;
    void *_field2;
    void *_field3;
    int _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    struct CGRect _field8;
    double _field9;
} CDStruct_8bd95810;

#pragma mark Named Unions

union C3DVector2 {
    float _field1[2];
    CDStruct_b2fbf00d _field2;
    CDStruct_b2fbf00d _field3;
    CDStruct_b2fbf00d _field4;
};

#pragma mark Typedef'd Unions

typedef union {
    int _field1;
    void *_field2;
} CDUnion_15924c16;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/SceneKit.framework/SceneKit
// UUID: 76150B2F-186C-3EFF-8E27-0A7A7906B913
//
//                           Arch: x86_64
//                Current version: 186.0.0
//          Compatibility version: 1.0.0
//                 Source version: 256.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol JSExport
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol SCNActionJSExport <JSExport>
+ (SCNAction *)customActionWithDuration:(double)arg1 actionBlock:(void (^)(SCNNode *, double))arg2;
+ (SCNAction *)javaScriptActionWithScript:(NSString *)arg1 duration:(double)arg2;
+ (SCNAction *)runBlock:(void (^)(SCNNode *))arg1 queue:(NSObject<OS_dispatch_queue> *)arg2;
+ (SCNAction *)runBlock:(void (^)(SCNNode *))arg1;
+ (SCNAction *)removeFromParentNode;
+ (SCNAction *)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (SCNAction *)waitForDuration:(double)arg1;
+ (SCNAction *)fadeOpacityTo:(double)arg1 duration:(double)arg2;
+ (SCNAction *)fadeOpacityBy:(double)arg1 duration:(double)arg2;
+ (SCNAction *)fadeOutWithDuration:(double)arg1;
+ (SCNAction *)fadeInWithDuration:(double)arg1;
+ (SCNAction *)repeatActionForever:(SCNAction *)arg1;
+ (SCNAction *)repeatAction:(SCNAction *)arg1 count:(unsigned long long)arg2;
+ (SCNAction *)group:(NSArray *)arg1;
+ (SCNAction *)sequence:(NSArray *)arg1;
+ (SCNAction *)scaleTo:(double)arg1 duration:(double)arg2;
+ (SCNAction *)scaleBy:(double)arg1 duration:(double)arg2;
+ (SCNAction *)rotateToAxisAngle:(struct SCNVector4)arg1 duration:(double)arg2;
+ (SCNAction *)rotateByAngle:(double)arg1 aroundAxis:(struct SCNVector3)arg2 duration:(double)arg3;
+ (SCNAction *)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4 shortestUnitArc:(_Bool)arg5;
+ (SCNAction *)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (SCNAction *)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (SCNAction *)moveTo:(struct SCNVector3)arg1 duration:(double)arg2;
+ (SCNAction *)moveBy:(struct SCNVector3)arg1 duration:(double)arg2;
+ (SCNAction *)moveByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
@property(nonatomic) double speed;
@property(nonatomic) long long timingMode;
@property(nonatomic) double duration;
- (id)copy;
- (SCNAction *)reversedAction;
@end

@protocol SCNActionable <NSObject>
- (void)removeAllActions;
- (void)removeActionForKey:(NSString *)arg1;
- (SCNAction *)actionForKey:(NSString *)arg1;
- (_Bool)hasActions;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2 completionHandler:(void (^)(void))arg3;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2;
- (void)runAction:(SCNAction *)arg1 completionHandler:(void (^)(void))arg2;
- (void)runAction:(SCNAction *)arg1;
@end

@protocol SCNAnimatable <NSObject>
- (void)removeAnimationForKey:(NSString *)arg1 fadeOutDuration:(double)arg2;
- (_Bool)isAnimationForKeyPaused:(NSString *)arg1;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
@end

@protocol SCNAnimationEventJSExport <JSExport>
+ (id)animationEventWithKeyTime:(double)arg1 block:(void (^)(CAAnimation *, id, _Bool))arg2;
@end

@protocol SCNBoundingBoxJSExport <JSExport>
@property(nonatomic) struct SCNVector3 max;
@property(nonatomic) struct SCNVector3 min;
@end

@protocol SCNBoundingSphereJSExport <JSExport>
@property(nonatomic) double radius;
@property(nonatomic) struct SCNVector3 center;
@end

@protocol SCNBoundingVolume <NSObject>
- (void)setBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@end

@protocol SCNBoxJSExport <JSExport>
+ (id)boxWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 chamferRadius:(double)arg4;
@property(nonatomic) long long chamferSegmentCount;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double chamferRadius;
@property(nonatomic) double length;
@property(nonatomic) double height;
@property(nonatomic) double width;
@end

@protocol SCNCameraJSExport <JSExport>
+ (id)camera;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) double aperture;
@property(nonatomic) double focalBlurRadius;
@property(nonatomic) double focalSize;
@property(nonatomic) double focalDistance;
@property(nonatomic) double orthographicScale;
@property(nonatomic) _Bool usesOrthographicProjection;
@property(nonatomic) _Bool automaticallyAdjustsZRange;
@property(nonatomic) double zFar;
@property(nonatomic) double zNear;
@property(nonatomic) double yFov;
@property(nonatomic) double xFov;
@property(copy, nonatomic) NSString *name;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)setProjectionTransform:(struct SCNMatrix4)arg1;
- (struct SCNMatrix4)projectionTransform;
@end

@protocol SCNCapsuleJSExport <JSExport>
+ (id)capsuleWithCapRadius:(double)arg1 height:(double)arg2;
@property(nonatomic) long long capSegmentCount;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double capRadius;
@end

@protocol SCNColorJSExport <JSExport>
+ (UIColor *)color:(double)arg1:(double)arg2:(double)arg3:(double)arg4;
@property(readonly, nonatomic) double a;
@property(readonly, nonatomic) double b;
@property(readonly, nonatomic) double g;
@property(readonly, nonatomic) double r;
@end

@protocol SCNConeJSExport <JSExport>
+ (id)coneWithTopRadius:(double)arg1 bottomRadius:(double)arg2 height:(double)arg3;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double bottomRadius;
@property(nonatomic) double topRadius;
@end

@protocol SCNConstraintJSExport <JSExport>
@property(nonatomic) double influenceFactor;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (id)copy;
@end

@protocol SCNCylinderJSExport <JSExport>
+ (id)cylinderWithRadius:(double)arg1 height:(double)arg2;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double radius;
@end

@protocol SCNFloorJSExport <JSExport>
+ (id)floor;
@property(nonatomic) double reflectionResolutionScaleFactor;
@property(nonatomic) double reflectionFalloffEnd;
@property(nonatomic) double reflectionFalloffStart;
@property(nonatomic) double reflectivity;
@end

@protocol SCNGeometryElementJSExport <JSExport>
+ (id)geometryElementWithData:(NSData *)arg1 primitiveType:(long long)arg2 primitiveCount:(long long)arg3 bytesPerIndex:(long long)arg4;
@property(readonly, nonatomic) long long bytesPerIndex;
@property(readonly, nonatomic) long long primitiveCount;
@property(readonly, nonatomic) long long primitiveType;
@property(readonly, nonatomic) NSData *data;
@end

@protocol SCNGeometryJSExport <JSExport>
+ (id)geometryWithSources:(NSArray *)arg1 elements:(NSArray *)arg2;
+ (id)geometry;
@property(retain, nonatomic) SCNGeometrySource *edgeCreasesSource;
@property(retain, nonatomic) SCNGeometryElement *edgeCreasesElement;
@property(nonatomic) unsigned long long subdivisionLevel;
@property(copy, nonatomic) NSArray *levelsOfDetail;
@property(readonly, nonatomic) long long geometryElementCount;
@property(retain, nonatomic) SCNMaterial *firstMaterial;
@property(copy, nonatomic) NSArray *materials;
@property(copy, nonatomic) NSString *name;
- (id)getBoundingSphere;
- (id)getBoundingBox;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (SCNGeometryElement *)geometryElementAtIndex:(long long)arg1;
- (NSArray *)geometrySourcesForSemantic:(NSString *)arg1;
- (SCNMaterial *)materialWithName:(NSString *)arg1;
- (void)replaceMaterialAtIndex:(unsigned long long)arg1 withMaterial:(SCNMaterial *)arg2;
- (void)removeMaterialAtIndex:(unsigned long long)arg1;
- (void)insertMaterial:(SCNMaterial *)arg1 atIndex:(unsigned long long)arg2;
@end

@protocol SCNGeometrySourceJSExport <JSExport>
+ (id)geometrySourceWithTextureCoordinates:(struct CGPoint *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithNormals:(struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithVertices:(struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithData:(NSData *)arg1 semantic:(NSString *)arg2 vectorCount:(long long)arg3 floatComponents:(_Bool)arg4 componentsPerVector:(long long)arg5 bytesPerComponent:(long long)arg6 dataOffset:(long long)arg7 dataStride:(long long)arg8;
@property(readonly, nonatomic) long long dataStride;
@property(readonly, nonatomic) long long dataOffset;
@property(readonly, nonatomic) long long bytesPerComponent;
@property(readonly, nonatomic) long long componentsPerVector;
@property(readonly, nonatomic) _Bool floatComponents;
@property(readonly, nonatomic) long long vectorCount;
@property(readonly, nonatomic) NSString *semantic;
@property(readonly, nonatomic) NSData *data;
@end

@protocol SCNHitTestResultJSExport <JSExport>
- (struct CGPoint)textureCoordinatesWithMappingChannel:(long long)arg1;
@end

@protocol SCNIKConstraintJSExport <JSExport>
+ (id)inverseKinematicsConstraintWithChainRootNode:(SCNNode *)arg1;
@property(nonatomic) struct SCNVector3 targetPosition;
@property(readonly, nonatomic) SCNNode *chainRootNode;
- (double)maxAllowedRotationAngleForJoint:(SCNNode *)arg1;
- (void)setMaxAllowedRotationAngle:(double)arg1 forJoint:(SCNNode *)arg2;
@end

@protocol SCNJSAnimationGroupJSExport <JSExport>
+ (id)animationGroup;
@property(getter=isRemovedOnCompletion) _Bool removedOnCompletion;
@property(retain) CAMediaTimingFunction *timingFunction;
@property(copy) NSArray *animations;
@end

@protocol SCNJSBasicAnimationJSExport <JSExport>
+ (id)basicAnimationWithKeyPath:(NSString *)arg1;
@property(getter=isRemovedOnCompletion) _Bool removedOnCompletion;
@property(retain) CAMediaTimingFunction *timingFunction;
@property(getter=isCumulative) _Bool cumulative;
@property(getter=isAdditive) _Bool additive;
@property(copy) NSString *keyPath;
@property(retain) id byValue;
@property(retain) id toValue;
@property(retain) id fromValue;
@end

@protocol SCNJSImageJSExport <JSExport>
+ (id)imageWithPath:(NSString *)arg1;
+ (id)imageWithURL:(NSString *)arg1;
@property struct CGSize size;
@end

@protocol SCNJSKeyframeAnimationJSExport <JSExport>
+ (id)keyframeAnimationWithKeyPath:(NSString *)arg1;
@property(copy) NSArray *biasValues;
@property(copy) NSArray *continuityValues;
@property(copy) NSArray *tensionValues;
@property(copy) NSString *calculationMode;
@property(copy) NSArray *timingFunctions;
@property(copy) NSArray *keyTimes;
@property struct CGPath *path;
@property(copy) NSArray *values;
@property(getter=isRemovedOnCompletion) _Bool removedOnCompletion;
@property(retain) CAMediaTimingFunction *timingFunction;
@property(getter=isCumulative) _Bool cumulative;
@property(getter=isAdditive) _Bool additive;
@property(copy) NSString *keyPath;
@property(retain) id byValue;
@property(retain) id toValue;
@property(retain) id fromValue;
@end

@protocol SCNJSLayerJSExport <JSExport>
+ (CALayer *)layer;
@property struct CGRect bounds;
@property struct CGRect frame;
@property(retain) id contents;
@end

@protocol SCNJSTimingFunctionJSExport <JSExport>
+ (id)functionWithName:(NSString *)arg1;
@end

@protocol SCNLevelOfDetailJSExport <JSExport>
+ (id)levelOfDetailWithGeometry:(SCNGeometry *)arg1 worldSpaceDistance:(double)arg2;
+ (id)levelOfDetailWithGeometry:(SCNGeometry *)arg1 screenSpaceRadius:(double)arg2;
@property(readonly) double worldSpaceDistance;
@property(readonly) double screenSpaceRadius;
@property(readonly) SCNGeometry *geometry;
- (id)copy;
@end

@protocol SCNLightJSExport <JSExport>
+ (id)light;
@property(readonly, nonatomic) SCNLight *presentationLight;
@property(nonatomic) unsigned long long categoryBitMask;
@property(readonly, nonatomic) SCNMaterialProperty *gobo;
@property(nonatomic) double spotOuterAngle;
@property(nonatomic) double spotInnerAngle;
@property(nonatomic) double attenuationFalloffExponent;
@property(nonatomic) double attenuationEndDistance;
@property(nonatomic) double attenuationStartDistance;
@property(nonatomic) double zFar;
@property(nonatomic) double zNear;
@property(nonatomic) double orthographicScale;
@property(nonatomic) double shadowBias;
@property(nonatomic) long long shadowMode;
@property(nonatomic) unsigned long long shadowSampleCount;
@property(nonatomic) struct CGSize shadowMapSize;
@property(nonatomic) double shadowRadius;
@property(retain, nonatomic) id shadowColor;
@property(nonatomic) _Bool castsShadow;
@property(copy, nonatomic) NSString *name;
@property(retain, nonatomic) id color;
@property(copy, nonatomic) NSString *type;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)setAttribute:(id)arg1 forKey:(NSString *)arg2;
- (id)attributeForKey:(NSString *)arg1;
@end

@protocol SCNLookAtConstraintJSExport <JSExport>
+ (id)lookAtConstraintWithTarget:(SCNNode *)arg1;
@property(nonatomic) _Bool gimbalLockEnabled;
@property(readonly, nonatomic) SCNNode *target;
@end

@protocol SCNMaterialJSExport <JSExport>
+ (id)material;
@property(retain, nonatomic) SCNProgram *program;
@property(readonly, nonatomic) SCNMaterial *presentationMaterial;
@property(nonatomic) long long fillMode;
@property(nonatomic) _Bool avoidsOverLighting;
@property(nonatomic) double indexOfRefraction;
@property(nonatomic) double fresnelExponent;
@property(nonatomic) _Bool readsFromDepthBuffer;
@property(nonatomic) _Bool writesToDepthBuffer;
@property(nonatomic) _Bool locksAmbientWithDiffuse;
@property(nonatomic) long long transparencyMode;
@property(nonatomic) long long cullMode;
@property(nonatomic, getter=isDoubleSided) _Bool doubleSided;
@property(nonatomic, getter=isLitPerPixel) _Bool litPerPixel;
@property(copy, nonatomic) NSString *lightingModelName;
@property(nonatomic) double transparency;
@property(nonatomic) double shininess;
@property(readonly, nonatomic) SCNMaterialProperty *normal;
@property(readonly, nonatomic) SCNMaterialProperty *multiply;
@property(readonly, nonatomic) SCNMaterialProperty *reflective;
@property(readonly, nonatomic) SCNMaterialProperty *transparent;
@property(readonly, nonatomic) SCNMaterialProperty *emission;
@property(readonly, nonatomic) SCNMaterialProperty *specular;
@property(readonly, nonatomic) SCNMaterialProperty *ambient;
@property(readonly, nonatomic) SCNMaterialProperty *diffuse;
@property(copy, nonatomic) NSString *name;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
@end

@protocol SCNMaterialPropertyJSExport <JSExport>
+ (id)materialPropertyWithContents:(id)arg1;
@property(nonatomic) double maxAnisotropy;
@property(nonatomic) long long mappingChannel;
@property(retain, nonatomic) id borderColor;
@property(nonatomic) long long wrapT;
@property(nonatomic) long long wrapS;
@property(nonatomic) struct SCNMatrix4 contentsTransform;
@property(nonatomic) long long mipFilter;
@property(nonatomic) long long magnificationFilter;
@property(nonatomic) long long minificationFilter;
@property(nonatomic) double intensity;
@property(retain, nonatomic) id contents;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
@end

@protocol SCNMorpherJSExport <JSExport>
+ (SCNMorpher *)morpher;
@property(readonly, nonatomic) SCNMorpher *presentationMorpher;
@property(copy, nonatomic) NSString *name;
@property(nonatomic) long long calculationMode;
@property(copy, nonatomic) NSArray *targets;
- (void)setWeight:(double)arg1 atTargetIndex:(long long)arg2;
- (double)weightAtTargetIndex:(long long)arg1;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (double)weightForTargetAtIndex:(unsigned long long)arg1;
- (void)setWeight:(double)arg1 forTargetAtIndex:(unsigned long long)arg2;
@end

@protocol SCNNodeJSExport <JSExport>
+ (SCNNode *)nodeWithGeometry:(SCNGeometry *)arg1;
+ (id)node;
@property(readonly) NSArray *particleSystems;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) id <SCNNodeRendererDelegate> rendererDelegate;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(copy, nonatomic) NSArray *filters;
@property(copy) NSArray *constraints;
@property(retain, nonatomic) SCNPhysicsField *physicsField;
@property(retain, nonatomic) SCNPhysicsBody *physicsBody;
@property(readonly, nonatomic) NSArray *childNodes;
@property(readonly, nonatomic) SCNNode *parentNode;
@property(nonatomic) _Bool castsShadow;
@property(nonatomic) long long renderingOrder;
@property(nonatomic) double opacity;
@property(nonatomic, getter=isHidden) _Bool hidden;
@property(readonly, nonatomic) struct SCNMatrix4 worldTransform;
@property(nonatomic) struct SCNMatrix4 pivot;
@property(nonatomic) struct SCNVector3 scale;
@property(nonatomic) struct SCNVector3 eulerAngles;
@property(nonatomic) struct SCNVector4 orientation;
@property(nonatomic) struct SCNVector4 rotation;
@property(nonatomic) struct SCNVector3 position;
@property(nonatomic) struct SCNMatrix4 transform;
@property(retain, nonatomic) SCNMorpher *morpher;
@property(retain, nonatomic) SCNSkinner *skinner;
@property(retain, nonatomic) SCNGeometry *geometry;
@property(retain, nonatomic) SCNCamera *camera;
@property(retain, nonatomic) SCNLight *light;
@property(copy, nonatomic) NSString *name;
- (void)removeAllActions;
- (void)removeActionForKey:(NSString *)arg1;
- (SCNAction *)actionForKey:(NSString *)arg1;
- (_Bool)hasActions;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2 completionHandler:(void (^)(void))arg3;
- (void)runAction:(SCNAction *)arg1 forKey:(NSString *)arg2;
- (void)runAction:(SCNAction *)arg1 completionHandler:(void (^)(void))arg2;
- (void)runAction:(SCNAction *)arg1;
- (SCNNode *)childNodeWithName:(NSString *)arg1;
- (id)getBoundingSphere;
- (id)getBoundingBox;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)removeParticleSystem:(SCNParticleSystem *)arg1;
- (void)removeAllParticleSystems;
- (void)addParticleSystem:(SCNParticleSystem *)arg1;
- (NSArray *)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(NSDictionary *)arg3;
- (SCNNode *)presentationNode;
- (struct SCNMatrix4)convertTransform:(struct SCNMatrix4)arg1 fromNode:(SCNNode *)arg2;
- (struct SCNMatrix4)convertTransform:(struct SCNMatrix4)arg1 toNode:(SCNNode *)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 fromNode:(SCNNode *)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 toNode:(SCNNode *)arg2;
- (void)enumerateChildNodesUsingBlock:(void (^)(SCNNode *, _Bool *))arg1;
- (NSArray *)childNodesPassingTest:(_Bool (^)(SCNNode *, _Bool *))arg1;
- (SCNNode *)childNodeWithName:(NSString *)arg1 recursively:(_Bool)arg2;
- (void)replaceChildNode:(SCNNode *)arg1 with:(SCNNode *)arg2;
- (void)removeFromParentNode;
- (void)insertChildNode:(SCNNode *)arg1 atIndex:(unsigned long long)arg2;
- (void)addChildNode:(SCNNode *)arg1;
- (SCNNode *)flattenedClone;
- (id)clone;
@end

@protocol SCNParticlePropertyControllerJSExport <JSExport>
+ (id)controllerWithAnimation:(CAAnimation *)arg1;
@property(copy, nonatomic) NSString *inputProperty;
@property(nonatomic) __weak SCNNode *inputOrigin;
@property(nonatomic) double inputBias;
@property(nonatomic) double inputScale;
@property(nonatomic) long long inputMode;
@property(retain, nonatomic) CAAnimation *animation;
- (id)copy;
@end

@protocol SCNParticleSystemJSExport <JSExport>
+ (id)particleSystemNamed:(NSString *)arg1 inDirectory:(NSString *)arg2;
+ (id)particleSystem;
@property(copy, nonatomic) NSDictionary *propertyControllers;
@property(nonatomic) double fresnelExponent;
@property(nonatomic) double stretchFactor;
@property(nonatomic) double speedFactor;
@property(nonatomic) double dampingFactor;
@property(nonatomic) double particleChargeVariation;
@property(nonatomic) double particleCharge;
@property(nonatomic) double particleFrictionVariation;
@property(nonatomic) double particleFriction;
@property(nonatomic) double particleBounceVariation;
@property(nonatomic) double particleBounce;
@property(nonatomic) double particleMassVariation;
@property(nonatomic) double particleMass;
@property(copy, nonatomic) NSArray *colliderNodes;
@property(nonatomic) _Bool particleDiesOnCollision;
@property(nonatomic) _Bool affectedByPhysicsFields;
@property(nonatomic) _Bool affectedByGravity;
@property(nonatomic, getter=isLightingEnabled) _Bool lightingEnabled;
@property(nonatomic) long long sortingMode;
@property(nonatomic) long long orientationMode;
@property(nonatomic, getter=isBlackPassEnabled) _Bool blackPassEnabled;
@property(nonatomic) long long blendMode;
@property(nonatomic) double particleSizeVariation;
@property(nonatomic) double particleSize;
@property(nonatomic) struct SCNVector4 particleColorVariation;
@property(retain, nonatomic) id particleColor;
@property(nonatomic) long long imageSequenceAnimationMode;
@property(nonatomic) double imageSequenceFrameRateVariation;
@property(nonatomic) double imageSequenceFrameRate;
@property(nonatomic) double imageSequenceInitialFrameVariation;
@property(nonatomic) double imageSequenceInitialFrame;
@property(nonatomic) unsigned long long imageSequenceRowCount;
@property(nonatomic) unsigned long long imageSequenceColumnCount;
@property(retain, nonatomic) id particleImage;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnLiving;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnCollision;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnDying;
@property(nonatomic) double particleLifeSpanVariation;
@property(nonatomic) double particleLifeSpan;
@property(nonatomic) double particleAngularVelocityVariation;
@property(nonatomic) double particleAngularVelocity;
@property(nonatomic) double particleVelocityVariation;
@property(nonatomic) double particleVelocity;
@property(nonatomic) double particleAngleVariation;
@property(nonatomic) double particleAngle;
@property(nonatomic, getter=isLocal) _Bool local;
@property(nonatomic) struct SCNVector3 acceleration;
@property(nonatomic) struct SCNVector3 emittingDirection;
@property(nonatomic) double spreadingAngle;
@property(nonatomic) long long birthDirection;
@property(nonatomic) long long birthLocation;
@property(retain, nonatomic) SCNGeometry *emitterShape;
@property(nonatomic) double warmupDuration;
@property(nonatomic) double birthRateVariation;
@property(nonatomic) double birthRate;
@property(nonatomic) _Bool loops;
@property(nonatomic) double idleDurationVariation;
@property(nonatomic) double idleDuration;
@property(nonatomic) double emissionDurationVariation;
@property(nonatomic) double emissionDuration;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (id)copy;
- (void)removeAllModifiers;
- (void)removeModifiersOfStage:(long long)arg1;
- (void)addModifierForProperties:(NSArray *)arg1 atStage:(long long)arg2 withBlock:(void (^)(void **, unsigned long long *, long long, long long, float))arg3;
- (void)handleEvent:(long long)arg1 forProperties:(NSArray *)arg2 withBlock:(void (^)(void **, unsigned long long *, unsigned int *, long long))arg3;
- (void)reset;
@end

@protocol SCNPhysicsBallSocketJointJSExport <JSExport>
+ (id)jointWithBody:(SCNPhysicsBody *)arg1 anchor:(struct SCNVector3)arg2;
+ (id)jointWithBodyA:(SCNPhysicsBody *)arg1 anchorA:(struct SCNVector3)arg2 bodyB:(SCNPhysicsBody *)arg3 anchorB:(struct SCNVector3)arg4;
@property(nonatomic) struct SCNVector3 anchorB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
@end

@protocol SCNPhysicsBehaviorJSExport <JSExport>
@end

@protocol SCNPhysicsBodyJSExport <JSExport>
+ (id)bodyWithType:(long long)arg1 shape:(SCNPhysicsShape *)arg2;
+ (id)kinematicBody;
+ (id)dynamicBody;
+ (id)staticBody;
@property(nonatomic) unsigned long long collisionBitMask;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) struct SCNVector3 angularVelocityFactor;
@property(nonatomic) struct SCNVector3 velocityFactor;
@property(nonatomic) double angularDamping;
@property(nonatomic) double damping;
@property(nonatomic) struct SCNVector4 angularVelocity;
@property(nonatomic) struct SCNVector3 velocity;
@property(nonatomic) _Bool allowsResting;
@property(readonly, nonatomic) _Bool isResting;
@property(retain, nonatomic) SCNPhysicsShape *physicsShape;
@property(nonatomic) double rollingFriction;
@property(nonatomic) double restitution;
@property(nonatomic) double friction;
@property(nonatomic) double charge;
@property(nonatomic) double mass;
@property(nonatomic) long long type;
- (id)copy;
- (void)resetTransform;
- (void)clearAllForces;
- (void)applyTorque:(struct SCNVector4)arg1 impulse:(_Bool)arg2;
- (void)applyForce:(struct SCNVector3)arg1 atPosition:(struct SCNVector3)arg2 impulse:(_Bool)arg3;
- (void)applyForce:(struct SCNVector3)arg1 impulse:(_Bool)arg2;
@end

@protocol SCNPhysicsContactJSExport <JSExport>
@property(readonly, nonatomic) double penetrationDistance;
@property(readonly, nonatomic) double collisionImpulse;
@property(readonly, nonatomic) struct SCNVector3 contactNormal;
@property(readonly, nonatomic) struct SCNVector3 contactPoint;
@property(readonly, nonatomic) SCNNode *nodeB;
@property(readonly, nonatomic) SCNNode *nodeA;
@end

@protocol SCNPhysicsCustomFieldJSExport <JSExport>
@end

@protocol SCNPhysicsDragFieldJSExport <JSExport>
@end

@protocol SCNPhysicsElectricFieldJSExport <JSExport>
@end

@protocol SCNPhysicsFieldJSExport <JSExport>
+ (SCNPhysicsField *)customFieldWithEvaluationBlock:(struct SCNVector3 (^)(struct SCNVector3, struct SCNVector3, float, float, double))arg1;
+ (SCNPhysicsField *)magneticField;
+ (SCNPhysicsField *)electricField;
+ (SCNPhysicsField *)springField;
+ (SCNPhysicsField *)turbulenceFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (SCNPhysicsField *)noiseFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (SCNPhysicsField *)linearGravityField;
+ (SCNPhysicsField *)radialGravityField;
+ (SCNPhysicsField *)vortexField;
+ (SCNPhysicsField *)dragField;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) struct SCNVector3 direction;
@property(nonatomic) struct SCNVector3 offset;
@property(nonatomic) long long scope;
@property(nonatomic) _Bool usesEllipsoidalExtent;
@property(nonatomic) struct SCNVector3 halfExtent;
@property(nonatomic, getter=isExclusive) _Bool exclusive;
@property(nonatomic, getter=isActive) _Bool active;
@property(nonatomic) double minimumDistance;
@property(nonatomic) double falloffExponent;
@property(nonatomic) double strength;
- (id)copy;
@end

@protocol SCNPhysicsHingeJointJSExport <JSExport>
+ (id)jointWithBody:(SCNPhysicsBody *)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(SCNPhysicsBody *)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(SCNPhysicsBody *)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 axisB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
@end

@protocol SCNPhysicsLinearGravityFieldJSExport <JSExport>
@property(nonatomic) struct SCNVector3 gravity;
@end

@protocol SCNPhysicsMagneticFieldJSExport <JSExport>
@end

@protocol SCNPhysicsNoiseFieldJSExport <JSExport>
@property(nonatomic, getter=isTimeInvariant) _Bool timeInvariant;
@property(nonatomic) double scale;
@property(nonatomic) long long octaves;
@end

@protocol SCNPhysicsRadialGravityFieldJSExport <JSExport>
@end

@protocol SCNPhysicsShapeJSExport <JSExport>
+ (id)shapeWithShapes:(NSArray *)arg1 transforms:(NSArray *)arg2;
+ (id)shapeWithNode:(SCNNode *)arg1 options:(NSDictionary *)arg2;
+ (id)shapeWithGeometry:(SCNGeometry *)arg1 options:(NSDictionary *)arg2;
- (id)copy;
@end

@protocol SCNPhysicsSliderJointJSExport <JSExport>
+ (id)jointWithBody:(SCNPhysicsBody *)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(SCNPhysicsBody *)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(SCNPhysicsBody *)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
@property(nonatomic) double motorMaximumTorque;
@property(nonatomic) double motorTargetAngularVelocity;
@property(nonatomic) double motorMaximumForce;
@property(nonatomic) double motorTargetLinearVelocity;
@property(nonatomic) double maximumAngularLimit;
@property(nonatomic) double minimumAngularLimit;
@property(nonatomic) double maximumLinearLimit;
@property(nonatomic) double minimumLinearLimit;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 axisB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
@end

@protocol SCNPhysicsSpringFieldJSExport <JSExport>
@property(nonatomic) struct SCNVector3 offset;
@end

@protocol SCNPhysicsTurbulenceFieldJSExport <JSExport>
@end

@protocol SCNPhysicsVehicleJSExport <JSExport>
+ (id)vehicleWithChassisBody:(SCNPhysicsBody *)arg1 wheels:(NSArray *)arg2;
@property(readonly, nonatomic) SCNPhysicsBody *chassisBody;
@property(readonly, nonatomic) NSArray *wheels;
@property(readonly, nonatomic) double speedInKilometersPerHour;
- (void)applyBrakingForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)setSteeringAngle:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)applyEngineForce:(double)arg1 forWheelAtIndex:(long long)arg2;
@end

@protocol SCNPhysicsVehicleWheelJSExport <JSExport>
+ (id)wheelWithNode:(SCNNode *)arg1;
@property double suspensionRestLength;
@property double radius;
@property struct SCNVector3 axle;
@property struct SCNVector3 steeringAxis;
@property struct SCNVector3 connectionPosition;
@property double maximumSuspensionForce;
@property double frictionSlip;
@property double maximumSuspensionTravel;
@property double suspensionDamping;
@property double suspensionCompression;
@property double suspensionStiffness;
@property(readonly) SCNNode *node;
- (id)copy;
@end

@protocol SCNPhysicsVortexFieldJSExport <JSExport>
@property(nonatomic) struct SCNVector3 axis;
@end

@protocol SCNPhysicsWorldJSExport <JSExport>
@property id <SCNPhysicsContactDelegate> contactDelegate;
@property(nonatomic) double timeStep;
@property(nonatomic) double speed;
@property(nonatomic) struct SCNVector3 gravity;
- (void)updateCollisionPairs;
- (NSArray *)convexSweepTestWithShape:(SCNPhysicsShape *)arg1 fromTransform:(struct SCNMatrix4)arg2 toTransform:(struct SCNMatrix4)arg3 options:(NSDictionary *)arg4;
- (NSArray *)contactTestWithBody:(SCNPhysicsBody *)arg1 options:(NSDictionary *)arg2;
- (NSArray *)contactTestBetweenBody:(SCNPhysicsBody *)arg1 andBody:(SCNPhysicsBody *)arg2 options:(NSDictionary *)arg3;
- (NSArray *)rayTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(NSDictionary *)arg3;
- (NSArray *)allBehaviors;
- (void)removeAllBehaviors;
- (void)removeBehavior:(SCNPhysicsBehavior *)arg1;
- (void)addBehavior:(SCNPhysicsBehavior *)arg1;
@end

@protocol SCNPlaneJSExport <JSExport>
+ (id)planeWithWidth:(double)arg1 height:(double)arg2;
@property(nonatomic) long long cornerSegmentCount;
@property(nonatomic) double cornerRadius;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double width;
@end

@protocol SCNProgramJSExport <JSExport>
+ (id)program;
@property(nonatomic) id <SCNProgramDelegate> delegate;
@property(nonatomic, getter=isOpaque) _Bool opaque;
@property(copy, nonatomic) NSString *fragmentShader;
@property(copy, nonatomic) NSString *vertexShader;
- (id)copy;
- (NSString *)semanticForSymbol:(NSString *)arg1;
- (void)setSemantic:(NSString *)arg1 forSymbol:(NSString *)arg2 options:(NSDictionary *)arg3;
@end

@protocol SCNPyramidJSExport <JSExport>
+ (id)pyramidWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double length;
@property(nonatomic) double height;
@property(nonatomic) double width;
@end

@protocol SCNRendererJSExport <JSExport>
+ (id)rendererWithContext:(void *)arg1 options:(NSDictionary *)arg2;
@property(nonatomic) id delegate;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) _Bool loops;
@property(nonatomic, getter=isPlaying) _Bool playing;
@property(nonatomic) _Bool jitteringEnabled;
@property(nonatomic) double currentTime;
@property(readonly, nonatomic) double nextFrameTime;
@property(retain, nonatomic) SCNScene *scene;
- (void)renderAtTime:(double)arg1;
- (void)render;
@end

@protocol SCNSceneJSExport <JSExport>
+ (id)sceneWithURL:(NSURL *)arg1 options:(NSDictionary *)arg2 error:(id *)arg3;
+ (id)sceneNamed:(NSString *)arg1 inDirectory:(NSString *)arg2 options:(NSDictionary *)arg3;
+ (id)sceneNamed:(NSString *)arg1;
+ (id)scene;
@property(nonatomic) double frameRate;
@property(nonatomic) double endTime;
@property(nonatomic) double startTime;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(retain, nonatomic) id fogColor;
@property(nonatomic) double fogDensityExponent;
@property(nonatomic) double fogEndDistance;
@property(nonatomic) double fogStartDistance;
@property(readonly, nonatomic) SCNMaterialProperty *background;
@property(readonly, nonatomic) SCNPhysicsWorld *physicsWorld;
@property(readonly, nonatomic) SCNNode *rootNode;
@property(readonly) NSArray *particleSystems;
- (_Bool)writeToURL:(NSURL *)arg1 options:(NSDictionary *)arg2 delegate:(id <SCNSceneExportDelegate>)arg3 progressHandler:(void (^)(float, NSError *, _Bool *))arg4;
- (void)setAttribute:(id)arg1 forKey:(NSString *)arg2;
- (id)attributeForKey:(NSString *)arg1;
- (void)removeParticleSystem:(SCNParticleSystem *)arg1;
- (void)removeAllParticleSystems;
- (void)addParticleSystem:(SCNParticleSystem *)arg1 withTransform:(struct SCNMatrix4)arg2;
@end

@protocol SCNSceneRenderer <NSObject>
@property(readonly, nonatomic) void *context;
@property(retain, nonatomic) SKScene *overlaySKScene;
@property(nonatomic) _Bool showsStatistics;
@property(nonatomic, getter=isJitteringEnabled) _Bool jitteringEnabled;
@property(nonatomic) _Bool autoenablesDefaultLighting;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) _Bool loops;
@property(getter=isPlaying) _Bool playing;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
@property(nonatomic) double sceneTime;
@property(retain, nonatomic) SCNScene *scene;
- (void)prepareObjects:(NSArray *)arg1 withCompletionHandler:(void (^)(_Bool))arg2;
- (_Bool)prepareObject:(id)arg1 shouldAbortBlock:(_Bool (^)(void))arg2;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (_Bool)isNodeInsideFrustum:(SCNNode *)arg1 withPointOfView:(SCNNode *)arg2;
- (NSArray *)hitTest:(struct CGPoint)arg1 options:(NSDictionary *)arg2;
@end

@protocol SCNSceneSourceJSExport <JSExport>
+ (id)sceneSourceWithData:(NSData *)arg1 options:(NSDictionary *)arg2;
+ (id)sceneSourceWithURL:(NSURL *)arg1 options:(NSDictionary *)arg2;
@property(readonly) NSData *data;
@property(readonly) NSURL *url;
- (NSArray *)entriesPassingTest:(_Bool (^)(id, NSString *, _Bool *))arg1;
- (NSArray *)identifiersOfEntriesWithClass:(Class)arg1;
- (id)entryWithIdentifier:(NSString *)arg1 withClass:(Class)arg2;
- (id)propertyForKey:(NSString *)arg1;
- (SCNScene *)sceneWithOptions:(NSDictionary *)arg1 error:(id *)arg2;
- (SCNScene *)sceneWithOptions:(NSDictionary *)arg1 statusHandler:(void (^)(float, long long, NSError *, _Bool *))arg2;
- (id)initWithData:(NSData *)arg1 options:(NSDictionary *)arg2;
- (id)initWithURL:(NSURL *)arg1 options:(NSDictionary *)arg2;
@end

@protocol SCNShadable <NSObject>

@optional
@property(retain, nonatomic) SCNProgram *program;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
- (void)handleUnbindingOfSymbol:(NSString *)arg1 usingBlock:(void (^)(unsigned int, unsigned int, SCNNode *, SCNRenderer *))arg2;
- (void)handleBindingOfSymbol:(NSString *)arg1 usingBlock:(void (^)(unsigned int, unsigned int, SCNNode *, SCNRenderer *))arg2;
@end

@protocol SCNShapeJSExport <JSExport>
+ (id)shapeWithPath:(id)arg1 extrusionDepth:(double)arg2;
@property(copy, nonatomic) id chamferProfile;
@property(nonatomic) double chamferRadius;
@property(nonatomic) long long chamferMode;
@property(nonatomic) double extrusionDepth;
@property(copy, nonatomic) id path;
@end

@protocol SCNSphereJSExport <JSExport>
+ (id)sphereWithRadius:(double)arg1;
@property(nonatomic, getter=isHemispheric) _Bool hemispheric;
@property(nonatomic) long long segmentCount;
@property(nonatomic, getter=isGeodesic) _Bool geodesic;
@property(nonatomic) double radius;
@end

@protocol SCNTechniqueJSExport <JSExport>
+ (SCNTechnique *)techniqueBySequencingTechniques:(NSArray *)arg1;
+ (SCNTechnique *)techniqueWithDictionary:(NSDictionary *)arg1;
@property(readonly) NSDictionary *dictionaryRepresentation;
- (id)copy;
- (void)resumeAnimationForKey:(NSString *)arg1;
- (void)pauseAnimationForKey:(NSString *)arg1;
- (CAAnimation *)animationForKey:(NSString *)arg1;
- (NSArray *)animationKeys;
- (void)removeAnimationForKey:(NSString *)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(CAAnimation *)arg1 forKey:(NSString *)arg2;
- (void)handleBindingOfSymbol:(NSString *)arg1 usingBlock:(void (^)(unsigned int, unsigned int, SCNNode *, SCNRenderer *))arg2;
@end

@protocol SCNTechniqueSupport <NSObject>
@property(copy, nonatomic) SCNTechnique *technique;
@end

@protocol SCNTextJSExport <JSExport>
+ (id)textWithString:(id)arg1 extrusionDepth:(double)arg2;
@property(nonatomic) double flatness;
@property(copy, nonatomic) id chamferProfile;
@property(nonatomic) long long chamferSegmentCount;
@property(nonatomic) double chamferRadius;
@property(copy, nonatomic) NSString *alignmentMode;
@property(copy, nonatomic) NSString *truncationMode;
@property(readonly, nonatomic) struct CGSize textSize;
@property(nonatomic) struct CGRect containerFrame;
@property(nonatomic, getter=isWrapped) _Bool wrapped;
@property(retain, nonatomic) id font;
@property(copy, nonatomic) id string;
@property(nonatomic) double extrusionDepth;
@end

@protocol SCNTorusJSExport <JSExport>
+ (id)torusWithRingRadius:(double)arg1 pipeRadius:(double)arg2;
@property(nonatomic) long long pipeSegmentCount;
@property(nonatomic) long long ringSegmentCount;
@property(nonatomic) double pipeRadius;
@property(nonatomic) double ringRadius;
@end

@protocol SCNTransactionJSExport <JSExport>
+ (void)setDisableActions:(_Bool)arg1;
+ (_Bool)disableActions;
+ (void)setAnimationTimingFunction:(CAMediaTimingFunction *)arg1;
+ (CAMediaTimingFunction *)animationTimingFunction;
+ (void)setAnimationDuration:(double)arg1;
+ (double)animationDuration;
+ (void)unlock;
+ (void)lock;
+ (void)flush;
+ (void)commit;
+ (void)begin;
@end

@protocol SCNTransformConstraintJSExport <JSExport>
+ (id)transformConstraintInWorldSpace:(_Bool)arg1 withBlock:(struct SCNMatrix4 (^)(SCNNode *, struct SCNMatrix4))arg2;
@end

@protocol SCNTubeJSExport <JSExport>
+ (id)tubeWithInnerRadius:(double)arg1 outerRadius:(double)arg2 height:(double)arg3;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) long long radialSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double outerRadius;
@property(nonatomic) double innerRadius;
@end

@protocol SCNViewJSExport <JSExport>
@property(nonatomic) _Bool showsStatistics;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) _Bool loops;
@property(nonatomic, getter=isPlaying) _Bool playing;
@property(nonatomic) id delegate;
@property(nonatomic) double currentTime;
@property(nonatomic) unsigned long long antialiasingMode;
@property(nonatomic) _Bool allowsCameraControl;
@property(copy, nonatomic) id backgroundColor;
@property(retain, nonatomic) SCNScene *scene;
- (void)stop:(id)arg1;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
- (id)snapshot;
@end

__attribute__((visibility("hidden")))
@interface C3DIONSZipFileArchive : NSObject
{
    NSDictionary *_contents;
    NSData *_data;
    id _provider;
    long long _desc;
    NSString *_path;
    NSArray *_names;
    NSDictionary *_properties;
    NSMutableDictionary *_cachedContents;
    void *_reserved;
    struct __zFlags {
        unsigned int providerSuppliesContents:1;
        unsigned int providerSuppliesStreams:1;
        unsigned int providerSuppliesProperties:1;
        unsigned int noContentsCaching:1;
        unsigned int fileOpen:1;
        unsigned int reserved:27;
    } _zFlags;
    void *_reserved2[5];
}

- (_Bool)isValid;
- (void)invalidate;
- (_Bool)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)archiveStream;
- (id)archiveData;
- (id)propertiesForEntryName:(id)arg1;
- (_Bool)writeContentsForEntryName:(id)arg1 toFile:(id)arg2 options:(unsigned long long)arg3 error:(id *)arg4;
- (id)streamForEntryName:(id)arg1;
- (id)contentsForEntryName:(id)arg1;
- (id)entryNames;
- (void)finalize;
- (void)dealloc;
- (id)initWithEntryNames:(id)arg1 dataProvider:(id)arg2 options:(unsigned long long)arg3;
- (id)initWithEntryNames:(id)arg1 contents:(id)arg2 properties:(id)arg3 options:(unsigned long long)arg4;
- (id)initWithData:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)initWithPath:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;

@end

@interface CAAnimation (SceneKitAdditions)
@property(retain, nonatomic) NSArray *animationEvents;
- (void)setCommitsOnCompletion:(_Bool)arg1;
- (_Bool)commitsOnCompletion;
@property double fadeOutDuration;
@property double fadeInDuration;
@property _Bool usesSceneTimeBase;
@end

@interface JSValue (SCNStructSupport)
+ (id)valueWithTransform3D:(struct SCNMatrix4)arg1 inContext:(id)arg2;
+ (id)valueWithVector3:(struct SCNVector3)arg1 inContext:(id)arg2;
+ (id)valueWithVector4:(struct SCNVector4)arg1 inContext:(id)arg2;
- (struct SCNMatrix4)toTransform3D;
- (struct SCNVector3)toVector3;
- (struct SCNVector4)toVector4;
@end

@interface NSArray (SCNDeepCopy)
- (id)SCNMutableDeepCopy;
@end

@interface NSDictionary (SCNDeepCopy)
- (id)SCNMutableDeepCopy;
@end

@interface NSProgress (_TSTAssert)
+ (void)initialize;
- (void)_tsts_becomeCurrentWithPendingUnitCount:(long long)arg1;
@end

@interface NSValue (Core3DKitAdditions)
+ (id)valueWithSCNMatrix4:(struct SCNMatrix4)arg1;
+ (id)valueWithSCNVector4:(struct SCNVector4)arg1;
+ (id)valueWithSCNVector3:(struct SCNVector3)arg1;
+ (id)SCN_valueWithCGPoint:(struct CGPoint)arg1;
- (struct SCNMatrix4)SCNMatrix4Value;
- (struct SCNVector4)SCNVector4Value;
- (struct SCNVector3)SCNVector3Value;
- (struct CGPoint)SCN_CGPointValue;
@end

@interface SCNAction : NSObject <NSCopying, NSSecureCoding>
{
    id _reserved;
    struct SCNCAction *_caction;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)customActionWithDuration:(double)arg1 actionBlock:(CDUnknownBlockType)arg2;
+ (id)javaScriptActionWithScript:(id)arg1 duration:(double)arg2;
+ (id)runAction:(id)arg1 onChildNodeWithName:(id)arg2;
+ (id)runBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
+ (id)runBlock:(CDUnknownBlockType)arg1;
+ (id)performSelector:(SEL)arg1 onTarget:(id)arg2;
+ (id)removeFromParentNode;
+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)waitForDuration:(double)arg1;
+ (id)fadeOpacityTo:(double)arg1 duration:(double)arg2;
+ (id)fadeOpacityBy:(double)arg1 duration:(double)arg2;
+ (id)fadeOutWithDuration:(double)arg1;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)repeatActionForever:(id)arg1;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
+ (id)group:(id)arg1;
+ (id)sequence:(id)arg1;
+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4 shortestUnitArc:(_Bool)arg5;
+ (id)rotateToAxisAngle:(struct SCNVector4)arg1 duration:(double)arg2;
+ (id)rotateByAngle:(double)arg1 aroundAxis:(struct SCNVector3)arg2 duration:(double)arg3;
+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)moveTo:(struct SCNVector3)arg1 duration:(double)arg2;
+ (id)moveBy:(struct SCNVector3)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
- (void)dealloc;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
@property(nonatomic) double speed;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (_Bool)isCustom;
@property(nonatomic) long long timingMode;
- (void)setDurationRange:(double)arg1;
- (double)durationRange;
@property(nonatomic) double duration;
- (struct SCNCAction *)caction;
@property(nonatomic) CDUnknownBlockType timingFunction;
- (void)setCompletionBlock:(CDUnknownBlockType)arg1;
- (void)setKey:(id)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasRemovedFromTarget:(id)arg1 atTime:(double)arg2;
- (void)wasAddedToTarget:(id)arg1 atTime:(double)arg2;
- (double)ratioForTime:(double)arg1;
- (void)setFinished:(_Bool)arg1;
- (_Bool)finished;
- (void)timeJumpWithTarget:(id)arg1 timeOffset:(double)arg2;
- (void)willResumeWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasPausedWithTarget:(id)arg1 atTime:(double)arg2;
- (void)setCppAction:(void *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNActionCustom : SCNAction
{
    struct SCNCActionCustom *_mycaction;
}

+ (id)customActionWithDuration:(double)arg1 actionBlock:(CDUnknownBlockType)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionFade : SCNAction
{
    struct SCNCActionFade *_mycaction;
}

+ (id)fadeOutWithDuration:(double)arg1;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)fadeOpacityTo:(double)arg1 duration:(double)arg2;
+ (id)fadeOpacityBy:(double)arg1 duration:(double)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionGroup : SCNAction
{
    struct SCNCActionGroup *_mycaction;
    NSArray *_actions;
}

+ (id)groupWithActions:(id)arg1;
+ (_Bool)supportsSecureCoding;
- (_Bool)finished;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionJavaScript : SCNAction
{
    NSString *_script;
}

+ (id)javaScriptActionWithDuration:(double)arg1 script:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isCustom;
- (void)dealloc;
- (id)initWithString:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNActionMove : SCNAction
{
    struct SCNCActionMove *_mycaction;
}

+ (id)moveToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)moveTo:(struct SCNVector3)arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)moveBy:(struct SCNVector3)arg1 duration:(double)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionPerformSelector : SCNAction
{
    SEL _selector;
    id _target;
}

+ (id)perfromSelector:(SEL)arg1 onTarget:(id)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)encodeWithCoder:(id)arg1;
- (_Bool)isCustom;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRemove : SCNAction
{
    _Bool _hasFired;
}

+ (id)removeFromParentNode;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRepeat : SCNAction
{
    struct SCNCActionRepeat *_mycaction;
    SCNAction *_repeatedAction;
}

+ (id)repeatActionForever:(id)arg1;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (_Bool)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRotate : SCNAction
{
    struct SCNCActionRotate *_mycaction;
}

+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4 shortestUnitArc:(_Bool)arg5;
+ (id)rotateToAxisAngle:(struct SCNVector4)arg1 duration:(double)arg2;
+ (id)rotateByAngle:(double)arg1 aroundAxis:(struct SCNVector3)arg2 duration:(double)arg3;
+ (id)rotateToX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (id)rotateByX:(double)arg1 y:(double)arg2 z:(double)arg3 duration:(double)arg4;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRunAction : SCNAction
{
    SCNAction *_action;
    NSString *_subSpriteKey;
    NSString *_actionKey;
    _Bool _waitForKeyedAction;
    _Bool _runOnSubSprite;
    _Bool _fired;
}

+ (id)runAction:(id)arg1 afterActionWithKey:(id)arg2;
+ (id)runAction:(id)arg1 onFirstChildWithName:(id)arg2;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;
- (_Bool)isCustom;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionRunBlock : SCNAction
{
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)runBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (_Bool)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionScale : SCNAction
{
    struct SCNCActionScale *_mycaction;
}

+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionSequence : SCNAction
{
    struct SCNCActionSequence *_mycaction;
    NSArray *_actions;
}

+ (id)sequenceWithActions:(id)arg1;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isCustom;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNActionWait : SCNAction
{
    struct SCNCActionWait *_mycaction;
}

+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)waitForDuration:(double)arg1;
+ (_Bool)supportsSecureCoding;
- (id)reversedAction;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface SCNAnimationEvent : NSObject
{
    id _reserved;
    double _eventTime;
    CDUnknownBlockType _eventBlock;
}

+ (id)SCNJSExportProtocol;
+ (id)animationEventWithKeyTime:(double)arg1 block:(CDUnknownBlockType)arg2;
- (void)setEventBlock:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)eventBlock;
- (void)setTime:(double)arg1;
- (double)time;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNAuthoringEnvironment : NSObject
{
    struct __C3DEngineContext *_engineContext;
    id <SCNSceneRenderer> _sceneRenderer;
    struct __C3DFXGLSLProgram *_noColorProgram;
    struct __C3DFXGLSLProgram *_colorOnlyProgram;
    struct __C3DFXGLSLProgram *_colorAndTextureProgram;
    CDStruct_cec9a5d8 _logsInfo;
    CDStruct_cec9a5d8 _boldLogsInfo;
    CDStruct_cec9a5d8 _manipulatorsInfo;
    CDStruct_cec9a5d8 _dynamicLinesInfo;
    CDStruct_cec9a5d8 _dynamicTrianglesInfo;
    CDStruct_cec9a5d8 _overlayDynamicLinesInfo;
    CDStruct_cec9a5d8 _textInfo;
    CDStruct_a02c98f3 _normalTextInfo;
    CDStruct_a02c98f3 _boldTextInfo;
    const void *_arrowIndicesOffset;
    unsigned short _arrowIndicesCount;
    const void *_quadrantIndicesOffset;
    unsigned short _quadrantIndicesCount;
    const void *_quadrantRingIndicesOffset;
    unsigned short _quadrantRingIndicesCount;
    _Bool _showsAllBoundingBoxes;
    _Bool _showsAllBoundingSpheres;
    _Bool _showsAttributesOfAllCameras;
    _Bool _showsAttributesOfAllLights;
    _Bool _showsPhysics;
    _Bool _showsLighting;
    _Bool _hasLighting;
    NSMutableArray *_individualNodesWantingBoundingBox;
    NSMutableArray *_individualNodesWantingCameraAttributes;
    NSMutableArray *_individualNodesWantingLightAttributes;
    struct {
        _Bool initialized;
        _Bool showFullStatistics;
        float fps;
        float waitDisplayLinkTime;
        long long pressedButtonIndex;
        struct __CFString *fpsString;
        struct __CFString *shortString;
        unsigned int lightingStatistics[9];
        struct __C3DRendererContextStats {
            unsigned int verticesProcessed;
            unsigned int primitivesProcessed;
            unsigned int drawCount;
            unsigned int drawStep;
            unsigned int frameCount;
            unsigned int fboSwitches;
            unsigned int vboSwitches;
            unsigned int attSwitches;
            unsigned int attEnabling;
            unsigned int iboSwitches;
            unsigned int vaoSwitches;
            unsigned int prgSwitches;
            unsigned int texSwitches;
            unsigned int rssSwitches;
            unsigned int getCount;
            unsigned int uniformFloatSent;
            unsigned int uniformIntSent;
            unsigned int uniformVector2Sent;
            unsigned int uniformVector3Sent;
            unsigned int uniformVector4Sent;
            unsigned int uniformMatrix4Sent;
            unsigned int vboUploaded;
            unsigned int iboUploaded;
            unsigned int texUploaded;
            double cpuTime;
            double cstrTime;
            double phyTime;
            double prtTime;
            double animTime;
            double syncTime;
            double cullTime;
            double liteTime;
            double sortTime;
            double twoDTime;
            double delegateTime;
            double glFlushTime;
            double waitDisplayLinkTime;
            double lastDisplayLinkTime;
            unsigned int prgCount;
            unsigned int texCount;
            unsigned int fboCount;
            unsigned int vboCount;
            unsigned int rboCount;
            unsigned int iboCount;
            unsigned int vaoCount;
            unsigned int fboMemory;
            unsigned int rboMemory;
            unsigned int vboMemory;
            unsigned int iboMemory;
            unsigned int texMemory;
            unsigned int backBufferMemory;
            unsigned int depthBuffersMemory;
            double frmAvgTime;
            double frmMinTime;
            double frmMaxTime;
            double frameTimeHistory[60];
            unsigned int frameTimeCurrentIndex;
            double startTime;
            double lastFrameTime;
        } stats;
    } _statisticsInfo;
    float _drawScale;
    SCNManipulator *_manipulator;
}

+ (id)authoringEnvironmentForSceneRenderer:(id)arg1;
- (void)dealloc;
- (void)drawString:(id)arg1 atPoint:(struct CGPoint)arg2 color:(id)arg3;
- (void)drawLineFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 color:(id)arg3;
- (_Bool)didTapAtPoint:(struct CGPoint)arg1;
- (void)beginEditingNode:(id)arg1;
- (void)cancelEdition;
- (void)hideAttributesOfAllIndividualLights;
- (void)hideLightAttributesForNode:(id)arg1;
- (void)showLightAttributesForNode:(id)arg1;
- (void)hideAttributesOfAllIndividualCameras;
- (void)hideCameraAttributesForNode:(id)arg1;
- (void)showCameraAttributesForNode:(id)arg1;
@property(nonatomic) _Bool showsAttributesOfAllLights;
@property(nonatomic) _Bool showsAttributesOfAllCameras;
- (void)hideAllIndividualBoundingBoxes;
- (void)hideBoundingBoxForNode:(id)arg1;
- (void)showBoundingBoxForNode:(id)arg1;
@property(nonatomic) _Bool showsLighting;
@property(nonatomic) _Bool showsPhysics;
@property(nonatomic) _Bool showsAllBoundingSpheres;
@property(nonatomic) _Bool showsAllBoundingBoxes;
@property(readonly) id <SCNSceneRenderer> sceneRenderer;
- (id)_initWithEngineContext:(struct __C3DEngineContext *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNBoundingBox : NSObject
{
    struct SCNVector3 min;
    struct SCNVector3 max;
}

+ (id)SCNJSExportProtocol;
@property(nonatomic) struct SCNVector3 max; // @synthesize max;
@property(nonatomic) struct SCNVector3 min; // @synthesize min;
- (id)description;

@end

__attribute__((visibility("hidden")))
@interface SCNBoundingSphere : NSObject
{
    struct SCNVector3 center;
    double radius;
}

+ (id)SCNJSExportProtocol;
@property(nonatomic) double radius; // @synthesize radius;
@property(nonatomic) struct SCNVector3 center; // @synthesize center;
- (id)description;

@end

@interface SCNGeometry : NSObject <SCNAnimatable, SCNBoundingVolume, SCNShadable, NSCopying, NSSecureCoding>
{
    id _geometryReserved;
    struct __C3DGeometry *_geometry;
    unsigned int _isPresentationInstance:1;
    NSMutableArray *_materials;
    SCNOrderedDictionary *_animations;
    NSArray *_levelsOfDetail;
    unsigned long long _subdivisionLevel;
    SCNGeometrySource *_edgeCreasesSource;
    SCNGeometryElement *_edgeCreasesElement;
    SCNShadableHelper *_shadableHelper;
    struct SCNVector3 *_fixedBoundingBoxExtrema;
    NSString *_name;
    NSMutableDictionary *_valuesForUndefinedKeys;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)resolveInstanceMethod:(SEL)arg1;
+ (id)SCNJSExportProtocol;
+ (id)geometryWithSources:(id)arg1 elements:(id)arg2;
+ (id)geometry;
+ (id)geometryWithGeometryRef:(struct __C3DGeometry *)arg1;
+ (id)floorWithOptions:(id)arg1;
+ (id)torusWithRingRadius:(double)arg1 pipeRadius:(double)arg2 options:(id)arg3;
+ (id)capsuleWithRadius:(double)arg1 height:(double)arg2 options:(id)arg3;
+ (id)tubeWithInnerRadius:(double)arg1 outerRadius:(double)arg2 height:(double)arg3 options:(id)arg4;
+ (id)coneWithHeight:(double)arg1 topRadius:(double)arg2 bottomRadius:(double)arg3 options:(id)arg4;
+ (id)cylinderWithRadius:(double)arg1 height:(double)arg2 options:(id)arg3;
+ (id)sphereWithRadius:(double)arg1 options:(id)arg2;
+ (id)pyramidWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 options:(id)arg4;
+ (id)boxWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 cornerRadius:(double)arg4 options:(id)arg5;
+ (id)planeWithWidth:(double)arg1 height:(double)arg2 options:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (void)_customDecodingOfSCNGeometry:(id)arg1;
- (void)_customEncodingOfSCNGeometry:(id)arg1;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)shaderModifiersUniformNames;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
@property(retain, nonatomic) SCNProgram *program;
- (void)_setupShadableHelperIfNeeded;
- (struct __C3DMaterial *)materialRef;
- (struct __C3DMaterial *)materialRefCreateIfNeeded;
@property(retain, nonatomic) SCNGeometrySource *edgeCreasesSource;
@property(retain, nonatomic) SCNGeometryElement *edgeCreasesElement;
@property(nonatomic) unsigned long long subdivisionLevel;
@property(copy, nonatomic) NSArray *levelsOfDetail;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (_Bool)parseSpecialKey:(id)arg1 withPath:(id)arg2 intoDestination:(id *)arg3 remainingPath:(id *)arg4;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
- (void)setMaterial:(id)arg1;
- (id)material;
@property(copy, nonatomic) NSArray *materials;
- (void)removeAllMaterials;
- (void)replaceMaterial:(id)arg1 with:(id)arg2;
- (void)replaceMaterialAtIndex:(unsigned long long)arg1 withMaterial:(id)arg2;
- (void)removeMaterialAtIndex:(unsigned long long)arg1;
- (void)removeMaterial:(id)arg1;
- (void)insertMaterial:(id)arg1 atIndex:(unsigned long long)arg2;
@property(retain, nonatomic) SCNMaterial *firstMaterial;
- (id)_firstMaterial;
- (id)mutableMaterials;
- (void)replaceObjectInMaterialsAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromMaterialsAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inMaterialsAtIndex:(unsigned long long)arg2;
- (id)objectInMaterialsAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfMaterials;
- (id)materialWithName:(id)arg1;
- (id)_materialWithName:(id)arg1;
- (void)_expand;
- (id)keyForNodeAttributes;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (void)_setAttributes:(id)arg1;
- (id)getBoundingBox;
- (id)getBoundingSphere;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (void)setBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (id)geometryElementAtIndex:(long long)arg1;
@property(readonly, nonatomic) long long geometryElementCount;
- (id)geometrySourceForSemantic:(id)arg1;
- (id)geometrySourcesForSemantic:(id)arg1;
- (_Bool)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationGeometry;
- (void)setGeometryRef:(struct __C3DGeometry *)arg1;
- (void)_setGeometryRef:(struct __C3DGeometry *)arg1;
- (struct __C3DGeometry *)geometryRef;
@property(readonly, copy) NSString *description;
- (id)geometryDescription;
- (void)_syncObjCModel;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
- (_Bool)isPresentationInstance;
- (void)dealloc;
- (id)initPresentationGeometryWithGeometryRef:(struct __C3DGeometry *)arg1;
- (id)initWithGeometryRef:(struct __C3DGeometry *)arg1;
- (id)init;
- (void)setValueForKey:(id)arg1 optionKey:(id)arg2 options:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNBox : SCNGeometry
{
    id _reserved;
    double _boxwidth;
    double _boxheight;
    double _boxlength;
    double _boxchamferRadius;
    long long _boxwidthSegmentCount;
    long long _boxheightSegmentCount;
    long long _boxlengthSegmentCount;
    long long _boxchamferSegmentCount;
    long long _boxprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)box;
+ (id)boxWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3 chamferRadius:(double)arg4;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double width;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) double length;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) long long chamferSegmentCount;
@property(nonatomic) double chamferRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationBox;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNCamera : NSObject <SCNAnimatable, SCNTechniqueSupport, NSCopying, NSSecureCoding>
{
    id _reserved;
    // Error parsing type: ^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}, name: _camera
    unsigned int _isPresentationInstance:1;
    unsigned int _custom:1;
    unsigned int _usesOrthographicProjection:1;
    unsigned int _automaticallyAdjustsZRange:1;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    double _xFov;
    double _yFov;
    double _orthographicScale;
    double _zNear;
    double _zFar;
    float _focalDistance;
    float _focalBlurRadius;
    float _focalSize;
    float _aperture;
    unsigned long long _categoryBitMask;
    struct SCNMatrix4 _projectionTransform;
    SCNTechnique *_technique;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)camera;
+     // Error parsing type: @24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16, name: cameraWithCameraRef:
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNCamera:(id)arg1;
- (void)_customEncodingOfSCNCamera:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (struct SCNMatrix4)projectionTransform;
-     // Error parsing type: ^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16@0:8, name: cameraRef
- (void)setYMag:(double)arg1;
- (double)yMag;
- (void)setXMag:(double)arg1;
- (double)xMag;
@property(nonatomic) double zNear;
@property(nonatomic) double zFar;
@property(nonatomic) double yFov;
@property(nonatomic) double xFov;
@property(nonatomic) _Bool usesOrthographicProjection;
- (void)setProjectionTransform:(struct SCNMatrix4)arg1;
@property(nonatomic) double orthographicScale;
@property(nonatomic) double focalSize;
@property(nonatomic) double focalDistance;
@property(nonatomic) double focalBlurRadius;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) _Bool automaticallyAdjustsZRange;
@property(nonatomic) double aperture;
- (_Bool)hasCustomProjectionTransform;
- (void)_registerAsObserver;
- (_Bool)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationCamera;
@property(copy, nonatomic) SCNTechnique *technique;
- (void)_syncObjCModel;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *description;
- (void)dealloc;
-     // Error parsing type: @24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16, name: initPresentationCameraWithCameraRef:
-     // Error parsing type: @24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}{__C3DProjectionInfos=b1b1b1dddddd(C3DMatrix4x4=[16f][4])}ffffQ^{__C3DFXTechnique}}16, name: initWithCameraRef:
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNEventHandler : NSObject
{
    id _reserved;
    SCNView *_view;
}

- (_Bool)wantsRedraw;
- (void)viewDidDraw;
- (void)viewWillDraw;
- (void)cameraDidChange;
- (void)sceneDidChange;
- (void)cameraWillChange;
- (void)sceneWillChange;
- (id)gestureRecognizers;
- (void)setView:(id)arg1;
@property(readonly) SCNView *view;
- (void)dealloc;
- (id)init;

@end

@interface SCNCameraControlEventHandler : SCNEventHandler
{
    id _dReserved;
    SCNNode *_freeViewCameraNode;
    struct CGPoint _initialPoint;
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _initialMatrix
    float _initialZoom;
    float _savedZfar;
    float _savedZnear;
    float _originalFovX;
    float _originalFovY;
    float _originalOrthoScale;
    float _zoomFactor;
    // Error parsing type: , name: _clickOrigin
    int _lastGestureFingerCount;
    _Bool _isDraggingWithOneFinger;
    float _roll;
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _initialMatrixForRoll
    UIGestureRecognizer *_pressGesture;
    UIGestureRecognizer *_tapGesture;
    UIGestureRecognizer *_pinchGesture;
    UIGestureRecognizer *_panGesture;
    UIGestureRecognizer *_rotateGesture;
    long long _stickyAxis;
    // Error parsing type: {C3DSphere="vector"}, name: _viewedObjectSphere
    unsigned int _hasCheckedIfViewingAnObject:1;
    unsigned int _isViewingAnObject:1;
    unsigned int _isViewedObjectSphereComputed:1;
    unsigned int _automaticCameraTarget:1;
    unsigned int _inertia:1;
    unsigned int _alternateMode:1;
    unsigned int _upDirIsSet:1;
    unsigned int _gimbalLockMode:1;
    unsigned int _inertiaRunning:1;
    int _mode;
    struct SCNVector3 _gimbalLockVector;
    // Error parsing type: , name: _upDir
    struct SCNVector3 _cameraTarget;
    double _friction;
    struct CGPoint _totalDragWithInertia;
    struct CGPoint _inertiaVelocity;
    double _lastSimulationTime;
}

- (void)panWithGestureRecognizer:(id)arg1;
- (void)pinchWithGestureRecognizer:(id)arg1;
- (void)rotateWithGestureRecognizer:(id)arg1;
- (void)beginGesture:(id)arg1;
- (void)_handlePress:(id)arg1;
- (void)_handleDoubleTap:(id)arg1;
- (void)_handleRotation:(id)arg1;
- (void)_handlePan:(id)arg1;
- (void)_handlePinch:(id)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureRecognizers;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)updateCameraTargetIfNeeded;
- (void)_translateTo:(struct CGPoint)arg1;
- (void)_rotateWithDrag:(struct CGPoint)arg1 mode:(long long)arg2 stickyAxis:(long long)arg3;
- (void)_beginTranslateAtLocation:(struct CGPoint)arg1;
-     // Error parsing type: 16@0:8, name: frontVector
- (struct C3DSphere)viewedObjectSphere;
- (_Bool)computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode *)arg1 sphere:(struct C3DSphere *)arg2;
- (void)_startBrowsingIfNeeded:(struct CGPoint)arg1;
- (void)endDraggingWithVelocity:(struct CGPoint)arg1;
- (_Bool)wantsRedraw;
- (void)viewWillDraw;
- (void)rotateWithVector:(long long)arg1 mode: /* Error: Ran out of types for this method. */;
- (void)_onInertiaTimer;
- (void)_stopInertiaIfNeeded;
- (void)cameraDidChange;
- (void)cameraWillChange;
- (void)sceneDidChange;
- (void)sceneWillChange;
- (void)translateByX:(float)arg1 Y:(float)arg2 Z:(float)arg3;
- (void)setZoomFactor:(double)arg1;
- (double)zoomFactor;
- (void)zoomBy:(float)arg1;
- (void)zoomBy:(float)arg1 animate:(_Bool)arg2;
- (void)rotateOf:(double)arg1;
- (_Bool)isViewingAnObject;
- (float)_translationCoef;
- (void)_switchToFreeViewCamera;
- (void)_installFreeViewCameraIfNeeded;
- (void)_prepareFreeViewCamera;
- (_Bool)_freeCameraActivated;
- (void)_resetFreeViewCamera;
@property long long stickyAxis;
@property struct SCNVector3 cameraTarget;
@property _Bool automaticCameraTarget;
@property struct SCNVector3 gimbalLockVector;
@property _Bool gimbalLockMode;
@property double friction;
@property _Bool enableInertia;
- (void)dealloc;
- (id)init;

@end

@interface SCNCapsule : SCNGeometry
{
    id _reserved;
    double _capsulecapRadius;
    double _capsuleheight;
    long long _capsuleheightSegmentCount;
    long long _capsuleradialSegmentCount;
    long long _capsulecapSegmentCount;
    long long _capsuleprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)capsuleWithCapRadius:(double)arg1 height:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) long long capSegmentCount;
@property(nonatomic) double capRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationCapsule;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNCone : SCNGeometry
{
    id _reserved;
    double _conetopRadius;
    double _conebottomRadius;
    double _coneheight;
    long long _coneheightSegmentCount;
    long long _coneradialSegmentCount;
    long long _coneprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)coneWithTopRadius:(double)arg1 bottomRadius:(double)arg2 height:(double)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) double topRadius;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) double bottomRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationCone;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNConstraint : NSObject <NSCopying, NSSecureCoding, SCNAnimatable>
{
    id _constraintReserved;
    struct __C3DConstraint *_constraintRef;
    SCNOrderedDictionary *_animations;
    _Bool _enabled;
    double _influenceFactor;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)finalizeDecodeConstraint:(id)arg1;
@property(nonatomic) double influenceFactor;
- (void)setEnabled:(_Bool)arg1;
- (_Bool)isEnabled;
- (void)setConstraintRef:(struct __C3DConstraint *)arg1;
- (struct __C3DConstraint *)constraintRef;
- (void)setName:(id)arg1;
- (id)name;
- (void)copyTo:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNContainerLayer : CALayer
{
    double _lastRenderedTime;
}

@end

@interface SCNCylinder : SCNGeometry
{
    id _reserved;
    double _cylinderradius;
    double _cylinderheight;
    double _cylinderradialSpan;
    long long _cylinderheightSegmentCount;
    long long _cylinderradialSegmentCount;
    long long _cylinderprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)cylinderWithRadius:(double)arg1 height:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) double radius;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationCylinder;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNImageSource : NSObject
{
}

- (void)connectToProxy:(struct __C3DImageProxy *)arg1;
- (_Bool)isPremultiplied;
- (_Bool)isOpaque;
- (id)textureSourceForContext:(void *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNDelegateSource : SCNImageSource
{
    id _delegate;
}

@property(retain, nonatomic) id delegate; // @synthesize delegate=_delegate;
- (_Bool)isOpaque;
- (id)textureSourceForContext:(void *)arg1;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNDisplayLink : NSObject
{
    id _reserved;
    CADisplayLink *_caDisplayLink;
    id _owner;
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _paused;
    _Bool _invalidated;
    _Bool _asynchronous;
    long long _frameInterval;
    double _lastVideoOutput;
    int _queuedFrameCount;
}

- (_Bool)_isInvalidated;
- (void)invalidate;
- (void)_teardown;
- (void)_resume;
- (void)_pause;
- (void)_caDisplayLinkCallback;
- (void)_callbackWithTime:(double)arg1 andDeltaTime:(double)arg2;
- (int)queuedFrameCount;
@property(nonatomic) long long frameInterval;
- (void)setPaused:(_Bool)arg1 nextFrameTimeHint:(double)arg2;
@property(nonatomic, getter=isPaused) _Bool paused;
- (void)dealloc;
- (void)willDie;
- (id)initWithOwner:(id)arg1 queue:(id)arg2 block:(CDUnknownBlockType)arg3;
- (id)init;

@end

@interface SCNFloor : SCNGeometry
{
    id _reserved;
    unsigned int _isPresentationInstance:1;
    float _reflectivity;
    float _reflectionFalloffStart;
    float _reflectionFalloffEnd;
    float _reflectionResolutionScaleFactor;
    unsigned long long _reflectionSampleCount;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)floor;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNFloor:(id)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setReflectionFallOffEnd:(double)arg1;
- (void)setReflectionFallOffStart:(double)arg1;
- (double)reflectionFallOffEnd;
- (double)reflectionFallOffStart;
@property(nonatomic) double reflectivity;
- (void)setReflectionSampleCount:(unsigned long long)arg1;
- (unsigned long long)reflectionSampleCount;
@property(nonatomic) double reflectionResolutionScaleFactor;
@property(nonatomic) double reflectionFalloffStart;
@property(nonatomic) double reflectionFalloffEnd;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (struct __C3DFloor *)floorRef;
- (void)dealloc;
- (id)init;

@end

@interface SCNGeometryElement : NSObject <NSSecureCoding>
{
    id _reserved;
    // Error parsing type: ^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__CFData}III^{__C3DMeshElement}CBc^{__C3DMeshSource}[2]}, name: _meshElement
    NSData *_elementData;
    long long _primitiveType;
    long long _primitiveCount;
    long long _bytesPerIndex;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)geometryElementWithData:(id)arg1 primitiveType:(long long)arg2 primitiveCount:(long long)arg3 bytesPerIndex:(long long)arg4;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
-     // Error parsing type: ^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__CFData}III^{__C3DMeshElement}CBc^{__C3DMeshSource}[2]}16@0:8, name: meshElement
@property(readonly, nonatomic) long long bytesPerIndex;
@property(readonly, nonatomic) long long primitiveCount;
@property(readonly, nonatomic) long long primitiveType;
@property(readonly, nonatomic) NSData *data;
- (id)initWithData:(id)arg1 primitiveType:(long long)arg2 primitiveCount:(long long)arg3 bytesPerIndex:(long long)arg4;
- (void)dealloc;
- (id)init;
-     // Error parsing type: @24@0:8^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__CFData}III^{__C3DMeshElement}CBc^{__C3DMeshSource}[2]}16, name: initWithMeshElement:

@end

@interface SCNGeometrySource : NSObject <NSSecureCoding>
{
    id _reserved;
    struct __C3DMeshSource *_meshSource;
    NSData *_data;
    NSString *_semantic;
    long long _vectorCount;
    _Bool _floatComponents;
    long long _componentsPerVector;
    long long _bytesPerComponent;
    long long _dataOffset;
    long long _dataStride;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)geometrySourceWithTextureCoordinates:(const struct CGPoint *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithNormals:(const struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithVertices:(const struct SCNVector3 *)arg1 count:(long long)arg2;
+ (id)geometrySourceWithData:(id)arg1 semantic:(id)arg2 vectorCount:(long long)arg3 floatComponents:(_Bool)arg4 componentsPerVector:(long long)arg5 bytesPerComponent:(long long)arg6 dataOffset:(long long)arg7 dataStride:(long long)arg8;
+ (id)dataWithPointArray:(const struct CGPoint *)arg1 count:(long long)arg2 bytesPerComponent:(long long *)arg3;
+ (id)dataWithVector3Array:(const struct SCNVector3 *)arg1 count:(long long)arg2 bytesPerComponent:(long long *)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct __C3DMeshSource *)meshSource;
- (short)baseTypeForDataFormat;
@property(readonly, nonatomic) long long dataStride;
@property(readonly, nonatomic) long long dataOffset;
@property(readonly, nonatomic) long long bytesPerComponent;
@property(readonly, nonatomic) long long componentsPerVector;
@property(readonly, nonatomic) _Bool floatComponents;
@property(readonly, nonatomic) long long vectorCount;
@property(readonly, nonatomic) NSString *semantic;
@property(readonly, nonatomic) NSData *data;
- (id)initWithData:(id)arg1 semantic:(id)arg2 vectorCount:(long long)arg3 floatComponents:(_Bool)arg4 componentsPerVector:(long long)arg5 bytesPerComponent:(long long)arg6 dataOffset:(long long)arg7 dataStride:(long long)arg8;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithMeshSource:(struct __C3DMeshSource *)arg1;

@end

@interface SCNHitTestResult : NSObject
{
    id _reserved;
    struct __C3DHitTestResult *_result;
}

+ (id)SCNJSExportProtocol;
+ (id)hitTestResultsFromHitTestResultRef:(struct __CFArray *)arg1;
- (id)description;
@property(readonly, nonatomic) struct SCNMatrix4 modelTransform;
- (struct CGPoint)textureCoordinate;
- (struct CGPoint)textureCoordinatesWithMappingChannel:(long long)arg1;
@property(readonly, nonatomic) struct SCNVector3 worldNormal;
@property(readonly, nonatomic) struct SCNVector3 localNormal;
@property(readonly, nonatomic) struct SCNVector3 worldCoordinates;
@property(readonly, nonatomic) struct SCNVector3 localCoordinates;
@property(readonly, nonatomic) long long faceIndex;
@property(readonly, nonatomic) long long geometryIndex;
@property(readonly, nonatomic) SCNNode *node;
- (void)dealloc;
- (id)initWithResult:(struct __C3DHitTestResult *)arg1;

@end

@interface SCNIKConstraint : SCNConstraint
{
    id _reserved;
    SCNNode *_chainRootNode;
    struct SCNVector3 _ikTarget;
    NSMutableDictionary *_jointsPerNode;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)inverseKinematicsConstraintWithChainRootNode:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNIKConstraint:(id)arg1;
- (void)_customEncodingOfSCNIKConstraint:(id)arg1;
- (void)_didDecodeSCNIKConstraint:(id)arg1;
- (double)maxAllowedRotationAngleForJoint:(id)arg1;
- (void)setMaxAllowedRotationAngle:(double)arg1 forJoint:(id)arg2;
- (id)jointForNode:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(nonatomic) struct SCNVector3 targetPosition;
- (void)setChainRootNode:(id)arg1;
@property(readonly, nonatomic) SCNNode *chainRootNode;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNIKJoint : NSObject
{
    SCNNode *joint;
    double maxAllowedRotationAngle;
}

@property(nonatomic) double maxAllowedRotationAngle; // @synthesize maxAllowedRotationAngle;
@property(nonatomic) __weak SCNNode *joint; // @synthesize joint;

@end

__attribute__((visibility("hidden")))
@interface SCNJSAnimationGroup : CAAnimationGroup
{
}

+ (id)SCNJSExportProtocol;
+ (id)animationGroup;

@end

__attribute__((visibility("hidden")))
@interface SCNJSBasicAnimation : CABasicAnimation
{
}

+ (id)SCNJSExportProtocol;
+ (id)basicAnimationWithKeyPath:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNJSImage : UIImage
{
}

+ (id)SCNJSExportProtocol;
+ (id)imageWithPath:(id)arg1;
+ (id)imageWithURL:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNJSKeyframeAnimation : CAKeyframeAnimation
{
}

+ (id)SCNJSExportProtocol;
+ (id)keyframeAnimationWithKeyPath:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNJSLayer : CALayer
{
}

+ (id)SCNJSExportProtocol;

@end

__attribute__((visibility("hidden")))
@interface SCNJSTimingFunction : CAMediaTimingFunction
{
}

+ (id)SCNJSExportProtocol;
+ (id)functionWithName:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNJitterer : NSObject
{
    _Bool _enabled;
    unsigned long long _state;
    unsigned long long _iteration;
    _Bool _jitteringSupported;
    _Bool _restartSourceIsSuspended;
    id <SCNJittererDelegate> _delegate;
    NSObject<OS_dispatch_source> *_restartSource;
}

+ (void)initialize;
- (void)restart;
- (void)stopIfNeeded;
- (void)jitter;
- (void)update;
- (_Bool)isAborting;
@property(nonatomic, getter=isEnabled) _Bool enabled;
- (void)delegateWillDie;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNKeyedUnarchiver : NSKeyedUnarchiver
{
    NSDictionary *_context;
}

@property(retain, nonatomic) NSDictionary *context; // @synthesize context=_context;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNLayerSource : SCNImageSource
{
    CALayer *_layer;
}

@property(retain, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (void)dealloc;
- (_Bool)isOpaque;
- (id)textureSourceForContext:(void *)arg1;

@end

@interface SCNLevelOfDetail : NSObject <NSCopying, NSSecureCoding>
{
    id _reserved;
    struct __C3DLOD *_lod;
    long long _mode;
    SCNGeometry *_geometry;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)levelOfDetailWithGeometry:(id)arg1 worldSpaceDistance:(double)arg2;
+ (id)levelOfDetailWithGeometry:(id)arg1 screenSpaceRadius:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNLevelOfDetail:(id)arg1;
- (void)_customEncodingOfSCNLevelOfDetail:(id)arg1;
- (id)description;
@property(readonly) double worldSpaceDistance;
@property(readonly) double screenSpaceRadius;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)thresholdValue;
- (long long)thresholdMode;
@property(readonly) SCNGeometry *geometry;
- (void *)__CFObject;
- (id)initWithGeometry:(id)arg1 thresholdMode:(long long)arg2 thresholdValue:(id)arg3;
- (id)initWithGeometry:(id)arg1 thresholdMode:(long long)arg2 lod:(struct __C3DLOD *)arg3;
- (id)init;
- (void)_setupWithGeometry:(id)arg1 thresholdMode:(long long)arg2 value:(double)arg3;
- (void)dealloc;

@end

@interface SCNLight : NSObject <SCNAnimatable, SCNTechniqueSupport, NSCopying, NSSecureCoding>
{
    id _reserved;
    struct __C3DLight *_light;
    unsigned int _isPresentationInstance:1;
    unsigned int _goboProjectShadows:1;
    unsigned int _castsShadow:1;
    unsigned int _usesDeferredShadows:1;
    unsigned int _usesModulatedMode:1;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    NSString *_type;
    id _color;
    id _shadowColor;
    float _shadowRadius;
    double _orthographicScale;
    unsigned long long _shadowSampleCount;
    struct CGSize _shadowMapSize;
    unsigned long long _categoryBitMask;
    double _zNear;
    double _zFar;
    double _shadowBias;
    float _attenuations[6];
    SCNMaterialProperty *_gobo;
    SCNTechnique *_technique;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)lightWithLightRef:(struct __C3DLight *)arg1;
+ (id)light;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNLight:(id)arg1;
- (void)_customDecodingOfSCNLight:(id)arg1;
- (void)_customEncodingOfSCNLight:(id)arg1;
@property(readonly, nonatomic) SCNMaterialProperty *gobo;
- (double)spotFalloffExponent;
- (void)setSpotFalloffExponent:(double)arg1;
@property(nonatomic) double spotOuterAngle;
@property(nonatomic) double spotInnerAngle;
@property(nonatomic) double attenuationFalloffExponent;
@property(nonatomic) double attenuationEndDistance;
@property(nonatomic) double attenuationStartDistance;
@property(nonatomic) struct CGSize shadowMapSize;
@property(nonatomic) double zNear;
@property(nonatomic) double zFar;
- (void)setUsesModulatedMode:(_Bool)arg1;
- (_Bool)usesModulatedMode;
- (void)setUsesDeferredShadows:(_Bool)arg1;
- (_Bool)usesDeferredShadows;
@property(nonatomic) long long shadowMode;
@property(nonatomic) unsigned long long shadowSampleCount;
@property(nonatomic) double shadowRadius;
@property(retain, nonatomic) id shadowColor;
@property(nonatomic) double shadowBias;
@property(nonatomic) double orthographicScale;
@property(retain, nonatomic) id color;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) _Bool castsShadow;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
@property(copy, nonatomic) SCNTechnique *technique;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
@property(copy, nonatomic) NSString *type;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (_Bool)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationLight;
- (void)_syncObjCModel;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (struct __C3DLight *)lightRef;
- (id)initPresentationLightWithLightRef:(struct __C3DLight *)arg1;
- (id)initWithLightRef:(struct __C3DLight *)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNLookAtConstraint : SCNConstraint
{
    id _reserved;
    SCNNode *_target;
    _Bool _gimbalLockEnabled;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)lookAtConstraintWithTarget:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNLookAtConstraint:(id)arg1;
- (void)_customEncodingOfSCNLookAtConstraint:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) SCNNode *target;
@property(nonatomic) _Bool gimbalLockEnabled;
- (void)dealloc;
- (id)initWithTarget:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNManipulator : NSObject
{
    SCNAuthoringEnvironment *_authoringEnvironment;
    SCNNode *_target;
}

@property(nonatomic) SCNNode *target; // @synthesize target=_target;
- (_Bool)mouseUp:(CDStruct_edec59f9)arg1;
- (_Bool)mouseDown:(CDStruct_edec59f9)arg1;
- (_Bool)mouseDragged:(CDStruct_edec59f9)arg1;
- (_Bool)mouseMoved:(CDStruct_edec59f9)arg1;
- (void)draw;
- (void)_setAuthoringEnvironment:(id)arg1;
@property(readonly) SCNAuthoringEnvironment *authoringEnvironment;

@end

@interface SCNMaterial : NSObject <SCNAnimatable, SCNShadable, NSCopying, NSSecureCoding>
{
    id _reserved;
    struct __C3DMaterial *_material;
    SCNMaterialProperty *_ambient;
    SCNMaterialProperty *_diffuse;
    SCNMaterialProperty *_specular;
    SCNMaterialProperty *_emission;
    SCNMaterialProperty *_reflective;
    SCNMaterialProperty *_transparent;
    SCNMaterialProperty *_multiply;
    SCNMaterialProperty *_normal;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    NSMutableDictionary *_valuesForUndefinedKeys;
    float _shininess;
    float _transparency;
    float _indexOfRefraction;
    float _fresnelExponent;
    long long _transparencyMode;
    NSString *_lightingModelName;
    long long _cullMode;
    SCNShadableHelper *_shadableHelper;
    _Bool _isPresentationInstance;
    _Bool _litPerPixel;
    _Bool _doubleSided;
    _Bool _locksAmbientWithDiffuse;
    _Bool _avoidsOverLighting;
    _Bool _writesToDepthBuffer;
    _Bool _readsFromDepthBuffer;
    long long _fillMode;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (_Bool)accessInstanceVariablesDirectly;
+ (id)materialWithContents:(id)arg1;
+ (id)materialWithColor:(id)arg1;
+ (id)material;
+ (id)materialWithMaterialRef:(struct __C3DMaterial *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customEncodingOfSCNMaterial:(id)arg1;
- (void)_customDecodingOfSCNMaterial:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)shaderModifiersUniformNames;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
@property(retain, nonatomic) SCNProgram *program;
- (void)_setupShadableHelperIfNeeded;
- (struct __C3DMaterial *)materialRefCreateIfNeeded;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setAttributes:(id)arg1;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
@property(readonly, copy) NSString *description;
- (long long)fillMode;
- (void)setFillMode:(long long)arg1;
@property(nonatomic) long long cullMode;
@property(nonatomic, getter=isDoubleSided) _Bool doubleSided;
- (void)setContent:(id)arg1;
- (id)content;
- (void)setContents:(id)arg1;
- (id)contents;
@property(nonatomic) _Bool readsFromDepthBuffer;
@property(nonatomic) _Bool writesToDepthBuffer;
- (_Bool)avoidsOverLighting;
- (void)setAvoidsOverLighting:(_Bool)arg1;
@property(nonatomic) _Bool locksAmbientWithDiffuse;
@property(nonatomic, getter=isLitPerPixel) _Bool litPerPixel;
@property(copy, nonatomic) NSString *lightingModelName;
@property(nonatomic) double fresnelExponent;
- (double)indexOfRefraction;
- (void)setIndexOfRefraction:(double)arg1;
@property(nonatomic) double transparency;
@property(nonatomic) double shininess;
@property(nonatomic) long long transparencyMode;
@property(readonly, nonatomic) SCNMaterialProperty *normal;
@property(readonly, nonatomic) SCNMaterialProperty *multiply;
@property(readonly, nonatomic) SCNMaterialProperty *transparent;
@property(readonly, nonatomic) SCNMaterialProperty *reflective;
@property(readonly, nonatomic) SCNMaterialProperty *emission;
@property(readonly, nonatomic) SCNMaterialProperty *specular;
@property(readonly, nonatomic) SCNMaterialProperty *diffuse;
@property(readonly, nonatomic) SCNMaterialProperty *ambient;
- (id)_property:(id *)arg1;
- (id)properties;
- (id)color;
- (void)setColor:(id)arg1;
- (void)_setupMaterialProperty:(id *)arg1;
- (Class)_materialPropertyClass;
- (struct __C3DEffectCommonProfile *)commonProfile;
- (struct __C3DMaterial *)materialRef;
- (_Bool)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationMaterial;
- (void)_syncObjCModel;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
- (void)dealloc;
- (id)initPresentationMaterialWithMaterialRef:(struct __C3DMaterial *)arg1;
- (id)initWithMaterialRef:(struct __C3DMaterial *)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNMaterialAttachment : NSObject
{
    unsigned int glID;
    unsigned int target;
    void *context;
    struct CGSize size;
    NSDictionary *options;
}

@property(copy, nonatomic) NSDictionary *options; // @synthesize options;
@property(nonatomic) struct CGSize size; // @synthesize size;
@property(nonatomic) void *context; // @synthesize context;
@property(nonatomic) unsigned int target; // @synthesize target;
@property(nonatomic) unsigned int glID; // @synthesize glID;
- (void)dealloc;

@end

@interface SCNMaterialProperty : NSObject <SCNAnimatable, NSSecureCoding>
{
    id _reserved;
    unsigned int _isPresentationInstance:1;
    unsigned int _isCommonProfileProperty:1;
    id _parent;
    int _propertyType;
    NSString *_customSlotName;
    SCNOrderedDictionary *_animations;
    UIColor *_borderColor;
    unsigned char _contentType;
    id _contents;
    long long _mappingChannel;
    float _intensity;
    float _maxAnisotropy;
    long long _minificationFilter;
    long long _magnificationFilter;
    long long _mipFilter;
    long long _wrapS;
    long long _wrapT;
    struct __C3DEffectSlot *_customSlot;
    struct __C3DImage *_c3dImage;
    struct __C3DTextureProxy *_textureProxy;
    struct SCNMatrix4 *_contentTransform;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)copyImageFromC3DImage:(struct __C3DImage *)arg1;
+ (id)_copyImageFromC3DImage:(struct __C3DImage *)arg1;
+ (struct __C3DImage *)copyC3DImageFromImage:(id)arg1;
+ (struct __C3DImage *)_copyC3DImageFromImageData:(id)arg1 typeID:(unsigned long long)arg2;
+ (id)materialPropertyWithContents:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNMaterialProperty:(id)arg1;
- (void)_didDecodeSCNMaterialProperty:(id)arg1;
- (void)_customEncodingOfSCNMaterialProperty:(id)arg1;
- (void)_updateMaterialColor:(id)arg1;
- (void)_updateMaterialImage:(id)arg1;
- (void)_updateMaterialProceduralContents:(id)arg1;
- (void)_updateMaterialLayer:(id)arg1;
- (void)_updateMaterialSKTexture:(id)arg1;
- (void)_updateMaterialSKScene:(id)arg1;
- (void)_layerDidChange:(id)arg1;
- (void)_updateMaterialAttachment:(id)arg1;
-     // Error parsing type: v80@0:8(C3DMatrix4x4=[16f][4])16, name: _updateMaterialPropertyTransform:
- (void)_updateMaterialFilters;
- (void)_updateMaterialBorderColor:(id)arg1;
- (_Bool)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)presentationMaterialProperty;
- (void)copyPropertiesFrom:(id)arg1;
- (void)_syncObjCModel;
- (struct __C3DScene *)sceneRef;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (struct __C3DTextureSampler *)textureSampler;
- (struct __C3DEffectCommonProfile *)commonProfile;
- (struct __C3DEffectSlot *)effectSlot;
- (id)parent;
- (void)parentWillDie:(id)arg1;
@property(readonly, copy) NSString *description;
- (int)propertyType;
- (id)slotName;
@property(nonatomic) struct SCNMatrix4 contentsTransform;
- (id)proceduralContents;
- (void)setProceduralContents:(id)arg1;
@property(nonatomic) double maxAnisotropy;
- (id)content;
- (void)setContent:(id)arg1;
@property(retain, nonatomic) id contents;
- (id)layer;
- (void)setLayer:(id)arg1;
- (id)skTexture;
- (void)setSkTexture:(id)arg1;
- (id)skScene;
- (void)setSkScene:(id)arg1;
- (id)pvrtcData;
- (id)image;
- (void)setImage:(id)arg1;
- (id)attachment;
- (void)setAttachment:(id)arg1;
@property(nonatomic) long long wrapT;
@property(nonatomic) long long wrapS;
@property(retain, nonatomic) id borderColor;
@property(nonatomic) double intensity;
@property(nonatomic) long long mappingChannel;
- (long long)_presentationMappingChannel;
@property(nonatomic) long long mipFilter;
@property(nonatomic) long long magnificationFilter;
@property(nonatomic) long long minificationFilter;
- (struct C3DColor4)borderColor4;
- (struct C3DColor4)color4;
- (struct __C3DImage *)getC3DImageRef;
- (void)_setC3DImageRef:(struct __C3DImage *)arg1;
- (id)color;
- (void)setColor:(id)arg1;
- (void)_setColor:(id)arg1;
- (void)_clearContents;
- (id)_animationPathForKey:(id)arg1;
- (struct __C3DEffectSlot *)effectSlotCreateIfNeeded:(_Bool)arg1;
- (void)synchronizeCustomPropertyWithParent:(id)arg1 andCustomName:(id)arg2;
- (void)_setParent:(id)arg1;
- (void)dealloc;
- (void)__allocateContentTransformIfNeeded;
- (id)initPresentationMaterialPropertyWithModelProperty:(id)arg1;
- (id)initWithParent:(id)arg1 andCustomName:(id)arg2;
- (id)initWithParent:(id)arg1 propertyType:(int)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNMorpher : NSObject <SCNAnimatable, NSSecureCoding>
{
    id _reserved;
    struct __C3DMorph *_morpher;
    unsigned int _isPresentationInstance:1;
    long long _calculationMode;
    SCNOrderedDictionary *_animations;
    NSArray *_targets;
    NSMutableArray *_weights;
    NSString *_name;
    _Bool _shouldMorphNormals;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)morpher;
+ (id)morpherWithMorphRef:(struct __C3DMorph *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNMorpher:(id)arg1;
- (void)_customEncodingOfSCNMorpher:(id)arg1;
- (void)_customDecodingOfSCNMorpher:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
@property(nonatomic) long long calculationMode;
- (void)setWeights:(id)arg1;
- (double)weightForTargetAtIndex:(unsigned long long)arg1;
- (void)setWeight:(double)arg1 forTargetAtIndex:(unsigned long long)arg2;
- (void)setShouldMorphNormals:(_Bool)arg1;
- (_Bool)shouldMorphNormals;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationInstance;
- (id)presentationMorpher;
- (_Bool)isPausedOrPausedByInheritance;
- (void)_syncObjCModel;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
@property(readonly, copy) NSString *description;
- (struct __C3DMorph *)morphRef;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;
@property(copy, nonatomic) NSArray *targets;
- (void)dealloc;
- (id)initPresentationMorpherWithMorphRef:(struct __C3DMorph *)arg1;
- (id)initWithMorphRef:(struct __C3DMorph *)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNNode : NSObject <NSCopying, NSSecureCoding, SCNAnimatable, SCNActionable, SCNBoundingVolume>
{
    id _reserved;
    // Error parsing type: ^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}, name: _node
    SCNNode *_parent;
    NSMutableArray *_childNodes;
    SCNNode *_presentationInstance;
    unsigned int _isPresentationInstance:1;
    unsigned int _lightLoaded:1;
    unsigned int _geometryLoaded:1;
    unsigned int _cameraLoaded:1;
    unsigned int _skinnerLoaded:1;
    unsigned int _morpherLoaded:1;
    unsigned int _paused:1;
    unsigned int _pausedByInheritance:1;
    unsigned int _affineUpToDate:1;
    unsigned int _transformUpToDate:1;
    unsigned int _hasPivot:1;
    unsigned int _usesEuler:1;
    struct SCNMatrix4 _transform;
    struct SCNVector3 _position;
    struct SCNVector4 _rotation;
    struct SCNVector3 _scale;
    float _opacity;
    _Bool _hidden;
    _Bool _castsShadow;
    unsigned long long _categoryBitMask;
    SCNLight *_light;
    SCNGeometry *_geometry;
    SCNCamera *_camera;
    SCNSkinner *_skinner;
    SCNMorpher *_morpher;
    NSArray *_filters;
    NSMutableArray *_particleSystems;
    SCNOrderedDictionary *_animations;
    SCNOrderedDictionary *_actions;
    NSMutableArray *_constraints;
    SCNPhysicsBody *_physicsBody;
    SCNPhysicsField *_physicsField;
    struct SCNVector3 *_fixedBoundingBoxExtrema;
    long long _renderingOrder;
    NSString *_name;
    NSMutableDictionary *_valueForKey;
    id _rendererDelegate;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (_Bool)resolveInstanceMethod:(SEL)arg1;
+ (id)keyPathsForValuesAffectingTransform;
+     // Error parsing type: @24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16, name: nodeWithNodeRef:
+ (id)nodeWithGeometry:(id)arg1;
+ (id)node;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNNode:(id)arg1;
- (void)_customDecodingOfSCNNode:(id)arg1;
- (void)_customEncodingOfSCNNode:(id)arg1;
- (struct SCNMatrix4)convertTransform:(struct SCNMatrix4)arg1 fromNode:(id)arg2;
- (struct SCNMatrix4)convertTransform:(struct SCNMatrix4)arg1 toNode:(id)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 fromNode:(id)arg2;
- (struct SCNVector3)convertPosition:(struct SCNVector3)arg1 toNode:(id)arg2;
- (void)removeParticleSystem:(id)arg1;
- (void)removeAllParticleSystems;
- (void)addParticleSystem:(id)arg1;
- (id)particleSystems;
- (void)_removeDeadParticleSystem:(struct __C3DParticleSystem *)arg1;
@property(retain, nonatomic) SCNPhysicsField *physicsField;
@property(retain, nonatomic) SCNPhysicsBody *physicsBody;
@property(copy) NSArray *constraints;
- (void)removeAllActions;
- (void)removeActionForKey:(id)arg1;
- (void)_removeAction:(id)arg1 forKey:(id)arg2;
- (id)actionForKey:(id)arg1;
- (_Bool)hasActions;
- (id)actionKeys;
- (void)runAction:(id)arg1 forKey:(id)arg2;
- (void)runAction:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)runAction:(id)arg1;
- (void)runAction:(id)arg1 forKey:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(nonatomic, getter=isPaused) _Bool paused;
- (_Bool)isPausedOrPausedByInheritance;
- (void)_setPaused:(_Bool)arg1;
- (void)_actionsTimeJump:(double)arg1;
- (id)flattenedCopy;
- (id)flattenedClone;
- (id)getBoundingBox;
- (id)getBoundingSphere;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (void)setBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (void)replaceChildNode:(id)arg1 with:(id)arg2;
- (void)insertChildNode:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeAllChilds;
- (unsigned long long)indexOfChildNode:(id)arg1;
- (void)removeFromParentNode;
- (void)replaceObjectInChildNodesAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromChildNodesAtIndex:(unsigned long long)arg1;
- (void)__removeObjectFromChildNodesAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inChildNodesAtIndex:(unsigned long long)arg2;
- (void)__insertObject:(id)arg1 inChildNodesAtIndex:(unsigned long long)arg2;
- (void)addChildNode:(id)arg1;
- (_Bool)canAddChildNode:(id)arg1;
- (void)_initChildNodesArray;
- (id)objectInChildNodesAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfChildNodes;
- (void)_setParent:(id)arg1;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (_Bool)parseSpecialKey:(id)arg1 withPath:(id)arg2 intoDestination:(id *)arg3 remainingPath:(id *)arg4;
- (void)renderInContext:(void *)arg1;
@property(nonatomic) id <SCNNodeRendererDelegate> rendererDelegate;
@property(readonly, copy) NSString *description;
@property(copy, nonatomic) NSArray *filters;
@property(retain, nonatomic) SCNGeometry *geometry;
- (void)_setGeometry:(id)arg1;
@property(retain, nonatomic) SCNCamera *camera;
- (void)_setCamera:(id)arg1;
@property(retain, nonatomic) SCNMorpher *morpher;
- (void)_setMorpher:(id)arg1;
@property(retain, nonatomic) SCNSkinner *skinner;
- (void)_setSkinner:(id)arg1;
- (void)setGizmo:(_Bool)arg1;
- (_Bool)isGizmo;
- (_Bool)isJoint;
@property(retain, nonatomic) SCNLight *light;
- (void)_setLight:(id)arg1;
- (id)mutableChildNodes;
@property(readonly, nonatomic) NSArray *childNodes;
@property(readonly, nonatomic) SCNNode *parentNode;
- (_Bool)hidden;
@property(nonatomic) long long renderingOrder;
@property(nonatomic) double opacity;
@property(nonatomic, getter=isHidden) _Bool hidden;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) _Bool castsShadow;
@property(nonatomic) struct SCNMatrix4 pivot;
@property(readonly, nonatomic) struct SCNMatrix4 worldTransform;
- (void)setWorldTransform:(struct SCNMatrix4)arg1;
@property(nonatomic) struct SCNMatrix4 transform;
@property(nonatomic) struct SCNVector4 rotation;
@property(nonatomic) struct SCNVector3 scale;
- (void)_setScale:(struct SCNVector3)arg1;
@property(nonatomic) struct SCNVector3 position;
- (void)_setPosition:(struct SCNVector3)arg1;
@property(nonatomic) struct SCNVector3 eulerAngles;
- (struct SCNVector3)_euler;
@property(nonatomic) struct SCNVector4 orientation;
- (void)_setQuaternion:(struct SCNVector4)arg1;
- (void)setQuaternion:(struct SCNVector4)arg1;
- (struct SCNVector4)quaternion;
- (struct SCNVector4)_quaternion;
- (void)_updateAffine;
- (void)_updateTransform;
- (void)_registerAsObserver;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
-     // Error parsing type: ^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16@0:8, name: nodeRef
- (id)__morpher;
- (id)__skinner;
- (id)__geometry;
- (id)__camera;
- (id)__light;
- (id)jsChildNodesWithAttribute:(id)arg1;
- (id)childNodeWithName:(id)arg1;
- (id)objectInChildNodesWithAttribute:(id)arg1 firstOnly:(_Bool)arg2;
- (id)childNodesWithAttribute:(Class)arg1 recursively:(_Bool)arg2;
- (void)_childNodesWithAttribute:(Class)arg1 output:(id)arg2 recursively:(_Bool)arg3;
- (void)enumerateChildNodesUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)_enumerateChildNodesUsingBlock:(CDUnknownBlockType)arg1;
- (id)childNodesPassingTest:(CDUnknownBlockType)arg1;
- (id)childNodesPassingTest:(CDUnknownBlockType)arg1 recursively:(_Bool)arg2;
- (_Bool)_childNodesPassingTest:(CDUnknownBlockType)arg1 recursively:(_Bool)arg2 output:(id)arg3;
- (id)objectInChildNodesWithName:(id)arg1;
- (id)childNodeWithName:(id)arg1 recursively:(_Bool)arg2;
- (void)_expandChildArrayIfNeeded;
- (id)clone;
- (id)_copyRecursively;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_copy:(_Bool)arg1;
- (void)_setAttributes:(id)arg1;
- (void)dump;
- (void)_dump:(id)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)presentationInstance;
- (id)presentationNode;
- (_Bool)isPresentationInstance;
- (void)_syncObjCModel;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
@property(copy, nonatomic) NSString *name;
- (void)dealloc;
-     // Error parsing type: @24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16, name: initWithNodeRef:
-     // Error parsing type: @24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=Q[4C]I}^v^{__CFString}^{__CFString}^{__CFDictionary}qq}^{__C3DNode}^{__C3DNode}^{__C3DNode}{?={?=SS}I}^{?}^{__C3DGeometry}b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1QB^{__C3DTransforms}(C3DMatrix4x4=[16f][4])ff{__C3DAABB=}}16, name: initPresentationNodeWithNodeRef:
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCNNodeManipulator : SCNManipulator
{
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _xAxisToZAxisTransform
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _yAxisToZAxisTransform
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _xyPlaneToYZPlaneTransform
    // Error parsing type: (C3DMatrix4x4="components"[16f]"m"[4]), name: _xyPlaneToXZPlaneTransform
    // Error parsing type: (?="axisMove"{?="selectedAxis"S"originalPosition""axisDirection""mouseDeltaVector"}"planeMove"{?="selectedPlane"S"originalPosition""planeNormal""pointInPlane""mouseDeltaVector"}"axisRotate"{?="selectedAxis"S"originalMouseLocation"{CGPoint="x"d"y"d}"rotationSign"f"originalRotation"{__C3DQuaternion="x"f"y"f"z"f"s"f}}), name: _actionData
    _Bool _isMouseDown;
    unsigned short _action;
}

- (_Bool)mouseUp:(CDStruct_edec59f9)arg1;
- (_Bool)mouseDown:(CDStruct_edec59f9)arg1;
- (_Bool)mouseDragged:(CDStruct_edec59f9)arg1;
- (_Bool)mouseMoved:(CDStruct_edec59f9)arg1;
- (void)draw;
- (id)copy;
- (id)init;

@end

@interface SCNRenderer : NSObject <SCNSceneRenderer, SCNTechniqueSupport>
{
    id _reserved;
    SCNScene *_scene;
    NSLock *_lock;
    NSObject<OS_dispatch_queue> *__renderingQueue;
    unsigned long long __antialiasingMode;
    struct {
        struct __C3DFramebuffer *frameBuffer;
        struct __C3DFramebuffer *multisamplingFrameBuffer;
        struct CGSize drawableSize;
    } _framebufferInfo;
    unsigned int _shouldDeleteFramebuffer:1;
    unsigned int _pointOfViewWasSet:1;
    unsigned int _isPrivateRenderer:1;
    unsigned int _isViewPrivateRenderer:1;
    double _currentSceneTime;
    double _currentSystemTime;
    double _deltaTime;
    double _forceSystemTime;
    double _lastSystemTime;
    double __nextFrameTime;
    _Bool _playing;
    _Bool _isAnimating;
    _Bool _loops;
    id _delegate;
    struct __C3DEngineAdaptor {
        struct __CFRuntimeBase _field1;
        void *_field2;
        struct __C3DEngineContext *_field3;
        void *_field4;
    } *_engine;
    EAGLContext *_glContext;
    unsigned int _jitteringEnabled:1;
    unsigned int _frozen:1;
    unsigned int _delegateSupportsWillRender:1;
    unsigned int _delegateSupportsDidRender:1;
    unsigned int _delegateSupportsDidApplyAnimations:1;
    unsigned int _delegateSupportsUpdate:1;
    unsigned int _delegateSupportsDidSimulatePhysics:1;
    UIColor *_backgroundColor;
    struct C3DColor4 _c3dBackgroundColor;
    SCNNode *_pointOfView;
    SCNRenderer *_preloadRenderer;
    id <SCNSceneRenderer> _privateRendererOwner;
    SCNTechnique *_technique;
    __SKSCNRenderer *_overlay;
    id _overlayScene;
    _Bool _disableOverlays;
    _Bool _showStatistics;
    double _statisticsTimeStamp;
    void *_offscreenReserved;
}

+ (id)SCNJSExportProtocol;
+ (id)rendererWithContext:(void *)arg1 options:(id)arg2;
- (id)_authoringEnvironment;
- (void)set_showsAuthoringEnvironment:(_Bool)arg1;
- (_Bool)_showsAuthoringEnvironment;
- (void)_jitterAtStep:(unsigned long long)arg1 updateMainFramebuffer:(_Bool)arg2 redisplay:(_Bool)arg3 jitterer:(id)arg4;
- (void)_presentFramebuffer;
@property(nonatomic) _Bool showsStatistics;
- (void)_displayLinkStatsTack;
- (void)_displayLinkStatsTick;
- (void)setFrozen:(_Bool)arg1;
- (_Bool)frozen;
- (_Bool)jitteringEnabled;
@property(nonatomic, getter=isJitteringEnabled) _Bool jitteringEnabled;
- (void)_detachTexture:(id)arg1;
- (void)_attachTexture:(id)arg1;
@property(nonatomic) _Bool loops;
@property(getter=isPlaying) _Bool playing;
- (void)_stop;
- (void)_pause;
- (void)_play;
- (_Bool)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (_Bool)_isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2 viewport:(struct CGSize)arg3;
- (id)_hitTest:(struct CGPoint)arg1 viewport:(struct CGSize)arg2 options:(id)arg3;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
- (struct UIImage *)_snapshotWithImageSize:(struct CGSize)arg1 backingSize:(struct CGSize)arg2;
- (void)render;
- (void)_renderAtTime:(double)arg1;
- (void)_draw;
- (void)_drawWithJitteringPresentationMode;
- (void)_updateWithSystemTime:(double)arg1;
-     // Error parsing type: v32@0:8^{__C3DScene=}16^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}24, name: _update:rendererContext:
@property(readonly, nonatomic) void *context;
- (void)setContext:(id)arg1;
- (void)set_deltaTime:(double)arg1;
- (void)set_systemTime:(double)arg1;
- (double)_systemTime;
@property(nonatomic) double sceneTime;
- (void)_setSceneTime:(double)arg1;
- (void)setCurrentTime:(double)arg1;
- (double)currentTime;
- (_Bool)_needsRepetitiveRedraw;
- (void)renderAtTime:(double)arg1;
@property(readonly, nonatomic) double nextFrameTime;
- (double)_nextFrameTime;
- (void)set_nextFrameTime:(double)arg1;
- (void)updateCurrentTimeIfPlayingWithSystemTime:(double)arg1;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
- (void)_updateEngineCallbacks;
- (id)programWithNode:(id)arg1 withMaterial:(id)arg2;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (_Bool)prepareObject:(id)arg1 shouldAbortBlock:(CDUnknownBlockType)arg2;
- (_Bool)_preloadResource:(id)arg1 abortHandler:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) SCNTechnique *technique;
@property(retain, nonatomic) SKScene *overlaySKScene;
- (void)setDisableOverlays:(_Bool)arg1;
- (_Bool)disableOverlays;
- (struct C3DColor4 *)_backgroundColorComponents;
- (void)setBackgroundColor:(id)arg1;
- (id)backgroundColor;
@property(retain, nonatomic) SCNScene *scene;
- (void)setScene:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_updatePointOfView;
- (id)_defaultPOVForScene:(id)arg1;
- (_Bool)autoAdjustCamera;
- (void)setAutoAdjustCamera:(_Bool)arg1;
- (void)_willRenderScene:(id)arg1;
- (void)_didRenderScene:(id)arg1;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)_unprojectPoint:(struct SCNVector3)arg1 viewport:(struct CGSize)arg2;
- (struct SCNVector3)_projectPoint:(struct SCNVector3)arg1 viewport:(struct CGSize)arg2;
- (void)_projectPoints:(struct SCNVector3 *)arg1 count:(unsigned long long)arg2 viewport:(struct CGSize)arg3;
@property(retain, nonatomic) SCNNode *pointOfView;
@property(nonatomic) _Bool autoenablesDefaultLighting;
- (void *)__CFObject;
-     // Error parsing type: ^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}16@0:8, name: _rendererContext
- (struct __C3DEngineContext *)_engineContext;
- (void)set_antialiasingMode:(unsigned long long)arg1;
- (unsigned long long)_antialiasingMode;
- (unsigned long long)_sampleCount;
- (void)_createFramebufferIfNeeded;
- (void)_resolveAndDiscard;
- (void)_unbindFramebuffer;
- (void)_bindFramebuffer;
- (void)_deleteFramebuffer;
- (void)_invalidateFramebuffer;
- (void)_setBackingSize:(struct CGSize)arg1;
- (double)_contentsScaleFactor;
- (void)_clearBuffers;
- (void)_installViewport;
- (_Bool)_installContext;
- (id)_renderingQueue;
- (void)unlock;
- (void)lock;
- (void)dealloc;
@property(readonly, copy) NSString *description;
- (id)_initWithOptions:(id)arg1 isPrivateRenderer:(_Bool)arg2 privateRendererOwner:(id)arg3 clearsOnDraw:(_Bool)arg4;
- (void)setupForDeprecatedOffscreenRenderer;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNOffscreenRenderer : SCNRenderer
{
}

+ (id)offscreenRendererWithContext:(id)arg1 size:(struct CGSize)arg2;
- (void)dealloc;
- (void)_createFramebufferIfNeeded;
- (void)_resolveAndDiscard;
- (void)_unbindFramebuffer;
- (void)_bindFramebuffer;
- (void)_deleteFramebuffer;
@property(readonly, nonatomic) unsigned int textureID;
- (struct UIImage *)snapshotAtTime:(double)arg1;
- (struct UIImage *)snapshot;
- (struct CGImage *)copySnapshotWithSize:(struct CGSize)arg1;
- (struct CGImage *)createCGImageSnapshot:(double)arg1;
- (void)render;
- (unsigned long long)_sampleCount;
@property(nonatomic) unsigned long long antialiasingMode;
- (id)_initWithOptions:(id)arg1 isPrivateRenderer:(_Bool)arg2 privateRendererOwner:(id)arg3 clearsOnDraw:(_Bool)arg4 context:(void *)arg5 size:(struct CGSize)arg6;

@end

__attribute__((visibility("hidden")))
@interface SCNOrderedDictionary : NSObject
{
    NSMutableArray *_keys;
    NSMutableDictionary *_keyValues;
}

- (id)copy;
- (void)_setupFrom:(id)arg1;
- (id)keys;
- (id)dictionary;
- (id)allValues;
- (unsigned long long)count;
- (void)applyFunction:(CDUnknownFunctionPointerType)arg1 withContext:(void *)arg2;
- (id)allKeys;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)dealloc;

@end

@interface SCNParticlePropertyController : NSObject <NSSecureCoding, NSCopying>
{
    id _reserved;
    CAAnimation *_animation;
    long long _inputMode;
    double _inputScale;
    double _inputBias;
    SCNNode *_inputOrigin;
    NSString *_inputProperty;
    id _c3dAnimation;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)controllerWithAnimation:(id)arg1;
+ (id)particlePropertyControllerWithAnimation:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNParticlePropertyController:(id)arg1;
- (void)_customEncodingOfSCNParticlePropertyController:(id)arg1;
@property(copy, nonatomic) NSString *inputProperty;
@property(nonatomic) __weak SCNNode *inputOrigin;
@property(nonatomic) double inputBias;
@property(nonatomic) double inputScale;
@property(nonatomic) long long inputMode;
@property(retain, nonatomic) CAAnimation *animation;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)c3dAnimation;
- (void)setC3dAnimation:(id)arg1;
- (id)init;

@end

@interface SCNParticleSystem : NSObject <NSCopying, NSSecureCoding, SCNAnimatable>
{
    id _reserved;
    struct __C3DParticleSystem *_particleSystem;
    unsigned int _isPresentationInstance:1;
    SCNOrderedDictionary *_animations;
    NSString *_name;
    double _emissionDuration;
    double _emissionDurationVariation;
    double _idleDuration;
    double _idleDurationVariation;
    double _birthRate;
    double _birthRateVariation;
    double _warmupDuration;
    SCNGeometry *_emitterShape;
    long long _birthLocation;
    long long _birthDirection;
    struct SCNVector3 _emittingDirection;
    struct SCNVector3 _acceleration;
    double _spreadingAngle;
    _Bool _loops;
    _Bool _isLocal;
    _Bool _affectedByGravity;
    _Bool _affectedByPhysicsFields;
    _Bool _physicsCollisionsEnabled;
    _Bool _lightingEnabled;
    _Bool _softParticlesEnabled;
    _Bool _particleDiesOnCollision;
    _Bool _blackPassEnabled;
    double _particleAngle;
    double _particleAngleVariation;
    double _particleVelocity;
    double _particleVelocityVariation;
    double _particleAngularVelocity;
    double _particleAngularVelocityVariation;
    double _particleLifeSpan;
    double _particleLifeSpanVariation;
    double _particleBounce;
    double _particleBounceVariation;
    double _particleFriction;
    double _particleFrictionVariation;
    double _particleCharge;
    double _particleChargeVariation;
    id _particleImage;
    UIColor *_particleColor;
    struct SCNVector4 _particleColorVariation;
    SCNParticleSystem *_systemSpawnedOnCollision;
    SCNParticleSystem *_systemSpawnedOnDying;
    SCNParticleSystem *_systemSpawnedOnLiving;
    double _particleSize;
    double _particleSizeVariation;
    long long _seed;
    long long _blendMode;
    long long _renderingMode;
    long long _orientationMode;
    long long _imageSequenceAnimationMode;
    NSArray *_particleGeometries;
    NSArray *_colliderNodes;
    NSDictionary *_propertyControllers;
    long long _sortingMode;
    double _particleMass;
    double _particleMassVariation;
    double _dampingFactor;
    double _speedFactor;
    double _fixedTimeStep;
    double _stretchFactor;
    double _fresnelExponent;
    unsigned long long _imageSequenceColumnCount;
    unsigned long long _imageSequenceRowCount;
    double _imageSequenceInitialFrame;
    double _imageSequenceInitialFrameVariation;
    double _imageSequenceFrameRate;
    double _imageSequenceFrameRateVariation;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)particleSystemWithParticleSystemRef:(struct __C3DParticleSystem *)arg1;
+ (id)particleSystemNamed:(id)arg1 inDirectory:(id)arg2;
+ (id)particleSystem;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNParticleSystem:(id)arg1;
- (void)_customEncodingOfSCNParticleSystem:(id)arg1;
- (void)removeAllModifiers;
- (void)removeModifiersOfStage:(long long)arg1;
- (void)addModifierForProperties:(id)arg1 atStage:(long long)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)handleEvent:(long long)arg1 forProperties:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)reset;
@property(nonatomic) struct SCNVector3 acceleration;
@property(nonatomic) struct SCNVector3 emittingDirection;
@property(nonatomic) struct SCNVector4 particleColorVariation;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnLiving;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnDying;
@property(retain, nonatomic) SCNParticleSystem *systemSpawnedOnCollision;
@property(nonatomic) double warmupDuration;
@property(nonatomic) double stretchFactor;
@property(nonatomic) double spreadingAngle;
@property(nonatomic) double speedFactor;
@property(nonatomic) long long sortingMode;
- (void)setSoftParticlesEnabled:(_Bool)arg1;
- (_Bool)softParticlesEnabled;
- (void)setSeed:(long long)arg1;
- (long long)seed;
- (void)setRenderingMode:(long long)arg1;
- (long long)renderingMode;
- (void)setPhysicsCollisionsEnabled:(_Bool)arg1;
- (_Bool)physicsCollisionsEnabled;
@property(nonatomic) double particleVelocityVariation;
@property(nonatomic) double particleVelocity;
@property(nonatomic) double particleSizeVariation;
@property(nonatomic) double particleSize;
@property(nonatomic) double particleMassVariation;
@property(nonatomic) double particleMass;
@property(nonatomic) double particleLifeSpanVariation;
@property(nonatomic) double particleLifeSpan;
@property(nonatomic) double particleFrictionVariation;
@property(nonatomic) double particleFriction;
@property(nonatomic) _Bool particleDiesOnCollision;
@property(retain, nonatomic) UIColor *particleColor;
@property(nonatomic) double particleChargeVariation;
@property(nonatomic) double particleCharge;
@property(nonatomic) double particleBounceVariation;
@property(nonatomic) double particleBounce;
@property(nonatomic) double particleAngularVelocityVariation;
@property(nonatomic) double particleAngularVelocity;
@property(nonatomic) double particleAngleVariation;
@property(nonatomic) double particleAngle;
@property(nonatomic) long long orientationMode;
@property(nonatomic) _Bool loops;
@property(nonatomic, getter=isLightingEnabled) _Bool lightingEnabled;
- (_Bool)lightingEnabled;
- (void)setIsLocal:(_Bool)arg1;
@property(nonatomic, getter=isLocal) _Bool local;
@property(nonatomic) unsigned long long imageSequenceRowCount;
@property(nonatomic) double imageSequenceInitialFrameVariation;
@property(nonatomic) double imageSequenceInitialFrame;
@property(nonatomic) double imageSequenceFrameRateVariation;
@property(nonatomic) double imageSequenceFrameRate;
@property(nonatomic) unsigned long long imageSequenceColumnCount;
@property(nonatomic) long long imageSequenceAnimationMode;
@property(nonatomic) double idleDurationVariation;
@property(nonatomic) double idleDuration;
@property(nonatomic) double fresnelExponent;
- (void)setFixedTimeStep:(double)arg1;
- (double)fixedTimeStep;
@property(retain, nonatomic) SCNGeometry *emitterShape;
@property(nonatomic) double emissionDurationVariation;
@property(nonatomic) double emissionDuration;
@property(nonatomic) double dampingFactor;
@property(nonatomic) long long blendMode;
@property(nonatomic, getter=isBlackPassEnabled) _Bool blackPassEnabled;
- (_Bool)blackPassEnabled;
@property(nonatomic) double birthRateVariation;
@property(nonatomic) double birthRate;
@property(nonatomic) long long birthLocation;
@property(nonatomic) long long birthDirection;
@property(nonatomic) _Bool affectedByPhysicsFields;
@property(nonatomic) _Bool affectedByGravity;
- (_Bool)areSoftParticlesEnabled;
@property(retain, nonatomic) id particleImage;
@property(copy, nonatomic) NSDictionary *propertyControllers;
@property(copy, nonatomic) NSArray *colliderNodes;
- (void)setParticleGeometries:(id)arg1;
- (short)typeOfProperty:(id)arg1;
- (id)particleGeometries;
- (void)setConstraintRef:(struct __C3DParticleSystem *)arg1;
- (struct __C3DParticleSystem *)particleSystemRef;
- (_Bool)isPausedOrPausedByInheritance;
- (id)presentationInstance;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_syncObjCModel;
- (void)dealloc;
- (id)initPresentationSystemWithSystemRef:(struct __C3DParticleSystem *)arg1;
- (id)initWithParticleSystemRef:(struct __C3DParticleSystem *)arg1;
- (id)init;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (void)_syncEntityObjCModel;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)name;
- (void)setName:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNPhysicsBehavior : NSObject <NSSecureCoding>
{
    id _reserved;
}

+ (id)SCNJSExportProtocol;
+ (_Bool)supportsSecureCoding;
- (id)bodyB;
- (id)bodyA;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (void)dealloc;

@end

@interface SCNPhysicsBallSocketJoint : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *bodyA;
        SCNPhysicsBody *bodyB;
        struct SCNVector3 anchorA;
        struct SCNVector3 anchorB;
    } _definition;
    struct btPoint2PointConstraint *_constraint;
    SCNPhysicsWorld *_world;
}

+ (id)SCNJSExportProtocol;
+ (id)jointWithBody:(id)arg1 anchor:(struct SCNVector3)arg2;
+ (id)jointWithBodyA:(id)arg1 anchorA:(struct SCNVector3)arg2 bodyB:(id)arg3 anchorB:(struct SCNVector3)arg4;
- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
- (id)initWithBody:(id)arg1 anchor:(struct SCNVector3)arg2;
- (id)initWithBodyA:(id)arg1 anchorA:(struct SCNVector3)arg2 bodyB:(id)arg3 anchorB:(struct SCNVector3)arg4;
- (void)dealloc;

@end

@interface SCNPhysicsBody : NSObject <NSCopying, NSSecureCoding>
{
    id _reserved;
    SCNNode *_node;
    double _mass;
    double _charge;
    double _friction;
    double _restitution;
    double _rollingFriction;
    SCNPhysicsShape *_physicsShape;
    long long _type;
    double _damping;
    struct SCNVector4 _angularVelocity;
    double _angularDamping;
    struct SCNVector3 _velocityFactor;
    struct SCNVector3 _angularVelocityFactor;
    struct SCNVector3 _velocity;
    unsigned long long _categoryBitMask;
    unsigned long long _collisionBitMask;
    _Bool _resting;
    _Bool _allowsResting;
    _Bool _isDefaultShape;
    struct btRigidBody *_body;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)kinematicBody;
+ (id)dynamicBody;
+ (id)staticBody;
+ (id)bodyWithType:(long long)arg1 shape:(id)arg2;
- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNPhysicsBody:(id)arg1;
- (id)_owner;
- (void)_setOwner:(id)arg1;
- (void)_removeOwner;
- (struct btRigidBody *)_createBody;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)moveToTransform:(struct SCNMatrix4)arg1;
- (void)rotateToAxisAngle:(struct SCNVector4)arg1;
- (void)moveToPosition:(struct SCNVector3)arg1;
- (void)resetTransform;
- (void)resetToTransform:(struct SCNMatrix4)arg1;
- (void)clearAllForces;
- (void)_activate;
- (void)applyTorque:(struct SCNVector4)arg1 impulse:(_Bool)arg2;
- (void)applyForce:(struct SCNVector3)arg1 atPosition:(struct SCNVector3)arg2 impulse:(_Bool)arg3;
- (void)applyForce:(struct SCNVector3)arg1 impulse:(_Bool)arg2;
@property(nonatomic) struct SCNVector3 angularVelocityFactor;
@property(nonatomic) struct SCNVector3 velocityFactor;
@property(nonatomic) struct SCNVector4 angularVelocity;
@property(nonatomic) struct SCNVector3 velocity;
@property(nonatomic) unsigned long long collisionBitMask;
@property(nonatomic) unsigned long long categoryBitMask;
@property(retain, nonatomic) SCNPhysicsShape *physicsShape;
@property(nonatomic) double angularDamping;
@property(nonatomic) double damping;
@property(nonatomic) double rollingFriction;
@property(nonatomic) double restitution;
@property(nonatomic) double friction;
@property(nonatomic) _Bool allowsResting;
@property(readonly, nonatomic) _Bool isResting;
@property(nonatomic) double charge;
@property(nonatomic) double mass;
@property(nonatomic) long long type;
- (void)dealloc;
- (struct btRigidBody *)_handle;
- (struct __C3DScene *)sceneRef;
- (id)initWithType:(long long)arg1 shape:(id)arg2;

@end

@interface SCNPhysicsCharacter : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *characterBody;
        struct SCNVector3 direction;
        double velocity;
        double jumpSpeed;
    } _definition;
    struct btCharacterControllerInterface *_characterController;
    struct btPairCachingGhostObject *_ghostObject;
    struct btOverlapFilterCallback *_filterCallback;
    struct btCapsuleShape *_capsuleShape;
    SCNPhysicsWorld *_world;
}

- (id).cxx_construct;
- (void)_handleCreateIfNeeded:(_Bool)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
- (void)_update;
@property(nonatomic) double jumpSpeed;
@property(nonatomic) double velocity;
- (void)jump;
- (_Bool)canJump;
- (void)setWalkingDirection:(struct SCNVector3)arg1;
- (void)dealloc;
- (id)initWithCharacter:(id)arg1;

@end

@interface SCNPhysicsContact : NSObject
{
    id _reserved;
    SCNNode *_nodeA;
    SCNNode *_nodeB;
    struct SCNVector3 _contactPoint;
    struct SCNVector3 _contactNormal;
    double _collisionImpulse;
    double _distance;
    long long _updateCount;
}

+ (id)SCNJSExportProtocol;
+ (id)_contactWithManifold:(const struct btPersistentManifold *)arg1 index:(long long)arg2;
- (id).cxx_construct;
- (_Bool)_shouldPostUpdate;
- (void)_prepareUpdate;
@property(readonly, nonatomic) double penetrationDistance;
@property(readonly, nonatomic) double collisionImpulse;
@property(readonly, nonatomic) struct SCNVector3 contactNormal;
@property(readonly, nonatomic) struct SCNVector3 contactPoint;
@property(readonly, nonatomic) SCNNode *nodeB;
@property(readonly, nonatomic) SCNNode *nodeA;
- (void)_setupWithManifold:(const struct btPersistentManifold *)arg1 index:(long long)arg2 point:(const struct btManifoldPoint *)arg3;
- (void)_fillNodeA:(id)arg1 nodeB:(id)arg2 contactPoint:(struct SCNVector3)arg3 collisionImpulse:(struct SCNVector3)arg4 distance:(double)arg5;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface SCNPhysicsField : NSObject <NSCopying, NSSecureCoding>
{
    void *_reserved;
    struct SCNVector3 _halfExtent;
    double _strength;
    double _falloffExponent;
    double _minimumDistance;
    _Bool _active;
    long long _scope;
    _Bool _usesEllipsoidalExtent;
    _Bool _exclusive;
    struct SCNVector3 _offset;
    struct SCNVector3 _direction;
    unsigned long long _categoryBitMask;
    SCNPhysicsWorld *_world;
    SCNNode *_node;
    // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}, name: _field
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)magneticField;
+ (id)electricField;
+ (id)springField;
+ (id)turbulenceFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (id)noiseFieldWithSmoothness:(double)arg1 animationSpeed:(double)arg2;
+ (id)linearGravityField;
+ (id)radialGravityField;
+ (id)vortexField;
+ (id)customFieldWithEvaluationBlock:(CDUnknownBlockType)arg1;
+ (id)dragField;
+ (id)field;
- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _handle
- (id)_owner;
- (void)_setWorld:(id)arg1;
- (void)_setOwner:(id)arg1;
- (void)_removeOwner;
@property(nonatomic) struct SCNVector3 direction;
@property(nonatomic) struct SCNVector3 offset;
@property(nonatomic, getter=isExclusive) _Bool exclusive;
@property(nonatomic) _Bool usesEllipsoidalExtent;
@property(nonatomic) struct SCNVector3 halfExtent;
@property(nonatomic) long long scope;
@property(nonatomic, getter=isActive) _Bool active;
@property(nonatomic) double minimumDistance;
@property(nonatomic) double falloffExponent;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) double strength;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupCommonProperties;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (void)dealloc;
- (id)init;
- (void)_commonInit;

@end

@interface SCNPhysicsCustomField : SCNPhysicsField
{
    CDUnknownBlockType _block;
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
@property CDUnknownBlockType block;
- (void)dealloc;

@end

@interface SCNPhysicsDragField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

__attribute__((visibility("hidden")))
@interface SCNPhysicsElectricField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsHingeJoint : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *bodyA;
        SCNPhysicsBody *bodyB;
        struct SCNVector3 anchorA;
        struct SCNVector3 anchorB;
        struct SCNVector3 axisA;
        struct SCNVector3 axisB;
    } _definition;
    struct btHingeConstraint *_constraint;
    SCNPhysicsWorld *_world;
}

+ (id)SCNJSExportProtocol;
+ (id)jointWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisB;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
- (id)initWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
- (id)initWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (void)dealloc;

@end

@interface SCNPhysicsLinearGravityField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (void)setDirection:(struct SCNVector3)arg1;
- (struct SCNVector3)gravity;

@end

@interface SCNPhysicsMagneticField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
- (void)setDirection:(struct SCNVector3)arg1;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsNoiseField : SCNPhysicsField
{
    double _smoothness;
    double _animationSpeed;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
@property(nonatomic) double animationSpeed;
@property(nonatomic) double smoothness;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (id)init;

@end

@interface SCNPhysicsRadialGravityField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsShape : NSObject <NSCopying, NSSecureCoding>
{
    id _reserved;
    id _referenceObject;
    NSDictionary *_options;
    NSArray *_transforms;
    void *_cachedObject;
    struct btCollisionShape *_collisionShape;
}

+ (_Bool)supportsSecureCoding;
+ (id)defaultShapeForGeometry:(id)arg1;
+ (id)SCNJSExportProtocol;
+ (id)shapeWithShapes:(id)arg1 transforms:(id)arg2;
+ (id)shapeWithNode:(id)arg1 options:(id)arg2;
+ (id)shapeWithGeometry:(id)arg1 options:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct btCollisionShape *)_handle;
- (void)_setTransforms:(id)arg1;
- (void)dealloc;
- (id)initWithCachedObject:(void *)arg1 options:(id)arg2;
- (id)initWithContent:(id)arg1 options:(id)arg2;

@end

@interface SCNPhysicsSliderJoint : SCNPhysicsBehavior
{
    struct {
        SCNPhysicsBody *bodyA;
        SCNPhysicsBody *bodyB;
        struct SCNVector3 axisA;
        struct SCNVector3 anchorA;
        struct SCNVector3 axisB;
        struct SCNVector3 anchorB;
        double minLinearLimit;
        double maxLinearLimit;
        double minAngularLimit;
        double maxAngularLimit;
        double motorTargetLinearVelocity;
        double motorMaximumForce;
        double motorTargetAngularVelocity;
        double motorMaximumTorque;
    } _definition;
    struct btSliderConstraint *_constraint;
    SCNPhysicsWorld *_world;
}

+ (id)SCNJSExportProtocol;
+ (id)jointWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
+ (id)jointWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
@property(nonatomic) double motorMaximumTorque;
@property(nonatomic) double motorTargetAngularVelocity;
@property(nonatomic) double motorMaximumForce;
@property(nonatomic) double motorTargetLinearVelocity;
@property(nonatomic) double maximumAngularLimit;
@property(nonatomic) double minimumAngularLimit;
@property(nonatomic) double maximumLinearLimit;
@property(nonatomic) double minimumLinearLimit;
@property(nonatomic) struct SCNVector3 anchorB;
@property(nonatomic) struct SCNVector3 anchorA;
@property(nonatomic) struct SCNVector3 axisB;
@property(nonatomic) struct SCNVector3 axisA;
@property(readonly, nonatomic) SCNPhysicsBody *bodyB;
@property(readonly, nonatomic) SCNPhysicsBody *bodyA;
- (id)initWithBody:(id)arg1 axis:(struct SCNVector3)arg2 anchor:(struct SCNVector3)arg3;
- (id)initWithBodyA:(id)arg1 axisA:(struct SCNVector3)arg2 anchorA:(struct SCNVector3)arg3 bodyB:(id)arg4 axisB:(struct SCNVector3)arg5 anchorB:(struct SCNVector3)arg6;
- (void)dealloc;

@end

@interface SCNPhysicsSpringField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsTurbulenceField : SCNPhysicsNoiseField
{
}

+ (id)SCNJSExportProtocol;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField

@end

@interface SCNPhysicsVehicle : SCNPhysicsBehavior
{
    SCNPhysicsBody *_chassisBody;
    NSArray *_wheels;
    SCNPhysicsWorld *_world;
    struct btRaycastVehicle *_vehicle;
    double _speedKmHour;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)vehicleWithChassisBody:(id)arg1 wheels:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNPhysicsVehicle:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)wheelAtIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) double speedInKilometersPerHour;
- (void)_update;
- (void)_handleCreateIfNeeded:(_Bool)arg1;
- (void)_createWheel:(id)arg1;
- (void)applyBrakingForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)applyEngineForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)setSteeringAngle:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)_addToPhysicsWorld:(id)arg1;
- (id)physicsWorld;
- (struct btRaycastVehicle *)btVehicle;
@property(readonly, nonatomic) NSArray *wheels;
@property(readonly, nonatomic) SCNPhysicsBody *chassisBody;
- (void)dealloc;
- (id)initWithChassisBody:(id)arg1 wheels:(id)arg2;
- (void)_initializeWheelsArray;

@end

@interface SCNPhysicsVehicleWheel : NSObject <NSCopying, NSSecureCoding>
{
    id _reserved;
    SCNNode *_node;
    SCNPhysicsVehicle *_vehicle;
    int _wheelIndex;
    double _suspensionStiffness;
    double _suspensionCompression;
    double _suspensionDamping;
    double _maximumSuspensionTravel;
    double _frictionSlip;
    double _maximumSuspensionForce;
    struct SCNVector3 _connectionPosition;
    struct SCNVector3 _steeringAxis;
    struct SCNVector3 _axle;
    double _radius;
    double _suspensionRestLength;
    _Bool _isFront;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)wheelWithNode:(id)arg1;
- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setIsFront:(_Bool)arg1;
- (_Bool)isFront;
@property double suspensionRestLength;
@property double radius;
@property struct SCNVector3 axle;
@property struct SCNVector3 steeringAxis;
@property struct SCNVector3 connectionPosition;
@property double maximumSuspensionForce;
@property double frictionSlip;
@property double maximumSuspensionTravel;
@property double suspensionDamping;
@property double suspensionCompression;
@property double suspensionStiffness;
@property(readonly) SCNNode *node;
- (void)_setWheelIndex:(int)arg1;
- (void)_setVehicle:(id)arg1;
- (void)setNode:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SCNPhysicsVortexField : SCNPhysicsField
{
}

+ (id)SCNJSExportProtocol;
- (void)setDirection:(struct SCNVector3)arg1;
- (struct SCNVector3)axis;
-     // Error parsing type: ^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8, name: _createField
- (id)init;

@end

@interface SCNPhysicsWorld : NSObject <NSSecureCoding>
{
    id _reserved;
    struct btDiscreteDynamicsWorld *_world;
    struct btOverlappingPairCallback *_ghostPairCallback;
    struct btVehicleRaycaster *_vehicleRayCaster;
    struct btC3DDebugDraw *_debugDrawer;
    struct c3dAether _aether;
    _Bool _hasActiveFields;
    id <SCNPhysicsContactDelegate> _contactDelegate;
    SCNPhysicsContact *_contact;
    SCNScene *_scene;
    struct SCNVector3 _gravity;
    double _speed;
    double _scale;
    double _timeStep;
    NSMutableArray *_fields;
    double _elapsedTime;
    NSMutableArray *_behaviors;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNPhysicsWorld:(id)arg1;
- (void)_customDecodingOfSCNPhysicsWorld:(id)arg1;
- (void)_customEncodingOfSCNPhysicsWorld:(id)arg1;
- (void)_drawDebugInAuthoringEnvironment:(void *)arg1;
- (void)_postCommandWithBlock:(CDUnknownBlockType)arg1;
- (struct btDynamicsWorld *)handle;
- (void)setScene:(id)arg1;
- (id)scene;
- (void)_allowGhostObjects;
- (struct btDynamicsWorld *)_handle;
- (struct btVehicleRaycaster *)_defaultVehicleRayCaster;
- (void)_step:(double)arg1;
- (struct c3dAether *)_aetherHandle;
- (void)_removeFieldFromWorld:(id)arg1;
- (void)_addFieldToWorld:(id)arg1;
- (_Bool)_needsRedraw;
- (void)updateCollisionPairs;
- (id)convexSweepTestWithShape:(id)arg1 fromTransform:(struct SCNMatrix4)arg2 toTransform:(struct SCNMatrix4)arg3 options:(id)arg4;
- (id)contactTestWithBody:(id)arg1 options:(id)arg2;
- (id)contactTestBetweenBody:(id)arg1 andBody:(id)arg2 options:(id)arg3;
- (id)_rayTestWithSegmentFromPoint:(struct btVector3)arg1 toPoint:(struct btVector3)arg2 options:(id)arg3;
- (id)rayTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
- (id)allBehaviors;
- (void)removeAllBehaviors;
- (void)removeBehavior:(id)arg1;
- (void)addBehavior:(id)arg1;
@property id <SCNPhysicsContactDelegate> contactDelegate;
@property(nonatomic) double timeStep;
- (double)scale;
- (void)setScale:(double)arg1;
@property(nonatomic) double speed;
@property(nonatomic) struct SCNVector3 gravity;
- (void)sceneWillDie;
- (void)dealloc;
- (id)initWithScene:(id)arg1;
- (id)_physicsContact;
- (void)_createDynamicWorld;
- (void)_preTick:(double)arg1;

@end

@interface SCNPlane : SCNGeometry
{
    id _reserved;
    double _width;
    double _height;
    double _cornerRadius;
    long long _widthSegmentCount;
    long long _heightSegmentCount;
    long long _cornerSegmentCount;
    long long _primitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)planeWithWidth:(double)arg1 height:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double width;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
@property(nonatomic) long long cornerSegmentCount;
@property(nonatomic) double cornerRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationPlane;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNProgram : NSObject <NSCopying, NSSecureCoding>
{
    id _reserved;
    NSString *_vertexShader;
    NSString *_fragmentShader;
    NSString *_name;
    id _delegate;
    NSMutableDictionary *_semanticInfos;
    _Bool _opaque;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)program;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNProgram:(id)arg1;
- (void)_customEncodingOfSCNProgram:(id)arg1;
@property(nonatomic) id <SCNProgramDelegate> delegate;
- (void)setSemantic:(id)arg1 forSymbol:(id)arg2;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setSemanticInfos:(id)arg1;
- (id)_allSymbolsWithSceneKitSemantic;
- (id)_optionsForSymbol:(id)arg1;
- (id)semanticForSymbol:(id)arg1;
- (void)setSemantic:(id)arg1 forSymbol:(id)arg2 options:(id)arg3;
@property(copy, nonatomic) NSString *fragmentShader;
@property(copy, nonatomic) NSString *vertexShader;
@property(nonatomic, getter=isOpaque) _Bool opaque;
- (id)name;
- (void)setName:(id)arg1;
- (id)init;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNProgramSemanticInfo : NSObject <NSSecureCoding>
{
    NSString *_semantic;
    NSDictionary *_options;
}

+ (_Bool)supportsSecureCoding;
+ (id)infoWithSemantic:(id)arg1 options:(id)arg2;
@property(retain, nonatomic) NSDictionary *options; // @synthesize options=_options;
@property(copy, nonatomic) NSString *semantic; // @synthesize semantic=_semantic;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface SCNPyramid : SCNGeometry
{
    id _reserved;
    double _pyramidwidth;
    double _pyramidheight;
    double _pyramidlength;
    long long _pyramidwidthSegmentCount;
    long long _pyramidheightSegmentCount;
    long long _pyramidlengthSegmentCount;
    long long _pyramidprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)pyramidWithWidth:(double)arg1 height:(double)arg2 length:(double)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long widthSegmentCount;
@property(nonatomic) double width;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long lengthSegmentCount;
@property(nonatomic) double length;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationPyramid;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNScene : NSObject <NSSecureCoding>
{
    id _reserved;
    struct __C3DScene *_scene;
    struct __C3DLibrary *_library;
    SCNSceneSource *_sceneSource;
    double _lastEvalTime;
    SCNPhysicsWorld *_physicsWorld;
    SCNNode *_rootNode;
    SCNMaterialProperty *_background;
    NSMutableDictionary *_userAttributes;
    double _fogStartDistance;
    double _fogEndDistance;
    double _fogDensityExponent;
    id _fogColor;
    _Bool _paused;
    SCNAuthoringEnvironment *_authoringEnvironment;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (SEL)jsConstructor;
+ (id)sceneWithSceneRef:(struct __C3DScene *)arg1;
+ (id)sceneWithData:(id)arg1 options:(id)arg2;
+ (id)sceneWithData:(id)arg1 atIndex:(long long)arg2 options:(id)arg3;
+ (id)sceneWithURL:(id)arg1 atIndex:(long long)arg2 options:(id)arg3;
+ (id)sceneWithURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)sceneWithURL:(id)arg1 options:(id)arg2;
+ (id)sceneNamed:(id)arg1 options:(id)arg2;
+ (id)sceneNamed:(id)arg1 inDirectory:(id)arg2 options:(id)arg3;
+ (id)sceneNamed:(id)arg1;
+ (id)scene;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNScene:(id)arg1;
- (void)_customEncodingOfSCNScene:(id)arg1;
- (id)initForJavascript:(id)arg1;
- (_Bool)isPausedOrPausedByInheritance;
@property(nonatomic, getter=isPaused) _Bool paused;
- (id)particleSystems;
- (void)removeAllParticleSystems;
- (void)removeParticleSystem:(id)arg1;
- (void)addParticleSystem:(id)arg1 withTransform:(struct SCNMatrix4)arg2;
- (void)addSceneAnimation:(id)arg1 forKey:(id)arg2 target:(id)arg3;
- (void *)__CFObject;
- (id)valueForUndefinedKey:(id)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1 property:(id)arg2;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (void)unlock;
- (void)lock;
- (_Bool)writeToURL:(id)arg1 options:(id)arg2 delegate:(id)arg3 progressHandler:(CDUnknownBlockType)arg4;
@property(nonatomic) double fogStartDistance;
@property(nonatomic) double fogDensityExponent;
@property(nonatomic) double fogEndDistance;
@property(retain, nonatomic) id fogColor;
@property(readonly, nonatomic) SCNMaterialProperty *background;
- (id)attributeForKey:(id)arg1;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (void)setPlaybackSpeed:(float)arg1;
- (float)playbackSpeed;
- (void)setFrameRate:(double)arg1;
- (double)frameRate;
- (void)setEndTime:(double)arg1;
- (double)endTime;
- (void)setStartTime:(double)arg1;
- (double)startTime;
- (id)_physicsWorldCreateIfNeeded:(_Bool)arg1;
@property(readonly, nonatomic) SCNPhysicsWorld *physicsWorld;
- (void)_scaleSceneBy:(double)arg1;
- (void)setRootNode:(id)arg1;
- (void)_setRootNode:(id)arg1;
@property(readonly, nonatomic) SCNNode *rootNode;
- (id)root;
- (void)setLibrary:(struct __C3DLibrary *)arg1;
- (struct __C3DLibrary *)library;
- (id)sceneSource;
- (void)setSceneSource:(id)arg1;
- (struct __C3DScene *)sceneRef;
- (id)_scenes;
- (id)scene;
- (void)setLastEvalTime:(double)arg1;
- (double)lastEvalTime;
- (void)dealloc;
- (void)setUpAxis:(struct SCNVector3)arg1;
- (struct SCNVector3)upAxis;
- (void)_syncObjCModel;
- (id)initWithSceneRef:(struct __C3DScene *)arg1;
- (id)init;
- (_Bool)writeToURL:(id)arg1 options:(id)arg2;

@end

@interface SCNSceneSource : NSObject
{
    id _reserved;
    struct __C3DSceneSource *_sceneSource;
    struct __C3DScene *_lastLoadedScene;
    NSDictionary *_lastOptions;
    NSOperationQueue *_downloadingQueue;
    _Bool _sceneLoaded;
    NSDictionary *_sceneSourceOptions;
}

+ (id)sceneFileTypes;
+ (id)sceneTypes;
+ (id)SCNJSExportProtocol;
+ (id)sceneSourceWithData:(id)arg1 options:(id)arg2;
+ (id)sceneSourceWithURL:(id)arg1 options:(id)arg2;
+ (void)_removeCachedSceneSourceIfNeededForURL:(id)arg1;
+ (void)_cacheSceneSource:(id)arg1 forURL:(id)arg2 options:(id)arg3;
+ (id)_cachedSceneSourceForURL:(id)arg1 options:(id)arg2;
+ (_Bool)_shouldCacheWithOptions:(id)arg1;
- (id)performConsistencyCheck;
- (_Bool)canExportToColladaWithNoDataLoss;
- (long long)sourceStatus;
- (id)IDsOfEntriesWithClass:(Class)arg1;
- (id)entryWithID:(id)arg1 withClass:(Class)arg2;
- (id)entriesPassingTest:(CDUnknownBlockType)arg1;
- (_Bool)_appendToEntries:(id)arg1 entriesWithType:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3 entryObjectConstructor:(CDUnknownBlockType)arg4;
- (id)identifiersOfEntriesWithClass:(Class)arg1;
- (id)entryWithIdentifier:(id)arg1 withClass:(Class)arg2;
- (struct __C3DLibrary *)library;
- (struct __C3DSceneSource *)sceneSourceRef;
- (id)propertyForKey:(id)arg1;
- (id)copyPropertiesAtIndex:(long long)arg1 options:(id)arg2;
- (id)sceneWithOptions:(id)arg1 error:(id *)arg2;
- (id)sceneWithClass:(Class)arg1 options:(id)arg2 error:(id *)arg3;
- (id)sceneWithOptions:(id)arg1 statusHandler:(CDUnknownBlockType)arg2;
- (id)sceneWithClass:(Class)arg1 options:(id)arg2 statusHandler:(CDUnknownBlockType)arg3;
- (id)_sceneWithClass:(Class)arg1 options:(id)arg2 statusHandler:(CDUnknownBlockType)arg3;
- (struct __C3DScene *)_createSceneRefWithOptions:(id)arg1 statusHandler:(CDUnknownBlockType)arg2;
- (id)sceneAtIndex:(unsigned long long)arg1 options:(id)arg2 error:(id *)arg3;
- (id)sceneAtIndex:(unsigned long long)arg1 options:(id)arg2;
- (id)description;
- (long long)sceneCount;
- (long long)countOfScenes;
@property(readonly) NSData *data;
@property(readonly) NSURL *url;
- (void)dealloc;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)sceneSourceOptions;
- (id)initWithData:(id)arg1 options:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SCNShadableHelper : NSObject <NSSecureCoding>
{
    NSDictionary *_uniformNameToType;
    id _owner;
    SCNProgram *_program;
    NSDictionary *_shaderModifiers;
    NSDictionary *_symbolToBinder;
    NSDictionary *_symbolToUnbinder;
}

+ (_Bool)supportsSecureCoding;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_didDecodeSCNShadableHelper:(id)arg1;
- (void)_customDecodingOfSCNShadableHelper:(id)arg1;
- (void)_customEncodingOfSCNShadableHelper:(id)arg1;
- (void *)__CFObject;
- (void)_setC3DProgramAndStartObservingUniforms;
- (void)_setC3DProgramDelegate;
- (void)_updateAllC3DProgramInputs;
- (void)_updateC3DProgramInputForSymbol:(id)arg1;
- (void)_updateC3DProgramInput:(struct __C3DFXGLSLProgram *)arg1 forSymbol:(id)arg2;
- (struct __C3DFXGLSLProgram *)_programFromPassAtIndex:(long long)arg1;
- (struct __C3DFXGLSLProfile *)_GLSLProfile;
- (void)_programDidChange:(id)arg1;
- (void)_kvoUpdateUniformNamed:(id)arg1 ofType:(short)arg2 immediate:(_Bool)arg3;
- (void)_setUniform:(id)arg1 withC3DValue:(struct __C3DValue *)arg2;
- (void)_stopObservingUniforms;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)handleUnbindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_startObservingUniformsOfC3DShaderModifiers:(id)arg1;
@property(readonly, nonatomic) NSArray *shaderModifiersUniformNames;
@property(copy, nonatomic) NSDictionary *shaderModifiers;
- (void)_startObservingProgramUniforms:(id)arg1;
- (void)_unbindValueForSymbol:(id)arg1 atLocation:(unsigned int)arg2 programID:(unsigned int)arg3 node:(id)arg4 renderer:(id)arg5;
- (_Bool)_bindValueForSymbol:(id)arg1 atLocation:(unsigned int)arg2 programID:(unsigned int)arg3 node:(id)arg4 renderer:(id)arg5;
- (_Bool)isOpaque;
@property(retain, nonatomic) SCNProgram *program;
- (void)_stopObservingProgram;
- (void)_startObservingProgram;
@property(readonly, nonatomic) id owner;
- (void)finalize;
- (void)dealloc;
- (void)commonDestroy;
- (void)ownerWillDie;
- (id)initWithOwner:(id)arg1;

@end

@interface SCNShape : SCNGeometry
{
    id _reserved;
    float _chamferRadius;
    float _extrusionDepth;
    float _discretizedStraightLineMaxLength;
    struct UIBezierPath *_chamferProfile;
    long long _primitiveType;
    long long _chamferMode;
    struct UIBezierPath *_path;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)shapeWithPath:(id)arg1 extrusionDepth:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct __C3DGeometry *)__createCFObject;
- (void)_customEncodingOfSCNShape:(id)arg1;
- (void)_customDecodingOfSCNShape:(id)arg1;
- (void)dealloc;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (CDStruct_d3ce6806)params;
@property(copy, nonatomic) UIBezierPath *chamferProfile;
@property(copy, nonatomic) UIBezierPath *path;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) double extrusionDepth;
- (void)setDiscretizedStraightLineMaxLength:(double)arg1;
- (double)discretizedStraightLineMaxLength;
@property(nonatomic) double chamferRadius;
@property(nonatomic) long long chamferMode;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)initPresentationShapeGeometryWithShapeGeometryRef:(struct __C3DShapeGeometry *)arg1;
- (id)initWithShapeGeometryRef:(struct __C3DShapeGeometry *)arg1;
- (id)init;
- (void)_syncObjCModel:(struct __C3DShapeGeometry *)arg1;

@end

@interface SCNSkinner : NSObject <NSSecureCoding>
{
    id _reserved;
    struct __C3DSkinner *_skinner;
}

+ (_Bool)supportsSecureCoding;
+ (id)skinnerWithBaseGeometry:(id)arg1 bones:(id)arg2 boneInverseBindTransforms:(id)arg3 boneWeights:(id)arg4 boneIndices:(id)arg5;
+ (struct __C3DSkinner *)createSkinnerWithBaseGeometry:(id)arg1 bones:(id)arg2 boneWeights:(id)arg3 boneIndices:(id)arg4;
+ (id)skinnerWithSkinnerRef:(struct __C3DSkinner *)arg1;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void *)__CFObject;
- (id)joints;
- (void)setBones:(id)arg1;
@property(readonly, nonatomic) NSArray *bones;
- (void)setBoneInverseBindTransforms:(id)arg1;
@property(readonly, nonatomic) NSArray *boneInverseBindTransforms;
@property(readonly, nonatomic) SCNGeometrySource *boneIndices;
@property(readonly, nonatomic) SCNGeometrySource *boneWeights;
@property(nonatomic) struct SCNMatrix4 baseGeometryBindTransform;
@property(retain, nonatomic) SCNGeometry *baseGeometry;
@property(retain, nonatomic) SCNNode *skeleton;
- (struct __C3DSkinner *)skinnerRef;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithSkinnerRef:(struct __C3DSkinner *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SCNSourceRendererRegistry : NSObject
{
    struct __CFDictionary *_registry;
}

+ (id)sharedRegistry;
- (void)removeSourceRenderersForSource:(id)arg1;
- (void)removeSourceRenderersForCGLContextObj:(void *)arg1;
- (id)sourceRendererForCGLContextObj:(void *)arg1 source:(id)arg2;
- (void)rendererDidChange:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface SCNSphere : SCNGeometry
{
    id _reserved;
    double _sphereradius;
    double _sphereradialSpan;
    long long _spheresegmentCount;
    long long _sphereprimitiveType;
    _Bool _spheregeodesic;
    _Bool _spherehemispheric;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)sphereWithRadius:(double)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long segmentCount;
@property(nonatomic) double radius;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
- (void)setHemispheric:(_Bool)arg1;
- (_Bool)isHemispheric;
@property(nonatomic, getter=isGeodesic) _Bool geodesic;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationSphere;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNSpriteKitEventHandler : NSObject
{
    SKScene *_scene;
    NSMutableDictionary *_touchMap;
}

@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SCNSpriteKitSource : SCNImageSource
{
    SKScene *_scene;
}

@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (void)dealloc;
- (_Bool)isOpaque;
- (id)textureSourceForContext:(void *)arg1;

@end

@interface SCNTechnique : NSObject <SCNAnimatable, NSCopying, NSSecureCoding>
{
    id _reserved;
    unsigned int _isPresentationInstance:1;
    struct __C3DFXTechnique *_technique;
    NSMutableDictionary *_valueForSymbol;
    SCNOrderedDictionary *_animations;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)techniqueWithTechniqueRef:(struct __C3DFXTechnique *)arg1;
+ (id)techniqueBySequencingTechniques:(id)arg1;
+ (id)techniqueWithDictionary:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customDecodingOfSCNTechnique:(id)arg1;
- (void)_customEncodingOfSCNTechnique:(id)arg1;
- (id)presentationInstance;
- (_Bool)isPausedOrPausedByInheritance;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (_Bool)isAnimationForKeyPaused:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (void)_syncObjCAnimations;
- (id)animationKeys;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (struct __C3DAnimationManager *)animationManager;
- (void *)__CFObject;
- (id)scene;
- (struct __C3DScene *)sceneRef;
- (id)valueForSymbolNamed:(id)arg1;
- (void)setValue:(id)arg1 forSymbolNamed:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (struct __C3DFXTechnique *)techniqueRef;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly) NSDictionary *dictionaryRepresentation;
- (void)handleBindingOfSymbol:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)_symbolsAssignedValues;
- (void)dealloc;
- (id)initWithTechniqueRef:(struct __C3DFXTechnique *)arg1;
- (id)initPresentationTechniqueWithTechniqueRef:(struct __C3DFXTechnique *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SCNText : SCNGeometry
{
    id _reserved;
    float _flatness;
    float _chamferRadius;
    float _extrusionDepth;
    float _discretizedStraightLineMaxLength;
    struct UIBezierPath *_chamferProfile;
    long long _primitiveType;
    id _string;
    UIFont *_font;
    _Bool _wrapped;
    int _alignmentMode;
    int _truncationMode;
    _Bool _useCustomContainerFrame;
    struct CGRect _customContainerFrame;
    _Bool __wantsSeparateGeometryElements;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)textWithString:(id)arg1 extrusionDepth:(double)arg2;
+ (id)text;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_customEncodingOfSCNText:(id)arg1;
- (void)_customDecodingOfSCNText:(id)arg1;
- (void)dealloc;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (CDStruct_8bd95810)params;
@property(copy, nonatomic) UIBezierPath *chamferProfile;
@property(copy, nonatomic) NSString *alignmentMode;
@property(copy, nonatomic) NSString *truncationMode;
@property(nonatomic) struct CGRect containerFrame;
@property(retain, nonatomic) UIFont *font;
@property(nonatomic, getter=isWrapped) _Bool wrapped;
@property(copy, nonatomic) id string;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) double flatness;
@property(nonatomic) double extrusionDepth;
- (void)setDiscretizedStraightLineMaxLength:(double)arg1;
- (double)discretizedStraightLineMaxLength;
@property(nonatomic) double chamferRadius;
- (void)set_wantsSeparateGeometryElements:(_Bool)arg1;
- (_Bool)_wantsSeparateGeometryElements;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (struct __C3DGeometry *)__createCFObject;
- (id)initPresentationTextGeometryWithTextGeometryRef:(struct __C3DTextGeometry *)arg1;
- (id)initWithTextGeometryRef:(struct __C3DTextGeometry *)arg1;
- (id)init;
- (void)_syncObjCModel:(struct __C3DTextGeometry *)arg1;

@end

@interface SCNTextureSource : NSObject
{
}

- (double)nextFrameTime;
-     // Error parsing type: v24@0:8^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}16, name: cleanup:
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureOffscreenRenderingSource : SCNTextureSource
{
    struct CGSize _fboSize;
    struct __C3DFramebuffer *_fbo;
}

-     // Error parsing type: ^{__C3DTexture=}52@0:8{CGSize=dd}16^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}32^{__C3DTextureSampler={__CFRuntimeBase=Q[4C]I}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}40B48, name: __makeFBOReadyForSize:withRendererContext:textureSampler:needsStencil:
-     // Error parsing type: v24@0:8^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}16, name: cleanup:

@end

__attribute__((visibility("hidden")))
@interface SCNTextureDelegateSource : SCNTextureOffscreenRenderingSource
{
    id _delegate;
    double _lastUpdate;
    double _nextUpdateDate;
}

@property(retain, nonatomic) id delegate; // @synthesize delegate=_delegate;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
-     // Error parsing type: v24@0:8^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}16, name: cleanup:
- (void)__updateTextureWithDelegate:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2;
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureLayerSource : SCNTextureOffscreenRenderingSource
{
    CALayer *_layer;
    double _lastUpdate;
    double _lastRenderedTime;
    double _nextUpdateDate;
}

@property(retain, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
-     // Error parsing type: v24@0:8^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}16, name: cleanup:
- (double)__updateTextureWithLayer:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2 sampler:(struct __C3DTextureSampler *)arg3;
-     // Error parsing type: d72@0:8@16@24^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}32^v4048d64, name: __renderLayer:withCARenderer:c3dRenderer:cglContext:viewport:atTime:
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface SCNTextureSpriteKitSource : SCNTextureOffscreenRenderingSource
{
    SKScene *_scene;
    double _lastUpdate;
}

@property(retain, nonatomic) SKScene *scene; // @synthesize scene=_scene;
- (struct __C3DTexture *)textureWithEngineContext:(struct __C3DEngineContext *)arg1 textureSampler:(struct __C3DTextureSampler *)arg2 nextFrameTime:(double *)arg3;
-     // Error parsing type: v24@0:8^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}16, name: cleanup:
- (double)__updateTextureWithSKScene:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2 sampler:(struct __C3DTextureSampler *)arg3;
-     // Error parsing type: v72@0:8@16@24^{__C3DRendererContext={__CFRuntimeBase=Q[4C]I}iI(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})(C3DVector2=[2f]{?=ff}{?=ff}{?=ff})IIIfI[3(C3DMatrix4x4=[16f][4])]^{__C3DTexture}^{__C3DStack}^vBBBBBI^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DRendererContextStats=IIIIIIIIIIIIIIIIIIIIIIIIddddddddddddddIIIIIIIIIIIIIIddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][7{?=iII}][7I]^?^?^?^?^?^?^?^?^?}^{__C3DArray}II^{__CFArray}^{__C3DArray}I}32^v4048d64, name: __renderSKScene:withSKSCNRenderer:c3dRenderer:cglContext:viewport:atTime:
- (void)renderWithEngineContext:(struct __C3DEngineContext *)arg1 nextFrameTime:(double *)arg2;
- (void)dealloc;

@end

@interface SCNTorus : SCNGeometry
{
    id _reserved;
    double _torusringRadius;
    double _toruspipeRadius;
    double _torusradialSpan;
    long long _torusringSegmentCount;
    long long _toruspipeSegmentCount;
    long long _torusprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)torusWithRingRadius:(double)arg1 pipeRadius:(double)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
@property(nonatomic) long long ringSegmentCount;
@property(nonatomic) double ringRadius;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) long long pipeSegmentCount;
@property(nonatomic) double pipeRadius;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationTorus;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNTransaction : NSObject
{
}

+ (id)SCNJSExportProtocol;
+ (unsigned int)currentState;
+ (void)postCommandWithContext:(void *)arg1 object:(id)arg2 keyPath:(id)arg3 applyBlock:(CDUnknownBlockType)arg4;
+ (void)postCommandWithContext:(void *)arg1 object:(id)arg2 applyBlock:(CDUnknownBlockType)arg3;
+ (_Bool)immediateMode;
+ (void)setImmediateMode:(_Bool)arg1;
+ (void)setValue:(id)arg1 forKey:(id)arg2;
+ (id)valueForKey:(id)arg1;
+ (void)setCompletionBlock:(CDUnknownBlockType)arg1;
+ (CDUnknownBlockType)completionBlock;
+ (void)setDisableActions:(_Bool)arg1;
+ (_Bool)disableActions;
+ (void)setAnimationTimingFunction:(id)arg1;
+ (id)animationTimingFunction;
+ (void)setAnimationDuration:(double)arg1;
+ (double)animationDuration;
+ (void)unlock;
+ (void)lock;
+ (void)flush;
+ (void)commit;
+ (void)begin;
- (id)animationTimingFunction;
- (void)setAnimationTimingFunction:(id)arg1;
- (_Bool)disableActions;
- (void)setDisableActions:(_Bool)arg1;
- (double)animationDuration;
- (void)setAnimationDuration:(double)arg1;
- (void)unlock;
- (void)lock;
- (void)flush;
- (void)commit;
- (void)begin;

@end

@interface SCNTransformConstraint : SCNConstraint
{
    id _reserved;
}

+ (id)SCNJSExportProtocol;
+ (id)transformConstraintInWorldSpace:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initInWorld:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;

@end

@interface SCNTube : SCNGeometry
{
    id _reserved;
    double _tubeinnerRadius;
    double _tubeouterRadius;
    double _tubeheight;
    double _tuberadialSpan;
    long long _tubeheightSegmentCount;
    long long _tuberadialSegmentCount;
    long long _tubeprimitiveType;
}

+ (_Bool)supportsSecureCoding;
+ (id)SCNJSExportProtocol;
+ (id)tubeWithInnerRadius:(double)arg1 outerRadius:(double)arg2 height:(double)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setupObjCModelFrom:(id)arg1;
- (id)description;
- (_Bool)getBoundingSphereCenter:(struct SCNVector3 *)arg1 radius:(double *)arg2;
- (_Bool)getBoundingBoxMin:(struct SCNVector3 *)arg1 max:(struct SCNVector3 *)arg2;
- (void)setRadialSpan:(double)arg1;
- (double)radialSpan;
@property(nonatomic) long long radialSegmentCount;
- (void)setPrimitiveType:(long long)arg1;
- (long long)primitiveType;
@property(nonatomic) double outerRadius;
@property(nonatomic) double innerRadius;
@property(nonatomic) long long heightSegmentCount;
@property(nonatomic) double height;
- (void)_syncObjCModel:(struct __C3DParametricGeometry *)arg1;
- (struct __C3DAnimationChannel *)copyAnimationChannelForKeyPath:(id)arg1;
- (id)presentationGeometry;
- (id)presentationTube;
- (id)initPresentationParametricGeometryWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (void)dealloc;
- (struct __C3DGeometry *)__createCFObject;
- (id)initWithParametricGeometryRef:(struct __C3DParametricGeometry *)arg1;
- (id)init;

@end

@interface SCNView : UIView <SCNSceneRenderer, SCNTechniqueSupport>
{
    double _currentSystemTime;
    NSString *__ibSceneName;
    unsigned int _ibNoMultisampling:1;
    unsigned int _allowsBrowsing:1;
    unsigned int _isOpaque:1;
    unsigned int _firstDrawDone:1;
    unsigned int _appIsDeactivated:1;
    unsigned int _viewIsOffscreen:1;
    id _delegate;
    SCNRenderer *_renderer;
    SCNScene *_scene;
    SCNDisplayLink *__displayLink;
    SCNJitterer *_jitterer;
    NSRecursiveLock *_lock;
    UIColor *_backgroundColor;
    char *_snapshotImageData;
    unsigned long long _snapshotImageDataLength;
    SCNEventHandler *_eventHandler;
    SCNSpriteKitEventHandler *_spriteKitEventHandler;
    NSArray *_controllerGestureRecognizers;
}

+ (Class)layerClass;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (id)_kvoKeysForwardedToRenderer;
+ (id)SCNJSExportProtocol;
- (void)_enterBackground:(id)arg1;
- (void)_flushDisplayLink;
- (void)_enterForeground:(id)arg1;
- (void)willMoveToWindow:(id)arg1;
- (void)didMoveToWindow;
- (void)resumeDisplayLink;
- (void)pauseDisplayLink;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)_setGestureRecognizers:(id)arg1;
- (void)_updateGestureRecognizers;
- (void)drawRect:(struct CGRect)arg1;
- (void)displayLayer:(id)arg1;
- (void)setContentScaleFactor:(double)arg1;
@property(retain, nonatomic) EAGLContext *eaglContext;
- (void)set_ibWantsMultisampling:(_Bool)arg1;
- (_Bool)_ibWantsMultisampling;
- (void)set_ibSceneName:(id)arg1;
- (id)_ibSceneName;
@property(nonatomic) unsigned long long antialiasingMode;
- (id)_authoringEnvironment;
- (void)set_showsAuthoringEnvironment:(_Bool)arg1;
- (_Bool)_showsAuthoringEnvironment;
- (void)switchToNextCamera;
- (void)switchToCameraNamed:(id)arg1;
@property(readonly, copy) NSString *description;
- (void *)__CFObject;
- (void)unlock;
- (void)lock;
- (struct UIImage *)snapshot;
@property(nonatomic) _Bool showsStatistics;
- (void)_sceneDidUpdate:(id)arg1;
- (void)_systemTimeAnimationStarted:(id)arg1;
- (void)_setNeedsDisplay;
@property(nonatomic) long long preferredFramesPerSecond;
- (id)_displayLink;
- (void)_checkAndUpdateDisplayLinkStateIfNeeded;
@property(retain, nonatomic) SKScene *overlaySKScene;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (_Bool)prepareObject:(id)arg1 shouldAbortBlock:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) void *context;
@property(nonatomic) _Bool autoenablesDefaultLighting;
@property(nonatomic) double sceneTime;
- (_Bool)isOpaque;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)arg1;
- (void)eventHandlerWantsRedraw;
- (void)setEventHandler:(id)arg1;
- (id)eventHandler;
@property(nonatomic) id <SCNSceneRendererDelegate> delegate;
- (struct SCNVector3)unprojectPoint:(struct SCNVector3)arg1;
- (struct SCNVector3)projectPoint:(struct SCNVector3)arg1;
- (_Bool)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3)arg1 toPoint:(struct SCNVector3)arg2 options:(id)arg3;
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
- (double)_flipY:(double)arg1;
- (void)stop:(id)arg1;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
@property(getter=isPlaying) _Bool playing;
@property(nonatomic) _Bool loops;
@property(nonatomic) _Bool allowsCameraControl;
@property(copy, nonatomic) SCNTechnique *technique;
@property(retain, nonatomic) SCNNode *pointOfView;
- (void)setPointOfView:(id)arg1 animate:(_Bool)arg2;
- (void)_drawAtTime:(double)arg1;
- (_Bool)_canJitter;
- (_Bool)_supportsJiterringSyncRedraw;
- (void)_jitterRedisplay;
@property(nonatomic, getter=isJitteringEnabled) _Bool jitteringEnabled;
- (id)renderer;
@property(retain, nonatomic) SCNScene *scene;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 options:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SCN_CAKeyframeAnimation : CAKeyframeAnimation
{
    struct __C3DKeyframedAnimation *_c3dAnimation;
    _Bool _caReady;
}

- (_Bool)isCumulative;
- (void)setCumulative:(_Bool)arg1;
- (_Bool)isAdditive;
- (void)setAdditive:(_Bool)arg1;
- (id)timingFunction;
- (void)setTimingFunction:(id)arg1;
- (id)animationEvents;
- (void)setAnimationEvents:(id)arg1;
- (id)fillMode;
- (void)setFillMode:(id)arg1;
- (_Bool)usesSceneTimeBase;
- (void)setUsesSceneTimeBase:(_Bool)arg1;
- (_Bool)commitsOnCompletion;
- (void)setCommitsOnCompletion:(_Bool)arg1;
- (_Bool)isRemovedOnCompletion;
- (void)setRemovedOnCompletion:(_Bool)arg1;
- (double)fadeOutDuration;
- (void)setFadeOutDuration:(double)arg1;
- (double)fadeInDuration;
- (void)setFadeInDuration:(double)arg1;
- (float)speed;
- (void)setSpeed:(float)arg1;
- (double)timeOffset;
- (void)setTimeOffset:(double)arg1;
- (_Bool)autoreverses;
- (void)setAutoreverses:(_Bool)arg1;
- (double)repeatDuration;
- (void)setRepeatDuration:(double)arg1;
- (float)repeatCount;
- (void)setRepeatCount:(float)arg1;
- (double)duration;
- (void)setDuration:(double)arg1;
- (void)setC3dAnimation:(struct __C3DKeyframedAnimation *)arg1;
- (struct __C3DKeyframedAnimation *)c3dAnimation;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setBiasValues:(id)arg1;
- (id)biasValues;
- (void)setContinuityValues:(id)arg1;
- (id)continuityValues;
- (void)setTensionValues:(id)arg1;
- (id)tensionValues;
- (void)setTimingFunctions:(id)arg1;
- (id)timingFunctions;
- (void)setKeyTimes:(id)arg1;
- (id)keyTimes;
- (void)setValues:(id)arg1;
- (id)values;
- (void)_clearC3DCache;
- (void)_convertToCA;
- (void)dealloc;

@end

@interface UIColor (SCNAdditions)
+ (id)colorWithC3DColor4:(const struct C3DColor4 *)arg1;
- (_Bool)colorToC3DColor4:(struct C3DColor4 *)arg1;
@end

@interface UIColor (SCNColorAdditions)
- (_Bool)SCNColorGetRed:(float *)arg1 green:(float *)arg2 blue:(float *)arg3 alpha:(float *)arg4;
@end

@interface UIColor (SCNJSExtensions)
+ (id)color:(double)arg1:(double)arg2:(double)arg3:(double)arg4;
+ (id)SCNJSExportProtocol;
- (double)a;
- (double)b;
- (double)g;
- (double)r;
@end

__attribute__((visibility("hidden")))
@interface _C3DProgressDebugger : NSObject
{
}

+ (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

