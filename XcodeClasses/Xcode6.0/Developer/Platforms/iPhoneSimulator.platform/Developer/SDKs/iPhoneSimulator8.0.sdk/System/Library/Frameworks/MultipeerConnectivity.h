//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    int _field1;
    char *_field2;
    int _field3;
    unsigned int _field4;
} CDStruct_68f9d01f;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/MultipeerConnectivity.framework/MultipeerConnectivity
// UUID: D351C791-BEB3-37C3-9F4E-E6217A90A129
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 75.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol MCNearbyServiceAdvertiserDelegate <NSObject>
- (void)advertiser:(MCNearbyServiceAdvertiser *)arg1 didReceiveInvitationFromPeer:(MCPeerID *)arg2 withContext:(NSData *)arg3 invitationHandler:(void (^)(_Bool, MCSession *))arg4;

@optional
- (void)advertiser:(MCNearbyServiceAdvertiser *)arg1 didNotStartAdvertisingPeer:(NSError *)arg2;
@end

@protocol MCNearbyServiceBrowserDelegate <NSObject>
- (void)browser:(MCNearbyServiceBrowser *)arg1 lostPeer:(MCPeerID *)arg2;
- (void)browser:(MCNearbyServiceBrowser *)arg1 foundPeer:(MCPeerID *)arg2 withDiscoveryInfo:(NSDictionary *)arg3;

@optional
- (void)browser:(MCNearbyServiceBrowser *)arg1 didNotStartBrowsingForPeers:(NSError *)arg2;
@end

@protocol MCSessionPrivateDelegate <NSObject>
- (void)session:(MCSession *)arg1 didFinishReceivingResourceWithName:(NSString *)arg2 fromPeer:(MCPeerID *)arg3 atURL:(NSURL *)arg4 withError:(NSError *)arg5 propagate:(_Bool *)arg6;
- (void)session:(MCSession *)arg1 didStartReceivingResourceWithName:(NSString *)arg2 fromPeer:(MCPeerID *)arg3 withProgress:(NSProgress *)arg4 propagate:(_Bool *)arg5;
- (void)session:(MCSession *)arg1 didReceiveStream:(NSInputStream *)arg2 withName:(NSString *)arg3 fromPeer:(MCPeerID *)arg4 propagate:(_Bool *)arg5;
- (void)session:(MCSession *)arg1 didReceiveData:(NSData *)arg2 fromPeer:(MCPeerID *)arg3 propagate:(_Bool *)arg4;
- (void)session:(MCSession *)arg1 peer:(MCPeerID *)arg2 didChangeState:(long long)arg3 propagate:(_Bool *)arg4;

@optional
- (void)session:(MCSession *)arg1 didReceiveCertificate:(NSArray *)arg2 fromPeer:(MCPeerID *)arg3 certificateHandler:(void (^)(_Bool))arg4 propagate:(_Bool *)arg5;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>

@optional
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveService:(NSNetService *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveDomain:(NSString *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindService:(NSNetService *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindDomain:(NSString *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didNotSearch:(NSDictionary *)arg2;
- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)arg1;
- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)arg1;
@end

@protocol NSNetServiceDelegate <NSObject>

@optional
- (void)netService:(NSNetService *)arg1 didAcceptConnectionWithInputStream:(NSInputStream *)arg2 outputStream:(NSOutputStream *)arg3;
- (void)netService:(NSNetService *)arg1 didUpdateTXTRecordData:(NSData *)arg2;
- (void)netServiceDidStop:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotResolve:(NSDictionary *)arg2;
- (void)netServiceDidResolveAddress:(NSNetService *)arg1;
- (void)netServiceWillResolve:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotPublish:(NSDictionary *)arg2;
- (void)netServiceDidPublish:(NSNetService *)arg1;
- (void)netServiceWillPublish:(NSNetService *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSStreamDelegate <NSObject>

@optional
- (void)stream:(NSStream *)arg1 handleEvent:(unsigned long long)arg2;
@end

@protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 willCacheResponse:(NSCachedURLResponse *)arg3 completionHandler:(void (^)(NSCachedURLResponse *))arg4;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveData:(NSData *)arg3;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didBecomeDownloadTask:(NSURLSessionDownloadTask *)arg3;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveResponse:(NSURLResponse *)arg3 completionHandler:(void (^)(long long))arg4;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)arg1;
- (void)URLSession:(NSURLSession *)arg1 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)URLSession:(NSURLSession *)arg1 didBecomeInvalidWithError:(NSError *)arg2;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didCompleteWithError:(NSError *)arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 needNewBodyStream:(void (^)(NSInputStream *))arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg3 completionHandler:(void (^)(long long, NSURLCredential *))arg4;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 willPerformHTTPRedirection:(NSHTTPURLResponse *)arg3 newRequest:(NSURLRequest *)arg4 completionHandler:(void (^)(NSURLRequest *))arg5;
@end

@protocol UIAlertViewDelegate <NSObject>

@optional
- (_Bool)alertViewShouldEnableFirstOtherButton:(UIAlertView *)arg1;
- (void)alertView:(UIAlertView *)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)alertView:(UIAlertView *)arg1 willDismissWithButtonIndex:(long long)arg2;
- (void)didPresentAlertView:(UIAlertView *)arg1;
- (void)willPresentAlertView:(UIAlertView *)arg1;
- (void)alertViewCancel:(UIAlertView *)arg1;
- (void)alertView:(UIAlertView *)arg1 clickedButtonAtIndex:(long long)arg2;
@end

@protocol UIBarPositioningDelegate <NSObject>

@optional
- (long long)positionForBar:(id <UIBarPositioning>)arg1;
@end

@protocol UINavigationBarDelegate <UIBarPositioningDelegate>

@optional
- (void)navigationBar:(UINavigationBar *)arg1 didPopItem:(UINavigationItem *)arg2;
- (_Bool)navigationBar:(UINavigationBar *)arg1 shouldPopItem:(UINavigationItem *)arg2;
- (void)navigationBar:(UINavigationBar *)arg1 didPushItem:(UINavigationItem *)arg2;
- (_Bool)navigationBar:(UINavigationBar *)arg1 shouldPushItem:(UINavigationItem *)arg2;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

@interface MCAdvertiserAssistant : NSObject <MCNearbyServiceAdvertiserDelegate, UIAlertViewDelegate>
{
    id <MCAdvertiserAssistantDelegate> _delegate;
    _Bool _isAdvertising;
    _Bool _wasAdvertising;
    MCSession *_session;
    NSDictionary *_discoveryInfo;
    NSString *_serviceType;
    MCPeerID *_myPeerID;
    MCNearbyServiceAdvertiser *_advertiser;
    NSMutableArray *_invitationsBuffer;
    CDUnknownBlockType _invitationHandlerForPresentedAlert;
    NSString *_appName;
    NSBundle *_frameworkBundle;
    UIAlertView *_alertView;
}

@property(retain, nonatomic) UIAlertView *alertView; // @synthesize alertView=_alertView;
@property(retain, nonatomic) NSBundle *frameworkBundle; // @synthesize frameworkBundle=_frameworkBundle;
@property(nonatomic) _Bool wasAdvertising; // @synthesize wasAdvertising=_wasAdvertising;
@property(nonatomic) _Bool isAdvertising; // @synthesize isAdvertising=_isAdvertising;
@property(readonly, copy, nonatomic) NSString *appName; // @synthesize appName=_appName;
@property(copy, nonatomic) CDUnknownBlockType invitationHandlerForPresentedAlert; // @synthesize invitationHandlerForPresentedAlert=_invitationHandlerForPresentedAlert;
@property(retain, nonatomic) NSMutableArray *invitationsBuffer; // @synthesize invitationsBuffer=_invitationsBuffer;
@property(retain, nonatomic) MCNearbyServiceAdvertiser *advertiser; // @synthesize advertiser=_advertiser;
@property(copy, nonatomic) MCPeerID *myPeerID; // @synthesize myPeerID=_myPeerID;
@property(copy, nonatomic) NSString *serviceType; // @synthesize serviceType=_serviceType;
@property(copy, nonatomic) NSDictionary *discoveryInfo; // @synthesize discoveryInfo=_discoveryInfo;
@property(retain, nonatomic) MCSession *session; // @synthesize session=_session;
- (void)applicationWillTerminateNotification:(id)arg1;
- (void)applicationDidEnterBackgroundNotification:(id)arg1;
- (void)willPresentAlertView:(id)arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)advertiser:(id)arg1 didReceiveInvitationFromPeer:(id)arg2 withContext:(id)arg3 invitationHandler:(CDUnknownBlockType)arg4;
- (void)presentNextInvitation;
- (void)stop;
- (void)start;
@property(nonatomic) __weak id <MCAdvertiserAssistantDelegate> delegate;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithServiceType:(id)arg1 discoveryInfo:(id)arg2 session:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCBrowserViewController : UIViewController <MCSessionPrivateDelegate, UITableViewDataSource, UITableViewDelegate, UIAlertViewDelegate, UINavigationBarDelegate, MCNearbyServiceBrowserDelegate>
{
    id <MCBrowserViewControllerDelegate> _delegate;
    MCNearbyServiceBrowser *_browser;
    MCSession *_session;
    unsigned long long _minimumNumberOfPeers;
    unsigned long long _maximumNumberOfPeers;
    MCPeerID *_myPeerID;
    UITableView *_tableView;
    NSMutableArray *_nearbyPeersSection;
    NSMutableArray *_invitedPeersSection;
    NSMutableDictionary *_invitedPeersState;
    NSMutableArray *_foundPeers;
    UIBarButtonItem *_doneButton;
    UIBarButtonItem *_cancelButton;
    UINavigationBar *_navigationBar;
    NSBundle *_frameworkBundle;
    unsigned long long _declinedPeersCount;
}

@property(nonatomic) unsigned long long declinedPeersCount; // @synthesize declinedPeersCount=_declinedPeersCount;
@property(retain, nonatomic) NSBundle *frameworkBundle; // @synthesize frameworkBundle=_frameworkBundle;
@property(retain, nonatomic) UINavigationBar *navigationBar; // @synthesize navigationBar=_navigationBar;
@property(retain, nonatomic) UIBarButtonItem *cancelButton; // @synthesize cancelButton=_cancelButton;
@property(retain, nonatomic) UIBarButtonItem *doneButton; // @synthesize doneButton=_doneButton;
@property(retain, nonatomic) NSMutableArray *foundPeers; // @synthesize foundPeers=_foundPeers;
@property(retain, nonatomic) NSMutableDictionary *invitedPeersState; // @synthesize invitedPeersState=_invitedPeersState;
@property(retain, nonatomic) NSMutableArray *invitedPeersSection; // @synthesize invitedPeersSection=_invitedPeersSection;
@property(retain, nonatomic) NSMutableArray *nearbyPeersSection; // @synthesize nearbyPeersSection=_nearbyPeersSection;
@property(retain, nonatomic) UITableView *tableView; // @synthesize tableView=_tableView;
@property(copy, nonatomic) MCPeerID *myPeerID; // @synthesize myPeerID=_myPeerID;
@property(nonatomic) unsigned long long maximumNumberOfPeers; // @synthesize maximumNumberOfPeers=_maximumNumberOfPeers;
@property(nonatomic) unsigned long long minimumNumberOfPeers; // @synthesize minimumNumberOfPeers=_minimumNumberOfPeers;
@property(retain, nonatomic) MCSession *session; // @synthesize session=_session;
@property(retain, nonatomic) MCNearbyServiceBrowser *browser; // @synthesize browser=_browser;
- (long long)positionForBar:(id)arg1;
- (void)session:(id)arg1 didFinishReceivingResourceWithName:(id)arg2 fromPeer:(id)arg3 atURL:(id)arg4 withError:(id)arg5 propagate:(_Bool *)arg6;
- (void)session:(id)arg1 didStartReceivingResourceWithName:(id)arg2 fromPeer:(id)arg3 withProgress:(id)arg4 propagate:(_Bool *)arg5;
- (void)session:(id)arg1 didReceiveStream:(id)arg2 withName:(id)arg3 fromPeer:(id)arg4 propagate:(_Bool *)arg5;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(long long)arg3 propagate:(_Bool *)arg4;
- (void)session:(id)arg1 didReceiveData:(id)arg2 fromPeer:(id)arg3 propagate:(_Bool *)arg4;
- (void)browser:(id)arg1 lostPeer:(id)arg2;
- (void)browser:(id)arg1 foundPeer:(id)arg2 withDiscoveryInfo:(id)arg3;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (_Bool)tableView:(id)arg1 shouldHighlightRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)nearbySectionTitle;
@property(readonly, nonatomic) _Bool minimumNumberOfPeersReached;
@property(readonly, nonatomic) _Bool maximumNumberOfPeersReached;
- (void)verifyPeerIsAccountedFor:(id)arg1;
- (id)detailStringForPeerState:(int)arg1;
- (void)cancelTapped:(id)arg1;
- (void)peer:(id)arg1 changedStateTo:(int)arg2;
- (void)peerJoinedSession;
- (void)doneTapped:(id)arg1;
- (void)didReceiveMemoryWarning;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
@property(nonatomic) __weak id <MCBrowserViewControllerDelegate> delegate;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)init;
- (id)initWithServiceType:(id)arg1 session:(id)arg2;
- (id)initWithBrowser:(id)arg1 session:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCNearbyDiscoveryPeer : NSObject
{
    MCPeerID *_peerID;
    NSNetService *_netService;
    int _state;
    MCNearbyDiscoveryPeerConnection *_connection;
    MCNearbyDiscoveryPeerConnection *_trialConnection;
    NSMutableArray *_sendDataBuffer;
}

@property(retain, nonatomic) NSMutableArray *sendDataBuffer; // @synthesize sendDataBuffer=_sendDataBuffer;
@property(retain, nonatomic) MCNearbyDiscoveryPeerConnection *trialConnection; // @synthesize trialConnection=_trialConnection;
@property(nonatomic) int state; // @synthesize state=_state;
@property(retain, nonatomic) MCNearbyDiscoveryPeerConnection *connection; // @synthesize connection=_connection;
@property(copy, nonatomic) MCPeerID *peerID; // @synthesize peerID=_peerID;
@property(retain, nonatomic) NSNetService *netService; // @synthesize netService=_netService;
- (void)flushDataBuffer;
- (void)sendData:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)stringForState:(int)arg1;
- (void)invalidate;
- (void)closeConnection;
- (void)attachConnection:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithPeerID:(id)arg1;
- (id)init;

@end

@interface MCNearbyDiscoveryPeerConnection : NSObject <NSStreamDelegate>
{
    NSString *_remoteServiceName;
    NSString *_localServiceName;
    _Bool _connected;
    NSMutableData *_dataReceived;
    NSInputStream *_inputStream;
    NSOutputStream *_outputStream;
    _Bool _shouldSendHello;
    _Bool _readyToWrite;
    NSMutableData *_dataToSend;
    unsigned int _currentSequenceNumber;
    NSMutableData *_dataToSendHoldingQueue;
    NSMutableArray *_receivedDataHoldingQueue;
    NSMutableArray *_messageReceiptHandlerList;
    NSMutableArray *_messageReceiptHandlerHoldingQueue;
    CDUnknownBlockType _receiveDataHandler;
    CDUnknownBlockType _connectedHandler;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSObject<OS_dispatch_queue> *_targetQueue;
}

+ (unsigned long long)receiveDataLimit;
+ (unsigned long long)sendDataLimit;
+ (void)checkConstants;
@property(retain, nonatomic) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property(retain, nonatomic) NSInputStream *inputStream; // @synthesize inputStream=_inputStream;
@property(copy, nonatomic) CDUnknownBlockType receiveDataHandler; // @synthesize receiveDataHandler=_receiveDataHandler;
@property(copy, nonatomic) CDUnknownBlockType connectedHandler; // @synthesize connectedHandler=_connectedHandler;
@property(nonatomic) NSObject<OS_dispatch_queue> *targetQueue; // @synthesize targetQueue=_targetQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(copy, nonatomic) NSString *localServiceName; // @synthesize localServiceName=_localServiceName;
@property(copy, nonatomic) NSString *remoteServiceName; // @synthesize remoteServiceName=_remoteServiceName;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)syncHandleOutputStreamEvent:(unsigned long long)arg1;
- (void)syncHandleInputStreamEvent:(unsigned long long)arg1;
- (void)syncReadFromInputStream;
- (id)stringForStreamEventCode:(unsigned long long)arg1;
- (void)sendData:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (void)invalidate;
- (void)syncCloseConnectionNow;
- (void)syncReceivedData:(id)arg1 error:(id)arg2;
- (void)syncProcessMessage:(int)arg1 data:(id)arg2 sequenceNumber:(unsigned int)arg3;
- (void)syncSendMessageReceipt:(int)arg1 sequenceNumber:(unsigned int)arg2;
- (void)syncAcceptedConnection;
- (void)syncSendAccept;
- (void)syncSendHello;
- (void)syncSendMessage:(int)arg1 data:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)syncSendData;
- (_Bool)shouldDecideAboutConnection;
- (void)attachInputStream:(id)arg1 outputStream:(id)arg2;
- (void)connectToNetService:(id)arg1;
- (void)setupInputStream:(id)arg1 outputStream:(id)arg2;
- (void)syncAppendDataToSend:(id)arg1;
- (id)initWithLocalServiceName:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCNearbyPeerTableViewCell : UITableViewCell
{
}

- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MCNearbyPeerTableViewHeader : UIView
{
    UIActivityIndicatorView *_spinner;
    UILabel *_text;
}

- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithTitle:(id)arg1;

@end

@interface MCNearbyServiceAdvertiser : NSObject <NSNetServiceDelegate>
{
    id <MCNearbyServiceAdvertiserDelegate> _delegate;
    _Bool _isAdvertising;
    _Bool _wasAdvertising;
    MCPeerID *_myPeerID;
    NSDictionary *_discoveryInfo;
    NSString *_serviceType;
    NSString *_formattedServiceType;
    NSNetService *_networkServer;
    NSData *_TXTRecordData;
    NSMutableDictionary *_peers;
    long long _outgoingInviteID;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSMutableDictionary *_invites;
}

@property(nonatomic) _Bool wasAdvertising; // @synthesize wasAdvertising=_wasAdvertising;
@property(nonatomic) _Bool isAdvertising; // @synthesize isAdvertising=_isAdvertising;
@property(retain, nonatomic) NSMutableDictionary *invites; // @synthesize invites=_invites;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(nonatomic) long long outgoingInviteID; // @synthesize outgoingInviteID=_outgoingInviteID;
@property(retain, nonatomic) NSMutableDictionary *peers; // @synthesize peers=_peers;
@property(retain, nonatomic) NSData *TXTRecordData; // @synthesize TXTRecordData=_TXTRecordData;
@property(retain, nonatomic) NSNetService *networkServer; // @synthesize networkServer=_networkServer;
@property(copy, nonatomic) NSString *formattedServiceType; // @synthesize formattedServiceType=_formattedServiceType;
@property(copy, nonatomic) NSString *serviceType; // @synthesize serviceType=_serviceType;
@property(copy, nonatomic) NSDictionary *discoveryInfo; // @synthesize discoveryInfo=_discoveryInfo;
@property(readonly, nonatomic) MCPeerID *myPeerID; // @synthesize myPeerID=_myPeerID;
- (void)netService:(id)arg1 didNotPublish:(id)arg2;
- (void)netServiceDidPublish:(id)arg1;
- (void)netServiceDidStop:(id)arg1;
- (void)netService:(id)arg1 didAcceptConnectionWithInputStream:(id)arg2 outputStream:(id)arg3;
- (void)syncHandleIncomingInputStream:(id)arg1 outputStream:(id)arg2;
- (void)syncReceivedData:(id)arg1 fromPeer:(id)arg2;
- (void)syncSendData:(id)arg1 toPeer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)syncHandleInviteConnect:(id)arg1 fromPeer:(id)arg2;
- (void)syncHandleInvite:(id)arg1 fromPeer:(id)arg2;
- (void)syncSendDictionary:(id)arg1 toPeer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)syncCloseConnectionForPeer:(id)arg1;
- (void)syncAttachConnection:(id)arg1 toPeer:(id)arg2;
- (void)applicationWillEnterForegroundNotification:(id)arg1;
- (void)applicationWillTerminateNotification:(id)arg1;
- (void)applicationDidEnterBackgroundNotification:(id)arg1;
- (void)stopAdvertisingPeer;
- (void)syncStopAdvertisingPeer;
- (void)startAdvertisingPeer;
- (void)syncStartAdvertisingPeer;
- (void)parseIDString:(id *)arg1 displayName:(id *)arg2 fromIdentifier:(id)arg3;
- (id)txtRecordDataWithDiscoveryInfo:(id)arg1;
- (id)makeTXTRecordDataWithDiscoveryInfo:(id)arg1;
@property(nonatomic) __weak id <MCNearbyServiceAdvertiserDelegate> delegate;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithPeer:(id)arg1 discoveryInfo:(id)arg2 serviceType:(id)arg3;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCNearbyServiceBrowser : NSObject <NSNetServiceBrowserDelegate, NSNetServiceDelegate>
{
    id <MCNearbyServiceBrowserDelegate> _delegate;
    _Bool _isBrowsing;
    _Bool _wasBrowsing;
    MCPeerID *_myPeerID;
    NSString *_serviceType;
    NSString *_formattedServiceType;
    NSMutableDictionary *_netServices;
    NSMutableDictionary *_peers;
    NSNetServiceBrowser *_networkBrowser;
    long long _outgoingInviteID;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSMutableDictionary *_invites;
}

@property(nonatomic) _Bool wasBrowsing; // @synthesize wasBrowsing=_wasBrowsing;
@property(nonatomic) _Bool isBrowsing; // @synthesize isBrowsing=_isBrowsing;
@property(retain, nonatomic) NSMutableDictionary *invites; // @synthesize invites=_invites;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(nonatomic) long long outgoingInviteID; // @synthesize outgoingInviteID=_outgoingInviteID;
@property(retain, nonatomic) NSNetServiceBrowser *networkBrowser; // @synthesize networkBrowser=_networkBrowser;
@property(retain, nonatomic) NSMutableDictionary *peers; // @synthesize peers=_peers;
@property(retain, nonatomic) NSMutableDictionary *netServices; // @synthesize netServices=_netServices;
@property(copy, nonatomic) NSString *formattedServiceType; // @synthesize formattedServiceType=_formattedServiceType;
@property(copy, nonatomic) NSString *serviceType; // @synthesize serviceType=_serviceType;
@property(readonly, nonatomic) MCPeerID *myPeerID; // @synthesize myPeerID=_myPeerID;
- (void)netService:(id)arg1 didUpdateTXTRecordData:(id)arg2;
- (id)rebuildUserDiscoveryInfoFromTXTRecordDictionary:(id)arg1;
- (void)netServiceBrowserWillSearch:(id)arg1;
- (void)netServiceBrowserDidStopSearch:(id)arg1;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveDomain:(id)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(id)arg1 didNotSearch:(id)arg2;
- (void)netServiceBrowser:(id)arg1 didFindDomain:(id)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(_Bool)arg3;
- (void)invitePeer:(id)arg1 toSession:(id)arg2 withContext:(id)arg3 timeout:(double)arg4;
- (void)syncReceivedData:(id)arg1 fromPeer:(id)arg2;
- (void)syncSendData:(id)arg1 toPeer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)syncHandleInviteTimeout:(id)arg1 forPeer:(id)arg2;
- (void)syncHandleInviteResponse:(id)arg1 fromPeer:(id)arg2;
- (void)syncInvitePeer:(id)arg1 toSession:(id)arg2 withContext:(id)arg3 timeout:(double)arg4;
- (void)syncSendDictionary:(id)arg1 toPeer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)syncCloseConnectionForPeer:(id)arg1;
- (void)syncAttachConnection:(id)arg1 toPeer:(id)arg2;
- (void)syncInitiateConnectionToPeer:(id)arg1;
- (void)applicationWillEnterForegroundNotification:(id)arg1;
- (void)applicationWillTerminateNotification:(id)arg1;
- (void)applicationDidEnterBackgroundNotification:(id)arg1;
- (void)stopBrowsingForPeers;
- (void)syncStopBrowsingForPeers;
- (void)startBrowsingForPeers;
- (void)syncStartBrowsingForPeers;
- (void)parseIDString:(id *)arg1 displayName:(id *)arg2 fromIdentifier:(id)arg3;
- (long long)syncNextOutgoingInviteID;
@property(nonatomic) __weak id <MCNearbyServiceBrowserDelegate> delegate;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithPeer:(id)arg1 serviceType:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCNearbyServiceUtils : NSObject
{
}

+ (id)formattedServiceType:(id)arg1;
+ (_Bool)isServiceTypeValid:(id)arg1;

@end

@interface MCPeerID : NSObject <NSCopying, NSSecureCoding>
{
    MCPeerIDInternal *_internal;
}

+ (_Bool)supportsSecureCoding;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)serializedRepresentation;
- (id)initWithSerializedRepresentation:(id)arg1;
- (id)initWithDisplayName:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithIDString:(id)arg1 displayName:(id)arg2;
- (id)initWithPID:(unsigned int)arg1 displayName:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)internalDescription;
- (id)description;
@property(readonly, nonatomic) NSString *displayName;
- (unsigned int)pid;
- (id)idString;
- (unsigned long long)pid64;

@end

@interface MCPeerIDInternal : NSObject
{
    NSString *_idString;
    unsigned long long _pid64;
    NSString *_displayName;
}

@property(readonly, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, nonatomic) unsigned long long pid64; // @synthesize pid64=_pid64;
@property(readonly, nonatomic) NSString *idString; // @synthesize idString=_idString;
- (void)dealloc;
- (id)initWithIDString:(id)arg1 pid64:(unsigned long long)arg2 displayName:(id)arg3;

@end

@interface MCResourceDownloader : NSObject <NSURLSessionDelegate, NSURLSessionDataDelegate>
{
    NSURLSession *_urlSession;
    NSURLSessionDataTask *_urlTask;
    CDUnknownBlockType _urlResponseHandler;
    MCSession *_session;
    NSString *_resourceName;
    MCPeerID *_peerID;
}

@property(retain, nonatomic) MCPeerID *peerID; // @synthesize peerID=_peerID;
@property(copy, nonatomic) NSString *resourceName; // @synthesize resourceName=_resourceName;
@property(nonatomic) CDUnknownBlockType urlResponseHandler; // @synthesize urlResponseHandler=_urlResponseHandler;
@property(retain, nonatomic) NSURLSessionDataTask *urlTask; // @synthesize urlTask=_urlTask;
@property(retain, nonatomic) NSURLSession *urlSession; // @synthesize urlSession=_urlSession;
- (void)sendData:(id)arg1 fromByteOffset:(unsigned long long)arg2;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)syncCloseStreamForSession:(id)arg1 withError:(id)arg2;
@property(nonatomic) MCSession *session; // @synthesize session=_session;
- (void)dealloc;
- (id)initWithSession:(id)arg1 resourceUrl:(id)arg2 name:(id)arg3 peerID:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCResourceProgressObserver : NSObject
{
    NSString *_name;
    NSProgress *_progress;
    CDUnknownBlockType _cancelHandler;
}

@property(copy, nonatomic) CDUnknownBlockType cancelHandler; // @synthesize cancelHandler=_cancelHandler;
@property(retain, nonatomic) NSProgress *progress; // @synthesize progress=_progress;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void)dealloc;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)invalidate;
- (id)initWithName:(id)arg1 progress:(id)arg2 cancelHandler:(CDUnknownBlockType)arg3;

@end

@interface MCSession : NSObject
{
    id <MCSessionDelegate> _delegate;
    id <MCSessionPrivateDelegate> _privateDelegate;
    unsigned int _gckPID;
    MCPeerID *_myPeerID;
    NSArray *_securityIdentity;
    long long _encryptionPreference;
    struct OpaqueGCKSession *_gckSession;
    struct OpaqueAGPSession *_agpSession;
    NSMutableDictionary *_peerIDMap;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSMutableDictionary *_peerStates;
    NSMutableDictionary *_connectionPendingPeerEvents;
    NSObject<OS_dispatch_queue> *_callbackQueue;
}

+ (id)stringForMCSessionSendDataMode:(long long)arg1;
+ (id)stringForSessionState:(long long)arg1;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property(retain, nonatomic) NSMutableDictionary *connectionPendingPeerEvents; // @synthesize connectionPendingPeerEvents=_connectionPendingPeerEvents;
@property(retain, nonatomic) NSMutableDictionary *peerStates; // @synthesize peerStates=_peerStates;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(retain, nonatomic) NSMutableDictionary *peerIDMap; // @synthesize peerIDMap=_peerIDMap;
@property(nonatomic) unsigned int gckPID; // @synthesize gckPID=_gckPID;
@property(nonatomic) struct OpaqueAGPSession *agpSession; // @synthesize agpSession=_agpSession;
@property(nonatomic) struct OpaqueGCKSession *gckSession; // @synthesize gckSession=_gckSession;
@property(readonly, nonatomic) long long encryptionPreference; // @synthesize encryptionPreference=_encryptionPreference;
@property(readonly, nonatomic) NSArray *securityIdentity; // @synthesize securityIdentity=_securityIdentity;
@property(readonly, nonatomic) MCPeerID *myPeerID; // @synthesize myPeerID=_myPeerID;
- (id)startStreamWithName:(id)arg1 toPeer:(id)arg2 error:(id *)arg3;
- (void)syncStartStreamWithName:(id)arg1 toPeer:(id)arg2 mcFD:(int)arg3 isResource:(_Bool)arg4;
- (void)disconnect;
- (id)sendResourceAtURL:(id)arg1 withName:(id)arg2 toPeer:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) NSArray *connectedPeers;
- (_Bool)sendData:(id)arg1 toPeers:(id)arg2 withMode:(long long)arg3 error:(id *)arg4;
- (void)syncSendData:(id)arg1 toPeers:(id)arg2 withDataMode:(long long)arg3;
- (void)cancelConnectPeer:(id)arg1;
- (void)connectPeer:(id)arg1 withNearbyConnectionData:(id)arg2;
- (void)syncConnectPeer:(id)arg1 withConnectionData:(id)arg2;
- (_Bool)isEncryptionPreferenceCompatible:(long long)arg1;
- (void)nearbyConnectionDataForPeer:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)syncGetConnectionDataForPeerState:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithPeer:(id)arg1 securityIdentity:(id)arg2 encryptionPreference:(long long)arg3;
- (id)initWithPeer:(id)arg1;
- (void)syncHandleNetworkEvent:(CDStruct_68f9d01f *)arg1 pid:(unsigned int)arg2 freeEventWhenDone:(_Bool *)arg3;
- (void)syncPeer:(id)arg1 changeStateTo:(long long)arg2 shouldForceCallback:(_Bool)arg3;
- (void)cancelOutgoingStream:(id)arg1 toPeer:(id)arg2;
- (void)syncCancelOutgoingStream:(id)arg1 toPeer:(id)arg2;
- (void)cancelIncomingStream:(id)arg1 fromPeer:(id)arg2;
- (void)syncCancelIncomingStream:(id)arg1 fromPeer:(id)arg2;
- (void)startConnectionWithIndirectPID:(unsigned int)arg1;
- (void)syncCloseStreamsForPeer:(id)arg1;
- (void)syncCloseOutgoingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 removeObserver:(_Bool)arg5;
- (void)syncCloseIncomingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 reason:(int)arg5 removeObserver:(_Bool)arg6;
- (void)syncSendXDataConnectionBlobPushToPID:(unsigned int)arg1 connectionBlob:(id)arg2;
- (void)syncSendXDataPeerIDPushToPID:(unsigned int)arg1;
- (void)syncSendXDataStreamCloseFromReceiverToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;
- (void)syncSendXDataStreamCloseFromSenderToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;
- (void)syncSendXDataStreamOpenResponseToPID:(unsigned int)arg1 withRequestID:(unsigned int)arg2 streamID:(unsigned int)arg3;
- (void)syncHandleXDataDataPacket:(char *)arg1 packetSize:(int)arg2 forPeer:(id)arg3 state:(id)arg4;
- (id)stringForEncryptionPreference:(long long)arg1;
- (id)description;
@property(nonatomic) id <MCSessionPrivateDelegate> privateDelegate;
@property(nonatomic) __weak id <MCSessionDelegate> delegate;
- (void)peerDidDeclineInvitation:(id)arg1;

@end

@interface MCSessionPeerConnectionData : NSObject
{
    _Bool _hasIdentitySet;
    NSData *_gckSessionConnectionData;
    long long _encryptionPreference;
}

+ (id)connectionDataSegmentWithEncryptionPreference:(long long)arg1 identitySet:(_Bool)arg2 gckSessionConnectionDataBytes:(void *)arg3 gckSessionConnectionDataLength:(unsigned long long)arg4;
@property(nonatomic) _Bool hasIdentitySet; // @synthesize hasIdentitySet=_hasIdentitySet;
@property(nonatomic) long long encryptionPreference; // @synthesize encryptionPreference=_encryptionPreference;
@property(retain, nonatomic) NSData *gckSessionConnectionData; // @synthesize gckSessionConnectionData=_gckSessionConnectionData;
- (_Bool)parseConnectionDataBlob:(id)arg1;
- (void)parseConnectionDataSegmentWithBytes:(char *)arg1 withLength:(unsigned long long)arg2;
- (void)dealloc;
- (id)initWithConnectionDataBlob:(id)arg1;

@end

@interface MCSessionPeerState : NSObject
{
    _Bool _connectPeerCalled;
    unsigned int _newStreamOpenRequestID;
    unsigned int _newStreamID;
    MCPeerID *_peerID;
    long long _state;
    NSMutableDictionary *_outgoingStreamRequests;
    NSMutableDictionary *_incomingStreams;
    NSMutableDictionary *_outgoingStreams;
    NSData *_nearbyConnectionData;
    long long _certificateDecision;
}

@property(nonatomic) long long certificateDecision; // @synthesize certificateDecision=_certificateDecision;
@property(nonatomic) _Bool connectPeerCalled; // @synthesize connectPeerCalled=_connectPeerCalled;
@property(copy, nonatomic) NSData *nearbyConnectionData; // @synthesize nearbyConnectionData=_nearbyConnectionData;
@property(retain, nonatomic) NSMutableDictionary *outgoingStreams; // @synthesize outgoingStreams=_outgoingStreams;
@property(retain, nonatomic) NSMutableDictionary *incomingStreams; // @synthesize incomingStreams=_incomingStreams;
@property(retain, nonatomic) NSMutableDictionary *outgoingStreamRequests; // @synthesize outgoingStreamRequests=_outgoingStreamRequests;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(readonly, copy, nonatomic) MCPeerID *peerID; // @synthesize peerID=_peerID;
@property(readonly, nonatomic) unsigned int newStreamOpenRequestID; // @synthesize newStreamOpenRequestID=_newStreamOpenRequestID;
@property(readonly, nonatomic) unsigned int newStreamID; // @synthesize newStreamID=_newStreamID;
- (void)dealloc;
- (id)initWithPeer:(id)arg1;

@end

@interface MCSessionStream : NSObject
{
    _Bool _sourceSuspended;
    _Bool _progressUnbounded;
    unsigned int _streamID;
    int state;
    int _fd;
    MCPeerID *_peerID;
    NSString *_name;
    NSObject<OS_dispatch_source> *_source;
    NSMutableData *_incomingBuffer;
    NSURL *_url;
    NSProgress *_progress;
    CDUnknownBlockType _completionHandler;
    MCResourceDownloader *_urlDownloader;
    MCResourceProgressObserver *_observer;
}

@property(retain, nonatomic) MCResourceProgressObserver *observer; // @synthesize observer=_observer;
@property(retain, nonatomic) MCResourceDownloader *urlDownloader; // @synthesize urlDownloader=_urlDownloader;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(nonatomic) _Bool progressUnbounded; // @synthesize progressUnbounded=_progressUnbounded;
@property(retain, nonatomic) NSProgress *progress; // @synthesize progress=_progress;
@property(copy, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) NSMutableData *incomingBuffer; // @synthesize incomingBuffer=_incomingBuffer;
@property(nonatomic) _Bool sourceSuspended; // @synthesize sourceSuspended=_sourceSuspended;
@property(nonatomic) NSObject<OS_dispatch_source> *source; // @synthesize source=_source;
@property(nonatomic) int fd; // @synthesize fd=_fd;
@property(nonatomic) int state; // @synthesize state;
@property(nonatomic) unsigned int streamID; // @synthesize streamID=_streamID;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) MCPeerID *peerID; // @synthesize peerID=_peerID;
- (void)dealloc;

@end

@interface NSArray (MCSession_copyDeep_MC)
- (id)copyDeep_MC;
@end

