//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration
// UUID: E8F0D21C-F68A-36A9-A983-0A10F2CF3626
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1207.3.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol MCMDMXPCProtocol <NSObject>
- (void)uprootMDMWithCompletion:(void (^)(NSError *))arg1;
- (void)retryNotNowWithCompletion:(void (^)(NSError *))arg1;
- (void)simulatePushWithCompletion:(void (^)(NSError *))arg1;
- (void)scheduleTokenUpdateWithCompletion:(void (^)(NSError *))arg1;
- (void)notifyNewConfigurationWithCompletion:(void (^)(NSError *))arg1;
@end

@protocol MCProfileConnectionXPCProtocol <NSObject>
- (void)doMCICDidRequestCurrentPasscodeWithCompletion:(void (^)(_Bool, NSString *, NSError *))arg1;
- (void)doMCICDidRequestShowUserWarnings:(NSArray *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)doMCICDidFinishPreflightWithError:(NSError *)arg1 completion:(void (^)(NSArray *, _Bool, unsigned long long, NSError *))arg2;
- (void)doMCICDidRequestUserInput:(NSArray *)arg1 completion:(void (^)(NSArray *, _Bool, unsigned long long, NSError *))arg2;
- (void)doMCICDidFinishInstallationWithIdentifier:(NSString *)arg1 error:(NSError *)arg2 completion:(void (^)(NSError *))arg3;
- (void)doMCICDidBeginInstallingNextProfileData:(NSData *)arg1 completion:(void (^)(NSError *))arg2;
- (void)doMCICDidUpdateStatus:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
@end

@protocol MCTeslaConfigurationFetchInterface <NSObject>
- (void)fetchConfigurationWithCompletionBlock:(void (^)(_Bool, NSDictionary *, NSError *))arg1;
@end

@protocol MCXPCProtocol <NSObject>
- (void)shutDownWithCompletion:(void (^)(NSError *))arg1;
- (void)allowedKeyboardBundleIDsAfterApplyingFilterToBundleIDs:(NSArray *)arg1 hostAppBundleID:(NSString *)arg2 accountIsManaged:(_Bool)arg3 completion:(void (^)(NSArray *))arg4;
- (void)unstashWhitelistURLStringsWithCompletion:(void (^)(NSError *))arg1;
- (void)stashWhitelistURLStringsWithCompletion:(void (^)(NSError *))arg1;
- (void)unstashBlacklistURLStringsWithCompletion:(void (^)(NSError *))arg1;
- (void)stashBlacklistURLStringsWithCompletion:(void (^)(NSError *))arg1;
- (void)removeWebContentFilterUserBlacklistedURLString:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)unstashUserBookmarksFromLabel:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)stashUserBookmarks:(NSArray *)arg1 withLabel:(NSString *)arg2 completion:(void (^)(NSError *))arg3;
- (void)setUserBookmarks:(NSArray *)arg1 completion:(void (^)(NSError *))arg2;
- (void)storeActivationRecord:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;
- (void)createActivationLockBypassCodeWithCompletion:(void (^)(NSString *, NSError *))arg1;
- (void)cloudConfigurationStoreDetails:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;
- (void)cloudConfigurationMachineInfoDataWithCompletion:(void (^)(NSData *, NSError *))arg1;
- (void)rereadManagedAppAttributesWithCompletion:(void (^)(NSError *))arg1;
- (void)markStoredProfileForPurposeAsInstalled:(int)arg1 completion:(void (^)(NSError *))arg2;
- (void)profileDataStoredForPurpose:(int)arg1 completion:(void (^)(NSData *, NSError *))arg2;
- (void)storeProfileData:(NSData *)arg1 configurationSource:(int)arg2 purpose:(int)arg3 completion:(void (^)(NSError *))arg4;
- (void)removeExpiredProfilesWithCompletion:(void (^)(NSError *))arg1;
- (void)managedAppIDsWithFlags:(int)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)setUserInfo:(NSDictionary *)arg1 forClientUUID:(NSString *)arg2 completion:(void (^)(NSError *))arg3;
- (void)resetAllSettingsToDefaultsWithCompletion:(void (^)(NSError *))arg1;
- (void)recomputePerClientUserComplianceWithCompletion:(void (^)(NSError *))arg1;
- (void)recomputeUserComplianceWarningWithCompletion:(void (^)(NSError *))arg1;
- (void)notifyHaveSeenComplianceMessageWithLastLockDate:(NSDate *)arg1 completion:(void (^)(NSError *))arg2;
- (void)notifyStartComplianceTimer:(NSDate *)arg1 completion:(void (^)(NSError *))arg2;
- (void)removeProvisioningProfileWithUUID:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)installProvisioningProfileData:(NSData *)arg1 managingProfileIdentifer:(NSString *)arg2 completion:(void (^)(NSError *))arg3;
- (void)storeCertificateData:(NSData *)arg1 forIPCUIdentifier:(NSString *)arg2 completion:(void (^)(NSError *))arg3;
- (void)openSensitiveURL:(NSString *)arg1 unlock:(_Bool)arg2 completion:(void (^)(NSError *))arg3;
- (void)removeValueSetting:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)removeBoolSetting:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)setParametersForSettingsByType:(NSDictionary *)arg1 passcode:(NSString *)arg2 completion:(void (^)(NSError *))arg3;
- (void)migrateWithContext:(int)arg1 passcodeWasSetInBackup:(_Bool)arg2 completion:(void (^)(NSError *))arg3;
- (void)managedWiFiNetworkNamesWithCompletion:(void (^)(NSArray *, NSError *))arg1;
- (void)managedSystemConfigurationServiceIDsWithCompletion:(void (^)(NSArray *, NSError *))arg1;
- (void)removeOrphanedClientRestrictionsWithCompletion:(void (^)(NSError *))arg1;
- (void)clearPasscodeWithEscrowKeybagData:(NSData *)arg1 secret:(NSData *)arg2 completion:(void (^)(NSError *))arg3;
- (void)changePasscode:(NSString *)arg1 oldPasscode:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)applyRestrictionDictionary:(NSDictionary *)arg1 clientType:(NSString *)arg2 clientUUID:(NSString *)arg3 localizedClientDescription:(NSString *)arg4 localizedWarningMessage:(NSString *)arg5 completion:(void (^)(_Bool, _Bool, NSError *))arg6;
- (void)removeProfileWithIdentifier:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)updateProfileIdentifier:(NSString *)arg1 interactive:(_Bool)arg2 completion:(void (^)(NSString *, NSError *))arg3;
- (void)popProvisioningProfileFromHeadOfInstallationQueueWithCompletion:(void (^)(NSData *, NSError *))arg1;
- (void)popProfileDataFromHeadOfInstallationQueueWithCompletion:(void (^)(NSData *, NSError *))arg1;
- (void)queueProfileDataForInstallation:(NSData *)arg1 originalFileName:(NSString *)arg2 originatingBundleID:(NSString *)arg3 transitionToUI:(_Bool)arg4 completion:(void (^)(NSString *, NSError *))arg5;
- (void)installProfileData:(NSData *)arg1 interactive:(_Bool)arg2 options:(NSDictionary *)arg3 completion:(void (^)(NSString *, NSError *))arg4;
- (void)isProfileInstalledWithIdentifier:(NSString *)arg1 completion:(void (^)(NSError *, _Bool))arg2;
- (void)mayShareToMessagesAndOriginatingAccountIsManaged:(_Bool)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)notifyDeviceUnlockedWithCompletion:(void (^)(NSError *))arg1;
- (void)flushWithCompletion:(void (^)(NSError *))arg1;
- (void)addBookmark:(NSDictionary *)arg1 completion:(void (^)(NSError *))arg2;
- (void)addAllowedURLString:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)setAllowedURLStrings:(NSArray *)arg1 completion:(void (^)(NSError *))arg2;
- (void)allowedImportFromAppBundleIDs:(NSArray *)arg1 importingAppBundleID:(NSString *)arg2 importingIsManaged:(_Bool)arg3 completion:(void (^)(NSArray *, NSError *))arg4;
- (void)allowedOpenInAppBundleIDs:(NSArray *)arg1 originatingAppBundleID:(NSString *)arg2 originatingIsManaged:(_Bool)arg3 completion:(void (^)(NSArray *, NSError *))arg4;
- (void)checkCarrierProfileAndForceReinstallation:(_Bool)arg1 completion:(void (^)(NSError *))arg2;
- (void)checkInWithCompletion:(void (^)(NSError *))arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>

@optional
- (void)connectionDidFinishLoading:(NSURLConnection *)arg1;
- (NSCachedURLResponse *)connection:(NSURLConnection *)arg1 willCacheResponse:(NSCachedURLResponse *)arg2;
- (void)connection:(NSURLConnection *)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (NSInputStream *)connection:(NSURLConnection *)arg1 needNewBodyStream:(NSURLRequest *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveData:(NSData *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveResponse:(NSURLResponse *)arg2;
- (NSURLRequest *)connection:(NSURLConnection *)arg1 willSendRequest:(NSURLRequest *)arg2 redirectResponse:(NSURLResponse *)arg3;
@end

@protocol NSURLConnectionDelegate <NSObject>

@optional
- (void)connection:(NSURLConnection *)arg1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (_Bool)connection:(NSURLConnection *)arg1 canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)arg2;
- (void)connection:(NSURLConnection *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (_Bool)connectionShouldUseCredentialStorage:(NSURLConnection *)arg1;
- (void)connection:(NSURLConnection *)arg1 didFailWithError:(NSError *)arg2;
@end

@interface ACAccount (ManagedConfiguration)
- (id)mcBackingPayload;
- (id)mcBackingProfile;
@property(retain, nonatomic) NSString *mcPayloadUUID;
@property(retain, nonatomic) NSString *mcProfileUUID;
- (_Bool)MCIsManaged;
@end

@interface MCAPNConfiguration : NSObject
{
    NSString *_name;
    NSString *_username;
    NSString *_password;
    NSString *_proxyServer;
    NSNumber *_proxyPort;
    NSString *_authenticationType;
}

@property(retain, nonatomic) NSString *authenticationType; // @synthesize authenticationType=_authenticationType;
@property(retain, nonatomic) NSNumber *proxyPort; // @synthesize proxyPort=_proxyPort;
@property(retain, nonatomic) NSString *proxyServer; // @synthesize proxyServer=_proxyServer;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)localizedAuthenticationType;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 outError:(id *)arg2;

@end

@interface MCAPNInfo : NSObject
{
    NSString *_apnName;
    NSString *_username;
    NSString *_password;
    NSString *_proxy;
    NSNumber *_proxyPort;
}

@property(retain, nonatomic) NSNumber *proxyPort; // @synthesize proxyPort=_proxyPort;
@property(retain, nonatomic) NSString *proxy; // @synthesize proxy=_proxy;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
@property(retain, nonatomic) NSString *apnName; // @synthesize apnName=_apnName;
- (void).cxx_destruct;
- (id)installationWarnings;
- (id)defaultsRepresentation;
- (id)strippedDefaultsRepresentation;
- (id)description;

@end

@interface MCPayload : NSObject
{
    MCProfile *_profile;
    NSString *_type;
    NSString *_payloadDescription;
    NSString *_displayName;
    NSString *_identifier;
    NSString *_organization;
    NSString *_UUID;
    long long _version;
    NSString *_persistentResourceID;
    _Bool _mustInstallNonInteractively;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)localizedParenthesizedFormDescriptionForPayloadCount:(unsigned long long)arg1;
+ (id)localizedDescriptionForPayloadCount:(unsigned long long)arg1;
+ (id)typeStrings;
+ (id)wrapperPayloadDictionary;
+ (id)badFieldValueErrorWithField:(id)arg1 underlyingError:(id)arg2;
+ (id)badFieldValueErrorWithField:(id)arg1;
+ (id)badFieldTypeErrorWithField:(id)arg1;
+ (id)missingFieldErrorWithField:(id)arg1 underlyingError:(id)arg2;
+ (id)payloadFromDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
+ (id)payloadsFromArray:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
@property(nonatomic) _Bool mustInstallNonInteractively; // @synthesize mustInstallNonInteractively=_mustInstallNonInteractively;
@property(retain, nonatomic) NSString *persistentResourceID; // @synthesize persistentResourceID=_persistentResourceID;
@property(readonly, nonatomic) long long version; // @synthesize version=_version;
@property(readonly, retain, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
@property(readonly, retain, nonatomic) NSString *organization; // @synthesize organization=_organization;
@property(readonly, retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, retain, nonatomic) NSString *payloadDescription; // @synthesize payloadDescription=_payloadDescription;
@property(readonly, retain, nonatomic) NSString *type; // @synthesize type=_type;
@property(readonly, nonatomic) __weak MCProfile *profile; // @synthesize profile=_profile;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
@property(readonly, retain, nonatomic) NSArray *installationWarnings;
- (id)description;
@property(readonly, retain, nonatomic) NSString *friendlyName;
@property(readonly, nonatomic) NSDictionary *restrictions;
- (id)stubDictionary;
- (id)malformedPayloadErrorWithError:(id)arg1;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCAPNPayload : MCPayload
{
    NSArray *_apnInfos;
    _Bool _wasInstalled;
}

+ (id)apnDomainName;
+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(nonatomic) _Bool wasInstalled; // @synthesize wasInstalled=_wasInstalled;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)description;
- (id)stubDictionary;
- (id)_strippedAPNDefaults;
- (id)apnDefaults;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
- (void)_finishInitializationWithContents:(id)arg1;
- (_Bool)_checkForValidContents:(id)arg1 outError:(id *)arg2;
- (id)_validationErrorType:(long long)arg1 forInvalidKey:(id)arg2;

@end

@interface MCARCHacks : NSObject
{
}

+ (id)performSelector:(SEL)arg1 withReturnedObjectOnClass:(Class)arg2 withObject:(id)arg3;
+ (void)performSelector:(SEL)arg1 onClass:(Class)arg2 withObject:(id)arg3;

@end

@interface MCAccountUtilities : NSObject
{
}

+ (_Bool)hasManagedAccountOfDataclasses:(id)arg1;
+ (id)accountDataclassesForBundleID:(id)arg1;

@end

@interface MCAirPlayDestination : NSObject
{
    NSString *_deviceID;
    NSString *_deviceName;
    NSString *_password;
}

@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *deviceName; // @synthesize deviceName=_deviceName;
@property(retain, nonatomic) NSString *deviceID; // @synthesize deviceID=_deviceID;
- (void).cxx_destruct;

@end

@interface MCAirPlayPayload : MCPayload
{
    NSArray *_whitelistDestinations;
    NSArray *_destinationsWithPasswords;
    NSArray *_titlesAndDescriptions;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSArray *titlesAndDescriptions; // @synthesize titlesAndDescriptions=_titlesAndDescriptions;
@property(retain, nonatomic) NSArray *destinationsWithPasswords; // @synthesize destinationsWithPasswords=_destinationsWithPasswords;
@property(retain, nonatomic) NSArray *whitelistDestinations; // @synthesize whitelistDestinations=_whitelistDestinations;
- (void).cxx_destruct;
- (id)description;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCAirPrintPayload : MCPayload
{
    unsigned long long _airPrintCount;
    NSMutableArray *_ippAddresses;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSMutableArray *ippAddresses; // @synthesize ippAddresses=_ippAddresses;
@property(nonatomic) unsigned long long airPrintCount; // @synthesize airPrintCount=_airPrintCount;
- (void).cxx_destruct;
- (id)restrictions;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCVPNPayloadBase : MCPayload
{
    NSMutableDictionary *_configurationDictionary;
    NSString *_serviceName;
    NSString *_vpnType;
    NSString *_userNameKey;
    NSString *_passwordKey;
    NSString *_proxyUserNameKey;
    NSString *_proxyPasswordKey;
    NSString *_sharedSecretKey;
    NSString *_pinKey;
}

@property(retain, nonatomic) NSString *pinKey; // @synthesize pinKey=_pinKey;
@property(retain, nonatomic) NSString *sharedSecretKey; // @synthesize sharedSecretKey=_sharedSecretKey;
@property(retain, nonatomic) NSString *proxyPasswordKey; // @synthesize proxyPasswordKey=_proxyPasswordKey;
@property(retain, nonatomic) NSString *proxyUserNameKey; // @synthesize proxyUserNameKey=_proxyUserNameKey;
@property(retain, nonatomic) NSString *passwordKey; // @synthesize passwordKey=_passwordKey;
@property(retain, nonatomic) NSString *userNameKey; // @synthesize userNameKey=_userNameKey;
@property(copy, nonatomic) NSString *vpnType; // @synthesize vpnType=_vpnType;
@property(copy, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property(retain, nonatomic) NSMutableDictionary *configurationDictionary; // @synthesize configurationDictionary=_configurationDictionary;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)installationWarnings;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCAppLayerVPNPayload : MCVPNPayloadBase
{
    NSString *_VPNUUID;
    NSArray *_SafariDomains;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSArray *SafariDomains; // @synthesize SafariDomains=_SafariDomains;
@property(retain, nonatomic) NSString *VPNUUID; // @synthesize VPNUUID=_VPNUUID;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCAppWhitelistPayloadBase : MCPayload
{
    _Bool _allowAccessWithoutPasscode;
    _Bool _forceAllowSupervisorAccess;
    NSArray *_whitelistedAppsAndOptions;
}

+ (id)knownUserEnabledOptionKeys;
+ (id)knownOptionsKeys;
@property(nonatomic) _Bool forceAllowSupervisorAccess; // @synthesize forceAllowSupervisorAccess=_forceAllowSupervisorAccess;
@property(nonatomic) _Bool allowAccessWithoutPasscode; // @synthesize allowAccessWithoutPasscode=_allowAccessWithoutPasscode;
@property(retain, nonatomic) NSArray *whitelistedAppsAndOptions; // @synthesize whitelistedAppsAndOptions=_whitelistedAppsAndOptions;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)stubDictionary;
- (id)restrictions;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCBook : NSObject <NSCopying>
{
    NSString *_author;
    NSString *_title;
    NSString *_kind;
    NSString *_fullPath;
    NSString *_version;
    NSString *_persistentID;
    NSNumber *_iTunesStoreID;
    NSString *_buyParams;
    NSString *_state;
    NSNumber *_downloadIdentifier;
    MCBook *_previousVersion;
}

@property(retain, nonatomic) MCBook *previousVersion; // @synthesize previousVersion=_previousVersion;
@property(retain, nonatomic) NSNumber *downloadIdentifier; // @synthesize downloadIdentifier=_downloadIdentifier;
@property(retain, nonatomic) NSString *state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *buyParams; // @synthesize buyParams=_buyParams;
@property(retain, nonatomic) NSNumber *iTunesStoreID; // @synthesize iTunesStoreID=_iTunesStoreID;
@property(copy, nonatomic) NSString *persistentID; // @synthesize persistentID=_persistentID;
@property(copy, nonatomic) NSString *version; // @synthesize version=_version;
@property(copy, nonatomic) NSString *fullPath; // @synthesize fullPath=_fullPath;
@property(copy, nonatomic) NSString *kind; // @synthesize kind=_kind;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(copy, nonatomic) NSString *author; // @synthesize author=_author;
- (void).cxx_destruct;
- (id)description;
- (void)updateBookAttributesByCopyingFromBook:(id)arg1;
- (id)friendlyName;
- (id)manifestDictionary;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithManifestDictionary:(id)arg1;
- (id)init;

@end

@interface MCBookmark : NSObject <NSCopying>
{
    NSURL *_URL;
    NSString *_title;
    NSString *_path;
}

@property(retain, nonatomic) NSString *path; // @synthesize path=_path;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSURL *URL; // @synthesize URL=_URL;
- (void).cxx_destruct;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)serializableDictionary;
- (id)initWithSerializableDictionary:(id)arg1;

@end

@interface MCBookmarkManager : NSObject
{
    int _notificationToken;
    NSObject<OS_dispatch_queue> *_memberQueue;
    NSArray *_memberQueueCurrentUserBookmarks;
    NSDictionary *_memberQueueStashedBookmarksByLabel;
}

+ (id)sharedManager;
@property(nonatomic) int notificationToken; // @synthesize notificationToken=_notificationToken;
@property(retain, nonatomic) NSDictionary *memberQueueStashedBookmarksByLabel; // @synthesize memberQueueStashedBookmarksByLabel=_memberQueueStashedBookmarksByLabel;
@property(retain, nonatomic) NSArray *memberQueueCurrentUserBookmarks; // @synthesize memberQueueCurrentUserBookmarks=_memberQueueCurrentUserBookmarks;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *memberQueue; // @synthesize memberQueue=_memberQueue;
- (void).cxx_destruct;
- (void)unstashUserBookmarksFromLabel:(id)arg1;
- (void)stashUserBookmarksWithLabel:(id)arg1 newUserBookmarks:(id)arg2;
- (void)memberQueueStashUserBookmarksWithLabel:(id)arg1 newUserBookmarks:(id)arg2;
- (void)memberQueueSetStashedUserBookmarksByLabel:(id)arg1;
@property(copy, nonatomic) NSArray *userBookmarks;
- (void)memberQueueSetUserBookmarks:(id)arg1;
- (void)memberQueueRereadBookmarks;
- (id)init;

@end

@interface MCCalDAVAccountPayload : MCPayload
{
    NSString *_accountDescription;
    NSString *_hostname;
    NSString *_username;
    NSString *_password;
    NSString *_principalURL;
    _Bool _useSSL;
    int _port;
    NSString *_accountPersistentUUID;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(copy, nonatomic) NSString *accountPersistentUUID; // @synthesize accountPersistentUUID=_accountPersistentUUID;
@property(readonly, nonatomic) int port; // @synthesize port=_port;
@property(readonly, nonatomic) _Bool useSSL; // @synthesize useSSL=_useSSL;
@property(readonly, retain, nonatomic) NSString *principalURL; // @synthesize principalURL=_principalURL;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *username; // @synthesize username=_username;
@property(readonly, retain, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(readonly, retain, nonatomic) NSString *accountDescription; // @synthesize accountDescription=_accountDescription;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)stubDictionary;
- (id)description;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCCardDAVAccountPayload : MCPayload
{
    NSString *_accountDescription;
    NSString *_hostname;
    NSString *_username;
    NSString *_password;
    NSString *_principalURL;
    _Bool _useSSL;
    int _port;
    NSString *_accountPersistentUUID;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(copy, nonatomic) NSString *accountPersistentUUID; // @synthesize accountPersistentUUID=_accountPersistentUUID;
@property(readonly, nonatomic) int port; // @synthesize port=_port;
@property(readonly, nonatomic) _Bool useSSL; // @synthesize useSSL=_useSSL;
@property(readonly, retain, nonatomic) NSString *principalURL; // @synthesize principalURL=_principalURL;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *username; // @synthesize username=_username;
@property(readonly, retain, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(readonly, retain, nonatomic) NSString *accountDescription; // @synthesize accountDescription=_accountDescription;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)stubDictionary;
- (id)description;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCCellularPayload : MCPayload
{
    MCAPNConfiguration *_attachAPN;
    NSArray *_APNs;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSArray *APNs; // @synthesize APNs=_APNs;
@property(retain, nonatomic) MCAPNConfiguration *attachAPN; // @synthesize attachAPN=_attachAPN;
- (void).cxx_destruct;
- (id)installationWarnings;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)APNsDescription;
- (id)APNsLabel;
- (id)APNConfigurationDescription;
- (id)attachAPNConfigurationLabel;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCCertificatePayload : MCPayload
{
    NSData *_certificatePersistentID;
    NSString *_installedOnDeviceID;
}

@property(copy, nonatomic) NSString *installedOnDeviceID; // @synthesize installedOnDeviceID=_installedOnDeviceID;
@property(retain, nonatomic) NSData *certificatePersistentID; // @synthesize certificatePersistentID=_certificatePersistentID;
- (void).cxx_destruct;
@property(readonly, retain, nonatomic) NSDate *expiry;
- (id)description;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
@property(readonly, nonatomic) _Bool isIdentity;
@property(readonly, nonatomic) _Bool isRoot;
- (struct __SecIdentity *)copyIdentityFromKeychain;
- (struct __SecCertificate *)copyCertificate;
- (id)stubDictionary;
@property(readonly, nonatomic) _Bool isSigned;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCProfile : NSObject
{
    int _trustQueueTrustLevel;
    _Bool _trustQueueTrustHasBeenEvaluated;
    NSObject<OS_dispatch_queue> *_trustEvaluationQueue;
    NSString *_signerQueueSignerSummary;
    NSArray *_signerQueueSignerCertificates;
    NSObject<OS_dispatch_queue> *_signerEvaluationQueue;
    _Bool _encrypted;
    _Bool _isLocked;
    _Bool _needsReboot;
    _Bool _isStub;
    _Bool _mustInstallNonInteractively;
    NSString *_profileDescription;
    NSString *_displayName;
    NSString *_identifier;
    NSString *_UUID;
    NSString *_organization;
    long long _version;
    NSDate *_installDate;
    NSDate *_expiryDate;
    NSString *_removalPasscode;
    NSString *_productVersion;
    NSString *_productBuildVersion;
    NSDate *_removalDate;
    NSDictionary *_installOptions;
    NSString *_localizedConsentText;
}

+ (id)profileWithData:(id)arg1 fileName:(id)arg2 outError:(id *)arg3;
+ (id)profileWithData:(id)arg1 outError:(id *)arg2;
+ (id)dataFromCMSEncodedData:(id)arg1 outSignerCertificates:(id *)arg2;
+ (id)signerSummaryOfCertificate:(struct __SecCertificate *)arg1;
+ (int)evaluateTrustOfCertificateChain:(id)arg1 outIsAllowedToWriteDefaults:(_Bool *)arg2;
+ (int)evaluateTrustOfCertificateChain:(id)arg1;
+ (int)evaluateTrust:(struct __SecTrust *)arg1;
+ (_Bool)checkString:(id)arg1 isOneOfStrings:(id)arg2 key:(id)arg3 errorDomain:(id)arg4 errorCode:(long long)arg5 errorString:(id)arg6 outError:(id *)arg7;
+ (id)removeOptionalNonZeroLengthStringInDictionary:(id)arg1 key:(id)arg2 errorDomain:(id)arg3 invalidDataCode:(long long)arg4 invalidDataErrorString:(id)arg5 outError:(id *)arg6;
+ (id)removeRequiredNonZeroLengthStringInDictionary:(id)arg1 key:(id)arg2 errorDomain:(id)arg3 missingDataCode:(long long)arg4 missingDataErrorString:(id)arg5 invalidDataCode:(long long)arg6 invalidDataErrorString:(id)arg7 outError:(id *)arg8;
+ (id)removeOptionalObjectInDictionary:(id)arg1 key:(id)arg2 type:(Class)arg3 errorDomain:(id)arg4 invalidDataCode:(long long)arg5 invalidDataErrorString:(id)arg6 outError:(id *)arg7;
+ (id)removeRequiredObjectInDictionary:(id)arg1 key:(id)arg2 type:(Class)arg3 errorDomain:(id)arg4 missingDataCode:(long long)arg5 missingDataErrorString:(id)arg6 invalidDataCode:(long long)arg7 invalidDataErrorString:(id)arg8 outError:(id *)arg9;
+ (id)profileWithDictionary:(id)arg1 fileName:(id)arg2 allowEmptyPayload:(_Bool)arg3 outError:(id *)arg4;
+ (id)profileDictionaryFromProfileData:(id)arg1 outError:(id *)arg2;
+ (id)profileWithData:(id)arg1 fileName:(id)arg2 allowEmptyPayload:(_Bool)arg3 outError:(id *)arg4;
+ (id)missingFieldErrorWithField:(id)arg1;
+ (id)badFieldTypeErrorWithField:(id)arg1;
+ (id)_malformedProfileError;
@property(readonly, nonatomic) NSString *localizedConsentText; // @synthesize localizedConsentText=_localizedConsentText;
@property(nonatomic) _Bool mustInstallNonInteractively; // @synthesize mustInstallNonInteractively=_mustInstallNonInteractively;
@property(retain, nonatomic) NSDictionary *installOptions; // @synthesize installOptions=_installOptions;
@property(readonly, nonatomic) NSDate *removalDate; // @synthesize removalDate=_removalDate;
@property(readonly, retain, nonatomic) NSString *productBuildVersion; // @synthesize productBuildVersion=_productBuildVersion;
@property(readonly, retain, nonatomic) NSString *productVersion; // @synthesize productVersion=_productVersion;
@property(readonly, nonatomic) _Bool isStub; // @synthesize isStub=_isStub;
@property(readonly, nonatomic) _Bool needsReboot; // @synthesize needsReboot=_needsReboot;
@property(nonatomic, getter=isLocked) _Bool locked; // @synthesize locked=_isLocked;
@property(retain, nonatomic) NSDate *installDate; // @synthesize installDate=_installDate;
@property(readonly, nonatomic) long long version; // @synthesize version=_version;
@property(readonly, retain, nonatomic) NSString *organization; // @synthesize organization=_organization;
@property(nonatomic, getter=isEncrypted) _Bool encrypted; // @synthesize encrypted=_encrypted;
@property(readonly, retain, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
@property(readonly, retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, retain, nonatomic) NSString *profileDescription; // @synthesize profileDescription=_profileDescription;
- (void).cxx_destruct;
- (id)appAccessibilityParameters;
- (id)restrictionsWithHeuristicsAppliedOutError:(id *)arg1;
- (_Bool)mayInstallWithOptions:(id)arg1 hasInteractionClient:(_Bool)arg2 outError:(id *)arg3;
- (void)evaluateSignerTrustAsynchronouslyWithCompletion:(CDUnknownBlockType)arg1;
- (void)evaluateSignerTrust;
@property(readonly, nonatomic) _Bool isManagedByProfileService;
@property(readonly, retain, nonatomic) NSDate *expiryDate; // @synthesize expiryDate=_expiryDate;
@property(readonly, retain, nonatomic) NSDate *earliestCertificateExpiryDate;
@property(readonly, retain, nonatomic) NSArray *localizedManagedPayloadSummaryByType;
@property(readonly, retain, nonatomic) NSArray *localizedPayloadSummaryByType;
- (id)description;
@property(readonly, retain, nonatomic) NSString *friendlyName;
@property(readonly, nonatomic) _Bool isSigned;
- (id)subjectSummaryFromCertificateWithPersistentID:(id)arg1;
- (struct __SecCertificate *)copyCertificateWithPersistentID:(id)arg1;
- (id)subjectSummaryFromCertificatePayloadWithUUID:(id)arg1;
- (struct __SecCertificate *)copyCertificateFromPayloadWithUUID:(id)arg1;
- (id)payloadWithUUID:(id)arg1;
@property(readonly, retain, nonatomic) NSArray *managedPayloads;
@property(readonly, retain, nonatomic) NSArray *payloads;
- (id)installationWarningsIncludeUnsignedProfileWarning:(_Bool)arg1;
@property(readonly, retain, nonatomic) NSArray *installationWarnings;
@property(retain, nonatomic) NSArray *signerCertificates;
@property(readonly, nonatomic) NSString *signerSummary;
@property(readonly, nonatomic) struct __SecCertificate *signerCertificate;
@property(readonly, nonatomic) int trustLevel;
@property(retain, nonatomic) NSString *removalPasscode; // @synthesize removalPasscode=_removalPasscode;
- (unsigned long long)countOfPayloadsOfClass:(Class)arg1;
- (_Bool)containsPayloadOfClass:(Class)arg1;
- (id)stubDictionary;
- (_Bool)writeStubToPath:(id)arg1;
- (_Bool)writeStubToDirectory:(id)arg1;
- (id)malformedProfileErrorWithError:(id)arg1;
- (id)initWithDictionary:(id)arg1 allowEmptyPayload:(_Bool)arg2 outError:(id *)arg3;
@property(readonly, retain, nonatomic) NSString *profileIDHashFileName;
@property(readonly, retain, nonatomic) NSString *stubFileName;

@end

@interface MCConfigurationProfile : MCProfile
{
    NSArray *_payloads;
    NSArray *_managedPayloads;
    _Bool _isCloudProfile;
    _Bool _isCloudLocked;
    _Bool _isMDMProfile;
    MCProfileServiceProfile *_OTAProfile;
}

@property(nonatomic) _Bool isMDMProfile; // @synthesize isMDMProfile=_isMDMProfile;
@property(nonatomic) _Bool isCloudLocked; // @synthesize isCloudLocked=_isCloudLocked;
@property(nonatomic) _Bool isCloudProfile; // @synthesize isCloudProfile=_isCloudProfile;
@property(retain, nonatomic) MCProfileServiceProfile *OTAProfile; // @synthesize OTAProfile=_OTAProfile;
- (void).cxx_destruct;
- (id)earliestCertificateExpiryDate;
- (id)localizedManagedPayloadSummaryByType;
- (id)localizedPayloadSummaryByType;
- (id)_localizedPayloadSummaryByType:(id)arg1;
- (id)stubDictionary;
- (id)description;
- (id)installationWarningsIncludeUnsignedProfileWarning:(_Bool)arg1;
- (_Bool)isManagedByProfileService;
- (id)initWithDictionary:(id)arg1 allowEmptyPayload:(_Bool)arg2 outError:(id *)arg3;
- (id)subjectSummaryFromCertificateWithPersistentID:(id)arg1;
- (struct __SecCertificate *)copyCertificateWithPersistentID:(id)arg1;
- (id)subjectSummaryFromCertificatePayloadWithUUID:(id)arg1;
- (struct __SecCertificate *)copyCertificateFromPayloadWithUUID:(id)arg1;
- (id)_subjectSummaryFromCertificate:(struct __SecCertificate *)arg1;
- (id)payloadWithUUID:(id)arg1;
- (id)managedPayloads;
- (id)payloads;
- (void)_sortPayloads;
- (id)_sortPayloads:(id)arg1;
- (void)_addObjectsOfClass:(Class)arg1 fromArray:(id)arg2 toArray:(id)arg3;

@end

@interface MCCertificateWrapperProfile : MCConfigurationProfile
{
}

+ (id)wrapperProfileDictionaryWithCertificateData:(id)arg1 fileName:(id)arg2;
+ (id)_wrapperProfileForWAPICertificate:(struct __SecCertificate *)arg1 fileName:(id)arg2 PEMData:(id)arg3;
+ (id)_wrapperProfileDictForCertificate:(struct __SecCertificate *)arg1 fileName:(id)arg2 certData:(id)arg3 type:(id)arg4;
+ (id)_basicWrapperProfileDictForCertificateName:(id)arg1 fileName:(id)arg2 identifier:(id)arg3;
+ (id)_wrapperWAPIPayloadDictWithPEMData:(id)arg1 fileName:(id)arg2 name:(id)arg3 identifier:(id)arg4;
+ (id)_wrapperPayloadDictWithCertData:(id)arg1 fileName:(id)arg2 name:(id)arg3 identifier:(id)arg4 type:(id)arg5;
+ (id)_identifierHashFromData:(id)arg1;
- (id)earliestCertificateExpiryDate;
- (_Bool)isSigned;
- (int)trustLevel;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 allowEmptyPayload:(_Bool)arg2 outError:(id *)arg3;
- (id)_certificatePayload;

@end

@interface MCChaperonePayload : MCPayload
{
    NSData *_pairingCertificateData;
    _Bool _nonChaperonePairingAllowed;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, nonatomic) _Bool nonChaperonePairingAllowed; // @synthesize nonChaperonePairingAllowed=_nonChaperonePairingAllowed;
@property(readonly, retain, nonatomic) NSData *pairingCertificateData; // @synthesize pairingCertificateData=_pairingCertificateData;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCCloudConfiguration : NSObject
{
    NSObject<OS_dispatch_queue> *_memberQueue;
    NSDictionary *_memberQueueDetails;
}

+ (id)sharedConfiguration;
@property(retain, nonatomic) NSDictionary *memberQueueDetails; // @synthesize memberQueueDetails=_memberQueueDetails;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *memberQueue; // @synthesize memberQueue=_memberQueue;
- (void).cxx_destruct;
- (_Bool)isSupervised;
@property(copy, nonatomic) NSDictionary *details;
- (void)refreshDetailsFromDisk;
- (id)init;

@end

@interface MCCrypto : NSObject
{
}

+ (id)storedActivationLockBypassCodeHash;
+ (void)clearStoredActivationLockHash;
+ (void)clearStoredActivationLockBypassCode;
+ (id)storedActivationLockBypassCode;
+ (id)storeActivationLockBypassCode:(id)arg1 hash:(id)arg2;
+ (void)createNewActivationLockBypassCodeOutCode:(char *)arg1 outRawBytes:(char *)arg2 outHash:(char *)arg3;
+ (id)createAndStoreNewActivationLockBypassCodeAndHash;
+ (id)objectFromEncryptedData:(id)arg1 outCertificate:(struct __SecCertificate **)arg2 outError:(id *)arg3;
+ (id)_decryptionFailedError;
+ (_Bool)isValidPKCS12Data:(id)arg1;
+ (struct __SecCertificate *)copyCertificateRefFromPEMData:(id)arg1;
+ (struct __SecCertificate *)copyCertificateRefFromPKCS1Data:(id)arg1;

@end

@interface MCDefaultsPayload : MCPayload
{
    NSDictionary *_defaultsByDomain;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
- (void).cxx_destruct;
- (id)title;
- (id)defaultsForDomain:(id)arg1;
- (id)domains;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
- (_Bool)isAllowedToWriteDefaults;

@end

@interface MCDependencyReader : NSObject
{
    NSMutableDictionary *_domainsDict;
}

+ (id)sharedReader;
@property(retain, nonatomic) NSMutableDictionary *domainsDict; // @synthesize domainsDict=_domainsDict;
- (void).cxx_destruct;
- (void)invalidateCache;
- (id)dependentsOfParent:(id)arg1 inDomain:(id)arg2;
- (id)parentsInDomain:(id)arg1;
- (id)_domainsDictionaryForDomain:(id)arg1 parent:(id)arg2 outParentsDict:(id *)arg3 outDependents:(id *)arg4;
- (id)_init;
- (id)init;

@end

@interface MCDeviceCapabilities : NSObject
{
    _Bool _supportsBlockLevelEncryption;
    _Bool _supportsFileLevelEncryption;
}

+ (id)currentDevice;
@property(readonly, nonatomic) _Bool supportsFileLevelEncryption; // @synthesize supportsFileLevelEncryption=_supportsFileLevelEncryption;
@property(readonly, nonatomic) _Bool supportsBlockLevelEncryption; // @synthesize supportsBlockLevelEncryption=_supportsBlockLevelEncryption;
- (_Bool)validateCapabilitiesRequiredByRestrictions:(id)arg1 localizedIncompatibilityMessage:(id)arg2 outError:(id *)arg3;
- (id)init;
- (_Bool)_mediaDiskIsEncrypted;

@end

@interface MCDomainsPayload : MCPayload
{
    NSDictionary *_restrictions;
}

+ (_Bool)isPatternValid:(id)arg1 outError:(id *)arg2;
+ (id)invalidDomainPatternErrorWithPattern:(id)arg1;
+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSDictionary *restrictions; // @synthesize restrictions=_restrictions;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCEmailAccountPayloadBase : MCPayload
{
    _Bool _preventMove;
    _Bool _preventAppSheet;
    _Bool _SMIMEEnabled;
    _Bool _isRecentsSyncingDisabled;
    _Bool _SMIMEPerMessageSwitchEnabled;
    NSString *_SMIMESigningIdentityUUID;
    NSString *_SMIMEEncryptionIdentityUUID;
    NSData *_SMIMESigningIdentityPersistentID;
    NSData *_SMIMEEncryptionIdentityPersistentID;
}

@property(nonatomic) _Bool SMIMEPerMessageSwitchEnabled; // @synthesize SMIMEPerMessageSwitchEnabled=_SMIMEPerMessageSwitchEnabled;
@property(retain, nonatomic) NSData *SMIMEEncryptionIdentityPersistentID; // @synthesize SMIMEEncryptionIdentityPersistentID=_SMIMEEncryptionIdentityPersistentID;
@property(retain, nonatomic) NSData *SMIMESigningIdentityPersistentID; // @synthesize SMIMESigningIdentityPersistentID=_SMIMESigningIdentityPersistentID;
@property(retain, nonatomic) NSString *SMIMEEncryptionIdentityUUID; // @synthesize SMIMEEncryptionIdentityUUID=_SMIMEEncryptionIdentityUUID;
@property(retain, nonatomic) NSString *SMIMESigningIdentityUUID; // @synthesize SMIMESigningIdentityUUID=_SMIMESigningIdentityUUID;
@property(nonatomic) _Bool isRecentsSyncingDisabled; // @synthesize isRecentsSyncingDisabled=_isRecentsSyncingDisabled;
@property(nonatomic) _Bool SMIMEEnabled; // @synthesize SMIMEEnabled=_SMIMEEnabled;
@property(nonatomic) _Bool preventAppSheet; // @synthesize preventAppSheet=_preventAppSheet;
@property(nonatomic) _Bool preventMove; // @synthesize preventMove=_preventMove;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCEASAccountPayload : MCEmailAccountPayloadBase
{
    NSString *_accountDescription;
    NSString *_hostname;
    NSString *_username;
    NSString *_password;
    NSString *_emailAddress;
    NSNumber *_mailNumberOfPastDaysToSync;
    NSData *_embeddedCertificate;
    NSString *_embeddedCertificateName;
    NSString *_embeddedCertificatePassword;
    NSString *_certificateUUID;
    NSString *_accountPersistentUUID;
    NSData *_certificatePersistentID;
    _Bool _syncDefaultFoldersOnly;
    NSNumber *_useSSL;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSNumber *useSSL; // @synthesize useSSL=_useSSL;
@property(nonatomic) _Bool syncDefaultFoldersOnly; // @synthesize syncDefaultFoldersOnly=_syncDefaultFoldersOnly;
@property(retain, nonatomic) NSData *certificatePersistentID; // @synthesize certificatePersistentID=_certificatePersistentID;
@property(copy, nonatomic) NSString *accountPersistentUUID; // @synthesize accountPersistentUUID=_accountPersistentUUID;
@property(readonly, retain, nonatomic) NSString *certificateUUID; // @synthesize certificateUUID=_certificateUUID;
@property(copy, nonatomic) NSString *embeddedCertificatePassword; // @synthesize embeddedCertificatePassword=_embeddedCertificatePassword;
@property(readonly, retain, nonatomic) NSString *embeddedCertificateName; // @synthesize embeddedCertificateName=_embeddedCertificateName;
@property(readonly, retain, nonatomic) NSData *embeddedCertificate; // @synthesize embeddedCertificate=_embeddedCertificate;
@property(readonly, retain, nonatomic) NSNumber *mailNumberOfPastDaysToSync; // @synthesize mailNumberOfPastDaysToSync=_mailNumberOfPastDaysToSync;
@property(copy, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *username; // @synthesize username=_username;
@property(readonly, retain, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(readonly, retain, nonatomic) NSString *accountDescription; // @synthesize accountDescription=_accountDescription;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)stubDictionary;
- (id)description;
@property(readonly, nonatomic) _Bool hasCertificate;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCEmailAccountPayload : MCEmailAccountPayloadBase
{
    NSString *_emailAccountDescription;
    NSString *_emailAccountName;
    NSString *_emailAccountType;
    NSString *_emailAddress;
    NSString *_incomingMailServerAuthentication;
    NSString *_incomingMailServerHostname;
    NSNumber *_incomingMailServerPortNumber;
    _Bool _incomingMailServerUseSSL;
    NSString *_incomingMailServerUsername;
    NSString *_incomingMailServerIMAPPathPrefix;
    NSString *_incomingPassword;
    NSString *_outgoingPassword;
    _Bool _outgoingPasswordSameAsIncomingPassword;
    NSString *_outgoingMailServerAuthentication;
    NSString *_outgoingMailServerHostname;
    NSNumber *_outgoingMailServerPortNumber;
    _Bool _outgoingMailServerUseSSL;
    NSString *_outgoingMailServerUsername;
}

+ (id)profileNameFromAccountTag:(id)arg1;
+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, retain, nonatomic) NSString *outgoingMailServerUsername; // @synthesize outgoingMailServerUsername=_outgoingMailServerUsername;
@property(readonly, nonatomic) _Bool outgoingMailServerUseSSL; // @synthesize outgoingMailServerUseSSL=_outgoingMailServerUseSSL;
@property(readonly, retain, nonatomic) NSNumber *outgoingMailServerPortNumber; // @synthesize outgoingMailServerPortNumber=_outgoingMailServerPortNumber;
@property(readonly, retain, nonatomic) NSString *outgoingMailServerHostname; // @synthesize outgoingMailServerHostname=_outgoingMailServerHostname;
@property(readonly, retain, nonatomic) NSString *outgoingMailServerAuthentication; // @synthesize outgoingMailServerAuthentication=_outgoingMailServerAuthentication;
@property(readonly, nonatomic) _Bool outgoingPasswordSameAsIncomingPassword; // @synthesize outgoingPasswordSameAsIncomingPassword=_outgoingPasswordSameAsIncomingPassword;
@property(readonly, retain, nonatomic) NSString *outgoingPassword; // @synthesize outgoingPassword=_outgoingPassword;
@property(readonly, retain, nonatomic) NSString *incomingPassword; // @synthesize incomingPassword=_incomingPassword;
@property(readonly, retain, nonatomic) NSString *incomingMailServerIMAPPathPrefix; // @synthesize incomingMailServerIMAPPathPrefix=_incomingMailServerIMAPPathPrefix;
@property(readonly, retain, nonatomic) NSString *incomingMailServerUsername; // @synthesize incomingMailServerUsername=_incomingMailServerUsername;
@property(readonly, nonatomic) _Bool incomingMailServerUseSSL; // @synthesize incomingMailServerUseSSL=_incomingMailServerUseSSL;
@property(readonly, retain, nonatomic) NSNumber *incomingMailServerPortNumber; // @synthesize incomingMailServerPortNumber=_incomingMailServerPortNumber;
@property(readonly, retain, nonatomic) NSString *incomingMailServerHostname; // @synthesize incomingMailServerHostname=_incomingMailServerHostname;
@property(readonly, retain, nonatomic) NSString *incomingMailServerAuthentication; // @synthesize incomingMailServerAuthentication=_incomingMailServerAuthentication;
@property(readonly, retain, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(readonly, retain, nonatomic) NSString *emailAccountType; // @synthesize emailAccountType=_emailAccountType;
@property(readonly, retain, nonatomic) NSString *emailAccountName; // @synthesize emailAccountName=_emailAccountName;
@property(readonly, retain, nonatomic) NSString *emailAccountDescription; // @synthesize emailAccountDescription=_emailAccountDescription;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)_authenticationTypeLocalizedString:(id)arg1;
- (id)_emailAccountTypeLocalizedString;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCEncryptedProfileServicePayload : MCPayload
{
    NSString *_urlString;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
- (void).cxx_destruct;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)description;
- (id)initWithURLString:(id)arg1 profile:(id)arg2;

@end

@interface MCFontPayload : MCPayload
{
    NSData *_fontData;
    NSString *_name;
    NSURL *_persistentURL;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSURL *persistentURL; // @synthesize persistentURL=_persistentURL;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSData *fontData; // @synthesize fontData=_fontData;
- (void).cxx_destruct;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCFormatterVendor : NSObject
{
    NSNumberFormatter *_numberFormatter;
    NSObject<OS_dispatch_queue> *_syncQueue;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;
- (void)_localeDidChange:(id)arg1;
- (id)numberFormatter;

@end

@interface MCGlobalHTTPProxyPayload : MCPayload
{
    _Bool _proxyPACFallbackAllowed;
    _Bool _proxyCaptiveLoginAllowed;
    int _proxyType;
    NSString *_proxyServer;
    NSNumber *_proxyServerPort;
    NSString *_proxyUsername;
    NSString *_proxyPassword;
    NSString *_proxyPACURLString;
    NSString *_credentialUUID;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(nonatomic) _Bool proxyCaptiveLoginAllowed; // @synthesize proxyCaptiveLoginAllowed=_proxyCaptiveLoginAllowed;
@property(nonatomic) _Bool proxyPACFallbackAllowed; // @synthesize proxyPACFallbackAllowed=_proxyPACFallbackAllowed;
@property(retain, nonatomic) NSString *credentialUUID; // @synthesize credentialUUID=_credentialUUID;
@property(retain, nonatomic) NSString *proxyPACURLString; // @synthesize proxyPACURLString=_proxyPACURLString;
@property(retain, nonatomic) NSString *proxyPassword; // @synthesize proxyPassword=_proxyPassword;
@property(retain, nonatomic) NSString *proxyUsername; // @synthesize proxyUsername=_proxyUsername;
@property(retain, nonatomic) NSNumber *proxyServerPort; // @synthesize proxyServerPort=_proxyServerPort;
@property(retain, nonatomic) NSString *proxyServer; // @synthesize proxyServer=_proxyServer;
@property(nonatomic) int proxyType; // @synthesize proxyType=_proxyType;
- (void).cxx_destruct;
- (id)installationWarnings;
- (id)description;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCHTTPRequestor : NSObject <NSURLConnectionDataDelegate>
{
    _Bool _didFailDueToMissingCredentials;
    _Bool _shouldUseResponseBodyAsLoginPrompt;
    NSURLConnection *_connection;
    NSMutableData *_responseData;
    NSString *_username;
    NSString *_password;
    NSArray *_anchorCertificates;
    CDUnknownBlockType _completionBlock;
    id _selfReference;
}

@property(nonatomic) _Bool shouldUseResponseBodyAsLoginPrompt; // @synthesize shouldUseResponseBodyAsLoginPrompt=_shouldUseResponseBodyAsLoginPrompt;
@property(nonatomic) _Bool didFailDueToMissingCredentials; // @synthesize didFailDueToMissingCredentials=_didFailDueToMissingCredentials;
@property(retain, nonatomic) id selfReference; // @synthesize selfReference=_selfReference;
@property(copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property(retain, nonatomic) NSArray *anchorCertificates; // @synthesize anchorCertificates=_anchorCertificates;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *username; // @synthesize username=_username;
@property(retain, nonatomic) NSMutableData *responseData; // @synthesize responseData=_responseData;
@property(retain, nonatomic) NSURLConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)didFinishWithError:(id)arg1;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (void)startWithRequest:(id)arg1 username:(id)arg2 password:(id)arg3 anchorCertificates:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCHTTPTransaction : NSObject
{
    NSURL *_requestURL;
    NSString *_method;
    double _timeout;
    NSString *_userAgent;
    NSString *_contentType;
    NSData *_data;
    struct __SecIdentity *_identity;
    NSString *_CMSSignatureHeaderName;
    NSURL *_currentURL;
    NSURL *_permanentlyRedirectedURL;
    _Bool _rememberData;
    NSMutableData *_responseData;
    long long _statusCode;
    NSError *_error;
    NSURLConnection *_connection;
    NSObject<OS_dispatch_semaphore> *_doneSema;
}

+ (id)performRequestURL:(id)arg1 method:(id)arg2 timeout:(double)arg3 userAgent:(id)arg4 contentType:(id)arg5 data:(id)arg6 identity:(struct __SecIdentity *)arg7 outPermanentlyRedirectedURL:(id *)arg8 outError:(id *)arg9;
+ (id)transactionWithURL:(id)arg1 method:(id)arg2;
@property(readonly, nonatomic) long long statusCode; // @synthesize statusCode=_statusCode;
@property(readonly, retain, nonatomic) NSURL *permanentlyRedirectedURL; // @synthesize permanentlyRedirectedURL=_permanentlyRedirectedURL;
@property(readonly, retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSString *CMSSignatureHeaderName; // @synthesize CMSSignatureHeaderName=_CMSSignatureHeaderName;
@property(readonly, retain, nonatomic) NSData *responseData; // @synthesize responseData=_responseData;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(retain, nonatomic) NSString *contentType; // @synthesize contentType=_contentType;
@property(retain, nonatomic) NSString *userAgent; // @synthesize userAgent=_userAgent;
@property(nonatomic) double timeout; // @synthesize timeout=_timeout;
@property(retain, nonatomic) NSString *method; // @synthesize method=_method;
@property(retain, nonatomic) NSURL *url; // @synthesize url=_requestURL;
- (void).cxx_destruct;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (_Bool)_shouldAllowTrust:(struct __SecTrust *)arg1 forHost:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (_Bool)connectionShouldUseCredentialStorage:(id)arg1;
- (_Bool)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)performCompletionBlock:(CDUnknownBlockType)arg1;
- (void)performSynchronously;
- (void)_beginTransaction;
- (void)dealloc;
- (id)initWithURL:(id)arg1 method:(id)arg2;
- (void)setIdentity:(struct __SecIdentity *)arg1;
- (struct __SecIdentity *)copyIdentity;

@end

@interface MCHacks : NSObject
{
}

+ (id)sharedHacks;
- (_Bool)isSetupBuddyDone;
- (_Bool)sanitizedProfileSignerCertificateChainIsAllowedToWriteDefaults:(id)arg1;
- (void)_sendChangeNotificationsBasedOnDefaultsRemovalByDomain:(id)arg1;
- (void)_sendChangeNotificationsBasedOnDefaultsAdditionByDomain:(id)arg1;
- (id)_deviceSpecificDefaultSettings;
- (void)_setRequriesEncryptedBackupInLockdownWithEffectiveUserSettings:(id)arg1;
- (void)_applyMandatorySettingsToEffectiveUserSettings:(id)arg1;
- (void)_applyImpliedSettingsToSettingsDictionary:(id)arg1 currentSettings:(id)arg2 restrictions:(id)arg3;
- (_Bool)_applyHeuristicsToRestrictions:(id)arg1 forProfile:(id)arg2 outError:(id *)arg3;
- (id)_selectLargestNumberFromSortedArray:(id)arg1 equalToOrLessThanNumber:(id)arg2;
- (id)_permittedAutoLockNumbers;
- (id)_permittedGracePeriodNumbers;
- (void)_applyServerSideChangesWithOldRestrictions:(id)arg1 newRestrictions:(id)arg2 oldEffectiveUserSettings:(id)arg3 newEffectiveUserSettings:(id)arg4;

@end

@interface MCInstallerReader : NSObject
{
}

+ (void)_setProfileStorageDirectory:(id)arg1;
+ (id)sharedReader;
- (id)pathsToInstalledProfilesWithFilterFlags:(int)arg1;

@end

@interface MCJobQueue : NSObject
{
    NSObject<OS_dispatch_queue> *_executionQueue;
    id <MCJobQueueObserver> _observer;
    NSObject<OS_dispatch_queue> *_jobQueue;
    NSObject<OS_dispatch_group> *_jobGroup;
    CDUnknownBlockType _executionQueueAbortCompletionBlock;
}

@property(copy, nonatomic) CDUnknownBlockType executionQueueAbortCompletionBlock; // @synthesize executionQueueAbortCompletionBlock=_executionQueueAbortCompletionBlock;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *jobGroup; // @synthesize jobGroup=_jobGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *jobQueue; // @synthesize jobQueue=_jobQueue;
@property(nonatomic) __weak id <MCJobQueueObserver> observer; // @synthesize observer=_observer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *executionQueue; // @synthesize executionQueue=_executionQueue;
- (void).cxx_destruct;
- (void)abortEnqueuedJobsCompletionBlock:(CDUnknownBlockType)arg1;
- (void)waitForEnqueuedJobsToCompleteCompletionBlock:(CDUnknownBlockType)arg1;
- (void)jobDidFinish;
- (void)enqueueJob:(CDUnknownBlockType)arg1;
- (id)init;

@end

@interface MCKeyValue : NSObject
{
    NSString *_key;
    id _value;
    unsigned long long _valueType;
}

@property(readonly, nonatomic) unsigned long long valueType; // @synthesize valueType=_valueType;
@property(readonly, nonatomic) id value; // @synthesize value=_value;
@property(readonly, nonatomic) NSString *key; // @synthesize key=_key;
- (void).cxx_destruct;
- (void)setValue:(id)arg1 localizedKey:(id)arg2;
- (void)setLocalizedString:(id)arg1 localizedKey:(id)arg2;
- (void)setLocalizedArray:(id)arg1 localizedKey:(id)arg2;
- (void)setDate:(id)arg1 localizedKey:(id)arg2;
- (void)setData:(id)arg1 localizedKey:(id)arg2;
- (id)initWithValue:(id)arg1 localizedKey:(id)arg2;
- (id)initWithLocalizedString:(id)arg1 localizedKey:(id)arg2;
- (id)initWithLocalizedArray:(id)arg1 localizedKey:(id)arg2;
- (id)initWithDate:(id)arg1 localizedKey:(id)arg2;
- (id)initWithData:(id)arg1 localizedKey:(id)arg2;

@end

@interface MCKeyValueSection : NSObject
{
    NSString *_sectionTitle;
    NSString *_sectionFooter;
    NSArray *_sectionKeyValues;
}

+ (id)sectionWithLocalizedArray:(id)arg1 title:(id)arg2 footer:(id)arg3;
+ (id)sectionWithKeyValues:(id)arg1;
@property(retain, nonatomic) NSArray *sectionKeyValues; // @synthesize sectionKeyValues=_sectionKeyValues;
@property(retain, nonatomic) NSString *sectionFooter; // @synthesize sectionFooter=_sectionFooter;
@property(retain, nonatomic) NSString *sectionTitle; // @synthesize sectionTitle=_sectionTitle;
- (void).cxx_destruct;
- (id)initWithSectionTitle:(id)arg1 footer:(id)arg2 keyValues:(id)arg3;

@end

@interface MCKeychain : NSObject
{
}

+ (_Bool)itemExistsInKeychain:(void *)arg1;
+ (void)removeItemWithPersistentID:(id)arg1;
+ (id)saveItem:(void *)arg1 withLabel:(id)arg2 group:(id)arg3;
+ (struct __SecIdentity *)copyIdentityWithPersistentID:(id)arg1;
+ (struct __SecCertificate *)copyCertificateWithPersistentID:(id)arg1;
+ (void *)copyItemWithPersistentID:(id)arg1;
+ (void)removeItemForService:(id)arg1 account:(id)arg2 label:(id)arg3 description:(id)arg4 group:(id)arg5;
+ (id)dataFromService:(id)arg1 account:(id)arg2 label:(id)arg3 description:(id)arg4 group:(id)arg5 outError:(id *)arg6;
+ (id)dataFromService:(id)arg1 account:(id)arg2 label:(id)arg3 description:(id)arg4 outError:(id *)arg5;
+ (_Bool)setData:(id)arg1 forService:(id)arg2 account:(id)arg3 label:(id)arg4 description:(id)arg5 access:(void *)arg6 group:(id)arg7 outError:(id *)arg8;
+ (_Bool)setData:(id)arg1 forService:(id)arg2 account:(id)arg3 label:(id)arg4 description:(id)arg5 access:(void *)arg6 outError:(id *)arg7;
+ (_Bool)setData:(id)arg1 forService:(id)arg2 account:(id)arg3 label:(id)arg4 description:(id)arg5 outError:(id *)arg6;
+ (_Bool)setString:(id)arg1 forService:(id)arg2 account:(id)arg3 label:(id)arg4 description:(id)arg5 access:(void *)arg6 group:(id)arg7 outError:(id *)arg8;
+ (_Bool)setString:(id)arg1 forService:(id)arg2 account:(id)arg3 label:(id)arg4 description:(id)arg5 group:(id)arg6 outError:(id *)arg7;
+ (_Bool)setString:(id)arg1 forService:(id)arg2 account:(id)arg3 label:(id)arg4 description:(id)arg5 outError:(id *)arg6;
+ (id)stringFromService:(id)arg1 account:(id)arg2 label:(id)arg3 description:(id)arg4 group:(id)arg5 outError:(id *)arg6;
+ (id)stringFromService:(id)arg1 account:(id)arg2 label:(id)arg3 description:(id)arg4 outError:(id *)arg5;
+ (struct __CFDictionary *)_newQueryWithService:(id)arg1 account:(id)arg2 label:(id)arg3 description:(id)arg4 group:(id)arg5 outError:(id *)arg6;

@end

@interface MCLDAPAccountPayload : MCPayload
{
    NSString *_accountDescription;
    NSString *_hostname;
    NSString *_username;
    NSString *_password;
    _Bool _useSSL;
    NSArray *_searchSettings;
    NSString *_accountPersistentUUID;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(copy, nonatomic) NSString *accountPersistentUUID; // @synthesize accountPersistentUUID=_accountPersistentUUID;
@property(readonly, retain, nonatomic) NSArray *searchSettings; // @synthesize searchSettings=_searchSettings;
@property(readonly, nonatomic) _Bool useSSL; // @synthesize useSSL=_useSSL;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
@property(readonly, retain, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(readonly, retain, nonatomic) NSString *accountDescription; // @synthesize accountDescription=_accountDescription;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)stubDictionary;
- (id)description;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCLanguageUtilities : NSObject
{
}

+ (id)setLanguage:(id)arg1;
+ (id)knownLanguages;
+ (id)setLocale:(id)arg1;
+ (id)knownLocales;

@end

@interface MCLazyInitializationUtilities : NSObject
{
}

+ (void)initCoreText;
+ (void)initImageIO;
+ (void)initAddressBook;
+ (void)loadNSBundleAtURL:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
+ (void)loadBundleAtURL:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;

@end

@interface MCMDMClient : NSObject
{
    NSXPCConnection *_xpcConnection;
}

+ (id)sharedClient;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
- (void).cxx_destruct;
- (int)accessRights;
- (_Bool)isActivationLockAllowedWhileSupervised;
- (_Bool)isManagedByMDM;
- (void)uprootMDM;
- (void)simulatePush;
- (void)retryNotNowResponse;
- (void)scheduleTokenUpdate;
- (void)notifyNewConfiguration;
- (_Bool)checkOutCheckInURL:(id)arg1 identity:(struct __SecIdentity *)arg2 topic:(id)arg3 signMessage:(_Bool)arg4 outError:(id *)arg5;
- (_Bool)authenticateWithCheckInURL:(id)arg1 identity:(struct __SecIdentity *)arg2 topic:(id)arg3 useDevelopmentAPNS:(_Bool)arg4 signMessage:(_Bool)arg5 outError:(id *)arg6;
- (void)_createAndStartMDMXPCConnection;
- (void)dealloc;

@end

@interface MCMDMOptionsUtilities : NSObject
{
}

+ (void)setDefaultMDMOptions:(id)arg1;
+ (id)defaultMDMOptions;
+ (id)validatedMDMOptionsFromOptionsDictionary:(id)arg1;

@end

@interface MCMDMPayload : MCPayload
{
    NSString *_identityUUID;
    NSData *_identityPersistentID;
    _Bool _useDevelopmentAPNS;
    NSString *_topic;
    NSString *_serverURLString;
    NSString *_checkInURLString;
    int _accessRights;
    _Bool _signMessage;
    _Bool _checkOutWhenRemoved;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, nonatomic) _Bool checkOutWhenRemoved; // @synthesize checkOutWhenRemoved=_checkOutWhenRemoved;
@property(readonly, nonatomic) _Bool signMessage; // @synthesize signMessage=_signMessage;
@property(readonly, nonatomic) int accessRights; // @synthesize accessRights=_accessRights;
@property(readonly, retain, nonatomic) NSString *checkInURLString; // @synthesize checkInURLString=_checkInURLString;
@property(readonly, nonatomic) _Bool useDevelopmentAPNS; // @synthesize useDevelopmentAPNS=_useDevelopmentAPNS;
@property(readonly, retain, nonatomic) NSString *serverURLString; // @synthesize serverURLString=_serverURLString;
@property(readonly, retain, nonatomic) NSString *topic; // @synthesize topic=_topic;
@property(retain, nonatomic) NSData *identityPersistentID; // @synthesize identityPersistentID=_identityPersistentID;
@property(readonly, retain, nonatomic) NSString *identityUUID; // @synthesize identityUUID=_identityUUID;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)installationWarnings;
@property(readonly, retain, nonatomic) NSArray *localizedAccessRightDescriptions;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
- (id)_nonHTTPSURLErrorForField:(id)arg1;
- (id)_invalidTopicError;
- (id)_invalidRightsError;

@end

@interface MCManagedAppManagerReader : NSObject
{
}

+ (id)attributesByAppID;
+ (id)managedAppIDsWithFlags:(int)arg1;

@end

@interface MCManagedDefaultsManager : NSObject
{
}

+ (id)sharedManager;
- (void)sendManagedDefaultsChangedNotificationForDomains:(id)arg1;
- (void)removeAllManagedDefaultsFromDomain:(id)arg1;
- (void)removeDefaults:(id)arg1 fromManagedDomain:(id)arg2;
- (void)addDefaults:(id)arg1 toManagedDomain:(id)arg2;
- (void)setDefaults:(id)arg1 forManagedDomain:(id)arg2;
- (id)managedDefaultsForDomain:(id)arg1;
- (_Bool)domainHasManagedDefaults:(id)arg1;
- (id)managedDefaultsPathForDomain:(id)arg1;

@end

@interface MCManagedDomainsCache : NSObject
{
    NSObject<OS_dispatch_queue> *_memberQueue;
    NSMutableArray *_memberQueueCache;
}

+ (id)sharedCache;
@property(retain, nonatomic) NSMutableArray *memberQueueCache; // @synthesize memberQueueCache=_memberQueueCache;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *memberQueue; // @synthesize memberQueue=_memberQueue;
- (void).cxx_destruct;
- (void)memberQueueRereadCache;
- (void)rereadCache;
- (_Bool)isURLManaged:(id)arg1;
- (id)init;

@end

@interface MCManagedDomainsCacheEntry : NSObject
{
    _Bool _subdomainsMatch;
    NSString *_domain;
    NSString *_path;
    NSNumber *_port;
}

+ (id)normalizedPatternString:(id)arg1;
@property(retain, nonatomic) NSNumber *port; // @synthesize port=_port;
@property(retain, nonatomic) NSString *path; // @synthesize path=_path;
@property(retain, nonatomic) NSString *domain; // @synthesize domain=_domain;
@property(nonatomic) _Bool subdomainsMatch; // @synthesize subdomainsMatch=_subdomainsMatch;
- (void).cxx_destruct;
- (id)description;
- (_Bool)matchesURL:(id)arg1;
- (id)initWithPattern:(id)arg1;

@end

@interface MCManagedMediaManagerReader : NSObject
{
}

+ (id)managedBooks;

@end

@interface MCManifest : NSObject
{
    NSString *_path;
    NSMutableDictionary *_manifest;
    NSObject<OS_dispatch_queue> *_syncQueue;
}

+ (id)installedProfileWithIdentifier:(id)arg1;
+ (id)sharedManifest;
+ (void)_setManifestPath:(id)arg1;
- (void).cxx_destruct;
- (void)invalidateCache;
- (void)removeIdentifierFromManifest:(id)arg1;
- (void)addIdentifierToManifest:(id)arg1 flag:(int)arg2;
- (id)allInstalledProfileIdentifiers;
- (id)identifiersOfProfilesWithFilterFlags:(int)arg1;
- (void)_setManifest:(id)arg1;
- (id)manifest;
- (id)_manifest;
- (void)dealloc;
- (id)init;
- (id)installedProfileWithIdentifier:(id)arg1;

@end

@interface MCNumber : NSObject <NSSecureCoding>
{
    NSNumber *_number;
}

+ (id)numberWithInteger:(long long)arg1;
+ (id)numberWithUnsignedInteger:(unsigned long long)arg1;
+ (id)numberWithInt:(int)arg1;
+ (_Bool)supportsSecureCoding;
+ (id)numberWithUnsignedInt:(unsigned int)arg1;
@property(retain, nonatomic) NSNumber *number; // @synthesize number=_number;
- (void).cxx_destruct;
- (id)descriptionWithLocale:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithInteger:(long long)arg1;
- (id)initWithUnsignedInteger:(unsigned long long)arg1;
- (id)initWithInt:(int)arg1;
- (id)initWithUnsignedInt:(unsigned int)arg1;

@end

@interface MCPasscodeManager : NSObject
{
}

+ (id)hashForPasscode:(id)arg1 usingMethod:(int)arg2 salt:(id)arg3;
+ (id)characteristicsDictionaryFromPasscode:(id)arg1;
+ (_Bool)_passcodeCharacteristics:(id)arg1 compliesWithPolicyFromRestrictions:(id)arg2 outError:(id *)arg3;
+ (_Bool)passcode:(id)arg1 compliesWithPolicyFromRestrictions:(id)arg2 checkHistory:(_Bool)arg3 outError:(id *)arg4;
+ (id)localizedDescriptionOfPasscodePolicyFromRestrictions:(id)arg1;
+ (int)unlockScreenTypeForRestrictions:(id)arg1;
+ (int)unlockScreenTypeForPasscodeCharacteristics:(id)arg1;
+ (id)generateSalt;
+ (id)deviceLockedError;
+ (_Bool)isDeviceUnlocked;
+ (id)sharedManager;
- (void)passcodeExpiryDateCompletionBlock:(CDUnknownBlockType)arg1;
- (id)passcodeExpiryDateOutError:(id *)arg1;
- (_Bool)_checkPasscode:(id)arg1 againstHistoryWithRestrictions:(id)arg2 outError:(id *)arg3;
- (_Bool)isCurrentPasscodeCompliantOutError:(id *)arg1;
- (_Bool)currentPasscodeCompliesWithPolicyFromRestrictions:(id)arg1 outError:(id *)arg2;
- (_Bool)passcode:(id)arg1 compliesWithPolicyCheckHistory:(_Bool)arg2 outError:(id *)arg3;
- (id)localizedDescriptionOfPasscodePolicy;
- (int)newPasscodeEntryScreenType;
- (int)currentUnlockScreenType;
- (id)_passcodeCharacteristics;
- (_Bool)unlockDeviceWithPasscode:(id)arg1 outError:(id *)arg2;
- (id)_wrongPasscodeError;
- (_Bool)isDeviceLocked;
- (void)lockDevice;
- (void)lockDeviceImmediately:(_Bool)arg1;
- (_Bool)isPasscodeSet;
- (id)_privatePasscodeDict;
- (id)_publicPasscodeDict;

@end

@interface MCPasswordPolicyPayload : MCPayload
{
    NSNumber *_isSimplePasscodeAllowed;
    NSNumber *_isPasscodeRequired;
    NSNumber *_isAlphanumericPasscodeRequired;
    NSNumber *_isManualFetchingWhenRoaming;
    NSNumber *_minLength;
    NSNumber *_maxFailedAttempts;
    NSNumber *_maxGracePeriodMinutes;
    NSNumber *_maxInactivityMinutes;
    NSNumber *_maxPasscodeAgeDays;
    NSNumber *_passcodeHistoryCount;
    NSNumber *_minComplexCharacters;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, retain, nonatomic) NSNumber *minComplexCharacters; // @synthesize minComplexCharacters=_minComplexCharacters;
@property(readonly, retain, nonatomic) NSNumber *maxPasscodeAgeDays; // @synthesize maxPasscodeAgeDays=_maxPasscodeAgeDays;
@property(readonly, retain, nonatomic) NSNumber *passcodeHistoryCount; // @synthesize passcodeHistoryCount=_passcodeHistoryCount;
@property(readonly, retain, nonatomic) NSNumber *maxInactivityMinutes; // @synthesize maxInactivityMinutes=_maxInactivityMinutes;
@property(readonly, retain, nonatomic) NSNumber *maxGracePeriodMinutes; // @synthesize maxGracePeriodMinutes=_maxGracePeriodMinutes;
@property(readonly, retain, nonatomic) NSNumber *maxFailedAttempts; // @synthesize maxFailedAttempts=_maxFailedAttempts;
@property(readonly, retain, nonatomic) NSNumber *minLength; // @synthesize minLength=_minLength;
@property(readonly, retain, nonatomic) NSNumber *isManualFetchingWhenRoaming; // @synthesize isManualFetchingWhenRoaming=_isManualFetchingWhenRoaming;
@property(readonly, retain, nonatomic) NSNumber *isAlphanumericPasscodeRequired; // @synthesize isAlphanumericPasscodeRequired=_isAlphanumericPasscodeRequired;
@property(readonly, retain, nonatomic) NSNumber *isPasscodeRequired; // @synthesize isPasscodeRequired=_isPasscodeRequired;
@property(readonly, retain, nonatomic) NSNumber *isSimplePasscodeAllowed; // @synthesize isSimplePasscodeAllowed=_isSimplePasscodeAllowed;
- (void).cxx_destruct;
- (id)restrictions;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle1Description;
- (id)title;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCPlainCertificatePayload : MCCertificatePayload
{
    NSString *_certificateFileName;
    NSData *_certificateData;
    NSString *_password;
    int _dataEncoding;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(readonly, retain, nonatomic) NSData *certificateData; // @synthesize certificateData=_certificateData;
@property(readonly, nonatomic) int dataEncoding; // @synthesize dataEncoding=_dataEncoding;
@property(readonly, retain, nonatomic) NSString *certificateFileName; // @synthesize certificateFileName=_certificateFileName;
- (void).cxx_destruct;
- (_Bool)isIdentity;
- (id)persistentResourceID;
- (id)description;
- (struct __SecCertificate *)copyCertificate;
- (id)installationWarnings;
- (_Bool)isSigned;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCProcessAssertion : NSObject
{
}

+ (id)executionQueue;
+ (id)assertion;
- (void)dealloc;
- (id)init;
- (void)touch;

@end

@interface MCPowerAssertion : MCProcessAssertion
{
    _Bool _parked;
}

@property(readonly, nonatomic, getter=isParked) _Bool parked; // @synthesize parked=_parked;
- (void)unpark;
- (void)park;
- (void)dealloc;
- (id)init;

@end

@interface MCProfileConnection : NSObject <MCProfileConnectionXPCProtocol>
{
    struct __CFBag *_observers;
    id <MCInteractionDelegate> _interactionDelegate;
    NSDictionary *_preflightResponse;
    NSData *_originalProfileData;
    NSObject<OS_dispatch_queue> *_notificationSyncQueue;
    NSObject<OS_dispatch_queue> *_xpcConnectionSyncQueue;
    NSObject<OS_dispatch_queue> *_publicXPCConnectionSyncQueue;
    NSMutableArray *_notificationTokens;
    CDUnknownBlockType userInputReplyBlock;
    CDUnknownBlockType passcodeReplyBlock;
    CDUnknownBlockType showWarningsReplyBlock;
    NSXPCConnection *_publicXPCConnection;
    NSXPCConnection *_xpcConnection;
}

+ (id)sharedConnection;
+ (id)profileInstallationErrorWithUnderlyingError:(id)arg1;
- (void).cxx_destruct;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)_effectiveSettingsDidChange:(id)arg1;
- (void)_internalDefaultsDidChange;
- (void)_defaultsDidChange;
- (void)_appWhitelistDidChange:(id)arg1;
- (void)_profileListDidChange;
- (void)_passcodePolicyDidChange;
- (void)_passcodeDidChange;
- (void)_restrictionDidChange;
- (void)_applyToObservers:(CDUnknownBlockType)arg1;
- (void)checkInAsynchronously;
- (void)checkIn;
- (void)dealloc;
- (id)_init;
- (void)_queueCreateAndResumePublicXPCConnection;
- (void)_createAndResumePublicXPCConnection;
- (void)_queueCreateAndResumeXPCConnection;
- (void)_createAndResumeXPCConnection;
@property(readonly, nonatomic) NSXPCConnection *publicXPCConnection; // @synthesize publicXPCConnection=_publicXPCConnection;
@property(readonly, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
- (int)effectiveRestrictedBoolValueForSetting:(id)arg1;
- (id)objectForFeature:(id)arg1;
- (id)valueForFeature:(id)arg1;
- (int)restrictedBoolValueForFeature:(id)arg1;
- (void)setPasscodeWasSetInBackup:(_Bool)arg1;
- (_Bool)applyRestrictionDictionary:(id)arg1 clientType:(id)arg2 clientUUID:(id)arg3 outRestrictionChanged:(_Bool *)arg4 outEffectiveSettingsChanged:(_Bool *)arg5 outError:(id *)arg6;
- (_Bool)validatePasscode:(id)arg1 andUnlockContentProtectedDevice:(_Bool)arg2;
- (_Bool)validatePasscode:(id)arg1;
- (id)passcodeExpiryDate;
- (_Bool)isPasscodeRequiredByPolicy;
- (id)queueFileDataForProfileInstallation:(id)arg1 originalFileName:(id)arg2 outError:(id *)arg3;
- (id)queueProfileDataForInstallation:(id)arg1 outError:(id *)arg2;
- (id)queueProfileDataForAcceptance:(id)arg1 outError:(id *)arg2;
- (id)profileFromProfileData:(id)arg1 outError:(id *)arg2;
- (void)setDelegate:(id)arg1;
- (id)chaperoneOrganization;
- (_Bool)isChaperoned;
- (void)respondToCurrentPasscodeRequestContinue:(_Bool)arg1 passcode:(id)arg2;
- (void)respondToWarningsContinueInstallation:(_Bool)arg1;
- (void)__checkForProfiledCrash;
- (void)submitUserInputResponses:(id)arg1;
- (void)cancelUserInputResponses;
- (void)preflightUserInputResponses:(id)arg1 forPayloadIndex:(unsigned long long)arg2;
- (void)setInteractionDelegate:(id)arg1;
- (void)updateProfileWithIdentifier:(id)arg1 interactionDelegate:(id)arg2;
- (void)installProfileData:(id)arg1 options:(id)arg2 interactionDelegate:(id)arg3;
- (void)installProfileData:(id)arg1 interactionDelegate:(id)arg2;
- (void)_detectProfiledCrashes;
- (_Bool)removeProvisioningProfileWithUUID:(id)arg1 outError:(id *)arg2;
- (_Bool)installProvisioningProfileData:(id)arg1 managingProfileIdentifier:(id)arg2 outError:(id *)arg3;
- (_Bool)showProfileErrorUIWithProfileIdentifier:(id)arg1 outError:(id *)arg2;
- (_Bool)transitionToProfileAcceptanceUIAndReturnToBundleID:(id)arg1;
- (_Bool)transitionToProfileAcceptanceUI;
- (_Bool)transitionToProfileOverviewUI;
- (_Bool)_openSensitiveURLString:(id)arg1 unlock:(_Bool)arg2;
- (id)acceptedFileExtensions;
- (id)acceptedMIMETypes;
- (id)updateProfileWithIdentifier:(id)arg1 outError:(id *)arg2;
- (void)removeProfileWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)removeProfileAsyncWithIdentifier:(id)arg1;
- (void)removeProfileWithIdentifier:(id)arg1;
- (id)installProfileData:(id)arg1 options:(id)arg2 outError:(id *)arg3;
- (id)installProfileData:(id)arg1 outError:(id *)arg2;
- (id)queueFileDataForAcceptance:(id)arg1 originalFileName:(id)arg2 forBundleID:(id)arg3 outError:(id *)arg4;
- (id)queueFileDataForAcceptance:(id)arg1 originalFileName:(id)arg2 outError:(id *)arg3;
- (id)_queueDataForAcceptance:(id)arg1 originalFileName:(id)arg2 originatingBundleID:(id)arg3 transitionToUI:(_Bool)arg4 outError:(id *)arg5;
- (id)popProvisioningProfileDataFromHeadOfInstallationQueue;
- (id)popProfileDataFromHeadOfInstallationQueue;
- (void)isProfileInstalledWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)installedProfileWithIdentifier:(id)arg1;
- (id)installedConfigurationProfileInfoWithOutMDMProfileInfo:(id *)arg1;
- (id)installedProfilesWithFilterFlags:(int)arg1;
- (id)installedProfileIdentifiersWithFilterFlags:(int)arg1;
- (id)installedProfileIdentifiers;
- (id)installedMDMProfileIdentifier;
- (id)effectiveWhitelistedAppsAndOptions;
- (void)removeOrphanedClientRestrictions;
- (void)setUserInfo:(id)arg1 forClientUUID:(id)arg2;
- (id)userInfoForClientUUID:(id)arg1;
- (id)allClientUUIDsForClientType:(id)arg1;
- (int)applyRestrictionDictionary:(id)arg1 clientType:(id)arg2 clientUUID:(id)arg3 localizedClientDescription:(id)arg4 localizedWarningMessage:(id)arg5 complianceBlocking:(int)arg6 displayImmediateAlert:(_Bool)arg7 outRestrictionChanged:(_Bool *)arg8 outEffectiveSettingsChanged:(_Bool *)arg9 outError:(id *)arg10;
- (_Bool)applyRestrictionDictionary:(id)arg1 clientType:(id)arg2 clientUUID:(id)arg3 localizedClientDescription:(id)arg4 localizedWarningMessage:(id)arg5 outRestrictionChanged:(_Bool *)arg6 outEffectiveSettingsChanged:(_Bool *)arg7 outError:(id *)arg8;
- (id)objectRestrictionForFeature:(id)arg1;
- (id)valueRestrictionForFeature:(id)arg1;
- (int)boolRestrictionForFeature:(id)arg1;
- (id)effectiveRestrictions;
- (void)resetAllSettingsToDefaults;
- (id)effectiveUserSettings;
- (void)removeValueSetting:(id)arg1;
- (void)removeBoolSetting:(id)arg1;
- (_Bool)isUnionSettingLockedDownByRestrictions:(id)arg1;
- (_Bool)isIntersectionSettingLockedDownByRestrictions:(id)arg1;
- (_Bool)isValueSettingLockedDownByRestrictions:(id)arg1;
- (_Bool)isBoolSettingLockedDownByRestrictions:(id)arg1;
- (_Bool)areSettingsLockedDownByRestrictions:(id)arg1;
- (id)_settingsLockedDownByRestrictions:(id)arg1;
- (id)localizedRestrictionSourceDescriptionForFeatures:(id)arg1;
- (_Bool)_areProfilesRestrictingSettings:(id)arg1 outMDMName:(id *)arg2 outExchangeName:(id *)arg3 outExchangeCount:(long long *)arg4 outProfileName:(id *)arg5 outProfileCount:(long long *)arg6;
- (_Bool)isSettingLockedDownByRestrictions:(id)arg1;
- (id)effectiveValuesForUnionSetting:(id)arg1;
- (id)effectiveValuesForIntersectionSetting:(id)arg1;
- (id)effectiveValueForSetting:(id)arg1;
- (int)effectiveBoolValueForSetting:(id)arg1;
- (id)effectiveParametersForValueSetting:(id)arg1;
- (id)effectiveParametersForUnionSetting:(id)arg1;
- (id)effectiveParametersForIntersectionSetting:(id)arg1;
- (id)effectiveParametersForBoolSetting:(id)arg1;
- (id)defaultParametersForUnionSetting:(id)arg1;
- (id)defaultParametersForIntersectionSetting:(id)arg1;
- (id)defaultParametersForValueSetting:(id)arg1;
- (id)defaultParametersForBoolSetting:(id)arg1;
- (id)defaultValuesForUnionSetting:(id)arg1;
- (id)defaultValuesForIntersectionSetting:(id)arg1;
- (id)defaultValueForSetting:(id)arg1;
- (int)defaultBoolValueForSetting:(id)arg1;
- (id)parametersForUnionSetting:(id)arg1;
- (id)parametersForIntersectionSetting:(id)arg1;
- (id)parametersForValueSetting:(id)arg1;
- (id)parametersForBoolSetting:(id)arg1;
- (id)userSettings;
- (void)setValues:(id)arg1 forUnionSetting:(id)arg2;
- (void)setValues:(id)arg1 forIntersectionSetting:(id)arg2;
- (void)setValue:(id)arg1 forSetting:(id)arg2 passcode:(id)arg3;
- (void)setValue:(id)arg1 forSetting:(id)arg2;
- (void)setBoolValue:(_Bool)arg1 forSetting:(id)arg2 passcode:(id)arg3;
- (void)setBoolValue:(_Bool)arg1 forSetting:(id)arg2;
- (void)setParameters:(id)arg1 forValueSetting:(id)arg2;
- (void)setParameters:(id)arg1 forBoolSetting:(id)arg2;
- (void)setParametersForSettingsByType:(id)arg1 passcode:(id)arg2;
- (void)setParametersForSettingsByType:(id)arg1;
- (id)localizedDescriptionOfCurrentPasscodeConstraints;
- (int)newPasscodeEntryScreenType;
- (int)unlockScreenType;
- (id)passcodeExpiryDateOutError:(id *)arg1;
- (void)notifyUserHasSeenComplianceMessageWithLastLockDate:(id)arg1;
- (void)notifyClientsToRecomputeCompliance;
- (void)recomputeUserComplianceWarning;
- (void)recomputeUserComplianceWarningSynchronously;
- (void)getPasscodeComplianceWarningLastLockDate:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (int)getPasscodeComplianceWarningLastLockDate:(id)arg1 outLocalizedTitle:(id *)arg2 outLocalizedMessage:(id *)arg3;
- (int)_getPasscodeComplianceWarningExpiryDate:(id)arg1 lastLockDate:(id)arg2 outLocalizedTitle:(id *)arg3 outLocalizedMessage:(id *)arg4;
- (_Bool)currentPasscodeIsCompliantWithProfileRestrictionsOutError:(id *)arg1;
- (_Bool)currentPasscodeIsCompliantWithGlobalRestrictionsOutError:(id *)arg1;
- (_Bool)passcode:(id)arg1 meetsCurrentConstraintsOutError:(id *)arg2;
- (_Bool)isContentProtectionInEffect;
- (_Bool)unlockDeviceWithPasscode:(id)arg1 outError:(id *)arg2;
- (_Bool)clearPasscodeWithEscrowKeybagData:(id)arg1 secret:(id)arg2 outError:(id *)arg3;
- (_Bool)changePasscodeFrom:(id)arg1 to:(id)arg2 outError:(id *)arg3;
- (_Bool)isPasscodeRequiredByProfiles;
- (_Bool)isPasscodeRequired;
- (_Bool)isPasscodeSet;
- (void)lockDevice;
- (void)lockDeviceImmediately:(_Bool)arg1;
- (_Bool)shouldDestroyOldKeybag;
- (void)setFingerprintUnlockAllowed:(_Bool)arg1 passcode:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (unsigned long long)gracePeriod;
- (void)setGracePeriod:(unsigned long long)arg1 passcode:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (_Bool)isMUAllowed;
- (void)flush;
- (id)activationLockBypassHash;
- (void)deleteActivationLockBypassKey;
- (id)activationLockBypassKey;
- (_Bool)isSpotlightInternetResultsAllowed;
- (id)appsRestrictedFromCloudSync;
- (_Bool)isCloudSyncAllowed:(id)arg1;
- (_Bool)isInAppPaymentAllowed;
- (_Bool)isFingerprintForContactlessPaymentAllowed;
- (_Bool)isContactlessPaymentAllowed;
- (_Bool)isUninstalledAppNearMeSuggestionsAllowed;
- (_Bool)isInstalledAppNearMeSuggestionsAllowed;
- (_Bool)isPodcastsAllowed;
- (_Bool)hasAppAnalyticsAllowedBeenSet;
- (_Bool)isAppAnalyticsAllowed;
- (_Bool)hasDiagnosticSubmissionAllowedBeenSet;
- (_Bool)isDiagnosticSubmissionAllowed;
- (_Bool)isEnterpriseBookMetadataSyncAllowed;
- (_Bool)isEnterpriseBookBackupAllowed;
- (_Bool)isActivityContinuationAllowed;
- (_Bool)isGeotagSharingAllowed;
- (_Bool)isAirPlayIncomingRequestsPairingPasswordRequired;
- (_Bool)isAirPlayOutgoingRequestsPairingPasswordRequired;
- (_Bool)isFingerprintUnlockAllowed;
- (_Bool)isFingerprintModificationAllowed;
- (_Bool)isAssistantUserGeneratedContentAllowed;
- (_Bool)isActivationLockAllowed;
- (_Bool)isControlCenterAllowedInApps;
- (_Bool)isLockScreenControlCenterAllowed;
- (_Bool)isLockScreenTodayViewAllowed;
- (_Bool)isLockScreenNotificationsViewAllowed;
- (_Bool)isAirDropAllowed;
- (_Bool)isAppRatingLimitInEffect;
- (_Bool)isAppRemovalAllowed;
- (_Bool)isAppInstallationAllowed;
- (_Bool)isLockScreenWiFiModificationAllowed;
- (_Bool)isAdTrackingLimited;
- (_Bool)isWebContentFilteringInEffect;
- (_Bool)isWebTextDefineAllowed;
- (_Bool)isAutomaticAppUpdatesModificationAllowed;
- (void)setAutomaticAppUpdatesAllowed:(_Bool)arg1;
- (_Bool)isAutomaticAppUpdatesAllowed;
- (_Bool)isOTAPKIUpdatesAllowed;
- (_Bool)isVehicleUIAllowed;
- (_Bool)isCloudKeychainSyncAllowed;
- (void)migratePostDataMigrator;
- (void)processProfilesPostMigrate;
- (void)processProfilesPostRestore;
- (id)managedMedia;
- (id)managedAppIDs;
- (void)migrateWithContext:(int)arg1 passcodeWasSetInBackup:(_Bool)arg2;
- (void)setManagedEmailDomains:(id)arg1;
- (id)managedEmailDomains;
- (id)managedAppIDsWithFlags:(int)arg1;
- (id)doNotDocumentSyncAppIDs;
- (id)doNotBackupAppIDs;
- (id)managedSystemConfigurationServiceIDs;
- (void)shutDown;
- (id)managedWiFiNetworkNames;
- (id)_localizedRestricitionSourceDescriptionFromMDMName:(id)arg1 exchangeName:(id)arg2 exchangeCount:(long long)arg3 profileName:(id)arg4 profileCount:(long long)arg5;
- (id)activationLockBypassKeyCreateNewIfNeeded:(_Bool)arg1;
- (void)doMCICDidFinishPreflightWithError:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)doMCICDidRequestShowUserWarnings:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)doMCICDidRequestUserInput:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)doMCICDidFinishInstallationWithIdentifier:(id)arg1 error:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)doMCICDidBeginInstallingNextProfileData:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)doMCICDidRequestCurrentPasscodeWithCompletion:(CDUnknownBlockType)arg1;
- (void)doMCICDidUpdateStatus:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)rereadManagedAppAttributes;
- (void)storeCertificateData:(id)arg1 forHostIdentifier:(id)arg2;
- (void)removeExpiredProfiles;
- (void)performBootTimeChecks;
- (void)notifyKeybagUpdated;
- (void)notifyDeviceUnlocked;
- (void)checkCarrierProfileForceInstallation:(_Bool)arg1;
- (void)checkCarrierProfile;
- (void)checkInIfNeeded;
- (void)unstashWebContentFilterAutoPermittedURLStrings;
- (void)stashWebContentFilterAutoPermittedURLStrings;
- (void)unstashWebContentFilterUserBlacklistedURLStrings;
- (void)stashWebContentFilterUserBlacklistedURLStrings;
- (void)removeWebContentFilterUserBlacklistedURLString:(id)arg1;
- (void)setWebContentFilterUserBlacklistedURLStrings:(id)arg1;
- (id)webContentFilterEffectiveBlacklistedURLStrings;
- (id)webContentFilterUserBlacklistedURLStrings;
- (void)addUserBookmark:(id)arg1;
- (void)addWebContentFilterAutoPermittedURLString:(id)arg1;
- (void)setWebContentFilterAutoPermittedURLStrings:(id)arg1;
- (_Bool)isWebFilterUIActive;
- (id)defaultUserBookmarks;
- (void)unstashUserBookmarksFromLabel:(id)arg1;
- (void)stashUserBookmarksWithLabel:(id)arg1 newUserBookmarks:(id)arg2;
- (id)userBookmarks;
- (void)setUserBookmarks:(id)arg1;
- (void)lockdownDidReceiveActivationRecord:(id)arg1;
- (int)hostMayPairWithOptions:(id)arg1 challenge:(id)arg2;
- (id)autonomousSingleAppModePermittedBundleIDs;
- (void)parentalControlsSetAllowPasscodeAccessToNonWhitelistedApps:(_Bool)arg1;
- (_Bool)parentalControlsAllowPasscodeAccessToNonWhitelistedApps;
- (_Bool)isParentalControlsAllowPasscodeAccessToNonWhitelistedAppsUIForcedByRestrictions;
- (void)setParentalControlsWhitelistedAppBundleIDs:(id)arg1;
- (id)parentalControlsWhitelistedAppBundleIDs;
- (id)parentalControlsAvailableAppBundleIDsForWhitelisting;
- (_Bool)mayEnterPasscodeToAccessNonWhitelistedApps;
- (_Bool)isPasscodeRequiredToAccessWhitelistedApps;
- (_Bool)isInSingleAppMode;
- (id)effectiveWhitelistedAppBundleIDs;
- (int)appWhitelistState;
- (id)knownAirPrintIPPURLStrings;
- (_Bool)isTeslaCloudConfigurationAvailable;
- (_Bool)isSupervised;
- (void)setupAssistantDidFinish;
- (void)markStoredProfileForPurposeAsInstalled:(int)arg1;
- (_Bool)shouldInstallStoredProfileForPurpose:(int)arg1;
- (void)storeProfileData:(id)arg1 configurationSource:(int)arg2 purpose:(int)arg3;
- (void)installProfileDataStoredForPurpose:(int)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)profileDataStoredForPurpose:(int)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (_Bool)shouldShowCloudConfigurationUI;
- (_Bool)shouldSkipSetupPanes;
- (_Bool)activationRecordIndicatesCloudConfigurationIsAvailable;
- (void)storeCloudConfigurationDetails:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)storeCloudConfigurationDetails:(id)arg1;
- (void)cloudConfigurationUIDidCompleteWasApplied:(_Bool)arg1;
- (_Bool)wasTeslaCloudConfigurationApplied;
- (_Bool)wasCloudConfigurationApplied;
- (void)retrieveCloudConfigurationFromURL:(id)arg1 username:(id)arg2 password:(id)arg3 anchorCertificates:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)retrieveAndStoreCloudConfigurationDetailsCompletionBlock:(CDUnknownBlockType)arg1;
- (void)retrieveCloudConfigurationDetailsCompletionBlock:(CDUnknownBlockType)arg1;
- (id)cloudConfigurationDetails;
- (void)allowedKeyboardBundleIDsAfterApplyingFilterToBundleIDs:(id)arg1 hostAppBundleID:(id)arg2 accountIsManaged:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (id)filteredOpenInAccounts:(id)arg1 originatingAppBundleID:(id)arg2 sourceAccountManagement:(int)arg3;
- (_Bool)shouldApplyFilterForBundleID:(id)arg1 sourceAccountManagement:(int)arg2 outAllowManagedAccounts:(_Bool *)arg3 outAllowUnmanagedAccounts:(_Bool *)arg4;
- (id)filteredMailSheetAccountsForBundleID:(id)arg1 sourceAccountManagement:(int)arg2;
- (_Bool)mayShowLocalAccountsForBundleID:(id)arg1 sourceAccountManagement:(int)arg2;
- (_Bool)isAppManaged:(id)arg1;
- (id)allowedAppBundleIDsForBidirectionalDataMovementAfterApplyingFilterToBundleIDs:(id)arg1 localAppBundleID:(id)arg2 localAccountIsManaged:(_Bool)arg3;
- (id)allowedImportFromAppBundleIDsAfterApplyingFilterToBundleIDs:(id)arg1 importingAppBundleID:(id)arg2 importingAccountIsManaged:(_Bool)arg3;
- (id)allowedOpenInAppBundleIDsAfterApplyingFilterToAppBundleIDs:(id)arg1 originatingAppBundleID:(id)arg2 originatingAccountIsManaged:(_Bool)arg3;
- (_Bool)mayShareToMessagesOriginatingAccountIsManaged:(_Bool)arg1;
- (_Bool)isURLManaged:(id)arg1;
- (_Bool)mayOpenFromManagedToUnmanaged;
- (_Bool)mayOpenFromUnmanagedToManaged;
- (_Bool)isOpenInRestrictionInEffect;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCProfileInfo : NSObject
{
    NSString *_friendlyName;
    NSString *_profileDescription;
    NSString *_identifier;
    NSString *_UUID;
    NSString *_organization;
    NSDate *_expiryDate;
}

@property(readonly, nonatomic) NSDate *expiryDate; // @synthesize expiryDate=_expiryDate;
@property(readonly, nonatomic) NSString *organization; // @synthesize organization=_organization;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly, nonatomic) NSString *profileDescription; // @synthesize profileDescription=_profileDescription;
@property(readonly, nonatomic) NSString *friendlyName; // @synthesize friendlyName=_friendlyName;
- (void).cxx_destruct;
- (id)initWithProfile:(id)arg1;

@end

@interface MCProfileServiceProfile : MCProfile
{
    NSString *_URLString;
    NSArray *_deviceAttributes;
    id _challenge;
    NSData *_enrollmentIdentityPersistentID;
    _Bool _confirmInstallation;
    NSArray *_bogusPayloads;
}

@property(readonly, nonatomic) _Bool confirmInstallation; // @synthesize confirmInstallation=_confirmInstallation;
@property(retain, nonatomic) NSData *enrollmentIdentityPersistentID; // @synthesize enrollmentIdentityPersistentID=_enrollmentIdentityPersistentID;
@property(readonly, retain, nonatomic) id challenge; // @synthesize challenge=_challenge;
@property(readonly, retain, nonatomic) NSArray *deviceAttributes; // @synthesize deviceAttributes=_deviceAttributes;
@property(retain, nonatomic) NSString *URLString; // @synthesize URLString=_URLString;
- (void).cxx_destruct;
- (id)description;
- (id)stubDictionary;
- (id)managedPayloads;
- (id)payloads;
- (id)localizedManagedPayloadSummaryByType;
- (id)localizedPayloadSummaryByType;
- (id)initWithDictionary:(id)arg1 allowEmptyPayload:(_Bool)arg2 outError:(id *)arg3;
- (id)_unsupportedValueErrorWithFieldName:(id)arg1 value:(id)arg2;
- (id)_badDataTypeErrorWithFieldName:(id)arg1;

@end

@interface MCProfileTrustEvaluator : NSObject
{
}

- (_Bool)sanitizedProfileSignerCertificateChainIsAllowedToWriteDefaults:(id)arg1;

@end

@interface MCProfileWarning : NSObject <NSSecureCoding>
{
    NSString *_localizedTitle;
    NSString *_localizedBody;
    _Bool _isLongForm;
}

+ (id)warningWithLocalizedTitle:(id)arg1 localizedBody:(id)arg2 isLongForm:(_Bool)arg3;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isLongForm; // @synthesize isLongForm=_isLongForm;
@property(retain, nonatomic) NSString *localizedBody; // @synthesize localizedBody=_localizedBody;
@property(retain, nonatomic) NSString *localizedTitle; // @synthesize localizedTitle=_localizedTitle;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithLocalizedTitle:(id)arg1 localizedBody:(id)arg2 isLongForm:(_Bool)arg3;

@end

@interface MCRemovalPasswordPayload : MCPayload
{
    NSString *_removalPasscode;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSString *removalPasscode; // @synthesize removalPasscode=_removalPasscode;
- (void).cxx_destruct;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCRestrictionManager : NSObject
{
    NSMutableDictionary *_memberQueueRestrictions;
    NSMutableDictionary *_memberQueueClientRestrictions;
    NSMutableDictionary *_memberQueueUserSettings;
    NSMutableDictionary *_memberQueueEffectiveUserSettings;
    NSObject<OS_dispatch_queue> *_memberQueue;
    NSMutableDictionary *_memberQueueProfileRestrictions;
}

+ (_Bool)isWebContentFilterUIActiveWithRestrictionDictionary:(id)arg1;
+ (id)allowedKeyboardBundleIDsAfterApplyingFilterToBundleIDs:(id)arg1 managedAppBundleIDs:(id)arg2 hostAppIsManaged:(_Bool)arg3 mayOpenFromUnmanagedToManaged:(_Bool)arg4 mayOpenFromManagedToUnmanaged:(_Bool)arg5;
+ (id)allowedImportFromAppBundleIDsWithOriginalAppBundleIDs:(id)arg1 managedAppBundleIDs:(id)arg2 localAppBundleID:(id)arg3 localAccountIsManaged:(_Bool)arg4 mayOpenFromUnmanagedToManaged:(_Bool)arg5 mayOpenFromManagedToUnmanaged:(_Bool)arg6 isAppBundleIDExemptBlock:(CDUnknownBlockType)arg7 isAppBundleIDAccountBasedBlock:(CDUnknownBlockType)arg8;
+ (id)allowedOpenInAppBundleIDsWithOriginalAppBundleIDs:(id)arg1 managedAppBundleIDs:(id)arg2 localAppBundleID:(id)arg3 localAccountIsManaged:(_Bool)arg4 mayOpenFromUnmanagedToManaged:(_Bool)arg5 mayOpenFromManagedToUnmanaged:(_Bool)arg6 isAppBundleIDExemptBlock:(CDUnknownBlockType)arg7 isAppBundleIDAccountBasedBlock:(CDUnknownBlockType)arg8;
+ (_Bool)mayEnterPasscodeToAccessNonWhitelistedAppsWithSettingsDictionary:(id)arg1;
+ (_Bool)isPasscodeRequiredToAccessWhitelistedAppsWithSettingsDictionary:(id)arg1;
+ (_Bool)isInSingleAppModeWithSettingsDictionary:(id)arg1;
+ (int)appWhitelistStateWithSettingsDictionary:(id)arg1;
+ (_Bool)unionValuesSetting:(id)arg1 valueChangedBetweenOldSettings:(id)arg2 andNewSettings:(id)arg3;
+ (_Bool)intersectedValuesSetting:(id)arg1 valueChangedBetweenOldSettings:(id)arg2 andNewSettings:(id)arg3;
+ (_Bool)valueSetting:(id)arg1 valueChangedBetweenOldSettings:(id)arg2 andNewSettings:(id)arg3;
+ (_Bool)boolSetting:(id)arg1 valueChangedBetweenOldSettings:(id)arg2 andNewSettings:(id)arg3;
+ (id)newEffectiveSettingsByApplyingRestrictions:(id)arg1 toSettings:(id)arg2;
+ (id)unionValuesSettingForFeature:(id)arg1 withUserSettingDictionary:(id)arg2;
+ (id)intersectedValuesSettingForFeature:(id)arg1 withUserSettingDectionary:(id)arg2;
+ (id)valueSettingForFeature:(id)arg1 withUserSettingDictionary:(id)arg2;
+ (int)boolSettingForFeature:(id)arg1 withUserSettingDictionary:(id)arg2;
+ (id)defaultUnionValuesForSetting:(id)arg1;
+ (id)defaultIntersectedValuesForSetting:(id)arg1;
+ (id)defaultValueForSetting:(id)arg1;
+ (int)defaultBoolValueForSetting:(id)arg1;
+ (id)defaultParametersForUnionValuesSetting:(id)arg1;
+ (id)defaultParametersForIntersectedValuesSetting:(id)arg1;
+ (id)defaultParametersForValueSetting:(id)arg1;
+ (id)defaultParametersForBoolSetting:(id)arg1;
+ (id)defaultSettings;
+ (_Bool)unionValuesForFeature:(id)arg1 changedBetweenOldRestrictions:(id)arg2 andNewRestrictions:(id)arg3;
+ (_Bool)intersectedValuesForFeature:(id)arg1 changedBetweenOldRestrictions:(id)arg2 andNewRestrictions:(id)arg3;
+ (_Bool)restrictedValue:(id)arg1 changedBetweenOldRestrictions:(id)arg2 andNewRestrictions:(id)arg3;
+ (_Bool)restrictedBool:(id)arg1 changedBetweenOldRestrictions:(id)arg2 andNewRestrictions:(id)arg3;
+ (id)unionValuesForFeature:(id)arg1 withRestrictionsDictionary:(id)arg2;
+ (id)intersectedValuesForFeature:(id)arg1 withRestrictionsDictionary:(id)arg2;
+ (id)objectForFeature:(id)arg1 withRestrictionsDictionary:(id)arg2;
+ (id)valueForFeature:(id)arg1 withRestrictionsDictionary:(id)arg2;
+ (int)restrictedBoolForFeature:(id)arg1 withRestrictionsDictionary:(id)arg2;
+ (id)filterUserSettingsForPublicUse:(id)arg1;
+ (id)filterRestrictionDictionary:(id)arg1 toIncludeOnlyRestrictionsThatDifferFromRestrictions:(id)arg2;
+ (id)filterRestrictionDictionary:(id)arg1 acceptedKeysDict:(id)arg2;
+ (id)filterRestrictionDictionaryForPublicUse:(id)arg1;
+ (id)restrictionsWithCurrentRestrictions:(id)arg1 defaultRestrictions:(id)arg2 profileRestrictions:(id)arg3 clientRestrictions:(id)arg4 outRestrictionsChanged:(_Bool *)arg5 outError:(id *)arg6;
+ (id)restrictionsAfterApplyingRestrictionsDictionary:(id)arg1 toRestrictionsDictionary:(id)arg2 outChangeDetected:(_Bool *)arg3 outError:(id *)arg4;
+ (id)sharedManager;
+ (id)defaultRestrictionFilePath;
@property(retain, nonatomic) NSMutableDictionary *memberQueueProfileRestrictions; // @synthesize memberQueueProfileRestrictions=_memberQueueProfileRestrictions;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *memberQueue; // @synthesize memberQueue=_memberQueue;
- (void).cxx_destruct;
- (int)appWhitelistState;
- (_Bool)isValueSettingLockedDownByRestrictions:(id)arg1;
- (_Bool)_isValueSettingLockedDown:(id)arg1 effectiveSetting:(id)arg2;
- (_Bool)isBoolSettingLockedDownByRestrictions:(id)arg1;
- (_Bool)_isBoolSettingLockedDown:(id)arg1;
- (_Bool)isSettingLockedDownByRestrictions:(id)arg1;
- (id)profileIdentifiersRestrictingSettings:(id)arg1;
- (id)_effectiveUnionValuesForSetting:(id)arg1 effectiveUserSettings:(id)arg2;
- (id)_effectiveIntersectedValuesForSetting:(id)arg1 effectiveUserSettings:(id)arg2;
- (id)effectiveUnionValuesForSetting:(id)arg1;
- (id)effectiveIntersectedValuesForSetting:(id)arg1;
- (id)effectiveValueForSetting:(id)arg1;
- (int)effectiveRestrictedBoolForSetting:(id)arg1;
- (id)unionValuesSettingForFeature:(id)arg1;
- (id)intersectedValuesSettingForFeature:(id)arg1;
- (id)valueSettingForFeature:(id)arg1;
- (int)boolSettingForFeature:(id)arg1;
- (id)effectiveParametersForUnionSetting:(id)arg1;
- (id)effectiveParametersForIntersectedSetting:(id)arg1;
- (id)effectiveParametersForValueSetting:(id)arg1;
- (id)effectiveParametersForBoolSetting:(id)arg1;
@property(readonly, copy, nonatomic) NSDictionary *effectiveUserSettings;
@property(retain, nonatomic) NSMutableDictionary *memberQueueEffectiveUserSettings; // @synthesize memberQueueEffectiveUserSettings=_memberQueueEffectiveUserSettings;
- (void)memberQueueCommitUserSettingsToDisk;
@property(readonly, copy, nonatomic) NSDictionary *userSettings;
@property(retain, nonatomic) NSMutableDictionary *memberQueueUserSettings; // @synthesize memberQueueUserSettings=_memberQueueUserSettings;
- (id)exchangeUUIDsRestrictingSettings:(id)arg1;
- (id)allClientUUIDsForClientType:(id)arg1;
- (id)userInfoForClientUUID:(id)arg1;
- (id)memberQueueUserInfoForClientUUID:(id)arg1;
- (id)clientRestrictionsForClientUUID:(id)arg1;
- (id)memberQueueClientTypeForClientUUID:(id)arg1;
- (id)memberQueueClientRestrictionsForClientUUID:(id)arg1;
@property(retain, nonatomic) NSMutableDictionary *memberQueueClientRestrictions; // @synthesize memberQueueClientRestrictions=_memberQueueClientRestrictions;
- (id)clientRestrictions;
- (id)unionValuesForFeature:(id)arg1;
- (id)intersectedValuesForFeature:(id)arg1;
- (id)objectForFeature:(id)arg1;
- (id)valueForFeature:(id)arg1;
- (int)restrictedBoolForFeature:(id)arg1;
- (id)potentialRestrictionsAfterApplyingRestrictionsDictionary:(id)arg1 outChangeDetected:(_Bool *)arg2 outError:(id *)arg3;
- (id)description;
@property(readonly, copy, nonatomic) NSDictionary *combinedProfileRestrictions;
@property(readonly, nonatomic) NSMutableDictionary *memberQueueCombinedProfileRestrictions;
@property(readonly, copy, nonatomic) NSDictionary *profileRestrictions;
@property(readonly, nonatomic) NSDictionary *currentRestrictions;
@property(retain, nonatomic) NSMutableDictionary *memberQueueRestrictions; // @synthesize memberQueueRestrictions=_memberQueueRestrictions;
@property(readonly, nonatomic) NSDictionary *defaultSettings;
@property(readonly, nonatomic) NSDictionary *defaultRestrictions;
- (void)invalidateSettings;
- (void)invalidateRestrictions;
- (id)init;

@end

@interface MCRestrictionsPayload : MCPayload
{
    NSMutableDictionary *_restrictions;
    NSString *_iCloudPassword;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSString *iCloudPassword; // @synthesize iCloudPassword=_iCloudPassword;
- (void).cxx_destruct;
- (id)installationWarnings;
- (void)_insertRestrictedBoolForKey:(id)arg1 value:(id)arg2 preferenc:(_Bool)arg3;
- (id)localizedRestrictionStrings;
- (id)_defaultMediaSettings;
- (id)_unionStrings;
- (id)_intersectionStrings;
- (id)_enforcedFeatureStrings;
- (id)_restrictedFeatureStrings;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
- (id)_invalidFieldErrorWithFieldName:(id)arg1;
- (id)restrictions;

@end

@interface MCSCEPPayload : MCCertificatePayload
{
    NSString *_URLString;
    NSString *_CAInstanceName;
    NSString *_challenge;
    NSArray *_subject;
    unsigned long long _keySize;
    int _usageFlags;
    NSData *_CAFingerprint;
    NSArray *_CACaps;
    NSDictionary *_subjectAltName;
    unsigned long long _retries;
    unsigned long long _retryDelay;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, nonatomic) unsigned long long retryDelay; // @synthesize retryDelay=_retryDelay;
@property(readonly, nonatomic) unsigned long long retries; // @synthesize retries=_retries;
@property(readonly, retain, nonatomic) NSDictionary *subjectAltName; // @synthesize subjectAltName=_subjectAltName;
@property(readonly, retain, nonatomic) NSArray *CACaps; // @synthesize CACaps=_CACaps;
@property(readonly, retain, nonatomic) NSData *CAFingerprint; // @synthesize CAFingerprint=_CAFingerprint;
@property(readonly, nonatomic) int usageFlags; // @synthesize usageFlags=_usageFlags;
@property(readonly, nonatomic) unsigned long long keySize; // @synthesize keySize=_keySize;
@property(readonly, retain, nonatomic) NSArray *subject; // @synthesize subject=_subject;
@property(readonly, retain, nonatomic) NSString *challenge; // @synthesize challenge=_challenge;
@property(readonly, retain, nonatomic) NSString *CAInstanceName; // @synthesize CAInstanceName=_CAInstanceName;
@property(readonly, retain, nonatomic) NSString *URLString; // @synthesize URLString=_URLString;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)description;
- (id)stubDictionary;
- (struct __SecIdentity *)copyIdentityFromKeychain;
- (struct __SecCertificate *)copyCertificate;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
- (_Bool)isIdentity;
- (_Bool)isRoot;

@end

@interface MCSingleAppPayload : MCAppWhitelistPayloadBase
{
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)restrictions;
- (_Bool)mustInstallNonInteractively;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCSingleSignOnPayload : MCPayload
{
    NSString *_humanReadableName;
    MCSingleSignOnPayloadKerberosInfo *_kerberosInfo;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) MCSingleSignOnPayloadKerberosInfo *kerberosInfo; // @synthesize kerberosInfo=_kerberosInfo;
@property(retain, nonatomic) NSString *humanReadableName; // @synthesize humanReadableName=_humanReadableName;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)title;
- (id)stubDictionary;
- (id)description;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCSingleSignOnPayloadKerberosInfo : NSObject
{
    NSString *_principalName;
    NSString *_realm;
    NSString *_certificateUUID;
    NSArray *_URLPrefixMatches;
    NSArray *_appIdentifierMatches;
    NSString *_accountGUID;
    NSString *_accountTypeGUID;
}

@property(retain, nonatomic) NSString *accountTypeGUID; // @synthesize accountTypeGUID=_accountTypeGUID;
@property(retain, nonatomic) NSString *accountGUID; // @synthesize accountGUID=_accountGUID;
@property(retain, nonatomic) NSArray *appIdentifierMatches; // @synthesize appIdentifierMatches=_appIdentifierMatches;
@property(retain, nonatomic) NSArray *URLPrefixMatches; // @synthesize URLPrefixMatches=_URLPrefixMatches;
@property(retain, nonatomic) NSString *certificateUUID; // @synthesize certificateUUID=_certificateUUID;
@property(retain, nonatomic) NSString *realm; // @synthesize realm=_realm;
@property(retain, nonatomic) NSString *principalName; // @synthesize principalName=_principalName;
- (void).cxx_destruct;
- (id)stubDictionary;
- (_Bool)validateURLPrefixMatch:(id)arg1 outNormalizedString:(id *)arg2 outError:(id *)arg3;
- (id)description;
- (_Bool)validateAppIdentifierMatch:(id)arg1 outError:(id *)arg2;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCSubCalAccountPayload : MCPayload
{
    NSString *_accountDescription;
    NSString *_hostname;
    NSString *_username;
    NSString *_password;
    _Bool _useSSL;
    NSString *_accountPersistentUUID;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(copy, nonatomic) NSString *accountPersistentUUID; // @synthesize accountPersistentUUID=_accountPersistentUUID;
@property(readonly, nonatomic) _Bool useSSL; // @synthesize useSSL=_useSSL;
@property(readonly, retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(readonly, retain, nonatomic) NSString *username; // @synthesize username=_username;
@property(readonly, retain, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(readonly, retain, nonatomic) NSString *accountDescription; // @synthesize accountDescription=_accountDescription;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)stubDictionary;
- (id)description;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCTeslaConfiguration : NSObject
{
    _Bool _fetching;
    CDUnknownBlockType _callback;
    NSXPCConnection *_connection;
}

@property(nonatomic, getter=isFetching) _Bool fetching; // @synthesize fetching=_fetching;
@property(retain, nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(copy, nonatomic) CDUnknownBlockType callback; // @synthesize callback=_callback;
- (void).cxx_destruct;
- (void)fetchConfigurationWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)fetchDidFailWithError:(id)arg1;
- (id)connectionError;
- (void)dealloc;
- (id)init;

@end

@interface MCTimerContext : NSObject
{
    _Bool _enabled;
}

@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
- (void)disable;
- (id)init;

@end

@interface MCTunnelParser : NSObject
{
}

+ (id)responseWithError:(id)arg1;
+ (id)responseWithStatus:(id)arg1;
- (void)processRequest:(id)arg1 assertion:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (id)_commandDisconnect:(id)arg1;

@end

@interface MCUnknownPayload : MCPayload
{
}

- (id)subtitle1Description;
- (id)description;

@end

@interface MCUserNotificationManager : NSObject
{
}

+ (id)sharedManager;
- (void)mainQueueDidReceiveAppWhitelistChangedNotification;
- (void)cancelAllNotificationsCompletionBlock:(CDUnknownBlockType)arg1;
- (void)displayUserNotificationWithTitle:(id)arg1 message:(id)arg2 defaultButtonText:(id)arg3 alternateButtonText:(id)arg4 displayOnLockScreen:(_Bool)arg5 displayInAppWhitelistModes:(_Bool)arg6 dismissAfterTimeInterval:(double)arg7 assertion:(id)arg8 completionBlock:(CDUnknownBlockType)arg9;
- (void)inviteUserToVPPWithTitle:(id)arg1 message:(id)arg2 assertion:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)promptUserToLogIntoiTunesWithTitle:(id)arg1 message:(id)arg2 assertion:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) _Bool hasOutstandingNotifications;
- (void)dealloc;
- (id)init;

@end

@interface MCUserNotificationQueueEntry : NSObject
{
    _Bool _displayOnLockScreen;
    _Bool _displayInAppWhitelistModes;
    NSString *_title;
    NSString *_message;
    NSString *_defaultButtonText;
    NSString *_alternateButtonText;
    double _dismissAfterTimeInterval;
    CDUnknownBlockType _completionBlock;
    id _notification;
}

@property(retain, nonatomic) id notification; // @synthesize notification=_notification;
@property(copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property(nonatomic) double dismissAfterTimeInterval; // @synthesize dismissAfterTimeInterval=_dismissAfterTimeInterval;
@property(nonatomic) _Bool displayInAppWhitelistModes; // @synthesize displayInAppWhitelistModes=_displayInAppWhitelistModes;
@property(nonatomic) _Bool displayOnLockScreen; // @synthesize displayOnLockScreen=_displayOnLockScreen;
@property(retain, nonatomic) NSString *alternateButtonText; // @synthesize alternateButtonText=_alternateButtonText;
@property(retain, nonatomic) NSString *defaultButtonText; // @synthesize defaultButtonText=_defaultButtonText;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;

@end

@interface MCVPNPayload : MCVPNPayloadBase
{
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;

@end

@interface MCVersioningUtilities : NSObject
{
}

+ (_Bool)versionString:(id)arg1 isOlderThanVersionString:(id)arg2;
+ (_Bool)_allZerosArray:(id)arg1 startingAtIndex:(unsigned long long)arg2;

@end

@interface MCWAPIIdentityCertificatePayload : MCCertificatePayload
{
    NSData *_pemData;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(readonly, retain, nonatomic) NSData *pemData; // @synthesize pemData=_pemData;
- (void).cxx_destruct;
- (id)description;
- (_Bool)isIdentity;
- (struct __SecIdentity *)copyIdentityFromKeychain;
- (struct __SecCertificate *)copyCertificate;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCWebClipPayload : MCPayload
{
    NSURL *_URL;
    NSString *_label;
    NSData *_iconData;
    _Bool _isRemovable;
    _Bool _precomposed;
    _Bool _fullScreen;
    NSString *_savedIdentifier;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSString *savedIdentifier; // @synthesize savedIdentifier=_savedIdentifier;
@property(readonly, nonatomic) _Bool fullScreen; // @synthesize fullScreen=_fullScreen;
@property(readonly, nonatomic) _Bool precomposed; // @synthesize precomposed=_precomposed;
@property(readonly, nonatomic) _Bool isRemovable; // @synthesize isRemovable=_isRemovable;
@property(readonly, retain, nonatomic) NSData *iconData; // @synthesize iconData=_iconData;
@property(readonly, retain, nonatomic) NSString *label; // @synthesize label=_label;
@property(readonly, retain, nonatomic) NSURL *URL; // @synthesize URL=_URL;
- (void).cxx_destruct;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)description;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCWebContentFilterPayload : MCPayload
{
    _Bool _autoFilterEnabled;
    _Bool _filterBrowsers;
    _Bool _filterSockets;
    NSString *_filterType;
    NSArray *_permittedURLStrings;
    NSArray *_whitelistedBookmarks;
    NSArray *_blacklistedURLStrings;
    NSDictionary *_pluginConfiguration;
    NSString *_name;
    NSString *_pluginBundleID;
}

+ (id)pluginFilterKeysAndClasses;
+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(nonatomic) _Bool filterSockets; // @synthesize filterSockets=_filterSockets;
@property(nonatomic) _Bool filterBrowsers; // @synthesize filterBrowsers=_filterBrowsers;
@property(copy, nonatomic) NSString *pluginBundleID; // @synthesize pluginBundleID=_pluginBundleID;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSDictionary *pluginConfiguration; // @synthesize pluginConfiguration=_pluginConfiguration;
@property(retain, nonatomic) NSArray *blacklistedURLStrings; // @synthesize blacklistedURLStrings=_blacklistedURLStrings;
@property(retain, nonatomic) NSArray *whitelistedBookmarks; // @synthesize whitelistedBookmarks=_whitelistedBookmarks;
@property(retain, nonatomic) NSArray *permittedURLStrings; // @synthesize permittedURLStrings=_permittedURLStrings;
@property(nonatomic) _Bool autoFilterEnabled; // @synthesize autoFilterEnabled=_autoFilterEnabled;
@property(copy, nonatomic) NSString *filterType; // @synthesize filterType=_filterType;
- (void).cxx_destruct;
- (id)installationWarnings;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)title;
- (id)description;
- (id)restrictions;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;

@end

@interface MCWiFiPayload : MCPayload
{
    _Bool _isHidden;
    _Bool _isWEP;
    _Bool _isWPA;
    _Bool _passwordRequired;
    _Bool _usernameRequired;
    _Bool _autoJoin;
    _Bool _proxyPACFallbackAllowed;
    _Bool _isHotspot;
    _Bool _serviceProviderRoamingEnabled;
    int _proxyType;
    NSString *_ssid;
    NSString *_encryptionType;
    NSDictionary *_eapClientConfig;
    NSString *_password;
    NSString *_username;
    NSString *_certificateUUID;
    NSArray *_payloadCertificateAnchorUUID;
    NSString *_proxyServer;
    NSNumber *_proxyServerPort;
    NSString *_proxyUsername;
    NSString *_proxyPassword;
    NSString *_proxyPACURLString;
    NSString *_credentialUUID;
    NSNumber *_priority;
    NSString *_domainName;
    NSString *_HESSID;
    NSArray *_roamingConsortiumOIs;
    NSArray *_NAIRealmNames;
    NSArray *_MCCAndMNCs;
    NSString *_displayedOperatorName;
}

+ (id)localizedPluralForm;
+ (id)localizedSingularForm;
+ (id)typeStrings;
@property(retain, nonatomic) NSString *displayedOperatorName; // @synthesize displayedOperatorName=_displayedOperatorName;
@property(retain, nonatomic) NSArray *MCCAndMNCs; // @synthesize MCCAndMNCs=_MCCAndMNCs;
@property(retain, nonatomic) NSArray *NAIRealmNames; // @synthesize NAIRealmNames=_NAIRealmNames;
@property(retain, nonatomic) NSArray *roamingConsortiumOIs; // @synthesize roamingConsortiumOIs=_roamingConsortiumOIs;
@property(nonatomic, getter=isServiceProviderRoamingEnabled) _Bool serviceProviderRoamingEnabled; // @synthesize serviceProviderRoamingEnabled=_serviceProviderRoamingEnabled;
@property(retain, nonatomic) NSString *HESSID; // @synthesize HESSID=_HESSID;
@property(retain, nonatomic) NSString *domainName; // @synthesize domainName=_domainName;
@property(retain, nonatomic) NSNumber *priority; // @synthesize priority=_priority;
@property(nonatomic) _Bool isHotspot; // @synthesize isHotspot=_isHotspot;
@property(retain, nonatomic) NSString *credentialUUID; // @synthesize credentialUUID=_credentialUUID;
@property(nonatomic) _Bool proxyPACFallbackAllowed; // @synthesize proxyPACFallbackAllowed=_proxyPACFallbackAllowed;
@property(retain, nonatomic) NSString *proxyPACURLString; // @synthesize proxyPACURLString=_proxyPACURLString;
@property(retain, nonatomic) NSString *proxyPassword; // @synthesize proxyPassword=_proxyPassword;
@property(retain, nonatomic) NSString *proxyUsername; // @synthesize proxyUsername=_proxyUsername;
@property(retain, nonatomic) NSNumber *proxyServerPort; // @synthesize proxyServerPort=_proxyServerPort;
@property(retain, nonatomic) NSString *proxyServer; // @synthesize proxyServer=_proxyServer;
@property(nonatomic) int proxyType; // @synthesize proxyType=_proxyType;
@property(retain, nonatomic) NSArray *payloadCertificateAnchorUUID; // @synthesize payloadCertificateAnchorUUID=_payloadCertificateAnchorUUID;
@property(retain, nonatomic) NSString *certificateUUID; // @synthesize certificateUUID=_certificateUUID;
@property(nonatomic) _Bool autoJoin; // @synthesize autoJoin=_autoJoin;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
@property(nonatomic) _Bool usernameRequired; // @synthesize usernameRequired=_usernameRequired;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(nonatomic) _Bool passwordRequired; // @synthesize passwordRequired=_passwordRequired;
@property(retain, nonatomic) NSDictionary *eapClientConfig; // @synthesize eapClientConfig=_eapClientConfig;
@property(nonatomic) _Bool isWPA; // @synthesize isWPA=_isWPA;
@property(nonatomic) _Bool isWEP; // @synthesize isWEP=_isWEP;
@property(retain, nonatomic) NSString *encryptionType; // @synthesize encryptionType=_encryptionType;
@property(nonatomic) _Bool isHidden; // @synthesize isHidden=_isHidden;
@property(retain, nonatomic) NSString *ssid; // @synthesize ssid=_ssid;
- (void).cxx_destruct;
- (id)installationWarnings;
- (id)description;
- (id)payloadDescriptionKeyValueSections;
- (id)subtitle2Description;
- (id)_localizedEncryptionTypeString;
- (id)subtitle2Label;
- (id)subtitle1Description;
- (id)subtitle1Label;
- (id)stubDictionary;
- (id)initWithDictionary:(id)arg1 profile:(id)arg2 outError:(id *)arg3;
- (_Bool)_isEAPSIMConfig:(id)arg1;
- (id)_eapPasswordFromConfig:(id)arg1 isRequired:(_Bool *)arg2;
- (id)_eapUsernameFromConfig:(id)arg1 isRequired:(_Bool *)arg2;
- (_Bool)_eapConfigIsValid:(id)arg1 error:(id *)arg2;

@end

@interface MCWorkerThread : NSThread
{
}

+ (id)theThread;
- (void)main;

@end

@interface NSData (ManagedConfiguration)
+ (id)MCDataWithCFData:(struct __CFData *)arg1;
+ (id)MCDataWithHexString:(id)arg1;
- (id)MCSHA1Hash;
- (id)MCInitWithBase64String:(id)arg1;
- (id)MCBase64String;
- (id)MCHexString;
@end

@interface NSDictionary (MCUtilities)
- (id)MCRetainOptionalNonZeroLengthStringKey:(id)arg1 errorDomain:(id)arg2 invalidDataCode:(long long)arg3 invalidDataErrorString:(id)arg4 outError:(id *)arg5;
- (id)MCRetainRequiredNonZeroLengthStringKey:(id)arg1 errorDomain:(id)arg2 missingDataCode:(long long)arg3 missingDataErrorString:(id)arg4 invalidDataCode:(long long)arg5 invalidDataErrorString:(id)arg6 outError:(id *)arg7;
- (id)MCRetainOptionalObjectKey:(id)arg1 type:(Class)arg2 errorDomain:(id)arg3 invalidDataCode:(long long)arg4 invalidDataErrorString:(id)arg5 outError:(id *)arg6;
- (id)MCRetainRequiredObjectKey:(id)arg1 type:(Class)arg2 errorDomain:(id)arg3 missingDataCode:(long long)arg4 missingDataErrorString:(id)arg5 invalidDataCode:(long long)arg6 invalidDataErrorString:(id)arg7 outError:(id *)arg8;
- (id)MCDeepCopy;
- (id)MCDeepCopyWithZone:(struct _NSZone *)arg1;
- (id)MCMutableDeepCopy;
- (id)MCMutableDeepCopyWithZone:(struct _NSZone *)arg1;
@end

@interface NSError (MCExtension)
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 suggestion:(id)arg4 USEnglishSuggestion:(id)arg5 underlyingError:(id)arg6 errorType:(id)arg7;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 underlyingError:(id)arg4 errorType:(id)arg5;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 errorType:(id)arg4;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 errorType:(id)arg4;
- (id)MCErrorType;
- (id)MCUSEnglishSuggestion;
- (id)MCUSEnglishDescription;
- (_Bool)MCContainsErrorDomain:(id)arg1 code:(long long)arg2;
- (id)MCCopyAsPrimaryError;
- (id)MCFindPrimaryError;
- (id)MCVerboseDescription;
@end

@interface NSMutableDictionary (MCHacks)
- (void)MCFixUpRestrictionsDictionaryForMDMReporting;
@end

@interface NSMutableDictionary (MCPayload)
- (id)MCMutableDictionaryContainingValidatedKeysAndClasses:(id)arg1 removeKeys:(_Bool)arg2 outError:(id *)arg3;
- (id)MCValidateAndRemoveArrayOfClass:(Class)arg1 withKey:(id)arg2 isRequired:(_Bool)arg3 outError:(id *)arg4;
- (id)MCValidateAndRemoveObjectOfClass:(Class)arg1 withKey:(id)arg2 isRequired:(_Bool)arg3 outError:(id *)arg4;
- (id)MCValidateAndRemoveNonZeroLengthStringWithKey:(id)arg1 isRequired:(_Bool)arg2 outError:(id *)arg3;
@end

@interface NSMutableDictionary (MCUtilities)
- (void)MCSetUnionRestriction:(id)arg1 values:(id)arg2;
- (void)MCSetIntersectionRestriction:(id)arg1 values:(id)arg2;
- (void)MCSetValueRestriction:(id)arg1 value:(id)arg2;
- (void)MCDeleteBoolRestriction:(id)arg1;
- (void)MCSetBoolRestriction:(id)arg1 value:(_Bool)arg2;
- (void)MCSetObjectIfNotNil:(id)arg1 forKey:(id)arg2;
- (void)MCDeepCopyMissingEntriesFromDictionary:(id)arg1;
- (void)MCDeepCopyEntriesFromDictionary:(id)arg1;
@end

@interface NSPropertyListSerialization (MCSafeSerialization)
+ (id)MCSafePropertyListWithData:(id)arg1 options:(unsigned long long)arg2 format:(unsigned long long *)arg3 error:(out id *)arg4;
@end

@interface NSString (MCHacks)
- (id)MCAppendGreenteaSuffix;
@end

@interface NSString (MCUtilities)
+ (id)MCMakeUUID;
- (unsigned int)MCHash;
- (id)MCAppendDeviceName;
- (id)MCSHA256DigestWithSalt:(id)arg1;
- (id)MCSHA256DigestWithPasscodeSalt;
- (id)MCOldStyleSafeFilenameHashWithExtension:(id)arg1;
- (id)MCOldStyleSafeFilenameHash;
- (id)MCHashedFilenameWithPrefix:(id)arg1 extension:(id)arg2;
- (id)MCHashedFilenameWithExtension:(id)arg1;
@end

