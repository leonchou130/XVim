//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount
// UUID: 988D5C19-4781-3917-A275-4CDF139AB06A
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 654.0.9.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AAAppleIDLoginPlugin <NSObject>
- (void)handleLoginResponse:(NSDictionary *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (NSDictionary *)parametersForLoginRequest;
- (NSDictionary *)parametersForIdentityEstablishmentRequest;
- (NSString *)serviceIdentifier;
@end

@protocol MSSearchDelegate <NSObject>

@optional
- (void)search:(MSSearch *)arg1 didFinishWithError:(NSError *)arg2;
- (_Bool)search:(MSSearch *)arg1 didFindResults:(NSArray *)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 willCacheResponse:(NSCachedURLResponse *)arg3 completionHandler:(void (^)(NSCachedURLResponse *))arg4;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveData:(NSData *)arg3;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didBecomeDownloadTask:(NSURLSessionDownloadTask *)arg3;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveResponse:(NSURLResponse *)arg3 completionHandler:(void (^)(long long))arg4;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)arg1;
- (void)URLSession:(NSURLSession *)arg1 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)URLSession:(NSURLSession *)arg1 didBecomeInvalidWithError:(NSError *)arg2;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didCompleteWithError:(NSError *)arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 needNewBodyStream:(void (^)(NSInputStream *))arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg3 completionHandler:(void (^)(long long, NSURLCredential *))arg4;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 willPerformHTTPRedirection:(NSHTTPURLResponse *)arg3 newRequest:(NSURLRequest *)arg4 completionHandler:(void (^)(NSURLRequest *))arg5;
@end

@interface AAAccount : NSObject
{
    ACAccount *_account;
    NSString *_fmipToken;
    NSArray *_appleIDAliases;
    NSString *_protocolVersion;
}

+ (id)dataclassesBoundToSingleAccount;
+ (id)dataclassesBoundToSyncAccount;
+ (id)dataclassesBoundToPrimaryAccount;
+ (id)accountTypeString;
@property(readonly, nonatomic) NSString *protocolVersion; // @synthesize protocolVersion=_protocolVersion;
@property(readonly, nonatomic) NSArray *appleIDAliases; // @synthesize appleIDAliases=_appleIDAliases;
@property(copy, nonatomic) NSString *fmipToken; // @synthesize fmipToken=_fmipToken;
- (void).cxx_destruct;
@property(nonatomic) _Bool needsToVerifyTerms;
- (void)lookupEmailAddresses:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)renewCredentialsForAppleIDWithHandler:(CDUnknownBlockType)arg1;
- (void)signInWithHandler:(CDUnknownBlockType)arg1;
- (void)setupChildMailAccountAndEnable:(_Bool)arg1 withEmail:(id)arg2;
- (void)authenticateWithHandler:(CDUnknownBlockType)arg1;
- (void)updateAccountPropertiesWithHandler:(CDUnknownBlockType)arg1;
- (void)flushCachedPassword;
- (void)flushCachedTokens;
- (void)removePasswordFromKeychain;
- (void)removeTokensFromKeychain;
- (void)saveFMIPTokenInKeychain;
- (void)savePasswordInKeychain;
- (void)saveTokensInKeychain;
- (_Bool)presentQuotaDepletionAlertForDataclassIfNecessary:(id)arg1;
- (_Bool)presentQuotaDepletionAlertForDataclassIfNecessary:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)presentQuotaDepletionAlertForDataclass:(id)arg1;
- (void)presentQuotaDepletionAlertForDataclass:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)notifyUserOfQuotaDepletion;
@property(readonly, nonatomic) NSArray *supportedDataclasses;
- (id)_childAccounts;
@property(readonly, nonatomic) NSString *syncStoreIdentifier;
- (int)mobileMeAccountStatus;
@property(readonly, nonatomic) _Bool needsEmailConfiguration;
- (id)_mailChildAccount;
- (void)setUseCellular:(_Bool)arg1 forDataclass:(id)arg2;
- (_Bool)useCellularForDataclass:(id)arg1;
@property(readonly, nonatomic) _Bool needsRegistration;
@property(readonly, nonatomic) NSDictionary *serviceUnavailableInfo;
@property(readonly, nonatomic) _Bool serviceUnavailable;
- (void)setAccountProperty:(id)arg1 forKey:(id)arg2;
- (id)accountPropertyForKey:(id)arg1;
- (void)updateAccountWithProvisioningResponse:(id)arg1;
- (id)propertiesForDataclass:(id)arg1;
- (_Bool)isProvisionedForDataclass:(id)arg1;
@property(readonly, nonatomic) NSDictionary *accountFirstDisplayAlert;
@property(readonly, nonatomic) NSDictionary *accountFooterButton;
@property(readonly, nonatomic) NSString *accountFooterText;
@property(copy, nonatomic) NSString *password;
@property(copy, nonatomic) NSString *authToken;
- (_Bool)isEnabledForDataclass:(id)arg1;
- (void)setEnabled:(_Bool)arg1 forDataclass:(id)arg2;
@property(readonly, nonatomic) NSSet *enabledDataclasses;
@property(readonly, nonatomic) NSSet *provisionedDataclasses;
@property(readonly, nonatomic) NSDictionary *dataclassProperties;
@property(readonly, nonatomic) _Bool primaryEmailVerified;
@property(nonatomic) _Bool primaryAccount;
@property(readonly, nonatomic) NSString *primaryEmail;
@property(readonly, nonatomic) NSString *personID;
@property(readonly, nonatomic) NSString *lastName;
@property(readonly, nonatomic) NSString *firstName;
@property(readonly, nonatomic) int accountServiceType;
@property(copy, nonatomic) NSString *accountDescription;
@property(copy, nonatomic) NSString *username;
@property(readonly, nonatomic) NSString *displayName;
- (id)account;
@property(readonly, nonatomic) NSString *identifier;
- (id)initWithAccount:(id)arg1;
- (id)initWithAccountIdentifier:(id)arg1;
- (id)init;

@end

@interface AAResponse : NSObject
{
    NSDictionary *_responseDictionary;
    NSHTTPURLResponse *_httpResponse;
    NSError *_error;
    long long _statusCode;
    NSData *_data;
    NSNumber *_maxAge;
}

@property(readonly, nonatomic) NSNumber *maxAge; // @synthesize maxAge=_maxAge;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) long long statusCode; // @synthesize statusCode=_statusCode;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) NSDictionary *responseDictionary; // @synthesize responseDictionary=_responseDictionary;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *protocolVersion;
- (id)_deviceSpecificLocalizedString:(id)arg1;
- (id)_stringWithDescriptionForResponseError:(id)arg1;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2 bodyIsPlist:(_Bool)arg3;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;
- (void)_parsePlistResponse:(id)arg1;

@end

@interface AAAccountManagementUIResponse : AAResponse
{
    NSData *_responseData;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSData *responseData;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAAccountManager : NSObject
{
    ACAccountStore *_accountStore;
    NSMutableArray *_accounts;
    NSMutableArray *_originalAccounts;
    id _accountStoreDidChangeObserver;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)saveAllAccounts;
- (void)_removeAppleIDCertsForUsername:(id)arg1;
- (void)removeAccount:(id)arg1;
- (void)updateAccount:(id)arg1;
- (void)addAccount:(id)arg1;
- (id)accountWithIdentifier:(id)arg1;
- (id)accountWithPersonID:(id)arg1;
- (id)accountWithUsername:(id)arg1;
- (id)accountsEnabledForDataclass:(id)arg1;
- (id)primaryAccount;
- (void)reloadAccounts;
- (id)accounts;
- (void)_stopObservingAccountStoreDidChangeNotification;
- (void)_beginObservingAccountStoreDidChangeNotification;
- (id)_accountStore;
- (void)dealloc;

@end

@interface AAAccountMigrator : NSObject
{
}

+ (void)migrateAndSaveAccount:(id)arg1 handler:(CDUnknownBlockType)arg2;

@end

@interface AARequest : NSObject <NSURLSessionDataDelegate>
{
    NSString *_initialURLString;
    _Bool _flushCache;
    struct OpaqueCFHTTPCookieStorage *_cookieStorage;
    NSString *_oneTimePassword;
    NSString *_machineId;
    CDUnknownBlockType _handler;
    NSMutableData *_responseData;
    NSHTTPURLResponse *_response;
    NSError *_error;
}

+ (id)protocolVersion;
+ (Class)responseClass;
@property(nonatomic) _Bool flushCache; // @synthesize flushCache=_flushCache;
- (void).cxx_destruct;
- (id)_redactedHeadersFromHTTPHeaders:(id)arg1;
- (id)redactedBodyStringWithPropertyList:(id)arg1;
- (void)dealloc;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (id)_urlSession;
- (void)performRequestWithHandler:(CDUnknownBlockType)arg1;
- (id)bodyDictionary;
- (id)urlCredential;
@property(readonly) NSURLRequest *urlRequest;
- (id)urlString;
- (void)setDeviceProvisioningMachineId:(id)arg1;
- (void)setDeviceProvisioningOneTimePassword:(id)arg1;
- (void)setCookieStorage:(struct OpaqueCFHTTPCookieStorage *)arg1;
- (id)initWithURLString:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AAAddEmailUIRequest : AARequest
{
    ACAccount *_account;
}

@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithURLString:(id)arg1 account:(id)arg2;
- (id)initWithAccount:(id)arg1;

@end

@interface AAAppleIDSettingsRequest : AARequest
{
    ACAccount *_appleAccount;
    ACAccount *_grandSlamAccount;
    ACAccountStore *_store;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithAppleAccount:(id)arg1 grandSlamAccount:(id)arg2 accountStore:(id)arg3;

@end

@interface AAAppleTVRequest : AARequest
{
    ACAccount *_account;
}

- (void).cxx_destruct;
- (id)initWithAccount:(id)arg1;

@end

@interface AAAuthenticateRequest : AARequest
{
    NSString *_username;
    NSString *_password;
    NSString *_authToken;
    ACAccount *_account;
}

+ (Class)responseClass;
@property(copy, nonatomic) NSString *authToken; // @synthesize authToken=_authToken;
@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *username; // @synthesize username=_username;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlCredential;
- (id)urlString;
- (id)initWithURLString:(id)arg1 username:(id)arg2 password:(id)arg3;
- (id)initWithUsername:(id)arg1 password:(id)arg2;
- (id)initWithAccount:(id)arg1;

@end

@interface AAAuthenticationResponse : AAResponse
{
    NSDictionary *_tokens;
    NSDictionary *_appleAccount;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *HSAData;
@property(readonly, nonatomic) NSString *HSAAction;
@property(readonly, nonatomic) NSString *altDSID;
@property(readonly, nonatomic) NSString *personID;
@property(readonly, nonatomic) NSString *fmipLostModeToken;
@property(readonly, nonatomic) NSString *cloudKitToken;
@property(readonly, nonatomic) NSString *hsaToken;
@property(readonly, nonatomic) NSString *mapsToken;
@property(readonly, nonatomic) NSString *authToken;
@property(readonly, nonatomic) NSString *fmipToken;
@property(readonly, nonatomic) NSString *fmfAppToken;
@property(readonly, nonatomic) NSString *fmfToken;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAAutoAccountVerifier : NSObject <MSSearchDelegate>
{
    NSOperationQueue *_requesterQueue;
    MSSearch *_search;
    ACAccount *_account;
    CDUnknownBlockType _handler;
    int _attempts;
    _Bool _canceled;
}

@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (void)search:(id)arg1 didFinishWithError:(id)arg2;
- (_Bool)search:(id)arg1 didFindResults:(id)arg2;
- (void)_resendVerificationEmailForAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_validateToken:(id)arg1;
- (void)_verify;
- (void)cancel;
- (void)verifyWithHandler:(CDUnknownBlockType)arg1;
- (void)sendVerificationEmail;
- (id)initWithAccount:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AAAvailabilityRequest : AARequest
{
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1;

@end

@interface AAAvailabilityResponse : AAResponse
{
    NSString *_status;
    NSString *_eta;
    NSString *_feature;
}

@property(readonly, nonatomic) NSString *feature; // @synthesize feature=_feature;
@property(readonly, nonatomic) NSString *eta; // @synthesize eta=_eta;
@property(readonly, nonatomic) NSString *status; // @synthesize status=_status;
- (void).cxx_destruct;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAFamilyRequest : AARequest
{
    AAGrandSlamSigner *_grandSlamSigner;
}

- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithGrandSlamSigner:(id)arg1;
- (id)initWithAppleAccount:(id)arg1 grandSlamAccount:(id)arg2 accountStore:(id)arg3;

@end

@interface AAChildAccountCreationUIRequest : AAFamilyRequest
{
}

- (id)urlString;

@end

@interface _AABasicGetRequest : AARequest
{
    ACAccount *_account;
}

- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithAccount:(id)arg1;

@end

@interface AACloudKitDevicesListRequest : _AABasicGetRequest
{
}

+ (Class)responseClass;
- (id)urlString;

@end

@interface AACloudKitDevicesListResponse : AAResponse
{
    NSArray *_incompatibleDevices;
    NSArray *_needUpgradeDevices;
    NSArray *_incompatibleDeviceNames;
    NSArray *_needUpgradeDeviceNames;
}

@property(readonly, nonatomic) NSArray *needUpgradeDeviceNames; // @synthesize needUpgradeDeviceNames=_needUpgradeDeviceNames;
@property(readonly, nonatomic) NSArray *incompatibleDeviceNames; // @synthesize incompatibleDeviceNames=_incompatibleDeviceNames;
@property(readonly, nonatomic) NSArray *needUpgradeDevices; // @synthesize needUpgradeDevices=_needUpgradeDevices;
@property(readonly, nonatomic) NSArray *incompatibleDevices; // @synthesize incompatibleDevices=_incompatibleDevices;
- (void).cxx_destruct;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AACloudKitMigrationStateRequest : _AABasicGetRequest
{
}

+ (Class)responseClass;
- (id)urlString;

@end

@interface AACloudKitMigrationStateResponse : AAResponse
{
    NSString *_name;
}

@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AACloudKitStartMigrationRequest : _AABasicGetRequest
{
}

+ (Class)responseClass;
- (id)urlString;

@end

@interface AACloudKitStartMigrationResponse : AAResponse
{
    NSNumber *_status;
}

@property(readonly, nonatomic) NSNumber *status; // @synthesize status=_status;
- (void).cxx_destruct;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAEmailVettingRequest : AARequest
{
    ACAccount *_account;
}

@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithURLString:(id)arg1 account:(id)arg2;
- (id)initWithAccount:(id)arg1;

@end

@interface AACompleteEmailVettingRequest : AAEmailVettingRequest
{
    NSString *_token;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)bodyDictionary;
- (id)urlString;
- (id)initWithURLString:(id)arg1 account:(id)arg2 token:(id)arg3;
- (id)initWithAccount:(id)arg1 token:(id)arg2;

@end

@interface AACompleteEmailVettingResponse : AAResponse
{
}

@property(readonly, nonatomic) int vettingStatus;

@end

@interface AADelegateAccountSetupHelper : NSObject
{
    ACAccountStore *_accountStore;
    AASetupAssistantService *_aaService;
    NSArray *_delegatesToSetup;
    NSMutableArray *_pendingCompletionBundles;
    NSMutableDictionary *_assistantDelegates;
    CDUnknownBlockType _handler;
    NSObject<OS_dispatch_source> *_delegatetimer;
}

- (void).cxx_destruct;
- (void)_completeiCloudAndDelegateSetupWithResponse:(id)arg1;
- (void)_setupDelegateAccountsWithEmailChoice:(id)arg1;
- (id)_adjustResponseDictionary:(id)arg1;
- (id)_loadAssistantDelegateBundles;
- (void)setupiCloudDelegateWithUsername:(id)arg1 password:(id)arg2 emailChoice:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (id)initWithStore:(id)arg1;
- (id)init;

@end

@interface AADelegateResponseStore : NSObject
{
}

+ (void)restoreFinished;
+ (void)saveiCloudToken:(id)arg1 faceTimeToken:(id)arg2 madridToken:(id)arg3 gameCenterToken:(id)arg4;
+ (void)saveiCloudResponseParameters:(id)arg1;
+ (id)responseAndTokenRuntimeStore;
+ (void)_saveKeychainItem:(id)arg1 forUsername:(id)arg2 service:(id)arg3 itemDescription:(id)arg4;

@end

@interface AADeviceInfo : NSObject
{
    APSConnection *_apsConnection;
    _Bool _tokenDone;
    NSData *_token;
    NSObject<OS_dispatch_semaphore> *_tokenSema;
}

+ (id)productVersion;
+ (id)userAgentHeader;
+ (id)clientInfoHeader;
+ (id)appleIDClientIdentifier;
+ (id)apnsToken;
+ (id)serialNumber;
+ (id)osVersion;
+ (id)udid;
+ (id)infoDictionary;
- (void).cxx_destruct;
- (id)userAgentHeader;
- (id)clientInfoHeader;
- (id)appleIDClientIdentifier;
- (id)deviceClass;
- (id)apnsToken;
- (id)regionCode;
- (id)buildVersion;
- (id)osName;
- (id)storageCapacity;
- (id)internationalMobileEquipmentIdentity;
- (id)mobileEquipmentIdentifier;
- (_Bool)hasCellularCapability;
- (id)deviceEnclosureColor;
- (id)deviceColor;
- (id)deviceName;
- (id)productType;
- (id)productVersion;
- (id)wifiMacAddress;
- (id)serialNumber;
- (id)udid;
- (id)osVersion;
- (id)deviceInfoDictionary;

@end

@interface AADeviceProvisioningRequest : AARequest
{
    NSString *_dsid;
    NSString *_url;
    NSData *_data;
}

- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithDSID:(id)arg1 URLString:(id)arg2 requestData:(id)arg3;

@end

@interface AADeviceProvisioningResponse : AAResponse
{
}

@end

@interface AADeviceProvisioningSession : NSObject
{
    NSString *_dsid;
    unsigned long long _dsidNumber;
    struct OpaqueCFHTTPCookieStorage *_cookieStorageRef;
}

- (void).cxx_destruct;
- (int)eraseProvisioning;
- (int)synchronizeProvisioningWithData:(id)arg1;
- (int)provisionDeviceWithData:(id)arg1;
- (id)_deviceProvisioningInfo;
- (void)addProvisioningInfoToURLRequest:(id)arg1;
- (void)addProvisioningInfoToAARequest:(id)arg1 withFallback:(_Bool)arg2;
- (void)addProvisioningInfoToAARequest:(id)arg1;
- (void)setCookieStorageRef:(struct OpaqueCFHTTPCookieStorage *)arg1;
- (id)initWithAccount:(id)arg1;
- (id)initWithDSID:(id)arg1;
- (id)init;

@end

@interface AAEmailLookupRequest : AARequest
{
    ACAccount *_account;
    NSArray *_emailAddresses;
}

+ (Class)responseClass;
@property(retain, nonatomic) NSArray *emailAddresses; // @synthesize emailAddresses=_emailAddresses;
@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)urlCredential;
- (id)initWithURLString:(id)arg1 account:(id)arg2 emailAddresses:(id)arg3;
- (id)initWithAccount:(id)arg1 emailAddresses:(id)arg2;

@end

@interface AAEmailLookupResponse : AAResponse
{
}

@property(readonly, nonatomic) NSDictionary *lookupResults;

@end

@interface AAFMIPAuthenticateRequest : AARequest
{
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithAccount:(id)arg1;
- (id)urlString;

@end

@interface AAFMIPAuthenticateResponse : AAResponse
{
    NSDictionary *_tokens;
    NSDictionary *_appleAccountInfo;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *fmipWipeToken;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAFamilyDetailsRequest : AAFamilyRequest
{
}

+ (Class)responseClass;
- (id)urlString;
- (id)initWithAccount:(id)arg1;

@end

@interface AAFamilyDetailsResponse : AAResponse
{
    NSArray *_members;
    _Bool _canAddMembers;
    _Bool _canAddChildMembers;
    AAFamilyMember *_organizer;
    AAFamilyMember *_me;
    NSArray *_invites;
    NSArray *_pendingMembers;
    NSString *_childAccountPrompt;
    NSString *_childAccountButtonTitle;
}

@property(readonly, nonatomic) NSString *childAccountButtonTitle; // @synthesize childAccountButtonTitle=_childAccountButtonTitle;
@property(readonly, nonatomic) NSString *childAccountPrompt; // @synthesize childAccountPrompt=_childAccountPrompt;
@property(readonly, nonatomic) _Bool canAddChildMembers; // @synthesize canAddChildMembers=_canAddChildMembers;
@property(readonly, nonatomic) _Bool canAddMembers; // @synthesize canAddMembers=_canAddMembers;
@property(readonly, nonatomic) NSArray *pendingMembers; // @synthesize pendingMembers=_pendingMembers;
@property(readonly, nonatomic) NSArray *invites; // @synthesize invites=_invites;
@property(readonly, nonatomic) AAFamilyMember *me; // @synthesize me=_me;
@property(readonly, nonatomic) AAFamilyMember *organizer; // @synthesize organizer=_organizer;
@property(readonly, nonatomic) NSArray *members; // @synthesize members=_members;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *firstNames;
@property(readonly, nonatomic) long long pendingInviteCount;
@property(readonly, nonatomic) long long pendingMemberCount;
@property(readonly, nonatomic) long long memberCount;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAFamilyEligibilityRequest : AAFamilyRequest
{
    SSAccount *_iTunesAccount;
}

+ (Class)responseClass;
@property(retain, nonatomic) SSAccount *iTunesAccount; // @synthesize iTunesAccount=_iTunesAccount;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;

@end

@interface AAFamilyEligibilityResponse : AAResponse
{
    _Bool _hasPendingInvites;
    NSArray *_familyFeaturePrimaryDescriptions;
    NSArray *_familyFeatureSecondaryDescriptions;
    NSString *_familyFeatureSecondaryTitle;
    NSString *_underageEligibilityAlertTitle;
    NSString *_underageEligibilityAlertMessage;
}

@property(readonly, nonatomic) NSString *underageEligibilityAlertMessage; // @synthesize underageEligibilityAlertMessage=_underageEligibilityAlertMessage;
@property(readonly, nonatomic) NSString *underageEligibilityAlertTitle; // @synthesize underageEligibilityAlertTitle=_underageEligibilityAlertTitle;
@property(readonly, nonatomic) NSString *familyFeatureSecondaryTitle; // @synthesize familyFeatureSecondaryTitle=_familyFeatureSecondaryTitle;
@property(readonly, nonatomic) NSArray *familyFeatureSecondaryDescriptions; // @synthesize familyFeatureSecondaryDescriptions=_familyFeatureSecondaryDescriptions;
@property(readonly, nonatomic) NSArray *familyFeaturePrimaryDescriptions; // @synthesize familyFeaturePrimaryDescriptions=_familyFeaturePrimaryDescriptions;
@property(readonly, nonatomic) _Bool hasPendingInvites; // @synthesize hasPendingInvites=_hasPendingInvites;
- (void).cxx_destruct;
@property(readonly, nonatomic) long long eligibilityStatus;
@property(readonly, nonatomic) _Bool eligible;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAFamilyInvite : NSObject
{
    _Bool _isChildTransferInvite;
    NSString *_code;
    NSString *_organizerFirstName;
    NSString *_organizerLastName;
    NSString *_organizerEmail;
    NSNumber *_organizerDSID;
    NSNumber *_recepientDSID;
    NSString *_childFirstName;
    NSString *_childLastName;
}

@property(copy, nonatomic) NSString *childLastName; // @synthesize childLastName=_childLastName;
@property(copy, nonatomic) NSString *childFirstName; // @synthesize childFirstName=_childFirstName;
@property(nonatomic) _Bool isChildTransferInvite; // @synthesize isChildTransferInvite=_isChildTransferInvite;
@property(copy, nonatomic) NSNumber *recepientDSID; // @synthesize recepientDSID=_recepientDSID;
@property(copy, nonatomic) NSNumber *organizerDSID; // @synthesize organizerDSID=_organizerDSID;
@property(copy, nonatomic) NSString *organizerEmail; // @synthesize organizerEmail=_organizerEmail;
@property(copy, nonatomic) NSString *organizerLastName; // @synthesize organizerLastName=_organizerLastName;
@property(copy, nonatomic) NSString *organizerFirstName; // @synthesize organizerFirstName=_organizerFirstName;
@property(copy, nonatomic) NSString *code; // @synthesize code=_code;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

@interface AAFamilyMember : NSObject
{
    _Bool _isMe;
    _Bool _isChild;
    _Bool _isSharingPurchases;
    _Bool _isOrganizer;
    _Bool _areParentalControlsEnabled;
    _Bool _isAskToBuyEnabled;
    NSString *_firstName;
    NSString *_lastName;
    NSString *_appleID;
    NSNumber *_personID;
    NSString *_personIDHash;
    NSString *_title;
    NSDate *_joinDate;
    NSString *_iTunesNotLinkedMessage;
    NSString *_linkediTunesAppleID;
    NSNumber *_linkediTunesDSID;
}

@property(nonatomic) _Bool isAskToBuyEnabled; // @synthesize isAskToBuyEnabled=_isAskToBuyEnabled;
@property(nonatomic) _Bool areParentalControlsEnabled; // @synthesize areParentalControlsEnabled=_areParentalControlsEnabled;
@property(copy, nonatomic) NSNumber *linkediTunesDSID; // @synthesize linkediTunesDSID=_linkediTunesDSID;
@property(copy, nonatomic) NSString *linkediTunesAppleID; // @synthesize linkediTunesAppleID=_linkediTunesAppleID;
@property(copy, nonatomic) NSString *iTunesNotLinkedMessage; // @synthesize iTunesNotLinkedMessage=_iTunesNotLinkedMessage;
@property(nonatomic) _Bool isOrganizer; // @synthesize isOrganizer=_isOrganizer;
@property(nonatomic) _Bool isSharingPurchases; // @synthesize isSharingPurchases=_isSharingPurchases;
@property(nonatomic) _Bool isChild; // @synthesize isChild=_isChild;
@property(nonatomic) _Bool isMe; // @synthesize isMe=_isMe;
@property(copy, nonatomic) NSDate *joinDate; // @synthesize joinDate=_joinDate;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(copy, nonatomic) NSString *personIDHash; // @synthesize personIDHash=_personIDHash;
@property(copy, nonatomic) NSNumber *personID; // @synthesize personID=_personID;
@property(copy, nonatomic) NSString *appleID; // @synthesize appleID=_appleID;
@property(copy, nonatomic) NSString *lastName; // @synthesize lastName=_lastName;
@property(copy, nonatomic) NSString *firstName; // @synthesize firstName=_firstName;
- (void).cxx_destruct;

@end

@interface AAFamilyMemberDetailsUIRequest : AAFamilyRequest
{
    NSNumber *_memberDSID;
    NSString *_memberEmail;
}

@property(copy, nonatomic) NSString *memberEmail; // @synthesize memberEmail=_memberEmail;
@property(copy, nonatomic) NSNumber *memberDSID; // @synthesize memberDSID=_memberDSID;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;

@end

@interface AAGenericTermsUIRequest : AARequest
{
    NSDictionary *_requestDictionary;
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithParameters:(id)arg1;
- (id)initWithAccount:(id)arg1 parameters:(id)arg2;
- (id)urlString;

@end

@interface AAGenericTermsUIResponse : AAResponse
{
    NSDictionary *_responseTermsDictionary;
    NSString *_responseAgreeURL;
    NSData *_responseData;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *agreeURL;
@property(readonly, nonatomic) NSData *responseData;
@property(readonly, nonatomic) NSDictionary *termsDictionary;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAGrandSlamSigner : NSObject
{
    ACAccount *_appleAccount;
    ACAccount *_grandSlamAccount;
    ACAccountStore *_store;
    NSString *_appTokenID;
}

@property(readonly, nonatomic) ACAccount *grandSlamAccount; // @synthesize grandSlamAccount=_grandSlamAccount;
@property(readonly, nonatomic) ACAccount *appleAccount; // @synthesize appleAccount=_appleAccount;
@property(readonly, nonatomic) ACAccountStore *accountStore; // @synthesize accountStore=_store;
- (void).cxx_destruct;
- (_Bool)signURLRequest:(id)arg1;
- (id)initWithAppleAccount:(id)arg1 grandSlamAccount:(id)arg2 accountStore:(id)arg3 appTokenID:(id)arg4;

@end

@interface AAHighSecurityAccountAlert : NSObject
{
}

- (void)showAlert;

@end

@interface AAInitiateEmailVettingRequest : AAEmailVettingRequest
{
}

- (id)bodyDictionary;
- (id)urlString;

@end

@interface AAInviteFamilyMemberRequest : AAFamilyRequest
{
    NSString *_inviteeEmail;
    NSString *_inviteeCompositeName;
    NSString *_inviteeShortName;
}

@property(copy, nonatomic) NSString *inviteeShortName; // @synthesize inviteeShortName=_inviteeShortName;
@property(copy, nonatomic) NSString *inviteeCompositeName; // @synthesize inviteeCompositeName=_inviteeCompositeName;
@property(copy, nonatomic) NSString *inviteeEmail; // @synthesize inviteeEmail=_inviteeEmail;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;

@end

@interface AAKeychainManager : NSObject
{
}

+ (void)removePasswordForService:(id)arg1 username:(id)arg2 accessGroup:(id)arg3;
+ (void)setPassword:(id)arg1 forServiceName:(id)arg2 username:(id)arg3 accessGroup:(id)arg4;
+ (id)passwordForServiceName:(id)arg1 username:(id)arg2 accessGroup:(id)arg3;
+ (void)initialize;

@end

@interface AALoginDelegatesRequest : AARequest
{
    NSDictionary *_loginParameters;
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 parameters:(id)arg2;

@end

@interface AALoginDelegatesResponse : AAResponse
{
}

@property(readonly, nonatomic) NSString *dsid;
- (id)responseParametersForServiceIdentifier:(id)arg1;
@property(readonly, nonatomic) NSDictionary *responseParameters;
@property(readonly, nonatomic) NSString *statusMessage;
@property(readonly, nonatomic) NSNumber *status;

@end

@interface AALoginOrCreateDelegatesRequest : AARequest
{
    ACAccount *_account;
    NSDictionary *_parameters;
    AASigningSession *_signingSession;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 parameters:(id)arg2 signingSession:(id)arg3;

@end

@interface AALoginPluginManager : NSObject
{
    NSArray *_plugins;
    _Bool _shouldStashLoginResponse;
    _Bool _hasStashedLoginResponse;
    NSObject<OS_dispatch_queue> *_pluginNotificationQueue;
    id <AASetupAssistantDelegateService> _idsPlugin;
    _Bool _shouldSkipiTunesPlugin;
}

+ (id)sharedInstance;
@property(nonatomic) _Bool shouldSkipiTunesPlugin; // @synthesize shouldSkipiTunesPlugin=_shouldSkipiTunesPlugin;
- (void).cxx_destruct;
- (void)_loadPlugins;
- (void)_stashServiceTokensFromResponse:(id)arg1;
- (void)unstashLoginResponse;
@property(nonatomic) _Bool shouldStashLoginResponse;
- (_Bool)_notifyServicesOfLoginResponse:(id)arg1 forAppleID:(id)arg2 password:(id)arg3;
- (void)notifyServicesOfLoginResponse:(id)arg1 forAppleID:(id)arg2 password:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)collectParametersForIdentityEstablishmentRequest;
- (id)collectParametersForLoginRequest;
- (id)init;

@end

@interface AAMobileMeOfferRequest : AARequest
{
}

+ (Class)responseClass;
- (id)urlString;

@end

@interface AAMobileMeOfferResponse : AAResponse
{
}

@property(readonly, nonatomic) NSString *classicMessage;
@property(readonly, nonatomic) NSString *classicTitle;
@property(readonly, nonatomic) NSString *message;
@property(readonly, nonatomic) NSString *title;
@property(readonly, nonatomic) NSNumber *identifier;

@end

@interface AANewAccountRequest : AARequest
{
}

- (id)urlRequest;
- (id)urlString;

@end

@interface AAPasswordSecurityUIRequest : AAAppleIDSettingsRequest
{
}

- (id)urlString;

@end

@interface AAPaymentSummaryRequest : AAAppleIDSettingsRequest
{
    NSString *_secondaryAuthToken;
}

+ (Class)responseClass;
@property(copy, nonatomic) NSString *secondaryAuthToken; // @synthesize secondaryAuthToken=_secondaryAuthToken;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;

@end

@interface AAPaymentSummaryResponse : AAResponse
{
    NSDictionary *_responseParameters;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *description;
@property(readonly, nonatomic) unsigned long long numberOfCards;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAPaymentUIRequest : AAAppleIDSettingsRequest
{
}

- (id)urlString;

@end

@interface AAPersonalInfoUIRequest : AAAppleIDSettingsRequest
{
}

- (id)urlString;

@end

@interface AAProvisioningResponse : AAAuthenticationResponse
{
    NSDictionary *_icloud;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *fmipAuthToken;
@property(readonly, nonatomic) NSString *iCloudAuthToken;
@property(readonly, nonatomic) NSNumber *primaryEmailVerified;
@property(readonly, nonatomic) NSString *primaryEmail;
@property(readonly, nonatomic) NSString *lastName;
@property(readonly, nonatomic) NSString *firstName;
@property(readonly, nonatomic) NSArray *appleIDAliases;
@property(readonly, nonatomic) NSString *appleID;
@property(readonly, nonatomic) NSDictionary *dataclassProperties;
@property(readonly, nonatomic) NSArray *provisionedDataclasses;
- (id)initWithDictionary:(id)arg1;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAQuotaDepletionAlert : NSObject
{
    NSString *_dataclass;
}

- (void).cxx_destruct;
- (id)_deviceSpecificLocalizedString:(id)arg1;
- (_Bool)showIfNecessaryWithHandler:(CDUnknownBlockType)arg1;
- (void)showWithHandler:(CDUnknownBlockType)arg1;
- (id)initForDataclass:(id)arg1;
- (id)init;

@end

@interface AARegisterDeviceRequest : AARequest
{
    ACAccount *_account;
    NSDictionary *_deviceProperties;
}

- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 deviceProperties:(id)arg2;

@end

@interface AARegisterRequest : AAAuthenticateRequest
{
}

+ (Class)responseClass;
- (id)urlRequest;
- (id)urlString;
- (id)initWithURLString:(id)arg1 username:(id)arg2 password:(id)arg3;

@end

@interface AARequester : NSOperation
{
    AARequest *_request;
    AAResponse *_response;
    NSURLConnection *_urlConnection;
    CDUnknownBlockType _handler;
    NSMutableData *_data;
    NSHTTPURLResponse *_httpResponse;
    Class _responseClass;
    _Bool _isExecuting;
    _Bool _isFinished;
    _Bool _canceled;
    _Bool _isCanceled;
    NSObject<OS_dispatch_queue> *_handlerQueue;
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *handlerQueue; // @synthesize handlerQueue=_handlerQueue;
@property(nonatomic, getter=isExecuting) _Bool isExecuting; // @synthesize isExecuting=_isExecuting;
@property(getter=isCanceled) _Bool canceled; // @synthesize canceled=_isCanceled;
@property(getter=isFinished) _Bool finished; // @synthesize finished=_isFinished;
- (void).cxx_destruct;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (_Bool)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)_callHandler;
- (void)start;
- (void)cancel;
- (id)initWithRequest:(id)arg1 handler:(CDUnknownBlockType)arg2;

@end

@interface AASecondaryAuthenticationRequest : AARequest
{
    NSString *_primaryToken;
    NSString *_dsid;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithDSID:(id)arg1 primaryToken:(id)arg2;

@end

@interface AASecondaryAuthenticationResponse : AAResponse
{
    NSString *_secondFactorToken;
    NSData *_buddyML;
}

@property(readonly, nonatomic) NSData *buddyML; // @synthesize buddyML=_buddyML;
@property(readonly, nonatomic) NSString *secondFactorToken; // @synthesize secondFactorToken=_secondFactorToken;
- (void).cxx_destruct;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AASetupAssistantAuthenticateRequest : AAAuthenticateRequest
{
}

- (id)urlString;

@end

@interface AAURLConfigurationRequest : AARequest
{
}

+ (Class)responseClass;
- (id)urlString;

@end

@interface AASetupAssistantConfigRequest : AAURLConfigurationRequest
{
}

+ (Class)responseClass;
- (id)urlString;

@end

@interface AASetupAssistantConfigResponse : AAResponse
{
    NSDictionary *_urls;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *iForgotUIURL;
@property(readonly, nonatomic) NSString *activeEmailDomain;
@property(readonly, nonatomic) _Bool setupAssistantServerEnabled;
@property(readonly, nonatomic) NSString *upgradeStatusURL;
@property(readonly, nonatomic) NSString *genericTermsURL;
@property(readonly, nonatomic) NSString *upgradeIOSTermsUI;
@property(readonly, nonatomic) NSString *loginDelegatesURL;
@property(readonly, nonatomic) NSString *existingAppleIDTermsUIURL;
@property(readonly, nonatomic) NSString *iForgotURL;
@property(readonly, nonatomic) NSString *checkValidityURL;
@property(readonly, nonatomic) NSString *createDelegateAccountsURL;
@property(readonly, nonatomic) NSString *updateAppleIDURL;
@property(readonly, nonatomic) NSString *createAppleIDURL;
@property(readonly, nonatomic) NSString *authenticateURL;
@property(readonly, nonatomic) NSString *aboutURL;
@property(readonly, nonatomic) NSString *xmlUI;
@property(readonly, nonatomic) NSString *signingSessionURL;
@property(readonly, nonatomic) NSString *signingSessionCertURL;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AASetupAssistantCreateRequest : AARequest
{
    NSDictionary *appleIDParameters;
    AASigningSession *signingSession;
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)bodyDictionary;
- (id)initWithAccount:(id)arg1 withAppleIDParameters:(id)arg2 signingSession:(id)arg3;

@end

@interface AASetupAssistantCreateResponse : AAResponse
{
}

@property(readonly, nonatomic) NSString *HSAData;
@property(readonly, nonatomic) NSString *HSAAction;
@property(readonly, nonatomic) NSString *appleID;
@property(readonly, nonatomic) NSString *personID;
@property(readonly, nonatomic) NSString *statusMessage;
@property(readonly, nonatomic) NSNumber *status;

@end

@interface AASetupAssistantService : NSObject
{
    NSOperationQueue *_requesterQueue;
    NSString *_appleID;
    NSString *_password;
    NSString *_emailChoice;
    ACAccount *_account;
    struct OpaqueCFHTTPCookieStorage *_cookieStorage;
    AASigningSession *_signingSession;
    NSDate *_signingSessionCreationDate;
}

+ (void)resetURLConfiguration;
+ (id)urlConfiguration;
@property(copy, nonatomic) NSString *emailChoice; // @synthesize emailChoice=_emailChoice;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *appleID; // @synthesize appleID=_appleID;
- (void).cxx_destruct;
- (void)_doHSADeviceReprovisioningWithDSID:(id)arg1;
- (void)_doHSADeviceProvisioningSynchronizationWithDSID:(id)arg1 data:(id)arg2;
- (void)_doHSADeviceProvisioningWithDSID:(id)arg1 data:(id)arg2;
- (id)_signingSession;
- (void)shouldPresentUpgradeFlowWithCompletion:(CDUnknownBlockType)arg1;
- (void)upgradeiCloudTermsIfNecessaryWithHandler:(CDUnknownBlockType)arg1;
- (void)loginDelegatesWithParameters:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setupDelegateAccountsWithParameters:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)updateAppleIDWithParameters:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)createAppleIDWithParameters:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)authenticateWithHandler:(CDUnknownBlockType)arg1;
- (void)downloadURLConfiguration:(CDUnknownBlockType)arg1;
- (void)setCookieStorage:(struct OpaqueCFHTTPCookieStorage *)arg1;
- (void)dealloc;
- (id)initWithAccount:(id)arg1;
- (id)initWithAppleID:(id)arg1 password:(id)arg2;
- (id)init;

@end

@interface AASetupAssistantSetupDelegatesRequest : AARequest
{
    NSDictionary *setupParameters;
    AASigningSession *signingSession;
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 withSetupParameters:(id)arg2 signingSession:(id)arg3;

@end

@interface AASetupAssistantSetupDelegatesResponse : AAResponse
{
}

@property(readonly, nonatomic) NSString *dsid;
- (id)responseParametersForServiceIdentifier:(id)arg1;
@property(readonly, nonatomic) NSDictionary *responseParameters;
@property(readonly, nonatomic) NSString *statusMessage;
@property(readonly, nonatomic) NSNumber *status;

@end

@interface AASetupAssistantTermsFetchRequest : AARequest
{
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1;

@end

@interface AASetupAssistantUpdateRequest : AASetupAssistantCreateRequest
{
}

- (id)urlString;

@end

@interface AASetupAssistantUpgradeStatusRequest : AARequest
{
    ACAccount *_account;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1;

@end

@interface AASetupAssistantUpgradeStatusResponse : AAResponse
{
}

@property(readonly, nonatomic) NSNumber *upgradeStatus;

@end

@interface AASigningSession : NSObject
{
    NSString *_certURL;
    NSString *_sessionURL;
    int _error;
}

@property(readonly, nonatomic) int error; // @synthesize error=_error;
- (void).cxx_destruct;
- (void)dealloc;
- (id)signatureForData:(id)arg1;
- (void)establishSession;
- (id)initWithCertURL:(id)arg1 sessionURL:(id)arg2;

@end

@interface AAURLConfiguration : NSObject
{
    NSDictionary *_urlDictionary;
}

+ (void)reset;
+ (id)_urlConfigurationWithError:(id *)arg1;
+ (id)itemForKey:(id)arg1 error:(id *)arg2;
+ (id)urlConfiguration;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *urlsStoringCookies;
@property(readonly, nonatomic) NSString *familyPaymentCardUIURL;
@property(readonly, nonatomic) NSString *aboutURL;
@property(readonly, nonatomic) NSString *familyPaymentInfoURL;
@property(readonly, nonatomic) NSString *cloudKitDevicesListURL;
@property(readonly, nonatomic) NSString *cloudKitStartMigrationURL;
@property(readonly, nonatomic) NSString *cloudKitMigrationStateURL;
@property(readonly, nonatomic) NSString *familyLearnMoreURL;
@property(readonly, nonatomic) NSString *rejectChildTransferURL;
@property(readonly, nonatomic) NSString *acceptChildTransferURL;
@property(readonly, nonatomic) NSString *apsEnvironment;
@property(readonly, nonatomic) NSString *grandslamURL;
@property(readonly, nonatomic) NSString *childAccountCreationUIURL;
@property(readonly, nonatomic) NSString *getFamilyDetailsURL;
@property(readonly, nonatomic) NSString *addFamilyMemberUIURL;
@property(readonly, nonatomic) NSString *familyMemberDetailsUIURL;
@property(readonly, nonatomic) NSString *updateNameURL;
@property(readonly, nonatomic) NSString *pendingFamilyInvitesUIURL;
@property(readonly, nonatomic) NSString *checkiCloudMembershipURL;
@property(readonly, nonatomic) NSString *familyEligibilityURL;
@property(readonly, nonatomic) NSString *getFamilyMemberPhotoURL;
@property(readonly, nonatomic) NSString *updateMyPhotoURL;
@property(readonly, nonatomic) NSString *getMyPhotoURL;
@property(readonly, nonatomic) NSString *secondaryAuthenticationURL;
@property(readonly, nonatomic) NSString *declineFamilyInviteURL;
@property(readonly, nonatomic) NSString *acceptFamilyInviteURL;
@property(readonly, nonatomic) NSString *getFamilyPushDetailsURL;
@property(readonly, nonatomic) NSString *unregisterDeviceURL;
@property(readonly, nonatomic) NSString *registerDeviceURL;
@property(readonly, nonatomic) NSString *paymentInfoUIURL;
@property(readonly, nonatomic) NSString *passwordSecurityUIURL;
@property(readonly, nonatomic) NSString *personalInfoUIURL;
@property(readonly, nonatomic) NSString *familySetupUIURL;
@property(readonly, nonatomic) NSString *paymentSummaryURL;
@property(readonly, nonatomic) NSString *devicesUIURL;
@property(readonly, nonatomic) NSString *familyUIURL;
@property(readonly, nonatomic) NSString *accountManagementUIURL;
@property(readonly, nonatomic) NSString *verifyCodeURL;
@property(readonly, nonatomic) NSString *sendCodeURL;
@property(readonly, nonatomic) NSString *deviceListURL;
@property(readonly, nonatomic) NSString *loginOrCreateDelegatesURL;
@property(readonly, nonatomic) NSString *createDelegatesURL;
@property(readonly, nonatomic) NSString *loginDelegatesURL;
@property(readonly, nonatomic) NSString *syncMachineURL;
@property(readonly, nonatomic) NSString *finishProvisioningURL;
@property(readonly, nonatomic) NSString *existingAppleIDTermsUIURL;
@property(readonly, nonatomic) NSString *iForgotUIURL;
@property(readonly, nonatomic) NSString *fmipAuthenticate;
@property(readonly, nonatomic) NSString *genericTermsURL;
@property(readonly, nonatomic) NSString *emailLookupURL;
@property(readonly, nonatomic) NSString *signingSessionURL;
@property(readonly, nonatomic) NSString *signingSessionCertURL;
@property(readonly, nonatomic) NSString *mobileMeOfferAlertURL;
@property(readonly, nonatomic) NSString *completeValidateEmailURL;
@property(readonly, nonatomic) NSString *addEmailURL;
@property(readonly, nonatomic) NSString *initiateValidateEmailURL;
@property(readonly, nonatomic) NSString *authenticateURL;
@property(readonly, nonatomic) NSString *fetchAccountSettingsURL;
@property(readonly, nonatomic) NSString *signInURL;
@property(readonly, nonatomic) NSString *updateAccountUIURL;
@property(readonly, nonatomic) NSString *accountCreationUIURL;
@property(readonly, nonatomic) NSString *validateURL;
@property(readonly, nonatomic) NSString *registerURL;
@property(readonly, nonatomic) NSString *updateAccountURL;
@property(readonly, nonatomic) NSString *accountCreationURL;
- (id)initWithDictionary:(id)arg1;

@end

@interface AAUnregisterDeviceRequest : AARequest
{
    ACAccount *_account;
    NSDictionary *_deviceProperties;
}

- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 deviceProperties:(id)arg2;

@end

@interface AAUpdateNameRequest : AAAppleIDSettingsRequest
{
    NSString *_newFirstName;
    NSString *_newLastName;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAppleAccount:(id)arg1 grandSlamAccount:(id)arg2 accountStore:(id)arg3 firstName:(id)arg4 lastName:(id)arg5;

@end

@interface AAUpdateProvisioningRequest : AARequest
{
    ACAccount *_account;
    NSString *_authToken;
}

+ (Class)responseClass;
@property(copy, nonatomic) NSString *authToken; // @synthesize authToken=_authToken;
@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)urlCredential;
- (id)initWithURLString:(id)arg1 account:(id)arg2;
- (id)initWithAccount:(id)arg1 token:(id)arg2;
- (id)initWithAccount:(id)arg1;

@end

@interface AAUpgradeiOSTermsResponse : AAResponse
{
    NSData *_xmlUIData;
}

@property(readonly, nonatomic) NSData *xmlUIData; // @synthesize xmlUIData=_xmlUIData;
- (void).cxx_destruct;
- (_Bool)bodyIsPlist;
- (id)responseXMLData;
- (id)initWithHTTPResponse:(id)arg1 data:(id)arg2;

@end

@interface AAUserNotification : NSObject
{
}

+ (void)showUserNotificationWithTitle:(id)arg1 message:(id)arg2 secureTextFieldTitle:(id)arg3 cancelButtonTitle:(id)arg4 otherButtonTitle:(id)arg5 completion:(CDUnknownBlockType)arg6;
+ (void)showUserNotificationWithTitle:(id)arg1 message:(id)arg2 textFieldTitle:(id)arg3 cancelButtonTitle:(id)arg4 otherButtonTitle:(id)arg5 completion:(CDUnknownBlockType)arg6;
+ (void)showUserNotificationWithTitle:(id)arg1 message:(id)arg2 cancelButtonTitle:(id)arg3 otherButtonTitle:(id)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;

@end

@interface AAiCloudTermsAgreeRequest : AARequest
{
    ACAccount *_account;
}

@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)initWithURLString:(id)arg1 account:(id)arg2;

@end

@interface AAiCloudTermsStringRequest : AARequest
{
}

+ (Class)responseClass;
- (id)urlRequest;
- (id)urlString;

@end

@interface AAiCloudTermsStringResponse : AAGenericTermsUIResponse
{
}

@property(readonly, nonatomic) NSString *termsString;

@end

@interface ACAccount (AppleAccount)
+ (id)aa_dataclassesBoundToSingleAppleAccount;
+ (id)aa_dataclassesBoundToPrimaryAppleAccount;
@property(nonatomic, setter=aa_setCloudDocsMigrationComplete:) _Bool aa_isCloudDocsMigrationComplete;
@property(nonatomic, setter=aa_setUsesCloudDocs:) _Bool aa_isUsingCloudDocs;
@property(readonly, nonatomic) ACAccount *aa_cloudKitAccount;
@property(readonly, nonatomic) NSString *aa_syncStoreIdentifier;
- (int)mobileMeAccountStatus;
@property(readonly, nonatomic) _Bool aa_needsEmailConfiguration;
@property(readonly, nonatomic) ACAccount *aa_childMailAccount;
- (void)aa_setUseCellular:(_Bool)arg1 forDataclass:(id)arg2;
- (_Bool)aa_useCellularForDataclass:(id)arg1;
@property(readonly, nonatomic) _Bool aa_needsRegistration;
@property(nonatomic, setter=aa_setSyncedAccount:) _Bool aa_isSyncedAccount;
@property(readonly, nonatomic) NSDictionary *aa_serviceUnavailableInfo;
@property(readonly, nonatomic) _Bool aa_serviceUnavailable;
- (void)aa_updateWithProvisioningResponse:(id)arg1;
@property(readonly, nonatomic) NSDictionary *aa_accountFirstDisplayAlert;
@property(readonly, nonatomic) NSDictionary *aa_accountFooterButton;
@property(readonly, nonatomic) NSString *aa_accountFooterText;
@property(copy, nonatomic, setter=aa_setPassword:) NSString *aa_password;
- (void)aa_setHSAToken:(id)arg1;
- (id)aa_hsaTokenWithError:(id *)arg1;
@property(readonly, nonatomic) NSString *aa_hsaToken;
- (void)aa_setMapsToken:(id)arg1;
@property(readonly, nonatomic) NSString *aa_mapsToken;
@property(readonly, nonatomic) NSString *aa_fmipToken;
@property(copy, nonatomic, setter=aa_setAuthToken:) NSString *aa_authToken;
- (id)aa_authTokenWithError:(id *)arg1;
@property(readonly, nonatomic) ACAccount *aa_fmipAccount;
@property(readonly, nonatomic) ACAccount *aa_fmfAccount;
@property(nonatomic, setter=aa_setNeedsToVerifyTerms:) _Bool aa_needsToVerifyTerms;
@property(readonly, nonatomic) NSArray *aa_appleIDAliases;
@property(readonly, nonatomic) NSString *aa_protocolVersion;
@property(readonly, nonatomic) NSString *aa_primaryEmail;
- (void)_aa_setAppleID:(id)arg1;
@property(readonly, nonatomic) NSString *aa_appleId;
@property(nonatomic, setter=aa_setPrimaryEmailVerified:) _Bool aa_isPrimaryEmailVerified;
@property(nonatomic, setter=aa_setPrimaryAccount:) _Bool aa_isPrimaryAccount;
@property(readonly, nonatomic) NSString *aa_accountTypeString;
@property(readonly, nonatomic) NSString *aa_personID;
@property(copy, nonatomic, setter=aa_setLastName:) NSString *aa_lastName;
@property(copy, nonatomic, setter=aa_setFirstName:) NSString *aa_firstName;
@property(readonly, nonatomic) NSString *aa_displayName;
- (void)_aa_setAltDSID:(id)arg1;
@property(readonly, nonatomic) NSString *aa_altDSID;
@end

@interface ACAccount (AppleAccountInternal)
- (void)aa_removeCerts;
- (void)aa_configureCerts;
@end

@interface ACAccount (AppleID)
- (_Bool)canRemoveAccount;
- (id)_registeredBundles;
- (id)dsid;
- (void)setDSID:(id)arg1;
- (id)appleID;
- (id)initWithAppleID:(id)arg1 password:(id)arg2;
@end

@interface ACAccount (AppleIDInternal)
- (void)storeOriginalUsername;
@end

@interface ACAccountStore (AppleAccount)
- (id)aa_grandSlamAccountWithUsername:(id)arg1;
- (void)aa_registerAppleAccountWithHSA:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)aa_lookupEmailAddresses:(id)arg1 withAppleAccount:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)aa_registerAppleAccount:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)_performUpdateRequestWithAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)aa_updatePropertiesForAppleAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)aa_recommendedAppleIDForAccountSignInWithTypeIdentifier:(id)arg1;
- (id)aa_accountsEnabledForDataclass:(id)arg1;
- (id)aa_appleAccountWithPersonID:(id)arg1;
- (id)aa_appleAccountWithUsername:(id)arg1;
- (id)aa_primaryAppleAccountWithPreloadedDataclasses;
- (id)aa_primaryAppleAccount;
- (id)aa_appleAccounts;
- (id)aa_appleAccountType;
@end

@interface ACAccountStore (AppleID)
- (id)accountWithAppleID:(id)arg1;
- (id)accountsWithAccountType:(id)arg1 appleID:(id)arg2;
@end

@interface ATVHighSecurityAccountDeviceList : AAAppleTVRequest
{
}

+ (Class)responseClass;
- (id)urlRequest;
- (id)urlString;

@end

@interface ATVHighSecurityAccountDeviceListResponse : AAResponse
{
}

@property(readonly, nonatomic) long long errorCode;
@property(readonly, nonatomic) NSString *errorMessage;
@property(readonly, nonatomic) NSString *errorTitle;
@property(readonly, nonatomic) NSDictionary *userDisplayStrings;
@property(readonly, nonatomic) NSArray *devices;

@end

@interface ATVHighSecurityAccountSendCode : AAAppleTVRequest
{
    NSDictionary *_device;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 device:(id)arg2;

@end

@interface ATVHighSecurityAccountSendCodeResponse : AAResponse
{
}

@property(readonly, nonatomic) long long errorCode;
@property(readonly, nonatomic) NSString *errorMessage;
@property(readonly, nonatomic) NSString *errorTitle;
@property(readonly, nonatomic) NSDictionary *userDisplayStrings;
@property(readonly, nonatomic) _Bool success;

@end

@interface ATVHighSecurityAccountVerifyCode : ATVHighSecurityAccountSendCode
{
    NSString *_hsaCode;
}

+ (Class)responseClass;
- (void).cxx_destruct;
- (id)urlRequest;
- (id)urlString;
- (id)initWithAccount:(id)arg1 device:(id)arg2 hsaCode:(id)arg3;

@end

@interface ATVHighSecurityAccountVerifyCodeResponse : AAResponse
{
}

@property(readonly, nonatomic) long long errorCode;
@property(readonly, nonatomic) NSString *errorMessage;
@property(readonly, nonatomic) NSString *errorTitle;
@property(readonly, nonatomic) _Bool success;

@end

@interface NSData (AppleAccount)
- (id)aa_hexString;
@end

@interface NSError (AppleAccount)
- (id)userReadableError;
@end

@interface NSMutableURLRequest (AppleAccount)
- (void)aa_addLocationSharingAllowedHeader;
- (_Bool)aa_addDeviceProvisioningInfoHeadersWithDSIDFromReponse:(id)arg1;
- (void)aa_addLoggedInAppleIDHeaderWithAccount:(id)arg1;
- (void)aa_addDeviceIDHeader;
- (void)aa_addDeviceInternalDevHeaderIfEnabled;
- (void)aa_addDeviceProvisioningInfoHeadersWithDSID:(id)arg1;
- (void)aa_addDeviceProvisioningInfoHeadersWithAccount:(id)arg1;
- (void)aa_addiTunesHeadersWithAccount:(id)arg1;
- (_Bool)aa_addGrandSlamAuthorizationHeaderWithAccount:(id)arg1 grandslamToken:(id)arg2;
- (void)aa_setBodyWithParameters:(id)arg1;
- (void)aa_addBasicAuthorizationHeaderWithAccount:(id)arg1 preferUsingPassword:(_Bool)arg2;
@end

