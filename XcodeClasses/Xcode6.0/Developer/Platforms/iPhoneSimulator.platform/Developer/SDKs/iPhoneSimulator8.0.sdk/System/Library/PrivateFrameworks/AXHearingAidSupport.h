//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AXHearingAidSupport.framework/AXHearingAidSupport
// UUID: 4788F485-65EE-34C4-A831-86DB39E29808
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1541.4.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AXHAControllerBrowserDelegateProtocol <NSObject>
- (void)availableRemoteControllersDidChange;
@end

@protocol AXHADeviceControllerProtocol <NSObject>
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forDeviceID:(NSString *)arg3;
- (void)updateProperty:(long long)arg1 forDeviceID:(NSString *)arg2;
- (void)stopPropertyUpdates;
- (void)registerForPropertyUpdates:(void (^)(NSDictionary *))arg1;
- (void)device:(id <AXHADeviceProtocol>)arg1 didUpdateProperty:(long long)arg2;
@end

@protocol AXHADeviceProtocol <NSObject>
@property(readonly, retain, nonatomic) NSString *deviceUUID;
@property(readonly, retain, nonatomic) AXHearingAidMode *rightSelectedProgram;
@property(readonly, retain, nonatomic) AXHearingAidMode *leftSelectedProgram;
@property(readonly, copy, nonatomic) NSArray *leftPrograms;
@property(readonly, copy, nonatomic) NSArray *rightPrograms;
@property(readonly, retain, nonatomic) NSDate *rightBatteryLowDate;
@property(readonly, retain, nonatomic) NSDate *leftBatteryLowDate;
@property(readonly, nonatomic) double leftBatteryLevel;
@property(readonly, nonatomic) double rightBatteryLevel;
@property(nonatomic) double leftStreamVolume;
@property(nonatomic) double rightStreamVolume;
@property(nonatomic) double leftMicrophoneVolume;
@property(nonatomic) double rightMicrophoneVolume;
@property(readonly, retain, nonatomic) NSString *rightPeripheralUUID;
@property(readonly, retain, nonatomic) NSString *leftPeripheralUUID;
@property(readonly, retain, nonatomic) NSString *leftUUID;
@property(readonly, retain, nonatomic) NSString *rightUUID;
@property(nonatomic) int availableEars;
@property(readonly, retain, nonatomic) NSString *rightHardwareVersion;
@property(readonly, retain, nonatomic) NSString *leftHardwareVersion;
@property(readonly, retain, nonatomic) NSString *rightFirmwareVersion;
@property(readonly, retain, nonatomic) NSString *leftFirmwareVersion;
@property(readonly, retain, nonatomic) NSString *model;
@property(readonly, retain, nonatomic) NSString *manufacturer;
@property(readonly, retain, nonatomic) NSString *name;
@property(nonatomic) _Bool keepInSync;
@property(readonly, nonatomic) _Bool isConnecting;
@property(readonly, nonatomic) _Bool isPaired;
- (id)valueForProperty:(long long)arg1;
- (void)setValue:(id)arg1 forProperty:(long long)arg2;
- (NSIndexSet *)selectedProgramIndexes;
- (NSArray *)selectedPrograms;
- (void)selectProgram:(AXHearingAidMode *)arg1;
- (NSArray *)programs;
- (void)loadRequiredProperties;
- (_Bool)didLoadRequiredProperties;
- (_Bool)didLoadBasicProperties;
- (_Bool)containsPeripheralWithUUID:(NSString *)arg1;
- (_Bool)hasConnection;
- (_Bool)isConnected;
- (_Bool)rightAvailable;
- (_Bool)leftAvailable;
- (void)disconnect;
- (void)connect;
- (id)initWithPersistentRepresentation:(NSDictionary *)arg1;
@end

@protocol AXHARemoteControllerDelegate <NSObject>
- (void)controller:(AXHARemoteController *)arg1 didCloseConnectionWithError:(NSError *)arg2;
- (void)controllerDidFinishConnecting:(AXHARemoteController *)arg1;
- (void)controller:(AXHARemoteController *)arg1 didFinishSendingData:(AXHARemoteMessage *)arg2;
- (void)controller:(AXHARemoteController *)arg1 didReceiveData:(AXHARemoteMessage *)arg2;
@end

@protocol AXHARemoteUpdateProtocol <NSObject>
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forDeviceID:(NSString *)arg3;
- (void)updateProperty:(long long)arg1 forDeviceID:(NSString *)arg2;
@end

@protocol CBCentralManagerDelegate <NSObject>
- (void)centralManagerDidUpdateState:(CBCentralManager *)arg1;

@optional
- (void)centralManager:(CBCentralManager *)arg1 didDisconnectPeripheral:(CBPeripheral *)arg2 error:(NSError *)arg3;
- (void)centralManager:(CBCentralManager *)arg1 didFailToConnectPeripheral:(CBPeripheral *)arg2 error:(NSError *)arg3;
- (void)centralManager:(CBCentralManager *)arg1 didConnectPeripheral:(CBPeripheral *)arg2;
- (void)centralManager:(CBCentralManager *)arg1 didDiscoverPeripheral:(CBPeripheral *)arg2 advertisementData:(NSDictionary *)arg3 RSSI:(NSNumber *)arg4;
- (void)centralManager:(CBCentralManager *)arg1 didRetrieveConnectedPeripherals:(NSArray *)arg2;
- (void)centralManager:(CBCentralManager *)arg1 didRetrievePeripherals:(NSArray *)arg2;
- (void)centralManager:(CBCentralManager *)arg1 willRestoreState:(NSDictionary *)arg2;
@end

@protocol CBPeripheralDelegate <NSObject>

@optional
- (void)peripheral:(CBPeripheral *)arg1 didWriteValueForDescriptor:(CBDescriptor *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didUpdateValueForDescriptor:(CBDescriptor *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didDiscoverDescriptorsForCharacteristic:(CBCharacteristic *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didWriteValueForCharacteristic:(CBCharacteristic *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didUpdateValueForCharacteristic:(CBCharacteristic *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didDiscoverCharacteristicsForService:(CBService *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didDiscoverIncludedServicesForService:(CBService *)arg2 error:(NSError *)arg3;
- (void)peripheral:(CBPeripheral *)arg1 didDiscoverServices:(NSError *)arg2;
- (void)peripheral:(CBPeripheral *)arg1 didReadRSSI:(NSNumber *)arg2 error:(NSError *)arg3;
- (void)peripheralDidUpdateRSSI:(CBPeripheral *)arg1 error:(NSError *)arg2;
- (void)peripheral:(CBPeripheral *)arg1 didModifyServices:(NSArray *)arg2;
- (void)peripheralDidInvalidateServices:(CBPeripheral *)arg1;
- (void)peripheralDidUpdateName:(CBPeripheral *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>

@optional
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveService:(NSNetService *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveDomain:(NSString *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindService:(NSNetService *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindDomain:(NSString *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didNotSearch:(NSDictionary *)arg2;
- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)arg1;
- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)arg1;
@end

@protocol NSNetServiceDelegate <NSObject>

@optional
- (void)netService:(NSNetService *)arg1 didAcceptConnectionWithInputStream:(NSInputStream *)arg2 outputStream:(NSOutputStream *)arg3;
- (void)netService:(NSNetService *)arg1 didUpdateTXTRecordData:(NSData *)arg2;
- (void)netServiceDidStop:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotResolve:(NSDictionary *)arg2;
- (void)netServiceDidResolveAddress:(NSNetService *)arg1;
- (void)netServiceWillResolve:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotPublish:(NSDictionary *)arg2;
- (void)netServiceDidPublish:(NSNetService *)arg1;
- (void)netServiceWillPublish:(NSNetService *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSStreamDelegate <NSObject>

@optional
- (void)stream:(NSStream *)arg1 handleEvent:(unsigned long long)arg2;
@end

@interface AXGradientLabel : UIView
{
    NSString *_text;
    UIFont *_font;
    UIImage *_gradient;
    struct CGColor *_patternColor;
}

@property(retain, nonatomic) UIImage *gradient; // @synthesize gradient=_gradient;
@property(retain, nonatomic) UIFont *font; // @synthesize font=_font;
@property(retain, nonatomic) NSString *text; // @synthesize text=_text;
- (void)drawRect:(struct CGRect)arg1;
- (struct CGColor *)_patternColor;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)dealloc;

@end

@interface AXHAAccessQueue : NSObject
{
    NSString *_threadLocalStorageKey;
    NSObject<OS_dispatch_queue> *_concurrentQueue;
    unsigned long long _specialBehaviors;
}

+ (id)backgroundAccessQueue;
+ (id)mainAccessQueue;
@property(nonatomic) unsigned long long specialBehaviors; // @synthesize specialBehaviors=_specialBehaviors;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *concurrentQueue; // @synthesize concurrentQueue=_concurrentQueue;
@property(copy, nonatomic) NSString *threadLocalStorageKey; // @synthesize threadLocalStorageKey=_threadLocalStorageKey;
- (void)_performBlock:(CDUnknownBlockType)arg1 withDispatchFunction:(CDUnknownFunctionPointerType)arg2 synchronously:(_Bool)arg3 accessQueueContext:(unsigned long long)arg4;
- (unsigned long long)_accessQueueContextInCurrentExecutionThread;
- (id)description;
- (_Bool)canOnlyReadInCurrentExecutionThread;
- (_Bool)canWriteInCurrentExecutionThread;
- (_Bool)canReadInCurrentExecutionThread;
- (void)afterDelay:(double)arg1 processWritingBlock:(CDUnknownBlockType)arg2;
- (void)afterDelay:(double)arg1 processReadingBlock:(CDUnknownBlockType)arg2;
- (void)performAsynchronousWritingBlock:(CDUnknownBlockType)arg1;
- (void)performAsynchronousReadingBlock:(CDUnknownBlockType)arg1;
- (void)performSynchronousWritingBlock:(CDUnknownBlockType)arg1;
- (void)performSynchronousReadingBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool behavesWithoutErrorReporting;
@property(readonly, nonatomic) _Bool behavesAsMainQueue;
@property(readonly, copy, nonatomic) NSString *label;
- (void)dealloc;
- (id)initWithParentClass:(Class)arg1 description:(id)arg2 appendUUIDToLabel:(_Bool)arg3;
- (id)_initWithLabel:(id)arg1 appendUUIDToLabel:(_Bool)arg2 specialBehaviors:(unsigned long long)arg3;
- (id)initWithLabel:(id)arg1 appendUUIDToLabel:(_Bool)arg2;
- (id)init;

@end

@interface AXHAController : NSObject <AXHAControllerBrowserDelegateProtocol>
{
    _Bool _isListening;
    AXHATimer *_liveListenLevelsTimer;
    AXHearingAidDevice *_pairedDevice;
    NSMutableArray *_clients;
    NSMutableDictionary *_handlers;
    NSDictionary *_availableDevicesDescription;
}

+ (id)entitlementsForMessageID:(unsigned long long)arg1;
+ (id)sharedController;
@property(retain, nonatomic) NSDictionary *availableDevicesDescription; // @synthesize availableDevicesDescription=_availableDevicesDescription;
@property(retain, nonatomic) NSMutableDictionary *handlers; // @synthesize handlers=_handlers;
@property(retain, nonatomic) NSMutableArray *clients; // @synthesize clients=_clients;
@property(retain, nonatomic) AXHearingAidDevice *pairedDevice; // @synthesize pairedDevice=_pairedDevice;
- (id)registerForLiveListenUpdates:(id)arg1;
- (id)toggleLiveListen:(id)arg1;
- (id)disconnectAndForceSlave:(id)arg1;
- (id)connectToControllerWithID:(id)arg1;
- (id)readAvailableControllers:(id)arg1;
- (id)readAvailableDevices:(id)arg1;
- (id)writeDeviceProperty:(id)arg1;
- (void)sendUpdatesForProperties:(id)arg1 excludingClient:(id)arg2;
- (id)readDeviceProperty:(id)arg1;
- (id)registerForDeviceUpdates:(id)arg1;
- (id)registerForAvailableDevicesUpdates:(id)arg1;
- (void)handleMessage:(id)arg1 forIdentifier:(unsigned long long)arg2;
- (void)addHandler:(id)arg1 andSelector:(SEL)arg2 forMessageIdentifier:(unsigned long long)arg3;
- (void)sendUpdateMessage:(id)arg1 forIdentifier:(unsigned long long)arg2;
- (void)sendMessage:(id)arg1 withError:(id *)arg2;
- (void)handleNewConnection:(id)arg1;
- (_Bool)connection:(id)arg1 hasEntitlementForMessage:(unsigned long long)arg2;
- (_Bool)message:(id)arg1 hasEntitlement:(id)arg2;
- (void)availableRemoteControllersDidChange;
- (void)passConnectionToController:(id)arg1;
- (void)connectToPairedDevice;
- (void)trustChainAvailabilityDidChange:(id)arg1;
- (void)startSearchCycle;
- (id)liveListenController;
- (void)readLiveListenLevels;
- (void)setPairedHearingAid:(id)arg1;
- (void)setListenForAvailableDeviceUpdates:(_Bool)arg1;
- (_Bool)hearingAidsPaired;
- (id)currentDeviceController;
- (void)dealloc;
- (void)startServer;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHAControllerBrowser : NSObject <NSNetServiceBrowserDelegate, AXHARemoteControllerDelegate, AXHADeviceControllerProtocol>
{
    AXHATimer *_deviceUpdatesTimer;
    NSMutableDictionary *_deviceUpdatesDescription;
    long long _state;
    AXHearingSlaveController *_slaveController;
    id <AXHAControllerBrowserDelegateProtocol> _delegate;
    NSNetServiceBrowser *_browser;
    NSMutableArray *_remoteControllers;
    NSMutableArray *_updateDeviceBlocks;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSMutableArray *updateDeviceBlocks; // @synthesize updateDeviceBlocks=_updateDeviceBlocks;
@property(retain, nonatomic) NSMutableArray *remoteControllers; // @synthesize remoteControllers=_remoteControllers;
@property(retain, nonatomic) NSNetServiceBrowser *browser; // @synthesize browser=_browser;
@property(nonatomic) id <AXHAControllerBrowserDelegateProtocol> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) AXHearingSlaveController *slaveController; // @synthesize slaveController=_slaveController;
@property(nonatomic) long long state; // @synthesize state=_state;
- (void)writePayload:(id)arg1 toControllers:(id)arg2;
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forControllers:(id)arg3;
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forDeviceID:(id)arg3;
- (void)updateProperty:(long long)arg1 forDeviceID:(id)arg2;
- (void)device:(id)arg1 didUpdateProperty:(long long)arg2;
- (void)stopPropertyUpdates;
- (void)registerForPropertyUpdates:(CDUnknownBlockType)arg1;
- (void)controller:(id)arg1 didCloseConnectionWithError:(id)arg2;
- (void)controllerDidFinishConnecting:(id)arg1;
- (void)controller:(id)arg1 didFinishSendingData:(id)arg2;
- (void)controller:(id)arg1 didReceiveData:(id)arg2;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(id)arg1 didNotSearch:(id)arg2;
- (void)netServiceBrowserDidStopSearch:(id)arg1;
- (void)netServiceBrowserWillSearch:(id)arg1;
- (void)stop;
- (_Bool)shouldRelinquishConnection;
- (id)remoteControllerForHostname:(id)arg1;
- (void)transitionToSlaveWithCompletion:(CDUnknownBlockType)arg1;
- (void)resolveMasterWithCompletion:(CDUnknownBlockType)arg1;
- (void)becomeMaster;
- (void)sendObject:(id)arg1 toController:(id)arg2 withSendCompletion:(CDUnknownBlockType)arg3 andAckCompletion:(CDUnknownBlockType)arg4;
- (void)sendObject:(id)arg1 toController:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)clearControllers;
- (id)availableRemoteControllers;
- (id)availableControllers;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHAListenerHelper : NSObject
{
    void *_listenerAddress;
}

- (void)dealloc;
- (id)initWithListenerAddress:(void *)arg1;

@end

@interface AXHALiveListenController : NSObject
{
    _Bool _isListening;
    _Bool _didInitializeAudioUnit;
    struct OpaqueAudioComponentInstance *_rioUnit;
    struct OpaqueAudioComponentInstance *_mixerUnit;
}

@property(nonatomic) _Bool didInitializeAudioUnit; // @synthesize didInitializeAudioUnit=_didInitializeAudioUnit;
@property(nonatomic) _Bool isListening; // @synthesize isListening=_isListening;
@property(readonly, nonatomic) struct OpaqueAudioComponentInstance *mixerUnit; // @synthesize mixerUnit=_mixerUnit;
@property(readonly, nonatomic) struct OpaqueAudioComponentInstance *rioUnit; // @synthesize rioUnit=_rioUnit;
- (_Bool)stopListeningWithError:(id *)arg1;
- (_Bool)startListeningWithError:(id *)arg1;
- (float)audioLevel;

@end

@interface AXHAMessage : NSObject
{
    NSDictionary *_payload;
    NSError *_error;
}

+ (id)messageWithPayload:(id)arg1;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSDictionary *payload; // @synthesize payload=_payload;
- (id)description;
- (void)dealloc;
- (id)initWithPayload:(id)arg1;

@end

@interface AXHAMessageHandlerContext : NSObject
{
    id _target;
    SEL _selector;
}

@property(readonly, nonatomic) SEL selector; // @synthesize selector=_selector;
@property(readonly, nonatomic) id target; // @synthesize target=_target;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;

@end

@interface AXHARemoteController : NSObject <NSNetServiceDelegate, NSStreamDelegate>
{
    _Bool _didValidateHIID;
    id <AXHARemoteControllerDelegate> _delegate;
    NSNetService *_service;
    NSMutableArray *_outputDataQueue;
    NSInputStream *_inputStream;
    NSOutputStream *_outputStream;
    AXHATimer *_communicationTimer;
    NSMutableData *_inputBuffer;
    NSMutableData *_outputBuffer;
    NSMutableArray *_ackQueue;
    AXHATimer *_ackTimer;
    AXHATimer *_dataTimer;
    AXHARemoteMessage *_currentMessageInFlight;
}

@property(retain, nonatomic) AXHARemoteMessage *currentMessageInFlight; // @synthesize currentMessageInFlight=_currentMessageInFlight;
@property(retain, nonatomic) AXHATimer *dataTimer; // @synthesize dataTimer=_dataTimer;
@property(retain, nonatomic) AXHATimer *ackTimer; // @synthesize ackTimer=_ackTimer;
@property(retain, nonatomic) NSMutableArray *ackQueue; // @synthesize ackQueue=_ackQueue;
@property(retain, nonatomic) NSMutableData *outputBuffer; // @synthesize outputBuffer=_outputBuffer;
@property(retain, nonatomic) NSMutableData *inputBuffer; // @synthesize inputBuffer=_inputBuffer;
@property(retain, nonatomic) AXHATimer *communicationTimer; // @synthesize communicationTimer=_communicationTimer;
@property(nonatomic) _Bool didValidateHIID; // @synthesize didValidateHIID=_didValidateHIID;
@property(retain, nonatomic) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property(retain, nonatomic) NSInputStream *inputStream; // @synthesize inputStream=_inputStream;
@property(retain, nonatomic) NSMutableArray *outputDataQueue; // @synthesize outputDataQueue=_outputDataQueue;
@property(retain, nonatomic) NSNetService *service; // @synthesize service=_service;
@property(nonatomic) id <AXHARemoteControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)netService:(id)arg1 didNotResolve:(id)arg2;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)netServiceWillResolve:(id)arg1;
- (void)netService:(id)arg1 didAcceptConnectionWithInputStream:(id)arg2 outputStream:(id)arg3;
- (void)netService:(id)arg1 didUpdateTXTRecordData:(id)arg2;
- (void)netServiceDidStop:(id)arg1;
- (void)netService:(id)arg1 didNotPublish:(id)arg2;
- (void)netServiceDidPublish:(id)arg1;
- (void)netServiceWillPublish:(id)arg1;
- (_Bool)sendObject:(id)arg1 withSendCompletion:(CDUnknownBlockType)arg2 andAckCompletion:(CDUnknownBlockType)arg3;
- (_Bool)sendObject:(id)arg1;
- (void)openConnectionIfNecessary;
- (void)resetConnection;
- (void)sendDataChunk;
- (void)enqueueData:(id)arg1;
- (void)clearMessageQueue;
- (void)receivedData:(id)arg1;
- (void)messageWasAcked:(id)arg1;
- (void)finishedSending:(id)arg1;
- (void)didCommunicate;
- (id)nextMessageInQueue;
- (void)validatePairedAid;
- (_Bool)isSlave;
- (id)name;
- (_Bool)isConnected;
- (_Bool)isConnecting;
- (void)setupStream:(id)arg1;
- (void)setSecuritySettingsForStream:(id)arg1;
- (void)closeConnectionWithError:(id)arg1;
- (void)acceptConnection:(int)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithService:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHARemoteMessage : AXHAMessage
{
    _Bool _isACK;
    NSString *_UUID;
    CDUnknownBlockType _sendCompletion;
    CDUnknownBlockType _ackCompletion;
}

+ (id)messageWithPayload:(id)arg1 sendCompletion:(CDUnknownBlockType)arg2 andAckCompletion:(CDUnknownBlockType)arg3;
@property(nonatomic) _Bool isACK; // @synthesize isACK=_isACK;
@property(copy, nonatomic) CDUnknownBlockType ackCompletion; // @synthesize ackCompletion=_ackCompletion;
@property(copy, nonatomic) CDUnknownBlockType sendCompletion; // @synthesize sendCompletion=_sendCompletion;
@property(retain, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (id)transportPayload;
- (void)dealloc;
- (id)initWithPayload:(id)arg1;

@end

@interface AXHASecurityHelper : NSObject
{
    struct __SecIdentity *_appleIDIdentity;
    NSArray *_certificateDescription;
    AXHAAccessQueue *_securityQueue;
}

+ (id)sharedHelper;
@property(retain, nonatomic) AXHAAccessQueue *securityQueue; // @synthesize securityQueue=_securityQueue;
@property(retain, nonatomic) NSArray *certificateDescription; // @synthesize certificateDescription=_certificateDescription;
- (_Bool)shouldTrustStream:(id)arg1;
- (id)certificateChainFromTrust:(struct __SecTrust *)arg1;
- (id)certificateChainForIdentity:(struct __SecIdentity *)arg1;
- (id)trustChain;
- (_Bool)trustChainAvailable;
- (void)prepareHelper;
- (void)dealloc;
- (id)init;

@end

@interface AXHAServer : NSObject <AXHARemoteUpdateProtocol>
{
    _Bool _hearingAidReachable;
    NSArray *_availableHearingAids;
    NSArray *_availableControllers;
    id <AXHAServerDelegate> _delegate;
    NSMutableDictionary *_updates;
    NSObject<OS_xpc_object> *_xpcConnection;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSObject<OS_xpc_object> *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(retain, nonatomic) NSMutableDictionary *updates; // @synthesize updates=_updates;
@property(nonatomic) id <AXHAServerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool hearingAidReachable; // @synthesize hearingAidReachable=_hearingAidReachable;
@property(retain, nonatomic) NSArray *availableControllers; // @synthesize availableControllers=_availableControllers;
@property(retain, nonatomic) NSArray *availableHearingAids; // @synthesize availableHearingAids=_availableHearingAids;
- (void)stopLiveListen;
- (void)startLiveListen;
- (void)registerListener:(id)arg1 forLiveListenLevelsHandler:(CDUnknownBlockType)arg2;
- (void)cancelHearingAidConnectionRequest;
- (void)requestHearingAidConnection;
- (void)connectToControllerWithID:(id)arg1;
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forDeviceID:(id)arg3;
- (void)updateProperty:(long long)arg1 forDeviceID:(id)arg2;
- (void)registerListener:(id)arg1 forPropertyUpdateHandler:(CDUnknownBlockType)arg2;
- (void)registerListener:(id)arg1 forAvailableDeviceHandler:(CDUnknownBlockType)arg2;
- (void)registerUpdateBlock:(void *)arg1 forIdentier:(unsigned long long)arg2 withListener:(id)arg3;
- (void)unregisterUpdateListener:(id)arg1;
- (void)liveListenDidUpdate:(id)arg1;
- (void)availableDevicesDidUpdate:(id)arg1;
- (void)deviceDidUpdateProperty:(id)arg1;
- (void)sendMessageWithPayload:(id)arg1 andIdentifier:(unsigned long long)arg2;
- (void)handleMessageWithPayload:(id)arg1 forIdentifier:(unsigned long long)arg2;
- (void)setupServerIfNecessary;
- (void)resetConnection;
- (void)terminateConnection;
- (void)startServerWithDelegate:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHASettings : NSObject
{
    ACAccountStore *_accountStore;
    NSMutableSet *_registeredNotifications;
    NSMutableSet *_synchronizePreferences;
    NSMutableDictionary *_updateBlocks;
}

+ (id)sharedInstance;
+ (void)initialize;
@property(retain, nonatomic) NSMutableDictionary *updateBlocks; // @synthesize updateBlocks=_updateBlocks;
@property(retain, nonatomic) NSMutableSet *synchronizePreferences; // @synthesize synchronizePreferences=_synchronizePreferences;
@property(retain, nonatomic) NSMutableSet *registeredNotifications; // @synthesize registeredNotifications=_registeredNotifications;
@property(nonatomic) _Bool shouldStreamToRightAid;
@property(nonatomic) _Bool shouldStreamToLeftAid;
@property(nonatomic) _Bool allowHearingAidControlOnLockScreen;
@property(nonatomic) _Bool independentHearingAidSettings;
@property(retain, nonatomic) NSDictionary *pairedHearingAids;
- (id)_valueForPreferenceKey:(id)arg1;
- (void)_synchronizeIfNecessary:(id)arg1;
- (void)_setValue:(id)arg1 forPreferenceKey:(id)arg2;
- (void)registerUpdateBlock:(CDUnknownBlockType)arg1 forRetrieveSelector:(SEL)arg2 withListener:(id)arg3;
- (void)_registerForNotification:(id)arg1;
- (id)_preferenceKeyForSelector:(SEL)arg1;
- (id)_notificationForPreferenceKey:(id)arg1;
- (void)_handlePreferenceChanged:(id)arg1;
- (void)pushLocalHearingAidsToiCloud;
- (void)setLocalHearingAidsFromiCloud:(id)arg1;
- (void)iCloudAccountDidChange:(id)arg1;
- (void)icloudHearingSettingsDidChange:(id)arg1;
- (_Bool)shouldUseiCloud;
- (_Bool)isPairedWithFakeHearingAids;
- (void)dealloc;
- (id)init;

@end

@interface AXHASettingsListenerHelper : NSObject
{
    void *_listenerAddress;
    NSMutableArray *_selectorKeys;
}

- (void)dealloc;
- (void)addSelectorKey:(SEL)arg1;
- (id)initWithListenerAddress:(void *)arg1;

@end

@interface AXHATimer : NSObject
{
    _Bool _automaticallyCancelPendingBlockUponSchedulingNewBlock;
    _Bool _active;
    _Bool _accessQueueIsExternal;
    int _state;
    NSString *_label;
    AXHAAccessQueue *_accessQueue;
    NSObject<OS_dispatch_source> *_dispatchTimer;
}

+ (id)timerTargettingMainAccessQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *dispatchTimer; // @synthesize dispatchTimer=_dispatchTimer;
@property(nonatomic) _Bool accessQueueIsExternal; // @synthesize accessQueueIsExternal=_accessQueueIsExternal;
@property(retain, nonatomic) AXHAAccessQueue *accessQueue; // @synthesize accessQueue=_accessQueue;
@property(nonatomic) int state; // @synthesize state=_state;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(nonatomic) _Bool automaticallyCancelPendingBlockUponSchedulingNewBlock; // @synthesize automaticallyCancelPendingBlockUponSchedulingNewBlock=_automaticallyCancelPendingBlockUponSchedulingNewBlock;
@property(copy) NSString *label; // @synthesize label=_label;
- (id)description;
- (void)_warnAboutAsynchronousCancelling;
- (void)_reallyCancel;
- (void)cancel;
- (void)_warnAboutAsynchronousScheduling;
- (void)_didFinishProcessingBlock;
- (void)_afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2 shouldTreatAsWritingBlock:(_Bool)arg3;
- (void)afterDelay:(double)arg1 processWritingBlock:(CDUnknownBlockType)arg2;
- (void)afterDelay:(double)arg1 processReadingBlock:(CDUnknownBlockType)arg2;
- (void)afterDelay:(double)arg1 processBlock:(CDUnknownBlockType)arg2;
- (void)_performEnqueuedWritingBlock:(CDUnknownBlockType)arg1 asynchronousExecutionWarningHandler:(SEL)arg2;
@property(readonly, nonatomic, getter=isPending) _Bool pending;
- (void)dealloc;
- (id)initWithTargetAccessQueue:(id)arg1;
- (id)init;

@end

@interface AXHAUtilities : NSObject
{
}

+ (id)objectFromXDCObject:(id)arg1;
+ (id)XDCObjectFromObject:(id)arg1;
+ (id)messagePayloadFromDictionary:(id)arg1 andIdentifier:(unsigned long long)arg2;
+ (id)copyXPCMessageFromDictionary:(id)arg1 inReplyToXPCMessage:(id)arg2 error:(id *)arg3;
+ (id)dictionaryFromXPCMessage:(id)arg1 error:(id *)arg2;

@end

@interface AXHAXPCClient : NSObject
{
    NSObject<OS_xpc_object> *_xpcConnection;
    unsigned long long _requestedUpdates;
}

+ (id)clientWithConnection:(id)arg1;
@property(nonatomic) unsigned long long requestedUpdates; // @synthesize requestedUpdates=_requestedUpdates;
@property(retain, nonatomic) NSObject<OS_xpc_object> *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
- (void)sendMessage:(id)arg1 withError:(id *)arg2;
- (_Bool)wantsUpdatesForIdentifier:(unsigned long long)arg1;
- (void)setWantsUpdates:(_Bool)arg1 forIdentifier:(unsigned long long)arg2;
- (void)teardownConnection;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;

@end

@interface AXHAXPCMessage : AXHAMessage
{
    AXHAXPCClient *_client;
    NSObject<OS_xpc_object> *_xpcPayload;
    NSObject<OS_xpc_object> *_xpcMessage;
}

+ (id)messageWithPayload:(id)arg1 xpcMessage:(id)arg2 andClient:(id)arg3;
@property(retain, nonatomic) NSObject<OS_xpc_object> *xpcMessage; // @synthesize xpcMessage=_xpcMessage;
@property(readonly, retain, nonatomic) NSObject<OS_xpc_object> *xpcPayload; // @synthesize xpcPayload=_xpcPayload;
@property(nonatomic) AXHAXPCClient *client; // @synthesize client=_client;
- (id)replyMessageWithPayload:(id)arg1;
- (void)dealloc;

@end

@interface AXHearingAidConnectingCell : PSTableCell
{
    UIActivityIndicatorView *_loadingIndicator;
}

- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface AXHearingAidDetailCell : PSTableCell
{
    AXRemoteHearingAidDevice *_device;
    UILabel *_leftLabel;
    UIImageView *_leftBattery;
    UILabel *_rightLabel;
    UIImageView *_rightBattery;
    UIActivityIndicatorView *_loadingIndicator;
    NSNumberFormatter *_numberFormatter;
    _Bool _bluetoothAvailable;
}

@property(retain, nonatomic) AXRemoteHearingAidDevice *device; // @synthesize device=_device;
- (unsigned long long)accessibilityTraits;
- (id)accessibilityValue;
- (void)setSelected:(_Bool)arg1 animated:(_Bool)arg2;
- (void)layoutSubviews;
- (void)updateAvailability;
- (id)imageForBatteryLevel:(double)arg1;
- (void)dealloc;
- (void)bluetoothAvailabilityDidChange:(id)arg1;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2 andDevice:(id)arg3;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2 specifier:(id)arg3;

@end

@interface AXHearingAidDevice : NSObject <CBPeripheralDelegate, AXHADeviceProtocol>
{
    double _leftVolume;
    double _rightVolume;
    double _leftMicrophoneVolume;
    double _rightMicrophoneVolume;
    double _leftStreamVolume;
    double _rightStreamVolume;
    _Bool _keepInSync;
    _Bool _finishedLoading;
    long long initialLoadToken;
    AXHATimer *_propertyWriteTimer;
    _Bool _isListeningForStreamingChanges;
    _Bool isPaired;
    _Bool isConnecting;
    _Bool isPersistent;
    int _availableEars;
    unsigned int _leftPresetBitmask;
    unsigned int _rightPresetBitmask;
    NSString *leftUUID;
    NSString *rightUUID;
    NSString *name;
    NSString *manufacturer;
    NSString *model;
    NSString *leftFirmwareVersion;
    NSString *rightFirmwareVersion;
    NSString *leftHardwareVersion;
    NSString *rightHardwareVersion;
    double rightBatteryLevel;
    double leftBatteryLevel;
    NSArray *rightPrograms;
    NSArray *leftPrograms;
    AXHearingAidMode *currentRightProgram;
    AXHearingAidMode *currentLeftProgram;
    CBPeripheral *leftPeripheral;
    CBPeripheral *rightPeripheral;
    long long leftLoadedProperties;
    long long rightLoadedProperties;
    NSMutableDictionary *leftPropertiesLoadCount;
    NSMutableDictionary *rightPropertiesLoadCount;
    NSString *leftPeripheralUUID;
    NSString *rightPeripheralUUID;
    long long leftWriteRequestProperties;
    long long rightWriteRequestProperties;
    long long leftProgramVersion;
    long long rightProgramVersion;
    long long _leftWriteResponseProperties;
    long long _rightWriteResponseProperties;
    NSDate *_leftBatteryLowDate;
    NSDate *_rightBatteryLowDate;
}

+ (id)characteristicsUUIDs;
@property(nonatomic) unsigned int rightPresetBitmask; // @synthesize rightPresetBitmask=_rightPresetBitmask;
@property(nonatomic) unsigned int leftPresetBitmask; // @synthesize leftPresetBitmask=_leftPresetBitmask;
@property(retain, nonatomic) NSDate *rightBatteryLowDate; // @synthesize rightBatteryLowDate=_rightBatteryLowDate;
@property(retain, nonatomic) NSDate *leftBatteryLowDate; // @synthesize leftBatteryLowDate=_leftBatteryLowDate;
@property(nonatomic) long long rightWriteResponseProperties; // @synthesize rightWriteResponseProperties=_rightWriteResponseProperties;
@property(nonatomic) long long leftWriteResponseProperties; // @synthesize leftWriteResponseProperties=_leftWriteResponseProperties;
@property(nonatomic) long long rightProgramVersion; // @synthesize rightProgramVersion;
@property(nonatomic) long long leftProgramVersion; // @synthesize leftProgramVersion;
@property(nonatomic) long long rightWriteRequestProperties; // @synthesize rightWriteRequestProperties;
@property(nonatomic) long long leftWriteRequestProperties; // @synthesize leftWriteRequestProperties;
@property(retain, nonatomic) NSString *rightPeripheralUUID; // @synthesize rightPeripheralUUID;
@property(retain, nonatomic) NSString *leftPeripheralUUID; // @synthesize leftPeripheralUUID;
@property(retain, nonatomic) NSMutableDictionary *rightPropertiesLoadCount; // @synthesize rightPropertiesLoadCount;
@property(retain, nonatomic) NSMutableDictionary *leftPropertiesLoadCount; // @synthesize leftPropertiesLoadCount;
@property(nonatomic) long long rightLoadedProperties; // @synthesize rightLoadedProperties;
@property(nonatomic) long long leftLoadedProperties; // @synthesize leftLoadedProperties;
@property(nonatomic) _Bool keepInSync; // @synthesize keepInSync=_keepInSync;
@property(nonatomic) double leftStreamVolume; // @synthesize leftStreamVolume=_leftStreamVolume;
@property(nonatomic) double rightStreamVolume; // @synthesize rightStreamVolume=_rightStreamVolume;
@property(nonatomic) double leftMicrophoneVolume; // @synthesize leftMicrophoneVolume=_leftMicrophoneVolume;
@property(nonatomic) double rightMicrophoneVolume; // @synthesize rightMicrophoneVolume=_rightMicrophoneVolume;
@property(nonatomic) int availableEars; // @synthesize availableEars=_availableEars;
@property(nonatomic) _Bool isPersistent; // @synthesize isPersistent;
@property(nonatomic) _Bool isConnecting; // @synthesize isConnecting;
@property(nonatomic) _Bool isPaired; // @synthesize isPaired;
@property(retain, nonatomic) CBPeripheral *rightPeripheral; // @synthesize rightPeripheral;
@property(retain, nonatomic) CBPeripheral *leftPeripheral; // @synthesize leftPeripheral;
@property(retain, nonatomic) AXHearingAidMode *currentLeftProgram; // @synthesize currentLeftProgram;
@property(retain, nonatomic) AXHearingAidMode *currentRightProgram; // @synthesize currentRightProgram;
@property(copy, nonatomic) NSArray *leftPrograms; // @synthesize leftPrograms;
@property(copy, nonatomic) NSArray *rightPrograms; // @synthesize rightPrograms;
@property(nonatomic) double leftBatteryLevel; // @synthesize leftBatteryLevel;
@property(nonatomic) double rightBatteryLevel; // @synthesize rightBatteryLevel;
@property(retain, nonatomic) NSString *rightHardwareVersion; // @synthesize rightHardwareVersion;
@property(retain, nonatomic) NSString *leftHardwareVersion; // @synthesize leftHardwareVersion;
@property(retain, nonatomic) NSString *rightFirmwareVersion; // @synthesize rightFirmwareVersion;
@property(retain, nonatomic) NSString *leftFirmwareVersion; // @synthesize leftFirmwareVersion;
@property(retain, nonatomic) NSString *model; // @synthesize model;
@property(retain, nonatomic) NSString *manufacturer; // @synthesize manufacturer;
@property(retain, nonatomic) NSString *name; // @synthesize name;
@property(retain, nonatomic) NSString *rightUUID; // @synthesize rightUUID;
@property(retain, nonatomic) NSString *leftUUID; // @synthesize leftUUID;
- (id)persistentRepresentation;
- (_Bool)addPeripheral:(id)arg1;
@property(readonly, copy) NSString *description;
- (_Bool)isBluetoothPaired;
- (void)peripheralDidUnpair:(id)arg1;
- (void)peripheral:(id)arg1 didFinishPairingWithResult:(id)arg2;
- (void)pairingDidCompleteForPeripheral:(id)arg1;
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didInvalidateServices:(id)arg2;
- (void)peripheral:(id)arg1 didUpdateCharacteristic:(id)arg2;
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;
- (void)peripheralDidUpdateName:(id)arg1;
- (id)deviceDescription;
- (id)valueForProperty:(long long)arg1;
- (void)setValue:(id)arg1 forProperty:(long long)arg2;
- (unsigned char)volumeValueForProperty:(long long)arg1 andPeripheral:(id)arg2;
- (void)setRightSelectedProgram:(id)arg1;
@property(readonly, retain, nonatomic) AXHearingAidMode *rightSelectedProgram;
- (void)setLeftSelectedProgram:(id)arg1;
@property(readonly, retain, nonatomic) AXHearingAidMode *leftSelectedProgram;
- (id)selectedProgramIndexes;
- (id)selectedPrograms;
- (void)selectProgram:(id)arg1;
- (void)readProperty:(long long)arg1 fromPeripheral:(id)arg2;
- (void)readValueForCharacteristic:(id)arg1 fromPeripheral:(id)arg2;
- (void)writeInt:(unsigned char)arg1 toPeripheral:(id)arg2 forProperty:(long long)arg3;
- (void)delayWriteProperty:(long long)arg1 forPeripheral:(id)arg2;
- (void)_sendDelayedWrites;
- (void)updateName;
- (void)loadFailedProperties;
- (void)loadRequiredProperties;
- (void)loadBasicProperties;
- (void)loadProperties:(long long)arg1 forPeripheral:(id)arg2 withRetryPeriod:(double)arg3;
- (void)setNotify:(_Bool)arg1 forPeripheral:(id)arg2;
- (id)peripheral:(id)arg1 characteristicForUUID:(id)arg2;
- (id)peripheral:(id)arg1 characteristicForProperty:(long long)arg2;
- (long long)peripheral:(id)arg1 propertyForCharacteristic:(id)arg2;
- (id)programs;
- (int)connectedEars;
- (_Bool)hasConnection;
- (_Bool)isConnected;
- (_Bool)rightAvailable;
- (_Bool)leftAvailable;
- (void)mateWithDevice:(id)arg1;
- (_Bool)didLoadRequiredProperties;
- (_Bool)didLoadBasicProperties;
- (_Bool)peripheral:(id)arg1 didLoadProperty:(long long)arg2;
@property(readonly, retain, nonatomic) NSString *deviceUUID;
- (_Bool)containsPeripheralWithUUID:(id)arg1;
- (void)connectionDidChange;
- (void)disconnect;
- (void)connect;
- (void)dealloc;
- (id)initWithLeftDevice:(id)arg1 andRightDevice:(id)arg2;
- (id)initWithPersistentRepresentation:(id)arg1;
- (id)initWithPeripheral:(id)arg1;
- (void)_init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHearingAidDeviceController : NSObject <CBCentralManagerDelegate, AXHADeviceControllerProtocol>
{
    CBCentralManager *_bluetoothManager;
    NSLock *_centralRequestsLock;
    _Bool _isScanning;
    NSObject<OS_dispatch_queue> *_bluetoothCentralQueue;
    NSMutableArray *_availableSearchBlocks;
    NSMutableArray *_connectedSearchBlocks;
    NSMutableArray *_updateDeviceBlocks;
    AXHATimer *_deviceUpdatesTimer;
    NSMutableDictionary *_deviceUpdatesDescription;
    AXHATimer *_advertisingTimeoutTimer;
    NSMutableDictionary *_advertisingTimestamps;
    NSMutableArray *_availablePeripherals;
    NSMutableArray *_loadedDevices;
    NSMutableArray *_connectedDevices;
    NSMutableArray *centralRequestBlocks;
    NSMutableArray *_persistentDevices;
}

+ (id)sharedController;
@property(retain, nonatomic) NSMutableArray *persistentDevices; // @synthesize persistentDevices=_persistentDevices;
@property(retain, nonatomic) NSMutableArray *updateDeviceBlocks; // @synthesize updateDeviceBlocks=_updateDeviceBlocks;
@property(retain, nonatomic) NSMutableArray *connectedSearchBlocks; // @synthesize connectedSearchBlocks=_connectedSearchBlocks;
@property(retain, nonatomic) NSMutableArray *availableSearchBlocks; // @synthesize availableSearchBlocks=_availableSearchBlocks;
@property(retain, nonatomic) NSMutableArray *centralRequestBlocks; // @synthesize centralRequestBlocks;
@property(retain, nonatomic) NSMutableArray *connectedDevices; // @synthesize connectedDevices=_connectedDevices;
@property(retain) NSMutableArray *loadedDevices; // @synthesize loadedDevices=_loadedDevices;
@property(retain, nonatomic) NSMutableArray *availablePeripherals; // @synthesize availablePeripherals=_availablePeripherals;
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forDeviceID:(id)arg3;
- (void)updateProperty:(long long)arg1 forDeviceID:(id)arg2;
- (void)pairedHearingAidsDidChange;
- (void)unpairPeripheral:(id)arg1;
- (_Bool)peripheralIsPaired:(id)arg1;
- (void)centralManager:(id)arg1 didDisconnectPeripheral:(id)arg2 error:(id)arg3;
- (void)centralManager:(id)arg1 didFailToConnectPeripheral:(id)arg2 error:(id)arg3;
- (void)centralManager:(id)arg1 didConnectPeripheral:(id)arg2;
- (void)centralManager:(id)arg1 didDiscoverPeripheral:(id)arg2 advertisementData:(id)arg3 RSSI:(id)arg4;
- (void)centralManager:(id)arg1 didRetrieveConnectedPeripherals:(id)arg2;
- (void)centralManager:(id)arg1 didRetrievePeripherals:(id)arg2;
- (void)centralManagerDidUpdateState:(id)arg1;
- (void)sendRequestToCentralManager:(CDUnknownBlockType)arg1;
- (void)forgetDevice:(id)arg1;
- (void)deviceDidFinishLoading:(id)arg1;
- (void)mergeDevice:(id)arg1 withDevice:(id)arg2;
- (void)device:(id)arg1 didUpdateProperty:(long long)arg2;
- (void)clearConnectedDevices;
- (void)removeConnectedDevice:(id)arg1;
- (void)addConnectedDevice:(id)arg1;
- (void)clearAvailableDevices;
- (void)removeAvailableDevice:(id)arg1;
- (void)addAvailableDevice:(id)arg1;
- (void)clearLoadedDevices;
- (void)removeLoadedDevice:(id)arg1;
- (void)addLoadedDevice:(id)arg1;
- (void)loadedDevicesDidChange;
- (id)hearingAidForDeviceID:(id)arg1;
- (id)hearingAidForPeripheral:(id)arg1;
- (id)hearingAidsForUUID:(id)arg1;
- (_Bool)isConnected;
- (_Bool)isScanning;
- (void)stopPropertyUpdates;
- (void)stopSearching;
- (_Bool)isBluetoothAvailable;
- (void)cancelPendingConnections;
- (void)disconnectFromPeripheral:(id)arg1;
- (void)connectToPeripheral:(id)arg1;
- (void)resetConnectionToPeripheral:(id)arg1;
- (void)searchForConnectedDevices;
- (void)searchForAvailableDevices;
- (void)clearMissingHearingAids;
- (void)dealloc;
- (id)init;
- (void)registerForPropertyUpdates:(CDUnknownBlockType)arg1;
- (void)searchForAvailableDevicesWithCompletion:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHearingAidFakeDevice : AXHearingAidDevice
{
    NSMutableArray *_leftFakePrograms;
    NSMutableArray *_rightFakePrograms;
    _Bool _isConnecting;
    _Bool _connected;
    int _type;
    NSString *_name;
    NSString *_manufacturer;
    NSString *_model;
    NSString *_leftUUID;
    NSString *_rightUUID;
    double _rightBatteryLevel;
    double _leftBatteryLevel;
    NSString *_leftFirmwareVersion;
    NSString *_rightFirmwareVersion;
    NSString *_leftHardwareVersion;
    NSString *_rightHardwareVersion;
    NSDate *_leftBatteryLowDate;
    NSDate *_rightBatteryLowDate;
    NSString *_deviceUUID;
}

@property(nonatomic) _Bool connected; // @synthesize connected=_connected;
@property(nonatomic) int type; // @synthesize type=_type;
@property(retain, nonatomic) NSString *deviceUUID; // @synthesize deviceUUID=_deviceUUID;
@property(retain, nonatomic) NSDate *rightBatteryLowDate; // @synthesize rightBatteryLowDate=_rightBatteryLowDate;
@property(retain, nonatomic) NSDate *leftBatteryLowDate; // @synthesize leftBatteryLowDate=_leftBatteryLowDate;
@property(retain, nonatomic) NSString *rightHardwareVersion; // @synthesize rightHardwareVersion=_rightHardwareVersion;
@property(retain, nonatomic) NSString *leftHardwareVersion; // @synthesize leftHardwareVersion=_leftHardwareVersion;
@property(retain, nonatomic) NSString *rightFirmwareVersion; // @synthesize rightFirmwareVersion=_rightFirmwareVersion;
@property(retain, nonatomic) NSString *leftFirmwareVersion; // @synthesize leftFirmwareVersion=_leftFirmwareVersion;
@property(nonatomic) _Bool isConnecting; // @synthesize isConnecting=_isConnecting;
@property(nonatomic) double leftBatteryLevel; // @synthesize leftBatteryLevel=_leftBatteryLevel;
@property(nonatomic) double rightBatteryLevel; // @synthesize rightBatteryLevel=_rightBatteryLevel;
@property(retain, nonatomic) NSString *rightUUID; // @synthesize rightUUID=_rightUUID;
@property(retain, nonatomic) NSString *leftUUID; // @synthesize leftUUID=_leftUUID;
@property(retain, nonatomic) NSString *model; // @synthesize model=_model;
@property(retain, nonatomic) NSString *manufacturer; // @synthesize manufacturer=_manufacturer;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void)persist;
- (_Bool)didLoadRequiredProperties;
- (_Bool)didLoadBasicProperties;
- (void)setValue:(id)arg1 forProperty:(long long)arg2;
- (id)valueForProperty:(long long)arg1;
- (id)persistentRepresentation;
- (void)writeInt:(unsigned char)arg1 toPeripheral:(id)arg2 forProperty:(long long)arg3;
- (id)rightPrograms;
- (id)leftPrograms;
- (void)createPrograms;
- (_Bool)isPersistent;
- (_Bool)hasConnection;
@property(nonatomic) _Bool isPaired;
- (_Bool)isConnected;
- (_Bool)rightAvailable;
- (_Bool)leftAvailable;
- (void)disconnect;
- (void)connect;
- (id)modelForType;
- (id)manufacturerForType;
- (void)dealloc;
- (id)initWithDeviceType:(int)arg1;

@end

@interface AXHearingAidMode : NSObject <NSSecureCoding>
{
    unsigned char _index;
    _Bool _isSelected;
    int _ear;
    int syncAttempts;
    NSString *_name;
    long long _category;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) int syncAttempts; // @synthesize syncAttempts;
@property(nonatomic) int ear; // @synthesize ear=_ear;
@property(nonatomic) _Bool isSelected; // @synthesize isSelected=_isSelected;
@property(nonatomic) unsigned char index; // @synthesize index=_index;
@property(nonatomic) long long category; // @synthesize category=_category;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (id)description;
- (_Bool)isStream;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)transportRepresentation;
- (id)initWithRepresentation:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface AXHearingDetailViewController : PSListController
{
    _Bool _isLiveListening;
    AXRemoteHearingAidDevice *_device;
}

@property(retain, nonatomic) AXRemoteHearingAidDevice *device; // @synthesize device=_device;
- (void)liveListenToggle:(id)arg1;
- (void)updateLiveListenCell:(id)arg1;
- (id)specifierForKey:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (struct _NSRange)programsRange;
- (void)addVolumesForStream:(id)arg1;
- (void)updateView;
- (id)specifiers;
- (id)_modeSpecifiers;
- (id)_volumeSpecifiers;
- (id)disconnectedSpecifiers;
- (id)deviceSpecifiers;
- (void)viewDidDisappear:(_Bool)arg1;
- (id)init;

@end

@interface AXHearingLiveListenMeterCell : PSTableCell
{
    NSArray *dotImageViews;
    NSString *_liveListenUpdateUUID;
}

@property(retain, nonatomic) NSString *liveListenUpdateUUID; // @synthesize liveListenUpdateUUID=_liveListenUpdateUUID;
@property(retain, nonatomic) NSArray *dotImageViews; // @synthesize dotImageViews;
- (void)layoutSubviews;
- (void)setMeterLevel:(int)arg1;
- (void)audioLevelDidChange:(float)arg1;
- (void)setSpecifier:(id)arg1;
- (void)dealloc;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface AXHearingProgramCell : PSTableCell
{
    UIImageView *_checkedView;
}

- (void)layoutSubviews;
- (void)setChecked:(_Bool)arg1;
- (void)dealloc;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2 specifier:(id)arg3;

@end

@interface AXHearingSlaveController : AXHARemoteController <NSNetServiceDelegate, AXHARemoteUpdateProtocol>
{
    struct __CFSocket *_ipv4socket;
    struct __CFSocket *_ipv6socket;
    AXHATimer *_resolveTimer;
    _Bool _isVisible;
    AXRemoteHearingAidDevice *_device;
    CDUnknownBlockType _searchCompletion;
}

@property(copy, nonatomic) CDUnknownBlockType searchCompletion; // @synthesize searchCompletion=_searchCompletion;
@property(retain, nonatomic) AXRemoteHearingAidDevice *device; // @synthesize device=_device;
- (void)writeValue:(id)arg1 forProperty:(long long)arg2 forDeviceID:(id)arg3;
- (void)updateProperty:(long long)arg1 forDeviceID:(id)arg2;
- (void)netServiceDidStop:(id)arg1;
- (void)netService:(id)arg1 didNotPublish:(id)arg2;
- (void)netServiceDidPublish:(id)arg1;
- (void)netServiceWillPublish:(id)arg1;
- (_Bool)isSlave;
- (void)resetConnection;
- (void)closeConnectionWithError:(id)arg1;
- (void)openConnectionIfNecessary;
- (void)validatePairedAid;
- (void)receivedData:(id)arg1;
- (void)acceptConnection:(int)arg1;
- (void)resolveMasterWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)setVisible:(_Bool)arg1;
- (_Bool)initialize;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXHearingSliderValueCell : PSTableCell
{
    UIView *_leftView;
    UISlider *_slider;
    UILabel *_valueLabel;
    NSNumberFormatter *_numberFormatter;
    double _sliderMargin;
    double _valueWidth;
}

- (id)description;
- (void)accessibilityDecrement;
- (void)accessibilityIncrement;
- (_Bool)isAccessibilityElement;
- (id)accessibilityLabel;
- (id)accessibilityHint;
- (id)accessibilityValue;
- (unsigned long long)accessibilityTraits;
- (void)layoutSubviews;
- (void)updateValue;
- (id)value;
- (void)setValue:(id)arg1;
- (void)sliderValueDidChange:(id)arg1;
- (void)willMoveToSuperview:(id)arg1;
- (void)dealloc;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2 specifier:(id)arg3;

@end

@interface AXRemoteHearingAidDevice : NSObject <AXHADeviceProtocol>
{
    AXHATimer *_propertyWriteTimer;
    _Bool _keepInSync;
    _Bool _isBluetoothPaired;
    _Bool _isPaired;
    _Bool _isConnecting;
    _Bool _leftConnected;
    _Bool _rightConnected;
    int availableEars;
    double _rightMicrophoneVolume;
    double _leftMicrophoneVolume;
    double _rightStreamVolume;
    double _leftStreamVolume;
    id <AXHARemoteUpdateProtocol> _updateDelegate;
    NSString *_name;
    NSString *_manufacturer;
    NSString *_model;
    NSString *_leftFirmwareVersion;
    NSString *_rightFirmwareVersion;
    NSString *_leftHardwareVersion;
    NSString *_rightHardwareVersion;
    NSString *_rightUUID;
    NSString *_leftUUID;
    NSString *_leftPeripheralUUID;
    NSString *_rightPeripheralUUID;
    double _rightBatteryLevel;
    double _leftBatteryLevel;
    NSDate *_leftBatteryLowDate;
    NSDate *_rightBatteryLowDate;
    NSArray *_rightPrograms;
    NSArray *_leftPrograms;
    AXHearingAidMode *_leftSelectedProgram;
    AXHearingAidMode *_rightSelectedProgram;
    NSString *_deviceUUID;
    long long _loadedProperties;
    long long _pendingPropertyWrites;
}

@property(nonatomic) long long pendingPropertyWrites; // @synthesize pendingPropertyWrites=_pendingPropertyWrites;
@property(nonatomic) long long loadedProperties; // @synthesize loadedProperties=_loadedProperties;
@property(retain, nonatomic) NSString *deviceUUID; // @synthesize deviceUUID=_deviceUUID;
@property(retain, nonatomic) AXHearingAidMode *rightSelectedProgram; // @synthesize rightSelectedProgram=_rightSelectedProgram;
@property(retain, nonatomic) AXHearingAidMode *leftSelectedProgram; // @synthesize leftSelectedProgram=_leftSelectedProgram;
@property(copy, nonatomic) NSArray *leftPrograms; // @synthesize leftPrograms=_leftPrograms;
@property(copy, nonatomic) NSArray *rightPrograms; // @synthesize rightPrograms=_rightPrograms;
@property(retain, nonatomic) NSDate *rightBatteryLowDate; // @synthesize rightBatteryLowDate=_rightBatteryLowDate;
@property(retain, nonatomic) NSDate *leftBatteryLowDate; // @synthesize leftBatteryLowDate=_leftBatteryLowDate;
@property(nonatomic) double leftBatteryLevel; // @synthesize leftBatteryLevel=_leftBatteryLevel;
@property(nonatomic) double rightBatteryLevel; // @synthesize rightBatteryLevel=_rightBatteryLevel;
@property(retain, nonatomic) NSString *rightPeripheralUUID; // @synthesize rightPeripheralUUID=_rightPeripheralUUID;
@property(retain, nonatomic) NSString *leftPeripheralUUID; // @synthesize leftPeripheralUUID=_leftPeripheralUUID;
@property(retain, nonatomic) NSString *leftUUID; // @synthesize leftUUID=_leftUUID;
@property(retain, nonatomic) NSString *rightUUID; // @synthesize rightUUID=_rightUUID;
@property(retain, nonatomic) NSString *rightHardwareVersion; // @synthesize rightHardwareVersion=_rightHardwareVersion;
@property(retain, nonatomic) NSString *leftHardwareVersion; // @synthesize leftHardwareVersion=_leftHardwareVersion;
@property(retain, nonatomic) NSString *rightFirmwareVersion; // @synthesize rightFirmwareVersion=_rightFirmwareVersion;
@property(retain, nonatomic) NSString *leftFirmwareVersion; // @synthesize leftFirmwareVersion=_leftFirmwareVersion;
@property(retain, nonatomic) NSString *model; // @synthesize model=_model;
@property(retain, nonatomic) NSString *manufacturer; // @synthesize manufacturer=_manufacturer;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) _Bool rightConnected; // @synthesize rightConnected=_rightConnected;
@property(nonatomic) _Bool leftConnected; // @synthesize leftConnected=_leftConnected;
@property(nonatomic) _Bool isConnecting; // @synthesize isConnecting=_isConnecting;
@property(nonatomic) _Bool isPaired; // @synthesize isPaired=_isPaired;
@property(nonatomic) _Bool isBluetoothPaired; // @synthesize isBluetoothPaired=_isBluetoothPaired;
@property(nonatomic) id <AXHARemoteUpdateProtocol> updateDelegate; // @synthesize updateDelegate=_updateDelegate;
@property(nonatomic) int availableEars; // @synthesize availableEars;
@property(nonatomic) double leftStreamVolume; // @synthesize leftStreamVolume=_leftStreamVolume;
@property(nonatomic) double rightStreamVolume; // @synthesize rightStreamVolume=_rightStreamVolume;
@property(nonatomic) double leftMicrophoneVolume; // @synthesize leftMicrophoneVolume=_leftMicrophoneVolume;
@property(nonatomic) double rightMicrophoneVolume; // @synthesize rightMicrophoneVolume=_rightMicrophoneVolume;
@property(nonatomic) _Bool keepInSync; // @synthesize keepInSync=_keepInSync;
@property(readonly, copy) NSString *description;
- (id)valueForProperty:(long long)arg1;
- (void)setValue:(id)arg1 forProperty:(long long)arg2;
- (id)selectedProgramIndexes;
- (id)selectedPrograms;
- (void)selectProgram:(id)arg1;
- (id)programs;
- (void)writeVolumesForProperty:(long long)arg1;
- (void)_delayWriteProperties;
- (void)loadRequiredProperties;
- (_Bool)didLoadRequiredProperties;
- (_Bool)didLoadBasicProperties;
- (_Bool)didLoadProperty:(long long)arg1;
- (_Bool)containsPeripheralWithUUID:(id)arg1;
- (_Bool)isRightConnected;
- (_Bool)isLeftConnected;
- (_Bool)hasConnection;
- (_Bool)isConnected;
- (_Bool)rightAvailable;
- (_Bool)leftAvailable;
- (void)disconnect;
- (void)connect;
- (void)dealloc;
- (id)initWithPersistentRepresentation:(id)arg1;
- (id)initWithRemoteRepresentation:(id)arg1 andDeviceID:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NSString (_HAString_)
- (id)stringbyRemovingTrailingNulls;
@end

