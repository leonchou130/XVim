//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGSize {
    double _field1;
    double _field2;
};

struct ML3ImportItem;

struct ML3VirtualTableDataSource;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __hash_node<long long, void *>;

struct __hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>;

struct __shared_weak_count;

struct map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>> {
    struct __tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long>>> {
        struct __tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
                struct __tree_node_base<void *> *__left_;
            } __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<ML3ImportItem> {
    struct ML3ImportItem *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ML3VirtualTableDataSource> {
    struct ML3VirtualTableDataSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct sqlite3_module {
    int _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownFunctionPointerType _field13;
    CDUnknownFunctionPointerType _field14;
    CDUnknownFunctionPointerType _field15;
    CDUnknownFunctionPointerType _field16;
    CDUnknownFunctionPointerType _field17;
    CDUnknownFunctionPointerType _field18;
    CDUnknownFunctionPointerType _field19;
    CDUnknownFunctionPointerType _field20;
    CDUnknownFunctionPointerType _field21;
    CDUnknownFunctionPointerType _field22;
    CDUnknownFunctionPointerType _field23;
};

struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<long long, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> {
        struct __hash_node<long long, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long long, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *>>> {
    struct __hash_table<std::__1::__hash_value_type<long long, NSString *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, NSString *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, NSString *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<long long, NSString *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::hash<long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, NSString *>, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
    struct __hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
        struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *>*>, std::__1::allocator<std::__1::__hash_node<long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<long long, void *>*> {
                struct __hash_node<long long, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<long long>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<long long, std::__1::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *__first_;
    } __end_cap_;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

// Ambiguous groups
typedef struct {
    unsigned int storeId:1;
} CDStruct_9ea45725;

typedef struct shared_ptr<ML3ImportItem> {
    struct ML3ImportItem *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_de333b55;

typedef struct shared_ptr<ML3VirtualTableDataSource> {
    struct ML3VirtualTableDataSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c3e79333;

typedef struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
    struct __hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
        struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *>*>, std::__1::allocator<std::__1::__hash_node<long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<long long, void *>*> {
                struct __hash_node<long long, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<long long>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_set_f2692727;

typedef struct vector<long long, std::__1::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *__first_;
    } __end_cap_;
} vector_c1c297d2;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
// UUID: DD526B3C-2E43-3863-B2D8-6AA775C698B8
//
//                           Arch: x86_64
//                Current version: 18.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1607.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ML3DatabaseConnectionDelegate <NSObject>

@optional
- (void)connection:(ML3DatabaseConnection *)arg1 didEndDatabaseTransactionAndCommit:(_Bool)arg2;
- (void)connectionDidBeginDatabaseTransaction:(ML3DatabaseConnection *)arg1;
- (void)connection:(ML3DatabaseConnection *)arg1 didFailToCloseDatabaseWithError:(NSError *)arg2;
- (void)connectionDidCloseDatabase:(ML3DatabaseConnection *)arg1;
- (void)connectionWillCloseDatabase:(ML3DatabaseConnection *)arg1;
- (void)connection:(ML3DatabaseConnection *)arg1 didFailToOpenDatabaseWithError:(NSError *)arg2;
- (void)connectionDidOpenDatabase:(ML3DatabaseConnection *)arg1;
- (void)connectionWillOpenDatabase:(ML3DatabaseConnection *)arg1;
@end

@protocol ML3DatabaseConnectionPoolDelegate <NSObject>

@optional
- (void)connectionPool:(ML3DatabaseConnectionPool *)arg1 createdNewConnection:(ML3DatabaseConnection *)arg2;
@end

@protocol ML3DatabaseModuleContext <NSObject>
@end

@protocol MLMediaLibraryServiceClientProtocol <NSObject>
- (oneway void)serviceTerminatedTransactionWithIdentifier:(NSUUID *)arg1 error:(NSError *)arg2;
@end

@protocol MLMediaLibraryServiceProtocol <NSObject>
- (oneway void)setDeviceSharedLibraryPath:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;
- (oneway void)getDeviceSharedLibraryPath:(void (^)(NSString *))arg1;
- (oneway void)getLanguageResourcesWithCompletion:(void (^)(NSDictionary *, NSDictionary *, NSString *, NSError *))arg1;
- (oneway void)unlockDatabaseWithCompletion:(void (^)(_Bool, NSError *))arg1;
- (oneway void)lockDatabaseForReason:(NSString *)arg1 withCompletion:(void (^)(_Bool, NSError *))arg2;
- (oneway void)pollCurrentImportStatus:(void (^)(float, NSError *))arg1;
- (oneway void)cancelImportOperation:(unsigned long long)arg1 completionHandler:(void (^)(_Bool, NSError *))arg2;
- (oneway void)performImportFromSource:(unsigned long long)arg1 intoDatabaseAtPath:(NSString *)arg2 withTrackData:(NSData *)arg3 withPlaylistData:(NSData *)arg4 options:(NSDictionary *)arg5 completionHandler:(void (^)(_Bool, NSError *, NSData *))arg6;
- (oneway void)setOptions:(NSDictionary *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;
- (oneway void)performDatabaseOperation:(unsigned long long)arg1 withAttributes:(NSDictionary *)arg2 options:(NSDictionary *)arg3 completionHandler:(void (^)(_Bool, NSError *))arg4;
- (oneway void)endTransaction:(NSUUID *)arg1 shouldCommit:(_Bool)arg2 withCompletionHandler:(void (^)(_Bool, NSError *))arg3;
- (oneway void)executeQuery:(NSString *)arg1 withParameters:(NSArray *)arg2 options:(NSDictionary *)arg3 onTransaction:(NSUUID *)arg4 withCompletionHandler:(void (^)(NSData *, NSError *))arg5;
- (oneway void)executeUpdate:(NSString *)arg1 withParameters:(NSArray *)arg2 onTransaction:(NSUUID *)arg3 withCompletionHandler:(void (^)(_Bool, NSError *))arg4;
- (oneway void)beginTransactionForDatabaseAtPath:(NSString *)arg1 withPriorityLevel:(unsigned long long)arg2 options:(unsigned long long)arg3 completionHandler:(void (^)(NSUUID *, NSError *))arg4;
- (oneway void)recreateDatabaseAtPath:(NSString *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;
- (oneway void)validateDatabaseAtPath:(NSString *)arg1 withCompletionHandler:(void (^)(_Bool, NSError *))arg2;
@end

@protocol MSVDistributedNotificationObserverDelegate <NSObject>

@optional
- (_Bool)observerShouldForwardDistributedNotification:(MSVDistributedNotificationObserver *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface MIPAlbum : PBCodable <NSCopying>
{
    long long _storeId;
    MIPArtist *_artist;
    NSString *_artworkId;
    NSString *_name;
    int _numDiscs;
    int _numTracks;
    NSString *_sortName;
    int _userRating;
    _Bool _compilation;
    struct {
        unsigned int storeId:1;
        unsigned int numDiscs:1;
        unsigned int numTracks:1;
        unsigned int userRating:1;
        unsigned int compilation:1;
    } _has;
}

@property(nonatomic) _Bool compilation; // @synthesize compilation=_compilation;
@property(nonatomic) int userRating; // @synthesize userRating=_userRating;
@property(retain, nonatomic) NSString *artworkId; // @synthesize artworkId=_artworkId;
@property(nonatomic) int numDiscs; // @synthesize numDiscs=_numDiscs;
@property(nonatomic) int numTracks; // @synthesize numTracks=_numTracks;
@property(retain, nonatomic) MIPArtist *artist; // @synthesize artist=_artist;
@property(retain, nonatomic) NSString *sortName; // @synthesize sortName=_sortName;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasCompilation;
@property(nonatomic) _Bool hasUserRating;
@property(readonly, nonatomic) _Bool hasArtworkId;
@property(nonatomic) _Bool hasNumDiscs;
@property(nonatomic) _Bool hasNumTracks;
@property(readonly, nonatomic) _Bool hasArtist;
@property(readonly, nonatomic) _Bool hasSortName;
@property(readonly, nonatomic) _Bool hasName;
@property(nonatomic) _Bool hasStoreId;

@end

@interface MIPArtist : PBCodable <NSCopying>
{
    long long _storeId;
    NSString *_artworkId;
    NSString *_name;
    NSString *_sortName;
    CDStruct_9ea45725 _has;
}

@property(retain, nonatomic) NSString *artworkId; // @synthesize artworkId=_artworkId;
@property(retain, nonatomic) NSString *sortName; // @synthesize sortName=_sortName;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasArtworkId;
@property(readonly, nonatomic) _Bool hasSortName;
@property(readonly, nonatomic) _Bool hasName;
@property(nonatomic) _Bool hasStoreId;

@end

@interface MIPGenre : PBCodable <NSCopying>
{
    long long _storeId;
    NSString *_name;
    CDStruct_9ea45725 _has;
}

@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasName;
@property(nonatomic) _Bool hasStoreId;

@end

@interface MIPLibraryIdentifier : PBCodable <NSCopying>
{
    long long _libraryId;
    NSString *_libraryName;
    struct {
        unsigned int libraryId:1;
    } _has;
}

@property(nonatomic) long long libraryId; // @synthesize libraryId=_libraryId;
@property(retain, nonatomic) NSString *libraryName; // @synthesize libraryName=_libraryName;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasLibraryId;
@property(readonly, nonatomic) _Bool hasLibraryName;

@end

@interface MIPMediaItem : PBCodable <NSCopying>
{
    long long _accountId;
    long long _creationDateTime;
    long long _duration;
    long long _fileSize;
    long long _modificationDateTime;
    long long _purchaseHistoryId;
    long long _releaseDateTime;
    long long _sagaId;
    long long _storeId;
    long long _storefrontId;
    int _artworkId;
    int _contentRating;
    NSString *_copyright;
    NSMutableArray *_libraryIdentifiers;
    NSString *_longDescription;
    int _mediaType;
    MIPMovie *_movie;
    MIPPodcast *_podcast;
    NSString *_purchaseHistoryRedownloadParams;
    int _purchaseHistoryToken;
    NSString *_sagaRedownloadParams;
    NSString *_shortDescription;
    MIPSong *_song;
    NSString *_sortTitle;
    NSString *_title;
    MIPTVShow *_tvShow;
    _Bool _explicitContent;
    struct {
        unsigned int accountId:1;
        unsigned int creationDateTime:1;
        unsigned int duration:1;
        unsigned int fileSize:1;
        unsigned int modificationDateTime:1;
        unsigned int purchaseHistoryId:1;
        unsigned int releaseDateTime:1;
        unsigned int sagaId:1;
        unsigned int storeId:1;
        unsigned int storefrontId:1;
        unsigned int artworkId:1;
        unsigned int contentRating:1;
        unsigned int mediaType:1;
        unsigned int purchaseHistoryToken:1;
        unsigned int explicitContent:1;
    } _has;
}

@property(retain, nonatomic) MIPPodcast *podcast; // @synthesize podcast=_podcast;
@property(retain, nonatomic) MIPTVShow *tvShow; // @synthesize tvShow=_tvShow;
@property(retain, nonatomic) MIPMovie *movie; // @synthesize movie=_movie;
@property(retain, nonatomic) MIPSong *song; // @synthesize song=_song;
@property(retain, nonatomic) NSString *sagaRedownloadParams; // @synthesize sagaRedownloadParams=_sagaRedownloadParams;
@property(nonatomic) long long sagaId; // @synthesize sagaId=_sagaId;
@property(retain, nonatomic) NSString *purchaseHistoryRedownloadParams; // @synthesize purchaseHistoryRedownloadParams=_purchaseHistoryRedownloadParams;
@property(nonatomic) int purchaseHistoryToken; // @synthesize purchaseHistoryToken=_purchaseHistoryToken;
@property(nonatomic) long long purchaseHistoryId; // @synthesize purchaseHistoryId=_purchaseHistoryId;
@property(nonatomic) long long accountId; // @synthesize accountId=_accountId;
@property(nonatomic) long long storefrontId; // @synthesize storefrontId=_storefrontId;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
@property(retain, nonatomic) NSMutableArray *libraryIdentifiers; // @synthesize libraryIdentifiers=_libraryIdentifiers;
@property(nonatomic) int artworkId; // @synthesize artworkId=_artworkId;
@property(retain, nonatomic) NSString *copyright; // @synthesize copyright=_copyright;
@property(retain, nonatomic) NSString *longDescription; // @synthesize longDescription=_longDescription;
@property(retain, nonatomic) NSString *shortDescription; // @synthesize shortDescription=_shortDescription;
@property(nonatomic) _Bool explicitContent; // @synthesize explicitContent=_explicitContent;
@property(nonatomic) int contentRating; // @synthesize contentRating=_contentRating;
@property(nonatomic) long long duration; // @synthesize duration=_duration;
@property(nonatomic) long long fileSize; // @synthesize fileSize=_fileSize;
@property(nonatomic) long long modificationDateTime; // @synthesize modificationDateTime=_modificationDateTime;
@property(nonatomic) long long creationDateTime; // @synthesize creationDateTime=_creationDateTime;
@property(nonatomic) long long releaseDateTime; // @synthesize releaseDateTime=_releaseDateTime;
@property(retain, nonatomic) NSString *sortTitle; // @synthesize sortTitle=_sortTitle;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic) int mediaType; // @synthesize mediaType=_mediaType;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasPodcast;
@property(readonly, nonatomic) _Bool hasTvShow;
@property(readonly, nonatomic) _Bool hasMovie;
@property(readonly, nonatomic) _Bool hasSong;
@property(readonly, nonatomic) _Bool hasSagaRedownloadParams;
@property(nonatomic) _Bool hasSagaId;
@property(readonly, nonatomic) _Bool hasPurchaseHistoryRedownloadParams;
@property(nonatomic) _Bool hasPurchaseHistoryToken;
@property(nonatomic) _Bool hasPurchaseHistoryId;
@property(nonatomic) _Bool hasAccountId;
@property(nonatomic) _Bool hasStorefrontId;
@property(nonatomic) _Bool hasStoreId;
- (id)libraryIdentifiersAtIndex:(unsigned long long)arg1;
- (unsigned long long)libraryIdentifiersCount;
- (void)addLibraryIdentifiers:(id)arg1;
- (void)clearLibraryIdentifiers;
@property(nonatomic) _Bool hasArtworkId;
@property(readonly, nonatomic) _Bool hasCopyright;
@property(readonly, nonatomic) _Bool hasLongDescription;
@property(readonly, nonatomic) _Bool hasShortDescription;
@property(nonatomic) _Bool hasExplicitContent;
@property(nonatomic) _Bool hasContentRating;
@property(nonatomic) _Bool hasDuration;
@property(nonatomic) _Bool hasFileSize;
@property(nonatomic) _Bool hasModificationDateTime;
@property(nonatomic) _Bool hasCreationDateTime;
@property(nonatomic) _Bool hasReleaseDateTime;
@property(readonly, nonatomic) _Bool hasSortTitle;
@property(readonly, nonatomic) _Bool hasTitle;
@property(nonatomic) _Bool hasMediaType;

@end

@interface MIPMovie : PBCodable <NSCopying>
{
    long long _rentalDuration;
    long long _rentalPlaybackDuration;
    long long _rentalPlaybackStartedDateTime;
    long long _rentalStartedDateTime;
    MIPArtist *_artist;
    int _audioLanguage;
    int _audioTrackId;
    int _audioTrackIndex;
    NSString *_extendedContentName;
    NSString *_movieInfo;
    int _subtitleLanguage;
    int _subtitleTrackIndex;
    int _videoQuality;
    _Bool _hasAlternateAudio;
    _Bool _hasChapterData;
    _Bool _hasSubtitles;
    _Bool _rental;
    struct {
        unsigned int rentalDuration:1;
        unsigned int rentalPlaybackDuration:1;
        unsigned int rentalPlaybackStartedDateTime:1;
        unsigned int rentalStartedDateTime:1;
        unsigned int audioLanguage:1;
        unsigned int audioTrackId:1;
        unsigned int audioTrackIndex:1;
        unsigned int subtitleLanguage:1;
        unsigned int subtitleTrackIndex:1;
        unsigned int videoQuality:1;
        unsigned int hasAlternateAudio:1;
        unsigned int hasChapterData:1;
        unsigned int hasSubtitles:1;
        unsigned int rental:1;
    } _has;
}

@property(nonatomic) long long rentalStartedDateTime; // @synthesize rentalStartedDateTime=_rentalStartedDateTime;
@property(nonatomic) long long rentalPlaybackStartedDateTime; // @synthesize rentalPlaybackStartedDateTime=_rentalPlaybackStartedDateTime;
@property(nonatomic) long long rentalPlaybackDuration; // @synthesize rentalPlaybackDuration=_rentalPlaybackDuration;
@property(nonatomic) long long rentalDuration; // @synthesize rentalDuration=_rentalDuration;
@property(nonatomic) int subtitleTrackIndex; // @synthesize subtitleTrackIndex=_subtitleTrackIndex;
@property(nonatomic) int subtitleLanguage; // @synthesize subtitleLanguage=_subtitleLanguage;
@property(nonatomic) int audioTrackId; // @synthesize audioTrackId=_audioTrackId;
@property(nonatomic) int audioTrackIndex; // @synthesize audioTrackIndex=_audioTrackIndex;
@property(nonatomic) int audioLanguage; // @synthesize audioLanguage=_audioLanguage;
@property(nonatomic) _Bool hasSubtitles; // @synthesize hasSubtitles=_hasSubtitles;
@property(nonatomic) _Bool hasAlternateAudio; // @synthesize hasAlternateAudio=_hasAlternateAudio;
@property(retain, nonatomic) NSString *movieInfo; // @synthesize movieInfo=_movieInfo;
@property(retain, nonatomic) NSString *extendedContentName; // @synthesize extendedContentName=_extendedContentName;
@property(nonatomic) _Bool hasChapterData; // @synthesize hasChapterData=_hasChapterData;
@property(nonatomic) _Bool rental; // @synthesize rental=_rental;
@property(nonatomic) int videoQuality; // @synthesize videoQuality=_videoQuality;
@property(retain, nonatomic) MIPArtist *artist; // @synthesize artist=_artist;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasRentalStartedDateTime;
@property(nonatomic) _Bool hasRentalPlaybackStartedDateTime;
@property(nonatomic) _Bool hasRentalPlaybackDuration;
@property(nonatomic) _Bool hasRentalDuration;
@property(nonatomic) _Bool hasSubtitleTrackIndex;
@property(nonatomic) _Bool hasSubtitleLanguage;
@property(nonatomic) _Bool hasAudioTrackId;
@property(nonatomic) _Bool hasAudioTrackIndex;
@property(nonatomic) _Bool hasAudioLanguage;
@property(nonatomic) _Bool hasHasSubtitles;
@property(nonatomic) _Bool hasHasAlternateAudio;
@property(readonly, nonatomic) _Bool hasMovieInfo;
@property(readonly, nonatomic) _Bool hasExtendedContentName;
@property(nonatomic) _Bool hasHasChapterData;
@property(nonatomic) _Bool hasRental;
@property(nonatomic) _Bool hasVideoQuality;
@property(readonly, nonatomic) _Bool hasArtist;

@end

@interface MIPMultiverseIdentifier : PBCodable <NSCopying>
{
    long long _accountId;
    long long _purchaseHistoryId;
    long long _sagaId;
    long long _storeId;
    NSMutableArray *_libraryIdentifiers;
    int _mediaObjectType;
    int _mediaType;
    NSString *_name;
    struct {
        unsigned int accountId:1;
        unsigned int purchaseHistoryId:1;
        unsigned int sagaId:1;
        unsigned int storeId:1;
        unsigned int mediaObjectType:1;
        unsigned int mediaType:1;
    } _has;
}

@property(retain, nonatomic) NSMutableArray *libraryIdentifiers; // @synthesize libraryIdentifiers=_libraryIdentifiers;
@property(nonatomic) long long purchaseHistoryId; // @synthesize purchaseHistoryId=_purchaseHistoryId;
@property(nonatomic) long long sagaId; // @synthesize sagaId=_sagaId;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
@property(nonatomic) long long accountId; // @synthesize accountId=_accountId;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) int mediaType; // @synthesize mediaType=_mediaType;
@property(nonatomic) int mediaObjectType; // @synthesize mediaObjectType=_mediaObjectType;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)libraryIdentifiersAtIndex:(unsigned long long)arg1;
- (unsigned long long)libraryIdentifiersCount;
- (void)addLibraryIdentifiers:(id)arg1;
- (void)clearLibraryIdentifiers;
@property(nonatomic) _Bool hasPurchaseHistoryId;
@property(nonatomic) _Bool hasSagaId;
@property(nonatomic) _Bool hasStoreId;
@property(nonatomic) _Bool hasAccountId;
@property(readonly, nonatomic) _Bool hasName;
@property(nonatomic) _Bool hasMediaType;
@property(nonatomic) _Bool hasMediaObjectType;

@end

@interface MIPPlaybackInfo : PBCodable <NSCopying>
{
    long long _gaplessEncodingDrainCode;
    long long _gaplessFrameResyncCode;
    long long _gaplessHeuristicCode;
    long long _gaplessHeuristicDelayCode;
    long long _startTime;
    long long _stopTime;
    long long _volumeNormalizationEnergy;
    int _beatsPerMinute;
    int _bitRate;
    int _codecSubType;
    int _codecType;
    int _dataKind;
    NSString *_dataUrl;
    NSString *_eqPreset;
    NSString *_playbackFormat;
    int _relativeVolume;
    int _sampleRate;
    struct {
        unsigned int gaplessEncodingDrainCode:1;
        unsigned int gaplessFrameResyncCode:1;
        unsigned int gaplessHeuristicCode:1;
        unsigned int gaplessHeuristicDelayCode:1;
        unsigned int startTime:1;
        unsigned int stopTime:1;
        unsigned int volumeNormalizationEnergy:1;
        unsigned int beatsPerMinute:1;
        unsigned int bitRate:1;
        unsigned int codecSubType:1;
        unsigned int codecType:1;
        unsigned int dataKind:1;
        unsigned int relativeVolume:1;
        unsigned int sampleRate:1;
    } _has;
}

@property(nonatomic) int beatsPerMinute; // @synthesize beatsPerMinute=_beatsPerMinute;
@property(nonatomic) long long volumeNormalizationEnergy; // @synthesize volumeNormalizationEnergy=_volumeNormalizationEnergy;
@property(nonatomic) long long stopTime; // @synthesize stopTime=_stopTime;
@property(nonatomic) long long startTime; // @synthesize startTime=_startTime;
@property(nonatomic) int sampleRate; // @synthesize sampleRate=_sampleRate;
@property(nonatomic) int relativeVolume; // @synthesize relativeVolume=_relativeVolume;
@property(nonatomic) long long gaplessFrameResyncCode; // @synthesize gaplessFrameResyncCode=_gaplessFrameResyncCode;
@property(nonatomic) long long gaplessEncodingDrainCode; // @synthesize gaplessEncodingDrainCode=_gaplessEncodingDrainCode;
@property(nonatomic) long long gaplessHeuristicDelayCode; // @synthesize gaplessHeuristicDelayCode=_gaplessHeuristicDelayCode;
@property(nonatomic) long long gaplessHeuristicCode; // @synthesize gaplessHeuristicCode=_gaplessHeuristicCode;
@property(retain, nonatomic) NSString *playbackFormat; // @synthesize playbackFormat=_playbackFormat;
@property(retain, nonatomic) NSString *eqPreset; // @synthesize eqPreset=_eqPreset;
@property(retain, nonatomic) NSString *dataUrl; // @synthesize dataUrl=_dataUrl;
@property(nonatomic) int dataKind; // @synthesize dataKind=_dataKind;
@property(nonatomic) int codecSubType; // @synthesize codecSubType=_codecSubType;
@property(nonatomic) int codecType; // @synthesize codecType=_codecType;
@property(nonatomic) int bitRate; // @synthesize bitRate=_bitRate;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasBeatsPerMinute;
@property(nonatomic) _Bool hasVolumeNormalizationEnergy;
@property(nonatomic) _Bool hasStopTime;
@property(nonatomic) _Bool hasStartTime;
@property(nonatomic) _Bool hasSampleRate;
@property(nonatomic) _Bool hasRelativeVolume;
@property(nonatomic) _Bool hasGaplessFrameResyncCode;
@property(nonatomic) _Bool hasGaplessEncodingDrainCode;
@property(nonatomic) _Bool hasGaplessHeuristicDelayCode;
@property(nonatomic) _Bool hasGaplessHeuristicCode;
@property(readonly, nonatomic) _Bool hasPlaybackFormat;
@property(readonly, nonatomic) _Bool hasEqPreset;
@property(readonly, nonatomic) _Bool hasDataUrl;
@property(nonatomic) _Bool hasDataKind;
@property(nonatomic) _Bool hasCodecSubType;
@property(nonatomic) _Bool hasCodecType;
@property(nonatomic) _Bool hasBitRate;

@end

@interface MIPPlaylist : PBCodable <NSCopying>
{
    long long _storeId;
    NSMutableArray *_childPlaylists;
    NSMutableArray *_items;
    NSString *_name;
    MIPSmartPlaylistInfo *_smartPlaylistInfo;
    int _type;
    _Bool _hidden;
    struct {
        unsigned int storeId:1;
        unsigned int type:1;
        unsigned int hidden:1;
    } _has;
}

@property(retain, nonatomic) NSMutableArray *items; // @synthesize items=_items;
@property(retain, nonatomic) NSMutableArray *childPlaylists; // @synthesize childPlaylists=_childPlaylists;
@property(retain, nonatomic) MIPSmartPlaylistInfo *smartPlaylistInfo; // @synthesize smartPlaylistInfo=_smartPlaylistInfo;
@property(nonatomic) _Bool hidden; // @synthesize hidden=_hidden;
@property(nonatomic) int type; // @synthesize type=_type;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)itemsAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemsCount;
- (void)addItems:(id)arg1;
- (void)clearItems;
- (id)childPlaylistsAtIndex:(unsigned long long)arg1;
- (unsigned long long)childPlaylistsCount;
- (void)addChildPlaylists:(id)arg1;
- (void)clearChildPlaylists;
@property(readonly, nonatomic) _Bool hasSmartPlaylistInfo;
@property(nonatomic) _Bool hasHidden;
@property(nonatomic) _Bool hasType;
@property(nonatomic) _Bool hasStoreId;
@property(readonly, nonatomic) _Bool hasName;

@end

@interface MIPPodcast : PBCodable <NSCopying>
{
    MIPArtist *_artist;
    NSString *_externalGuid;
    MIPSeries *_series;
}

@property(retain, nonatomic) NSString *externalGuid; // @synthesize externalGuid=_externalGuid;
@property(retain, nonatomic) MIPSeries *series; // @synthesize series=_series;
@property(retain, nonatomic) MIPArtist *artist; // @synthesize artist=_artist;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasExternalGuid;
@property(readonly, nonatomic) _Bool hasSeries;
@property(readonly, nonatomic) _Bool hasArtist;

@end

@interface MIPSeries : PBCodable <NSCopying>
{
    long long _storeId;
    NSString *_name;
    NSString *_sortName;
    CDStruct_9ea45725 _has;
}

@property(retain, nonatomic) NSString *sortName; // @synthesize sortName=_sortName;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) long long storeId; // @synthesize storeId=_storeId;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasSortName;
@property(readonly, nonatomic) _Bool hasName;
@property(nonatomic) _Bool hasStoreId;

@end

@interface MIPSmartPlaylistInfo : PBCodable <NSCopying>
{
    unsigned int _evaluationOrder;
    int _limitKind;
    unsigned int _limitOrder;
    unsigned int _limitValue;
    NSData *_smartCriteria;
    _Bool _dynamic;
    _Bool _enabledItemsOnly;
    _Bool _filtered;
    _Bool _limited;
    _Bool _reverseLimitOrder;
    struct {
        unsigned int evaluationOrder:1;
        unsigned int limitKind:1;
        unsigned int limitOrder:1;
        unsigned int limitValue:1;
        unsigned int dynamic:1;
        unsigned int enabledItemsOnly:1;
        unsigned int filtered:1;
        unsigned int limited:1;
        unsigned int reverseLimitOrder:1;
    } _has;
}

@property(retain, nonatomic) NSData *smartCriteria; // @synthesize smartCriteria=_smartCriteria;
@property(nonatomic) _Bool reverseLimitOrder; // @synthesize reverseLimitOrder=_reverseLimitOrder;
@property(nonatomic) _Bool enabledItemsOnly; // @synthesize enabledItemsOnly=_enabledItemsOnly;
@property(nonatomic) unsigned int limitValue; // @synthesize limitValue=_limitValue;
@property(nonatomic) unsigned int limitOrder; // @synthesize limitOrder=_limitOrder;
@property(nonatomic) unsigned int evaluationOrder; // @synthesize evaluationOrder=_evaluationOrder;
@property(nonatomic) int limitKind; // @synthesize limitKind=_limitKind;
@property(nonatomic) _Bool limited; // @synthesize limited=_limited;
@property(nonatomic) _Bool filtered; // @synthesize filtered=_filtered;
@property(nonatomic) _Bool dynamic; // @synthesize dynamic=_dynamic;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasSmartCriteria;
@property(nonatomic) _Bool hasReverseLimitOrder;
@property(nonatomic) _Bool hasEnabledItemsOnly;
@property(nonatomic) _Bool hasLimitValue;
@property(nonatomic) _Bool hasLimitOrder;
@property(nonatomic) _Bool hasEvaluationOrder;
@property(nonatomic) _Bool hasLimitKind;
@property(nonatomic) _Bool hasLimited;
@property(nonatomic) _Bool hasFiltered;
@property(nonatomic) _Bool hasDynamic;

@end

@interface MIPSong : PBCodable <NSCopying>
{
    long long _geniusId;
    MIPAlbum *_album;
    MIPArtist *_artist;
    int _audioFormat;
    MIPArtist *_composer;
    int _discNumber;
    MIPGenre *_genre;
    NSString *_lyrics;
    MIPPlaybackInfo *_playbackInfo;
    int _trackNumber;
    int _userRating;
    _Bool _excludeFromShuffle;
    _Bool _hasVideo;
    struct {
        unsigned int geniusId:1;
        unsigned int audioFormat:1;
        unsigned int discNumber:1;
        unsigned int trackNumber:1;
        unsigned int userRating:1;
        unsigned int excludeFromShuffle:1;
        unsigned int hasVideo:1;
    } _has;
}

@property(retain, nonatomic) MIPPlaybackInfo *playbackInfo; // @synthesize playbackInfo=_playbackInfo;
@property(retain, nonatomic) NSString *lyrics; // @synthesize lyrics=_lyrics;
@property(nonatomic) _Bool hasVideo; // @synthesize hasVideo=_hasVideo;
@property(nonatomic) int audioFormat; // @synthesize audioFormat=_audioFormat;
@property(nonatomic) long long geniusId; // @synthesize geniusId=_geniusId;
@property(nonatomic) _Bool excludeFromShuffle; // @synthesize excludeFromShuffle=_excludeFromShuffle;
@property(nonatomic) int userRating; // @synthesize userRating=_userRating;
@property(nonatomic) int trackNumber; // @synthesize trackNumber=_trackNumber;
@property(nonatomic) int discNumber; // @synthesize discNumber=_discNumber;
@property(retain, nonatomic) MIPGenre *genre; // @synthesize genre=_genre;
@property(retain, nonatomic) MIPArtist *composer; // @synthesize composer=_composer;
@property(retain, nonatomic) MIPArtist *artist; // @synthesize artist=_artist;
@property(retain, nonatomic) MIPAlbum *album; // @synthesize album=_album;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasPlaybackInfo;
@property(readonly, nonatomic) _Bool hasLyrics;
@property(nonatomic) _Bool hasHasVideo;
@property(nonatomic) _Bool hasAudioFormat;
@property(nonatomic) _Bool hasGeniusId;
@property(nonatomic) _Bool hasExcludeFromShuffle;
@property(nonatomic) _Bool hasUserRating;
@property(nonatomic) _Bool hasTrackNumber;
@property(nonatomic) _Bool hasDiscNumber;
@property(readonly, nonatomic) _Bool hasGenre;
@property(readonly, nonatomic) _Bool hasComposer;
@property(readonly, nonatomic) _Bool hasArtist;
@property(readonly, nonatomic) _Bool hasAlbum;

@end

@interface MIPTVShow : PBCodable <NSCopying>
{
    MIPArtist *_artist;
    int _episodeNumber;
    int _episodeSortId;
    NSString *_networkName;
    int _seasonNumber;
    MIPSeries *_series;
    int _videoQuality;
    struct {
        unsigned int episodeNumber:1;
        unsigned int episodeSortId:1;
        unsigned int seasonNumber:1;
        unsigned int videoQuality:1;
    } _has;
}

@property(retain, nonatomic) NSString *networkName; // @synthesize networkName=_networkName;
@property(nonatomic) int videoQuality; // @synthesize videoQuality=_videoQuality;
@property(nonatomic) int episodeSortId; // @synthesize episodeSortId=_episodeSortId;
@property(nonatomic) int episodeNumber; // @synthesize episodeNumber=_episodeNumber;
@property(nonatomic) int seasonNumber; // @synthesize seasonNumber=_seasonNumber;
@property(retain, nonatomic) MIPSeries *series; // @synthesize series=_series;
@property(retain, nonatomic) MIPArtist *artist; // @synthesize artist=_artist;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasNetworkName;
@property(nonatomic) _Bool hasVideoQuality;
@property(nonatomic) _Bool hasEpisodeSortId;
@property(nonatomic) _Bool hasEpisodeNumber;
@property(nonatomic) _Bool hasSeasonNumber;
@property(readonly, nonatomic) _Bool hasSeries;
@property(readonly, nonatomic) _Bool hasArtist;

@end

@interface ML3AccountCacheDatabase : NSObject
{
    ML3DatabaseConnection *_databaseConnection;
}

- (void).cxx_destruct;
- (_Bool)_clearCacheDatabase;
- (_Bool)_internalSetAppleID:(id)arg1 forDSID:(unsigned long long)arg2;
- (_Bool)_closeDatabase;
- (_Bool)_openDatabaseIsRetry:(_Bool)arg1;
- (_Bool)_openDatabase;
- (id)_databasePath;
- (id)appleIDForDSID:(unsigned long long)arg1;
- (_Bool)setAppleID:(id)arg1 forDSID:(unsigned long long)arg2;
- (id)init;

@end

@interface ML3Query : NSObject <NSCoding>
{
    ML3MusicLibrary *_library;
    Class _entityClass;
    ML3Predicate *_predicate;
    NSArray *_orderingTerms;
    NSString *_propertyToCount;
    ML3AggregateQuery *_nonDirectAggregateQuery;
    _Bool _usingSections;
    _Bool _ignoreSystemFilterPredicates;
    _Bool _filtersOnDynamicProperties;
}

@property(nonatomic) _Bool ignoreSystemFilterPredicates; // @synthesize ignoreSystemFilterPredicates=_ignoreSystemFilterPredicates;
@property(readonly, nonatomic) _Bool filtersOnDynamicProperties; // @synthesize filtersOnDynamicProperties=_filtersOnDynamicProperties;
@property(readonly, nonatomic) ML3AggregateQuery *nonDirectAggregateQuery; // @synthesize nonDirectAggregateQuery=_nonDirectAggregateQuery;
@property(readonly, nonatomic) _Bool usingSections; // @synthesize usingSections=_usingSections;
@property(readonly, nonatomic) ML3MusicLibrary *library; // @synthesize library=_library;
@property(readonly, nonatomic) NSString *propertyToCount; // @synthesize propertyToCount=_propertyToCount;
@property(readonly, nonatomic) NSArray *orderingTerms; // @synthesize orderingTerms=_orderingTerms;
@property(readonly, nonatomic) ML3Predicate *predicate; // @synthesize predicate=_predicate;
@property(readonly, nonatomic) Class entityClass; // @synthesize entityClass=_entityClass;
- (void).cxx_destruct;
- (_Bool)sectionsPersistentIDColumnIsDistinct;
@property(readonly, nonatomic) NSString *sectionProperty;
- (id)countStatementParameters;
@property(readonly, nonatomic) NSString *selectCountSQL;
- (id)persistentIDParameters;
- (id)selectPersistentIDsSQLAndProperties:(id)arg1 ordered:(_Bool)arg2 distinct:(_Bool)arg3;
- (id)selectPersistentIDsSQLAndProperties:(id)arg1 ordered:(_Bool)arg2;
@property(readonly, nonatomic) NSString *selectPersistentIDsSQL;
- (id)selectUnorderedPersistentIDsSQL;
- (id)sectionsParameters;
- (id)selectSectionsSQL;
- (id)selectSQLWithColumns:(id)arg1 groupBy:(id)arg2 orderingTerms:(id)arg3 directionality:(id)arg4 usingLowerBound:(_Bool)arg5 distinct:(_Bool)arg6 limit:(unsigned long long)arg7;
- (id)lowerBoundParametersForOrderingTerms:(id)arg1 lowerBoundPersistentID:(long long)arg2;
- (id)selectSQLWithColumns:(id)arg1 groupBy:(id)arg2 orderingTerms:(id)arg3 directionality:(id)arg4 usingLowerBound:(_Bool)arg5;
- (id)selectSQLWithColumns:(id)arg1 groupBy:(id)arg2 orderingTerms:(id)arg3;
- (id)selectSQLWithColumns:(id)arg1 orderingTerms:(id)arg2 distinct:(_Bool)arg3;
- (id)selectSQLWithColumns:(id)arg1 orderingTerms:(id)arg2 limit:(unsigned long long)arg3;
- (id)selectSQLWithColumns:(id)arg1 orderingTerms:(id)arg2;
- (id)selectSQLWithColumns:(id)arg1 orderingTerms:(id)arg2 directionality:(id)arg3;
- (id)selectSQLWithColumns:(id)arg1 groupBy:(id)arg2 distinct:(_Bool)arg3;
- (id)selectSQLWithColumns:(id)arg1 groupBy:(id)arg2;
- (id)valueForAggregateFunction:(id)arg1 onEntitiesForProperty:(id)arg2;
- (void)enumeratePersistentIDsAndProperties:(id)arg1 ordered:(_Bool)arg2 sectionProperty:(id)arg3 cancelBlock:(CDUnknownBlockType)arg4 usingBlock:(CDUnknownBlockType)arg5;
- (void)enumeratePersistentIDsAndProperties:(id)arg1 ordered:(_Bool)arg2 cancelBlock:(CDUnknownBlockType)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumeratePersistentIDsAndProperties:(id)arg1 ordered:(_Bool)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumeratePersistentIDsAndSectionsWithProperty:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumeratePersistentIDsAndProperties:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumeratePersistentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (id)enumerationDatabaseResultForSQL:(id)arg1 onConnection:(id)arg2 withParameters:(id)arg3;
- (void)enumerateSectionsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)deleteAllEntitiesFromLibraryWithDeletionType:(int)arg1 usingConnection:(id)arg2;
- (_Bool)deleteAllEntitiesFromLibraryWithDeletionType:(int)arg1;
- (_Bool)deleteAllEntitiesFromLibrary;
@property(readonly, nonatomic) NSString *persistentIDProperty;
- (id)sections;
@property(readonly, nonatomic) unsigned long long countOfEntities;
- (unsigned long long)countOfDistinctRowsForColumn:(id)arg1;
@property(readonly, nonatomic) _Bool hasEntities;
@property(readonly, nonatomic) long long anyEntityPersistentID;
- (_Bool)hasRowForColumn:(id)arg1;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithLibrary:(id)arg1 entityClass:(Class)arg2 predicate:(id)arg3 orderingTerms:(id)arg4 usingSections:(_Bool)arg5 nonDirectAggregateQuery:(id)arg6 propertyToCount:(id)arg7;
@property(readonly, nonatomic) ML3Predicate *predicateIncludingSystemwidePredicates;
- (id)nameOrderPropertyForProperty:(id)arg1;
- (void)loadNamesFromLibrary:(id)arg1 onConnection:(id)arg2 forPredicate:(id)arg3 loadAllNames:(_Bool)arg4 cancelHandler:(CDUnknownBlockType)arg5;

@end

@interface ML3AggregateQuery : ML3Query
{
    Class _aggregateEntityClass;
    NSString *_foreignPersistentIDProperty;
}

@property(readonly, nonatomic) NSString *foreignPersistentIDProperty; // @synthesize foreignPersistentIDProperty=_foreignPersistentIDProperty;
@property(readonly, nonatomic) Class aggregateEntityClass; // @synthesize aggregateEntityClass=_aggregateEntityClass;
- (void).cxx_destruct;
- (_Bool)sectionsPersistentIDColumnIsDistinct;
- (id)selectPersistentIDsSQLAndProperties:(id)arg1 ordered:(_Bool)arg2;
- (unsigned long long)countOfEntities;
- (_Bool)hasEntities;
- (id)persistentIDProperty;
- (Class)entityClass;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithUnitQuery:(id)arg1 aggregateEntityClass:(Class)arg2 foreignPersistentIDProperty:(id)arg3;

@end

@interface ML3Entity : NSObject
{
    ML3MusicLibrary *_library;
    long long _persistentID;
}

+ (void)enumeratePersistentIDsInLibrary:(id)arg1 afterRevision:(long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
+ (long long)revisionTrackingCode;
+ (id)orderingSQLForProperties:(id)arg1 directionality:(id)arg2;
+ (id)indexableSQLForProperties:(id)arg1;
+ (id)disambiguatedSelectSQLForProperty:(id)arg1;
+ (id)disambiguatedSQLForProperty:(id)arg1;
+ (void)predisambiguateProperties:(id)arg1 toDictionary:(id)arg2;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)collectionClassesToUpdateBeforeDelete;
+ (id)persistentIDColumnForTable:(id)arg1;
+ (id)extraTablesToInsert;
+ (id)extraTablesToDelete;
+ (_Bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4 usingConnection:(id)arg5;
+ (_Bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4;
+ (_Bool)_deleteRowForPersistentIDs:(const long long *)arg1 count:(unsigned long long)arg2 library:(id)arg3 table:(id)arg4 usingColumn:(id)arg5 usingConnection:(id)arg6;
+ (_Bool)libraryDynamicChangeForProperty:(id)arg1;
+ (_Bool)libraryContentsChangeForProperty:(id)arg1;
+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;
+ (_Bool)propertyIsCountProperty:(id)arg1;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (id)foreignColumnForProperty:(id)arg1;
+ (id)foreignDatabaseTableForProperty:(id)arg1;
+ (id)sectionPropertyForProperty:(id)arg1;
+ (id)defaultOrderingTerms;
+ (id)newWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 usingConnection:(id)arg4;
+ (id)newWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;
+ (id)newWithDictionary:(id)arg1 inLibrary:(id)arg2;
+ (id)newWithPersistentID:(long long)arg1 inLibrary:(id)arg2;
+ (id)joinClausesForProperty:(id)arg1;
+ (id)predicateByOptimizingComparisonPredicate:(id)arg1;
+ (id)predicateByOptimizingPredicate:(id)arg1;
+ (id)defaultFilterPredicates;
+ (id)widthLimitedSetValuesQueue;
+ (id)newSelectSQLForProperties:(const id *)arg1 count:(unsigned long long)arg2 predicate:(id)arg3;
+ (id)newSelectAllEntitiesSQLForProperties:(const id *)arg1 count:(unsigned long long)arg2 predicate:(id)arg3;
+ (id)subselectPropertyForProperty:(id)arg1;
+ (id)subselectStatementForProperty:(id)arg1;
+ (void)enumeratePersistentIDsInLibrary:(id)arg1 matchingPredicate:(id)arg2 orderingTerms:(id)arg3 persistentIDs:(const long long *)arg4 count:(unsigned long long)arg5 usingBlock:(CDUnknownBlockType)arg6;
+ (_Bool)insertionChangesLibraryContents;
+ (_Bool)incrementRevisionWithLibrary:(id)arg1 persistentID:(long long)arg2 deletionType:(int)arg3 revisionType:(int)arg4 usingConnection:(id)arg5;
+ (_Bool)incrementRevisionWithLibrary:(id)arg1 persistentID:(long long)arg2 deletionType:(int)arg3 revisionType:(int)arg4;
+ (_Bool)incrementRevisionForRevisionTypeContentWithConnection:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4;
+ (_Bool)incrementRevisionForRevisionTypeContentWithConnection:(id)arg1 deletionType:(int)arg2 persistentIDs:(id)arg3;
+ (_Bool)incrementRevisionForRevisionTypeContentWithLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(id)arg3;
+ (_Bool)_shouldIncrementRevisionForType:(int)arg1 persistentID:(long long)arg2 usingConnection:(id)arg3;
+ (id)unsettableProperties;
+ (_Bool)insertValues:(id)arg1 intoTable:(id)arg2 persistentID:(long long)arg3 connection:(id)arg4;
+ (_Bool)insertValues:(id)arg1 intoTable:(id)arg2 persistentID:(long long)arg3 library:(id)arg4;
+ (id)predicateIncludingSystemwidePredicatesWithPredicate:(id)arg1 library:(id)arg2;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3 usingSections:(_Bool)arg4;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3 propertyToCount:(id)arg4;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3;
+ (id)directCollectionQueryWithAggregateQuery:(id)arg1 predicate:(id)arg2 usingSections:(_Bool)arg3;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 usingSections:(_Bool)arg3;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 orderingDirectionMappings:(id)arg4 usingSections:(_Bool)arg5;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 usingSections:(_Bool)arg4;
+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3;
+ (id)anyInLibrary:(id)arg1 predicate:(id)arg2;
+ (id)aggregateQueryWithUnitQuery:(id)arg1 foreignPersistentIDProperty:(id)arg2;
+ (id)replacerWithProperties:(id)arg1 library:(id)arg2;
@property(readonly) long long persistentID; // @synthesize persistentID=_persistentID;
@property __weak ML3MusicLibrary *library; // @synthesize library=_library;
- (void).cxx_destruct;
- (void)incrementRevision;
- (_Bool)deleteFromLibrary;
- (void)didChangeValueForProperties:(id)arg1;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;
- (_Bool)setValuesForPropertiesWithDictionary:(id)arg1;
- (void)setValues:(id)arg1 forProperties:(id)arg2 async:(_Bool)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (_Bool)setValues:(id)arg1 forProperties:(id)arg2;
- (_Bool)setValues:(const id *)arg1 forProperties:(const id *)arg2 count:(unsigned long long)arg3;
- (id)valueForProperty:(id)arg1;
- (id)getValuesForProperties:(id)arg1;
- (void)getValues:(id *)arg1 forProperties:(const id *)arg2 count:(unsigned long long)arg3;
- (_Bool)matchesPredicate:(id)arg1;
@property(readonly) _Bool existsInLibrary;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copyInLibrary:(id)arg1;
- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 usingConnection:(id)arg4;
- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;
- (id)initWithPersistentID:(long long)arg1 inLibrary:(id)arg2;

@end

@interface ML3Collection : ML3Entity
{
}

+ (id)collectionEntityClasses;
+ (_Bool)canonicalizeCollectionRepresentativeItemsWithWriteConnection:(id)arg1;
+ (_Bool)updateRepresentativeItemPersistentIDsInLibrary:(id)arg1 persistentIDs:(const long long *)arg2 count:(unsigned long long)arg3 usingConnection:(id)arg4;
+ (_Bool)updateRepresentativeItemPersistentIDsInLibrary:(id)arg1 persistentIDs:(const long long *)arg2 count:(unsigned long long)arg3;
+ (_Bool)libraryContentsChangeForProperty:(id)arg1;
+ (id)artworkCacheIDProperty;
+ (id)trackForeignPersistentID;
+ (id)propertiesForGroupingKey;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (void)initialize;
- (void)updateRepresentativeItem:(id)arg1 inLibrary:(id)arg2 withArtworkToken:(id)arg3;
- (void)updateCloudStatus;
- (void)updateRepresentativeCollectionValues:(id)arg1 existingRepresentativePersistentID:(unsigned long long)arg2 forUpdateTrackValues:(id)arg3;
- (void)updateTrackValues:(id)arg1;
- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 usingConnection:(id)arg4;

@end

@interface ML3Album : ML3Collection
{
}

+ (id)artworkCacheIDProperty;
+ (id)trackForeignPersistentID;
+ (id)propertiesForGroupingKey;
+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;
+ (_Bool)propertyIsCountProperty:(id)arg1;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)joinClausesForProperty:(id)arg1;
+ (id)defaultOrderingTerms;
+ (long long)revisionTrackingCode;
+ (id)databaseTable;
+ (void)initialize;
+ (id)_albumArtistProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (void)updateRepresentativeItem:(id)arg1 inLibrary:(id)arg2 withArtworkToken:(id)arg3;
- (void)updateTrackValues:(id)arg1;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

@interface ML3AlbumArtist : ML3Collection
{
}

+ (id)artworkCacheIDProperty;
+ (id)trackForeignPersistentID;
+ (id)effectiveAlbumArtistSortNameForAlbumArtistSortName:(id)arg1 albumArtistName:(id)arg2 artistSortName:(id)arg3 artistName:(id)arg4 compilation:(_Bool)arg5;
+ (id)effectiveAlbumArtistNameForAlbumArtistName:(id)arg1 artistName:(id)arg2 seriesName:(id)arg3 compilation:(_Bool)arg4;
+ (id)propertiesForGroupingKey;
+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;
+ (_Bool)propertyIsCountProperty:(id)arg1;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)sectionPropertyForProperty:(id)arg1;
+ (id)joinClausesForProperty:(id)arg1;
+ (id)defaultOrderingTerms;
+ (id)databaseTable;
+ (void)initialize;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (void)updateRepresentativeItem:(id)arg1 inLibrary:(id)arg2 withArtworkToken:(id)arg3;
- (void)updateTrackValues:(id)arg1;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

__attribute__((visibility("hidden")))
@interface ML3AlbumData : NSObject
{
    int _userRating;
    int _albumYear;
    NSString *_sortAlbum;
    long long _albumPid;
}

@property(nonatomic) int albumYear; // @synthesize albumYear=_albumYear;
@property(nonatomic) int userRating; // @synthesize userRating=_userRating;
@property(nonatomic) long long albumPid; // @synthesize albumPid=_albumPid;
@property(retain, nonatomic) NSString *sortAlbum; // @synthesize sortAlbum=_sortAlbum;
- (void).cxx_destruct;
- (id)initWithState:(long long)arg1 sortAlbum:(id)arg2 userRating:(int)arg3 albumYear:(int)arg4;

@end

@interface ML3AlbumGroupingIdentifier : NSObject <NSCopying>
{
    long long _albumArtistPersisentID;
    NSData *_groupingKey;
    NSString *_feedURL;
    long long _seasonNumber;
    _Bool _compilation;
}

@property(readonly, nonatomic) _Bool compilation; // @synthesize compilation=_compilation;
@property(readonly, nonatomic) long long seasonNumber; // @synthesize seasonNumber=_seasonNumber;
@property(readonly, nonatomic) NSString *feedURL; // @synthesize feedURL=_feedURL;
@property(readonly, nonatomic) NSData *groupingKey; // @synthesize groupingKey=_groupingKey;
@property(readonly, nonatomic) long long albumArtistPersisentID; // @synthesize albumArtistPersisentID=_albumArtistPersisentID;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)initWithAlbumArtistPersistentID:(long long)arg1 groupingKey:(id)arg2 feedURL:(id)arg3 seasonNumber:(long long)arg4 compilation:(_Bool)arg5;
- (id)initWithAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(long long)arg4 compilation:(_Bool)arg5 inLibrary:(id)arg6;

@end

@interface ML3Predicate : NSObject <NSCoding, NSCopying>
{
}

- (id)spotlightPredicate;
- (_Bool)isFalseAlways;
- (_Bool)isTrueAlways;
- (_Bool)isDynamicForEntityClass:(Class)arg1;
- (id)SQLForEntityClass:(Class)arg1;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (id)predicateOptimizedForEntityClass:(Class)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface ML3CompoundPredicate : ML3Predicate
{
    NSArray *_predicates;
}

+ (id)predicateMatchingPredicates:(id)arg1;
@property(retain, nonatomic) NSArray *predicates; // @synthesize predicates=_predicates;
- (void).cxx_destruct;
- (id)spotlightPredicate;
- (_Bool)isDynamicForEntityClass:(Class)arg1;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)predicateOptimizedForEntityClass:(Class)arg1;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPredicates:(id)arg1;

// Remaining properties
@property(readonly, copy, nonatomic) NSString *compoundOperatorJoiner; // @dynamic compoundOperatorJoiner;

@end

@interface ML3AllCompoundPredicate : ML3CompoundPredicate
{
}

+ (id)predicateByMergingContainmentPredicatesAllCompoundPredicate:(id)arg1;
+ (id)predicateByFlatteningAllCompoundPredicate:(id)arg1;
- (id)compoundOperatorJoiner;
- (id)predicateOptimizedForEntityClass:(Class)arg1;

@end

@interface ML3AnyCompoundPredicate : ML3CompoundPredicate
{
}

- (id)compoundOperatorJoiner;
- (id)predicateOptimizedForEntityClass:(Class)arg1;

@end

@interface ML3Artist : ML3Collection
{
}

+ (id)trackForeignPersistentID;
+ (id)propertiesForGroupingKey;
+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;
+ (_Bool)propertyIsCountProperty:(id)arg1;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)defaultOrderingTerms;
+ (id)joinClausesForProperty:(id)arg1;
+ (long long)revisionTrackingCode;
+ (id)databaseTable;
+ (void)initialize;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (void)updateTrackValues:(id)arg1;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

@interface ML3Artwork : NSObject
{
    NSString *_artworkToken;
    long long _artworkType;
    long long _sourceType;
    NSString *_relativePath;
    NSURL *_originalFileURL;
}

@property(readonly, nonatomic) NSURL *originalFileURL; // @synthesize originalFileURL=_originalFileURL;
@property(readonly, nonatomic) NSString *relativePath; // @synthesize relativePath=_relativePath;
@property(readonly, nonatomic) long long sourceType; // @synthesize sourceType=_sourceType;
@property(readonly, nonatomic) long long artworkType; // @synthesize artworkType=_artworkType;
@property(readonly, nonatomic) NSString *artworkToken; // @synthesize artworkToken=_artworkToken;
- (void).cxx_destruct;
- (id)fileURLForSize:(struct CGSize)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithToken:(id)arg1 sourceType:(long long)arg2 relativePath:(id)arg3 artworkType:(long long)arg4;
- (id)initWithToken:(id)arg1 sourceType:(long long)arg2 artworkType:(long long)arg3;

@end

@interface ML3ArtworkConfiguration : NSObject
{
    NSMutableDictionary *_artworkConfigurationDictionary;
    NSMutableDictionary *_supportedSizesCache;
    double _mainScreenScale;
}

+ (id)systemConfiguration;
@property(nonatomic) double mainScreenScale; // @synthesize mainScreenScale=_mainScreenScale;
@property(retain, nonatomic) NSMutableDictionary *supportedSizesCache; // @synthesize supportedSizesCache=_supportedSizesCache;
@property(retain, nonatomic) NSMutableDictionary *artworkConfigurationDictionary; // @synthesize artworkConfigurationDictionary=_artworkConfigurationDictionary;
- (void).cxx_destruct;
- (id)_supportedSizeKeysForMediaType:(unsigned int)arg1 artworkType:(long long)arg2;
- (id)description;
- (id)sizesToAutogenerateForMediaType:(unsigned int)arg1 artworkType:(long long)arg2;
- (id)supportedSizesForMediaType:(unsigned int)arg1 artworkType:(long long)arg2;
- (id)initWithConfigurationDictionaries:(id)arg1;

@end

@interface ML3BaseLocation : ML3Entity
{
}

+ (_Bool)insertionChangesLibraryContents;
+ (id)databaseTable;
+ (id)newWithDictionary:(id)arg1 inLibrary:(id)arg2;
- (void)enumerateOrphanedAssetsUsingBlock:(CDUnknownBlockType)arg1;

@end

@interface ML3PropertyPredicate : ML3Predicate
{
    NSString *_property;
}

@property(copy, nonatomic) NSString *property; // @synthesize property=_property;
- (void).cxx_destruct;
- (_Bool)isDynamicForEntityClass:(Class)arg1;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProperty:(id)arg1;

@end

@interface ML3BitMaskPredicate : ML3PropertyPredicate
{
    long long _mask;
    long long _value;
}

+ (id)predicateWithProperty:(id)arg1 mask:(long long)arg2 value:(long long)arg3;
@property(nonatomic) long long value; // @synthesize value=_value;
@property(nonatomic) long long mask; // @synthesize mask=_mask;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProperty:(id)arg1 mask:(long long)arg2 value:(long long)arg3;

@end

@interface MLChapterTOC : NSObject
{
}

- (id)urlPropertyOfChapterAtIndex:(unsigned int)arg1;
- (id)urlTitlePropertyOfChapterAtIndex:(unsigned int)arg1;
- (id)titlePropertyOfChapterAtIndex:(unsigned int)arg1;
- (unsigned int)timeLocationInMSOfChapterAtIndex:(unsigned int)arg1;
- (unsigned int)chapterIndexAtTimeLocationInMS:(unsigned int)arg1;
- (unsigned int)timeLocationInMSOfGroupAtIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)groupIndexAtTimeLocationInMS:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)durationInMSOfGroupAtIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)groupIndexForChapterIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)chapterIndexForGroupIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)countOfGroupsForProperty:(int)arg1;
- (_Bool)hasDataForProperty:(int)arg1;
- (unsigned int)countOfChapters;
- (struct ChapterData *)chapterDataRef;

@end

@interface MLITChapterTOC : MLChapterTOC
{
    unsigned int _totalTimeInMS;
    struct ChapterData *_chapterDataRef;
    unsigned int *_picCookieIndexMap;
    unsigned int *_urlCookieIndexMap;
    unsigned int *_nameCookieIndexMap;
}

+ (void)enumerateChapterTimesInFlattenedChapterData:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (void)enumerateArtworkCacheIDsInFlattenedChapterData:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (unsigned int **)_chapterDataCookieIndexMapForProperty:(int)arg1 ofChapterTOC:(id)arg2;
- (id)urlPropertyOfChapterAtIndex:(unsigned int)arg1;
- (id)urlTitlePropertyOfChapterAtIndex:(unsigned int)arg1;
- (id)urlTitleTrimmingCharacterSet;
- (id)titlePropertyOfChapterAtIndex:(unsigned int)arg1;
- (unsigned int)timeLocationInMSOfChapterAtIndex:(unsigned int)arg1;
- (unsigned int)timeLocationInMSOfGroupAtIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)groupIndexAtTimeLocationInMS:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)durationInMSOfGroupAtIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)totalTimeInMS;
- (unsigned int)groupIndexForChapterIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)chapterIndexForGroupIndex:(unsigned int)arg1 groupingProperty:(int)arg2;
- (unsigned int)countOfGroupsForProperty:(int)arg1;
- (unsigned int *)_cachedCookieIndexMapForProperty:(int)arg1 createIfNecessary:(_Bool)arg2;
- (unsigned int)countOfChapters;
- (void)dealloc;
- (struct ChapterData *)chapterDataRef;
- (id)initWithChapterDataRef:(struct ChapterData *)arg1 totalTimeInMS:(unsigned int)arg2;

@end

__attribute__((visibility("hidden")))
@interface ML3ChapterTOC : MLITChapterTOC
{
    ML3Track *_track;
}

- (void).cxx_destruct;
- (id)initWithChapterDataRef:(struct ChapterData *)arg1 track:(id)arg2;

@end

@interface ML3DatabaseTable : NSObject
{
    NSString *_name;
    NSArray *_columns;
    NSArray *_foreignKeyConstraints;
}

@property(readonly, nonatomic) NSArray *foreignKeyConstraints; // @synthesize foreignKeyConstraints=_foreignKeyConstraints;
@property(readonly, nonatomic) NSArray *columns; // @synthesize columns=_columns;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)createTableSQLWithExistenceClause:(_Bool)arg1;
- (id)columnDefinitionsSQL;

@end

@interface ML3ChapterTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ComparisonPredicate : ML3PropertyPredicate
{
    id _value;
    NSString *_transformFunction;
    int _comparison;
    _Bool _caseInsensitive;
    NSString *_treatNullAsString;
}

+ (id)predicateWithProperty:(id)arg1 equalToValue:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 equalToInteger:(long long)arg2;
+ (id)predicateWithProperty:(id)arg1 equalToInt64:(long long)arg2;
+ (id)predicateWithProperty:(id)arg1 value:(id)arg2 comparison:(int)arg3 transformFunction:(id)arg4;
+ (id)predicateWithProperty:(id)arg1 value:(id)arg2 comparison:(int)arg3 caseInsensitive:(_Bool)arg4 treatNullAsString:(id)arg5;
+ (id)predicateWithProperty:(id)arg1 value:(id)arg2 comparison:(int)arg3 caseInsensitive:(_Bool)arg4;
+ (id)predicateWithProperty:(id)arg1 value:(id)arg2 comparison:(int)arg3;
@property(copy, nonatomic) NSString *transformFunction; // @synthesize transformFunction=_transformFunction;
@property(copy, nonatomic) NSString *treatNullAsString; // @synthesize treatNullAsString=_treatNullAsString;
@property(nonatomic) _Bool caseInsensitive; // @synthesize caseInsensitive=_caseInsensitive;
@property(nonatomic) int comparison; // @synthesize comparison=_comparison;
@property(retain, nonatomic) id value; // @synthesize value=_value;
- (void).cxx_destruct;
- (id)databaseStatementParameters;
- (id)valueToBindForOperation:(long long)arg1;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
@property(readonly, copy, nonatomic) NSString *operator;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProperty:(id)arg1 value:(id)arg2 comparison:(int)arg3 caseInsensitive:(_Bool)arg4 transformFunction:(id)arg5 treatNullAsString:(id)arg6;

@end

@interface ML3Composer : ML3Collection
{
}

+ (id)artworkCacheIDProperty;
+ (id)trackForeignPersistentID;
+ (id)propertiesForGroupingKey;
+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;
+ (_Bool)propertyIsCountProperty:(id)arg1;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)defaultOrderingTerms;
+ (id)joinClausesForProperty:(id)arg1;
+ (long long)revisionTrackingCode;
+ (id)databaseTable;
+ (void)initialize;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (void)updateRepresentativeItem:(id)arg1 inLibrary:(id)arg2 withArtworkToken:(id)arg3;
- (void)updateTrackValues:(id)arg1;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

@interface ML3ConditionalPredicate : ML3Predicate
{
    ML3Predicate *_conditionPredicate;
    ML3Predicate *_thenPredicate;
    ML3Predicate *_elsePredicate;
}

+ (id)predicateWithConditionPredicate:(id)arg1 thenPredicate:(id)arg2 elsePredicate:(id)arg3;
@property(readonly, copy, nonatomic) ML3Predicate *elsePredicate; // @synthesize elsePredicate=_elsePredicate;
@property(readonly, copy, nonatomic) ML3Predicate *thenPredicate; // @synthesize thenPredicate=_thenPredicate;
@property(readonly, copy, nonatomic) ML3Predicate *conditionPredicate; // @synthesize conditionPredicate=_conditionPredicate;
- (void).cxx_destruct;
- (id)spotlightPredicate;
- (_Bool)isDynamicForEntityClass:(Class)arg1;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)predicateOptimizedForEntityClass:(Class)arg1;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithConditionPredicate:(id)arg1 thenPredicate:(id)arg2 elsePredicate:(id)arg3;

@end

@interface ML3Container : ML3Entity
{
}

+ (void)populateMediaTypesOfStaticContainersInLibrary:(id)arg1;
+ (void)_reloadContainedMediaTypesForContainerWithPersistID:(long long)arg1 connection:(id)arg2;
+ (void)_removeMediaTypesFromContainerWithPersistentID:(long long)arg1 mediaTypes:(id)arg2 connection:(id)arg3;
+ (void)_addMediaTypesToContainerWithPersistentID:(long long)arg1 mediaTypes:(id)arg2 connection:(id)arg3;
+ (void)_clearContainerMediaTypeInContainerWithPersistentID:(long long)arg1 connection:(id)arg2;
+ (id)_mediaTypesForTracksWithSwappedPersistentIDsInArray:(id)arg1 connection:(id)arg2;
+ (id)_mediaTypesForTracksInContainerWithPersistentID:(long long)arg1 connection:(id)arg2;
+ (id)_mediaTypesForTracksWithSwappedPersistentIDs:(const long long *)arg1 count:(int)arg2 connection:(id)arg3;
+ (id)__mediaTypesForTracksWithDatabaseConnection:(id)arg1 tracksPersistentIDsEnumerationBlock:(CDUnknownBlockType)arg2;
+ (void)_updateContainedMediaTypeInContainerWithPersistentID:(long long)arg1 connection:(id)arg2 itemUpdateBlock:(CDUnknownBlockType)arg3;
+ (_Bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4;
+ (void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2 createBuiltinSmartPlaylists:(_Bool)arg3 usingConnection:(id)arg4;
+ (void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2 createBuiltinSmartPlaylists:(_Bool)arg3;
+ (void)populateDynamicContainersWithTrackPersistentID:(id)arg1 inLibrary:(id)arg2;
+ (void)populateDynamicContainersInLibrary:(id)arg1 createBuiltinSmartPlaylists:(_Bool)arg2;
+ (void)populateDynamicContainersInLibrary:(id)arg1;
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)arg1;
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)arg1 inLibrary:(id)arg2;
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)arg1;
+ (_Bool)updateBuiltInSmartPlaylistNamesForCurrentLanguage:(id)arg1;
+ (_Bool)createMissingBuiltInSmartPlaylists:(id)arg1;
+ (void)_insertNewSmartPlaylist:(id)arg1 criteriaBlob:(id)arg2 evaluationOrder:(unsigned int)arg3 limited:(_Bool)arg4 trackOrder:(unsigned int)arg5 distinguishedKind:(int)arg6 inLibrary:(id)arg7 cachedNameOrders:(id)arg8;
+ (id)predicateForCriteriaList:(struct SearchCriteriaList *)arg1 dynamicCriteria:(_Bool)arg2 parentMatchedAny:(_Bool)arg3;
+ (_Bool)hasCriterionInCriteriaList:(struct SearchCriteriaList *)arg1 forITDBTrackField:(int)arg2;
+ (void)populateSortOrdersOfPropertyValues:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;
+ (_Bool)smartCriteriaCanBeEvaluated:(id)arg1;
+ (id)nextFilepathForPlaylistType:(int)arg1 withPersistentID:(unsigned long long)arg2 inLibrary:(id)arg3;
+ (id)defaultFilterPredicates;
+ (id)persistentIDColumnForTable:(id)arg1;
+ (id)extraTablesToDelete;
+ (id)foreignColumnForProperty:(id)arg1;
+ (id)foreignDatabaseTableForProperty:(id)arg1;
+ (id)sectionPropertyForProperty:(id)arg1;
+ (id)joinClausesForProperty:(id)arg1;
+ (id)defaultOrderingTerms;
+ (long long)revisionTrackingCode;
+ (id)databaseTable;
+ (void)initialize;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (_Bool)isBuiltInSmartPlaylist;
- (id)childPlaylistPersistentIds;
- (id)trackPersistentIds;
- (_Bool)setTracksWithSwappedPersistentIDData:(id)arg1;
- (_Bool)setTracksWithPersistentIDs:(const long long *)arg1 count:(unsigned long long)arg2 notify:(_Bool)arg3;
- (_Bool)setTracksWithPersistentIDs:(const long long *)arg1 count:(unsigned long long)arg2;
- (_Bool)moveTrackFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2;
- (_Bool)addTracksWithPersistentIDs:(long long *)arg1 count:(unsigned long long)arg2 notify:(_Bool)arg3;
- (_Bool)addTracksWithPersistentIDs:(long long *)arg1 count:(unsigned long long)arg2;
- (_Bool)addTrackWithPersistentID:(long long)arg1;
- (_Bool)removeTracksWithPersistentIDs:(const long long *)arg1 atFilteredIndexes:(id)arg2;
- (_Bool)removeTracksAtIndexes:(id)arg1;
- (_Bool)removeTracksAtIndexes:(id)arg1 notify:(_Bool)arg2;
- (_Bool)setContainsTrack:(_Bool)arg1 forPersistentID:(long long)arg2 notify:(_Bool)arg3;
- (_Bool)removeTracksAtIndexes:(id)arg1 notify:(_Bool)arg2 indexesTransformBlock:(CDUnknownBlockType)arg3;
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)removeAllTracks;
- (_Bool)_setSwappedItemPersistentIDs:(const long long *)arg1 reloadContainedMediaTypes:(_Bool)arg2 size:(int)arg3;
- (_Bool)_setSwappedItemPersistentIDs:(const long long *)arg1 reloadContainedMediaTypes:(_Bool)arg2 size:(int)arg3 notify:(_Bool)arg4;
- (_Bool)_setSwappedItemPersistentIDs:(const long long *)arg1 mediaTypesToRemove:(id)arg2 mediaTypesToAdd:(id)arg3 size:(int)arg4 notify:(_Bool)arg5;
- (_Bool)_setSwappedItemPersistentIDs:(const long long *)arg1 reloadContainedMediaTypes:(_Bool)arg2 mediaTypesToRemove:(id)arg3 mediaTypesToAdd:(id)arg4 size:(int)arg5 notify:(_Bool)arg6;
- (id)populateStatementParametersWithStaticTrackPersistentID:(id)arg1;
- (id)populateSQLWithStaticTrackPersistentID:(id)arg1;
@property(readonly, copy) NSArray *displayOrderingTerms;
@property(readonly, copy) NSArray *cloudDisplayOrderingTerms;
@property(readonly) long long limitValue;
@property(readonly, copy) NSArray *limitOrderingTerms;
- (id)evaluationOrderingTerms;
@property(readonly, copy) NSString *limitingProperty;
@property(readonly, getter=isLimitOrderingDescending) _Bool limitOrderingDescending;
@property(readonly, getter=isLimitedByCount) _Bool limitedByCount;
- (_Bool)isEvaluationOrderingDescending;
@property(readonly) ML3Predicate *dynamicPredicate;
@property(readonly) ML3Predicate *staticPredicate;
- (struct SearchCriteriaList *)importedCriteriaList;
- (void)setValues:(id)arg1 forProperties:(id)arg2 async:(_Bool)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)_setContainerSeedItemPersistentIDValue:(id)arg1;
- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 usingConnection:(id)arg4;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

__attribute__((visibility("hidden")))
@interface ML3ContainerMediaTypeCounts : NSObject
{
    struct __CFDictionary *_map;
    unsigned long long _count;
}

@property(nonatomic) unsigned long long count; // @synthesize count=_count;
- (void)enumerateMediaTypesWithBlock:(CDUnknownBlockType)arg1;
- (void)addMediaType:(unsigned int)arg1 count:(unsigned long long)arg2;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface ML3ContainerQuery : ML3Query
{
    ML3Predicate *_containerPredicate;
    ML3Container *_container;
    NSArray *_limitedPersistentIDs;
}

@property(readonly, nonatomic) NSArray *limitedPersistentIDs; // @synthesize limitedPersistentIDs=_limitedPersistentIDs;
@property(readonly, nonatomic) ML3Container *container; // @synthesize container=_container;
- (void).cxx_destruct;
- (id)enumerationDatabaseResultForSQL:(id)arg1 onConnection:(id)arg2 withParameters:(id)arg3;
- (id)selectPersistentIDsSQLAndProperties:(id)arg1 ordered:(_Bool)arg2;
- (id)valueForAggregateFunction:(id)arg1 onEntitiesForProperty:(id)arg2;
- (unsigned long long)countOfEntities;
- (unsigned long long)countOfDistinctRowsForColumn:(id)arg1;
- (_Bool)hasEntities;
@property(readonly, nonatomic) _Bool requiresSmartLimiting;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithEntityClass:(Class)arg1 container:(id)arg2 predicate:(id)arg3 orderingTerms:(id)arg4;

@end

@interface ML3QueryResultSet : NSObject <NSCopying>
{
    ML3QueryResultSet_BackingStore *_backingStore;
    ML3Query *_query;
    long long _revision;
    _Bool _supportsIncrementalUpdate;
    NSMutableArray *_updateToLibraryCurrentRevisionCompletionBlocks;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_fixedPriorityQueue;
}

@property(readonly, nonatomic) long long revision; // @synthesize revision=_revision;
@property(readonly, nonatomic) ML3Query *query; // @synthesize query=_query;
- (void).cxx_destruct;
- (unsigned long long)entityLimit;
- (void)enumerateSectionsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumeratePersistentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (long long)persistentIDAtIndex:(unsigned long long)arg1;
- (_Bool)_updateToLibraryCurrentRevision;
- (_Bool)updateToLibraryCurrentRevision;
- (void)_onQueueInvokeAndClearUpdateFinishedBlocksWithDidUpdateResult:(_Bool)arg1;
- (void)_onQueueAddUpdateFinishedBlock:(CDUnknownBlockType)arg1;
- (void)_mergeChangesWithFromNewPIDs:(const vector_c1c297d2 *)arg1 changedPIDs:(unordered_set_f2692727 *)arg2;
- (void)_loadCurrentFullResults;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithQuery:(id)arg1;
- (id)_initWithQuery:(id)arg1 supportsIncrementalUpdate:(_Bool)arg2;
@property(readonly, nonatomic) unsigned long long count;

@end

__attribute__((visibility("hidden")))
@interface ML3ContainerQueryResultSet : ML3QueryResultSet
{
    _Bool _needsSorting;
    _Bool _needsReversing;
    ML3QueryResultSet_BackingStore *_sortedBackingStore;
    long long _containerPID;
    unsigned long long _entityLimit;
}

- (void).cxx_destruct;
- (_Bool)_updateToLibraryCurrentRevision;
- (unsigned long long)entityLimit;
- (void)enumerateSectionsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumeratePersistentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (long long)persistentIDAtIndex:(unsigned long long)arg1;
- (id)sortedBackingStoreForDisplayOrdering;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_loadCurrentFullResults;
- (id)initWithQuery:(id)arg1;

@end

@interface ML3ContainmentPredicate : ML3PropertyPredicate
{
    NSSet *_values;
}

+ (id)predicateWithProperty:(id)arg1 values:(id)arg2;
@property(retain, nonatomic) NSSet *values; // @synthesize values=_values;
- (void).cxx_destruct;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)description;
- (unsigned long long)hash;
- (id)_orderedValues;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProperty:(id)arg1 values:(id)arg2;

@end

@interface ML3ContainsPredicate : ML3PropertyPredicate
{
    id _values;
}

+ (id)predicateWithProperty:(id)arg1 valueSet:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 values:(id)arg2;
@property(copy, nonatomic) id values; // @synthesize values=_values;
- (void).cxx_destruct;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProperty:(id)arg1 values:(id)arg2;

@end

@interface ML3ExportItem : NSObject
{
    NSDictionary *_properties;
    long long _persistentId;
    ML3MusicLibrary *_library;
    Class _entityClass;
}

+ (unsigned int *)allExportPropertyKeysForEntityClass:(Class)arg1 returnedCount:(unsigned int *)arg2;
@property(readonly, nonatomic) Class entityClass; // @synthesize entityClass=_entityClass;
@property(readonly, nonatomic) ML3MusicLibrary *library; // @synthesize library=_library;
@property(readonly, nonatomic) long long persistentId; // @synthesize persistentId=_persistentId;
- (void).cxx_destruct;
- (id)_allExportPropertyNames;
- (id)_propertyNamesFromKeys:(unsigned int *)arg1 numKeys:(unsigned int)arg2;
- (id)_propertyNameForKey:(unsigned int)arg1;
- (id)exportData;
- (unsigned int *)propertyKeysToExport:(unsigned int *)arg1;
- (_Bool)isValid;
- (_Bool)hasValueForProperty:(unsigned int)arg1;
- (id)stringValueForProperty:(unsigned int)arg1;
- (id)dataValueForProperty:(unsigned int)arg1;
- (long long)longlongValueForProperty:(unsigned int)arg1;
- (int)longValueForProperty:(unsigned int)arg1;
- (short)shortValueForProperty:(unsigned int)arg1;
- (BOOL)charValueForProperty:(unsigned int)arg1;
- (id)valueForProperty:(unsigned int)arg1;
- (id)description;
- (id)initWithPersistentId:(long long)arg1 entityClass:(id)arg2 properties:(id)arg3 library:(id)arg4;
- (id)initWithPersistentId:(long long)arg1 entityClass:(Class)arg2 propertyKeysToExport:(unsigned int *)arg3 numKeys:(unsigned int)arg4 library:(id)arg5;
- (id)initWithPersistentId:(long long)arg1 entityClass:(Class)arg2 library:(id)arg3;

@end

@interface ML3DAAPExportItem : ML3ExportItem
{
}

- (int)_daapPlaylistKind;
- (int)_daapSortTypeForTrackOrder:(unsigned int)arg1;
- (int)_daapMediaKindForMLMediaType:(int)arg1;
- (unsigned int)_daapCodeForPropertyKey:(unsigned int)arg1;
- (void)_exportChildItemsToWriter:(id)arg1;
- (id)exportData;
- (long long)longlongValueForProperty:(unsigned int)arg1;
- (int)longValueForProperty:(unsigned int)arg1;
- (id)valueForProperty:(unsigned int)arg1;

@end

@interface ML3ExportSession : NSData
{
    ML3MusicLibrary *_library;
    NSOutputStream *_outputStream;
}

@property(readonly, nonatomic) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property(readonly, nonatomic) ML3MusicLibrary *library; // @synthesize library=_library;
- (void).cxx_destruct;
- (id)exportPlaylistDeleted:(unsigned long long)arg1;
- (id)exportPlaylist:(unsigned long long)arg1;
- (id)exportTrackDeleted:(unsigned long long)arg1;
- (id)exportTrack:(unsigned long long)arg1;
- (id)end;
- (id)begin;
- (id)initWithLibrary:(id)arg1 outputStream:(id)arg2;

@end

@interface ML3DAAPExportSession : ML3ExportSession
{
    DKDAAPWriter *_daapWriter;
    unsigned int _currentListingContainerCode;
    unsigned int _currentSongsContainerCode;
}

- (void).cxx_destruct;
- (void)_endCurrentListingContainer;
- (void)_setListingContainer:(unsigned int)arg1;
- (void)_endCurrentSongsContainer;
- (void)_setSongsContainer:(unsigned int)arg1;
- (id)_playlistExportItemForPersistentId:(long long)arg1;
- (id)_trackExportItemForPersistendId:(long long)arg1;
- (id)exportPlaylistDeleted:(unsigned long long)arg1;
- (id)exportPlaylist:(unsigned long long)arg1;
- (id)exportTrackDeleted:(unsigned long long)arg1;
- (id)exportTrack:(unsigned long long)arg1;
- (id)end;
- (id)begin;
- (id)initWithLibrary:(id)arg1 outputStream:(id)arg2;

@end

@interface ML3DatabaseBlob : NSObject
{
    struct sqlite3_blob *_sqliteHandle;
}

- (id)data;
- (int)writeData:(id)arg1 numberOfBytes:(unsigned long long)arg2 offset:(unsigned long long)arg3;
- (int)readData:(id)arg1 numberOfBytes:(unsigned long long)arg2 offset:(unsigned long long)arg3;
- (unsigned long long)length;
- (void)dealloc;
- (id)initWithSQLiteHandle:(struct sqlite3_blob *)arg1;
- (id)init;

@end

@interface ML3DatabaseRow : NSObject
{
    struct sqlite3_stmt *_stmt;
    ML3DatabaseResult *_parentResult;
}

@property(readonly, nonatomic) ML3DatabaseResult *parentResult; // @synthesize parentResult=_parentResult;
- (void).cxx_destruct;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)arrayRepresentation;
- (id)dictionaryRepresentation;
- (id)valueForColumnIndex:(unsigned long long)arg1;
- (id)valueForColumnName:(id)arg1;
- (void)getBlobBytes:(const void **)arg1 outLength:(int *)arg2 forColumnIndex:(unsigned long long)arg3;
- (void)getBlobBytes:(const void **)arg1 outLength:(int *)arg2 forColumnName:(id)arg3;
- (id)numberForColumnIndex:(unsigned long long)arg1;
- (id)numberForColumnName:(id)arg1;
- (id)stringForColumnIndex:(unsigned long long)arg1;
- (id)stringForColumnName:(id)arg1;
- (const char *)cStringForColumnIndex:(unsigned long long)arg1;
- (const char *)cStringForColumnName:(id)arg1;
- (long long)int64ForColumnIndex:(unsigned long long)arg1;
- (long long)int64ForColumnName:(id)arg1;
- (int)intForColumnIndex:(unsigned long long)arg1;
- (int)intForColumnName:(id)arg1;
- (double)doubleForColumnIndex:(unsigned long long)arg1;
- (double)doubleForColumnName:(id)arg1;
- (id)dataForColumnIndex:(unsigned long long)arg1;
- (id)dataForColumnName:(id)arg1;
- (unsigned long long)columnCount;
- (id)initWithParentResult:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface ML3DatabaseCachedRow : ML3DatabaseRow
{
    NSArray *_arrayRepresentation;
}

- (void).cxx_destruct;
- (id)valueForColumnName:(id)arg1;
- (void)getBlobBytes:(const void **)arg1 outLength:(int *)arg2 forColumnName:(id)arg3;
- (id)numberForColumnName:(id)arg1;
- (id)stringForColumnName:(id)arg1;
- (const char *)cStringForColumnName:(id)arg1;
- (long long)int64ForColumnName:(id)arg1;
- (int)intForColumnName:(id)arg1;
- (double)doubleForColumnName:(id)arg1;
- (id)dataForColumnName:(id)arg1;
- (id)_numberOrZeroForColumnIndex:(unsigned long long)arg1;
- (id)arrayRepresentation;
- (id)dictionaryRepresentation;
- (id)valueForColumnIndex:(unsigned long long)arg1;
- (void)getBlobBytes:(const void **)arg1 outLength:(int *)arg2 forColumnIndex:(unsigned long long)arg3;
- (id)numberForColumnIndex:(unsigned long long)arg1;
- (id)stringForColumnIndex:(unsigned long long)arg1;
- (const char *)cStringForColumnIndex:(unsigned long long)arg1;
- (long long)int64ForColumnIndex:(unsigned long long)arg1;
- (int)intForColumnIndex:(unsigned long long)arg1;
- (double)doubleForColumnIndex:(unsigned long long)arg1;
- (id)dataForColumnIndex:(unsigned long long)arg1;
- (unsigned long long)columnCount;
- (id)initWithParentResult:(id)arg1;
- (id)initWithArray:(id)arg1;

@end

@interface ML3DatabaseColumn : NSObject
{
    NSString *_name;
    unsigned long long _datatype;
    unsigned long long _columnConstraints;
    id _defaultValue;
}

+ (id)columnWithName:(id)arg1 datatype:(unsigned long long)arg2 constraints:(unsigned long long)arg3 defaultValue:(id)arg4;
@property(readonly, nonatomic) id defaultValue; // @synthesize defaultValue=_defaultValue;
@property(readonly, nonatomic) unsigned long long columnConstraints; // @synthesize columnConstraints=_columnConstraints;
@property(readonly, nonatomic) unsigned long long datatype; // @synthesize datatype=_datatype;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)_columnDefinitionSQL;
- (id)description;
- (id)initWithName:(id)arg1 datatype:(unsigned long long)arg2 constraints:(unsigned long long)arg3 defaultValue:(id)arg4;

@end

@interface ML3DatabaseConnection : NSObject
{
    struct sqlite3 *_sqlitedb;
    _Bool _isOpen;
    ML3DatabaseStatementCache *_statementCache;
    unsigned long long _statementsSinceLastCheckpoint;
    unsigned int _transactionLevel;
    _Bool _nestedTransactionWantsToRollback;
    NSMutableArray *_enqueuedTransactionCommitBlocks;
    ML3DatabaseConnectionPool *_owningPool;
    NSMutableArray *_registeredFunctions;
    NSMutableArray *_registeredModules;
    int _profilingLevel;
    NSString *_lastTracedStatement;
    int _willDeleteDatabaseNotifyToken;
    _Bool _isReadOnly;
    _Bool _automaticCheckpointingEnabled;
    id <ML3DatabaseConnectionDelegate> _connectionDelegate;
    NSString *_databasePath;
    unsigned long long _journalingMode;
    unsigned long long _protectionLevel;
    NSUUID *_currentTransactionID;
    NSUUID *_uniqueIdentifier;
    const void *_iTunesExtensions;
    unsigned long long _checkpointStatementThreshold;
}

@property(nonatomic) unsigned long long checkpointStatementThreshold; // @synthesize checkpointStatementThreshold=_checkpointStatementThreshold;
@property(nonatomic) _Bool automaticCheckpointingEnabled; // @synthesize automaticCheckpointingEnabled=_automaticCheckpointingEnabled;
@property(nonatomic) const void *iTunesExtensions; // @synthesize iTunesExtensions=_iTunesExtensions;
@property(readonly, nonatomic) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly, nonatomic) NSUUID *currentTransactionID; // @synthesize currentTransactionID=_currentTransactionID;
@property(nonatomic) unsigned long long protectionLevel; // @synthesize protectionLevel=_protectionLevel;
@property(nonatomic) unsigned long long journalingMode; // @synthesize journalingMode=_journalingMode;
@property(nonatomic, setter=setReadOnly:) _Bool isReadOnly; // @synthesize isReadOnly=_isReadOnly;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) __weak id <ML3DatabaseConnectionDelegate> connectionDelegate; // @synthesize connectionDelegate=_connectionDelegate;
- (void).cxx_destruct;
- (void)_handleDatabaseProfileStatement:(const char *)arg1 executionTimeNS:(unsigned long long)arg2;
- (void)_handleDatabaseTraceStatement:(const char *)arg1;
- (_Bool)_handleZombieSQLiteConnection:(struct sqlite3 *)arg1;
- (void)_executeTransactionCommitBlocks:(_Bool)arg1;
- (void)_resetUnfinalizedStatements;
- (void)_finalizeAllStatements;
- (_Bool)_isSharedMediaLibraryDatabase;
- (void)_updateProfilingLevel;
- (void)_logCurrentError;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;
- (void)_createDatabaseFileIfNonexistent;
- (void)_createDatabaseDirectoryIfNonexistent;
- (_Bool)_databaseFilesAreWritable;
- (_Bool)_databaseFileExists;
- (id)_registeredModuleNamed:(id)arg1;
- (_Bool)_validatePreparedStatement:(id)arg1 error:(id *)arg2;
- (id)_shortDescription;
- (_Bool)_internalEndTransactionAndCommit:(_Bool)arg1;
- (_Bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1;
- (_Bool)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (_Bool)_executeStatement:(id)arg1 withError:(id *)arg2;
- (id)_prepareStatement:(id)arg1 error:(id *)arg2;
- (void)_setTransactionLevel:(unsigned long long)arg1;
- (unsigned long long)_transactionLevel;
- (id)_databaseFilePaths;
- (_Bool)_handleBusyLockWithNumberOfRetries:(int)arg1;
- (void)_handleDatabaseCorruption;
- (void)_ensureConnectionIsOpen;
- (struct sqlite3 *)_sqliteHandle;
- (void)_setOwningPool:(id)arg1;
- (id)_owningPool;
- (int)checkpointDatabase;
- (_Bool)deleteDatabase;
- (id)sqliteError;
- (long long)lastInsertionRowID;
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(_Bool)arg4;
- (_Bool)registerModuleName:(id)arg1 moduleMethods:(struct sqlite3_module *)arg2;
- (_Bool)registerModule:(id)arg1;
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4;
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3;
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(CDUnknownBlockType)arg3;
- (void)enqueueBlockForTransactionCommit:(CDUnknownBlockType)arg1;
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1 usingBehaviorType:(unsigned long long)arg2;
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)popToRootTransactionAndCommit:(_Bool)arg1;
- (_Bool)popTransactionAndCommit:(_Bool)arg1;
- (_Bool)pushTransactionUsingBehaviorType:(unsigned long long)arg1;
- (_Bool)pushTransaction;
@property(readonly, nonatomic) _Bool transactionMarkedForRollBack;
@property(readonly, nonatomic) _Bool isInTransaction;
- (_Bool)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;
- (_Bool)executeUpdate:(id)arg1;
- (_Bool)tableExists:(id)arg1;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;
- (id)executeQuery:(id)arg1;
- (_Bool)databasePathExists;
- (void)flush;
- (_Bool)close;
- (_Bool)_openWithFlags:(int)arg1;
- (_Bool)open;
- (void)setCurrentTransactionID:(id)arg1;
@property(nonatomic) int profilingLevel;
@property(readonly, nonatomic) _Bool isOpen;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithDatabasePath:(id)arg1;
- (id)init;

@end

@interface ML3DatabaseConnectionPool : NSObject
{
    _ML3DatabaseConnectionSubPool *_readersSubPool;
    _ML3DatabaseConnectionSubPool *_writersSubPool;
    NSMutableDictionary *_identifiersConnectionsMap;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_semaphore> *_lockedSemaphore;
    NSUUID *_poolStorageKey;
    int _connectionsProfilingLevel;
    _Bool _useDistantWriterConnections;
    _Bool _waitingForUnlock;
    _Bool _locked;
    NSString *_databasePath;
    id <ML3DatabaseConnectionPoolDelegate> _delegate;
    unsigned long long _maxReaders;
    unsigned long long _maxWriters;
    unsigned long long _connectionsJournalingMode;
}

@property(readonly, nonatomic, getter=isLocked) _Bool locked; // @synthesize locked=_locked;
@property(nonatomic) unsigned long long connectionsJournalingMode; // @synthesize connectionsJournalingMode=_connectionsJournalingMode;
@property(readonly, nonatomic) unsigned long long maxWriters; // @synthesize maxWriters=_maxWriters;
@property(readonly, nonatomic) unsigned long long maxReaders; // @synthesize maxReaders=_maxReaders;
@property(nonatomic) __weak id <ML3DatabaseConnectionPoolDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
- (void).cxx_destruct;
- (void)_setLocalConnection:(id)arg1 forThread:(id)arg2;
- (id)_localConnectionForThread:(id)arg1;
- (void)_setConnection:(id)arg1 forIdentifier:(id)arg2;
- (id)_connectionForIdentifier:(id)arg1;
- (void)_closeAllConnectionsAndWaitForBusyConnections:(_Bool)arg1;
- (void)unlock;
- (void)lock;
- (void)closeAllConnections;
- (void)checkInConnection:(id)arg1;
- (id)_connectionForWriting:(_Bool)arg1 useThreadConnection:(_Bool)arg2;
@property(readonly) _Bool isCurrentThreadConnectionInTransaction;
- (id)writerConnection;
- (id)readerConnection;
@property(nonatomic) _Bool useDistantWriterConnections;
@property(nonatomic) int connectionsProfilingLevel;
- (void)dealloc;
- (id)init;
- (id)initWithDatabasePath:(id)arg1 maxReaders:(unsigned long long)arg2 maxWriters:(unsigned long long)arg3;
- (id)initWithDatabasePath:(id)arg1 maxReaders:(unsigned long long)arg2;

@end

@interface ML3DatabaseDistantConnection : ML3DatabaseConnection
{
    MLMediaLibraryService *_mediaLibraryService;
    NSUUID *_currentTransactionID;
    _Bool _connectionOpen;
    id <ML3DatabaseDistantConnectionDelegate> _distantDelegate;
}

@property(nonatomic) __weak id <ML3DatabaseDistantConnectionDelegate> distantDelegate; // @synthesize distantDelegate=_distantDelegate;
- (void).cxx_destruct;
- (void)_serviceTerminatedTransactionNotification:(id)arg1;
- (_Bool)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (_Bool)_internalEndTransactionAndCommit:(_Bool)arg1;
- (_Bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1 isRetry:(_Bool)arg2;
- (_Bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1;
- (int)checkpointDatabase;
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(_Bool)arg4;
- (_Bool)registerModule:(id)arg1;
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4;
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(CDUnknownBlockType)arg3;
- (_Bool)close;
- (_Bool)_openWithFlags:(int)arg1;
- (id)currentTransactionID;
- (void)setProfilingLevel:(int)arg1;
- (void)setReadOnly:(_Bool)arg1;
- (_Bool)isReadOnly;
- (_Bool)isOpen;
- (_Bool)shouldCacheStatements;
- (struct sqlite3 *)_sqliteHandle;
- (void)dealloc;
- (id)initWithDatabasePath:(id)arg1;

@end

@interface ML3DatabaseResult : NSObject
{
    ML3DatabaseStatement *_statement;
    NSDictionary *_columnNameIndexMap;
    unsigned long long _limitIndex;
    NSString *_limitProperty;
    long long _limitValue;
}

@property(nonatomic) long long limitValue; // @synthesize limitValue=_limitValue;
@property(copy, nonatomic) NSString *limitProperty; // @synthesize limitProperty=_limitProperty;
- (void).cxx_destruct;
- (id)_statement;
- (id)stringValueForFirstRowAndColumn;
- (long long)int64ValueForFirstRowAndColumn;
- (id)objectForFirstRowAndColumn;
- (_Bool)hasAtLeastOneRow;
- (id)rows;
- (void)enumerateRowsWithBlock:(CDUnknownBlockType)arg1;
- (id)columnNameIndexMap;
- (unsigned long long)indexForColumnName:(id)arg1;
- (void)setLimitProperty:(id)arg1 limitValue:(long long)arg2;
- (id)initWithStatement:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface ML3DatabaseDistantResult : ML3DatabaseResult
{
    NSArray *_cachedRows;
    ML3DatabaseDistantConnection *_distantConnection;
    NSString *_sql;
    NSArray *_parameters;
}

@property(readonly, nonatomic) NSArray *parameters; // @synthesize parameters=_parameters;
@property(readonly, nonatomic) NSString *sql; // @synthesize sql=_sql;
@property(readonly, nonatomic) ML3DatabaseDistantConnection *distantConnection; // @synthesize distantConnection=_distantConnection;
- (void).cxx_destruct;
- (_Bool)_fetchRowsIfEmpty;
- (void)_localEnumerateRowsWithBlock:(CDUnknownBlockType)arg1;
- (void)_remoteEnumerateRowsWithBlock:(CDUnknownBlockType)arg1;
- (void)enumerateRowsWithBlock:(CDUnknownBlockType)arg1;
- (id)columnNameIndexMap;
- (unsigned long long)indexForColumnName:(id)arg1;
- (id)description;
- (id)init;
- (id)initWithStatement:(id)arg1;
- (id)initWithDistantConnection:(id)arg1 sql:(id)arg2 parameters:(id)arg3;

@end

@interface MLException : NSException
{
}

- (void)raise;

@end

__attribute__((visibility("hidden")))
@interface ML3DatabaseException : MLException
{
    NSError *_sqliteError;
}

+ (id)databaseExceptionWithReason:(id)arg1 sqliteError:(id)arg2;
@property(readonly, nonatomic) NSError *sqliteError; // @synthesize sqliteError=_sqliteError;
- (void).cxx_destruct;
- (void)_SQLITE_DONE;
- (void)_SQLITE_ROW;
- (void)_SQLITE_NOTADB;
- (void)_SQLITE_RANGE;
- (void)_SQLITE_FORMAT;
- (void)_SQLITE_AUTH;
- (void)_SQLITE_NOLFS;
- (void)_SQLITE_MISUSE;
- (void)_SQLITE_MISMATCH;
- (void)_SQLITE_CONSTRAINT;
- (void)_SQLITE_TOOBIG;
- (void)_SQLITE_SCHEMA;
- (void)_SQLITE_EMPTY;
- (void)_SQLITE_PROTOCOL;
- (void)_SQLITE_CANTOPEN;
- (void)_SQLITE_FULL;
- (void)_SQLITE_NOTFOUND;
- (void)_SQLITE_CORRUPT;
- (void)_SQLITE_IOERR;
- (void)_SQLITE_INTERRUPT;
- (void)_SQLITE_READONLY;
- (void)_SQLITE_NOMEM;
- (void)_SQLITE_LOCKED;
- (void)_SQLITE_BUSY;
- (void)_SQLITE_ABORT;
- (void)_SQLITE_PERM;
- (void)_SQLITE_INTERNAL;
- (void)_SQLITE_ERROR;
- (void)raise;
- (id)init;
- (id)initWithReason:(id)arg1 sqliteError:(id)arg2;

@end

@interface ML3DatabaseForeignKeyConstraint : NSObject
{
    ML3DatabaseTable *_foreignTable;
    NSArray *_localColumns;
    NSArray *_foreignColumns;
}

@property(readonly, nonatomic) NSArray *foreignColumns; // @synthesize foreignColumns=_foreignColumns;
@property(readonly, nonatomic) NSArray *localColumns; // @synthesize localColumns=_localColumns;
@property(readonly, nonatomic) ML3DatabaseTable *foreignTable; // @synthesize foreignTable=_foreignTable;
- (void).cxx_destruct;
- (id)_foreignKeyClauseSQL;
- (id)initWithForeignTable:(id)arg1 localColumns:(id)arg2 foreignColumns:(id)arg3;

@end

@interface ML3DatabaseFunction : NSObject
{
    int _argumentCount;
    NSString *_name;
}

@property(nonatomic) int argumentCount; // @synthesize argumentCount=_argumentCount;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (_Bool)registerWithConnection:(id)arg1;
- (id)initWithName:(id)arg1 argumentCount:(int)arg2;

@end

@interface ML3DatabaseFunctionBlock : ML3DatabaseFunction
{
    CDUnknownBlockType _block;
}

@property(copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;
- (_Bool)registerWithConnection:(id)arg1;

@end

@interface ML3DatabaseFunctionPointer : ML3DatabaseFunction
{
    CDUnknownFunctionPointerType _functionPointer;
    void *_userData;
}

@property(nonatomic) void *userData; // @synthesize userData=_userData;
@property(nonatomic) CDUnknownFunctionPointerType functionPointer; // @synthesize functionPointer=_functionPointer;
- (_Bool)registerWithConnection:(id)arg1;

@end

@interface ML3DatabaseMetadata : ML3Entity
{
}

+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)defaultOrderingTerms;
+ (id)databaseTable;
+ (void)initialize;

@end

@interface ML3DatabaseModule : NSObject
{
    NSString *_name;
    struct sqlite3_module *_moduleMethods;
    id <ML3DatabaseModuleContext> _context;
}

@property(retain, nonatomic) id <ML3DatabaseModuleContext> context; // @synthesize context=_context;
@property(readonly, nonatomic) struct sqlite3_module *moduleMethods; // @synthesize moduleMethods=_moduleMethods;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)description;
- (id)initWithName:(id)arg1 moduleMethods:(struct sqlite3_module *)arg2;

@end

@interface ML3DatabaseNaturalStatement : NSObject <NSSecureCoding>
{
    NSString *_sql;
    NSMutableArray *_parameters;
}

+ (_Bool)supportsSecureCoding;
+ (id)naturalStatementWithSQL:(id)arg1 parameters:(id)arg2;
@property(retain, nonatomic) NSMutableArray *parameters; // @synthesize parameters=_parameters;
@property(copy, nonatomic) NSString *sql; // @synthesize sql=_sql;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)setParameter:(id)arg1 forPosition:(unsigned long long)arg2;
- (id)initWithSQL:(id)arg1 parameters:(id)arg2;

@end

@interface ML3DatabaseStatement : NSObject
{
    NSString *_sql;
    _Bool _clearBindingsAfterRunning;
    _Bool _isExecuting;
    ML3DatabaseConnection *_connection;
    struct sqlite3_stmt *_sqliteStatement;
}

@property(nonatomic) _Bool isExecuting; // @synthesize isExecuting=_isExecuting;
@property(nonatomic) _Bool clearBindingsAfterRunning; // @synthesize clearBindingsAfterRunning=_clearBindingsAfterRunning;
@property(readonly, nonatomic) struct sqlite3_stmt *sqliteStatement; // @synthesize sqliteStatement=_sqliteStatement;
@property(readonly, nonatomic) ML3DatabaseConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (void)bindValuesInArray:(id)arg1;
- (void)bindValuesForParameterNames:(id)arg1;
- (void)bindValue:(id)arg1 forParameterAtPosition:(int)arg2;
- (void)bindUTF8StringNoCopy:(const char *)arg1 length:(int)arg2 forParameterAtPosition:(int)arg3;
- (void)bindUTF8StringNoCopy:(const char *)arg1 forParameterAtPosition:(int)arg2;
- (void)bindUTF8String:(const char *)arg1 forParameterAtPosition:(int)arg2;
- (void)bindBytesNoCopy:(const void *)arg1 length:(int)arg2 forParameterAtPosition:(int)arg3;
- (void)bindBytes:(const void *)arg1 length:(int)arg2 forParameterAtPosition:(int)arg3;
- (void)bindNullForParameterAtPosition:(int)arg1;
- (void)bindDouble:(double)arg1 forParameterAtPosition:(int)arg2;
- (void)bindInt64:(long long)arg1 forParameterAtPosition:(int)arg2;
- (void)bindInt:(int)arg1 forParameterAtPosition:(int)arg2;
- (int)clearBindings;
- (_Bool)isBusy;
- (_Bool)isReadOnly;
- (int)finalizeStatement;
- (int)reset;
- (int)step;
@property(readonly, nonatomic) NSString *sql;
- (id)description;
- (void)dealloc;
- (id)initWithSQLiteStatement:(struct sqlite3_stmt *)arg1 SQL:(id)arg2 connection:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface ML3DatabaseStatementCache : NSObject
{
    NSMutableDictionary *_statementsDictionary;
    ML3StatementCacheList *_nodeList;
    unsigned long long _cacheSize;
}

@property(readonly, nonatomic) unsigned long long cacheSize; // @synthesize cacheSize=_cacheSize;
- (void).cxx_destruct;
- (void)clearCache;
- (void)cacheStatement:(id)arg1;
- (id)allStatements;
- (id)cachedStatementForSQL:(id)arg1;
- (void)dealloc;
- (id)initWithCacheSize:(unsigned long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface ML3DatabaseStatementRenderer : NSObject
{
}

+ (id)defaultRenderer;
- (id)statementWithPrefix:(id)arg1 inParameterCount:(unsigned long long)arg2;
- (id)insertStatementWithOptions:(id)arg1;
- (id)insertStatementUsingDefaultValuesForTableName:(id)arg1;
- (id)insertStatementForTableName:(id)arg1 columnNames:(id)arg2;
- (id)savepointReleaseStatementWithName:(id)arg1;
- (id)savepointStatementWithName:(id)arg1;
- (id)rollbackTranscationStatementToSavepointName:(id)arg1;
- (id)rollbackTranscationStatement;
- (id)commitTransactionStatement;
- (id)beginTransactionStatementWithBehaviorType:(unsigned long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface ML3DatabaseValidationClient : NSObject
{
    NSMutableDictionary *_validatableDatabases;
    NSObject<OS_dispatch_queue> *_serialQueue;
}

+ (id)sharedClient;
- (void).cxx_destruct;
- (_Bool)isValidatingDatabaseForPath:(id)arg1;
- (_Bool)_validateDatabaseForPath:(id)arg1 usingLibrary:(id)arg2;
- (id)_validatableDatabaseForPath:(id)arg1;
- (_Bool)validateDatabaseForConnection:(id)arg1;
- (_Bool)validateDatabaseForLibrary:(id)arg1;
- (_Bool)validateDatabaseAtPath:(id)arg1;
- (id)init;

@end

@interface ML3EntityReplacer : NSObject
{
    struct __CFDictionary *_propertyToIndexPair;
    NSMutableArray *_naturalStatements;
    ML3DatabaseConnection *_connection;
    ML3MusicLibrary *_library;
}

- (void).cxx_destruct;
- (void)close;
- (void)clearBindings;
- (void)bindPersistentID:(long long)arg1;
@property(readonly, nonatomic, getter=isOpen) _Bool open;
- (_Bool)perform;
- (void)bindValue:(id)arg1 forProperty:(id)arg2;
- (void)bindDouble:(double)arg1 forProperty:(id)arg2;
- (void)bindInt:(int)arg1 forProperty:(id)arg2;
- (void)bindNullForProperty:(id)arg1;
- (id)initWithEntityClass:(Class)arg1 properties:(id)arg2 library:(id)arg3;
- (void)dealloc;

@end

@interface ML3Genre : ML3Collection
{
}

+ (id)artworkCacheIDProperty;
+ (id)trackForeignPersistentID;
+ (id)propertiesForGroupingKey;
+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;
+ (_Bool)propertyIsCountProperty:(id)arg1;
+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)defaultOrderingTerms;
+ (id)joinClausesForProperty:(id)arg1;
+ (long long)revisionTrackingCode;
+ (id)databaseTable;
+ (void)initialize;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (void)updateTrackValues:(id)arg1;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

__attribute__((visibility("hidden")))
@interface ML3PersistentIDGenerator : NSObject
{
    ML3DatabaseConnection *_connection;
    long long _currentPersistentID;
    long long _nextUsedPersistentID;
}

- (void).cxx_destruct;
- (void)_calculateNewRun;
- (long long)nextPersistentID;
- (id)initWithDatabaseConnection:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface ML3ImportPersistentIDGenerator : ML3PersistentIDGenerator
{
    NSMutableDictionary *_pregeneratedIdMappings;
}

- (void).cxx_destruct;
- (void)removePersistentIDFromIdMapping:(long long)arg1;
- (long long)nextPersistentIDForImportItem:(shared_ptr_de333b55)arg1;
- (void)addIdMapping:(id)arg1 forProperty:(unsigned int)arg2;
- (id)initWithDatabaseConnection:(id)arg1;

@end

@interface ML3ItemArtworkTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemExtraTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemPlaybackTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemScreenshotTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemSearchTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemStatsTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemStoreTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3ItemVideoTable : ML3DatabaseTable
{
    NSArray *_columns;
}

- (void).cxx_destruct;
- (id)columns;
- (id)name;

@end

@interface ML3LibraryManager : NSObject
{
    ML3MusicLibrary *_currentLibrary;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)_switchToLibrary:(id)arg1;
- (void)_teardownNotifications;
- (void)_setupNotifications;
- (void)_deviceSharedLibraryDidChangeDistributedNotification:(id)arg1;
- (id)pathToLibraryForAccount:(id)arg1;
- (id)libraryForAccount:(id)arg1;
@property(retain, nonatomic) ML3MusicLibrary *currentLibrary;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface ML3LibraryNotificationManager : NSObject <MSVDistributedNotificationObserverDelegate>
{
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSString *_libraryPath;
    NSMutableArray *_notificationObservers;
    NSMutableOrderedSet *_queuedLocalNotifications;
    NSMutableOrderedSet *_queuedDistributedNotificationNames;
    ML3MusicLibrary *_library;
}

@property(readonly, nonatomic) __weak ML3MusicLibrary *library; // @synthesize library=_library;
- (void).cxx_destruct;
- (void)_postEnqueuedDistributedNotifications;
- (void)_postEnqueuedLocalNotifications;
- (id)_observerForDistributedName:(id)arg1;
- (id)_observerForLocalName:(id)arg1;
- (_Bool)observerShouldForwardDistributedNotification:(id)arg1;
- (void)enqueueDistributedNotificationNamed:(id)arg1;
- (void)enqueueLocalNotificationNamed:(id)arg1;
- (void)enqueueLocalNotification:(id)arg1;
- (void)removeObserverWithLocalName:(id)arg1;
- (void)removeObserverWithDistributedName:(id)arg1;
- (void)addObserverForDistributedName:(id)arg1 localName:(id)arg2;
- (id)initWithLibrary:(id)arg1 distributedAndLocalNames:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface ML3MatcherAuxData : NSObject
{
    CPSearchMatcher *_searchMatcher;
    char *_searchUTF8String;
}

- (void).cxx_destruct;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface ML3MigrationAddedColumn : NSObject
{
    NSString *_columnName;
    NSString *_foreignTableName;
    NSString *_foreignColumnName;
    NSString *_joinColumnName;
}

@property(readonly, nonatomic) NSString *joinColumnName; // @synthesize joinColumnName=_joinColumnName;
@property(readonly, nonatomic) NSString *foreignColumnName; // @synthesize foreignColumnName=_foreignColumnName;
@property(readonly, nonatomic) NSString *foreignTableName; // @synthesize foreignTableName=_foreignTableName;
@property(readonly, nonatomic) NSString *columnName; // @synthesize columnName=_columnName;
- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool shouldImportFromForeignTable;
- (id)initWithName:(id)arg1 foreignTable:(id)arg2 foreignColumn:(id)arg3 joinColumn:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface ML3MigrationDirectives : NSObject
{
    _Bool _needsToRecreateIndexes;
    _Bool _needsToRecreateTriggers;
    _Bool _needsToRemoveLocationsForItemsMissingAssets;
    _Bool _needsToReloadStoreBookmarkMetadataIdentifiers;
    _Bool _needsToReloadContainerMediaTypes;
    _Bool _needsAnalyze;
    _Bool _needsToAutogenerateArtworkVariants;
    int _originalUserVersion;
    int _currentUserVersion;
}

@property(nonatomic) _Bool needsToAutogenerateArtworkVariants; // @synthesize needsToAutogenerateArtworkVariants=_needsToAutogenerateArtworkVariants;
@property(nonatomic) _Bool needsAnalyze; // @synthesize needsAnalyze=_needsAnalyze;
@property(nonatomic) _Bool needsToReloadContainerMediaTypes; // @synthesize needsToReloadContainerMediaTypes=_needsToReloadContainerMediaTypes;
@property(nonatomic) _Bool needsToReloadStoreBookmarkMetadataIdentifiers; // @synthesize needsToReloadStoreBookmarkMetadataIdentifiers=_needsToReloadStoreBookmarkMetadataIdentifiers;
@property(nonatomic) _Bool needsToRemoveLocationsForItemsMissingAssets; // @synthesize needsToRemoveLocationsForItemsMissingAssets=_needsToRemoveLocationsForItemsMissingAssets;
@property(nonatomic) _Bool needsToRecreateTriggers; // @synthesize needsToRecreateTriggers=_needsToRecreateTriggers;
@property(nonatomic) _Bool needsToRecreateIndexes; // @synthesize needsToRecreateIndexes=_needsToRecreateIndexes;
@property(nonatomic) int currentUserVersion; // @synthesize currentUserVersion=_currentUserVersion;
@property(readonly, nonatomic) int originalUserVersion; // @synthesize originalUserVersion=_originalUserVersion;
- (id)initWithOriginalUserVersion:(int)arg1;

@end

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate>
{
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSString *_libraryUID;
    ML3AccountCacheDatabase *_accountCacheDatabase;
    ML3LibraryNotificationManager *_notificationManager;
    struct iPhoneSortKeyBuilder *_sortKeyBuilder;
    NSMutableDictionary *_optimizedLibraryEntityFilterPredicatesByEntityClass;
    NSMutableDictionary *_optimizedLibraryContainerFilterPredicatesByContainerClass;
    _Bool _isHomeSharingLibraryLoaded;
    _Bool _isHomeSharingLibrary;
    id <ML3MusicLibraryDelegate> _delegate;
    ML3DatabaseConnectionPool *_connectionPool;
    NSString *_databasePath;
    NSArray *_libraryEntityFilterPredicates;
    NSArray *_libraryContainerFilterPredicates;
}

+ (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1;
+ (id)_notInKeepLocalCollectionPredicate;
+ (_Bool)updateTrackIntegrityOnConnection:(id)arg1;
+ (void)enumerateSortMapTablesUsingBlock:(CDUnknownBlockType)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)sectionIndexTitles;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (_Bool)deviceSupportsMultipleLibraries;
+ (void)enableAutomaticDatabaseValidation;
+ (void)disableAutomaticDatabaseValidation;
+ (void)disableSharedLibrary;
+ (id)sharedLibraryDatabasePath;
+ (id)sharedLibrary;
+ (_Bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;
+ (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;
+ (_Bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;
+ (_Bool)updateSortMapOnConnection:(id)arg1;
+ (_Bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (_Bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (_Bool)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (int)userVersionUsingConnection:(id)arg1;
+ (id)itemIndexSchemaSQL;
+ (id)indexSchemaSQL;
+ (id)allTables;
+ (id)allTriggersSQL;
+ (id)allPragmaSQL;
+ (id)allSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)sortMapNewSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)storeLinkSchemaSQL;
+ (_Bool)defaultExcludeFromShuffleForMediaType:(unsigned int)arg1;
+ (_Bool)defaultRememberBookmarkTimeForMediaType:(unsigned int)arg1;
+ (id)pathForBaseLocationPath:(long long)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 isFolder:(_Bool *)arg4;
+ (id)controlDirectoryPathWithBasePath:(id)arg1;
+ (id)mediaFolderRelativePath:(id)arg1;
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;
+ (id)mediaFolderPath;
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;
@property(retain, nonatomic) NSArray *libraryContainerFilterPredicates; // @synthesize libraryContainerFilterPredicates=_libraryContainerFilterPredicates;
@property(retain, nonatomic) NSArray *libraryEntityFilterPredicates; // @synthesize libraryEntityFilterPredicates=_libraryEntityFilterPredicates;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) ML3DatabaseConnectionPool *connectionPool; // @synthesize connectionPool=_connectionPool;
@property(nonatomic) __weak id <ML3MusicLibraryDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_updateDatabaseConnectionsProfilingLevel;
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;
- (void)_loggingSettingsDidChangeNotification:(id)arg1;
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 respectSongMattress:(_Bool)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)_allKeepLocalPlaylistTracks;
- (_Bool)_clearAllRowsFromTables:(id)arg1;
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;
- (_Bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3;
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;
- (void)updateTrackIntegrity;
- (void)deletePresignedValidity;
- (_Bool)verifyPresignedValidity;
- (_Bool)hasPresignedValidity;
- (void)migratePresignedValidity;
- (_Bool)deleteDatabaseProperty:(id)arg1;
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (id)valueForDatabaseProperty:(id)arg1;
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;
- (void)removeOrphanedTracks;
- (void)removeTombstonesForDeletedItems;
- (id)fetchArtistHeroArtworkForPersistentID:(long long)arg1 artistType:(long long)arg2;
- (id)fetchChapterArtworkForPersistentID:(long long)arg1 retrievalTime:(double)arg2;
- (id)fetchScreenshotArtworkForPersistentID:(long long)arg1;
- (id)fetchItemArtworkForPersistentID:(long long)arg1;
- (_Bool)hasArtistHeroArtworkForPersistentID:(long long)arg1 artistType:(long long)arg2;
- (_Bool)hasChapterArtworkForPersistentID:(long long)arg1 retrievalTime:(double)arg2;
- (_Bool)hasScreenshotArtworkForPersistentID:(long long)arg1;
- (_Bool)hasItemArtworkForPersistentID:(long long)arg1;
- (_Bool)deleteOrphanedArtworkWithSearchOptions:(long long)arg1 usingConnection:(id)arg2;
- (_Bool)deleteOrphanedArtworkWithSearchOptions:(long long)arg1;
- (_Bool)deleteArtworkWithToken:(id)arg1;
- (_Bool)deleteArtworkWithSourceType:(long long)arg1;
- (_Bool)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (_Bool)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;
- (_Bool)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;
- (void)autogenerateSupportedSizesForAllOriginalArtworkPostMigrationWithConnection:(id)arg1;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(_Bool)arg3;
- (void)purgeCloudAssets;
- (long long)getDatabaseFileFreeSpace;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1 respectSongMattress:(_Bool)arg2;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;
@property(readonly, nonatomic) long long autoFilledTracksTotalSize;
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;
- (_Bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 usingBlock:(CDUnknownBlockType)arg5;
- (_Bool)updateSortMap;
- (long long)addStringToSortMap:(id)arg1;
- (_Bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;
- (_Bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)savePlaylists;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadata;
- (void)notifyDisplayValuesPropertyDidChange;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyNonContentsPropertyDidChange;
- (void)notifyContentsDidChange;
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (id)groupingKeysForStrings:(id)arg1;
- (id)groupingKeyForString:(id)arg1;
- (void)accessSortKeyBuilder:(CDUnknownBlockType)arg1;
- (_Bool)populateStaticItemsOfDynamicContainers;
- (id)accountCacheDatabase;
- (_Bool)clearAllGeniusData;
- (_Bool)emptyAllTables;
- (_Bool)dropItemIndexes;
- (_Bool)createIndexes;
- (int)currentDatabaseVersion;
- (_Bool)validateDatabase;
- (_Bool)automaticDatabaseValidationDisabled;
- (_Bool)isCurrentThreadInTransaction;
- (void)performReadOnlyDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;
- (void)performDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;
- (void)databaseConnectionAllowingWrites:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)reconnectToDatabase;
- (void)checkInDatabaseConnection:(id)arg1;
- (id)checkoutWriterConnection;
- (id)checkoutReaderConnection;
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(_Bool)arg2;
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;
- (void)connectionWillCloseDatabase:(id)arg1;
- (void)connectionDidOpenDatabase:(id)arg1;
- (void)connectionWillOpenDatabase:(id)arg1;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;
@property(readonly, nonatomic) _Bool mediaRestrictionEnabled;
@property(readonly, nonatomic) NSArray *preferredSubtitleTracks;
@property(readonly, nonatomic) NSArray *preferredAudioTracks;
@property(readonly, nonatomic) NSArray *localizedSectionIndexTitles;
@property(readonly, nonatomic) ML3DatabaseMetadata *databaseInfo;
@property(readonly, nonatomic) ML3Container *currentDevicePurchasesPlaylist;
- (void)setLibraryUID:(id)arg1;
@property(readonly, nonatomic) NSString *libraryUID;
@property(nonatomic) long long syncGenerationID;
@property(readonly, nonatomic) long long currentContentRevision;
@property(readonly, nonatomic) long long currentRevision;
@property(readonly, nonatomic) long long persistentID;
@property(nonatomic) _Bool isHomeSharingLibrary;
- (void)dealloc;
- (id)initWithPath:(id)arg1 readOnly:(_Bool)arg2 populateUnitTestTablesBlock:(CDUnknownBlockType)arg3;
- (id)initWithPath:(id)arg1;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(_Bool)arg5;
- (_Bool)_validateDatabaseUsingConnection:(id)arg1;
- (_Bool)coerceValidDatabase;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(_Bool *)arg2;
- (CDStruct_912cb5d2)nameOrderForString:(id)arg1;
- (id)genreForGenre:(id)arg1;
- (id)composerForComposerName:(id)arg1;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (_Bool)updateSystemPlaylistNamesForCurrentLanguage;
- (_Bool)handlePreprocessDatabase;
- (_Bool)handleSchemaUpgrade;
- (_Bool)handleDatabaseValidation;
- (_Bool)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;
- (id)uppService;
@property(readonly, nonatomic) _Bool supportsUbiquitousPlaybackPositions;
- (_Bool)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2 usingConnection:(id)arg3;
- (_Bool)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2;
- (_Bool)removeSource:(int)arg1 usingConnection:(id)arg2;
- (_Bool)removeSource:(int)arg1;
- (_Bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface ML3MusicLibrary_SortMapEntry : NSObject
{
    long long _nameOrder;
    NSString *_name;
    NSData *_sortKey;
    int _nameSection;
    _Bool _dirty;
}

- (void).cxx_destruct;
- (id)description;
- (id)initWithName:(id)arg1 nameSection:(int)arg2 sortKey:(id)arg3;
- (id)initWithName:(id)arg1 nameSection:(int)arg2 sortKey:(id)arg3 nameOrder:(long long)arg4 dirtyFlag:(_Bool)arg5;

@end

@interface ML3UnaryPredicate : ML3Predicate
{
    ML3Predicate *_predicate;
}

+ (id)predicateWithPredicate:(id)arg1;
@property(retain, nonatomic) ML3Predicate *predicate; // @synthesize predicate=_predicate;
- (void).cxx_destruct;
- (id)databaseStatementParameters;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (id)predicateOptimizedForEntityClass:(Class)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPredicate:(id)arg1;

@end

@interface ML3NegationPredicate : ML3UnaryPredicate
{
}

- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)predicateOptimizedForEntityClass:(Class)arg1;
- (id)description;

@end

@interface ML3OrderingTerm : NSObject <NSCopying, NSCoding>
{
    int _direction;
    NSString *_property;
    NSString *_collation;
}

+ (id)orderingTermWithProperty:(id)arg1 direction:(int)arg2;
+ (id)orderingTermWithProperty:(id)arg1;
@property(readonly, nonatomic) NSString *collation; // @synthesize collation=_collation;
@property(readonly, nonatomic) int direction; // @synthesize direction=_direction;
@property(readonly, nonatomic) NSString *property; // @synthesize property=_property;
- (void).cxx_destruct;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithProperty:(id)arg1 direction:(int)arg2 collation:(id)arg3;
- (id)initWithProperty:(id)arg1 direction:(int)arg2;
- (id)initWithProperty:(id)arg1;

@end

@interface ML3PersistentIDsPredicate : ML3Predicate
{
    NSArray *_persistentIDs;
    _Bool _shouldContain;
}

+ (id)predicateWithPersistentIDs:(id)arg1 shouldContain:(_Bool)arg2;
+ (id)predicateWithPersistentIDs:(const long long *)arg1 count:(unsigned long long)arg2 shouldContain:(_Bool)arg3;
@property(readonly, nonatomic) _Bool shouldContain; // @synthesize shouldContain=_shouldContain;
- (void).cxx_destruct;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithPersistentIDs:(id)arg1 shouldContain:(_Bool)arg2;

@end

__attribute__((visibility("hidden")))
@interface ML3QueryResultSet_BackingStore : NSObject
{
    vector_c1c297d2 _persistentIDs;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _sections;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)backingStoreByRemovingPersistentIDs:(const unordered_set_f2692727 *)arg1;
- (void)reverseEnumerateSectionsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateSectionsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)containsPersistentIDs:(const unordered_set_f2692727 *)arg1;
- (void)reverseEnumeratePersistentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumeratePersistentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (long long)persistentIDAtIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long count;

@end

__attribute__((visibility("hidden")))
@interface ML3QueryResultSet_MutableBackingStore : ML3QueryResultSet_BackingStore
{
}

@end

@interface ML3QuerySection : NSObject
{
    unsigned long long _sectionIndex;
    struct _NSRange _range;
}

@property(nonatomic) unsigned long long sectionIndex; // @synthesize sectionIndex=_sectionIndex;
@property(nonatomic) struct _NSRange range; // @synthesize range=_range;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithRange:(struct _NSRange)arg1 sectionIndex:(unsigned long long)arg2;

@end

@interface ML3SearchStringPredicate : ML3Predicate
{
    NSArray *_properties;
    NSString *_searchString;
}

+ (id)predicateWithConcatenatedProperties:(id)arg1 searchString:(id)arg2;
@property(copy, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
@property(copy, nonatomic) NSArray *properties; // @synthesize properties=_properties;
- (void).cxx_destruct;
- (_Bool)isDynamicForEntityClass:(Class)arg1;
- (id)databaseStatementParameters;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithConcatenatedProperties:(id)arg1 searchString:(id)arg2;

@end

@interface ML3SortMap : NSObject
{
    ML3DatabaseConnection *_connection;
    ML3MusicLibrary *_library;
    NSMutableDictionary *_nameOrders;
    NSMutableArray *_entries;
    NSData *_minSortKey;
    NSData *_maxSortKey;
    long long _smallestNameDelta;
}

- (void).cxx_destruct;
- (id)nameOrders;
- (_Bool)commitUpdates;
- (id)_sortKeyString:(id)arg1;
- (long long)_sortKeyDistance:(id)arg1 sortKey2:(id)arg2 offset:(unsigned long long)arg3;
- (long long)_maxNameOrderForSortMapEntry:(id)arg1 iPhoneSortKeyBuilder:(struct iPhoneSortKeyBuilder *)arg2;
- (long long)_minNameOrderForSortMapEntry:(id)arg1 iPhoneSortKeyBuilder:(struct iPhoneSortKeyBuilder *)arg2;
- (id)_maxSortKeyForEntry:(id)arg1 iPhoneSortKeyBuilder:(struct iPhoneSortKeyBuilder *)arg2;
- (id)_minSortKeyForEntry:(id)arg1 iPhoneSortKeyBuilder:(struct iPhoneSortKeyBuilder *)arg2;
- (_Bool)_insertSortedNameEntriesIntoSortMap:(id)arg1;
- (id)_sortedNameEntriesToInsertForNames:(id)arg1;
- (_Bool)insertStringsIntoSortMap:(id)arg1 didReSortMap:(_Bool *)arg2;
- (_Bool)loadExistingSortedEntries;
- (id)initWithConnection:(id)arg1 library:(id)arg2;

@end

@interface ML3SpotlightMatchPredicate : ML3Predicate
{
    ML3SpotlightNameCache *_names;
    NSArray *_searchProperties;
    NSString *_searchString;
}

+ (id)predicateWithProperties:(id)arg1 searchString:(id)arg2;
@property(readonly, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
- (id)SQLJoinClausesForClass:(Class)arg1;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (void)dealloc;
- (id)initWithSearchString:(id)arg1 matchingProperties:(id)arg2;
- (id)spotlightPredicate;

@end

__attribute__((visibility("hidden")))
@interface ML3SpotlightMatchingNameCache : NSObject
{
    unordered_set_f2692727 _matchingSet;
    NSString *_matchString;
    _Bool _idle;
    ML3MusicLibrary *_library;
}

+ (void)loadFromLibrary:(id)arg1 namesMatchingString:(id)arg2 cancelHandler:(CDUnknownBlockType)arg3;
+ (void)initialize;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)_initWithLibrary:(id)arg1 matchString:(id)arg2 cancelHandler:(CDUnknownBlockType)arg3;

@end

__attribute__((visibility("hidden")))
@interface ML3SpotlightNameCache : NSObject
{
    struct unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *>>> _map;
    _Bool _idle;
    ML3MusicLibrary *_library;
}

+ (id)copyFromLibrary:(id)arg1 cancelHandler:(CDUnknownBlockType)arg2;
+ (void)initialize;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)_initWithLibrary:(id)arg1 cancelHandler:(CDUnknownBlockType)arg2;

@end

@interface ML3StatementAccumulator : NSObject
{
    MLMediaLibraryService *_xpcService;
    NSObject<OS_dispatch_queue> *_serialQueue;
    unsigned long long _statementThreshold;
    NSMutableArray *_statementQueue;
    NSString *_databasePath;
    ML3DatabaseConnection *_connection;
    NSUUID *_existingTransactionIdentifier;
    unsigned long long _priorityLevel;
}

@property(nonatomic) unsigned long long priorityLevel; // @synthesize priorityLevel=_priorityLevel;
@property(retain, nonatomic) NSUUID *existingTransactionIdentifier; // @synthesize existingTransactionIdentifier=_existingTransactionIdentifier;
@property(readonly, nonatomic) ML3DatabaseConnection *connection; // @synthesize connection=_connection;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) NSMutableArray *statementQueue; // @synthesize statementQueue=_statementQueue;
@property(nonatomic) unsigned long long statementThreshold; // @synthesize statementThreshold=_statementThreshold;
- (void).cxx_destruct;
- (_Bool)_onQueueFlushAndWait:(_Bool)arg1;
- (_Bool)flushAndWait:(_Bool)arg1;
- (_Bool)enqueueStatement:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithConnection:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface ML3StatementCacheList : NSObject
{
    ML3StatementCacheNode *_firstNode;
    ML3StatementCacheNode *_lastNode;
}

@property(readonly, nonatomic) ML3StatementCacheNode *lastNode; // @synthesize lastNode=_lastNode;
@property(readonly, nonatomic) ML3StatementCacheNode *firstNode; // @synthesize firstNode=_firstNode;
- (void).cxx_destruct;
- (void)deleteAllNodes;
- (void)deleteOldestNode;
- (id)oldestNode;
- (void)promoteNodeWithDictionaryKey:(id)arg1;
- (void)appendNode:(id)arg1;
@property(readonly, nonatomic) unsigned long long count;
- (id)description;

@end

__attribute__((visibility("hidden")))
@interface ML3StatementCacheNode : NSObject
{
    NSObject<NSCopying> *_dictionaryKey;
    ML3StatementCacheNode *_next;
}

@property(retain, nonatomic) ML3StatementCacheNode *next; // @synthesize next=_next;
@property(copy, nonatomic) NSObject<NSCopying> *dictionaryKey; // @synthesize dictionaryKey=_dictionaryKey;
- (void).cxx_destruct;
- (id)description;
- (id)initWithDictionaryKey:(id)arg1;

@end

@interface ML3StoreLink : ML3Entity
{
}

+ (long long)revisionTrackingCode;
+ (id)databaseTable;

@end

@interface ML3SuicidePact : NSObject
{
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSMutableSet *_signatures;
    int _notifyToken;
}

+ (id)sharedPact;
- (void).cxx_destruct;
- (void)_carryOutSuicidePact;
- (void)execute;
- (_Bool)isSignedForReason:(long long)arg1;
@property(readonly, nonatomic) _Bool isSigned;
- (void)secedeForReason:(long long)arg1;
- (void)signForReason:(long long)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ML3Track : ML3Entity
{
}

+ (void)enumeratePathsToDeleteFromLibrary:(id)arg1 persistentIDs:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
+ (_Bool)clearLocationFromLibrary:(id)arg1 persistentIDs:(id)arg2 usingConnection:(id)arg3;
+ (_Bool)clearLocationFromLibrary:(id)arg1 persistentIDs:(id)arg2;
+ (_Bool)registerBookmarkMetadataIdentifierFunctionOnConnection:(id)arg1;
+ (void)updateAllBookmarkableStoreBookmarkMetadataIdentifiersOnConnection:(id)arg1;
+ (_Bool)trackValueAreInTheCloud:(id)arg1;
+ (_Bool)unlinkRedownloadableAssetsFromLibrary:(id)arg1 persistentIDs:(id)arg2 deletionType:(int)arg3 deletedFileSize:(long long *)arg4;
+ (_Bool)unlinkRedownloadableAssetsFromLibrary:(id)arg1 persistentIDs:(id)arg2 deletedFileSize:(long long *)arg3;
+ (_Bool)unlinkRedownloadableAssetsFromLibrary:(id)arg1 persistentIDs:(id)arg2;
+ (id)collectionClassesToUpdateBeforeDelete;
+ (id)unsettableProperties;
+ (void)populateSortOrdersOfPropertyValues:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;
+ (_Bool)trackWithPersistentID:(long long)arg1 existsInLibraryWithConnection:(id)arg2;
+ (_Bool)trackWithPersistentID:(long long)arg1 visibleInLibrary:(id)arg2;
+ (_Bool)trackWithPersistentID:(long long)arg1 existsInLibrary:(id)arg2;
+ (_Bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4 usingConnection:(id)arg5;
+ (_Bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4;
+ (_Bool)libraryDynamicChangeForProperty:(id)arg1;
+ (_Bool)libraryContentsChangeForProperty:(id)arg1;
+ (id)persistentIDColumnForTable:(id)arg1;
+ (id)extraTablesToInsert;
+ (id)extraTablesToDelete;
+ (id)foreignColumnForProperty:(id)arg1;
+ (id)foreignDatabaseTableForProperty:(id)arg1;
+ (id)allProperties;
+ (id)predisambiguatedProperties;
+ (id)sectionPropertyForProperty:(id)arg1;
+ (id)joinClausesForProperty:(id)arg1;
+ (id)subselectPropertyForProperty:(id)arg1;
+ (id)subselectStatementForProperty:(id)arg1;
+ (id)TVShowEpisodesDefaultOrderingTerms;
+ (id)podcastsEpisodesDefaultOrderingTerms;
+ (id)composersDefaultOrderingTerms;
+ (id)albumAndArtistDefaultOrderingTerms;
+ (id)albumAllArtistsDefaultOrderingTerms;
+ (id)artistsDefaultOrderingTerms;
+ (id)artistAllAlbumsDefaultOrderingTerms;
+ (id)podcastsDefaultOrderingTerms;
+ (id)genresDefaultOrderingTerms;
+ (id)albumsDefaultOrderingTerms;
+ (id)defaultOrderingTerms;
+ (long long)revisionTrackingCode;
+ (id)databaseTable;
+ (void)initialize;
+ (id)predicateByOptimizingComparisonPredicate:(id)arg1;
+ (id)orderingTermsForITTGTrackOrder:(unsigned int)arg1 descending:(_Bool)arg2;
+ (id)containerQueryWithContainer:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3;
+ (id)containerQueryWithContainer:(id)arg1 predicate:(id)arg2;
+ (id)containerQueryWithContainer:(id)arg1;
+ (id)importChaptersByParsingAsset:(id)arg1;
+ (id)flattenedChapterDataFromDAAPInfoDictionary:(id)arg1 trackPersistentID:(long long)arg2;
+ (id)flattenedChapterDataFromSyncInfoDictionaries:(id)arg1 trackPersistentID:(long long)arg2;
+ (id)flattenedChapterDataWithImportChapters:(id)arg1 library:(id)arg2 trackPersistentID:(long long)arg3;
+ (id)_normalizedImportChapters:(id)arg1 trackPersistentID:(long long)arg2;
+ (id)_seriesProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_playbackInfoProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_genreProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_composerProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_albumArtistProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_artistProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_albumProtocolItemWithTrackProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_podcastProtocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_tvShowProtocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_movieProtocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)_songProtocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
+ (id)protocolItemWithProperties:(id)arg1 inLibrary:(id)arg2;
- (void)updateStoreBookmarkMetadataIdentifier;
- (id)computeSHA256OfAudioPacketDataInLocalAsset;
- (void)updateCollectionCloudStatus;
- (id)artworkTokenAtPlaybackTime:(double)arg1;
- (id)chapterTOC;
- (id)rawIntegrity;
- (_Bool)updateIntegrity;
- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3 usingConnection:(id)arg4;
- (id)absoluteFilePath;
- (void)_createVideoSnapshotAtTime:(double)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)_screenshotArtworkDataStoredAsItemArtwork;
- (void)createVideoSnapshotAtTime:(double)arg1;
- (_Bool)needsVideoSnapshot;
- (void)populateLocationPropertiesWithPath:(id)arg1 isProtected:(_Bool)arg2;
- (void)populateLocationPropertiesWithPath:(id)arg1;
- (void)populateChapterDataWithImportChapters:(id)arg1;
- (_Bool)populateArtworkCacheWithArtworkData:(id)arg1;
- (id)protocolItem;
- (id)multiverseIdentifier;

@end

@interface ML3TrackImporter : NSObject
{
    NSDictionary *_nameOrders;
    ML3MusicLibrary *_library;
    _Bool _updateSmartPlaylists;
}

@property(nonatomic) _Bool updateSmartPlaylists; // @synthesize updateSmartPlaylists=_updateSmartPlaylists;
@property(retain, nonatomic) NSDictionary *nameOrders; // @synthesize nameOrders=_nameOrders;
- (void).cxx_destruct;
- (_Bool)_shouldInsertITMediaKindIntoPurchasedPlaylist:(unsigned int)arg1;
- (id)_newTrackPropertiesByProcessingImportTrack:(id)arg1 insertStringsIntoSortMap:(_Bool)arg2;
- (id)_addStoreLinkForImportTrackProperties:(id)arg1;
- (id)_addGenreForImportTrackProperties:(id)arg1;
- (id)_addComposerForImportTrackProperties:(id)arg1;
- (id)_addArtistForImportTrackProperties:(id)arg1;
- (id)_addAlbumForImportTrackProperties:(id)arg1;
- (id)_addAlbumArtistForImportTrackProperties:(id)arg1;
- (_Bool)updateTrack:(id)arg1 withImportTrack:(id)arg2;
- (void)importTrack:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)initWithMusicLibrary:(id)arg1;

@end

@interface ML3TruthPredicate : ML3Predicate
{
    _Bool _truthValue;
}

+ (id)falsePredicate;
+ (id)truePredicate;
- (_Bool)isFalseAlways;
- (_Bool)isTrueAlways;
- (void)appendSQLToMutableString:(id)arg1 entityClass:(Class)arg2;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)_predicateString;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface ML3VirtualTable : NSObject <ML3DatabaseModuleContext>
{
    NSString *_virtualTableName;
    ML3DatabaseModule *_module;
    id <ML3VirtualTableDelegate> _delegate;
    ML3DatabaseTable *_databaseTable;
    ML3DatabaseConnection *_connection;
    shared_ptr_c3e79333 _dataSource;
}

@property(readonly, nonatomic) ML3DatabaseConnection *connection; // @synthesize connection=_connection;
@property(readonly, nonatomic) ML3DatabaseTable *databaseTable; // @synthesize databaseTable=_databaseTable;
@property(nonatomic) __weak id <ML3VirtualTableDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) shared_ptr_c3e79333 dataSource; // @synthesize dataSource=_dataSource;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)unregister;
- (_Bool)registerWithConnection:(id)arg1;
@property(readonly, nonatomic) NSString *name;
- (void)dealloc;
- (id)initWithDatabaseTable:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ML3WeakReference : NSObject
{
    id _object;
    unsigned long long _objectAddress;
}

+ (id)weakReferenceWithObject:(id)arg1;
- (void).cxx_destruct;
- (id)object;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initWithObject:(id)arg1;

@end

@interface MLContentRating : NSObject <NSCopying>
{
    NSMutableDictionary *_dictionary;
}

- (void).cxx_destruct;
- (void)_setValueCopy:(id)arg1 forKey:(id)arg2;
- (void)_setValue:(id)arg1 forKey:(id)arg2;
- (id)copyStringRepresentation;
- (id)initWithStringRepresentation:(id)arg1;
@property(copy, nonatomic) NSString *ratingSystem;
@property(retain, nonatomic) NSNumber *ratingRank;
@property(copy, nonatomic) NSString *ratingLabel;
@property(copy, nonatomic) NSString *ratingDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithContentRatingDictionary:(id)arg1;
- (id)init;

@end

@interface MLEQPreset : NSObject
{
    NSString *_name;
    NSString *_localizedName;
    int _builtInPresetType;
}

+ (id)eqPresetForBuiltInPresetType:(int)arg1;
+ (id)eqPresetForName:(id)arg1;
- (void).cxx_destruct;
- (int)typeForAVController;
- (int)builtInPresetType;
- (id)localizedName;
- (id)name;
- (id)initWithBuiltInPresetType:(int)arg1;

@end

@interface MLGeniusPlaylistController : NSObject
{
    void *_echo;
    void *_echo_library;
    void *_echo_cluster_playlist;
    NSMutableData *_sharedBlobMutableData;
}

+ (id)playlistControllerWithSeedTracks:(id)arg1 error:(id *)arg2;
+ (void)populateContainer:(id)arg1 withSeedTrack:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
+ (unsigned long long)defaultMinTrackCount;
+ (unsigned long long)defaultTrackCount;
+ (_Bool)hasGeniusDataAvailable;
+ (_Bool)hasGeniusFeatureEnabled;
+ (_Bool)useFakeGeniusData;
+ (void)ignoreUnusedWarnings;
- (void).cxx_destruct;
- (id)_onBackgroundQueue_tracksFromClusterForPlaylistItemMax:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)_createClusterPlaylistWithSeedTracks:(id)arg1 error:(id *)arg2;
- (_Bool)_onBackgroundQueue_populateContainer:(id)arg1 seedTrack:(id)arg2 error:(id *)arg3;
- (_Bool)_onBackgroundQueue_fakePopulateContainer:(id)arg1 withSeedTrack:(id)arg2 error:(id *)arg3;
- (id)_debugGetTracksStartingAtTrackWithPersistentID:(unsigned long long)arg1 maxTracks:(unsigned long long)arg2 stride:(int)arg3;
- (_Bool)_canIncludeTrackInGeniusContainer:(id)arg1;
- (id)_sharedBlobMutableData;
- (id)tracksFromClusterForCount:(unsigned long long)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface MLITDBGeniusDatabase : NSObject
{
}

+ (id)sharedGeniusDatabase;
- (_Bool)getGeniusSimilaritiesDataAndBytesForGlobalID:(unsigned long long)arg1 intoData:(id)arg2;
- (_Bool)getGeniusMetadataDataAndBytesForGlobalID:(unsigned long long)arg1 intoData:(id)arg2;
- (_Bool)getGeniusConfigrationDataAndBytesIntoData:(id)arg1;
- (id)copyGeniusSimilaritiesDataAndBytesForGlobalID:(unsigned long long)arg1;
- (id)copyGeniusMetadataDataAndBytesForGlobalID:(unsigned long long)arg1;
- (unsigned int)geniusConfigurationVersion;
- (id)copyGeniusConfigrationDataAndBytes;
- (unsigned long long)defaultTrackCount;
- (unsigned long long)defaultMinTrackCount;
- (_Bool)hasGeniusFeatureEnabled;
- (_Bool)hasGeniusDataAvailable;
- (_Bool)_hasAnySongs;
- (_Bool)_readBlobForRowID:(unsigned long long)arg1 intoData:(id)arg2 table:(const char *)arg3 blobColumn:(const char *)arg4;
- (_Bool)_readBlobIntoData:(id)arg1 table:(id)arg2 blobColumn:(id)arg3 where:(id)arg4;
- (id)_copyBlobDataAndBytesInTable:(id)arg1 blobColumn:(id)arg2 where:(id)arg3;
- (_Bool)_copyBlobData:(id *)arg1 blobAllocType:(int)arg2 table:(id)arg3 blobColumn:(id)arg4 where:(id)arg5;
- (unsigned long long)_getInt64ValueInTable:(id)arg1 column:(id)arg2 where:(id)arg3 limit:(unsigned int)arg4;
- (unsigned int)_getInt32ValueInTable:(id)arg1 column:(id)arg2;
- (_Bool)_hasRowsInTable:(id)arg1;
- (void)performGeniusDatabaseReadWithBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) ML3MusicLibrary *musicLibrary;
- (id)init;

@end

@interface MLMediaLibraryService : NSObject <MLMediaLibraryServiceClientProtocol, MLMediaLibraryServiceProtocol>
{
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_queue> *_replyQueue;
    NSXPCConnection *_serviceConnection;
    id <MLMediaLibraryServiceProtocol> _serviceProxy;
}

+ (void)_setDaemonProcessInfo:(id)arg1;
+ (id)sharedMediaLibraryService;
- (void).cxx_destruct;
- (id)_serviceConnection;
- (oneway void)serviceTerminatedTransactionWithIdentifier:(id)arg1 error:(id)arg2;
- (oneway void)setDeviceSharedLibraryPath:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (oneway void)getDeviceSharedLibraryPath:(CDUnknownBlockType)arg1;
- (oneway void)getLanguageResourcesWithCompletion:(CDUnknownBlockType)arg1;
- (oneway void)unlockDatabaseWithCompletion:(CDUnknownBlockType)arg1;
- (oneway void)lockDatabaseForReason:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (oneway void)pollCurrentImportStatus:(CDUnknownBlockType)arg1;
- (oneway void)cancelImportOperation:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (oneway void)performImportFromSource:(unsigned long long)arg1 intoDatabaseAtPath:(id)arg2 withTrackData:(id)arg3 withPlaylistData:(id)arg4 options:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (oneway void)setOptions:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (oneway void)performDatabaseOperation:(unsigned long long)arg1 withAttributes:(id)arg2 options:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (oneway void)endTransaction:(id)arg1 shouldCommit:(_Bool)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (oneway void)executeQuery:(id)arg1 withParameters:(id)arg2 options:(id)arg3 onTransaction:(id)arg4 withCompletionHandler:(CDUnknownBlockType)arg5;
- (oneway void)executeUpdate:(id)arg1 withParameters:(id)arg2 onTransaction:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (oneway void)beginTransactionForDatabaseAtPath:(id)arg1 withPriorityLevel:(unsigned long long)arg2 options:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (oneway void)recreateDatabaseAtPath:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (oneway void)validateDatabaseAtPath:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MLMediaLibraryServiceInterface : NSObject
{
}

+ (id)clientInterface;
+ (id)serviceInterface;

@end

@interface MLMediaTypeCountedSet : NSObject
{
    struct map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>> _map;
    unsigned long long _count;
}

@property(nonatomic) unsigned long long count; // @synthesize count=_count;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)enumerateMediaTypesWithBlock:(CDUnknownBlockType)arg1;
- (void)addMediaType:(unsigned int)arg1 count:(unsigned long long)arg2;
- (id)description;

@end

@interface MLMovieArtist : NSObject <NSCopying>
{
    NSMutableDictionary *_dictionary;
}

- (void).cxx_destruct;
- (void)_setValueCopy:(id)arg1 forKey:(id)arg2;
- (void)_setValue:(id)arg1 forKey:(id)arg2;
- (id)copyMovieArtistDictionary;
@property(copy, nonatomic) NSNumber *ITunesStoreIdentifier;
@property(copy, nonatomic) NSString *artistName;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithMovieArtistDictionary:(id)arg1;
- (id)init;

@end

@interface MLMovieProperties : NSObject <NSCopying>
{
    NSMutableDictionary *_dictionary;
}

- (void).cxx_destruct;
- (void)_setValueCopy:(id)arg1 forKey:(id)arg2;
- (void)_setValue:(id)arg1 forKey:(id)arg2;
- (id)copyMoviePropertiesDictionary;
@property(copy, nonatomic) NSString *studioName;
@property(copy, nonatomic) NSArray *screenwriters;
@property(copy, nonatomic) NSArray *producers;
@property(copy, nonatomic) NSArray *directors;
@property(copy, nonatomic) NSString *copyrightWarning;
@property(copy, nonatomic) NSArray *castMembers;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithMoviePropertiesDictionary:(id)arg1;
- (id)init;

@end

@interface MLTrackImport : NSObject <NSCopying>
{
    NSData *_artworkData;
    NSString *_assetFilePath;
    NSArray *_chapters;
    NSMutableDictionary *_properties;
    _Bool _shouldAddToPurchasedPlaylist;
    _Bool _assignArtworkCacheIDFromAlbum;
}

+ (void)initialize;
@property(nonatomic) _Bool shouldAddToPurchasedPlaylist; // @synthesize shouldAddToPurchasedPlaylist=_shouldAddToPurchasedPlaylist;
@property(copy, nonatomic) NSArray *chapters; // @synthesize chapters=_chapters;
@property(nonatomic) _Bool assignArtworkCacheIDFromAlbum; // @synthesize assignArtworkCacheIDFromAlbum=_assignArtworkCacheIDFromAlbum;
@property(copy, nonatomic) NSString *assetFilePath; // @synthesize assetFilePath=_assetFilePath;
@property(copy, nonatomic) NSData *artworkData; // @synthesize artworkData=_artworkData;
- (void).cxx_destruct;
- (void)_addSortStrings;
- (void)normalizeEntityProperties;
- (id)copyEntityProperties;
- (id)valueForEntityProperty:(id)arg1;
- (void)setValue:(id)arg1 forEntityProperty:(id)arg2;
@property(copy, nonatomic) MLMovieProperties *movieProperties;
@property(nonatomic) unsigned int mediaType;
@property(copy, nonatomic) MLContentRating *contentRating;
@property(readonly, copy, nonatomic) NSDictionary *entityProperties;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface MLTrackImportChapter : NSObject <NSCopying>
{
    NSData *_imageData;
    NSString *_imageCacheKey;
    unsigned long long _startTimeInMilliseconds;
    NSString *_title;
    NSURL *_url;
    NSString *_urlTitle;
}

@property(copy, nonatomic) NSString *imageCacheKey; // @synthesize imageCacheKey=_imageCacheKey;
@property(copy, nonatomic) NSString *URLTitle; // @synthesize URLTitle=_urlTitle;
@property(copy, nonatomic) NSURL *URL; // @synthesize URL=_url;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic) unsigned long long startTimeInMilliseconds; // @synthesize startTimeInMilliseconds=_startTimeInMilliseconds;
@property(copy, nonatomic) NSData *imageData; // @synthesize imageData=_imageData;
- (void).cxx_destruct;
- (_Bool)isEqualIgnoringTimesAndTitle:(id)arg1;
- (long long)compare:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)normalizeProperties;

@end

@interface NSData (ML3DatabaseDatatypesBridge)
- (id)ml_stringValueForSQL;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt *)arg1 atPosition:(int)arg2;
@end

@interface NSDate (ML3DatabaseDatatypesBridge)
- (id)ml_stringValueForSQL;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt *)arg1 atPosition:(int)arg2;
@end

@interface NSDictionary (ML3Additions)
- (id)ML3StringForKey:(id)arg1;
@end

@interface NSFileHandle (ML3Additions)
- (void)ml_unlock;
- (void)ml_lock;
@end

@interface NSMutableDictionary (ML3ArtworkAdditions)
- (void)mergeWithDictionary:(id)arg1;
@end

@interface NSNull (ML3DatabaseDatatypesBridge)
- (id)ml_stringValueForSQL;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt *)arg1 atPosition:(int)arg2;
@end

@interface NSNumber (ML3DatabaseDatatypesBridge)
- (id)ml_stringValueForSQL;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt *)arg1 atPosition:(int)arg2;
@end

@interface NSObject (ML3DatabaseDatatypesBridge)
- (id)ml_stringValueForSQL;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt *)arg1 atPosition:(int)arg2;
@end

@interface NSString (ImportSanity)
- (id)sanitizedString;
@end

@interface NSString (InsignificantCharacterFiltering)
- (id)MLSortString;
- (id)copyWithoutInsignificantCharacters;
- (id)copyWithoutInsignificantPrefixAndCharacters;
- (id)_copyWithoutInsignificantPrefix:(_Bool)arg1 andCharacters:(_Bool)arg2;
- (struct _NSRange)_rangeWithoutInsignificantPrefix:(_Bool)arg1 andCharacters:(_Bool)arg2;
@end

@interface NSString (ML3DatabaseDatatypesBridge)
- (id)ml_stringValueForSQL;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt *)arg1 atPosition:(int)arg2;
@end

@interface NSValue (ML3NameOrderAdditions)
+ (id)valueWithML3NameOrder:(CDStruct_912cb5d2)arg1;
- (CDStruct_912cb5d2)ML3NameOrderValue;
@end

__attribute__((visibility("hidden")))
@interface _ML3ArtworkConfigurationMediaArtworkTypeKey : NSObject <NSCopying>
{
    unsigned int _mediaType;
    long long _artworkType;
}

+ (id)keyWithMediaType:(unsigned int)arg1 artworkType:(long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;

@end

__attribute__((visibility("hidden")))
@interface _ML3DatabaseConnectionSubPool : NSObject
{
    NSObject<OS_dispatch_queue> *_checkoutQueue;
    NSObject<OS_dispatch_queue> *_checkinQueue;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_semaphore> *_waitingSemaphore;
    NSMutableSet *_availableConnections;
    NSMutableSet *_busyConnections;
    int _connectionsProfilingLevel;
    int _willDeleteDatabaseNotifyToken;
    int _homeSharingCachesClearedNotifyToken;
    _Bool _useReadOnlyConnections;
    _Bool _useDistantConnections;
    NSString *_databasePath;
    unsigned long long _maxConcurrentConnections;
    unsigned long long _connectionsJournalingMode;
}

@property(nonatomic) unsigned long long connectionsJournalingMode; // @synthesize connectionsJournalingMode=_connectionsJournalingMode;
@property(nonatomic) _Bool useDistantConnections; // @synthesize useDistantConnections=_useDistantConnections;
@property(nonatomic) _Bool useReadOnlyConnections; // @synthesize useReadOnlyConnections=_useReadOnlyConnections;
@property(readonly, nonatomic) unsigned long long maxConcurrentConnections; // @synthesize maxConcurrentConnections=_maxConcurrentConnections;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
- (void).cxx_destruct;
- (void)_handleDatabaseDeletion;
- (void)closeConnectionsAndWaitForBusyConnections:(_Bool)arg1;
- (void)checkInConnection:(id)arg1;
- (id)checkoutConnection:(_Bool *)arg1;
@property(nonatomic) int connectionsProfilingLevel;
- (void)dealloc;
- (id)init;
- (id)initWithDatabasePath:(id)arg1 maxConcurrentConnections:(unsigned long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface _ML3DatabaseConnectionWrapper : NSObject
{
    ML3DatabaseConnection *_connection;
    NSThread *_owningThread;
    NSThread *_borrowingThread;
    unsigned long long _useCount;
}

@property(nonatomic) unsigned long long useCount; // @synthesize useCount=_useCount;
@property(retain, nonatomic) NSThread *borrowingThread; // @synthesize borrowingThread=_borrowingThread;
@property(retain, nonatomic) NSThread *owningThread; // @synthesize owningThread=_owningThread;
@property(retain, nonatomic) ML3DatabaseConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (id)description;
- (id)initWithConnection:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface _ML3DatabaseNaturalStatement : NSObject
{
    NSString *_sql;
    NSMutableArray *_parameters;
}

+ (id)naturalStatementWithSQL:(id)arg1 parameters:(id)arg2;
@property(retain, nonatomic) NSMutableArray *parameters; // @synthesize parameters=_parameters;
@property(retain, nonatomic) NSString *sql; // @synthesize sql=_sql;
- (void).cxx_destruct;
- (void)setParameter:(id)arg1 forPosition:(unsigned long long)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _ML3ValidatableDatabase : NSObject
{
    unsigned long long _queueID;
    NSString *_databasePath;
    unsigned long long _validationState;
    NSObject<OS_dispatch_queue> *_validationSerialQueue;
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *validationSerialQueue; // @synthesize validationSerialQueue=_validationSerialQueue;
@property(nonatomic) unsigned long long validationState; // @synthesize validationState=_validationState;
@property(copy, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
- (void).cxx_destruct;
- (_Bool)currentQueueIsValidationQueue;
- (id)init;
- (id)initWithDatabasePath:(id)arg1;

@end

