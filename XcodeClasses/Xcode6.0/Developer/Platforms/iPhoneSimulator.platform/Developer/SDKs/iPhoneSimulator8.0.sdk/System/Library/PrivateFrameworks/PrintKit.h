//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct SSLContext;

struct _ipp_attribute_s;

struct _ipp_s {
    int _field1;
    union _ipp_request_u {
        CDStruct_2892ad96 _field1;
        CDStruct_2892ad96 _field2;
        CDStruct_2892ad96 _field3;
        CDStruct_2892ad96 _field4;
    } _field2;
    struct _ipp_attribute_s *_field3;
    struct _ipp_attribute_s *_field4;
    struct _ipp_attribute_s *_field5;
    int _field6;
    struct _ipp_attribute_s *_field7;
    int _field8;
    int _field9;
    int _field10;
};

struct fd_set;

struct http_addrlist_s;

struct in_addr {
    unsigned int _field1;
};

struct internal_state;

struct pwg_map_s {
    char *_field1;
    char *_field2;
};

struct pwg_size_s {
    struct pwg_map_s _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct z_stream_s {
    char *_field1;
    unsigned int _field2;
    unsigned long long _field3;
    char *_field4;
    unsigned int _field5;
    unsigned long long _field6;
    char *_field7;
    struct internal_state *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    void *_field11;
    int _field12;
    unsigned long long _field13;
    unsigned long long _field14;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned char _field1[2];
    int _field2;
    int _field3;
} CDStruct_2892ad96;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PrintKit.framework/PrintKit
// UUID: ACAFFDF5-7CA7-31DF-B748-36C4869DB57C
//
//                           Arch: x86_64
//                Current version: 175.0.0
//          Compatibility version: 1.0.0
//                 Source version: 175.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@interface DNSServiceRefWrapper : NSObject
{
    struct _DNSServiceRef_t *ref;
}

- (void)dealloc;
- (id)initDNSServiceRefWrapperWithRef:(struct _DNSServiceRef_t *)arg1;

@end

@interface PKDefaults : NSObject
{
}

+ (void)addLastUsedPrinter:(id)arg1 duplexMode:(id)arg2 lastUsedSize:(struct CGSize)arg3 forPhoto:(_Bool)arg4;
+ (void)addLastUsedPrinter:(id)arg1 duplexMode:(id)arg2 lastUsedSize:(struct CGSize)arg3;
+ (id)lastUsedPrintersForPhoto:(_Bool)arg1;
+ (id)lastUsedPrinters;
+ (long long)printerLookupWithArray:(id)arg1 withTimeout:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;

@end

@interface PKJob : NSObject
{
    long long number;
    long long remoteJobId;
    long long mediaProgress;
    long long mediaSheets;
    long long mediaSheetsCompleted;
    NSString *printerDisplayName;
    long long printerKind;
    NSString *printerLocation;
    PKPrintSettings *settings;
    long long state;
    NSDate *timeAtCompleted;
    NSDate *timeAtCreation;
    NSDate *timeAtProcessing;
    NSData *thumbnailImage;
}

+ (id)jobs;
+ (id)currentJob;
@property(retain, nonatomic) NSData *thumbnailImage; // @synthesize thumbnailImage;
@property(retain, nonatomic) NSDate *timeAtProcessing; // @synthesize timeAtProcessing;
@property(retain, nonatomic) NSDate *timeAtCreation; // @synthesize timeAtCreation;
@property(retain, nonatomic) NSDate *timeAtCompleted; // @synthesize timeAtCompleted;
@property(nonatomic) long long state; // @synthesize state;
@property(retain, nonatomic) PKPrintSettings *settings; // @synthesize settings;
@property(retain, nonatomic) NSString *printerLocation; // @synthesize printerLocation;
@property(nonatomic) long long printerKind; // @synthesize printerKind;
@property(retain, nonatomic) NSString *printerDisplayName; // @synthesize printerDisplayName;
@property(nonatomic) long long mediaSheetsCompleted; // @synthesize mediaSheetsCompleted;
@property(nonatomic) long long mediaSheets; // @synthesize mediaSheets;
@property(nonatomic) long long mediaProgress; // @synthesize mediaProgress;
@property(nonatomic) long long remoteJobId; // @synthesize remoteJobId;
@property(nonatomic) long long number; // @synthesize number;
- (long long)update;
- (long long)cancel;

@end

@interface PKMediaName : NSObject
{
    NSString *_mediaName;
    NSString *_mediaClass;
    NSString *_baseName;
    double _widthInUnits;
    double _heightInUnits;
    NSString *_widthStr;
    long long _units;
    double _conversionFactor;
}

+ (id)pkMediaNameWithString:(id)arg1;
@property double conversionFactor; // @synthesize conversionFactor=_conversionFactor;
@property long long units; // @synthesize units=_units;
@property(retain) NSString *widthStr; // @synthesize widthStr=_widthStr;
@property double heightInUnits; // @synthesize heightInUnits=_heightInUnits;
@property double widthInUnits; // @synthesize widthInUnits=_widthInUnits;
@property(retain) NSString *baseName; // @synthesize baseName=_baseName;
@property(retain) NSString *mediaClass; // @synthesize mediaClass=_mediaClass;
@property(retain) NSString *mediaName; // @synthesize mediaName=_mediaName;
@property(readonly) double height; // @dynamic height;
@property(readonly) double width; // @dynamic width;
@property(readonly) _Bool isRoll; // @dynamic isRoll;
@property(readonly, retain) NSString *unitStr; // @dynamic unitStr;
- (void)parseMediaName:(id)arg1;
- (void)dealloc;
- (id)initWithString:(id)arg1;

@end

@interface PKPaper : NSObject
{
    NSString *name;
    NSString *_baseName;
    int width;
    int height;
    int leftMargin;
    int topMargin;
    int rightMargin;
    int bottomMargin;
    _Bool _isTransverse;
    NSDictionary *mediaInfo;
}

+ (id)documentPapers;
+ (id)photoPapers;
+ (_Bool)willAdjustMarginsForDuplexMode:(id)arg1;
+ (id)genericBorderlessWithName:(id)arg1;
+ (id)genericWithName:(id)arg1;
+ (id)genericPRC32KPaper;
+ (id)genericHagakiPaper;
+ (id)genericA6Paper;
+ (id)generic4x6Paper;
+ (id)generic3_5x5Paper;
+ (id)genericLegalPaper;
+ (id)genericLetterPaper;
+ (id)genericA4Paper;
+ (id)rollPaperWithAttributes:(id)arg1;
+ (id)paperWithAttributes:(id)arg1;
+ (id)mediaNameForWidth:(int)arg1 Height:(int)arg2 mediaType:(id)arg3 Borderless:(_Bool)arg4 Simplex:(_Bool)arg5;
+ (_Bool)useMetric;
@property(readonly, nonatomic) _Bool isTransverse; // @synthesize isTransverse=_isTransverse;
@property(copy, nonatomic) NSDictionary *mediaInfo; // @synthesize mediaInfo;
@property(nonatomic) int bottomMargin; // @synthesize bottomMargin;
@property(nonatomic) int rightMargin; // @synthesize rightMargin;
@property(nonatomic) int topMargin; // @synthesize topMargin;
@property(nonatomic) int leftMargin; // @synthesize leftMargin;
@property(nonatomic) int height; // @synthesize height;
@property(nonatomic) int width; // @synthesize width;
@property(retain, nonatomic) NSString *name; // @synthesize name;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)paperWithMarginsAdjustedForDuplexMode:(id)arg1;
@property(readonly, retain, nonatomic) NSString *localizedName; // @dynamic localizedName;
- (long long)sizeMediaTypeAndImageableCompare:(id)arg1;
- (long long)sizeAndImageableCompare:(id)arg1;
- (_Bool)isEqualSize:(id)arg1;
- (_Bool)isEqualSizeAndMediaType:(id)arg1;
- (id)localizedNameFromDimensions;
- (struct _ipp_s *)createMediaColAndDoMargins:(_Bool)arg1;
- (void)addToMediaCol:(struct _ipp_s *)arg1;
- (void)dealloc;
@property(readonly, retain, nonatomic) NSString *mediaTypeName; // @dynamic mediaTypeName;
@property(readonly, retain, nonatomic) NSString *mediaType;
@property(readonly, nonatomic) _Bool isRoll; // @dynamic isRoll;
@property(readonly, nonatomic) int maxHeight;
@property(readonly, nonatomic) int minHeight;
@property(readonly, nonatomic) NSString *baseName; // @dynamic baseName;
- (id)nameWithoutSuffixes:(id)arg1;
@property(readonly, nonatomic) _Bool isBorderless;
@property(readonly, nonatomic) double imageableArea; // @dynamic imageableArea;
@property(readonly, nonatomic) struct CGRect imageableAreaRect;
@property(readonly, nonatomic) struct CGSize paperSize;
- (id)initWithPWGSize:(struct pwg_size_s *)arg1 localizedName:(id)arg2 codeName:(id)arg3;
- (id)initWithWidth:(int)arg1 Height:(int)arg2 Left:(int)arg3 Top:(int)arg4 Right:(int)arg5 Bottom:(int)arg6 localizedName:(id)arg7 codeName:(id)arg8;
- (id)cutToPWGLength:(int)arg1;
- (id)cutToLength:(double)arg1;
@property(readonly, nonatomic) unsigned long long maxCutLength; // @dynamic maxCutLength;
@property(readonly, nonatomic) unsigned long long minCutLength; // @dynamic minCutLength;
@property(readonly, nonatomic) unsigned long long bottomMarginInPoints; // @dynamic bottomMarginInPoints;
@property(readonly, nonatomic) unsigned long long topMarginInPoints; // @dynamic topMarginInPoints;

@end

@interface PKPaperList : NSObject
{
    _Bool _hasMediaReady;
    NSArray *_papers;
    NSArray *_simplexPapers;
    NSArray *_duplexPapers;
    NSArray *_photoPapers;
    NSArray *_rolls;
}

+ (id)mediaDictFromAttrs:(struct _ipp_s *)arg1;
+ (id)paperListWithTXTRecord:(id)arg1;
+ (id)paperListWithAttrs:(struct _ipp_s *)arg1;
@property(retain, nonatomic) NSArray *rolls; // @synthesize rolls=_rolls;
@property(retain) NSArray *photoPapers; // @synthesize photoPapers=_photoPapers;
@property(retain) NSArray *duplexPapers; // @synthesize duplexPapers=_duplexPapers;
@property(retain) NSArray *simplexPapers; // @synthesize simplexPapers=_simplexPapers;
@property(retain) NSArray *papers; // @synthesize papers=_papers;
@property _Bool hasMediaReady; // @synthesize hasMediaReady=_hasMediaReady;
- (id)conjureMediaFromTXT:(id)arg1;
- (long long)jobTypesSupported:(id)arg1;
- (id)filterPapers:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)filterUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)hasMatchingLoadedRoll:(id)arg1;
- (id)matchPaper:(id)arg1 inList:(id)arg2;
- (id)matchPaper:(id)arg1;
- (id)availableRollPapersPreferBorderless:(_Bool)arg1;
- (id)rollReadyPaperListForPhotoWithContentSize:(struct CGSize)arg1;
- (id)rollReadyPaperListForDocumentWithContentSize:(struct CGSize)arg1;
- (id)rollReadyPaperListWithContentSize:(struct CGSize)arg1 forPhoto:(_Bool)arg2;
- (id)tersePaperFrom:(id)arg1 withMediaInfo:(id)arg2;
- (id)tersePaperFrom:(id)arg1 withRequest:(id)arg2;
- (void)categorizePapers:(id)arg1;
- (void)addPaperSet:(id *)arg1 withCount:(int)arg2 toArrays:(id *)arg3;
- (id)matchedPaper:(id)arg1 preferBorderless:(_Bool)arg2 withDuplexMode:(id)arg3 didMatch:(_Bool *)arg4;
- (id)papersForDocumentWithSize:(struct CGSize)arg1 andDuplex:(_Bool)arg2;
- (id)papersForPhotoWithSize:(struct CGSize)arg1;
- (id)paperListForDuplexMode:(id)arg1;
- (_Bool)isPaperReady:(id)arg1;
- (id)adjustMargins:(id)arg1 forDuplex:(id)arg2;
- (void)dealloc;
- (id)initWithTXTRecord:(id)arg1;
- (id)initWithAttrs:(struct _ipp_s *)arg1;

@end

@interface PKPrintSettings : NSObject
{
    NSMutableDictionary *_dict;
    PKPaper *paper;
}

+ (id)printSettingsForPrinter:(id)arg1;
+ (id)photo;
+ (id)default;
@property(retain, nonatomic) PKPaper *paper; // @synthesize paper;
@property(retain, nonatomic) NSMutableDictionary *dict; // @synthesize dict=_dict;
- (id)description;
- (id)objectForKey:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)settingsDict;
- (id)init;
- (void)dealloc;

@end

@interface PKPrinter : NSObject
{
    NSString *name;
    long long type;
    long long accessState;
    NSDictionary *printInfoSupported;
    struct _http_s {
        int _field1;
        int _field2;
        int _field3;
        long long _field4;
        int _field5;
        int _field6;
        int _field7;
        int _field8;
        struct sockaddr_in _field9;
        char _field10[256];
        char _field11[27][256];
        char *_field12;
        int _field13;
        int _field14;
        int _field15;
        char _field16[2048];
        int _field17;
        struct _cups_md5_state_s {
            unsigned int _field1[2];
            unsigned int _field2[4];
            unsigned char _field3[64];
        } _field18;
        char _field19[256];
        int _field20;
        struct SSLContext *_field21;
        int _field22;
        struct fd_set *_field23;
        int _field24;
        char *_field25;
        char _field26[256];
        char _field27[256];
        int _field28;
        long long _field29;
        union _http_addr_u *_field30;
        struct http_addrlist_s *_field31;
        char _field32[2048];
        int _field33;
        char *_field34;
        char *_field35;
        struct __CFArray *_field36;
        CDUnknownFunctionPointerType _field37;
        void *_field38;
        double _field39;
        int _field40;
        int _field41;
        int _field42;
        char *_field43;
        char *_field44;
        char *_field45;
        char *_field46;
        char *_field47;
        char *_field48;
        int _field49;
        struct z_stream_s _field50;
        char *_field51;
    } *job_http;
    NSMutableDictionary *privateData;
    NSMutableDictionary *specialFeedOrientation;
    NSArray *printScalingSupported;
    NSArray *mandatoryJobAttributes;
    NSString *quotaManagementURL;
    int maxPDFKBytes;
    int maxJPEGKBytes;
    int maxJPEGXDimension;
    int maxJPEGYDimension;
    int maxCopies;
    int preferred_landscape;
    int printerStateReasons;
    _Bool isLocal;
    _Bool hasIdentifyPrinterOp;
    _Bool connectionShouldNotBeTrusted;
    _Bool isFromMCProfile;
    long long kind;
    PKPaperList *_paperList;
}

+ (id)nameForHardcodedURI:(id)arg1;
+ (id)hardcodedURIs;
+ (_Bool)printerLookupWithName:(id)arg1 andTimeout:(double)arg2;
+ (id)printerWithName:(id)arg1 discoveryTimeout:(double)arg2;
+ (id)printerWithName:(id)arg1;
+ (id)requiredPDL;
+ (_Bool)urfIsOptional;
+ (struct _ipp_s *)getAttributes:(const char **)arg1 count:(int)arg2 fromURI:(id)arg3;
@property(retain) PKPaperList *paperList; // @synthesize paperList=_paperList;
@property(readonly) long long type; // @synthesize type;
@property(readonly) _Bool hasIdentifyPrinterOp; // @synthesize hasIdentifyPrinterOp;
@property _Bool isFromMCProfile; // @synthesize isFromMCProfile;
@property _Bool isLocal; // @synthesize isLocal;
@property(readonly) long long accessState; // @synthesize accessState;
@property(readonly) long long kind; // @synthesize kind;
@property(readonly) NSString *name; // @synthesize name;
- (void)setupWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)validatePassCode:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)showPassCodeForSetupWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly) _Bool setupSupportsPasswordScope;
@property(readonly) _Bool needsSetup;
- (void)reconfirmWithForce:(_Bool)arg1;
- (void)cancelUnlock;
- (void)unlockWithCompletionHandler:(CDUnknownBlockType)arg1;
- (long long)startJob:(id)arg1 ofType:(id)arg2;
- (long long)sendData:(const char *)arg1 ofLength:(long long)arg2;
- (long long)printURL:(id)arg1 ofType:(id)arg2 printSettings:(id)arg3;
- (long long)finishJob;
- (long long)abortJob;
- (void)doMedia2:(struct _ipp_s *)arg1;
- (id)matchedPaper:(id)arg1 preferBorderless:(_Bool)arg2 withDuplexMode:(id)arg3 didMatch:(_Bool *)arg4;
- (id)papersForDocumentWithSize:(struct CGSize)arg1 andDuplex:(_Bool)arg2;
- (id)papersForPhotoWithSize:(struct CGSize)arg1;
- (id)paperListForDuplexMode:(id)arg1;
- (id)rollReadyPaperListWithContentSize:(struct CGSize)arg1 forPhoto:(_Bool)arg2;
- (id)rollReadyPaperListWithContentSize:(struct CGSize)arg1;
- (_Bool)knowsReadyPaperList;
- (_Bool)isPaperReady:(id)arg1;
@property(readonly) NSString *uuid; // @dynamic uuid;
@property(readonly) _Bool isIPPS; // @dynamic isIPPS;
@property(readonly) _Bool isAdobeRGBSupported; // @dynamic isAdobeRGBSupported;
@property(readonly) NSDictionary *printInfoSupported;
- (void)checkOperations:(struct _ipp_s *)arg1;
- (void)identifySelf;
@property(readonly) _Bool hasPrintInfoSupported; // @dynamic hasPrintInfoSupported;
- (long long)feedOrientation:(id)arg1;
- (void)aggdAppsAndPrinters;
- (id)availableRollPapersPreferBorderless:(_Bool)arg1;
@property(readonly) long long jobTypesSupported;
- (id)localizedPrinterWarnings;
- (void)handlePrinterStateReasonsFromResponse:(struct _ipp_s *)arg1;
- (id)makeAndModel;
- (id)location;
- (id)displayName;
- (id)description;
- (void)dealloc;
- (_Bool)isBonjour;
@property(readonly) NSURL *printerURL;
- (void)setPrivateObject:(id)arg1 forKey:(id)arg2;
- (id)privateObjectForKey:(id)arg1;
- (id)localName;
- (long long)finalizeJob:(int)arg1;
- (struct _ipp_s *)createRequest:(id)arg1 ofType:(id)arg2 url:(id)arg3;
- (_Bool)resolveWithTimeout:(int)arg1;
- (void)resolve;
@property(readonly, retain) NSString *scheme;
@property(retain) NSNumber *port; // @dynamic port;
@property(retain) NSString *hostname; // @dynamic hostname;
@property(retain) NSDictionary *TXTRecord; // @dynamic TXTRecord;
- (id)TXTRecordWithTimeout:(int)arg1;
- (id)txtRecordObjectForKey:(id)arg1;
- (void)setAccessStateFromTXT;
- (void)updateType;
- (id)initWithName:(id)arg1 TXTRecord:(id)arg2;
- (id)initWithName:(id)arg1 TXT:(id)arg2;
- (struct _ipp_s *)getAttributes:(const char **)arg1 count:(int)arg2;
- (struct _ipp_s *)getPrinterAttributes;

@end

@interface PKPrinterBrowser : NSObject
{
    id <PKPrinterBrowserDelegate> delegate;
    struct _DNSServiceRef_t *mainBrowserRef;
    struct _DNSServiceRef_t *ippBrowserRef;
    struct _DNSServiceRef_t *ippsBrowserRef;
    struct _DNSServiceRef_t *localippBrowserRef;
    struct _DNSServiceRef_t *localippsBrowserRef;
    NSMutableDictionary *printers;
    NSMutableDictionary *printersByUUID;
    NSFileHandle *handle;
    unsigned char originalCellFlag;
    unsigned char originalWifiFlag;
    NSObject<OS_dispatch_queue> *printersQueue;
    NSMutableArray *pendingList;
}

+ (id)browserWithDelegate:(id)arg1;
@property(retain, nonatomic) NSMutableDictionary *printersByUUID; // @synthesize printersByUUID;
@property(retain, nonatomic) NSMutableArray *pendingList; // @synthesize pendingList;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *printersQueue; // @synthesize printersQueue;
@property(retain, nonatomic) NSMutableDictionary *printers; // @synthesize printers;
@property(retain, nonatomic) NSFileHandle *handle; // @synthesize handle;
@property(nonatomic) id <PKPrinterBrowserDelegate> delegate; // @synthesize delegate;
- (void)addWithPrinterURI:(id)arg1 andBonjourURI:(id)arg2 andDisplayName:(id)arg3 isMCProfile:(_Bool)arg4;
- (void)addWithPrinterURI:(id)arg1 andDisplayName:(id)arg2 isMCProfile:(_Bool)arg3;
- (void)queryHardcodedPrinters;
- (void)queryCallback:(int)arg1 flags:(unsigned int)arg2 fullName:(const char *)arg3 rdlen:(unsigned short)arg4 rdata:(const void *)arg5;
- (void)browseLocalCallback:(unsigned int)arg1 interface:(unsigned int)arg2 name:(const char *)arg3 regType:(const char *)arg4 domain:(const char *)arg5;
- (void)browseCallback:(unsigned int)arg1 interface:(unsigned int)arg2 name:(const char *)arg3 regType:(const char *)arg4 domain:(const char *)arg5;
- (void)addBlockToPendingList:(CDUnknownBlockType)arg1;
- (void)addQueryResult:(id)arg1 toPrinter:(id)arg2;
- (void)reissueTXTQuery:(id)arg1;
- (void)addLimboPrinter:(id)arg1 local:(_Bool)arg2;
- (void)removePrinter:(id)arg1;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

