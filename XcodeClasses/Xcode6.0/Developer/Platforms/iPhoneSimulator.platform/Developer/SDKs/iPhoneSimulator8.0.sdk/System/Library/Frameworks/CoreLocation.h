//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CLConnection;

struct CLConnectionClient {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    id _field2;
    id _field3;
    id _field4;
    struct CLConnection *_field5;
    struct CLNameValuePair _field6;
    struct CLNameValuePair _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    CDUnknownBlockType _field9;
    CDUnknownBlockType _field10;
    struct map<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>>> _field11;
    CDUnknownBlockType _field12;
    CDUnknownBlockType _field13;
};

struct CLNameValuePair {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct map<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
                struct __tree_node_base<void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

#pragma mark Typedef'd Structures

typedef struct {
    double x;
    double y;
    double z;
    double magneticHeading;
    double trueHeading;
    double accuracy;
    double timestamp;
    double temperature;
    double magnitude;
    double inclination;
    int calibration;
} CDStruct_b560b707;

typedef struct {
    int padding1;
    int suitability;
    CDStruct_2c43369c coordinate;
    double horizontalAccuracy;
    double altitude;
    double verticalAccuracy;
    double padding2;
    double padding3;
    double speed;
    double speedAccuracy;
    double course;
    double courseAccuracy;
    double timestamp;
    int confidence;
    double lifespan;
    int type;
    CDStruct_2c43369c rawCoordinate;
    double rawCourse;
    int floor;
} CDStruct_dcdde258;

typedef struct {
    char identifier[512];
    int type;
    _Bool notifyOnEntry;
    _Bool notifyOnExit;
    union {
        struct {
            char proximityUUID[512];
            unsigned short major;
            unsigned short minor;
            int definitionMask;
            _Bool notifyEntryStateOnDisplay;
        } beaconAttributes;
        struct {
            CDStruct_2c43369c center;
            double radius;
            double desiredAccuracy;
        } circularAttributes;
    } ;
} CDStruct_f756f8ea;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreLocation.framework/CoreLocation
// UUID: 84779E96-8A51-3415-AF9C-39262514262C
//
//                           Arch: x86_64
//                Current version: 1753.7.0
//          Compatibility version: 1.0.0
//                 Source version: 1753.7.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CLLocationManagerRoutineClientInterface <NSObject>
- (void)didUpdateLocations:(NSArray *)arg1;
@end

@protocol CLLocationManagerRoutineServerInterface <NSObject>
- (void)stopUpdatingLocation;
- (void)startUpdatingLocation;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface CLBeacon : NSObject <NSCopying, NSSecureCoding>
{
    NSUUID *_proximityUUID;
    NSNumber *_major;
    NSNumber *_minor;
    long long _proximity;
    double _accuracy;
    long long _rssi;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) long long rssi; // @synthesize rssi=_rssi;
@property(readonly, nonatomic) double accuracy; // @synthesize accuracy=_accuracy;
@property(readonly, nonatomic) long long proximity; // @synthesize proximity=_proximity;
@property(readonly, nonatomic) NSNumber *minor; // @synthesize minor=_minor;
@property(readonly, nonatomic) NSNumber *major; // @synthesize major=_major;
@property(readonly, nonatomic) NSUUID *proximityUUID; // @synthesize proximityUUID=_proximityUUID;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithProximityUUID:(id)arg1 major:(id)arg2 minor:(id)arg3 proximity:(long long)arg4 accuracy:(double)arg5 rssi:(long long)arg6;

@end

@interface CLRegion : NSObject <NSCopying, NSSecureCoding>
{
    CDStruct_f756f8ea fRegion;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) CDStruct_f756f8ea clientRegion;
- (_Bool)containsCoordinate:(CDStruct_c3b9c2ee)arg1;
@property(nonatomic) _Bool notifyOnExit;
@property(nonatomic) _Bool notifyOnEntry;
@property(readonly, copy, nonatomic) NSString *identifier;
@property(readonly, nonatomic) double radius;
@property(readonly, nonatomic) CDStruct_c3b9c2ee center;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_encodeWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_initWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithIdentifier:(id)arg1;
- (id)initCircularRegionWithCenter:(CDStruct_c3b9c2ee)arg1 radius:(double)arg2 identifier:(id)arg3;
- (id)initWithClientRegion:(CDStruct_f756f8ea)arg1;

@end

@interface CLBeaconRegion : CLRegion
{
    NSUUID *_proximityUUID;
    NSNumber *_major;
    NSNumber *_minor;
}

+ (_Bool)supportsSecureCoding;
+ (id)any;
@property(readonly, nonatomic) NSNumber *minor; // @synthesize minor=_minor;
@property(readonly, nonatomic) NSNumber *major; // @synthesize major=_major;
@property(readonly, nonatomic) NSUUID *proximityUUID; // @synthesize proximityUUID=_proximityUUID;
@property(nonatomic) _Bool notifyEntryStateOnDisplay;
- (id)peripheralDataWithMeasuredPower:(id)arg1;
- (BOOL)_measuredPowerForDevice;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithProximityUUID:(id)arg1 major:(unsigned short)arg2 minor:(unsigned short)arg3 identifier:(id)arg4;
- (id)initWithProximityUUID:(id)arg1 major:(unsigned short)arg2 identifier:(id)arg3;
- (id)initWithProximityUUID:(id)arg1 identifier:(id)arg2;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithClientRegion:(CDStruct_f756f8ea)arg1;
- (id)init;

@end

@interface CLCircularRegion : CLRegion
{
}

+ (_Bool)supportsSecureCoding;
- (_Bool)containsCoordinate:(CDStruct_c3b9c2ee)arg1;
@property(readonly, nonatomic) double radius;
@property(readonly, nonatomic) CDStruct_c3b9c2ee center;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCenter:(CDStruct_c3b9c2ee)arg1 radius:(double)arg2 identifier:(id)arg3;

@end

@interface CLFloor : NSObject <NSCopying, NSSecureCoding>
{
    long long level;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) long long level; // @synthesize level;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithLevel:(long long)arg1;

@end

@interface CLGeocoder : NSObject
{
    CLGeocoderInternal *_internal;
}

- (void)_notifyError:(id)arg1;
- (void)_notifyCancel;
- (void)_notifyNoResult;
- (void)_notifyPartialResult:(id)arg1;
- (void)_notifyResult:(id)arg1;
- (void)_notifyResult:(id)arg1 error:(id)arg2;
- (void)_ensureMainThreadExecutionContextForBlock:(CDUnknownBlockType)arg1;
- (void)_ticket:(id)arg1 didReturnError:(id)arg2;
- (void)_ticket:(id)arg1 didReturnError:(id)arg2 partialResultForLocation:(id)arg3;
- (void)_ticket:(id)arg1 didReturnGeoMapItems:(id)arg2;
- (void)cancelGeocode;
- (void)geocodeAddressString:(id)arg1 inRegion:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)geocodeAddressString:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)geocodeAddressDictionary:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)reverseGeocodeLocation:(id)arg1 heading:(double)arg2 localResultsOnly:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)reverseGeocodeLocation:(id)arg1 heading:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)reverseGeocodeLocation:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)reverseGeocodeLocation:(id)arg1 localResultsOnly:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic, getter=isGeocoding) _Bool geocoding;
- (void)dealloc;
- (id)init;

@end

@interface CLGeocoderInternal : NSObject
{
    CDUnknownBlockType _geocodeCompletionHandler;
    id <GEOMapServiceTicket> _ticket;
    NSObject<OS_dispatch_queue> *_queue;
}

@end

@interface CLHeading : NSObject <NSCopying, NSSecureCoding>
{
    id _internal;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, copy, nonatomic) NSDate *timestamp;
@property(readonly, nonatomic) double z;
@property(readonly, nonatomic) double y;
@property(readonly, nonatomic) double x;
@property(readonly, nonatomic) double headingAccuracy;
@property(readonly, nonatomic) double trueHeading;
@property(readonly, nonatomic) double magneticHeading;
- (id)shortDescription;
@property(readonly, copy, nonatomic) NSString *description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithClientHeading:(CDStruct_b560b707)arg1;

@end

@interface CLHeadingInternal : NSObject <NSCopying>
{
    CDStruct_b560b707 fHeading;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithClientHeading:(CDStruct_b560b707)arg1;

@end

@interface CLInUseAssertion : NSObject
{
    id _internal;
}

+ (id)newAssertionForBundle:(id)arg1 withReason:(id)arg2;
+ (id)newAssertionForBundleIdentifier:(id)arg1 withReason:(id)arg2;
- (void)invalidate;
- (void)dealloc;
- (id)initWithInternal:(id)arg1;

@end

@interface CLInUseAssertionInternal : NSObject
{
    NSString *fBundlePath;
    NSString *fBundleIdentifier;
    NSString *fReason;
    NSObject<OS_dispatch_queue> *fReplyQueue;
    struct CLConnectionClient *fLocationdConnection;
}

- (void)invalidate;
- (id)initWithBundle:(id)arg1 bundleID:(id)arg2 reason:(id)arg3;

@end

@interface CLLocation : NSObject <NSCopying, NSSecureCoding>
{
    id _internal;
}

+ (_Bool)supportsSecureCoding;
- (void)setHorizontalAccuracy:(double)arg1;
@property(readonly, nonatomic) NSString *iso6709Notation;
- (id)propagateLocationToTime:(double)arg1;
- (id)snapToResolution:(double)arg1;
- (double)distanceFromLocation:(id)arg1;
- (double)getDistanceFrom:(id)arg1;
@property(readonly, copy, nonatomic) CLFloor *floor;
@property(readonly, nonatomic) int type;
@property(readonly, nonatomic) double rawCourse;
@property(readonly, nonatomic) double course;
@property(readonly, nonatomic) double speed;
@property(readonly, nonatomic) CDStruct_dcdde258 clientLocation;
@property(readonly, copy, nonatomic) NSDate *timestamp;
@property(readonly, nonatomic) double verticalAccuracy;
@property(readonly, nonatomic) double horizontalAccuracy;
@property(readonly, nonatomic) double altitude;
@property(readonly, nonatomic) CDStruct_c3b9c2ee rawCoordinate;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;
- (id)shortDescription;
@property(readonly, copy, nonatomic) NSString *description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithClientLocation:(CDStruct_dcdde258)arg1 matchInfo:(id)arg2;
- (id)initWithClientLocation:(CDStruct_dcdde258)arg1;
- (id)initWithCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 horizontalAccuracy:(double)arg3 verticalAccuracy:(double)arg4 course:(double)arg5 speed:(double)arg6 timestamp:(id)arg7;
- (id)initWithCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 horizontalAccuracy:(double)arg3 verticalAccuracy:(double)arg4 timestamp:(id)arg5;
- (id)_initWithCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 horizontalAccuracy:(double)arg3 verticalAccuracy:(double)arg4 course:(double)arg5 speed:(double)arg6 timestamp:(id)arg7 floor:(int)arg8;
- (id)initWithLatitude:(double)arg1 longitude:(double)arg2;
- (id)init;
@property(readonly, nonatomic) CLLocationMatchInfo *matchInfo;

@end

@interface CLLocationInternal : NSObject
{
    CDStruct_dcdde258 fLocation;
    CLLocationMatchInfo *fMatchInfo;
}

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithClientLocation:(CDStruct_dcdde258)arg1 matchInfo:(id)arg2;
- (id)initWithClientLocation:(CDStruct_dcdde258)arg1;

@end

@interface CLLocationManager : NSObject
{
    id _internal;
}

+ (_Bool)advertiseAsBeacon:(id)arg1 withPower:(id)arg2;
+ (_Bool)bundleSupported:(id)arg1;
+ (_Bool)shutdownDaemon;
+ (_Bool)dumpLogsWithMessage:(id)arg1;
+ (void)setDefaultEffectiveBundle:(id)arg1;
+ (void)setDefaultEffectiveBundleIdentifier:(id)arg1;
+ (void)setAuthorizationStatusByType:(int)arg1 forBundle:(id)arg2;
+ (void)setAuthorizationStatusByType:(int)arg1 forBundleIdentifier:(id)arg2;
+ (void)setAuthorizationStatus:(_Bool)arg1 forBundle:(id)arg2;
+ (void)setAuthorizationStatus:(_Bool)arg1 forBundleIdentifier:(id)arg2;
+ (int)authorizationStatus;
+ (int)_authorizationStatus;
+ (int)regionMonitoringAuthorizationStatusForBundle:(id)arg1;
+ (int)regionMonitoringAuthorizationStatusForBundleIdentifier:(id)arg1;
+ (int)_regionMonitoringAuthorizationStatusForBundleIdentifier:(id)arg1 bundle:(id)arg2;
+ (int)authorizationStatusForBundle:(id)arg1;
+ (int)authorizationStatusForBundleIdentifier:(id)arg1;
+ (int)_authorizationStatusForBundleIdentifier:(id)arg1 bundle:(id)arg2;
+ (_Bool)deferredLocationUpdatesAvailable;
+ (_Bool)mapCorrectionAvailable;
+ (_Bool)isRangingAvailable;
+ (_Bool)regionMonitoringEnabled;
+ (_Bool)regionMonitoringAvailable;
+ (_Bool)isMonitoringAvailableForClass:(Class)arg1;
+ (_Bool)significantLocationChangeMonitoringAvailable;
+ (_Bool)headingAvailable;
+ (void)setLocationServicesEnabled:(_Bool)arg1;
+ (_Bool)locationServicesEnabled:(_Bool)arg1;
+ (_Bool)locationServicesEnabled;
+ (id)sharedManager;
+ (void)setEntityAuthorization:(unsigned long long)arg1 forLocationDictionary:(id)arg2;
+ (void)setEntityAuthorized:(_Bool)arg1 forLocationDictionary:(id)arg2;
+ (unsigned long long)allowableAuthorizationForLocationDictionary:(id)arg1;
+ (unsigned long long)entityAuthorizationForLocationDictionary:(id)arg1;
+ (_Bool)isEntityAuthorizedForLocationDictionary:(id)arg1;
+ (_Bool)hasUsedBackgroundLocationServices:(id)arg1;
+ (id)dateLocationLastUsedForLocationDictionary:(id)arg1;
+ (unsigned long long)activeLocationServiceTypesForLocationDictionary:(id)arg1;
+ (_Bool)isLocationActiveForLocationDictionary:(id)arg1;
+ (unsigned long long)entityClassesForLocationDictionary:(id)arg1;
+ (unsigned long long)primaryEntityClassForLocationDictionary:(id)arg1;
+ (_Bool)isStatusBarIconEnabledForLocationEntityClass:(unsigned long long)arg1;
+ (void)setStatusBarIconEnabled:(_Bool)arg1 forLocationEntityClass:(unsigned long long)arg2;
- (void)registerAsLocationClient;
@property(nonatomic, getter=isDynamicAccuracyReductionEnabled) _Bool dynamicAccuracyReductionEnabled;
@property(nonatomic, getter=isLocationServicesPreferencesDialogEnabled) _Bool locationServicesPreferencesDialogEnabled;
@property(nonatomic, getter=isPersistentMonitoringEnabled) _Bool persistentMonitoringEnabled;
- (void)requestAlwaysAuthorization;
- (void)requestWhenInUseAuthorization;
- (void)onClientEventSignificantLocationVisit:(id)arg1;
- (void)onClientEventVehicleHeading:(id)arg1;
- (void)onClientEventVehicleSpeed:(id)arg1;
- (void)onClientEventInterrupted:(id)arg1;
- (void)onClientEventBatch:(id)arg1;
- (void)onClientEventAutopauseStatus:(id)arg1;
- (void)onDidBecomeActive:(id)arg1;
- (void)pauseLocationUpdates:(_Bool)arg1;
- (void)resumeLocationUpdates;
- (void)onClientEventRegionSetupCompleted:(id)arg1;
- (void)onClientEventRegionResponseDelayed:(id)arg1;
- (void)onClientEventRangingError:(id)arg1;
- (void)onClientEventRanging:(id)arg1;
- (void)onClientEventRegionError:(id)arg1;
- (void)onClientEventRegionState:(id)arg1;
- (void)onClientEventRegion:(id)arg1;
- (void)onClientEventError:(id)arg1;
- (void)onClientEventHistoricLocation:(id)arg1;
- (void)onClientEventHeadingCalibration:(id)arg1;
- (void)onClientEventHeading:(id)arg1;
- (void)onClientEventLocationUnavailable:(id)arg1;
- (void)onClientEventLocation:(id)arg1;
- (void)onClientEventAuthStatus:(id)arg1;
- (void)onClientEvent:(int)arg1 supportInfo:(id)arg2;
- (id)technologiesInUse;
- (id)appsUsingLocationWithDetails;
- (id)appsUsingLocation;
- (void)resetApps;
@property(readonly, copy, nonatomic) NSSet *rangedRegions;
- (void)stopRangingBeaconsInRegion:(id)arg1;
- (void)startRangingBeaconsInRegion:(id)arg1;
@property(readonly, copy, nonatomic) NSSet *monitoredRegions;
@property(readonly, nonatomic) double maximumRegionMonitoringDistance;
- (void)requestStateForRegion:(id)arg1;
- (void)stopMonitoringForRegion:(id)arg1;
- (void)startMonitoringForRegion:(id)arg1;
- (void)startMonitoringForRegion:(id)arg1 desiredAccuracy:(double)arg2;
- (void)stopMonitoringSignificantLocationChanges;
- (void)startMonitoringSignificantLocationChanges;
- (void)stopTechStatusUpdates;
- (void)startTechStatusUpdates;
- (void)stopAppStatusUpdates;
- (void)startAppStatusUpdates;
- (void)dismissHeadingCalibrationDisplay;
- (void)stopUpdatingHeading;
- (void)startUpdatingHeading;
@property(readonly, copy, nonatomic) CLHeading *heading;
@property(nonatomic) int headingOrientation;
@property(nonatomic) double headingFilter;
@property(readonly, nonatomic) _Bool headingAvailable;
- (void)historicLocationsFromDate:(id)arg1 forInterval:(double)arg2;
- (void)disallowDeferredLocationUpdates;
- (void)allowDeferredLocationUpdatesUntilTraveled:(double)arg1 timeout:(double)arg2;
- (void)stopUpdatingLocation;
- (void)startUpdatingLocation;
- (void)startUpdatingLocationWithPrompt;
- (void)markAsHavingReceivedLocation;
@property(nonatomic) long long activityType;
@property(copy, nonatomic) NSString *purpose;
@property(nonatomic) _Bool privateMode;
@property(readonly, nonatomic) struct __CLClient *internalClient;
@property(readonly, nonatomic) double bestAccuracy;
@property(nonatomic) _Bool supportInfo;
@property(readonly, nonatomic) double expectedGpsUpdateInterval;
@property(readonly, nonatomic) _Bool locationServicesApproved;
@property(readonly, nonatomic) _Bool locationServicesEnabled;
@property(readonly, nonatomic) _Bool locationServicesAvailable;
@property(readonly, copy, nonatomic) CLLocation *location;
@property(nonatomic) _Bool pausesLocationUpdatesAutomatically;
@property(nonatomic) double desiredAccuracy;
@property(nonatomic) double distanceFilter;
@property(nonatomic) id <CLLocationManagerDelegate> delegate;
- (void)dealloc;
- (id)initWithEffectiveBundle:(id)arg1;
- (id)initWithEffectiveBundleIdentifier:(id)arg1;
- (id)init;
- (id)initWithEffectiveBundleIdentifier:(id)arg1 bundle:(id)arg2;
- (void)stopUpdatingVehicleHeading;
- (void)startUpdatingVehicleHeading;
- (void)stopUpdatingVehicleSpeed;
- (void)startUpdatingVehicleSpeed;
@property(nonatomic, getter=isMatchInfoEnabled) _Bool matchInfoEnabled;
- (void)stopMonitoringVisits;
- (void)startMonitoringVisits;

@end

@interface CLLocationManagerInternal : NSObject
{
    struct __CLClient *fClient;
    id <CLLocationManagerDelegate> fDelegate;
    double fDistanceFilter;
    double fDesiredAccuracy;
    _Bool fUpdatingLocation;
    CDStruct_dcdde258 fLocation;
    NSString *fLocationEventType;
    _Bool fCapabilitiesValid;
    struct {
        double bestAccuracy;
    } fCapabilities;
    _Bool fUpdatingHeading;
    double fHeadingFilter;
    int fHeadingOrientation;
    _Bool fPersistentMonitoringEnabled;
    _Bool fAllowsLocationPrompts;
    _Bool fDynamicAccuracyReductionEnabled;
    _Bool fPreviousAuthorizationStatusValid;
    int fPreviousAuthorizationStatus;
    long long fActivityType;
    int fPausesLocationUpdatesAutomatically;
    _Bool fPaused;
    _Bool fAllowsMapCorrection;
    _Bool fBatchingLocation;
    _Bool fUpdatingVehicleSpeed;
    _Bool fUpdatingVehicleHeading;
    _Bool fMatchInfoEnabled;
    _Bool fCourtesyPromptNeeded;
    NSMutableSet *fRangedRegions;
}

@property(readonly, nonatomic) NSMutableSet *rangedRegions; // @synthesize rangedRegions=fRangedRegions;
- (void)dealloc;
- (void)performCourtesyPromptIfNeeded;
- (void)stopUpdatingLocationAutoPaused;
- (int)PausesLocationUpdatesAutomatically;
- (void)setPausesLocationUpdatesAutomatically:(int)arg1;
- (id)initWithInfo:(id)arg1 bundleIdentifier:(id)arg2 bundle:(id)arg3;

@end

@interface CLLocationManagerRoutine : NSObject
{
    _CLLocationManagerRoutineProxy *_locationManagerRoutineProxy;
}

@property(retain, nonatomic) _CLLocationManagerRoutineProxy *locationManagerRoutineProxy; // @synthesize locationManagerRoutineProxy=_locationManagerRoutineProxy;
@property(nonatomic) id <CLLocationManagerDelegate> delegate;
- (void)stopUpdatingLocation;
- (void)startUpdatingLocation;
- (void)dealloc;
- (id)init;

@end

@interface CLLocationMatchInfo : NSObject <NSCopying, NSSecureCoding>
{
    id _internal;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic, getter=isMatchShifted) _Bool matchShifted;
@property(readonly, nonatomic) int matchRoadClass;
@property(readonly, nonatomic) int matchFormOfWay;
@property(readonly, nonatomic) double matchCourse;
@property(readonly, nonatomic) CDStruct_c3b9c2ee matchCoordinate;
@property(readonly, nonatomic) long long matchQuality;
- (id)shortDescription;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMatchQuality:(long long)arg1 matchCoordinate:(CDStruct_c3b9c2ee)arg2 matchCourse:(double)arg3 matchFormOfWay:(int)arg4 matchRoadClass:(int)arg5 matchShifted:(_Bool)arg6;

@end

@interface CLLocationMatchInfoInternal : NSObject <NSCopying>
{
    long long fMatchQuality;
    CDStruct_2c43369c fMatchCoordinate;
    double fMatchCourse;
    int fMatchFormOfWay;
    int fMatchRoadClass;
    _Bool fMatchShifted;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithMatchQuality:(long long)arg1 matchCoordinate:(CDStruct_c3b9c2ee)arg2 matchCourse:(double)arg3 matchFormOfWay:(int)arg4 matchRoadClass:(int)arg5 matchShifted:(_Bool)arg6;

@end

@interface CLPlacemark : NSObject <NSCopying, NSSecureCoding>
{
    CLPlacemarkInternal *_internal;
}

+ (id)placemarkWithGEOMapItem:(id)arg1;
+ (_Bool)supportsSecureCoding;
- (id)description;
- (id)_geoMapItem;
@property(readonly, copy, nonatomic) NSString *ocean;
@property(readonly, copy, nonatomic) NSString *inlandWater;
@property(readonly, copy, nonatomic) NSArray *areasOfInterest;
- (id)formattedAddressLines;
- (id)fullThoroughfare;
@property(readonly, copy, nonatomic) NSString *country;
@property(readonly, copy, nonatomic) NSString *ISOcountryCode;
@property(readonly, copy, nonatomic) NSString *postalCode;
@property(readonly, copy, nonatomic) NSString *subAdministrativeArea;
@property(readonly, copy, nonatomic) NSString *administrativeArea;
@property(readonly, copy, nonatomic) NSString *subLocality;
@property(readonly, copy, nonatomic) NSString *locality;
@property(readonly, copy, nonatomic) NSString *subThoroughfare;
@property(readonly, copy, nonatomic) NSString *thoroughfare;
@property(readonly, copy, nonatomic) NSString *name;
@property(readonly, copy, nonatomic) NSDictionary *addressDictionary;
@property(readonly, copy, nonatomic) CLRegion *region;
@property(readonly, copy, nonatomic) CLLocation *location;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithPlacemark:(id)arg1;
- (id)initWithLocation:(id)arg1 addressDictionary:(id)arg2 region:(id)arg3 areasOfInterest:(id)arg4;
- (id)_initWithGeoMapItem:(id)arg1;

@end

@interface CLPlacemarkInternal : NSObject
{
    CLLocation *location;
    NSDictionary *addressDictionary;
    CLRegion *region;
    NSArray *areasOfInterest;
    GEOMapItemStorage *geoMapItemStorage;
}

@end

@interface CLSimulationManager : NSObject
{
    double _locationDistance;
    double _locationInterval;
    double _locationSpeed;
    int _locationRepeatBehavior;
    int _locationDeliveryBehavior;
}

@property(nonatomic) int locationDeliveryBehavior; // @synthesize locationDeliveryBehavior=_locationDeliveryBehavior;
@property(nonatomic) int locationRepeatBehavior; // @synthesize locationRepeatBehavior=_locationRepeatBehavior;
@property(nonatomic) double locationSpeed; // @synthesize locationSpeed=_locationSpeed;
@property(nonatomic) double locationInterval; // @synthesize locationInterval=_locationInterval;
@property(nonatomic) double locationDistance; // @synthesize locationDistance=_locationDistance;
- (void)flush;
- (void)setSimulatedWifiPower:(_Bool)arg1;
- (void)stopWifiSimulation;
- (void)startWifiSimulation;
- (void)setWifiScanResults:(id)arg1;
- (void)setSimulatedCellRegistrationStatus:(_Bool)arg1;
- (void)stopCellSimulation;
- (void)startCellSimulation;
- (void)setSimulatedCell:(id)arg1;
- (void)clearSimulatedCells;
- (void)stopLocationSimulation;
- (void)startLocationSimulation;
- (void)appendSimulatedLocation:(id)arg1;
- (void)clearSimulatedLocations;
- (void)loadScenarioFromURL:(id)arg1;
- (void)selectScenario:(id)arg1;
- (id)localizedNameForScenario:(id)arg1;
- (id)availableScenarios;
- (id)scenariosPath;
- (id)init;

@end

@interface CLTilesManagerClient : NSObject
{
    NSObject<OS_xpc_object> *fXpcConnection;
    NSObject<OS_dispatch_queue> *fQueue;
    NSDictionary *fNotificationHandlers;
}

+ (id)sharedClient;
+ (void)initialize;
- (_Bool)unregisterFrom:(id)arg1;
- (_Bool)registerTo:(id)arg1 onQueue:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)sendNotificationRegistrationMessage:(id)arg1 isRegister:(_Bool)arg2;
- (_Bool)precacheHint:(id)arg1 onQueue:(id)arg2 responseBlock:(CDUnknownBlockType)arg3;
- (_Bool)executeAsynchronousQuery:(id)arg1 onQueue:(id)arg2 responseBlock:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)init;
- (void)onNotificationReceived:(id)arg1;
- (void)reconnect;

@end

@interface CLVehicleHeading : NSObject <NSCopying, NSSecureCoding>
{
    id _internal;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) NSDate *timestamp;
@property(readonly, nonatomic) double trueHeading;
- (id)shortDescription;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithClientVehicleHeading:(CDStruct_c3b9c2ee)arg1;

@end

@interface CLVehicleHeadingInternal : NSObject <NSCopying>
{
    struct {
        double trueHeading;
        double timestamp;
    } fHeading;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithClientVehicleHeading:(CDStruct_c3b9c2ee)arg1;

@end

@interface CLVehicleSpeed : NSObject <NSCopying, NSSecureCoding>
{
    id _internal;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) NSDate *timestamp;
@property(readonly, nonatomic) double speed;
- (id)shortDescription;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithClientVehicleSpeed:(CDStruct_c3b9c2ee)arg1;

@end

@interface CLVehicleSpeedInternal : NSObject <NSCopying>
{
    struct {
        double speed;
        double timestamp;
    } fSpeed;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithClientVehicleSpeed:(CDStruct_c3b9c2ee)arg1;

@end

@interface CLVisit : NSObject <NSSecureCoding, NSCopying>
{
    NSDate *_arrivalDate;
    NSDate *_departureDate;
    double _horizontalAccuracy;
    NSDate *_detectionDate;
    CDStruct_2c43369c _coordinate;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, copy, nonatomic) NSDate *detectionDate; // @synthesize detectionDate=_detectionDate;
@property(readonly, nonatomic) double horizontalAccuracy; // @synthesize horizontalAccuracy=_horizontalAccuracy;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate; // @synthesize coordinate=_coordinate;
@property(readonly, copy, nonatomic) NSDate *departureDate; // @synthesize departureDate=_departureDate;
@property(readonly, copy, nonatomic) NSDate *arrivalDate; // @synthesize arrivalDate=_arrivalDate;
@property(readonly, nonatomic) _Bool hasDepartureDate;
@property(readonly, nonatomic) _Bool hasArrivalDate;
- (id)description;
- (void)dealloc;
- (id)initWithCoordinate:(CDStruct_c3b9c2ee)arg1 horizontalAccuracy:(double)arg2 arrivalDate:(id)arg3 departureDate:(id)arg4 detectionDate:(id)arg5;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface GEOLocation (CLGeocoderExtras)
- (id)_initWithCLClientLocation:(const CDStruct_dcdde258 *)arg1;
@end

@interface GEOMapRegion (CLGeocoderExtras)
- (id)_initWithCLRegion:(id)arg1;
@end

@interface _CLLocationManagerRoutineProxy : NSObject <CLLocationManagerRoutineClientInterface>
{
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _updating;
    NSXPCConnection *_connection;
    id <CLLocationManagerDelegate> _delegate;
    CLLocationManagerRoutine *_locationManagerRoutine;
}

@property(nonatomic) _Bool updating; // @synthesize updating=_updating;
@property(nonatomic) CLLocationManagerRoutine *locationManagerRoutine; // @synthesize locationManagerRoutine=_locationManagerRoutine;
@property(nonatomic) id <CLLocationManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void)createConnection;
- (void)didUpdateLocations:(id)arg1;
- (void)dealloc;
- (id)initWithCLLocationManagerRoutine:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

