//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AlphaAtlas {
    unsigned int _field1;
    _Bool _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    float _field6;
    struct Texture2D *_field7;
};

struct AltitudeDebugSettings {
    _Bool altitudePauseLoading;
    _Bool altitudeTexturePaging;
    _Bool altitudeShowTileBounds;
    _Bool altitudeThreadDrawing;
    _Bool altitudeHighResSatellite;
    _Bool altitudeMipmapSatellite;
    _Bool altitudeMipmapFlyover;
    _Bool altitudeMipmapObjectTree;
    _Bool altitudeShowNightLight;
    float lodScale;
    float tileQualityThreshold;
    float forceGridTime;
};

struct AnchorContext {
    _Bool _field1;
    id _field2;
    id _field3;
};

struct AnchorFactory;

struct AngularSpringDamper {
    double _position;
    double _velocity;
    double _acceleration;
    double _kSpring;
    double _kDamper;
    double _restingPosition;
    _Bool _directionIsPositive;
};

struct BaseVertexData;

struct BitmapData;

struct BitmapDataBase;

struct BlendState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    int _field3;
};

struct Box<double, 2> {
    struct Matrix<double, 2, 1> _minimum;
    struct Matrix<double, 2, 1> _maximum;
};

struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
};

struct Box<unsigned int, 2> {
    struct Matrix<unsigned int, 2, 1> _minimum;
    struct Matrix<unsigned int, 2, 1> _maximum;
};

struct BufferLoadItem;

struct BufferMemory {
    struct BufferUser *_user;
    struct ResourceAccessor *_accessor;
    struct Range _range;
    int _access;
    int _sync;
    char *_data;
};

struct BufferUser;

struct BuildingMesh;

struct CGColorSpace;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CameraManager {
    CDUnknownFunctionPointerType *_vptr$CameraManager;
    _Bool _panBegin;
    _Bool _panInProgress;
    _Bool _panEnd;
    struct Vector2i _panCurrentCursor;
    struct Vector2i _panPreviousCursor;
    struct Vector2i _panStartCursor;
    struct Position3d _panStartPosition;
    double _panDistance;
    _Bool _panAtStartPosition;
    _Bool _rotateBegin;
    _Bool _rotateInProgress;
    _Bool _rotateEnd;
    struct Position3d _rotateStartPosition;
    struct Vector2i _rotateCurrentCursor;
    double _rotateAngle;
    _Bool _tiltBegin;
    _Bool _tiltInProgress;
    _Bool _tiltEnd;
    struct Position3d _tiltStartPosition;
    struct Vector2i _tiltCurrentCursor;
    double _tiltAngle;
    _Bool _zoomBegin;
    _Bool _zoomInProgress;
    _Bool _zoomEnd;
    struct Position3d _zoomStartPosition;
    struct Vector2i _zoomCurrentCursor;
    double _zoomFactor;
    _Bool _zoomRotateToNorth;
    _Bool _useTiltLimit;
    int _tiltLimitMode;
    _Bool _tiltLimitPushDownEnabled;
    _Bool _tiltLimitTransferInProgress;
    _Bool _tiltLimitPushDown;
    double _startPushDownTilt;
    double _tiltLimitTransferFraction;
    double _startTiltLimitTilt;
    struct PositionGeo3d _startTiltLimitPosition;
    struct Vector3d _startTiltLimitDirection;
    double _fullZoomTiltLimitFactor;
};

struct ClearItem {
    unsigned char colorMask;
    Matrix_5173352a color;
    _Bool clearDepthBuffer;
    float depth;
    unsigned char clearStencilBuffer;
    int stencil;
    unsigned char scissorRegion;
    struct Box<unsigned int, 2> scissorRect;
};

struct Color {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
};

struct ColorState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
};

struct CommandBuffer {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct RenderQueue *_field3;
    struct ClearItem *_field4;
    struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *>> _field5;
    struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> _field6;
    struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> _field7;
    struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> _field8;
    struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery>> _field9;
    id _field10;
};

struct CommandBufferIdSet {
    struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> _ids;
};

struct CompressedMeshMesh {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct shared_ptr<ggl::VertexData> _field6;
    struct shared_ptr<ggl::IndexData> _field7;
    struct shared_ptr<ggl::PolygonBase::CompressedMeshVertexData> _field8;
};

struct CompressedMeshVertexData;

struct CullingGridWithHeight {
    float _heights[16];
};

struct DataWrite<ggl::ColoredText::MyVertexElement>;

struct DataWrite<ggl::PolygonBase::DefaultVboVertexElement> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonMesh::DefaultVboVertexElement> {
    struct BufferMemory _memory;
};

struct DataWrite<unsigned short> {
    struct BufferMemory _memory;
};

struct DebugConsole {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
    Matrix_8746f91e _field3;
    Matrix_8746f91e _field4;
    unsigned long long _field5;
    struct RenderItem *_field6;
    struct unique_ptr<ggl::DataWrite<ggl::ColoredText::MyVertexElement>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::MyVertexElement>>> _field7;
    unsigned long long _field8;
    Matrix_8746f91e *_field9;
    struct Matrix<unsigned char, 4, 1> _field10;
    struct Matrix<unsigned char, 4, 1> _field11;
    float _field12;
};

struct DebugConsoleManager;

struct DepthState {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    float _field6;
    float _field7;
};

struct Device {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
};

struct FillUniformData;

struct Flow {
    long long _field1;
    float _field2;
    float _field3;
    int _field4;
};

struct FogUniformData;

struct FontOptions {
    struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> _field1;
    float _field2;
    float _field3;
    float _field4;
    _Bool _field5;
    _Bool _field6;
};

struct FragmentBuffer;

struct FragmentedPool<ggl::Building::Shader::Setup>;

struct FragmentedPool<ggl::BuildingFlat::Shader::Setup>;

struct FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>;

struct FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>;

struct FragmentedPool<ggl::BuildingShadow::Shader::Setup>;

struct FragmentedPool<ggl::BuildingTop::Shader::Setup>;

struct FragmentedPool<ggl::Debug::BaseMesh>;

struct FragmentedPool<ggl::Debug::Shader::Setup>;

struct FragmentedPool<ggl::DebugPoints::Shader::Setup>;

struct FragmentedPool<ggl::Glow::Shader::Setup>;

struct FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>;

struct FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>;

struct FragmentedPool<ggl::PolygonFill::Shader::Setup>;

struct FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>;

struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>;

struct FragmentedPool<ggl::PolygonStroke::Shader::Setup>;

struct FragmentedPool<ggl::PrefilteredLine::Shader::Setup>;

struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>;

struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>;

struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>;

struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>;

struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>;

struct FragmentedPool<ggl::RealisticRoad::Shader::Setup>;

struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>;

struct FragmentedPool<ggl::RealisticTexture::Shader::Setup>;

struct FragmentedPool<ggl::RenderItem>;

struct FreeList;

struct GLDevice;

struct GLRenderer {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    _Bool _field5;
    float _field6;
    _Bool _field7;
    id _field8;
    struct RenderState *_field9;
    struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext>> _field10;
    struct RenderTarget *_field11;
    struct TransactionBuffer _field12;
    struct unique_ptr<ggl::PerformanceHUD, std::__1::default_delete<ggl::PerformanceHUD>> _field13;
    struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> _field14;
    struct deque<std::__1::pair<unsigned long, void *>, std::__1::allocator<std::__1::pair<unsigned long, void *>>> _field15;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _field16;
    struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> _field17;
    struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> _field18;
    unsigned int _field19;
    struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> _field20;
};

struct GeoCoordinates {
    struct Longitude _field1;
    struct Latitude _field2;
};

struct GeoServicesLoadJob;

struct GlobeAdapter {
    struct shared_ptr<vk::GlobeAdapterData> _field1;
    struct GlobeView *_field2;
    struct VKPoint _field3;
    struct {
        double _field1;
        double _field2;
    } _field4;
    struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> _field5;
    shared_ptr_dd1f7020 _field6;
};

struct GlobeAdapterData;

struct GlobeView {
    CDUnknownFunctionPointerType *_field1;
};

struct GridBaseUniformData;

struct GridMesh;

struct GridUniformData;

struct Incident {
    struct GeoCoordinates _field1;
    struct String _field2;
    struct String _field3;
    int _field4;
    struct String _field5;
    struct String _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    long long _field10;
    int _field11;
    unsigned char _field12;
    _Bool _field13;
    int _field14;
    unsigned char _field15;
    unsigned char _field16;
};

struct IndexData;

struct IndexDataTyped<unsigned short>;

struct InfoLabel;

struct IsoAlphaAtlas {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    float _field5;
    struct Texture2D *_field6;
};

struct LabelFeatureInfo {
    unsigned long long _field1;
    unsigned char _field2;
    struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field3;
};

struct LabelManager;

struct LabelMapTile;

struct LabelNavJunctionInfo;

struct LabelTile;

struct Latitude {
    unsigned int _field1;
};

struct Loader {
    struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> _loaderImpl;
};

struct LoaderImpl;

struct Longitude {
    unsigned int _field1;
};

struct MapCamera {
    struct View *_view;
    struct Viewport *_viewport;
    void *_layoutContext;
};

struct Matrix<double, 2, 1> {
    double _e[2];
};

struct Matrix<double, 3, 1> {
    double _e[3];
};

struct Matrix<double, 4, 1> {
    double _field1[4];
};

struct Matrix<double, 4, 4> {
    double _e[16];
};

struct Matrix<float, 2, 1> {
    float _e[2];
};

struct Matrix<float, 4, 1> {
    float _e[4];
};

struct Matrix<float, 4, 4> {
    float _e[16];
};

struct Matrix<int, 2, 1> {
    int _field1[2];
};

struct Matrix<unsigned char, 4, 1> {
    unsigned char _field1[4];
};

struct Matrix<unsigned int, 2, 1> {
    unsigned int _e[2];
};

struct Mesh {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct shared_ptr<ggl::VertexData> _field6;
    struct shared_ptr<ggl::IndexData> _field7;
};

struct MeshMesh;

struct MeshSet<ggl::PolygonBase::MeshMesh, ggl::PolygonBase::DefaultVboVertexElement> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_54f0f967 _meshes;
    struct DataWrite<ggl::PolygonBase::DefaultVboVertexElement> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonMesh::MeshMesh, ggl::PolygonMesh::DefaultVboVertexElement> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_0edf1665 _meshes;
    struct DataWrite<ggl::PolygonMesh::DefaultVboVertexElement> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshVendor<ggl::Building::BuildingMesh> {
    struct vector<ggl::Building::BuildingMesh *, std::__1::allocator<ggl::Building::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::Glow::MeshMesh> {
    struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
};

struct MeshVendor<ggl::PolygonBase::CompressedMeshMesh>;

struct MeshVendor<ggl::PolygonMesh::MeshMesh> {
    struct vector<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
};

struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> _field1;
    struct PrefilteredLineMesh *_field2;
};

struct MultiRange;

struct Mutex {
    void *mMutex;
};

struct NavContext {
    CDUnknownFunctionPointerType *_field1;
    struct LabelManager *_field2;
};

struct NavLabel;

struct OESContext;

struct OffscreenQueue;

struct Pass;

struct PatternedBatch;

struct PatternedLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::PatternedBatch *, std::__1::allocator<vk::PatternedBatch *>> _field2;
    struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_1fee3c91 _field5;
    struct shared_ptr<ggl::RenderState> _field6[2];
    unsigned long long _field7;
    struct PatternedManager *_field8;
    id _field9;
};

struct PatternedManager;

struct PendingQuery;

struct PerformanceHUD;

struct PolygonState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    int _field3;
    int _field4;
};

struct PolylineCoordinate {
    unsigned int index;
    float offset;
};

struct Pool<ggl::RenderItem> {
    struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> mAllocatedSlabs;
    unsigned long long mElementsPerSlab;
    unsigned long long mSlabSize;
    struct FreeList *mFreeElement;
};

struct Pos2DUVMesh {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct shared_ptr<ggl::VertexData> _field6;
    struct shared_ptr<ggl::IndexData> _field7;
    struct shared_ptr<ggl::Texture::Pos2DUVVertexData> _field8;
};

struct Pos2DUVVertexData;

struct Position3d {
    double _latitude;
    double _longitude;
    double _height;
};

struct PositionGeo3d {
    double _x;
    double _y;
    double _z;
};

struct PrefilteredLineMesh;

struct Range {
    unsigned long long _start;
    unsigned long long _count;
};

struct RealisticUniformData {
    unsigned long long _field1;
    unsigned long long _field2;
    struct UniformCReflection *_field3;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field4;
};

struct RealisticVertexData;

struct Record {
    unsigned int _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
    long long _field5;
    int _field6;
    float _field7;
    float _field8;
};

struct RenderBuffer;

struct RenderItem {
    CDUnknownFunctionPointerType *_vptr$RenderItem;
    char *_name;
    struct RenderState *_renderState;
    struct ShaderSetup *_shaderSetup;
    unsigned int _stencilRefValue;
    unsigned int _renderOrder;
    float _lineWidth;
    struct Mesh *_mesh;
    struct Range _range;
    struct Range *_ranges;
    unsigned long long _rangeCount;
};

struct RenderItemBatcher {
    struct vector<ggl::Range, std::__1::allocator<ggl::Range>> _activeRanges;
    unsigned long long _rangePoolCount;
    struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> _rangePool;
    struct vector<ggl::Range, std::__1::allocator<ggl::Range>> _activeRanges;
    struct RenderItem *_prototype;
    struct Pool<ggl::RenderItem> _pool;
    unsigned long long _rangePoolCount;
    struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> _rangePool;
};

struct RenderResource;

struct RenderState {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct DepthState _field3;
    struct ColorState _field4;
    struct BlendState _field5;
    struct StencilState _field6;
    struct ScissorState _field7;
    struct PolygonState _field8;
};

struct RenderStyle {
    float *_blendFactor;
    struct StyleData *_sourceStyleData;
    struct StyleData *_targetStyleData;
};

struct RenderTarget {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *>> _field6;
    struct FragmentBuffer *_field7;
    unsigned int _field8;
    unsigned int _field9;
    _Bool _field10;
};

struct RenderTargetOperation {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
};

struct RenderTransaction;

struct RenderTree {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct Renderer {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    _Bool _field5;
    float _field6;
};

struct ResourceAccessor {
    CDUnknownFunctionPointerType *_field1;
};

struct ResourceManager;

struct RoadBatch;

struct RoadLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[4];
    shared_ptr_1fee3c91 _field5;
    struct shared_ptr<ggl::RenderState> _field6[4];
    unsigned long long _field7;
    struct RoadManager *_field8;
    id _field9;
};

struct RoadManager;

struct RouteJunctionInfo;

struct RouteLineArrowManager;

struct RouteLineLayer;

struct RouteLineManager;

struct RouteSegment;

struct ScissorState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    Box_3fb92e00 _field3;
};

struct Setup {
    CDUnknownFunctionPointerType *_vptr$ShaderSetup;
    struct vector<ggl::UniformDataElement, std::__1::allocator<ggl::UniformDataElement>> _dataArray;
    struct vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *>> _textures;
    struct shared_ptr<ggl::Shader> _shader;
};

struct Shader;

struct ShaderLoadItem;

struct ShaderSetup;

struct SimpleGridUniformData;

struct SkyMesh;

struct SkyUniformData;

struct SpringDamper {
    double _position;
    double _velocity;
    double _acceleration;
    double _kSpring;
    double _kDamper;
    double _restingPosition;
    _Bool _directionIsPositive;
};

struct StencilManager {
    unsigned char _stencilStart;
    unsigned char _stencilEnd;
    unsigned char _stencilMax;
    struct ClearItem _stencilResetItem;
};

struct StencilState {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    _Bool _field3;
    unsigned int _field4;
    int _field5;
    int _field6;
    unsigned int _field7;
    int _field8;
    int _field9;
    int _field10;
};

struct String {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct StyleData {
    struct {
        unsigned int width:1;
        unsigned int strokeWidth:1;
        unsigned int fillColor:1;
        unsigned int strokeColor:1;
        unsigned int fillTexture:1;
        unsigned int obscuredFillTexture:1;
        unsigned int travelledFillTexture:1;
        unsigned int buildingStrokeWidth3d:1;
        unsigned int buildingStrokeColor3d:1;
        unsigned int brightness:1;
        unsigned int puckCircleBrightness:1;
        unsigned int puckArrowBrightness:1;
        unsigned int puckArrowColor:1;
        unsigned int puckArrowColorStale:1;
        unsigned int puckSize:1;
        unsigned int puckOffset:1;
        unsigned int shieldFillColor:1;
    } hasValueInStylesheet;
    struct map<gss::PropertyID, bool, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, bool>>> _boolMap;
    struct map<gss::PropertyID, float, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, float>>> _floatMap;
    struct map<gss::PropertyID, unsigned char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned char>>> _uint8Map;
    struct map<gss::PropertyID, int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, int>>> _intMap;
    struct map<gss::PropertyID, unsigned int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned int>>> _uintMap;
    struct map<gss::PropertyID, gm::Matrix<float, 4, 1>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gm::Matrix<float, 4, 1>>>> _colorMap;
    struct map<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> _stringMap;
    struct map<gss::PropertyID, gss::StyleDataPair, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::StyleDataPair>>> _pairMap;
    struct map<gss::PropertyID, gss::SparseRamp<bool>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<bool>>>> _boolRampMap;
    struct map<gss::PropertyID, gss::SparseRamp<float>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<float>>>> _floatRampMap;
    struct map<gss::PropertyID, gss::SparseRamp<unsigned char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned char>>>> _uint8RampMap;
    struct map<gss::PropertyID, gss::SparseRamp<int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<int>>>> _intRampMap;
    struct map<gss::PropertyID, gss::SparseRamp<unsigned int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned int>>>> _uintRampMap;
    struct map<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>>> _colorRampMap;
    struct map<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>> _stringRampMap;
    struct map<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>>> _pairRampMap;
    struct map<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>>> _linePatternMap;
    struct map<int, gss::StyleData, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, gss::StyleData>>> _subStyleDataMap;
};

struct StyleMatchingTree {
    int _field1;
    struct unordered_map<unsigned long long, md::StyleMatchingTree *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::StyleMatchingTree *>>> _field2;
    struct _retain_ptr<VKCartoStyle *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field3;
    unsigned int _field4;
};

struct StyleQuery;

struct StyleResolutionSession {
    struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field1;
    struct unordered_map<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<md::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<md::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> _field2;
    _Bool _field3;
    long long _field4;
    unsigned long long _field5;
};

struct Texture2D {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    int _field7;
    int _field8;
    int _field9;
    float _field10;
    struct TextureDataAbstract *_field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    unsigned int _field15;
    unsigned int _field16;
    int _field17;
    int _field18;
};

struct Texture2DLoadItem;

struct TextureBase;

struct TextureBuffer;

struct TextureData2D {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    int _field3;
    unsigned int _field4;
    unsigned int _field5;
    char *_field6;
    char **_field7;
    unsigned long long _field8;
};

struct TextureDataAbstract;

struct TexturePool;

struct TexturedDrawable {
    struct unique_ptr<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>>> _field1;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _field2;
    shared_ptr_479d1306 _field3;
    id _field4;
    shared_ptr_479d1306 _field5;
    id _field6;
    shared_ptr_6e6219d6 _field7;
};

struct TileExclusionArea;

struct TrafficAccum {
    int _field1;
    struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> _field2;
    int _field3;
    int _field4;
    int _field5;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> *_field6;
    int _field7;
    CDStruct_183601bc *_field8;
    shared_ptr_6e6219d6 _field9;
    int _field10;
    float _field11;
};

struct TrafficBatch;

struct TrafficDynamicTile;

struct TrafficLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<vk::TrafficBatch *, std::__1::allocator<vk::TrafficBatch *>> _field2;
    struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> _field3;
    struct RenderState *_field4[1];
    shared_ptr_1fee3c91 _field5;
    struct shared_ptr<ggl::RenderState> _field6[1];
    unsigned long long _field7;
    struct TrafficManager *_field8;
    id _field9;
};

struct TrafficManager;

struct TrafficSegment {
    struct PolylineCoordinate _field1;
    char _field2;
};

struct TrafficSkeletonTile {
    struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> m_records;
};

struct TransactionBuffer {
    struct deque<std::__1::shared_ptr<ggl::RenderTransaction>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>>> _field1;
};

struct UniformCReflection;

struct UniformDataElement;

struct VGLBitmapInfo {
    unsigned long long width;
    unsigned long long height;
    unsigned long long bitsPerComponent;
    unsigned long long bitsPerPixel;
    unsigned long long bytesPerRow;
    struct CGColorSpace *space;
    unsigned int bitmapInfo;
};

struct VKCacheKey {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    unsigned int d;
};

struct VKCameraState {
    struct VKPoint position;
    CDStruct_aa5aacbc orientation;
    float aspectRatio;
    float verticalFieldOfView;
};

struct VKCircularBuffer<double> {
    struct vector<double, std::__1::allocator<double>> _field1;
    unsigned long long _field2;
    _Bool _field3;
    double _field4;
};

struct VKEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    struct VKPoint edgeOrigin[6];
    Matrix_6e1d3589 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct VKGlobeRouteStyle {
    float _field1;
    float _field2;
    float _field3;
    struct Color _field4;
    struct Color _field5;
    struct Color _field6;
    struct Color _field7;
    struct Color _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    int _field14;
    shared_ptr_6e6219d6 _field15;
    shared_ptr_6e6219d6 _field16;
};

struct VKGlobeStylesheet;

struct VKLabelNavRouteRoadEdge {
    struct PolylineCoordinate _field1;
    struct PolylineCoordinate _field2;
    CDStruct_183601bc *_field3;
};

struct VKLabelStyle {
    _Bool _field1;
    unsigned int _field2;
    unsigned int _field3;
    float _field4;
    _Bool _field5;
    Matrix_5173352a _field6;
    Matrix_5173352a _field7;
    unsigned int _field8;
    float _field9;
    float _field10;
    int _field11;
    CDStruct_44d855de _field12;
    int _field13;
    _Bool _field14;
    float _field15;
    float _field16;
    float _field17;
    float _field18;
    Matrix_5173352a _field19;
    Matrix_5173352a _field20;
    int _field21;
    int _field22;
    long long _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    float _field27;
    float _field28;
    float _field29;
    float _field30;
    float _field31;
    float _field32;
    float _field33;
    float _field34;
    float _field35;
    float _field36;
    _Bool _field37;
    int _field38;
    float _field39;
    float _field40;
    float _field41;
    unsigned char _field42;
    unsigned char _field43;
    unsigned short _field44;
    unsigned char _field45;
    unsigned char _field46;
    unsigned char _field47;
    unsigned char _field48;
    unsigned char _field49;
    _Bool _field50;
    _Bool _field51;
    float _field52;
    int _field53;
    char _field54;
    _Bool _field55;
    float _field56;
    char _field57;
    char _field58;
    struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> _field59;
    struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> _field60;
    struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> _field61;
    struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> _field62;
    struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> _field63;
    Matrix_5173352a _field64;
    _Bool _field65;
    struct FontOptions _field66;
};

struct VKNavigationCameraModel {
    double _halfVerticalFov;
    double _horizontalFov;
    double _tanHalfHorizontalFov;
    double _courseOverride;
    struct SpringDamper _pitchSpring;
    struct AngularSpringDamper _courseSpring;
    struct SpringDamper _referenceScreenOffsetSpring;
    struct SpringDamper _boomLengthSpring;
    State_3e0671f0 _targetState;
    double _previousUpdateTime;
};

struct VKPerformanceTestResult_struct {
    char *_field1;
    float _field2[5];
};

struct VKPoint {
    double x;
    double y;
    double z;
};

struct VKProfileSparseRamp<_VGLColor> {
    union _u {
        struct VKProfileSparseRampValue {
            struct _VGLColor {
                float r;
                float g;
                float b;
                float a;
            } value;
            unsigned char hi;
        } v[2];
        struct _VGLColor *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<bool> {
    union _u {
        struct VKProfileSparseRampValue {
            _Bool value;
            unsigned char hi;
        } v[2];
        _Bool *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<float> {
    union _u {
        struct VKProfileSparseRampValue {
            float value;
            unsigned char hi;
        } v[2];
        float *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<int> {
    union _u {
        struct VKProfileSparseRampValue {
            int value;
            unsigned char hi;
        } v[2];
        int *extra;
    } u;
    unsigned char count;
};

struct VKRasterTileKey {
    unsigned int x;
    unsigned int y;
    unsigned int z;
    unsigned int pointSize;
};

struct VKRequestKey {
    struct {
        struct {
            double _field1;
            double _field2;
        } _field1;
        struct {
            double _field1;
            double _field2;
        } _field2;
    } _field1;
    long long _field2;
    struct CGSize _field3;
    unsigned int _field4;
    unsigned short _field5;
};

struct VKTileKey {
    unsigned int z;
    int x;
    int y;
    unsigned int pointSize;
};

struct VariantUniformData;

struct Vector2i {
    int _x;
    int _y;
};

struct Vector3d {
    double _x;
    double _y;
    double _z;
};

struct VertexData;

struct View;

struct ViewTransform;

struct ViewUniformData;

struct Viewer {
    CDUnknownFunctionPointerType *_field1;
};

struct Viewport;

struct _GEOGenericContainer<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>>> _list;
    struct unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOTileKey {
    unsigned int z:6;
    unsigned int x:26;
    unsigned int y:26;
    unsigned int type:6;
    unsigned int pixelSize:8;
    unsigned int textScale:8;
    unsigned int provider:8;
    unsigned int expires:1;
    unsigned int reserved1:7;
    unsigned char reserved2[4];
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _VKRealisticPolygonMetaData;

struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep {
        union {
            struct __long {
                unsigned long long _field1;
                unsigned long long _field2;
                char *_field3;
            } _field1;
            struct __short {
                union {
                    unsigned char _field1;
                    char _field2;
                } _field1;
                char _field2[23];
            } _field2;
            struct __raw {
                unsigned long long _field1[3];
            } _field3;
        } _field1;
    } _field1;
};

struct __hash_node<GEOComposedRouteSection *, void *>;

struct __hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>;

struct __hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>;

struct __hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>;

struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>;

struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>;

struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>;

struct __hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>;

struct __hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>;

struct __hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>;

struct __hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>;

struct __list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>;

struct __list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>;

struct __list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _fast_shared_ptr_control;

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _release_objc;

struct _retain_objc;

struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    GEOVectorTile *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<const __CFString *, geo::_retain_cf<const __CFString *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> {
    CDUnknownFunctionPointerType *_field1;
    struct __CFString *_field2;
    struct _retain_cf<const __CFString *> _field3;
    struct _release_cf _field4;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> {
    struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem>*, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>*>> {
        struct fast_shared_ptr<ggl::QueryItem> **_field1;
        struct fast_shared_ptr<ggl::QueryItem> **_field2;
        struct fast_shared_ptr<ggl::QueryItem> **_field3;
        struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem>**, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>*>> {
            struct fast_shared_ptr<ggl::QueryItem> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery>> {
    struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *>> {
        struct PendingQuery **_field1;
        struct PendingQuery **_field2;
        struct PendingQuery **_field3;
        struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *>> {
            struct PendingQuery **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::pair<unsigned long, void *>, std::__1::allocator<std::__1::pair<unsigned long, void *>>> {
    struct __split_buffer<std::__1::pair<unsigned long, void *>*, std::__1::allocator<std::__1::pair<unsigned long, void *>*>> {
        struct pair<unsigned long, void *> **_field1;
        struct pair<unsigned long, void *> **_field2;
        struct pair<unsigned long, void *> **_field3;
        struct __compressed_pair<std::__1::pair<unsigned long, void *>**, std::__1::allocator<std::__1::pair<unsigned long, void *>*>> {
            struct pair<unsigned long, void *> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<unsigned long, void *>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::shared_ptr<ggl::RenderTransaction>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>>> {
    struct __split_buffer<std::__1::shared_ptr<ggl::RenderTransaction>*, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>*>> {
        struct shared_ptr<ggl::RenderTransaction> **_field1;
        struct shared_ptr<ggl::RenderTransaction> **_field2;
        struct shared_ptr<ggl::RenderTransaction> **_field3;
        struct __compressed_pair<std::__1::shared_ptr<ggl::RenderTransaction>**, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>*>> {
            struct shared_ptr<ggl::RenderTransaction> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction>>> {
        unsigned long long _field1;
    } _field3;
};

struct fast_shared_ptr<ggl::PolygonBase::CompressedMeshMesh> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<ggl::QueryItem>;

struct fast_shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<ggl::RealisticRoadShadow::RealisticMesh> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<vk::RouteLineSection> {
    struct _fast_shared_ptr_control *_control;
};

struct function<void (const vk::RoadPiece &)> {
    struct type _field1;
    struct __base<void (const vk::RoadPiece &)> *_field2;
};

struct list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> {
        struct __list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> *__prev_;
        struct __list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
        struct __list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
        struct __list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
        struct __list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
        struct __list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData>>>> {
    struct __tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>>> {
        struct __tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct __tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, bool, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, bool>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, bool>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, bool>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, bool>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, float, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, float>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, float>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, float>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, float>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gm::Matrix<float, 4, 1>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gm::Matrix<float, 4, 1>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<bool>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<bool>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<float>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<float>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1>>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<int>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<unsigned char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned char>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::SparseRamp<unsigned int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned int>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, gss::StyleDataPair, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::StyleDataPair>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, int>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, int>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern>>>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, unsigned char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned char>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned char>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<gss::PropertyID, unsigned int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned int>>> {
    struct __tree<std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned int>>> {
        struct __tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<int, gss::StyleData, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, gss::StyleData>>> {
    struct __tree<std::__1::__value_type<int, gss::StyleData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, gss::StyleData>>> {
        struct __tree_node<std::__1::__value_type<int, gss::StyleData>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, gss::StyleData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
    struct __tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
        struct __tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float>>> {
    struct __tree<std::__1::__value_type<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<vk::Anchor *, float>>> {
        struct __tree_node<std::__1::__value_type<vk::Anchor *, float>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::Anchor *, float>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct pair<unsigned long, void *>;

struct pair<unsigned short, unsigned int>;

struct set<void *, std::__1::less<void *>, std::__1::allocator<void *>> {
    struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *>> {
        struct __tree_node<void *, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<void *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<void *>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::AnimatableTexture::VariantUniformData> {
    struct VariantUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BitmapData> {
    struct BitmapData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Debug::BaseMesh> {
    struct BaseMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Debug::BaseVertexData> {
    struct BaseVertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::DebugPoints::BaseVertexData> {
    struct BaseVertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::DebugRenderer>;

struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Fog::FogUniformData> {
    struct FogUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GLDevice> {
    struct GLDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GLRenderer> {
    struct GLRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Grid::GridUniformData> {
    struct GridUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GridBase::GridBaseUniformData> {
    struct GridBaseUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::GridBase::GridMesh> {
    struct GridMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::IndexData> {
    struct IndexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::IndexDataTyped<unsigned short>> {
    struct IndexDataTyped<unsigned short> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonBase::CompressedMeshVertexData> {
    struct CompressedMeshVertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonFill::FillUniformData> {
    struct FillUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::PolygonSolidFill::Shader::Setup>;

struct shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> {
    struct RealisticMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RealisticCasingFacade::RealisticVertexData> {
    struct RealisticVertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RealisticRoadShadow::RealisticVertexData> {
    struct RealisticVertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RealisticTexture::RealisticUniformData> {
    struct RealisticUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderItem> {
    struct RenderItem *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderState> {
    struct RenderState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderTransaction> {
    struct RenderTransaction *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Shader> {
    struct Shader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::SimpleGrid::SimpleGridUniformData> {
    struct SimpleGridUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::Shader::Setup> {
    struct Setup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::SkyMesh> {
    struct SkyMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Sky::SkyUniformData> {
    struct SkyUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture::Pos2DUVVertexData> {
    struct Pos2DUVVertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureAlphaMask::Shader::Setup> {
    struct Setup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureMesh::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureWithBrightness::Shader::Setup> {
    struct Setup *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Tile::ViewUniformData> {
    struct ViewUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::VertexData> {
    struct VertexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::StyleQuery> {
    struct StyleQuery *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::AnchorContext> {
    struct AnchorContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::AnchorFactory> {
    struct AnchorFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::GlobeAdapterData> {
    struct GlobeAdapterData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::InfoLabel> {
    struct InfoLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::VKGlobeStylesheet> {
    struct VKGlobeStylesheet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<vk::ViewTransform> {
    struct ViewTransform *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<zilch::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[24];
};

struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas>> {
    struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas>> {
        struct AlphaAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem>> {
    struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem>> {
        struct ClearItem *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Clut::Shader::Setup, std::__1::default_delete<ggl::Clut::Shader::Setup>> {
    struct __compressed_pair<ggl::Clut::Shader::Setup *, std::__1::default_delete<ggl::Clut::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> {
    struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer>> {
        struct CommandBuffer *_field1;
    } _field1;
};

struct unique_ptr<ggl::DataWrite<ggl::ColoredText::MyVertexElement>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::MyVertexElement>>> {
    struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::MyVertexElement>*, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::MyVertexElement>>> {
        struct DataWrite<ggl::ColoredText::MyVertexElement> *_field1;
    } _field1;
};

struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> {
    struct __compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh>> {
        struct BaseMesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
    struct __compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
        struct BaseMesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> {
        struct FragmentedPool<ggl::Building::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingFlat::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingShadow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>>> {
        struct FragmentedPool<ggl::BuildingTop::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::BaseMesh>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> {
        struct FragmentedPool<ggl::Debug::BaseMesh> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Debug::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup>>> {
        struct FragmentedPool<ggl::Debug::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>>> {
        struct FragmentedPool<ggl::DebugPoints::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::Glow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::Glow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup>>> {
        struct FragmentedPool<ggl::Glow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonFill::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>>> {
        struct FragmentedPool<ggl::PolygonStroke::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>>> {
        struct FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticRoad::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>>> {
        struct FragmentedPool<ggl::RealisticTexture::Shader::Setup> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> {
    struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem>*, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> {
        struct FragmentedPool<ggl::RenderItem> *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Grid::Shader::Setup, std::__1::default_delete<ggl::Grid::Shader::Setup>> {
    struct __compressed_pair<ggl::Grid::Shader::Setup *, std::__1::default_delete<ggl::Grid::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
    struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
        struct IsoAlphaAtlas *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> {
    struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl>> {
        struct LoaderImpl *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Mesh, std::__1::default_delete<ggl::Mesh>> {
    struct __compressed_pair<ggl::Mesh *, std::__1::default_delete<ggl::Mesh>> {
        struct Mesh *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::Building::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> {
        MeshVendor_3faa0a72 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
        MeshVendor_c6d8e5cd *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::Glow::MeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> {
        MeshVendor_43d71dca *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>>> {
        struct MeshVendor<ggl::PolygonBase::CompressedMeshMesh> *_field1;
    } _field1;
};

struct unique_ptr<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>>> {
        MeshVendor_82aa5b9e *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
        MeshVendor_8027e961 *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext>> {
    struct __compressed_pair<ggl::OESContext *, std::__1::default_delete<ggl::OESContext>> {
        struct OESContext *_field1;
    } _field1;
};

struct unique_ptr<ggl::PerformanceHUD, std::__1::default_delete<ggl::PerformanceHUD>> {
    struct __compressed_pair<ggl::PerformanceHUD *, std::__1::default_delete<ggl::PerformanceHUD>> {
        struct PerformanceHUD *_field1;
    } _field1;
};

struct unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup>> {
    struct __compressed_pair<ggl::PolygonFill::Shader::Setup *, std::__1::default_delete<ggl::PolygonFill::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> {
    struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer>> {
        struct RenderBuffer *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> {
    struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem>> {
        struct RenderItem *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> {
    struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue>> {
        struct RenderQueue *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> {
    struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState>> {
        struct RenderState *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> {
    struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget>> {
        struct RenderTarget *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation>> {
    struct __compressed_pair<ggl::RenderTargetOperation *, std::__1::default_delete<ggl::RenderTargetOperation>> {
        struct RenderTargetOperation *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::SimpleGrid::Shader::Setup, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup>> {
    struct __compressed_pair<ggl::SimpleGrid::Shader::Setup *, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> {
    struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D>> {
        struct Texture2D *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture::Shader::Setup, std::__1::default_delete<ggl::Texture::Shader::Setup>> {
    struct __compressed_pair<ggl::Texture::Shader::Setup *, std::__1::default_delete<ggl::Texture::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer>> {
    struct __compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer>> {
        struct TextureBuffer *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TexturePool, std::__1::default_delete<ggl::TexturePool>> {
    struct __compressed_pair<ggl::TexturePool *, std::__1::default_delete<ggl::TexturePool>> {
        struct TexturePool *__first_;
    } __ptr_;
};

struct unique_ptr<ggl::TextureWithReverseAlpha::Shader::Setup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup>> {
    struct __compressed_pair<ggl::TextureWithReverseAlpha::Shader::Setup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup>> {
        struct Setup *__first_;
    } __ptr_;
};

struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> {
    struct __compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager>> {
        struct DebugConsoleManager *__first_;
    } __ptr_;
};

struct unique_ptr<md::OffscreenQueue, std::__1::default_delete<md::OffscreenQueue>> {
    struct __compressed_pair<md::OffscreenQueue *, std::__1::default_delete<md::OffscreenQueue>> {
        struct OffscreenQueue *__first_;
    } __ptr_;
};

struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> {
    struct __compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue>> {
        struct RenderQueue *__first_;
    } __ptr_;
};

struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>;

struct unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<GEOComposedRouteSection *, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>>> {
        struct __hash_node<GEOComposedRouteSection *, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer>> {
    struct __compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer>> {
        struct PatternedLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::PatternedManager, std::__1::default_delete<vk::PatternedManager>> {
    struct __compressed_pair<vk::PatternedManager *, std::__1::default_delete<vk::PatternedManager>> {
        struct PatternedManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer>> {
    struct __compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer>> {
        struct RoadLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RoadManager, std::__1::default_delete<vk::RoadManager>> {
    struct __compressed_pair<vk::RoadManager *, std::__1::default_delete<vk::RoadManager>> {
        struct RoadManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>;

struct unique_ptr<vk::RouteLineArrowManager, std::__1::default_delete<vk::RouteLineArrowManager>> {
    struct __compressed_pair<vk::RouteLineArrowManager *, std::__1::default_delete<vk::RouteLineArrowManager>> {
        struct RouteLineArrowManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RouteLineLayer, std::__1::default_delete<vk::RouteLineLayer>> {
    struct __compressed_pair<vk::RouteLineLayer *, std::__1::default_delete<vk::RouteLineLayer>> {
        struct RouteLineLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::RouteLineManager, std::__1::default_delete<vk::RouteLineManager>> {
    struct __compressed_pair<vk::RouteLineManager *, std::__1::default_delete<vk::RouteLineManager>> {
        struct RouteLineManager *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TrafficLayer, std::__1::default_delete<vk::TrafficLayer>> {
    struct __compressed_pair<vk::TrafficLayer *, std::__1::default_delete<vk::TrafficLayer>> {
        struct TrafficLayer *__first_;
    } __ptr_;
};

struct unique_ptr<vk::TrafficManager, std::__1::default_delete<vk::TrafficManager>> {
    struct __compressed_pair<vk::TrafficManager *, std::__1::default_delete<vk::TrafficManager>> {
        struct TrafficManager *__first_;
    } __ptr_;
};

struct unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<GEOTransportType, vk::TransportTypeInfo, std::__1::hash<GEOTransportType>, std::__1::equal_to<GEOTransportType>, std::__1::allocator<std::__1::pair<const GEOTransportType, vk::TransportTypeInfo>>> {
    struct __hash_table<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true>, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<StyleKey, std::__1::weak_ptr<md::StyleQuery>, std::__1::hash<StyleKey>, std::__1::equal_to<StyleKey>, std::__1::allocator<std::__1::pair<const StyleKey, std::__1::weak_ptr<md::StyleQuery>>>> {
    struct __hash_table<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, std::__1::hash<StyleKey>, true>, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, std::__1::equal_to<StyleKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, std::__1::hash<StyleKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery>>, std::__1::equal_to<StyleKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> {
    struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>>> {
    struct __hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
    struct __hash_table<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::hash<int>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<md::StyleQuery>>, std::__1::equal_to<std::__1::shared_ptr<md::StyleQuery>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::hash<std::__1::shared_ptr<md::StyleQuery>>, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<std::__1::shared_ptr<md::StyleQuery>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<md::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::hash<std::__1::shared_ptr<md::StyleQuery>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<md::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<md::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<std::__1::shared_ptr<md::StyleQuery>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, md::StyleMatchingTree *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::StyleMatchingTree *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::StyleMatchingTree *>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>, std::__1::hash<vk::PatternedBatchKey>, std::__1::equal_to<vk::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::hash<vk::TrafficBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>, std::__1::equal_to<vk::TrafficBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *>>> {
    struct __hash_table<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> {
    struct __hash_table<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> {
        struct unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*>, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *>*> {
                struct __hash_node<GEOComposedRouteSection *, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<GEOComposedRouteSection *>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<GEOComposedRouteSection *>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo>> {
        struct LabelNavJunctionInfo *__first_;
    } __end_cap_;
};

struct vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
};

struct vector<RouteSegment, std::__1::allocator<RouteSegment>> {
    struct RouteSegment *__begin_;
    struct RouteSegment *__end_;
    struct __compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment>> {
        struct RouteSegment *__first_;
    } __end_cap_;
};

struct vector<TrafficSegment, std::__1::allocator<TrafficSegment>> {
    struct TrafficSegment *__begin_;
    struct TrafficSegment *__end_;
    struct __compressed_pair<TrafficSegment *, std::__1::allocator<TrafficSegment>> {
        struct TrafficSegment *__first_;
    } __end_cap_;
};

struct vector<VGLRect, std::__1::allocator<VGLRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VGLRect *, std::__1::allocator<VGLRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKBuildingHeightMap, std::__1::allocator<VKBuildingHeightMap>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKBuildingHeightMap *, std::__1::allocator<VKBuildingHeightMap>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKMapTile *, std::__1::allocator<VKMapTile *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<VKRect, std::__1::allocator<VKRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKRect *, std::__1::allocator<VKRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKTileKey, std::__1::allocator<VKTileKey>> {
    struct VKTileKey *__begin_;
    struct VKTileKey *__end_;
    struct __compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey>> {
        struct VKTileKey *__first_;
    } __end_cap_;
};

struct vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData>> {
    struct _VKRealisticPolygonMetaData *__begin_;
    struct _VKRealisticPolygonMetaData *__end_;
    struct __compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData>> {
        struct _VKRealisticPolygonMetaData *__first_;
    } __end_cap_;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<geo::fast_shared_ptr<vk::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> {
    fast_shared_ptr_502c59d0 *__begin_;
    fast_shared_ptr_502c59d0 *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<vk::RouteLineSection>*, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> {
        fast_shared_ptr_502c59d0 *__first_;
    } __end_cap_;
};

struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem>> {
    struct BufferLoadItem *_field1;
    struct BufferLoadItem *_field2;
    struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem>> {
        struct BufferLoadItem *_field1;
    } _field3;
};

struct vector<ggl::Building::BuildingMesh *, std::__1::allocator<ggl::Building::BuildingMesh *>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::Building::BuildingMesh **, std::__1::allocator<ggl::Building::BuildingMesh *>> {
        struct BuildingMesh **_field1;
    } _field3;
};

struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::BuildingPointyRoof::BuildingMesh **, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> {
        struct BuildingMesh **_field1;
    } _field3;
};

struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *>> {
    struct CommandBuffer **_field1;
    struct CommandBuffer **_field2;
    struct __compressed_pair<ggl::CommandBuffer **, std::__1::allocator<ggl::CommandBuffer *>> {
        struct CommandBuffer **_field1;
    } _field3;
};

struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *>> {
    struct FragmentBuffer **_field1;
    struct FragmentBuffer **_field2;
    struct __compressed_pair<ggl::FragmentBuffer **, std::__1::allocator<ggl::FragmentBuffer *>> {
        struct FragmentBuffer **_field1;
    } _field3;
};

struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> {
    struct MeshMesh **_field1;
    struct MeshMesh **_field2;
    struct __compressed_pair<ggl::Glow::MeshMesh **, std::__1::allocator<ggl::Glow::MeshMesh *>> {
        struct MeshMesh **_field1;
    } _field3;
};

struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange>> {
    struct MultiRange *__begin_;
    struct MultiRange *__end_;
    struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange>> {
        struct MultiRange *__first_;
    } __end_cap_;
};

struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PolygonBase::MeshMesh, std::__1::allocator<ggl::PolygonBase::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonBase::MeshMesh *, std::__1::allocator<ggl::PolygonBase::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> {
    struct MeshMesh **_field1;
    struct MeshMesh **_field2;
    struct __compressed_pair<ggl::PolygonMesh::MeshMesh **, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> {
        struct MeshMesh **_field1;
    } _field3;
};

struct vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
};

struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> {
    struct PrefilteredLineMesh **_field1;
    struct PrefilteredLineMesh **_field2;
    struct __compressed_pair<ggl::PrefilteredLine::PrefilteredLineMesh **, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> {
        struct PrefilteredLineMesh **_field1;
    } _field3;
};

struct vector<ggl::Range, std::__1::allocator<ggl::Range>> {
    struct Range *__begin_;
    struct Range *__end_;
    struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range>> {
        struct Range *__first_;
    } __end_cap_;
};

struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *>> {
    struct RenderItem **_field1;
    struct RenderItem **_field2;
    struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *>> {
        struct RenderItem **_field1;
    } _field3;
};

struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher>> {
    struct RenderItemBatcher *__begin_;
    struct RenderItemBatcher *__end_;
    struct __compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher>> {
        struct RenderItemBatcher *__first_;
    } __end_cap_;
};

struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass>> {
    struct Pass *_field1;
    struct Pass *_field2;
    struct __compressed_pair<ggl::RenderQueue::Pass *, std::__1::allocator<ggl::RenderQueue::Pass>> {
        struct Pass *_field1;
    } _field3;
};

struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem>> {
    struct ShaderLoadItem *_field1;
    struct ShaderLoadItem *_field2;
    struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem>> {
        struct ShaderLoadItem *_field1;
    } _field3;
};

struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem>> {
    struct Texture2DLoadItem *_field1;
    struct Texture2DLoadItem *_field2;
    struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem>> {
        struct Texture2DLoadItem *_field1;
    } _field3;
};

struct vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *>> {
    struct TextureBase **__begin_;
    struct TextureBase **__end_;
    struct __compressed_pair<ggl::TextureBase **, std::__1::allocator<ggl::TextureBase *>> {
        struct TextureBase **__first_;
    } __end_cap_;
};

struct vector<ggl::UniformDataElement, std::__1::allocator<ggl::UniformDataElement>> {
    struct UniformDataElement *__begin_;
    struct UniformDataElement *__end_;
    struct __compressed_pair<ggl::UniformDataElement *, std::__1::allocator<ggl::UniformDataElement>> {
        struct UniformDataElement *__first_;
    } __end_cap_;
};

struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    struct Matrix<double, 2, 1> *__begin_;
    struct Matrix<double, 2, 1> *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        struct Matrix<double, 2, 1> *__first_;
    } __end_cap_;
};

struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *_field1;
    } _field3;
};

struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> {
    unsigned char *__begin_;
    unsigned char *__end_;
    struct __compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId>> {
        unsigned char *__first_;
    } __end_cap_;
};

struct vector<md::StyleMatchingTree *, std::__1::allocator<md::StyleMatchingTree *>> {
    struct StyleMatchingTree **__begin_;
    struct StyleMatchingTree **__end_;
    struct __compressed_pair<md::StyleMatchingTree **, std::__1::allocator<md::StyleMatchingTree *>> {
        struct StyleMatchingTree **__first_;
    } __end_cap_;
};

struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
    struct pair<unsigned short, unsigned int> *__begin_;
    struct pair<unsigned short, unsigned int> *__end_;
    struct __compressed_pair<std::__1::pair<unsigned short, unsigned int>*, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
        struct pair<unsigned short, unsigned int> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> {
    struct shared_ptr<ggl::DebugRenderer> *_field1;
    struct shared_ptr<ggl::DebugRenderer> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer>*, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer>>> {
        struct shared_ptr<ggl::DebugRenderer> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>>> {
    struct shared_ptr<ggl::PolygonSolidFill::Shader::Setup> *__begin_;
    struct shared_ptr<ggl::PolygonSolidFill::Shader::Setup> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>>> {
        struct shared_ptr<ggl::PolygonSolidFill::Shader::Setup> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem>>> {
    struct shared_ptr<ggl::RenderItem> *__begin_;
    struct shared_ptr<ggl::RenderItem> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem>*, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem>>> {
        struct shared_ptr<ggl::RenderItem> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::RenderState>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState>>> {
    struct shared_ptr<ggl::RenderState> *__begin_;
    struct shared_ptr<ggl::RenderState> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::RenderState>*, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState>>> {
        struct shared_ptr<ggl::RenderState> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::StyleQuery>, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery>>> {
    shared_ptr_6e6219d6 *__begin_;
    shared_ptr_6e6219d6 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::StyleQuery>*, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery>>> {
        shared_ptr_6e6219d6 *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> {
    shared_ptr_89f9185e *__begin_;
    shared_ptr_89f9185e *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile>*, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> {
        shared_ptr_89f9185e *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
    shared_ptr_338aa11d *__begin_;
    shared_ptr_338aa11d *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel>*, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
        shared_ptr_338aa11d *__first_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>>> {
    struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>> *__begin_;
    struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>> *__end_;
    struct __compressed_pair<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>*, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>>> {
        struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>>> {
    struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>> *__begin_;
    struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>> *__end_;
    struct __compressed_pair<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>*, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>>> {
        struct unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>;

struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> {
    struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__begin_;
    struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__end_;
    struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> {
        struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>> *__first_;
    } __end_cap_;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

struct vector<vk::PatternedBatch *, std::__1::allocator<vk::PatternedBatch *>> {
    struct PatternedBatch **_field1;
    struct PatternedBatch **_field2;
    struct __compressed_pair<vk::PatternedBatch **, std::__1::allocator<vk::PatternedBatch *>> {
        struct PatternedBatch **_field1;
    } _field3;
};

struct vector<vk::RoadBatch *, std::__1::allocator<vk::RoadBatch *>> {
    struct RoadBatch **_field1;
    struct RoadBatch **_field2;
    struct __compressed_pair<vk::RoadBatch **, std::__1::allocator<vk::RoadBatch *>> {
        struct RoadBatch **_field1;
    } _field3;
};

struct vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea>> {
        struct TileExclusionArea *__first_;
    } __end_cap_;
};

struct vector<vk::TrafficBatch *, std::__1::allocator<vk::TrafficBatch *>> {
    struct TrafficBatch **_field1;
    struct TrafficBatch **_field2;
    struct __compressed_pair<vk::TrafficBatch **, std::__1::allocator<vk::TrafficBatch *>> {
        struct TrafficBatch **_field1;
    } _field3;
};

struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
    struct Record *__begin_;
    struct Record *__end_;
    struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
        struct Record *__first_;
    } __end_cap_;
};

#if 0
// Names with conflicting types:
typedef struct {
    double _course;
    double _referenceScreenOffset;
    double _pitch;
    double _boomLength;
} State_3e0671f0;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct VKPoint _field2;
    struct {
        double _field1;
        double _field2;
    } _field3;
    id _field4;
} Anchor_facb9ede;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_06328420 _field2;
} RenderQueue_da5f8b9c;

typedef struct {
    struct vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass>> _field1;
    struct vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *>> _field2;
    struct shared_ptr<ggl::RenderTransaction> _field3;
} RenderQueue_e4212455;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct shared_ptr<ggl::VertexData> _field6;
    struct shared_ptr<ggl::IndexData> _field7;
    struct shared_ptr<ggl::Debug::BaseVertexData> _field8;
} BaseMesh_14cb9e02;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct shared_ptr<ggl::VertexData> _field6;
    struct shared_ptr<ggl::IndexData> _field7;
    struct shared_ptr<ggl::DebugPoints::BaseVertexData> _field8;
} BaseMesh_85a9beff;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct shared_ptr<ggl::VertexData> _field6;
    struct shared_ptr<ggl::IndexData> _field7;
    struct shared_ptr<ggl::RealisticCasingFacade::RealisticVertexData> _field8;
} RealisticMesh_e5a0f0b5;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    char *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned int _field7;
    unsigned long long _field8;
    _Bool _field9;
    unsigned long long _field10;
    float _field11;
    unsigned long long _field12;
    id _field13;
    int _field14;
} CDStruct_58d0ca89;

typedef struct {
    _Bool orthographic;
    double width;
    double height;
    double near;
    double far;
} CDStruct_184b3e93;

typedef struct {
    _Bool _field1;
    float _field2;
    float _field3;
} CDStruct_d5b0faf5;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
} CDStruct_32a7f38a;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
} CDStruct_6adf2384;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    double v[4][4];
} CDStruct_aa5aacbc;

typedef struct {
    unsigned int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_9f2792e4;

typedef struct {
    unsigned long long *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_62a50c50;

typedef struct {
    float *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_fae3dc92;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
} CDStruct_a12fb154;

typedef struct {
    double latitude;
    double longitude;
    double altitude;
} CDStruct_071ac149;

typedef struct {
    float _a;
    unsigned int _b;
    unsigned int _g;
    unsigned int _r;
} CDStruct_58ec0031;

typedef struct {
    float x0;
    float x1;
    float y0;
    float y1;
} CDStruct_ff03d24e;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    int from;
    int to;
    unsigned long long fromDisplayStyle;
    unsigned long long toDisplayStyle;
    float fraction;
} CDStruct_129da68a;

typedef struct {
    long long vectorType;
    int timePeriod;
    int mapOverlayType;
    _Bool iconTappable;
    NSString *localeString;
    _Bool isSelected;
    unsigned int applicationState;
} CDStruct_51eba9d0;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct CDStruct_183601bc;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    CDStruct_183601bc *_field5;
} CDStruct_dde70fb6;

typedef struct {
    unsigned int _field1;
    float _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_e9f6a06b;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    float _field4;
    unsigned int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_033e8ed6;

typedef struct {
    CDStruct_183601bc *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    CDStruct_183601bc *_field6;
    CDStruct_183601bc *_field7;
} CDStruct_91f75a7f;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    Matrix_5173352a _field4;
    Matrix_5173352a _field5;
} CDStruct_ac74ac41;

typedef struct {
    long long iconStyle;
    Matrix_5173352a iconBadgeColor;
    Matrix_5173352a iconGradientColor[2];
    Matrix_5173352a iconBadgeLightColor;
    int iconBadgeLightBlendMode;
    Matrix_5173352a iconGlyphColor;
    long long iconGlyphStyle;
    int iconGlyphBlendMode;
    float iconHaloSize;
    Matrix_5173352a iconHaloColor;
    struct CGSize iconDropShadowOffset;
    float iconDropShadowSize;
    Matrix_5173352a iconDropShadowColor;
    float iconCornerRadius;
    float iconBrightness;
    float iconBevelAmount;
    unsigned int iconSourceStyleAttributeKey;
    unsigned int iconSourceStyleMultipoiAttributeKey;
} CDStruct_44d855de;

typedef struct {
    CDStruct_58d0ca89 _field1;
    char *_field2;
    unsigned long long _field3;
} CDStruct_2da3f85a;

typedef struct {
    CDStruct_58ec0031 _color;
    float _offsetX;
    float _offsetY;
    float _size;
    struct {
        unsigned int offsetX:1;
        unsigned int offsetY:1;
    } _has;
} CDStruct_79d0722e;

typedef struct {
    CDStruct_58ec0031 _color;
    float _width;
} CDStruct_f43f0670;

typedef struct {
    Matrix_5173352a _field1;
} CDStruct_aed172a0;

typedef struct {
    struct VKPoint position;
    double course;
    _Bool onRoute;
} CDStruct_b926a728;

typedef struct {
    struct VKPoint position;
    Matrix_6e1d3589 tangent;
    _Bool tangentValid;
} CDStruct_86193286;

typedef struct {
    struct {
        unsigned int _field1;
        unsigned int _field2;
        unsigned int _field3;
        unsigned int _field4;
    } _field1;
    struct {
        unsigned int _field1;
        int _field2;
        float _field3;
        _Bool _field4;
        _Bool _field5;
        _Bool _field6;
        _Bool _field7;
        _Bool _field8;
        struct {
            unsigned char _field1;
            unsigned short _field2;
        } _field9[16];
    } _field2;
} CDStruct_db2bd8f2;

typedef struct {
    CDStruct_58d0ca89 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    union {
        struct {
            CDStruct_b2fbf00d _field1;
            CDStruct_b2fbf00d _field2;
        } _field1;
        CDStruct_ff03d24e _field2;
    } _field9;
    CDStruct_183601bc *_field10;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field11;
    unsigned char _field12;
} CDStruct_2e21d8bb;

typedef struct {
    CDStruct_2e21d8bb _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    _Bool _field4;
} CDStruct_54d51626;

// Ambiguous groups
typedef struct {
    unsigned int styleReference:1;
} CDStruct_629f0dde;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double x0;
    double x1;
    double y0;
    double y1;
} CDStruct_aca18c62;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    double x;
    double y;
} CDStruct_34734122;

typedef struct {
    struct {
        double _field1;
        double _field2;
    } _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_90e2a262;

typedef struct Box<double, 2> {
    struct Matrix<double, 2, 1> _minimum;
    struct Matrix<double, 2, 1> _maximum;
} Box_3d7e3c2c;

typedef struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} Box_3fb92e00;

typedef struct Matrix<double, 3, 1> {
    double _e[3];
} Matrix_6e1d3589;

typedef struct Matrix<double, 4, 1> {
    double _field1[4];
} Matrix_ec0d872f;

typedef struct Matrix<double, 4, 4> {
    double _e[16];
} Matrix_08d701e4;

typedef struct Matrix<float, 2, 1> {
    float _e[2];
} Matrix_8746f91e;

typedef struct Matrix<float, 4, 1> {
    float _e[4];
} Matrix_5173352a;

typedef struct Matrix<float, 4, 4> {
    float _e[16];
} Matrix_99e705ad;

typedef struct Matrix<int, 2, 1> {
    int _field1[2];
} Matrix_12bc3712;

typedef struct MeshVendor<ggl::Building::BuildingMesh> {
    struct vector<ggl::Building::BuildingMesh *, std::__1::allocator<ggl::Building::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_3faa0a72;

typedef struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_c6d8e5cd;

typedef struct MeshVendor<ggl::Glow::MeshMesh> {
    struct vector<ggl::Glow::MeshMesh *, std::__1::allocator<ggl::Glow::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
} MeshVendor_43d71dca;

typedef struct MeshVendor<ggl::PolygonMesh::MeshMesh> {
    struct vector<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh *>> _field1;
    struct MeshMesh *_field2;
} MeshVendor_82aa5b9e;

typedef struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *>> _field1;
    struct PrefilteredLineMesh *_field2;
} MeshVendor_8027e961;

typedef struct fast_shared_ptr<vk::RouteLineSection> {
    struct _fast_shared_ptr_control *_control;
} fast_shared_ptr_502c59d0;

typedef struct function<void (const vk::RoadPiece &)> {
    struct type _field1;
    struct __base<void (const vk::RoadPiece &)> *_field2;
} function_21f69ee7;

typedef struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
} map_604bf0d9;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_97fa0047;

typedef struct shared_ptr<ggl::BitmapData> {
    struct BitmapData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4ce39eb2;

typedef struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_edb96180;

typedef struct shared_ptr<ggl::Debug::BaseMesh> {
    struct BaseMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a5e35864;

typedef struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_807ec9ac;

typedef struct shared_ptr<ggl::Fog::FogUniformData> {
    struct FogUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1573687d;

typedef struct shared_ptr<ggl::GLDevice> {
    struct GLDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_77723e34;

typedef struct shared_ptr<ggl::GLRenderer> {
    struct GLRenderer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3f8cd81b;

typedef struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_78ff922b;

typedef struct shared_ptr<ggl::RealisticTexture::RealisticUniformData> {
    struct RealisticUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9b6b7821;

typedef struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_06328420;

typedef struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_479d1306;

typedef struct shared_ptr<ggl::TextureMesh::MeshMesh> {
    struct MeshMesh *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7c9fbd8a;

typedef struct shared_ptr<ggl::Tile::ViewUniformData> {
    struct ViewUniformData *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1fee3c91;

typedef struct shared_ptr<md::StyleQuery> {
    struct StyleQuery *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6e6219d6;

typedef struct shared_ptr<vk::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6f3fd3aa;

typedef struct shared_ptr<vk::AnchorContext> {
    struct AnchorContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_4d0abf3b;

typedef struct shared_ptr<vk::AnchorFactory> {
    struct AnchorFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_00dc923b;

typedef struct shared_ptr<vk::InfoLabel> {
    struct InfoLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0c41964b;

typedef struct shared_ptr<vk::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dd1f7020;

typedef struct shared_ptr<vk::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_89f9185e;

typedef struct shared_ptr<vk::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9eab1d88;

typedef struct shared_ptr<vk::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_338aa11d;

typedef struct shared_ptr<vk::ViewTransform> {
    struct ViewTransform *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d1ecf7a2;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_aa048f4b;

typedef struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_b3f81285;

typedef struct unordered_map<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>, std::__1::hash<vk::PatternedBatchKey>, std::__1::equal_to<vk::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::hash<vk::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::PatternedBatchKey, std::__1::__hash_value_type<vk::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::PatternedRibbon, std::__1::default_delete<vk::PatternedRibbon>>>>>, std::__1::equal_to<vk::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_880b4a54;

typedef struct unordered_map<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>, std::__1::hash<vk::RoadBatchKey>, std::__1::equal_to<vk::RoadBatchKey>, std::__1::allocator<std::__1::pair<const vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::hash<vk::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::RoadBatchKey, std::__1::__hash_value_type<vk::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::RoadRibbon, std::__1::default_delete<vk::RoadRibbon>>>>>, std::__1::equal_to<vk::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_f54c85ed;

typedef struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_25c79282;

typedef struct vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
} vector_682a2c99;

typedef struct vector<VGLRect, std::__1::allocator<VGLRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VGLRect *, std::__1::allocator<VGLRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
} vector_d61b411b;

typedef struct vector<VKRect, std::__1::allocator<VKRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKRect *, std::__1::allocator<VKRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
} vector_6c1b99c0;

typedef struct vector<ggl::PolygonBase::MeshMesh, std::__1::allocator<ggl::PolygonBase::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonBase::MeshMesh *, std::__1::allocator<ggl::PolygonBase::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
} vector_54f0f967;

typedef struct vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
    struct MeshMesh *__begin_;
    struct MeshMesh *__end_;
    struct __compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh>> {
        struct MeshMesh *__first_;
    } __end_cap_;
} vector_0edf1665;

typedef struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem>> {
    struct ShaderLoadItem *_field1;
    struct ShaderLoadItem *_field2;
    struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem>> {
        struct ShaderLoadItem *_field1;
    } _field3;
} vector_b35310ee;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    struct Matrix<double, 2, 1> *__begin_;
    struct Matrix<double, 2, 1> *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        struct Matrix<double, 2, 1> *__first_;
    } __end_cap_;
} vector_e20517dc;

typedef struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__first_;
    } __end_cap_;
} vector_dc840c5c;

typedef struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
    shared_ptr_338aa11d *__begin_;
    shared_ptr_338aa11d *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel>*, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel>>> {
        shared_ptr_338aa11d *__first_;
    } __end_cap_;
} vector_4ea116aa;

typedef struct vector<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>>> {
    struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>> *__begin_;
    struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>> *__end_;
    struct __compressed_pair<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>*, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>>>> {
        struct unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable>> *__first_;
    } __end_cap_;
} vector_5bdcb8f5;

typedef struct vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea>> {
        struct TileExclusionArea *__first_;
    } __end_cap_;
} vector_a2f7343e;

#pragma mark Typedef'd Unions

typedef union {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
} CDUnion_f5b85e25;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
// UUID: F73D2170-88CE-372F-87EE-5F14E68661EC
//
//                           Arch: x86_64
//                Current version: 992.16.0
//          Compatibility version: 1.0.0
//                 Source version: 992.16.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol GEOComposedRouteObserver <NSObject>
- (void)composedRoute:(GEOComposedRoute *)arg1 selectedSections:(NSArray *)arg2 deselectedSections:(NSArray *)arg3;
- (void)composedRouteUpdatedTraffic:(GEOComposedRoute *)arg1;
- (void)composedRouteUpdatedSnappedPaths:(GEOComposedRoute *)arg1;
@end

@protocol GEOMapAccessRestrictions <NSObject>
@property(readonly, nonatomic) _Bool allowsNetworkTileLoad;
@end

@protocol GEOResourceManifestTileGroupObserver <NSObject>

@optional
- (void)resourceManifestManager:(GEOResourceManifestManager *)arg1 didChangeActiveTileGroup:(GEOActiveTileGroup *)arg2 fromOldTileGroup:(GEOActiveTileGroup *)arg3;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(GEOResourceManifestManager *)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(GEOResourceManifestManager *)arg1;
@end

@protocol GEORouteMapMatchingDataSource <NSObject>
- (void)forEachMapMatchingSection:(void (^)(struct RouteMapMatchingSection *, struct *))arg1;
@end

@protocol GGLLayerDisruptor <NSObject>
- (void)didDrawWithTimestamp:(double)arg1;
@end

@protocol GGLRenderQueueSource <NSObject>
- (RenderQueue_e4212455 *)renderQueue;

@optional
- (void)didReadPixels:(shared_ptr_4ce39eb2 *)arg1;
@end

@protocol LabelManagerDelegate <NSObject>
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:pendingArtworkIsReady:
-     // Error parsing type: v32@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16@"VKLabelMarker"24, name: labelManager:selectedLabelMarkerWillDisappear:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsDisplay:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsLayout:
@end

@protocol MDMapControllerDelegate <NSObject>
- (void)mapControllerNeedsInitialization:(VKScreenCanvas *)arg1;
- (void)mapController:(VKScreenCanvas *)arg1 requestsDisplayRate:(long long)arg2;
- (void)mapControllerNeedsDisplay:(VKScreenCanvas *)arg1;
@end

@protocol MDRenderTarget <NSObject>
@property(readonly, nonatomic) struct CGSize sizeInPixels;
@property(readonly, nonatomic) double contentScale;
@property(readonly, nonatomic) struct CGSize size;

@optional
@property(readonly, nonatomic) float averageFPS;
- (void)didDrawView;
- (void)willDrawView;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol VKAnchorDelegate <NSObject>
- (void)anchorWorldPointDidChange:(void *)arg1;
@end

@protocol VKAnimationRunner <NSObject>
- (void)animationDidResume:(VKAnimation *)arg1;
- (void)animationDidStop:(VKAnimation *)arg1;
@end

@protocol VKCameraControllerDelegate <NSObject>
- (void)cameraController:(VKCameraController *)arg1 canZoomOutDidChange:(_Bool)arg2;
- (void)cameraController:(VKCameraController *)arg1 canZoomInDidChange:(_Bool)arg2;
- (id <VKTrackableAnnotationPresentation>)cameraController:(VKCameraController *)arg1 presentationForAnnotation:(id <VKTrackableAnnotation>)arg2;
- (void)cameraController:(VKCameraController *)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)cameraController:(VKCameraController *)arg1 didBecomePitched:(_Bool)arg2;
- (void)cameraController:(VKCameraController *)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(VKCameraController *)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)cameraControllerDidChangeCameraState:(VKCameraController *)arg1;
- (void)cameraController:(VKCameraController *)arg1 requestsDisplayRate:(long long)arg2;
- (void)runAnimation:(VKAnimation *)arg1;
@end

@protocol VKCameraDelegate <NSObject>
- (void)cameraDidChange:(VKCamera *)arg1;
@end

@protocol VKGlobeLineContainerDelegate <NSObject>
- (void)lineContainerNeedsDisplay:(VKGlobeLineContainer *)arg1;
@end

@protocol VKInteractiveCameraController <NSObject>
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(readonly, nonatomic) GEOMapRegion *mapRegion;
@property(readonly, nonatomic) double pitch;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) CDStruct_071ac149 centerCoordinate;
- (_Bool)isFullyPitched;
- (_Bool)isPitched;
- (_Bool)canEnter3DMode;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(void (^)(void))arg5;
- (void)tapZoom:(struct CGPoint)arg1 levels:(double)arg2 completionHandler:(void (^)(void))arg3;
- (_Bool)snapMapIfNecessary:(const struct VKPoint *)arg1 animated:(_Bool)arg2;
- (_Bool)restoreViewportFromInfo:(VKViewportInfo *)arg1;
- (VKViewportInfo *)viewportInfo;
- (_Bool)currentZoomLevelAllowsRotation;
- (long long)maximumNormalizedZoomLevel;
- (long long)minimumNormalizedZoomLevel;
- (long long)tileSize;
- (double)durationToAnimateToMapRegion:(GEOMapRegion *)arg1;
- (void)animateToMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(void (^)(_Bool))arg5;
- (void)setMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(void (^)(_Bool))arg5;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
- (double)altitude;
- (void)setCenterCoordinate:(CDStruct_071ac149)arg1 animated:(_Bool)arg2;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(float (^)(float))arg6 completion:(void (^)(_Bool))arg7;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(void (^)(void))arg3;
@end

@protocol VKInteractiveMap <NSObject>
+ (_Bool)supportsMapType:(long long)arg1 scale:(int)arg2;
@property(readonly, nonatomic) VKAnchorWrapper *externalAnchors;
@property(readonly, nonatomic, getter=isFullyDrawn) _Bool fullyDrawn;
@property(readonly, nonatomic) NSArray *visibleTileSets;
@property(readonly, nonatomic, getter=isTrackingHeading) _Bool trackingHeading;
@property(readonly, nonatomic) id <VKTrackableAnnotation> trackingAnnotation;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) _Bool animatingToTrackAnnotation;
@property(nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
@property(nonatomic) long long annotationTrackingZoomStyle;
@property(readonly, nonatomic) double altitude;
@property(readonly, nonatomic) double pitch;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(retain, nonatomic) GEOMapRegion *mapRegion;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
@property(nonatomic) _Bool labelMarkerSelectionEnabled;
@property(readonly, nonatomic) double maximumZoomLevel;
@property(readonly, nonatomic) double minimumZoomLevel;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
@property(nonatomic) struct PolylineCoordinate routeUserOffset;
@property(nonatomic) _Bool showsBuildings;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
@property(nonatomic) long long mapType;
@property(readonly, nonatomic, getter=isFullyPitched) _Bool fullyPitched;
@property(readonly, nonatomic, getter=isPitched) _Bool pitched;
@property(nonatomic) _Bool isPitchable;
@property(nonatomic) _Bool staysCenteredDuringRotation;
@property(nonatomic) _Bool staysCenteredDuringPinch;
@property(nonatomic) _Bool trafficEnabled;
@property(nonatomic) id <VKInteractiveMapDelegate> delegate;
- (void)removeExternalAnchor:(VKAnchorWrapper *)arg1;
- (void)addExternalAnchor:(VKAnchorWrapper *)arg1;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(void (^)(void))arg5;
- (void)stopSnappingAnimations;
- (_Bool)isPointValidForGesturing:(struct CGPoint)arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(void (^)(void))arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint)arg2;
- (double)currentZoomLevel;
- (_Bool)isShowingNoDataPlaceholders;
- (NSArray *)attributionsForCurrentRegion;
- (_Bool)restoreViewportFromInfo:(VKViewportInfo *)arg1;
- (VKViewportInfo *)viewportInfo;
- (void)removePersistentOverlay:(id <VKOverlay>)arg1;
- (void)addPersistentOverlay:(id <VKOverlay>)arg1;
- (NSSet *)persistentOverlays;
- (NSArray *)overlays;
- (void)removeOverlay:(id <VKOverlay>)arg1;
- (void)addOverlay:(id <VKOverlay>)arg1;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id <VKTrackableAnnotation>)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
- (CDStruct_071ac149)centerCoordinate;
- (struct CGPoint)convertCoordinateToCameraModelPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertCoordinateToPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertMapPointToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToMapPoint:(struct CGPoint)arg1;
- (CDStruct_c3b9c2ee)convertPointToCoordinate:(struct CGPoint)arg1;
- (void)deselectLabelMarker;
- (VKLabelMarker *)selectedLabelMarker;
- (void)selectLabelMarker:(VKLabelMarker *)arg1;
- (VKLabelMarker *)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (NSArray *)labelMarkers;
- (VKAnnotationMarker *)selectedAnnotationMarker;
- (NSArray *)annotationMarkers;
- (_Bool)shouldHideOffscreenSelectedAnnotation;
- (_Bool (^)(struct))annotationCoordinateTest;
- (long long (^)(double, double, double, double))annotationRectTest;
- (void (^)(VKAnnotationMarker *))annotationMarkerDeselectionCallback;
- (void)setAnnotationMarkerDeselectionCallback:(void (^)(VKAnnotationMarker *))arg1;
- (void)deselectAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)selectAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)removeAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)addAnnotationMarker:(VKAnnotationMarker *)arg1 allowAnimation:(_Bool)arg2;
- (VKAnnotationMarker *)annotationMarkerForSelectionAtPoint:(struct CGPoint)arg1 avoidCurrent:(_Bool)arg2;
- (void)debugHighlightLabelAtPoint:(struct CGPoint)arg1;
- (struct VKPoint)screenPointForPoint:(struct CGPoint)arg1;
- (_Bool)currentZoomLevelAllowsRotation;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(float (^)(float))arg6 completion:(void (^)(_Bool))arg7;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
- (double)durationToAnimateToMapRegion:(GEOMapRegion *)arg1;
- (void)animateToMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(void (^)(_Bool))arg5;
- (void)setMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(void (^)(_Bool))arg5;
- (void)setMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4;
- (void)setMapRegion:(GEOMapRegion *)arg1 animated:(_Bool)arg2;
- (_Bool)canZoomOutForTileSize:(long long)arg1;
- (_Bool)canZoomInForTileSize:(long long)arg1;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)setStylesheetMapDisplayStyle:(unsigned long long)arg1;
- (void)stylesheetAnimationDidEnd:(_Bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned long long)arg1 toStyle:(unsigned long long)arg2;
- (void)requestStylesheetAnimation:(VKAnimation *)arg1 targetMapDisplayStyle:(unsigned long long)arg2 setupHandler:(void (^)(void))arg3;
- (NSString *)consoleString:(_Bool)arg1;
- (NSString *)detailedDescription;
- (void)exit3DMode;
- (void)enter3DMode;
- (_Bool)canEnter3DMode;
@end

@protocol VKInteractiveMapDelegate <NSObject>
- (void)map:(id <VKInteractiveMap>)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (void)map:(id <VKInteractiveMap>)arg1 selectedLabelMarkerWillDisappear:(VKLabelMarker *)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 canShowFlyoverDidChange:(_Bool)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 canZoomOutDidChange:(_Bool)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 canZoomInDidChange:(_Bool)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 didBecomePitched:(_Bool)arg2;
- (VKOverlayPainter *)map:(id <VKInteractiveMap>)arg1 painterForOverlay:(id <VKOverlay>)arg2;
- (id <VKTrackableAnnotationPresentation>)map:(id <VKInteractiveMap>)arg1 presentationForAnnotation:(id <VKTrackableAnnotation>)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)map:(id <VKInteractiveMap>)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)mapDidFinishChangingMapDisplayStyle:(unsigned long long)arg1;
- (void)mapDidFailLoadingTiles:(id <VKInteractiveMap>)arg1 withError:(NSError *)arg2;
- (void)mapDidFinishLoadingTiles:(id <VKInteractiveMap>)arg1;
- (void)mapDidStartLoadingTiles:(id <VKInteractiveMap>)arg1;
- (void)mapDidBecomeFullyDrawn:(id <VKInteractiveMap>)arg1 hasFailedTiles:(_Bool)arg2;
- (void)mapDidBecomePartiallyDrawn:(id <VKInteractiveMap>)arg1;
- (void)mapDidChangeVisibleRegion:(id <VKInteractiveMap>)arg1;

@optional
- (void)map:(id <VKInteractiveMap>)arg1 didUpdateContainsOverlay:(_Bool)arg2;
@end

@protocol VKLRUCacheDelegate
- (_Bool)cache:(VKLRUCache *)arg1 willEvictObject:(id)arg2 forKey:(const struct VKCacheKey *)arg3;
@end

@protocol VKLabelModelDelegate
- (void)labelModel:(VKLabelModel *)arg1 selectedLabelMarkerWillDisappear:(VKLabelMarker *)arg2;
- (VKMapTile *)labelModel:(VKLabelModel *)arg1 mapTileForTile:(VKTile *)arg2 layer:(unsigned long long)arg3;
@end

@protocol VKLabelNavFeature
@property(readonly, nonatomic) _Bool isGuidanceStepStart;
@property(readonly, nonatomic) long long intraRoadPriority;
@property(readonly, nonatomic) _Bool isInGuidance;
@property(readonly, nonatomic) _Bool isStartOfRoadName;
@property(readonly, nonatomic) NSString *shieldDisplayGroup;
@property(readonly, nonatomic) NSString *name;
@property(readonly, nonatomic) _Bool isRamp;
@property(readonly, nonatomic) struct PolylineCoordinate routeOffset;
@property(readonly, nonatomic) _Bool isAwayFromRoute;
@property(readonly, nonatomic) _Bool isOnRoute;
@end

@protocol VKMapLayer <NSObject>
- (unsigned long long)mapLayerPosition;
@end

@protocol VKMapModeObserver <NSObject>
- (void)didTransitionFrom:(long long)arg1 To:(long long)arg2;
- (void)willTransitionFrom:(long long)arg1 To:(long long)arg2;
@end

@protocol VKMapModelDelegate <NSObject>
- (void)mapModelDidUpdateMinMaxZoomLevel:(VKMapModel *)arg1;
- (void)mapModel:(VKMapModel *)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (void)mapModel:(VKMapModel *)arg1 selectedLabelMarkerWillDisappear:(VKLabelMarker *)arg2;
- (double)mapModelZoomScale:(VKMapModel *)arg1;
- (_Bool)mapModelInNav:(VKMapModel *)arg1;
- (_Bool)mapModelInNavAtDefaultZoom:(VKMapModel *)arg1;
- (void)mapModelDidFailLoadingTiles:(VKMapModel *)arg1 withError:(NSError *)arg2;
- (void)mapModelDidFinishLoadingTiles:(VKMapModel *)arg1;
- (void)mapModelDidStartLoadingTiles:(VKMapModel *)arg1;
- (void)mapModelDidBecomeFullyDrawn:(VKMapModel *)arg1 hasFailedTiles:(_Bool)arg2;
- (void)mapModelWillBecomFullyDrawn:(VKMapModel *)arg1;
- (void)mapModelDidBecomePartiallyDrawn:(VKMapModel *)arg1;
- (VKOverlayPainter *)mapModel:(VKMapModel *)arg1 painterForOverlay:(id <VKOverlay>)arg2;
- (void)mapModel:(VKMapModel *)arg1 needsPanByOffset:(struct CGPoint)arg2 relativeToScreenPoint:(struct CGPoint)arg3 animated:(_Bool)arg4 duration:(double)arg5 completionHandler:(void (^)(void))arg6;

@optional
- (void)mapModel:(VKMapModel *)arg1 didUpdateContainsOverlay:(_Bool)arg2;
- (void)mapModel:(VKMapModel *)arg1 didUpdateNavigationPuckSize:(float)arg2;
@end

@protocol VKMercatorTerrainHeightProvider <NSObject>
- (double)heightAtPoint:(struct VKPoint)arg1;
@end

@protocol VKOverlay <NSObject>
@property(readonly, nonatomic) GEOMapRegion *boundingMapRegion;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;
@end

@protocol VKOverlayContainerDelegate <NSObject>
- (void)overlayContainer:(VKOverlayContainerModel *)arg1 showingRouteInStandardModeDidChange:(_Bool)arg2;
- (_Bool)overlayContainerIsInRealisticMode:(VKOverlayContainerModel *)arg1;
- (VKVectorTile *)overlayContainer:(VKOverlayContainerModel *)arg1 roadTileForTile:(VKMapTile *)arg2;
- (VKOverlayPainter *)overlayContainer:(VKOverlayContainerModel *)arg1 painterForOverlay:(id <VKOverlay>)arg2;
@end

@protocol VKOverlayContainerRouteDelegate <NSObject>
- (void)overlayContainer:(VKOverlayContainerModel *)arg1 updatedMatchedSection:(fast_shared_ptr_502c59d0)arg2 index:(struct PolylineCoordinate *)arg3;
@end

@protocol VKPolylineGroupOverlayObserver <NSObject>
- (void)polylineGroup:(VKPolylineGroupOverlay *)arg1 didSelectPolyline:(VKPolylineOverlay *)arg2;
- (void)polylineGroup:(VKPolylineGroupOverlay *)arg1 didRemovePolyline:(VKPolylineOverlay *)arg2;
- (void)polylineGroup:(VKPolylineGroupOverlay *)arg1 didAddPolyline:(VKPolylineOverlay *)arg2;
@end

@protocol VKPolylineObserver <NSObject>
- (void)polyline:(VKPolylineOverlay *)arg1 selectedSections:(NSArray *)arg2 deselectedSections:(NSArray *)arg3;
- (void)setNeedsLayoutForPolyline:(VKPolylineOverlay *)arg1;
@end

@protocol VKRasterOverlayTile
- (_Bool)isEmpty;
- (struct CGContext *)drawContext;
- (id)initWithKey:(const struct VKTileKey *)arg1 size:(unsigned long long)arg2 scale:(float)arg3;
@end

@protocol VKRouteMatchedAnnotationPresentationObserver <NSObject>
- (void)annotationPresentationDidChangePresentationCoordinate:(id <VKRouteMatchedAnnotationPresentation>)arg1;
@end

@protocol VKStyleManagerObserver <NSObject>
+ (_Bool)reloadOnStylesheetChange;
@property(readonly, nonatomic) VKStyleManager *styleManager;

@optional
- (void)stylesheetDoneChanging;
- (void)stylesheetDidChange;
- (void)stylesheetTransitionDidProgress;
- (void)stylesheetWillChange;
- (void)stylesheetWillTransition:(unsigned long long)arg1;
- (void)prepareForStylesheetTransitionToMapDisplayStyle:(unsigned long long)arg1 withReadinessBlock:(void (^)(id <VKStyleManagerObserver>))arg2;
@end

@protocol VKTileProviderClient <NSObject>
- (void)didStopLoadingTilesWithError:(NSError *)arg1;
- (void)willStartLoadingTiles;
- (void)tileProviderNeedsUpdate:(VKTileProvider *)arg1;
- (_Bool)tileProviderMayUseNetwork:(VKTileProvider *)arg1;
@end

@protocol VKTileSourceClient <NSObject>
- (void)dirtyTilesFromTileSource:(VKTileSource *)arg1;
- (void)tileSource:(VKTileSource *)arg1 dirtyTilesWithinRect:(const CDStruct_d2b197d1 *)arg2 level:(long long)arg3;
- (void)didStopLoadingTilesWithError:(NSError *)arg1;
- (void)willStartLoadingTiles;
- (_Bool)tileSource:(VKTileSource *)arg1 keyIsNeeded:(const struct VKTileKey *)arg2;
- (void)invalidateTilesFromTileSource:(VKTileSource *)arg1;
- (void)tileSource:(VKTileSource *)arg1 invalidateTilesWithState:(unsigned long long)arg2;
- (void)tileSource:(VKTileSource *)arg1 invalidateKeys:(VKTileKeyList *)arg2;
- (void)tileSource:(VKTileSource *)arg1 invalidateKey:(const struct VKTileKey *)arg2;
- (void)tileSource:(VKTileSource *)arg1 didFailToLoadTileForKey:(const struct VKTileKey *)arg2 error:(NSError *)arg3;
- (void)tileSource:(VKTileSource *)arg1 didFailToDecodeTileForKey:(const struct VKTileKey *)arg2;
- (void)tileSource:(VKTileSource *)arg1 didFetchTile:(VKTile *)arg2 forKey:(const struct VKTileKey *)arg3;
- (_Bool)tileSourceMayUseNetwork:(VKTileSource *)arg1;
@end

@protocol VKTrackableAnnotationPresentation <NSObject>
@property(nonatomic, getter=isTracking) _Bool tracking;
@property(nonatomic) CDStruct_c3b9c2ee presentationCoordinate;
@end

@protocol VKTrackingCameraControllerDelegate <NSObject>

@optional
- (void)trackingCameraController:(VKTrackingCameraController *)arg1 updatedStartAnimationTargetPosition:(struct VKPoint)arg2 orientation:(const CDStruct_aa5aacbc *)arg3;
@end

@protocol VKWorldDelegate <NSObject>
- (void)runAnimation:(VKAnimation *)arg1;
- (void)worldDisplayDidChange:(VKWorld *)arg1;
- (void)worldLayoutDidChange:(VKWorld *)arg1;
@end

__attribute__((visibility("hidden")))
@interface AltTileFetcher : NSObject
{
    GEOTileLoader *_geoTileLoader;
    struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> _keyToJobMap;
    struct Mutex _mutex;
    unsigned int _numDownloads;
    NSString *_tileLoaderClientIdentifier;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)isDownloading;
- (void)purgeExpired:(double)arg1;
- (void)reportCorruptTile:(const struct _GEOTileKey *)arg1;
- (void)cancelRequests;
- (void)updateJobPriority:(shared_ptr_97fa0047 *)arg1;
- (void)cancelJob:(shared_ptr_97fa0047 *)arg1;
- (void)fetchDataForJob:(shared_ptr_97fa0047 *)arg1;
- (shared_ptr_97fa0047)getJobForKey:(const struct _GEOTileKey *)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface AltitudeNetworkRunLoop : NSObject
{
}

+ (void)AltitudeNetworkRun:(CDUnknownBlockType)arg1;
+ (void)_runNetworkThread:(id)arg1;

@end

@interface GEOComposedRouteSection (RenderRegion)
- (id)pathsForRenderRegion:(id)arg1 inOverlay:(id)arg2;
@end

@interface GEOComposedRouteSection (VKPolylineOverlay)
@property(readonly, nonatomic) CDStruct_d2b197d1 vkBounds;
@end

__attribute__((visibility("hidden")))
@interface GGLDisplayLink : NSObject
{
    SEL _selector;
    id _target;
    CADisplayLink *_displayLink;
    CADisplay *_display;
    long long _frameInterval;
    long long _skippedFrames;
    _Bool _paused;
}

@property(retain, nonatomic) CADisplay *display; // @synthesize display=_display;
- (void)_displayLinkFired:(id)arg1;
@property(readonly, nonatomic) double timestamp;
@property(nonatomic) long long frameInterval;
@property(nonatomic, getter=isPaused) _Bool paused;
- (void)invalidate;
- (void)addToRunLoop:(id)arg1 forMode:(id)arg2;
- (void)dealloc;
- (id)target;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;

@end

__attribute__((visibility("hidden")))
@interface GGLImageCanvas : NSObject <MDRenderTarget>
{
    struct CGSize _size;
    double _contentScale;
    _Bool _canMakeImage;
    _Bool _recreateRenderTarget;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _colorBuffer;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _depthStencilBuffer;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> _renderTarget;
    _Bool _useMultisampling;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _msaaColorBuffer;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _msaaDepthStencilBuffer;
    struct unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation>> _msaaBlitOperation;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> _msaaRenderTarget;
}

@property(readonly, nonatomic) _Bool useMultisampling; // @synthesize useMultisampling=_useMultisampling;
@property(nonatomic) struct CGSize size; // @synthesize size=_size;
@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGImage *)newImageWithRenderer:(struct Renderer *)arg1;
- (shared_ptr_edb96180)bitmapDataWithRenderer:(struct Renderer *)arg1;
- (void)didDrawView;
- (void)willDrawView;
- (void)_destroyMSAARenderTarget;
- (void)_createMSAARenderTarget;
- (void)_destroyRenderTarget;
- (void)_createRenderTarget;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2 useMultisampling:(_Bool)arg3;
@property(readonly, nonatomic) struct CGSize sizeInPixels;
@property(readonly, nonatomic) struct RenderTargetOperation *msaaBlitOperation;
@property(readonly, nonatomic) struct RenderTarget *finalRenderTarget;
@property(readonly, nonatomic) struct RenderTarget *msaaRenderTarget;
@property(readonly, nonatomic) struct RenderTarget *renderTarget;

// Remaining properties
@property(readonly, nonatomic) float averageFPS;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface GGLLayer : CAEAGLLayer
{
    unsigned int _renderBuffer;
    unsigned int _depthBuffer;
    unsigned int _frameBuffer;
    _Bool _forceCreateRenderTarget;
    _Bool _readPixels;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> _renderTarget;
    shared_ptr_3f8cd81b _renderer;
    id <GGLLayerDisruptor> _renderDisruptor;
    struct CGSize _backingSize;
    NSObject<GGLRenderQueueSource> *_renderSource;
}

@property(readonly, nonatomic) struct CGSize backingSize; // @synthesize backingSize=_backingSize;
@property id <GGLLayerDisruptor> renderDisruptor; // @synthesize renderDisruptor=_renderDisruptor;
@property NSObject<GGLRenderQueueSource> *renderSource; // @synthesize renderSource=_renderSource;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setContentsScale:(double)arg1;
- (void)setReadPixels;
- (void)drawWithTimestamp:(double)arg1;
- (void)_deleteBuffers;
- (void)_createRenderTarget;
- (void)layoutSublayers;
@property(readonly) struct GLRenderer *renderer;
- (void)dealloc;
- (id)initWithRenderer:(shared_ptr_3f8cd81b)arg1;

@end

__attribute__((visibility("hidden")))
@interface MDDisplayLayer : NSObject <GGLRenderQueueSource, MDRenderTarget>
{
    GGLLayer *_layer;
    id <GGLRenderQueueSource> _renderSource;
    shared_ptr_77723e34 _device;
    shared_ptr_3f8cd81b _renderer;
    struct mutex _debugConsoleManagerCreationLock;
    struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> _debugConsoleManager;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _renderQueueOuter;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> _msaaRenderTarget;
    struct unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation>> _msaaBlitOperation;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _msaaColorBuffer;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _msaaDepthStencilBuffer;
    _Bool _forceMSAATarget;
    _Bool _useMultisampling;
    _Bool _requiresMultisampling;
    struct CGContext *_snapshotContext;
    struct CGRect _bounds;
    double _contentsScale;
}

@property(nonatomic) id <GGLRenderQueueSource> renderSource; // @synthesize renderSource=_renderSource;
@property(readonly, nonatomic) GGLLayer *layer; // @synthesize layer=_layer;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) _Bool debugEnableMultisampling; // @dynamic debugEnableMultisampling;
- (struct DebugConsole *)debugConsoleForId:(int)arg1;
@property(readonly, nonatomic) float averageFPS;
@property(readonly, nonatomic) struct CGSize sizeInPixels;
@property(readonly, nonatomic) double contentScale;
@property(readonly, nonatomic) struct CGSize size;
- (void)didReceiveMemoryWarning;
- (void)recreateLayer;
- (void)destroyLayer;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toLayer:(id)arg2;
- (void)didReadPixels:(shared_ptr_4ce39eb2 *)arg1;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)setBackgroundColor:(struct CGColor *)arg1;
- (void)setContentsGravity:(id)arg1;
- (void)setOpaque:(_Bool)arg1;
- (void)setNeedsDisplayOnBoundsChange:(_Bool)arg1;
- (void)setContentsScale:(double)arg1;
- (void)setBounds:(struct CGRect)arg1;
- (void)expandedPerformanceHUD:(id)arg1;
- (void)disablePerformanceHUD:(id)arg1;
- (void)enablePerformanceHUD:(id)arg1;
- (void)forceLayout;
- (void)resetRenderQueue;
- (RenderQueue_e4212455 *)renderQueue;
@property(nonatomic) _Bool useMultisampling;
- (void)_destroyMSAARenderTarget;
- (void)_createMSAARenderTarget;
- (void)drawWithTimestamp:(double)arg1;
@property(readonly, nonatomic) struct GLRenderer *renderer;
@property(readonly, nonatomic) shared_ptr_807ec9ac device;
- (void)_createGLLayer;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface MDTextureCanvas : NSObject <MDRenderTarget>
{
    struct CGSize _size;
    struct CGSize _sizeInPixels;
    double _contentScale;
}

@property(readonly, nonatomic) struct CGSize sizeInPixels; // @synthesize sizeInPixels=_sizeInPixels;
@property(readonly, nonatomic) struct CGSize size; // @synthesize size=_size;
@property(readonly, nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
- (id).cxx_construct;
- (void)didDrawView;
- (void)willDrawView;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2;

// Remaining properties
@property(readonly, nonatomic) float averageFPS;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NSBundle (VKBundle)
+ (id)__vkBundle;
@end

@interface NSLocale (VKFoundationUtility)
+ (long long)_vk_indexForLocale:(id)arg1;
@end

@interface NSMutableSet (VKFoundationUtility)
+ (id)_vk_newWeakSet;
@end

@interface NSString (VGLColorExtras)
- (double)colorInRange:(struct _NSRange)arg1;
- (_Bool)red:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;
@end

@interface NSString (VKFoundationInterning)
- (id)_vk_internedString;
@end

@interface NSString (VKRasterTileKeyAdditions)
- (struct VKRasterTileKey)rasterTileKeyValue;
@end

__attribute__((visibility("hidden")))
@interface VGLBitmapData : NSObject
{
    NSData *_bitmapData;
    struct VGLBitmapInfo _bitmapInfo;
    id _surface;
}

@property(readonly, nonatomic) struct VGLBitmapInfo bitmapInfo; // @synthesize bitmapInfo=_bitmapInfo;
- (void)getBytes:(void *)arg1 range:(struct _NSRange)arg2;
@property(readonly, nonatomic) unsigned long long dataLength;
- (void)dealloc;
- (id)description;
- (id)initWithBytes:(void *)arg1 bitmapInfo:(const struct VGLBitmapInfo *)arg2;
- (void)_commonInitWithBytes:(void *)arg1 bitmapInfo:(const struct VGLBitmapInfo *)arg2;

@end

__attribute__((visibility("hidden")))
@interface VK3DObjectGroup : NSObject
{
    struct unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> _meshVendor;
    shared_ptr_6e6219d6 _styleQuery;
}

@property(nonatomic) shared_ptr_6e6219d6 styleQuery; // @synthesize styleQuery=_styleQuery;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)initWithStyleQuery:(shared_ptr_6e6219d6)arg1;
@property(readonly, nonatomic) MeshVendor_3faa0a72 *meshVendor;

@end

__attribute__((visibility("hidden")))
@interface VK3DObjectSubMapModel : NSObject
{
    struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> _objectShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _object2DRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _object3DRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _object2DRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _object3DRenderStateWithBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _objectRenderItemPool;
    VKBuildingFootprintMapModel *_buildingMapModel;
}

@property(nonatomic) VKBuildingFootprintMapModel *buildingMapModel; // @synthesize buildingMapModel=_buildingMapModel;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)resetPools;
- (void)flushPools;
- (id)initWithBuildingMapModel:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VK3DObjectSubTile : NSObject
{
    NSMutableArray *_objectGroups;
    GEOVectorTile *_modelTile;
    VKStyleManager *_styleManager;
    VKSharedResources *_sharedResources;
    long long _vectorType;
    double _contentScale;
    struct vector<VKBuildingHeightMap, std::__1::allocator<VKBuildingHeightMap>> _heights;
}

@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(retain, nonatomic) VKSharedResources *sharedResources; // @synthesize sharedResources=_sharedResources;
@property(retain, nonatomic) VKStyleManager *styleManager; // @synthesize styleManager=_styleManager;
@property(retain, nonatomic) GEOVectorTile *modelTile; // @synthesize modelTile=_modelTile;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)fillShadowAreasInContext:(struct CGContext *)arg1;
- (Box_3fb92e00)shadowBounds;
- (_Bool)heightAtPoint:(const Matrix_8746f91e *)arg1 outZ:(float *)arg2;
- (_Bool)_createMeshForObjects:(CDStruct_2da3f85a *)arg1 count:(unsigned long long)arg2;
- (void)_read3DObjects:(vector_25c79282 *)arg1 fromDiskForTileKey:(const struct _GEOTileKey *)arg2;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(double)arg5;
@property(copy, nonatomic) NSArray *objectGroups;

@end

__attribute__((visibility("hidden")))
@interface VKAnchor : NSObject
{
    shared_ptr_6f3fd3aa _anchor;
}

- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) id <VKAnchorDelegate> delegate;
- (long long)worldIndexWithContext:(id)arg1;
@property(readonly, nonatomic) struct VKPoint worldPoint;
@property(readonly, nonatomic) struct VKPoint mercatorPoint;
@property(nonatomic) CDStruct_c3b9c2ee coordinate;
- (void)setMercatorPoint:(struct VKPoint)arg1;
- (void)worldPointDidChange;
@property(readonly, nonatomic) _Bool followsTerrain;
@property(readonly, nonatomic) _Bool isGeocentric;
@property(readonly, nonatomic) _Bool isMercator;
- (id)initWithAnchor:(shared_ptr_6f3fd3aa)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKAnchorContext : NSObject
{
    shared_ptr_4d0abf3b _anchorContext;
    shared_ptr_00dc923b _anchorFactory;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)newAnchorAtCoordinate:(CDStruct_c3b9c2ee)arg1 followsTerrain:(_Bool)arg2;
- (void)setMercatorTerrainHeightCache:(id)arg1;
- (_Bool)isMercator;
- (id)initGeocentricWithCache:(id)arg1;
- (id)initMercator;
- (id)initWithAnchorContext:(struct AnchorContext *)arg1;
- (shared_ptr_00dc923b)anchorFactory;
- (shared_ptr_4d0abf3b)anchorContext;
- (id)init;

@end

@interface VKAnchorWrapper : NSObject <VKAnchorDelegate>
{
    VKAnchor *_anchor;
    _Bool _followsTerrain;
    struct CGPoint _screenPointInCanvas;
    VKLayoutContext *_lastLayoutContext;
    CDStruct_2c43369c _lastCoordinate;
    _Bool _isUpdating;
    double _pointsPerMeter;
    MDDisplayLayer *_displayLayer;
}

@property(nonatomic) MDDisplayLayer *displayLayer; // @synthesize displayLayer=_displayLayer;
@property(nonatomic) _Bool followsTerrain; // @synthesize followsTerrain=_followsTerrain;
- (id).cxx_construct;
- (void)anchorWorldPointDidChange:(void *)arg1;
- (void)updateIfNeeded;
- (void)layoutWithContext:(id)arg1;
- (void)_updateCachedPointWithContext:(id)arg1;
- (id)_anchorWithContext:(id)arg1;
- (double)pointOffsetForDistanceOffset:(double)arg1;
- (struct CGPoint)pointInLayer:(id)arg1;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKAnimation : NSObject
{
    CDUnknownBlockType _stepHandler;
    CDUnknownBlockType _completionHandler;
    CDUnknownBlockType _timingFunction;
    double _duration;
    double _startTimestamp;
    double _lastTimestamp;
    NSString *_name;
    int _priority;
    id <VKAnimationRunner> _runner;
    struct {
        unsigned int resuming:1;
        unsigned int runsForever:1;
        unsigned int startTimestampSet:1;
        unsigned int state:3;
    } _flags;
}

+ (void)setDragCoefficientGetter:(CDUnknownBlockType)arg1;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(copy, nonatomic) CDUnknownBlockType stepHandler; // @synthesize stepHandler=_stepHandler;
@property(readonly, nonatomic) int priority; // @synthesize priority=_priority;
@property(copy, nonatomic) CDUnknownBlockType timingFunction; // @synthesize timingFunction=_timingFunction;
@property(nonatomic) double duration; // @synthesize duration=_duration;
- (id).cxx_construct;
- (void)transferToRunner:(id)arg1;
- (void)stop;
- (void)startWithRunner:(id)arg1;
- (void)onTimerFired:(double)arg1;
- (void)resume;
- (void)pause;
- (void)_stopAnimation:(_Bool)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithName:(id)arg1;
- (id)initWithDuration:(double)arg1 name:(id)arg2;
- (id)init;
- (id)initWithDuration:(double)arg1;
- (id)initWithPriority:(int)arg1;
- (id)initWithPriority:(int)arg1 name:(id)arg2;
- (id)initWithDuration:(double)arg1 priority:(int)arg2 name:(id)arg3;
@property(nonatomic) _Bool runsForever;
@property(readonly, nonatomic) _Bool running;

@end

__attribute__((visibility("hidden")))
@interface VKAnnotationMarkerLayer : NSObject
{
    VKAnnotationModel *_model;
    VKAnnotationMarkerLayer *_superlayer;
    NSMutableArray *_sublayers;
    VKAnnotationMarker *_annotationMarker;
    struct CGPoint _centerOffset;
    struct CGPoint _accumulatedCenterOffset;
    _Bool _hasScreenRect;
    CDStruct_aca18c62 _screenRect;
    _Bool _hasMass;
    long long _styleType;
    double _contentScale;
}

@property(nonatomic) VKAnnotationModel *model; // @synthesize model=_model;
@property(nonatomic) long long styleType; // @synthesize styleType=_styleType;
@property(readonly, nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(nonatomic) _Bool hasMass; // @synthesize hasMass=_hasMass;
@property(nonatomic) CDStruct_d2b197d1 screenRect; // @synthesize screenRect=_screenRect;
@property(readonly, nonatomic) _Bool hasScreenRect; // @synthesize hasScreenRect=_hasScreenRect;
@property(nonatomic) struct CGPoint accumulatedCenterOffset; // @synthesize accumulatedCenterOffset=_accumulatedCenterOffset;
@property(nonatomic) struct CGPoint centerOffset; // @synthesize centerOffset=_centerOffset;
@property(nonatomic) VKAnnotationMarker *annotationMarker; // @synthesize annotationMarker=_annotationMarker;
@property(readonly, copy, nonatomic) NSArray *sublayers; // @synthesize sublayers=_sublayers;
@property(nonatomic) VKAnnotationMarkerLayer *superlayer; // @synthesize superlayer=_superlayer;
- (id).cxx_construct;
- (void)stylesheetDidChange;
- (void)_updateStyle;
- (long long)_vectorType;
- (void)updateWithStyleQuery:(const shared_ptr_6e6219d6 *)arg1;
- (id)_styleAttributes;
- (double)distanceFromPoint:(struct VKPoint)arg1 canvasSize:(struct CGSize)arg2;
- (void)updateWithContentScale:(double)arg1;
- (void)layoutWithContext:(id)arg1;
- (void)appendCommandsToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2;
- (void)willLayoutWithContext:(id)arg1;
- (_Bool)shouldSnapToPixelsWithContext:(id)arg1;
- (void)insertSublayer:(id)arg1 aboveSublayer:(id)arg2;
- (void)insertSublayer:(id)arg1 belowSublayer:(id)arg2;
- (void)addSublayer:(id)arg1;
- (void)removeFromSuperlayer;
- (void)removeSublayer:(id)arg1;
- (void)runAnimation:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VKAnnotationMarker : VKAnnotationMarkerLayer <VKAnchorDelegate, VKTrackableAnnotationPresentation>
{
    id <VKAnnotation> _annotation;
    NSString *_reuseIdentifier;
    struct VKPoint _projectedPoint;
    struct VKPoint _projectedGroundPoint;
    _Bool _selected;
    _Bool _canShowCallout;
    long long _dragState;
    _Bool _draggable;
    _Bool _tracking;
    _Bool _animatingToCoordinate;
    VKAnimation *_coordinateAnimation;
    _Bool _followsTerrain;
    CDStruct_2c43369c _presentationCoordinate;
    struct CGPoint _presentationPoint;
    _Bool _useScreenSpacePoint;
    float _dropFraction;
    VKAnchor *_anchor;
    CDStruct_129da68a _styleTransitionState;
    id <VKAnnotationMarkerDelegate> _delegate;
    _Bool _hidden;
    struct CGPoint _calloutOffset;
}

+ (id)keyPathsForValuesAffectingSubtitle;
+ (id)keyPathsForValuesAffectingTitle;
+ (unsigned long long)_selectedZIndex;
+ (unsigned long long)_zIndex;
@property(nonatomic) _Bool hidden; // @synthesize hidden=_hidden;
@property(nonatomic) float dropFraction; // @synthesize dropFraction=_dropFraction;
@property(nonatomic) _Bool useScreenSpacePoint; // @synthesize useScreenSpacePoint=_useScreenSpacePoint;
@property(nonatomic) _Bool followsTerrain; // @synthesize followsTerrain=_followsTerrain;
@property(nonatomic) _Bool animatingToCoordinate; // @synthesize animatingToCoordinate=_animatingToCoordinate;
@property(nonatomic) id <VKAnnotationMarkerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) CDStruct_129da68a styleTransitionState; // @synthesize styleTransitionState=_styleTransitionState;
@property(nonatomic) struct CGPoint calloutOffset; // @synthesize calloutOffset=_calloutOffset;
@property(nonatomic, getter=isDraggable) _Bool draggable; // @synthesize draggable=_draggable;
@property(nonatomic) long long dragState; // @synthesize dragState=_dragState;
@property(nonatomic) _Bool canShowCallout; // @synthesize canShowCallout=_canShowCallout;
@property(nonatomic, getter=isSelected) _Bool selected; // @synthesize selected=_selected;
@property(nonatomic) struct VKPoint projectedGroundPoint; // @synthesize projectedGroundPoint=_projectedGroundPoint;
@property(nonatomic) struct VKPoint projectedPoint; // @synthesize projectedPoint=_projectedPoint;
@property(readonly, nonatomic) NSString *reuseIdentifier; // @synthesize reuseIdentifier=_reuseIdentifier;
@property(retain, nonatomic) id <VKAnnotation> annotation; // @synthesize annotation=_annotation;
- (id).cxx_construct;
- (_Bool)isPersistent;
- (id)subtitle;
@property(readonly, copy, nonatomic) NSString *title;
- (id)debugAnchorPointString;
- (struct CGPoint)screenPointToScrollRelativeToWithCanvasSize:(struct CGSize)arg1 canvasScale:(double)arg2;
- (struct CGPoint)calloutAnchorPointWithCanvasSize:(struct CGSize)arg1 canvasScale:(double)arg2 snapToPixels:(_Bool)arg3;
- (struct VKPoint)pointInWorldWithContext:(id)arg1;
- (struct CGRect)significantFrameWithCanvasSize:(struct CGSize)arg1;
- (struct CGRect)frameWithCanvasSize:(struct CGSize)arg1;
- (struct CGPoint)pointToDropAtForPoint:(struct CGPoint)arg1;
- (double)animateInWithCanvasSize:(struct CGSize)arg1 delay:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) _Bool canAnimateIn;
- (void)animateFromCoordinate:(CDStruct_c3b9c2ee)arg1 duration:(double)arg2;
- (void)setDragState:(long long)arg1 animated:(_Bool)arg2;
- (id)anchorWithContext:(id)arg1;
@property(nonatomic, getter=isTracking) _Bool tracking;
@property(nonatomic) struct CGPoint presentationPoint;
@property(nonatomic) CDStruct_c3b9c2ee presentationCoordinate;
- (void)anchorWorldPointDidChange:(void *)arg1;
- (void)prepareForReuse;
- (void)dealloc;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKModelObject : NSObject
{
    VKWorld *_world;
    VKModelObject *_supermodel;
    NSMutableArray *_submodels;
    _Bool _active;
    unsigned int _needsLayout;
    unsigned int _needsDisplay;
    NSObject<OS_dispatch_semaphore> *_drawReady;
    struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> _commandBuffers;
    struct CommandBufferIdSet _supportedPassIds;
}

@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(readonly, nonatomic) VKModelObject *supermodel; // @synthesize supermodel=_supermodel;
@property(readonly, nonatomic) NSArray *submodels; // @synthesize submodels=_submodels;
@property(nonatomic) VKWorld *world; // @synthesize world=_world;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)unLockCommandBuffers:(struct RenderQueue *)arg1;
- (void)lockCommandBuffers:(struct RenderQueue *)arg1;
- (void)setSupportedPasses:(const struct CommandBufferIdSet *)arg1;
- (void)gglLayoutSceneIfNeeded:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3 dispatchQueue:(id)arg4;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (void)runAnimation:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsLayout;
- (void)didMoveToSupermodel;
- (void)willMoveToSupermodel:(id)arg1;
- (void)clearCommandBuffers;
- (const struct CommandBufferIdSet *)supportedRenderPasses;
- (void)didRemoveFromSuperModel;
- (void)removeFromSupermodel;
- (void)removeSubmodel:(id)arg1;
- (void)addSubmodel:(id)arg1;
- (void)_removeSubmodel:(id)arg1;
- (void)reset;
- (void)didReceiveMemoryWarning;
- (void)dealloc;
- (id)init;
- (_Bool)shouldLayoutWithoutStyleManager;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (void)setSupermodel:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKAnnotationModel : VKModelObject <VKMapLayer, VKStyleManagerObserver>
{
    NSMutableArray *_annotationMarkers;
    VKAnnotationMarker *_selectedAnnotationMarker;
    NSMutableSet *_animatingMarkers;
    NSMutableArray *_markersToAnimate;
    VKAnnotationMarker *_draggingAnnotationMarker;
    _Bool _didDragMarker;
    _Bool _hasEverDrawnSomething;
    CDStruct_129da68a _styleTransitionState;
    CDUnknownBlockType _annotationMarkerDeselectionCallback;
    VKMapModel *_mapModel;
}

+ (_Bool)reloadOnStylesheetChange;
@property(nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
@property(copy, nonatomic) CDUnknownBlockType annotationMarkerDeselectionCallback; // @synthesize annotationMarkerDeselectionCallback=_annotationMarkerDeselectionCallback;
@property(nonatomic) CDStruct_129da68a styleTransitionState; // @synthesize styleTransitionState=_styleTransitionState;
@property(readonly, nonatomic) NSArray *annotationMarkers; // @synthesize annotationMarkers=_annotationMarkers;
- (id).cxx_construct;
- (void)stylesheetDidChange;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (id)annotationMarkerForSelectionAtPoint:(struct VKPoint)arg1 avoidCurrent:(_Bool)arg2 canvasSize:(struct CGSize)arg3;
- (void)removeAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(_Bool)arg2;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (void)dealloc;
@property(readonly, nonatomic) _Bool needsLayout;
- (void)anchorPositionChangedForMarker:(id)arg1;
@property(readonly, nonatomic) VKAnnotationMarker *selectedAnnotationMarker;
- (unsigned long long)mapLayerPosition;
- (id)init;
- (_Bool)shouldLayoutWithoutStyleManager;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKCameraController : NSObject
{
    VKCamera *_camera;
    id <MDRenderTarget> _canvas;
    id <VKCameraControllerDelegate> _delegate;
    _Bool _gesturing;
    unsigned long long _regionChangeCount;
    _Bool _inProgressRegionChangeIsAnimated;
}

@property(nonatomic) id <VKCameraControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic, getter=isGesturing) _Bool gesturing; // @synthesize gesturing=_gesturing;
@property(nonatomic) id <MDRenderTarget> canvas; // @synthesize canvas=_canvas;
@property(retain, nonatomic) VKCamera *camera; // @synthesize camera=_camera;
- (id)detailedDescription;
@property(readonly, nonatomic, getter=isAnimating) _Bool animating;
- (void)endRegionChange;
- (void)beginRegionChange:(_Bool)arg1;
- (void)canvasDidLayout;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKAnnotationTrackingCameraController : VKCameraController
{
    id <VKTrackableAnnotation> _annotation;
    id <VKTrackableAnnotationPresentation> _annotationPresentation;
    VKAnimation *_currentAnimation;
    struct VKPoint _currentAnimationStartPoint;
    struct VKPoint _currentAnimationStartCameraPosition;
    struct VKPoint _currentAnimationEndPoint;
    struct VKPoint _currentAnimationEndCameraPosition;
    double _pendingChangeDuration;
    VKAnimation *_currentHeadingAnimation;
    double _pendingHeadingChangeDuration;
    float _headingAnimationCompletedAngle;
    struct VKEdgeInsets _edgeInsets;
    long long _zoomStyle;
    struct {
        unsigned int hasPendingChange:1;
        unsigned int paused:1;
        unsigned int trackingHeading:1;
        unsigned int hasPendingHeadingChange:1;
        unsigned int isInitialRegionChange:1;
        unsigned int isJumpingToAnnotation:1;
        unsigned int annotationImplementsAccuracy:1;
        unsigned int annotationImplementsHeading:1;
        unsigned int annotationImplementsExpectedCoordinateUpdateInterval:1;
        unsigned int annotationImplementsExpectedHeadingUpdateInterval:1;
    } _flags;
}

@property(nonatomic) long long zoomStyle; // @synthesize zoomStyle=_zoomStyle;
@property(readonly, nonatomic) id <VKTrackableAnnotation> annotation; // @synthesize annotation=_annotation;
@property(nonatomic) struct VKEdgeInsets edgeInsets; // @synthesize edgeInsets=_edgeInsets;
- (id).cxx_construct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)resumeAnimation;
- (void)pauseAnimation;
- (_Bool)isAnimating;
- (void)setGesturing:(_Bool)arg1;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
- (void)_rotateToHeadingAnimated:(_Bool)arg1 duration:(double)arg2;
- (void)_goToAnnotationAnimated:(_Bool)arg1 duration:(double)arg2 isInitial:(_Bool)arg3;
- (void)updateFramerate;
@property(readonly, nonatomic, getter=isTrackingHeading) _Bool trackingHeading;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKTile : NSObject
{
    struct VKTileKey _key;
    CDStruct_aa5aacbc _matrix;
    CDStruct_aa5aacbc _inverseMatrix;
    VKTilePool *_pool;
    double _birthdate;
    struct VKCameraState _cameraState;
    CDUnion_f5b85e25 _shaderMatrix;
    CDStruct_aca18c62 bounds;
    Matrix_08d701e4 _gmMatrix;
    Matrix_08d701e4 _gmInverseMatrix;
    Matrix_99e705ad _gmShaderMatrix;
    shared_ptr_1fee3c91 _viewUniformData;
}

@property(readonly, nonatomic) double birthdate; // @synthesize birthdate=_birthdate;
@property(readonly, nonatomic) CDUnion_f5b85e25 shaderMatrix; // @synthesize shaderMatrix=_shaderMatrix;
@property(readonly, nonatomic) struct VKTileKey key; // @synthesize key=_key;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (unsigned long long)geometryCount;
@property(readonly, nonatomic) double tileWidth;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *inverseMatrix;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *matrix;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1;
- (void)setPool:(id)arg1;
- (void)setKey:(const struct VKTileKey *)arg1;
- (id)description;
- (const struct VKTileKey *)keyPointer;
- (const Matrix_99e705ad *)gmShaderMatrix;
- (const Matrix_08d701e4 *)gmInverseMatrix;
- (const Matrix_08d701e4 *)gmMatrix;
@property(readonly) shared_ptr_1fee3c91 viewUniformData;

@end

__attribute__((visibility("hidden")))
@interface VKAttributesTile : VKTile
{
    int _metroArea;
}

@property(readonly, nonatomic) int metroArea; // @synthesize metroArea=_metroArea;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKTileSource : NSObject
{
    id <VKTileSourceClient> _client;
    VKTilePool *_tilePool;
    VKTileKeyMap *_pendingLoads;
    VKTileKeyList *_decoding;
    VKTileKeyList *_failedTiles;
    VKStyleManager *_styleManager;
    double _contentScale;
    VKSharedResources *_sharedResources;
    int loadingTiles;
    NSError *_recentError;
    unsigned int _tileGroupIdentifier;
    NSLocale *_locale;
    NSString *_tileLoaderClientIdentifier;
}

@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(retain, nonatomic) VKSharedResources *sharedResources; // @synthesize sharedResources=_sharedResources;
@property(retain, nonatomic) VKStyleManager *styleManager; // @synthesize styleManager=_styleManager;
@property(nonatomic) id <VKTileSourceClient> client; // @synthesize client=_client;
- (void)forceDownload;
- (void)didFailToLoadTileKey:(const struct _GEOTileKey *)arg1 error:(id)arg2;
- (void)didFinishWithNetwork;
- (void)willGoToNetwork;
- (void)didFetchData:(id)arg1 forKey:(const struct _GEOTileKey *)arg2;
- (void)_failedToLoadSourceKey:(const struct VKTileKey *)arg1 downloadKey:(const struct _GEOTileKey *)arg2 error:(id)arg3;
- (void)tileAvailabilityChanged:(id)arg1;
- (void)populateVisibleTileSets:(id)arg1 withTiles:(id)arg2;
- (void)decodeData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (void)didLoadTile:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (void)fetchedTile:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (void)failedToDecodeSourceKey:(const struct VKTileKey *)arg1;
- (_Bool)_shouldDecodeTile:(const struct VKTileKey *)arg1;
- (void)cancelDownload:(const struct _GEOTileKey *)arg1;
- (void)performDownload:(const struct _GEOTileKey *)arg1;
- (_Bool)cancelFetchForKey:(const struct VKTileKey *)arg1;
- (_Bool)cancelFetchForKey:(const struct VKTileKey *)arg1 sourceKey:(const struct VKTileKey *)arg2;
- (void)fetchTileForKey:(const struct VKTileKey *)arg1;
- (void)fetchTileForKey:(const struct VKTileKey *)arg1 sourceKey:(const struct VKTileKey *)arg2;
- (_Bool)_shouldUseDecodedTile:(id)arg1 extraInfo:(id)arg2;
- (id)_extraInfoForPendingSourceKey:(const struct VKTileKey *)arg1;
- (id)tileForKey:(const struct VKTileKey *)arg1;
- (id)tileForSourceKey:(const struct VKTileKey *)arg1 renderKey:(const struct VKTileKey *)arg2;
- (_Bool)canFetchTileForKey:(const struct VKTileKey *)arg1;
- (void)_fetchedTile:(id)arg1;
- (struct VKTileKey)sourceKeyForDownloadKey:(const struct _GEOTileKey *)arg1;
- (struct _GEOTileKey)downloadKeyForSourceKey:(const struct VKTileKey *)arg1;
- (struct VKTileKey)sourceKeyForRenderKey:(const struct VKTileKey *)arg1;
- (struct VKTileKey)nativeKeyForRenderKey:(const struct VKTileKey *)arg1;
@property(readonly, nonatomic) long long maximumZoomLevel;
@property(readonly, nonatomic) _Bool maximumZoomLevelBoundsCamera;
@property(readonly, nonatomic) long long minimumZoomLevel;
@property(readonly, nonatomic) _Bool minimumZoomLevelBoundsCamera;
@property(readonly, nonatomic) long long zEquivalenceClass;
- (struct _GEOTileKey)downloadKeyAtX:(unsigned int)arg1 y:(unsigned int)arg2 z:(unsigned int)arg3;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
@property(readonly, nonatomic) unsigned int maximumDownloadZoomLevel;
@property(readonly, nonatomic) unsigned int minimumDownloadZoomLevel;
@property(readonly, nonatomic) long long tileSize;
- (id)detailedDescription;
- (_Bool)mayUseNetwork;
- (void)foreachTileInPool:(CDUnknownBlockType)arg1;
- (void)clearCaches;
- (void)dealloc;
- (id)init;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 locale:(id)arg2;
@property(readonly, nonatomic) struct Device *device;
- (id)tileLoader;

@end

__attribute__((visibility("hidden")))
@interface VKTileSetBackedTileSource : VKTileSource
{
    GEOActiveTileSet *_tileSet;
    struct _GEOTileKey _downloadTemplate;
    unsigned int _minimumDownloadZoomLevel;
    unsigned int _maximumDownloadZoomLevel;
    VKTimer *_expirationTimer;
    VKTilePool *_expiredTilePool;
    struct _NSRange _zoomLevelRange;
    _VKTileSetBackedTileSourceTimerTarget *_timerTarget;
}

@property(retain, nonatomic) GEOActiveTileSet *tileSet; // @synthesize tileSet=_tileSet;
- (id).cxx_construct;
- (long long)maximumZoomLevel;
- (long long)minimumZoomLevel;
- (long long)defaultMaximumZoomLevel;
- (long long)defaultMinimumZoomLevel;
- (unsigned long long)mapLayerForZoomLevelRange;
- (void)setStyleManager:(id)arg1;
- (void)populateVisibleTileSets:(id)arg1 withTiles:(id)arg2;
- (void)_expireTiles;
- (void)_scheduleTileExpirationTimer:(double)arg1 forceUpdate:(_Bool)arg2;
- (void)fetchedTile:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (id)tileForKey:(const struct VKTileKey *)arg1;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (struct VKTileKey)sourceKeyForRenderKey:(const struct VKTileKey *)arg1;
- (struct _GEOTileKey)downloadKeyAtX:(unsigned int)arg1 y:(unsigned int)arg2 z:(unsigned int)arg3;
- (unsigned int)maximumDownloadZoomLevel;
- (unsigned int)minimumDownloadZoomLevel;
- (long long)tileSize;
- (double)_nextTileExpirationDate;
- (double)_expirationInterval;
- (_Bool)expires;
- (void)setClient:(id)arg1;
- (void)clearCaches;
- (id)tileLoader;
- (void)dealloc;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKVectorTileSource : VKTileSetBackedTileSource
{
}

- (long long)defaultMaximumZoomLevel;
- (_Bool)minimumZoomLevelBoundsCamera;

@end

__attribute__((visibility("hidden")))
@interface VKAttributesTileSource : VKVectorTileSource
{
}

- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (long long)zEquivalenceClass;
- (unsigned int)maximumDownloadZoomLevel;
- (unsigned int)minimumDownloadZoomLevel;
- (long long)tileSize;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKRasterTileSource : VKTileSetBackedTileSource
{
    NSMutableDictionary *_genericTextureCache;
    struct unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> _gglGenericRasterTextureCache;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)decodeData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (void)_fetchedTile:(id)arg1;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (void)clearCaches;
- (void)dealloc;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKBackgroundRasterTileSource : VKRasterTileSource
{
}

- (unsigned long long)mapLayerForZoomLevelRange;
- (long long)defaultMaximumZoomLevel;
- (_Bool)maximumZoomLevelBoundsCamera;

@end

__attribute__((visibility("hidden")))
@interface VKRenderStyle : NSObject
{
    struct RenderStyle _internal;
    void *_query;
}

@property(nonatomic) void *query; // @synthesize query=_query;
- (id).cxx_construct;
@property(readonly, nonatomic) NSString *targetName;
@property(readonly, nonatomic) NSString *sourceName;
@property(readonly, nonatomic) float blendFactor;
@property(readonly, nonatomic) _Bool hasTargetStyle;
- (void)setTargetStyleData:(struct StyleData *)arg1 animationFactor:(float *)arg2;
- (void)setSourceStyleData:(struct StyleData *)arg1;
- (id)initWithQuery:(void *)arg1 data:(struct StyleData *)arg2 variantData:(struct StyleData *)arg3 blendingFactor:(float *)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKBuildingDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
- (float)strokeWidth3DAtZoom:(float)arg1;
- (Matrix_5173352a)strokeColor3DAtZoom:(float)arg1;
- (_Bool)hasStrokeWidth3D;
- (_Bool)hasStrokeColor3D;
- (float)footprintStrokeWidthAtZoom:(float)arg1;
- (Matrix_5173352a)footprintStrokeColorAtZoom:(float)arg1;
- (int)roofStyle;
- (_Bool)visibleAtZoom:(float)arg1;
- (_Bool)outlineAtZoom:(float)arg1;
- (Matrix_5173352a)flatColorAtZoom:(float)arg1;
- (Matrix_5173352a)landmarkColorAtZoom:(float)arg1;
- (Matrix_5173352a)outlineColorAtZoom:(float)arg1;
- (Matrix_5173352a)facadeColorAtZoom:(float)arg1;
- (Matrix_5173352a)topColorAtZoom:(float)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKMapTileModel : VKModelObject <VKMapLayer, VKStyleManagerObserver>
{
    NSMutableSet *_tilesWillEnterScene;
    NSMutableSet *_tilesInScene;
    NSMutableSet *_tilesInScenePlusExitingTiles;
    NSMutableSet *_tilesWillExitScene;
    NSMutableSet *_tilesExitingScene;
    NSMutableSet *_previousTilesInScene;
    VKMapModel *_mapModel;
    unsigned char _minimumZ;
    unsigned char _maximumZ;
}

+ (_Bool)reloadOnActiveTileGroupChange;
+ (_Bool)reloadOnStylesheetChange;
@property(readonly, nonatomic) unsigned char maximumZ; // @synthesize maximumZ=_maximumZ;
@property(readonly, nonatomic) unsigned char minimumZ; // @synthesize minimumZ=_minimumZ;
@property(nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
@property(readonly, nonatomic) NSSet *tilesInScenePlusExitingTiles; // @synthesize tilesInScenePlusExitingTiles=_tilesInScenePlusExitingTiles;
@property(readonly, nonatomic) NSSet *tilesInScene; // @synthesize tilesInScene=_tilesInScene;
- (void)updateTilesInScene:(id)arg1 withContext:(id)arg2 categorize:(_Bool)arg3;
- (void)activeTileGroupChanged;
- (void)stylesheetDidChange;
- (void)stylesheetWillChange;
- (void)removePersistingExitingTiles:(id)arg1;
- (void)willStopDrawingTiles:(id)arg1;
- (void)willStartDrawingTiles:(id)arg1;
- (void)didMoveToSupermodel;
- (void)reset;
- (void)dealloc;
- (id)init;
- (void)createCollections;
- (void)createCollectionsIfNecessary;
- (void)clearCollections;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (_Bool)shouldLayoutWithoutStyleManager;
- (unsigned long long)mapLayerPosition;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKVectorMapModel : VKMapTileModel
{
    int _sourceTileZtoStencilOffset;
    _Bool _needsTileStencil;
    struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem>>> _stencilItems;
    struct vector<std::__1::shared_ptr<ggl::RenderState>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState>>> _stencilStates;
    struct vector<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>>> _stencilShaderSetups;
}

+ (_Bool)reloadOnActiveTileGroupChange;
+ (_Bool)reloadOnStylesheetChange;
@property(nonatomic) _Bool needsTileStencil; // @synthesize needsTileStencil=_needsTileStencil;
@property(nonatomic) int sourceTileZtoStencilOffset; // @synthesize sourceTileZtoStencilOffset=_sourceTileZtoStencilOffset;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)pushStencilItems:(struct CommandBuffer *)arg1 tiles:(id)arg2 minZ:(int)arg3 maxZ:(int)arg4 fullyLoaded:(_Bool)arg5 layoutContext:(id)arg6;
- (void)pushStencilItems:(struct CommandBuffer *)arg1 fullyLoaded:(_Bool)arg2 layoutContext:(id)arg3;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)_layoutScene:(id)arg1 withContext:(id)arg2;
- (_Bool)wantsCategorizedSourceTiles;
- (unsigned long long)mapLayerPosition;

@end

__attribute__((visibility("hidden")))
@interface VKBuildingFootprintMapModel : VKVectorMapModel <VKMercatorTerrainHeightProvider, VKMapLayer>
{
    float _brightness;
    long long _vectorType;
    int _buildingMode;
    VKAnimation *_styleChangeAnimation;
    VKAnimation *_fadeBuildingAnimation;
    _Bool _fadeTiles;
    VKSkyModel *_skyModel;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> _currentOccluders;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList>>> _previousOccluders;
    struct RenderItemBatcher _batcher;
    float _minLayeringHeight;
    float _maxLayeringHeight;
    _Bool _shouldDraw3DBuildingsInVectorBuildingsRenderPass;
    _Bool _shouldDraw3DBuildingsIn3DBuildingsRenderPass;
    _Bool _initializedStyles;
    id <VKBuildingFootprintMapModelDelegate> _delegate;
    int _stencilRef;
    VK3DObjectSubMapModel *_landmarksModel;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>>> _strokeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>>> _fillShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>>> _topShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>>> _stroke3DShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup>>> _buildingShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>>> _pointyRoofShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>>> _shadowShaderSetupPool;
    struct shared_ptr<ggl::RenderState> _strokeRenderState;
    struct shared_ptr<ggl::RenderState> _fillRenderState;
    struct shared_ptr<ggl::RenderState> _fillRenderStateWithBlending;
    struct shared_ptr<ggl::RenderState> _threeDRenderStateWithoutBlending;
    struct shared_ptr<ggl::RenderState> _threeDRenderStateWithBlending;
    struct shared_ptr<ggl::RenderState> _threeDStrokeRenderState;
    struct shared_ptr<ggl::RenderState> _shadowsRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _stroke3DRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _buildingRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _shadowRenderItemPool;
    _Bool _supportsStrokes;
    _Bool _supports3DStrokes;
    _Bool _supportsBuildingShadows;
    VKMercatorTerrainHeightCache *_heightCache;
}

@property(retain, nonatomic) VK3DObjectSubMapModel *landmarksModel; // @synthesize landmarksModel=_landmarksModel;
@property(nonatomic) id <VKBuildingFootprintMapModelDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) VKSkyModel *skyModel; // @synthesize skyModel=_skyModel;
@property(nonatomic) int buildingMode; // @synthesize buildingMode=_buildingMode;
@property(readonly, nonatomic) VKMercatorTerrainHeightCache *heightCache; // @synthesize heightCache=_heightCache;
@property(nonatomic) _Bool fadeTiles; // @synthesize fadeTiles=_fadeTiles;
@property(nonatomic) long long vectorType; // @synthesize vectorType=_vectorType;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setBuildingMode:(int)arg1 animated:(_Bool)arg2;
- (void)generateRenderItemsForBuildingShadowsInScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate3DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate3DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate2DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)generate2DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer *)arg3;
- (void)_updateBuildingModeForContext:(id)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)resetPools;
- (void)flushPools;
- (void)didReceiveMemoryWarning;
- (void)reset;
- (_Bool)wantsCategorizedSourceTiles;
- (double)heightAtPoint:(struct VKPoint)arg1;
- (void)removePersistingExitingTiles:(id)arg1;
- (void)animateTiles:(id)arg1 fromAlpha:(float)arg2 toAlpha:(float)arg3 fromScale:(float)arg4 toScale:(float)arg5;
- (void)willStopDrawingTiles:(id)arg1;
- (void)willStartDrawingTiles:(id)arg1;
- (double)maxTileHeightAtPoint:(struct VKPoint)arg1;
- (void)stylesheetDidChange;
- (void)_updateStyles;
- (void)vectorTypeDidChange;
- (void)setActive:(_Bool)arg1;
- (void)dealloc;
- (id)init;
- (unsigned long long)mapLayerPosition;
- (void)_clearOccluders;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKBuildingFootprintTileSource : VKVectorTileSource
{
    long long _minimumZoomLevel;
    _Bool _makeFacades;
}

@property(nonatomic) _Bool makeFacades; // @synthesize makeFacades=_makeFacades;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (unsigned long long)mapLayerForZoomLevelRange;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
- (long long)minimumZoomLevel;
- (void)setMinimumZoomLevel:(unsigned long long)arg1;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKVectorTile : VKTile
{
    GEOVectorTile *_modelTile;
    double _contentScale;
    float _maximumStyleZ;
    float _textureScale;
    VKStyleManager *_styleManager;
    VKSharedResources *_sharedResources;
    VKMapTileList *_fragments;
}

@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(readonly, nonatomic) VKMapTileList *fragments; // @synthesize fragments=_fragments;
@property(nonatomic) float maximumStyleZ; // @synthesize maximumStyleZ=_maximumStyleZ;
@property(nonatomic) float textureScale; // @synthesize textureScale=_textureScale;
@property(retain, nonatomic) GEOVectorTile *modelTile; // @synthesize modelTile=_modelTile;
@property(retain, nonatomic) VKSharedResources *sharedResources; // @synthesize sharedResources=_sharedResources;
@property(retain, nonatomic) VKStyleManager *styleManager; // @synthesize styleManager=_styleManager;
- (void)dealloc;
@property(readonly, nonatomic) long long vectorType;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(double)arg5 device:(struct Device *)arg6;
- (id)initWithKey:(const struct VKTileKey *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKBuildingTile : VKVectorTile
{
    vector_dc840c5c _facadeTextures;
    NSMutableArray *_polygonGroups[3];
    VK3DObjectSubTile *_objectSubTile;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _shadowTexture;
    Matrix_08d701e4 _shadowModelMatrix;
    shared_ptr_1fee3c91 _shadowViewUniformData;
    float _alpha;
    float _scale;
    float _minLayeringHeight;
    float _maxLayeringHeight;
    double _maxHeight;
    struct CullingGridWithHeight _cullingGrid;
    VKAnimation *_animation;
    VKAnimation *_animationForPitch;
}

@property(readonly, nonatomic) struct CullingGridWithHeight cullingGrid; // @synthesize cullingGrid=_cullingGrid;
@property(readonly, nonatomic) double maxHeight; // @synthesize maxHeight=_maxHeight;
@property(retain, nonatomic) VKAnimation *animationForPitch; // @synthesize animationForPitch=_animationForPitch;
@property(retain, nonatomic) VKAnimation *animation; // @synthesize animation=_animation;
@property(readonly, nonatomic) float maxLayeringHeight; // @synthesize maxLayeringHeight=_maxLayeringHeight;
@property(readonly, nonatomic) float minLayeringHeight; // @synthesize minLayeringHeight=_minLayeringHeight;
@property(nonatomic) float scale; // @synthesize scale=_scale;
@property(nonatomic) float alpha; // @synthesize alpha=_alpha;
@property(readonly, nonatomic) VK3DObjectSubTile *objectSubTile; // @synthesize objectSubTile=_objectSubTile;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (void)updateWithStyleResolutionSession:(struct StyleResolutionSession *)arg1;
- (void)_buildShadowTexture;
- (_Bool)heightAtPoint:(const Matrix_8746f91e *)arg1 outZ:(float *)arg2;
- (void)_blurTexture:(char *)arg1;
- (void)_fillShadowAreasInContext:(struct CGContext *)arg1 data:(char *)arg2;
- (Box_3fb92e00)_shadowBounds;
- (id)polygonGroupsForTextureAtIndex:(unsigned long long)arg1;
- (const vector_dc840c5c *)facadeTextures;
- (unsigned long long)numberOfFacadeTextures;
- (void)buildMeshesWithTriangulator:(id)arg1 device:(struct Device *)arg2 prepareExtrusion:(_Bool)arg3;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 prepareExtrusion:(_Bool)arg3 styleManager:(id)arg4 sharedResources:(id)arg5 contentScale:(double)arg6 device:(struct Device *)arg7;
@property(readonly, nonatomic) shared_ptr_1fee3c91 shadowViewUniformData;
@property(readonly, nonatomic) struct Texture2D *shadowTexture;

@end

__attribute__((visibility("hidden")))
@interface VKCacheNode : NSObject
{
    struct VKCacheKey _key;
    id _value;
    VKCacheNode *_next;
    VKCacheNode *_previous;
}

@property(nonatomic) VKCacheNode *previous; // @synthesize previous=_previous;
@property(retain, nonatomic) VKCacheNode *next; // @synthesize next=_next;
@property(retain, nonatomic) id value; // @synthesize value=_value;
@property(nonatomic) struct VKCacheKey key; // @synthesize key=_key;
- (id).cxx_construct;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKCamera : NSObject
{
    id <VKCameraDelegate> _delegate;
    struct VKPoint _position;
    CDStruct_aa5aacbc _orientation;
    float _aspectRatio;
    float _verticalFieldOfView;
    struct VKPoint _puckPosition;
    CDStruct_184b3e93 _frustum;
    double _minHeight;
    double _maxHeight;
    double _maxPitch;
    double _terrainHeight;
    double _maxFarClipDistance;
    _Bool _needsUpdate;
    _Bool _updating;
    int _updateNumber;
    CDStruct_aa5aacbc _viewProjectionMatrix;
    CDStruct_aa5aacbc _projectionMatrix;
    CDStruct_aa5aacbc _viewMatrix;
    CDStruct_aa5aacbc _viewMatrixUnscaled;
    CDStruct_aa5aacbc _projectionMatrixUnscaled;
    CDStruct_aa5aacbc _projectionMatrixUnscaledWithoutOffset;
    CDStruct_aa5aacbc _viewProjectionMatrixUnscaled;
    CDStruct_aa5aacbc _worldMatrix;
    VKViewVolume *_viewVolume;
    VKFootprint *_footprint;
    double _tanHalfHorizFOV;
    double _tanHalfVerticalFOV;
    Matrix_6e1d3589 _forward;
    Matrix_6e1d3589 _right;
    Matrix_6e1d3589 _up;
    double _fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
    double _distanceToGroundAndFarClipPlaneIntersection;
    double _screenHeightOfGroundAndFarClipPlaneIntersection;
    _Bool _allowDatelineWraparound;
    double _canonicalPitch;
    double _horizontalOffset;
    Matrix_6e1d3589 _gmPosition;
    Matrix_08d701e4 _gmViewMatrix;
    Matrix_08d701e4 _gmProjectionMatrix;
    Matrix_08d701e4 _gmViewProjectionMatrix;
    Matrix_08d701e4 _gmWorldMatrix;
    double _maxHeightNoPitch;
}

@property(nonatomic) struct VKPoint puckPosition; // @synthesize puckPosition=_puckPosition;
@property(nonatomic) double horizontalOffset; // @synthesize horizontalOffset=_horizontalOffset;
@property(nonatomic) double canonicalPitch; // @synthesize canonicalPitch=_canonicalPitch;
@property(nonatomic) _Bool allowDatelineWraparound; // @synthesize allowDatelineWraparound=_allowDatelineWraparound;
@property(readonly, nonatomic) double screenHeightOfGroundAndFarClipPlaneIntersection; // @synthesize screenHeightOfGroundAndFarClipPlaneIntersection=_screenHeightOfGroundAndFarClipPlaneIntersection;
@property(readonly, nonatomic) double distanceToGroundAndFarClipPlaneIntersection; // @synthesize distanceToGroundAndFarClipPlaneIntersection=_distanceToGroundAndFarClipPlaneIntersection;
@property(nonatomic) double fractionOfScreenAboveFarClipPlaneAtCanonicalPitch; // @synthesize fractionOfScreenAboveFarClipPlaneAtCanonicalPitch=_fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
@property(nonatomic) id <VKCameraDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) int updateNumber; // @synthesize updateNumber=_updateNumber;
@property(nonatomic) double terrainHeight; // @synthesize terrainHeight=_terrainHeight;
@property(nonatomic) double maxPitch; // @synthesize maxPitch=_maxPitch;
@property(nonatomic) double maxHeight; // @synthesize maxHeight=_maxHeight;
@property(nonatomic) double minHeight; // @synthesize minHeight=_minHeight;
@property(nonatomic) double maxHeightNoPitch; // @synthesize maxHeightNoPitch=_maxHeightNoPitch;
@property(nonatomic) float aspectRatio; // @synthesize aspectRatio=_aspectRatio;
@property(nonatomic) struct VKPoint position; // @synthesize position=_position;
@property(readonly, nonatomic) CDStruct_184b3e93 frustum; // @synthesize frustum=_frustum;
- (id).cxx_construct;
- (void)adjustClipPlanes;
- (double)depthForViewWidth:(double)arg1;
- (double)widthOfViewAtDepth:(double)arg1;
- (struct VKPoint)groundPointFromScreenPoint:(struct CGPoint)arg1 atGroundLevel:(double)arg2;
- (struct VKPoint)groundPointFromScreenPoint:(struct CGPoint)arg1;
- (void)updateIfNeeded;
- (void)setNeedsUpdate;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (struct VKPoint)groundPlaneIntersectionPoint;
- (_Bool)isOuterWorldBoundsVisible;
- (_Bool)isWorldSpaceRectVisible:(const CDStruct_d2b197d1 *)arg1;
- (float)maximumStyleZForRect:(const CDStruct_d2b197d1 *)arg1;
- (_Bool)hasChangedState:(struct VKCameraState *)arg1;
@property(nonatomic) struct VKCameraState cameraState;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) double pitch;
- (double)displayZoomLevel;
@property(readonly, nonatomic) struct VKPoint groundPoint;
@property(readonly, nonatomic) Matrix_6e1d3589 forwardVector;
@property(readonly, nonatomic) Matrix_6e1d3589 rightVector;
@property(readonly, nonatomic) Matrix_6e1d3589 upVector;
@property(readonly, nonatomic) VKFootprint *footprint;
@property(readonly, nonatomic) VKViewVolume *viewVolume;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *worldMatrix;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *projectionMatrixUnscaled;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *projectionMatrixUnscaledWithoutOffset;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *viewProjectionMatrixUnscaled;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *viewMatrixUnscaled;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *viewMatrix;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *projectionMatrix;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *viewProjectionMatrix;
@property(readonly, nonatomic) double tanHalfVerticalFOV;
@property(readonly, nonatomic) double tanHalfHorizFOV;
@property(readonly, nonatomic) double nearClipDistance;
@property(readonly, nonatomic) double farClipDistance;
@property(readonly, nonatomic) float horizontalFieldOfView;
@property(nonatomic) float verticalFieldOfView;
@property(nonatomic) const CDStruct_aa5aacbc *orientation;
- (void)_setPosition:(struct VKPoint)arg1;
- (id)description;
- (void)logCameraState;
- (void)dealloc;
- (id)init;
- (Matrix_6e1d3589)gmGroundPointFromScreenPoint:(struct CGPoint)arg1 atGroundLevel:(double)arg2;
- (Matrix_6e1d3589)gmGroundPointFromScreenPoint:(struct CGPoint)arg1;
@property(readonly, nonatomic) Matrix_ec0d872f gmForwardVector;
@property(readonly, nonatomic) Matrix_ec0d872f gmRightVector;
@property(readonly, nonatomic) Matrix_ec0d872f gmUpVector;
@property(readonly, nonatomic) const Matrix_08d701e4 *gmViewMatrix;
@property(readonly, nonatomic) const Matrix_08d701e4 *gmProjectionMatrix;
@property(readonly, nonatomic) const Matrix_08d701e4 *gmViewProjectionMatrix;
@property(readonly, nonatomic) const Matrix_6e1d3589 *gmPosition;

@end

@interface VKCameraContext : NSObject
{
    CDStruct_2c43369c _pointOfReference;
    double _heading;
    CDStruct_2c43369c _pointOfFocus;
    int _style;
    int _focusStyle;
    CDStruct_2c43369c _courseTargetLocation;
    long long _courseSource;
    double _lastCameraFocusCourse;
    _Bool _animated;
    _Bool _applied;
    struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> _pois;
    VKPuckAnimatorLocationProjector *_locationProjector;
    double _verticalGroundspanScale;
    _Bool _allowVerticalPanning;
}

@property(readonly, nonatomic) _Bool allowVerticalPanning; // @synthesize allowVerticalPanning=_allowVerticalPanning;
@property(readonly, nonatomic) double verticalGroundspanScale; // @synthesize verticalGroundspanScale=_verticalGroundspanScale;
@property(nonatomic) _Bool applied; // @synthesize applied=_applied;
@property(readonly, nonatomic) _Bool animated; // @synthesize animated=_animated;
@property(nonatomic) long long courseSource; // @synthesize courseSource=_courseSource;
@property(nonatomic) CDStruct_c3b9c2ee courseTargetLocation; // @synthesize courseTargetLocation=_courseTargetLocation;
@property(nonatomic) int focusStyle; // @synthesize focusStyle=_focusStyle;
@property(nonatomic) int style; // @synthesize style=_style;
@property(readonly, nonatomic) CDStruct_c3b9c2ee pointOfFocus; // @synthesize pointOfFocus=_pointOfFocus;
@property(readonly, nonatomic) double heading; // @synthesize heading=_heading;
@property(readonly, nonatomic) CDStruct_c3b9c2ee pointOfReference; // @synthesize pointOfReference=_pointOfReference;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)enumeratePointsOfInterestUsingBlock:(CDUnknownBlockType)arg1;
- (void)addPointOfInterest:(CDStruct_c3b9c2ee)arg1;
- (void)clearPointsOfInterest;
- (void)updateForLocation:(id)arg1 routeMatch:(id)arg2 isRouteMatch:(_Bool)arg3 speedMultiplier:(double)arg4 onRoute:(_Bool)arg5 animated:(_Bool)arg6;
- (void)_setPointOfReference:(CDStruct_c3b9c2ee)arg1 heading:(double)arg2 routeMatch:(id)arg3 onRoute:(_Bool)arg4;
- (id)description;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKCartoStyle : NSObject
{
    NSArray *_attributes;
    VKPStyleContents *_contents;
    unsigned int _stylesPopulated;
    struct StyleData *_roadData;
    struct StyleData *_polygonData;
    struct StyleData *_lineData;
    struct StyleData *_labelData;
    struct StyleData *_buildingData;
    struct StyleData *_genericShieldData;
    struct StyleData *_skyData;
    struct StyleData *_gridData;
    struct StyleData *_routeData;
    struct StyleData *_puckData;
    struct StyleData *_vegetationData;
    struct StyleData *_pinData;
    struct StyleData *_mapData;
    struct StyleData *_trafficData;
    struct StyleData *_transferConnectionData;
    VKCartoStyle *_variant;
    VKStylesheet *_stylesheet;
    unsigned long long _mapStyleSupport;
    _Bool _hasFeatureType;
    BOOL _featureType;
    struct _opaque_pthread_mutex_t _lock;
    NSData *_contentsData;
    VKPGlobalProperties *_globalProperties;
    NSArray *_inheritance;
    NSString *_name;
    unsigned int *_inheritanceIndices;
    unsigned long long _inheritanceIndexCount;
}

@property(nonatomic) VKStylesheet *stylesheet; // @synthesize stylesheet=_stylesheet;
@property(retain, nonatomic) VKCartoStyle *variant; // @synthesize variant=_variant;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (id).cxx_construct;
- (unsigned long long)scoreForStyleAttributes:(id)arg1 excludingVariant:(unsigned long long)arg2;
- (_Bool)isDrawStyleVisibleAtLOD:(unsigned long long)arg1;
- (Matrix_5173352a)basicRoadColor;
- (struct StyleData *)transferConnectionStyleData;
- (struct StyleData *)mapStyleData;
- (struct StyleData *)vegetationStyleData;
- (struct StyleData *)trafficStyleData;
- (struct StyleData *)puckStyleData;
- (struct StyleData *)pinStyleData;
- (struct StyleData *)routeStyleData;
- (struct StyleData *)roadStyleData;
- (struct StyleData *)gridStyleData;
- (struct StyleData *)skyStyleData;
- (struct StyleData *)genericShieldStyleData;
- (struct StyleData *)buildingStyleData;
- (struct StyleData *)lineStyleData;
- (struct StyleData *)polygonStyleData;
- (struct StyleData *)labelStyleData;
- (void)dealloc;
- (void)applyStyle:(id)arg1 to:(id)arg2 inheritance:(id)arg3 zoom:(float)arg4;
- (void)_populateStyles:(unsigned int)arg1;
- (void)_setupPropertiesForStyleMask:(unsigned int)arg1;
- (id)detailedDescription;
- (id)description;
- (unsigned long long)hash;
- (id)contents;
- (_Bool)hasFeatureType;
- (unsigned char)featureType;
- (id)attributes;
- (unsigned int *)inheritanceIndices;
- (unsigned long long)inheritsCount;
- (id)globals;
- (id)inheritance;
- (id)contentsData;
- (void)clearInheritance;
- (id)initWithStyle:(id)arg1 inheritance:(id)arg2 globals:(id)arg3 stylesheet:(id)arg4;
@property(readonly, nonatomic) unsigned int scoreWhenMatched;

@end

__attribute__((visibility("hidden")))
@interface VKScreenCanvas : NSObject <VKWorldDelegate, VKAnimationRunner, VKCameraControllerDelegate, VKCameraDelegate>
{
    VKDispatch *_dispatch;
    VKWorld *_world;
    VKCamera *_camera;
    VKScene *_scene;
    VKLayoutContext *_layoutContext;
    id <MDRenderTarget> _displayTarget;
    _Bool _needsLayout;
    unsigned int _wantsLayout;
    unsigned int _needsRepaint;
    _Bool _userIsGesturing;
    _Bool _iconsShouldAlignToPixels;
    NSMutableArray *_cameraControllers;
    float _debugFramesPerSecond;
    _Bool _rendersInBackground;
    NSMutableArray *_animations[2];
    VKMemoryObserver *_memoryObserver;
    _Bool _isInBackground;
    _Bool _isHidden;
    struct VKEdgeInsets _edgeInsets;
    struct VKEdgeInsets _fullyOccludedEdgeInsets;
    struct VKEdgeInsets _labelEdgeInsets;
    _Bool _deallocing;
    _Bool _needsInitialization;
    struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> _renderQueue;
    struct MapCamera *_mapCamera;
    struct RenderTree *_mapScene;
    Matrix_5173352a _bgColor;
    id <MDMapControllerDelegate> _mapDelegate;
}

@property(readonly, nonatomic) NSArray *cameraControllers; // @synthesize cameraControllers=_cameraControllers;
@property(readonly, nonatomic) Matrix_5173352a bgColor; // @synthesize bgColor=_bgColor;
@property(readonly, nonatomic) _Bool needsInitialization; // @synthesize needsInitialization=_needsInitialization;
@property(nonatomic) id <MDMapControllerDelegate> mapDelegate; // @synthesize mapDelegate=_mapDelegate;
@property(nonatomic) struct VKEdgeInsets fullyOccludedEdgeInsets; // @synthesize fullyOccludedEdgeInsets=_fullyOccludedEdgeInsets;
@property(nonatomic) _Bool iconsShouldAlignToPixels; // @synthesize iconsShouldAlignToPixels=_iconsShouldAlignToPixels;
@property(readonly, nonatomic) VKCamera *camera; // @synthesize camera=_camera;
@property(nonatomic) float debugFramesPerSecond; // @synthesize debugFramesPerSecond=_debugFramesPerSecond;
@property(readonly, nonatomic) VKWorld *world; // @synthesize world=_world;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)edgeInsetsDidEndAnimating;
- (void)edgeInsetsWillBeginAnimating;
@property(nonatomic) _Bool rendersInBackground;
- (void)cameraController:(id)arg1 canZoomOutDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 canZoomInDidChange:(_Bool)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(_Bool)arg2;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (void)cameraController:(id)arg1 requestsDisplayRate:(long long)arg2;
- (void)removeCameraController:(id)arg1;
- (void)addCameraController:(id)arg1;
@property(nonatomic) long long targetDisplay;
@property(nonatomic, getter=isGesturing) _Bool gesturing;
- (void)cameraDidChange:(id)arg1;
- (void)animationDidResume:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (void)runOrAdoptAnimation:(id)arg1 run:(_Bool)arg2;
- (void)runAnimation:(id)arg1;
- (void)worldDisplayDidChange:(id)arg1;
- (void)worldLayoutDidChange:(id)arg1;
- (void)_queueUpdateDisplayLinkStatus;
- (void)setContentsScale:(double)arg1;
- (void)forceLayout;
- (void)resetRenderQueue:(shared_ptr_06328420)arg1;
- (void)updateCameraForFrameResize;
- (void)didPresent;
- (void)layoutRenderQueue:(shared_ptr_06328420)arg1;
- (void)gglWillDrawWithTimestamp;
- (void)animateWithTimestamp:(double)arg1;
@property(nonatomic) struct VKEdgeInsets labelEdgeInsets;
@property(nonatomic) struct VKEdgeInsets edgeInsets;
- (void)updateWithTimestamp:(double)arg1;
- (void)didEnterBackground;
- (void)willEnterForeground;
- (_Bool)currentSceneRequiresMSAA;
- (void)setNeedsDisplay;
- (void)setNeedsLayout;
- (_Bool)isHidden;
- (void)setHidden:(_Bool)arg1;
- (_Bool)updateDisplayLinkStatus;
- (_Bool)wantsTimerTick;
- (_Bool)wantsRender;
- (_Bool)canRender;
- (void)clearSceneIsEffectivelyHidden:(_Bool)arg1;
- (void)transferAnimationsTo:(id)arg1;
- (void)adoptAnimation:(id)arg1;
- (void)dealloc;
- (void)initializeWithRenderer:(struct GLRenderer *)arg1;
- (id)initWithTarget:(id)arg1 device:(const shared_ptr_807ec9ac *)arg2 inBackground:(_Bool)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKClassicGlobeCanvas : VKScreenCanvas <VKCameraControllerDelegate, LabelManagerDelegate, GEOResourceManifestTileGroupObserver, VKGlobeLineContainerDelegate, VKInteractiveMap>
{
    struct Viewer *_viewer;
    id <VKInteractiveMapDelegate> _delegate;
    VKGlobeCameraController *_cameraController;
    VKAnnotationModel *_annotationModel;
    VKAnchorContext *_anchorContext;
    VKGlobePointCache *_pointCache;
    VKViewTransform *_viewTransform;
    long long _mapType;
    unsigned long long _mapDisplayStyle;
    VKGlobeLineContainer *_lineContainer;
    _Bool _disableRoads;
    _Bool _disableLabels;
    struct shared_ptr<vk::VKGlobeStylesheet> _globeStyleSheet;
    struct AltitudeDebugSettings _debugSettings;
    struct GlobeAdapter *_globeAdapter;
    _Bool _initialized;
    _Bool _canShowFlyover;
    struct shared_ptr<bool> _isDead;
    _Bool _isLoading;
    _Bool _isDownloading;
    _Bool _tourIsDownloading;
    _Bool _isPreloadingInBackground;
    CDUnknownBlockType _sceneDidLoadCallback;
    CDUnknownBlockType _artworkIsReadyBlock;
    NSMutableArray *_externalAnchors;
    _Bool _showsBuildings;
}

+ (_Bool)supportsMapType:(long long)arg1 scale:(int)arg2;
@property(nonatomic) _Bool disableLabels; // @synthesize disableLabels=_disableLabels;
@property(nonatomic) _Bool disableRoads; // @synthesize disableRoads=_disableRoads;
@property(nonatomic) _Bool showsBuildings; // @synthesize showsBuildings=_showsBuildings;
@property(copy, nonatomic) CDUnknownBlockType sceneDidLoadCallback; // @synthesize sceneDidLoadCallback=_sceneDidLoadCallback;
@property(readonly, nonatomic) _Bool flyoverAvailable; // @synthesize flyoverAvailable=_canShowFlyover;
@property(nonatomic) id <VKInteractiveMapDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)flyoverStatistics;
- (void)disableFlyoverStatistics;
- (void)enableFlyoverStatistics;
- (void)setupMapScene;
- (void)removeExternalAnchor:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
@property(readonly, nonatomic) VKAnchorWrapper *externalAnchors;
- (void)_reachabilityChanged:(id)arg1;
- (void)waitForLoading;
- (void)_updateDebugSettings;
- (void)setBackgroundViewLoading:(_Bool)arg1;
@property(readonly, nonatomic, getter=isFullyDrawn) _Bool fullyDrawn;
- (void)didEnterBackground;
- (void)clearSceneIsEffectivelyHidden:(_Bool)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
@property(readonly, nonatomic) NSSet *persistentOverlays;
@property(readonly, nonatomic) NSArray *overlays;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(_Bool)arg2;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (struct VKPoint)pointForHandle:(id)arg1 atCoordinate:(CDStruct_c3b9c2ee)arg2 withHighPrecision:(_Bool)arg3;
- (void)removeHandle:(id)arg1;
- (id)addHandleAtCoordinate:(CDStruct_c3b9c2ee)arg1 withHighPrecision:(_Bool)arg2;
- (CDUnknownBlockType)annotationMarkerDeselectionCallback;
- (id)selectedAnnotationMarker;
- (id)annotationMarkers;
- (_Bool)shouldHideOffscreenSelectedAnnotation;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (void)setAnnotationMarkerDeselectionCallback:(CDUnknownBlockType)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)removeAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(_Bool)arg2;
- (void)lineContainerNeedsDisplay:(id)arg1;
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:pendingArtworkIsReady:
-     // Error parsing type: v32@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16@24, name: labelManager:selectedLabelMarkerWillDisappear:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsDisplay:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsLayout:
- (_Bool)currentZoomLevelAllowsRotation;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)deselectLabelMarker;
- (id)selectedLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkers;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint)arg1 avoidCurrent:(_Bool)arg2;
- (_Bool)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
@property(readonly, nonatomic) NSArray *visibleTileSets;
- (CDStruct_071ac149)centerCoordinate;
- (void)debugHighlightLabelAtPoint:(struct CGPoint)arg1;
- (struct VKPoint)screenPointForPoint:(struct CGPoint)arg1;
- (void)_viewTransformSetup;
- (void)didPresent;
- (void)gglWillDrawWithTimestamp;
- (void)updateCameraForFrameResize;
- (void)_update;
- (void)updateWithTimestamp:(double)arg1;
- (_Bool)wantsRender;
- (_Bool)canRender;
- (struct CGPoint)convertCoordinateToCameraModelPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertCoordinateToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToCoordinate:(struct CGPoint)arg1;
- (struct CGPoint)convertMapPointToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToMapPoint:(struct CGPoint)arg1;
- (void)stopAnimations;
- (void)stopSearchResultAnimation;
- (void)resumeFlyoverTourAnimation;
- (void)pauseFlyoverTourAnimation;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(_Bool)arg2 labelChanged:(CDUnknownBlockType)arg3 stateChange:(CDUnknownBlockType)arg4;
- (void)stopFlyoverAnimation;
- (void)startFlyoverAnimation:(id)arg1 animateToStart:(_Bool)arg2 labelChanged:(CDUnknownBlockType)arg3 stateChange:(CDUnknownBlockType)arg4;
- (void)prepareFlyoverAnimation:(id)arg1 inBackground:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)showSearchResultAnimationAtCoordinate:(CDStruct_c3b9c2ee)arg1 withMapRegion:(id)arg2;
- (_Bool)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
@property(nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
@property(nonatomic) struct PolylineCoordinate routeUserOffset;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
@property(readonly, nonatomic, getter=isTrackingHeading) _Bool trackingHeading;
@property(readonly, nonatomic) id <VKTrackableAnnotation> trackingAnnotation;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) _Bool animatingToTrackAnnotation;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
@property(nonatomic) long long annotationTrackingZoomStyle;
- (_Bool)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
@property(nonatomic) _Bool staysCenteredDuringRotation;
@property(nonatomic) _Bool staysCenteredDuringPinch;
- (id)camera;
- (void)updateCameraFromGlobe;
@property(readonly, nonatomic) double pitch;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(retain, nonatomic) GEOMapRegion *mapRegion;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
@property(readonly, nonatomic) double altitude;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4;
- (void)setMapRegion:(id)arg1 animated:(_Bool)arg2;
- (void)transferCamera:(id)arg1;
- (void)stopSnappingAnimations;
- (_Bool)canEnter3DMode;
@property(readonly, nonatomic, getter=isFullyPitched) _Bool fullyPitched;
@property(readonly, nonatomic, getter=isPitched) _Bool pitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (id)detailedDescription;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)setContentsScale:(double)arg1;
- (id)styleManager;
- (void)_reloadStylesheet;
- (id)consoleString:(_Bool)arg1;
- (void)dealloc;
- (void)initializeWithRenderer:(struct GLRenderer *)arg1;
- (void)initializeScene;
- (id)initWithTarget:(id)arg1 device:(const shared_ptr_807ec9ac *)arg2 inBackground:(_Bool)arg3;
- (void)setHidden:(_Bool)arg1;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
@property(nonatomic) _Bool labelMarkerSelectionEnabled;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double maximumZoomLevel;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double minimumZoomLevel;
- (void)setNightMode:(_Bool)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)setStylesheetMapDisplayStyle:(unsigned long long)arg1;
- (void)stylesheetAnimationDidEnd:(_Bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned long long)arg1 toStyle:(unsigned long long)arg2;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(unsigned long long)arg2 setupHandler:(CDUnknownBlockType)arg3;
@property(nonatomic) long long mapType;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
@property(nonatomic) struct VKEdgeInsets edgeInsets;
@property(nonatomic) _Bool trafficEnabled;
@property(nonatomic) _Bool isPitchable;
- (_Bool)isPointValidForGesturing:(struct CGPoint)arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint)arg2;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (_Bool)canZoomOutForTileSize:(long long)arg1;
- (_Bool)canZoomInForTileSize:(long long)arg1;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (double)currentZoomLevel;
- (_Bool)useNewRenderPath;
- (void)resetRenderQueue:(shared_ptr_06328420)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKCoastlineGroup : NSObject
{
    shared_ptr_6e6219d6 _styleQuery;
    unsigned int _tilePointSize;
    struct unique_ptr<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>>> _coastlineMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> _innerGlowMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh>>> _outerGlowMeshVendor;
}

@property(readonly, nonatomic) shared_ptr_6e6219d6 styleQuery; // @synthesize styleQuery=_styleQuery;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addCoastlineFeature:(CDStruct_2e21d8bb *)arg1;
@property(readonly, nonatomic) const MeshVendor_43d71dca *outerGlowMeshVendor;
@property(readonly, nonatomic) const MeshVendor_43d71dca *innerGlowMeshVendor;
@property(readonly, nonatomic) const MeshVendor_82aa5b9e *coastlineMeshVendor;
- (id)initWithStyleQuery:(shared_ptr_6e6219d6)arg1 tilePointSize:(unsigned int)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKDebugModel : VKModelObject <VKMapLayer>
{
    _Bool _geocentric;
    float _fontSize;
    struct unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup>>> _debugShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>>> _debugPointsShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _debugRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _debugLinesRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _debugPointsRenderState;
    shared_ptr_a5e35864 _unitRectMesh;
    _Bool _needsReset;
}

@property(nonatomic) _Bool geocentric; // @synthesize geocentric=_geocentric;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)appendDebugTileCommandsToBuffer:(struct CommandBuffer *)arg1 forMapTile:(id)arg2 fromLayer:(unsigned long long)arg3 withContext:(id)arg4 withConsole:(struct DebugConsole *)arg5;
- (void)resetPools:(id)arg1;
- (void)flushPools;
- (void)reset;
- (void)didReceiveMemoryWarning;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (shared_ptr_a5e35864)unitRectMesh;
- (void)dealloc;
- (id)init;
- (_Bool)shouldLayoutWithoutStyleManager;
- (unsigned long long)mapLayerPosition;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKDebugSettings : NSObject
{
    _Bool _paintMapTiles;
    _Bool _paintRoadBoundaries;
    _Bool _paintRoadTiles;
    _Bool _paintPointTiles;
    _Bool _paintPolygonTiles;
    _Bool _paintVertices;
    _Bool _paintJunctions;
    _Bool _paintCoastlines;
    _Bool _paintBuildingNormals;
    _Bool _disableRoute;
    _Bool _labelHighlighting;
    _Bool _labelCollisionEnabled;
    _Bool _labelFlipAlternatePositionsEnable;
    _Bool _labelTileDecodeEnabled;
    _Bool _labelAllowDefaultStyle;
    _Bool _labelUpdateMapTilesContinuously;
    _Bool _paintRouteDebugMarkers;
    _Bool _dontMatchRouteLine;
    _Bool _dontMapMatchToSnappedRouteLine;
    _Bool _highlightUnmatchedRouteLine;
    _Bool _paintRoadSigns;
    _Bool _paintLabelBounds;
    _Bool _paintLabelRoadFeatures;
    _Bool _paintLabelCollisionLines;
    _Bool _paintLabelCounts;
    _Bool _hideDirectionalArrows;
    _Bool _labelHideLineFeatures;
    _Bool _labelHidePointFeatures;
    _Bool _paintTrafficSkeleton;
    _Bool _loadGreenTraffic;
    _Bool _paintRoadsStitchedByName;
    _Bool _realisticWireframeEnabled;
    _Bool _altitudePauseLoading;
    _Bool _altitudeTexturePaging;
    _Bool _altitudeShowTileBounds;
    _Bool _altitudeHighResSatellite;
    _Bool _altitudeMipmapSatellite;
    _Bool _altitudeMipmapFlyover;
    _Bool _altitudeMipmapObjectTree;
    _Bool _altitudeShowNightLight;
    _Bool _altitudeNoTiltLimit;
    float _altitudeLodScale;
    float _altitudeTileQualityThreshold;
    float _altitudeForceGridTime;
    _Bool _altitudeProfilingEnabled;
    unsigned int _altitudeProfilingType;
    unsigned int _altitudeProfilingZones;
    NSString *_altitudeTelemetryURL;
    _Bool _dynamicMapModesEnabled;
    _Bool _isInstalledInLockScreen;
    _Bool _enableLoggingInLockScreen;
    _Bool _useBuildingShadowTexture;
    _Bool _drawContinuously;
    _Bool _layoutContinuously;
    _Bool _enableSignPostEvents;
    _Bool _useTransactionManager;
    _Bool _trackingCameraAutoPitch;
    _Bool _debugStyleAnimations;
    _Bool _renderInSeparateThread;
    _Bool _forceHiResBuildings;
    _Bool _readLandmarksFromDisk;
    _Bool _drawPerformanceHUD;
    _Bool _expandedPerformanceHUD;
    _Bool _immediateRasterTextureLoading;
    _Bool _paintPoiTiles;
    _Bool _useStaticTrafficFeed;
    _Bool _disableStylesheetAnimations;
    _Bool _trackingCameraRoutePanning;
    _Bool _trackingCameraZoomFurther;
}

+ (id)sharedSettings;
@property(nonatomic) _Bool trackingCameraZoomFurther; // @synthesize trackingCameraZoomFurther=_trackingCameraZoomFurther;
@property(nonatomic) _Bool trackingCameraRoutePanning; // @synthesize trackingCameraRoutePanning=_trackingCameraRoutePanning;
@property(nonatomic) _Bool immediateRasterTextureLoading; // @synthesize immediateRasterTextureLoading=_immediateRasterTextureLoading;
@property(nonatomic) _Bool expandedPerformanceHUD; // @synthesize expandedPerformanceHUD=_expandedPerformanceHUD;
@property(nonatomic) _Bool drawPerformanceHUD; // @synthesize drawPerformanceHUD=_drawPerformanceHUD;
@property(nonatomic) _Bool readLandmarksFromDisk; // @synthesize readLandmarksFromDisk=_readLandmarksFromDisk;
@property(nonatomic) _Bool forceHiResBuildings; // @synthesize forceHiResBuildings=_forceHiResBuildings;
@property(nonatomic) _Bool renderInSeparateThread; // @synthesize renderInSeparateThread=_renderInSeparateThread;
@property(nonatomic) _Bool disableStylesheetAnimations; // @synthesize disableStylesheetAnimations=_disableStylesheetAnimations;
@property(nonatomic) _Bool debugStyleAnimations; // @synthesize debugStyleAnimations=_debugStyleAnimations;
@property(nonatomic) _Bool trackingCameraAutoPitch; // @synthesize trackingCameraAutoPitch=_trackingCameraAutoPitch;
@property(nonatomic) _Bool useTransactionManager; // @synthesize useTransactionManager=_useTransactionManager;
@property(nonatomic) _Bool enableSignPostEvents; // @synthesize enableSignPostEvents=_enableSignPostEvents;
@property(nonatomic) _Bool layoutContinuously; // @synthesize layoutContinuously=_layoutContinuously;
@property(nonatomic) _Bool drawContinuously; // @synthesize drawContinuously=_drawContinuously;
@property(nonatomic) _Bool useBuildingShadowTexture; // @synthesize useBuildingShadowTexture=_useBuildingShadowTexture;
@property(nonatomic) _Bool enableLoggingInLockScreen; // @synthesize enableLoggingInLockScreen=_enableLoggingInLockScreen;
@property(nonatomic) _Bool isInstalledInLockScreen; // @synthesize isInstalledInLockScreen=_isInstalledInLockScreen;
@property(nonatomic) _Bool dynamicMapModesEnabled; // @synthesize dynamicMapModesEnabled=_dynamicMapModesEnabled;
@property(retain, nonatomic) NSString *altitudeTelemetryURL; // @synthesize altitudeTelemetryURL=_altitudeTelemetryURL;
@property(nonatomic) unsigned int altitudeProfilingZones; // @synthesize altitudeProfilingZones=_altitudeProfilingZones;
@property(nonatomic) unsigned int altitudeProfilingType; // @synthesize altitudeProfilingType=_altitudeProfilingType;
@property(nonatomic) _Bool altitudeProfilingEnabled; // @synthesize altitudeProfilingEnabled=_altitudeProfilingEnabled;
@property(nonatomic) float altitudeForceGridTime; // @synthesize altitudeForceGridTime=_altitudeForceGridTime;
@property(nonatomic) float altitudeTileQualityThreshold; // @synthesize altitudeTileQualityThreshold=_altitudeTileQualityThreshold;
@property(nonatomic) float altitudeLodScale; // @synthesize altitudeLodScale=_altitudeLodScale;
@property(nonatomic) _Bool altitudeHighResSatellite; // @synthesize altitudeHighResSatellite=_altitudeHighResSatellite;
@property(nonatomic) _Bool altitudeNoTiltLimit; // @synthesize altitudeNoTiltLimit=_altitudeNoTiltLimit;
@property(nonatomic) _Bool altitudeShowNightLight; // @synthesize altitudeShowNightLight=_altitudeShowNightLight;
@property(nonatomic) _Bool altitudeMipmapObjectTree; // @synthesize altitudeMipmapObjectTree=_altitudeMipmapObjectTree;
@property(nonatomic) _Bool altitudeMipmapFlyover; // @synthesize altitudeMipmapFlyover=_altitudeMipmapFlyover;
@property(nonatomic) _Bool altitudeMipmapSatellite; // @synthesize altitudeMipmapSatellite=_altitudeMipmapSatellite;
@property(nonatomic) _Bool altitudeShowTileBounds; // @synthesize altitudeShowTileBounds=_altitudeShowTileBounds;
@property(nonatomic) _Bool altitudeTexturePaging; // @synthesize altitudeTexturePaging=_altitudeTexturePaging;
@property(nonatomic) _Bool altitudePauseLoading; // @synthesize altitudePauseLoading=_altitudePauseLoading;
@property(nonatomic) _Bool realisticWireframeEnabled; // @synthesize realisticWireframeEnabled=_realisticWireframeEnabled;
@property(nonatomic) _Bool paintRoadsStitchedByName; // @synthesize paintRoadsStitchedByName=_paintRoadsStitchedByName;
@property(nonatomic) _Bool useStaticTrafficFeed; // @synthesize useStaticTrafficFeed=_useStaticTrafficFeed;
@property(nonatomic) _Bool loadGreenTraffic; // @synthesize loadGreenTraffic=_loadGreenTraffic;
@property(nonatomic) _Bool paintTrafficSkeleton; // @synthesize paintTrafficSkeleton=_paintTrafficSkeleton;
@property(nonatomic) _Bool labelHidePointFeatures; // @synthesize labelHidePointFeatures=_labelHidePointFeatures;
@property(nonatomic) _Bool labelHideLineFeatures; // @synthesize labelHideLineFeatures=_labelHideLineFeatures;
@property(nonatomic) _Bool hideDirectionalArrows; // @synthesize hideDirectionalArrows=_hideDirectionalArrows;
@property(nonatomic) _Bool paintLabelCounts; // @synthesize paintLabelCounts=_paintLabelCounts;
@property(nonatomic) _Bool paintLabelCollisionLines; // @synthesize paintLabelCollisionLines=_paintLabelCollisionLines;
@property(nonatomic) _Bool paintLabelRoadFeatures; // @synthesize paintLabelRoadFeatures=_paintLabelRoadFeatures;
@property(nonatomic) _Bool paintLabelBounds; // @synthesize paintLabelBounds=_paintLabelBounds;
@property(nonatomic) _Bool paintRoadSigns; // @synthesize paintRoadSigns=_paintRoadSigns;
@property(nonatomic) _Bool highlightUnmatchedRouteLine; // @synthesize highlightUnmatchedRouteLine=_highlightUnmatchedRouteLine;
@property(nonatomic) _Bool dontMapMatchToSnappedRouteLine; // @synthesize dontMapMatchToSnappedRouteLine=_dontMapMatchToSnappedRouteLine;
@property(nonatomic) _Bool dontMatchRouteLine; // @synthesize dontMatchRouteLine=_dontMatchRouteLine;
@property(nonatomic) _Bool paintRouteDebugMarkers; // @synthesize paintRouteDebugMarkers=_paintRouteDebugMarkers;
@property(nonatomic) _Bool labelUpdateMapTilesContinuously; // @synthesize labelUpdateMapTilesContinuously=_labelUpdateMapTilesContinuously;
@property(nonatomic) _Bool labelAllowDefaultStyle; // @synthesize labelAllowDefaultStyle=_labelAllowDefaultStyle;
@property(nonatomic) _Bool labelTileDecodeEnabled; // @synthesize labelTileDecodeEnabled=_labelTileDecodeEnabled;
@property(nonatomic) _Bool labelFlipAlternatePositionsEnable; // @synthesize labelFlipAlternatePositionsEnable=_labelFlipAlternatePositionsEnable;
@property(nonatomic) _Bool labelCollisionEnabled; // @synthesize labelCollisionEnabled=_labelCollisionEnabled;
@property(nonatomic) _Bool labelHighlighting; // @synthesize labelHighlighting=_labelHighlighting;
@property(nonatomic) _Bool disableRoute; // @synthesize disableRoute=_disableRoute;
@property(nonatomic) _Bool paintBuildingNormals; // @synthesize paintBuildingNormals=_paintBuildingNormals;
@property(nonatomic) _Bool paintCoastlines; // @synthesize paintCoastlines=_paintCoastlines;
@property(nonatomic) _Bool paintJunctions; // @synthesize paintJunctions=_paintJunctions;
@property(nonatomic) _Bool paintVertices; // @synthesize paintVertices=_paintVertices;
@property(nonatomic) _Bool paintPolygonTiles; // @synthesize paintPolygonTiles=_paintPolygonTiles;
@property(nonatomic) _Bool paintPointTiles; // @synthesize paintPointTiles=_paintPointTiles;
@property(nonatomic) _Bool paintPoiTiles; // @synthesize paintPoiTiles=_paintPoiTiles;
@property(nonatomic) _Bool paintRoadTiles; // @synthesize paintRoadTiles=_paintRoadTiles;
@property(nonatomic) _Bool paintRoadBoundaries; // @synthesize paintRoadBoundaries=_paintRoadBoundaries;
@property(nonatomic) _Bool paintMapTiles; // @synthesize paintMapTiles=_paintMapTiles;
- (_Bool)isPerformanceGroupShown:(unsigned int)arg1;
- (void)hidePerformanceGroup:(unsigned int)arg1;
- (void)showPerformanceGroup:(unsigned int)arg1;
- (id)nameForPerformanceGroup:(unsigned int)arg1;
- (unsigned int)numPerformanceGroups;
- (_Bool)overlaysShouldDrawDebug;
- (_Bool)shouldDrawDebug;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKDispatch : NSObject
{
    NSObject<OS_dispatch_queue> *_homeQueue;
    NSObject<OS_dispatch_queue> *_layoutQueue;
    NSObject<OS_dispatch_queue> *_renderQueue;
}

+ (id)defaultDispatch;
+ (id)stylesheetLoadQueue;
+ (id)preemptiveLoadQueue;
+ (id)textureManagerRootQueue;
+ (id)iconRenderQueue;
+ (id)tileDecodeStylingQueue;
+ (id)tileDecodeQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *renderQueue; // @synthesize renderQueue=_renderQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *layoutQueue; // @synthesize layoutQueue=_layoutQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *homeQueue; // @synthesize homeQueue=_homeQueue;
- (id)_newRenderQueue:(const char *)arg1;
- (id)_newLayoutQueue:(const char *)arg1;
- (void)dealloc;
- (id)description;
- (id)_initWithHomeQueue:(id)arg1 layoutQueue:(id)arg2 renderQueue:(id)arg3;
- (id)initWithHomeQueue:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKDrawStyle : NSObject
{
    VKCartoStyle *_sourceStyle;
    struct StyleData _internal;
    VKStyleManager *_styleManager;
}

+ (int)renderStyleID;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)takeFromStyleProperties:(id)arg1 atZoom:(unsigned int)arg2 globals:(id)arg3;
- (void)takeFromZoomInvariantProperties:(id)arg1;
@property(readonly, nonatomic) id variant;
@property(readonly, nonatomic) float blendingFactor;
- (id)styleName;
- (void)clearSourceStyle;
- (id)sourceStyle;
- (id)initWithStyle:(id)arg1 manager:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKFootprint : NSObject
{
    CDStruct_aca18c62 _boundingRect;
    struct VKFootprintConvexHull_struct _convexHull;
    double _maxDistance;
    struct VKPoint _furthestGroundPoint;
    double _minDistance;
    struct VKPoint _nearestGroundPoint;
    double _minDepth;
    double _maxDepth;
    double _centerDepth;
    int _cornerGroundPointsCount;
    struct VKPoint _cornerGroundPoints[12];
}

@property(readonly, nonatomic) int cornerGroundPointsCount; // @synthesize cornerGroundPointsCount=_cornerGroundPointsCount;
@property(readonly, nonatomic) struct VKPoint nearestGroundPoint; // @synthesize nearestGroundPoint=_nearestGroundPoint;
@property(readonly, nonatomic) struct VKPoint furthestGroundPoint; // @synthesize furthestGroundPoint=_furthestGroundPoint;
@property(readonly, nonatomic) double centerDepth; // @synthesize centerDepth=_centerDepth;
@property(readonly, nonatomic) double maxDepth; // @synthesize maxDepth=_maxDepth;
@property(readonly, nonatomic) double minDepth; // @synthesize minDepth=_minDepth;
@property(readonly, nonatomic) struct VKFootprintConvexHull_struct convexHull; // @synthesize convexHull=_convexHull;
@property(readonly, nonatomic) CDStruct_d2b197d1 boundingRect; // @synthesize boundingRect=_boundingRect;
- (id).cxx_construct;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (CDStruct_d2b197d1)_expandedBoundingRect;
- (_Bool)containsGroundPoint:(struct VKPoint *)arg1;
- (_Bool)rejectsRect:(const CDStruct_d2b197d1 *)arg1;
- (void)computeFromCamera:(id)arg1;
@property(readonly, nonatomic) struct VKPoint *cornerGroundPoints;

@end

__attribute__((visibility("hidden")))
@interface VKGGLDebugTileData : NSObject
{
    struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> _namedLineMesh;
    struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> _unnamedLineMesh;
    struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> _polygonLineMesh;
    struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> _coastLineMesh;
    struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> _poiPointsMesh;
    struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> _verticesPointsMesh;
    struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> _junctionsPointsMesh;
    struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> _overpassPointsMesh;
    unsigned long long _namedLineCount;
    unsigned long long _namedLineVertCount;
    unsigned long long _unnamedLineCount;
    unsigned long long _unnamedLineVertCount;
    unsigned long long _polygonCount;
    unsigned long long _polygonVertCount;
    unsigned long long _poiCount;
    unsigned long long _vertexCount;
    unsigned long long _junctionCount;
    unsigned long long _overpassCount;
    unsigned long long _coastLineCount;
    unsigned long long _coastLineVertCount;
}

@property(readonly, nonatomic) unsigned long long coastLineVertCount; // @synthesize coastLineVertCount=_coastLineVertCount;
@property(readonly, nonatomic) unsigned long long coastLineCount; // @synthesize coastLineCount=_coastLineCount;
@property(readonly, nonatomic) unsigned long long overpassCount; // @synthesize overpassCount=_overpassCount;
@property(readonly, nonatomic) unsigned long long junctionCount; // @synthesize junctionCount=_junctionCount;
@property(readonly, nonatomic) unsigned long long vertexCount; // @synthesize vertexCount=_vertexCount;
@property(readonly, nonatomic) unsigned long long poiCount; // @synthesize poiCount=_poiCount;
@property(readonly, nonatomic) unsigned long long polygonVertCount; // @synthesize polygonVertCount=_polygonVertCount;
@property(readonly, nonatomic) unsigned long long polygonCount; // @synthesize polygonCount=_polygonCount;
@property(readonly, nonatomic) unsigned long long unnamedLineVertCount; // @synthesize unnamedLineVertCount=_unnamedLineVertCount;
@property(readonly, nonatomic) unsigned long long unnamedLineCount; // @synthesize unnamedLineCount=_unnamedLineCount;
@property(readonly, nonatomic) unsigned long long namedLineVertCount; // @synthesize namedLineVertCount=_namedLineVertCount;
@property(readonly, nonatomic) unsigned long long namedLineCount; // @synthesize namedLineCount=_namedLineCount;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_fillInDebugData:(id)arg1;
@property(readonly, nonatomic) struct BaseMesh *overpassPointsMesh;
@property(readonly, nonatomic) struct BaseMesh *junctionsPointsMesh;
@property(readonly, nonatomic) struct BaseMesh *verticesPointsMesh;
@property(readonly, nonatomic) struct BaseMesh *poiPointsMesh;
@property(readonly, nonatomic) struct BaseMesh *coastLineMesh;
@property(readonly, nonatomic) struct BaseMesh *polygonLineMesh;
@property(readonly, nonatomic) struct BaseMesh *unnamedLineMesh;
@property(readonly, nonatomic) struct BaseMesh *namedLineMesh;
- (id)initWithTile:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKGGLRasterOverlayTile : VKTile <VKRasterOverlayTile>
{
    unsigned long long _size;
    float _scale;
    struct TextureData2D *_imageData;
    struct CGContext *_ctx;
    shared_ptr_479d1306 _gglTexture;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _renderItem;
    struct Setup _shaderSetup;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
@property(readonly, nonatomic) shared_ptr_479d1306 gglTexture;
- (struct RenderItem *)setupRenderItemWithRenderState:(struct RenderState *)arg1 mesh:(struct Mesh *)arg2;
- (struct CGContext *)drawContext;
- (_Bool)isEmpty;
@property(readonly, nonatomic) struct RenderItem *renderItem;
- (id)initWithKey:(const struct VKTileKey *)arg1 size:(unsigned long long)arg2 scale:(float)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKGGLTextureManager : NSObject <GEOResourceManifestTileGroupObserver>
{
    unsigned int _tileGroupIdentifier;
    NSObject<OS_dispatch_queue> *_textureQueue;
    struct map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> _textureDictionary;
    VKResourceManager *_resourceManager;
    struct Device *_device;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)purge;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (shared_ptr_479d1306)textureWithName:(id)arg1 forScale:(float)arg2 mipmap:(_Bool)arg3 repeatWrap:(_Bool)arg4;
- (shared_ptr_479d1306)textureWithName:(id)arg1 forScale:(float)arg2;
- (shared_ptr_479d1306)textureWithName:(id)arg1 mipmap:(_Bool)arg2 repeatWrap:(_Bool)arg3;
- (shared_ptr_479d1306)textureWithName:(id)arg1;
- (id)dataWithName:(id)arg1 fromResourceManager:(id)arg2;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 resourceManager:(id)arg2 device:(struct Device *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKGenericShieldDrawStyle : VKRenderStyle
{
    struct StyleData *_customData;
}

+ (int)renderStyleID;
@property(readonly, nonatomic) Matrix_5173352a dropShadowColor;
@property(readonly, nonatomic) float dropShadowSize;
@property(readonly, nonatomic) struct CGSize dropShadowOffset;
@property(readonly, nonatomic) Matrix_5173352a haloColor;
@property(readonly, nonatomic) float haloSize;
@property(readonly, nonatomic) Matrix_5173352a textColor;
@property(readonly, nonatomic) Matrix_5173352a borderColor;
@property(readonly, nonatomic) Matrix_5173352a backgroundColor;
@property(readonly, nonatomic) int style;
- (void)dealloc;
- (id)initWithStyle:(int)arg1 backgroundColor:(Matrix_5173352a)arg2 textColor:(Matrix_5173352a)arg3;
- (id)initWithStyleData:(struct StyleData *)arg1 info:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKGenericShieldGenerator : NSObject <GEOResourceManifestTileGroupObserver>
{
    VKGenericShieldDrawStyle *_defaultStyle;
    NSCache *_defaultStylePacks;
    unsigned int _tileGroupIdentifier;
    VKResourceManager *_resourceManager;
}

- (id)newArtworkWithScale:(double)arg1 style:(id)arg2 size:(long long)arg3 numberOfLines:(unsigned long long)arg4;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 resourceManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKGlobeAnnotationTrackingCameraController : VKAnnotationTrackingCameraController
{
    struct GlobeView *_globeView;
    struct Anchor {
        CDUnknownFunctionPointerType *;
    } *_anchor;
    CDStruct_071ac149 _currentAnimationStartCoordinate;
    CDStruct_2c43369c _currentAnimationPresentationStartCoordinate;
    CDStruct_2c43369c _currentAnimationEndCoordinate;
}

@property(nonatomic) struct GlobeView *globeView; // @synthesize globeView=_globeView;
- (id).cxx_construct;
- (void)_rotateToHeadingAnimated:(_Bool)arg1 duration:(double)arg2;
- (void)_goToAnnotationAnimated:(_Bool)arg1 duration:(double)arg2 isInitial:(_Bool)arg3;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKScreenCameraController : VKCameraController <VKCameraControllerDelegate>
{
    VKAnimation *_zoomAnimation;
    VKAnimation *_pitchAnimation;
    VKAnimation *_rotationAnimation;
    VKAnimation *_regionAnimation;
    VKAnnotationTrackingCameraController *_annotationTrackingCameraController;
    struct VKEdgeInsets _edgeInsets;
    double _beganDoublePanPitch;
    _Bool _isPitchIncreasing;
    double _lastRotation;
    _Bool _rotationLowZoomSnappingEnabled;
    _Bool _shouldRotationRubberband;
    struct CGPoint _panStartScreenPoint;
    struct CGPoint _panLastScreenPoint;
    long long _annotationTrackingZoomStyle;
    _Bool _staysCenteredDuringPinch;
    _Bool _staysCenteredDuringRotation;
    _Bool _isPitchable;
}

@property(nonatomic) long long annotationTrackingZoomStyle; // @synthesize annotationTrackingZoomStyle=_annotationTrackingZoomStyle;
@property(nonatomic) struct VKEdgeInsets edgeInsets; // @synthesize edgeInsets=_edgeInsets;
@property(nonatomic) _Bool isPitchable; // @synthesize isPitchable=_isPitchable;
@property(nonatomic) _Bool staysCenteredDuringRotation; // @synthesize staysCenteredDuringRotation=_staysCenteredDuringRotation;
@property(nonatomic) _Bool staysCenteredDuringPinch; // @synthesize staysCenteredDuringPinch=_staysCenteredDuringPinch;
- (id).cxx_construct;
- (void)cameraController:(id)arg1 canZoomOutDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 canZoomInDidChange:(_Bool)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(_Bool)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(id)arg1 requestsDisplayRate:(long long)arg2;
- (void)runAnimation:(id)arg1;
- (_Bool)isAnimating;
- (void)stopRegionAnimation;
- (void)stopSnappingAnimations;
- (double)rubberBandOffsetForOffset:(double)arg1 maxOffset:(double)arg2 minOffset:(double)arg3 range:(double)arg4;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) _Bool animatingToTrackAnnotation;
@property(readonly, nonatomic, getter=isTrackingHeading) _Bool trackingHeading;
@property(readonly, nonatomic) id <VKTrackableAnnotation> trackingAnnotation;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKGlobeCameraController : VKScreenCameraController <VKInteractiveCameraController>
{
    struct GlobeView *_globeView;
    struct CameraManager _cameraManager;
    double _currentDoublePanPitch;
    _Bool _isPitching;
    _Bool _isRotating;
    _Bool _wasPitched;
    _Bool _couldEnter3DMode;
}

@property(nonatomic) struct GlobeView *globeView; // @synthesize globeView=_globeView;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(CDUnknownBlockType)arg5;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (double)zoomForMapRegion:(id)arg1;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(readonly, nonatomic) GEOMapRegion *mapRegion;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) double pitch;
- (void)updateCameraManager;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
- (void)setGesturing:(_Bool)arg1;
- (void)_update3DState;
- (_Bool)isFullyPitched;
- (_Bool)isPitched;
- (_Bool)canEnter3DMode;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)stopGlobeAnimations;
- (void)stopSearchResultAnimation;
- (_Bool)isFlyoverTourStarted;
- (void)stopFlyoverTourAnimation;
- (void)resumeFlyoverTourAnimation;
- (void)pauseFlyoverTourAnimation;
- (void)flyoverTourAnimation:(id)arg1 animateToStart:(_Bool)arg2 labelChanged:(CDUnknownBlockType)arg3 stateChange:(CDUnknownBlockType)arg4;
- (void)_rotateAroundTargetWithDuration:(double)arg1 rotations:(double)arg2 completion:(CDUnknownBlockType)arg3;
- (void)showSearchResultAnimationAtCoordinate:(CDStruct_c3b9c2ee)arg1 withZoom:(double)arg2;
- (void)moveTo:(CDStruct_c3b9c2ee)arg1 height:(double)arg2 useHeight:(_Bool)arg3 zoom:(double)arg4 rotation:(double)arg5 tilt:(double)arg6 duration:(double)arg7 timingCurve:(CDUnknownBlockType)arg8 completion:(CDUnknownBlockType)arg9;
- (void)moveTo:(CDStruct_c3b9c2ee)arg1 zoom:(double)arg2 rotation:(double)arg3 tilt:(double)arg4 duration:(double)arg5 timingCurve:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)tapZoom:(struct CGPoint)arg1 levels:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)tiltTo:(double)arg1 animated:(_Bool)arg2 exaggerate:(_Bool)arg3;
- (void)rotateTo:(double)arg1 animated:(_Bool)arg2;
- (_Bool)snapMapIfNecessary:(const struct VKPoint *)arg1 animated:(_Bool)arg2;
- (double)altitude;
- (void)setCenterCoordinate:(CDStruct_071ac149)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) CDStruct_071ac149 centerCoordinate;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)pitch:(struct CGPoint)arg1 translation:(double)arg2;
- (void)rotate:(double)arg1 atScreenPoint:(struct CGPoint)arg2;
- (struct CGPoint)_scaledScreenPointForPoint:(struct CGPoint)arg1;
- (struct Vector2i)_cursorFromScreenPoint:(struct CGPoint)arg1;
- (struct CGPoint)_centerScreenPoint;
- (void)updateGlobeFromCamera;
- (long long)maximumNormalizedZoomLevel;
- (long long)minimumNormalizedZoomLevel;
- (long long)tileSize;
- (_Bool)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (_Bool)currentZoomLevelAllowsRotation;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKGlobeLineContainer : NSObject <VKPolylineGroupOverlayObserver, VKPolylineObserver>
{
    _Bool _trafficEnabled;
    id <VKRouteMatchedAnnotationPresentation> _routeLineSplitAnnotation;
    id <VKGlobeLineContainerDelegate> _delegate;
    NSMutableArray *_overlays;
    struct GlobeView *_globeView;
    struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData>>>> _polylinesToRoutes;
    VKPolylineOverlay *_selectedPolyline;
    NSMutableSet *_persistentOverlays;
    struct VKGlobeRouteSplit *_routeSplit;
    struct VKGlobeRouteStyle *_routeStyle;
}

@property(nonatomic) id <VKGlobeLineContainerDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)polyline:(id)arg1 selectedSections:(id)arg2 deselectedSections:(id)arg3;
- (void)setNeedsLayoutForPolyline:(id)arg1;
- (void)polylineGroup:(id)arg1 didSelectPolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didRemovePolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didAddPolyline:(id)arg2;
- (void)setStylesheet:(id)arg1;
- (void)updateWithContext:(id)arg1;
- (void)_recreateLinesIfNeeded;
- (void)_updateRouteSplit;
@property(retain, nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
- (void)setTrafficEnabled:(_Bool)arg1;
- (void)setSelected:(id)arg1 selected:(_Bool)arg2;
- (void)clearLineSelection;
- (void)removeLine:(id)arg1;
- (void)addLine:(id)arg1;
- (id)persistentOverlays;
- (id)overlays;
- (void)removePersistentOverlay:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)initWithGlobeView:(struct GlobeView *)arg1 stylesheet:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKGlobePointCache : NSObject
{
    VKClassicGlobeCanvas *_canvas;
}

@property(nonatomic) VKClassicGlobeCanvas *canvas; // @synthesize canvas=_canvas;
- (struct VKPoint)pointForHandle:(id)arg1 atCoordinate:(CDStruct_c3b9c2ee)arg2 withHighPrecision:(_Bool)arg3;
- (void)removeHandle:(id)arg1;
- (id)addHandleAtCoordinate:(CDStruct_c3b9c2ee)arg1 withHighPrecision:(_Bool)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKGridDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
@property(readonly, nonatomic) Matrix_5173352a lineColor;
@property(readonly, nonatomic) Matrix_5173352a fillColor;
@property(readonly, nonatomic) NSString *texture;

@end

__attribute__((visibility("hidden")))
@interface VKGridModel : VKModelObject <VKMapLayer, VKStyleManagerObserver>
{
    VKMapModel *_mapModel;
    _Bool _simpleGridEnabled;
    unsigned char _renderPass;
    double _gridMix;
    Matrix_5173352a _fillColor;
    Matrix_5173352a _lineColor;
    shared_ptr_1fee3c91 _viewUniformData;
    struct shared_ptr<ggl::GridBase::GridBaseUniformData> _baseUniformData;
    struct shared_ptr<ggl::SimpleGrid::SimpleGridUniformData> _simpleUniformData;
    struct shared_ptr<ggl::Grid::GridUniformData> _uniformData;
    struct unique_ptr<ggl::Grid::Shader::Setup, std::__1::default_delete<ggl::Grid::Shader::Setup>> _shaderSetup;
    struct unique_ptr<ggl::SimpleGrid::Shader::Setup, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup>> _simpleShaderSetup;
    struct shared_ptr<ggl::GridBase::GridMesh> _gridMesh;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _gridRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _simpleGridRenderState;
    struct RenderItem *_gridRenderItem;
    struct RenderItem *_simpleGridRenderItem;
    _Bool _needsUpdatedColor;
}

+ (_Bool)reloadOnStylesheetChange;
@property(nonatomic) unsigned char renderPass; // @synthesize renderPass=_renderPass;
@property(readonly, nonatomic) Matrix_5173352a fillColor; // @synthesize fillColor=_fillColor;
@property(nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
@property(nonatomic) _Bool simpleGridEnabled; // @synthesize simpleGridEnabled=_simpleGridEnabled;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)dealloc;
- (id)init;
- (void)stylesheetDoneChanging;
- (void)stylesheetDidChange;
- (void)updateGridColor;
- (void)setNeedsUpdatedGridColor;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (unsigned long long)mapLayerPosition;
- (_Bool)shouldLayoutWithoutStyleManager;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKGuidanceStepInfo : NSObject
{
    NSString *_roadName;
    int _routePoint;
}

@property(readonly, nonatomic) int routePoint; // @synthesize routePoint=_routePoint;
@property(readonly, retain, nonatomic) NSString *roadName; // @synthesize roadName=_roadName;
- (void)dealloc;
- (id)initWithRoadName:(id)arg1 point:(int)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKHeightfield : NSObject
{
    float *_zBins;
    unsigned int _rowCount;
    unsigned int _columnCount;
}

- (void)dealloc;
- (id)initWithFootprintTile:(id)arg1 heightfieldRows:(unsigned int)arg2 heightfieldColumns:(unsigned int)arg3;
- (id)initWithRows:(unsigned int)arg1 columns:(unsigned int)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKRasterMapModel : VKMapTileModel <VKMapLayer>
{
    NSMutableArray *_sortedTiles;
    unsigned long long _mapLayer;
    _Bool _rasterViewer;
    _Bool _showingNoDataPlaceholders;
    shared_ptr_6e6219d6 _styleQuery;
    shared_ptr_479d1306 _gglClutTexture;
    struct Pos2DUVMesh *_unitMesh;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _renderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _clutRenderState;
}

+ (_Bool)reloadOnStylesheetChange;
@property(readonly, getter=isShowingNoDataPlaceholders) _Bool showingNoDataPlaceholders; // @synthesize showingNoDataPlaceholders=_showingNoDataPlaceholders;
@property(nonatomic) _Bool rasterViewer; // @synthesize rasterViewer=_rasterViewer;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)shouldEnableCLUT;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3 roadAlpha:(float)arg4;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)gglSetupClutTextureForLevelOfDetail:(unsigned long long)arg1 scale:(double)arg2;
- (void)stylesheetDidChange;
- (id)styleManager;
- (void)reset;
- (void)dealloc;
- (id)init;
@property(nonatomic) unsigned long long mapLayerPosition;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKHybridRasterMapModel : VKRasterMapModel
{
    float _roadAlpha;
}

+ (float)roadAlphaForLayoutContext:(id)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKHybridRasterTileSource : VKRasterTileSource
{
}

- (unsigned long long)mapLayerForZoomLevelRange;

@end

__attribute__((visibility("hidden")))
@interface VKRoadMapModel : VKVectorMapModel <VKStyleManagerObserver>
{
    struct unique_ptr<vk::RoadManager, std::__1::default_delete<vk::RoadManager>> _roadManager;
    struct unique_ptr<vk::PatternedManager, std::__1::default_delete<vk::PatternedManager>> _patternedRibbonManager;
    unsigned long long _mapLayerPosition;
}

@property(nonatomic) unsigned long long mapLayerPosition; // @synthesize mapLayerPosition=_mapLayerPosition;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)didReceiveMemoryWarning;
- (void)stylesheetDidChange;
- (void)dealloc;
- (id)init;
- (unsigned char)commandBufferId;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) VKStyleManager *styleManager;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKHybridRoadMapModel : VKRoadMapModel
{
    struct unique_ptr<md::OffscreenQueue, std::__1::default_delete<md::OffscreenQueue>> _offscreenQueue;
    float _roadAlpha;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)unLockCommandBuffers:(struct RenderQueue *)arg1;
- (void)lockCommandBuffers:(struct RenderQueue *)arg1;
- (void)gglLayoutSceneIfNeeded:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3 dispatchQueue:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKHybridSinglePassRoadMapModel : VKRoadMapModel
{
}

- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKIconArtwork : NSObject
{
    _Bool _hasIcon;
    VKImage *_image;
    double _contentScale;
    NSMutableArray *_completionHandlers;
}

@property(readonly, nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
- (void)_cleanUpAfterDrawing;
- (id)_newImage;
- (void)getImage:(CDUnknownBlockType)arg1;
- (id)image;
@property(readonly, nonatomic) struct CGSize size;
- (void)dealloc;
- (id)initWithImage:(struct CGImage *)arg1 contentScale:(double)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKIconAtlas : NSObject
{
    VKPIconPack *_iconPack;
    struct _GEOGenericContainer<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> _artworkPool;
    NSMapTable *_atlasToImages;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGImage *)_createImageForIconInfo:(id)arg1 contentScale:(double)arg2;
- (struct CGImage *)_createImageForName:(id)arg1 contentScale:(double)arg2 size:(long long)arg3;
- (id)artworkForName:(id)arg1 style:(CDStruct_44d855de *)arg2 contentScale:(double)arg3 size:(long long)arg4;
- (id)artworkForStyleAttributeKey:(unsigned int)arg1 value:(unsigned int)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4 size:(long long)arg5;
- (id)artworkForStyleAttributeKey:(unsigned int)arg1 longValue:(unsigned long long)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4 size:(long long)arg5;
- (id)_artworkForBaseImage:(struct CGImage *)arg1 additionalImage:(struct CGImage *)arg2 cacheKey:(id)arg3 style:(CDStruct_44d855de *)arg4 contentScale:(double)arg5;
- (void)dealloc;
- (id)initWithIconPack:(id)arg1;
- (id)init;

@end

@interface VKIconManager : NSObject <GEOResourceManifestTileGroupObserver>
{
    _VKLocalIconAtlas *_localAtlas;
    unsigned int _tileGroupIdentifier;
    VKResourceManager *_resourceManager;
    NSMapTable *_atlases;
    NSArray *_nonRegionalResourceNames;
    NSMutableDictionary *_nameToStyleManager;
}

+ (id)sharedManager;
- (id)imageForStyleAttributes:(id)arg1 withStylesheetName:(id)arg2 contentScale:(double)arg3 size:(long long)arg4 customIconID:(unsigned long long)arg5;
- (id)imageForName:(id)arg1 contentScale:(double)arg2;
- (id)_allResourceNames;
- (id)artworkForFeatureID:(unsigned long long)arg1 withResourceNames:(id)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4 size:(long long)arg5;
- (id)_atlasForName:(id)arg1;
- (id)artworkForStyleAttributeKey:(unsigned int)arg1 longAttributeValue:(unsigned long long)arg2 withResourceNames:(id)arg3 style:(CDStruct_44d855de *)arg4 contentScale:(double)arg5 size:(long long)arg6;
- (id)artworkForStyleAttributeKey:(unsigned int)arg1 attributeValue:(unsigned int)arg2 withResourceNames:(id)arg3 style:(CDStruct_44d855de *)arg4 contentScale:(double)arg5 size:(long long)arg6;
- (id)artworkForName:(id)arg1 withResourceNames:(id)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4 size:(long long)arg5;
- (id)_forEachIconPackWithContentScale:(double)arg1 iconSize:(long long)arg2 resourceNames:(id)arg3 visitUntilMatch:(CDUnknownBlockType)arg4;
- (id)_nonRegionalPacks;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)purge;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 resourceManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKImage : NSObject
{
    struct CGImage *_imageRef;
    NSData *_data;
    NSString *_name;
    struct CGSize _size;
    double _scale;
    _Bool _usedAsTextureAndImage;
    struct Texture2D *_gglTexture;
    VKResourceManager *_resourceManager;
}

- (id).cxx_construct;
- (double)scale;
- (struct CGSize)size;
- (struct CGImage *)image;
- (struct Texture2D *)gglTexture;
- (void)dealloc;
- (id)initWithName:(id)arg1 scale:(double)arg2 resourceManager:(id)arg3;
- (id)initWithData:(id)arg1 scale:(double)arg2;
- (id)initWithData:(id)arg1 scale:(double)arg2 usedAsTextureAndImage:(_Bool)arg3;
- (id)initWithCGImage:(struct CGImage *)arg1 scale:(double)arg2;
- (id)initWithCGImage:(struct CGImage *)arg1 scale:(double)arg2 usedAsTextureAndImage:(_Bool)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKImageCanvas : GGLImageCanvas <VKWorldDelegate, VKAnimationRunner>
{
    VKWorld *_world;
    VKCamera *_camera;
    VKLayoutContext *_layoutContext;
    VKDispatch *_dispatch;
    VKTimer *_layoutTimer;
    _Bool _shouldDrawWhileLoading;
    double _frameTimestamp;
    _Bool _needsLayout;
    struct MapCamera _mapCamera;
    struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> _renderQueue;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _renderQueueResolve;
    struct RenderTree *_mapScene;
}

@property(readonly, nonatomic) VKDispatch *dispatch; // @synthesize dispatch=_dispatch;
@property(readonly, nonatomic) VKCamera *camera; // @synthesize camera=_camera;
@property(readonly, nonatomic) VKWorld *world; // @synthesize world=_world;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)animationDidResume:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (void)runAnimation:(id)arg1;
- (void)worldDisplayDidChange:(id)arg1;
- (void)worldLayoutDidChange:(id)arg1;
- (void)renderSceneWithRenderer:(struct Renderer *)arg1 completion:(CDUnknownBlockType)arg2;
- (void)cancelLoad;
- (void)loadScene;
- (void)_spinScene:(id)arg1;
- (void)_spinSceneWillRender:(_Bool)arg1;
- (void)_updateViewTransform;
- (void)setSize:(struct CGSize)arg1;
- (void)dealloc;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2 useMultisampling:(_Bool)arg3 device:(const shared_ptr_807ec9ac *)arg4 homeQueue:(id)arg5;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2 useMultisampling:(_Bool)arg3 device:(const shared_ptr_807ec9ac *)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKIntObjectMap : NSObject
{
    struct unordered_map<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> _map;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setObject:(id)arg1 forKey:(int)arg2;
- (id)objectForKey:(int)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKInteractiveDispatch : VKDispatch
{
}

+ (id)defaultDispatch;
- (id)_newRenderQueue:(const char *)arg1;
- (id)_newLayoutQueue:(const char *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKInternedString : NSString
{
    NSString *original;
}

+ (id)stringWithString:(id)arg1;
+ (void)initialize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqualToString:(id)arg1;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange)arg3 locale:(id)arg4;
- (id)substringWithRange:(struct _NSRange)arg1;
- (id)substringToIndex:(unsigned long long)arg1;
- (id)substringFromIndex:(unsigned long long)arg1;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (void)dealloc;
- (id)initWithString:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKLRUCache : NSObject <NSFastEnumeration>
{
    unsigned long long _reservedCapacity;
    unsigned long long _maximumCapacity;
    unsigned long long _count;
    void *_table;
    id _head;
    id _tail;
    id <VKLRUCacheDelegate> _delegate;
}

@property(nonatomic) id <VKLRUCacheDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) unsigned long long count; // @synthesize count=_count;
@property(readonly, nonatomic) unsigned long long maximumCapacity; // @synthesize maximumCapacity=_maximumCapacity;
@property(readonly, nonatomic) unsigned long long reservedCapacity; // @synthesize reservedCapacity=_reservedCapacity;
- (void)removeObjectsMatchingPredicate:(CDUnknownBlockType)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)insertNodeAtHead:(id)arg1;
- (void)removeNode:(id)arg1;
- (void)purge;
- (void)removeAllObjects;
- (void)setObject:(id)arg1 forKey:(const struct VKCacheKey *)arg2;
- (id)objectWithoutPromotingForKey:(const struct VKCacheKey *)arg1;
- (id)objectForKey:(const struct VKCacheKey *)arg1;
- (void)setReservedCapacity:(unsigned long long)arg1 maximumCapacity:(unsigned long long)arg2;
- (void)evictIfNecessary;
- (void)dropTail;
- (void)dealloc;
- (id)contentsDescription;
- (id)description;
- (id)initWithReservedCapacity:(unsigned long long)arg1 maximumCapacity:(unsigned long long)arg2;
- (id)init;
- (void)consistencyCheck;

@end

__attribute__((visibility("hidden")))
@interface VKLabelDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
- (_Bool)areNavShieldsVisible;
- (_Bool)areNavSignsVisible;
- (_Bool)isPOITextEverVisible;
- (_Bool)areTextBoxesEverVisible;
- (_Bool)areShieldsEverVisible;
- (_Bool)visibleAtMaxZoom:(float)arg1;
- (unsigned long long)minArrowZoom;
- (unsigned long long)maxVisibleZoom;
- (unsigned long long)minVisibleZoom;
- (unsigned long long)arrowLayer;
- (unsigned long long)layer;
- (_Bool)showShieldTextAsLabelAtZoom:(float)arg1;
- (_Bool)arrowVisibleAtZoom:(float)arg1;
- (double)minimumMultiShieldGapForZoom:(int)arg1;
- (double)minimumShieldSpacingForZoom:(int)arg1;
- (double)minimumRoadArrowSpacingForZoom:(int)arg1;
- (double)minimumRoadLabelSpacingForZoom:(int)arg1 scaleFactor:(long long)arg2;
- (double)mapWidthInEmsForZoom:(int)arg1 scaleFactor:(long long)arg2;
- (void)getFontOptions:(struct FontOptions *)arg1 atZoom:(float)arg2 contentScale:(float)arg3 scaleFactor:(long long)arg4;
- (void)getLabelStyle:(struct VKLabelStyle *)arg1 atZoom:(float)arg2 updateOnlyContinuousValues:(_Bool)arg3 contentScale:(float)arg4 scaleFactor:(long long)arg5;
- (void)getRoadSignStyle:(CDStruct_d5b0faf5 *)arg1 atZoom:(float)arg2 contentScale:(float)arg3 scaleFactor:(long long)arg4;
- (void)getNavShieldStyle:(CDStruct_d5b0faf5 *)arg1 atZoom:(float)arg2 contentScale:(float)arg3 scaleFactor:(long long)arg4;
- (unsigned char)dedupeRank;
- (id)genericShieldStyle;

@end

@interface VKLabelMarker : NSObject
{
    shared_ptr_dd1f7020 _manager;
    shared_ptr_0c41964b _label;
    float _contentScale;
    unsigned long long _featureID;
    int _featureType;
    struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _featureTile;
    NSString *_subtitle;
}

@property(copy, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)shouldActivateFeatureSelectionMode;
- (void)dealloc;
- (id)debugAnchorPointString;
- (unsigned long long)animationID;
- (int)selectionType;
- (struct CGPoint)screenPointToScrollRelativeToWithCanvasSize:(struct CGSize)arg1 canvasScale:(double)arg2;
- (struct CGPoint)calloutAnchorPointWithCanvasSize:(struct CGSize)arg1 canvasScale:(double)arg2 snapToPixels:(_Bool)arg3;
- (void)setLabelPressed:(_Bool)arg1;
- (void)setLabelSelected:(_Bool)arg1;
- (id)featureHandles;
- (id)incident;
- (id)featureTile;
- (int)featureType;
- (unsigned long long)featureID;
- (unsigned long long)businessID;
- (_Bool)hasBusinessID;
- (_Bool)isFlyoverTour;
- (_Bool)isTrafficIncident;
- (_Bool)isOneWayArrow;
- (_Bool)isSelectable;
- (struct CGRect)calloutAnchorRect;
- (id)mapRegion;
- (CDStruct_d2b197d1)_bounds;
- (CDStruct_c3b9c2ee)coordinate;
- (id)iconName;
- (id)title;
- (shared_ptr_0c41964b)infoLabel;
- (id)initWithManager:(const shared_ptr_dd1f7020 *)arg1 infoLabel:(const shared_ptr_0c41964b *)arg2 contentScale:(float)arg3 featureInfo:(const struct LabelFeatureInfo *)arg4;

@end

@interface VKLabelMarkerFeatureHandle : NSObject
{
    int _featureType;
    long long _featureIndex;
    int _tileX;
    int _tileY;
    int _tileZ;
}

- (id)initWithFeature:(CDStruct_58d0ca89 *)arg1 featureType:(int)arg2;
- (int)tileZ;
- (int)tileY;
- (int)tileX;
- (long long)featureIndex;
- (int)featureType;

@end

__attribute__((visibility("hidden")))
@interface VKLabelModel : VKModelObject <LabelManagerDelegate, GEOResourceManifestTileGroupObserver, VKMapLayer, VKStyleManagerObserver, VKMapModeObserver>
{
    _Bool _debugSkipLabels;
    id <VKLabelModelDelegate> _delegate;
    _Bool _drawLabels;
    CDUnknownBlockType _observerIsReadyHook;
    shared_ptr_dd1f7020 _labelManager;
    int _layoutStamp;
    struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile>>> _currentTiles;
    _Bool _inRealistic;
    _Bool _shouldModifyLabelsOnRoutes;
}

+ (_Bool)reloadOnStylesheetChange;
@property(nonatomic) _Bool shouldModifyLabelsOnRoutes; // @synthesize shouldModifyLabelsOnRoutes=_shouldModifyLabelsOnRoutes;
@property(readonly, nonatomic) shared_ptr_dd1f7020 labelManager; // @synthesize labelManager=_labelManager;
@property(nonatomic) _Bool drawLabels; // @synthesize drawLabels=_drawLabels;
@property(nonatomic) id <VKLabelModelDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)didTransitionFrom:(long long)arg1 To:(long long)arg2;
- (void)willTransitionFrom:(long long)arg1 To:(long long)arg2;
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:pendingArtworkIsReady:
-     // Error parsing type: v32@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16@24, name: labelManager:selectedLabelMarkerWillDisappear:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsDisplay:
-     // Error parsing type: v28@0:8^{LabelManager=^^?{weak_ptr<vk::LabelManager>=^{LabelManager}^{__shared_weak_count}}@QCqBBBBBBBBBBBBBBBBBBBBBBBBBBBBB{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}dddddf{?=[4[4d]]}{Matrix<double, 4, 4>=[16d]}{CGSize=dd}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}fff{LabelAngle=C}I[5d]di{vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}^{shared_ptr<vk::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{shared_ptr<vk::LabelMapTile>}}}{set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >={__tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > >=^{__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > >=Q}}}{InfoLabelFeaturePool={mutex={_opaque_pthread_mutex_t=q[56c]}}I{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >={__tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=^{__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > >=Q}}}{unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={__hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>=^{__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}B{vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}}{LabelPool=Q{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}{map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >={__tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > >=^{__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> >=Q}}}Q}{vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}^{shared_ptr<vk::InfoLabel>}{__compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > >=^{shared_ptr<vk::InfoLabel>}}}{vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}^^{InfoLabel}{__compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> >=^^{InfoLabel}}}{FontAtlas=^^?i{vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}^{shared_ptr<vk::FontAtlasPage>}{__compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > >=^{shared_ptr<vk::FontAtlasPage>}}}^{FontAtlasCell}^{FontAtlasCell}i^{CGColor}^{CGContext}^vII^{FontGlyphCache}[2{PendingFreeCellEntry={shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}^^{FontAtlasCell}{__compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> >=^^{FontAtlasCell}}}}]{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}}{LabelMesh=^^?{vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}^^{IconLabelPart}{__compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> >=^^{IconLabelPart}}}{vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}^^{TextLabelPart}{__compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> >=^^{TextLabelPart}}}^{FontAtlasBase}BQ{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}^{BufferRange}{__compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> >=^{BufferRange}}}{Matrix<float, 4, 4>=[16f]}{vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}^{shared_ptr<ggl::RenderItem>}{__compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >=^{shared_ptr<ggl::RenderItem>}}}{vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}^{shared_ptr<ggl::ShaderSetup>}{__compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > >=^{shared_ptr<ggl::ShaderSetup>}}}[4{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}]{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::ChannelUniformData>=^{ChannelUniformData}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{DefaultMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Glyph::DefaultVertexData>=^{DefaultVertexData}^{__shared_weak_count}}}Q{shared_ptr<ggl::Icon::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{shared_ptr<ggl::Shader>=^{Shader}^{__shared_weak_count}}{IconMesh=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^^?^{ResourceManager}^{RenderResource}{shared_ptr<ggl::VertexData>=^{VertexData}^{__shared_weak_count}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}{shared_ptr<ggl::Icon::IconVertexData>=^{IconVertexData}^{__shared_weak_count}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}Q}{LabelStyleCache={mutex={_opaque_pthread_mutex_t=q[56c]}}fBBqqQf{_retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::StyleResolutionSession>=^{StyleResolutionSession}^{__shared_weak_count}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > >=^{__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> >=Q}}}{shared_ptr<vk::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}}{LabelCollider=^{LabelManager}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}ff{Matrix<float, 2, 1>=[2f]}{Matrix<int, 2, 1>=[2i]}{vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}^{GridNode}{__compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> >=^{GridNode}}}IBB{Box<int, 2>={Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}}{SimpleBuffer<vk::LabelCollidableItem *, 20>=QQ^^{LabelCollidableItem}}{SimpleBuffer<vk::LabelCollisionItemBase *, 2000>=QQ^^{LabelCollisionItemBase}}}{OcclusionManager={shared_ptr<ggl::OcclusionLine::ViewUniformData>=^{ViewUniformData}^{__shared_weak_count}}{RenderState=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{DepthState=^^?iBBBff}{ColorState=^^?BBBB}{BlendState=^^?Bi}{StencilState=^^?BBIiiIiii}{ScissorState=^^?B{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}{PolygonState=^^?Bii}}{unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >={__compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> >=^{Setup}}}{Matrix<double, 4, 4>=[16d]}B{deque<std::__1::shared_ptr<md::OcclusionQuery>, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >={__split_buffer<std::__1::shared_ptr<md::OcclusionQuery> *, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}^^{shared_ptr<md::OcclusionQuery>}{__compressed_pair<std::__1::shared_ptr<md::OcclusionQuery> **, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> *> >=^^{shared_ptr<md::OcclusionQuery>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<md::OcclusionQuery> > >=Q}}}QQ{shared_ptr<vk::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}^{shared_ptr<vk::LabelIcon>}{__compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > >=^{shared_ptr<vk::LabelIcon>}}}{shared_ptr<vk::LabelManagerNotifierHook>=^{LabelManagerNotifierHook}^{__shared_weak_count}}IddBfiQd{shared_ptr<vk::InfoLabel>=^{InfoLabel}^{__shared_weak_count}}{shared_ptr<vk::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BqqfqBBBBii{_retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{LabelNavTrafficSupport=^{LabelManager}{_retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}{PolylineCoordinate=If}{PolylineCoordinate=If}{vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}^{shared_ptr<vk::TrafficIncidentLabelFeature>}{__compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > >=^{shared_ptr<vk::TrafficIncidentLabelFeature>}}}B}B{vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}^{shared_ptr<vk::NavLabel>}{__compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >=^{shared_ptr<vk::NavLabel>}}}{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}}16B24, name: labelManager:setNeedsLayout:
- (void)stylesheetDoneChanging;
- (void)stylesheetDidChange;
- (void)stylesheetWillTransition:(unsigned long long)arg1;
- (void)prepareForStylesheetTransitionToMapDisplayStyle:(unsigned long long)arg1 withReadinessBlock:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (id)labelDebugString;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
@property(nonatomic) _Bool labelMarkerSelectionEnabled;
- (id)selectedLabelMarker;
- (id)focusedPolylinePainter;
- (void)deselectLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkers;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (void)setIsShowingRoute:(_Bool)arg1;
- (void)setTrafficEnabled:(_Bool)arg1;
- (void)setFocusedPolylinePainter:(id)arg1;
- (struct PolylineCoordinate)routeUserOffset;
- (void)setRouteUserOffset:(struct PolylineCoordinate)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setStyleManager:(id)arg1;
- (void)setVectorType:(long long)arg1;
- (void)setLabelMode:(unsigned char)arg1;
- (void)didTapZoom;
- (void)willTapZoom;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)updateLabelMapTiles:(id)arg1;
- (void)clearScene;
- (unsigned long long)mapLayerPosition;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
- (void)setContentScale:(double)arg1;
- (void)setMapType:(long long)arg1;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint)arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)dealloc;
- (id)initWithPurpose:(unsigned long long)arg1 sharedResources:(id)arg2;
- (_Bool)shouldLayoutWithoutStyleManager;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKLabelNavJunction : NSObject <VKLabelNavFeature>
{
    VKLabelTile *_tile;
    Matrix_8746f91e _tileCoordinate;
    CDStruct_dde70fb6 *_geoJunction;
    struct PolylineCoordinate _routeOffset;
    NSMutableArray *_roads;
    VKLabelNavRoad *_incomingRoad;
    VKLabelNavRoad *_outgoingRoad;
    float _distanceFromPreviousShieldLabel;
    int _preferredLabelPlacement;
    _Bool _isOnDualCarriageway;
    _Bool _hasSharedRouteDirection;
    Matrix_8746f91e _sharedRouteDirection;
    _Bool _foundRoads;
    _Bool _isOverpass;
    _Bool _isRouteOverpass;
    int _largestRoadClass;
    struct {
        CDStruct_58d0ca89 _field1;
        CDStruct_b2fbf00d _field2;
        unsigned char _field3;
        unsigned char _field4;
        unsigned char _field5;
        CDStruct_183601bc *_field6;
    } *_labelFeature;
    NSString *_name;
    VKLabelNavRoadLabel *_junctionSign;
    _Bool _areLabelsDisabled;
    unsigned long long _depthFromRoute;
    double _worldUnitsPerMeter;
    VKLabelNavJunction *_overpassJunction;
    struct VKPoint _worldCoordinate;
    double _sortValue;
    _Bool _isRouteRefineJunction;
}

@property(readonly, nonatomic) VKLabelNavRoadLabel *junctionSign; // @synthesize junctionSign=_junctionSign;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) _Bool isRouteRefineJunction; // @synthesize isRouteRefineJunction=_isRouteRefineJunction;
@property(nonatomic) _Bool isRouteOverpass; // @synthesize isRouteOverpass=_isRouteOverpass;
@property(readonly, nonatomic) _Bool isOverpass; // @synthesize isOverpass=_isOverpass;
@property(nonatomic) VKLabelNavJunction *overpassJunction; // @synthesize overpassJunction=_overpassJunction;
@property(nonatomic) unsigned long long depthFromRoute; // @synthesize depthFromRoute=_depthFromRoute;
@property(nonatomic) Matrix_8746f91e sharedRouteDirection; // @synthesize sharedRouteDirection=_sharedRouteDirection;
@property(readonly, nonatomic) _Bool hasSharedRouteDirection; // @synthesize hasSharedRouteDirection=_hasSharedRouteDirection;
@property(nonatomic) _Bool isOnDualCarriageway; // @synthesize isOnDualCarriageway=_isOnDualCarriageway;
@property(nonatomic) float distanceFromPreviousShieldLabel; // @synthesize distanceFromPreviousShieldLabel=_distanceFromPreviousShieldLabel;
@property(nonatomic) int preferredLabelPlacement; // @synthesize preferredLabelPlacement=_preferredLabelPlacement;
@property(readonly, nonatomic) VKLabelNavRoad *incomingRoad; // @synthesize incomingRoad=_incomingRoad;
@property(readonly, nonatomic) VKLabelNavRoad *outgoingRoad; // @synthesize outgoingRoad=_outgoingRoad;
@property(nonatomic) struct PolylineCoordinate routeOffset; // @synthesize routeOffset=_routeOffset;
@property(readonly, nonatomic) Matrix_8746f91e tileCoordinate; // @synthesize tileCoordinate=_tileCoordinate;
@property(readonly, nonatomic) const CDStruct_dde70fb6 *geoJunction; // @synthesize geoJunction=_geoJunction;
@property(readonly, nonatomic) VKLabelTile *tile; // @synthesize tile=_tile;
- (id).cxx_construct;
@property(readonly, nonatomic) _Bool isGuidanceStepStart;
@property(readonly, nonatomic) NSString *shieldDisplayGroup;
@property(readonly, nonatomic) _Bool isInGuidance;
@property(readonly, nonatomic) _Bool isStartOfRoadName;
- (void)createLabelWithNavContext:(struct NavContext *)arg1 isDrivingSideRight:(_Bool)arg2;
- (struct VKPoint)_anchorCoordinateForSignOrientation:(long long)arg1;
- (long long)_signOrientationWithDrivingSide:(_Bool)arg1;
@property(readonly, nonatomic) double worldUnitsPerMeter; // @synthesize worldUnitsPerMeter=_worldUnitsPerMeter;
@property(readonly, nonatomic) int requiredLabelPlacement;
- (void)evaluateCrossStreetsUsingRouteJunction:(id)arg1;
- (void)evaluateCrossStreets;
- (void)addRouteEdge:(const struct VKLabelNavRouteRoadEdge *)arg1 atA:(_Bool)arg2;
- (void)findRoads;
@property(readonly, nonatomic) int largestRoadClass;
@property(readonly, nonatomic) NSArray *roads; // @synthesize roads=_roads;
@property(readonly, nonatomic) _Bool isMultiRoadIntersection;
@property(readonly, nonatomic) _Bool isIntraRamp;
@property(readonly, nonatomic) _Bool isOffRouteGraph;
@property(readonly, nonatomic) _Bool isAwayFromRoute;
@property(readonly, nonatomic) _Bool isRamp;
@property(readonly, nonatomic) long long intraRoadPriority;
@property(readonly, nonatomic) _Bool isIntersection;
@property(readonly, nonatomic) _Bool isOnRoute;
@property(readonly, nonatomic) _Bool isRoadTerminus;
@property(readonly, nonatomic) _Bool isTileEdgeJunction;
- (_Bool)matchesLocationForJunction:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithRoadEdge:(const CDStruct_91f75a7f *)arg1 atA:(_Bool)arg2 routeOffset:(struct PolylineCoordinate)arg3 tile:(id)arg4;
- (id)initWithGEOJunction:(CDStruct_dde70fb6 *)arg1 routeOffset:(struct PolylineCoordinate)arg2 tile:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKLabelNavRoad : NSObject <VKLabelNavFeature>
{
    VKLabelTile *_tile;
    CDStruct_2e21d8bb *_data;
    unsigned long long _vertexIndexA;
    unsigned long long _vertexIndexB;
    CDStruct_dde70fb6 *_junctionA;
    CDStruct_dde70fb6 *_junctionB;
    VKLabelNavJunction *_navJunctionA;
    vector_e20517dc _simplifiedPoints;
    Matrix_8746f91e _direction;
    _Bool _isRoadLabelUnique;
    _Bool _isOnRoute;
    _Bool _isStartOfRoadName;
    _Bool _isInGuidance;
    _Bool _isGuidanceStepStart;
    _Bool _areLabelsDisabled;
    struct PolylineCoordinate _routeOffset;
    float _routeCrossProduct;
    long long _intraRoadPriority;
    double _length;
    NSString *_name;
    NSString *_shieldDisplayGroup;
    NSString *_shieldGroup;
    VKLabelNavRoadLabel *_roadSign;
    VKLabelNavRoadLabel *_roadShield;
    _Bool _areNavStylesInitialized;
    _Bool _hasVisibleSigns;
    _Bool _hasVisibleShields;
    _Bool _suppressRoadSignIfShieldPresent;
}

@property(readonly, nonatomic) _Bool suppressRoadSignIfShieldPresent; // @synthesize suppressRoadSignIfShieldPresent=_suppressRoadSignIfShieldPresent;
@property(readonly, nonatomic) VKLabelNavJunction *navJunctionA; // @synthesize navJunctionA=_navJunctionA;
@property(nonatomic) _Bool isRoadLabelUnique; // @synthesize isRoadLabelUnique=_isRoadLabelUnique;
@property(nonatomic) _Bool areLabelsDisabled; // @synthesize areLabelsDisabled=_areLabelsDisabled;
@property(nonatomic) long long intraRoadPriority; // @synthesize intraRoadPriority=_intraRoadPriority;
@property(readonly, nonatomic) CDStruct_dde70fb6 *junctionB; // @synthesize junctionB=_junctionB;
@property(nonatomic) struct PolylineCoordinate routeOffset; // @synthesize routeOffset=_routeOffset;
@property(nonatomic) float routeCrossProduct; // @synthesize routeCrossProduct=_routeCrossProduct;
@property(nonatomic) _Bool isGuidanceStepStart; // @synthesize isGuidanceStepStart=_isGuidanceStepStart;
@property(nonatomic) _Bool isInGuidance; // @synthesize isInGuidance=_isInGuidance;
@property(nonatomic) _Bool isStartOfRoadName; // @synthesize isStartOfRoadName=_isStartOfRoadName;
@property(nonatomic) _Bool isOnRoute; // @synthesize isOnRoute=_isOnRoute;
@property(nonatomic) Matrix_8746f91e direction; // @synthesize direction=_direction;
@property(readonly, nonatomic) VKLabelTile *tile; // @synthesize tile=_tile;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (id).cxx_construct;
- (void).cxx_destruct;
- (double)length;
- (id)_newLabelWithNavContext:(struct NavContext *)arg1 isShieldLabel:(_Bool)arg2 worldPoint:(struct VKPoint)arg3 alignment:(long long)arg4;
@property(readonly, nonatomic) long long roadSignAlignment;
- (_Bool)_worldPointForRoadOffset:(float)arg1 worldPoint:(struct VKPoint *)arg2;
- (void)_worldRoadPoints:(vector_e20517dc *)arg1;
- (void)appendSimplifiedWorldRoadPoints:(vector_e20517dc *)arg1;
- (void)recreateRoadSignWithAlignment:(long long)arg1 navContext:(struct NavContext *)arg2;
- (void)createLabelWithNavContext:(struct NavContext *)arg1 isShieldLabel:(_Bool)arg2 desiredOffsetDistance:(float)arg3 maxOffsetDistance:(float)arg4 minJunctionDistance:(float)arg5 minRouteDistance:(float)arg6 roadGraph:(id)arg7;
- (_Bool)_findLabelAnchorPoint:(struct VKPoint *)arg1 isShieldLabel:(_Bool)arg2 desiredOffsetDistance:(float)arg3 maxOffsetDistance:(float)arg4 minJunctionDistance:(float)arg5 roadGraph:(id)arg6;
- (float)_findRoadOffsetForDistanceToRay:(float)arg1 rayStart:(struct VKPoint)arg2 rayVector:(Matrix_8746f91e)arg3 roadGraph:(id)arg4;
- (id)labelWithType:(_Bool)arg1;
@property(readonly, nonatomic) NSString *shieldDisplayGroup;
@property(readonly, nonatomic) NSString *shieldGroup;
- (_Bool)hasShield;
- (_Bool)hasVisibleShields;
- (_Bool)hasVisibleSigns;
- (_Bool)matchesRoad:(id)arg1;
- (_Bool)matchesRoadEdge:(const CDStruct_91f75a7f *)arg1;
- (void)getRoadEdge:(CDStruct_91f75a7f *)arg1;
@property(readonly, nonatomic) _Bool isOnewayToJunction;
@property(readonly, nonatomic) _Bool isRamp;
@property(readonly, nonatomic) _Bool isAwayFromRoute;
@property(readonly, nonatomic) int roadClass;
- (id)description;
- (void)prepareStyleVarsWithContext:(struct NavContext *)arg1;
- (void)clearRoadSign;
@property(readonly, nonatomic) const char *cstrName;
- (void)dealloc;
- (id)initWithRoadEdge:(const CDStruct_91f75a7f *)arg1 navJunctionA:(id)arg2 routeOffset:(struct PolylineCoordinate)arg3 tile:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKLabelNavRoadGraph : NSObject
{
    NSMutableSet *_tiles;
    NSMutableSet *_duplicateTiles;
    NSMutableDictionary *_tileDatasByIndex;
    NSMutableArray *_junctions;
    NSMutableArray *_intersections;
    _Bool _oppositeCarriagewayJunctionsValid;
    NSMutableArray *_oppositeCarriagewayJunctions;
    Matrix_8746f91e _unitHeading;
    _Bool _offRouteJunctionsValid;
    Box_3d7e3c2c _offRouteJunctionSelectRect;
    NSMutableArray *_offRouteJunctions;
    struct PolylineCoordinate _routeUserOffset;
    _Bool _routeFeatureMapValid;
    unordered_map_aa048f4b _routeFeatureMap;
    _Bool _simplifiedRouteValid;
    vector_e20517dc _simplifiedRoutePoints;
    unsigned long long _currentRoadStartSimplifiedPointIndex;
    _Bool _screenRouteValid;
    struct vector<RouteSegment, std::__1::allocator<RouteSegment>> _screenRouteSegments;
    unsigned long long _firstPOIAligningRouteSegment;
}

@property(retain, nonatomic) NSMutableArray *junctions; // @synthesize junctions=_junctions;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_nextIntersectionForRoad:(id)arg1;
- (id)nextRoadSegmentForRoad:(id)arg1;
- (id)_findInterTileJunctionForJunction:(id)arg1;
- (id)_junctionForRoadEdge:(const CDStruct_91f75a7f *)arg1 atA:(_Bool)arg2 routeOffset:(struct PolylineCoordinate)arg3 tile:(id)arg4;
- (id)junctionForRoad:(id)arg1 nearJunction:(_Bool)arg2 crossTileEdge:(_Bool)arg3;
- (void)setTiles:(id)arg1;
- (void)startingLabelLayoutWithContext:(struct NavContext *)arg1 routeUserOffset:(struct PolylineCoordinate)arg2;
- (void)routeJunctionsHaveChanged;
- (void)reset;
- (void)dealloc;
- (id)initWithJunctions:(id)arg1;
- (_Bool)isOnScreenRouteBackwardsAtJunction:(id)arg1 navContext:(struct NavContext *)arg2;
- (_Bool)prepareOppositeCarriagewayJunctions;
- (id)oppositeCarriagewayJunctions;
- (unsigned char)computeRoutePositionForPOIAtPixel:(const Matrix_8746f91e *)arg1 currentPosition:(unsigned char)arg2 context:(struct NavContext *)arg3;
- (_Bool)collideRouteWithLabel:(id)arg1 routeCrossProduct:(float *)arg2 context:(struct NavContext *)arg3;
- (void)_transformRouteToScreenWithContext:(struct NavContext *)arg1;
- (void)_updateSimplifiedRoute;
- (_Bool)isPriorRouteCollinearWithRoad:(id)arg1 distance:(float)arg2;
- (void)_findOffRouteJunctions;
- (id)offRouteGraphJunctionsWithNavContext:(struct NavContext *)arg1 maxJunctions:(unsigned long long)arg2 isOnRoute:(_Bool)arg3;
- (void)_updateIntersectionsForDepth:(unsigned long long)arg1;
- (id)junctionListForDepth:(unsigned long long)arg1;
- (unsigned long long)countReadyJunctionLists;
- (void)evaluateDualCarriagewayForJunction:(id)arg1 outputJunctionList:(id)arg2;
- (_Bool)_checkIfDualCarriageWayConnectorRoad:(id)arg1 fromJunction:(id)arg2 toJunction:(id)arg3 checkShields:(_Bool)arg4;
- (id)overpassJunctionForJunction:(id)arg1;
- (void)addRouteRoadEdge:(const struct VKLabelNavRouteRoadEdge *)arg1 atA:(_Bool)arg2 isRouteRefineJunction:(_Bool)arg3 tile:(id)arg4 junctionList:(id)arg5;

@end

__attribute__((visibility("hidden")))
@interface VKLabelNavRoadLabel : NSObject
{
    shared_ptr_338aa11d _label;
    int _navLabelType;
    id <VKLabelNavFeature> _navFeature;
    NSString *_displayGroup;
    long long _alignment;
    float _desiredOffsetDistance;
    unsigned int _displayID;
}

@property(nonatomic) float desiredOffsetDistance; // @synthesize desiredOffsetDistance=_desiredOffsetDistance;
@property(nonatomic) long long alignment; // @synthesize alignment=_alignment;
@property(nonatomic) unsigned int displayID; // @synthesize displayID=_displayID;
@property(readonly, nonatomic) const shared_ptr_338aa11d *label; // @synthesize label=_label;
@property(nonatomic) id <VKLabelNavFeature> navFeature; // @synthesize navFeature=_navFeature;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)description;
- (id)displayGroup;
@property(readonly, nonatomic) _Bool isJunctionLabel;
@property(readonly, nonatomic) _Bool isRoadLabel;
@property(readonly, nonatomic) _Bool isShieldLabel;
- (void)dealloc;
- (id)initWithNavFeature:(id)arg1 label:(const shared_ptr_338aa11d *)arg2 navLabelType:(int)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKLabelNavSupport : NSObject
{
    _Bool _needsLayout;
    _Bool _drawRoadSigns;
    VKPolylineOverlayPainter *_route;
    NSString *_currentLocationText;
    _Bool _isOnRoute;
    struct PolylineCoordinate _routeUserOffset;
    unsigned long long _stepIndex;
    _Bool _checkOnRouteLabelsAlignment;
    _Bool _disableTileParseForOneLayout;
    NSMutableSet *_tiles;
    NSMutableSet *_pendingTiles;
    NSMutableArray *_junctions;
    VKLabelNavRoadGraph *_roadGraph;
    vector_4ea116aa _activeSigns;
    NSMutableArray *_fadingLabels;
    NSMutableDictionary *_visibleLabelsByName;
    NSMutableArray *_visibleLabels;
    unsigned long long _countVisibleRoadSigns;
    unsigned long long _countVisibleOnRouteRoadSigns;
    unsigned long long _maxVisibleRoadSigns;
    unsigned long long _minVisibleOnRouteRoadSigns;
    unsigned long long _maxOnRoadGraphRoadSigns;
    unsigned long long _minVisibleRoadSigns;
    unsigned long long _minVisibleProceedToRouteRoadSigns;
    _Bool _preferRightSideLabelPlacement;
    float _minSignOffsetDistance;
    NSMutableSet *_roadNamesInGuidance;
    NSMutableArray *_guidanceStepInfos;
    NSMutableArray *_routeRoadInfos;
    NSString *_currentRoadName;
    long long _currentRoadNameIndex;
    NSString *_currentShieldGroup;
    _Bool _checkIfRouteSubrangeChanged;
    _Bool _useRouteSubrange;
    struct PolylineCoordinate _routeSubrangeStart;
    struct PolylineCoordinate _routeSubrangeEnd;
}

@property(retain, nonatomic) NSString *currentShieldGroup; // @synthesize currentShieldGroup=_currentShieldGroup;
@property(retain, nonatomic) NSString *currentRoadName; // @synthesize currentRoadName=_currentRoadName;
@property(readonly, nonatomic) const vector_4ea116aa *activeSigns; // @synthesize activeSigns=_activeSigns;
@property(retain, nonatomic) NSString *currentLocationText; // @synthesize currentLocationText=_currentLocationText;
@property(nonatomic) struct PolylineCoordinate routeUserOffset; // @synthesize routeUserOffset=_routeUserOffset;
@property(nonatomic) _Bool drawRoadSigns; // @synthesize drawRoadSigns=_drawRoadSigns;
@property(retain, nonatomic) VKPolylineOverlayPainter *route; // @synthesize route=_route;
@property(readonly, nonatomic) _Bool needsLayout; // @synthesize needsLayout=_needsLayout;
- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned char)computeRoutePositionForPOIAtPixel:(const Matrix_8746f91e *)arg1 currentPosition:(unsigned char)arg2 context:(struct NavContext *)arg3;
- (_Bool)_updateActiveRouteRange;
- (_Bool)_findRouteOverlappingJunctionFrom:(long long)arg1 routeJunctions:(vector_682a2c99 *)arg2 lookBackward:(_Bool)arg3 firstOverlap:(long long *)arg4 secondOverlap:(long long *)arg5;
- (void)_updateCurrentRoadInfo;
- (void)_initalizeCurrentRoadInfo;
- (void)_updatePreferredLabelPlacements;
- (void)_updateRoadsInGuidance;
- (void)_updateRoadStarts;
- (void)_updateUniqueOffRouteRoads;
- (_Bool)_addJunctionsForTile:(id)arg1;
- (void)_addLabelsForJunctions:(id)arg1 withContext:(struct NavContext *)arg2 maxVisibleLabels:(unsigned long long)arg3 minOnRouteVisibleLabels:(unsigned long long)arg4 useAllJunctions:(_Bool)arg5 placeShieldsFrontToBack:(_Bool)arg6;
- (void)_addLabelsAtJunctions:(id)arg1 withContext:(struct NavContext *)arg2 maxVisibleLabels:(unsigned long long)arg3 minOnRouteVisibleLabels:(unsigned long long)arg4;
- (void)layoutWithNavContext:(struct NavContext *)arg1;
- (_Bool)_collideLabel:(id)arg1 activeLabel:(id)arg2 labelsToRemove:(id)arg3;
- (void)_tryAddLabel:(id)arg1 navContext:(struct NavContext *)arg2 labelCollisionEnabled:(_Bool)arg3;
- (void)_tryAddRoadSignForRoad:(id)arg1 isShield:(_Bool)arg2 navContext:(struct NavContext *)arg3 labelCollisionEnabled:(_Bool)arg4;
- (void)_createOrUpdateLabelForRoad:(id)arg1 isShield:(_Bool)arg2 navContext:(struct NavContext *)arg3;
- (void)_tryAddRoadSignForJunction:(id)arg1 navContext:(struct NavContext *)arg2 labelCollisionEnabled:(_Bool)arg3;
- (void)grabTilesFromScene:(id)arg1;
- (void)_refreshGuidanceRoadNames;
- (void)_reloadRouteJunctions;
- (void)clearSceneIsMemoryWarning:(_Bool)arg1;
- (_Bool)isNavMode;
- (void)dealloc;
- (void)setStyleManager:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKLabelNavTileData : NSObject
{
    VKLabelTile *_tile;
    NSMapTable *_geoJunctionToJunctionMap;
    NSMutableArray *_tileEdgeJunctions;
    _Bool _foundTileEdgeJunctions;
    _Bool _oppositeCarriagewayJunctionsValid;
    NSMutableArray *_oppositeCarriagewayJunctions;
    struct vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo>> _junctionInfos;
}

@property(readonly, retain, nonatomic) NSMutableArray *oppositeCarriagewayJunctions; // @synthesize oppositeCarriagewayJunctions=_oppositeCarriagewayJunctions;
@property(nonatomic) _Bool oppositeCarriagewayJunctionsValid; // @synthesize oppositeCarriagewayJunctionsValid=_oppositeCarriagewayJunctionsValid;
@property(readonly, retain, nonatomic) VKLabelTile *tile; // @synthesize tile=_tile;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)findOppositeCarriagewayJunctionsWithRouteFeatures:(unordered_map_aa048f4b *)arg1 distanceThreshold:(double)arg2;
- (void)appendNavJunctionsInWorldRect:(const Box_3d7e3c2c *)arg1 junctions:(id)arg2;
- (void)initializeJunctionInfos;
- (id)findTileEdgeJunctionAtCoordinate:(Matrix_8746f91e)arg1;
- (void)_findTileEdgeJunctions;
- (void)addJunction:(id)arg1;
- (id)junctionAtCoordinate:(Matrix_8746f91e)arg1;
- (id)junctionForGeoJunction:(CDStruct_dde70fb6 *)arg1;
- (void)dealloc;
- (id)initWithTile:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKLabelTile : VKTile
{
    shared_ptr_9eab1d88 _labelTile;
}

@property(readonly, nonatomic) shared_ptr_9eab1d88 labelTile; // @synthesize labelTile=_labelTile;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)description;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 tileType:(unsigned char)arg3 labelManager:(const shared_ptr_dd1f7020 *)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKLabelTileSource : VKTileSetBackedTileSource
{
    shared_ptr_dd1f7020 _labelManager;
    _Bool _localizeLabels;
    long long _labelScaleFactor;
}

@property(nonatomic) long long labelScaleFactor; // @synthesize labelScaleFactor=_labelScaleFactor;
@property(nonatomic) _Bool localizeLabels; // @synthesize localizeLabels=_localizeLabels;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (unsigned char)_labelTileType;
- (long long)defaultMaximumZoomLevel;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
- (void)dealloc;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3 labelManager:(const shared_ptr_dd1f7020 *)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKRealisticPolygonMaker : NSObject
{
    NSMutableArray *_polygons;
    struct unordered_map<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>>>> _styleQueryForPolygon;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)generateIndexedTrianglesWithHandler:(CDUnknownBlockType)arg1;
- (void)addPolygonForPoints:(const Matrix_8746f91e *)arg1 pointCount:(unsigned long long)arg2 withStyleQuery:(shared_ptr_6e6219d6)arg3;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKLandPolygonMaker : VKRealisticPolygonMaker
{
}

- (void)generateIndexedTrianglesWithHandler:(CDUnknownBlockType)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKLandmarkIconGenerator : NSObject
{
}

+ (id)sharedGenerator;
- (id)newIconWithMask:(struct CGImage *)arg1 outlineMask:(struct CGImage *)arg2 style:(CDStruct_44d855de *)arg3 scale:(double)arg4;
- (id)keyForName:(id)arg1 style:(CDStruct_44d855de *)arg2 size:(long long)arg3;
- (_Bool)canHandleStyle:(CDStruct_44d855de *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKLayoutContext : NSObject
{
    VKCamera *_camera;
    VKCamera *_defaultTrackingCamera;
    id <MDRenderTarget> _canvas;
    _Bool _forceLayout;
    _Bool _iconsShouldAlignToPixels;
    float _styleZAdjust;
    _Bool _preloadOnly;
    VKCamera *_transitionCamera;
    long long _transitionMapMode;
    double _timestamp;
    struct VKEdgeInsets _labelEdgeInsets;
    int _styleZ;
    float _z;
    _Bool _hasOccluders;
    _Bool _hasMovingOccluders;
    VKViewTransform *_viewTransform;
    VKAnchorContext *_anchorContext;
    shared_ptr_78ff922b _unitMesh;
    shared_ptr_7c9fbd8a _unitTextureMesh;
    struct StencilManager _stencilManager;
    shared_ptr_807ec9ac _device;
    struct Loader _loader;
}

@property(nonatomic) struct VKEdgeInsets labelEdgeInsets; // @synthesize labelEdgeInsets=_labelEdgeInsets;
@property(nonatomic) double timestamp; // @synthesize timestamp=_timestamp;
@property(nonatomic) long long transitionMapMode; // @synthesize transitionMapMode=_transitionMapMode;
@property(retain, nonatomic) VKCamera *transitionCamera; // @synthesize transitionCamera=_transitionCamera;
@property(retain, nonatomic) VKAnchorContext *anchorContext; // @synthesize anchorContext=_anchorContext;
@property(retain, nonatomic) VKViewTransform *viewTransform; // @synthesize viewTransform=_viewTransform;
@property(retain, nonatomic) VKCamera *defaultTrackingCamera; // @synthesize defaultTrackingCamera=_defaultTrackingCamera;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct DebugConsole *)debugConsoleForId:(int)arg1;
@property(readonly, nonatomic) unsigned char stencilEnd;
@property(readonly, nonatomic) unsigned char stencilStart;
@property(readonly, nonatomic) _Bool hasOverlayInStencil;
- (void)markStencilAsDirty;
- (unsigned char)reserveStencilValues:(unsigned char)arg1 clearItem:(struct ClearItem **)arg2 fromTop:(_Bool)arg3;
- (unsigned char)reserveStencilValues:(unsigned char)arg1 clearItem:(struct ClearItem **)arg2;
- (void)startFrameWithTimeStamp:(double)arg1;
- (shared_ptr_7c9fbd8a)unitTextureMesh;
- (shared_ptr_78ff922b)unitMesh;
- (void)dealloc;
- (void)canvasDidChange;
- (id)initWithCanvas:(id)arg1 camera:(id)arg2 device:(const shared_ptr_807ec9ac *)arg3;
- (void)clearCanvas;
- (struct Loader *)loader;
- (shared_ptr_807ec9ac)device;

@end

__attribute__((visibility("hidden")))
@interface VKLineDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
- (Matrix_5173352a)outerGlowColorAtZoom:(float)arg1;
- (float)outerGlowRadiusAtZoom:(float)arg1;
- (Matrix_5173352a)innerGlowColorAtZoom:(float)arg1;
- (float)innerGlowRadiusAtZoom:(float)arg1;
- (Matrix_5173352a)dropShadowColorAtZoom:(float)arg1;
- (Matrix_8746f91e)dropShadowOffsetAtZoom:(float)arg1;
- (_Bool)hasDropShadowAtZoom:(float)arg1;
- (float)dropShadowWidthAtZoom:(float)arg1;
- (Matrix_5173352a)insetShadowColorAtZoom:(float)arg1;
- (float)insetShadowAngleAtZoom:(float)arg1;
- (float)insetShadowHeightAtZoom:(float)arg1;
- (_Bool)hasStrokeDashAtZoom:(int)arg1;
- (_Bool)hasFillDashAtZoom:(int)arg1;
- (unsigned long long)strokeDashPatternAtZoom:(float)arg1;
- (unsigned long long)fillDashPatternAtZoom:(float)arg1;
- (_Bool)hasDashAtAnyZ;

@end

__attribute__((visibility("hidden")))
@interface VKMapAnnotationTrackingCameraController : VKAnnotationTrackingCameraController
{
}

- (void)_rotateToHeadingAnimated:(_Bool)arg1 duration:(double)arg2;
- (void)_goToAnnotationAnimated:(_Bool)arg1 duration:(double)arg2 isInitial:(_Bool)arg3;
- (double)_minTrackingCameraDistance;
- (double)_zoomLevelForCameraPosition:(struct VKPoint)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKMapCameraController : VKScreenCameraController <VKTrackingCameraControllerDelegate, VKInteractiveCameraController>
{
    VKMapModel *_mapModel;
    VKMapCanvas *_mapCanvas;
    VKAnimation *_horizontalOffsetAnimation;
    VKTrackingCameraController *_trackingCameraController;
    double _minDistanceToGroundAlongForwardVector;
    double _maxDistanceToGroundAlongForwardVector;
    double _canonicalSkyHeight;
    double _tracePlaybackSpeedMultiplier;
    _Bool _shouldLimitTrackingCameraHeight;
    int _trackingCameraPanStyle;
    double _userZoomFocusStyleGroundspanMeters;
    double _userZoomFocusStyleMinGroundspanMeters;
    double _userZoomFocusStyleMaxGroundspanMeters;
    double _cameraHorizontalOffset;
    double _finalYaw;
    double _finalPitch;
    float _navigationPuckSize;
    _Bool _pinching;
    struct CGPoint _pinchStartFocusPoint;
    _Bool _pitching;
    struct CGPoint _pitchStartFocusPoint;
    _Bool _panning;
}

@property(nonatomic) _Bool shouldLimitTrackingCameraHeight; // @synthesize shouldLimitTrackingCameraHeight=_shouldLimitTrackingCameraHeight;
@property(nonatomic) float navigationPuckSize; // @synthesize navigationPuckSize=_navigationPuckSize;
@property(nonatomic) int trackingCameraPanStyle; // @synthesize trackingCameraPanStyle=_trackingCameraPanStyle;
@property(nonatomic) double tracePlaybackSpeedMultiplier; // @synthesize tracePlaybackSpeedMultiplier=_tracePlaybackSpeedMultiplier;
@property(nonatomic) double canonicalSkyHeight; // @synthesize canonicalSkyHeight=_canonicalSkyHeight;
@property(nonatomic) VKMapCanvas *mapCanvas; // @synthesize mapCanvas=_mapCanvas;
@property(retain, nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
- (id).cxx_construct;
- (void)updatedMatchedSection:(fast_shared_ptr_502c59d0)arg1 index:(struct PolylineCoordinate *)arg2;
- (void)edgeInsetsDidEndAnimating;
- (void)edgeInsetsWillBeginAnimating;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (double)altitude;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
@property(readonly, nonatomic) CDStruct_071ac149 centerCoordinate;
- (void)setCenterCoordinate:(CDStruct_071ac149)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(readonly, nonatomic) GEOMapRegion *mapRegion;
- (id)_mapRegionIgnoringFarAmount:(double)arg1;
- (void)_animateToPosition:(struct VKPoint)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 timingCurve:(CDUnknownBlockType)arg5 completion:(CDUnknownBlockType)arg6;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (CDStruct_c3b9c2ee)_mercatorCenterCoordinateForMapRegion:(id)arg1;
@property(readonly, nonatomic) double pitch;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) double presentationYaw;
@property(nonatomic) double userZoomFocusStyleMaxGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleMinGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleGroundspanMeters;
- (void)canvasFrameDidChange;
- (void)trackingCameraController:(id)arg1 updatedStartAnimationTargetPosition:(struct VKPoint)arg2 orientation:(const CDStruct_aa5aacbc *)arg3;
- (void)updateCameraZBounds;
- (_Bool)updateCameraToPositionOrientationLimits;
- (_Bool)currentZoomLevelAllowsRotation;
- (_Bool)clampZoomLevelIfNecessary;
- (void)setGesturing:(_Bool)arg1;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (_Bool)canEnter3DModeNoUpdate;
- (_Bool)canEnter3DMode;
- (_Bool)isFullyPitched;
- (_Bool)isPitched;
@property(nonatomic) _Bool allowDatelineWraparound;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint)arg2;
- (struct CGPoint)_scaledScreenPointForPoint:(struct CGPoint)arg1;
- (struct CGPoint)_centerScreenPoint;
@property(nonatomic) double trackingZoomScale;
- (_Bool)trackingCanZoomOut;
- (_Bool)trackingCanZoomIn;
- (_Bool)isAtDefaultTrackingZoomScale;
- (_Bool)isTracking;
- (void)clampPitch:(double *)arg1 yaw:(double *)arg2 atTargetPositionZ:(double)arg3;
- (_Bool)snapMapIfNecessary:(const struct VKPoint *)arg1 animated:(_Bool)arg2;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(CDStruct_b926a728 *)arg2;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
- (void)startCameraMotionAnimated:(_Bool)arg1 pounceCompletionHandler:(CDUnknownBlockType)arg2;
- (void)pauseCameraMotion;
- (void)stopCameraMotion;
- (void)updateCameraContext:(id)arg1;
- (_Bool)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (void)tapZoom:(struct CGPoint)arg1 levels:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)pinch:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)pan:(struct CGPoint)arg1;
- (void)pitch:(struct CGPoint)arg1 translation:(double)arg2;
- (void)rotate:(double)arg1 atScreenPoint:(struct CGPoint)arg2;
- (void)zoom:(double)arg1 withPoint:(struct VKPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)zoomToLevel:(double)arg1 withPoint:(struct VKPoint)arg2;
- (void)rotateToYaw:(double)arg1 withPoint:(const struct VKPoint *)arg2 animated:(_Bool)arg3;
- (void)rotateToPitch:(double)arg1 withPoint:(const struct VKPoint *)arg2 preserveAltitude:(_Bool)arg3 animated:(_Bool)arg4 exaggerate:(_Bool)arg5;
- (float)maxPitchForNormalizedZoomLevel:(float)arg1;
- (float)idealPitchForNormalizedZoomLevel:(float)arg1;
- (float)minimumPitchForNormalizedZoomLevel:(float)arg1;
- (float)normalizedZoomLevelAdjustmentForTileSize:(long long)arg1;
- (float)currentTopDownMinimumNormalizedZoomLevel;
- (float)currentMinimumNormalizedZoomLevel;
- (float)currentMaximumNormalizedZoomLevel;
- (long long)maximumNormalizedZoomLevel;
- (long long)minimumNormalizedZoomLevel;
- (float)currentStyleZoomLevel;
- (float)currentNormalizedZoomLevel;
- (float)currentDisplayZoomLevel;
- (long long)tileSize;
- (struct VKPoint)groundPointFromScreenPoint:(struct CGPoint)arg1;
- (void)canvasDidLayout;
- (id)detailedDescription;
- (void)dealloc;
- (id)init;
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1;

// Remaining properties
@property(nonatomic) long long annotationTrackingZoomStyle;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKMapCanvas : VKScreenCanvas <VKMapModelDelegate, VKOverlayContainerRouteDelegate, VKInteractiveMap>
{
    VKMapModel *_map;
    VKMapCameraController *_cameraController;
    id <VKInteractiveMapDelegate> _delegate;
    struct CGSize _lastCanvasSize;
    VKCamera *_defaultTrackingCamera;
    float _lastValidCanvasSizeZoomLevel;
    _Bool _hasLastValidCanvasSizeZoomLevel;
}

+ (_Bool)supportsMapType:(long long)arg1 scale:(int)arg2;
@property(retain, nonatomic) VKCamera *defaultTrackingCamera; // @synthesize defaultTrackingCamera=_defaultTrackingCamera;
@property(nonatomic) id <VKInteractiveMapDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) VKMapModel *map; // @synthesize map=_map;
- (id).cxx_construct;
- (void)setApplicationState:(unsigned int)arg1;
- (void)overlayContainer:(id)arg1 updatedMatchedSection:(fast_shared_ptr_502c59d0)arg2 index:(struct PolylineCoordinate *)arg3;
- (void)edgeInsetsDidEndAnimating;
- (void)edgeInsetsWillBeginAnimating;
- (void)removeExternalAnchor:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
@property(readonly, nonatomic) VKAnchorWrapper *externalAnchors;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
@property(nonatomic) double userZoomFocusStyleMaxGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleMinGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleGroundspanMeters;
@property(nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(CDStruct_b926a728 *)arg2;
@property(nonatomic) _Bool debugDynamicMapModesEnabled;
- (void)clearScene;
- (void)debugHighlightLabelAtPoint:(struct CGPoint)arg1;
- (void)goToTileX:(int)arg1 Y:(int)arg2 Z:(int)arg3 tileSize:(int)arg4;
- (void)mapModelDidUpdateMinMaxZoomLevel:(id)arg1;
- (void)mapModel:(id)arg1 didUpdateContainsOverlay:(_Bool)arg2;
- (void)mapModel:(id)arg1 didUpdateNavigationPuckSize:(float)arg2;
- (void)mapModel:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (double)mapModelZoomScale:(id)arg1;
- (_Bool)mapModelInNav:(id)arg1;
- (_Bool)mapModelInNavAtDefaultZoom:(id)arg1;
- (void)mapModelDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapModelDidFinishLoadingTiles:(id)arg1;
- (void)mapModelDidStartLoadingTiles:(id)arg1;
- (void)mapModelDidBecomePartiallyDrawn:(id)arg1;
- (void)mapModelDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(_Bool)arg2;
- (void)mapModelWillBecomFullyDrawn:(id)arg1;
- (id)mapModel:(id)arg1 painterForOverlay:(id)arg2;
- (void)mapModel:(id)arg1 needsPanByOffset:(struct CGPoint)arg2 relativeToScreenPoint:(struct CGPoint)arg3 animated:(_Bool)arg4 duration:(double)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)mapModel:(id)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (_Bool)currentZoomLevelAllowsRotation;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)stopSnappingAnimations;
- (_Bool)isPointValidForGesturing:(struct CGPoint)arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint)arg2;
- (_Bool)trackingCanZoomOut;
- (_Bool)trackingCanZoomIn;
- (void)cameraController:(id)arg1 canZoomOutDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 canZoomInDidChange:(_Bool)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(_Bool)arg2;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
@property(nonatomic) _Bool showsBuildings;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
@property(nonatomic) _Bool labelMarkerSelectionEnabled;
- (void)deselectLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint)arg1 avoidCurrent:(_Bool)arg2;
- (struct VKPoint)screenPointForPoint:(struct CGPoint)arg1;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
- (_Bool)shouldHideOffscreenSelectedAnnotation;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (CDUnknownBlockType)annotationMarkerDeselectionCallback;
- (id)selectedAnnotationMarker;
- (id)labelMarkers;
- (id)annotationMarkers;
- (void)setAnnotationMarkerDeselectionCallback:(CDUnknownBlockType)arg1;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)removeAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(_Bool)arg2;
- (_Bool)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
@property(retain, nonatomic) id <GEORoutePreloadSession> routePreloadSession;
- (void)preloadNavigationSceneResourcesWithDevice:(const shared_ptr_807ec9ac *)arg1;
@property(retain, nonatomic) VKPolylineOverlayPainter *focusedLabelsPolylinePainter;
- (void)setCurrentLocationText:(id)arg1;
@property(nonatomic) struct PolylineCoordinate routeUserOffset;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (id)persistentOverlays;
- (id)overlays;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (id)selectedLabelMarker;
- (id)navTileSource;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
@property(readonly, nonatomic, getter=isTrackingHeading) _Bool trackingHeading;
@property(readonly, nonatomic) id <VKTrackableAnnotation> trackingAnnotation;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) _Bool animatingToTrackAnnotation;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
@property(nonatomic) long long annotationTrackingZoomStyle;
@property(nonatomic) double trackingZoomScale;
- (void)cameraController:(id)arg1 pouncingToCameraPosition:(struct VKPoint)arg2 orientation:(const CDStruct_aa5aacbc *)arg3;
@property(nonatomic) int trackingCameraPanStyle;
- (void)setShouldLimitTrackingCameraHeight:(_Bool)arg1;
- (void)transitionToTracking:(_Bool)arg1 mapMode:(long long)arg2 pounceCompletionHandler:(CDUnknownBlockType)arg3;
- (void)pauseTracking;
- (void)stopTracking;
- (void)updateCameraContext:(id)arg1;
- (struct CGPoint)convertCoordinateToCameraModelPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertCoordinateToPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertMapPointToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToCoordinate:(struct CGPoint)arg1;
- (CDStruct_c3b9c2ee)convertPointToMapPoint:(struct CGPoint)arg1;
- (void)updateCameraForFrameResize;
- (void)forceSceneLoad;
- (void)gglWillDrawWithTimestamp;
- (void)_updateViewTransform;
- (_Bool)currentSceneRequiresMSAA;
- (id)consoleString:(_Bool)arg1;
- (struct VKEdgeInsets)edgeInsets;
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1;
- (id)detailedDescription;
- (void)dealloc;
- (void)clearSceneIsEffectivelyHidden:(_Bool)arg1;
- (void)setHidden:(_Bool)arg1;
- (id)initShouldRasterize:(_Bool)arg1 contentScale:(double)arg2 target:(id)arg3 device:(const shared_ptr_807ec9ac *)arg4 inBackground:(_Bool)arg5 locale:(id)arg6;
- (void)setCanonicalSkyHeight:(double)arg1;
- (_Bool)canEnter3DMode;
@property(readonly, nonatomic, getter=isFullyPitched) _Bool fullyPitched;
@property(readonly, nonatomic, getter=isPitched) _Bool pitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)resetTileContainers;
- (void)transferCamera:(id)arg1;
- (struct CGPoint)_centerScreenPoint;
@property(nonatomic) _Bool allowDatelineWraparound;
@property(readonly, nonatomic) double altitude;
@property(nonatomic) CDStruct_071ac149 centerCoordinate;
- (void)setCenterCoordinate:(CDStruct_071ac149)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(retain, nonatomic) GEOMapRegion *mapRegion;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
- (void)stopRegionAnimation;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double pitch;
@property(nonatomic) _Bool shouldLoadMapMargin;
@property(nonatomic) _Bool shouldLoadFallbackTiles;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4;
- (void)setMapRegion:(id)arg1 animated:(_Bool)arg2;
- (void)setTargetDisplay:(long long)arg1;
- (long long)targetDisplay;
- (void)setContentsScale:(double)arg1;
- (void)reloadStylesheet;
- (void)setStylesheetName:(id)arg1;
@property(retain, nonatomic) VKStyleManager *styleManager;
@property(nonatomic) _Bool dynamicMapModesEnabled;
- (void)setDesiredMapMode:(long long)arg1 immediate:(_Bool)arg2;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double maximumZoomLevel;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double minimumZoomLevel;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (double)currentZoomLevel;
- (_Bool)canZoomOutForTileSize:(long long)arg1;
- (_Bool)canZoomInForTileSize:(long long)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)setStylesheetMapDisplayStyle:(unsigned long long)arg1;
- (void)stylesheetAnimationDidEnd:(_Bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned long long)arg1 toStyle:(unsigned long long)arg2;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(unsigned long long)arg2 setupHandler:(CDUnknownBlockType)arg3;
@property(nonatomic) long long mapType;
- (void)setNeedsDisplay;
@property(nonatomic) _Bool staysCenteredDuringRotation;
@property(nonatomic) _Bool isPitchable;
@property(nonatomic) _Bool staysCenteredDuringPinch;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
@property(readonly, nonatomic, getter=isFullyDrawn) _Bool fullyDrawn;
@property(nonatomic) _Bool trafficEnabled;
- (_Bool)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
@property(readonly, nonatomic) NSArray *visibleTileSets;
- (void)resetRenderQueue:(shared_ptr_06328420)arg1;
- (void)_resetMaximumZoomLevel;
- (void)_setMaximumZoomLevel:(double)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKMapMatch : NSObject
{
    CDStruct_2e21d8bb *roadFeature;
    NSString *featureName;
    CDStruct_2c43369c coordinateOnFeature;
    double courseOnFeature;
    float distanceFromJunction;
    float junctionRadius;
    float roadWidth;
}

@property(readonly, nonatomic) float roadWidth; // @synthesize roadWidth;
@property(readonly, nonatomic) float junctionRadius; // @synthesize junctionRadius;
@property(readonly, nonatomic) float distanceFromJunction; // @synthesize distanceFromJunction;
@property(readonly, nonatomic) double courseOnFeature; // @synthesize courseOnFeature;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinateOnFeature; // @synthesize coordinateOnFeature;
@property(readonly, nonatomic) NSString *featureName; // @synthesize featureName;
@property(readonly, nonatomic) CDStruct_2e21d8bb *roadFeature; // @synthesize roadFeature;
- (id).cxx_construct;
- (id)description;
- (void)dealloc;
- (id)initWithGEORoadFeature:(CDStruct_2e21d8bb *)arg1 pointOnFeature:(struct VKPoint)arg2 courseOnFeature:(float)arg3 distanceFromJunction:(float)arg4 junctionRadius:(float)arg5 roadWidth:(float)arg6;

@end

@interface VKMapMatcher : NSObject <GEOMapAccessRestrictions>
{
    GEOMapAccess *_map;
    id <GEORoutePreloadSession> _routePreloader;
}

+ (id)mapMatcherOfType:(id)arg1;
@property(retain, nonatomic) id <GEORoutePreloadSession> routePreloader; // @synthesize routePreloader=_routePreloader;
- (id)matchLocation:(id)arg1 transportType:(int)arg2;
@property(readonly, nonatomic) _Bool allowsNetworkTileLoad;
- (id)tilesAround:(CDStruct_c3b9c2ee)arg1 radius:(double)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKMapModel : VKModelObject <VKOverlayContainerDelegate, VKLabelModelDelegate, GEOResourceManifestTileGroupObserver, VKTileProviderClient, VKPolylineGroupOverlayObserver>
{
    unsigned long long _mapPurpose;
    unsigned int _tileGroupIdentifier;
    NSLocale *_locale;
    long long _tileSize;
    VKTileProvider *_tileProviders[3];
    VKTileProvider *_rasterOverlayProvider[2];
    long long _mapMode;
    long long _desiredMapMode;
    _Bool _transitioningToNav;
    _Bool _activeMapLayers[3][34];
    NSMapTable *_layerToSourceMaps[3];
    VKTrafficTileSource *_trafficSource;
    VKOverlayTileSource *_overlayTileSource;
    VKOverlayTileSource *_realisticOverlayTileSource;
    VKRasterOverlayTileSource *_rasterOverlayTileSource[2];
    VKGridModel *_gridModel;
    VKSkyModel *_skyModel;
    VKLabelModel *_labelModel;
    VKRasterMapModel *_rasterModel;
    VKHybridRasterMapModel *_hybridRasterModel;
    VKRasterMapModel *_standardRasterModel;
    VKRiverMapModel *_riverLineModel;
    VKRasterTrafficMapModel *_rasterTrafficModel;
    VKPolygonMapModel *_polygonModel;
    VKRoadMapModel *_roadModel;
    VKRoadMapModel *_hybridRoadModel;
    VKRoadTrafficMapModel *_roadTrafficModel;
    VKRealisticMapModel *_realisticModel;
    VKBuildingFootprintMapModel *_buildingFootprintModel;
    VKAnnotationModel *_annotationModel;
    VKOverlayContainerModel *_overlayContainerModel;
    VKRasterOverlayMapModel *_rasterOverlayModel[2];
    VKDebugModel *_debugModel;
    NSMapTable *_tileSources;
    NSMutableArray *_drawOrder;
    NSMutableArray *_mapLayerSubmodels;
    NSMutableArray *_mapTileSubmodels;
    VKStyleManager *_activeStyleManager;
    VKStyleManager *_defaultStyleManager;
    VKStyleManager *_hybridStyleManager;
    VKStyleManager *_satelliteStyleManager;
    double _zoomLevel;
    long long _mapType;
    id <VKMapModelDelegate> _delegate;
    id <GEORoutePreloadSession> _routePreloadSession;
    _Bool _dynamicMapModesEnabled;
    _Bool _debugDynamicMapModesEnabled;
    _Bool _buildingsAreVisible;
    _Bool _showsBuildings;
    _Bool _fullyDrawn;
    _Bool _shouldNotifyFullyDrawn;
    _Bool _hasFailedTile;
    _Bool _trafficEnabled;
    _Bool _shouldRasterize;
    long long _loadingCount;
    double _contentScale;
    long long _targetDisplay;
    double _lodBias;
    _Bool _disableRoads;
    _Bool _disableLabels;
    _Bool _disablePolygons;
    _Bool _disableBuildingFootprints;
    _Bool _disableRasters;
    _Bool _disableGrid;
    Matrix_5173352a _clearColor;
    VKMapRasterizer *_rasterizer;
    VKRasterMapModel *_rasterViewer;
    int _annotationMarkerStyle;
    _Bool _limitingNavCameraHeight;
    NSMutableSet *_blockingStylesheetObservers;
    double _styleTransitionProgress;
    NSMutableArray *_externalAnchors;
    double _forcedMaxZoomLevel;
    VKAnimation *_modeTransitionAnimation;
    _Bool _disableRoadClass[9];
    id <VKMapModeObserver> _mapModeObserver;
    VKSharedResources *_sharedResources;
    float _navigationPuckSize;
    struct ClearItem _clearItem;
    GEOFeatureStyleAttributes *_mapFeatureStyleAttributes;
    shared_ptr_6e6219d6 _styleQuery;
    int _metroArea;
    _Bool _forceMapDrawStyleUpdate;
    NSMutableSet *_polylineOverlays;
    VKPolylineOverlay *_selectedPolyline;
}

+ (unsigned long long)numberOfRoadClasses;
+ (const char *)nameForRoadClass:(int)arg1;
@property(nonatomic) _Bool limitingNavCameraHeight; // @synthesize limitingNavCameraHeight=_limitingNavCameraHeight;
@property(nonatomic) float navigationPuckSize; // @synthesize navigationPuckSize=_navigationPuckSize;
@property(readonly, nonatomic) VKSharedResources *sharedResources; // @synthesize sharedResources=_sharedResources;
@property(nonatomic) _Bool showsBuildings; // @synthesize showsBuildings=_showsBuildings;
@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(nonatomic, getter=isTrafficEnabled) _Bool trafficEnabled; // @synthesize trafficEnabled=_trafficEnabled;
@property(readonly, nonatomic) _Bool buildingsAreVisible; // @synthesize buildingsAreVisible=_buildingsAreVisible;
@property(nonatomic) _Bool debugDynamicMapModesEnabled; // @synthesize debugDynamicMapModesEnabled=_debugDynamicMapModesEnabled;
@property(nonatomic) _Bool dynamicMapModesEnabled; // @synthesize dynamicMapModesEnabled=_dynamicMapModesEnabled;
@property(retain, nonatomic) VKStyleManager *styleManager; // @synthesize styleManager=_activeStyleManager;
@property(nonatomic) id <VKMapModelDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) VKBuildingFootprintMapModel *buildingFootprintModel; // @synthesize buildingFootprintModel=_buildingFootprintModel;
@property(readonly, nonatomic) long long currentMapMode; // @synthesize currentMapMode=_mapMode;
@property(nonatomic) long long mapType; // @synthesize mapType=_mapType;
@property(nonatomic) Matrix_5173352a clearColor; // @synthesize clearColor=_clearColor;
@property(nonatomic) _Bool disableGrid; // @synthesize disableGrid=_disableGrid;
@property(nonatomic) _Bool disableRasters; // @synthesize disableRasters=_disableRasters;
@property(nonatomic) _Bool disableBuildingFootprints; // @synthesize disableBuildingFootprints=_disableBuildingFootprints;
@property(nonatomic) _Bool disablePolygons; // @synthesize disablePolygons=_disablePolygons;
@property(nonatomic) _Bool disableLabels; // @synthesize disableLabels=_disableLabels;
@property(nonatomic) _Bool disableRoads; // @synthesize disableRoads=_disableRoads;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)setApplicationState:(unsigned int)arg1;
- (void)polylineGroup:(id)arg1 didSelectPolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didRemovePolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didAddPolyline:(id)arg2;
- (void)resetTileContainers;
- (id)labelDebugString;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint)arg1 viewTransform:(id)arg2;
- (void)removeExternalAnchor:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
- (id)externalAnchors;
@property(retain, nonatomic) id <GEORoutePreloadSession> routePreloadSession;
@property(nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
@property(retain, nonatomic) VKPolylineOverlayPainter *focusedLabelsPolylinePainter;
- (void)setCurrentLocationText:(id)arg1;
@property(nonatomic) struct PolylineCoordinate routeUserOffset;
- (void)labelModel:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (id)labelModel:(id)arg1 mapTileForTile:(id)arg2 layer:(unsigned long long)arg3;
- (void)_updateOverlayTileSource;
- (id)overlayContainer:(id)arg1 roadTileForTile:(id)arg2;
- (void)overlayContainer:(id)arg1 showingRouteInStandardModeDidChange:(_Bool)arg2;
- (_Bool)overlayContainerIsInRealisticMode:(id)arg1;
- (id)overlayContainer:(id)arg1 painterForOverlay:(id)arg2;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
@property(readonly, nonatomic) NSSet *persistentOverlays;
@property(readonly, nonatomic) NSArray *overlays;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)_updateTileExclusionAreas;
- (id)_rasterOverlayTileSourceForLevel:(unsigned long long)arg1;
@property(readonly, nonatomic) VKAnnotationMarker *selectedAnnotationMarker;
@property(nonatomic) _Bool labelMarkerSelectionEnabled;
@property(readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
- (void)deselectLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkers;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct VKPoint)arg1 avoidCurrent:(_Bool)arg2 canvasSize:(struct CGSize)arg3;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (CDUnknownBlockType)annotationMarkerDeselectionCallback;
- (void)setAnnotationMarkerDeselectionCallback:(CDUnknownBlockType)arg1;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)removeAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(_Bool)arg2;
- (id)annotationMarkers;
- (void)addSubmodel:(id)arg1;
@property(readonly, nonatomic) _Bool isFullyDrawn;
- (void)didStopLoadingTilesWithError:(id)arg1;
- (void)willStartLoadingTiles;
- (void)updateRasterOverlayProviders:(id)arg1 withContext:(id)arg2;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)updateMapDrawStyleWithContext:(id)arg1;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (void)tileProviderNeedsUpdate:(id)arg1;
- (_Bool)tileProviderMayUseNetwork:(id)arg1;
- (void)_transitionFromMode:(long long)arg1 toMode:(long long)arg2 animated:(_Bool)arg3;
- (void)_updateZoomLevel:(id)arg1;
- (double)maxTileHeightAtPoint:(struct VKPoint)arg1;
- (double)heightAtPoint:(struct VKPoint)arg1;
- (long long)maximumZoomLevelInView:(id)arg1;
- (long long)minimumZoomLevelInView:(id)arg1;
- (long long)tileSize;
- (void)_forceLayout;
- (void)_localeChanged:(id)arg1;
- (void)shouldFlushCaches:(id)arg1;
- (void)cancelTileRequests;
- (void)flushCaches;
- (void)clearScene;
- (void)didTapZoom;
- (void)willTapZoom;
- (_Bool)isShowingNoDataPlaceholders;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
- (id)attributionsForCurrentRegion;
@property(readonly, nonatomic) NSArray *visibleTileSets;
- (void)didReceiveMemoryWarning;
- (void)dealloc;
- (id)initShouldRasterize:(_Bool)arg1 mapPurpose:(unsigned long long)arg2 tileGroupIdentifier:(unsigned int)arg3 locale:(id)arg4 contentScale:(double)arg5;
- (void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)createTrafficTileSourceIfNecessary:(id)arg1;
- (id)navTileSource;
@property(nonatomic) long long targetDisplay;
@property(nonatomic) double lodBias;
- (void)reloadStylesheet;
- (void)performStylesheetDoneChanging;
- (void)performStylesheetDidChange;
- (void)performStylesheetTransitionDidProgress;
- (void)performStylesheetWillTransitionToDisplayStyle:(unsigned long long)arg1;
- (void)_setStyleManagerFromMapType:(long long)arg1;
- (void)_tryTransitionAndPreloadIfNecessary:(id)arg1;
- (void)_mapConfigurationDidChange;
- (void)_updateRegularTileProviderMode;
- (void)didEndNavigation;
- (void)didBeginTransitionToNavigation;
- (void)gatherNavigationRenderingPreloadItems:(vector_b35310ee *)arg1;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
- (id)detailedDescription;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)setStylesheetMapDisplayStyle:(unsigned long long)arg1;
- (void)stylesheetAnimationDidEnd:(_Bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned long long)arg1 toStyle:(unsigned long long)arg2;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(unsigned long long)arg2 setupHandler:(CDUnknownBlockType)arg3;
- (void)forceMapType:(long long)arg1;
- (long long)buildingsMapMode;
- (void)configureTileSources;
- (void)_deactivateModel:(id)arg1;
- (void)_activateModel:(id)arg1;
- (id)sourceForLayer:(unsigned long long)arg1 mode:(long long)arg2;
- (id)tileSetForMapLayer:(unsigned long long)arg1 tileGroup:(id)arg2;
- (id)createSourceForLayer:(unsigned long long)arg1 tileSet:(id)arg2 mode:(long long)arg3;
- (int)tileStyleForMapLayer:(unsigned long long)arg1;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
- (float)ppi;
- (void)setDesiredMapMode:(long long)arg1 immediate:(_Bool)arg2;
@property(nonatomic) _Bool disableRealisticLand;
@property(nonatomic) _Bool disableRealisticRoads;
@property(readonly, nonatomic) VKMercatorTerrainHeightCache *terrainHeightCache;
- (_Bool)isRoadClassDisabled:(int)arg1;
- (void)disableRoadClass:(_Bool)arg1 withRoadClass:(int)arg2;
@property(readonly, nonatomic) VKTileProvider *tileProvider;
- (void)foreachActiveLayer:(CDUnknownBlockType)arg1;
@property(nonatomic) unsigned long long neighborMode;
@property(nonatomic) _Bool shouldLoadFallbackTiles;
@property(nonatomic) id <VKOverlayContainerRouteDelegate> overlayContainerRouteDelegate;
- (void)_resetMaximumZoomLevel;
- (void)_setMaximumZoomLevel:(double)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKMapRasterizer : VKModelObject
{
    struct VKTileKey _keyToRasterize;
    VKScene *_rasterizeScene;
    NSMutableSet *_rasterizeTilesToRender;
    VKLayoutContext *_rasterizeLayoutContext;
    MDTextureCanvas *_rasterizeCanvas;
    VKTileProvider *_tileProvider;
    Matrix_5173352a _backgroundColor;
    unsigned long long _rasterizingScaleFactor;
    VKMapRasterizerRoot *_root;
    VKCamera *_rasterizeCamera;
    struct unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer>> _textureBuffer;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> _depthStencilBuffer;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> _renderToTextureTarget;
    struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> _rttQueue;
    struct unique_ptr<ggl::TexturePool, std::__1::default_delete<ggl::TexturePool>> _texturePool;
    shared_ptr_479d1306 _renderTexture;
    unsigned int _canvasPointSize;
    VKMapModel *_mapModel;
}

@property(nonatomic) unsigned long long rasterizingScaleFactor; // @synthesize rasterizingScaleFactor=_rasterizingScaleFactor;
@property(nonatomic) Matrix_5173352a backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(nonatomic) VKTileProvider *tileProvider; // @synthesize tileProvider=_tileProvider;
@property(nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)stylesheetDidChange;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)gglLayoutSceneIfNeeded:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3 dispatchQueue:(id)arg4;
- (void)prepRenderTargetWithTexture:(const shared_ptr_479d1306 *)arg1;
- (void)createRasterizationLayoutContext:(id)arg1 canvasPointSize:(unsigned int)arg2;
- (void)updateCameraFromKey:(const struct VKTileKey *)arg1;
- (_Bool)isBusy;
- (void)rasterizeKey:(const struct VKTileKey *)arg1 scene:(id)arg2;
- (void)addSubmodel:(id)arg1;
- (void)flushTextureCache;
- (void)reset;
- (void)dealloc;
- (id)init;
@property(readonly, nonatomic) const struct VKTileKey *keyToRasterize;

@end

__attribute__((visibility("hidden")))
@interface VKMapRasterizerRoot : VKModelObject
{
    struct ClearItem _clearItem;
    VKMapRasterizer *_mapRasterizer;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)stylesheetDidChange;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
@property(nonatomic) Matrix_5173352a backgroundColor;
- (id)initWithMapRasterizer:(id)arg1;

@end

@interface VKMapSnapshot : NSObject
{
    struct CGImage *_image;
    unsigned long long _width;
    unsigned long long _height;
    double _scale;
    VKCamera *_camera;
}

@property(readonly, nonatomic) double scale; // @synthesize scale=_scale;
@property(readonly, nonatomic) struct CGImage *image; // @synthesize image=_image;
- (id)imageDataInFormat:(unsigned long long)arg1;
- (_Bool)writeImageToFile:(id)arg1 format:(unsigned long long)arg2 error:(id *)arg3;
- (CDStruct_c3b9c2ee)coordinateForPoint:(struct CGPoint)arg1;
- (struct CGPoint)pointForCoordinate:(CDStruct_c3b9c2ee)arg1;
- (id)description;
- (void)dealloc;
- (id)_initWithImage:(struct CGImage *)arg1 scale:(double)arg2 camera:(id)arg3;

@end

@interface VKMapSnapshotCreator : NSObject <VKMapModelDelegate>
{
    VKImageCanvas *_canvas;
    long long _mapType;
    VKMapModel *_mapModel;
    _Bool _didBecomeFullyDrawn;
    _Bool _hasFailedTiles;
    CDUnknownBlockType _completion;
    struct GLRenderer *_gglRenderer;
    VKMapCameraController *_cameraController;
    unsigned int _tileGroupID;
    NSLocale *_locale;
}

+ (_Bool)supportsSharingThumbnails;
+ (_Bool)supportsHighResolutionSnapshots;
+ (shared_ptr_77723e34)device;
- (double)mapModelZoomScale:(id)arg1;
- (_Bool)mapModelInNav:(id)arg1;
- (_Bool)mapModelInNavAtDefaultZoom:(id)arg1;
- (void)mapModelDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(_Bool)arg2;
- (void)mapModelWillBecomFullyDrawn:(id)arg1;
- (void)mapModelDidBecomePartiallyDrawn:(id)arg1;
- (void)mapModelDidUpdateMinMaxZoomLevel:(id)arg1;
- (id)mapModel:(id)arg1 painterForOverlay:(id)arg2;
- (void)mapModel:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapModel:(id)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (void)mapModelDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapModelDidFinishLoadingTiles:(id)arg1;
- (void)mapModelDidStartLoadingTiles:(id)arg1;
- (void)mapModel:(id)arg1 annotationMarker:(id)arg2 didChangeDragState:(long long)arg3 fromOldState:(long long)arg4;
- (void)mapModel:(id)arg1 needsPanByOffset:(struct CGPoint)arg2 relativeToScreenPoint:(struct CGPoint)arg3 animated:(_Bool)arg4 duration:(double)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (id)mapModel:(id)arg1 markerForAnnotation:(id)arg2;
- (void)cancelFlushingTileDecodes:(_Bool)arg1;
- (void)cancel;
- (void)renderRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)renderSnapshot:(CDUnknownBlockType)arg1;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4;
- (void)lookAtX:(unsigned long long)arg1 y:(unsigned long long)arg2 z:(unsigned long long)arg3;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3;
- (_Bool)isRoadClassDisabled:(int)arg1;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool showsBuildings;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) _Bool localizeLabels;
@property(nonatomic) long long mapType;
@property(readonly) struct CGSize size;
- (void)dealloc;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2 homeQueue:(id)arg3 softwareRendering:(_Bool)arg4 tileGroupIdentifier:(unsigned int)arg5 locale:(id)arg6;
- (id)initWithSize:(struct CGSize)arg1 scale:(double)arg2 homeQueue:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKMapSnapshotRequest : NSObject
{
    unsigned int _scale;
    unsigned int _tileGroupID;
    long long _mapType;
    NSLocale *_locale;
    struct CGSize _size;
    struct {
        CDStruct_2c43369c center;
        struct {
            double latitudeDelta;
            double longitudeDelta;
        } span;
    } _region;
}

@property(nonatomic) unsigned int tileGroupID; // @synthesize tileGroupID=_tileGroupID;
@property(retain, nonatomic) NSLocale *locale; // @synthesize locale=_locale;
@property(nonatomic) unsigned int scale; // @synthesize scale=_scale;
@property(nonatomic) struct CGSize size; // @synthesize size=_size;
@property(nonatomic) long long mapType; // @synthesize mapType=_mapType;
@property(nonatomic) CDStruct_90e2a262 region; // @synthesize region=_region;
- (id).cxx_construct;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (struct VKRequestKey)_requestKey;

@end

@interface VKMapSnapshotServer : NSObject
{
    _Bool _softwareRendering;
    NSObject<OS_dispatch_queue> *_homeQueue;
}

- (void)_renderRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)renderRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithSoftwareRendering:(_Bool)arg1 homeQueue:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKMapTile : VKTile <NSCopying>
{
    VKTile *_tiles[34];
    unsigned long long _states[34];
    double _stateDates[34];
    id _stateMetas[34];
    CDStruct_ff03d24e _localBounds[34];
    VKRasterTile *_rasterized;
    _Bool _needsRasterization;
    float _maximumStyleZ;
    shared_ptr_89f9185e _labelMapTile;
}

@property(nonatomic) shared_ptr_89f9185e labelMapTile; // @synthesize labelMapTile=_labelMapTile;
@property(nonatomic) _Bool needsRasterization; // @synthesize needsRasterization=_needsRasterization;
@property(retain, nonatomic) VKRasterTile *rasterized; // @synthesize rasterized=_rasterized;
@property(readonly, nonatomic) float maximumStyleZ; // @synthesize maximumStyleZ=_maximumStyleZ;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (CDStruct_ff03d24e)localBoundsForLayer:(unsigned long long)arg1;
- (void)setTile:(id)arg1 state:(unsigned long long)arg2 metadata:(id)arg3 forLayer:(unsigned long long)arg4;
- (void)_setTile:(id)arg1 state:(unsigned long long)arg2 metadata:(id)arg3 forLayer:(unsigned long long)arg4 timestamp:(double)arg5;
- (unsigned long long)tileStateForLayer:(unsigned long long)arg1;
- (id)tileForLayer:(unsigned long long)arg1;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (id)detailedDescription;
- (id)description;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKMapTileList : NSObject
{
    struct vector<VKMapTile *, std::__1::allocator<VKMapTile *>> _list;
    vector_d61b411b _rectList[34];
    float _maximumStyleZ;
}

@property(readonly, nonatomic) float maximumStyleZ; // @synthesize maximumStyleZ=_maximumStyleZ;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)consolidateList;
- (void)clearList;
- (void)addTileToList:(id)arg1;
@property(readonly, nonatomic) unsigned long long numTiles;
- (unsigned long long)numRectForLayer:(unsigned long long)arg1;
- (const CDStruct_ff03d24e *)rectListForLayer:(unsigned long long)arg1;
- (const vector_d61b411b *)rectListVectorForLayer:(unsigned long long)arg1;
@property(readonly, nonatomic) id *tileList;
- (id)init;

@end

@interface VKMapView : CALayer <VKInteractiveMapDelegate, MDMapControllerDelegate, GGLLayerDisruptor, GGLRenderQueueSource>
{
    long long _mapType;
    VKMapCanvas *_canvas;
    VKClassicGlobeCanvas *_globe;
    MDDisplayLayer *_mapLayer;
    id <VKMapViewDelegate> _mapDelegate;
    _Bool _loaderOpen;
    NSString *_tileLoaderClientID;
    unsigned long long _mapDisplayStyle;
    VKAnimation *_mapDisplayStyleAnimation;
    VKAnimation *_edgeInsetAnimation;
    struct VKEdgeInsets _animatingToEdgeInsets;
    _Bool _isChangingMapType;
    unsigned long long _regionChangeCount;
    _Bool _containsOverlay;
    double _verticalYaw;
    VKLabelMarker *_selectedLabelMarker;
    unsigned int _applicationState;
    VKMemoryObserver *_memoryObserver;
    GGLDisplayLink *_displayLink;
    long long _displayRate;
    long long _requestedRate;
    shared_ptr_06328420 _renderQueue;
    NSMutableArray *_annotationMarkersToAddToNewCanvas;
    _Bool _isInBackground;
}

@property(nonatomic) unsigned int applicationState; // @synthesize applicationState=_applicationState;
@property(readonly, nonatomic) double verticalYaw; // @synthesize verticalYaw=_verticalYaw;
@property(nonatomic) id <VKMapViewDelegate> mapDelegate; // @synthesize mapDelegate=_mapDelegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)map:(id)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)removeExternalAnchor:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
@property(nonatomic) double userZoomFocusStyleMaxGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleMinGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleGroundspanMeters;
- (void)setDebugDynamicMapModesEnabled:(_Bool)arg1;
- (_Bool)debugDynamicMapModesEnabled;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(CDStruct_b926a728 *)arg2;
@property(nonatomic) _Bool rendersInBackground;
- (void)goToTileX:(int)arg1 Y:(int)arg2 Z:(int)arg3 tileSize:(int)arg4;
- (_Bool)gridDisabled;
- (_Bool)realisticLandDisabled;
- (_Bool)realisticRoadsDisabled;
- (_Bool)rastersDisabled;
- (_Bool)buildingFootprintsDisabled;
- (_Bool)polygonsDisabled;
- (_Bool)labelsDisabled;
- (_Bool)roadsDisabled;
@property(readonly, nonatomic, getter=isFullyDrawn) _Bool fullyDrawn;
- (_Bool)roadClassDisabled:(int)arg1;
- (void)setDisableGrid:(_Bool)arg1;
- (void)setDisableRealisticLand:(_Bool)arg1;
- (void)setDisableRealisticRoads:(_Bool)arg1;
- (void)setDisableRoadClass:(_Bool)arg1 forRoadClass:(int)arg2;
- (void)setDisableRasters:(_Bool)arg1;
- (void)setDisableBuildingFootprints:(_Bool)arg1;
- (void)setDisablePolygons:(_Bool)arg1;
- (void)setDisableLabels:(_Bool)arg1;
- (void)setDisableRoads:(_Bool)arg1;
- (void)stopSnappingAnimations;
- (_Bool)isPointValidForGesturing:(struct CGPoint)arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)didStartPanningDeceleration;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)startPanningAtPoint:(struct CGPoint)arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint)arg2;
- (void)didDrawWithTimestamp:(double)arg1;
- (RenderQueue_e4212455 *)renderQueue;
- (void)resetRenderQueue;
- (void)mapControllerNeedsInitialization:(id)arg1;
- (void)mapController:(id)arg1 requestsDisplayRate:(long long)arg2;
- (void)mapControllerNeedsDisplay:(id)arg1;
- (_Bool)updateDisplayLinkStatus;
- (void)onTimerFired:(id)arg1;
- (void)_updateMapDisplayStyle;
- (void)map:(id)arg1 didUpdateContainsOverlay:(_Bool)arg2;
- (void)map:(id)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (void)map:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapDidFinishChangingMapDisplayStyle:(unsigned long long)arg1;
- (void)map:(id)arg1 canShowFlyoverDidChange:(_Bool)arg2;
- (void)map:(id)arg1 canEnter3DModeDidChange:(_Bool)arg2;
- (void)map:(id)arg1 canZoomOutDidChange:(_Bool)arg2;
- (void)map:(id)arg1 canZoomInDidChange:(_Bool)arg2;
- (void)map:(id)arg1 didBecomePitched:(_Bool)arg2;
- (void)mapDidBecomePartiallyDrawn:(id)arg1;
- (void)mapDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(_Bool)arg2;
- (id)map:(id)arg1 painterForOverlay:(id)arg2;
- (id)map:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)map:(id)arg1 didChangeRegionAnimated:(_Bool)arg2;
- (void)map:(id)arg1 willChangeRegionAnimated:(_Bool)arg2;
- (void)mapDidChangeVisibleRegion:(id)arg1;
- (void)mapDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapDidFinishLoadingTiles:(id)arg1;
- (void)mapDidStartLoadingTiles:(id)arg1;
@property(retain, nonatomic) VKPolylineOverlayPainter *focusedLabelsPolylinePainter;
- (_Bool)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (void)setCurrentLocationText:(id)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate)arg1;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) _Bool animatingToTrackAnnotation;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(_Bool)arg2 animated:(_Bool)arg3;
@property(nonatomic) long long annotationTrackingZoomStyle;
@property(nonatomic) double trackingZoomScale;
@property(readonly, nonatomic) NSArray *labelMarkers;
@property(readonly, nonatomic) NSArray *annotationMarkers;
@property(readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
- (_Bool)shouldHideOffscreenSelectedAnnotation;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
- (void)setAnnotationMarkerDeselectionCallback:(CDUnknownBlockType)arg1;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)removeAnnotationMarker:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(_Bool)arg2;
- (void)panWithOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;
@property(readonly, nonatomic) _Bool canShowFlyover;
@property(readonly, nonatomic, getter=isShowingFlyover) _Bool showingFlyover;
@property(readonly, nonatomic) _Bool canEnter3DMode;
@property(readonly, nonatomic, getter=isFullyPitched) _Bool fullyPitched;
@property(readonly, nonatomic, getter=isPitched) _Bool pitched;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)deselectLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint)arg1 selectableLabelsOnly:(_Bool)arg2;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint)arg1 avoidCurrent:(_Bool)arg2;
@property(retain, nonatomic) NSArray *externalTrafficIncidents;
@property(retain, nonatomic) id <GEORoutePreloadSession> routePreloadSession;
- (void)preloadNavigationSceneResources;
@property(nonatomic) int trackingCameraPanStyle;
- (void)setShouldLimitTrackingCameraHeight:(_Bool)arg1;
- (void)transitionToTracking:(_Bool)arg1 mapMode:(long long)arg2 pounceCompletionHandler:(CDUnknownBlockType)arg3;
- (void)pauseTracking;
- (void)stopTracking;
- (void)updateCameraContext:(id)arg1;
- (id)flyoverStatistics;
- (void)disableFlyoverStatistics;
- (void)enableFlyoverStatistics;
- (void)resumeFlyoverTourAnimation;
- (void)pauseFlyoverTourAnimation;
- (void)stopFlyoverAnimation;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)startFlyoverAnimation:(id)arg1 animateToStart:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_notifyDelegateFlyoverTourLabelChanged:(id)arg1;
- (void)_runFlyoverTourStateChange:(int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)prepareFlyoverAnimation:(id)arg1 inBackground:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) _Bool canShowFlyoverAnimation;
- (void)showSearchResultAnimationAtCoordinate:(CDStruct_c3b9c2ee)arg1 withMapRegion:(id)arg2;
- (_Bool)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
@property(nonatomic) struct VKEdgeInsets labelEdgeInsets;
@property(nonatomic) struct VKEdgeInsets fullyOccludedEdgeInsets;
@property(nonatomic) struct VKEdgeInsets edgeInsets;
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1 duration:(double)arg2 timingFunction:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (struct CGPoint)convertCoordinate:(CDStruct_c3b9c2ee)arg1 toCameraModelPointToLayer:(id)arg2;
- (struct CGPoint)convertCoordinate:(CDStruct_c3b9c2ee)arg1 toPointToLayer:(id)arg2;
- (struct CGPoint)convertMapPoint:(CDStruct_c3b9c2ee)arg1 toPointToLayer:(id)arg2;
- (CDStruct_c3b9c2ee)convertPoint:(struct CGPoint)arg1 toMapPointFromLayer:(id)arg2;
- (CDStruct_c3b9c2ee)convertPoint:(struct CGPoint)arg1 toCoordinateFromLayer:(id)arg2;
- (void)setCenterCoordinate:(CDStruct_071ac149)arg1 animated:(_Bool)arg2;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(_Bool)arg4;
- (void)setYaw:(double)arg1 animated:(_Bool)arg2;
- (void)setMapRegion:(id)arg1 animated:(_Bool)arg2;
- (void)runAnimation:(id)arg1;
- (void)renderInContext:(struct CGContext *)arg1;
- (void)setContentsScale:(double)arg1;
- (void)dealloc;
- (id)initWithGlobe:(_Bool)arg1 shouldRasterize:(_Bool)arg2 inBackground:(_Bool)arg3;
@property(nonatomic) _Bool allowDatelineWraparound;
- (void)setCenterCoordinate:(CDStruct_c3b9c2ee)arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(CDUnknownBlockType)arg6 completion:(CDUnknownBlockType)arg7;
@property(nonatomic) CDStruct_071ac149 centerCoordinate;
- (id)consoleString:(_Bool)arg1;
@property(readonly, nonatomic) GEOMapRegion *mapRegionOfInterest;
@property(retain, nonatomic) GEOMapRegion *mapRegion;
@property(readonly, nonatomic) double altitude;
@property(readonly, nonatomic) double pitch;
@property(readonly, nonatomic) double presentationYaw;
@property(readonly, nonatomic) double yaw;
- (struct CGRect)mapRegionBounds;
- (void)setBounds:(struct CGRect)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)setMapDisplayStyle:(unsigned long long)arg1 animated:(_Bool)arg2;
@property(nonatomic) unsigned long long mapDisplayStyle;
- (void)_updateBackgroundColor;
- (void)_clearAnalytics;
- (void)_updateAnalytics:(_Bool)arg1;
@property(nonatomic) long long mapType;
- (_Bool)supportsNightMode;
- (_Bool)supportsMapType:(long long)arg1;
- (void)_createGlobe;
- (void)setCanonicalSkyHeight:(double)arg1;
@property(nonatomic) _Bool dynamicMapModesEnabled;
- (void)setDesiredMapMode:(long long)arg1 immediate:(_Bool)arg2;
@property(nonatomic) _Bool showsBuildings;
@property(nonatomic) _Bool showsPointsOfInterest;
@property(nonatomic) long long shieldIdiom;
@property(nonatomic) long long navigationShieldSize;
@property(nonatomic) long long shieldSize;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (double)currentZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double currentZoomLevel;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double maximumZoomLevel;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
@property(readonly, nonatomic) double minimumZoomLevel;
- (_Bool)canZoomOutForTileSize:(long long)arg1;
- (_Bool)canZoomInForTileSize:(long long)arg1;
@property(nonatomic) _Bool iconsShouldAlignToPixels;
@property(nonatomic, getter=isGesturing) _Bool gesturing;
- (id)detailedDescription;
@property(nonatomic) _Bool shouldLoadMapMargin;
@property(nonatomic) _Bool shouldLoadFallbackTiles;
- (void)debugHighlightLabelAtPoint:(struct CGPoint)arg1;
@property(readonly, nonatomic) _Bool enableDebugLabelHighlighting;
@property(retain, nonatomic) CADisplay *hostDisplay;
- (_Bool)isEffectivelyHidden;
- (void)didReceiveMemoryWarning;
- (void)setHidden:(_Bool)arg1;
- (void)clearScene;
- (void)setNeedsDisplay;
- (void)setNeedsLayout;
- (void)debugFlyoverTour:(unsigned int)arg1 trip:(unsigned int)arg2;
- (void)debugRunPerformanceTestWithOutputHeader:(id)arg1;
@property(readonly, nonatomic) float debugFramesPerSecond;
@property(nonatomic) _Bool debugEnableMultisampling;
@property(nonatomic) _Bool debugLayoutContinuously;
@property(nonatomic) _Bool debugDrawContinuously;
@property(nonatomic) _Bool isPitchable;
@property(nonatomic) _Bool staysCenteredDuringRotation;
@property(nonatomic) _Bool staysCenteredDuringPinch;
@property(nonatomic) long long labelScaleFactor;
@property(nonatomic) _Bool localizeLabels;
- (_Bool)currentZoomLevelAllowsRotation;
- (void)flushTileLoads;
- (void)didEnterBackground;
- (void)willEnterForeground;
- (void)_createDisplayLayer;
- (void)_updateDisplayRate;
@property(nonatomic) long long displayRate;
@property(nonatomic) _Bool trafficEnabled;
@property(nonatomic) long long targetDisplay;
- (void)reloadStylesheet;
@property(retain, nonatomic) VKStyleManager *styleManager;
- (_Bool)stylesheetIsDevResource;
- (id)stylesheetName;
- (void)setStylesheetName:(id)arg1;
- (_Bool)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
@property(readonly, nonatomic) NSArray *visibleTileSets;
- (void)forceLayout;
- (id)secondaryCanvas;
- (id)currentCanvas;
- (void)closeLoaderConnection;
- (void)openLoaderConnection;
- (void)forceSceneLoad;
@property(nonatomic, getter=isLabelMarkerSelectionEnabled) _Bool labelMarkerSelectionEnabled;
- (void)_resetMaximumZoomLevel;
- (void)_setMaximumZoomLevel:(double)arg1;
@property(readonly, nonatomic) VKMapCanvas *mapCanvas;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKMemoryObserver : NSObject
{
    id _target;
    SEL _selector;
    NSObject<OS_dispatch_source> *_memoryNotificationEventSource;
}

- (void)_receivedMemoryNotification;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKMercatorTerrainHeightCache : NSObject
{
    id <VKMercatorTerrainHeightProvider> _heightProvider;
    struct map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float>>> _anchorToHeight;
}

@property(nonatomic) id <VKMercatorTerrainHeightProvider> heightProvider; // @synthesize heightProvider=_heightProvider;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)invalidateRect:(const CDStruct_d2b197d1 *)arg1;
- (void)removeCachedValueForAnchor:(struct Anchor *)arg1;
- (double)heightForAnchor:(struct Anchor *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKMockRasterTileRequester : GEOTileRequester
{
}

+ (unsigned char)tileProviderIdentifier;
- (void)start;
- (id)_urlForTileKey:(struct _GEOTileKey *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKMockVectorTileRequester : GEOTileRequester
{
}

+ (unsigned char)tileProviderIdentifier;
- (void)start;
- (void)fakeLoadTile;
- (id)getTileData:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKModelObject_DrawPass : NSObject
{
    unsigned char _pass;
    VKModelObject *_submodel;
}

@property(nonatomic) unsigned char pass; // @synthesize pass=_pass;
@property(retain, nonatomic) VKModelObject *submodel; // @synthesize submodel=_submodel;
- (void)dealloc;
- (id)description;

@end

@interface VKNavUserLocationAnnotationMarker : VKAnnotationMarker
{
    _Bool _shouldBillboard;
    VKAnimation *_billboardAnimation;
    float _billboardFactor;
    float _scale;
    _Bool _shouldShowCourse;
    _Bool _puckFlipped;
    double _presentationCourse;
    double _sizePoints;
    double _puckOffset;
    _Bool _stale;
    VKAnimation *_puckStyleAnimation;
    int _puckStyle;
    float _greyPuckAlphaScale;
    struct {
        CDStruct_aa5aacbc arrowMatrix;
        CDStruct_aa5aacbc circleMatrix;
        Matrix_5173352a arrowColor;
    } _puckState;
    int _style;
    Matrix_5173352a _arrowColor;
    Matrix_5173352a _arrowColorStale;
    float _circleBrightness;
    float _arrowBrightness;
    shared_ptr_479d1306 _textureArrow;
    shared_ptr_479d1306 _textureCircle;
    struct shared_ptr<ggl::RenderState> _gglPuckRenderState;
    struct shared_ptr<ggl::TextureWithBrightness::Shader::Setup> _circleShaderSetup;
    struct shared_ptr<ggl::TextureAlphaMask::Shader::Setup> _arrowShaderSetup;
    struct shared_ptr<ggl::RenderItem> _arrowRenderItem;
    struct shared_ptr<ggl::RenderItem> _circleRenderItem;
    _Bool _needsTextureUpdate;
}

@property(nonatomic) int style; // @synthesize style=_style;
@property(nonatomic) _Bool shouldShowCourse; // @synthesize shouldShowCourse=_shouldShowCourse;
@property(nonatomic) _Bool shouldBillboard; // @synthesize shouldBillboard=_shouldBillboard;
@property(nonatomic, getter=isStale) _Bool stale; // @synthesize stale=_stale;
@property(nonatomic) float scale; // @synthesize scale=_scale;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateWithStyleQuery:(const shared_ptr_6e6219d6 *)arg1;
- (void)setModel:(id)arg1;
- (void)_updatePuckStyle;
- (void)layoutWithContext:(id)arg1;
- (void)appendCommandsToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2 style:(int)arg3;
- (void)_updateTexturesIfNeeded;
@property(nonatomic) double presentationCourse;
@property(nonatomic) CDStruct_ff03d24e innerColor;

@end

__attribute__((visibility("hidden")))
@interface VKOverlayContainerModel : VKMapTileModel <VKRouteMatchedAnnotationPresentationObserver, VKMapLayer, VKStyleManagerObserver>
{
    NSMutableSet *_visibleOverlays;
    NSMutableArray *_overlayPainters;
    NSMapTable *_overlaysToPainters;
    NSMutableSet *_overlaysToAdd;
    NSMutableSet *_overlaysToRemove;
    id <VKOverlayContainerDelegate> _delegate;
    _Bool _shouldCheckForOcclusion;
    _Bool _shouldOccludeTraffic;
    _Bool _shouldShowTraffic;
    _Bool _isShowingRouteInStandardMode;
    NSMapTable *_persistentOverlaysToPainters;
    NSMutableSet *_persistentOverlays;
    id <VKRouteMatchedAnnotationPresentation> _routeLineSplitAnnotation;
    VKSkyModel *_skyModel;
    id <VKOverlayContainerRouteDelegate> _routeDelegate;
    struct ClearItem *_clearItem;
    unsigned int _applicationState;
    CDStruct_b926a728 _puckPosition;
}

+ (_Bool)reloadOnStylesheetChange;
@property(readonly, nonatomic) _Bool isShowingRouteInStandardMode; // @synthesize isShowingRouteInStandardMode=_isShowingRouteInStandardMode;
@property(nonatomic) id <VKOverlayContainerRouteDelegate> routeDelegate; // @synthesize routeDelegate=_routeDelegate;
@property(retain, nonatomic) VKSkyModel *skyModel; // @synthesize skyModel=_skyModel;
@property(nonatomic) _Bool shouldOccludeTraffic; // @synthesize shouldOccludeTraffic=_shouldOccludeTraffic;
@property(readonly, nonatomic) NSSet *persistentOverlays; // @synthesize persistentOverlays=_persistentOverlays;
@property(retain, nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation; // @synthesize routeLineSplitAnnotation=_routeLineSplitAnnotation;
@property(nonatomic) _Bool shouldShowTraffic; // @synthesize shouldShowTraffic=_shouldShowTraffic;
@property(nonatomic) _Bool shouldCheckForOcclusion; // @synthesize shouldCheckForOcclusion=_shouldCheckForOcclusion;
@property(readonly, nonatomic) CDStruct_b926a728 puckPosition; // @synthesize puckPosition=_puckPosition;
@property(nonatomic) id <VKOverlayContainerDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void)setApplicationState:(unsigned int)arg1;
- (void)updatedMatchedSection:(fast_shared_ptr_502c59d0)arg1 index:(struct PolylineCoordinate *)arg2;
- (void)reset;
- (void)didReceiveMemoryWarning;
- (void)stylesheetDidChange;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)_updatePainterOrdering;
@property(readonly, nonatomic, getter=isInRealisticMode) _Bool inRealisticMode;
- (unsigned long long)mapLayerPosition;
- (void)annotationPresentationDidChangePresentationCoordinate:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKOverlayPainter : NSObject
{
    unsigned int _applicationState;
    id <VKOverlay> _overlay;
    VKOverlayContainerModel *_containerModel;
    float _brightness;
}

@property(nonatomic) unsigned int applicationState; // @synthesize applicationState=_applicationState;
@property(nonatomic) VKOverlayContainerModel *containerModel; // @synthesize containerModel=_containerModel;
@property(readonly, nonatomic) id <VKOverlay> overlay; // @synthesize overlay=_overlay;
- (void)flushPools;
- (void)stylesheetDidChange;
- (void)layoutWithContext:(id)arg1 tiles:(id)arg2 keysInView:(id)arg3;
- (void)gglLayoutWithContext:(id)arg1 commandBuffer:(struct CommandBuffer *)arg2 tiles:(id)arg3;
- (void)dealloc;
- (id)initWithOverlay:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKOverlayTile : VKTile
{
    NSMutableArray *_overlays;
    VKVectorTile *_roadTile;
    NSMapTable *_tileForOverlay;
    float _maximumStyleZ;
}

@property(readonly, nonatomic) float maximumStyleZ; // @synthesize maximumStyleZ=_maximumStyleZ;
@property(retain, nonatomic) VKVectorTile *roadTile; // @synthesize roadTile=_roadTile;
@property(readonly, nonatomic) NSArray *overlays; // @synthesize overlays=_overlays;
- (id)tileForOverlay:(id)arg1;
- (void)setTile:(id)arg1 forOverlay:(id)arg2;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKOverlayTileSource : VKTileSource
{
    VKTileSource *_tileSourceToMatch;
    NSMutableArray *_overlays;
}

@property(readonly, nonatomic) NSArray *overlays; // @synthesize overlays=_overlays;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (void)fetchTileForKey:(const struct VKTileKey *)arg1;
- (struct VKTileKey)sourceKeyForDownloadKey:(const struct _GEOTileKey *)arg1;
- (struct _GEOTileKey)downloadKeyAtX:(unsigned int)arg1 y:(unsigned int)arg2 z:(unsigned int)arg3;
- (id)tileForKey:(const struct VKTileKey *)arg1;
- (_Bool)canFetchTileForKey:(const struct VKTileKey *)arg1;
- (long long)maximumZoomLevel;
- (long long)minimumZoomLevel;
- (long long)zEquivalenceClass;
- (unsigned int)maximumDownloadZoomLevel;
- (unsigned int)minimumDownloadZoomLevel;
- (long long)tileSize;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
- (struct VKTileKey)sourceKeyForRenderKey:(const struct VKTileKey *)arg1;
- (struct VKTileKey)nativeKeyForRenderKey:(const struct VKTileKey *)arg1;
- (void)matchTilesFromSource:(id)arg1;
- (void)_overlayBoundingMapRegionChanged:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPGenericShield : PBCodable <NSCopying>
{
    int _style;
    NSMutableArray *_variants;
}

@property(retain, nonatomic) NSMutableArray *variants; // @synthesize variants=_variants;
@property(nonatomic) int style; // @synthesize style=_style;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)variantAtIndex:(unsigned long long)arg1;
- (unsigned long long)variantsCount;
- (void)addVariant:(id)arg1;
- (void)clearVariants;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPGenericShieldStyleInfo : PBCodable <NSCopying>
{
    CDStruct_fae3dc92 _textDropShadowOffsets;
    unsigned int _backgroundColor;
    unsigned int _borderColor;
    int _style;
    unsigned int _textColor;
    unsigned int _textDropShadowColor;
    float _textDropShadowSize;
    unsigned int _textStrokeColor;
    float _textStrokeSize;
    struct {
        unsigned int backgroundColor:1;
        unsigned int borderColor:1;
        unsigned int style:1;
        unsigned int textColor:1;
        unsigned int textDropShadowColor:1;
        unsigned int textDropShadowSize:1;
        unsigned int textStrokeColor:1;
        unsigned int textStrokeSize:1;
    } _has;
}

@property(nonatomic) float textDropShadowSize; // @synthesize textDropShadowSize=_textDropShadowSize;
@property(nonatomic) unsigned int textStrokeColor; // @synthesize textStrokeColor=_textStrokeColor;
@property(nonatomic) float textStrokeSize; // @synthesize textStrokeSize=_textStrokeSize;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasTextDropShadowColor;
@property(nonatomic) unsigned int textDropShadowColor; // @synthesize textDropShadowColor=_textDropShadowColor;
@property(nonatomic) _Bool hasTextDropShadowSize;
- (void)setTextDropShadowOffsets:(float *)arg1 count:(unsigned long long)arg2;
- (float)textDropShadowOffsetAtIndex:(unsigned long long)arg1;
- (void)addTextDropShadowOffset:(float)arg1;
- (void)clearTextDropShadowOffsets;
@property(readonly, nonatomic) float *textDropShadowOffsets;
@property(readonly, nonatomic) unsigned long long textDropShadowOffsetsCount;
@property(nonatomic) _Bool hasTextStrokeColor;
@property(nonatomic) _Bool hasTextStrokeSize;
@property(nonatomic) _Bool hasTextColor;
@property(nonatomic) unsigned int textColor; // @synthesize textColor=_textColor;
@property(nonatomic) _Bool hasBorderColor;
@property(nonatomic) unsigned int borderColor; // @synthesize borderColor=_borderColor;
@property(nonatomic) _Bool hasBackgroundColor;
@property(nonatomic) unsigned int backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(nonatomic) _Bool hasStyle;
@property(nonatomic) int style; // @synthesize style=_style;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPGenericShieldStylePack : PBCodable <NSCopying>
{
    NSMutableArray *_genericShields;
    NSMutableArray *_textureAtlas;
}

@property(retain, nonatomic) NSMutableArray *genericShields; // @synthesize genericShields=_genericShields;
@property(retain, nonatomic) NSMutableArray *textureAtlas; // @synthesize textureAtlas=_textureAtlas;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)genericShieldAtIndex:(unsigned long long)arg1;
- (unsigned long long)genericShieldsCount;
- (void)addGenericShield:(id)arg1;
- (void)clearGenericShields;
- (id)textureAtlasAtIndex:(unsigned long long)arg1;
- (unsigned long long)textureAtlasCount;
- (void)addTextureAtlas:(id)arg1;
- (void)clearTextureAtlas;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPGenericShieldVariant : PBCodable <NSCopying>
{
    CDStruct_e9f6a06b *_layers;
    unsigned long long _layersCount;
    unsigned long long _layersSpace;
    NSString *_fontName;
    float _fontSize;
    float _leftCapWidth;
    float _leftPadding;
    float _lineSpacing;
    unsigned int _numberOfLines;
    float _rightCapWidth;
    float _rightPadding;
    float _textBaseline;
    struct {
        unsigned int fontSize:1;
        unsigned int leftCapWidth:1;
        unsigned int leftPadding:1;
        unsigned int lineSpacing:1;
        unsigned int numberOfLines:1;
        unsigned int rightCapWidth:1;
        unsigned int rightPadding:1;
        unsigned int textBaseline:1;
    } _has;
}

@property(nonatomic) float rightPadding; // @synthesize rightPadding=_rightPadding;
@property(nonatomic) float leftPadding; // @synthesize leftPadding=_leftPadding;
@property(nonatomic) float lineSpacing; // @synthesize lineSpacing=_lineSpacing;
@property(nonatomic) float rightCapWidth; // @synthesize rightCapWidth=_rightCapWidth;
@property(nonatomic) float leftCapWidth; // @synthesize leftCapWidth=_leftCapWidth;
@property(nonatomic) float fontSize; // @synthesize fontSize=_fontSize;
@property(retain, nonatomic) NSString *fontName; // @synthesize fontName=_fontName;
@property(nonatomic) float textBaseline; // @synthesize textBaseline=_textBaseline;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasRightPadding;
@property(nonatomic) _Bool hasLeftPadding;
@property(nonatomic) _Bool hasLineSpacing;
@property(nonatomic) _Bool hasRightCapWidth;
@property(nonatomic) _Bool hasLeftCapWidth;
@property(nonatomic) _Bool hasFontSize;
@property(readonly, nonatomic) _Bool hasFontName;
@property(nonatomic) _Bool hasTextBaseline;
- (void)setLayers:(CDStruct_e9f6a06b *)arg1 count:(unsigned long long)arg2;
- (CDStruct_e9f6a06b)layerAtIndex:(unsigned long long)arg1;
- (void)addLayer:(CDStruct_e9f6a06b)arg1;
- (void)clearLayers;
@property(readonly, nonatomic) CDStruct_e9f6a06b *layers;
@property(readonly, nonatomic) unsigned long long layersCount;
@property(nonatomic) _Bool hasNumberOfLines;
@property(nonatomic) unsigned int numberOfLines; // @synthesize numberOfLines=_numberOfLines;
- (void)dealloc;
- (struct CGImage *)newImageWithBackgroundColor:(struct CGColor *)arg1 borderColor:(struct CGColor *)arg2 textureAtlases:(id)arg3 contentScale:(double)arg4;
- (struct CGSize)_imageSizeWithTextureAtlases:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKPGlobalProperties : PBCodable <NSCopying>
{
    CDStruct_9f2792e4 _layerZoomRangeBackgroundRasters;
    CDStruct_9f2792e4 _layerZoomRangeGroundCovers;
    CDStruct_9f2792e4 _layerZoomRangeHybridRasters;
    CDStruct_9f2792e4 _layerZoomRangePOIs;
    CDStruct_9f2792e4 _layerZoomRangeRasterTraffics;
    CDStruct_9f2792e4 _layerZoomRangeSatelliteRasters;
    CDStruct_9f2792e4 _layerZoomRangeStandardRasters;
    CDStruct_9f2792e4 _layerZoomRangeVectorBuildings;
    CDStruct_9f2792e4 _layerZoomRangeVectorPolygons;
    CDStruct_9f2792e4 _layerZoomRangeVectorRealistics;
    CDStruct_9f2792e4 _layerZoomRangeVectorRoadTraffics;
    CDStruct_9f2792e4 _layerZoomRangeVectorRoads;
    unsigned int _buildingChangeoverZ;
    float _globalScaleFactor;
    float _globeLODScale;
    float _labelIconScale;
    float _lodOffset;
    float _minLineTriangleWidth;
    unsigned int _minTrafficTypeAccidentZ;
    unsigned int _minTrafficTypeConstructionZ;
    unsigned int _minTrafficTypeEventZ;
    unsigned int _minTrafficTypeHazardZ;
    unsigned int _minTrafficTypeLaneClosureZ;
    unsigned int _minTrafficTypeRampClosureZ;
    unsigned int _minTrafficTypeRoadClosureZ;
    unsigned int _minTrafficTypeUnknownZ;
    unsigned int _navLabelMaxRoadSigns;
    float _navLabelRoadSignHeight;
    float _navLabelRoadSignScaleLarge;
    float _navLabelRoadSignScaleMedium;
    float _navLabelRoadSignScaleSmall;
    float _navLabelRoadSignScaleXLarge;
    float _navLabelRoadSignScaleXXLarge;
    unsigned int _rasterPolygonChangeoverZ;
    float _realisticNightBrightness;
    float _realisticShieldNightBrightness;
    float _shieldNightBrightness;
    float _tiltLimitSatelliteScale;
    _Bool _labelDisableAlternateTextPositions;
    struct {
        unsigned int buildingChangeoverZ:1;
        unsigned int globalScaleFactor:1;
        unsigned int globeLODScale:1;
        unsigned int labelIconScale:1;
        unsigned int lodOffset:1;
        unsigned int minLineTriangleWidth:1;
        unsigned int minTrafficTypeAccidentZ:1;
        unsigned int minTrafficTypeConstructionZ:1;
        unsigned int minTrafficTypeEventZ:1;
        unsigned int minTrafficTypeHazardZ:1;
        unsigned int minTrafficTypeLaneClosureZ:1;
        unsigned int minTrafficTypeRampClosureZ:1;
        unsigned int minTrafficTypeRoadClosureZ:1;
        unsigned int minTrafficTypeUnknownZ:1;
        unsigned int navLabelMaxRoadSigns:1;
        unsigned int navLabelRoadSignHeight:1;
        unsigned int navLabelRoadSignScaleLarge:1;
        unsigned int navLabelRoadSignScaleMedium:1;
        unsigned int navLabelRoadSignScaleSmall:1;
        unsigned int navLabelRoadSignScaleXLarge:1;
        unsigned int navLabelRoadSignScaleXXLarge:1;
        unsigned int rasterPolygonChangeoverZ:1;
        unsigned int realisticNightBrightness:1;
        unsigned int realisticShieldNightBrightness:1;
        unsigned int shieldNightBrightness:1;
        unsigned int tiltLimitSatelliteScale:1;
        unsigned int labelDisableAlternateTextPositions:1;
    } _has;
}

@property(nonatomic) float navLabelRoadSignScaleXXLarge; // @synthesize navLabelRoadSignScaleXXLarge=_navLabelRoadSignScaleXXLarge;
@property(nonatomic) float navLabelRoadSignScaleXLarge; // @synthesize navLabelRoadSignScaleXLarge=_navLabelRoadSignScaleXLarge;
@property(nonatomic) float navLabelRoadSignScaleLarge; // @synthesize navLabelRoadSignScaleLarge=_navLabelRoadSignScaleLarge;
@property(nonatomic) float navLabelRoadSignScaleMedium; // @synthesize navLabelRoadSignScaleMedium=_navLabelRoadSignScaleMedium;
@property(nonatomic) float navLabelRoadSignScaleSmall; // @synthesize navLabelRoadSignScaleSmall=_navLabelRoadSignScaleSmall;
@property(nonatomic) float navLabelRoadSignHeight; // @synthesize navLabelRoadSignHeight=_navLabelRoadSignHeight;
@property(nonatomic) unsigned int minTrafficTypeRampClosureZ; // @synthesize minTrafficTypeRampClosureZ=_minTrafficTypeRampClosureZ;
@property(nonatomic) unsigned int minTrafficTypeLaneClosureZ; // @synthesize minTrafficTypeLaneClosureZ=_minTrafficTypeLaneClosureZ;
@property(nonatomic) unsigned int minTrafficTypeHazardZ; // @synthesize minTrafficTypeHazardZ=_minTrafficTypeHazardZ;
@property(nonatomic) unsigned int minTrafficTypeEventZ; // @synthesize minTrafficTypeEventZ=_minTrafficTypeEventZ;
@property(nonatomic) unsigned int minTrafficTypeRoadClosureZ; // @synthesize minTrafficTypeRoadClosureZ=_minTrafficTypeRoadClosureZ;
@property(nonatomic) unsigned int minTrafficTypeConstructionZ; // @synthesize minTrafficTypeConstructionZ=_minTrafficTypeConstructionZ;
@property(nonatomic) unsigned int minTrafficTypeAccidentZ; // @synthesize minTrafficTypeAccidentZ=_minTrafficTypeAccidentZ;
@property(nonatomic) unsigned int minTrafficTypeUnknownZ; // @synthesize minTrafficTypeUnknownZ=_minTrafficTypeUnknownZ;
@property(nonatomic) unsigned int buildingChangeoverZ; // @synthesize buildingChangeoverZ=_buildingChangeoverZ;
@property(nonatomic) unsigned int rasterPolygonChangeoverZ; // @synthesize rasterPolygonChangeoverZ=_rasterPolygonChangeoverZ;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasNavLabelMaxRoadSigns;
@property(nonatomic) unsigned int navLabelMaxRoadSigns; // @synthesize navLabelMaxRoadSigns=_navLabelMaxRoadSigns;
@property(nonatomic) _Bool hasNavLabelRoadSignScaleXXLarge;
@property(nonatomic) _Bool hasNavLabelRoadSignScaleXLarge;
@property(nonatomic) _Bool hasNavLabelRoadSignScaleLarge;
@property(nonatomic) _Bool hasNavLabelRoadSignScaleMedium;
@property(nonatomic) _Bool hasNavLabelRoadSignScaleSmall;
@property(nonatomic) _Bool hasNavLabelRoadSignHeight;
@property(nonatomic) _Bool hasLabelDisableAlternateTextPositions;
@property(nonatomic) _Bool labelDisableAlternateTextPositions; // @synthesize labelDisableAlternateTextPositions=_labelDisableAlternateTextPositions;
@property(nonatomic) _Bool hasLabelIconScale;
@property(nonatomic) float labelIconScale; // @synthesize labelIconScale=_labelIconScale;
@property(nonatomic) _Bool hasGlobalScaleFactor;
@property(nonatomic) float globalScaleFactor; // @synthesize globalScaleFactor=_globalScaleFactor;
@property(nonatomic) _Bool hasLodOffset;
@property(nonatomic) float lodOffset; // @synthesize lodOffset=_lodOffset;
@property(nonatomic) _Bool hasGlobeLODScale;
@property(nonatomic) float globeLODScale; // @synthesize globeLODScale=_globeLODScale;
@property(nonatomic) _Bool hasTiltLimitSatelliteScale;
@property(nonatomic) float tiltLimitSatelliteScale; // @synthesize tiltLimitSatelliteScale=_tiltLimitSatelliteScale;
- (void)setLayerZoomRangeVectorRoadTraffics:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeVectorRoadTrafficAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeVectorRoadTraffic:(unsigned int)arg1;
- (void)clearLayerZoomRangeVectorRoadTraffics;
@property(readonly, nonatomic) unsigned int *layerZoomRangeVectorRoadTraffics;
@property(readonly, nonatomic) unsigned long long layerZoomRangeVectorRoadTrafficsCount;
- (void)setLayerZoomRangePOIs:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangePOIAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangePOI:(unsigned int)arg1;
- (void)clearLayerZoomRangePOIs;
@property(readonly, nonatomic) unsigned int *layerZoomRangePOIs;
@property(readonly, nonatomic) unsigned long long layerZoomRangePOIsCount;
- (void)setLayerZoomRangeVectorBuildings:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeVectorBuildingsAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeVectorBuildings:(unsigned int)arg1;
- (void)clearLayerZoomRangeVectorBuildings;
@property(readonly, nonatomic) unsigned int *layerZoomRangeVectorBuildings;
@property(readonly, nonatomic) unsigned long long layerZoomRangeVectorBuildingsCount;
- (void)setLayerZoomRangeVectorRealistics:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeVectorRealisticAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeVectorRealistic:(unsigned int)arg1;
- (void)clearLayerZoomRangeVectorRealistics;
@property(readonly, nonatomic) unsigned int *layerZoomRangeVectorRealistics;
@property(readonly, nonatomic) unsigned long long layerZoomRangeVectorRealisticsCount;
- (void)setLayerZoomRangeVectorRoads:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeVectorRoadsAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeVectorRoads:(unsigned int)arg1;
- (void)clearLayerZoomRangeVectorRoads;
@property(readonly, nonatomic) unsigned int *layerZoomRangeVectorRoads;
@property(readonly, nonatomic) unsigned long long layerZoomRangeVectorRoadsCount;
- (void)setLayerZoomRangeVectorPolygons:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeVectorPolygonsAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeVectorPolygons:(unsigned int)arg1;
- (void)clearLayerZoomRangeVectorPolygons;
@property(readonly, nonatomic) unsigned int *layerZoomRangeVectorPolygons;
@property(readonly, nonatomic) unsigned long long layerZoomRangeVectorPolygonsCount;
- (void)setLayerZoomRangeRasterTraffics:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeRasterTrafficAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeRasterTraffic:(unsigned int)arg1;
- (void)clearLayerZoomRangeRasterTraffics;
@property(readonly, nonatomic) unsigned int *layerZoomRangeRasterTraffics;
@property(readonly, nonatomic) unsigned long long layerZoomRangeRasterTrafficsCount;
- (void)setLayerZoomRangeGroundCovers:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeGroundCoverAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeGroundCover:(unsigned int)arg1;
- (void)clearLayerZoomRangeGroundCovers;
@property(readonly, nonatomic) unsigned int *layerZoomRangeGroundCovers;
@property(readonly, nonatomic) unsigned long long layerZoomRangeGroundCoversCount;
- (void)setLayerZoomRangeHybridRasters:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeHybridRastersAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeHybridRasters:(unsigned int)arg1;
- (void)clearLayerZoomRangeHybridRasters;
@property(readonly, nonatomic) unsigned int *layerZoomRangeHybridRasters;
@property(readonly, nonatomic) unsigned long long layerZoomRangeHybridRastersCount;
- (void)setLayerZoomRangeSatelliteRasters:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeSatelliteRastersAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeSatelliteRasters:(unsigned int)arg1;
- (void)clearLayerZoomRangeSatelliteRasters;
@property(readonly, nonatomic) unsigned int *layerZoomRangeSatelliteRasters;
@property(readonly, nonatomic) unsigned long long layerZoomRangeSatelliteRastersCount;
- (void)setLayerZoomRangeStandardRasters:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeStandardRastersAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeStandardRasters:(unsigned int)arg1;
- (void)clearLayerZoomRangeStandardRasters;
@property(readonly, nonatomic) unsigned int *layerZoomRangeStandardRasters;
@property(readonly, nonatomic) unsigned long long layerZoomRangeStandardRastersCount;
- (void)setLayerZoomRangeBackgroundRasters:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)layerZoomRangeBackgroundRastersAtIndex:(unsigned long long)arg1;
- (void)addLayerZoomRangeBackgroundRasters:(unsigned int)arg1;
- (void)clearLayerZoomRangeBackgroundRasters;
@property(readonly, nonatomic) unsigned int *layerZoomRangeBackgroundRasters;
@property(readonly, nonatomic) unsigned long long layerZoomRangeBackgroundRastersCount;
@property(nonatomic) _Bool hasRealisticShieldNightBrightness;
@property(nonatomic) float realisticShieldNightBrightness; // @synthesize realisticShieldNightBrightness=_realisticShieldNightBrightness;
@property(nonatomic) _Bool hasShieldNightBrightness;
@property(nonatomic) float shieldNightBrightness; // @synthesize shieldNightBrightness=_shieldNightBrightness;
@property(nonatomic) _Bool hasRealisticNightBrightness;
@property(nonatomic) float realisticNightBrightness; // @synthesize realisticNightBrightness=_realisticNightBrightness;
@property(nonatomic) _Bool hasMinTrafficTypeRampClosureZ;
@property(nonatomic) _Bool hasMinTrafficTypeLaneClosureZ;
@property(nonatomic) _Bool hasMinTrafficTypeHazardZ;
@property(nonatomic) _Bool hasMinTrafficTypeEventZ;
@property(nonatomic) _Bool hasMinTrafficTypeRoadClosureZ;
@property(nonatomic) _Bool hasMinTrafficTypeConstructionZ;
@property(nonatomic) _Bool hasMinTrafficTypeAccidentZ;
@property(nonatomic) _Bool hasMinTrafficTypeUnknownZ;
@property(nonatomic) _Bool hasBuildingChangeoverZ;
@property(nonatomic) _Bool hasMinLineTriangleWidth;
@property(nonatomic) float minLineTriangleWidth; // @synthesize minLineTriangleWidth=_minLineTriangleWidth;
@property(nonatomic) _Bool hasRasterPolygonChangeoverZ;
- (void)dealloc;
- (struct _NSRange)zoomRangeForMapLayer:(unsigned long long)arg1;
- (float)tiltLimitScale:(long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKPIcon : PBCodable <NSCopying>
{
    unsigned long long _matchingStyleAttributeLongValue;
    unsigned int _anchorPointX;
    unsigned int _anchorPointY;
    unsigned int _atlasIndex;
    unsigned int _iconRectHeight;
    unsigned int _iconRectWidth;
    unsigned int _iconRectX;
    unsigned int _iconRectY;
    unsigned int _matchingStyleAttributeKey;
    int _matchingStyleAttributeValue;
    NSString *_name;
    unsigned int _quadIndex;
    int _size;
    struct {
        unsigned int matchingStyleAttributeLongValue:1;
        unsigned int anchorPointX:1;
        unsigned int anchorPointY:1;
        unsigned int iconRectHeight:1;
        unsigned int iconRectWidth:1;
        unsigned int iconRectX:1;
        unsigned int iconRectY:1;
        unsigned int matchingStyleAttributeKey:1;
        unsigned int matchingStyleAttributeValue:1;
        unsigned int size:1;
    } _has;
}

@property(nonatomic) unsigned long long matchingStyleAttributeLongValue; // @synthesize matchingStyleAttributeLongValue=_matchingStyleAttributeLongValue;
@property(nonatomic) int matchingStyleAttributeValue; // @synthesize matchingStyleAttributeValue=_matchingStyleAttributeValue;
@property(nonatomic) unsigned int matchingStyleAttributeKey; // @synthesize matchingStyleAttributeKey=_matchingStyleAttributeKey;
@property(nonatomic) unsigned int iconRectHeight; // @synthesize iconRectHeight=_iconRectHeight;
@property(nonatomic) unsigned int iconRectWidth; // @synthesize iconRectWidth=_iconRectWidth;
@property(nonatomic) unsigned int iconRectY; // @synthesize iconRectY=_iconRectY;
@property(nonatomic) unsigned int iconRectX; // @synthesize iconRectX=_iconRectX;
@property(nonatomic) unsigned int anchorPointY; // @synthesize anchorPointY=_anchorPointY;
@property(nonatomic) unsigned int anchorPointX; // @synthesize anchorPointX=_anchorPointX;
@property(nonatomic) unsigned int quadIndex; // @synthesize quadIndex=_quadIndex;
@property(nonatomic) unsigned int atlasIndex; // @synthesize atlasIndex=_atlasIndex;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasSize;
@property(nonatomic) int size; // @synthesize size=_size;
@property(nonatomic) _Bool hasMatchingStyleAttributeLongValue;
@property(nonatomic) _Bool hasMatchingStyleAttributeValue;
@property(nonatomic) _Bool hasMatchingStyleAttributeKey;
@property(nonatomic) _Bool hasIconRectHeight;
@property(nonatomic) _Bool hasIconRectWidth;
@property(nonatomic) _Bool hasIconRectY;
@property(nonatomic) _Bool hasIconRectX;
@property(nonatomic) _Bool hasAnchorPointY;
@property(nonatomic) _Bool hasAnchorPointX;
@property(readonly, nonatomic) _Bool hasName;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPIconPack : PBCodable <NSCopying>
{
    NSMutableArray *_atlas;
    NSMutableArray *_icons;
    unsigned int _identifier;
}

@property(retain, nonatomic) NSMutableArray *icons; // @synthesize icons=_icons;
@property(retain, nonatomic) NSMutableArray *atlas; // @synthesize atlas=_atlas;
@property(nonatomic) unsigned int identifier; // @synthesize identifier=_identifier;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)iconsAtIndex:(unsigned long long)arg1;
- (unsigned long long)iconsCount;
- (void)addIcons:(id)arg1;
- (void)clearIcons;
- (id)atlasAtIndex:(unsigned long long)arg1;
- (unsigned long long)atlasCount;
- (void)addAtlas:(id)arg1;
- (void)clearAtlas;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPMatchingGraphNode : PBCodable <NSCopying>
{
    CDStruct_62a50c50 _attributeValues;
    CDStruct_9f2792e4 _nodeIndices;
    unsigned int _key;
    unsigned int _score;
    unsigned int _styleReference;
    CDStruct_629f0dde _has;
}

@property(nonatomic) unsigned int score; // @synthesize score=_score;
@property(nonatomic) unsigned int styleReference; // @synthesize styleReference=_styleReference;
@property(nonatomic) unsigned int key; // @synthesize key=_key;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasStyleReference;
- (void)setNodeIndices:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)nodeIndicesAtIndex:(unsigned long long)arg1;
- (void)addNodeIndices:(unsigned int)arg1;
- (void)clearNodeIndices;
@property(readonly, nonatomic) unsigned int *nodeIndices;
@property(readonly, nonatomic) unsigned long long nodeIndicesCount;
- (void)setAttributeValues:(unsigned long long *)arg1 count:(unsigned long long)arg2;
- (unsigned long long)attributeValuesAtIndex:(unsigned long long)arg1;
- (void)addAttributeValues:(unsigned long long)arg1;
- (void)clearAttributeValues;
@property(readonly, nonatomic) unsigned long long *attributeValues;
@property(readonly, nonatomic) unsigned long long attributeValuesCount;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPMatchingPair : PBCodable <NSCopying>
{
    unsigned long long _attributeValue;
    VKPMatchingTree *_subTree;
}

@property(retain, nonatomic) VKPMatchingTree *subTree; // @synthesize subTree=_subTree;
@property(nonatomic) unsigned long long attributeValue; // @synthesize attributeValue=_attributeValue;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPMatchingTree : PBCodable <NSCopying>
{
    unsigned int _key;
    unsigned int _score;
    unsigned int _styleReference;
    NSMutableArray *_subTrees;
    CDStruct_629f0dde _has;
}

@property(nonatomic) unsigned int score; // @synthesize score=_score;
@property(nonatomic) unsigned int styleReference; // @synthesize styleReference=_styleReference;
@property(retain, nonatomic) NSMutableArray *subTrees; // @synthesize subTrees=_subTrees;
@property(nonatomic) unsigned int key; // @synthesize key=_key;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasStyleReference;
- (id)subTreeAtIndex:(unsigned long long)arg1;
- (unsigned long long)subTreesCount;
- (void)addSubTree:(id)arg1;
- (void)clearSubTrees;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPOIIconGenerator : NSObject
{
}

+ (id)sharedGenerator;
- (id)newIconWithGlyph:(struct CGImage *)arg1 style:(CDStruct_44d855de *)arg2 scale:(double)arg3;
- (struct CGSize)imageSizeForStyle:(CDStruct_44d855de *)arg1 scale:(double)arg2;
- (id)keyForName:(id)arg1 style:(CDStruct_44d855de *)arg2 size:(long long)arg3;
- (_Bool)canHandleStyle:(CDStruct_44d855de *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKPOILabelTileSource : VKLabelTileSource
{
}

- (unsigned char)_labelTileType;

@end

__attribute__((visibility("hidden")))
@interface VKPSheet : PBCodable <NSCopying>
{
    VKPGlobalProperties *_globalProperties;
    unsigned int _mapTypeSupport;
    NSMutableArray *_matchingGraphNodes;
    VKPMatchingTree *_matchingTree;
    unsigned int _matchingTreeVersion;
    NSMutableArray *_styles;
    unsigned int _version;
    struct {
        unsigned int mapTypeSupport:1;
        unsigned int matchingTreeVersion:1;
        unsigned int version:1;
    } _has;
}

@property(nonatomic) unsigned int mapTypeSupport; // @synthesize mapTypeSupport=_mapTypeSupport;
@property(retain, nonatomic) NSMutableArray *matchingGraphNodes; // @synthesize matchingGraphNodes=_matchingGraphNodes;
@property(nonatomic) unsigned int matchingTreeVersion; // @synthesize matchingTreeVersion=_matchingTreeVersion;
@property(retain, nonatomic) VKPMatchingTree *matchingTree; // @synthesize matchingTree=_matchingTree;
@property(retain, nonatomic) VKPGlobalProperties *globalProperties; // @synthesize globalProperties=_globalProperties;
@property(nonatomic) unsigned int version; // @synthesize version=_version;
@property(retain, nonatomic) NSMutableArray *styles; // @synthesize styles=_styles;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasMapTypeSupport;
- (id)matchingGraphNodesAtIndex:(unsigned long long)arg1;
- (unsigned long long)matchingGraphNodesCount;
- (void)addMatchingGraphNodes:(id)arg1;
- (void)clearMatchingGraphNodes;
@property(nonatomic) _Bool hasMatchingTreeVersion;
@property(readonly, nonatomic) _Bool hasMatchingTree;
@property(readonly, nonatomic) _Bool hasGlobalProperties;
@property(nonatomic) _Bool hasVersion;
- (id)styleAtIndex:(unsigned long long)arg1;
- (unsigned long long)stylesCount;
- (void)addStyle:(id)arg1;
- (void)clearStyles;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPShield : PBCodable <NSCopying>
{
    VKPGenericShieldStyleInfo *_genericShieldStyleInfo;
    NSString *_identifier;
    NSMutableArray *_variants;
}

@property(retain, nonatomic) VKPGenericShieldStyleInfo *genericShieldStyleInfo; // @synthesize genericShieldStyleInfo=_genericShieldStyleInfo;
@property(retain, nonatomic) NSMutableArray *variants; // @synthesize variants=_variants;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasGenericShieldStyleInfo;
- (id)variantsAtIndex:(unsigned long long)arg1;
- (unsigned long long)variantsCount;
- (void)addVariants:(id)arg1;
- (void)clearVariants;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPShieldIndex : PBCodable <NSCopying>
{
    NSMutableArray *_entries;
    NSMutableArray *_textEntries;
}

@property(retain, nonatomic) NSMutableArray *textEntries; // @synthesize textEntries=_textEntries;
@property(retain, nonatomic) NSMutableArray *entries; // @synthesize entries=_entries;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)textEntriesAtIndex:(unsigned long long)arg1;
- (unsigned long long)textEntriesCount;
- (void)addTextEntries:(id)arg1;
- (void)clearTextEntries;
- (id)entriesAtIndex:(unsigned long long)arg1;
- (unsigned long long)entriesCount;
- (void)addEntries:(id)arg1;
- (void)clearEntries;
- (void)dealloc;
- (id)defaultArtworkIdentifierForFeatureType:(int)arg1;
- (id)artworkIdentifierForShieldType:(long long)arg1 textSpecificIdentifiers:(id *)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKPShieldIndexEntry : PBCodable <NSCopying>
{
    CDStruct_95bda58d _defaultForFeatureTypes;
    CDStruct_95bda58d _shieldTypes;
    NSString *_artworkIdentifier;
}

@property(retain, nonatomic) NSString *artworkIdentifier; // @synthesize artworkIdentifier=_artworkIdentifier;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (void)setDefaultForFeatureTypes:(int *)arg1 count:(unsigned long long)arg2;
- (int)defaultForFeatureTypeAtIndex:(unsigned long long)arg1;
- (void)addDefaultForFeatureType:(int)arg1;
- (void)clearDefaultForFeatureTypes;
@property(readonly, nonatomic) int *defaultForFeatureTypes;
@property(readonly, nonatomic) unsigned long long defaultForFeatureTypesCount;
- (void)setShieldTypes:(int *)arg1 count:(unsigned long long)arg2;
- (int)shieldTypesAtIndex:(unsigned long long)arg1;
- (void)addShieldTypes:(int)arg1;
- (void)clearShieldTypes;
@property(readonly, nonatomic) int *shieldTypes;
@property(readonly, nonatomic) unsigned long long shieldTypesCount;
@property(readonly, nonatomic) _Bool hasArtworkIdentifier;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPShieldIndexTextEntry : PBCodable <NSCopying>
{
    NSString *_artworkIdentifier;
    NSMutableArray *_shieldTexts;
    int _shieldType;
    struct {
        unsigned int shieldType:1;
    } _has;
}

@property(retain, nonatomic) NSMutableArray *shieldTexts; // @synthesize shieldTexts=_shieldTexts;
@property(nonatomic) int shieldType; // @synthesize shieldType=_shieldType;
@property(retain, nonatomic) NSString *artworkIdentifier; // @synthesize artworkIdentifier=_artworkIdentifier;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)shieldTextAtIndex:(unsigned long long)arg1;
- (unsigned long long)shieldTextsCount;
- (void)addShieldText:(id)arg1;
- (void)clearShieldTexts;
@property(nonatomic) _Bool hasShieldType;
@property(readonly, nonatomic) _Bool hasArtworkIdentifier;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPShieldPack : PBCodable <NSCopying>
{
    NSMutableArray *_atlas;
    NSMutableArray *_shields;
}

@property(retain, nonatomic) NSMutableArray *shields; // @synthesize shields=_shields;
@property(retain, nonatomic) NSMutableArray *atlas; // @synthesize atlas=_atlas;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)shieldsAtIndex:(unsigned long long)arg1;
- (unsigned long long)shieldsCount;
- (void)addShields:(id)arg1;
- (void)clearShields;
- (id)atlasAtIndex:(unsigned long long)arg1;
- (unsigned long long)atlasCount;
- (void)addAtlas:(id)arg1;
- (void)clearAtlas;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPShieldVariant : PBCodable <NSCopying>
{
    CDStruct_79d0722e _textShadow;
    CDStruct_033e8ed6 *_layers;
    unsigned long long _layersCount;
    unsigned long long _layersSpace;
    CDStruct_f43f0670 _textStroke;
    CDStruct_58ec0031 _fontColor;
    CDStruct_fae3dc92 _centerPoints;
    unsigned int _atlasIndex;
    unsigned int _backgroundColor;
    unsigned int _borderColor;
    float _capWidthLeft;
    float _capWidthRight;
    float _centerOffsetX;
    NSString *_fontName;
    float _fontSize;
    unsigned int _maxDigits;
    unsigned int _minDigits;
    NSString *_nonDigitFontName;
    float _nonDigitFontSize;
    float _paddingLeft;
    float _paddingRight;
    unsigned int _quadIndex;
    float _textBaseline;
    int _textMaskColor;
    struct {
        unsigned int textShadow:1;
        unsigned int textStroke:1;
        unsigned int fontColor:1;
        unsigned int atlasIndex:1;
        unsigned int backgroundColor:1;
        unsigned int borderColor:1;
        unsigned int capWidthLeft:1;
        unsigned int capWidthRight:1;
        unsigned int centerOffsetX:1;
        unsigned int fontSize:1;
        unsigned int maxDigits:1;
        unsigned int minDigits:1;
        unsigned int nonDigitFontSize:1;
        unsigned int paddingLeft:1;
        unsigned int paddingRight:1;
        unsigned int quadIndex:1;
        unsigned int textBaseline:1;
        unsigned int textMaskColor:1;
    } _has;
}

@property(nonatomic) int textMaskColor; // @synthesize textMaskColor=_textMaskColor;
@property(nonatomic) float paddingRight; // @synthesize paddingRight=_paddingRight;
@property(nonatomic) float paddingLeft; // @synthesize paddingLeft=_paddingLeft;
@property(nonatomic) float capWidthRight; // @synthesize capWidthRight=_capWidthRight;
@property(nonatomic) float capWidthLeft; // @synthesize capWidthLeft=_capWidthLeft;
@property(nonatomic) unsigned int borderColor; // @synthesize borderColor=_borderColor;
@property(nonatomic) unsigned int backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(nonatomic) float nonDigitFontSize; // @synthesize nonDigitFontSize=_nonDigitFontSize;
@property(retain, nonatomic) NSString *nonDigitFontName; // @synthesize nonDigitFontName=_nonDigitFontName;
@property(nonatomic) CDStruct_79d0722e textShadow; // @synthesize textShadow=_textShadow;
@property(nonatomic) CDStruct_f43f0670 textStroke; // @synthesize textStroke=_textStroke;
@property(nonatomic) CDStruct_58ec0031 fontColor; // @synthesize fontColor=_fontColor;
@property(nonatomic) float fontSize; // @synthesize fontSize=_fontSize;
@property(retain, nonatomic) NSString *fontName; // @synthesize fontName=_fontName;
@property(nonatomic) float centerOffsetX; // @synthesize centerOffsetX=_centerOffsetX;
@property(nonatomic) float textBaseline; // @synthesize textBaseline=_textBaseline;
@property(nonatomic) unsigned int maxDigits; // @synthesize maxDigits=_maxDigits;
@property(nonatomic) unsigned int minDigits; // @synthesize minDigits=_minDigits;
@property(nonatomic) unsigned int quadIndex; // @synthesize quadIndex=_quadIndex;
@property(nonatomic) unsigned int atlasIndex; // @synthesize atlasIndex=_atlasIndex;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasTextMaskColor;
@property(nonatomic) _Bool hasPaddingRight;
@property(nonatomic) _Bool hasPaddingLeft;
@property(nonatomic) _Bool hasCapWidthRight;
@property(nonatomic) _Bool hasCapWidthLeft;
@property(nonatomic) _Bool hasBorderColor;
@property(nonatomic) _Bool hasBackgroundColor;
- (void)setLayers:(CDStruct_033e8ed6 *)arg1 count:(unsigned long long)arg2;
- (CDStruct_033e8ed6)layerAtIndex:(unsigned long long)arg1;
- (void)addLayer:(CDStruct_033e8ed6)arg1;
- (void)clearLayers;
@property(readonly, nonatomic) CDStruct_033e8ed6 *layers;
@property(readonly, nonatomic) unsigned long long layersCount;
- (void)setCenterPoints:(float *)arg1 count:(unsigned long long)arg2;
- (float)centerPointAtIndex:(unsigned long long)arg1;
- (void)addCenterPoint:(float)arg1;
- (void)clearCenterPoints;
@property(readonly, nonatomic) float *centerPoints;
@property(readonly, nonatomic) unsigned long long centerPointsCount;
@property(nonatomic) _Bool hasNonDigitFontSize;
@property(readonly, nonatomic) _Bool hasNonDigitFontName;
@property(nonatomic) _Bool hasTextShadow;
@property(nonatomic) _Bool hasTextStroke;
@property(nonatomic) _Bool hasFontColor;
@property(nonatomic) _Bool hasFontSize;
@property(readonly, nonatomic) _Bool hasFontName;
@property(nonatomic) _Bool hasCenterOffsetX;
@property(nonatomic) _Bool hasTextBaseline;
@property(nonatomic) _Bool hasMaxDigits;
@property(nonatomic) _Bool hasMinDigits;
@property(nonatomic) _Bool hasQuadIndex;
@property(nonatomic) _Bool hasAtlasIndex;
- (void)dealloc;
- (struct CGImage *)newImageWithTextureAtlases:(id)arg1 atlasToImageCache:(id)arg2 contentScale:(double)arg3 colors:(CDStruct_aed172a0 *)arg4;
- (Matrix_5173352a)_colorForMaskColor:(int)arg1 colors:(CDStruct_aed172a0 *)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKPStyle : PBCodable <NSCopying>
{
    CDStruct_9f2792e4 _inherits;
    NSMutableArray *_attributes;
    NSData *_contents;
    NSString *_name;
    VKPStyleProperties *_properties;
    NSMutableArray *_zooms;
}

@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSData *contents; // @synthesize contents=_contents;
@property(retain, nonatomic) NSMutableArray *zooms; // @synthesize zooms=_zooms;
@property(retain, nonatomic) VKPStyleProperties *properties; // @synthesize properties=_properties;
@property(retain, nonatomic) NSMutableArray *attributes; // @synthesize attributes=_attributes;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasName;
@property(readonly, nonatomic) _Bool hasContents;
- (id)zoomsAtIndex:(unsigned long long)arg1;
- (unsigned long long)zoomsCount;
- (void)addZooms:(id)arg1;
- (void)clearZooms;
@property(readonly, nonatomic) _Bool hasProperties;
- (id)attributesAtIndex:(unsigned long long)arg1;
- (unsigned long long)attributesCount;
- (void)addAttributes:(id)arg1;
- (void)clearAttributes;
- (void)setInherits:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)inheritAtIndex:(unsigned long long)arg1;
- (void)addInherit:(unsigned int)arg1;
- (void)clearInherits;
@property(readonly, nonatomic) unsigned int *inherits;
@property(readonly, nonatomic) unsigned long long inheritsCount;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPStyleAttribute : PBCodable <NSCopying>
{
    CDStruct_95bda58d _intValues;
    CDStruct_62a50c50 _longIntValues;
    int _key;
    int _score;
    struct {
        unsigned int score:1;
    } _has;
}

@property(nonatomic) int key; // @synthesize key=_key;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (void)setLongIntValues:(unsigned long long *)arg1 count:(unsigned long long)arg2;
- (unsigned long long)longIntValueAtIndex:(unsigned long long)arg1;
- (void)addLongIntValue:(unsigned long long)arg1;
- (void)clearLongIntValues;
@property(readonly, nonatomic) unsigned long long *longIntValues;
@property(readonly, nonatomic) unsigned long long longIntValuesCount;
@property(nonatomic) _Bool hasScore;
@property(nonatomic) int score; // @synthesize score=_score;
- (void)setIntValues:(int *)arg1 count:(unsigned long long)arg2;
- (int)intValueAtIndex:(unsigned long long)arg1;
- (void)addIntValue:(int)arg1;
- (void)clearIntValues;
@property(readonly, nonatomic) int *intValues;
@property(readonly, nonatomic) unsigned long long intValuesCount;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPStyleContents : PBCodable <NSCopying>
{
    VKPStyleProperties *_properties;
    NSMutableArray *_zooms;
}

@property(retain, nonatomic) NSMutableArray *zooms; // @synthesize zooms=_zooms;
@property(retain, nonatomic) VKPStyleProperties *properties; // @synthesize properties=_properties;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)zoomsAtIndex:(unsigned long long)arg1;
- (unsigned long long)zoomsCount;
- (void)addZooms:(id)arg1;
- (void)clearZooms;
@property(readonly, nonatomic) _Bool hasProperties;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPStyleProperties : PBCodable <NSCopying>
{
    CDStruct_fae3dc92 _dropShadowOffsets;
    CDStruct_fae3dc92 _fillDashPatterns;
    CDStruct_fae3dc92 _genericShieldDropShadowOffsets;
    CDStruct_fae3dc92 _labelIconDropShadowOffsets;
    CDStruct_9f2792e4 _labelIconGradients;
    CDStruct_fae3dc92 _strokeDashPatterns;
    unsigned int _alternateFillColor;
    unsigned int _arrowCollisionOrder;
    float _arrowCollisionRank;
    unsigned int _arrowColor;
    unsigned int _arrowHaloColor;
    float _arrowHeight;
    float _arrowHeightLarge;
    float _arrowHeightMedium;
    float _arrowHeightSmall;
    float _arrowHeightXLarge;
    float _arrowHeightXXLarge;
    float _arrowMinZoom;
    float _arrowSelectedMinZoom;
    float _arrowSpacing;
    float _brightness;
    unsigned int _buildingFacadeColor;
    unsigned int _buildingFlatColor;
    unsigned int _buildingLandmarkColor;
    unsigned int _buildingOutlineColor;
    int _buildingRoofStyle;
    unsigned int _buildingStrokeColor3d;
    float _buildingStrokeWidth3d;
    unsigned int _buildingTopColor;
    unsigned int _casingsColor;
    float _casingsHeight;
    float _casingsShadowRamp;
    float _casingsShadowWidth;
    float _casingsStrokeColor;
    float _casingsStrokeWidth;
    float _casingsWidth;
    unsigned int _curbColor;
    unsigned int _dropShadowColor;
    unsigned int _fancyCasingsColor;
    unsigned int _fancyCasingsStrokeColor;
    float _fancyCasingsStrokeWidth;
    float _fancyCasingsWidth;
    unsigned int _fillColor;
    NSString *_fillTexture;
    int _fillTextureBlendMode;
    float _fillTextureOpacity;
    unsigned int _fillZIndex;
    unsigned int _genericShieldBackgroundColor;
    unsigned int _genericShieldBorderColor;
    unsigned int _genericShieldDropShadowColor;
    float _genericShieldDropShadowSize;
    unsigned int _genericShieldHaloColor;
    float _genericShieldHaloSize;
    int _genericShieldStyle;
    unsigned int _genericShieldTextColor;
    unsigned int _glossColor;
    unsigned int _horizonColor;
    unsigned int _innerGlowColor;
    float _innerGlowRadius;
    float _insetShadowAngle;
    unsigned int _insetShadowColor;
    float _insetShadowHeight;
    int _labelAlternateTextPositions;
    int _labelAnnotationIconSize;
    float _labelAnnotationTextSize;
    int _labelArrowLayer;
    unsigned int _labelClass;
    unsigned int _labelCollisionOrder;
    float _labelCollisionRank;
    unsigned int _labelColor;
    unsigned int _labelDedupeRank;
    int _labelDefaultTextPosition;
    int _labelDiagonalPositionAnchor;
    float _labelDiagonalPositionHorizontalMargin;
    float _labelDiagonalPositionVerticalMargin;
    float _labelFontExpansion;
    float _labelFontExpansionLarge;
    float _labelFontExpansionMedium;
    float _labelFontExpansionSmall;
    float _labelFontExpansionXLarge;
    float _labelFontExpansionXXLarge;
    NSString *_labelFontFamily;
    unsigned int _labelHaloColor;
    float _labelHaloSize;
    float _labelHaloSizeLarge;
    float _labelHaloSizeMedium;
    float _labelHaloSizeSmall;
    float _labelHaloSizeXLarge;
    float _labelHaloSizeXXLarge;
    float _labelHeight;
    int _labelHeightCurve;
    float _labelHeightCurveLimit;
    float _labelHeightLarge;
    int _labelHeightLargeCurve;
    float _labelHeightLargeCurveLimit;
    float _labelHeightMedium;
    int _labelHeightMediumCurve;
    float _labelHeightMediumCurveLimit;
    float _labelHeightSmall;
    int _labelHeightSmallCurve;
    float _labelHeightSmallCurveLimit;
    float _labelHeightXLarge;
    int _labelHeightXLargeCurve;
    float _labelHeightXLargeCurveLimit;
    float _labelHeightXXLarge;
    int _labelHeightXXLargeCurve;
    float _labelHeightXXLargeCurveLimit;
    NSString *_labelIcon;
    unsigned int _labelIconBadgeColor;
    int _labelIconBadgeLightBlendMode;
    unsigned int _labelIconBadgeLightColor;
    float _labelIconBevelAmount;
    float _labelIconCornerRadius;
    unsigned int _labelIconDropShadowColor;
    float _labelIconDropShadowSize;
    int _labelIconGlowBlendMode;
    NSString *_labelIconGlowTexture;
    int _labelIconGlyphBlendMode;
    unsigned int _labelIconGlyphColor;
    int _labelIconGlyphStyle;
    unsigned int _labelIconHaloColor;
    float _labelIconHaloSize;
    float _labelIconSaturation;
    float _labelIconScale;
    int _labelIconSize;
    int _labelIconSource;
    int _labelIconSourceMultipoi;
    int _labelIconStyle;
    int _labelLayer;
    NSString *_labelLayoutIcon;
    int _labelLayoutStyle;
    unsigned int _labelLineWrap;
    unsigned int _labelLineWrapLogograms;
    float _labelMultiShieldGap;
    float _labelOffset;
    float _labelOffsetLarge;
    float _labelOffsetMedium;
    int _labelOffsetPosition;
    float _labelOffsetSmall;
    float _labelOffsetXLarge;
    float _labelOffsetXXLarge;
    float _labelParallaxHeight;
    int _labelPositioningMode;
    int _labelRoadCrossingThreshold;
    float _labelRoadRank;
    float _labelRoadWithShieldGap;
    float _labelRoadWithShieldSpacing;
    NSString *_labelShield;
    float _labelShieldRank;
    float _labelShieldSpacing;
    float _labelSpacing;
    float _labelSpacingLarge;
    float _labelSpacingMedium;
    float _labelSpacingSmall;
    float _labelSpacingXLarge;
    float _labelSpacingXXLarge;
    int _labelTextAlternateOrientations;
    int _labelTextOrientation;
    int _labelTextVisibility;
    float _labelTiltLimit;
    float _layerShadowsRamp;
    float _layerShadowsTaper;
    float _layerShadowsWidth;
    unsigned int _lineColor;
    int _lineDrawStyle;
    float _margin;
    float _marginBottom;
    float _marginLeft;
    float _marginRight;
    float _marginTop;
    float _maxScale;
    float _navLabelSignBrightness;
    NSString *_obscuredFillTexture;
    unsigned int _outerGlowColor;
    float _outerGlowRadius;
    unsigned int _outerStrokeColor;
    float _outerStrokeWidth;
    float _padding;
    float _paddingBottom;
    float _paddingLeft;
    float _paddingRight;
    float _paddingTop;
    float _patternScaler;
    float _patternScalerQuantizationFactor;
    float _poiIconOpacity;
    int _polygonType;
    float _puckArrowBrightness;
    unsigned int _puckArrowColor;
    unsigned int _puckArrowColorStale;
    float _puckArrowShadowBrightness;
    float _puckCircleBrightness;
    float _puckDomeBrightness;
    float _puckOffset;
    float _puckRimBrightness;
    float _puckSize;
    int _railroadPattern;
    float _routeEnlargementScale;
    float _routeEnlargementStartZoom;
    NSString *_secondFillTexture;
    int _secondFillTextureBlendMode;
    float _secondFillTextureOpacity;
    unsigned int _shieldCollisionOrder;
    float _shieldCollisionRank;
    int _shieldSize;
    NSString *_shieldStyle;
    float _shieldTiltLimit;
    float _spacing;
    unsigned int _strokeColor;
    float _strokeWidth;
    int _strokeWidthCurve;
    float _strokeWidthCurveLimit;
    NSString *_thirdFillTexture;
    int _thirdFillTextureBlendMode;
    float _thirdFillTextureOpacity;
    float _trafficAnimationBaseSpeed;
    float _trafficAnitialiasingOffset;
    float _trafficAnitialiasingSlope;
    VKPTrafficStyle *_trafficFast;
    float _trafficGlowFadingEnd;
    float _trafficGlowFadingStart;
    float _trafficIncidentAccidentMinZ;
    float _trafficIncidentBrightness;
    float _trafficIncidentConstructionMinZ;
    float _trafficIncidentEventMinZ;
    float _trafficIncidentHazardMinZ;
    float _trafficIncidentLaneClosureMinZ;
    float _trafficIncidentRampClosureMinZ;
    float _trafficIncidentRoadClosureMinZ;
    float _trafficIncidentUnknownMinZ;
    VKPTrafficStyle *_trafficMedium;
    float _trafficShiftEnd;
    float _trafficShiftStart;
    VKPTrafficStyle *_trafficSlow;
    VKPTrafficStyle *_trafficStopped;
    float _trafficWidth;
    unsigned int _travelledColor;
    NSString *_travelledFillTexture;
    float _width;
    int _widthCurve;
    float _widthCurveLimit;
    float _widthDropoff;
    unsigned int _zIndex;
    _Bool _arrowVisible;
    _Bool _buildingOutlineVisible;
    _Bool _casingsVisible;
    _Bool _fancyCasingsVisible;
    _Bool _fillColorInterpolate;
    _Bool _labelRaisedInitial;
    _Bool _labelSelectable;
    _Bool _labelSmallCaps;
    _Bool _labelUpcase;
    _Bool _layerShadowsVisible;
    _Bool _navLabelShieldVisible;
    _Bool _navLabelSignVisible;
    _Bool _navLabelSuppressSignIfHaveShield;
    _Bool _onlyShowIfTappable;
    _Bool _poiDisabledLabelIconVisible;
    _Bool _poiDisabledLabelTextVisible;
    _Bool _renderEndCaps;
    _Bool _shieldVisible;
    _Bool _showLabelAsShield;
    _Bool _showShieldTextAsLabel;
    _Bool _simpleLine;
    _Bool _strokeColorInterpolate;
    _Bool _trafficVisible;
    _Bool _visible;
    _Bool _visibleBehindBuildings;
    _Bool _yieldsToOnscreenLabels;
    struct {
        unsigned int alternateFillColor:1;
        unsigned int arrowCollisionOrder:1;
        unsigned int arrowCollisionRank:1;
        unsigned int arrowColor:1;
        unsigned int arrowHaloColor:1;
        unsigned int arrowHeight:1;
        unsigned int arrowHeightLarge:1;
        unsigned int arrowHeightMedium:1;
        unsigned int arrowHeightSmall:1;
        unsigned int arrowHeightXLarge:1;
        unsigned int arrowHeightXXLarge:1;
        unsigned int arrowMinZoom:1;
        unsigned int arrowSelectedMinZoom:1;
        unsigned int arrowSpacing:1;
        unsigned int brightness:1;
        unsigned int buildingFacadeColor:1;
        unsigned int buildingFlatColor:1;
        unsigned int buildingLandmarkColor:1;
        unsigned int buildingOutlineColor:1;
        unsigned int buildingRoofStyle:1;
        unsigned int buildingStrokeColor3d:1;
        unsigned int buildingStrokeWidth3d:1;
        unsigned int buildingTopColor:1;
        unsigned int casingsColor:1;
        unsigned int casingsHeight:1;
        unsigned int casingsShadowRamp:1;
        unsigned int casingsShadowWidth:1;
        unsigned int casingsStrokeColor:1;
        unsigned int casingsStrokeWidth:1;
        unsigned int casingsWidth:1;
        unsigned int curbColor:1;
        unsigned int dropShadowColor:1;
        unsigned int fancyCasingsColor:1;
        unsigned int fancyCasingsStrokeColor:1;
        unsigned int fancyCasingsStrokeWidth:1;
        unsigned int fancyCasingsWidth:1;
        unsigned int fillColor:1;
        unsigned int fillTextureBlendMode:1;
        unsigned int fillTextureOpacity:1;
        unsigned int fillZIndex:1;
        unsigned int genericShieldBackgroundColor:1;
        unsigned int genericShieldBorderColor:1;
        unsigned int genericShieldDropShadowColor:1;
        unsigned int genericShieldDropShadowSize:1;
        unsigned int genericShieldHaloColor:1;
        unsigned int genericShieldHaloSize:1;
        unsigned int genericShieldStyle:1;
        unsigned int genericShieldTextColor:1;
        unsigned int glossColor:1;
        unsigned int horizonColor:1;
        unsigned int innerGlowColor:1;
        unsigned int innerGlowRadius:1;
        unsigned int insetShadowAngle:1;
        unsigned int insetShadowColor:1;
        unsigned int insetShadowHeight:1;
        unsigned int labelAlternateTextPositions:1;
        unsigned int labelAnnotationIconSize:1;
        unsigned int labelAnnotationTextSize:1;
        unsigned int labelArrowLayer:1;
        unsigned int labelClass:1;
        unsigned int labelCollisionOrder:1;
        unsigned int labelCollisionRank:1;
        unsigned int labelColor:1;
        unsigned int labelDedupeRank:1;
        unsigned int labelDefaultTextPosition:1;
        unsigned int labelDiagonalPositionAnchor:1;
        unsigned int labelDiagonalPositionHorizontalMargin:1;
        unsigned int labelDiagonalPositionVerticalMargin:1;
        unsigned int labelFontExpansion:1;
        unsigned int labelFontExpansionLarge:1;
        unsigned int labelFontExpansionMedium:1;
        unsigned int labelFontExpansionSmall:1;
        unsigned int labelFontExpansionXLarge:1;
        unsigned int labelFontExpansionXXLarge:1;
        unsigned int labelHaloColor:1;
        unsigned int labelHaloSize:1;
        unsigned int labelHaloSizeLarge:1;
        unsigned int labelHaloSizeMedium:1;
        unsigned int labelHaloSizeSmall:1;
        unsigned int labelHaloSizeXLarge:1;
        unsigned int labelHaloSizeXXLarge:1;
        unsigned int labelHeight:1;
        unsigned int labelHeightCurve:1;
        unsigned int labelHeightCurveLimit:1;
        unsigned int labelHeightLarge:1;
        unsigned int labelHeightLargeCurve:1;
        unsigned int labelHeightLargeCurveLimit:1;
        unsigned int labelHeightMedium:1;
        unsigned int labelHeightMediumCurve:1;
        unsigned int labelHeightMediumCurveLimit:1;
        unsigned int labelHeightSmall:1;
        unsigned int labelHeightSmallCurve:1;
        unsigned int labelHeightSmallCurveLimit:1;
        unsigned int labelHeightXLarge:1;
        unsigned int labelHeightXLargeCurve:1;
        unsigned int labelHeightXLargeCurveLimit:1;
        unsigned int labelHeightXXLarge:1;
        unsigned int labelHeightXXLargeCurve:1;
        unsigned int labelHeightXXLargeCurveLimit:1;
        unsigned int labelIconBadgeColor:1;
        unsigned int labelIconBadgeLightBlendMode:1;
        unsigned int labelIconBadgeLightColor:1;
        unsigned int labelIconBevelAmount:1;
        unsigned int labelIconCornerRadius:1;
        unsigned int labelIconDropShadowColor:1;
        unsigned int labelIconDropShadowSize:1;
        unsigned int labelIconGlowBlendMode:1;
        unsigned int labelIconGlyphBlendMode:1;
        unsigned int labelIconGlyphColor:1;
        unsigned int labelIconGlyphStyle:1;
        unsigned int labelIconHaloColor:1;
        unsigned int labelIconHaloSize:1;
        unsigned int labelIconSaturation:1;
        unsigned int labelIconScale:1;
        unsigned int labelIconSize:1;
        unsigned int labelIconSource:1;
        unsigned int labelIconSourceMultipoi:1;
        unsigned int labelIconStyle:1;
        unsigned int labelLayer:1;
        unsigned int labelLayoutStyle:1;
        unsigned int labelLineWrap:1;
        unsigned int labelLineWrapLogograms:1;
        unsigned int labelMultiShieldGap:1;
        unsigned int labelOffset:1;
        unsigned int labelOffsetLarge:1;
        unsigned int labelOffsetMedium:1;
        unsigned int labelOffsetPosition:1;
        unsigned int labelOffsetSmall:1;
        unsigned int labelOffsetXLarge:1;
        unsigned int labelOffsetXXLarge:1;
        unsigned int labelParallaxHeight:1;
        unsigned int labelPositioningMode:1;
        unsigned int labelRoadCrossingThreshold:1;
        unsigned int labelRoadRank:1;
        unsigned int labelRoadWithShieldGap:1;
        unsigned int labelRoadWithShieldSpacing:1;
        unsigned int labelShieldRank:1;
        unsigned int labelShieldSpacing:1;
        unsigned int labelSpacing:1;
        unsigned int labelSpacingLarge:1;
        unsigned int labelSpacingMedium:1;
        unsigned int labelSpacingSmall:1;
        unsigned int labelSpacingXLarge:1;
        unsigned int labelSpacingXXLarge:1;
        unsigned int labelTextAlternateOrientations:1;
        unsigned int labelTextOrientation:1;
        unsigned int labelTextVisibility:1;
        unsigned int labelTiltLimit:1;
        unsigned int layerShadowsRamp:1;
        unsigned int layerShadowsTaper:1;
        unsigned int layerShadowsWidth:1;
        unsigned int lineColor:1;
        unsigned int lineDrawStyle:1;
        unsigned int margin:1;
        unsigned int marginBottom:1;
        unsigned int marginLeft:1;
        unsigned int marginRight:1;
        unsigned int marginTop:1;
        unsigned int maxScale:1;
        unsigned int navLabelSignBrightness:1;
        unsigned int outerGlowColor:1;
        unsigned int outerGlowRadius:1;
        unsigned int outerStrokeColor:1;
        unsigned int outerStrokeWidth:1;
        unsigned int padding:1;
        unsigned int paddingBottom:1;
        unsigned int paddingLeft:1;
        unsigned int paddingRight:1;
        unsigned int paddingTop:1;
        unsigned int patternScaler:1;
        unsigned int patternScalerQuantizationFactor:1;
        unsigned int poiIconOpacity:1;
        unsigned int polygonType:1;
        unsigned int puckArrowBrightness:1;
        unsigned int puckArrowColor:1;
        unsigned int puckArrowColorStale:1;
        unsigned int puckArrowShadowBrightness:1;
        unsigned int puckCircleBrightness:1;
        unsigned int puckDomeBrightness:1;
        unsigned int puckOffset:1;
        unsigned int puckRimBrightness:1;
        unsigned int puckSize:1;
        unsigned int railroadPattern:1;
        unsigned int routeEnlargementScale:1;
        unsigned int routeEnlargementStartZoom:1;
        unsigned int secondFillTextureBlendMode:1;
        unsigned int secondFillTextureOpacity:1;
        unsigned int shieldCollisionOrder:1;
        unsigned int shieldCollisionRank:1;
        unsigned int shieldSize:1;
        unsigned int shieldTiltLimit:1;
        unsigned int spacing:1;
        unsigned int strokeColor:1;
        unsigned int strokeWidth:1;
        unsigned int strokeWidthCurve:1;
        unsigned int strokeWidthCurveLimit:1;
        unsigned int thirdFillTextureBlendMode:1;
        unsigned int thirdFillTextureOpacity:1;
        unsigned int trafficAnimationBaseSpeed:1;
        unsigned int trafficAnitialiasingOffset:1;
        unsigned int trafficAnitialiasingSlope:1;
        unsigned int trafficGlowFadingEnd:1;
        unsigned int trafficGlowFadingStart:1;
        unsigned int trafficIncidentAccidentMinZ:1;
        unsigned int trafficIncidentBrightness:1;
        unsigned int trafficIncidentConstructionMinZ:1;
        unsigned int trafficIncidentEventMinZ:1;
        unsigned int trafficIncidentHazardMinZ:1;
        unsigned int trafficIncidentLaneClosureMinZ:1;
        unsigned int trafficIncidentRampClosureMinZ:1;
        unsigned int trafficIncidentRoadClosureMinZ:1;
        unsigned int trafficIncidentUnknownMinZ:1;
        unsigned int trafficShiftEnd:1;
        unsigned int trafficShiftStart:1;
        unsigned int trafficWidth:1;
        unsigned int travelledColor:1;
        unsigned int width:1;
        unsigned int widthCurve:1;
        unsigned int widthCurveLimit:1;
        unsigned int widthDropoff:1;
        unsigned int zIndex:1;
        unsigned int arrowVisible:1;
        unsigned int buildingOutlineVisible:1;
        unsigned int casingsVisible:1;
        unsigned int fancyCasingsVisible:1;
        unsigned int fillColorInterpolate:1;
        unsigned int labelRaisedInitial:1;
        unsigned int labelSelectable:1;
        unsigned int labelSmallCaps:1;
        unsigned int labelUpcase:1;
        unsigned int layerShadowsVisible:1;
        unsigned int navLabelShieldVisible:1;
        unsigned int navLabelSignVisible:1;
        unsigned int navLabelSuppressSignIfHaveShield:1;
        unsigned int onlyShowIfTappable:1;
        unsigned int poiDisabledLabelIconVisible:1;
        unsigned int poiDisabledLabelTextVisible:1;
        unsigned int renderEndCaps:1;
        unsigned int shieldVisible:1;
        unsigned int showLabelAsShield:1;
        unsigned int showShieldTextAsLabel:1;
        unsigned int simpleLine:1;
        unsigned int strokeColorInterpolate:1;
        unsigned int trafficVisible:1;
        unsigned int visible:1;
        unsigned int visibleBehindBuildings:1;
        unsigned int yieldsToOnscreenLabels:1;
    } _has;
}

@property(nonatomic) float spacing; // @synthesize spacing=_spacing;
@property(nonatomic) float trafficIncidentRampClosureMinZ; // @synthesize trafficIncidentRampClosureMinZ=_trafficIncidentRampClosureMinZ;
@property(nonatomic) float trafficIncidentLaneClosureMinZ; // @synthesize trafficIncidentLaneClosureMinZ=_trafficIncidentLaneClosureMinZ;
@property(nonatomic) float trafficIncidentHazardMinZ; // @synthesize trafficIncidentHazardMinZ=_trafficIncidentHazardMinZ;
@property(nonatomic) float trafficIncidentEventMinZ; // @synthesize trafficIncidentEventMinZ=_trafficIncidentEventMinZ;
@property(nonatomic) float trafficIncidentRoadClosureMinZ; // @synthesize trafficIncidentRoadClosureMinZ=_trafficIncidentRoadClosureMinZ;
@property(nonatomic) float trafficIncidentConstructionMinZ; // @synthesize trafficIncidentConstructionMinZ=_trafficIncidentConstructionMinZ;
@property(nonatomic) float trafficIncidentAccidentMinZ; // @synthesize trafficIncidentAccidentMinZ=_trafficIncidentAccidentMinZ;
@property(nonatomic) float trafficIncidentUnknownMinZ; // @synthesize trafficIncidentUnknownMinZ=_trafficIncidentUnknownMinZ;
@property(nonatomic) float puckSize; // @synthesize puckSize=_puckSize;
@property(nonatomic) unsigned int puckArrowColorStale; // @synthesize puckArrowColorStale=_puckArrowColorStale;
@property(nonatomic) unsigned int puckArrowColor; // @synthesize puckArrowColor=_puckArrowColor;
@property(nonatomic) float puckCircleBrightness; // @synthesize puckCircleBrightness=_puckCircleBrightness;
@property(nonatomic) float puckRimBrightness; // @synthesize puckRimBrightness=_puckRimBrightness;
@property(nonatomic) float puckArrowShadowBrightness; // @synthesize puckArrowShadowBrightness=_puckArrowShadowBrightness;
@property(nonatomic) float puckArrowBrightness; // @synthesize puckArrowBrightness=_puckArrowBrightness;
@property(nonatomic) float puckDomeBrightness; // @synthesize puckDomeBrightness=_puckDomeBrightness;
@property(nonatomic) float maxScale; // @synthesize maxScale=_maxScale;
@property(nonatomic) float routeEnlargementScale; // @synthesize routeEnlargementScale=_routeEnlargementScale;
@property(nonatomic) float routeEnlargementStartZoom; // @synthesize routeEnlargementStartZoom=_routeEnlargementStartZoom;
@property(retain, nonatomic) NSString *travelledFillTexture; // @synthesize travelledFillTexture=_travelledFillTexture;
@property(retain, nonatomic) NSString *obscuredFillTexture; // @synthesize obscuredFillTexture=_obscuredFillTexture;
@property(nonatomic) unsigned int glossColor; // @synthesize glossColor=_glossColor;
@property(nonatomic) unsigned int travelledColor; // @synthesize travelledColor=_travelledColor;
@property(nonatomic) float trafficAnitialiasingSlope; // @synthesize trafficAnitialiasingSlope=_trafficAnitialiasingSlope;
@property(nonatomic) float trafficAnitialiasingOffset; // @synthesize trafficAnitialiasingOffset=_trafficAnitialiasingOffset;
@property(nonatomic) unsigned int lineColor; // @synthesize lineColor=_lineColor;
@property(nonatomic) unsigned int horizonColor; // @synthesize horizonColor=_horizonColor;
@property(nonatomic) float labelOffset; // @synthesize labelOffset=_labelOffset;
@property(nonatomic) int labelOffsetPosition; // @synthesize labelOffsetPosition=_labelOffsetPosition;
@property(nonatomic) float labelDiagonalPositionHorizontalMargin; // @synthesize labelDiagonalPositionHorizontalMargin=_labelDiagonalPositionHorizontalMargin;
@property(nonatomic) int labelAlternateTextPositions; // @synthesize labelAlternateTextPositions=_labelAlternateTextPositions;
@property(nonatomic) int labelDefaultTextPosition; // @synthesize labelDefaultTextPosition=_labelDefaultTextPosition;
@property(nonatomic) int labelPositioningMode; // @synthesize labelPositioningMode=_labelPositioningMode;
@property(nonatomic) float labelOffsetXXLarge; // @synthesize labelOffsetXXLarge=_labelOffsetXXLarge;
@property(nonatomic) float arrowHeightXXLarge; // @synthesize arrowHeightXXLarge=_arrowHeightXXLarge;
@property(nonatomic) float labelSpacingXXLarge; // @synthesize labelSpacingXXLarge=_labelSpacingXXLarge;
@property(nonatomic) float labelFontExpansionXXLarge; // @synthesize labelFontExpansionXXLarge=_labelFontExpansionXXLarge;
@property(nonatomic) float labelHaloSizeXXLarge; // @synthesize labelHaloSizeXXLarge=_labelHaloSizeXXLarge;
@property(nonatomic) float labelHeightXXLargeCurveLimit; // @synthesize labelHeightXXLargeCurveLimit=_labelHeightXXLargeCurveLimit;
@property(nonatomic) int labelHeightXXLargeCurve; // @synthesize labelHeightXXLargeCurve=_labelHeightXXLargeCurve;
@property(nonatomic) float labelHeightXXLarge; // @synthesize labelHeightXXLarge=_labelHeightXXLarge;
@property(nonatomic) float labelOffsetXLarge; // @synthesize labelOffsetXLarge=_labelOffsetXLarge;
@property(nonatomic) float arrowHeightXLarge; // @synthesize arrowHeightXLarge=_arrowHeightXLarge;
@property(nonatomic) float labelSpacingXLarge; // @synthesize labelSpacingXLarge=_labelSpacingXLarge;
@property(nonatomic) float labelFontExpansionXLarge; // @synthesize labelFontExpansionXLarge=_labelFontExpansionXLarge;
@property(nonatomic) float labelHaloSizeXLarge; // @synthesize labelHaloSizeXLarge=_labelHaloSizeXLarge;
@property(nonatomic) float labelHeightXLargeCurveLimit; // @synthesize labelHeightXLargeCurveLimit=_labelHeightXLargeCurveLimit;
@property(nonatomic) int labelHeightXLargeCurve; // @synthesize labelHeightXLargeCurve=_labelHeightXLargeCurve;
@property(nonatomic) float labelHeightXLarge; // @synthesize labelHeightXLarge=_labelHeightXLarge;
@property(nonatomic) float labelIconScale; // @synthesize labelIconScale=_labelIconScale;
@property(nonatomic) _Bool poiDisabledLabelTextVisible; // @synthesize poiDisabledLabelTextVisible=_poiDisabledLabelTextVisible;
@property(nonatomic) _Bool poiDisabledLabelIconVisible; // @synthesize poiDisabledLabelIconVisible=_poiDisabledLabelIconVisible;
@property(nonatomic) _Bool labelSelectable; // @synthesize labelSelectable=_labelSelectable;
@property(nonatomic) float labelOffsetLarge; // @synthesize labelOffsetLarge=_labelOffsetLarge;
@property(nonatomic) float labelOffsetMedium; // @synthesize labelOffsetMedium=_labelOffsetMedium;
@property(nonatomic) float labelOffsetSmall; // @synthesize labelOffsetSmall=_labelOffsetSmall;
@property(nonatomic) float arrowHeightLarge; // @synthesize arrowHeightLarge=_arrowHeightLarge;
@property(nonatomic) float arrowHeightMedium; // @synthesize arrowHeightMedium=_arrowHeightMedium;
@property(nonatomic) float arrowHeightSmall; // @synthesize arrowHeightSmall=_arrowHeightSmall;
@property(nonatomic) float labelSpacingLarge; // @synthesize labelSpacingLarge=_labelSpacingLarge;
@property(nonatomic) float labelSpacingMedium; // @synthesize labelSpacingMedium=_labelSpacingMedium;
@property(nonatomic) float labelSpacingSmall; // @synthesize labelSpacingSmall=_labelSpacingSmall;
@property(nonatomic) float labelFontExpansionLarge; // @synthesize labelFontExpansionLarge=_labelFontExpansionLarge;
@property(nonatomic) float labelFontExpansionMedium; // @synthesize labelFontExpansionMedium=_labelFontExpansionMedium;
@property(nonatomic) float labelFontExpansionSmall; // @synthesize labelFontExpansionSmall=_labelFontExpansionSmall;
@property(nonatomic) float labelHaloSizeLarge; // @synthesize labelHaloSizeLarge=_labelHaloSizeLarge;
@property(nonatomic) float labelHaloSizeMedium; // @synthesize labelHaloSizeMedium=_labelHaloSizeMedium;
@property(nonatomic) float labelHaloSizeSmall; // @synthesize labelHaloSizeSmall=_labelHaloSizeSmall;
@property(nonatomic) float labelHeightLargeCurveLimit; // @synthesize labelHeightLargeCurveLimit=_labelHeightLargeCurveLimit;
@property(nonatomic) int labelHeightLargeCurve; // @synthesize labelHeightLargeCurve=_labelHeightLargeCurve;
@property(nonatomic) float labelHeightLarge; // @synthesize labelHeightLarge=_labelHeightLarge;
@property(nonatomic) float labelHeightMediumCurveLimit; // @synthesize labelHeightMediumCurveLimit=_labelHeightMediumCurveLimit;
@property(nonatomic) int labelHeightMediumCurve; // @synthesize labelHeightMediumCurve=_labelHeightMediumCurve;
@property(nonatomic) float labelHeightMedium; // @synthesize labelHeightMedium=_labelHeightMedium;
@property(nonatomic) float labelHeightSmallCurveLimit; // @synthesize labelHeightSmallCurveLimit=_labelHeightSmallCurveLimit;
@property(nonatomic) int labelHeightSmallCurve; // @synthesize labelHeightSmallCurve=_labelHeightSmallCurve;
@property(nonatomic) float labelHeightSmall; // @synthesize labelHeightSmall=_labelHeightSmall;
@property(retain, nonatomic) NSString *shieldStyle; // @synthesize shieldStyle=_shieldStyle;
@property(nonatomic) float arrowCollisionRank; // @synthesize arrowCollisionRank=_arrowCollisionRank;
@property(nonatomic) unsigned int arrowCollisionOrder; // @synthesize arrowCollisionOrder=_arrowCollisionOrder;
@property(nonatomic) float shieldCollisionRank; // @synthesize shieldCollisionRank=_shieldCollisionRank;
@property(nonatomic) unsigned int shieldCollisionOrder; // @synthesize shieldCollisionOrder=_shieldCollisionOrder;
@property(nonatomic) _Bool showLabelAsShield; // @synthesize showLabelAsShield=_showLabelAsShield;
@property(nonatomic) _Bool showShieldTextAsLabel; // @synthesize showShieldTextAsLabel=_showShieldTextAsLabel;
@property(nonatomic) float genericShieldDropShadowSize; // @synthesize genericShieldDropShadowSize=_genericShieldDropShadowSize;
@property(nonatomic) unsigned int genericShieldHaloColor; // @synthesize genericShieldHaloColor=_genericShieldHaloColor;
@property(nonatomic) float genericShieldHaloSize; // @synthesize genericShieldHaloSize=_genericShieldHaloSize;
@property(nonatomic) float layerShadowsTaper; // @synthesize layerShadowsTaper=_layerShadowsTaper;
@property(nonatomic) float layerShadowsRamp; // @synthesize layerShadowsRamp=_layerShadowsRamp;
@property(nonatomic) float layerShadowsWidth; // @synthesize layerShadowsWidth=_layerShadowsWidth;
@property(nonatomic) float fancyCasingsStrokeWidth; // @synthesize fancyCasingsStrokeWidth=_fancyCasingsStrokeWidth;
@property(nonatomic) float fancyCasingsWidth; // @synthesize fancyCasingsWidth=_fancyCasingsWidth;
@property(nonatomic) float casingsShadowWidth; // @synthesize casingsShadowWidth=_casingsShadowWidth;
@property(nonatomic) float casingsShadowRamp; // @synthesize casingsShadowRamp=_casingsShadowRamp;
@property(nonatomic) float casingsStrokeWidth; // @synthesize casingsStrokeWidth=_casingsStrokeWidth;
@property(nonatomic) float casingsStrokeColor; // @synthesize casingsStrokeColor=_casingsStrokeColor;
@property(nonatomic) float casingsHeight; // @synthesize casingsHeight=_casingsHeight;
@property(nonatomic) float casingsWidth; // @synthesize casingsWidth=_casingsWidth;
@property(nonatomic) int thirdFillTextureBlendMode; // @synthesize thirdFillTextureBlendMode=_thirdFillTextureBlendMode;
@property(nonatomic) float thirdFillTextureOpacity; // @synthesize thirdFillTextureOpacity=_thirdFillTextureOpacity;
@property(retain, nonatomic) NSString *thirdFillTexture; // @synthesize thirdFillTexture=_thirdFillTexture;
@property(nonatomic) int secondFillTextureBlendMode; // @synthesize secondFillTextureBlendMode=_secondFillTextureBlendMode;
@property(nonatomic) float secondFillTextureOpacity; // @synthesize secondFillTextureOpacity=_secondFillTextureOpacity;
@property(retain, nonatomic) NSString *secondFillTexture; // @synthesize secondFillTexture=_secondFillTexture;
@property(nonatomic) int fillTextureBlendMode; // @synthesize fillTextureBlendMode=_fillTextureBlendMode;
@property(nonatomic) float fillTextureOpacity; // @synthesize fillTextureOpacity=_fillTextureOpacity;
@property(nonatomic) int labelAnnotationIconSize; // @synthesize labelAnnotationIconSize=_labelAnnotationIconSize;
@property(nonatomic) float labelAnnotationTextSize; // @synthesize labelAnnotationTextSize=_labelAnnotationTextSize;
@property(nonatomic) int labelIconSourceMultipoi; // @synthesize labelIconSourceMultipoi=_labelIconSourceMultipoi;
@property(nonatomic) int labelIconSize; // @synthesize labelIconSize=_labelIconSize;
@property(retain, nonatomic) NSString *labelLayoutIcon; // @synthesize labelLayoutIcon=_labelLayoutIcon;
@property(nonatomic) int labelIconSource; // @synthesize labelIconSource=_labelIconSource;
@property(retain, nonatomic) NSString *labelIconGlowTexture; // @synthesize labelIconGlowTexture=_labelIconGlowTexture;
@property(nonatomic) float outerStrokeWidth; // @synthesize outerStrokeWidth=_outerStrokeWidth;
@property(nonatomic) unsigned int outerStrokeColor; // @synthesize outerStrokeColor=_outerStrokeColor;
@property(nonatomic) float labelIconDropShadowSize; // @synthesize labelIconDropShadowSize=_labelIconDropShadowSize;
@property(nonatomic) float labelIconHaloSize; // @synthesize labelIconHaloSize=_labelIconHaloSize;
@property(nonatomic) unsigned int labelIconHaloColor; // @synthesize labelIconHaloColor=_labelIconHaloColor;
@property(nonatomic) int labelTextAlternateOrientations; // @synthesize labelTextAlternateOrientations=_labelTextAlternateOrientations;
@property(nonatomic) int labelTextOrientation; // @synthesize labelTextOrientation=_labelTextOrientation;
@property(nonatomic) float trafficShiftEnd; // @synthesize trafficShiftEnd=_trafficShiftEnd;
@property(nonatomic) float trafficShiftStart; // @synthesize trafficShiftStart=_trafficShiftStart;
@property(nonatomic) float trafficGlowFadingEnd; // @synthesize trafficGlowFadingEnd=_trafficGlowFadingEnd;
@property(nonatomic) float trafficGlowFadingStart; // @synthesize trafficGlowFadingStart=_trafficGlowFadingStart;
@property(retain, nonatomic) VKPTrafficStyle *trafficFast; // @synthesize trafficFast=_trafficFast;
@property(retain, nonatomic) VKPTrafficStyle *trafficMedium; // @synthesize trafficMedium=_trafficMedium;
@property(retain, nonatomic) VKPTrafficStyle *trafficSlow; // @synthesize trafficSlow=_trafficSlow;
@property(retain, nonatomic) VKPTrafficStyle *trafficStopped; // @synthesize trafficStopped=_trafficStopped;
@property(nonatomic) float trafficAnimationBaseSpeed; // @synthesize trafficAnimationBaseSpeed=_trafficAnimationBaseSpeed;
@property(nonatomic) float buildingStrokeWidth3d; // @synthesize buildingStrokeWidth3d=_buildingStrokeWidth3d;
@property(nonatomic) float labelCollisionRank; // @synthesize labelCollisionRank=_labelCollisionRank;
@property(nonatomic) unsigned int labelCollisionOrder; // @synthesize labelCollisionOrder=_labelCollisionOrder;
@property(nonatomic) float marginRight; // @synthesize marginRight=_marginRight;
@property(nonatomic) float marginBottom; // @synthesize marginBottom=_marginBottom;
@property(nonatomic) float marginLeft; // @synthesize marginLeft=_marginLeft;
@property(nonatomic) float marginTop; // @synthesize marginTop=_marginTop;
@property(nonatomic) float paddingRight; // @synthesize paddingRight=_paddingRight;
@property(nonatomic) float paddingBottom; // @synthesize paddingBottom=_paddingBottom;
@property(nonatomic) float paddingLeft; // @synthesize paddingLeft=_paddingLeft;
@property(nonatomic) float paddingTop; // @synthesize paddingTop=_paddingTop;
@property(nonatomic) unsigned int alternateFillColor; // @synthesize alternateFillColor=_alternateFillColor;
@property(nonatomic) unsigned int outerGlowColor; // @synthesize outerGlowColor=_outerGlowColor;
@property(nonatomic) unsigned int innerGlowColor; // @synthesize innerGlowColor=_innerGlowColor;
@property(nonatomic) float outerGlowRadius; // @synthesize outerGlowRadius=_outerGlowRadius;
@property(nonatomic) float innerGlowRadius; // @synthesize innerGlowRadius=_innerGlowRadius;
@property(nonatomic) float insetShadowAngle; // @synthesize insetShadowAngle=_insetShadowAngle;
@property(nonatomic) float insetShadowHeight; // @synthesize insetShadowHeight=_insetShadowHeight;
@property(nonatomic) int polygonType; // @synthesize polygonType=_polygonType;
@property(retain, nonatomic) NSString *fillTexture; // @synthesize fillTexture=_fillTexture;
@property(nonatomic) int labelArrowLayer; // @synthesize labelArrowLayer=_labelArrowLayer;
@property(nonatomic) int labelLayer; // @synthesize labelLayer=_labelLayer;
@property(nonatomic) _Bool arrowVisible; // @synthesize arrowVisible=_arrowVisible;
@property(nonatomic) float shieldTiltLimit; // @synthesize shieldTiltLimit=_shieldTiltLimit;
@property(nonatomic) _Bool shieldVisible; // @synthesize shieldVisible=_shieldVisible;
@property(nonatomic) unsigned int labelClass; // @synthesize labelClass=_labelClass;
@property(nonatomic) float labelShieldRank; // @synthesize labelShieldRank=_labelShieldRank;
@property(nonatomic) float labelRoadRank; // @synthesize labelRoadRank=_labelRoadRank;
@property(nonatomic) float labelFontExpansion; // @synthesize labelFontExpansion=_labelFontExpansion;
@property(nonatomic) float labelTiltLimit; // @synthesize labelTiltLimit=_labelTiltLimit;
@property(nonatomic) _Bool labelSmallCaps; // @synthesize labelSmallCaps=_labelSmallCaps;
@property(retain, nonatomic) NSString *labelShield; // @synthesize labelShield=_labelShield;
@property(retain, nonatomic) NSString *labelFontFamily; // @synthesize labelFontFamily=_labelFontFamily;
@property(retain, nonatomic) NSString *labelIcon; // @synthesize labelIcon=_labelIcon;
@property(nonatomic) float labelHaloSize; // @synthesize labelHaloSize=_labelHaloSize;
@property(nonatomic) unsigned int fillZIndex; // @synthesize fillZIndex=_fillZIndex;
@property(nonatomic) unsigned int zIndex; // @synthesize zIndex=_zIndex;
@property(nonatomic) float widthDropoff; // @synthesize widthDropoff=_widthDropoff;
@property(nonatomic) float labelHeightCurveLimit; // @synthesize labelHeightCurveLimit=_labelHeightCurveLimit;
@property(nonatomic) int labelHeightCurve; // @synthesize labelHeightCurve=_labelHeightCurve;
@property(nonatomic) float labelHeight; // @synthesize labelHeight=_labelHeight;
@property(nonatomic) float strokeWidthCurveLimit; // @synthesize strokeWidthCurveLimit=_strokeWidthCurveLimit;
@property(nonatomic) int strokeWidthCurve; // @synthesize strokeWidthCurve=_strokeWidthCurve;
@property(nonatomic) float strokeWidth; // @synthesize strokeWidth=_strokeWidth;
@property(nonatomic) float widthCurveLimit; // @synthesize widthCurveLimit=_widthCurveLimit;
@property(nonatomic) int widthCurve; // @synthesize widthCurve=_widthCurve;
@property(nonatomic) float width; // @synthesize width=_width;
@property(nonatomic) _Bool visible; // @synthesize visible=_visible;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasVisibleBehindBuildings;
@property(nonatomic) _Bool visibleBehindBuildings; // @synthesize visibleBehindBuildings=_visibleBehindBuildings;
@property(nonatomic) _Bool hasSpacing;
@property(nonatomic) _Bool hasArrowSelectedMinZoom;
@property(nonatomic) float arrowSelectedMinZoom; // @synthesize arrowSelectedMinZoom=_arrowSelectedMinZoom;
@property(nonatomic) _Bool hasArrowMinZoom;
@property(nonatomic) float arrowMinZoom; // @synthesize arrowMinZoom=_arrowMinZoom;
@property(nonatomic) _Bool hasTrafficIncidentRampClosureMinZ;
@property(nonatomic) _Bool hasTrafficIncidentLaneClosureMinZ;
@property(nonatomic) _Bool hasTrafficIncidentHazardMinZ;
@property(nonatomic) _Bool hasTrafficIncidentEventMinZ;
@property(nonatomic) _Bool hasTrafficIncidentRoadClosureMinZ;
@property(nonatomic) _Bool hasTrafficIncidentConstructionMinZ;
@property(nonatomic) _Bool hasTrafficIncidentAccidentMinZ;
@property(nonatomic) _Bool hasTrafficIncidentUnknownMinZ;
@property(nonatomic) _Bool hasCurbColor;
@property(nonatomic) unsigned int curbColor; // @synthesize curbColor=_curbColor;
@property(nonatomic) _Bool hasRenderEndCaps;
@property(nonatomic) _Bool renderEndCaps; // @synthesize renderEndCaps=_renderEndCaps;
@property(nonatomic) _Bool hasPuckOffset;
@property(nonatomic) float puckOffset; // @synthesize puckOffset=_puckOffset;
@property(nonatomic) _Bool hasPuckSize;
@property(nonatomic) _Bool hasPuckArrowColorStale;
@property(nonatomic) _Bool hasPuckArrowColor;
@property(nonatomic) _Bool hasPuckCircleBrightness;
@property(nonatomic) _Bool hasPuckRimBrightness;
@property(nonatomic) _Bool hasPuckArrowShadowBrightness;
@property(nonatomic) _Bool hasPuckArrowBrightness;
@property(nonatomic) _Bool hasPuckDomeBrightness;
@property(nonatomic) _Bool hasBrightness;
@property(nonatomic) float brightness; // @synthesize brightness=_brightness;
@property(nonatomic) _Bool hasMaxScale;
@property(nonatomic) _Bool hasRouteEnlargementScale;
@property(nonatomic) _Bool hasRouteEnlargementStartZoom;
@property(readonly, nonatomic) _Bool hasTravelledFillTexture;
@property(readonly, nonatomic) _Bool hasObscuredFillTexture;
@property(nonatomic) _Bool hasGlossColor;
@property(nonatomic) _Bool hasTravelledColor;
@property(nonatomic) _Bool hasTrafficAnitialiasingSlope;
@property(nonatomic) _Bool hasTrafficAnitialiasingOffset;
@property(nonatomic) _Bool hasLineColor;
@property(nonatomic) _Bool hasHorizonColor;
@property(nonatomic) _Bool hasLabelOffset;
@property(nonatomic) _Bool hasLabelOffsetPosition;
@property(nonatomic) _Bool hasLabelLineWrapLogograms;
@property(nonatomic) unsigned int labelLineWrapLogograms; // @synthesize labelLineWrapLogograms=_labelLineWrapLogograms;
@property(nonatomic) _Bool hasLabelDiagonalPositionVerticalMargin;
@property(nonatomic) float labelDiagonalPositionVerticalMargin; // @synthesize labelDiagonalPositionVerticalMargin=_labelDiagonalPositionVerticalMargin;
@property(nonatomic) _Bool hasLabelDiagonalPositionHorizontalMargin;
@property(nonatomic) _Bool hasLabelDiagonalPositionAnchor;
@property(nonatomic) int labelDiagonalPositionAnchor; // @synthesize labelDiagonalPositionAnchor=_labelDiagonalPositionAnchor;
@property(nonatomic) _Bool hasLabelRoadWithShieldGap;
@property(nonatomic) float labelRoadWithShieldGap; // @synthesize labelRoadWithShieldGap=_labelRoadWithShieldGap;
@property(nonatomic) _Bool hasLabelRoadWithShieldSpacing;
@property(nonatomic) float labelRoadWithShieldSpacing; // @synthesize labelRoadWithShieldSpacing=_labelRoadWithShieldSpacing;
@property(nonatomic) _Bool hasLabelMultiShieldGap;
@property(nonatomic) float labelMultiShieldGap; // @synthesize labelMultiShieldGap=_labelMultiShieldGap;
@property(nonatomic) _Bool hasLabelShieldSpacing;
@property(nonatomic) float labelShieldSpacing; // @synthesize labelShieldSpacing=_labelShieldSpacing;
@property(nonatomic) _Bool hasLabelAlternateTextPositions;
@property(nonatomic) _Bool hasLabelDefaultTextPosition;
@property(nonatomic) _Bool hasLabelPositioningMode;
@property(nonatomic) _Bool hasNavLabelSignBrightness;
@property(nonatomic) float navLabelSignBrightness; // @synthesize navLabelSignBrightness=_navLabelSignBrightness;
@property(nonatomic) _Bool hasNavLabelSuppressSignIfHaveShield;
@property(nonatomic) _Bool navLabelSuppressSignIfHaveShield; // @synthesize navLabelSuppressSignIfHaveShield=_navLabelSuppressSignIfHaveShield;
@property(nonatomic) _Bool hasNavLabelSignVisible;
@property(nonatomic) _Bool navLabelSignVisible; // @synthesize navLabelSignVisible=_navLabelSignVisible;
@property(nonatomic) _Bool hasNavLabelShieldVisible;
@property(nonatomic) _Bool navLabelShieldVisible; // @synthesize navLabelShieldVisible=_navLabelShieldVisible;
@property(nonatomic) _Bool hasLabelOffsetXXLarge;
@property(nonatomic) _Bool hasArrowHeightXXLarge;
@property(nonatomic) _Bool hasLabelSpacingXXLarge;
@property(nonatomic) _Bool hasLabelFontExpansionXXLarge;
@property(nonatomic) _Bool hasLabelHaloSizeXXLarge;
@property(nonatomic) _Bool hasLabelHeightXXLargeCurveLimit;
@property(nonatomic) _Bool hasLabelHeightXXLargeCurve;
@property(nonatomic) _Bool hasLabelHeightXXLarge;
@property(nonatomic) _Bool hasLabelOffsetXLarge;
@property(nonatomic) _Bool hasArrowHeightXLarge;
@property(nonatomic) _Bool hasLabelSpacingXLarge;
@property(nonatomic) _Bool hasLabelFontExpansionXLarge;
@property(nonatomic) _Bool hasLabelHaloSizeXLarge;
@property(nonatomic) _Bool hasLabelHeightXLargeCurveLimit;
@property(nonatomic) _Bool hasLabelHeightXLargeCurve;
@property(nonatomic) _Bool hasLabelHeightXLarge;
@property(nonatomic) _Bool hasLabelRoadCrossingThreshold;
@property(nonatomic) int labelRoadCrossingThreshold; // @synthesize labelRoadCrossingThreshold=_labelRoadCrossingThreshold;
@property(nonatomic) _Bool hasPoiIconOpacity;
@property(nonatomic) float poiIconOpacity; // @synthesize poiIconOpacity=_poiIconOpacity;
@property(nonatomic) _Bool hasLabelIconScale;
@property(nonatomic) _Bool hasPoiDisabledLabelTextVisible;
@property(nonatomic) _Bool hasPoiDisabledLabelIconVisible;
@property(nonatomic) _Bool hasLabelSelectable;
@property(nonatomic) _Bool hasLabelOffsetLarge;
@property(nonatomic) _Bool hasLabelOffsetMedium;
@property(nonatomic) _Bool hasLabelOffsetSmall;
@property(nonatomic) _Bool hasArrowHeightLarge;
@property(nonatomic) _Bool hasArrowHeightMedium;
@property(nonatomic) _Bool hasArrowHeightSmall;
@property(nonatomic) _Bool hasLabelSpacingLarge;
@property(nonatomic) _Bool hasLabelSpacingMedium;
@property(nonatomic) _Bool hasLabelSpacingSmall;
@property(nonatomic) _Bool hasLabelFontExpansionLarge;
@property(nonatomic) _Bool hasLabelFontExpansionMedium;
@property(nonatomic) _Bool hasLabelFontExpansionSmall;
@property(nonatomic) _Bool hasLabelHaloSizeLarge;
@property(nonatomic) _Bool hasLabelHaloSizeMedium;
@property(nonatomic) _Bool hasLabelHaloSizeSmall;
@property(nonatomic) _Bool hasLabelHeightLargeCurveLimit;
@property(nonatomic) _Bool hasLabelHeightLargeCurve;
@property(nonatomic) _Bool hasLabelHeightLarge;
@property(nonatomic) _Bool hasLabelHeightMediumCurveLimit;
@property(nonatomic) _Bool hasLabelHeightMediumCurve;
@property(nonatomic) _Bool hasLabelHeightMedium;
@property(nonatomic) _Bool hasLabelHeightSmallCurveLimit;
@property(nonatomic) _Bool hasLabelHeightSmallCurve;
@property(nonatomic) _Bool hasLabelHeightSmall;
@property(readonly, nonatomic) _Bool hasShieldStyle;
@property(nonatomic) _Bool hasShieldSize;
@property(nonatomic) int shieldSize; // @synthesize shieldSize=_shieldSize;
@property(nonatomic) _Bool hasArrowCollisionRank;
@property(nonatomic) _Bool hasArrowCollisionOrder;
@property(nonatomic) _Bool hasShieldCollisionRank;
@property(nonatomic) _Bool hasShieldCollisionOrder;
@property(nonatomic) _Bool hasShowLabelAsShield;
@property(nonatomic) _Bool hasShowShieldTextAsLabel;
@property(nonatomic) _Bool hasGenericShieldDropShadowColor;
@property(nonatomic) unsigned int genericShieldDropShadowColor; // @synthesize genericShieldDropShadowColor=_genericShieldDropShadowColor;
@property(nonatomic) _Bool hasGenericShieldDropShadowSize;
- (void)setGenericShieldDropShadowOffsets:(float *)arg1 count:(unsigned long long)arg2;
- (float)genericShieldDropShadowOffsetAtIndex:(unsigned long long)arg1;
- (void)addGenericShieldDropShadowOffset:(float)arg1;
- (void)clearGenericShieldDropShadowOffsets;
@property(readonly, nonatomic) float *genericShieldDropShadowOffsets;
@property(readonly, nonatomic) unsigned long long genericShieldDropShadowOffsetsCount;
@property(nonatomic) _Bool hasGenericShieldHaloColor;
@property(nonatomic) _Bool hasGenericShieldHaloSize;
@property(nonatomic) _Bool hasGenericShieldTextColor;
@property(nonatomic) unsigned int genericShieldTextColor; // @synthesize genericShieldTextColor=_genericShieldTextColor;
@property(nonatomic) _Bool hasGenericShieldBorderColor;
@property(nonatomic) unsigned int genericShieldBorderColor; // @synthesize genericShieldBorderColor=_genericShieldBorderColor;
@property(nonatomic) _Bool hasGenericShieldBackgroundColor;
@property(nonatomic) unsigned int genericShieldBackgroundColor; // @synthesize genericShieldBackgroundColor=_genericShieldBackgroundColor;
@property(nonatomic) _Bool hasGenericShieldStyle;
@property(nonatomic) int genericShieldStyle; // @synthesize genericShieldStyle=_genericShieldStyle;
@property(nonatomic) _Bool hasLayerShadowsTaper;
@property(nonatomic) _Bool hasLayerShadowsRamp;
@property(nonatomic) _Bool hasLayerShadowsWidth;
@property(nonatomic) _Bool hasLayerShadowsVisible;
@property(nonatomic) _Bool layerShadowsVisible; // @synthesize layerShadowsVisible=_layerShadowsVisible;
@property(nonatomic) _Bool hasFancyCasingsStrokeWidth;
@property(nonatomic) _Bool hasFancyCasingsStrokeColor;
@property(nonatomic) unsigned int fancyCasingsStrokeColor; // @synthesize fancyCasingsStrokeColor=_fancyCasingsStrokeColor;
@property(nonatomic) _Bool hasFancyCasingsWidth;
@property(nonatomic) _Bool hasFancyCasingsColor;
@property(nonatomic) unsigned int fancyCasingsColor; // @synthesize fancyCasingsColor=_fancyCasingsColor;
@property(nonatomic) _Bool hasFancyCasingsVisible;
@property(nonatomic) _Bool fancyCasingsVisible; // @synthesize fancyCasingsVisible=_fancyCasingsVisible;
@property(nonatomic) _Bool hasCasingsShadowWidth;
@property(nonatomic) _Bool hasCasingsShadowRamp;
@property(nonatomic) _Bool hasCasingsStrokeWidth;
@property(nonatomic) _Bool hasCasingsStrokeColor;
@property(nonatomic) _Bool hasCasingsHeight;
@property(nonatomic) _Bool hasCasingsWidth;
@property(nonatomic) _Bool hasCasingsColor;
@property(nonatomic) unsigned int casingsColor; // @synthesize casingsColor=_casingsColor;
@property(nonatomic) _Bool hasCasingsVisible;
@property(nonatomic) _Bool casingsVisible; // @synthesize casingsVisible=_casingsVisible;
@property(nonatomic) _Bool hasThirdFillTextureBlendMode;
@property(nonatomic) _Bool hasThirdFillTextureOpacity;
@property(readonly, nonatomic) _Bool hasThirdFillTexture;
@property(nonatomic) _Bool hasSecondFillTextureBlendMode;
@property(nonatomic) _Bool hasSecondFillTextureOpacity;
@property(readonly, nonatomic) _Bool hasSecondFillTexture;
@property(nonatomic) _Bool hasFillTextureBlendMode;
@property(nonatomic) _Bool hasFillTextureOpacity;
@property(nonatomic) _Bool hasPadding;
@property(nonatomic) float padding; // @synthesize padding=_padding;
@property(nonatomic) _Bool hasLabelAnnotationIconSize;
@property(nonatomic) _Bool hasLabelAnnotationTextSize;
@property(nonatomic) _Bool hasLabelIconSourceMultipoi;
@property(nonatomic) _Bool hasLabelIconSize;
@property(readonly, nonatomic) _Bool hasLabelLayoutIcon;
@property(nonatomic) _Bool hasLabelIconSaturation;
@property(nonatomic) float labelIconSaturation; // @synthesize labelIconSaturation=_labelIconSaturation;
@property(nonatomic) _Bool hasLabelIconSource;
@property(nonatomic) _Bool hasLabelIconGlowBlendMode;
@property(nonatomic) int labelIconGlowBlendMode; // @synthesize labelIconGlowBlendMode=_labelIconGlowBlendMode;
@property(readonly, nonatomic) _Bool hasLabelIconGlowTexture;
@property(nonatomic) _Bool hasLabelIconBadgeLightBlendMode;
@property(nonatomic) int labelIconBadgeLightBlendMode; // @synthesize labelIconBadgeLightBlendMode=_labelIconBadgeLightBlendMode;
@property(nonatomic) _Bool hasLabelIconBadgeLightColor;
@property(nonatomic) unsigned int labelIconBadgeLightColor; // @synthesize labelIconBadgeLightColor=_labelIconBadgeLightColor;
@property(nonatomic) _Bool hasLabelIconGlyphBlendMode;
@property(nonatomic) int labelIconGlyphBlendMode; // @synthesize labelIconGlyphBlendMode=_labelIconGlyphBlendMode;
@property(nonatomic) _Bool hasLabelIconBevelAmount;
@property(nonatomic) float labelIconBevelAmount; // @synthesize labelIconBevelAmount=_labelIconBevelAmount;
@property(nonatomic) _Bool hasLabelIconGlyphStyle;
@property(nonatomic) int labelIconGlyphStyle; // @synthesize labelIconGlyphStyle=_labelIconGlyphStyle;
@property(nonatomic) _Bool hasOuterStrokeWidth;
@property(nonatomic) _Bool hasOuterStrokeColor;
@property(nonatomic) _Bool hasLabelIconCornerRadius;
@property(nonatomic) float labelIconCornerRadius; // @synthesize labelIconCornerRadius=_labelIconCornerRadius;
@property(nonatomic) _Bool hasLabelIconDropShadowColor;
@property(nonatomic) unsigned int labelIconDropShadowColor; // @synthesize labelIconDropShadowColor=_labelIconDropShadowColor;
@property(nonatomic) _Bool hasLabelIconDropShadowSize;
- (void)setLabelIconDropShadowOffsets:(float *)arg1 count:(unsigned long long)arg2;
- (float)labelIconDropShadowOffsetAtIndex:(unsigned long long)arg1;
- (void)addLabelIconDropShadowOffset:(float)arg1;
- (void)clearLabelIconDropShadowOffsets;
@property(readonly, nonatomic) float *labelIconDropShadowOffsets;
@property(readonly, nonatomic) unsigned long long labelIconDropShadowOffsetsCount;
@property(nonatomic) _Bool hasLabelIconHaloSize;
@property(nonatomic) _Bool hasLabelIconHaloColor;
@property(nonatomic) _Bool hasLabelIconGlyphColor;
@property(nonatomic) unsigned int labelIconGlyphColor; // @synthesize labelIconGlyphColor=_labelIconGlyphColor;
- (void)setLabelIconGradients:(unsigned int *)arg1 count:(unsigned long long)arg2;
- (unsigned int)labelIconGradientAtIndex:(unsigned long long)arg1;
- (void)addLabelIconGradient:(unsigned int)arg1;
- (void)clearLabelIconGradients;
@property(readonly, nonatomic) unsigned int *labelIconGradients;
@property(readonly, nonatomic) unsigned long long labelIconGradientsCount;
@property(nonatomic) _Bool hasLabelIconBadgeColor;
@property(nonatomic) unsigned int labelIconBadgeColor; // @synthesize labelIconBadgeColor=_labelIconBadgeColor;
@property(nonatomic) _Bool hasLabelIconStyle;
@property(nonatomic) int labelIconStyle; // @synthesize labelIconStyle=_labelIconStyle;
@property(nonatomic) _Bool hasLabelLayoutStyle;
@property(nonatomic) int labelLayoutStyle; // @synthesize labelLayoutStyle=_labelLayoutStyle;
@property(nonatomic) _Bool hasLabelTextAlternateOrientations;
@property(nonatomic) _Bool hasLabelTextOrientation;
@property(nonatomic) _Bool hasLineDrawStyle;
@property(nonatomic) int lineDrawStyle; // @synthesize lineDrawStyle=_lineDrawStyle;
@property(nonatomic) _Bool hasTrafficIncidentBrightness;
@property(nonatomic) float trafficIncidentBrightness; // @synthesize trafficIncidentBrightness=_trafficIncidentBrightness;
@property(nonatomic) _Bool hasTrafficShiftEnd;
@property(nonatomic) _Bool hasTrafficShiftStart;
@property(nonatomic) _Bool hasTrafficGlowFadingEnd;
@property(nonatomic) _Bool hasTrafficGlowFadingStart;
@property(readonly, nonatomic) _Bool hasTrafficFast;
@property(readonly, nonatomic) _Bool hasTrafficMedium;
@property(readonly, nonatomic) _Bool hasTrafficSlow;
@property(readonly, nonatomic) _Bool hasTrafficStopped;
@property(nonatomic) _Bool hasTrafficVisible;
@property(nonatomic) _Bool trafficVisible; // @synthesize trafficVisible=_trafficVisible;
@property(nonatomic) _Bool hasTrafficAnimationBaseSpeed;
@property(nonatomic) _Bool hasTrafficWidth;
@property(nonatomic) float trafficWidth; // @synthesize trafficWidth=_trafficWidth;
@property(nonatomic) _Bool hasBuildingFlatColor;
@property(nonatomic) unsigned int buildingFlatColor; // @synthesize buildingFlatColor=_buildingFlatColor;
@property(nonatomic) _Bool hasBuildingLandmarkColor;
@property(nonatomic) unsigned int buildingLandmarkColor; // @synthesize buildingLandmarkColor=_buildingLandmarkColor;
@property(nonatomic) _Bool hasBuildingRoofStyle;
@property(nonatomic) int buildingRoofStyle; // @synthesize buildingRoofStyle=_buildingRoofStyle;
@property(nonatomic) _Bool hasBuildingOutlineVisible;
@property(nonatomic) _Bool buildingOutlineVisible; // @synthesize buildingOutlineVisible=_buildingOutlineVisible;
@property(nonatomic) _Bool hasBuildingOutlineColor;
@property(nonatomic) unsigned int buildingOutlineColor; // @synthesize buildingOutlineColor=_buildingOutlineColor;
@property(nonatomic) _Bool hasBuildingFacadeColor;
@property(nonatomic) unsigned int buildingFacadeColor; // @synthesize buildingFacadeColor=_buildingFacadeColor;
@property(nonatomic) _Bool hasBuildingTopColor;
@property(nonatomic) unsigned int buildingTopColor; // @synthesize buildingTopColor=_buildingTopColor;
@property(nonatomic) _Bool hasBuildingStrokeColor3d;
@property(nonatomic) unsigned int buildingStrokeColor3d; // @synthesize buildingStrokeColor3d=_buildingStrokeColor3d;
@property(nonatomic) _Bool hasBuildingStrokeWidth3d;
@property(nonatomic) _Bool hasLabelCollisionRank;
@property(nonatomic) _Bool hasLabelCollisionOrder;
@property(nonatomic) _Bool hasMarginRight;
@property(nonatomic) _Bool hasMarginBottom;
@property(nonatomic) _Bool hasMarginLeft;
@property(nonatomic) _Bool hasMarginTop;
@property(nonatomic) _Bool hasMargin;
@property(nonatomic) float margin; // @synthesize margin=_margin;
@property(nonatomic) _Bool hasPaddingRight;
@property(nonatomic) _Bool hasPaddingBottom;
@property(nonatomic) _Bool hasPaddingLeft;
@property(nonatomic) _Bool hasPaddingTop;
@property(nonatomic) _Bool hasPatternScalerQuantizationFactor;
@property(nonatomic) float patternScalerQuantizationFactor; // @synthesize patternScalerQuantizationFactor=_patternScalerQuantizationFactor;
@property(nonatomic) _Bool hasPatternScaler;
@property(nonatomic) float patternScaler; // @synthesize patternScaler=_patternScaler;
@property(nonatomic) _Bool hasAlternateFillColor;
@property(nonatomic) _Bool hasRailroadPattern;
@property(nonatomic) int railroadPattern; // @synthesize railroadPattern=_railroadPattern;
- (void)setStrokeDashPatterns:(float *)arg1 count:(unsigned long long)arg2;
- (float)strokeDashPatternAtIndex:(unsigned long long)arg1;
- (void)addStrokeDashPattern:(float)arg1;
- (void)clearStrokeDashPatterns;
@property(readonly, nonatomic) float *strokeDashPatterns;
@property(readonly, nonatomic) unsigned long long strokeDashPatternsCount;
- (void)setFillDashPatterns:(float *)arg1 count:(unsigned long long)arg2;
- (float)fillDashPatternAtIndex:(unsigned long long)arg1;
- (void)addFillDashPattern:(float)arg1;
- (void)clearFillDashPatterns;
@property(readonly, nonatomic) float *fillDashPatterns;
@property(readonly, nonatomic) unsigned long long fillDashPatternsCount;
@property(nonatomic) _Bool hasDropShadowColor;
@property(nonatomic) unsigned int dropShadowColor; // @synthesize dropShadowColor=_dropShadowColor;
- (void)setDropShadowOffsets:(float *)arg1 count:(unsigned long long)arg2;
- (float)dropShadowOffsetAtIndex:(unsigned long long)arg1;
- (void)addDropShadowOffset:(float)arg1;
- (void)clearDropShadowOffsets;
@property(readonly, nonatomic) float *dropShadowOffsets;
@property(readonly, nonatomic) unsigned long long dropShadowOffsetsCount;
@property(nonatomic) _Bool hasOuterGlowColor;
@property(nonatomic) _Bool hasInnerGlowColor;
@property(nonatomic) _Bool hasOuterGlowRadius;
@property(nonatomic) _Bool hasInnerGlowRadius;
@property(nonatomic) _Bool hasInsetShadowColor;
@property(nonatomic) unsigned int insetShadowColor; // @synthesize insetShadowColor=_insetShadowColor;
@property(nonatomic) _Bool hasInsetShadowAngle;
@property(nonatomic) _Bool hasInsetShadowHeight;
@property(nonatomic) _Bool hasPolygonType;
@property(readonly, nonatomic) _Bool hasFillTexture;
@property(nonatomic) _Bool hasLabelParallaxHeight;
@property(nonatomic) float labelParallaxHeight; // @synthesize labelParallaxHeight=_labelParallaxHeight;
@property(nonatomic) _Bool hasArrowHaloColor;
@property(nonatomic) unsigned int arrowHaloColor; // @synthesize arrowHaloColor=_arrowHaloColor;
@property(nonatomic) _Bool hasArrowColor;
@property(nonatomic) unsigned int arrowColor; // @synthesize arrowColor=_arrowColor;
@property(nonatomic) _Bool hasLabelArrowLayer;
@property(nonatomic) _Bool hasLabelLayer;
@property(nonatomic) _Bool hasArrowSpacing;
@property(nonatomic) float arrowSpacing; // @synthesize arrowSpacing=_arrowSpacing;
@property(nonatomic) _Bool hasArrowHeight;
@property(nonatomic) float arrowHeight; // @synthesize arrowHeight=_arrowHeight;
@property(nonatomic) _Bool hasArrowVisible;
@property(nonatomic) _Bool hasShieldTiltLimit;
@property(nonatomic) _Bool hasShieldVisible;
@property(nonatomic) _Bool hasLabelClass;
@property(nonatomic) _Bool hasYieldsToOnscreenLabels;
@property(nonatomic) _Bool yieldsToOnscreenLabels; // @synthesize yieldsToOnscreenLabels=_yieldsToOnscreenLabels;
@property(nonatomic) _Bool hasLabelDedupeRank;
@property(nonatomic) unsigned int labelDedupeRank; // @synthesize labelDedupeRank=_labelDedupeRank;
@property(nonatomic) _Bool hasOnlyShowIfTappable;
@property(nonatomic) _Bool onlyShowIfTappable; // @synthesize onlyShowIfTappable=_onlyShowIfTappable;
@property(nonatomic) _Bool hasLabelTextVisibility;
@property(nonatomic) int labelTextVisibility; // @synthesize labelTextVisibility=_labelTextVisibility;
@property(nonatomic) _Bool hasLabelSpacing;
@property(nonatomic) float labelSpacing; // @synthesize labelSpacing=_labelSpacing;
@property(nonatomic) _Bool hasLabelShieldRank;
@property(nonatomic) _Bool hasLabelRoadRank;
@property(nonatomic) _Bool hasLabelFontExpansion;
@property(nonatomic) _Bool hasLabelTiltLimit;
@property(nonatomic) _Bool hasLabelSmallCaps;
@property(readonly, nonatomic) _Bool hasLabelShield;
@property(nonatomic) _Bool hasLabelHaloColor;
@property(nonatomic) unsigned int labelHaloColor; // @synthesize labelHaloColor=_labelHaloColor;
@property(nonatomic) _Bool hasLabelColor;
@property(nonatomic) unsigned int labelColor; // @synthesize labelColor=_labelColor;
@property(readonly, nonatomic) _Bool hasLabelFontFamily;
@property(readonly, nonatomic) _Bool hasLabelIcon;
@property(nonatomic) _Bool hasLabelLineWrap;
@property(nonatomic) unsigned int labelLineWrap; // @synthesize labelLineWrap=_labelLineWrap;
@property(nonatomic) _Bool hasLabelUpcase;
@property(nonatomic) _Bool labelUpcase; // @synthesize labelUpcase=_labelUpcase;
@property(nonatomic) _Bool hasLabelRaisedInitial;
@property(nonatomic) _Bool labelRaisedInitial; // @synthesize labelRaisedInitial=_labelRaisedInitial;
@property(nonatomic) _Bool hasLabelHaloSize;
@property(nonatomic) _Bool hasFillColorInterpolate;
@property(nonatomic) _Bool fillColorInterpolate; // @synthesize fillColorInterpolate=_fillColorInterpolate;
@property(nonatomic) _Bool hasStrokeColorInterpolate;
@property(nonatomic) _Bool strokeColorInterpolate; // @synthesize strokeColorInterpolate=_strokeColorInterpolate;
@property(nonatomic) _Bool hasFillZIndex;
@property(nonatomic) _Bool hasSimpleLine;
@property(nonatomic) _Bool simpleLine; // @synthesize simpleLine=_simpleLine;
@property(nonatomic) _Bool hasZIndex;
@property(nonatomic) _Bool hasWidthDropoff;
@property(nonatomic) _Bool hasLabelHeightCurveLimit;
@property(nonatomic) _Bool hasLabelHeightCurve;
@property(nonatomic) _Bool hasLabelHeight;
@property(nonatomic) _Bool hasStrokeWidthCurveLimit;
@property(nonatomic) _Bool hasStrokeWidthCurve;
@property(nonatomic) _Bool hasStrokeWidth;
@property(nonatomic) _Bool hasWidthCurveLimit;
@property(nonatomic) _Bool hasWidthCurve;
@property(nonatomic) _Bool hasWidth;
@property(nonatomic) _Bool hasStrokeColor;
@property(nonatomic) unsigned int strokeColor; // @synthesize strokeColor=_strokeColor;
@property(nonatomic) _Bool hasFillColor;
@property(nonatomic) unsigned int fillColor; // @synthesize fillColor=_fillColor;
@property(nonatomic) _Bool hasVisible;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPTextureAtlas : PBCodable <NSCopying>
{
    unsigned int _quadHeight;
    unsigned int _quadWidth;
    NSData *_texture;
}

@property(nonatomic) unsigned int quadHeight; // @synthesize quadHeight=_quadHeight;
@property(nonatomic) unsigned int quadWidth; // @synthesize quadWidth=_quadWidth;
@property(retain, nonatomic) NSData *texture; // @synthesize texture=_texture;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPTrafficStyle : PBCodable <NSCopying>
{
    float _fadingOffset;
    float _fadingSlope;
    unsigned int _fillColor;
    float _patternLength;
    float _patternSlotLength;
    float _patternWidth;
    unsigned int _secondaryColor;
    int _uNUSEDPattern;
    float _widthFraction;
    struct {
        unsigned int fadingOffset:1;
        unsigned int fadingSlope:1;
        unsigned int fillColor:1;
        unsigned int patternLength:1;
        unsigned int patternSlotLength:1;
        unsigned int patternWidth:1;
        unsigned int secondaryColor:1;
        unsigned int uNUSEDPattern:1;
        unsigned int widthFraction:1;
    } _has;
}

@property(nonatomic) float fadingSlope; // @synthesize fadingSlope=_fadingSlope;
@property(nonatomic) float fadingOffset; // @synthesize fadingOffset=_fadingOffset;
@property(nonatomic) float patternWidth; // @synthesize patternWidth=_patternWidth;
@property(nonatomic) float patternLength; // @synthesize patternLength=_patternLength;
@property(nonatomic) unsigned int secondaryColor; // @synthesize secondaryColor=_secondaryColor;
@property(nonatomic) unsigned int fillColor; // @synthesize fillColor=_fillColor;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasFadingSlope;
@property(nonatomic) _Bool hasFadingOffset;
@property(nonatomic) _Bool hasPatternWidth;
@property(nonatomic) _Bool hasPatternLength;
@property(nonatomic) _Bool hasSecondaryColor;
@property(nonatomic) _Bool hasPatternSlotLength;
@property(nonatomic) float patternSlotLength; // @synthesize patternSlotLength=_patternSlotLength;
@property(nonatomic) _Bool hasUNUSEDPattern;
@property(nonatomic) int uNUSEDPattern; // @synthesize uNUSEDPattern=_uNUSEDPattern;
@property(nonatomic) _Bool hasFillColor;
@property(nonatomic) _Bool hasWidthFraction;
@property(nonatomic) float widthFraction; // @synthesize widthFraction=_widthFraction;

@end

__attribute__((visibility("hidden")))
@interface VKPZoomProperty : PBCodable <NSCopying>
{
    float _maxZ;
    float _minZ;
    VKPStyleProperties *_properties;
}

@property(retain, nonatomic) VKPStyleProperties *properties; // @synthesize properties=_properties;
@property(nonatomic) float maxZ; // @synthesize maxZ=_maxZ;
@property(nonatomic) float minZ; // @synthesize minZ=_minZ;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (void)dealloc;
- (void)applyTo:(id)arg1 zoom:(float)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKPerformanceTest : NSObject
{
    VKMapView *_mapView;
    _Bool _running;
    int _loopCounter;
    int _resultCount;
    struct VKPerformanceTestResult_struct *_results;
    NSString *_outputHeader;
}

+ (void)runWithMapView:(id)arg1 outputHeader:(id)arg2;
- (void)printResults;
- (void)runTest:(int)arg1 step:(int)arg2;
- (void)tick:(int)arg1;
- (void)abort;
- (void)loop;
- (void)dealloc;
- (id)initWithMapView:(id)arg1 outputHeader:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKPinDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
@property(readonly, nonatomic) float brightness;

@end

@interface VKPlatform : NSObject
{
    unsigned long long _memSize;
    int _numCPUs;
    _Bool _proceduralRoadAlpha;
    _Bool _useCheapTrafficShader;
    _Bool _shouldUseTrafficAlphaHack;
    _Bool _supportsBuildingStrokes;
    _Bool _supports3DBuildingStrokes;
}

+ (id)sharedPlatform;
@property(readonly, nonatomic) _Bool supports3DBuildingStrokes; // @synthesize supports3DBuildingStrokes=_supports3DBuildingStrokes;
@property(readonly, nonatomic) _Bool supportsBuildingStrokes; // @synthesize supportsBuildingStrokes=_supportsBuildingStrokes;
@property(readonly, nonatomic) _Bool shouldUseTrafficAlphaHack; // @synthesize shouldUseTrafficAlphaHack=_shouldUseTrafficAlphaHack;
@property(readonly, nonatomic) _Bool useCheapTrafficShader; // @synthesize useCheapTrafficShader=_useCheapTrafficShader;
@property(readonly, nonatomic) _Bool proceduralRoadAlpha; // @synthesize proceduralRoadAlpha=_proceduralRoadAlpha;
@property(readonly, nonatomic) unsigned long long memorySize; // @synthesize memorySize=_memSize;
@property(readonly, nonatomic) _Bool supportsBuildingShadows;
@property(readonly, nonatomic) unsigned int tileDecodeQueueWidth;
@property(readonly, nonatomic) _Bool shouldPregenerateLabelGlyphs;
@property(readonly, nonatomic) _Bool shouldStyleLabelsInParallel;
@property(readonly, nonatomic) _Bool supportsHiResBuildings;
@property(readonly, nonatomic) double mainScreenPPI;
@property(readonly, nonatomic) double maxContentScaleForRendering;
@property(readonly, nonatomic) double mainScreenScale;
@property(readonly, nonatomic) _Bool shouldDrawWhenReady;
@property(readonly, nonatomic) _Bool isPad;
@property(readonly, nonatomic) _Bool canMakeSharingThumbnails;
@property(readonly, nonatomic) _Bool supportsHiResRTT;
@property(readonly, nonatomic) unsigned int tilePrefetchNumberOfScreens;
@property(readonly, nonatomic) unsigned long long tileMaximumLimit;
- (unsigned long long)tileReserveLimit:(_Bool)arg1;
@property(readonly, nonatomic) _Bool roadsWithSimpleLineMeshesAvailable;
- (void)_determineHardware;
- (unsigned long long)_calculateMemSize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKPointLabelTileSource : VKLabelTileSource
{
}

- (unsigned char)_labelTileType;

@end

__attribute__((visibility("hidden")))
@interface VKPolygonDrawStyle : VKRenderStyle
{
    NSString *_name;
}

+ (int)renderStyleID;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (id)preferredTargetTextureNameAtZoom:(float)arg1;
- (id)preferredSourceTextureNameAtZoom:(float)arg1;
- (_Bool)fancyCasingsVisibleAtZoom:(float)arg1;
- (_Bool)casingsVisibleAtZoom:(float)arg1;
- (int)polygonType;
- (Matrix_5173352a)outerStrokeColorAtZoom:(float)arg1;
- (float)outerStrokeWidthAtZoom:(float)arg1;
- (Matrix_5173352a)strokeColorAtZoom:(float)arg1;
- (float)strokeWidthAtZoom:(float)arg1;
- (unsigned int)zIndexAtZoom:(float)arg1;
- (int)thirdTextureBlendModeAtZoom:(float)arg1;
- (id)thirdTextureVariantAtZoom:(float)arg1;
- (float)thirdTextureOpacityAtZoom:(float)arg1;
- (id)thirdTextureAtZoom:(float)arg1;
- (int)secondTextureBlendModeAtZoom:(float)arg1;
- (id)secondTextureVariantAtZoom:(float)arg1;
- (float)secondTextureOpacityAtZoom:(float)arg1;
- (id)secondTextureAtZoom:(float)arg1;
- (int)textureBlendModeAtZoom:(float)arg1;
- (id)targetTextureAtZoom:(float)arg1;
- (float)textureOpacityAtZoom:(float)arg1;
- (id)sourceTextureAtZoom:(float)arg1;
@property(readonly, nonatomic) Matrix_5173352a casingColor;
- (Matrix_5173352a)sourceFillColorAtZoom:(float)arg1;
- (Matrix_5173352a)targetFillColorAtZoom:(float)arg1;
- (Matrix_5173352a)fillColorAtZoom:(float)arg1;
- (_Bool)isTargetNotDrawn;
- (_Bool)isSourceNotDrawn;
- (_Bool)isNotDrawn;
- (_Bool)hasStrokeColor;
- (_Bool)hasFillTextureVariant;
- (_Bool)hasFillTexture;
- (_Bool)hasFillColorVariant;
- (_Bool)hasFillColor;
- (_Bool)visibleAtZoom:(float)arg1;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKPolygonGroup : NSObject
{
    VKPolygonDrawStyle *_cachedPolygonStyle;
    VKVectorTile *_tile;
    float _contentScale;
    struct unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> _extrusionFillMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> _extrusionStrokeMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh>>> _extrusionFillMeshVendorForPointyRoofs;
    struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> _extrusionStrokeMeshVendorForPointyRoofs;
    struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> _pointyRoofFillMeshVendor;
    struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> _pointyRoofStrokeMeshVendor;
    unsigned int _cullingMask;
    struct MeshSet<ggl::PolygonBase::MeshMesh, ggl::PolygonBase::DefaultVboVertexElement> _fillMeshInfo;
    struct MeshSet<ggl::PolygonMesh::MeshMesh, ggl::PolygonMesh::DefaultVboVertexElement> _strokeMeshInfo;
    struct MeshSet<ggl::PolygonBase::MeshMesh, ggl::PolygonBase::DefaultVboVertexElement> _fillMeshInfoForPointyRoofs;
    struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> _polygonEdges;
    shared_ptr_6e6219d6 _styleQuery;
    struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher>> _fillRenderItemBatchers;
    struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher>> _strokeRenderItemBatchers;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _fillCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _strokeCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _extrusionFillCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _extrusionStrokeCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _fillCullingGroupsForPointyRoofs;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _extrusionFillCullingGroupsForPointyRoofs;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _extrusionStrokeCullingGroupsForPointyRoofs;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _pointyRoofFillCullingGroups;
    struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range>>>>>> _pointyRoofStrokeCullingGroups;
}

@property(readonly, nonatomic) shared_ptr_6e6219d6 *styleQuery; // @synthesize styleQuery=_styleQuery;
@property(readonly, nonatomic) unsigned int cullingMask; // @synthesize cullingMask=_cullingMask;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateCachedStyle;
- (_Bool)addPointyRoofForPolygon:(CDStruct_2e21d8bb *)arg1 building:(CDStruct_54d51626 *)arg2 buildingModel:(unsigned char)arg3 scaleThreshold:(float)arg4 styleIndex:(float)arg5;
- (_Bool)canConstructPointyRoofForPolygon:(CDStruct_2e21d8bb *)arg1 building:(CDStruct_54d51626 *)arg2 buildingModel:(unsigned char)arg3 scaleThreshold:(float)arg4;
- (void)addExtrusionForPolygon:(CDStruct_2e21d8bb *)arg1 building:(CDStruct_54d51626 *)arg2 index:(unsigned long long)arg3 ofTotal:(unsigned long long)arg4 hasNonWaterStyle:(_Bool)arg5 triangulator:(id)arg6 forRoofStyle:(int)arg7;
- (void)didFinishAddingData;
- (void)addPolygon:(CDStruct_2e21d8bb *)arg1 building:(CDStruct_54d51626 *)arg2 index:(unsigned long long)arg3 ofTotal:(unsigned long long)arg4 hasNonWaterStyle:(_Bool)arg5 accessor:(struct ResourceAccessor *)arg6 triangulator:(id)arg7 prepareExtrusion:(_Bool)arg8 forRoofStyle:(int)arg9 scaleThreshold:(float)arg10;
- (void)willAddDataWithAccessor:(struct ResourceAccessor *)arg1;
- (void)prepareForPolygon:(CDStruct_2e21d8bb *)arg1 building:(CDStruct_54d51626 *)arg2 hasNonWaterStyle:(_Bool)arg3 forRoofStyle:(int)arg4 scaleThreshold:(float)arg5;
- (unsigned char)indexForGeoFeatureAttributes:(id)arg1;
- (void)addRangesToPointyRoofStrokeRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToPointyRoofFillRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToPointyRoofExtrusionStrokeRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToPointyRoofExtrusionFillRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToPointyRoofTopRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToExtrusionStrokeRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToExtrusionFillRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToStrokeRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
- (void)addRangesToFillRenderItemBatcher:(struct RenderItemBatcher *)arg1 forMeshAtIndex:(unsigned long long)arg2 cullingMask:(unsigned int)arg3;
@property(readonly, nonatomic) const MeshVendor_8027e961 *pointyRoofStrokeMeshVendor;
@property(readonly, nonatomic) const MeshVendor_c6d8e5cd *pointyRoofFillMeshVendor;
@property(readonly, nonatomic) const MeshVendor_8027e961 *extrusionStrokeMeshVendorForPointyRoofs;
@property(readonly, nonatomic) const MeshVendor_3faa0a72 *extrusionFillMeshVendorForPointyRoofs;
@property(readonly, nonatomic) vector_54f0f967 *fillMeshesForPointyRoofs;
@property(readonly, nonatomic) const MeshVendor_8027e961 *extrusionStrokeMeshVendor;
@property(readonly, nonatomic) const MeshVendor_3faa0a72 *extrusionFillMeshVendor;
@property(readonly, nonatomic) vector_0edf1665 *strokeMeshes;
@property(readonly, nonatomic) vector_54f0f967 *fillMeshes;
- (void)dealloc;
- (id)initWithStyleQuery:(shared_ptr_6e6219d6 *)arg1 tile:(id)arg2 contentScale:(float)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKPolygonLabelTileSource : VKLabelTileSource
{
}

- (unsigned char)_labelTileType;

@end

__attribute__((visibility("hidden")))
@interface VKPolygonMapModel : VKVectorMapModel <VKStyleManagerObserver>
{
    _Bool _drawShapes;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>>> _strokeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>>> _animatableStrokeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>>> _fillShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>>> _animatableFillShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>>> _coastlineShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::Glow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup>>> _glowShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _strokeRenderStateNoStencil;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _strokeRenderStateGreater;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _strokeRenderStateBlendGreater;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _strokeRenderStateNotEqual;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _fillRenderStateNoStencil;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _fillRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _fillRenderStateBlendNoStencil;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _fillRenderStateBlend;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _coastlineRenderStateNoStencil;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _coastlineRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _coastlineGlowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _coastlineRenderItemPool;
    struct shared_ptr<ggl::AnimatableTexture::VariantUniformData> _variantData;
    shared_ptr_1fee3c91 _groundCoverViewUniformData;
    struct shared_ptr<ggl::PolygonFill::FillUniformData> _groundCoverPolygonUniformData;
    shared_ptr_78ff922b _groundCoverMesh;
    struct unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup>> _groundCoverShaderSetup;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _groundCoverRenderState;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _groundCoverRenderItem;
    shared_ptr_6e6219d6 _groundCoverStyle;
    struct RenderItemBatcher _batcher;
}

@property(nonatomic) _Bool drawShapes; // @synthesize drawShapes=_drawShapes;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateStylesInTiles:(id)arg1 updateTextures:(_Bool)arg2;
- (void)willStartDrawingTiles:(id)arg1;
- (void)stylesheetDoneChanging;
- (void)stylesheetDidChange;
- (void)stylesheetWillChange;
- (_Bool)wantsCategorizedSourceTiles;
- (void)generateCoastlineRenderItemsWithContext:(id)arg1 commandBuffer:(struct CommandBuffer *)arg2;
- (void)generateRenderItemsForTransparentPolygonsInScene:(id)arg1 context:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)generateRenderItemsForOpaquePolygonsInScene:(id)arg1 context:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (struct CommandBuffer *)commandBufferInRenderQueue:(struct RenderQueue *)arg1 forFeatureWithAttributes:(id)arg2;
- (void)generateGroundCoverRenderItemsForScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)generateRenderItemsForScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)resetPools;
- (void)flushPools;
- (void)didReceiveMemoryWarning;
@property(readonly, nonatomic) _Bool shouldEverShowVegetation;
- (void)updateGroundCoverStyle;
- (unsigned long long)textureSize;
- (unsigned long long)mapLayerPosition;
- (void)reset;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) VKStyleManager *styleManager;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKPolygonTile : VKVectorTile
{
    NSMutableArray *_polygonGroups;
    NSMutableArray *_coastlineGroups;
    float _alpha;
    float _scale;
    float _minLayeringHeight;
    float _maxLayeringHeight;
    VKAnimation *_animation;
    VKAnimation *_animationForPitch;
}

@property(retain, nonatomic) VKAnimation *animationForPitch; // @synthesize animationForPitch=_animationForPitch;
@property(retain, nonatomic) VKAnimation *animation; // @synthesize animation=_animation;
@property(readonly, nonatomic) float maxLayeringHeight; // @synthesize maxLayeringHeight=_maxLayeringHeight;
@property(readonly, nonatomic) float minLayeringHeight; // @synthesize minLayeringHeight=_minLayeringHeight;
@property(nonatomic) float scale; // @synthesize scale=_scale;
@property(nonatomic) float alpha; // @synthesize alpha=_alpha;
@property(readonly, nonatomic) NSArray *coastlineGroups; // @synthesize coastlineGroups=_coastlineGroups;
@property(readonly, nonatomic) NSArray *polygonGroups; // @synthesize polygonGroups=_polygonGroups;
- (void)buildCoastlinesWithStyleSession:(struct StyleResolutionSession *)arg1;
- (void)buildMeshesWithStyleSession:(struct StyleResolutionSession *)arg1 device:(struct Device *)arg2 triangulator:(id)arg3 prepareExtrusion:(_Bool)arg4;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 prepareExtrusion:(_Bool)arg3 styleManager:(id)arg4 sharedResources:(id)arg5 contentScale:(double)arg6 device:(struct Device *)arg7;

@end

__attribute__((visibility("hidden")))
@interface VKPolygonTileSource : VKVectorTileSource
{
}

- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (unsigned long long)mapLayerForZoomLevelRange;
- (long long)defaultMinimumZoomLevel;

@end

@interface VKPolylineGroupOverlay : NSObject <VKOverlay>
{
    NSMutableSet *_polylines;
    GEOMapRegion *_boundingMapRegion;
    struct __CFSet *_observers;
    VKPolylineOverlay *_selectedPolyline;
}

@property(retain, nonatomic) VKPolylineOverlay *selectedPolyline; // @synthesize selectedPolyline=_selectedPolyline;
@property(readonly, nonatomic) GEOMapRegion *boundingMapRegion; // @synthesize boundingMapRegion=_boundingMapRegion;
@property(readonly, nonatomic) NSSet *polylines; // @synthesize polylines=_polylines;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;
- (void)_updateBoundingMapRegion;
- (void)removePolyline:(id)arg1;
- (void)addPolyline:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKPolylineGroupOverlayPainter : VKOverlayPainter <VKPolylineGroupOverlayObserver>
{
    VKPolylineOverlay *_selectedPolyline;
    NSMapTable *_polylinesToPainters;
    _Bool _showTraffic;
}

@property(nonatomic) _Bool showTraffic; // @synthesize showTraffic=_showTraffic;
- (void)setApplicationState:(unsigned int)arg1;
- (void)stylesheetDidChange;
- (void)_addPainterForOverlay:(id)arg1;
- (void)polylineGroup:(id)arg1 didSelectPolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didRemovePolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didAddPolyline:(id)arg2;
- (void)gglLayoutWithContext:(id)arg1 commandBuffer:(struct CommandBuffer *)arg2 tiles:(id)arg3;
- (void)layoutWithContext:(id)arg1 tiles:(id)arg2 keysInView:(id)arg3;
@property(readonly, nonatomic) VKPolylineOverlayPainter *selectedPolylinePainter;
- (void)setContainerModel:(id)arg1;
- (void)dealloc;
- (id)initWithOverlay:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKPolylineOverlay : NSObject <VKOverlay, GEOComposedRouteObserver>
{
    struct __CFSet *_observers;
    GEOComposedRoute *_composedRoute;
    _Bool _isReadyForSnapping;
    double _trafficTimeStamp;
    VKTrafficSegmentsAlongRoute *_trafficSegments;
}

@property(readonly, nonatomic) double trafficTimeStamp; // @synthesize trafficTimeStamp=_trafficTimeStamp;
@property(readonly, nonatomic) VKTrafficSegmentsAlongRoute *trafficSegments; // @synthesize trafficSegments=_trafficSegments;
@property(readonly, nonatomic) GEOComposedRoute *composedRoute; // @synthesize composedRoute=_composedRoute;
- (void)composedRoute:(id)arg1 selectedSections:(id)arg2 deselectedSections:(id)arg3;
- (void)composedRouteUpdatedTraffic:(id)arg1;
- (void)composedRouteUpdatedSnappedPaths:(id)arg1;
- (_Bool)isSnappingForSceneTiles;
- (void)updateLabelExternalObjectsInRenderRegion:(id)arg1;
- (id)getPathsForPainter:(id)arg1 renderRegion:(id)arg2 shouldSnapToRoads:(_Bool)arg3 snappingCompletionHandler:(CDUnknownBlockType)arg4;
- (void)_updateTraffic;
- (struct _NSRange)sectionRangeForBounds:(CDStruct_d2b197d1)arg1;
@property(readonly, nonatomic) GEOMapRegion *boundingMapRegion;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;
- (void)_setNeedsLayout;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)dealloc;
- (id)initWithComposedRoute:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKPolylineOverlayPainter : VKOverlayPainter <VKPolylineObserver>
{
    VKRouteLine *_routeLine;
    double _routeLineWidthScaleRegular;
    double _routeLineHalfWidthRealistic;
    _Bool _selected;
    VKPolylineOverlay *_routeOverlay;
    struct unordered_map<GEOTransportType, vk::TransportTypeInfo, std::__1::hash<GEOTransportType>, std::__1::equal_to<GEOTransportType>, std::__1::allocator<std::__1::pair<const GEOTransportType, vk::TransportTypeInfo>>> _transportTypeMap;
    shared_ptr_1fee3c91 _viewUniforms;
    struct unique_ptr<vk::TrafficManager, std::__1::default_delete<vk::TrafficManager>> _trafficManager;
    struct unique_ptr<vk::TrafficLayer, std::__1::default_delete<vk::TrafficLayer>> _trafficLayer;
    struct unique_ptr<vk::RouteLineArrowManager, std::__1::default_delete<vk::RouteLineArrowManager>> _arrowManager;
    struct vector<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer>>>> _arrowLayers;
    struct unique_ptr<vk::RouteLineManager, std::__1::default_delete<vk::RouteLineManager>> _routeLineManager;
    struct unique_ptr<vk::RouteLineLayer, std::__1::default_delete<vk::RouteLineLayer>> _routeLineLayer;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _debugRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _debugRenderItems;
    struct unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup>>> _debugShaderSetups;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _debugLineRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh>>> _debugUnmatchedRouteLineMeshes;
    VKStyleManager *_lastQueriedStyleManager;
    double _previousViewUnitsPerPoint;
    int _styleZ;
    struct unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *>> _selectedSections;
    CDStruct_aa5aacbc _matrix;
    NSSet *_previousTilesInView;
    VKTileKeyList *_previousKeysInView;
    double _simplificationEpsilon;
    VKAnimation *_fadeAnimation;
    float _alphaScale;
    VKAnimation *_arrowFadeAnimation;
    float _arrowAlphaScale;
    _Bool _showArrows;
    VKAnimation *_arrowCrossFadeAnimation;
    _Bool _showTraffic;
    _Bool _forceRoutelineUpdate;
    int _stencilValue;
    double _contentScale;
    shared_ptr_6e6219d6 _trafficStyle;
    unsigned long long _targetDisplayStep;
    float _crossfadingDisplayStep;
    _Bool _wasInRealisticMode;
}

@property(nonatomic) _Bool showTraffic; // @synthesize showTraffic=_showTraffic;
@property(retain, nonatomic) VKPolylineOverlay *routeOverlay; // @synthesize routeOverlay=_routeOverlay;
@property(nonatomic) _Bool selected; // @synthesize selected=_selected;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)polyline:(id)arg1 selectedSections:(id)arg2 deselectedSections:(id)arg3;
- (void)stylesheetDidChange;
- (void)_updateZoomDependentStyleProperties;
- (void)setContainerModel:(id)arg1;
- (id)styleManager;
- (void)updateRouteLineStencilValue:(int)arg1;
- (void)_didReceiveMemoryWarning;
- (void)prepareToDrawWithCanvas:(id)arg1;
- (float)automobileRouteLineWidthForCamera:(id)arg1 canvasSize:(struct CGSize)arg2;
- (_Bool)_shouldShowTraffic;
- (void)layoutWithContext:(id)arg1 tiles:(id)arg2 keysInView:(id)arg3;
- (void)layoutDebugUnmatchedRouteLine:(id)arg1 commandBuffer:(struct CommandBuffer *)arg2;
- (void)prepareDebugLines;
- (void)flushPools;
- (void)gglLayoutWithContext:(id)arg1 commandBuffer:(struct CommandBuffer *)arg2 tiles:(id)arg3 layer:(unsigned char)arg4;
- (void)gglLayoutWithContext:(id)arg1 commandBuffer:(struct CommandBuffer *)arg2 tiles:(id)arg3;
- (void)setNeedsLayoutForPolyline:(id)arg1;
@property(readonly, nonatomic) VKPolylineOverlay *polyline;
- (void)dealloc;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)initWithOverlay:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKPolylineOverlayRenderRegion : NSObject
{
    NSSet *_tiles;
    CDStruct_aca18c62 _visibleRect;
    vector_6c1b99c0 _rectsForSnapping;
    struct vector<VKTileKey, std::__1::allocator<VKTileKey>> _snappedTileKeys;
}

@property(readonly, nonatomic) CDStruct_d2b197d1 visibleRect; // @synthesize visibleRect=_visibleRect;
@property(readonly, nonatomic) NSSet *tiles; // @synthesize tiles=_tiles;
- (id).cxx_construct;
- (void).cxx_destruct;
- (const vector_6c1b99c0 *)rectsForSnapping;
- (_Bool)isEquivalentToNewRegion:(id)arg1;
- (void)dealloc;
- (id)initForKeysInView:(id)arg1 tiles:(id)arg2 allowsSnapping:(_Bool)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKPolylinePath : NSObject
{
    VKPolylineOverlay *_overlay;
    GEOComposedRouteSection *_section;
    GEOSnappedRoutePath *_snappedPath;
    Matrix_8746f91e *_points;
    unsigned int _pointCount;
    _Bool _ownsPoints;
    struct PolylineCoordinate _routeStart;
    struct PolylineCoordinate _routeEnd;
    BOOL _trafficSpeed;
}

@property(nonatomic) BOOL trafficSpeed; // @synthesize trafficSpeed=_trafficSpeed;
@property(readonly, nonatomic) GEOComposedRouteSection *section; // @synthesize section=_section;
@property(readonly, nonatomic) GEOSnappedRoutePath *snappedPath; // @synthesize snappedPath=_snappedPath;
@property(nonatomic) struct PolylineCoordinate routeEnd; // @synthesize routeEnd=_routeEnd;
@property(nonatomic) struct PolylineCoordinate routeStart; // @synthesize routeStart=_routeStart;
@property(readonly, nonatomic) unsigned int pointCount; // @synthesize pointCount=_pointCount;
@property(readonly, nonatomic) Matrix_8746f91e *points; // @synthesize points=_points;
- (id).cxx_construct;
- (void)splitTrafficSegmentationAndAddTo:(id)arg1 with:(id)arg2;
- (void)assignTo:(id)arg1 withSegment:(const struct TrafficSegment *)arg2;
- (Matrix_8746f91e)interpolateAt:(const struct PolylineCoordinate *)arg1;
- (struct PolylineCoordinate)pathIndexFromRouteIndex:(struct PolylineCoordinate)arg1;
- (void)assignPoints:(Matrix_8746f91e *)arg1 count:(unsigned int)arg2;
- (id)description;
@property(readonly) _Bool isMapMatched;
@property(readonly) _Bool hasCompletedMapMatching;
- (void)dealloc;
- (id)initWithOverlay:(id)arg1 snappedPath:(id)arg2;
- (id)initWithOverlay:(id)arg1 section:(id)arg2 routeStartIndex:(unsigned int)arg3 routeEndIndex:(unsigned int)arg4;
- (id)initWithOverlay:(id)arg1 section:(id)arg2;

@end

@interface VKPuckAnimator : NSObject
{
    id <VKPuckAnimatorTarget> _target;
    VKAnimation *_animation;
    VKRunningCurve *_curve;
    VKPuckAnimatorLocationProjector *_locationProjector;
    double _vehicleHeading;
    id <VKPuckAnimatorDelegate> _delegate;
    long long _pausedCount;
    _Bool _suspended;
    double _tracePlaybackSpeedMultiplier;
    unsigned long long _behavior;
    struct VKPoint _lastProjectedPosition;
    GEORouteMatch *_lastProjectedLocation;
}

@property(nonatomic) unsigned long long behavior; // @synthesize behavior=_behavior;
@property(nonatomic) double tracePlaybackSpeedMultiplier; // @synthesize tracePlaybackSpeedMultiplier=_tracePlaybackSpeedMultiplier;
@property(retain, nonatomic) GEORouteMatch *lastProjectedLocation; // @synthesize lastProjectedLocation=_lastProjectedLocation;
@property(nonatomic) id <VKPuckAnimatorDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) id <VKPuckAnimatorTarget> target; // @synthesize target=_target;
- (id).cxx_construct;
- (void)updateVehicleHeading:(double)arg1;
- (void)updateLocation:(id)arg1 routeMatch:(id)arg2;
- (void)_step;
- (void)resume;
- (void)pause;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKPuckAnimatorLocationProjector : NSObject
{
    GEORouteMatch *_routeMatch;
    GEORouteMatch *_projectedRouteMatch;
    struct VKPoint _projectedPosition;
    double _projectedCourse;
}

@property(readonly, nonatomic) double projectedCourse; // @synthesize projectedCourse=_projectedCourse;
@property(readonly, nonatomic) struct VKPoint projectedPosition; // @synthesize projectedPosition=_projectedPosition;
@property(retain, nonatomic) GEORouteMatch *projectedRouteMatch; // @synthesize projectedRouteMatch=_projectedRouteMatch;
@property(retain, nonatomic) GEORouteMatch *routeMatch; // @synthesize routeMatch=_routeMatch;
- (id).cxx_construct;
@property(readonly, nonatomic) _Bool projectedLocationOnRoute;
@property(readonly, nonatomic) CDStruct_c3b9c2ee projectedLocation;
- (void)projectFromLocation:(id)arg1 routeMatch:(id)arg2 speedMultiplier:(double)arg3;
- (void)_updateCourseAndPositionFromRouteMatch;
- (void)reset;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKPuckDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
@property(readonly, nonatomic) float offset;
@property(readonly, nonatomic) float size;
@property(readonly, nonatomic) Matrix_5173352a arrowColorStale;
@property(readonly, nonatomic) Matrix_5173352a arrowColor;
@property(readonly, nonatomic) float arrowBrightness;
@property(readonly, nonatomic) float circleBrightness;
@property(readonly, nonatomic) _Bool hasOffset;
@property(readonly, nonatomic) _Bool hasSize;
@property(readonly, nonatomic) _Bool hasArrowColorStale;
@property(readonly, nonatomic) _Bool hasArrowColor;
@property(readonly, nonatomic) _Bool hasArrowBrightness;
@property(readonly, nonatomic) _Bool hasCircleBrightness;

@end

@interface VKRasterMapTile : NSObject
{
    shared_ptr_edb96180 _bitmapData;
    struct VKTileKey _superTileKey;
    struct VKTileKey _finalTileKey;
    double _scale;
    struct CGImage *_image;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGImage *)_image;
- (id)imageDataInFormat:(unsigned long long)arg1;
- (_Bool)writeImageToFile:(id)arg1 format:(unsigned long long)arg2 error:(id *)arg3;
- (id)tileForKey:(const struct VKRasterTileKey *)arg1;
- (void)foreachTileOfSize:(unsigned int)arg1 perform:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)initWithBitmapData:(shared_ptr_edb96180)arg1 tileKey:(const struct VKTileKey *)arg2 scale:(double)arg3;
- (id)initWithBitmapData:(shared_ptr_edb96180)arg1 superKey:(const struct VKTileKey *)arg2 finalKey:(const struct VKTileKey *)arg3 scale:(double)arg4;
@property(readonly, nonatomic) struct VKRasterTileKey tileKey;

@end

@interface VKRasterMapTileCache : NSObject
{
    NSObject<OS_dispatch_queue> *_cacheQ;
    VKLRUCache *_cache;
}

- (void)objectForKey:(id)arg1 queue:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (oneway void)setObject:(id)arg1 forKey:(id)arg2;
- (id)initWithMaxCapacity:(unsigned long long)arg1;

@end

@interface VKRasterMapTileCreator : NSObject <VKMapModelDelegate>
{
    VKImageCanvas *_canvas;
    VKMapModel *_mapModel;
    struct VKTileKey _superTileKey;
    double _startTimestamp;
    _Bool _loaderOpen;
    CDUnknownBlockType _completion;
    VKRasterMapTileRequest *_request;
    struct GLRenderer *_gglRenderer;
}

+ (shared_ptr_77723e34)device;
- (id).cxx_construct;
- (void)mapModelDidBecomePartiallyDrawn:(id)arg1;
- (id)mapModel:(id)arg1 painterForOverlay:(id)arg2;
- (void)mapModelDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapModelDidFinishLoadingTiles:(id)arg1;
- (void)mapModelDidStartLoadingTiles:(id)arg1;
- (void)mapModelDidUpdateMinMaxZoomLevel:(id)arg1;
- (void)mapModel:(id)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (void)mapModel:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapModel:(id)arg1 annotationMarker:(id)arg2 didChangeDragState:(long long)arg3 fromOldState:(long long)arg4;
- (void)mapModel:(id)arg1 needsPanByOffset:(struct CGPoint)arg2 relativeToScreenPoint:(struct CGPoint)arg3 animated:(_Bool)arg4 duration:(double)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (id)mapModel:(id)arg1 markerForAnnotation:(id)arg2;
- (double)mapModelZoomScale:(id)arg1;
- (_Bool)mapModelInNav:(id)arg1;
- (_Bool)mapModelInNavAtDefaultZoom:(id)arg1;
- (void)mapModelDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(_Bool)arg2;
- (void)mapModelWillBecomFullyDrawn:(id)arg1;
- (void)renderRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)detailedDescription;
- (void)dealloc;
- (id)initWithSoftwareRendering:(_Bool)arg1 homeQueue:(id)arg2;
- (void)_lookAtKey:(const struct VKTileKey *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKRasterMapTileRequest : NSObject <NSCopying>
{
    unsigned int _scale;
    unsigned int _tileGroupID;
    long long _mapType;
    NSLocale *_locale;
    struct VKRasterTileKey _tileKey;
}

@property(nonatomic) unsigned int tileGroupID; // @synthesize tileGroupID=_tileGroupID;
@property(retain, nonatomic) NSLocale *locale; // @synthesize locale=_locale;
@property(nonatomic) unsigned int scale; // @synthesize scale=_scale;
@property(nonatomic) long long mapType; // @synthesize mapType=_mapType;
@property(nonatomic) struct VKRasterTileKey tileKey; // @synthesize tileKey=_tileKey;
- (void)isReallyInvalid:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool isInvalid;
@property(readonly, nonatomic) struct VKCacheKey cacheKey;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
@property(readonly, nonatomic) struct VKTileKey tk;
@property(readonly, nonatomic) const struct VKRasterTileKey *tileKeyPtr;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface VKRasterMapTileServer : NSObject
{
    VKRasterMapTileCache *_superTileCache;
    NSMutableDictionary *_activeTileCreators;
    NSMutableDictionary *_pendingRequests;
    NSMutableSet *_tileCreators;
    unsigned int _superTileSize;
    _Bool _softwareRendering;
    NSObject<OS_dispatch_queue> *_homeQueue;
}

@property(readonly, nonatomic) unsigned int superTileSize; // @synthesize superTileSize=_superTileSize;
- (void)_renderRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)renderRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)detailedDescription;
- (void)dealloc;
- (id)initWithSuperTileSize:(unsigned int)arg1 cache:(id)arg2 softwareRendering:(_Bool)arg3 homeQueue:(id)arg4;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKRasterMapTileServerCallback : NSObject
{
    VKRasterMapTileRequest *request;
    CDUnknownBlockType handler;
    double startTimestamp;
}

@property(nonatomic) double startTimestamp; // @synthesize startTimestamp;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler;
@property(retain, nonatomic) VKRasterMapTileRequest *request; // @synthesize request;
- (void)dealloc;
- (id)description;

@end

@interface VKRasterMapTileServerLoadBalancer : NSObject
{
    NSArray *_tileServers;
    unsigned int _superTileSize;
    NSArray *_snapshotServers;
}

- (void)renderTileRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)renderSnapshotRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)description;
- (void)dealloc;
- (id)initWithTileServers:(id)arg1 snapshotServers:(id)arg2;

@end

@interface VKRasterOverlay : NSObject
{
    id <VKRasterOverlayDelegate> _delegate;
    struct {
        CDStruct_34734122 origin;
        struct {
            double width;
            double height;
        } size;
    } _replaceMapContentInRect;
    unsigned long long _level;
    VKRasterOverlayTileSource *_mapModel;
    VKRasterOverlayTileSource *_tileSource;
}

@property(nonatomic) VKRasterOverlayTileSource *tileSource; // @synthesize tileSource=_tileSource;
@property(nonatomic) unsigned long long level; // @synthesize level=_level;
@property(nonatomic) CDStruct_90e2a262 replaceMapContentInRect; // @synthesize replaceMapContentInRect=_replaceMapContentInRect;
@property id <VKRasterOverlayDelegate> delegate; // @synthesize delegate=_delegate;
- (id).cxx_construct;
- (void)setNeedsDisplay;
- (void)drawKey:(const CDStruct_32a7f38a *)arg1 inContext:(struct CGContext *)arg2;
- (_Bool)canDrawKey:(const CDStruct_32a7f38a *)arg1;
- (void)setNeedsDisplayInRect:(const CDStruct_90e2a262 *)arg1 level:(long long)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKRasterOverlayMapModel : VKMapTileModel <VKMapLayer>
{
    NSMutableArray *_sortedTiles;
    unsigned long long _level;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _gglRenderState;
    struct unique_ptr<ggl::Mesh, std::__1::default_delete<ggl::Mesh>> _unitMesh;
    struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem>> _clearItem;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)reset;
- (void)dealloc;
- (id)initWithLevel:(unsigned long long)arg1;
- (_Bool)shouldLayoutWithoutStyleManager;
- (unsigned long long)mapLayerPosition;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKScene : NSObject <NSCopying>
{
    NSSet *_tilesToRender;
    NSSet *_neighborTiles;
    VKTileKeyList *_keysInView;
    VKTileKeyList *_neighborKeys;
    GEOTileKeyList *_debugKeyList;
    _Bool _fullyLoaded;
    _Bool _mapIsOpaque;
    NSMutableArray *_rasterOverlayScenes;
}

@property(nonatomic) _Bool mapIsOpaque; // @synthesize mapIsOpaque=_mapIsOpaque;
@property(nonatomic) _Bool fullyLoaded; // @synthesize fullyLoaded=_fullyLoaded;
@property(retain, nonatomic) GEOTileKeyList *debugKeyList; // @synthesize debugKeyList=_debugKeyList;
@property(retain, nonatomic) VKTileKeyList *neighborKeys; // @synthesize neighborKeys=_neighborKeys;
@property(retain, nonatomic) VKTileKeyList *keysInView; // @synthesize keysInView=_keysInView;
@property(retain, nonatomic) NSSet *neighborTiles; // @synthesize neighborTiles=_neighborTiles;
@property(retain, nonatomic) NSSet *tilesToRender; // @synthesize tilesToRender=_tilesToRender;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)clearRasterOverlayScenes;
- (id)rasterOverlaySceneAtLevel:(unsigned long long)arg1;
- (void)addRasterOverlayScene:(id)arg1;
- (void)dealloc;
- (void)reset;

@end

__attribute__((visibility("hidden")))
@interface VKRasterOverlayScene : VKScene <NSCopying>
{
    unsigned long long _overlayLevel;
}

@property(nonatomic) unsigned long long overlayLevel; // @synthesize overlayLevel=_overlayLevel;

@end

__attribute__((visibility("hidden")))
@interface VKRasterOverlayTileSource : VKTileSource
{
    NSMutableArray *_overlays;
    NSObject<OS_dispatch_group> *_renderGroup;
    NSObject<OS_dispatch_queue> *_homeQ;
}

@property(readonly, nonatomic) NSArray *overlays;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)invalidate;
- (void)_flush;
- (void)invalidateRect:(const CDStruct_d2b197d1 *)arg1 level:(long long)arg2;
- (void)_queueDraw:(const struct VKTileKey *)arg1;
- (_Bool)cancelFetchForKey:(const struct VKTileKey *)arg1;
- (void)fetchTileForKey:(const struct VKTileKey *)arg1 sourceKey:(const struct VKTileKey *)arg2;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
- (unsigned int)maximumDownloadZoomLevel;
- (unsigned int)minimumDownloadZoomLevel;
- (long long)tileSize;
- (_Bool)canFetchTileForKey:(const struct VKTileKey *)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKRasterTile : VKTile
{
    NSData *_data;
    VKStyleManager *_styleManager;
    int _genericTileType;
    _Bool _hasGenericTileType;
    shared_ptr_479d1306 _gglTexture;
    struct RenderItem _renderItem;
    struct unique_ptr<ggl::Texture::Shader::Setup, std::__1::default_delete<ggl::Texture::Shader::Setup>> _shaderSetup;
    struct unique_ptr<ggl::Clut::Shader::Setup, std::__1::default_delete<ggl::Clut::Shader::Setup>> _shaderSetupCLUT;
    struct unique_ptr<ggl::TextureWithReverseAlpha::Shader::Setup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup>> _shaderReverseAlphaSetup;
}

@property(nonatomic) shared_ptr_479d1306 gglTexture; // @synthesize gglTexture=_gglTexture;
@property(readonly, nonatomic) int genericTileType; // @synthesize genericTileType=_genericTileType;
@property(readonly, nonatomic) _Bool hasGenericTileType; // @synthesize hasGenericTileType=_hasGenericTileType;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)immediateLoad:(struct Device *)arg1;
- (void)dealloc;
- (void)gglBuildTexture:(struct Device *)arg1;
- (struct TextureData2D *)buildTextureDataFromCGImage:(struct CGImage *)arg1;
- (struct CGImage *)newCGImageFromData:(id)arg1;
@property(readonly, nonatomic) struct RenderItem *renderItem;
- (void)setupReverseAlphaShaderWithRenderState:(struct RenderState *)arg1 mesh:(struct Mesh *)arg2 roadAlpha:(float)arg3;
- (void)setupNormalShaderWithRenderState:(struct RenderState *)arg1 mesh:(struct Mesh *)arg2;
- (void)setupClutShaderWithRenderState:(struct RenderState *)arg1 mesh:(struct Mesh *)arg2 clutTexture:(struct Texture2D *)arg3 clutBlend:(float)arg4;
- (id)initWithKey:(const struct VKTileKey *)arg1 imageData:(id)arg2 styleManager:(id)arg3 genericTileType:(int)arg4;
- (id)initWithKey:(const struct VKTileKey *)arg1 imageData:(id)arg2 styleManager:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKRasterTrafficTileSource : VKTileSetBackedTileSource
{
}

- (unsigned long long)mapLayerForZoomLevelRange;
- (_Bool)expires;
- (_Bool)minimumZoomLevelBoundsCamera;
- (_Bool)maximumZoomLevelBoundsCamera;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKRasterTrafficIncidentsTileSource : VKRasterTrafficTileSource
{
}

- (unsigned long long)mapLayerForZoomLevelRange;

@end

__attribute__((visibility("hidden")))
@interface VKRasterTrafficMapModel : VKMapTileModel <VKMapLayer>
{
    shared_ptr_6e6219d6 _trafficDrawStyle;
    int _sourceTileZtoStencilOffset;
    _Bool _needsTileStencil;
    struct unique_ptr<vk::TrafficManager, std::__1::default_delete<vk::TrafficManager>> _trafficManager;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)stylesheetDidChange;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (unsigned long long)mapLayerPosition;
- (unsigned char)commandBufferId;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKRasterTrafficTile : VKTile
{
    GEOVoltaireRasterTileTrafficData *_modelTile;
    NSMutableArray *_incidents;
    VKSharedResources *_sharedResources;
    struct unique_ptr<vk::TrafficLayer, std::__1::default_delete<vk::TrafficLayer>> _trafficLayer;
}

@property(readonly, nonatomic) NSArray *incidents; // @synthesize incidents=_incidents;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (void)_buildIncidents;
- (void)_buildGGLLayer:(struct Device *)arg1;
@property(readonly, nonatomic) struct TrafficLayer *trafficLayer;
- (id)initWithKey:(const struct VKTileKey *)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sharedResources:(id)arg3 trafficData:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKRasterizedMapTile : VKRasterTile
{
}

- (void)gglBuildTexture;
- (id)initWithKey:(const struct VKTileKey *)arg1 gglTexture:(const shared_ptr_479d1306 *)arg2 styleManager:(id)arg3;
- (void)buildTexture;

@end

__attribute__((visibility("hidden")))
@interface VKRealisticLabelTileSource : VKLabelTileSource
{
}

- (unsigned char)_labelTileType;
- (long long)minimumZoomLevel;

@end

__attribute__((visibility("hidden")))
@interface VKRealisticMapModel : VKVectorMapModel <VKMapLayer>
{
    double _fade;
    float _sceneAlpha;
    id <GEORoutePreloadSession> _routePreloadSession;
    _Bool _disableRealisticRoads;
    _Bool _disableRealisticLand;
    VKSkyModel *_skyModel;
    struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem>> _clearItem;
    struct shared_ptr<ggl::AnimatableTexture::VariantUniformData> _variantData;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>>> _roadStencilShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>>> _texturedShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>>> _animatableTexturedShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>>> _roadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>>> _animatableRoadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>>> _casingShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>>> _casingFacadeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>>> _casingSidewalkShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>>> _casingTopShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>>> _roadShadowShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _roadStencilRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _landRenderStateWithoutBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _landRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _coastlineRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _waterRenderStateWithoutBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _waterRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _roadRenderStateWithoutBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _roadRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _casingShadowRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _casingFacadeRenderStateWithoutBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _casingFacadeRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _casingSidewalkShadowRenderState;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _casingTopRenderStateWithoutBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _casingTopRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _roadShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _roadStencilRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _texturedRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _roadRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _casingShadowRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _casingFacadeRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _casingTopRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _roadShadowRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>>> _debugShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem>>> _debugRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _debugRenderState;
    _Bool _needDebugReset;
    struct RenderItemBatcher _batcher;
}

@property(nonatomic) float sceneAlpha; // @synthesize sceneAlpha=_sceneAlpha;
@property(nonatomic) _Bool disableRealisticRoads; // @synthesize disableRealisticRoads=_disableRealisticRoads;
@property(nonatomic) _Bool disableRealisticLand; // @synthesize disableRealisticLand=_disableRealisticLand;
@property(retain, nonatomic) VKSkyModel *skyModel; // @synthesize skyModel=_skyModel;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)stylesheetDoneChanging;
- (void)stylesheetDidChange;
- (void)stylesheetTransitionDidProgress;
- (void)stylesheetWillTransition:(unsigned long long)arg1;
- (void)setupRealisticUniformBuffer:(struct RealisticUniformData *)arg1 forTile:(id)arg2;
- (void)appendRoadCommandsToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2 skyParameters:(const CDStruct_ac74ac41 *)arg3;
- (void)appendWaterCommandsToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2 skyParameters:(const CDStruct_ac74ac41 *)arg3;
- (void)appendLandCommandsToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2 skyParameters:(const CDStruct_ac74ac41 *)arg3;
- (void)appendStencilCommandsToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2;
- (void)resetPools;
- (void)flushPools;
- (void)reset;
- (void)didReceiveMemoryWarning;
- (void)resetDebugPools:(id)arg1;
- (void)appendDebugPreloadMissesToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendDebugPreloadStatusToBuffer:(struct CommandBuffer *)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (double)_calculateZoomLevelWithContext:(id)arg1;
- (_Bool)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;
- (void)gatherRenderingPreloadItems:(vector_b35310ee *)arg1;
- (void)dealloc;
- (id)init;
@property(retain, nonatomic) id <GEORoutePreloadSession> routePreloadSession;
- (_Bool)minimumZoomLevelBoundsCamera;
- (unsigned long long)mapLayerPosition;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKRealisticRoadGroup : NSObject
{
    struct VKTileKey _tileKey;
    int _renderZ;
    VKRealisticPolygonMaker *_roadPolygonMaker;
    float _roadZ;
    float _casingHeight;
    float _casingWidth;
    float _casingTopLift;
    float _sidewalkShadowWidth;
    float _casingShadowWidth;
    float _casingShadowLift;
    float _roadShadowRamp;
    float _roadShadowWidth;
    float _roadShadowTaperLength;
    Matrix_8746f91e _tileSize;
    Matrix_8746f91e _tileOrigin;
    shared_ptr_6e6219d6 _styleQuery;
    float _casingShadowRamp;
    map_604bf0d9 _roadDrawableIndices;
    vector_5bdcb8f5 _roadDrawables;
    struct fast_shared_ptr<ggl::PolygonBase::CompressedMeshMesh> _topMesh;
    struct fast_shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> _facadeMesh;
    struct fast_shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> _shadowMesh;
    struct fast_shared_ptr<ggl::PolygonBase::CompressedMeshMesh> _sidewalkShadowMesh;
    struct fast_shared_ptr<ggl::RealisticRoadShadow::RealisticMesh> _roadShadowMesh;
}

@property(readonly, nonatomic) vector_5bdcb8f5 *roadMeshDrawables; // @synthesize roadMeshDrawables=_roadDrawables;
@property(readonly, nonatomic) float casingShadowRamp; // @synthesize casingShadowRamp=_casingShadowRamp;
@property(nonatomic) shared_ptr_6e6219d6 styleQuery; // @synthesize styleQuery=_styleQuery;
@property(readonly, nonatomic) float roadShadowTaperLength; // @synthesize roadShadowTaperLength=_roadShadowTaperLength;
@property(readonly, nonatomic) float roadShadowWidth; // @synthesize roadShadowWidth=_roadShadowWidth;
@property(readonly, nonatomic) float roadShadowRamp; // @synthesize roadShadowRamp=_roadShadowRamp;
@property(nonatomic) int renderZ; // @synthesize renderZ=_renderZ;
- (id).cxx_construct;
- (void).cxx_destruct;
- (struct TexturedDrawable *)_meshForStyleQuery:(shared_ptr_6e6219d6)arg1 scale:(double)arg2 sharedResources:(id)arg3;
- (void)updateComponentsWithContentScale:(double)arg1 sharedResources:(id)arg2;
- (void)extractRoadPolygonWithPoints:(const Matrix_8746f91e *)arg1 pointCount:(unsigned long long)arg2 indices:(const unsigned short *)arg3 indexCount:(unsigned long long)arg4 styleQuery:(shared_ptr_6e6219d6)arg5 contentScale:(double)arg6 sharedResources:(id)arg7;
- (void)extractShadowsWithPoints:(const Matrix_8746f91e *)arg1 count:(unsigned long long)arg2;
- (void)extractLinesWithPoints:(const Matrix_8746f91e *)arg1 count:(unsigned long long)arg2;
@property(readonly, nonatomic) Matrix_8746f91e size;
@property(readonly, nonatomic) Matrix_8746f91e origin;
- (void)addRoadForPolygon:(const Matrix_8746f91e *)arg1 pointCount:(unsigned long long)arg2 characteristicPoints:(const CDStruct_db2bd8f2 *)arg3 characteristicPointCount:(unsigned long long)arg4 withStyleQuery:(shared_ptr_6e6219d6)arg5;
@property(readonly, nonatomic) struct RealisticMesh *roadShadowMesh;
@property(readonly, nonatomic) struct CompressedMeshMesh *casingSidewalkShadowMesh;
@property(readonly, nonatomic) struct CompressedMeshMesh *casingTopMesh;
@property(readonly, nonatomic) struct RealisticMesh *casingFacadeMesh;
@property(readonly, nonatomic) struct RealisticMesh *casingShadowMesh;
- (void)dealloc;
- (id)initWithTile:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKRealisticTile : VKVectorTile
{
    NSMapTable *_realisticRoadGroupsTable;
    NSMutableArray *_realisticRoadGroups;
    float _roadZ;
    float _laneMarkingZ;
    float _landZ;
    float _waterZ;
    _Bool _shouldBlend;
    float _alpha;
    VKRealisticPolygonMaker *_landPolygonMaker;
    VKRealisticPolygonMaker *_waterPolygonMaker;
    VKAnimation *_startDrawingAnimation;
    map_604bf0d9 _landDrawableIndices;
    map_604bf0d9 _waterDrawableIndices;
    vector_5bdcb8f5 _landDrawables;
    vector_5bdcb8f5 _waterDrawables;
    struct shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> _coastlineMesh;
    shared_ptr_6e6219d6 _landTextureStyleQuery;
    shared_ptr_479d1306 _defaultLandTexture;
    shared_ptr_479d1306 _defaultLandTextureVariant;
    struct vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData>> _polygonMetaData;
    shared_ptr_1573687d _fogUniformData;
    shared_ptr_9b6b7821 _realisticTextureUniformData;
}

+ (void)updateFogUniforms:(const shared_ptr_1573687d *)arg1 withLayoutContext:(id)arg2 toWorld:(const Matrix_08d701e4 *)arg3;
@property(retain, nonatomic) VKAnimation *startDrawingAnimation; // @synthesize startDrawingAnimation=_startDrawingAnimation;
@property(nonatomic) float alpha; // @synthesize alpha=_alpha;
@property(nonatomic) _Bool shouldBlend; // @synthesize shouldBlend=_shouldBlend;
@property(readonly, nonatomic) float waterZ; // @synthesize waterZ=_waterZ;
@property(readonly, nonatomic) float landZ; // @synthesize landZ=_landZ;
@property(readonly, nonatomic) float roadZ; // @synthesize roadZ=_roadZ;
@property(readonly, nonatomic) NSArray *realisticRoadGroups; // @synthesize realisticRoadGroups=_realisticRoadGroups;
@property(readonly, nonatomic) shared_ptr_9b6b7821 realisticTextureUniformData; // @synthesize realisticTextureUniformData=_realisticTextureUniformData;
@property(readonly, nonatomic) shared_ptr_1573687d fogUniformData; // @synthesize fogUniformData=_fogUniformData;
@property(readonly, nonatomic) shared_ptr_479d1306 defaultLandTexture; // @synthesize defaultLandTexture=_defaultLandTexture;
- (id).cxx_construct;
- (void).cxx_destruct;
- (long long)vectorType;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (struct TexturedDrawable *)_drawableInMap:(map_604bf0d9 *)arg1 vendors:(vector_5bdcb8f5 *)arg2 forStyleQuery:(shared_ptr_6e6219d6)arg3;
- (void)addTriangulatedPointsToDrawableInMap:(map_604bf0d9 *)arg1 vendors:(vector_5bdcb8f5 *)arg2 zIndex:(float)arg3 points:(const Matrix_8746f91e *)arg4 pointCount:(unsigned long long)arg5 indices:(const unsigned short *)arg6 indexCount:(unsigned long long)arg7 styleQuery:(shared_ptr_6e6219d6)arg8;
- (id)_groupForRenderZ:(int)arg1;
- (shared_ptr_479d1306)_createDefaultTextureForLevelOfDetail:(unsigned long long)arg1 takeVariant:(_Bool)arg2;
- (void)_updateDefaultLandTextures;
- (void)_addCoastlineMeshForPoints:(const Matrix_8746f91e *)arg1 pointCount:(unsigned long long)arg2;
- (void)_parseCoastlines;
@property(readonly, nonatomic) shared_ptr_479d1306 defaultLandTextureVariant;
- (void)_parsePolygons;
- (void)updateTextures;
- (void)createMeshes;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(double)arg5 device:(struct Device *)arg6;
@property(readonly, nonatomic) struct RealisticMesh *coastlineMesh;
@property(readonly, nonatomic) vector_5bdcb8f5 *waterDrawables;
@property(readonly, nonatomic) vector_5bdcb8f5 *landDrawables;

@end

__attribute__((visibility("hidden")))
@interface VKRealisticTileSource : VKTileSetBackedTileSource
{
}

- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (unsigned long long)mapLayerForZoomLevelRange;
- (long long)defaultMaximumZoomLevel;
- (long long)defaultMinimumZoomLevel;
- (_Bool)minimumZoomLevelBoundsCamera;

@end

__attribute__((visibility("hidden")))
@interface VKResourceManager : NSObject
{
    unsigned int _tileGroupIdentifier;
}

- (_Bool)isDevResourceWithName:(id)arg1;
- (id)pathForResourceWithName:(id)arg1;
- (id)dataForResourceWithName:(id)arg1;
- (id)_localNameForResourceName:(id)arg1;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKResourcesTile : VKTile
{
    NSArray *_resourceNames;
    NSArray *_attributions;
}

@property(retain, nonatomic) NSArray *attributions; // @synthesize attributions=_attributions;
@property(retain, nonatomic) NSArray *resourceNames; // @synthesize resourceNames=_resourceNames;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface VKResourcesTileSource : VKTileSource
{
    GEOTileKeyMap *_keyToKeysMap;
}

- (void)cancelDownload:(const struct _GEOTileKey *)arg1;
- (void)performDownload:(const struct _GEOTileKey *)arg1;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (struct VKTileKey)sourceKeyForRenderKey:(const struct VKTileKey *)arg1;
- (_Bool)canFetchTileForKey:(const struct VKTileKey *)arg1;
- (struct _GEOTileKey)downloadKeyAtX:(unsigned int)arg1 y:(unsigned int)arg2 z:(unsigned int)arg3;
- (long long)zEquivalenceClass;
- (unsigned int)maximumDownloadZoomLevel;
- (unsigned int)minimumDownloadZoomLevel;
- (long long)tileSize;
- (_Bool)maximumZoomLevelBoundsCamera;
- (_Bool)minimumZoomLevelBoundsCamera;
- (id)tileLoader;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 locale:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKRiverMapModel : VKRoadMapModel
{
}

- (unsigned char)commandBufferId;

@end

__attribute__((visibility("hidden")))
@interface VKRoadDrawStyle : VKRenderStyle
{
    struct VKProfileSparseRamp<float> width;
    struct VKProfileSparseRamp<float> strokeWidth;
    struct VKProfileSparseRamp<float> labelHeight;
    struct VKProfileSparseRamp<float> widthDropoff;
    struct VKProfileSparseRamp<_VGLColor> fillColor;
    struct VKProfileSparseRamp<_VGLColor> strokeColor;
    struct VKProfileSparseRamp<bool> simpleLine;
    struct VKProfileSparseRamp<int> zIndices;
    struct VKProfileSparseRamp<int> fillZIndices;
    struct VKProfileSparseRamp<bool> strokeColorInterpolate;
    struct VKProfileSparseRamp<bool> fillColorInterpolate;
    unsigned char railroadPattern;
    struct VKProfileSparseRamp<_VGLColor> alternateFillColor;
    struct VKProfileSparseRamp<float> patternScaler;
    struct VKProfileSparseRamp<float> patternScalerQuantizationFactor;
    struct VKProfileSparseRamp<bool> renderEndCaps;
}

+ (int)renderStyleID;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)visibleAtZoom:(float)arg1;
- (unsigned char)railroadPattern;

@end

__attribute__((visibility("hidden")))
@interface VKRoadLabelTileSource : VKLabelTileSource
{
}

- (unsigned char)_labelTileType;

@end

__attribute__((visibility("hidden")))
@interface VKRoadPolygonMaker : VKRealisticPolygonMaker
{
}

- (void)generateIndexedTrianglesWithHandler:(CDUnknownBlockType)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKRoadSignArtwork : NSObject
{
    struct __CTLine *_line;
    long long _orientation;
    _Bool _onRoute;
    float _contentScale;
    float _scale;
    struct CGSize _layoutSize;
}

- (id).cxx_construct;
- (Box_3fb92e00)localCollisionBounds;
- (Box_3fb92e00)localRenderBounds;
- (Matrix_8746f91e)offsetPixelForPixel:(Matrix_8746f91e)arg1;
- (id)image;
- (void)dealloc;
- (void)_updateLayoutSize;
- (id)initWithString:(id)arg1 orientation:(long long)arg2 contentScale:(double)arg3 scale:(double)arg4 onRoute:(_Bool)arg5;

@end

__attribute__((visibility("hidden")))
@interface VKRoadSignSourceImageGenerator : NSObject
{
}

+ (void)_drawSign:(long long)arg1 context:(struct CGContext *)arg2 scale:(double)arg3 contentScale:(double)arg4 signColor:(long long)arg5;
+ (struct CGSize)_sizeForSignType:(long long)arg1 scale:(double)arg2 contentScale:(double)arg3;
+ (struct CGImage *)newImageForSignType:(long long)arg1 isOffRoute:(_Bool)arg2 scale:(double)arg3 contentScale:(double)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKRoadTile : VKVectorTile
{
    VKTrafficTile *_trafficTile;
    struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer>> _roadLayer;
    struct unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer>> _patternedRibbonLayer;
}

@property(retain, nonatomic) VKTrafficTile *trafficTile; // @synthesize trafficTile=_trafficTile;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) struct PatternedLayer *patternedRibbonLayer;
@property(readonly, nonatomic) struct RoadLayer *roadLayer;
- (void)buildGglMeshesWithDevice:(struct Device *)arg1;
- (void)addPatternedRibbonTo:(unordered_map_880b4a54 *)arg1 styleQuery:(shared_ptr_6e6219d6)arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long long)arg4 points:(Matrix_8746f91e *)arg5;
- (void)addRoadRibbonTo:(unordered_map_f54c85ed *)arg1 styleQuery:(shared_ptr_6e6219d6)arg2 painterZ:(unsigned int)arg3 numPoints:(unsigned long long)arg4 points:(Matrix_8746f91e *)arg5 startCap:(_Bool)arg6 endCap:(_Bool)arg7;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 modelTile:(id)arg2 styleManager:(id)arg3 sharedResources:(id)arg4 contentScale:(double)arg5 device:(struct Device *)arg6;

@end

__attribute__((visibility("hidden")))
@interface VKRoadTileSource : VKVectorTileSource
{
}

- (void)releaseTraffic;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (unsigned long long)mapLayerForZoomLevelRange;
- (_Bool)minimumZoomLevelBoundsCamera;

@end

__attribute__((visibility("hidden")))
@interface VKRoadTrafficMapModel : VKVectorMapModel
{
    VKRoadMapModel *_roadModel;
    _Bool _enabled;
    VKTrafficDrawStyle *_trafficDrawStyle;
    struct unique_ptr<vk::TrafficManager, std::__1::default_delete<vk::TrafficManager>> _trafficManager;
}

@property(retain, nonatomic) VKRoadMapModel *roadModel; // @synthesize roadModel=_roadModel;
@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)didReceiveMemoryWarning;
- (void)stylesheetDidChange;
- (unsigned long long)mapLayerPosition;

@end

__attribute__((visibility("hidden")))
@interface VKRouteDrawStyle : VKRenderStyle
{
    struct VKProfileSparseRamp<float> _width;
    struct VKProfileSparseRamp<_VGLColor> _fillColor;
    struct VKProfileSparseRamp<_VGLColor> _travelledColor;
}

+ (int)renderStyleID;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)hasDashAtAnyZ;
- (unsigned long long)fillDashPatternAtZoom:(float)arg1;
@property(readonly, nonatomic) _Bool hasFillColor;
@property(readonly, nonatomic) float selectedArrowMinZoom;
@property(readonly, nonatomic) float arrowMinZoom;
@property(readonly, nonatomic) _Bool hasBrightness;
@property(readonly, nonatomic) float brightness;
@property(readonly, nonatomic) float enlargementMaxScale;
@property(readonly, nonatomic) float enlargementScale;
@property(readonly, nonatomic) float enlargementStartZoom;
@property(readonly, nonatomic) NSString *travelledTexture;
@property(readonly, nonatomic) NSString *obscuredTexture;
@property(readonly, nonatomic) NSString *texture;
@property(readonly, nonatomic) _Bool hasTravelledTexture;
@property(readonly, nonatomic) _Bool hasObscuredTexture;
@property(readonly, nonatomic) _Bool hasTexture;
- (Matrix_5173352a)glossColor;
- (Matrix_5173352a)travelledColor;
- (Matrix_5173352a)fillColor;
- (Matrix_5173352a)strokeColor;
- (float)strokeWidth;
- (float)width;

@end

__attribute__((visibility("hidden")))
@interface VKRouteLine : NSObject <GEORouteMapMatchingDataSource>
{
    _Bool _curve;
    _Bool _matchToRoads;
    _Bool _hasNewRoadMatches;
    CDStruct_aca18c62 _bounds;
    CDStruct_aa5aacbc _inverseMatrix;
    VKPolylineOverlay *_overlay;
    double _boundsUnitsPerMeter;
    double _metersPerPoint;
    double _boundsInWorldUnit;
    double _simplificationEpsilonPoints;
    double _viewUnitsPerPoint;
    struct vector<geo::fast_shared_ptr<vk::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection>>> _sections;
    fast_shared_ptr_502c59d0 _userLocationSection;
    struct PolylineCoordinate _userLocationIndex;
    Matrix_8746f91e _userLocation;
    double _lastUserLocationMatchTimestamp;
    double _lastTrafficTimeStamp;
    NSSet *_retainedTiles;
    VKPolylineOverlayRenderRegion *_renderRegion;
}

@property(nonatomic) double simplificationEpsilonPoints; // @synthesize simplificationEpsilonPoints=_simplificationEpsilonPoints;
@property _Bool hasNewRoadMatches; // @synthesize hasNewRoadMatches=_hasNewRoadMatches;
@property(nonatomic) VKPolylineOverlay *overlay; // @synthesize overlay=_overlay;
@property(readonly, nonatomic) CDStruct_d2b197d1 bounds; // @synthesize bounds=_bounds;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) struct PolylineCoordinate *userLocationIndex;
@property(readonly, nonatomic) fast_shared_ptr_502c59d0 userLocationSection;
- (void)_updateBounds:(id)arg1;
- (void)forEachMapMatchingSection:(CDUnknownBlockType)arg1;
- (void)forEachSection:(CDUnknownBlockType)arg1;
- (void)splitRouteLineAtAnnotation:(id)arg1;
@property(readonly, nonatomic) _Bool needsUpdate;
- (_Bool)isTrafficUptoDate:(double)arg1;
- (_Bool)isTrafficUpToDate;
- (void)createMeshIfNecessary:(long long)arg1;
- (void)generateArrowsForManeuverDisplayMode:(int)arg1 routeLineWidth:(double)arg2;
- (_Bool)buildRouteLineForPainter:(id)arg1 keysInView:(id)arg2 tiles:(id)arg3 containerModel:(id)arg4 viewUnitsPerPoint:(double)arg5 force:(_Bool)arg6 curve:(_Bool)arg7 selected:(_Bool)arg8;
- (void)_updateTilesCovered:(id)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKRouteRoadInfo : NSObject
{
    NSString *_name;
    NSString *_shieldGroup;
    struct PolylineCoordinate _routeOffset;
}

@property(readonly, nonatomic) struct PolylineCoordinate routeOffset; // @synthesize routeOffset=_routeOffset;
@property(readonly, retain, nonatomic) NSString *shieldGroup; // @synthesize shieldGroup=_shieldGroup;
@property(readonly, retain, nonatomic) NSString *name; // @synthesize name=_name;
- (id).cxx_construct;
- (void)dealloc;
- (id)initWithName:(id)arg1 shieldGroup:(id)arg2 offset:(struct PolylineCoordinate)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKRunningCurve : NSObject
{
    CDStruct_86193286 _p0;
    double _t0;
    CDStruct_86193286 _p1;
    double _t1;
    CDStruct_86193286 _pu;
    double _tu;
    struct {
        double mb[4][3];
    } _mb;
    _Bool _mbValid;
}

- (id).cxx_construct;
- (CDStruct_86193286)stateAtTime:(double)arg1;
- (_Bool)hasStateAtTime:(double)arg1;
- (void)appendPosition:(struct VKPoint)arg1 atTime:(double)arg2;
- (void)dealloc;
- (void)reset;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKSatelliteRasterTileSource : VKRasterTileSource
{
}

- (unsigned long long)mapLayerForZoomLevelRange;

@end

__attribute__((visibility("hidden")))
@interface VKSharedResources : NSObject
{
    unsigned int _tileGroupIdentifier;
    VKIconManager *_iconManager;
    VKShieldManager *_shieldManager;
    VKGGLTextureManager *_gglTextureManager;
    VKResourceManager *_resourceManager;
    VKStylesheetVendor *_stylesheetVendor;
    VKTrafficIncidentImageManager *_trafficIncidentImageManager;
    shared_ptr_807ec9ac _device;
    struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas>> _alphaAtlas;
    struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> _highInflationAlphaAtlas;
    struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> _isoAlphaAtlas;
}

+ (id)sharedResourcesForTileGroupIdentifier:(unsigned int)arg1;
@property(readonly, nonatomic) VKTrafficIncidentImageManager *trafficIncidentImageManager; // @synthesize trafficIncidentImageManager=_trafficIncidentImageManager;
@property(readonly, nonatomic) VKStylesheetVendor *stylesheetVendor; // @synthesize stylesheetVendor=_stylesheetVendor;
@property(readonly, nonatomic) VKResourceManager *resourceManager; // @synthesize resourceManager=_resourceManager;
@property(readonly, nonatomic) VKGGLTextureManager *gglTextureManager; // @synthesize gglTextureManager=_gglTextureManager;
@property(readonly, nonatomic) VKShieldManager *shieldManager; // @synthesize shieldManager=_shieldManager;
@property(readonly, nonatomic) VKIconManager *iconManager; // @synthesize iconManager=_iconManager;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1;
@property(readonly, nonatomic) struct IsoAlphaAtlas *isoAlphaAtlas;
@property(readonly, nonatomic) struct IsoAlphaAtlas *highInflationAlphaAtlas;
@property(readonly, nonatomic) struct AlphaAtlas *alphaAtlas;
@property(readonly, nonatomic) struct Device *device;

@end

@interface VKShieldArtwork : NSObject
{
    double _scale;
    NSCache *_imageCache;
    NSDictionary *_stringAttributes;
    struct CGColor *_shadowColor;
    struct CGSize _shadowOffset;
    double _shadowRadius;
    double _textCenterOffsetX;
    double _textBaseline;
    struct __CTFont *_nonDigitFont;
    struct CGPoint _center;
    NSMutableDictionary *_textSpecificArtworks;
    struct CGContext *_templateContext;
    CDUnknownBlockType _newContext;
    struct CGImage *_backgroundImage;
    struct {
        double leftCapWidth;
        double rightCapWidth;
        double leftPadding;
        double rightPadding;
    } _resizableInfo;
    _Bool _resizable;
    double _lineHeight;
    double _lineSpacing;
}

@property(readonly, nonatomic) double scale; // @synthesize scale=_scale;
- (id).cxx_construct;
- (struct CGImage *)newImageWithShieldText:(id)arg1 allowMultiline:(_Bool)arg2 centerPoint:(struct CGPoint *)arg3;
- (id)imageWithShieldText:(id)arg1 allowMultiline:(_Bool)arg2;
- (id)imageWithShieldText:(id)arg1;
- (void)setTextSpecificArtwork:(id)arg1 forStrings:(id)arg2;
- (void)dealloc;
- (id)_initWithBackgroundImage:(struct CGImage *)arg1 contentScale:(double)arg2 resizableInfo:(CDStruct_d2b197d1 *)arg3 font:(struct __CTFont *)arg4 nonDigitFont:(struct __CTFont *)arg5 textColor:(struct CGColor *)arg6 textCenterOffsetX:(double)arg7 textBaseline:(double)arg8 textStrokeWidth:(double)arg9 textStrokeColor:(struct CGColor *)arg10 textShadowOffset:(struct CGSize)arg11 textShadowRadius:(double)arg12 textShadowColor:(struct CGColor *)arg13 lineSpacing:(double)arg14;
- (id)initWithResizableBackgroundImage:(struct CGImage *)arg1 resizableInfo:(CDStruct_d2b197d1 *)arg2 contentScale:(double)arg3 font:(struct __CTFont *)arg4 nonDigitFont:(struct __CTFont *)arg5 textColor:(struct CGColor *)arg6 textCenterOffsetX:(double)arg7 textBaseline:(double)arg8 textStrokeWidth:(double)arg9 textStrokeColor:(struct CGColor *)arg10 textShadowOffset:(struct CGSize)arg11 textShadowRadius:(double)arg12 textShadowColor:(struct CGColor *)arg13 lineSpacing:(double)arg14;
- (id)initWithBackgroundImage:(struct CGImage *)arg1 contentScale:(double)arg2 font:(struct __CTFont *)arg3 nonDigitFont:(struct __CTFont *)arg4 textColor:(struct CGColor *)arg5 textCenterOffsetX:(double)arg6 textBaseline:(double)arg7 textStrokeWidth:(double)arg8 textStrokeColor:(struct CGColor *)arg9 textShadowOffset:(struct CGSize)arg10 textShadowRadius:(double)arg11 textShadowColor:(struct CGColor *)arg12;
- (id)initWithPackedVariant:(id)arg1 backgroundImage:(struct CGImage *)arg2 scale:(double)arg3 colors:(CDStruct_aed172a0 *)arg4;

@end

__attribute__((visibility("hidden")))
@interface VKShieldAtlas : NSObject
{
    NSMapTable *_atlasToImages;
    VKPShieldPack *_shieldPack;
}

- (id)artworkForShieldIdentifier:(id)arg1 textLength:(unsigned long long)arg2 contentScale:(double)arg3 size:(long long)arg4 numberOfLines:(unsigned long long)arg5 genericShieldGenerator:(id)arg6 colors:(CDStruct_aed172a0 *)arg7;
- (void)purge;
- (void)dealloc;
- (id)initWithShieldPack:(id)arg1;

@end

@interface VKShieldImage : VKImage
{
    struct CGPoint _center;
}

@property(readonly) struct CGPoint center; // @synthesize center=_center;
- (id).cxx_construct;
- (id)initWithCGImage:(struct CGImage *)arg1 scale:(double)arg2 usedAsTextureAndImage:(_Bool)arg3 centerPoint:(struct CGPoint)arg4;

@end

@interface VKShieldManager : NSObject <GEOResourceManifestTileGroupObserver>
{
    NSMapTable *_atlases;
    NSMapTable *_indexes;
    struct _GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> _artworkPool;
    struct _GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> _genericArtworks;
    unsigned int _tileGroupIdentifier;
    VKResourceManager *_resourceManager;
    VKGenericShieldGenerator *_genericShieldGenerator;
    NSArray *_nonRegionalResourceNames;
}

+ (id)sharedManager;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)imageForShieldType:(long long)arg1 shieldText:(id)arg2 contentScale:(double)arg3 size:(long long)arg4 idiom:(long long)arg5 colors:(CDStruct_aed172a0 *)arg6 featureType:(unsigned long long)arg7;
- (id)artworkForShieldType:(long long)arg1 textLength:(unsigned long long)arg2 contentScale:(double)arg3 size:(long long)arg4 idiom:(long long)arg5 colors:(CDStruct_aed172a0 *)arg6 featureType:(unsigned long long)arg7;
- (id)artworkForShieldType:(long long)arg1 textLength:(unsigned long long)arg2 contentScale:(double)arg3 size:(long long)arg4 idiom:(long long)arg5 mapRect:(CDStruct_90e2a262)arg6 colors:(CDStruct_aed172a0 *)arg7 featureType:(unsigned long long)arg8;
- (id)artworkForShieldName:(id)arg1 textLength:(unsigned long long)arg2 contentScale:(double)arg3 resourceNames:(id)arg4 size:(long long)arg5 idiom:(long long)arg6 numberOfLines:(unsigned long long)arg7 colors:(CDStruct_aed172a0 *)arg8;
- (id)artworkForShieldType:(long long)arg1 textLength:(unsigned long long)arg2 contentScale:(double)arg3 resourceNames:(id)arg4 style:(id)arg5 size:(long long)arg6 idiom:(long long)arg7 numberOfLines:(unsigned long long)arg8 colors:(CDStruct_aed172a0 *)arg9 featureType:(unsigned long long)arg10;
- (id)_indexForName:(id)arg1;
- (id)_atlasForName:(id)arg1;
- (id)_nonRegionalIndexesAndPacks;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)purge;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 resourceManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKSimpleMapMatcher : VKMapMatcher
{
}

- (id)matchLocation:(id)arg1 transportType:(int)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKSkyDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
@property(readonly, nonatomic) Matrix_5173352a horizonColor;
@property(readonly, nonatomic) Matrix_5173352a fillColor;

@end

__attribute__((visibility("hidden")))
@interface VKSkyModel : VKModelObject <VKMapLayer, VKStyleManagerObserver>
{
    VKMapModel *_mapModel;
    float _skyStartOffset;
    Matrix_5173352a _fillColor;
    Matrix_5173352a _horizonColor;
    struct shared_ptr<ggl::Sky::SkyUniformData> _uniformData;
    struct shared_ptr<ggl::Sky::Shader::Setup> _shaderSetup;
    struct shared_ptr<ggl::Sky::SkyMesh> _mesh;
    struct shared_ptr<ggl::IndexDataTyped<unsigned short>> _indexData;
    struct shared_ptr<ggl::RenderState> _gglRenderState;
    struct RenderItem *_renderItem;
    _Bool _needsNewStyle;
}

+ (_Bool)reloadOnStylesheetChange;
@property(nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3;
- (void)dealloc;
- (id)init;
- (void)updateStyle;
- (void)stylesheetDidChange;
@property(readonly, nonatomic) VKStyleManager *styleManager;
- (unsigned long long)mapLayerPosition;
- (void)setHorizonColor:(Matrix_5173352a)arg1;
- (Matrix_5173352a)horizonColor;
- (void)setFillColor:(Matrix_5173352a)arg1;
- (Matrix_5173352a)fillColor;
- (_Bool)shouldLayoutWithoutStyleManager;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKStandardRasterTileSource : VKRasterTileSource
{
}

- (unsigned long long)mapLayerForZoomLevelRange;

@end

__attribute__((visibility("hidden")))
@interface VKStyleManager : NSObject
{
    unsigned int _updateStamp;
    unsigned long long _mapDisplayStyle;
    unsigned long long _mapDisplayStyleVariant;
    VKSharedResources *_sharedResources;
    VKStylesheet *_stylesheet;
    long long _mapMode;
    _Bool _canSelectIcons;
    float _blendingFactor;
    unsigned long long _connectedVariant;
    VKGenericShieldDrawStyle *_defaultGenericShieldStyle;
    struct unordered_map<StyleKey, std::__1::weak_ptr<md::StyleQuery>, std::__1::hash<StyleKey>, std::__1::equal_to<StyleKey>, std::__1::allocator<std::__1::pair<const StyleKey, std::__1::weak_ptr<md::StyleQuery>>>> _styleQueries;
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _styleQueryCreationLock;
    long long _targetDisplay;
}

@property(nonatomic) _Bool canSelectIcons; // @synthesize canSelectIcons=_canSelectIcons;
@property(readonly, nonatomic) long long targetDisplay; // @synthesize targetDisplay=_targetDisplay;
@property(readonly) unsigned int updateStamp; // @synthesize updateStamp=_updateStamp;
@property(nonatomic) unsigned long long mapDisplayStyleVariant; // @synthesize mapDisplayStyleVariant=_mapDisplayStyleVariant;
@property(nonatomic) unsigned long long mapDisplayStyle; // @synthesize mapDisplayStyle=_mapDisplayStyle;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)clearCaches;
@property(nonatomic) long long mapMode;
@property(readonly, nonatomic) unsigned long long activeMapDisplayStyle;
- (void)prepareStyleVariantsForMapDisplayStyle:(unsigned long long)arg1;
@property(readonly, nonatomic) VKGenericShieldDrawStyle *defaultGenericShieldStyle;
@property(nonatomic) float blendingFactor;
- (float *)blendingFactorPointer;
- (long long)rasterPolygonChangeoverZ;
- (float)shieldBrightnessForDisplayStyle:(unsigned long long)arg1;
- (float)shieldBrightnessForVectorType:(long long)arg1;
- (float)_nightShieldBrightnessForVectorType:(long long)arg1;
- (shared_ptr_6e6219d6)styleQueryForFeatureAttributes:(id)arg1 vectorType:(const long long *)arg2 locale:(id)arg3 selectionState:(_Bool)arg4;
- (shared_ptr_6e6219d6)styleQueryForFeatureAttributes:(id)arg1 vectorType:(long long)arg2;
- (shared_ptr_6e6219d6)styleQueryForFeatureAttributes:(id)arg1;
@property(readonly, nonatomic) _Bool isDevResource;
@property(readonly, nonatomic) NSString *sheetName;
- (id)stylesheet;
- (void)dealloc;
- (_Bool)supportsMapDisplayStyle:(unsigned long long)arg1;
@property(readonly, nonatomic) _Bool supportsNightMode;
- (id)initWithName:(id)arg1 scale:(float)arg2 ppi:(float)arg3 targetDisplay:(long long)arg4 sharedResources:(id)arg5;
- (id)init;
@property(readonly, nonatomic) VKPGlobalProperties *styleGlobalProperties;

@end

__attribute__((visibility("hidden")))
@interface VKStylesheet : NSObject
{
    NSString *_sheetName;
    float _scale;
    float _ppi;
    long long _targetDisplay;
    VKStylesheetVendor *_stylesheetVendor;
    NSMutableArray *_inheritance;
    long long _rasterPolygonChangeoverZ;
    VKPGlobalProperties *_styleGlobalProperties;
    _Bool _supportsNightMode;
    _Bool _supportsRouteMode;
    struct StyleMatchingTree *_matchingTree;
    struct vector<md::StyleMatchingTree *, std::__1::allocator<md::StyleMatchingTree *>> _matchingTreeSpareMemory;
    unsigned long long _matchingTreeSpareBufferSize;
    unsigned long long _matchingTreeCount;
    NSObject<OS_dispatch_queue> *_resultCacheQueue;
    NSMutableDictionary *_resultCache;
    int _loadedGlobalResources;
    int _loadedEverything;
    NSObject<OS_dispatch_semaphore> *_globalResourcesLoadingSemaphore;
    NSObject<OS_dispatch_semaphore> *_everythingLoadingSemaphore;
    NSObject<OS_dispatch_queue> *_loadingQueue;
    _Bool _isDevResource;
}

@property(readonly, nonatomic) _Bool isDevResource; // @synthesize isDevResource=_isDevResource;
@property(readonly, nonatomic) NSString *sheetName; // @synthesize sheetName=_sheetName;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) VKPGlobalProperties *styleGlobalProperties;
@property(readonly, nonatomic) _Bool supportsNightMode;
@property(readonly, nonatomic) long long rasterPolygonChangeoverZ;
- (int)styleAttributeValueForLocalization:(id)arg1;
- (id)_stylesMatchingAttributes:(id)arg1 clientAttributes:(CDStruct_51eba9d0 *)arg2;
- (id)_styleMatchingAttributes:(id)arg1 clientAttributes:(CDStruct_51eba9d0 *)arg2;
- (unordered_map_b3f81285)_attributeMapForAttributes:(id)arg1 clientAttributes:(CDStruct_51eba9d0 *)arg2;
- (id)styleMatchingAttributes:(id)arg1 vectorType:(long long)arg2 locale:(id)arg3 mapDisplayStyle:(unsigned long long)arg4 mapDisplayStyleVariant:(unsigned long long)arg5 canSelectIcons:(_Bool)arg6 selected:(_Bool)arg7;
- (id)styleMatchingAttributes:(id)arg1 vectorType:(long long)arg2 locale:(id)arg3 mapDisplayStyle:(unsigned long long)arg4 mapDisplayStyleVariant:(unsigned long long)arg5;
- (id)styleForFeatureAttributes:(id)arg1 clientAttributes:(CDStruct_51eba9d0 *)arg2;
- (void)clearCaches;
- (void)dealloc;
- (id)initWithData:(id)arg1 miniData:(id)arg2 forName:(id)arg3 scale:(float)arg4 ppi:(float)arg5 vendor:(id)arg6 targetDisplay:(long long)arg7 isDevResource:(_Bool)arg8;
- (id)initWithName:(id)arg1 scale:(float)arg2 ppi:(float)arg3 targetDisplay:(long long)arg4 vendor:(id)arg5 resourceManager:(id)arg6;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKStylesheetResultCacheKey : NSObject <NSCopying>
{
    GEOFeatureStyleAttributes *_featureAttributes;
    CDStruct_51eba9d0 _clientAttributes;
}

- (id).cxx_construct;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithFeatureAttributes:(id)arg1 clientAttributes:(const CDStruct_51eba9d0 *)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKStylesheetVendor : NSObject <GEOResourceManifestTileGroupObserver>
{
    unsigned int _tileGroupIdentifier;
    VKResourceManager *_resourceManager;
    NSObject<OS_dispatch_queue> *_stylesheetMapEditQueue;
    NSMutableDictionary *_stylesheetMap;
    NSObject<OS_dispatch_queue> *_localizationToAttributeValueQueue;
    NSDictionary *_localizationToAttributeValue;
}

- (int)styleAttributeValueForLocalization:(id)arg1;
- (id)stylesheetWithName:(id)arg1 scale:(float)arg2 ppi:(float)arg3 targetDisplay:(long long)arg4;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)resetStylesheetCache;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 resourceManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKTexturedPolygonGroup : VKPolygonGroup
{
    VKSharedResources *_sharedResources;
    shared_ptr_479d1306 _texture;
    shared_ptr_479d1306 _textureVariant;
    _Bool _needsTextureUpdate;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateTextures;
- (void)updateTexturesIfNecessary;
- (void)setNeedsTextureUpdate;
@property(readonly, nonatomic) GEOFeatureStyleAttributes *styleAttributes;
- (shared_ptr_479d1306)_textureForName:(id)arg1;
- (void)dealloc;
- (id)initWithStyleQuery:(shared_ptr_6e6219d6 *)arg1 tile:(id)arg2 contentScale:(float)arg3 sharedResources:(id)arg4;
@property(readonly, nonatomic) struct Texture2D *textureVariant;
@property(readonly, nonatomic) struct Texture2D *texture;

@end

__attribute__((visibility("hidden")))
@interface VKTileCache : VKLRUCache
{
}

- (id)tileWithoutTouchingForKey:(const struct VKTileKey *)arg1;
- (void)setObject:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (id)objectWithoutPromotingForKey:(const struct VKTileKey *)arg1;
- (id)objectForKey:(const struct VKTileKey *)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKTileDecoderWrapper : GEOVectorTileDecoder
{
}

- (id)decodeTile:(id)arg1 forKey:(const struct _GEOTileKey *)arg2;

@end

__attribute__((visibility("hidden")))
@interface VKTileKeyList : NSObject <NSFastEnumeration, NSCopying>
{
    void *_head;
    void *_tail;
    VKTileKeyMap *_map;
    unsigned long long _count;
    unsigned long long _maxCount;
}

- (_Bool)isEqualToList:(id)arg1;
- (_Bool)removeKey:(const struct VKTileKey *)arg1;
- (void)removeKeysMatchingPredicate:(CDUnknownBlockType)arg1;
- (void)sort:(CDUnknownBlockType)arg1;
- (id)listWithout:(id)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (unsigned long long)count;
- (unsigned long long)capacity;
- (_Bool)containsKey:(const struct VKTileKey *)arg1;
- (void)_addKeyToBack:(const struct VKTileKey *)arg1;
- (void)addKey:(const struct VKTileKey *)arg1;
- (_Bool)addKey:(const struct VKTileKey *)arg1 lostKey:(struct VKTileKey *)arg2;
- (struct VKTileKey *)firstKey;
- (id)description;
- (void)dealloc;
- (id)copyWithMaxCapacity:(unsigned long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithMaxCapacity:(unsigned long long)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKTileKeyMap : NSObject
{
    long long _type;
    void *_map;
}

- (void)enumerateKeysAndObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (unsigned long long)count;
- (void)removeObjectForKey:(const struct VKTileKey *)arg1;
- (void)setObject:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (id)objectForKey:(const struct VKTileKey *)arg1;
- (id)contentsDescription;
- (id)description;
- (void)dealloc;
- (void)removeAllObjects;
- (id)initWithMapType:(long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKTilePool : VKTileKeyMap
{
    NSLock *_lock;
}

- (void)removeAllObjects;
- (void)removeObjectsForKeys:(id)arg1;
- (void)enumerateKeysAndObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (unsigned long long)count;
- (void)removeObjectForKey:(const struct VKTileKey *)arg1;
- (void)setObject:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (id)objectForKey:(const struct VKTileKey *)arg1;
- (void)dealloc;
- (id)initWithMapType:(long long)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKTileProvider : NSObject <VKLRUCacheDelegate, VKTileSourceClient>
{
    id <VKTileProviderClient> _client;
    int _mode;
    VKTileSelection *_tileSelection;
    VKTileKeyList *_keysInView;
    VKTileKeyList *_neighborKeys;
    VKTileKeyList *_prefetchKeys;
    VKTimer *_evaluationTimer;
    VKTimer *_prefetchTimer;
    NSMutableSet *_tilesToRender;
    NSArray *_holes;
    NSMutableSet *_lostTiles;
    NSMutableSet *_neighborTiles;
    unsigned long long _neighborMode;
    _Bool _fallbackEnabled;
    _Bool _prefetchEnabled;
    VKTileCache *_tilePool;
    VKTileSource *_tilesSources[34];
    VKTileSource *_optionalTileSources[34];
    VKStyleManager *_styleManager;
    float _loadingProgress;
    _Bool _hasFailedTile;
    _Bool _finishedLoading;
    struct VKCameraState _lastCameraState;
    struct CGSize _lastCanvasSize;
    _Bool _tilesChanged;
    VKMapRasterizer *_rasterizer;
    id <VKMapLayer> _debugLayer;
    GEOTileKeyList *_debugLayerKeys;
    unsigned long long _tileReserveLimit;
    unsigned long long _tileMaximumLimit;
    unsigned int _prefetchNumberOfScreens;
    _Bool _useSmallTileCache;
    float _lastMidDisplayZoomLevel;
    CDStruct_34734122 _sortPoint;
    double _contentScale;
    vector_a2f7343e _exclusionAreas;
    _Bool _exclusionAreaVisible;
    _VKTileProviderTimerTarget *_evaluationTarget;
    _VKTileProviderTimerTarget *_prefetchTarget;
    unsigned int _tileGroupIdentifier;
    NSLocale *_locale;
}

@property(readonly, nonatomic) _Bool hasFailedTile; // @synthesize hasFailedTile=_hasFailedTile;
@property(readonly, nonatomic, getter=isFinishedLoading) _Bool finishedLoading; // @synthesize finishedLoading=_finishedLoading;
@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;
@property(readonly, nonatomic) GEOTileKeyList *debugLayerKeys; // @synthesize debugLayerKeys=_debugLayerKeys;
@property(retain, nonatomic) id <VKMapLayer> debugLayer; // @synthesize debugLayer=_debugLayer;
@property(nonatomic) _Bool useSmallTileCache; // @synthesize useSmallTileCache=_useSmallTileCache;
@property(readonly, nonatomic) float loadingProgress; // @synthesize loadingProgress=_loadingProgress;
@property(retain, nonatomic) VKStyleManager *styleManager; // @synthesize styleManager=_styleManager;
@property(readonly, nonatomic) NSSet *neighborTiles; // @synthesize neighborTiles=_neighborTiles;
@property(readonly, nonatomic) NSSet *tilesToRender; // @synthesize tilesToRender=_tilesToRender;
@property(readonly, nonatomic) VKTileKeyList *neighborKeys; // @synthesize neighborKeys=_neighborKeys;
@property(readonly, nonatomic) VKTileKeyList *keysInView; // @synthesize keysInView=_keysInView;
@property(nonatomic, getter=isPrefetchEnabled) _Bool prefetchEnabled; // @synthesize prefetchEnabled=_prefetchEnabled;
@property(nonatomic) unsigned long long neighborMode; // @synthesize neighborMode=_neighborMode;
@property(nonatomic, getter=isFallbackEnabled) _Bool fallbackEnabled; // @synthesize fallbackEnabled=_fallbackEnabled;
@property(nonatomic) int mode; // @synthesize mode=_mode;
@property(nonatomic) id <VKTileProviderClient> client; // @synthesize client=_client;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)didStopLoadingTilesWithError:(id)arg1;
- (void)willStartLoadingTiles;
- (_Bool)tileSource:(id)arg1 keyIsNeeded:(const struct VKTileKey *)arg2;
- (void)dirtyTilesFromTileSource:(id)arg1;
- (void)tileSource:(id)arg1 dirtyTilesWithinRect:(const CDStruct_d2b197d1 *)arg2 level:(long long)arg3;
- (void)_dirtyTile:(id)arg1 source:(id)arg2 layer:(unsigned long long)arg3;
- (void)invalidateTilesFromTileSource:(id)arg1;
- (void)tileSource:(id)arg1 invalidateTilesWithState:(unsigned long long)arg2;
- (void)tileSource:(id)arg1 invalidateKeys:(id)arg2;
- (void)tileSource:(id)arg1 invalidateKey:(const struct VKTileKey *)arg2;
- (void)tileSource:(id)arg1 didFailToLoadTileForKey:(const struct VKTileKey *)arg2 error:(id)arg3;
- (void)tileSource:(id)arg1 didFailToDecodeTileForKey:(const struct VKTileKey *)arg2;
- (void)tileSource:(id)arg1 didFetchTile:(id)arg2 forKey:(const struct VKTileKey *)arg3;
- (_Bool)tileSourceMayUseNetwork:(id)arg1;
- (void)updateWithContext:(id)arg1;
- (void)_disableTimers;
- (void)_updateTimers:(int)arg1;
- (id)selectTiles:(int *)arg1 needRasterization:(_Bool *)arg2;
- (void)_fillHoles:(id)arg1 context:(id)arg2;
- (void)releaseChildrenFallbackTilesForTile:(id)arg1 context:(id)arg2;
- (_Bool)releaseParentFallbackTileForTile:(id)arg1;
- (void)timerFired:(id)arg1;
- (void)_prefetchTiles;
- (void)cancelLoadForMapTile:(id)arg1;
- (void)_fetchAvailableTiles:(_Bool)arg1;
- (void)configureTileSelection;
- (void)_resizeCache;
- (unsigned long long)layerForSource:(id)arg1;
- (id)sourceForLayer:(id)arg1;
- (void)removeTileSourceForMapLayer:(unsigned long long)arg1;
- (void)setTileSource:(id)arg1 forMapLayer:(unsigned long long)arg2 optional:(_Bool)arg3;
- (void)tileSourcesDidChange;
- (_Bool)cache:(id)arg1 willEvictObject:(id)arg2 forKey:(const struct VKCacheKey *)arg3;
- (_Bool)evaluateSelectedTileForRendering:(id)arg1;
- (_Bool)evaluateNeighborTileForRendering:(id)arg1;
- (void)changeTileForKey:(const struct VKTileKey *)arg1 toState:(unsigned long long)arg2 withMetadata:(id)arg3 withTile:(id)arg4 forLayer:(unsigned long long)arg5;
- (_Bool)tileMatters:(id)arg1;
- (void)releaseFallbackTileForRendering:(id)arg1;
- (_Bool)canRenderTile:(id)arg1;
- (_Bool)hasRequiredTileData:(id)arg1;
- (_Bool)inFailedState:(id)arg1;
- (void)releaseTileForRendering:(id)arg1;
- (void)releaseNeighborTileForRendering:(id)arg1;
- (void)prepareTileForRendering:(id)arg1;
- (void)retireNeighborTiles:(id)arg1;
- (void)retireRenderTiles:(id)arg1;
- (id)tileForKey:(const struct VKTileKey *)arg1;
- (void)foreachActiveLayer:(CDUnknownBlockType)arg1;
- (void)foreachOptionalLayer:(CDUnknownBlockType)arg1;
- (id)detailedDescription;
- (void)describeTilesFromList:(id)arg1 output:(id)arg2;
- (void)cancelLoadingTiles;
- (void)flushCaches;
- (void)clearScene;
- (void)rasterizer:(id)arg1 didMakeRasterTile:(id)arg2 forKey:(const struct VKTileKey *)arg3;
- (void)requireRasterization:(id)arg1;
- (void)dealloc;
- (void)quiesce;
- (id)initWithClient:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;
@property(nonatomic) double lodBias;
- (_Bool)tileExclusionAreaVisible;
- (void)setTileExclusionAreas:(const vector_a2f7343e *)arg1;
@property(readonly, nonatomic) NSArray *visibleTileSets;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKTileSelection : NSObject
{
    long long _tileSize;
    _Bool _bootstrap;
    unsigned long long _maxZ;
    double _lodBias;
}

@property(nonatomic) double lodBias; // @synthesize lodBias=_lodBias;
@property(nonatomic) unsigned long long maxZ; // @synthesize maxZ=_maxZ;
@property(nonatomic) _Bool bootstrap; // @synthesize bootstrap=_bootstrap;
@property(nonatomic) long long tileSize; // @synthesize tileSize=_tileSize;
- (CDStruct_6adf2384)relevantTilesForContext:(id)arg1;
- (id)keysForContext:(id)arg1 neighbors:(id)arg2;
- (id)init;

@end

@interface VKTimer : NSObject
{
    NSObject<OS_dispatch_source> *_source;
    double _nextFireDate;
}

@property(readonly, nonatomic) double nextFireDate; // @synthesize nextFireDate=_nextFireDate;
- (void)invalidate;
- (void)disable;
- (void)fireAfter:(double)arg1;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2 queue:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKTrackingCameraController : VKCameraController
{
    id <VKTrackingCameraControllerDelegate> _trackingDelegate;
    int _viewStyle;
    int _focusStyle;
    VKAnimation *_animation;
    double _verticalGroundspan;
    double _verticalGroundspanScale;
    struct VKPoint _farthestPoi;
    CDStruct_b926a728 _puckPosition;
    struct VKPoint _puckTargetPosition;
    double _startZoomScale;
    double _endZoomScale;
    double _zoomScale;
    double _startPinchScale;
    VKMapModel *_mapModel;
    VKMapCanvas *_mapCanvas;
    double _startTime;
    _Bool _animatingIn;
    double _startPitch;
    double _startCourse;
    double _startDistance;
    struct VKPoint _startPuckScreenPosition;
    CDUnknownBlockType _completionHandler;
    double _puckOffset;
    struct VKPoint _previousReference;
    double _previousCourse;
    double _previousOffset;
    struct VKCircularBuffer<double> *_rotationRateBuffer;
    double _previousStepTime;
    VKAnimation *_tapZoomAnimation;
    double _tracePlaybackSpeedMultiplier;
    _Bool _receivedFirstUpdate;
    _Bool _puckAnimatorRunning;
    double _cruisePhi;
    double _cruiseHeight;
    double _cruisePhiOverride;
    double _cruiseHeightOverride;
    VKCameraContext *_lastCameraContext;
    _Bool _shouldLimitTopDownHeight;
    struct VKEdgeInsets _insets;
    _Bool _insetsAnimating;
    double _puckOffsetDelta;
    struct VKNavigationCameraModel _cameraModel;
    int _panStyle;
    struct State {
        State_3e0671f0 modelState;
        struct VKPoint puckPosition;
    } _panStartCameraState;
    Matrix_6e1d3589 _panCameraOffset;
    double _panReturnStartTime;
    struct CGPoint _startPanPoint;
    double _panCourseOffset;
    double _panPitch;
    double _panStartPitch;
    double _panBoomLength;
    double _panStartBoomLength;
    double _panRouteOffset;
    VKAnimation *_panAnimation;
    _Bool _panning;
    double _pitchOffset;
    VKAnimation *_pitchAnimation;
    _Bool _pitching;
    _Bool _zooming;
    double _userZoomFocusStyleZoomScale;
    double _userZoomFocusStyleMinZoomScale;
    double _userZoomFocusStyleMaxZoomScale;
    VKAnimation *_zoomScaleAnimation;
    fast_shared_ptr_502c59d0 _matchedSection;
    struct PolylineCoordinate _matchedIndex;
    _Bool _successfullyStartedRouteLinePan;
    struct VKPoint _lastRouteLinePanPuckPosition;
    int _panDirection;
    float _halfPuckSize;
    long long _desiredMapMode;
    double _mapModeTransitionZoomScale;
    _Bool _shouldAllowMapModeTransition;
    double _maxBoomLength;
    double _maxDistanceScale;
    _Bool _canZoomIn;
    _Bool _canZoomOut;
}

@property(nonatomic) double verticalGroundspanScale; // @synthesize verticalGroundspanScale=_verticalGroundspanScale;
@property(nonatomic) int panStyle; // @synthesize panStyle=_panStyle;
@property(nonatomic) _Bool shouldLimitTopDownHeight; // @synthesize shouldLimitTopDownHeight=_shouldLimitTopDownHeight;
@property(nonatomic) double tracePlaybackSpeedMultiplier; // @synthesize tracePlaybackSpeedMultiplier=_tracePlaybackSpeedMultiplier;
@property(nonatomic) VKMapCanvas *mapCanvas; // @synthesize mapCanvas=_mapCanvas;
@property(retain, nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
@property(nonatomic) id <VKTrackingCameraControllerDelegate> trackingDelegate; // @synthesize trackingDelegate=_trackingDelegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updatedMatchedSection:(fast_shared_ptr_502c59d0)arg1 index:(struct PolylineCoordinate *)arg2;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)pan:(struct CGPoint)arg1 worldDelta:(const Matrix_6e1d3589 *)arg2;
- (void)stopPanning:(struct CGPoint)arg1;
- (void)startPanning:(struct CGPoint)arg1;
- (void)canvasFrameDidChange;
- (id)detailedDescription;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 relativeToPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_startTapZoomAnimationFrom:(double)arg1 to:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setGesturing:(_Bool)arg1;
@property(nonatomic) double userZoomFocusStyleMaxGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleMinGroundspanMeters;
@property(nonatomic) double userZoomFocusStyleGroundspanMeters;
- (double)relevantZoomScale;
- (void)setRelevantZoomScale:(double)arg1;
- (double)relavantMaxZoomScale;
- (double)relavantMinZoomScale;
- (void)_resumeAnimationIfNecessary;
- (void)setZoomStyle:(int)arg1;
- (void)setMapModeTransitionZoomScale:(double)arg1;
- (void)setUserZoomFocusStyleZoomScale:(double)arg1;
@property(nonatomic) double zoomScale;
@property(readonly, nonatomic) _Bool canZoomOut; // @synthesize canZoomOut=_canZoomOut;
@property(readonly, nonatomic) _Bool canZoomIn; // @synthesize canZoomIn=_canZoomIn;
- (void)setCanZoomOut:(_Bool)arg1;
- (void)setCanZoomIn:(_Bool)arg1;
- (void)_handleZoomChanged;
- (_Bool)isAtDefaultZoomScale;
- (void)_updateCruiseHeightAndPhi;
- (void)_updateCameraForStartAnimation:(double)arg1 position:(struct VKPoint)arg2 orientation:(const CDStruct_aa5aacbc *)arg3;
- (void)_step;
- (void)_updateVerticalGroundspanForCameraContext:(id)arg1 reference:(struct VKPoint)arg2 focus:(struct VKPoint)arg3 offset:(double)arg4;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(CDStruct_b926a728 *)arg2;
- (void)resumeIfNeeded;
- (void)pauseIfNeeded;
- (_Bool)isGesturing;
- (void)updateCameraContext:(id)arg1;
- (void)dealloc;
- (void)stop;
- (void)startWithPounce:(_Bool)arg1 pounceCompletionHandler:(CDUnknownBlockType)arg2;
@property(nonatomic) float puckSize;
- (void)edgeInsetsDidEndAnimating;
- (void)edgeInsetsWillBeginAnimating;
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKTrafficDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;

@end

__attribute__((visibility("hidden")))
@interface VKTrafficDynamicTile : VKTile
{
    struct _GEOTileKey _downloadKey;
    struct shared_ptr<zilch::TrafficDynamicTile> _tile;
    struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *>>> _flows;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (const struct Incident *)incidentAtIndex:(unsigned long long)arg1;
- (int)flowForRoadId:(long long)arg1 buffer:(const struct Flow **)arg2 maxSize:(int)arg3;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 downloadKey:(const struct _GEOTileKey *)arg2 data:(id)arg3;
@property(readonly, nonatomic) long long updateTime;
@property(readonly, nonatomic) unsigned long long incidentCount;

@end

__attribute__((visibility("hidden")))
@interface VKTrafficDynamicTileSource : VKTileSetBackedTileSource
{
    VKTileCache *_recentTrafficDynamicTiles;
}

- (void)fetchTileForKey:(const struct VKTileKey *)arg1;
- (id)sourceKeysForRenderKey:(const struct VKTileKey *)arg1;
- (struct _GEOTileKey)downloadKeyAtX:(unsigned int)arg1 y:(unsigned int)arg2 z:(unsigned int)arg3;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (_Bool)minimumZoomLevelBoundsCamera;
- (_Bool)maximumZoomLevelBoundsCamera;
- (unsigned long long)mapLayerForZoomLevelRange;
- (long long)defaultMaximumZoomLevel;
- (long long)defaultMinimumZoomLevel;
- (void)didLoadTile:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (void)clearCaches;
- (void)dealloc;
- (id)initWithTileSet:(id)arg1 tileGroupIdentifier:(unsigned int)arg2 locale:(id)arg3;

@end

@interface VKTrafficIncident : NSObject <NSCopying>
{
    struct VKPoint _worldPoint;
    NSString *_title;
    NSString *_subtitle;
    long long _type;
    long long _routeRelevance;
    long long _significance;
    _Bool _isNotForDisplay;
    _Bool _isOnSelectedRoute;
    struct PolylineCoordinate _routeOffset;
    unsigned int _routeOffsetInMeters;
    CDStruct_2c43369c _location;
    NSString *_street;
    NSString *_crossStreet;
    NSString *_info;
    NSDate *_startDate;
    NSDate *_endDate;
    NSDate *_lastUpdatedDate;
    float _minZoom;
    float _maxZoom;
    unsigned long long _uniqueID;
    NSString *_uniqueString;
}

@property(readonly, nonatomic) long long significance; // @synthesize significance=_significance;
@property(readonly, nonatomic) float maxZoom; // @synthesize maxZoom=_maxZoom;
@property(readonly, nonatomic) float minZoom; // @synthesize minZoom=_minZoom;
@property(readonly, nonatomic) struct VKPoint worldPoint; // @synthesize worldPoint=_worldPoint;
@property(readonly, nonatomic) NSDate *lastUpdatedDate; // @synthesize lastUpdatedDate=_lastUpdatedDate;
@property(readonly, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(readonly, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(readonly, nonatomic) NSString *info; // @synthesize info=_info;
@property(readonly, nonatomic) NSString *crossStreet; // @synthesize crossStreet=_crossStreet;
@property(readonly, nonatomic) NSString *street; // @synthesize street=_street;
@property(nonatomic) unsigned int routeOffsetInMeters; // @synthesize routeOffsetInMeters=_routeOffsetInMeters;
@property(nonatomic) struct PolylineCoordinate routeOffset; // @synthesize routeOffset=_routeOffset;
@property(nonatomic) _Bool isOnSelectedRoute; // @synthesize isOnSelectedRoute=_isOnSelectedRoute;
@property(nonatomic) long long routeRelevance; // @synthesize routeRelevance=_routeRelevance;
@property(readonly, nonatomic) _Bool isNotForDisplay; // @synthesize isNotForDisplay=_isNotForDisplay;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
@property(readonly, copy, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(readonly, copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic) NSString *uniqueString; // @synthesize uniqueString=_uniqueString;
@property(readonly, nonatomic) unsigned long long uniqueID; // @synthesize uniqueID=_uniqueID;
- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithRouteIncident:(id)arg1 routeRelevance:(long long)arg2;
- (id)initWithIncident:(id)arg1 vertices:(CDStruct_912cb5d2 *)arg2 tileRect:(CDStruct_d2b197d1)arg3 tileSize:(double)arg4;
- (id)initWithIncidentData:(const struct Incident *)arg1 worldPoint:(struct VKPoint *)arg2;
- (_Bool)hasSameIdentifier:(id)arg1;

@end

@interface VKTrafficIncidentImageManager : NSObject <GEOResourceManifestTileGroupObserver>
{
    NSCache *_imageCache;
    NSMapTable *_targetDisplayToProvider;
    VKResourceManager *_resourceManager;
    unsigned int _tileGroupIdentifier;
}

+ (id)sharedManager;
- (void)setIncidentIconProvider:(CDUnknownBlockType)arg1 forTargetDisplay:(long long)arg2;
- (id)imageForIncidentType:(long long)arg1 contentScale:(double)arg2;
- (id)imageForIncidentType:(long long)arg1 contentScale:(double)arg2 targetDisplay:(long long)arg3;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)dealloc;
- (id)initWithTileGroupIdentifier:(unsigned int)arg1 resourceManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface VKTrafficSegmentsAlongRoute : NSObject
{
    struct vector<TrafficSegment, std::__1::allocator<TrafficSegment>> _segments;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (const struct TrafficSegment *)segmentAtIndex:(unsigned long long)arg1;
- (BOOL)segmentSpeedAtIndex:(unsigned long long)arg1;
- (unsigned long long)segmentCount;
- (void)addSegmentAt:(struct PolylineCoordinate)arg1 forColor:(BOOL)arg2;
- (void)reset;

@end

__attribute__((visibility("hidden")))
@interface VKTrafficTile : VKVectorTile
{
    struct unique_ptr<vk::TrafficLayer, std::__1::default_delete<vk::TrafficLayer>> _trafficLayer;
    struct _GEOTileKey _dataKey;
    NSData *_data;
    VKTileKeyMap *_dynamicTiles;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon>>>>>>> *_trafficCollection;
    NSMutableArray *_incidents;
    struct TrafficSkeletonTile _trafficData;
}

@property(readonly, nonatomic) VKTileKeyMap *dynamicTiles; // @synthesize dynamicTiles=_dynamicTiles;
@property(readonly, nonatomic) NSArray *incidents; // @synthesize incidents=_incidents;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)buildTrafficMeshWithRoadData:(id)arg1 withDevice:(struct Device *)arg2;
- (void)buildIncidentsForDynamic:(id)arg1 withRoadData:(id)arg2 styleSession:(struct StyleResolutionSession *)arg3;
- (void)buildTrafficMeshWithRoadData:(id)arg1 dynamicTile:(id)arg2 trafficAccum:(struct TrafficAccum *)arg3 styleSession:(struct StyleResolutionSession *)arg4;
- (void)enumerateTrafficRoadPiecesForTile:(id)arg1 usingFunction:(const function_21f69ee7 *)arg2;
- (_Bool)_buildStartOffset:(float *)arg1 endOffset:(float *)arg2 forLine:(CDStruct_2e21d8bb *)arg3 forSkeleton:(const struct Record *)arg4 forRange:(struct _NSRange)arg5 forFlow:(const struct Flow *)arg6 forPoints:(Matrix_8746f91e *)arg7;
- (void)buildSkeletonMap;
- (void)dealloc;
- (id)initWithKey:(const struct VKTileKey *)arg1 downloadKey:(const struct _GEOTileKey *)arg2 data:(id)arg3 styleManager:(id)arg4 sharedResources:(id)arg5 contentScale:(double)arg6 device:(struct Device *)arg7;
@property(readonly, nonatomic) struct TrafficLayer *trafficLayer;
@property(nonatomic) const struct _GEOTileKey *dataKey;

@end

__attribute__((visibility("hidden")))
@interface VKTrafficTileSource : VKTileSetBackedTileSource <VKTileSourceClient>
{
    VKTileKeyList *_building;
    VKTileKeyMap *_pendingTraffic;
    VKTileSource *_roadTileSource;
    VKTrafficDynamicTileSource *_dynamicTileSource;
    VKTileCache *_recentTrafficTiles;
}

@property(retain, nonatomic) VKTileSource *roadTileSource; // @synthesize roadTileSource=_roadTileSource;
- (void)setSharedResources:(id)arg1;
- (void)didStopLoadingTilesWithError:(id)arg1;
- (void)willStartLoadingTiles;
- (_Bool)tileSource:(id)arg1 keyIsNeeded:(const struct VKTileKey *)arg2;
- (void)dirtyTilesFromTileSource:(id)arg1;
- (void)tileSource:(id)arg1 dirtyTilesWithinRect:(const CDStruct_d2b197d1 *)arg2 level:(long long)arg3;
- (void)invalidateTilesFromTileSource:(id)arg1;
- (void)tileSource:(id)arg1 invalidateTilesWithState:(unsigned long long)arg2;
- (void)tileSource:(id)arg1 invalidateKeys:(id)arg2;
- (void)tileSource:(id)arg1 invalidateKey:(const struct VKTileKey *)arg2;
- (void)tileSource:(id)arg1 didFailToLoadTileForKey:(const struct VKTileKey *)arg2 error:(id)arg3;
- (void)tileSource:(id)arg1 didFailToDecodeTileForKey:(const struct VKTileKey *)arg2;
- (void)tileSource:(id)arg1 didFetchTile:(id)arg2 forKey:(const struct VKTileKey *)arg3;
- (_Bool)tileSourceMayUseNetwork:(id)arg1;
- (void)failedToDecodeSourceKey:(const struct VKTileKey *)arg1;
- (void)fetchedTile:(id)arg1 forKey:(const struct VKTileKey *)arg2;
- (id)tileForData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (void)decodeData:(id)arg1 downloadKey:(const struct _GEOTileKey *)arg2 sourceKey:(const struct VKTileKey *)arg3;
- (void)didFailToLoadTileKey:(const struct _GEOTileKey *)arg1 error:(id)arg2;
- (void)fetchTileForKey:(const struct VKTileKey *)arg1;
- (id)tileForKey:(const struct VKTileKey *)arg1;
- (_Bool)canFetchTileForKey:(const struct VKTileKey *)arg1;
- (void)setContentScale:(double)arg1;
- (void)setStyleManager:(id)arg1;
- (_Bool)canFetchTrafficTileForKey:(const struct VKTileKey *)arg1;
- (long long)maximumZoomLevel;
- (void)sawTileForKey:(const struct VKTileKey *)arg1;
- (void)_generatedTraffic:(id)arg1;
- (void)populateVisibleTileSets:(id)arg1 withTiles:(id)arg2;
- (void)clearCaches;
- (void)dealloc;
- (id)initWithSkeletonTileSet:(id)arg1 dynamicTileSet:(id)arg2 tileGroupIdentifier:(unsigned int)arg3 locale:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface VKTriangulator : NSObject
{
    void *_opaque_triangulator;
    unsigned long long _segments_capacity;
    void *_opaque_segments;
    unsigned long long _mesh_capacity;
    unsigned long long *_mesh;
    NSMutableData *_scratch;
}

- (id)triangulateIndicesForPoints:(Matrix_12bc3712 *)arg1 pointCount:(unsigned long long)arg2;
- (_Bool)_triangulateIndicesInto:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKUntexturedPolygonGroup : VKPolygonGroup
{
    NSMutableOrderedSet *_attributeSets;
    struct vector<std::__1::shared_ptr<md::StyleQuery>, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery>>> _styleQueries;
    struct vector<std::__1::shared_ptr<md::StyleQuery>, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery>>> _flatRoofStyleQueries;
    NSMutableArray *_buildingDrawStyles;
    NSMutableArray *_flatRoofBuildingDrawStyles;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)updateWithStyleResolutionSession:(struct StyleResolutionSession *)arg1;
- (_Bool)canAcceptPolygon:(CDStruct_2e21d8bb *)arg1;
- (unsigned char)indexForGeoFeatureAttributes:(id)arg1;
- (id)buildingDrawStylesForPointyRoofs:(_Bool)arg1;
@property(readonly, nonatomic) NSOrderedSet *attributeSets;
- (void)dealloc;
- (id)initWithStyleQuery:(shared_ptr_6e6219d6 *)arg1 tile:(id)arg2 contentScale:(float)arg3;

@end

__attribute__((visibility("hidden")))
@interface VKVegetationDrawStyle : VKRenderStyle
{
}

+ (int)renderStyleID;
@property(readonly, nonatomic) float brightness;
@property(readonly, nonatomic) _Bool visible;

@end

__attribute__((visibility("hidden")))
@interface VKViewTransform : NSObject
{
    shared_ptr_d1ecf7a2 _viewTransform;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (CDStruct_aa5aacbc)orientationMatrixAtWorldPoint:(struct VKPoint)arg1;
- (struct VKPoint)groundPointFromScreenPoint:(struct CGPoint)arg1;
- (struct VKPoint)groundPointFromPixel:(Matrix_8746f91e)arg1;
- (void)setCoordinateSpace:(int)arg1 screenSizeInPixels:(struct CGSize)arg2 contentScale:(float)arg3 frustum:(CDStruct_184b3e93)arg4 position:(struct VKPoint)arg5 orientation:(const CDStruct_aa5aacbc *)arg6 horizontalOffset:(float)arg7;
@property(readonly, nonatomic) double focusDistance;
@property(readonly, nonatomic) double farPlaneDistance;
@property(readonly, nonatomic) double nearPlaneDistance;
@property(readonly, nonatomic) struct VKPoint translationInMercator;
@property(readonly, nonatomic) struct VKPoint translation;
@property(readonly, nonatomic) int coordinateSpace;
@property(readonly, nonatomic) _Bool isGeocentric;
@property(readonly, nonatomic) _Bool isMercator;
@property(readonly, nonatomic) float contentScale;
@property(readonly, nonatomic) struct CGSize screenSizeInPixels;
@property(readonly, nonatomic) struct CGSize screenSizeInPoints;
@property(nonatomic) const CDStruct_aa5aacbc *scaledViewProjectionMatrix;
@property(readonly, nonatomic) struct VKPoint focusPoint;
@property(readonly, nonatomic) VKViewVolume *viewVolume;
@property(readonly, nonatomic) double widthOverDepth;
@property(readonly, nonatomic) const CDStruct_aa5aacbc *viewProjectionMatrix;
@property(readonly, nonatomic) float degreesFromPlumb;
@property(readonly, nonatomic) float heading;
@property(readonly, nonatomic) Matrix_6e1d3589 forwardVector;
@property(readonly, nonatomic) Matrix_6e1d3589 rightVector;
@property(readonly, nonatomic) Matrix_6e1d3589 upVector;
- (shared_ptr_d1ecf7a2)viewTransform;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VKViewVolume : NSObject
{
    struct VKPoint _corners[8];
}

- (id).cxx_construct;
- (struct VKPoint)lerpPoint:(float *)arg1;
- (void)updateWithFrustum:(CDStruct_184b3e93)arg1 matrix:(const CDStruct_aa5aacbc *)arg2;
@property(readonly, nonatomic) const struct VKPoint *corners;

@end

@interface VKViewportInfo : NSObject
{
    CDStruct_2c43369c _centerCoordinate;
    long long _tileSize;
    float _zoomLevel;
    double _pitch;
    double _yaw;
}

@property(nonatomic) double yaw; // @synthesize yaw=_yaw;
@property(nonatomic) double pitch; // @synthesize pitch=_pitch;
@property(nonatomic) float zoomLevel; // @synthesize zoomLevel=_zoomLevel;
@property(nonatomic) long long tileSize; // @synthesize tileSize=_tileSize;
@property(nonatomic) CDStruct_c3b9c2ee centerCoordinate; // @synthesize centerCoordinate=_centerCoordinate;
- (id).cxx_construct;
@property(readonly, nonatomic) NSDictionary *dictionaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKWaterPolygonMaker : VKRealisticPolygonMaker
{
}

- (void)generateIndexedTrianglesWithHandler:(CDUnknownBlockType)arg1;

@end

__attribute__((visibility("hidden")))
@interface VKWorld : NSObject
{
    id <VKWorldDelegate> _delegate;
    VKModelObject *_modelRoot;
}

@property(readonly, nonatomic) VKModelObject *modelRoot; // @synthesize modelRoot=_modelRoot;
@property(nonatomic) id <VKWorldDelegate> delegate; // @synthesize delegate=_delegate;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue *)arg3 dispatchQueue:(id)arg4;
- (void)runAnimation:(id)arg1;
- (void)worldDisplayDidChange;
- (void)worldLayoutDidChange;
- (id)description;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _VKLandmarkIconArtwork : VKIconArtwork
{
    CDStruct_44d855de _style;
    struct CGImage *_maskImage;
    struct CGImage *_outlineMaskImage;
}

- (id).cxx_construct;
- (void)_cleanUpAfterDrawing;
- (id)_newImage;
- (struct CGSize)size;
- (void)dealloc;
- (id)initWithMask:(struct CGImage *)arg1 outlineMask:(struct CGImage *)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4;

@end

__attribute__((visibility("hidden")))
@interface _VKLandmarkIconKey : NSObject
{
    CDStruct_44d855de _style;
    NSString *_name;
    long long _size;
}

- (id).cxx_construct;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initWithName:(id)arg1 style:(CDStruct_44d855de *)arg2 size:(long long)arg3;

@end

__attribute__((visibility("hidden")))
@interface _VKLocalIconAtlas : VKIconAtlas
{
    VKResourceManager *_resourceManager;
}

- (id)artworkForStyleAttributeKey:(unsigned int)arg1 longValue:(unsigned long long)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4 size:(long long)arg5;
- (id)artworkForStyleAttributeKey:(unsigned int)arg1 value:(unsigned int)arg2 style:(CDStruct_44d855de *)arg3 contentScale:(double)arg4 size:(long long)arg5;
- (struct CGImage *)_createImageForName:(id)arg1 contentScale:(double)arg2 size:(long long)arg3;
- (void)dealloc;
- (id)initWithResourceManager:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface _VKNamedIconKey : NSObject
{
    NSString *_name;
    long long _size;
}

- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initWithName:(id)arg1 size:(long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface _VKPOIIconArtwork : VKIconArtwork
{
    struct CGImage *_glyphImage;
    CDStruct_44d855de _style;
}

- (id).cxx_construct;
- (void)_cleanUpAfterDrawing;
- (id)_newImage;
- (struct CGSize)size;
- (void)dealloc;
- (id)initWithGlyph:(struct CGImage *)arg1 style:(CDStruct_44d855de *)arg2 contentScale:(double)arg3;

@end

__attribute__((visibility("hidden")))
@interface _VKPOIIconKey : NSObject
{
    CDStruct_44d855de _style;
    NSString *_name;
    long long _size;
}

- (id).cxx_construct;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initWithName:(id)arg1 style:(CDStruct_44d855de *)arg2 size:(long long)arg3;

@end

__attribute__((visibility("hidden")))
@interface _VKScaledFallbackIconArtwork : VKIconArtwork
{
    VKIconArtwork *_artwork;
    struct CGSize _size;
}

- (id).cxx_construct;
- (void)_cleanUpAfterDrawing;
- (id)_newImage;
- (struct CGSize)size;
- (void)dealloc;
- (id)initWithArtwork:(id)arg1 contentScale:(double)arg2;

@end

__attribute__((visibility("hidden")))
@interface _VKScaledFallbackShieldArtwork : VKShieldArtwork
{
    VKShieldArtwork *_artwork;
}

- (struct CGImage *)newImageWithShieldText:(id)arg1 allowMultiline:(_Bool)arg2 centerPoint:(struct CGPoint *)arg3;
- (void)dealloc;
- (id)initWithShieldArtwork:(id)arg1 scale:(double)arg2;

@end

__attribute__((visibility("hidden")))
@interface _VKTileProviderTimerTarget : NSObject
{
    VKTileProvider *tileProvider;
    VKTileProvider *_tileProvider;
}

@property(nonatomic) VKTileProvider *tileProvider; // @synthesize tileProvider=_tileProvider;
- (void)timerFired:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface _VKTileSetBackedTileSourceTimerTarget : NSObject
{
    VKTileSetBackedTileSource *_tileSource;
}

@property(nonatomic) VKTileSetBackedTileSource *tileSource; // @synthesize tileSource=_tileSource;
- (void)expireTiles:(id)arg1;

@end

