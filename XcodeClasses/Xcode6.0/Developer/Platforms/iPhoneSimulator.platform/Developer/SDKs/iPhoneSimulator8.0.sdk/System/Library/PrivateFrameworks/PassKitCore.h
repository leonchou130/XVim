//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct PKEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore
// UUID: 18025282-C25C-34A3-B134-398D2F277964
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 685.3.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CLLocationManagerDelegate <NSObject>

@optional
- (void)locationManager:(CLLocationManager *)arg1 didVisit:(CLVisit *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didFinishDeferredUpdatesWithError:(NSError *)arg2;
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didStartMonitoringForRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(CLLocationManager *)arg1 monitoringDidFailForRegion:(CLRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didFailWithError:(NSError *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didExitRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didEnterRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 rangingBeaconsDidFailForRegion:(CLBeaconRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didRangeBeacons:(NSArray *)arg2 inRegion:(CLBeaconRegion *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didDetermineState:(long long)arg2 forRegion:(CLRegion *)arg3;
- (_Bool)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateHeading:(CLHeading *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateLocations:(NSArray *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateToLocation:(CLLocation *)arg2 fromLocation:(CLLocation *)arg3;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)arg1;
- (void)URLSession:(NSURLSession *)arg1 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)URLSession:(NSURLSession *)arg1 didBecomeInvalidWithError:(NSError *)arg2;
@end

@protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didFinishDownloadingToURL:(NSURL *)arg3;

@optional
- (void)URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;
- (void)URLSession:(NSURLSession *)arg1 downloadTask:(NSURLSessionDownloadTask *)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didCompleteWithError:(NSError *)arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 needNewBodyStream:(void (^)(NSInputStream *))arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg3 completionHandler:(void (^)(long long, NSURLCredential *))arg4;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 willPerformHTTPRedirection:(NSHTTPURLResponse *)arg3 newRequest:(NSURLRequest *)arg4 completionHandler:(void (^)(NSURLRequest *))arg5;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol PDPassLibraryExportedInterface
- (void)removePassesOfType:(unsigned long long)arg1;
- (void)hasInAppPaymentPassesForNetworks:(NSSet *)arg1 withHandler:(void (^)(_Bool))arg2;
- (void)inAppPaymentPassesForNetworks:(NSSet *)arg1 withHandler:(void (^)(NSSet *))arg2;
- (void)countPassesOfType:(unsigned long long)arg1 handler:(void (^)(unsigned long long))arg2;
- (void)hasPassesOfType:(unsigned long long)arg1 handler:(void (^)(_Bool))arg2;
- (void)recomputeRelevantPassesWithSearchMode:(long long)arg1;
- (void)logDelayExitReasons;
- (void)librarySuspended;
- (void)libraryResumed;
- (void)sendPassbookUIServiceLaunched;
- (void)sendUserEditedCatalog:(PKCatalog *)arg1;
- (void)getPassesAndCatalog:(_Bool)arg1 withHandler:(void (^)(NSSet *, PKCatalog *))arg2;
- (void)getManifestHashAndSettingsForPassTypeID:(NSString *)arg1 serialNumber:(NSString *)arg2 handler:(void (^)(NSData *, long long))arg3;
- (void)shuffleGroups:(int)arg1;
- (void)introduceDatabaseIntegrityProblem;
- (void)addFakeBulletin;
- (void)nukeDatabaseAndExit;
- (void)noteAccountDeletedWithHandler:(void (^)(void))arg1;
- (void)noteAccountChangedWithHandler:(void (^)(void))arg1;
- (void)migrateDataWithHandler:(void (^)(_Bool))arg1;
- (void)getDiffForPassBulletinWithRecordID:(NSString *)arg1 handler:(void (^)(PKDiff *))arg2;
- (void)updateObjectWithUniqueID:(NSString *)arg1 handler:(void (^)(_Bool))arg2;
- (void)getImageSetForUniqueID:(NSString *)arg1 ofType:(long long)arg2 displayProfile:(PKDisplayProfile *)arg3 handler:(void (^)(PKImageSet *))arg4;
- (void)getContentForUniqueID:(NSString *)arg1 handler:(void (^)(PKContent *))arg2;
- (void)getRouteRelevantPassesForLocation:(CLLocation *)arg1 handler:(void (^)(NSArray *, NSDictionary *))arg2;
- (void)getPassWithPassTypeID:(NSString *)arg1 serialNumber:(NSString *)arg2 handler:(void (^)(PKPass *))arg3;
- (void)getArchivedObjectWithUniqueID:(NSString *)arg1 handler:(void (^)(NSData *))arg2;
- (void)getPassWithUniqueID:(NSString *)arg1 handler:(void (^)(PKPass *))arg2;
- (void)submitVerificationCode:(NSString *)arg1 verificationData:(NSData *)arg2 forPassWithUniqueID:(NSString *)arg3 handler:(void (^)(_Bool, NSError *))arg4;
- (void)getPassesOfType:(unsigned long long)arg1 handler:(void (^)(NSSet *))arg2;
- (void)isPaymentPassActivationAvailableWithHandler:(void (^)(_Bool))arg1;
- (void)getPassesWithHandler:(void (^)(NSSet *))arg1;
- (void)noteObjectSharedWithUniqueID:(NSString *)arg1;
- (void)updateSettings:(long long)arg1 forObjectWithUniqueID:(NSString *)arg2;
- (void)ingestPassDatas:(NSArray *)arg1 settings:(NSArray *)arg2 handler:(void (^)(void))arg3;
- (void)removePassWithUniqueID:(NSString *)arg1 handler:(void (^)(void))arg2;
- (void)addPassesWithData:(NSSet *)arg1 handler:(void (^)(unsigned long long))arg2;
- (void)replacePassWithPassData:(NSData *)arg1 handler:(void (^)(_Bool))arg2;
@end

@protocol PDPaymentServiceExportedInterface
- (void)presentPaymentInterfaceWithHandler:(void (^)(void))arg1;
- (void)consistencyCheckWithHandler:(void (^)(void))arg1;
- (void)simulatePaymentPushWithHandler:(void (^)(void))arg1;
- (void)setNewAuthRandomIfNecessaryWithCompletion:(void (^)(void))arg1;
- (void)setNewAuthRandomWithCompletion:(void (^)(void))arg1;
- (void)markAllPaymentApplicationsForDeleteWithHandler:(void (^)(void))arg1;
- (void)deleteAllMessagesForPaymentPassWithUniqueIdentifier:(NSString *)arg1 handler:(void (^)(void))arg2;
- (void)messageForPaymentPassWithUniqueIdentifier:(NSString *)arg1 handler:(void (^)(PKPaymentMessage *, NSString *))arg2;
- (void)transactionsForPaymentPassWithUniqueIdentifier:(NSString *)arg1 handler:(void (^)(NSSet *, NSString *))arg2;
- (void)submitVerificationCode:(NSString *)arg1 verificationData:(NSData *)arg2 forDPANIdentifier:(NSString *)arg3 handler:(void (^)(_Bool, NSError *))arg4;
- (void)authorizeInAppPaymentRequest:(PKPaymentAuthorizationRequest *)arg1 handler:(void (^)(NSError *, PKWrappedPayment *))arg2;
- (void)deauthorizePaymentPassWithUniqueIdentifier:(NSString *)arg1 handler:(void (^)(_Bool))arg2;
- (void)authorizePaymentPassWithUniqueIdentifier:(NSString *)arg1 authenticationCredential:(NSData *)arg2 handler:(void (^)(_Bool, NSError *, NSDate *))arg3;
- (void)activatePaymentPassWithUniqueIdentifier:(NSString *)arg1 handler:(void (^)(_Bool, NSError *))arg2;
- (void)activationStateForPaymentPassWithUniqueIdentifier:(NSString *)arg1 handler:(void (^)(long long))arg2;
- (void)sharedPaymentWebServiceWithHandler:(void (^)(PKPaymentWebService *))arg1;
- (void)setSharedPaymentWebService:(PKPaymentWebService *)arg1 handler:(void (^)(void))arg2;
- (void)defaultPaymentPassUniqueIdentifier:(void (^)(NSString *))arg1;
- (void)setDefaultPaymentPassUniqueIdentifier:(NSString *)arg1 handler:(void (^)(void))arg2;
- (void)removePaymentDeviceContactlessInterfaceRestrictionOverride:(NSString *)arg1 handler:(void (^)(void))arg2;
- (void)addPaymentDeviceContactlessInterfaceRestrictionOverride:(NSString *)arg1 handler:(void (^)(void))arg2;
- (void)secureElementIdentifierWithHandler:(void (^)(NSString *))arg1;
- (void)paymentDeviceIsInRestrictedModeWithHandler:(void (^)(_Bool))arg1;
- (void)paymentDeviceIsAvailableWithHandler:(void (^)(_Bool))arg1;
- (void)paymentDeviceIsInFieldWithHandler:(void (^)(_Bool))arg1;
- (void)paymentServiceSuspended;
- (void)paymentServiceResumed;
@end

@protocol PKPassLibraryDelegate <NSObject>
- (void)passLibrary:(PKPassLibrary *)arg1 receivedUpdatedCatalog:(PKCatalog *)arg2 passes:(NSSet *)arg3;
@end

@protocol PKPassLibraryExportedInterface
- (void)passRemoved:(PKPass *)arg1;
- (void)passUpdated:(PKPass *)arg1;
- (void)passAdded:(PKPass *)arg1;
- (void)catalogChanged:(PKCatalog *)arg1 withNewPasses:(NSSet *)arg2;
@end

@protocol PKPaymentServiceExportedInterface
- (void)paymentPassWithUniqueIdentifier:(NSString *)arg1 didEnableTransactionService:(_Bool)arg2;
- (void)paymentPassWithUniqueIdentifier:(NSString *)arg1 didEnableMessageService:(_Bool)arg2;
- (void)paymentPassWithUniqueIdentifier:(NSString *)arg1 didReceiveTransaction:(PKPaymentTransaction *)arg2;
- (void)paymentPassWithUniqueIdentifier:(NSString *)arg1 didReceiveMessage:(PKPaymentMessage *)arg2;
- (void)paymentPassWithUniqueIdentifierDidFailTransaction:(NSString *)arg1;
- (void)paymentPassWithUniqueIdentifierDidCompleteTransaction:(NSString *)arg1;
- (void)paymentPassWithUniqueIdentifierDidBeginTransaction:(NSString *)arg1;
- (void)paymentPassWithUniqueIdentifierDidDeauthorize:(NSString *)arg1;
- (void)paymentPassWithUniqueIdentifierDidAuthorize:(NSString *)arg1;
- (void)paymentPassWithUniqueIdentifierDidActivate:(NSString *)arg1;
- (void)paymentDeviceDidLeaveRestrictedMode;
- (void)paymentDeviceDidEnterRestrictedMode;
- (void)paymentDeviceDidBecomeUnavailable;
- (void)paymentDeviceDidBecomeAvailable;
- (void)paymentDeviceDidLeaveField;
- (void)paymentDeviceDidEnterField;
@end

@protocol PKPaymentValidating <NSObject>
- (_Bool)isValidWithError:(id *)arg1;

@optional
+ (Class)validatedClass;
+ (id)validatorWithObject:(id)arg1;
@end

@protocol PKUsageNotificationClientInterface
- (void)passUsedFromSource:(long long)arg1 withTypeIdentifier:(NSString *)arg2 info:(NSDictionary *)arg3;
@end

@interface NSBundle (PKADLoggingPrivacy)
- (id)PKSanitizedBundleIdentifier;
@end

@interface NSData (PKDataAdditions)
- (id)hexEncoding;
- (id)fileSafeBase64Encoding;
- (id)SHA256Hash;
- (id)SHA1Hash;
@end

@interface NSDate (PKDateAdditions)
+ (id)dateForYesterday;
+ (id)dateForTomorrow;
+ (id)dateWithDaysBeforeNow:(unsigned long long)arg1;
+ (id)dateWithDaysFromNow:(unsigned long long)arg1;
- (_Bool)isYesterday;
- (_Bool)isTomorrow;
- (_Bool)isToday;
- (_Bool)isDateEqualToDateIgnoringTime:(id)arg1;
@end

@interface NSDictionary (PKPlistTypeSafety)
- (id)PKSetContaining:(Class)arg1 forKey:(id)arg2;
- (id)PKSetForKey:(id)arg1;
- (id)PKArrayContaining:(Class)arg1 forKey:(id)arg2;
- (id)PKArrayForKey:(id)arg1;
- (id)PKDictionaryForKey:(id)arg1;
- (_Bool)PKBoolForKey:(id)arg1;
- (double)PKDoubleForKey:(id)arg1;
- (long long)PKIntegerForKey:(id)arg1;
- (id)PKColorForKey:(id)arg1;
- (id)PKUUIDForKey:(id)arg1;
- (id)PKURLForKey:(id)arg1;
- (id)PKStringForKey:(id)arg1;
- (id)PKDateForKey:(id)arg1;
- (id)PKDecimalNumberForKey:(id)arg1;
- (id)PKNumberForKey:(id)arg1;
@end

@interface NSMutableArray (PKMutableArrayAdditions)
- (void)safelyAddObject:(id)arg1;
@end

@interface NSString (PKStringAdditions)
- (id)decodeHexadecimal;
@end

@interface PKAsyncCache : NSObject
{
    NSCache *_itemByKey;
    NSMutableDictionary *_deliveryBlocksByKey;
}

- (void)_executeRetrievalBlock:(CDUnknownBlockType)arg1 forKey:(id)arg2;
- (void)_queue_executeDeliveryBlocksForKey:(id)arg1 withItem:(id)arg2;
- (void)retrieveItemForKey:(id)arg1 retrievalBlock:(CDUnknownBlockType)arg2 deliveryBlock:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)initWithCache:(id)arg1;
- (id)init;

@end

@interface PKAuthenticator : NSObject
{
    _Bool _fingerPresent;
    id <PKAuthenticatorDelegate> _delegate;
    double _authenticationTimeout;
    NSNumber *_applicationProcessID;
}

+ (void)_preflightPolicy:(long long)arg1 completion:(CDUnknownBlockType)arg2;
+ (unsigned long long)currentStateForPreflightPolicy:(long long)arg1;
@property(retain, nonatomic) NSNumber *applicationProcessID; // @synthesize applicationProcessID=_applicationProcessID;
@property(nonatomic) double authenticationTimeout; // @synthesize authenticationTimeout=_authenticationTimeout;
@property(nonatomic) _Bool fingerPresent; // @synthesize fingerPresent=_fingerPresent;
@property(nonatomic) id <PKAuthenticatorDelegate> delegate; // @synthesize delegate=_delegate;
- (_Bool)_delegateSupportsPasscodeDismissal;
- (_Bool)_delegateSupportsPasscodePresentation;
- (void)cancelEvaluation;
- (void)fallbackToSystemPasscodeUI;
- (void)evaluatePolicy:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)event:(id)arg1 params:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;
- (id)init;

@end

@interface PKBarcode : NSObject <NSSecureCoding>
{
    NSData *_messageData;
    NSDictionary *_options;
    long long _format;
    NSString *_altText;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *altText; // @synthesize altText=_altText;
@property(nonatomic) long long format; // @synthesize format=_format;
@property(copy, nonatomic) NSDictionary *options; // @synthesize options=_options;
@property(copy, nonatomic) NSData *messageData; // @synthesize messageData=_messageData;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, nonatomic) _Bool isTall;
- (id)initWithBarcodeDictionary:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

@interface PKBeacon : NSObject <NSSecureCoding>
{
    NSUUID *_proximityUUID;
    NSNumber *_major;
    NSNumber *_minor;
    NSString *_name;
    NSString *_relevantText;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *relevantText; // @synthesize relevantText=_relevantText;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSNumber *minor; // @synthesize minor=_minor;
@property(retain, nonatomic) NSNumber *major; // @synthesize major=_major;
@property(retain, nonatomic) NSUUID *proximityUUID; // @synthesize proximityUUID=_proximityUUID;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)proximityUUIDAsString;
- (void)setProximityUUIDWithString:(id)arg1;
- (void)dealloc;

@end

@interface PKCatalog : NSObject <NSSecureCoding>
{
    NSMutableArray *_groups;
    NSDate *_timestamp;
}

+ (_Bool)supportsSecureCoding;
+ (id)catalogWithContentsOfURL:(id)arg1;
@property(retain, nonatomic) NSDate *timestamp; // @synthesize timestamp=_timestamp;
@property(retain, nonatomic) NSMutableArray *groups; // @synthesize groups=_groups;
- (void)shuffle:(int)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)allGroupIDs;
- (_Bool)isNewerThanCatalog:(id)arg1;
- (_Bool)isEquivalentToCatalog:(id)arg1;
- (void)writeToURL:(id)arg1 atomically:(_Bool)arg2;
- (void)dealloc;
- (id)init;

@end

@interface PKCatalogGroup : NSObject <NSCopying, NSSecureCoding>
{
    NSNumber *_groupID;
    NSMutableArray *_uniqueIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSMutableArray *uniqueIDs; // @synthesize uniqueIDs=_uniqueIDs;
@property(retain, nonatomic) NSNumber *groupID; // @synthesize groupID=_groupID;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqualToGroup:(id)arg1;
- (void)dealloc;

@end

@interface PKColor : NSObject <NSSecureCoding, NSCopying>
{
    double _red;
    double _green;
    double _blue;
    double _alpha;
    struct CGColor *_colorRef;
}

+ (_Bool)supportsSecureCoding;
+ (id)colorFromString:(id)arg1;
+ (id)colorWithH:(double)arg1 S:(double)arg2 B:(double)arg3 A:(double)arg4;
+ (id)colorWithR:(double)arg1 G:(double)arg2 B:(double)arg3 A:(double)arg4;
- (struct CGColor *)_newCGColor;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, nonatomic) unsigned long long hash;
@property(readonly, nonatomic) NSString *string;
@property(readonly, nonatomic) struct CGColor *CGColor;
- (double)luminance;
- (void)dealloc;

@end

@interface PKContent : NSObject <NSSecureCoding>
{
    PKBarcode *_barcode;
    NSArray *_storeIdentifiers;
    NSURL *_appLaunchURL;
    NSString *_localizedDescription;
}

+ (_Bool)supportsSecureCoding;
+ (id)contentWithFileURL:(id)arg1;
@property(copy, nonatomic) NSString *localizedDescription; // @synthesize localizedDescription=_localizedDescription;
@property(copy, nonatomic) NSURL *appLaunchURL; // @synthesize appLaunchURL=_appLaunchURL;
@property(copy, nonatomic) NSArray *storeIdentifiers; // @synthesize storeIdentifiers=_storeIdentifiers;
@property(retain, nonatomic) PKBarcode *barcode; // @synthesize barcode=_barcode;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)flushFormattedFieldValues;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;

@end

@interface PKDataAccessor : NSObject
{
    NSObject<OS_dispatch_queue> *_processingQueue;
}

- (id)displayProfileOfType:(long long)arg1;
@property(readonly, retain, nonatomic) PKRemoteAssetManager *remoteAssetManager;
@property(readonly, nonatomic) _Bool remoteAssetsDownloaded;
- (void)downloadRemoteAssetsWithCompletion:(CDUnknownBlockType)arg1;
- (void)downloadRemoteAssetsWithScreenScale:(double)arg1 suffix:(id)arg2 completion:(CDUnknownBlockType)arg3;
@property(readonly, retain, nonatomic) NSBundle *bundle;
@property(readonly, retain, nonatomic) NSData *serializedFileWrapper;
@property(readonly, retain, nonatomic) NSData *archiveData;
@property(readonly, retain, nonatomic) NSData *manifestHash;
- (id)resourceValueForKey:(id)arg1;
- (void)imageSetForType:(long long)arg1 screenScale:(double)arg2 suffix:(id)arg3 displayProfile:(id)arg4 preheat:(_Bool)arg5 withCompletion:(CDUnknownBlockType)arg6;
- (void)imageSetForType:(long long)arg1 displayProfile:(id)arg2 preheat:(_Bool)arg3 withCompletion:(CDUnknownBlockType)arg4;
- (void)contentWithCompletion:(CDUnknownBlockType)arg1;
- (void)dictionaryWithCompletion:(CDUnknownBlockType)arg1;
- (void)requestUpdateWithCompletion:(CDUnknownBlockType)arg1;
- (void)revocationStatusWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateSettings:(long long)arg1;
- (void)noteShared;
- (id)imageSetForType:(long long)arg1 screenScale:(double)arg2 suffix:(id)arg3 displayProfile:(id)arg4 preheat:(_Bool)arg5;
- (id)imageSetForType:(long long)arg1 displayProfile:(id)arg2 preheat:(_Bool)arg3;
- (id)dictionary;
- (id)content;

@end

@interface PKDiff : NSObject <NSSecureCoding>
{
    NSMutableArray *_hunks;
    NSString *_passUniqueID;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *passUniqueID; // @synthesize passUniqueID=_passUniqueID;
- (unsigned long long)_hunkIndexForKey:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (long long)compare:(id)arg1;
- (_Bool)isEqualToDiff:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)anyKey;
- (void)addHunksFromDiff:(id)arg1;
- (void)removeHunkForKey:(id)arg1;
- (_Bool)getHunkForKey:(id)arg1 oldValue:(id *)arg2 newValue:(id *)arg3 message:(id *)arg4;
- (id)description;
- (void)enumerateHunks:(CDUnknownBlockType)arg1;
- (void)key:(id *)arg1 oldValue:(id *)arg2 newValue:(id *)arg3 message:(id *)arg4 forHunkAtIndex:(long long)arg5;
- (long long)hunkCount;
- (void)addHunkWithKey:(id)arg1 oldValue:(id)arg2 newValue:(id)arg3 message:(id)arg4;
- (void)dealloc;
- (id)init;

@end

@interface PKDiffHunk : NSObject <NSSecureCoding>
{
    NSString *_key;
    id _oldValue;
    id _newValue;
    NSString *_message;
}

+ (_Bool)supportsSecureCoding;
+ (id)hunkWithKey:(id)arg1 oldValue:(id)arg2 newValue:(id)arg3 message:(id)arg4;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) id valueNew; // @synthesize valueNew=_newValue;
@property(retain, nonatomic) id valueOld; // @synthesize valueOld=_oldValue;
@property(retain, nonatomic) NSString *key; // @synthesize key=_key;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (long long)compare:(id)arg1;
- (_Bool)isEqualToDiffHunk:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;

@end

@interface PKDisplayProfile : NSObject <NSSecureCoding, NSCopying>
{
    long long _type;
}

+ (_Bool)supportsSecureCoding;
+ (Class)classForDisplayProfileType:(long long)arg1;
+ (id)displayProfileOfType:(long long)arg1 withDictionary:(id)arg2 bundle:(id)arg3;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;

@end

@interface PKFileDataAccessor : PKDataAccessor
{
    PKRemoteAssetManager *_remoteAssetManager;
    NSObject<OS_dispatch_queue> *_processingQueue;
    NSURL *_fileURL;
}

@property(readonly, retain, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *processingQueue; // @synthesize processingQueue=_processingQueue;
- (id)displayProfileOfType:(long long)arg1;
- (id)remoteAssetManager;
- (void)downloadRemoteAssetsWithScreenScale:(double)arg1 suffix:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)remoteAssetsDownloaded;
- (id)bundle;
- (id)serializedFileWrapper;
- (id)archiveData;
- (id)manifestHash;
- (id)resourceValueForKey:(id)arg1;
- (void)imageSetForType:(long long)arg1 screenScale:(double)arg2 suffix:(id)arg3 displayProfile:(id)arg4 preheat:(_Bool)arg5 withCompletion:(CDUnknownBlockType)arg6;
- (void)contentWithCompletion:(CDUnknownBlockType)arg1;
- (void)dictionaryWithCompletion:(CDUnknownBlockType)arg1;
- (void)revocationStatusWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithFileURL:(id)arg1 error:(id *)arg2 processingQueue:(id)arg3;
- (id)initWithFileURL:(id)arg1 error:(id *)arg2;

@end

@interface PKGroup : NSObject
{
    PKCatalogGroup *_catalogGroup;
    NSMutableDictionary *_passesByUniqueID;
    _Bool _local;
    id <PKGroupDelegate> _delegate;
    unsigned long long _frontmostPassIndex;
}

@property(nonatomic, getter=isLocal) _Bool local; // @synthesize local=_local;
@property(nonatomic) unsigned long long frontmostPassIndex; // @synthesize frontmostPassIndex=_frontmostPassIndex;
@property(nonatomic) id <PKGroupDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_removeUniqueID:(id)arg1 notify:(_Bool)arg2;
- (void)_moveUniqueID:(id)arg1 toIndex:(unsigned long long)arg2 notify:(_Bool)arg3;
- (void)_insertPass:(id)arg1 atIndex:(unsigned long long)arg2 notify:(_Bool)arg3;
- (void)_updatePass:(id)arg1 notify:(_Bool)arg2;
- (unsigned long long)_indexOfUniqueID:(id)arg1;
- (id)passWithUniqueID:(id)arg1;
- (void)enumerateUniqueIDsWithHandler:(CDUnknownBlockType)arg1;
- (_Bool)containsOnlyUniqueID:(id)arg1;
- (_Bool)containsPasses;
- (void)handleUserPassDelete:(id)arg1;
- (id)copyCatalogGroup;
- (void)updateWithCatalogGroup:(id)arg1 passes:(id)arg2 notify:(_Bool)arg3;
- (id)initWithCatalogGroup:(id)arg1 passes:(id)arg2;
- (unsigned long long)indexForPassUniqueID:(id)arg1;
- (id)passAtIndex:(unsigned long long)arg1;
- (unsigned long long)passCount;
@property(readonly, nonatomic) NSNumber *groupID;
- (id)description;
- (void)dealloc;

@end

@interface PKGroupsController : NSObject <PKPassLibraryDelegate>
{
    PKPassLibrary *_passLibrary;
    unsigned long long _passTypeMask;
    NSMutableArray *_groups;
    NSMutableDictionary *_passesByUniqueID;
    NSMutableDictionary *_groupsByGroupID;
    NSMutableDictionary *_indicesByGroupID;
    NSMutableDictionary *_groupIDsByPassUniqueID;
    _Bool _suppressRemoteUpdates;
    _Bool _enqueueRemoteUpdates;
    PKCatalog *_catalogBeforeReordering;
    NSMutableArray *_enqueuedUpdates;
    NSArray *_localPasses;
    _Bool _limitedMode;
    _Bool _activePassesOnly;
    _Bool _reorderingEnabled;
    _Bool _shouldSeparatePaymentPasses;
    id <PKGroupsControllerDelegate> _delegate;
}

@property(nonatomic) _Bool shouldSeparatePaymentPasses; // @synthesize shouldSeparatePaymentPasses=_shouldSeparatePaymentPasses;
@property(readonly, nonatomic, getter=isReorderingEnabled) _Bool reorderingEnabled; // @synthesize reorderingEnabled=_reorderingEnabled;
@property(nonatomic) id <PKGroupsControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_insertLocalGroupsIntoCatalog:(id)arg1;
- (id)_copyRemoteCatalog;
- (void)_removeGroup:(id)arg1 notify:(_Bool)arg2;
- (void)_moveGroup:(id)arg1 fromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3 notify:(_Bool)arg4;
- (void)_insertGroup:(id)arg1 atIndex:(unsigned long long)arg2 notify:(_Bool)arg3;
- (void)_placeGroup:(id)arg1 atIndex:(unsigned long long)arg2 notify:(_Bool)arg3;
- (id)_updateAndCreateGroupsWithCatalog:(id)arg1 passes:(id)arg2 notify:(_Bool)arg3;
- (unsigned long long)_destinationIndexForGroupID:(id)arg1 catalogGroups:(id)arg2 skippingNewGroupsAfterIndex:(unsigned long long)arg3;
- (void)_updateStateWithCatalog:(id)arg1 passes:(id)arg2 notify:(_Bool)arg3;
- (_Bool)_groupIDIsNew:(id)arg1;
- (void)_fixIndicesFrom:(unsigned long long)arg1 through:(unsigned long long)arg2;
- (void)_fixIndicesFrom:(unsigned long long)arg1;
- (void)_fixIndex:(unsigned long long)arg1;
- (id)_passesDictionaryFromSet:(id)arg1;
- (unsigned long long)_indexOfGroupID:(id)arg1;
- (void)_performEnqueuedUpdates;
- (void)_performOrEnqueueUpdate:(CDUnknownBlockType)arg1;
- (void)passLibrary:(id)arg1 receivedUpdatedCatalog:(id)arg2 passes:(id)arg3;
- (void)reloadGroupsAndNotify:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)reloadGroupsWithCompletion:(CDUnknownBlockType)arg1;
- (void)addLocalPasses:(id)arg1;
- (void)enableRemoteUpdates;
- (void)moveGroupAtIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2;
- (void)suppressRemoteUpdates:(_Bool)arg1;
- (void)handleUserPassDelete:(id)arg1;
- (void)handleUserPassIngestionWithData:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (unsigned long long)indexOfSeparationGroup;
- (unsigned long long)groupIndexForPassUniqueID:(id)arg1;
- (unsigned long long)indexOfGroup:(id)arg1;
- (id)groupAtIndex:(unsigned long long)arg1;
- (unsigned long long)groupCount;
- (void)reloadGroups;
- (void)loadGroupsSynchronously;
- (void)loadGroupsWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initLimited;
- (id)initWithPassTypeMask:(unsigned long long)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKImage : NSObject <NSSecureCoding>
{
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _shouldTile;
    _Bool _shouldStretch;
    struct PKEdgeInsets _capInsets;
    NSData *_imageData;
    struct CGImage *_imageRef;
    double _scale;
    long long _orientation;
}

+ (_Bool)supportsSecureCoding;
+ (id)passesImageNamed:(id)arg1;
+ (id)hashOfImageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)imageNamed:(id)arg1 inBundle:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;
+ (id)imageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)URLForImageNamed:(id)arg1 inBundle:(id)arg2 scale:(double *)arg3 preferredScreenScale:(double)arg4 suffix:(id)arg5;
+ (id)URLForImageNamed:(id)arg1 inBundle:(id)arg2 scale:(double *)arg3;
@property(readonly, nonatomic) double scale; // @synthesize scale=_scale;
- (_Bool)_isTiledWhenStretchedToSize:(struct CGSize)arg1;
- (void)_queue_createImageRefIfNecessary;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)drawInRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2 withBlendMode:(int)arg3 alpha:(double)arg4;
- (void)drawInRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;
- (id)resizableImageByTilingCenterPixel;
- (id)resizableImageByStretchingWithCapInsets:(struct PKEdgeInsets)arg1;
- (id)resizableImageByTilingWithCapInsets:(struct PKEdgeInsets)arg1;
- (id)resizedImageWithConstraints:(id)arg1;
- (id)blurredImageWithRadius:(unsigned long long)arg1 constraints:(id)arg2;
@property(readonly, nonatomic) struct PKEdgeInsets capInsets;
@property(readonly, nonatomic) _Bool stretches;
@property(readonly, nonatomic) _Bool tiles;
- (void)preheatBitmapData;
@property(readonly, nonatomic) NSData *imageData; // @synthesize imageData=_imageData;
@property(readonly, nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(readonly, nonatomic) struct CGImage *imageRef; // @synthesize imageRef=_imageRef;
- (struct CGSize)downscaleSizeMatchingScale:(double)arg1;
@property(readonly, nonatomic) struct CGSize size;
- (void)dealloc;
- (id)initWithCGImage:(struct CGImage *)arg1 scale:(double)arg2 orientation:(long long)arg3;
- (id)initWithData:(id)arg1 scale:(double)arg2;
- (id)init;
- (id)imageHash;

@end

@interface PKImageResizingConstraints : NSObject
{
    int _constraintType;
    double _fixedDimension;
    struct CGSize _size;
    double _minAspectRatio;
    double _maxAspectRatio;
    _Bool _respectAspectRatioRange;
    _Bool _outputMirrored;
    double _outputScale;
    double _outputBorderTrim;
}

+ (id)constraintsWithFixedSize:(struct CGSize)arg1;
+ (id)constraintsWithMinSize:(struct CGSize)arg1;
+ (id)constraintsWithMaxSize:(struct CGSize)arg1;
+ (id)constraintsWithMinSize:(struct CGSize)arg1 minAspectRatio:(double)arg2 maxAspectRatio:(double)arg3;
+ (id)constraintsWithMaxSize:(struct CGSize)arg1 minAspectRatio:(double)arg2 maxAspectRatio:(double)arg3;
+ (id)constraintsWithFixedSmallDimenstion:(double)arg1 minAspectRatio:(double)arg2 maxAspectRatio:(double)arg3;
+ (id)constraintsWithFixedLargeDimenstion:(double)arg1 minAspectRatio:(double)arg2 maxAspectRatio:(double)arg3;
+ (id)constraintsWithFixedHeight:(double)arg1 minAspectRatio:(double)arg2 maxAspectRatio:(double)arg3;
+ (id)constraintsWithFixedWidth:(double)arg1 minAspectRatio:(double)arg2 maxAspectRatio:(double)arg3;
@property(nonatomic) _Bool outputMirrored; // @synthesize outputMirrored=_outputMirrored;
@property(nonatomic) double outputBorderTrim; // @synthesize outputBorderTrim=_outputBorderTrim;
@property(nonatomic) double outputScale; // @synthesize outputScale=_outputScale;
- (id)_flippedConstraints;
- (_Bool)_reasonable;
- (_Bool)_getPixelCropRect:(struct CGRect *)arg1 pixelOutputSize:(struct CGSize *)arg2 forImageSize:(struct CGSize)arg3 scale:(double)arg4;
- (_Bool)getPixelCropRect:(struct CGRect *)arg1 pixelOutputSize:(struct CGSize *)arg2 forImage:(id)arg3;
- (id)resizedImage:(id)arg1;
- (id)init;

@end

@interface PKImageSet : NSObject <NSSecureCoding>
{
    NSURL *_originCacheURL;
    long long _version;
}

+ (long long)currentVersion;
+ (id)archiveName;
+ (_Bool)archivedObject:(id)arg1 matchesDisplayProfile:(id)arg2;
+ (Class)classForImageSetType:(long long)arg1;
+ (long long)imageSetType;
+ (_Bool)supportsSecureCoding;
+ (id)_archiveURL:(id)arg1;
+ (id)_archivedImageSet:(id)arg1 forDisplayProfile:(id)arg2;
+ (Class)_classForDisplayProfileType:(long long)arg1;
+ (_Bool)shouldCache;
+ (id)imageSetForType:(long long)arg1 screenScale:(double)arg2 suffix:(id)arg3 displayProfile:(id)arg4 fileURL:(id)arg5 cacheURL:(id)arg6;
+ (id)imageSetForType:(long long)arg1 displayProfile:(id)arg2 fileURL:(id)arg3 cacheURL:(id)arg4;
@property(nonatomic) long long version; // @synthesize version=_version;
@property(copy, nonatomic) NSURL *originCacheURL; // @synthesize originCacheURL=_originCacheURL;
- (void)preheatImages;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)_isSetImage:(id)arg1 equalToImage:(id)arg2;
- (void)saveCache:(id)arg1;
- (void)dealloc;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKInAppPaymentEntitlement : NSObject
{
    NSArray *_merchantIdentifiers;
    _Bool _ignoreMerchantIdentifiers;
}

@property(readonly, nonatomic) _Bool ignoreMerchantIdentifiers; // @synthesize ignoreMerchantIdentifiers=_ignoreMerchantIdentifiers;
- (void)_probeEntitlementsWithToken:(CDStruct_6ad76789)arg1;
@property(readonly, nonatomic) _Bool hasMerchantIdentifiers;
- (_Bool)hasMerchantIdentifier:(id)arg1;
- (void)dealloc;
- (id)initWithToken:(CDStruct_6ad76789)arg1;

@end

@interface PKLocation : NSObject <NSSecureCoding>
{
    NSNumber *_latitude;
    NSNumber *_longitude;
    NSNumber *_maxDistance;
    NSNumber *_altitude;
    NSString *_name;
    NSString *_relevantText;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *relevantText; // @synthesize relevantText=_relevantText;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)CLLocation;
- (_Bool)hasEqualCoordinatesToLocation:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (_Bool)hasAltitude;
- (double)altitude;
- (double)maxDistance;
- (double)longitude;
- (double)latitude;
- (void)setAltitude:(id)arg1;
- (void)setMaxDistance:(id)arg1;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;
- (void)setLongitude:(id)arg1;
- (void)setLatitude:(id)arg1;
- (void)dealloc;

@end

@interface PKMerchant : NSObject <NSSecureCoding>
{
    unsigned long long _mapsIdentifier;
    long long _industryCode;
    NSString *_industryCategory;
    NSString *_shortName;
    NSString *_name;
    NSString *_phoneNumber;
    NSURL *_url;
    double _locationLatitude;
    double _locationLongitude;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) double locationLongitude; // @synthesize locationLongitude=_locationLongitude;
@property(nonatomic) double locationLatitude; // @synthesize locationLatitude=_locationLatitude;
@property(copy, nonatomic, setter=setURL:) NSURL *url; // @synthesize url=_url;
@property(copy, nonatomic) NSString *phoneNumber; // @synthesize phoneNumber=_phoneNumber;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(copy, nonatomic) NSString *shortName; // @synthesize shortName=_shortName;
@property(copy, nonatomic) NSString *industryCategory; // @synthesize industryCategory=_industryCategory;
@property(nonatomic) long long industryCode; // @synthesize industryCode=_industryCode;
@property(nonatomic) unsigned long long mapsIdentifier; // @synthesize mapsIdentifier=_mapsIdentifier;
@property(readonly, nonatomic) NSString *displayName;
@property(copy, nonatomic) CLLocation *location;
- (id)description;
- (_Bool)isEqualToMerchant:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;

@end

@interface PKObject : NSObject <NSCopying, NSSecureCoding>
{
    PKImageSet *_imageSets[5];
    NSString *_uniqueID;
    NSData *_manifestHash;
    PKDataAccessor *_dataAccessor;
    PKDisplayProfile *_displayProfile;
    double _preferredImageScale;
    NSString *_preferredImageSuffix;
    NSURL *_webServiceURL;
    NSString *_authenticationToken;
    long long _settings;
    long long _shareCount;
    PKContent *_content;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)isValidObjectWithFileURL:(id)arg1 warnings:(id *)arg2 orError:(id *)arg3;
@property(retain, nonatomic) PKContent *content; // @synthesize content=_content;
@property(nonatomic) long long shareCount; // @synthesize shareCount=_shareCount;
@property(nonatomic) long long settings; // @synthesize settings=_settings;
@property(copy, nonatomic) NSString *authenticationToken; // @synthesize authenticationToken=_authenticationToken;
@property(copy, nonatomic) NSURL *webServiceURL; // @synthesize webServiceURL=_webServiceURL;
@property(retain, nonatomic) NSString *preferredImageSuffix; // @synthesize preferredImageSuffix=_preferredImageSuffix;
@property(nonatomic) double preferredImageScale; // @synthesize preferredImageScale=_preferredImageScale;
@property(retain, nonatomic) PKDisplayProfile *displayProfile; // @synthesize displayProfile=_displayProfile;
@property(retain, nonatomic) PKDataAccessor *dataAccessor; // @synthesize dataAccessor=_dataAccessor;
@property(copy, nonatomic) NSData *manifestHash; // @synthesize manifestHash=_manifestHash;
@property(copy, nonatomic) NSString *uniqueID; // @synthesize uniqueID=_uniqueID;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)setMissingImageSetsFromObject:(id)arg1;
- (_Bool)isImageSetType:(long long)arg1 equalToImageSetTypeFromObject:(id)arg2;
- (id)imageSetLoadedIfNeeded:(long long)arg1;
- (id)contentLoadedIfNeeded;
- (void)reloadDisplayProfileOfType:(long long)arg1;
@property(readonly, retain, nonatomic) NSDate *modificationDate;
@property(readonly, retain, nonatomic) NSData *serializedFileWrapper;
@property(readonly, retain, nonatomic) NSData *archiveData;
- (id)localizedString:(id)arg1;
- (void)downloadRemoteAssetsWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool remoteAssetsDownloaded;
- (void)noteShared;
- (void)requestUpdateWithCompletion:(CDUnknownBlockType)arg1;
- (void)revocationStatusWithCompletion:(CDUnknownBlockType)arg1;
- (id)allImageSetsLoadedIfNecessary;
- (void)flushLoadedImageSets;
- (void)loadImageSetAsync:(long long)arg1 preheat:(_Bool)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)loadImageSetSync:(long long)arg1 preheat:(_Bool)arg2;
- (_Bool)isImageSetLoaded:(long long)arg1;
- (void)flushFormattedFieldValues;
- (void)flushLoadedContent;
- (void)loadContentAsyncWithCompletion:(CDUnknownBlockType)arg1;
- (void)loadContentSync;
- (_Bool)isContentLoaded;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;
- (id)initWithDataAccessor:(id)arg1;
- (id)initWithFileURL:(id)arg1 warnings:(id *)arg2 orError:(id *)arg3;
- (id)initWithFileURL:(id)arg1 error:(id *)arg2;
- (id)initWithData:(id)arg1 warnings:(id *)arg2 orError:(id *)arg3;
- (id)initWithData:(id)arg1 error:(id *)arg2;

@end

@interface PKPass : PKObject <NSCopying, NSSecureCoding>
{
    _Bool _voided;
    _Bool _revoked;
    unsigned long long _passType;
    NSString *_serialNumber;
    NSString *_passTypeIdentifier;
    NSString *_organizationName;
    NSDate *_relevantDate;
    NSDictionary *_userInfo;
    NSURL *_passURL;
    NSString *_teamID;
    NSDate *_expirationDate;
    NSString *_groupingID;
    NSSet *_embeddedLocations;
    NSSet *_embeddedBeacons;
    NSURL *_webLocationsURL;
    NSURL *_localLocationsURL;
    long long _sharingMethod;
    NSURL *_sharingURL;
    NSString *_sharingText;
    NSString *_iAdReportingIdentifier;
    PKImage *_partialFrontFaceImagePlaceholder;
    NSDate *_ingestedDate;
    NSDate *_modifiedDate;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)isValidObjectWithFileURL:(id)arg1 warnings:(id *)arg2 orError:(id *)arg3;
@property(nonatomic, getter=isRevoked) _Bool revoked; // @synthesize revoked=_revoked;
@property(retain, nonatomic) NSDate *modifiedDate; // @synthesize modifiedDate=_modifiedDate;
@property(retain, nonatomic) NSDate *ingestedDate; // @synthesize ingestedDate=_ingestedDate;
@property(readonly, nonatomic) PKImage *partialFrontFaceImagePlaceholder; // @synthesize partialFrontFaceImagePlaceholder=_partialFrontFaceImagePlaceholder;
@property(copy, nonatomic, setter=setiAdReportingIdentifier:) NSString *iAdReportingIdentifier; // @synthesize iAdReportingIdentifier=_iAdReportingIdentifier;
@property(copy, nonatomic) NSString *sharingText; // @synthesize sharingText=_sharingText;
@property(copy, nonatomic) NSURL *sharingURL; // @synthesize sharingURL=_sharingURL;
@property(nonatomic) long long sharingMethod; // @synthesize sharingMethod=_sharingMethod;
@property(copy, nonatomic) NSURL *localLocationsURL; // @synthesize localLocationsURL=_localLocationsURL;
@property(copy, nonatomic) NSURL *webLocationsURL; // @synthesize webLocationsURL=_webLocationsURL;
@property(copy, nonatomic) NSSet *embeddedBeacons; // @synthesize embeddedBeacons=_embeddedBeacons;
@property(copy, nonatomic) NSSet *embeddedLocations; // @synthesize embeddedLocations=_embeddedLocations;
@property(copy, nonatomic) NSString *groupingID; // @synthesize groupingID=_groupingID;
@property(nonatomic, getter=isVoided) _Bool voided; // @synthesize voided=_voided;
@property(copy, nonatomic) NSDate *expirationDate; // @synthesize expirationDate=_expirationDate;
@property(copy, nonatomic) NSString *teamID; // @synthesize teamID=_teamID;
@property(copy, nonatomic) NSURL *passURL; // @synthesize passURL=_passURL;
@property(copy, nonatomic) NSDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property(copy, nonatomic) NSDate *relevantDate; // @synthesize relevantDate=_relevantDate;
@property(copy, nonatomic) NSString *organizationName; // @synthesize organizationName=_organizationName;
@property(copy, nonatomic) NSString *passTypeIdentifier; // @synthesize passTypeIdentifier=_passTypeIdentifier;
@property(copy, nonatomic) NSString *serialNumber; // @synthesize serialNumber=_serialNumber;
@property(nonatomic) unsigned long long passType; // @synthesize passType=_passType;
- (id)_changeMessageForFieldKey:(id)arg1;
- (id)_groupingIDFromPassDictionary:(id)arg1;
- (id)_localizationKeyForMultipleDiff;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqualToPassIncludingMetadata:(id)arg1;
@property(readonly, nonatomic) struct CGRect logoRect;
- (id)stripImage;
- (id)backgroundImage;
- (id)logoImage;
@property(readonly, nonatomic) PKImage *backFaceImage;
@property(readonly, nonatomic) struct CGRect stripRect;
@property(readonly, nonatomic) struct CGRect thumbnailRect;
@property(readonly, nonatomic) PKImage *partialFrontFaceImage;
@property(readonly, nonatomic) PKImage *frontFaceImage;
@property(readonly, nonatomic) PKImage *iconImage;
@property(readonly, nonatomic) NSURL *appLaunchURL;
@property(readonly, nonatomic) NSArray *storeIdentifiers;
@property(readonly, nonatomic) NSArray *backFieldBuckets;
@property(readonly, nonatomic) NSArray *frontFieldBuckets;
@property(readonly, nonatomic) long long transitType;
@property(readonly, copy, nonatomic) NSString *localizedDescription;
@property(readonly, nonatomic) NSString *logoText;
@property(readonly, nonatomic) PKImage *footerImage;
@property(readonly, nonatomic) PKBarcode *barcode;
- (id)diff:(id)arg1;
- (id)localizedDescriptionForDiff:(id)arg1;
- (id)localizedValueForFieldKey:(id)arg1;
- (_Bool)supportsSharing;
- (_Bool)isExpired;
- (_Bool)isUpdatable;
- (_Bool)hasLocationRelevancyInfo;
- (_Bool)hasTimeOrLocationRelevancyInfo;
@property(readonly, nonatomic) PKPaymentPass *paymentPass;
@property(readonly, nonatomic) NSString *pluralLocalizedName;
@property(readonly, nonatomic) NSString *lowercaseLocalizedName;
@property(readonly, copy, nonatomic) NSString *localizedName;
@property(readonly, nonatomic) long long style;
- (void)downloadRemoteAssetsWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;
- (id)initWithData:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(copy, nonatomic) NSString *authenticationToken;
@property(copy, nonatomic) PKPassDisplayProfile *displayProfile;
@property(readonly, copy, nonatomic) UIImage *icon; // @dynamic icon;
@property(readonly, nonatomic) NSString *uniqueID;
@property(copy, nonatomic) NSURL *webServiceURL;

@end

@interface PKPassImageSet : PKImageSet
{
    struct CGSize _displayProfileRectSize;
}

+ (_Bool)archivedObject:(id)arg1 matchesDisplayProfile:(id)arg2;
+ (Class)classForImageSetType:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKPassBackFaceImageSet : PKPassImageSet
{
    PKImage *_faceImage;
}

+ (_Bool)supportsSecureCoding;
+ (long long)currentVersion;
+ (id)archiveName;
+ (long long)imageSetType;
@property(retain, nonatomic) PKImage *faceImage; // @synthesize faceImage=_faceImage;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)preheatImages;
- (void)dealloc;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKPassContent : PKContent <NSSecureCoding>
{
    long long _transitType;
    PKImage *_footerImage;
    NSString *_logoText;
    NSArray *_frontFieldBuckets;
    NSArray *_backFieldBuckets;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSArray *backFieldBuckets; // @synthesize backFieldBuckets=_backFieldBuckets;
@property(copy, nonatomic) NSArray *frontFieldBuckets; // @synthesize frontFieldBuckets=_frontFieldBuckets;
@property(copy, nonatomic) NSString *logoText; // @synthesize logoText=_logoText;
@property(retain, nonatomic) PKImage *footerImage; // @synthesize footerImage=_footerImage;
@property(nonatomic) long long transitType; // @synthesize transitType=_transitType;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)flushFormattedFieldValues;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;

@end

@interface PKPassField : NSObject <NSSecureCoding>
{
    NSString *_value;
    long long _type;
    NSString *_key;
    NSString *_label;
    id _unformattedValue;
    NSString *_changeMessage;
    long long _textAlignment;
    unsigned long long _dataDetectorTypes;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long dataDetectorTypes; // @synthesize dataDetectorTypes=_dataDetectorTypes;
@property(nonatomic) long long textAlignment; // @synthesize textAlignment=_textAlignment;
@property(copy, nonatomic) NSString *changeMessage; // @synthesize changeMessage=_changeMessage;
@property(copy, nonatomic) id unformattedValue; // @synthesize unformattedValue=_unformattedValue;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(copy, nonatomic) NSString *key; // @synthesize key=_key;
@property(nonatomic) long long type; // @synthesize type=_type;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (void)flushCachedValue;
@property(readonly) NSString *value;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface PKPassDateField : PKPassField
{
    _Bool _isRelative;
    _Bool _ignoresTimeZone;
    long long _dateStyle;
    long long _timeStyle;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool ignoresTimeZone; // @synthesize ignoresTimeZone=_ignoresTimeZone;
@property(nonatomic) _Bool isRelative; // @synthesize isRelative=_isRelative;
@property(nonatomic) long long timeStyle; // @synthesize timeStyle=_timeStyle;
@property(nonatomic) long long dateStyle; // @synthesize dateStyle=_dateStyle;
- (id)value;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPassDisplayProfile : PKDisplayProfile <NSSecureCoding, NSCopying>
{
    _Bool _tallCode;
    long long _passStyle;
    PKColor *_backgroundColor;
    PKColor *_foregroundColor;
    PKColor *_labelColor;
    PKColor *_stripColor;
    NSData *_iconHash;
    NSData *_logoHash;
    NSData *_thumbnailHash;
    NSData *_backgroundHash;
    NSData *_stripHash;
    NSData *_paymentAssetsHash;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool tallCode; // @synthesize tallCode=_tallCode;
@property(retain, nonatomic) NSData *paymentAssetsHash; // @synthesize paymentAssetsHash=_paymentAssetsHash;
@property(retain, nonatomic) NSData *stripHash; // @synthesize stripHash=_stripHash;
@property(retain, nonatomic) NSData *backgroundHash; // @synthesize backgroundHash=_backgroundHash;
@property(retain, nonatomic) NSData *thumbnailHash; // @synthesize thumbnailHash=_thumbnailHash;
@property(retain, nonatomic) NSData *logoHash; // @synthesize logoHash=_logoHash;
@property(retain, nonatomic) NSData *iconHash; // @synthesize iconHash=_iconHash;
@property(retain, nonatomic) PKColor *stripColor; // @synthesize stripColor=_stripColor;
@property(retain, nonatomic) PKColor *labelColor; // @synthesize labelColor=_labelColor;
@property(retain, nonatomic) PKColor *foregroundColor; // @synthesize foregroundColor=_foregroundColor;
@property(retain, nonatomic) PKColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(nonatomic) long long passStyle; // @synthesize passStyle=_passStyle;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (long long)type;
@property(readonly, nonatomic) long long layoutMode;
@property(readonly, nonatomic) _Bool showsStripImage;
@property(readonly, nonatomic) _Bool showsBackgroundImage;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;

@end

@interface PKPassFrontFaceImageSet : PKPassImageSet
{
    PKImage *_faceImage;
    struct CGRect _logoRect;
    struct CGRect _thumbnailRect;
    struct CGRect _stripRect;
}

+ (_Bool)supportsSecureCoding;
+ (long long)currentVersion;
+ (id)archiveName;
+ (long long)imageSetType;
@property(nonatomic) struct CGRect stripRect; // @synthesize stripRect=_stripRect;
@property(nonatomic) struct CGRect thumbnailRect; // @synthesize thumbnailRect=_thumbnailRect;
@property(nonatomic) struct CGRect logoRect; // @synthesize logoRect=_logoRect;
@property(retain, nonatomic) PKImage *faceImage; // @synthesize faceImage=_faceImage;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)preheatImages;
- (void)dealloc;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKPassLibrary : NSObject <PKPassLibraryExportedInterface>
{
    NSXPCConnection *_connection;
    PKAsyncCache *_libraryCache;
    PKPassLibraryExportedProxy *_exportedProxy;
    id <PKPassLibraryDelegate> _delegate;
}

+ (void)_tearDownPassLibraryConnection:(id)arg1 exportedProxy:(id)arg2;
+ (_Bool)isPaymentPassActivationAvailable;
+ (_Bool)isPassLibraryAvailable;
@property(nonatomic) id <PKPassLibraryDelegate> delegate; // @synthesize delegate=_delegate;
- (CDUnknownBlockType)_errorHandlerWithCompletion:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)_errorHandlerWithSemaphore:(id)arg1;
- (void)_applyDataAccessorToObject:(id)arg1;
- (void)recomputeRelevantPassesWithSearchMode:(long long)arg1;
- (void)_applyDataAccessorToObjects:(id)arg1;
- (void)_getArchivedObjectWithUniqueID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_getPassWithUniqueID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_getPassesAndCatalog:(_Bool)arg1 withRetries:(unsigned long long)arg2 withHandler:(CDUnknownBlockType)arg3;
- (id)_passesOfType:(unsigned long long)arg1 withRetries:(unsigned long long)arg2;
- (id)_passesWithRetries:(unsigned long long)arg1;
- (void)_unregisterForApplicationLifeCycleNotifications;
- (void)_registerForApplicationLifeCycleNotifications;
- (void)_sendSuspended;
- (void)_sendResumed;
- (void)_establishPassLibraryConnection;
- (void)_tearDownPassLibraryConnection;
- (void)_postLibraryChangeWithUserInfo:(id)arg1;
- (void)passRemoved:(id)arg1;
- (void)passUpdated:(id)arg1;
- (void)passAdded:(id)arg1;
- (void)catalogChanged:(id)arg1 withNewPasses:(id)arg2;
- (id)diffForPassBulletinWithRecordID:(id)arg1;
- (void)noteAccountDeleted;
- (void)noteAccountChanged;
- (void)logDelayExitReasons;
- (void)shuffleGroups:(int)arg1;
- (void)removePassesOfType:(unsigned long long)arg1;
- (void)removePassWithUniqueID:(id)arg1;
- (void)introduceDatabaseIntegrityProblem;
- (void)addFakeBulletin;
- (void)nukeDatabaseAndExit;
- (void)sendPassbookUIServiceLaunched;
- (void)sendUserEditedCatalog:(id)arg1;
- (_Bool)migrateData;
- (_Bool)_isPaymentPassActivationAvailable;
- (void)fetchImageSetForUniqueID:(id)arg1 ofType:(long long)arg2 displayProfile:(id)arg3 withCompletion:(CDUnknownBlockType)arg4;
- (void)fetchContentForUniqueID:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)updateSettings:(long long)arg1 forObjectWithUniqueID:(id)arg2;
- (void)noteObjectSharedWithUniqueID:(id)arg1;
- (void)getContainmentStatusAndSettingsForPass:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)removePass:(id)arg1;
- (void)requestUpdateOfObjectWithUniqueID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)ingestPassData:(id)arg1 settings:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)activatePaymentPass:(id)arg1 withActivationData:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)activatePaymentPass:(id)arg1 withActivationCode:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addPasses:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)archiveForObjectWithUniqueID:(id)arg1;
- (_Bool)replacePassWithPass:(id)arg1;
- (_Bool)containsPass:(id)arg1;
- (void)getPassesAndCatalog:(_Bool)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)getRouteRelevantPassesFromLocation:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)hasInAppPaymentPassesForNetworks:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)inAppPaymentPassesForNetworks:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (_Bool)canAddPassOfType:(unsigned long long)arg1;
- (_Bool)hasPassesOfType:(unsigned long long)arg1;
- (id)passWithPassTypeIdentifier:(id)arg1 serialNumber:(id)arg2;
- (id)passWithUniqueID:(id)arg1;
- (id)passesOfType:(unsigned long long)arg1;
- (id)passes;
- (void)dealloc;
- (id)init;

@end

@interface PKPassLibraryExportedProxy : NSObject <PKPassLibraryExportedInterface>
{
    id <PKPassLibraryExportedInterface> _delegate;
}

@property(nonatomic) id <PKPassLibraryExportedInterface> delegate; // @synthesize delegate=_delegate;
- (void)passRemoved:(id)arg1;
- (void)passUpdated:(id)arg1;
- (void)passAdded:(id)arg1;
- (void)catalogChanged:(id)arg1 withNewPasses:(id)arg2;
- (id)initWithDelegate:(id)arg1;

@end

@interface PKPassLogoImageSet : PKPassImageSet
{
    PKImage *_logoImage;
    PKImage *_backgroundImage;
    PKImage *_stripImage;
    PKImage *_bankLogoImage;
    PKImage *_networkLogoImage;
    PKImage *_cobrandLogoImage;
    PKImage *_cardBackgroundImage;
    PKImage *_cardBackgroundCombinedImage;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)shouldCache;
+ (long long)imageSetType;
@property(retain, nonatomic) PKImage *cardBackgroundCombinedImage; // @synthesize cardBackgroundCombinedImage=_cardBackgroundCombinedImage;
@property(retain, nonatomic) PKImage *cardBackgroundImage; // @synthesize cardBackgroundImage=_cardBackgroundImage;
@property(retain, nonatomic) PKImage *cobrandLogoImage; // @synthesize cobrandLogoImage=_cobrandLogoImage;
@property(retain, nonatomic) PKImage *networkLogoImage; // @synthesize networkLogoImage=_networkLogoImage;
@property(retain, nonatomic) PKImage *bankLogoImage; // @synthesize bankLogoImage=_bankLogoImage;
@property(retain, nonatomic) PKImage *stripImage; // @synthesize stripImage=_stripImage;
@property(retain, nonatomic) PKImage *backgroundImage; // @synthesize backgroundImage=_backgroundImage;
@property(retain, nonatomic) PKImage *logoImage; // @synthesize logoImage=_logoImage;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)preheatImages;
- (void)dealloc;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKPassNumberField : PKPassField
{
    NSString *_currencyCode;
    long long _numberStyle;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long numberStyle; // @synthesize numberStyle=_numberStyle;
@property(copy, nonatomic) NSString *currencyCode; // @synthesize currencyCode=_currencyCode;
- (id)value;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPassPlaceHolderImageSet : PKPassImageSet
{
    PKImage *_placeHolderImage;
    struct CGRect _logoRect;
}

+ (_Bool)supportsSecureCoding;
+ (long long)currentVersion;
+ (id)archiveName;
+ (long long)imageSetType;
@property(nonatomic) struct CGRect logoRect; // @synthesize logoRect=_logoRect;
@property(retain, nonatomic) PKImage *placeHolderImage; // @synthesize placeHolderImage=_placeHolderImage;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)preheatImages;
- (void)dealloc;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKPassPreviewImageSet : PKPassImageSet
{
    PKImage *_iconImage;
}

+ (_Bool)supportsSecureCoding;
+ (long long)currentVersion;
+ (id)archiveName;
+ (long long)imageSetType;
@property(retain, nonatomic) PKImage *iconImage; // @synthesize iconImage=_iconImage;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)preheatImages;
- (void)dealloc;
- (id)initWithDisplayProfile:(id)arg1 fileURL:(id)arg2 screenScale:(double)arg3 suffix:(id)arg4;

@end

@interface PKPayment : NSObject <NSSecureCoding>
{
    PKPaymentToken *_token;
    void *_billingAddress;
    void *_shippingAddress;
    PKShippingMethod *_shippingMethod;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) PKShippingMethod *shippingMethod; // @synthesize shippingMethod=_shippingMethod;
@property(nonatomic) void *shippingAddress; // @synthesize shippingAddress=_shippingAddress;
@property(nonatomic) void *billingAddress; // @synthesize billingAddress=_billingAddress;
@property(retain, nonatomic) PKPaymentToken *token; // @synthesize token=_token;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithToken:(id)arg1;

@end

@interface PKPaymentApplication : NSObject <NSSecureCoding>
{
    _Bool _supportsContactlessPayment;
    _Bool _supportsInAppPayment;
    NSString *_dpanIdentifier;
    NSString *_dpanSuffix;
    NSString *_applicationIdentifier;
    NSString *_secureElementIdentifier;
    long long _state;
    long long _paymentNetworkIdentifier;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long paymentNetworkIdentifier; // @synthesize paymentNetworkIdentifier=_paymentNetworkIdentifier;
@property(nonatomic) _Bool supportsInAppPayment; // @synthesize supportsInAppPayment=_supportsInAppPayment;
@property(nonatomic) _Bool supportsContactlessPayment; // @synthesize supportsContactlessPayment=_supportsContactlessPayment;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *secureElementIdentifier; // @synthesize secureElementIdentifier=_secureElementIdentifier;
@property(copy, nonatomic) NSString *applicationIdentifier; // @synthesize applicationIdentifier=_applicationIdentifier;
@property(copy, nonatomic, setter=setDPANSuffix:) NSString *dpanSuffix; // @synthesize dpanSuffix=_dpanSuffix;
@property(copy, nonatomic, setter=setDPANIdentifier:) NSString *dpanIdentifier; // @synthesize dpanIdentifier=_dpanIdentifier;
@property(readonly, nonatomic) NSString *stateAsString;
- (id)description;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqualToPaymentApplication:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithPaymentApplicationDictionary:(id)arg1;

@end

@interface PKPaymentAuthorizationRequest : NSObject <NSSecureCoding>
{
    _Bool _didSetNonce;
    NSData *_credential;
    NSData *_nonceData;
    NSString *_passUniqueIdentifier;
    PKPaymentRequest *_paymentRequest;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) PKPaymentRequest *paymentRequest; // @synthesize paymentRequest=_paymentRequest;
@property(retain, nonatomic) NSString *passUniqueIdentifier; // @synthesize passUniqueIdentifier=_passUniqueIdentifier;
@property(retain, nonatomic) NSData *nonceData; // @synthesize nonceData=_nonceData;
@property(retain, nonatomic) NSData *credential; // @synthesize credential=_credential;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentBackgroundDownloadRecord : NSObject <NSSecureCoding>
{
    long long _taskType;
}

+ (id)taskWithType:(long long)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long taskType; // @synthesize taskType=_taskType;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentWebServiceRequest : NSObject
{
}

+ (id)_HTTPBodyWithDictionary:(id)arg1;
+ (id)requestWithServiceURL:(id)arg1 endpointComponents:(id)arg2 queryParameters:(id)arg3 account:(id)arg4;
+ (id)requestWithURL:(id)arg1 account:(id)arg2;
+ (id)authHeaderWithAccount:(id)arg1;

@end

@interface PKPaymentConfigurationRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1;

@end

@interface PKPaymentWebServiceResponse : NSObject
{
    id _JSONObject;
}

+ (id)responseWithData:(id)arg1;
@property(readonly, nonatomic) id JSONObject; // @synthesize JSONObject=_JSONObject;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentConfigurationResponse : PKPaymentWebServiceResponse
{
    NSData *_data;
    NSData *_signature;
    NSString *_version;
}

@property(readonly, nonatomic) NSString *version; // @synthesize version=_version;
@property(readonly, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentCredential : NSObject <NSSecureCoding>
{
    NSString *_sanitizedPrimaryAccountNumber;
    NSString *_primaryAccountNumber;
    NSString *_cardholderName;
    long long _credentialType;
    NSString *_cardSecurityCode;
    NSString *_expiration;
    NSURL *_iconURL;
    NSURL *_termsURL;
    NSString *_termsID;
    NSString *_identifier;
    NSString *_longDescription;
    NSURL *_passURL;
    long long _status;
    long long _eligibilityStatus;
}

+ (_Bool)supportsSecureCoding;
+ (id)credentialWithDictionary:(id)arg1;
@property(nonatomic) long long eligibilityStatus; // @synthesize eligibilityStatus=_eligibilityStatus;
@property(nonatomic) long long status; // @synthesize status=_status;
@property(copy, nonatomic) NSURL *passURL; // @synthesize passURL=_passURL;
@property(copy, nonatomic) NSString *longDescription; // @synthesize longDescription=_longDescription;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *termsID; // @synthesize termsID=_termsID;
@property(copy, nonatomic) NSURL *termsURL; // @synthesize termsURL=_termsURL;
@property(copy, nonatomic) NSURL *iconURL; // @synthesize iconURL=_iconURL;
@property(copy, nonatomic) NSString *expiration; // @synthesize expiration=_expiration;
@property(copy, nonatomic) NSString *cardSecurityCode; // @synthesize cardSecurityCode=_cardSecurityCode;
@property(nonatomic) long long credentialType; // @synthesize credentialType=_credentialType;
@property(copy, nonatomic) NSString *cardholderName; // @synthesize cardholderName=_cardholderName;
@property(copy, nonatomic) NSString *primaryAccountNumber; // @synthesize primaryAccountNumber=_primaryAccountNumber;
@property(copy, nonatomic) NSString *sanitizedPrimaryAccountNumber; // @synthesize sanitizedPrimaryAccountNumber=_sanitizedPrimaryAccountNumber;
@property(readonly, nonatomic) NSString *eligibilityStatusDescription;
@property(readonly, nonatomic) NSString *statusDescription;
@property(readonly, nonatomic) NSString *cardTypeDescription;
- (id)description;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)dictionary;
- (id)init;

@end

@interface PKPaymentCredentialEligibilityRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 credential:(id)arg3 account:(id)arg4 certChain:(id)arg5 devSigned:(_Bool)arg6;

@end

@interface PKPaymentCredentialsResponse : PKPaymentWebServiceResponse
{
    NSArray *_credentials;
}

@property(retain, nonatomic) NSArray *credentials; // @synthesize credentials=_credentials;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentDeleteRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 pass:(id)arg2 account:(id)arg3;

@end

@interface PKPaymentDeprovisionRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 pass:(id)arg3 account:(id)arg4;

@end

@interface PKPaymentDevice : NSObject <CLLocationManagerDelegate>
{
    CLLocationManager *_locationManager;
    NSTimer *_timer;
    PKPaymentDeviceProvisioningData *_provisioningData;
    NSObject<OS_dispatch_source> *_locationFixTimeout;
    NSMutableArray *_provisioningCompletions;
    _Bool _skipLocationCheck;
}

+ (id)clientInfoHTTPHeader;
@property(nonatomic) _Bool skipLocationCheck; // @synthesize skipLocationCheck=_skipLocationCheck;
- (void)_executeProvisioningCompletionHandlers;
- (void)_finishLocationFixWithLocation:(id)arg1;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
@property(readonly, nonatomic) _Bool hasDevelopmentSignedSE;
- (void)provisioningDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)configurationDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)rewrapDataWithDeviceIdentifier:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)queueConnectionToTrustedServiceManagerWithCompletion:(CDUnknownBlockType)arg1;
- (void)queueConnectionToTrustedServiceManager;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKPaymentDeviceConfigurationData : NSObject <NSSecureCoding>
{
    _Bool _devSigned;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool devSigned; // @synthesize devSigned=_devSigned;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentDevicePassesRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 updatedSinceTag:(id)arg3 account:(id)arg4;

@end

@interface PKPaymentDeviceProvisioningData : NSObject <NSSecureCoding>
{
    NSString *_deviceName;
    NSString *_phoneNumberSuffix;
    NSString *_sanitizedLatitude;
    NSString *_sanitizedLongitude;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *sanitizedLongitude; // @synthesize sanitizedLongitude=_sanitizedLongitude;
@property(copy, nonatomic) NSString *sanitizedLatitude; // @synthesize sanitizedLatitude=_sanitizedLatitude;
@property(copy, nonatomic) NSString *phoneNumberSuffix; // @synthesize phoneNumberSuffix=_phoneNumberSuffix;
@property(copy, nonatomic) NSString *deviceName; // @synthesize deviceName=_deviceName;
- (void)setLocation:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentDeviceRewrapData : NSObject <NSSecureCoding>
{
    NSString *_deviceIdentifier;
    NSString *_CASDECCCertificate;
    NSString *_CASDRSACertificate;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *CASDRSACertificate; // @synthesize CASDRSACertificate=_CASDRSACertificate;
@property(copy, nonatomic) NSString *CASDECCCertificate; // @synthesize CASDECCCertificate=_CASDECCCertificate;
@property(copy, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentForbiddenResponse : PKPaymentWebServiceResponse
{
    NSNumber *_errorCode;
    NSString *_localizedTitle;
    NSString *_localizedDescription;
}

@property(retain, nonatomic) NSString *localizedDescription; // @synthesize localizedDescription=_localizedDescription;
@property(retain, nonatomic) NSString *localizedTitle; // @synthesize localizedTitle=_localizedTitle;
@property(retain, nonatomic) NSNumber *errorCode; // @synthesize errorCode=_errorCode;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentMerchantData : NSObject
{
    NSString *_merchantIdentifier;
    NSData *_applicationData;
}

@property(retain, nonatomic) NSData *applicationData; // @synthesize applicationData=_applicationData;
@property(retain, nonatomic) NSString *merchantIdentifier; // @synthesize merchantIdentifier=_merchantIdentifier;
- (id)encode;
- (void)dealloc;

@end

@interface PKPaymentMessage : NSObject <NSSecureCoding>
{
    _Bool _expiresOnNextTransaction;
    _Bool _allowDeepLink;
    NSString *_identifier;
    NSString *_content;
    NSDate *_messageDate;
    NSDate *_expirationDate;
}

+ (_Bool)supportsSecureCoding;
+ (id)paymentMessageWithDictionary:(id)arg1;
@property(nonatomic) _Bool allowDeepLink; // @synthesize allowDeepLink=_allowDeepLink;
@property(nonatomic) _Bool expiresOnNextTransaction; // @synthesize expiresOnNextTransaction=_expiresOnNextTransaction;
@property(copy, nonatomic) NSDate *expirationDate; // @synthesize expirationDate=_expirationDate;
@property(copy, nonatomic) NSDate *messageDate; // @synthesize messageDate=_messageDate;
@property(copy, nonatomic) NSString *content; // @synthesize content=_content;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqualToPaymentMessage:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;

@end

@interface PKPaymentNonceRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 pass:(id)arg3 account:(id)arg4;

@end

@interface PKPaymentNonceResponse : PKPaymentWebServiceResponse
{
    NSData *_nonceData;
}

@property(retain, nonatomic) NSData *nonceData; // @synthesize nonceData=_nonceData;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentPass : PKPass <NSCopying, NSSecureCoding>
{
    _Bool _supportsDPANNotifications;
    _Bool _supportsFPANNotifications;
    NSString *_primaryAccountIdentifier;
    NSString *_primaryAccountNumberSuffix;
    NSSet *_associatedApplicationIdentifiers;
    NSURL *_transactionServiceURL;
    NSString *_transactionPushTopic;
    NSURL *_messageServiceURL;
    NSString *_messagePushTopic;
    NSSet *_paymentApplications;
    NSString *_appURLScheme;
    PKPaymentApplication *_devicePaymentApplication;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) PKPaymentApplication *devicePaymentApplication; // @synthesize devicePaymentApplication=_devicePaymentApplication;
@property(nonatomic) _Bool supportsFPANNotifications; // @synthesize supportsFPANNotifications=_supportsFPANNotifications;
@property(nonatomic) _Bool supportsDPANNotifications; // @synthesize supportsDPANNotifications=_supportsDPANNotifications;
@property(copy, nonatomic) NSString *appURLScheme; // @synthesize appURLScheme=_appURLScheme;
@property(copy, nonatomic) NSSet *paymentApplications; // @synthesize paymentApplications=_paymentApplications;
@property(copy, nonatomic) NSString *messagePushTopic; // @synthesize messagePushTopic=_messagePushTopic;
@property(copy, nonatomic) NSURL *messageServiceURL; // @synthesize messageServiceURL=_messageServiceURL;
@property(copy, nonatomic) NSString *transactionPushTopic; // @synthesize transactionPushTopic=_transactionPushTopic;
@property(copy, nonatomic) NSURL *transactionServiceURL; // @synthesize transactionServiceURL=_transactionServiceURL;
@property(copy, nonatomic) NSSet *associatedApplicationIdentifiers; // @synthesize associatedApplicationIdentifiers=_associatedApplicationIdentifiers;
@property(copy, nonatomic) NSString *primaryAccountNumberSuffix; // @synthesize primaryAccountNumberSuffix=_primaryAccountNumberSuffix;
@property(copy, nonatomic) NSString *primaryAccountIdentifier; // @synthesize primaryAccountIdentifier=_primaryAccountIdentifier;
- (void)identifyDevicePaymentAppWithSecureElementID:(id)arg1 sanitize:(_Bool)arg2;
@property(readonly, nonatomic) unsigned long long activationState;
@property(readonly) NSString *deviceAccountNumberSuffix;
@property(readonly) NSString *deviceAccountIdentifier;
- (id)paymentApplicationForAID:(id)arg1;
- (id)paymentApplicationForSecureElementID:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;

@end

@interface PKPaymentPassContent : PKPassContent <NSSecureCoding>
{
    _Bool _supportsDPANNotifications;
    _Bool _supportsFPANNotifications;
    NSURL *_transactionServiceURL;
    NSString *_transactionPushTopic;
    NSURL *_messageServiceURL;
    NSString *_messagePushTopic;
    NSString *_appURLScheme;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool supportsFPANNotifications; // @synthesize supportsFPANNotifications=_supportsFPANNotifications;
@property(nonatomic) _Bool supportsDPANNotifications; // @synthesize supportsDPANNotifications=_supportsDPANNotifications;
@property(copy, nonatomic) NSString *appURLScheme; // @synthesize appURLScheme=_appURLScheme;
@property(copy, nonatomic) NSString *messagePushTopic; // @synthesize messagePushTopic=_messagePushTopic;
@property(copy, nonatomic) NSURL *messageServiceURL; // @synthesize messageServiceURL=_messageServiceURL;
@property(copy, nonatomic) NSString *transactionPushTopic; // @synthesize transactionPushTopic=_transactionPushTopic;
@property(copy, nonatomic) NSURL *transactionServiceURL; // @synthesize transactionServiceURL=_transactionServiceURL;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 bundle:(id)arg2;

@end

@interface PKPaymentPassRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 passTypeID:(id)arg2 serialNumber:(id)arg3 account:(id)arg4;

@end

@interface PKPaymentPassesResponse : PKPaymentWebServiceResponse
{
    NSArray *_passURLs;
    NSString *_updatedSinceTag;
    NSString *_lastUpdatedTag;
}

@property(retain, nonatomic) NSString *lastUpdatedTag; // @synthesize lastUpdatedTag=_lastUpdatedTag;
@property(readonly, nonatomic) NSString *updatedSinceTag; // @synthesize updatedSinceTag=_updatedSinceTag;
@property(retain, nonatomic) NSArray *passURLs; // @synthesize passURLs=_passURLs;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentProvisionCredentialRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 deviceData:(id)arg3 credential:(id)arg4 account:(id)arg5;

@end

@interface PKPaymentProvisioningResponse : PKPaymentWebServiceResponse
{
    NSURL *_passURL;
}

@property(retain, nonatomic) NSURL *passURL; // @synthesize passURL=_passURL;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentRegistrationRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceData:(id)arg2 pushToken:(id)arg3 consistencyData:(id)arg4 account:(id)arg5;

@end

@interface PKPaymentRegistrationResponse : PKPaymentWebServiceResponse
{
    NSString *_deviceIdentifier;
    NSArray *_certificates;
    NSNumber *_cardsOnFile;
    NSURL *_brokerURL;
    NSURL *_trustedServiceManagerURL;
    NSURL *_paymentServicesURL;
    NSNumber *_maxCards;
}

@property(retain, nonatomic) NSNumber *maxCards; // @synthesize maxCards=_maxCards;
@property(retain, nonatomic) NSURL *paymentServicesURL; // @synthesize paymentServicesURL=_paymentServicesURL;
@property(retain, nonatomic) NSURL *trustedServiceManagerURL; // @synthesize trustedServiceManagerURL=_trustedServiceManagerURL;
@property(retain, nonatomic) NSURL *brokerURL; // @synthesize brokerURL=_brokerURL;
@property(retain, nonatomic) NSNumber *cardsOnFile; // @synthesize cardsOnFile=_cardsOnFile;
@property(retain, nonatomic) NSArray *certificates; // @synthesize certificates=_certificates;
@property(retain, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentRegistrationUtilities : NSObject
{
}

+ (void)_checkCredential:(id)arg1 withWebService:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)_retrieveRemoteCredentialsWithWebService:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (void)registerAndRetrieveCardsWithWebService:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (void)registrationIsSupportedInCurrentRegionWithWebService:(id)arg1 completion:(CDUnknownBlockType)arg2;

@end

@interface PKPaymentRemoteAssetDownloadRecord : PKPaymentBackgroundDownloadRecord <NSSecureCoding>
{
    NSURL *_passURL;
    NSDictionary *_remoteAssetsByTaskIdentifier;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSDictionary *remoteAssetsByTaskIdentifier; // @synthesize remoteAssetsByTaskIdentifier=_remoteAssetsByTaskIdentifier;
@property(retain, nonatomic) NSURL *passURL; // @synthesize passURL=_passURL;
- (void)removeRemoteAssetForTaskIdentifier:(id)arg1;
- (void)setRemoteAsset:(id)arg1 forTaskIdentifier:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface PKPaymentRemoteCredentialEligibilityRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 credential:(id)arg3 account:(id)arg4 certChain:(id)arg5 devSigned:(_Bool)arg6;

@end

@interface PKPaymentRemoteCredentialsRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 account:(id)arg3;

@end

@interface PKPaymentRequest : NSObject <NSSecureCoding>
{
    NSString *_merchantIdentifier;
    NSString *_countryCode;
    NSArray *_supportedNetworks;
    unsigned long long _merchantCapabilities;
    NSArray *_paymentSummaryItems;
    NSString *_currencyCode;
    unsigned long long _requiredBillingAddressFields;
    void *_billingAddress;
    unsigned long long _requiredShippingAddressFields;
    void *_shippingAddress;
    NSArray *_shippingMethods;
    NSData *_applicationData;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSData *applicationData; // @synthesize applicationData=_applicationData;
@property(copy, nonatomic) NSArray *shippingMethods; // @synthesize shippingMethods=_shippingMethods;
@property(nonatomic) void *shippingAddress; // @synthesize shippingAddress=_shippingAddress;
@property(nonatomic) unsigned long long requiredShippingAddressFields; // @synthesize requiredShippingAddressFields=_requiredShippingAddressFields;
@property(nonatomic) void *billingAddress; // @synthesize billingAddress=_billingAddress;
@property(nonatomic) unsigned long long requiredBillingAddressFields; // @synthesize requiredBillingAddressFields=_requiredBillingAddressFields;
@property(copy, nonatomic) NSString *currencyCode; // @synthesize currencyCode=_currencyCode;
@property(copy, nonatomic) NSArray *paymentSummaryItems; // @synthesize paymentSummaryItems=_paymentSummaryItems;
@property(nonatomic) unsigned long long merchantCapabilities; // @synthesize merchantCapabilities=_merchantCapabilities;
@property(copy, nonatomic) NSArray *supportedNetworks; // @synthesize supportedNetworks=_supportedNetworks;
@property(copy, nonatomic) NSString *countryCode; // @synthesize countryCode=_countryCode;
@property(copy, nonatomic) NSString *merchantIdentifier; // @synthesize merchantIdentifier=_merchantIdentifier;
- (id)_transactionAmount;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentRequestValidator : NSObject <PKPaymentValidating>
{
    PKPaymentRequest *_request;
}

+ (Class)validatedClass;
+ (id)validatorWithObject:(id)arg1;
- (_Bool)isValidWithError:(id *)arg1;
- (_Bool)_checkTotal:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)initWithPaymentRequest:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKPaymentRewrapRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceData:(id)arg2 paymentData:(id)arg3 pass:(id)arg4 merchantIdentifier:(id)arg5 applicationData:(id)arg6 account:(id)arg7;

@end

@interface PKPaymentRewrapResponse : PKPaymentWebServiceResponse
{
    NSData *_rewrappedPaymentData;
}

@property(retain, nonatomic) NSData *rewrappedPaymentData; // @synthesize rewrappedPaymentData=_rewrappedPaymentData;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentService : NSObject <PKPaymentServiceExportedInterface>
{
    NSXPCConnection *_connection;
    NSLock *_connectionLock;
    PKPaymentServiceExportedProxy *_exportedProxy;
    id <PKPaymentServiceDelegate> _delegate;
}

+ (void)_tearDownPaymentServiceConnection:(id)arg1 exportedProxy:(id)arg2;
+ (_Bool)paymentServiceIsAvailable;
@property(nonatomic) id <PKPaymentServiceDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_unregisterForPaymentServiceNotifications;
- (void)_registerForPaymentServiceNotifications;
- (void)_unregisterForApplicationLifeCycleNotifications;
- (void)_registerForApplicationLifeCycleNotifications;
- (void)_sendSuspended;
- (void)_sendResumed;
- (id)_connectionWithTeardownExisting:(_Bool)arg1 createNewIfNecessary:(_Bool)arg2;
- (id)_connection;
- (void)_establishPaymentServiceConnection;
- (void)_tearDownPaymentServiceConnection;
- (CDUnknownBlockType)_errorHandlerWithCompletion:(CDUnknownBlockType)arg1;
- (void)_sharedPaymentWebServiceWithCompletion:(CDUnknownBlockType)arg1;
- (void)_defaultPaymentPassUniqueIdentifier:(CDUnknownBlockType)arg1;
- (void)_secureElementIdentifierWithCompletion:(CDUnknownBlockType)arg1;
- (void)_paymentDeviceIsInRestrictedModeWithCompletion:(CDUnknownBlockType)arg1;
- (void)_paymentDeviceIsInFieldWithCompletion:(CDUnknownBlockType)arg1;
- (void)_paymentDeviceIsAvailableWithCompletion:(CDUnknownBlockType)arg1;
- (void)_markAllPaymentApplicationsForDeleteWithCompletion:(CDUnknownBlockType)arg1;
- (void)_deleteAllMessagesForPaymentPassWithUniqueIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_activationStateForPaymentPassWithUniqueIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(retain, nonatomic) PKPaymentWebService *sharedPaymentWebService;
@property(retain, nonatomic) NSString *defaultPaymentPassUniqueIdentifier;
@property(readonly, nonatomic) NSString *secureElementIdentifier;
@property(readonly, nonatomic) _Bool paymentDeviceIsInRestrictedMode;
@property(readonly, nonatomic) _Bool paymentDeviceIsAvailable;
@property(readonly, nonatomic) _Bool paymentDeviceIsInField;
- (void)setNewAuthRandomIfNecessaryWithCompletion:(CDUnknownBlockType)arg1;
- (void)setNewAuthRandom;
- (void)consistencyCheck;
- (void)simulatePaymentPush;
- (void)markAllPaymentApplicationsForDelete;
- (void)presentPaymentInterfaceWithCompletion:(CDUnknownBlockType)arg1;
- (void)deleteAllMessagesForPaymentPassWithUniqueIdentifier:(id)arg1;
- (void)messageForPaymentPassWithUniqueIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)transactionsForPaymentPassWithUniqueIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)submitVerificationCode:(id)arg1 verificationData:(id)arg2 forDPANIdentifier:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)submitVerificationCode:(id)arg1 verificationData:(id)arg2 forDPANIdentifier:(id)arg3;
- (void)removePaymentDeviceContactlessInterfaceRestrictionOverride:(id)arg1;
- (void)addPaymentDeviceContactlessInterfaceRestrictionOverride:(id)arg1;
- (void)authorizeInAppPaymentRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deauthorizePaymentPassWithUniqueIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)authorizePaymentPassWithUniqueIdentifier:(id)arg1 authenticationCredential:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)activatePaymentPassWithUniqueIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (long long)activationStateForPaymentPassWithUniqueIdentifier:(id)arg1;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didEnableTransactionService:(_Bool)arg2;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didEnableMessageService:(_Bool)arg2;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didReceiveTransaction:(id)arg2;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didReceiveMessage:(id)arg2;
- (void)paymentPassWithUniqueIdentifierDidFailTransaction:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidCompleteTransaction:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidBeginTransaction:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidDeauthorize:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidAuthorize:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidActivate:(id)arg1;
- (void)paymentDeviceDidLeaveRestrictedMode;
- (void)paymentDeviceDidEnterRestrictedMode;
- (void)paymentDeviceDidBecomeUnavailable;
- (void)paymentDeviceDidBecomeAvailable;
- (void)paymentDeviceDidLeaveField;
- (void)paymentDeviceDidEnterField;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;
- (id)init;

@end

@interface PKPaymentServiceExportedProxy : NSObject <PKPaymentServiceExportedInterface>
{
    id <PKPaymentServiceExportedInterface> _delegate;
}

@property(nonatomic) id <PKPaymentServiceExportedInterface> delegate; // @synthesize delegate=_delegate;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didEnableTransactionService:(_Bool)arg2;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didEnableMessageService:(_Bool)arg2;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didReceiveTransaction:(id)arg2;
- (void)paymentPassWithUniqueIdentifier:(id)arg1 didReceiveMessage:(id)arg2;
- (void)paymentPassWithUniqueIdentifierDidFailTransaction:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidCompleteTransaction:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidBeginTransaction:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidDeauthorize:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidAuthorize:(id)arg1;
- (void)paymentPassWithUniqueIdentifierDidActivate:(id)arg1;
- (void)paymentDeviceDidLeaveRestrictedMode;
- (void)paymentDeviceDidEnterRestrictedMode;
- (void)paymentDeviceDidBecomeUnavailable;
- (void)paymentDeviceDidBecomeAvailable;
- (void)paymentDeviceDidLeaveField;
- (void)paymentDeviceDidEnterField;
- (id)initWithDelegate:(id)arg1;

@end

@interface PKPaymentSubmitVerificationRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 pass:(id)arg3 verificationCode:(id)arg4 verificationData:(id)arg5 account:(id)arg6;

@end

@interface PKPaymentSummaryItem : NSObject <NSCopying, NSSecureCoding>
{
    NSString *_label;
    NSDecimalNumber *_amount;
}

+ (_Bool)supportsSecureCoding;
+ (id)summaryItemWithLabel:(id)arg1 amount:(id)arg2;
@property(copy, nonatomic) NSDecimalNumber *amount; // @synthesize amount=_amount;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
- (_Bool)isEqualToPaymentSummaryItem:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface PKPaymentSummaryItemValidator : NSObject <PKPaymentValidating>
{
    PKPaymentSummaryItem *_item;
}

+ (Class)validatedClass;
+ (id)validatorWithObject:(id)arg1;
@property(readonly, nonatomic) PKPaymentSummaryItem *item; // @synthesize item=_item;
- (_Bool)isValidWithError:(id *)arg1;
- (void)dealloc;
- (id)initWithPaymentSummaryItem:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKPaymentToken : NSObject <NSSecureCoding>
{
    NSString *_paymentInstrumentName;
    NSString *_paymentNetwork;
    NSString *_transactionIdentifier;
    NSData *_paymentData;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSData *paymentData; // @synthesize paymentData=_paymentData;
@property(copy, nonatomic) NSString *transactionIdentifier; // @synthesize transactionIdentifier=_transactionIdentifier;
@property(copy, nonatomic) NSString *paymentNetwork; // @synthesize paymentNetwork=_paymentNetwork;
@property(copy, nonatomic) NSString *paymentInstrumentName; // @synthesize paymentInstrumentName=_paymentInstrumentName;
- (id)description;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKPaymentTransaction : NSObject <NSSecureCoding>
{
    NSString *_identifier;
    NSString *_transactionIdentifier;
    NSDecimalNumber *_amount;
    NSString *_currencyCode;
    NSDate *_transactionDate;
    PKMerchant *_merchant;
    NSString *_locality;
    NSString *_sublocality;
    NSString *_administrativeArea;
    double _locationLatitude;
    double _locationLongitude;
    long long _transactionStatus;
    long long _transactionType;
    long long _technologyType;
    unsigned long long _transactionSources;
}

+ (_Bool)supportsSecureCoding;
+ (id)paymentTransactionFromSource:(unsigned long long)arg1 withDictionary:(id)arg2;
+ (id)paymentTransactionFromSource:(unsigned long long)arg1;
@property(nonatomic) unsigned long long transactionSources; // @synthesize transactionSources=_transactionSources;
@property(nonatomic) long long technologyType; // @synthesize technologyType=_technologyType;
@property(nonatomic) long long transactionType; // @synthesize transactionType=_transactionType;
@property(nonatomic) long long transactionStatus; // @synthesize transactionStatus=_transactionStatus;
@property(nonatomic) double locationLongitude; // @synthesize locationLongitude=_locationLongitude;
@property(nonatomic) double locationLatitude; // @synthesize locationLatitude=_locationLatitude;
@property(retain, nonatomic) NSString *administrativeArea; // @synthesize administrativeArea=_administrativeArea;
@property(retain, nonatomic) NSString *sublocality; // @synthesize sublocality=_sublocality;
@property(retain, nonatomic) NSString *locality; // @synthesize locality=_locality;
@property(retain, nonatomic) PKMerchant *merchant; // @synthesize merchant=_merchant;
@property(copy, nonatomic) NSDate *transactionDate; // @synthesize transactionDate=_transactionDate;
@property(copy, nonatomic) NSString *currencyCode; // @synthesize currencyCode=_currencyCode;
@property(copy, nonatomic) NSDecimalNumber *amount; // @synthesize amount=_amount;
@property(copy, nonatomic) NSString *transactionIdentifier; // @synthesize transactionIdentifier=_transactionIdentifier;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (id)description;
@property(retain, nonatomic) CLLocation *location;
@property(readonly, nonatomic) NSString *displayLocation;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqualToPaymentTransaction:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;

@end

@interface PKPaymentUnregisterRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 account:(id)arg3;

@end

@interface PKPaymentUserPassesRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 account:(id)arg2;

@end

@interface PKPaymentVerificationChannelsRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 pass:(id)arg3 account:(id)arg4;

@end

@interface PKPaymentVerificationChannelsResponse : PKPaymentWebServiceResponse
{
    NSArray *_verificationChannels;
}

@property(retain, nonatomic) NSArray *verificationChannels; // @synthesize verificationChannels=_verificationChannels;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface PKPaymentVerificationRequest : PKPaymentWebServiceRequest
{
}

+ (id)requestWithServiceURL:(id)arg1 deviceIdentifier:(id)arg2 pass:(id)arg3 channel:(id)arg4 account:(id)arg5;

@end

@interface PKPaymentWebService : NSObject <NSURLSessionDelegate, NSURLSessionDownloadDelegate, NSSecureCoding>
{
    NSURLSession *_urlSession;
    ACAccountStore *_accountStore;
    PKPaymentDevice *_paymentDevice;
    NSMutableDictionary *_passesByLocalURL;
    NSDictionary *_backgroundTasksByTaskIdentifier;
    NSOperationQueue *_delegateOperationQueue;
    _Bool _devSigned;
    _Bool _transactionServiceSupported;
    _Bool _messageServiceSupported;
    _Bool _sharedService;
    NSString *_deviceID;
    NSString *_secureElementID;
    NSDate *_registrationDate;
    long long _consistencyCheckBackoffLevel;
    NSArray *_certificates;
    NSString *_lastUpdatedTag;
    NSURL *_brokerURL;
    NSURL *_paymentServicesURL;
    NSString *_pushToken;
    NSDictionary *_verificationRequestsByPassUniqueID;
    NSDate *_configurationDate;
    id <PKPaymentProvisioningServiceDelegate> _delegate;
    id <PKPaymentBackgroundProvisioningServiceDelegate> _backgroundDelegate;
    unsigned long long _maxCards;
}

+ (id)_sharedCookieStorage;
+ (_Bool)supportsSecureCoding;
+ (id)serviceWithArchive:(id)arg1;
+ (id)sharedService;
@property(retain, nonatomic) NSDictionary *backgroundTasksByTaskIdentifier; // @synthesize backgroundTasksByTaskIdentifier=_backgroundTasksByTaskIdentifier;
@property(nonatomic) unsigned long long maxCards; // @synthesize maxCards=_maxCards;
@property(nonatomic) _Bool sharedService; // @synthesize sharedService=_sharedService;
@property(nonatomic) id <PKPaymentBackgroundProvisioningServiceDelegate> backgroundDelegate; // @synthesize backgroundDelegate=_backgroundDelegate;
@property(nonatomic) id <PKPaymentProvisioningServiceDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy, nonatomic) NSDate *configurationDate; // @synthesize configurationDate=_configurationDate;
@property(nonatomic) _Bool messageServiceSupported; // @synthesize messageServiceSupported=_messageServiceSupported;
@property(nonatomic) _Bool transactionServiceSupported; // @synthesize transactionServiceSupported=_transactionServiceSupported;
@property(copy, nonatomic) NSDictionary *verificationRequestsByPassUniqueID; // @synthesize verificationRequestsByPassUniqueID=_verificationRequestsByPassUniqueID;
@property(nonatomic) _Bool devSigned; // @synthesize devSigned=_devSigned;
@property(copy, nonatomic) NSString *pushToken; // @synthesize pushToken=_pushToken;
@property(copy, nonatomic) NSURL *paymentServicesURL; // @synthesize paymentServicesURL=_paymentServicesURL;
@property(copy, nonatomic) NSURL *brokerURL; // @synthesize brokerURL=_brokerURL;
@property(copy, nonatomic) NSString *lastUpdatedTag; // @synthesize lastUpdatedTag=_lastUpdatedTag;
@property(copy, nonatomic) NSArray *certificates; // @synthesize certificates=_certificates;
@property(nonatomic) long long consistencyCheckBackoffLevel; // @synthesize consistencyCheckBackoffLevel=_consistencyCheckBackoffLevel;
@property(copy, nonatomic) NSDate *registrationDate; // @synthesize registrationDate=_registrationDate;
@property(copy, nonatomic) NSString *secureElementID; // @synthesize secureElementID=_secureElementID;
@property(copy, nonatomic) NSString *deviceID; // @synthesize deviceID=_deviceID;
- (void)_archive;
- (void)_replaceBackgroundTaskWithIdentifier:(long long)arg1 withTask:(id)arg2;
- (void)_removeBackgroundTaskIdentifier:(long long)arg1;
- (void)_setBackgroundTask:(id)arg1 forTaskIdentifier:(long long)arg2;
- (void)_cleanupPassDownloadCache;
- (id)_downloadCacheLocation;
- (id)_movePassToDownloadCache:(id)arg1;
- (id)_paymentDevice;
@property(readonly, nonatomic) ACAccount *account;
- (id)_accountStore;
- (id)_errorUserInfoWithErrorCode:(long long)arg1;
- (id)_errorUserInfoWithData:(id)arg1;
- (id)_errorWithResult:(int)arg1 data:(id)arg2;
- (int)_resultForUnexpectedStatusCode:(long long)arg1;
- (int)_resultForResponse:(id)arg1 error:(id)arg2 successHandler:(CDUnknownBlockType)arg3;
- (void)_passWithData:(id)arg1 response:(id)arg2 error:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_downloadPassAtURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_deviceProvisioningDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)_deviceRegistrationDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)_deviceConfigurationDataWithCompletion:(CDUnknownBlockType)arg1;
- (id)_downloadPassesWithURLs:(id)arg1;
- (void)_handleRetryAfterRegisterWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_handleRetryAfterTSMSyncWithRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_handleAuthenticationFailureWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_handlePassDownloadTask:(id)arg1 data:(id)arg2;
- (void)_handlePassListDownloadTask:(id)arg1 data:(id)arg2;
- (void)_handleRemoteAssetDownloadTask:(id)arg1 data:(id)arg2;
- (id)_passWithFileURL:(id)arg1;
- (void)_performRequest:(id)arg1 retries:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_performRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (_Bool)_canBypassTrustExtendedValidation;
- (_Bool)_trustPassesExtendedValidation:(struct __SecTrust *)arg1;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)rewrapInAppPayment:(id)arg1 merchantIdentifier:(id)arg2 applicationData:(id)arg3 pass:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)inAppPaymentNonceForPass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deletePass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deprovisionPass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)backgroundDownloadWithPassTypeIdentifier:(id)arg1 serialNumber:(id)arg2;
- (void)passWithPassTypeIdentifier:(id)arg1 serialNumber:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)backgroundDownloadRemotePassAssets:(id)arg1 screenScale:(double)arg2 suffix:(id)arg3;
- (void)backgroundDownloadRemotePassAssets:(id)arg1;
- (void)backgroundDownloadPassAtURL:(id)arg1;
- (void)passAtURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)userPassesWithCompletion:(CDUnknownBlockType)arg1;
- (void)backgroundDownloadDevicePassesSinceLastUpdatedTag:(_Bool)arg1;
- (void)devicePassesSinceLastUpdatedTag:(_Bool)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)submitVerificationCode:(id)arg1 verificationData:(id)arg2 forPass:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)requestVerificationCodeForPass:(id)arg1 usingChannel:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_fakeVerificationChannelsWithRealChannels:(id)arg1;
- (void)verificationChannelsForPass:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_provisionCredential:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)provisionCredential:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)eligibilityForPaymentCredential:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)remotePaymentCredentialsWithCompletion:(CDUnknownBlockType)arg1;
- (void)unregisterDeviceWithCompletion:(CDUnknownBlockType)arg1;
- (void)registerDeviceWithConsistencyData:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)registerDeviceWithCompletion:(CDUnknownBlockType)arg1;
- (void)configurePaymentServiceWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSURLSessionConfiguration *sessionConfiguration;
- (void)startBackgroundURLSessionWithIdentifier:(id)arg1 backgroundDelegate:(id)arg2;
- (void)sharedServiceDidRegister;
@property(readonly, nonatomic) _Bool needsConfiguration;
@property(readonly, nonatomic) _Bool needsRegistration;
@property(readonly, nonatomic) int paymentSetupSupportedInRegion;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (void)archiveAtPath:(id)arg1;
- (id)initWithDelegate:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKRemoteAssetManager : NSObject
{
    NSURL *_directoryURL;
    NSURLSession *_urlSession;
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableDictionary *_manifestItemsByRelativeURL;
}

- (void)_flushBundleCaches;
- (void)cancelDownloads;
- (void)downloadRemoteAssetsWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)addRemoteAssetData:(id)arg1 forManifestItem:(id)arg2 error:(id *)arg3;
- (void)downloadRemoteAssetsWithScreenScale:(double)arg1 suffix:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)assetExistsLocally:(id)arg1;
- (id)itemWithRelativePath:(id)arg1;
- (id)deviceSpecificItemsForScreenScale:(double)arg1 suffix:(id)arg2;
- (id)deviceSpecificItems;
- (id)remoteAssetManifests;
- (void)dealloc;
- (id)initWithFileURL:(id)arg1 queue:(id)arg2;

@end

@interface PKRemoteAssetManifest : NSObject
{
    NSURL *_fileURL;
    NSMutableDictionary *_remoteAssets;
    NSString *_name;
}

@property(readonly, nonatomic) NSDictionary *remoteAssets; // @synthesize remoteAssets=_remoteAssets;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void)dealloc;
- (id)deviceSpecificAsset;
- (id)deviceSpecificAssetForScreenScale:(double)arg1 suffix:(id)arg2;
- (id)initWithFileURL:(id)arg1 passURL:(id)arg2 error:(id *)arg3;

@end

@interface PKRemoteAssetManifestItem : NSObject <NSSecureCoding>
{
    NSURL *_localURL;
    NSURL *_remoteURL;
    NSURL *_passURL;
    NSString *_sha1Hex;
    NSNumber *_size;
}

+ (id)itemWithLocalURL:(id)arg1 passURL:(id)arg2 dictionary:(id)arg3 error:(id *)arg4;
+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSNumber *size; // @synthesize size=_size;
@property(copy, nonatomic) NSString *sha1Hex; // @synthesize sha1Hex=_sha1Hex;
@property(copy, nonatomic) NSURL *passURL; // @synthesize passURL=_passURL;
@property(copy, nonatomic) NSURL *remoteURL; // @synthesize remoteURL=_remoteURL;
@property(copy, nonatomic) NSURL *localURL; // @synthesize localURL=_localURL;
- (void)dealloc;
@property(readonly, nonatomic) NSString *relativeLocalPath;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithLocalURL:(id)arg1 passURL:(id)arg2 dictionary:(id)arg3 error:(id *)arg4;

@end

@interface PKRemoteDataAccessor : PKDataAccessor
{
    PKPassLibrary *_library;
    NSString *_objectUniqueID;
}

@property(readonly, retain, nonatomic) NSString *objectUniqueID; // @synthesize objectUniqueID=_objectUniqueID;
@property(readonly, retain, nonatomic) PKPassLibrary *library; // @synthesize library=_library;
- (id)displayProfileOfType:(long long)arg1;
- (id)archiveData;
- (void)imageSetForType:(long long)arg1 screenScale:(double)arg2 suffix:(id)arg3 displayProfile:(id)arg4 preheat:(_Bool)arg5 withCompletion:(CDUnknownBlockType)arg6;
- (void)contentWithCompletion:(CDUnknownBlockType)arg1;
- (void)requestUpdateWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateSettings:(long long)arg1;
- (void)noteShared;
- (void)revocationStatusWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithLibrary:(id)arg1 objectUniqueID:(id)arg2;

@end

@interface PKSecureElementConsistencyChecker : NSObject
{
    NSObject<OS_dispatch_queue> *_processingQueue;
    id <PKSecureElementConsistencyCheckerDelegate> _delegate;
    PKPaymentWebService *_paymentWebService;
}

@property(retain, nonatomic) PKPaymentWebService *paymentWebService; // @synthesize paymentWebService=_paymentWebService;
@property(nonatomic) id <PKSecureElementConsistencyCheckerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_rescheduleWithBackoff;
- (_Bool)_downloadPasses;
- (void)queue_checkConsistencyWithPaymentApplications:(id)arg1 secureElementCards:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)startWithCompletion:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithPaymentWebService:(id)arg1 delegate:(id)arg2;

@end

@interface PKSecureElementConsistencyData : NSObject
{
    unsigned long long _backoffLevel;
    NSDictionary *_secureElementCardStateByAID;
    NSDictionary *_passStateByAID;
    NSDictionary *_cleanupActionsByAID;
}

+ (id)consistencyDataWithPaymentApplications:(id)arg1 secureElementCards:(id)arg2 cleanupActions:(id)arg3;
@property(retain, nonatomic) NSDictionary *cleanupActionsByAID; // @synthesize cleanupActionsByAID=_cleanupActionsByAID;
@property(retain, nonatomic) NSDictionary *passStateByAID; // @synthesize passStateByAID=_passStateByAID;
@property(retain, nonatomic) NSDictionary *secureElementCardStateByAID; // @synthesize secureElementCardStateByAID=_secureElementCardStateByAID;
@property(nonatomic) unsigned long long backoffLevel; // @synthesize backoffLevel=_backoffLevel;
@property(readonly, nonatomic) NSDictionary *dictionary;

@end

@interface PKSerializedDataAccessor : PKFileDataAccessor
{
    NSData *_archiveData;
}

- (void)_removeDiskRepresentation;
- (id)archiveData;
- (void)downloadRemoteAssetsWithScreenScale:(double)arg1 suffix:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)initWithData:(id)arg1 error:(id *)arg2;

@end

@interface PKShippingMethod : PKPaymentSummaryItem <NSCopying, NSSecureCoding>
{
    NSString *_identifier;
    NSString *_detail;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *detail; // @synthesize detail=_detail;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (id)formattedString;
- (_Bool)isEqualToShippingMethod:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface PKShippingMethodValidator : PKPaymentSummaryItemValidator <PKPaymentValidating>
{
}

+ (Class)validatedClass;
+ (id)validatorWithObject:(id)arg1;
- (_Bool)isValidWithError:(id *)arg1;
- (id)initWithShippingMethod:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKUsageNotificationClient : NSObject <NSXPCListenerDelegate, PKUsageNotificationClientInterface>
{
    NSXPCListener *_listener;
    NSMutableSet *_connections;
    CDUnknownBlockType _handler;
}

- (void)passUsedFromSource:(long long)arg1 withTypeIdentifier:(id)arg2 info:(id)arg3;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)setPassUsageHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKUsageNotificationServer : NSObject
{
    NSXPCConnection *_connection;
}

- (void)notifyPassUsed:(id)arg1 fromSource:(long long)arg2;
- (void)dealloc;
- (id)init;

@end

@interface PKVerificationChannel : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _requiresUserInteraction;
    NSString *_identifier;
    unsigned long long _type;
    NSString *_typeDescription;
    NSString *_contactPoint;
    NSString *_sourceAddress;
}

+ (_Bool)supportsSecureCoding;
+ (id)verificationChannelWithDictionary:(id)arg1;
@property(copy, nonatomic) NSString *sourceAddress; // @synthesize sourceAddress=_sourceAddress;
@property(copy, nonatomic) NSString *contactPoint; // @synthesize contactPoint=_contactPoint;
@property(nonatomic) _Bool requiresUserInteraction; // @synthesize requiresUserInteraction=_requiresUserInteraction;
@property(copy, nonatomic) NSString *typeDescription; // @synthesize typeDescription=_typeDescription;
@property(nonatomic) unsigned long long type; // @synthesize type=_type;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (id)description;
@property(readonly, nonatomic) NSString *typeDescriptionUnlocalized;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKVerificationRequestRecord : NSObject <NSSecureCoding>
{
    NSString *_passUniqueID;
    PKVerificationChannel *_channel;
    NSDate *_date;
}

+ (_Bool)supportsSecureCoding;
+ (id)verificationRequestRecordForPass:(id)arg1 channel:(id)arg2 date:(id)arg3;
@property(copy, nonatomic) NSDate *date; // @synthesize date=_date;
@property(copy, nonatomic) PKVerificationChannel *channel; // @synthesize channel=_channel;
@property(copy, nonatomic) NSString *passUniqueID; // @synthesize passUniqueID=_passUniqueID;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKWeakReference : NSObject
{
    id _store;
    _Bool _storedValue;
}

- (void)setObject:(id)arg1;
- (id)getObject;
- (void)dealloc;
- (id)initWithObject:(id)arg1;
- (id)init;

@end

@interface PKWrappedPayment : NSObject <NSSecureCoding>
{
    NSString *_transactionIdentifier;
    NSData *_transactionData;
}

+ (_Bool)supportsSecureCoding;
+ (id)wrappedPaymentWithTransactionResponse:(id)arg1;
@property(copy, nonatomic) NSData *transactionData; // @synthesize transactionData=_transactionData;
@property(copy, nonatomic) NSString *transactionIdentifier; // @synthesize transactionIdentifier=_transactionIdentifier;
- (id)description;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface PKZipArchiver : NSObject
{
}

+ (void)noteBOMCopier:(struct _BOMCopier *)arg1 succeeded:(_Bool)arg2;
+ (void)disassociateBOMCopier:(struct _BOMCopier *)arg1;
+ (void)associateBOMCopier:(struct _BOMCopier *)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)zippedDataForURL:(id)arg1;
- (void)unzipStream:(id)arg1 toPath:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;

@end

