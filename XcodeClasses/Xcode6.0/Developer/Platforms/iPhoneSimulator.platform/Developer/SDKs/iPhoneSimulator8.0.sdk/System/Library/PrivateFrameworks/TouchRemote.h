//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct _CCCryptor;

#pragma mark Typedef'd Structures

typedef struct {
    struct _CCCryptor *_field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    unsigned long long _field4;
} CDStruct_a231404c;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/TouchRemote.framework/TouchRemote
// UUID: 5D5E10EC-3C53-362B-B526-12666E7FEEE5
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 68.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>

@optional
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveService:(NSNetService *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveDomain:(NSString *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindService:(NSNetService *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindDomain:(NSString *)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didNotSearch:(NSDictionary *)arg2;
- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)arg1;
- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)arg1;
@end

@protocol NSNetServiceDelegate <NSObject>

@optional
- (void)netService:(NSNetService *)arg1 didAcceptConnectionWithInputStream:(NSInputStream *)arg2 outputStream:(NSOutputStream *)arg3;
- (void)netService:(NSNetService *)arg1 didUpdateTXTRecordData:(NSData *)arg2;
- (void)netServiceDidStop:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotResolve:(NSDictionary *)arg2;
- (void)netServiceDidResolveAddress:(NSNetService *)arg1;
- (void)netServiceWillResolve:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotPublish:(NSDictionary *)arg2;
- (void)netServiceDidPublish:(NSNetService *)arg1;
- (void)netServiceWillPublish:(NSNetService *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCConnectionDelegate <NSObject>

@optional
- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;
- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol TRTCPConnectionDelegate <NSObject>

@optional
- (void)connection:(TRTCPConnection *)arg1 didReceivePacketEvent:(TRPacketEvent *)arg2;
- (void)connectionDidClose:(TRTCPConnection *)arg1;
@end

@protocol TRTCPConnectionStreamDelegate <NSObject>

@optional
- (void)connectionStreamDidClose:(TRTCPConnectionStream *)arg1;
@end

@protocol TRTransferBrowserDelegate <NSObject>

@optional
- (void)browserDidDisconnect:(TRTransferBrowser *)arg1;
- (NSData *)browser:(TRTransferBrowser *)arg1 didReceiveData:(NSData *)arg2;
- (NSData *)browserDidStartTransfer:(TRTransferBrowser *)arg1;
@end

@protocol TRTransferServerDelegate <NSObject>

@optional
- (void)server:(TRTransferServer *)arg1 didFailToReceiveData:(NSError *)arg2;
- (NSData *)server:(TRTransferServer *)arg1 didReceiveData:(NSData *)arg2;
- (void)serverWillReceiveData:(TRTransferServer *)arg1;
@end

@protocol TRXPCClientExportedInterface <NSObject>
- (void)TRXPCC_connectionWithUniqueIdentifier:(int)arg1 didReceivePacketEvent:(TRPacketEvent *)arg2;
- (void)TRXPCC_connectionWithUniqueIdentifierDidClose:(int)arg1;
- (void)TRXPCC_browserDidRemoveService:(TRService *)arg1;
- (void)TRXPCC_browserDidFindService:(TRService *)arg1;
@end

@protocol TRXPCDaemonExportedInterface <NSObject>
- (void)TRXPCD_connectionWithUniqueIdentifier:(int)arg1 setRelevantReceivedPacketEventTypes:(NSArray *)arg2;
- (void)TRXPCD_connectionWithUniqueIdentifier:(int)arg1 sendPacketEvent:(TRPacketEvent *)arg2 withCompletionHandler:(void (^)(NSError *))arg3;
- (void)TRXPCD_closeConnectionWithUniqueIdentifier:(int)arg1;
- (void)TRXPCD_connectToService:(TRService *)arg1 withCompletionHandler:(void (^)(int, NSError *))arg2;
- (void)TRXPCD_getServicesWithCompletionHandler:(void (^)(NSArray *))arg1;
- (void)TRXPCD_stopBrowsing;
- (void)TRXPCD_startBrowsing;
@end

@interface NSData (TRAdditions)
- (id)TR_decompressedGzipData;
- (id)TR_compressedGzipData;
@end

@interface TRAdvertisingInfo : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
{
    NSData *_pairingPublicKey;
    NSData *_wirelessProximityIdentifier;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, copy, nonatomic) NSData *wirelessProximityIdentifier; // @synthesize wirelessProximityIdentifier=_wirelessProximityIdentifier;
@property(readonly, copy, nonatomic) NSData *pairingPublicKey; // @synthesize pairingPublicKey=_pairingPublicKey;
- (void).cxx_destruct;
- (id)_TXTRecordRepresentation;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)_initWithTXTRecordRepresentation:(id)arg1;

@end

@interface TRPacketEvent : NSObject <NSSecureCoding>
{
    unsigned int _packetEventType;
    unsigned int _version;
    NSDictionary *_payloadDictionary;
}

+ (Class)_packetClassForPacketEventType:(unsigned int)arg1;
+ (unsigned int)_packetEventType;
+ (unsigned long long)payloadSizeWithNetworkRepresentationHeader:(id)arg1;
+ (unsigned long long)networkRepresentationHeaderLength;
+ (_Bool)supportsSecureCoding;
+ (id)packetWithNetworkRepresentation:(id)arg1;
@property(readonly, nonatomic) unsigned int version; // @synthesize version=_version;
@property(readonly, nonatomic) NSDictionary *payloadDictionary; // @synthesize payloadDictionary=_payloadDictionary;
@property(nonatomic) unsigned int packetEventType; // @synthesize packetEventType=_packetEventType;
- (void).cxx_destruct;
- (id)_networkRepresentationForEventType:(unsigned int)arg1 version:(unsigned int)arg2 payloadDictionary:(id)arg3;
@property(readonly, nonatomic) NSData *networkRepresentation;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;

@end

@interface TRAuthorizationStatusPacketEvent : TRPacketEvent
{
    long long _authorizationStatus;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) long long authorizationStatus; // @synthesize authorizationStatus=_authorizationStatus;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithAuthorizationStatus:(long long)arg1;

@end

@interface TRAuthorizePacketEvent : TRPacketEvent
{
    NSString *_deviceIdentifier;
    NSString *_passcode;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) NSString *passcode; // @synthesize passcode=_passcode;
@property(readonly, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
- (void).cxx_destruct;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithPasscode:(id)arg1;

@end

@interface TRAuthorizedDeviceManager : NSObject
{
    NSMutableDictionary *_authorizationList;
}

+ (id)_deviceIdentifierForData:(id)arg1;
+ (id)_dataForDeviceIdentifier:(id)arg1;
+ (id)currentDeviceIdentifier;
+ (id)sharedDeviceManager;
- (void).cxx_destruct;
- (id)_deviceAuthorizationFilePath;
- (id)_deviceAuthorizationDirectory;
- (_Bool)removeDeviceWithIdentifier:(id)arg1 error:(id *)arg2;
- (_Bool)isAuthorizedDeviceWithIdentifier:(id)arg1;
- (id)deviceNameForIdentifier:(id)arg1;
@property(readonly, nonatomic) NSArray *deviceIdentifiers;
- (_Bool)addDeviceWithIdentifier:(id)arg1 forDeviceName:(id)arg2 error:(id *)arg3;
- (id)init;

@end

@interface TRBrowser : NSObject
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableArray *_services;
    unsigned long long _browsingCount;
}

+ (id)sharedBrowser;
- (void).cxx_destruct;
- (void)TRXPCC_browserDidRemoveService:(id)arg1;
- (void)TRXPCC_browserDidFindService:(id)arg1;
- (void)_XPCClientConnectionDidInterruptNotification:(id)arg1;
- (void)stopBrowsing;
- (void)startBrowsing;
- (void)getServicesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)_init;
- (id)init;

@end

@interface TRConnection : NSObject
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    _Bool _closed;
    unsigned long long _connectionCount;
    NSMapTable *_packetEventClassToTargetActions;
    NSObject<OS_dispatch_queue> *_sendQueue;
    int _uniqueID;
    TRService *_service;
}

@property(readonly, nonatomic) TRService *service; // @synthesize service=_service;
- (void).cxx_destruct;
- (int)_uniqueID;
- (id)_onQueue_targetActionsForPacketEvent:(id)arg1;
- (void)_sendRelevantPacketEventTypes;
- (id)_relevantPacketEventTypes;
- (void)_incrementConnectionCount;
- (void)_connectionDidReceivePacketEvent:(id)arg1;
- (void)_connectionDidClose;
- (void)sendPacketEvent:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)removeTarget:(id)arg1 action:(SEL)arg2 queue:(id)arg3 forPacketEventClasses:(id)arg4;
- (void)close;
- (void)addTarget:(id)arg1 action:(SEL)arg2 queue:(id)arg3 forPacketEventClasses:(id)arg4;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)_initWithUniqueID:(int)arg1 service:(id)arg2;

@end

@interface TRConnectionManager : NSObject
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMapTable *_serviceToConnection;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)TRXPCC_connectionWithUniqueIdentifier:(int)arg1 didReceivePacketEvent:(id)arg2;
- (void)TRXPCC_connectionWithUniqueIdentifierDidClose:(int)arg1;
- (id)_existingConnectionForService:(id)arg1;
- (id)_existingConnectionForConnectionUniqueIdentifier:(int)arg1;
- (void)_XPCClientConnectionDidInterruptNotification:(id)arg1;
- (void)_connectionDidCloseNotification:(id)arg1;
- (void)connectToService:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)_init;
- (id)init;

@end

@interface TRDBrowser : NSObject <NSNetServiceBrowserDelegate, NSNetServiceDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSNetServiceBrowser *_browser;
    unsigned long long _browsingCount;
    NSMapTable *_netServiceToService;
    NSMapTable *_netServiceToResolvingCompletionHandlers;
    NSMapTable *_XPCConnectionToBrowsingCount;
}

+ (id)sharedBrowser;
- (void).cxx_destruct;
- (void)TRXPCD_stopBrowsing;
- (void)TRXPCD_startBrowsing;
- (void)TRXPCD_getServicesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_serviceForNetService:(id)arg1;
- (void)_resolveNetService:(id)arg1 withTimeout:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)_netServiceForService:(id)arg1;
- (_Bool)_isXPCConnectionBrowsing:(id)arg1;
- (void)_callResolvingCompletionHandlersForNetService:(id)arg1 withError:(id)arg2;
- (void)stopBrowsing;
- (void)startBrowsing;
@property(readonly, copy, nonatomic) NSArray *services;
@property(readonly, nonatomic, getter=isBrowsing) _Bool browsing;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)netService:(id)arg1 didNotResolve:(id)arg2;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(_Bool)arg3;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(_Bool)arg3;
- (void)dealloc;
- (id)_init;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRDConnectionManager : NSObject <TRTCPConnectionDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSObject<OS_dispatch_queue> *_connectionDelegateQueue;
    NSMapTable *_connectionToXPCConnectionOwners;
    NSMapTable *_serviceToConnection;
    NSMapTable *_serviceToConnectionCompletionHandlers;
    NSMapTable *_XPCConnectionToConnectionToPacketEventClasses;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)TRXPCD_connectionWithUniqueIdentifier:(int)arg1 setRelevantReceivedPacketEventTypes:(id)arg2;
- (void)TRXPCD_connectionWithUniqueIdentifier:(int)arg1 sendPacketEvent:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)TRXPCD_closeConnectionWithUniqueIdentifier:(int)arg1;
- (void)TRXPCD_connectToService:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)_packetEventClassesForPacketEventTypes:(id)arg1;
- (id)_existingConnectionForService:(id)arg1;
- (id)_existingConnectionForConnectionUniqueIdentifier:(int)arg1;
- (void)_callConnectionCompletionHandlersForService:(id)arg1 withConnection:(id)arg2 error:(id)arg3;
- (void)_XPCServerDidInvalidateClientConnectionNotification:(id)arg1;
- (void)connectToService:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)connection:(id)arg1 didReceivePacketEvent:(id)arg2;
- (void)connectionDidClose:(id)arg1;
- (void)dealloc;
- (id)_init;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRTCPConnection : NSObject <TRTCPConnectionStreamDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    _Bool _closed;
    TRTCPConnectionStream *_connectionStream;
    id <TRTCPConnectionDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_delegateQueue;
    NSString *_deviceIdentifier;
    NSObject<OS_dispatch_source> *_keepAliveTimer;
    NSArray *_relevantPacketEventClasses;
    int _uniqueID;
}

@property(readonly, nonatomic) int uniqueID; // @synthesize uniqueID=_uniqueID;
- (void).cxx_destruct;
- (void)_performNextRead;
- (void)_handleReceivedPacketEvent:(id)arg1;
- (void)sendPacketEvent:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)close;
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property(readonly, nonatomic) __weak id <TRTCPConnectionDelegate> delegate;
- (void)connectionStreamDidClose:(id)arg1;
- (void)dealloc;
- (id)_initWithUniqueID:(int)arg1 connectionStream:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRDServerConnection : TRTCPConnection
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableArray *_authorizationCompletionHandlers;
    _Bool _authorized;
    TRDBrowser *_browser;
    NSObject<OS_dispatch_queue> *_packetEventQueue;
    TRService *_service;
}

@property(readonly, nonatomic) TRService *service; // @synthesize service=_service;
- (void).cxx_destruct;
- (void)_browserDidRemoveServiceNotification:(id)arg1;
- (void)_handleReceivedPacketEvent:(id)arg1;
- (void)close;
- (void)dealloc;
- (id)_initWithUniqueID:(int)arg1 connectionStream:(id)arg2 service:(id)arg3 browser:(id)arg4;

@end

@interface TRDXPCServer : NSObject <NSXPCConnectionDelegate, NSXPCListenerDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableArray *_connections;
    NSXPCListener *_listener;
    unsigned long long _serverStartCount;
}

+ (id)sharedServer;
- (void).cxx_destruct;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)stop;
- (void)start;
@property(readonly, nonatomic) NSArray *remoteClientProxies;
@property(readonly, nonatomic) NSArray *connections;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(_Bool)arg3;
- (void)dealloc;
- (id)_init;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRDeviceSetupBrowser : NSObject <TRTransferBrowserDelegate>
{
    TRTransferBrowser *_transferBrowser;
    TRDeviceSetupPeripheral *_peripheral;
    id <TRDeviceSetupBrowserDelegate> _delegate;
}

@property(nonatomic) __weak id <TRDeviceSetupBrowserDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)stop;
@property(readonly, nonatomic) long long state;
- (void)start;
- (void)browserDidDisconnect:(id)arg1;
- (id)browser:(id)arg1 didReceiveData:(id)arg2;
- (id)browserDidStartTransfer:(id)arg1;
- (void)browserDidChangeState:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRDeviceSetupPeripheral : NSObject
{
    _TRUserNotfication *_activeUserNotification;
    NSString *_authenticationAppleID;
    unsigned long long _authenticationAttemptCount;
    NSData *_dataToSend;
    NSObject<OS_dispatch_semaphore> *_dataToSendSemaphore;
    NSString *_deviceGUID;
    _Bool _performingSetup;
    _Bool _preparingForSetup;
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_userAgent;
    id <TRDeviceSetupPeripheralDelegate> _delegate;
}

@property(nonatomic) __weak id <TRDeviceSetupPeripheralDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_startAuthentication;
- (_Bool)_showUserNotificationForRememberPasswordForAppleID:(id)arg1;
- (void)_showUserNotificationForErrorWithTitle:(id)arg1 message:(id)arg2;
- (_Bool)_showUserNotificationForDiagnosticSubmission;
- (void)_showUserNotificationForAuthenticationFailure:(id)arg1;
- (_Bool)_showUserNotificationForAppleID:(id)arg1 returningAppleID:(id *)arg2 password:(id *)arg3;
- (void)_setupDidFailWithError:(id)arg1;
- (void)_setupDidComplete;
- (void)_sendSetupDataWithAuthInfo:(id)arg1 diagnosticSubmissionEnabled:(_Bool)arg2 rememberPasswordEnabled:(_Bool)arg3;
- (_Bool)_canPerformSetupReturningHasWiFiNetwork:(_Bool *)arg1;
- (void)_authenticateWithParameters:(id)arg1;
- (id)_didTap;
- (id)_didReceiveData:(id)arg1;
- (void)_didDisconnect;
- (void)cancelSetupForTimeout;
- (void)cancelSetupForStateChange;
- (_Bool)performSetup;
- (id)init;

@end

@interface TRDeviceSetupServer : NSObject <TRTransferServerDelegate>
{
    TRTransferServer *_transferServer;
    _Bool _cancelledSetupInProgress;
    int _notifyToken;
    _Bool _notifyTokenIsValid;
    _Bool _setupInProgress;
    _Bool _started;
    id <TRDeviceSetupServerDelegate> _delegate;
}

+ (void)initialize;
@property(nonatomic) __weak id <TRDeviceSetupServerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)stop;
- (void)start;
- (void)cancelActiveSetup;
- (void)server:(id)arg1 didFailToReceiveData:(id)arg2;
- (id)server:(id)arg1 didReceiveData:(id)arg2;
- (void)serverWillReceiveData:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRDirectionalButtonPacketEvent : TRPacketEvent
{
    long long _buttonType;
    long long _gestureState;
    long long _gestureType;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) long long gestureType; // @synthesize gestureType=_gestureType;
@property(readonly, nonatomic) long long gestureState; // @synthesize gestureState=_gestureState;
@property(readonly, nonatomic) long long buttonType; // @synthesize buttonType=_buttonType;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithButtonType:(long long)arg1 gestureType:(long long)arg2 gestureState:(long long)arg3;

@end

@interface TRDirectionalPanPacketEvent : TRPacketEvent
{
    long long _gestureState;
    struct CGPoint _location;
    struct CGPoint _velocity;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) struct CGPoint velocity; // @synthesize velocity=_velocity;
@property(readonly, nonatomic) long long gestureState; // @synthesize gestureState=_gestureState;
@property(readonly, nonatomic) struct CGPoint location; // @synthesize location=_location;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithGestureState:(long long)arg1 location:(struct CGPoint)arg2 velocity:(struct CGPoint)arg3;

@end

@interface TRKeepAlivePacketEvent : TRPacketEvent
{
}

+ (unsigned int)_packetEventType;
- (id)init;

@end

@interface TRKeyboardPromptUpdatePacketEvent : TRPacketEvent
{
    _Bool _secureText;
    long long _keyboardType;
    unsigned long long _sessionID;
    NSString *_subtitle;
    NSString *_text;
    NSString *_title;
    long long _updateType;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) long long updateType; // @synthesize updateType=_updateType;
@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic) NSString *text; // @synthesize text=_text;
@property(readonly, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(readonly, nonatomic) unsigned long long sessionID; // @synthesize sessionID=_sessionID;
@property(readonly, nonatomic, getter=isSecureText) _Bool secureText; // @synthesize secureText=_secureText;
@property(readonly, nonatomic) long long keyboardType; // @synthesize keyboardType=_keyboardType;
- (void).cxx_destruct;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithKeyboardType:(long long)arg1 secureText:(_Bool)arg2 sessionID:(unsigned long long)arg3 subtitle:(id)arg4 text:(id)arg5 title:(id)arg6 updateType:(long long)arg7;

@end

@interface TRKeyboardUserEntryPacketEvent : TRPacketEvent
{
    long long _commandType;
    unsigned long long _sessionID;
    NSString *_text;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) NSString *text; // @synthesize text=_text;
@property(readonly, nonatomic) unsigned long long sessionID; // @synthesize sessionID=_sessionID;
@property(readonly, nonatomic) long long commandType; // @synthesize commandType=_commandType;
- (void).cxx_destruct;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithCommandType:(long long)arg1 sessionID:(unsigned long long)arg2 text:(id)arg3;

@end

@interface TRMutableAdvertisingInfo : TRAdvertisingInfo
{
}

@property(copy, nonatomic) NSData *wirelessProximityIdentifier;
@property(copy, nonatomic) NSData *pairingPublicKey;

@end

@interface TRNowPlayingArtworkUpdatePacketEvent : TRPacketEvent
{
    NSData *_artworkData;
    NSString *_artworkMIMEType;
    NSDictionary *_nowPlayingInfo;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) NSDictionary *nowPlayingInfo; // @synthesize nowPlayingInfo=_nowPlayingInfo;
@property(readonly, nonatomic) NSString *artworkMIMEType; // @synthesize artworkMIMEType=_artworkMIMEType;
@property(readonly, nonatomic) NSData *artworkData; // @synthesize artworkData=_artworkData;
- (void).cxx_destruct;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initArtworkData:(id)arg1 artworkMIMEType:(id)arg2 nowPlayingInfo:(id)arg3;

@end

@interface TRNowPlayingControlPacketEvent : TRPacketEvent
{
    long long _controlCommand;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) long long controlCommand; // @synthesize controlCommand=_controlCommand;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithControlCommand:(long long)arg1;

@end

@interface TRNowPlayingInfoUpdatePacketEvent : TRPacketEvent
{
    NSDictionary *_nowPlayingInfo;
}

+ (unsigned int)_packetEventType;
@property(readonly, copy, nonatomic) NSDictionary *nowPlayingInfo; // @synthesize nowPlayingInfo=_nowPlayingInfo;
- (void).cxx_destruct;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithNowPlayingInfo:(id)arg1;

@end

@interface TRResendPacketEvent : TRPacketEvent
{
    NSArray *_resendPacketEventClasses;
}

+ (unsigned int)_packetEventType;
@property(readonly, nonatomic) NSArray *resendPacketEventClasses; // @synthesize resendPacketEventClasses=_resendPacketEventClasses;
- (void).cxx_destruct;
- (id)_initWithVersion:(unsigned int)arg1 payloadDictionary:(id)arg2;
- (id)description;
- (id)initWithResendPacketEventClasses:(id)arg1;

@end

@interface TRSClientConnection : TRTCPConnection
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    _Bool _authorized;
    NSString *_deviceIdentifier;
    NSObject<OS_dispatch_queue> *_packetEventQueue;
}

- (void).cxx_destruct;
- (void)_handleReceivedPacketEvent:(id)arg1;
- (void)dealloc;
- (id)_initWithUniqueID:(int)arg1 connectionStream:(id)arg2;

@end

@interface TRServer : NSObject <NSNetServiceDelegate>
{
    TRAdvertisingInfo *_advertisingInfo;
    NSObject<OS_tcp_listener> *_listener;
    NSObject<OS_dispatch_queue> *_listenerQueue;
    NSNetService *_netService;
    unsigned short _port;
    id <TRServerDelegate> _delegate;
    NSString *_name;
}

+ (id)newServerWithName:(id)arg1 port:(unsigned short)arg2;
+ (id)newServerWithName:(id)arg1;
@property(readonly, nonatomic) unsigned short port; // @synthesize port=_port;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) __weak id <TRServerDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy, nonatomic) TRAdvertisingInfo *advertisingInfo; // @synthesize advertisingInfo=_advertisingInfo;
- (void).cxx_destruct;
- (void)stop;
- (void)start;
- (void)netService:(id)arg1 didNotPublish:(id)arg2;
- (void)netServiceDidPublish:(id)arg1;
- (void)netServiceWillPublish:(id)arg1;
- (void)dealloc;
- (id)_initWithName:(id)arg1 port:(unsigned short)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TRService : NSObject <NSSecureCoding>
{
    int _uniqueID;
    TRAdvertisingInfo *_advertisingInfo;
    NSString *_name;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) int uniqueID; // @synthesize uniqueID=_uniqueID;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) TRAdvertisingInfo *advertisingInfo; // @synthesize advertisingInfo=_advertisingInfo;
- (void).cxx_destruct;
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)_initWithName:(id)arg1 uniqueID:(int)arg2 advertisingInfo:(id)arg3;

@end

@interface TRTCPConnectionStream : NSObject
{
    NSObject<OS_dispatch_queue> *_connectionAccessQueue;
    NSInputStream *_readStream;
    NSObject<OS_dispatch_queue> *_readQueue;
    NSOutputStream *_writeStream;
    NSObject<OS_dispatch_queue> *_writeQueue;
    _Bool _closed;
    id <TRTCPConnectionStreamDelegate> _delegate;
}

@property(nonatomic, getter=isClosed) _Bool closed; // @synthesize closed=_closed;
@property(nonatomic) __weak id <TRTCPConnectionStreamDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)writeData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)readDataOfLength:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)close;
- (void)dealloc;
- (id)_initWithNetService:(id)arg1;
- (id)_initWithReadStream:(id)arg1 writeStream:(id)arg2 peerPublicKey:(id)arg3 options:(long long)arg4;
- (id)_initWithReadStream:(id)arg1 writeStream:(id)arg2 options:(long long)arg3;

@end

@interface TRTransferBrowser : NSObject
{
    CDStruct_a231404c *_aesContext;
    struct AirPlayPairingSessionPrivate *_pairingSession;
    long long _pairingState;
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _started;
    id <TRTransferBrowserDelegate> _delegate;
    long long _state;
}

@property(readonly, nonatomic) long long state; // @synthesize state=_state;
@property(nonatomic) __weak id <TRTransferBrowserDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (int)_runVerifyStepWithInput:(const void *)arg1 inputLength:(unsigned long long)arg2 outputData:(id *)arg3;
- (int)_runSetupStepWithInput:(const void *)arg1 inputLength:(unsigned long long)arg2 outputData:(id *)arg3;
- (id)_didReceiveEncryptedData:(id)arg1;
- (void)_didFinishPairing;
- (void)_beginScanningIfPowered;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)init;

@end

@interface TRTransferServer : NSObject
{
    CDStruct_a231404c *_aesContext;
    _Bool _didSendData;
    struct AirPlayPairingSessionPrivate *_pairingSession;
    long long _pairingState;
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _started;
    id <TRTransferServerDelegate> _delegate;
}

@property(nonatomic) __weak id <TRTransferServerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (int)_runVerifyStepWithInput:(const void *)arg1 inputLength:(unsigned long long)arg2 outputData:(id *)arg3;
- (int)_runSetupStepWithInput:(const void *)arg1 inputLength:(unsigned long long)arg2 outputData:(id *)arg3;
- (id)_onQueue_didReceiveEncryptedData:(id)arg1;
- (void)_onQueue_didFinishPairing;
- (void)_beginAdvertisingIfPowered;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)init;

@end

@interface TRXPCClient : NSObject <NSXPCConnectionDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSXPCConnection *_connection;
}

+ (id)sharedClient;
- (void).cxx_destruct;
- (id)remoteDaemonProxyWithErrorHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) id <TRXPCDaemonExportedInterface> remoteDaemonProxy;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(_Bool)arg3;
- (void)dealloc;
- (id)_init;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _TRConnectionTargetAction : NSObject
{
    SEL _action;
    NSObject<OS_dispatch_queue> *_queue;
    id _target;
}

@property(readonly, nonatomic) __weak id target; // @synthesize target=_target;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, nonatomic) SEL action; // @synthesize action=_action;
- (void).cxx_destruct;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2 queue:(id)arg3;

@end

@interface _TRUserNotfication : NSObject
{
    struct __CFUserNotification *_userNotification;
    int _response;
    unsigned long long _responseFlags;
}

@property(readonly, nonatomic) unsigned long long responseFlags; // @synthesize responseFlags=_responseFlags;
@property(readonly, nonatomic) int response; // @synthesize response=_response;
- (void)show;
@property(readonly, nonatomic) struct __CFUserNotification *CFUserNotification;
- (void)cancel;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 options:(unsigned long long)arg2 error:(int *)arg3;

@end

