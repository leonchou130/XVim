//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CLConnection;

struct CLConnectionClient {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    id _field2;
    id _field3;
    id _field4;
    struct CLConnection *_field5;
    struct CLNameValuePair _field6;
    struct CLNameValuePair _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    CDUnknownBlockType _field9;
    CDUnknownBlockType _field10;
    struct map<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>>> _field11;
    CDUnknownBlockType _field12;
    CDUnknownBlockType _field13;
};

struct CLConnectionMessage {
    id _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    id _field3;
    id _field4;
};

struct CLMotionActivity {
    int type;
    int confidence;
    int mountedState;
    int mountedConfidence;
    float tilt;
    double timestamp;
    int exitState;
    double estExitTime;
    double startTime;
};

struct CLNameValuePair {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct Dispatcher {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct deque<float, std::__1::allocator<float>> {
    struct __split_buffer<float *, std::__1::allocator<float *>> {
        float **__first_;
        float **__begin_;
        float **__end_;
        struct __compressed_pair<float **, std::__1::allocator<float *>> {
            float **__first_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<float>> {
        unsigned long long __first_;
    } __size_;
};

struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *>>> {
    struct __tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>>> {
        struct __tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int>>> {
    struct __tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int>>> {
        struct __tree_node<std::__1::__value_type<unsigned long, int>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

#if 0
// Names with conflicting types:
typedef struct {
    double timestamp;
    int orientation;
} Sample_edc72402;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
} CDStruct_afa449f9;

typedef struct {
    double w;
    double x;
    double y;
    double z;
} CDStruct_bf7dff04;

typedef struct {
    double x;
    double y;
    double z;
} CDStruct_31142d93;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    float x;
    float y;
    float z;
} CDStruct_03942939;

typedef struct {
    float pressure;
    float temperature;
} CDStruct_ebf20f05;

typedef struct {
    CDStruct_bf7dff04 _field1;
    CDStruct_03942939 _field2;
    CDStruct_03942939 _field3;
    CDStruct_03942939 _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
} CDStruct_7fb6ae47;

typedef struct {
    CDStruct_31142d93 _field1;
    int _field2;
} CDStruct_27fd20ed;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreMotion.framework/CoreMotion
// UUID: 9B0A93E1-6BFA-3DCC-AE10-ECC268509BAD
//
//                           Arch: x86_64
//                Current version: 1753.7.0
//          Compatibility version: 1.0.0
//                 Source version: 1753.7.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CLCompassDatabaseClientClientProtocol <CLNotifierServiceClientProtocol>
@end

@protocol CLCompassDatabaseClientProtocol <CLNotifierServiceProtocol>
@end

@protocol CLGeomagneticModelProviderClientClientProtocol <CLNotifierServiceClientProtocol>
@end

@protocol CLGeomagneticModelProviderClientProtocol <CLNotifierServiceProtocol>
@end

@protocol CLGyroCalibrationDatabaseRemoteClientProtocol <CLNotifierServiceClientProtocol>
@end

@protocol CLGyroCalibrationDatabaseRemoteProtocol <CLNotifierServiceProtocol>
@end

@protocol CLIntersiloClientProtocol <CLIntersiloProxyDelegateProtocol>
@end

@protocol CLIntersiloProxyDelegateProtocol
@property(nonatomic) _Bool valid;

@optional
- (oneway void)release;
- (id)retain;
@end

@protocol CLIntersiloServiceProtocol <CLIntersiloProxyDelegateProtocol>
+ (void)becameFatallyBlocked:(NSMutableArray *)arg1;
+ (CLSilo *)getSilo;

@optional
- (void)registerDelegate:(id <CLIntersiloProxyDelegateProtocol>)arg1 inSilo:(CLSilo *)arg2;
- (void)endService;
- (void)beginService;
@end

@protocol CLNotifierServiceClientProtocol <CLIntersiloClientProtocol>
- (void)onNotification:(int)arg1 withData:(CLNotifierData *)arg2;
@end

@protocol CLNotifierServiceProtocol <CLIntersiloServiceProtocol>
- (void)forget:(byref id <CLNotifierServiceClientProtocol>)arg1;
- (void)unregister:(byref id <CLNotifierServiceClientProtocol>)arg1 forNotification:(int)arg2;
- (void)register:(byref id <CLNotifierServiceClientProtocol>)arg1 forNotification:(int)arg2 registrationInfo:(CLNotifierData *)arg3;
@end

@protocol CLTimerScheduler
@property(nonatomic) __weak CLTimer *timer;
- (void)reflectNextFireTime:(double)arg1 fireInterval:(double)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface CLIntersiloService : NSObject <CLIntersiloServiceProtocol>
{
    _Bool _valid;
    CLSilo *_silo;
    CLIntersiloInterface *_inboundInterface;
    CLIntersiloInterface *_outboundInterface;
}

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;
@property(nonatomic) _Bool valid; // @synthesize valid=_valid;
@property(readonly, nonatomic) CLIntersiloInterface *outboundInterface; // @synthesize outboundInterface=_outboundInterface;
@property(readonly, nonatomic) CLIntersiloInterface *inboundInterface; // @synthesize inboundInterface=_inboundInterface;
@property(readonly, nonatomic) CLSilo *silo; // @synthesize silo=_silo;
- (void).cxx_destruct;
- (id)debugDescription;
- (_Bool)isHydrated;
- (id)initWithInboundProtocol:(id)arg1 outboundProtocol:(id)arg2 andSilo:(id)arg3;
- (id)initInSilo:(id)arg1;
- (id)init;

@end

@interface CLNotifierServiceAdapter : CLIntersiloService <CLNotifierServiceProtocol>
{
    struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int>>> _clients;
    struct CLNotifierBase *_notifier;
}

@property(readonly, nonatomic) struct CLNotifierBase *notifier; // @synthesize notifier=_notifier;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)debugDescription;
- (int)notifierClientNumForCoparty:(id)arg1;
- (void)forget:(byref id)arg1;
- (void)unregister:(byref id)arg1 forNotification:(int)arg2;
- (void)register:(byref id)arg1 forNotification:(int)arg2 registrationInfo:(id)arg3;
- (void)invalidate;
- (void)setAdaptedNotifier:(struct CLNotifierBase *)arg1;
- (id)initInSilo:(id)arg1;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

@interface CLCompassDatabaseClientAdapter : CLNotifierServiceAdapter <CLCompassDatabaseClientProtocol>
{
}

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;
- (void)endService;
- (void)beginService;
- (id)initInSilo:(id)arg1;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

@interface CLDeviceMotionProperties : NSObject
{
    int fMode;
    _Bool fWantsPowerConservativeDeviceMotion;
}

@property(readonly, nonatomic) _Bool wantsPowerConservativeDeviceMotion; // @synthesize wantsPowerConservativeDeviceMotion=fWantsPowerConservativeDeviceMotion;
@property(nonatomic) int mode; // @synthesize mode=fMode;
- (id)description;
- (id)initWithMode:(int)arg1 andPowerConservation:(_Bool)arg2;

@end

@interface CLSilo : NSObject <NSCopying>
{
    NSString *_identifier;
}

+ (id)main;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (void)afterInterval:(double)arg1 async:(CDUnknownBlockType)arg2;
- (void)sync:(CDUnknownBlockType)arg1;
- (void)async:(CDUnknownBlockType)arg1;
- (id)newTimer;
- (void)assertOutside;
- (void)assertInside;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithIdentifier:(id)arg1;

@end

@interface CLDispatchSilo : CLSilo
{
    NSObject<OS_dispatch_queue> *_queue;
}

- (void).cxx_destruct;
- (id)debugDescription;
- (id)queue;
- (void)afterInterval:(double)arg1 async:(CDUnknownBlockType)arg2;
- (void)sync:(CDUnknownBlockType)arg1;
- (void)async:(CDUnknownBlockType)arg1;
- (id)newTimer;
- (void)assertOutside;
- (void)assertInside;
- (id)initMain;
- (id)initWithUnderlyingQueue:(id)arg1;
- (id)initWithIdentifier:(id)arg1;

@end

@interface CLDispatchTimerScheduler : NSObject <CLTimerScheduler>
{
    CLTimer *timer;
    NSObject<OS_dispatch_source> *_source;
}

@property(retain, nonatomic) NSObject<OS_dispatch_source> *source; // @synthesize source=_source;
@property(nonatomic) __weak CLTimer *timer; // @synthesize timer;
- (void).cxx_destruct;
- (void)reflectNextFireTime:(double)arg1 fireInterval:(double)arg2;
- (void)dealloc;
- (id)initWithDispatchSilo:(id)arg1;

@end

@interface CLGeomagneticModelProviderClientAdapter : CLNotifierServiceAdapter <CLGeomagneticModelProviderClientProtocol>
{
}

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;
- (void)endService;
- (void)beginService;
- (id)initInSilo:(id)arg1;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

@interface CLGyroCalibrationDatabaseRemoteAdapter : CLNotifierServiceAdapter <CLGyroCalibrationDatabaseRemoteProtocol>
{
}

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;
- (void)endService;
- (void)beginService;
- (id)initInSilo:(id)arg1;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

@interface CLIntersiloInterface : NSObject
{
    struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *>>> _selectors;
    Protocol *_protocol;
}

+ (id)interfaceWithProtocol:(id)arg1 base:(id)arg2;
@property(readonly, nonatomic) Protocol *protocol; // @synthesize protocol=_protocol;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)debugDescription;
- (id)getInfoForSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(id)arg1;
- (id)initWithProtocol:(id)arg1 base:(id)arg2;

@end

@interface CLIntersiloInterfaceSelectorInfo : NSObject
{
    int _numArguments;
    int _replyBlockIndex;
    int _returnAddressIndex;
    int _returnValueSize;
    SEL _sel;
    NSMethodSignature *_sig;
    NSString *_str;
}

@property(readonly, retain, nonatomic) NSString *str; // @synthesize str=_str;
@property(readonly, retain, nonatomic) NSMethodSignature *sig; // @synthesize sig=_sig;
@property(readonly, nonatomic) int returnValueSize; // @synthesize returnValueSize=_returnValueSize;
@property(readonly, nonatomic) int returnAddressIndex; // @synthesize returnAddressIndex=_returnAddressIndex;
@property(readonly, nonatomic) int replyBlockIndex; // @synthesize replyBlockIndex=_replyBlockIndex;
@property(readonly, nonatomic) int numArguments; // @synthesize numArguments=_numArguments;
@property(readonly, nonatomic) SEL sel; // @synthesize sel=_sel;
- (void).cxx_destruct;
- (id)description;
- (id)initWithSelector:(SEL)arg1 andMethodSignature:(id)arg2;

@end

@interface CLIntersiloProxy : NSProxy <CLIntersiloServiceProtocol>
{
    CLIntersiloProxy *_peer;
    CLIntersiloProxy *_asymStrongPeer;
    CLIntersiloInterfaceSelectorInfo *_last;
    id <CLIntersiloProxyDelegateProtocol> _delegate;
    CLSilo *_delegateSilo;
    CLIntersiloInterface *_delegateInterface;
    CLIntersiloInterface *_proxiedInterface;
}

+ (id)proxyForRecipientObject:(id)arg1 inSilo:(id)arg2 withInboundInterface:(id)arg3 andOutboundInterface:(id)arg4;
+ (id)getSilo;
@property(readonly, copy, nonatomic) CLIntersiloInterface *proxiedInterface; // @synthesize proxiedInterface=_proxiedInterface;
@property(readonly, copy, nonatomic) CLIntersiloInterface *delegateInterface; // @synthesize delegateInterface=_delegateInterface;
@property(readonly, nonatomic) __weak CLSilo *delegateSilo; // @synthesize delegateSilo=_delegateSilo;
@property(readonly, nonatomic) __weak id <CLIntersiloProxyDelegateProtocol> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)registerDelegate:(id)arg1 inSilo:(id)arg2;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(id)arg1;
- (id)initWithDelegateInterface:(id)arg1 proxiedInterface:(id)arg2 delegateObject:(id)arg3 delegateSilo:(id)arg4 andUninitializedPeer:(id)arg5;
- (id)initWithDelegateInterface:(id)arg1 proxiedInterface:(id)arg2 andUninitializedPeer:(id)arg3;
- (void)heartAttack;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

@interface CLNotifierClientAdapter : NSObject <CLNotifierServiceClientProtocol>
{
    struct CLNotifierClientBase *_client;
    _Bool _valid;
}

@property(nonatomic) _Bool valid; // @synthesize valid=_valid;
- (id)debugDescription;
- (void)onNotification:(int)arg1 withData:(id)arg2;
- (void)invalidate;
- (id)initWithClient:(struct CLNotifierClientBase *)arg1;
- (id)init;

@end

@interface CLNotifierData : NSObject
{
    void *_data;
    CDUnknownBlockType _destructor;
}

@property(copy, nonatomic) CDUnknownBlockType destructor; // @synthesize destructor=_destructor;
@property(nonatomic) void *data; // @synthesize data=_data;
- (void).cxx_destruct;
- (void)dealloc;
- (id)initWithData:(void *)arg1 destructor:(CDUnknownBlockType)arg2;

@end

@interface CLServiceVendor : NSObject
{
}

+ (id)getSiloForService:(id)arg1;
+ (id)proxyForService:(id)arg1;
+ (_Bool)ensureServiceIsRunning:(id)arg1;
+ (_Bool)isServiceRunning:(id)arg1;
+ (_Bool)isServiceEnabled:(id)arg1;
+ (void)retireServiceWithName:(id)arg1;
+ (id)getServiceWithName:(id)arg1;
+ (_Bool)getKeyClass:(Class *)arg1 andSilo:(id *)arg2 forServiceWithName:(id)arg3;
+ (void)rereadConfiguration;
+ (void)initialize;

@end

@interface CLServiceVendorHeartbeatRecord : NSObject
{
    int _synCount;
    int _ackCount;
    CLSilo *_silo;
    id <CLIntersiloServiceProtocol> _service;
}

@property(readonly, nonatomic) int ackCount; // @synthesize ackCount=_ackCount;
@property(readonly, nonatomic) int synCount; // @synthesize synCount=_synCount;
@property(readonly, nonatomic) __weak id <CLIntersiloServiceProtocol> service; // @synthesize service=_service;
@property(readonly, nonatomic) CLSilo *silo; // @synthesize silo=_silo;
- (void).cxx_destruct;
- (void)ack;
- (void)syn;
- (id)initTrackingService:(id)arg1;

@end

@interface CLTimer : NSObject
{
    CLSilo *_silo;
    id <CLTimerScheduler> _scheduler;
    CDUnknownBlockType _handler;
    double _nextFireTime;
    double _fireInterval;
}

@property(nonatomic) double fireInterval; // @synthesize fireInterval=_fireInterval;
@property(nonatomic) double nextFireTime; // @synthesize nextFireTime=_nextFireTime;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void).cxx_destruct;
- (void)shouldFire;
- (void)invalidate;
- (void)setNextFireTime:(double)arg1 interval:(double)arg2;
- (void)setNextFireAfterDelay:(double)arg1 interval:(double)arg2;
- (void)setNextFireAfterDelay:(double)arg1;
- (id)initInSilo:(id)arg1 withScheduler:(id)arg2;
- (void)updateScheduler;

@end

@interface CMLogItem : NSObject <NSSecureCoding, NSCopying>
{
    id _internalLogItem;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) double timestamp;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithTimestamp:(double)arg1;

@end

@interface CMAccelerometerData : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) CDStruct_31142d93 acceleration;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithAcceleration:(CDStruct_03942939)arg1 andTimestamp:(double)arg2;

@end

@interface CMAccelerometerDataInternal : NSObject <NSCopying>
{
    CDStruct_03942939 fAcceleration;
}

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithAcceleration:(CDStruct_03942939)arg1;
- (void)setAcceleration:(CDStruct_03942939)arg1;

@end

@interface CMActivity : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) _Bool hasExitedVehicle;
@property(readonly, nonatomic) _Bool maybeExitingVehicle;
@property(readonly, nonatomic) _Bool isDriving;
@property(readonly, nonatomic) _Bool isRunning;
@property(readonly, nonatomic) _Bool isWalking;
@property(readonly, nonatomic) _Bool isMoving;
@property(readonly, nonatomic) int confidence;
- (struct CLMotionActivity)activity;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMotionActivity:(struct CLMotionActivity)arg1 andTimestamp:(double)arg2;

@end

@interface CMActivityAlarm : NSObject
{
    _Bool fIsValid;
    struct __CFRunLoop *fRunLoop;
    NSObject<OS_dispatch_queue> *fQueue;
    CDUnknownBlockType fHandler;
    unsigned int _trigger;
    double _duration;
}

+ (id)activityAlarmInfo;
+ (_Bool)activityAlarmAvailable;
@property(nonatomic) unsigned int trigger; // @synthesize trigger=_trigger;
@property(nonatomic) double duration; // @synthesize duration=_duration;
- (void)fire;
- (_Bool)isValid;
- (void)invalidate;
- (void)dealloc;
- (id)initWithTrigger:(unsigned int)arg1 duration:(double)arg2 onRunLoop:(struct __CFRunLoop *)arg3 withHandler:(CDUnknownBlockType)arg4;
- (id)initWithTrigger:(unsigned int)arg1 duration:(double)arg2 onQueue:(id)arg3 withHandler:(CDUnknownBlockType)arg4;

@end

@interface CMActivityAlarmProxy : NSObject
{
    id _internal;
    struct CLConnectionClient *fLocationdConnection;
    int fAlarmCounter;
    NSMutableDictionary *fAlarms;
    NSObject<OS_dispatch_queue> *fReplyQueue;
    _Bool fAlarmAvailable;
    NSObject<OS_dispatch_source> *fWatchdogTimer;
}

+ (id)sharedInstance;
- (void)_stopWatchdogCheckins;
- (void)_startWatchdogCheckins;
- (void)stopListeningForActivityAlarm:(id)arg1;
- (void)listenForActivityAlarm:(id)arg1;
- (_Bool)activityAlarmAvailable;
- (void)dealloc;
- (id)init;

@end

@interface CMActivityInternal : NSObject <NSCopying>
{
    struct CLMotionActivity fActivity;
}

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithMotionActivity:(struct CLMotionActivity)arg1;

@end

@interface CMActivityManager : NSObject
{
    id _internal;
}

- (long long)overrideOscarSideband:(_Bool)arg1 withState:(long long)arg2;
@property(readonly, nonatomic, getter=isActivityAvailable) _Bool activityAvailable;
@property(copy) CDUnknownBlockType activityHandler;
- (void)dealloc;
- (id)init;

@end

@interface CMActivityManagerInternal : NSObject
{
    struct CLConnectionClient *fLocationdConnection;
    CDUnknownBlockType fActivityHandler;
    NSObject<OS_dispatch_source> *fWatchdogTimer;
    NSObject<OS_dispatch_queue> *fPrivateQueue;
    _Bool fSubscribedToMotionState;
    NSObject<OS_dispatch_semaphore> *fSidebandOverrideSemaphore;
    NSObject<OS_dispatch_queue> *fSidebandOverrideQueue;
    _Bool fSidebandOverrideWaiting;
    long long fSidebandOverrideResult;
}

- (void)overrideOscarSideband:(_Bool)arg1 withState:(long long)arg2;
- (void)stopActivityUpdatesPrivate;
- (void)startActivityUpdatesWithHandlerPrivate:(CDUnknownBlockType)arg1;
- (void)stopWatchdogCheckinsPrivate;
- (void)startWatchdogCheckinsPrivate;
- (void)disconnect;
- (void)connect;
- (void)dealloc;
- (id)init;

@end

@interface CMAltimeter : NSObject
{
    id _internal;
}

+ (_Bool)isRelativeAltitudeAvailable;
+ (void)initialize;
+ (void)dummySelector:(id)arg1;
- (void)onFilteredPressure:(const struct Sample *)arg1;
- (void)stopRelativeAltitudeUpdatesPrivate;
- (void)startRelativeAltitudeUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)stopRelativeAltitudeUpdates;
- (void)startRelativeAltitudeUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)deallocPrivate;
- (void)dealloc;
- (id)initPrivate;
- (id)init;

@end

@interface CMAltimeterInternal : NSObject
{
    struct Dispatcher *fFilteredPressureDispatcher;
    CDUnknownBlockType fRelativeAltimeterHandler;
    NSOperationQueue *fRelativeAltimeterQueue;
    struct Sample {
        double timestamp;
        CDStruct_ebf20f05 pressureData;
    } fBaseAltimeterSample;
    float fBarometricBaseAltitude;
    _Bool fBaselineReceived;
    struct deque<float, std::__1::allocator<float>> fPressureSamples;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;

@end

@interface CMAltitudeData : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) NSNumber *pressure;
@property(readonly, nonatomic) NSNumber *relativeAltitude;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithAltitude:(float)arg1 andTimestamp:(double)arg2 atBaseAltitude:(float)arg3;

@end

@interface CMAltitudeDataInternal : NSObject <NSCopying>
{
    float fAltitude;
    float fPressure;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithAltitude:(float)arg1 andPressure:(float)arg2;
- (void)setAltitude:(float)arg1 andPressure:(float)arg2;

@end

@interface CMAmbientPressureData : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) CDStruct_c3b9c2ee ambientPressure;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPressure:(CDStruct_ebf20f05)arg1 andTimestamp:(double)arg2;

@end

@interface CMAmbientPressureDataInternal : NSObject
{
    CDStruct_ebf20f05 fPressure;
}

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithPressure:(CDStruct_ebf20f05)arg1;
- (void)setAmbientPressure:(CDStruct_ebf20f05)arg1;

@end

@interface CMAttitude : NSObject <NSCopying, NSSecureCoding>
{
    id _internal;
}

+ (_Bool)supportsSecureCoding;
- (void)multiplyByInverseOfAttitude:(id)arg1;
@property(readonly, nonatomic) CDStruct_bf7dff04 quaternion;
@property(readonly, nonatomic) CDStruct_afa449f9 rotationMatrix;
@property(readonly, nonatomic) double yaw;
@property(readonly, nonatomic) double pitch;
@property(readonly, nonatomic) double roll;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)setQuaternion:(CDStruct_bf7dff04)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithQuaternion:(CDStruct_bf7dff04)arg1;

@end

@interface CMAttitudeInternal : NSObject
{
    CDStruct_bf7dff04 fQuaternion;
}

- (id).cxx_construct;
- (id)initWithQuaternion:(CDStruct_bf7dff04)arg1;
- (void)setQuaternion:(CDStruct_bf7dff04)arg1;

@end

@interface CMDeviceMotion : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) _Bool doingBiasEstimation;
@property(readonly, nonatomic) _Bool doingYawCorrection;
@property(readonly, nonatomic) int magneticFieldCalibrationLevel;
@property(readonly, nonatomic) CDStruct_27fd20ed magneticField;
@property(readonly, nonatomic) CDStruct_31142d93 userAcceleration;
@property(readonly, nonatomic) CDStruct_31142d93 gravity;
@property(readonly, nonatomic) CDStruct_31142d93 rotationRate;
@property(readonly, nonatomic) CMAttitude *attitude;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDeviceMotion:(CDStruct_7fb6ae47)arg1 andTimestamp:(double)arg2;

@end

@interface CMDeviceMotionInternal : NSObject <NSCopying>
{
    CDStruct_31142d93 fGravity;
    CDStruct_31142d93 fUserAcceleration;
    CDStruct_31142d93 fRotationRate;
    CMAttitude *fAttitude;
    CDStruct_31142d93 fMagneticField;
    int fMagneticFieldCalibrationLevel;
    _Bool fDoingYawCorrection;
    _Bool fDoingBiasEstimation;
}

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithDeviceMotion:(CDStruct_7fb6ae47)arg1;
- (void)setDeviceMotion:(CDStruct_7fb6ae47)arg1;

@end

@interface CMDeviceOrientation : CMLogItem
{
    int fOrientation;
}

@property(readonly, nonatomic) int orientation;
- (id)description;
- (id)orientationString;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithOrientation:(int)arg1 andTimestamp:(double)arg2;

@end

@interface CMDeviceOrientationManager : NSObject
{
    id _internal;
}

+ (void)dummySelector:(id)arg1;
+ (void)initialize;
- (void)updateAggregateDictionaryPrivate;
- (id)deviceOrientationBlocking;
- (void)onDeviceOrientation:(const struct Sample *)arg1;
- (void)setDeviceOrientationCallbackModePrivate:(int)arg1;
- (void)signalAndReleaseSemaphoreIfNecessaryPrivate;
- (void)stopDeviceOrientationUpdatesPrivate;
- (void)startDeviceOrientationUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)stopDeviceOrientationUpdates;
- (void)startDeviceOrientationUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (_Bool)isDeviceOrientationActive;
- (_Bool)isDeviceOrientationAvailable;
- (void)onNotification:(id)arg1;
- (void)deallocPrivate;
- (void)dealloc;
- (id)initPrivate;
- (id)init;

@end

@interface CMDeviceOrientationManagerInternal : NSObject
{
    int fSampleLock;
    struct Dispatcher *fDeviceOrientationDispatcher;
    CDUnknownBlockType fDeviceOrientationHandler;
    NSOperationQueue *fDeviceOrientationQueue;
    NSObject<OS_dispatch_semaphore> *fDeviceOrientationSemaphore;
    _Bool fDidSignalSemaphore;
    int fOrientationCallbackMode;
    _Bool fEnableOrientationNotification;
    Sample_edc72402 fLatestDeviceOrientationSample;
    Sample_edc72402 fLastSignificantOrientationSample;
}

- (id).cxx_construct;
- (void)dealloc;
- (id)init;

@end

@interface CMGestureManager : NSObject
{
    id _internal;
}

+ (void)setGestureServiceEnabled:(_Bool)arg1;
+ (_Bool)isGestureServiceAvailable;
+ (_Bool)isGestureServiceEnabled;
@property(copy) CDUnknownBlockType gestureHandler;
- (void)dealloc;
- (id)initWithPriority:(int)arg1;
- (id)init;

@end

@interface CMGestureManagerInternal : NSObject
{
    int fPriority;
    struct CLConnectionClient *fLocationdConnection;
    CDUnknownBlockType fGestureHandler;
    NSObject<OS_dispatch_source> *fWatchDogTimer;
    NSObject<OS_dispatch_queue> *fPrivateQueue;
}

- (void)stopGestureUpdatesPrivate;
- (void)startGestureUpdatesWithHandlerPrivate:(CDUnknownBlockType)arg1;
- (void)stopWatchdogCheckinsPrivate;
- (void)startWatchdogCheckinsPrivate;
- (void)dealloc;
- (id)initWithPriority:(int)arg1;

@end

@interface CMGyroData : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) CDStruct_31142d93 rotationRate;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithRotationRate:(CDStruct_03942939)arg1 andTimestamp:(double)arg2;

@end

@interface CMGyroDataInternal : NSObject <NSCopying>
{
    CDStruct_03942939 fRotationRate;
}

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRotationRate:(CDStruct_03942939)arg1;
- (void)setRotationRate:(CDStruct_03942939)arg1;

@end

@interface CMLogItemInternal : NSObject
{
    double fTimestamp;
}

- (id)initWithTimestamp:(double)arg1;

@end

@interface CMMagnetometerData : CMLogItem
{
    id _internal;
}

@property(readonly, nonatomic) CDStruct_31142d93 magneticField;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMagneticField:(CDStruct_03942939)arg1 andTimestamp:(double)arg2;

@end

@interface CMMagnetometerDataInternal : NSObject <NSCopying>
{
    CDStruct_03942939 fMagneticField;
}

- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithMagneticField:(CDStruct_03942939)arg1;
- (void)setMagneticField:(CDStruct_03942939)arg1;

@end

@interface CMMotionActivity : CMLogItem
{
    struct CLMotionActivity fState;
}

- (id).cxx_construct;
- (id)description;
@property(readonly, nonatomic) _Bool cycling;
@property(readonly, nonatomic) _Bool automotive;
@property(readonly, nonatomic) _Bool running;
@property(readonly, nonatomic) _Bool walking;
@property(readonly, nonatomic) _Bool stationary;
@property(readonly, nonatomic) _Bool unknown;
@property(readonly, nonatomic) NSDate *startDate;
@property(readonly, nonatomic) long long confidence;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMotionActivity:(struct CLMotionActivity)arg1;

@end

@interface CMMotionActivityManager : NSObject
{
    struct CLConnectionClient *fLocationConnection;
    NSObject<OS_dispatch_queue> *fQueue;
    CDUnknownBlockType fHandler;
    NSOperationQueue *fHandlerQueue;
}

+ (_Bool)isActivityAvailable;
- (void)_handleQueryResponse:(struct CLConnectionMessage *)arg1 onQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)stopActivityUpdates;
- (void)startActivityUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)queryActivityStartingFromDate:(id)arg1 toDate:(id)arg2 toQueue:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (id)init;

@end

@interface CMMotionManager : NSObject
{
    id _internal;
}

+ (id)sharedManager;
+ (unsigned long long)availableAttitudeReferenceFrames;
- (void)stopMagnetometerUpdates;
- (void)startMagnetometerUpdates;
- (void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
@property(readonly) CMMagnetometerData *magnetometerData;
@property(nonatomic) double magnetometerUpdateInterval;
@property(readonly, nonatomic, getter=isMagnetometerActive) _Bool magnetometerActive;
@property(readonly, nonatomic, getter=isMagnetometerAvailable) _Bool magnetometerAvailable;
- (void)dismissDeviceMovementDisplay;
@property(nonatomic) _Bool showsDeviceMovementDisplay;
- (void)stopDeviceMotionUpdates;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(int)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(int)arg1;
- (void)startDeviceMotionUpdates;
- (void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
@property(readonly) CMDeviceMotion *deviceMotion; // @dynamic deviceMotion;
@property(readonly, nonatomic) int attitudeReferenceFrame; // @dynamic attitudeReferenceFrame;
@property(nonatomic) double deviceMotionUpdateInterval; // @dynamic deviceMotionUpdateInterval;
@property(readonly, nonatomic, getter=isDeviceMotionActive) _Bool deviceMotionActive; // @dynamic deviceMotionActive;
@property(readonly, nonatomic, getter=isDeviceMotionAvailable) _Bool deviceMotionAvailable; // @dynamic deviceMotionAvailable;
- (void)stopGyroUpdates;
- (void)startGyroUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)startGyroUpdates;
@property(readonly) CMGyroData *gyroData; // @dynamic gyroData;
@property(nonatomic) double gyroUpdateInterval; // @dynamic gyroUpdateInterval;
@property(readonly, nonatomic, getter=isGyroActive) _Bool gyroActive; // @dynamic gyroActive;
@property(readonly, nonatomic, getter=isGyroAvailable) _Bool gyroAvailable; // @dynamic gyroAvailable;
- (void)stopAccelerometerUpdates;
- (void)startAccelerometerUpdates;
- (void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
@property(readonly) CMAccelerometerData *accelerometerData; // @dynamic accelerometerData;
@property(nonatomic) double accelerometerUpdateInterval; // @dynamic accelerometerUpdateInterval;
@property(readonly, nonatomic, getter=isAccelerometerActive) _Bool accelerometerActive; // @dynamic accelerometerActive;
@property(readonly, nonatomic, getter=isAccelerometerAvailable) _Bool accelerometerAvailable; // @dynamic accelerometerAvailable;
- (void)dealloc;
- (id)init;

@end

@interface CMMotionManagerInternal : NSObject
{
    double fAccelerometerUpdateInterval;
    double fGyroUpdateInterval;
    double fDeviceMotionUpdateInterval;
    double fMagnetometerUpdateInterval;
    _Bool fShowsDeviceMovementDisplay;
}

- (void)dealloc;
- (id)init;

@end

@interface CMMotionUtils : NSObject
{
}

+ (void)tccServiceMotionAccess;
+ (id)sendMessageWithReplySync:(struct CLConnectionMessage *)arg1;
+ (id)logDirectory;

@end

@interface CMNatalieData : CMLogItem
{
    double fStartDate;
    double fNatalies;
    long long fSession;
    long long fRecordId;
}

- (id)description;
@property(readonly, nonatomic) long long recordId;
@property(readonly, nonatomic) long long session;
@property(readonly, nonatomic) NSNumber *natalies;
@property(readonly, nonatomic) NSDate *startDate;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithStartDate:(double)arg1 natalies:(double)arg2 session:(long long)arg3 recordId:(long long)arg4 timestamp:(double)arg5;

@end

@interface CMNatalimeter : NSObject
{
    CMNatalimeterInternal *_internal;
}

+ (_Bool)isNatalimeterAvailable;
+ (void)setUserProfile:(id)arg1 error:(id *)arg2;
+ (id)userProfile;
@property(readonly, nonatomic) CMNatalimeterInternal *_internal; // @synthesize _internal;
- (void)stopAbsoluteNatalimetryDataUpdates;
- (void)startAbsoluteNatalimetryDataUpdatesWithHandler:(CDUnknownBlockType)arg1;
- (void)queryAbsoluteNatalimetryDataSinceRecord:(long long)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setSession:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)init;

@end

@interface CMNatalimeterInternal : NSObject
{
    struct CLConnectionClient *fLocationdConnection;
    NSObject<OS_dispatch_queue> *fInternalQueue;
    NSObject<OS_dispatch_source> *fWatchdogTimer;
    _Bool fStartedUpdates;
    _Bool fResendActivityOverrideOnInterrupt;
    long long fActivityOverride;
}

- (void)_stopWatchdogCheckins;
- (void)_startWatchdogCheckins;
- (void)_startAbsoluteNatalimetryDataUpdatesWithHandler:(CDUnknownBlockType)arg1;
- (void)_handleQueryResponse:(struct CLConnectionMessage *)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)_setSession:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)_teardown;
- (void)dealloc;
- (id)init;

@end

@interface CMOdometer : NSObject
{
    CMOdometerProxy *_odometerProxy;
}

+ (_Bool)isOdometerAvailableForActivity:(long long)arg1;
@property(readonly, nonatomic) CMOdometerProxy *odometerProxy; // @synthesize odometerProxy=_odometerProxy;
- (void)stopOdometerUpdates;
- (void)startOdometerUpdatesForActivity:(long long)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)init;

@end

@interface CMOdometerData : NSObject <NSSecureCoding, NSCopying>
{
    NSDate *_startDate;
    NSDate *_endDate;
    NSNumber *_distance;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) NSNumber *distance; // @synthesize distance=_distance;
@property(readonly, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(readonly, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithDistance:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;

@end

@interface CMOdometerProxy : NSObject
{
    NSObject<OS_dispatch_queue> *fInternalQueue;
    NSObject<OS_dispatch_queue> *fCallbackQueue;
    struct CLConnectionClient *fLocationdConnection;
    long long _mode;
    double _totalDistance;
    NSDate *_startDate;
}

@property(retain) NSDate *startDate; // @synthesize startDate=_startDate;
@property double totalDistance; // @synthesize totalDistance=_totalDistance;
@property long long mode; // @synthesize mode=_mode;
- (void)_stopOdometerUpdates;
- (void)_startOdometerUpdatesForActivity:(long long)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)_startDaemonConnection;
- (void)_teardown;
- (void)dealloc;
- (id)init;

@end

@interface CMOnBodyStatus : CMLogItem
{
    int fResult;
    int fConfidence;
}

- (id)description;
@property(readonly, nonatomic) long long confidence;
@property(readonly, nonatomic) long long result;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithOnBodyResult:(int)arg1 confidence:(int)arg2 timestamp:(double)arg3;

@end

@interface CMOnBodyStatusManager : NSObject
{
    struct CLConnectionClient *fLocationdConnection;
    _Bool fSubscribedToOnBodyStatusDetection;
    NSObject<OS_dispatch_queue> *fOnBodyStatusQueue;
    CDUnknownBlockType fOnBodyStatusHandler;
    NSObject<OS_dispatch_source> *fWatchdogTimer;
    NSObject<OS_dispatch_queue> *fPrivateQueue;
}

+ (id)sharedOnBodyStatusManager;
+ (_Bool)isOnBodyStatusDetectionAvailable;
- (void)stopOnBodyStatusDetectionPrivate;
- (void)startOnBodyStatusDetectionPrivateToQueue:(id)arg1 withParameters:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)stopWatchdogCheckinsPrivate;
- (void)startWatchdogCheckinsPrivate;
- (void)disconnect;
- (void)connect;
- (void)setPropertiesWithDictionary:(id)arg1;
- (void)stopOnBodyStatusDetection;
- (void)startOnBodyStatusDetectionToQueue:(id)arg1 withParameters:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)init;

@end

@interface CMPedometer : NSObject
{
    CMPedometerProxy *_pedometerProxy;
}

+ (_Bool)isFloorCountingAvailable;
+ (_Bool)isDistanceAvailable;
+ (_Bool)isStepCountingAvailable;
@property(readonly, nonatomic) CMPedometerProxy *pedometerProxy; // @synthesize pedometerProxy=_pedometerProxy;
- (void)queryPedometerDataSinceRecord:(long long)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)stopPedometerUpdates;
- (void)startPedometerUpdatesFromDate:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)queryPedometerDataFromDate:(id)arg1 toDate:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)init;

@end

@interface CMPedometerData : NSObject <NSSecureCoding, NSCopying>
{
    NSDate *fStartDate;
    NSDate *fEndDate;
    NSNumber *fNumberOfSteps;
    NSNumber *fDistance;
    NSNumber *fFloorAscended;
    NSNumber *fFloorDescended;
    NSNumber *fRecordId;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) long long recordId;
@property(readonly, nonatomic) NSNumber *floorsDescended;
@property(readonly, nonatomic) NSNumber *floorsAscended;
@property(readonly, nonatomic) NSNumber *distance;
@property(readonly, nonatomic) NSNumber *numberOfSteps;
@property(readonly, nonatomic) NSDate *endDate;
@property(readonly, nonatomic) NSDate *startDate;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithStartDate:(double)arg1 endDate:(double)arg2 steps:(int)arg3 distance:(double)arg4 floorAscended:(int)arg5 floorDescended:(int)arg6 recordID:(int)arg7;

@end

@interface CMPedometerProxy : NSObject
{
    NSObject<OS_dispatch_queue> *fInternalQueue;
    NSObject<OS_dispatch_queue> *fAppQueue;
    struct CLConnectionClient *fLocationdConnection;
    CDUnknownBlockType fHandler;
    long long fStepCountFromStart;
    long long fStepCountOffset;
    double fDistanceFromStart;
    double fDistanceOffset;
    int fFloorAscendedStart;
    int fFloorAscendedOffset;
    int fFloorDescendedStart;
    int fFloorDescendedOffset;
    double fValidStartDate;
    _Bool fStopUpdates;
}

- (void)_handleRecordQueryResponse:(struct CLConnectionMessage *)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)_queryPedometerDataSinceRecord:(long long)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)_handleQueryResponse:(struct CLConnectionMessage *)arg1 onQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_stopPedometerUpdates;
- (void)_startPedometerUpdatesFromDate:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)_queryPedometerDataFromDate:(id)arg1 toDate:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_internalQueryPedometerDataFromDate:(id)arg1 toDate:(id)arg2 onQueue:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)_teardown;
- (void)dealloc;
- (id)init;

@end

@interface CMStepCounter : NSObject
{
    CMStepCounterProxy *_stepcounterProxy;
}

+ (_Bool)isStepCountingAvailable;
@property(readonly, nonatomic) CMStepCounterProxy *stepcounterProxy; // @synthesize stepcounterProxy=_stepcounterProxy;
@property(readonly) _Bool everRequested;
@property _Bool enabled;
- (void)deleteHistory;
- (void)getTotalCountToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)stopStepCountingUpdates;
- (void)startStepCountingUpdatesToQueue:(id)arg1 updateOn:(long long)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)queryStepCountStartingFrom:(id)arg1 to:(id)arg2 toQueue:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (id)init;

@end

@interface CMStepCounterProxy : NSObject
{
    struct CLConnectionClient *fLocationdConnection;
    _Bool fStartedUpdates;
    NSObject<OS_dispatch_queue> *fInternalQueue;
    long long fStepCountFromStart;
    long long fPrevStepCount;
}

- (void)_handleQueryResponse:(struct CLConnectionMessage *)arg1 onQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_startStepCountingUpdatesToQueue:(id)arg1 updateOn:(long long)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)_queryStepCountStartingFromInternal:(id)arg1 to:(id)arg2 toQueue:(id)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)_teardown;
- (void)dealloc;
- (id)init;

@end

@interface NSString (CLExtensions)
- (_Bool)hasSuffixInsensitive:(id)arg1;
@end

@interface _CLMainService : NSObject <CLIntersiloServiceProtocol>
{
}

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

@interface _Locationd : NSObject <CLIntersiloServiceProtocol>
{
}

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;

// Remaining properties
@property(nonatomic) _Bool valid;

@end

