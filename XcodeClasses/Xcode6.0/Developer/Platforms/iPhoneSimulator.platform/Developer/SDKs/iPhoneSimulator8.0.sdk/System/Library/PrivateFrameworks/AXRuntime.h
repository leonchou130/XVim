//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AXRuntime.framework/AXRuntime
// UUID: 7DC5A2ED-4BB1-3453-AD1C-C9EE8FFE68CC
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1541.4.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AXGroupable <NSObject>
@property(nonatomic) AXElementGroup *parentGroup;
@property(readonly, nonatomic) struct CGRect frame;
- (AXElementGroup *)keyboardContainer;
- (_Bool)isGroup;
- (AXElementGroup *)highestAncestorGroup;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol UIElementProtocol <NSObject>
+ (id)uiElementAtCoordinate:(struct CGPoint)arg1 hitTestOrientation:(int)arg2;
+ (id)uiElementAtCoordinate:(struct CGPoint)arg1;
+ (void)applyElementAttributeCacheScheme:(int)arg1;
- (_Bool)isMockElement;
- (struct _NSRange)nextCursorRangeInDirection:(unsigned long long)arg1 unit:(unsigned long long)arg2 outputRange:(struct _NSRange *)arg3 currentCursorRange:(struct _NSRange)arg4;
- (struct _NSRange)nextCursorRangeInDirection:(unsigned long long)arg1 unit:(unsigned long long)arg2 outputRange:(struct _NSRange *)arg3;
- (void)setAXAttribute:(int)arg1 withObject:(id)arg2 synchronous:(_Bool)arg3;
- (void)setAXAttribute:(int)arg1 withObject:(id)arg2;
- (void)setAXAttribute:(int)arg1 withArray:(NSArray *)arg2;
- (void)setAXAttribute:(int)arg1 withUIElementArray:(NSArray *)arg2;
- (void)setAXAttribute:(int)arg1 withUIElement:(id)arg2;
- (void)setAXAttribute:(int)arg1 withRange:(struct _NSRange)arg2;
- (void)setAXAttribute:(int)arg1 withSize:(struct CGSize)arg2;
- (void)setAXAttribute:(int)arg1 withPoint:(struct CGPoint)arg2;
- (void)setAXAttribute:(int)arg1 withNumber:(NSNumber *)arg2;
- (void)setAXAttribute:(int)arg1 withFloat:(float)arg2;
- (void)setAXAttribute:(int)arg1 withLong:(long long)arg2;
- (void)setAXAttribute:(int)arg1 withString:(NSString *)arg2;
- (void)setAXAttribute:(int)arg1 withBOOL:(_Bool)arg2;
- (NSArray *)previousElementsWithCount:(unsigned long long)arg1;
- (NSArray *)nextElementsWithCount:(unsigned long long)arg1;
- (void)updateCacheWithAttributes:(NSArray *)arg1;
- (void)updateCache:(int)arg1;
- (void)disableCache;
- (void)enableCache:(_Bool)arg1;
- (_Bool)performAXAction:(int)arg1 withValue:(id)arg2;
- (_Bool)performAXAction:(int)arg1;
- (_Bool)canPerformAXAction:(int)arg1;
- (int)pid;
- (id)objectWithAXAttribute:(int)arg1 parameter:(void *)arg2;
- (NSArray *)uiElementsWithAttribute:(int)arg1 parameter:(void *)arg2;
- (NSArray *)uiElementsWithAttribute:(int)arg1;
- (id)objectWithAXAttribute:(int)arg1;
- (struct _NSRange)rangeWithAXAttribute:(int)arg1;
- (struct CGPoint)pointWithAXAttribute:(int)arg1;
- (struct CGPath *)pathWithAXAttribute:(int)arg1;
- (struct CGRect)rectWithAXAttribute:(int)arg1;
- (NSNumber *)numberWithAXAttribute:(int)arg1;
- (_Bool)boolWithAXAttribute:(int)arg1;
- (NSString *)stringWithAXAttribute:(int)arg1;
- (NSArray *)arrayWithAXAttribute:(int)arg1;
- (_Bool)isValidForApplication:(NSObject<UIElementProtocol> *)arg1;
- (_Bool)isValid;
@end

@interface AXAttributedString : NSString <NSCopying>
{
    struct __CFAttributedString *_string;
}

+ (id)string;
+ (id)axAttributedStringWithString:(id)arg1;
- (id)description;
- (id)axAttributedStringDescription;
- (id)substringFromIndex:(unsigned long long)arg1;
- (_Bool)hasAttribute:(id)arg1;
- (id)coalescedFontAttributes;
- (id)attributedSubstringFromRange:(struct _NSRange)arg1;
- (id)uppercaseString;
- (id)lowercaseString;
- (id)string;
- (_Bool)isAXAttributedString;
- (void)enumerateAttributesUsingBlock:(CDUnknownBlockType)arg1;
- (id)attributeValueForKey:(id)arg1;
- (id)attributesAtIndex:(long long)arg1 effectiveRange:(struct _NSRange *)arg2;
- (void)appendAXAttributedString:(id)arg1;
- (void)appendString:(id)arg1;
- (void)setAttributes:(id)arg1 withRange:(struct _NSRange)arg2;
- (void)setAttribute:(id)arg1 forKey:(id)arg2 withRange:(struct _NSRange)arg3;
- (void)setAttribute:(id)arg1 forKey:(id)arg2;
- (void)setAttributes:(id)arg1;
- (struct __CFAttributedString *)cfAttributedString;
- (void)replaceString:(struct __CFString *)arg1;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (void)convertAttachmentsWithBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCFAttributedString:(struct __CFAttributedString *)arg1;
- (id)initWithString:(id)arg1;

@end

@interface AXElement : NSObject <AXGroupable>
{
    _Bool _representsScannerGroup;
    AXUIElement *_uiElement;
    AXElementGroup *_parentGroup;
}

+ (id)systemWideElement;
+ (id)elementAtCoordinate:(struct CGPoint)arg1 withVisualPadding:(_Bool)arg2;
+ (id)elementWithUIElement:(id)arg1;
+ (id)elementWithAXUIElement:(struct __AXUIElement *)arg1;
@property(readonly, nonatomic) _Bool representsScannerGroup; // @synthesize representsScannerGroup=_representsScannerGroup;
@property(nonatomic) AXElementGroup *parentGroup; // @synthesize parentGroup=_parentGroup;
@property(retain, nonatomic) AXUIElement *uiElement; // @synthesize uiElement=_uiElement;
- (id)_axElementsForAXUIElements:(id)arg1;
- (_Bool)isGroup;
- (id)highestAncestorGroup;
- (id)opaqueParent;
- (id)opaqueElementInDirection:(int)arg1 startElement:(id)arg2 searchTraits:(unsigned long long)arg3;
- (void)scrollToBottom;
- (void)scrollToTop;
- (void)decreaseAutoscrollSpeed;
- (void)increaseAutoscrollSpeed;
@property(readonly, nonatomic) _Bool isAutoscrolling;
- (void)pauseAutoscrolling;
- (void)autoscrollInDirection:(int)arg1;
@property(retain, nonatomic) AXElement *autoscrollTarget;
@property(readonly, nonatomic) _Bool canPerformEscape;
@property(readonly, nonatomic) int scannerActivateBehavior;
@property(readonly, nonatomic) NSArray *scannerRootGroup;
@property(readonly, nonatomic) _Bool isScannerElement;
- (void)insertTextAtCurrentPosition:(id)arg1;
- (void)insertText:(id)arg1 atPosition:(long long)arg2;
- (_Bool)zoomOut;
- (_Bool)zoomIn;
- (_Bool)longPress;
- (_Bool)press;
- (_Bool)canPerformSecondaryActivate;
- (_Bool)canPerformActivate;
@property(readonly, nonatomic) NSArray *supportedGestures;
@property(readonly, nonatomic) unsigned int windowContextId;
- (_Bool)performAction:(int)arg1 withValue:(id)arg2;
- (_Bool)performAction:(int)arg1;
- (_Bool)supportsAction:(int)arg1;
- (_Bool)canScrollInAtLeastOneDirection;
- (void)scrollToVisible;
- (_Bool)canPerformTrackingDetail;
@property(readonly, nonatomic) _Bool canPerformZoom;
@property(readonly, nonatomic) _Bool isAccessibilityOpaqueElementProvider;
- (double)distanceToPoint:(struct CGPoint)arg1;
- (double)distanceToElement:(id)arg1;
- (_Bool)hasOnlyTraits:(unsigned long long)arg1;
- (_Bool)hasAnyTraits:(unsigned long long)arg1;
- (_Bool)hasAllTraits:(unsigned long long)arg1;
- (id)previousElementsWithCount:(unsigned long long)arg1;
- (id)nextElementsWithCount:(unsigned long long)arg1;
@property(nonatomic) struct _NSRange selectedTextRange;
@property(readonly, nonatomic) NSArray *customActions;
@property(nonatomic) _Bool assistiveTechFocused;
@property(readonly, nonatomic) NSArray *typingCandidates;
@property(readonly, nonatomic) NSArray *textOperations;
@property(readonly, nonatomic) _Bool hasVariantKeys;
@property(readonly, nonatomic) NSArray *variantKeys;
- (_Bool)isMap;
@property(readonly, nonatomic) _Bool hasTextEntry;
@property(readonly, nonatomic) _Bool hasWebContent;
@property(readonly, nonatomic) _Bool isMathEquation;
- (id)keyboardContainer;
@property(readonly, nonatomic) _Bool isKeyboardKey;
@property(readonly, nonatomic) AXElement *touchContainer;
@property(readonly, nonatomic) _Bool isTouchContainer;
@property(readonly, nonatomic) _Bool isValid;
@property(readonly, nonatomic) struct CGRect visibleFrame;
@property(readonly, nonatomic) struct CGRect textCursorFrame;
@property(readonly, nonatomic) struct CGRect frame;
@property(readonly, nonatomic) struct CGPoint visiblePoint;
@property(readonly, nonatomic) struct CGPoint centerPoint;
@property(readonly, nonatomic) unsigned long long traits;
@property(readonly, nonatomic) NSString *identifier;
@property(readonly, nonatomic) NSString *language;
@property(readonly, nonatomic) struct CGPath *path;
@property(readonly, nonatomic) NSString *value;
@property(readonly, nonatomic) NSString *hint;
@property(readonly, nonatomic) NSString *label;
@property(readonly, nonatomic) _Bool isVisible;
@property(readonly, nonatomic) _Bool isAccessibleElement;
- (id)elementsMatchingText:(id)arg1;
@property(readonly, nonatomic) _Bool isSpringBoard;
@property(readonly, nonatomic) NSString *bundleId;
@property(readonly, nonatomic) AXElement *firstElementInApplicationForFocus;
@property(readonly, nonatomic) AXElement *firstElementInApplication;
@property(readonly, nonatomic) AXElement *firstResponder;
@property(readonly, nonatomic) NSArray *visibleElements;
@property(readonly, nonatomic) _Bool isScreenLocked;
@property(readonly, nonatomic) int applicationOrientation;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 fromContextId:(unsigned int)arg2;
- (struct CGRect)convertRect:(struct CGRect)arg1 fromContextId:(unsigned int)arg2;
- (void)sendUserEventOccurred;
@property(readonly, nonatomic) AXElement *accessibilityUIServerApplication;
@property(readonly, nonatomic) AXElement *systemApplication;
@property(readonly, nonatomic) AXElement *springBoardApplication;
@property(readonly, nonatomic) AXElement *currentApplication;
@property(nonatomic, getter=isPassivelyListeningForEvents) _Bool passivelyListeningForEvents;
@property(readonly, nonatomic) _Bool isSystemWideElement;
@property(readonly, nonatomic) struct __AXUIElement *elementRef;
- (id)elementForAttribute:(int)arg1;
@property(readonly, copy) NSString *description;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithUIElement:(id)arg1;
- (id)initWithAXUIElement:(struct __AXUIElement *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXElementFetcher : NSObject
{
    NSObject<OS_dispatch_queue> *_elementFetchQueue;
    NSObject<OS_dispatch_queue> *_elementAccessQueue;
    struct __AXObserver *_axRuntimeNotificationObserver;
    unsigned long long _scheduledFetchEvent;
    NSObject<OS_dispatch_source> *_eventCoalesceTimer;
    _Bool _enabled;
    _Bool _eventManagementEnabled;
    _Bool _groupingEnabled;
    _Bool _shouldUsePadInterfaceHeuristics;
    _Bool _fetchingElements;
    _Bool _didSendFakeScreenChangeOnLastFetch;
    id <AXElementFetcherDelegate> _delegate;
    long long _fetchPolicy;
    NSMapTable *_fetchObservers;
    unsigned long long _activeFetchEvents;
    NSArray *_elementCache;
    AXElementGroup *_rootGroupCache;
    AXElementGroup *_keyboardGroupCache;
    AXElement *_currentApp;
    AXVisualElementGrouper *_visualElementGrouper;
    AXElementGroupPruner *_elementGroupPruner;
    NSMutableDictionary *_postFetchFilters;
}

+ (id)currentAppWithPositionHint:(struct CGPoint)arg1;
+ (id)_applicationForElement:(id)arg1;
+ (id)springBoardElement;
+ (id)systemWideElement;
@property(nonatomic) _Bool didSendFakeScreenChangeOnLastFetch; // @synthesize didSendFakeScreenChangeOnLastFetch=_didSendFakeScreenChangeOnLastFetch;
@property(retain, nonatomic) NSMutableDictionary *postFetchFilters; // @synthesize postFetchFilters=_postFetchFilters;
@property(nonatomic, getter=isFetchingElements) _Bool fetchingElements; // @synthesize fetchingElements=_fetchingElements;
@property(nonatomic) _Bool shouldUsePadInterfaceHeuristics; // @synthesize shouldUsePadInterfaceHeuristics=_shouldUsePadInterfaceHeuristics;
@property(retain, nonatomic) AXElementGroupPruner *elementGroupPruner; // @synthesize elementGroupPruner=_elementGroupPruner;
@property(retain, nonatomic) AXVisualElementGrouper *visualElementGrouper; // @synthesize visualElementGrouper=_visualElementGrouper;
@property(retain, nonatomic) AXElement *currentApp; // @synthesize currentApp=_currentApp;
@property(nonatomic, getter=isGroupingEnabled) _Bool groupingEnabled; // @synthesize groupingEnabled=_groupingEnabled;
@property(retain, nonatomic) AXElementGroup *keyboardGroupCache; // @synthesize keyboardGroupCache=_keyboardGroupCache;
@property(retain, nonatomic) AXElementGroup *rootGroupCache; // @synthesize rootGroupCache=_rootGroupCache;
@property(nonatomic, getter=isEventManagementEnabled) _Bool eventManagementEnabled; // @synthesize eventManagementEnabled=_eventManagementEnabled;
@property(retain, nonatomic) NSArray *elementCache; // @synthesize elementCache=_elementCache;
@property(nonatomic) unsigned long long activeFetchEvents; // @synthesize activeFetchEvents=_activeFetchEvents;
@property(retain, nonatomic) NSMapTable *fetchObservers; // @synthesize fetchObservers=_fetchObservers;
@property(nonatomic) long long fetchPolicy; // @synthesize fetchPolicy=_fetchPolicy;
@property(nonatomic) id <AXElementFetcherDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void)_debugLogElementCache;
- (id)_debugStringForFetchEvents:(unsigned long long)arg1;
- (id)_debugStringForPolicy:(long long)arg1;
- (_Bool)_fetchGroups:(_Bool)arg1;
- (id)_filterGroup:(id)arg1 withFilter:(CDUnknownBlockType)arg2;
- (id)_groupWithItems:(id)arg1 groupTraits:(int)arg2 label:(id)arg3 currentPid:(int)arg4;
- (id)_groupWithDictionary:(id)arg1 currentPid:(int)arg2;
- (void)updateKeyboardGroup:(id)arg1;
- (id)findGroupableMatchingBlock:(CDUnknownBlockType)arg1;
- (id)_findGroupableMatchingBlock:(CDUnknownBlockType)arg1 inElementGroup:(id)arg2;
- (id)findGroupableMatchingGroupable:(id)arg1;
- (id)_findGroupableMatchingGroupable:(id)arg1 inElementGroup:(id)arg2;
- (id)previousSiblingOfGroupable:(id)arg1 didWrap:(_Bool *)arg2;
- (id)nextSiblingOfGroupable:(id)arg1 didWrap:(_Bool *)arg2;
- (id)_siblingOfGroupable:(id)arg1 forDirection:(_Bool)arg2 didWrap:(_Bool *)arg3;
- (id)previousSiblingOfElement:(id)arg1 didWrap:(_Bool *)arg2;
- (id)nextSiblingOfElement:(id)arg1 didWrap:(_Bool *)arg2;
- (id)lastElement;
- (id)firstElement;
- (id)closestElementToPoint:(struct CGPoint)arg1;
- (id)closestElementToElement:(id)arg1;
- (id)_findElementsMatchingBlock:(CDUnknownBlockType)arg1 internalRequest:(_Bool)arg2;
- (id)findElementsMatchingBlock:(CDUnknownBlockType)arg1;
- (id)findElementMatchingBlock:(CDUnknownBlockType)arg1;
- (id)findElementMatchingElement:(id)arg1;
- (id)_filterElements:(id)arg1 withFilter:(CDUnknownBlockType)arg2;
- (void)removeAllPostFetchFilters;
- (void)removePostFetchFilterWithIdentifier:(id)arg1;
- (void)addPostFetchFilter:(CDUnknownBlockType)arg1 withIdentifier:(id)arg2;
- (id)_fetchFirstElements;
- (id)_fetchVisibleElements;
- (_Bool)_fetchElements:(_Bool)arg1;
- (void)_sendFakeScreenChangeIfNecessaryForGroup:(id)arg1 orElements:(id)arg2 appDidChange:(_Bool)arg3;
- (_Bool)_shouldConsiderCacheAsInvalid;
- (void)disableEventManagement;
- (void)enableEventManagement;
- (id)_axNotificationsForManagedEvents;
- (_Bool)_fetchEventCanBeManaged:(unsigned long long)arg1;
- (long long)_priorityForFetchEvent:(unsigned long long)arg1;
- (double)_delayForFetchEvent:(unsigned long long)arg1;
- (void)_scheduleFetchEvent:(unsigned long long)arg1;
- (void)_tearDownEventCoalesceTimer;
- (void)_fetchEventOccurred:(unsigned long long)arg1;
- (void)fetchEventOccurred:(unsigned long long)arg1;
- (void)refresh;
- (void)removeFetchEvents:(unsigned long long)arg1;
- (void)addFetchEvents:(unsigned long long)arg1;
- (void)_notifyObserversDidScheduleFetchEvent:(unsigned long long)arg1;
- (void)_notifyObserversDidFetchElementsForEvent:(unsigned long long)arg1 foundNewElements:(_Bool)arg2;
- (void)_notifyObserversWillFetchElementsForEvent:(unsigned long long)arg1;
- (void)unregisterAllFetchObservers;
- (void)unregisterFetchObserver:(id)arg1;
- (void)registerFetchObserver:(id)arg1 targetQueue:(id)arg2;
@property(readonly, nonatomic) AXElementGroup *lastKeyboardRow;
@property(readonly, nonatomic) AXElementGroup *firstKeyboardRow;
@property(readonly, nonatomic) AXElementGroup *keyboardGroup;
@property(readonly, nonatomic) AXElementGroup *rootGroup;
@property(readonly, nonatomic) NSArray *availableElements;
@property(readonly, nonatomic) _Bool willFetchElements;
- (_Bool)_updateCurrentApp;
- (id)description;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 fetchEvents:(unsigned long long)arg2 fetchPolicy:(long long)arg3 enableEventManagement:(_Bool)arg4 enableGrouping:(_Bool)arg5 beginEnabled:(_Bool)arg6;

@end

@interface AXElementGroup : NSArray <AXGroupable>
{
    NSArray *_elementStore;
    _Bool _rootGroup;
    int _groupTraits;
    id <AXElementGroupGenerator> _generator;
    NSHashTable *_groupObservers;
    AXElementGroup *_parentGroup;
    NSString *_label;
}

+ (id)groupWithGenerator:(id)arg1;
+ (id)groupWithElements:(id)arg1 label:(id)arg2;
+ (id)groupWithElements:(id)arg1;
@property(readonly, nonatomic) NSString *label; // @synthesize label=_label;
@property(nonatomic) AXElementGroup *parentGroup; // @synthesize parentGroup=_parentGroup;
@property(retain, nonatomic) NSHashTable *groupObservers; // @synthesize groupObservers=_groupObservers;
@property(nonatomic, getter=isRootGroup) _Bool rootGroup; // @synthesize rootGroup=_rootGroup;
@property(nonatomic) int groupTraits; // @synthesize groupTraits=_groupTraits;
@property(nonatomic) id <AXElementGroupGenerator> generator; // @synthesize generator=_generator;
- (id)_debugFullDescriptionWithIndent:(id)arg1;
- (id)debugFullDescription;
- (id)_debugBriefDescription;
- (id)_debugDescriptionForTraits;
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
- (id)descriptionWithLocale:(id)arg1;
- (void)_notifyGroupObserversDidTransferStateToGroup:(id)arg1;
- (void)_notifyGroupObserversWillTransferStateToGroup:(id)arg1;
- (void)unregisterAllGroupObservers;
- (void)unregisterGroupObserver:(id)arg1;
- (void)registerGroupObserver:(id)arg1;
@property(readonly, nonatomic) unsigned long long numberOfElements;
@property(readonly, nonatomic) _Bool allowsVisualGroupingOfChildren;
@property(readonly, nonatomic) _Bool shouldBeUngrouped;
@property(readonly, nonatomic) _Bool allowsChangingExistingGroupingOfContents;
@property(readonly, nonatomic) _Bool canBeReplacedByChildren;
@property(readonly, nonatomic) _Bool canBeGroupedWithOtherGroupables;
- (_Bool)isKeyboardRow;
- (_Bool)isKeyboardContainer;
- (id)keyboardContainer;
- (id)keyboardRow;
- (id)keyboardContainerRows;
- (id)firstLeafDescendant;
- (id)ancestorPassingTest:(CDUnknownBlockType)arg1;
- (id)descendantsPassingTest:(CDUnknownBlockType)arg1;
- (id)firstDescendantPassingTest:(CDUnknownBlockType)arg1;
- (id)firstDescendantMatchingItem:(id)arg1;
- (id)childrenPassingTest:(CDUnknownBlockType)arg1;
- (id)firstChildPassingTest:(CDUnknownBlockType)arg1;
- (id)firstChildMatchingItem:(id)arg1;
- (id)previousSiblingOfChild:(id)arg1 didWrap:(_Bool *)arg2;
- (id)nextSiblingOfChild:(id)arg1 didWrap:(_Bool *)arg2;
- (id)_siblingOfChild:(id)arg1 inDirection:(_Bool)arg2 didWrap:(_Bool *)arg3;
- (id)lastChild;
- (id)firstChild;
- (void)_generateGroupsIfNeeded;
- (_Bool)isGroup;
- (id)highestAncestorGroup;
@property(readonly, nonatomic) struct CGRect frame;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)_transferStateToGroup:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)groupByReplacingGroupable:(id)arg1 withGroupable:(id)arg2;
- (id)groupByRemovingGroupable:(id)arg1;
- (id)groupByAppendingGroupable:(id)arg1;
- (id)groupByPrependingGroupable:(id)arg1;
- (void)dealloc;
- (void)_commonInitWithElements:(id)arg1 label:(id)arg2 generator:(id)arg3;
- (id)initWithGenerator:(id)arg1;
- (id)initWithElements:(id)arg1 label:(id)arg2;

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AXElementGroupPruner : NSObject
{
}

- (id)pruneRootGroup:(id)arg1;
- (id)_prunedGroupable:(id)arg1;

@end

@interface AXElementGrouper : NSObject
{
    unsigned long long _minimumGroupSize;
    unsigned long long _maximumGroupSize;
    unsigned long long _preferredGroupSize;
    double _thresholdForDeterminingEqualSize;
}

@property(nonatomic) double thresholdForDeterminingEqualSize; // @synthesize thresholdForDeterminingEqualSize=_thresholdForDeterminingEqualSize;
@property(nonatomic) unsigned long long preferredGroupSize; // @synthesize preferredGroupSize=_preferredGroupSize;
@property(nonatomic) unsigned long long maximumGroupSize; // @synthesize maximumGroupSize=_maximumGroupSize;
@property(nonatomic) unsigned long long minimumGroupSize; // @synthesize minimumGroupSize=_minimumGroupSize;
- (id)_groupablesForItems:(id)arg1;
- (id)_buildHierarchyForGroup:(id)arg1 indexOfKeyboard:(unsigned long long *)arg2;
- (id)_flattenHierarchyForGroup:(id)arg1 rootLevel:(_Bool)arg2;
- (_Bool)_frame:(struct CGRect)arg1 isApproximatelySameSizeAsFrame:(struct CGRect)arg2;
- (id)_groupRemovingImpossibleGroups:(id)arg1 isRootLevel:(_Bool)arg2;
- (id)groupElementsInRootGroup:(id)arg1;
- (id)initWithPadInterfaceHeuristics:(_Bool)arg1;

@end

@interface AXObserverElementPair : NSObject
{
    id _observer;
}

- (id)description;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) id observer; // @synthesize observer=_observer;
- (void)dealloc;
- (id)initWithObserver:(id)arg1;

@end

@interface AXRemoteElement : NSObject
{
    NSString *_uuid;
    int _remotePid;
    unsigned int _contextId;
    _Bool _onClientSide;
    id <AXRemoteElementChildrenDelegate> _remoteChildrenDelegate;
    NSMutableSet *_allChildren;
    _Bool _deniesDirectAppConnection;
    _Bool _remoteSideShouldActAsOpaqueElementProvider;
    unsigned int _machPort;
    id _accessibilityContainer;
}

+ (_Bool)registerRemoteElement:(id)arg1;
+ (id)remoteElementForContextId:(unsigned int)arg1;
+ (id)remoteElementForBlock:(CDUnknownBlockType)arg1;
+ (void)initialize;
@property(nonatomic) _Bool remoteSideShouldActAsOpaqueElementProvider; // @synthesize remoteSideShouldActAsOpaqueElementProvider=_remoteSideShouldActAsOpaqueElementProvider;
@property(nonatomic) _Bool deniesDirectAppConnection; // @synthesize deniesDirectAppConnection=_deniesDirectAppConnection;
@property(nonatomic) id accessibilityContainer; // @synthesize accessibilityContainer=_accessibilityContainer;
@property(nonatomic) unsigned int machPort; // @synthesize machPort=_machPort;
@property(nonatomic) id <AXRemoteElementChildrenDelegate> remoteChildrenDelegate; // @synthesize remoteChildrenDelegate=_remoteChildrenDelegate;
@property(nonatomic) _Bool onClientSide; // @synthesize onClientSide=_onClientSide;
@property(nonatomic) unsigned int contextId; // @synthesize contextId=_contextId;
@property(retain, nonatomic) NSString *uuid; // @synthesize uuid=_uuid;
@property(nonatomic) int remotePid; // @synthesize remotePid=_remotePid;
- (id)description;
- (_Bool)isAccessibilityOpaqueElementProvider;
- (struct CGRect)accessibilityFrame;
- (void)unregister;
- (id)accessibilityContainerElements;
- (id)_accessibilitySortedElementsWithin;
- (id)_accessibilityLastElement;
- (id)_accessibilityFirstElement;
- (id)_accessibilityResponderElement;
- (id)_remoteElementWithAttribute:(int)arg1;
@property(readonly, nonatomic) unsigned long long uuidHash;
- (void)dealloc;
- (id)_accessibilityTextViewTextOperationResponder;
- (id)_accessibilityTextOperations;
- (void)platformCleanup;
- (id)initWithUUID:(id)arg1 andRemotePid:(int)arg2 andContextId:(unsigned int)arg3;

@end

@interface AXSimpleRuntimeManager : NSObject
{
    _Bool _systemWideServer;
    CDUnknownBlockType _parameterizedAttributeCallback;
    CDUnknownBlockType _attributeCallback;
    CDUnknownBlockType _setAttributeCallback;
    CDUnknownBlockType _performActionCallback;
    CDUnknownBlockType _clientObserverCallback;
    CDUnknownBlockType _hitTestCallback;
    CDUnknownBlockType _applicationElementCallback;
}

+ (id)sharedManager;
@property(copy, nonatomic) CDUnknownBlockType applicationElementCallback; // @synthesize applicationElementCallback=_applicationElementCallback;
@property(copy, nonatomic) CDUnknownBlockType hitTestCallback; // @synthesize hitTestCallback=_hitTestCallback;
@property(copy, nonatomic) CDUnknownBlockType clientObserverCallback; // @synthesize clientObserverCallback=_clientObserverCallback;
@property(copy, nonatomic) CDUnknownBlockType performActionCallback; // @synthesize performActionCallback=_performActionCallback;
@property(copy, nonatomic) CDUnknownBlockType setAttributeCallback; // @synthesize setAttributeCallback=_setAttributeCallback;
@property(copy, nonatomic) CDUnknownBlockType attributeCallback; // @synthesize attributeCallback=_attributeCallback;
@property(copy, nonatomic) CDUnknownBlockType parameterizedAttributeCallback; // @synthesize parameterizedAttributeCallback=_parameterizedAttributeCallback;
@property(nonatomic) _Bool systemWideServer; // @synthesize systemWideServer=_systemWideServer;
- (void)start;

@end

@interface AXUIElement : NSObject <UIElementProtocol>
{
    struct __AXUIElement *_axElement;
    long long _cachedRefCount;
    struct __CFDictionary *_cachedAttributes;
    _Bool _isValid;
}

+ (id)uiApplicationAtCoordinate:(struct CGPoint)arg1;
+ (id)uiElementAtCoordinate:(struct CGPoint)arg1 startWithElement:(id)arg2;
+ (id)uiElementAtCoordinate:(struct CGPoint)arg1 hitTestOrientation:(int)arg2;
+ (id)uiElementAtCoordinate:(struct CGPoint)arg1;
+ (id)uiElementWithAXElement:(struct __AXUIElement *)arg1 cache:(struct __CFDictionary *)arg2;
+ (id)uiElementWithAXElement:(struct __AXUIElement *)arg1;
+ (void)initialize;
+ (void)applyElementAttributeCacheScheme:(int)arg1;
+ (id)uiSystemWideApplication;
+ (struct __AXUIElement *)systemWideAXUIElement;
@property(nonatomic) struct __CFDictionary *cachedAttributes; // @synthesize cachedAttributes=_cachedAttributes;
- (struct _NSRange)nextCursorRangeInDirection:(unsigned long long)arg1 unit:(unsigned long long)arg2 outputRange:(struct _NSRange *)arg3 currentCursorRange:(struct _NSRange)arg4;
- (struct _NSRange)nextCursorRangeInDirection:(unsigned long long)arg1 unit:(unsigned long long)arg2 outputRange:(struct _NSRange *)arg3;
- (struct _NSRange)_lineRangeForPosition:(unsigned long long)arg1;
- (long long)_lineEndPosition;
- (long long)_lineStartPosition;
- (id)_valueForRange:(struct _NSRange)arg1;
- (id)_attributedValueForRange:(struct _NSRange)arg1;
- (id)_objectForRange:(struct _NSRange)arg1 withParameterizedAttribute:(int)arg2;
- (struct _NSRange)_selectedTextRange;
- (void)setAXAttribute:(int)arg1 withObject:(id)arg2;
- (_Bool)isMockElement;
- (void)setAXAttribute:(int)arg1 withObject:(id)arg2 synchronous:(_Bool)arg3;
- (void)setAXAttribute:(int)arg1 withArray:(id)arg2;
- (void)setAXAttribute:(int)arg1 withUIElementArray:(id)arg2;
- (void)setAXAttribute:(int)arg1 withUIElement:(id)arg2;
- (void)setAXAttribute:(int)arg1 withRange:(struct _NSRange)arg2;
- (void)setAXAttribute:(int)arg1 withSize:(struct CGSize)arg2;
- (void)setAXAttribute:(int)arg1 withPoint:(struct CGPoint)arg2;
- (void)setAXAttribute:(int)arg1 withNumber:(id)arg2;
- (void)setAXAttribute:(int)arg1 withFloat:(float)arg2;
- (void)setAXAttribute:(int)arg1 withLong:(long long)arg2;
- (void)setAXAttribute:(int)arg1 withString:(id)arg2;
- (void)setAXAttribute:(int)arg1 withBOOL:(_Bool)arg2;
- (id)_elementsWithParameter:(int)arg1 andCount:(unsigned long long)arg2;
- (id)previousElementsWithCount:(unsigned long long)arg1;
- (id)nextElementsWithCount:(unsigned long long)arg1;
- (id)uiElementsWithAttribute:(int)arg1;
- (id)uiElementsWithAttribute:(int)arg1 parameter:(void *)arg2;
- (_Bool)performAXAction:(int)arg1;
- (_Bool)canPerformAXAction:(int)arg1;
- (_Bool)performAXAction:(int)arg1 withValue:(id)arg2;
- (id)valueArrayWithAXAttributes:(struct __CFArray *)arg1;
- (id)objectWithAXAttribute:(int)arg1 parameter:(void *)arg2;
- (id)objectWithAXAttribute:(int)arg1;
- (struct _NSRange)rangeWithAXAttribute:(int)arg1;
- (struct CGRect)rectWithAXAttribute:(int)arg1;
- (struct CGPath *)pathWithAXAttribute:(int)arg1;
- (struct CGPoint)pointWithAXAttribute:(int)arg1;
- (id)numberWithAXAttribute:(int)arg1;
- (_Bool)boolWithAXAttribute:(int)arg1;
- (id)stringWithAXAttribute:(int)arg1;
- (id)arrayWithAXAttribute:(int)arg1;
- (void)updateCache:(int)arg1;
- (void *)_cachedValueForAttribute:(int)arg1;
- (id)_outputCache;
- (_Bool)isValid;
- (_Bool)isValidForApplication:(id)arg1;
- (void)updateCacheWithAttributes:(id)arg1;
- (void)_createCache:(_Bool)arg1;
- (void)disableCache;
- (void)enableCache:(_Bool)arg1;
- (void *)modifyStaticCacheValue:(void *)arg1;
- (void)_invalidate;
- (void)setAXElement:(struct __AXUIElement *)arg1;
@property(readonly, nonatomic) struct __AXUIElement *axElement; // @synthesize axElement=_axElement;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (int)pid;
- (void)dealloc;
- (id)initWithAXElement:(struct __AXUIElement *)arg1;
- (id)initWithAXElement:(struct __AXUIElement *)arg1 cache:(struct __CFDictionary *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;

@end

@interface AXVisualElementGrouper : AXElementGrouper
{
    double _maximumNeighbourDistance;
    double _maximumDistanceForAligningEdges;
}

@property(nonatomic) double maximumDistanceForAligningEdges; // @synthesize maximumDistanceForAligningEdges=_maximumDistanceForAligningEdges;
@property(nonatomic) double maximumNeighbourDistance; // @synthesize maximumNeighbourDistance=_maximumNeighbourDistance;
- (id)_groupablesForItems:(id)arg1;
- (id)initWithPadInterfaceHeuristics:(_Bool)arg1;
- (id)init;

@end

@interface NSObject (AXAttributedStringAdditions)
- (_Bool)isAXAttributedString;
@end

@interface NSString (AXExtensions)
- (struct _NSRange)ax_wordFromPosition:(long long)arg1 inDirection:(unsigned long long)arg2;
- (struct _NSRange)ax_lineFromPosition:(long long)arg1 inDirection:(unsigned long long)arg2;
- (struct _NSRange)_ax_rangeOfNextUnitWithStartPosition:(long long)arg1 direction:(unsigned long long)arg2 withCharacterSet:(id)arg3;
@end

