//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct GKGameInfo {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned long long _field9;
    unsigned long long _field10;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct in_addr {
    unsigned int _field1;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

#pragma mark Typedef'd Structures

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
    long long _field8;
    long long _field9;
} CDStruct_c6d350ec;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation
// UUID: D4559239-1092-3158-B6B7-CAE7295DC107
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 167.11.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ABSearchOperationDelegate <NSObject>
- (void)searchOperation:(ABSearchOperation *)arg1 didFindMatches:(NSArray *)arg2 moreComing:(_Bool)arg3;
@end

@protocol GKAccountService <NSObject>
- (oneway void)generateIdentityVerificationSignatureWithHandler:(void (^)(NSDictionary *, NSError *))arg1;
- (oneway void)authenticatePlayerWithExistingCredentialsWithHandler:(void (^)(GKAuthenticateResponse *, NSError *))arg1;
@end

@protocol GKAccountServicePrivate <GKAccountService>
- (oneway void)accountEdited:(NSString *)arg1 alias:(NSString *)arg2 firstName:(NSString *)arg3 lastName:(NSString *)arg4 handler:(void (^)(void))arg5;
- (oneway void)authenticationCancelled;
- (oneway void)setupAccountForParameters:(NSDictionary *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)signOutPlayerWithHandler:(void (^)(NSError *))arg1;
- (oneway void)validateAccountWithPassword:(NSString *)arg1 handler:(void (^)(GKAuthenticateResponse *, NSError *))arg2;
- (oneway void)accountCreated:(NSString *)arg1 playerID:(NSString *)arg2 authenticationToken:(NSString *)arg3 alias:(NSString *)arg4 finished:(_Bool)arg5 handler:(void (^)(GKAuthenticateResponse *, NSError *))arg6;
- (oneway void)authenticatePlayerWithUsername:(NSString *)arg1 password:(NSString *)arg2 handler:(void (^)(GKAuthenticateResponse *, NSError *))arg3;
- (oneway void)authenticatePlayerWithUsername:(NSString *)arg1 password:(NSString *)arg2 usingFastPath:(_Bool)arg3 handler:(void (^)(GKAuthenticateResponse *, NSError *))arg4;
@end

@protocol GKAnalyticsService <NSObject>
- (void)respondedToBulletin:(NSDictionary *)arg1;
- (void)purchasedGame:(NSString *)arg1;
- (void)quitMatch:(GKTurnBasedMatchInternal *)arg1 withOutcome:(long long)arg2;
- (void)disconnectedMatchWithID:(NSString *)arg1;
- (void)rematchedWithMatchRequest:(GKMatchRequestInternal *)arg1;
- (void)sentMatchRequest:(GKMatchRequestInternal *)arg1;
- (void)declinedInvite:(GKInviteInternal *)arg1;
- (void)declinedInviteForTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1;
- (void)acceptedInviteForTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1;
- (void)acceptedInvite:(GKInviteInternal *)arg1;
- (void)completedChallenge:(GKChallengeInternal *)arg1;
- (void)wantsToPlayChallenge:(GKChallengeInternal *)arg1;
- (void)declinedChallenge:(GKChallengeInternal *)arg1;
- (void)postedScore:(GKScoreInternal *)arg1;
- (void)updatedAchievement:(GKAchievementInternal *)arg1;
@end

@protocol GKAnalyticsServicePrivate <GKAnalyticsService>
@end

@protocol GKBulletinService <NSObject>
- (oneway void)handleBulletinResponse:(NSDictionary *)arg1;
@end

@protocol GKBulletinServicePrivate <GKBulletinService>
- (oneway void)clearBulletinsForTurnBasedTurn:(NSString *)arg1 exchangeID:(NSString *)arg2;
- (oneway void)clearBulletinsForReceivedChallenges:(NSArray *)arg1;
- (oneway void)fetchBadgeCountsForBundleID:(NSString *)arg1 handler:(void (^)(NSDictionary *, NSError *))arg2;
- (oneway void)markAllBadgesAsViewedForType:(unsigned long long)arg1;
@end

@protocol GKCache <NSObject>
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id <NSCopying>)arg2;
- (void)setObject:(id)arg1 forKey:(id <NSCopying>)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForKey:(id)arg1;
@end

@protocol GKChallengeListener <NSObject>

@optional
- (void)player:(GKPlayer *)arg1 issuedChallengeWasCompleted:(GKChallenge *)arg2 byFriend:(GKPlayer *)arg3;
- (void)player:(GKPlayer *)arg1 didCompleteChallenge:(GKChallenge *)arg2 issuedByFriend:(GKPlayer *)arg3;
- (void)player:(GKPlayer *)arg1 didReceiveChallenge:(GKChallenge *)arg2;
- (void)player:(GKPlayer *)arg1 wantsToPlayChallenge:(GKChallenge *)arg2;
@end

@protocol GKChallengeService <NSObject>
- (oneway void)abortChallenges:(NSArray *)arg1 handler:(void (^)(void))arg2;
- (oneway void)issueChallenge:(GKChallengeInternal *)arg1 toPlayers:(NSArray *)arg2 handler:(void (^)(NSError *))arg3;
- (oneway void)getChallengeDetailsForChallengeIDs:(NSArray *)arg1 receiverID:(NSString *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (oneway void)getChallengeDetailsForChallengeIDs:(NSArray *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)getChallengesForGameDescriptor:(NSDictionary *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
@end

@protocol GKChallengeServicePrivate <GKChallengeService>
- (oneway void)startGame:(NSString *)arg1 withChallenge:(GKChallengeInternal *)arg2;
- (oneway void)getCountOfChallengesWithHandler:(void (^)(unsigned long long, NSError *))arg1;
@end

@protocol GKClientProtocol <NSObject>
- (oneway void)setLogBits:(int)arg1;
- (oneway void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(NSDictionary *)arg2;
- (oneway void)setBadgeCount:(unsigned long long)arg1 forType:(unsigned long long)arg2;
- (oneway void)achievementSelected:(GKAchievementInternal *)arg1;
- (oneway void)scoreSelected:(GKScoreInternal *)arg1;
- (oneway void)challengeCompleted:(GKChallengeInternal *)arg1;
- (oneway void)challengeReceived:(GKChallengeInternal *)arg1;
- (oneway void)completedChallengeSelected:(GKChallengeInternal *)arg1;
- (oneway void)receivedChallengeSelected:(GKChallengeInternal *)arg1;
- (oneway void)respondedToNearbyInvite:(NSDictionary *)arg1;
- (oneway void)completedOptimisticAuthenticationWithResponse:(GKAuthenticateResponse *)arg1 error:(NSError *)arg2;
- (oneway void)setLocalPlayer:(GKLocalPlayerInternal *)arg1 authenticated:(_Bool)arg2 reply:(void (^)(void))arg3;
- (oneway void)setCurrentGame:(GKGameInternal *)arg1 serverEnvironment:(long long)arg2 reply:(void (^)(void))arg3;
- (oneway void)setPreferencesValues:(NSDictionary *)arg1;
- (oneway void)resetNetworkActivity;
- (oneway void)endNetworkActivity;
- (oneway void)beginNetworkActivity;
@end

@protocol GKDaemonProtocol <NSObject>
- (oneway void)getAuthenticatedPlayerInfo:(void (^)(GKAuthenticateResponse *, NSError *))arg1;
- (oneway void)getAuthenticatedPlayerIDWithHandler:(void (^)(NSString *))arg1;
- (oneway void)getAccountNameWithHandler:(void (^)(NSString *))arg1;
- (oneway void)getPrivateServicesForPID:(int)arg1 reply:(void (^)(id <GKAccountServicePrivate>, id <GKProfileServicePrivate>, id <GKFriendServicePrivate>, id <GKGameServicePrivate>, id <GKGameStatServicePrivate>, id <GKChallengeServicePrivate>, id <GKMultiplayerServicePrivate>, id <GKTurnBasedServicePrivate>, id <GKUtilityServicePrivate>, id <GKBulletinServicePrivate>, id <GKLinkedAccountsServicePrivate>, id <GKAnalyticsServicePrivate>))arg2;
- (oneway void)getServicesForPID:(int)arg1 reply:(void (^)(id <GKAccountService>, id <GKProfileService>, id <GKFriendService>, id <GKGameService>, id <GKGameStatService>, id <GKChallengeService>, id <GKMultiplayerService>, id <GKTurnBasedService>, id <GKUtilityService>, id <GKBulletinService>, id <GKLinkedAccountsService>, id <GKAnalyticsService>))arg2;
- (oneway void)setHostPID:(int)arg1 reply:(void (^)(void))arg2;
@end

@protocol GKFriendService <NSObject>
- (oneway void)getFriendsForPlayer:(GKPlayerInternal *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
@end

@protocol GKFriendServicePrivate <GKFriendService>
- (oneway void)reportConcern:(GKConcernInternal *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)getConcernsForPlayer:(GKPlayerInternal *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)markFriendRecommendations:(NSArray *)arg1 viewed:(_Bool)arg2 handler:(void (^)(void))arg3;
- (oneway void)dismissFriendRecommendations:(NSArray *)arg1 handler:(void (^)(void))arg2;
- (oneway void)getFriendRecommendationsWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (oneway void)removeFriendWithPlayer:(GKPlayerInternal *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)declineFriendRequestsFromPlayers:(NSArray *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)acceptFriendRequestsFromPlayers:(NSArray *)arg1 withHandles:(NSArray *)arg2 handler:(void (^)(NSError *))arg3;
- (oneway void)sendFriendRequestToPlayers:(NSArray *)arg1 emailAddresses:(NSArray *)arg2 aliases:(NSArray *)arg3 twitterScreenNames:(NSArray *)arg4 facebookIDs:(NSArray *)arg5 message:(NSString *)arg6 rid:(NSNumber *)arg7 handler:(void (^)(NSDictionary *, NSError *))arg8;
- (oneway void)getFriendRequestCountWithHandler:(void (^)(long long, NSError *))arg1;
- (oneway void)getFriendRequestsWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (oneway void)getCommonFriendsForPlayer:(GKPlayerInternal *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
@end

@protocol GKGameService <NSObject>
@end

@protocol GKGameServicePrivate <GKGameService>
- (oneway void)loadTellAFriendMessageForGameWithAdamID:(NSNumber *)arg1 handler:(void (^)(NSString *, NSString *, NSString *, NSError *))arg2;
- (oneway void)submitRating:(float)arg1 forGame:(GKGameInternal *)arg2 handler:(void (^)(void))arg3;
- (oneway void)getRatingForGameDescriptor:(NSDictionary *)arg1 handler:(void (^)(float, NSError *))arg2;
- (oneway void)markGameRecommendations:(NSArray *)arg1 viewed:(_Bool)arg2 handler:(void (^)(void))arg3;
- (oneway void)dismissGameRecommendations:(NSArray *)arg1 handler:(void (^)(void))arg2;
- (oneway void)getGameRecommendationsWithHandler:(void (^)(NSArray *, NSString *, NSError *))arg1;
- (oneway void)getGameMetadataForBundleIDs:(NSArray *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)getGamesWithAchievementStatsForPlayer:(GKPlayerInternal *)arg1 handler:(void (^)(NSArray *, NSString *, NSError *))arg2;
- (oneway void)getGameStatsForPlayer:(GKPlayerInternal *)arg1 bundleIDs:(NSArray *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (oneway void)getGamesForPlayer:(GKPlayerInternal *)arg1 includeInstalled:(_Bool)arg2 handler:(void (^)(NSArray *, NSString *, NSError *))arg3;
- (oneway void)removeGameForBundleID:(NSString *)arg1 handler:(void (^)(void))arg2;
- (oneway void)getTopGamesWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (oneway void)getStoreItemsForAdamIDs:(NSArray *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
@end

@protocol GKGameStatService <NSObject>
- (oneway void)getDefaultLeaderboardIDWithHandler:(void (^)(NSString *, NSError *))arg1;
- (oneway void)setDefaultLeaderboardID:(NSString *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)getLeaderboardSetsForGameDescriptor:(NSDictionary *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)getLeaderboardsForGameDescriptor:(NSDictionary *)arg1 player:(GKPlayerInternal *)arg2 setIdentifier:(NSString *)arg3 handler:(void (^)(NSArray *, NSError *))arg4;
- (void)submitScores:(NSArray *)arg1 whileScreeningChallenges:(_Bool)arg2 withEligibleChallenges:(NSArray *)arg3 handler:(void (^)(NSError *))arg4;
- (oneway void)getLeaderboadForRequest:(GKLeaderboardScoreRequest *)arg1 handler:(void (^)(GKLeaderboardInternal *, NSError *))arg2;
- (oneway void)resetAchievementsWithHandler:(void (^)(NSError *))arg1;
- (void)submitAchievements:(NSArray *)arg1 whileScreeningChallenges:(_Bool)arg2 withEligibleChallenges:(NSArray *)arg3 handler:(void (^)(NSError *))arg4;
- (oneway void)getAchievementsForGameDescriptor:(NSDictionary *)arg1 players:(NSArray *)arg2 handler:(void (^)(NSDictionary *, NSError *))arg3;
- (oneway void)getAchievementDescriptionsForGameDescriptor:(NSDictionary *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)getRecentMatchesForGameDescriptor:(NSDictionary *)arg1 otherPlayer:(GKPlayerInternal *)arg2 handler:(void (^)(NSArray *, NSString *, NSError *))arg3;
- (oneway void)getPlayersForGameDescriptor:(NSDictionary *)arg1 includeCompatibleMultiplayerGames:(_Bool)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (oneway void)getPlayersForGameDescriptor:(NSDictionary *)arg1 achievementIdentifier:(NSString *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (oneway void)getPlayersForGameDescriptor:(NSDictionary *)arg1 leaderboardIdentifier:(NSString *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
@end

@protocol GKGameStatServicePrivate <GKGameStatService>
- (oneway void)getHypotheticalLeaderboardRanksForScores:(NSArray *)arg1 forGameDescriptor:(NSDictionary *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (oneway void)getAchievementLeaderboardForRequest:(GKLeaderboardScoreRequest *)arg1 handler:(void (^)(GKLeaderboardInternal *, NSError *))arg2;
@end

@protocol GKInviteEventListener

@optional
- (void)player:(GKPlayer *)arg1 didRequestMatchWithPlayers:(NSArray *)arg2;
- (void)player:(GKPlayer *)arg1 didRequestMatchWithRecipients:(NSArray *)arg2;
- (void)player:(GKPlayer *)arg1 didAcceptInvite:(GKInvite *)arg2;
@end

@protocol GKLinkedAccountsService <NSObject>
@end

@protocol GKLinkedAccountsServicePrivate <GKLinkedAccountsService>
- (oneway void)notifyAvailableExternalServicesWithHandler:(void (^)(_Bool, NSError *))arg1;
- (oneway void)getAuthTokenForExternalService:(BOOL)arg1 handler:(void (^)(NSString *, NSError *))arg2;
- (oneway void)availableExternalServicesWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (oneway void)disconnectExternalService:(BOOL)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)connectExternalService:(BOOL)arg1 handler:(void (^)(NSError *))arg2;
@end

@protocol GKLocalPlayerListener <GKChallengeListener, GKInviteEventListener, GKTurnBasedEventListener, GKSavedGameListener>
@end

@protocol GKLockStatusObserver <NSObject>
- (void)lockStatusDidChange;
@end

@protocol GKMultiplayerService <NSObject>
- (oneway void)nearbyInviteWasCancelled:(NSDictionary *)arg1;
- (oneway void)presentNearbyInvite:(NSDictionary *)arg1;
- (oneway void)updateCacheWithNearbyProfileDictionary:(NSDictionary *)arg1 handler:(void (^)(GKPlayerInternal *))arg2;
- (oneway void)cancelRelayRequest:(NSDictionary *)arg1 handler:(void (^)(NSDictionary *, NSError *))arg2;
- (oneway void)updateRelayRequest:(NSDictionary *)arg1 handler:(void (^)(NSDictionary *, NSError *))arg2;
- (oneway void)initiateRelayRequest:(NSDictionary *)arg1 handler:(void (^)(NSDictionary *, NSError *))arg2;
- (oneway void)sendReconnectInvitation:(NSString *)arg1 toPlayer:(GKPlayerInternal *)arg2 connectionData:(NSData *)arg3 sessionToken:(NSData *)arg4 pushToken:(NSData *)arg5 handler:(void (^)(NSError *))arg6;
- (oneway void)getInviteSessionTokenWithHandler:(void (^)(NSData *, NSError *))arg1;
- (oneway void)getPlayersToInviteWithHandlerV2:(void (^)(NSArray *, NSError *))arg1;
- (oneway void)getAcceptedGameInviteWithHandler:(void (^)(GKInviteInternal *, NSError *))arg1;
- (oneway void)declineGameInvite:(GKInviteInternal *)arg1 reason:(long long)arg2 handler:(void (^)(void))arg3;
- (oneway void)acceptGameInvite:(GKInviteInternal *)arg1 connectionData:(NSData *)arg2 handler:(void (^)(NSDictionary *, NSError *))arg3;
- (oneway void)cancelGameInviteWithHandler:(void (^)(void))arg1;
- (oneway void)removePlayersFromGameInviteV2:(NSArray *)arg1 handler:(void (^)(void))arg2;
- (oneway void)invitePlayersForMatchRequest:(GKMatchRequestInternal *)arg1 onlineConnectionData:(NSData *)arg2 nearbyConnectionData:(NSData *)arg3 handler:(void (^)(NSDictionary *, NSError *))arg4;
- (oneway void)getCompatibilityMatrix:(NSDictionary *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)getOverallFlowRateWithHandler:(void (^)(unsigned long long, NSError *))arg1;
- (oneway void)getFlowRateForPlayerGroup:(long long)arg1 handler:(void (^)(unsigned long long, NSError *))arg2;
- (oneway void)cancelOutstandingMatchRequestWithHandler:(void (^)(void))arg1;
- (oneway void)getPlayersForMatchRequest:(GKMatchRequestInternal *)arg1 connectionData:(NSData *)arg2 connectedPeers:(long long)arg3 rematchID:(NSString *)arg4 handler:(void (^)(GKMatchResponse *, NSError *))arg5;
@end

@protocol GKMultiplayerServicePrivate <GKMultiplayerService>
- (oneway void)invitePlayersV2:(NSArray *)arg1 toGame:(GKGameInternal *)arg2 handler:(void (^)(void))arg3;
@end

@protocol GKProfileService <NSObject>
- (oneway void)getProfilesForPlayerIDs:(NSArray *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
@end

@protocol GKProfileServicePrivate <GKProfileService>
- (oneway void)changeAlias:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)checkAliasForUniqueness:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)setFindable:(_Bool)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)deleteEmail:(NSString *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)updateContactsWithHandler:(void (^)(NSError *))arg1;
- (oneway void)deletePhotoWithHandler:(void (^)(NSError *))arg1;
- (oneway void)setPhotoData:(NSData *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)cachePhotos:(NSDictionary *)arg1 handler:(void (^)(void))arg2;
- (oneway void)addEmail:(NSString *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)setStatus:(NSString *)arg1 handler:(void (^)(NSError *))arg2;
@end

@protocol GKSavedGameListener <NSObject>

@optional
- (void)player:(GKPlayer *)arg1 hasConflictingSavedGames:(NSArray *)arg2;
- (void)player:(GKPlayer *)arg1 didModifySavedGame:(GKSavedGame *)arg2;
@end

@protocol GKSessionDelegate <NSObject>

@optional
- (void)session:(GKSession *)arg1 didFailWithError:(NSError *)arg2;
- (void)session:(GKSession *)arg1 connectionWithPeerFailed:(NSString *)arg2 withError:(NSError *)arg3;
- (void)session:(GKSession *)arg1 didReceiveConnectionRequestFromPeer:(NSString *)arg2;
- (void)session:(GKSession *)arg1 peer:(NSString *)arg2 didChangeState:(int)arg3;
@end

@protocol GKSessionPrivateDelegate <GKSessionDelegate>

@optional
- (void)session:(GKSession *)arg1 peerDidBecomeBusy:(NSString *)arg2;
@end

@protocol GKTurnBasedEventListener

@optional
- (void)player:(GKPlayer *)arg1 didRequestMatchWithPlayers:(NSArray *)arg2;
- (void)player:(GKPlayer *)arg1 receivedExchangeReplies:(NSArray *)arg2 forCompletedExchange:(GKTurnBasedExchange *)arg3 forMatch:(GKTurnBasedMatch *)arg4;
- (void)player:(GKPlayer *)arg1 receivedExchangeCancellation:(GKTurnBasedExchange *)arg2 forMatch:(GKTurnBasedMatch *)arg3;
- (void)player:(GKPlayer *)arg1 receivedExchangeRequest:(GKTurnBasedExchange *)arg2 forMatch:(GKTurnBasedMatch *)arg3;
- (void)player:(GKPlayer *)arg1 matchEnded:(GKTurnBasedMatch *)arg2;
- (void)player:(GKPlayer *)arg1 receivedTurnEventForMatch:(GKTurnBasedMatch *)arg2 didBecomeActive:(_Bool)arg3;
- (void)player:(GKPlayer *)arg1 didRequestMatchWithOtherPlayers:(NSArray *)arg2;
@end

@protocol GKTurnBasedService <NSObject>
- (oneway void)sendReminderToParticipants:(NSArray *)arg1 message:(NSDictionary *)arg2 match:(GKTurnBasedMatchInternal *)arg3 handler:(void (^)(NSError *))arg4;
- (oneway void)getNextTurnBasedEventWithHandler:(void (^)(NSString *, NSString *, long long, _Bool, NSError *))arg1;
- (oneway void)replyToExchange:(NSString *)arg1 withMessage:(NSDictionary *)arg2 data:(NSData *)arg3 match:(GKTurnBasedMatchInternal *)arg4 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg5;
- (oneway void)cancelExchange:(NSString *)arg1 withMessage:(NSDictionary *)arg2 match:(GKTurnBasedMatchInternal *)arg3 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg4;
- (oneway void)sendExchangeToParticipants:(NSArray *)arg1 data:(NSData *)arg2 message:(NSDictionary *)arg3 timeout:(double)arg4 match:(GKTurnBasedMatchInternal *)arg5 handler:(void (^)(NSString *, GKTurnBasedMatchInternal *, NSError *))arg6;
- (oneway void)completeTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1 scores:(NSArray *)arg2 achievements:(NSArray *)arg3 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg4;
- (oneway void)resignFromTurnBasedGame:(GKTurnBasedMatchInternal *)arg1 outcome:(unsigned long long)arg2 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg3;
- (oneway void)saveDataForTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1 resolvedExchangeIDs:(NSArray *)arg2 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg3;
- (oneway void)submitTurnForTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1 nextParticipantIndexes:(NSArray *)arg2 turnTimeout:(double)arg3 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg4;
- (oneway void)removeTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1 handler:(void (^)(NSError *))arg2;
- (oneway void)declineInviteForTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg2;
- (oneway void)acceptInviteForTurnBasedMatch:(GKTurnBasedMatchInternal *)arg1 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg2;
- (oneway void)getDetailsForTurnBasedMatchIDs:(NSArray *)arg1 includeGameData:(_Bool)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (oneway void)getTurnBasedMatchesAndCompatibleBundleID:(_Bool)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (oneway void)createTurnBasedGameForMatchRequest:(GKMatchRequestInternal *)arg1 individualMessages:(NSDictionary *)arg2 handler:(void (^)(GKTurnBasedMatchInternal *, NSError *))arg3;
@end

@protocol GKTurnBasedServicePrivate <GKTurnBasedService>
- (oneway void)showMatch:(NSString *)arg1 forGameWithBundleID:(NSString *)arg2;
- (oneway void)getTurnBasedBadgeCountWithHandler:(void (^)(unsigned long long, NSError *))arg1;
@end

@protocol GKUtilityService <NSObject>
- (oneway void)getStoreBagValuesForKeys:(NSArray *)arg1 handler:(void (^)(NSString *, NSString *, NSString *, NSData *, NSDictionary *, NSError *))arg2;
@end

@protocol GKUtilityServicePrivate <GKUtilityService>
- (oneway void)loadDataForURL:(NSURL *)arg1 postBody:(NSData *)arg2 completionHandler:(void (^)(NSData *, NSError *))arg3;
- (oneway void)refreshPreferences;
- (oneway void)updateNotificationTopics;
- (oneway void)pingWithHandler:(void (^)(void))arg1;
- (oneway void)terminate;
- (oneway void)openSettings;
@end

@protocol GKVoiceChatSessionDelegate
- (void)gkVoiceChatSession:(id)arg1 stateUpdate:(unsigned long long)arg2 forPeer:(NSString *)arg3;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFilePresenter <NSObject>
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL;

@optional
@property(readonly, copy) NSURL *primaryPresentedItemURL;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didResolveConflictVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didLoseVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didGainVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemDidChangeAtURL:(NSURL *)arg1;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didMoveToURL:(NSURL *)arg2;
- (void)presentedSubitemDidAppearAtURL:(NSURL *)arg1;
- (void)accommodatePresentedSubitemDeletionAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)presentedItemDidResolveConflictVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidLoseVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidGainVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidChange;
- (void)presentedItemDidMoveToURL:(NSURL *)arg1;
- (void)accommodatePresentedItemDeletionWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)savePresentedItemChangesWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)relinquishPresentedItemToWriter:(void (^)(void (^)(void)))arg1;
- (void)relinquishPresentedItemToReader:(void (^)(void (^)(void)))arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCConnectionDelegate <NSObject>

@optional
- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;
- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol SSDownloadManagerObserver <NSObject>

@optional
- (void)downloadManagerNetworkUsageDidChange:(SSDownloadManager *)arg1;
- (void)downloadManagerDownloadsDidChange:(SSDownloadManager *)arg1;
- (void)downloadManagerActiveDownloadsDidChange:(SSDownloadManager *)arg1;
- (void)downloadManager:(SSDownloadManager *)arg1 downloadStatesDidChange:(NSArray *)arg2;
@end

@interface GKABObject : NSObject
{
    void *_type;
}

+ (id)objectWithCFType:(void *)arg1;
+ (id)objectWithABObject:(id)arg1;
- (void *)CFType;
- (void)dealloc;
- (id)initWithCFType:(void *)arg1;

@end

@interface GKABAddressBook : GKABObject
{
}

+ (id)addressBook;
- (void)save;
- (void)findPeopleWithEmailAddresses:(id)arg1 onQueue:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (void)enumeratePersonsUsingBlock:(CDUnknownBlockType)arg1;
- (id)personWithUniqueID:(id)arg1;
- (void *)ABAddressBook;

@end

@interface GKABMultiValue : GKABObject
{
}

- (void)enumerateValuesUsingBlock:(CDUnknownBlockType)arg1;
- (id)valueAtIndex:(long long)arg1;
- (id)allValues;
- (long long)count;
- (id)mutableCopy;
@property(readonly) void *ABMultiValue;

@end

@interface GKABMutableMultiValue : GKABMultiValue
{
}

- (_Bool)replaceValueAtIndex:(unsigned long long)arg1 withValue:(id)arg2;
- (id)addValue:(id)arg1 withLabel:(id)arg2;
- (void *)ABMutableMultiValue;
- (id)initWithPropertyType:(unsigned int)arg1;

@end

@interface GKABRecord : GKABObject
{
}

- (id)propertyForID:(int)arg1;
@property(readonly) NSString *uniqueID;
@property(readonly) int recordID;
@property(readonly) void *ABRecord;
- (id)initWithABRecord:(void *)arg1;

@end

@interface GKABPerson : GKABRecord
{
}

- (_Bool)updateSocialProfileWithPlayer:(id)arg1;
@property(retain, nonatomic) GKABMultiValue *socialProfile;
- (id)emails;

@end

@interface GKServiceInterface : NSObject
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;
+ (id)interface;
+ (id)plistClasses;

@end

@interface GKAccountServiceInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKAccountServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKAchievement : NSObject <NSCopying, NSCoding, NSSecureCoding>
{
    _Bool _showsCompletionBanner;
    _Bool _hidden;
    GKAchievementInternal *_internal;
    GKGame *_game;
    GKPlayer *_player;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)reportAchievements:(id)arg1 whileScreeningChallenges:(_Bool)arg2 withEligibleChallenges:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
+ (void)reportAchievements:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)resetAchievementsWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)loadAchievementWithID:(id)arg1 forGame:(id)arg2 players:(id)arg3 complete:(CDUnknownBlockType)arg4;
+ (void)loadAchievementsForGameV2:(id)arg1 players:(id)arg2 includeUnreported:(_Bool)arg3 includeHidden:(_Bool)arg4 withCompletionHandler:(CDUnknownBlockType)arg5;
+ (void)loadAchievementsForGameV2:(id)arg1 player:(id)arg2 includeUnreported:(_Bool)arg3 includeHidden:(_Bool)arg4 withCompletionHandler:(CDUnknownBlockType)arg5;
+ (void)loadAchievementsWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic, getter=isHidden) _Bool hidden; // @synthesize hidden=_hidden;
@property(nonatomic) _Bool showsCompletionBanner; // @synthesize showsCompletionBanner=_showsCompletionBanner;
@property(retain) GKAchievementInternal *internal; // @synthesize internal=_internal;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)reportAchievementWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)description;
@property(readonly, nonatomic, getter=isCompleted) _Bool completed;
@property(nonatomic) GKGame *game; // @synthesize game=_game;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
@property(readonly, retain, nonatomic) GKPlayer *player; // @synthesize player=_player;
@property(copy, nonatomic) NSString *playerID; // @dynamic playerID;
- (id)initWithIdentifier:(id)arg1 forPlayer:(id)arg2;
- (id)initWithIdentifier:(id)arg1 player:(id)arg2;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1 playerID:(id)arg2;
- (id)initWithInternalRepresentation:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

// Remaining properties
@property(readonly, copy, nonatomic) NSString *groupIdentifier; // @dynamic groupIdentifier;
@property(copy, nonatomic) NSString *identifier; // @dynamic identifier;
@property(copy, nonatomic) NSDate *lastReportedDate; // @dynamic lastReportedDate;
@property(nonatomic) double percentComplete; // @dynamic percentComplete;

@end

@interface GKChallenge : NSObject <NSCoding, NSSecureCoding>
{
    GKChallengeInternal *_internal;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)loadReceivedChallengesWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)loadChallengesForReceivingPlayer:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadChallengesForGame:(id)arg1 receivingPlayer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)getCountOfChallenges:(CDUnknownBlockType)arg1;
+ (id)challengeForGame:(id)arg1 andPlayer:(id)arg2 withAchievement:(id)arg3;
+ (id)challengeForGame:(id)arg1 andPlayer:(id)arg2 withScore:(id)arg3;
+ (id)challengeForInternalRepresentation:(id)arg1;
+ (id)stringForState:(long long)arg1;
+ (_Bool)supportsSecureCoding;
@property(retain) GKChallengeInternal *internal; // @synthesize internal=_internal;
- (void)loadDetailsWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool detailsLoaded;
- (id)infoTextForIssuingPlayer:(id)arg1;
- (void)loadUIDetailsWithHandler:(CDUnknownBlockType)arg1;
- (_Bool)hasLoadedUIDetails;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
@property(readonly, copy, nonatomic) GKPlayer *receivingPlayer; // @dynamic receivingPlayer;
@property(readonly, copy, nonatomic) GKPlayer *issuingPlayer; // @dynamic issuingPlayer;
@property(readonly, copy, nonatomic) NSString *receivingPlayerID;
@property(readonly, copy, nonatomic) NSString *issuingPlayerID;
@property(readonly, nonatomic) GKGame *game; // @dynamic game;
- (void)decline;
- (void)declineWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)issueToPlayers:(id)arg1 message:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy, nonatomic) NSString *bundleID; // @dynamic bundleID;
@property(readonly, copy, nonatomic) NSString *challengeID; // @dynamic challengeID;
@property(readonly, copy, nonatomic) NSOrderedSet *compatibleBundleIDs; // @dynamic compatibleBundleIDs;
@property(readonly, retain, nonatomic) NSDate *completionDate; // @dynamic completionDate;
@property(readonly, retain, nonatomic) NSDate *issueDate; // @dynamic issueDate;
@property(readonly, copy, nonatomic) NSString *message; // @dynamic message;
@property(readonly, nonatomic) long long state; // @dynamic state;

@end

@interface GKAchievementChallenge : GKChallenge
{
    GKAchievement *_achievement;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
@property(retain, nonatomic) GKAchievement *achievement; // @synthesize achievement=_achievement;
- (void)loadDetailsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)detailsLoaded;
- (id)detailGoalTextForPlayer:(id)arg1 withAchievement:(id)arg2;
- (id)titleText;
- (void)setInternal:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (void)dealloc;
- (id)description;

@end

@interface GKInternalRepresentation : NSObject <NSCoding, NSCopying, NSSecureCoding>
{
}

+ (id)secureCodedPropertyKeys;
+ (id)codedPropertyKeys;
+ (id)internalRepresentation;
+ (_Bool)supportsSecureCoding;
- (void)mergePropertiesFrom:(id)arg1;
- (id)serverRepresentation;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface GKChallengeInternal : GKInternalRepresentation
{
    NSString *_challengeID;
    NSString *_message;
    NSDate *_issueDate;
    NSDate *_completionDate;
    NSOrderedSet *_compatibleBundleIDs;
    GKGameInternal *_game;
    GKPlayerInternal *_issuingPlayer;
    GKPlayerInternal *_receivingPlayer;
    long long _state;
    NSString *_bundleID;
}

+ (id)internalRepresentation;
+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSDate *issueDate; // @synthesize issueDate=_issueDate;
@property(retain, nonatomic) GKGameInternal *game; // @synthesize game=_game;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) NSOrderedSet *compatibleBundleIDs; // @synthesize compatibleBundleIDs=_compatibleBundleIDs;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(retain, nonatomic) NSDate *completionDate; // @synthesize completionDate=_completionDate;
@property(retain, nonatomic) GKPlayerInternal *receivingPlayer; // @synthesize receivingPlayer=_receivingPlayer;
@property(retain, nonatomic) GKPlayerInternal *issuingPlayer; // @synthesize issuingPlayer=_issuingPlayer;
@property(retain, nonatomic) NSString *bundleID; // @synthesize bundleID=_bundleID;
@property(retain, nonatomic) NSString *challengeID; // @synthesize challengeID=_challengeID;
@property(readonly, nonatomic) unsigned long long type;
- (id)findLocalGameBundleID;
- (id)serverRepresentationForReceivingPlayer:(id)arg1;
- (id)serverRepresentation;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;

@end

@interface GKAchievementChallengeInternal : GKChallengeInternal
{
    GKAchievementInternal *_achievement;
}

+ (id)secureCodedPropertyKeys;
+ (id)internalRepresentation;
@property(copy, nonatomic) GKAchievementInternal *achievement; // @synthesize achievement=_achievement;
- (unsigned long long)type;
- (id)serverRepresentationForReceivingPlayer:(id)arg1;
- (void)dealloc;

@end

@interface GKAchievementDescription : NSObject <NSCoding, NSSecureCoding>
{
    GKAchievementInternal *_internal;
    UIImage *_image;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)loadAchievementDescriptionsForGame:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadAchievementDescriptionsWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) UIImage *image; // @synthesize image=_image;
@property(retain) GKAchievementInternal *internal; // @synthesize internal=_internal;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)description;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

// Remaining properties
@property(readonly, copy, nonatomic) NSString *achievedDescription; // @dynamic achievedDescription;
@property(readonly, retain, nonatomic) NSString *groupIdentifier; // @dynamic groupIdentifier;
@property(readonly, nonatomic, getter=isHidden) _Bool hidden; // @dynamic hidden;
@property(readonly, copy, nonatomic) NSString *identifier; // @dynamic identifier;
@property(readonly, nonatomic) long long maximumPoints; // @dynamic maximumPoints;
@property(readonly, nonatomic, getter=isReplayable) _Bool replayable; // @dynamic replayable;
@property(readonly, copy, nonatomic) NSString *title; // @dynamic title;
@property(readonly, copy, nonatomic) NSString *unachievedDescription; // @dynamic unachievedDescription;

@end

@interface GKAchievementInternal : GKInternalRepresentation
{
    NSString *_identifier;
    NSString *_groupIdentifier;
    NSString *_title;
    NSString *_achievedDescription;
    NSString *_unachievedDescription;
    NSDictionary *_icons;
    GKPlayerInternal *_player;
    union {
        struct {
            unsigned int _maximumPoints:16;
            unsigned int _hidden:1;
            unsigned int _replayable:1;
            unsigned int _reserved:14;
        } ;
        unsigned int _value;
    } _attributes;
    NSDate *_lastReportedDate;
    double _percentComplete;
}

+ (_Bool)supportsSecureCoding;
+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) GKPlayerInternal *player; // @synthesize player=_player;
@property(nonatomic) double percentComplete; // @synthesize percentComplete=_percentComplete;
@property(retain, nonatomic) NSDate *lastReportedDate; // @synthesize lastReportedDate=_lastReportedDate;
@property(retain, nonatomic) NSDictionary *icons; // @synthesize icons=_icons;
@property(retain, nonatomic) NSString *unachievedDescription; // @synthesize unachievedDescription=_unachievedDescription;
@property(retain, nonatomic) NSString *achievedDescription; // @synthesize achievedDescription=_achievedDescription;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(nonatomic, getter=isReplayable) _Bool replayable; // @dynamic replayable;
@property(nonatomic, getter=isHidden) _Bool hidden; // @dynamic hidden;
@property(nonatomic) unsigned short maximumPoints; // @dynamic maximumPoints;
@property(nonatomic) unsigned int attributes; // @dynamic attributes;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)serverRepresentation;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (void)mergePropertiesFromDescription:(id)arg1;

@end

@interface GKAchievementDescriptionInternal : GKAchievementInternal
{
}

+ (id)secureCodedPropertyKeys;

@end

@interface GKLeaderboardScoreRequest : NSObject <NSSecureCoding>
{
    GKPlayerInternal *_playerInternal;
    NSString *_gameBundleID;
    NSString *_identifier;
    NSString *_groupIdentifier;
    _Bool _friendsOnly;
    long long _timeScope;
    _Bool _prefetch;
}

+ (_Bool)supportsSecureCoding;
+ (id)requestForPlayerInternals:(id)arg1;
+ (id)requestForRankRange:(struct _NSRange)arg1;
@property(nonatomic, getter=isPrefetch) _Bool prefetch; // @synthesize prefetch=_prefetch;
@property(nonatomic) long long timeScope; // @synthesize timeScope=_timeScope;
@property(nonatomic) _Bool friendsOnly; // @synthesize friendsOnly=_friendsOnly;
@property(copy, nonatomic) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *gameBundleID; // @synthesize gameBundleID=_gameBundleID;
@property(copy, nonatomic) GKPlayerInternal *playerInternal; // @synthesize playerInternal=_playerInternal;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;

@end

@interface GKLeaderboardScoreRangeRequest : GKLeaderboardScoreRequest
{
    struct _NSRange _range;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) struct _NSRange range; // @synthesize range=_range;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface GKAchievementLeaderboardScoreRangeRequest : GKLeaderboardScoreRangeRequest
{
}

+ (id)requestForRankRange:(struct _NSRange)arg1;

@end

@interface GKAddressBookSearchOperation : ABSearchOperation <ABSearchOperationDelegate>
{
    NSMutableArray *_matches;
    CDUnknownBlockType _handler;
}

@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
@property(readonly, nonatomic) NSMutableArray *matches; // @synthesize matches=_matches;
- (void)searchOperation:(id)arg1 didFindMatches:(id)arg2 moreComing:(_Bool)arg3;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKAnalyticsServiceInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKAnalyticsServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKPlayerInternal : GKInternalRepresentation
{
    NSString *_playerID;
    NSString *_alias;
    NSDictionary *_photos;
    unsigned short _numberOfFriends;
    unsigned short _numberOfGames;
    unsigned short _numberOfFriendsInCommon;
    unsigned short _numberOfGamesInCommon;
    unsigned int _numberOfAchievements;
    unsigned int _numberOfAchievementPoints;
    union {
        struct {
            unsigned int _unused:8;
            unsigned int _purpleBuddyAccount:1;
            unsigned int _underage:1;
            unsigned int _photoPending:1;
            unsigned int _findable:1;
            unsigned int _reserved:18;
        } ;
        unsigned int _value;
    } _flags;
}

+ (Class)classForFamiliarity:(int)arg1;
+ (id)displayNameWithOptions:(unsigned char)arg1 alias:(id)arg2 composite:(id)arg3;
+ (id)compositeNameForFirstName:(id)arg1 lastName:(id)arg2;
+ (id)secureCodedPropertyKeys;
@property(nonatomic) unsigned int numberOfAchievementPoints; // @synthesize numberOfAchievementPoints=_numberOfAchievementPoints;
@property(nonatomic) unsigned int numberOfAchievements; // @synthesize numberOfAchievements=_numberOfAchievements;
@property(nonatomic) unsigned short numberOfGamesInCommon; // @synthesize numberOfGamesInCommon=_numberOfGamesInCommon;
@property(nonatomic) unsigned short numberOfGames; // @synthesize numberOfGames=_numberOfGames;
@property(nonatomic) unsigned short numberOfFriendsInCommon; // @synthesize numberOfFriendsInCommon=_numberOfFriendsInCommon;
@property(nonatomic) unsigned short numberOfFriends; // @synthesize numberOfFriends=_numberOfFriends;
@property(retain, nonatomic) NSDictionary *photos; // @synthesize photos=_photos;
@property(retain, nonatomic) NSString *alias; // @synthesize alias=_alias;
@property(retain, nonatomic) NSString *playerID; // @synthesize playerID=_playerID;
@property(nonatomic) unsigned short numberOfChallenges; // @dynamic numberOfChallenges;
@property(nonatomic) unsigned short numberOfTurns; // @dynamic numberOfTurns;
@property(nonatomic) unsigned short numberOfRequests; // @dynamic numberOfRequests;
- (void)setAllowNearbyMultiplayer:(_Bool)arg1;
- (_Bool)allowNearbyMultiplayer;
@property(nonatomic, getter=isPhotoPending) _Bool photoPending; // @dynamic photoPending;
@property(nonatomic, getter=isFindable) _Bool findable; // @dynamic findable;
@property(nonatomic, getter=isUnderage) _Bool underage; // @dynamic underage;
@property(nonatomic, getter=isPurpleBuddyAccount) _Bool purpleBuddyAccount; // @dynamic purpleBuddyAccount;
@property(retain, nonatomic) NSNumber *iCloudUserID; // @dynamic iCloudUserID;
@property(retain, nonatomic) NSString *facebookUserID; // @dynamic facebookUserID;
@property(retain, nonatomic) NSArray *friends; // @dynamic friends;
@property(retain, nonatomic) NSArray *emailAddresses; // @dynamic emailAddresses;
@property(retain, nonatomic) NSString *accountName; // @dynamic accountName;
@property(retain, nonatomic) GKGameInternal *lastPlayedGame; // @dynamic lastPlayedGame;
@property(retain, nonatomic) NSDate *lastPlayedDate; // @dynamic lastPlayedDate;
@property(retain, nonatomic) NSString *status; // @dynamic status;
@property(retain, nonatomic) NSString *compositeName; // @dynamic compositeName;
@property(retain, nonatomic) NSString *lastName; // @dynamic lastName;
@property(retain, nonatomic) NSString *firstName; // @dynamic firstName;
@property(nonatomic) unsigned int flags; // @dynamic flags;
@property(readonly, nonatomic) _Bool isAnonymousPlayer;
@property(readonly, nonatomic) _Bool isUnknownPlayer;
@property(readonly, nonatomic) _Bool isAutomatchPlayer;
@property(readonly, nonatomic) _Bool isLocalPlayer;
@property(readonly, nonatomic) _Bool isFriend;
@property(readonly, nonatomic) _Bool isLoaded;
- (int)defaultFamiliarity;
- (id)displayNameWithOptions:(unsigned char)arg1;
- (id)minimalInternal;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)serverRepresentation;
- (id)conciseDescription;
- (id)cacheKey;
- (void)dealloc;

@end

@interface GKSpecialPlayerInternal : GKPlayerInternal
{
}

- (id)compositeName;
- (_Bool)isLoaded;
- (void)setPhotos:(id)arg1;
- (id)photos;
- (void)setAlias:(id)arg1;
- (id)alias;
- (void)setPlayerID:(id)arg1;
- (id)playerID;

@end

@interface GKAnonymousPlayerInternal : GKSpecialPlayerInternal
{
}

- (_Bool)isEqual:(id)arg1;
- (_Bool)isAnonymousPlayer;
- (id)alias;
- (id)playerID;

@end

@interface GKApplicationProxy : NSObject
{
    LSApplicationProxy *_lsProxy;
    NSDictionary *_metadata;
}

+ (id)metadataForBundleURL:(id)arg1;
@property(retain, nonatomic) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) LSApplicationProxy *lsProxy; // @synthesize lsProxy=_lsProxy;
@property(readonly, retain, nonatomic) NSString *bundleVersion;
@property(readonly, nonatomic, getter=isInstalled) _Bool installed;
@property(readonly, nonatomic, getter=isGameCenterEnabled) _Bool gameCenterEnabled;
@property(readonly, nonatomic, getter=isRestricted) _Bool restricted;
@property(readonly, retain, nonatomic) NSDate *purchaseDate;
- (id)bundleURL;
@property(readonly, retain, nonatomic) NSNumber *externalVersion;
@property(readonly, retain, nonatomic) NSNumber *adamID;
@property(readonly, retain, nonatomic) NSString *bundleID;
@property(readonly, retain, nonatomic) NSBundle *bundle;
- (void)dealloc;
- (id)initWithBundleID:(id)arg1;
- (id)initWithProxy:(id)arg1;

@end

@interface GKApplicationWorkspace : NSObject
{
    LSApplicationWorkspace *_lsWorkspace;
}

+ (id)defaultWorkspace;
@property(retain, nonatomic) LSApplicationWorkspace *lsWorkspace; // @synthesize lsWorkspace=_lsWorkspace;
- (_Bool)applicationIsInstalled:(id)arg1;
- (void)openICloudSettings;
- (void)openSettings;
- (id)applicationProxyForBundleID:(id)arg1;
- (void)dealloc;
- (id)initWithWorkspace:(id)arg1;

@end

@interface GKAuthenticateResponse : GKInternalRepresentation
{
    _Bool _loginDisabled;
    _Bool _passwordChangeRequired;
    _Bool _shouldShowLinkAccountsUI;
    NSString *_accountName;
    NSString *_playerID;
    NSString *_authToken;
    long long _environment;
    NSURL *_passwordChangeURL;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) _Bool shouldShowLinkAccountsUI; // @synthesize shouldShowLinkAccountsUI=_shouldShowLinkAccountsUI;
@property(retain, nonatomic) NSURL *passwordChangeURL; // @synthesize passwordChangeURL=_passwordChangeURL;
@property(nonatomic) _Bool passwordChangeRequired; // @synthesize passwordChangeRequired=_passwordChangeRequired;
@property(nonatomic) long long environment; // @synthesize environment=_environment;
@property(nonatomic) _Bool loginDisabled; // @synthesize loginDisabled=_loginDisabled;
@property(retain, nonatomic) NSString *authToken; // @synthesize authToken=_authToken;
@property(retain, nonatomic) NSString *playerID; // @synthesize playerID=_playerID;
@property(retain, nonatomic) NSString *accountName; // @synthesize accountName=_accountName;
- (void)dealloc;

@end

@interface GKAutomatchPlayerInternal : GKSpecialPlayerInternal
{
}

- (_Bool)isAutomatchPlayer;
- (id)alias;
- (id)playerID;

@end

@interface GKBulletinServiceInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKBulletinServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKCache : NSObject <GKCache>
{
    NSMutableDictionary *_dictionary;
    GKLinkedList *_cacheList;
    unsigned long long _maxCount;
    unsigned long long _count;
}

@property(nonatomic) unsigned long long count; // @synthesize count=_count;
@property(nonatomic) unsigned long long maxCount; // @synthesize maxCount=_maxCount;
@property(retain, nonatomic) GKLinkedList *cacheList; // @synthesize cacheList=_cacheList;
@property(retain, nonatomic) NSMutableDictionary *dictionary; // @synthesize dictionary=_dictionary;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForKey:(id)arg1;
- (void)dealloc;
- (id)initWithMaxCount:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKCachePair : NSObject
{
    id _value;
    id _key;
}

@property(retain, nonatomic) id key; // @synthesize key=_key;
@property(retain, nonatomic) id value; // @synthesize value=_value;
- (void)dealloc;

@end

@interface GKChallengeEventHandler : NSObject
{
    id <GKChallengeEventHandlerDelegate> _delegateWeak;
    id <GKChallengeEventHandlerUIDelegate> _uiDelegate;
    GKChallengeInternal *_pendingReceivedChallenge;
    GKChallengeInternal *_pendingCompletedChallenge;
}

+ (id)challengeEventHandler;
@property(retain, nonatomic) GKChallengeInternal *pendingCompletedChallenge; // @synthesize pendingCompletedChallenge=_pendingCompletedChallenge;
@property(retain, nonatomic) GKChallengeInternal *pendingReceivedChallenge; // @synthesize pendingReceivedChallenge=_pendingReceivedChallenge;
@property(retain, nonatomic) id <GKChallengeEventHandlerUIDelegate> uiDelegate; // @synthesize uiDelegate=_uiDelegate;
- (void)showBannerForChallenge:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)challengeCompleted:(id)arg1;
- (void)challengeReceived:(id)arg1;
- (void)completedChallengeSelected:(id)arg1;
- (void)receivedChallengeSelected:(id)arg1;
@property(nonatomic) id <GKChallengeEventHandlerDelegate> delegate; // @synthesize delegate=_delegateWeak;
- (void)dealloc;

@end

@interface GKChallengeServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKChallengeServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKClientInterface : NSXPCInterface
{
}

+ (id)interface;

@end

@interface GKCompatibilityEntryInternal : GKInternalRepresentation
{
    NSString *_bundleID;
    NSSet *_versions;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSSet *versions; // @synthesize versions=_versions;
@property(retain, nonatomic) NSString *bundleID; // @synthesize bundleID=_bundleID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;

@end

@interface GKConcernInternal : GKInternalRepresentation
{
    GKPlayerInternal *_player;
    NSString *_message;
    unsigned int _concernID;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) unsigned int concernID; // @synthesize concernID=_concernID;
@property(copy, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) GKPlayerInternal *player; // @synthesize player=_player;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;

@end

@interface GKDaemonInterface : NSXPCInterface
{
}

+ (id)interface;

@end

@interface GKDaemonProxy : NSObject <NSXPCConnectionDelegate, GKClientProtocol>
{
    int _hostPID;
    NSXPCConnection *_connection;
    NSObject<OS_dispatch_semaphore> *_serviceSemaphore;
    NSDictionary *_serviceLookup;
    NSDictionary *_interfaceLookup;
    NSObject<OS_dispatch_queue> *_invocationQueue;
    NSObject<OS_dispatch_semaphore> *_concurrentRequestSemaphore;
    GKThreadsafeDictionary *_pendingRequests;
    id <GKDaemonProxyDataUpdateDelegate> _dataUpdateDelegate;
    id <GKDaemonProxyNetworkActivityIndicatorDelegate> _networkActivityIndicatorDelegate;
}

+ (id)daemonProxy;
+ (id)analyticsServicePrivateProxy;
+ (id)analyticsServiceProxy;
+ (id)linkedAccountsServicePrivateProxy;
+ (id)linkedAccountsServiceProxy;
+ (id)bulletinServicePrivateProxy;
+ (id)bulletinServiceProxy;
+ (id)utilityServicePrivateProxy;
+ (id)utilityServiceProxy;
+ (id)turnBasedServicePrivateProxy;
+ (id)turnBasedServiceProxy;
+ (id)multiplayerServicePrivateProxy;
+ (id)multiplayerServiceProxy;
+ (id)challengeServicePrivateProxy;
+ (id)challengeServiceProxy;
+ (id)gameStatServicePrivateProxy;
+ (id)gameStatServiceProxy;
+ (id)gameServicePrivateProxy;
+ (id)gameServiceProxy;
+ (id)friendServicePrivateProxy;
+ (id)friendServiceProxy;
+ (id)profileServicePrivateProxy;
+ (id)profileServiceProxy;
+ (id)accountServicePrivateProxy;
+ (id)accountServiceProxy;
@property(nonatomic) id <GKDaemonProxyDataUpdateDelegate> dataUpdateDelegate; // @synthesize dataUpdateDelegate=_dataUpdateDelegate;
@property(nonatomic) id <GKDaemonProxyNetworkActivityIndicatorDelegate> networkActivityIndicatorDelegate; // @synthesize networkActivityIndicatorDelegate=_networkActivityIndicatorDelegate;
@property(nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(_Bool)arg3;
- (id)replyQueueForRequestSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)_replyToDuplicatesForRequest:(id)arg1 withInvocation:(id)arg2 queue:(id)arg3;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)methodSignatureForProtocol:(id)arg1 selector:(SEL)arg2;
- (oneway void)setLogBits:(int)arg1;
- (oneway void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(id)arg2;
- (oneway void)setBadgeCount:(unsigned long long)arg1 forType:(unsigned long long)arg2;
- (oneway void)challengeCompleted:(id)arg1;
- (oneway void)challengeReceived:(id)arg1;
- (oneway void)completedChallengeSelected:(id)arg1;
- (void)dispatchCompletedChallenge:(id)arg1;
- (oneway void)achievementSelected:(id)arg1;
- (oneway void)scoreSelected:(id)arg1;
- (oneway void)receivedChallengeSelected:(id)arg1;
- (oneway void)respondedToNearbyInvite:(id)arg1;
- (oneway void)setLocalPlayer:(id)arg1 authenticated:(_Bool)arg2 reply:(CDUnknownBlockType)arg3;
- (oneway void)completedOptimisticAuthenticationWithResponse:(id)arg1 error:(id)arg2;
- (oneway void)setCurrentGame:(id)arg1 serverEnvironment:(long long)arg2 reply:(CDUnknownBlockType)arg3;
- (oneway void)setPreferencesValues:(id)arg1;
- (oneway void)resetNetworkActivity;
- (oneway void)endNetworkActivity;
- (oneway void)beginNetworkActivity;
- (oneway void)getAuthenticatedPlayerIDWithHandler:(CDUnknownBlockType)arg1;
- (oneway void)getAccountNameWithHandler:(CDUnknownBlockType)arg1;
- (id)authenticatedPlayerInfo;
- (_Bool)hasAuthenticatedAccount;
- (id)accountName;
- (void)getAccountURLsWithHandler:(CDUnknownBlockType)arg1;
- (id)authenticatedPlayerID;
- (void)dealloc;
- (id)init;
- (void)buildServiceLookup;
- (void)resetServiceLookup;
- (void)_resetServiceLookup;
- (void)buildServiceLookupIfNeccessary;
- (void)addService:(id)arg1 forProtocol:(id)arg2 toLookup:(id)arg3;
- (void)setHostPID:(int)arg1;
- (void)buildInterfaceLookup;
- (void)addInterface:(id)arg1 toLookup:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKDevice : NSObject
{
    NSString *_udid;
    NSString *_deviceName;
    NSString *_osVersion;
    NSString *_buildVersion;
    NSString *_gameKitVersion;
    GKEventEmitter<GKLockStatusObserver> *_emitter;
}

+ (id)currentDevice;
@property(retain, nonatomic) GKEventEmitter<GKLockStatusObserver> *emitter; // @synthesize emitter=_emitter;
@property(readonly, nonatomic) NSString *gameKitVersion; // @synthesize gameKitVersion=_gameKitVersion;
@property(readonly, nonatomic) NSString *buildVersion; // @synthesize buildVersion=_buildVersion;
@property(readonly, nonatomic) NSString *osVersion; // @synthesize osVersion=_osVersion;
@property(readonly, nonatomic) NSString *deviceName; // @synthesize deviceName=_deviceName;
- (void)removeLockStatusObserver:(id)arg1;
- (void)addLockStatusObserver:(id)arg1;
- (void)stopObservingKeyBagStatus;
- (void)beginObservingKeyBagStatusWithCallback:(CDUnknownFunctionPointerType)arg1;
- (id)buildVersionHeader;
- (id)protocolVersionHeader;
- (id)storeUserAgent;
- (id)processNameHeader;
- (id)userAgentWithProcessName:(id)arg1 protocolVersion:(id)arg2;
- (id)userAgent;
- (void)dealloc;
@property(readonly, nonatomic) NSString *udid;
- (id)init;
- (_Bool)isDevelopmentDevice;
- (id)_platformUDID;
- (void)_initPlatform;

@end

@interface GKDigestVerification : NSObject
{
}

+ (_Bool)digest:(id)arg1 matchesHash:(id)arg2;
+ (id)computeVerificationHashForDigest:(id)arg1;
+ (id)digestForSubmitAchievement:(id)arg1 forBundleID:(id)arg2 shouldScreen:(_Bool)arg3 eligibleChallenges:(id)arg4;
+ (id)digestForSubmitScore:(id)arg1 forBundleID:(id)arg2 shouldScreen:(_Bool)arg3 eligibleChallenges:(id)arg4;

@end

@interface GKDispatchGroup : NSObject
{
    NSString *_name;
    NSObject<OS_dispatch_group> *_group;
    GKThreadsafeDictionary *_values;
    NSError *_error;
    id result;
    int _sequence;
    _Bool _loggingEnabled;
    id _result;
}

+ (id)mainQueue;
+ (id)backgroundConcurrentQueue;
+ (id)defaultConcurrentQueue;
+ (id)dispatchGroup;
+ (id)dispatchGroupWithName:(id)arg1;
@property(nonatomic, getter=isLoggingEnabled) _Bool loggingEnabled; // @synthesize loggingEnabled=_loggingEnabled;
@property(retain) id result; // @synthesize result=_result;
@property(retain) NSError *error; // @synthesize error=_error;
@property NSObject<OS_dispatch_group> *group; // @synthesize group=_group;
- (id)allValues;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)_values;
- (void)join:(id)arg1 queue:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)_waitWithDispatchTimeout:(unsigned long long)arg1;
- (void)waitWithTimeout:(double)arg1;
- (void)wait;
- (void)notifyOnMainQueueWithBlock:(CDUnknownBlockType)arg1;
- (void)notifyOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)leave;
- (void)enter;
- (void)perform:(CDUnknownBlockType)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithName:(id)arg1;
- (id)init;

@end

@interface GKDistributedNotificationCenter : NSObject <NSXPCListenerDelegate>
{
    id _internal;
}

+ (id)defaultCenter;
@property(retain) CPDistributedNotificationCenter *notificationCenter; // @synthesize notificationCenter=_internal;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3;
- (void)postNotificationName:(id)arg1;
- (void)postNotificationName:(id)arg1 userInfo:(id)arg2 toBundleIdentifier:(id)arg3;
- (void)postNotificationName:(id)arg1 userInfo:(id)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKDownloadObserver : NSObject <SSDownloadManagerObserver>
{
    SSDownloadManager *_downloadManager;
}

+ (id)sharedObserver;
@property(retain) SSDownloadManager *downloadManager; // @synthesize downloadManager=_downloadManager;
- (void)downloadManager:(id)arg1 downloadStatesDidChange:(id)arg2;
- (_Bool)isDownloadingGame:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKEventEmitter : NSObject
{
    NSHashTable *_listeners;
    NSMutableArray *_supportedProtocols;
    _Bool _shouldQueue;
    NSMutableArray *_queuedEvents;
}

+ (id)eventEmitterForProtocols:(id)arg1 shouldQueue:(_Bool)arg2;
+ (id)eventEmitterForProtocols:(id)arg1;
@property(retain, nonatomic) NSMutableArray *queuedEvents; // @synthesize queuedEvents=_queuedEvents;
@property(nonatomic) _Bool shouldQueue; // @synthesize shouldQueue=_shouldQueue;
@property(retain, nonatomic) NSMutableArray *supportedProtocols; // @synthesize supportedProtocols=_supportedProtocols;
@property(retain, nonatomic) NSHashTable *listeners; // @synthesize listeners=_listeners;
- (_Bool)listenerRegisteredForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)invocationForProtocol:(id)arg1 selector:(SEL)arg2;
- (id)methodSignatureForProtocol:(id)arg1 selector:(SEL)arg2;
- (void)unregisterAllListeners;
- (void)unregisterListener:(id)arg1;
- (void)registerListener:(id)arg1;
- (void)dispatchQueuedEventsToListener:(id)arg1;
- (void)dealloc;
- (id)initWithSupportedProtocols:(id)arg1 shouldQueue:(_Bool)arg2;

@end

@interface GKFamiliarPlayerInternal : GKPlayerInternal
{
    NSString *_firstName;
    NSString *_lastName;
    NSString *_compositeName;
}

+ (id)secureCodedPropertyKeys;
- (void)setCompositeName:(id)arg1;
- (id)compositeName;
- (void)setLastName:(id)arg1;
- (id)lastName;
- (void)setFirstName:(id)arg1;
- (id)firstName;
- (void)dealloc;

@end

@interface GKFriendPlayerInternal : GKFamiliarPlayerInternal
{
    NSString *_status;
    NSDate *_lastPlayedDate;
    GKGameInternal *_lastPlayedGame;
}

+ (id)secureCodedPropertyKeys;
- (void)setLastPlayedGame:(id)arg1;
- (id)lastPlayedGame;
- (void)setLastPlayedDate:(id)arg1;
- (id)lastPlayedDate;
- (void)setStatus:(id)arg1;
- (id)status;
- (int)defaultFamiliarity;
- (_Bool)isFriend;
- (void)dealloc;

@end

@interface GKFriendRecommendationInternal : GKFamiliarPlayerInternal
{
    NSString *_reason;
    NSString *_reason2;
    unsigned int _rid;
    int _source;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) int source; // @synthesize source=_source;
@property(nonatomic) unsigned int rid; // @synthesize rid=_rid;
@property(retain, nonatomic) NSString *reason2; // @synthesize reason2=_reason2;
@property(retain, nonatomic) NSString *reason; // @synthesize reason=_reason;
- (int)defaultFamiliarity;
- (void)dealloc;

@end

@interface GKFriendRequestInternal : GKFamiliarPlayerInternal
{
    NSString *_message;
    NSDate *_date;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) NSDate *date; // @synthesize date=_date;
- (int)defaultFamiliarity;
- (void)dealloc;

@end

@interface GKFriendServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKFriendServicePrivateInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKGame : NSObject <NSCoding, NSSecureCoding>
{
    GKGameInternal *_internal;
    long long _environment;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)updateGames:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadTopGamesWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)loadGamesWithBundleIDs:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (_Bool)supportsSecureCoding;
+ (void)setCurrentGameFromInternal:(id)arg1 serverEnvironment:(long long)arg2;
+ (id)currentGameIncludingGameCenter:(_Bool)arg1;
+ (id)currentGame;
+ (_Bool)isGameCenter;
+ (_Bool)isPreferences;
+ (void)markGameRecommendationsViewed:(id)arg1 complete:(CDUnknownBlockType)arg2;
+ (void)markGameRecommendationsDisplayed:(id)arg1 complete:(CDUnknownBlockType)arg2;
@property(nonatomic) long long environment; // @synthesize environment=_environment;
@property(retain) GKGameInternal *internal; // @synthesize internal=_internal;
@property(readonly, nonatomic, getter=isDownloading) _Bool downloading;
@property(readonly, nonatomic, getter=isInstalled) _Bool installedGame;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (_Bool)isStoreItemUnexpired;
@property(readonly, nonatomic) struct GKGameInfo gameInfo;
@property(readonly, nonatomic) NSString *cacheKey;
@property(readonly, nonatomic) NSDictionary *gameDescriptor;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
- (_Bool)isGameCenter;
- (void)loadTellAFriendMessageWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getFriendPlayersForAchievement:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)getFriendPlayersForLeaderboard:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)getFriendPlayersIncludingCompatibleGames:(_Bool)arg1 handler:(CDUnknownBlockType)arg2;
- (void)submitRating:(float)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)loadGameRatingWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool isGameRecommendation; // @dynamic isGameRecommendation;

// Remaining properties
@property(readonly, nonatomic) NSNumber *adamID; // @dynamic adamID;
@property(readonly, nonatomic) NSString *bundleIdentifier; // @dynamic bundleIdentifier;
@property(readonly, nonatomic) NSString *bundleVersion; // @dynamic bundleVersion;
@property(readonly, nonatomic) NSString *defaultCategory; // @dynamic defaultCategory;
@property(retain, nonatomic) NSString *engineID; // @dynamic engineID;
@property(readonly, nonatomic) NSNumber *externalVersion; // @dynamic externalVersion;
@property(readonly, nonatomic) NSString *name; // @dynamic name;
@property(nonatomic) unsigned char platform; // @dynamic platform;
@property(nonatomic, getter=isPrerendered) _Bool prerendered; // @dynamic prerendered;
@property(retain, nonatomic) NSString *reason; // @dynamic reason;
@property(retain, nonatomic) GKStoreItemInternal *storeItem; // @dynamic storeItem;
@property(readonly, nonatomic) _Bool supportsMultiplayer; // @dynamic supportsMultiplayer;
@property(readonly, nonatomic) _Bool supportsTurnBasedMultiplayer; // @dynamic supportsTurnBasedMultiplayer;

@end

@interface GKGameCenterLauncher : NSObject
{
}

+ (id)gameCenterURLStringWithPath:(id)arg1;

@end

@interface GKGameDescriptor : GKInternalRepresentation
{
    NSString *_bundleIdentifier;
    NSString *_bundleVersion;
    NSNumber *_adamID;
    NSNumber *_externalVersion;
}

+ (_Bool)supportsSecureCoding;
+ (id)secureCodedPropertyKeys;
+ (id)gameDescriptorWithBundleID:(id)arg1 bundleVersion:(id)arg2 adamID:(id)arg3;
+ (id)gameDescriptorWithBundleID:(id)arg1 adamID:(id)arg2;
+ (id)gameDescriptorWithBundleID:(id)arg1;
@property(retain, nonatomic) NSNumber *externalVersion; // @synthesize externalVersion=_externalVersion;
@property(retain, nonatomic) NSNumber *adamID; // @synthesize adamID=_adamID;
@property(copy, nonatomic) NSString *bundleVersion; // @synthesize bundleVersion=_bundleVersion;
@property(copy, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
- (id)description;
- (void)setDictionary:(id)arg1;
- (id)dictionary;
- (void)dealloc;
- (id)initWithPushDictionary:(id)arg1;
- (id)initWithDictionary:(id)arg1;

@end

@interface GKGameInternal : GKGameDescriptor
{
    NSString *_name;
    NSDictionary *_icons;
    NSString *_defaultLeaderboardIdentifier;
    GKStoreItemInternal *_storeItem;
    union {
        struct {
            unsigned int _platform:8;
            unsigned int _prerendered:1;
            unsigned int _supportsLeaderboards:1;
            unsigned int _supportsLeaderboardSets:1;
            unsigned int _hasAggregateLeaderboard:1;
            unsigned int _supportsAchievements:1;
            unsigned int _supportsMultiplayer:1;
            unsigned int _valid:1;
            unsigned int _unused:1;
            unsigned int _supportsTurnBasedMultiplayer:1;
            unsigned int _reserved:13;
        } ;
        unsigned int _value;
    } _flags;
    unsigned short _numberOfLeaderboards;
    unsigned short _numberOfLeaderboardSets;
    unsigned short _numberOfAchievements;
    unsigned short _maxAchievementPoints;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) GKStoreItemInternal *storeItem; // @synthesize storeItem=_storeItem;
@property(nonatomic) unsigned short maxAchievementPoints; // @synthesize maxAchievementPoints=_maxAchievementPoints;
@property(nonatomic) unsigned short numberOfAchievements; // @synthesize numberOfAchievements=_numberOfAchievements;
@property(nonatomic) unsigned short numberOfLeaderboardSets; // @synthesize numberOfLeaderboardSets=_numberOfLeaderboardSets;
@property(nonatomic) unsigned short numberOfLeaderboards; // @synthesize numberOfLeaderboards=_numberOfLeaderboards;
@property(retain, nonatomic) NSString *defaultLeaderboardIdentifier; // @synthesize defaultLeaderboardIdentifier=_defaultLeaderboardIdentifier;
@property(retain, nonatomic) NSDictionary *icons; // @synthesize icons=_icons;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) unsigned int flags; // @dynamic flags;
@property(nonatomic) _Bool supportsTurnBasedMultiplayer; // @dynamic supportsTurnBasedMultiplayer;
@property(nonatomic, getter=isValid) _Bool valid; // @dynamic valid;
@property(nonatomic) _Bool supportsMultiplayer; // @dynamic supportsMultiplayer;
@property(nonatomic) _Bool supportsAchievements; // @dynamic supportsAchievements;
@property(nonatomic) _Bool hasAggregateLeaderboard;
@property(nonatomic) _Bool supportsLeaderboardSets; // @dynamic supportsLeaderboardSets;
@property(nonatomic) _Bool supportsLeaderboards; // @dynamic supportsLeaderboards;
@property(nonatomic, getter=isPrerendered) _Bool prerendered; // @dynamic prerendered;
@property(nonatomic) unsigned char platform; // @dynamic platform;
- (id)description;
- (id)serverRepresentation;
- (void)dealloc;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)defaultCategory;
- (unsigned short)numberOfCategories;

@end

@interface GKGameMatch : NSObject
{
    GKRecentMatchInternal *_internal;
    GKGame *_game;
    GKPlayer *_player;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
@property(readonly, nonatomic) GKPlayer *player; // @synthesize player=_player;
@property(readonly, nonatomic) GKGame *game; // @synthesize game=_game;
@property(retain) GKRecentMatchInternal *internal; // @synthesize internal=_internal;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1 game:(id)arg2;

// Remaining properties
@property(retain, nonatomic) NSDate *date; // @dynamic date;

@end

@interface GKGameRecommendationInternal : GKGameInternal
{
    NSString *_reason;
    NSString *_engineID;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSString *engineID; // @synthesize engineID=_engineID;
@property(retain, nonatomic) NSString *reason; // @synthesize reason=_reason;
- (id)serverRepresentation;
- (void)dealloc;
- (id)initWithGame:(id)arg1;

@end

@interface GKGameRecord : GKGame
{
    GKPlayer *_player;
}

+ (void)loadGameRecordsForPlayer:(id)arg1 games:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)loadGameRecordForPlayer:(id)arg1 game:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (id)gameRecordForPlayer:(id)arg1 game:(id)arg2;
+ (id)internalRepresentationForPlayer:(id)arg1 game:(id)arg2;
+ (void)invalidateCaches;
+ (id)internalRepresentationCache;
+ (id)cacheKeyForPlayer:(id)arg1 internal:(id)arg2;
+ (id)cacheKeyForPlayer:(id)arg1 game:(id)arg2;
+ (_Bool)supportsSecureCoding;
+ (void)partitionGameRecords:(id)arg1 returniOS:(id *)arg2 returnMac:(id *)arg3;
@property(retain, nonatomic) GKPlayer *player; // @synthesize player=_player;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly, nonatomic) _Bool played;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1 player:(id)arg2;

// Remaining properties
@property(readonly, nonatomic) unsigned long long achievementPoints; // @dynamic achievementPoints;
@property(readonly, nonatomic) unsigned long long achievements; // @dynamic achievements;
@property(readonly, nonatomic) NSString *defaultLeaderboardIdentifier; // @dynamic defaultLeaderboardIdentifier;
@property(readonly, nonatomic) unsigned long long friendRank; // @dynamic friendRank;
@property(readonly, retain) GKGameRecordInternal *internal; // @dynamic internal;
@property(readonly, nonatomic) NSDate *lastPlayedDate; // @dynamic lastPlayedDate;
@property(readonly, nonatomic) unsigned long long maxAchievementPoints; // @dynamic maxAchievementPoints;
@property(readonly, nonatomic) unsigned long long maxAchievements; // @dynamic maxAchievements;
@property(readonly, nonatomic) unsigned long long maxFriendRank; // @dynamic maxFriendRank;
@property(readonly, nonatomic) unsigned long long maxRank; // @dynamic maxRank;
@property(readonly, nonatomic) unsigned long long numberOfCategories; // @dynamic numberOfCategories;
@property(readonly, nonatomic) unsigned long long numberOfLeaderboardSets; // @dynamic numberOfLeaderboardSets;
@property(readonly, nonatomic) unsigned long long numberOfLeaderboards; // @dynamic numberOfLeaderboards;
@property(readonly, nonatomic) NSDate *purchaseDate; // @dynamic purchaseDate;
@property(readonly, nonatomic) unsigned long long rank; // @dynamic rank;
@property(readonly, nonatomic) _Bool supportsAchievements; // @dynamic supportsAchievements;
@property(readonly, nonatomic) _Bool supportsLeaderboardSets; // @dynamic supportsLeaderboardSets;
@property(readonly, nonatomic) _Bool supportsLeaderboards; // @dynamic supportsLeaderboards;

@end

@interface GKGameRecordInternal : GKGameInternal
{
    GKScoreInternal *_score;
    NSDate *_lastPlayedDate;
    NSDate *_purchaseDate;
    unsigned short _achievements;
    short _achievementPoints;
    unsigned short _friendRank;
    unsigned short _maxFriendRank;
    unsigned int _rank;
    unsigned int _maxRank;
}

+ (id)secureCodedPropertyKeys;
+ (id)gameRecordForGame:(id)arg1;
@property(nonatomic) unsigned int maxRank; // @synthesize maxRank=_maxRank;
@property(nonatomic) unsigned int rank; // @synthesize rank=_rank;
@property(nonatomic) unsigned short maxFriendRank; // @synthesize maxFriendRank=_maxFriendRank;
@property(nonatomic) unsigned short friendRank; // @synthesize friendRank=_friendRank;
@property(nonatomic) short achievementPoints; // @synthesize achievementPoints=_achievementPoints;
@property(nonatomic) unsigned short achievements; // @synthesize achievements=_achievements;
@property(retain, nonatomic) NSDate *purchaseDate; // @synthesize purchaseDate=_purchaseDate;
@property(retain, nonatomic) NSDate *lastPlayedDate; // @synthesize lastPlayedDate=_lastPlayedDate;
@property(retain, nonatomic) GKScoreInternal *score; // @synthesize score=_score;
- (void)updateWithGame:(id)arg1;
- (void)dealloc;

@end

@interface GKGameServiceInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKGameServicePrivateInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKGameStatServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKGameStatServicePrivateInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKReachability : NSObject
{
    _Bool localWiFiRef;
    struct __SCNetworkReachability *reachabilityRef;
}

+ (id)_gkReachabilityForLocalWiFi;
+ (id)_gkReachabilityForInternetConnection;
+ (id)_gkReachabilityWithAddress:(const struct sockaddr_in *)arg1;
+ (id)_gkReachabilityWithHostName:(id)arg1;
- (int)_gkCurrentReachabilityStatus;
- (_Bool)_gkConnectionRequired;
- (int)networkStatusForFlags:(unsigned int)arg1;
- (int)localWiFiStatusForFlags:(unsigned int)arg1;
- (void)dealloc;
- (void)_gkStopNotifier;
- (_Bool)_gkStartNotifier;

@end

@interface GKHostReachability : GKReachability
{
    NSString *_hostName;
    NSError *_error;
}

+ (id)_gkReachabilityWithHostName:(id)arg1;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSString *hostName; // @synthesize hostName=_hostName;
- (void)dealloc;

@end

@interface GKInvite : NSObject
{
    _Bool _cancelled;
    GKInviteInternal *_internal;
    GKPlayer *_sender;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
@property(nonatomic, getter=isCancelled) _Bool cancelled; // @synthesize cancelled=_cancelled;
@property(readonly, retain, nonatomic) GKPlayer *sender; // @synthesize sender=_sender;
@property(retain) GKInviteInternal *internal; // @synthesize internal=_internal;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)description;
@property(readonly, nonatomic, getter=isHosted) _Bool hosted; // @dynamic hosted;
@property(readonly, retain, nonatomic) NSString *inviter; // @dynamic inviter;
- (void)dealloc;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, nonatomic) NSString *inviteID; // @dynamic inviteID;
@property(readonly, nonatomic) _Bool isNearby; // @dynamic isNearby;
@property(readonly, nonatomic) NSString *message; // @dynamic message;
@property(readonly, nonatomic) unsigned int playerAttributes; // @dynamic playerAttributes;
@property(readonly, nonatomic) unsigned long long playerGroup; // @dynamic playerGroup;
@property(readonly, nonatomic) NSData *sessionToken; // @dynamic sessionToken;

@end

@interface GKInviteInternal : GKInternalRepresentation
{
    NSString *_inviteID;
    NSData *_sessionToken;
    GKPlayerInternal *_player;
    NSString *_message;
    NSDictionary *_localizableMessage;
    NSString *_deviceID;
    NSString *_bundleID;
    NSString *_peerID;
    NSData *_peerPushToken;
    NSData *_peerNATIP;
    NSData *_peerBlob;
    NSString *_rid;
    int _playerGroup;
    unsigned int _playerAttributes;
    int _peerNATType;
    unsigned long long _matchType;
    unsigned char _version;
    NSString *_participantID;
}

+ (id)secureCodedPropertyKeys;
+ (id)nearbyInviteIDForPlayerID:(id)arg1 deviceID:(id)arg2 bundleID:(id)arg3;
+ (id)inviteFromNearbyPlayer:(id)arg1 participantID:(id)arg2 deviceID:(id)arg3 bundleID:(id)arg4 connectionData:(id)arg5;
+ (id)inviteWithBulletin:(id)arg1;
@property(retain, nonatomic) NSString *rid; // @synthesize rid=_rid;
@property(nonatomic) unsigned int playerAttributes; // @synthesize playerAttributes=_playerAttributes;
@property(retain, nonatomic) NSString *deviceID; // @synthesize deviceID=_deviceID;
@property(retain, nonatomic) GKPlayerInternal *player; // @synthesize player=_player;
@property(retain, nonatomic) NSData *peerNATIP; // @synthesize peerNATIP=_peerNATIP;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(nonatomic) unsigned long long matchType; // @synthesize matchType=_matchType;
@property(nonatomic) unsigned char version; // @synthesize version=_version;
@property(retain, nonatomic) NSData *peerPushToken; // @synthesize peerPushToken=_peerPushToken;
@property(retain, nonatomic) NSDictionary *localizableMessage; // @synthesize localizableMessage=_localizableMessage;
@property(retain, nonatomic) NSData *sessionToken; // @synthesize sessionToken=_sessionToken;
@property(retain, nonatomic) NSString *bundleID; // @synthesize bundleID=_bundleID;
@property(retain, nonatomic) NSString *participantID; // @synthesize participantID=_participantID;
@property(retain, nonatomic) NSString *inviteID; // @synthesize inviteID=_inviteID;
@property(retain, nonatomic) NSData *peerBlob; // @synthesize peerBlob=_peerBlob;
@property(retain, nonatomic) NSString *peerID; // @synthesize peerID=_peerID;
@property(nonatomic) int playerGroup; // @synthesize playerGroup=_playerGroup;
@property(nonatomic) int peerNATType; // @synthesize peerNATType=_peerNATType;
@property(readonly, nonatomic) _Bool isNearby; // @dynamic isNearby;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;

@end

@interface GKLeaderboard : NSObject
{
    int _loadingCount;
    int _lock;
    long long _timeScope;
    long long _playerScope;
    NSArray *_players;
    NSArray *_scores;
    GKScore *_localPlayerScore;
    id <GKLeaderboardDelegate> _weakDelegate;
    GKLeaderboardInternal *_internal;
    struct _NSRange _range;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)setDefaultLeaderboard:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadLeaderboardsForGame:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadLeaderboardsForGame:(id)arg1 withPlayer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)loadLeaderboardWithIdentifier:(id)arg1 forGame:(id)arg2 withPlayer:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
+ (void)loadLeaderboardsForGame:(id)arg1 forSet:(id)arg2 withPlayer:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
+ (void)loadLeaderboardsWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)loadCategoriesWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(nonatomic) int lock; // @synthesize lock=_lock;
@property(nonatomic) int loadingCount; // @synthesize loadingCount=_loadingCount;
@property(retain) GKLeaderboardInternal *internal; // @synthesize internal=_internal;
@property(retain, nonatomic) GKScore *localPlayerScore; // @synthesize localPlayerScore=_localPlayerScore;
@property(retain, nonatomic) NSArray *scores; // @synthesize scores=_scores;
@property(retain, nonatomic) NSArray *players; // @synthesize players=_players;
@property(nonatomic) long long playerScope; // @synthesize playerScope=_playerScope;
@property(nonatomic) long long timeScope; // @synthesize timeScope=_timeScope;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)decrementLoadingCountAtomically;
- (void)incrementLoadingCountAtomically;
- (void)loadScoresForGame:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)loadScoresForRequest:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (id)scoreRequestForGame:(id)arg1;
- (void)loadScoresWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, getter=isLoading) _Bool loading; // @dynamic loading;
@property(nonatomic) struct _NSRange range; // @synthesize range=_range;
@property(nonatomic) id <GKLeaderboardDelegate> delegate; // @synthesize delegate=_weakDelegate;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithPlayerIDs:(id)arg1;
- (id)initWithPlayers:(id)arg1;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;

// Remaining properties
@property(copy, nonatomic) NSString *category; // @dynamic category;
@property(readonly, nonatomic) long long friendRank; // @dynamic friendRank;
@property(readonly, nonatomic) long long friendRankCount; // @dynamic friendRankCount;
@property(readonly, retain, nonatomic) NSString *groupIdentifier; // @dynamic groupIdentifier;
@property(copy, nonatomic) NSString *identifier; // @dynamic identifier;
@property(readonly, retain, nonatomic) NSString *localizedTitle; // @dynamic localizedTitle;
@property(readonly, nonatomic) unsigned long long maxRange; // @dynamic maxRange;
@property(readonly, nonatomic) long long overallRank; // @dynamic overallRank;
@property(readonly, nonatomic) long long overallRankCount; // @dynamic overallRankCount;
@property(readonly, copy, nonatomic) NSString *title; // @dynamic title;

@end

@interface GKLeaderboardInternal : GKInternalRepresentation
{
    NSString *_identifier;
    NSString *_groupIdentifier;
    NSString *_title;
    NSString *_leaderboardSetIdentifier;
    NSDate *_lastSubmittedDate;
    NSDictionary *_icons;
    unsigned int _overallRank;
    unsigned int _overallRankCount;
    unsigned short _friendRank;
    unsigned short _friendRankCount;
    unsigned int _maxRank;
    NSArray *_scores;
    GKScoreInternal *_playerScore;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) unsigned int maxRank; // @synthesize maxRank=_maxRank;
@property(nonatomic) unsigned short friendRankCount; // @synthesize friendRankCount=_friendRankCount;
@property(nonatomic) unsigned short friendRank; // @synthesize friendRank=_friendRank;
@property(nonatomic) unsigned int overallRankCount; // @synthesize overallRankCount=_overallRankCount;
@property(nonatomic) unsigned int overallRank; // @synthesize overallRank=_overallRank;
@property(retain, nonatomic) GKScoreInternal *playerScore; // @synthesize playerScore=_playerScore;
@property(retain, nonatomic) NSArray *scores; // @synthesize scores=_scores;
@property(retain, nonatomic) NSDictionary *icons; // @synthesize icons=_icons;
@property(retain, nonatomic) NSDate *lastSubmittedDate; // @synthesize lastSubmittedDate=_lastSubmittedDate;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSString *leaderboardSetIdentifier; // @synthesize leaderboardSetIdentifier=_leaderboardSetIdentifier;
@property(retain, nonatomic) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
@property(readonly, nonatomic) unsigned long long maxRange;
@property(retain, nonatomic) NSString *localizedTitle;
@property(retain, nonatomic) NSString *category;

@end

@interface GKLeaderboardScorePlayersRequest : GKLeaderboardScoreRequest
{
    NSArray *_playerInternals;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSArray *playerInternals; // @synthesize playerInternals=_playerInternals;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface GKLeaderboardSet : NSObject <NSCoding, NSSecureCoding>
{
    GKLeaderboardSetInternal *_internal;
}

+ (void)loadLeaderboardSetsWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)loadLeaderboardSetsForGame:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (_Bool)supportsSecureCoding;
@property(retain) GKLeaderboardSetInternal *internal; // @synthesize internal=_internal;
- (void)loadLeaderboardsForGame:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)loadLeaderboardsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadLeaderboardsForGame:(id)arg1 forPlayer:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;

// Remaining properties
@property(readonly, retain, nonatomic) NSString *groupIdentifier; // @dynamic groupIdentifier;
@property(copy, nonatomic) NSString *identifier; // @dynamic identifier;
@property(readonly, retain, nonatomic) NSArray *leaderboardIdentifiers; // @dynamic leaderboardIdentifiers;
@property(copy, nonatomic) NSString *title; // @dynamic title;

@end

@interface GKLeaderboardSetInternal : GKInternalRepresentation
{
    NSString *_identifier;
    NSString *_groupIdentifier;
    NSString *_title;
    NSDictionary *_leaderboardIdentifiers;
    NSDictionary *_icons;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSDictionary *leaderboardIdentifiers; // @synthesize leaderboardIdentifiers=_leaderboardIdentifiers;
@property(retain, nonatomic) NSDictionary *icons; // @synthesize icons=_icons;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
@property(retain, nonatomic) NSString *setIdentifier;

@end

@interface GKLinkedAccountsServiceInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKLinkedAccountsServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKLinkedList : NSObject
{
    GKListNode *_headNode;
    GKListNode *_tailNode;
}

@property(nonatomic) GKListNode *tailNode; // @synthesize tailNode=_tailNode;
@property(nonatomic) GKListNode *headNode; // @synthesize headNode=_headNode;
- (id)nodeForInsertionWithValue:(id)arg1;
- (void)removeNode:(id)arg1;
- (void)insertNodeAtBeginning:(id)arg1;
- (void)insertNode:(id)arg1 before:(id)arg2;
- (void)removeAllNodes;
- (void)dealloc;
- (id)description;
- (id)init;
- (id)insertNodeAtBeginningWithValue:(id)arg1 forKey:(id)arg2;
- (_Bool)isConsistent;
- (_Bool)hasCycle;

@end

@interface GKListNode : NSObject
{
    id _value;
    GKListNode *_prevNode;
    GKListNode *_nextNode;
}

@property(nonatomic) GKListNode *nextNode; // @synthesize nextNode=_nextNode;
@property(nonatomic) GKListNode *prevNode; // @synthesize prevNode=_prevNode;
@property(retain, nonatomic) id value; // @synthesize value=_value;
- (id)description;
- (void)dealloc;
- (id)initWithValue:(id)arg1;

@end

@interface GKPlayer : NSObject <NSCoding, NSSecureCoding>
{
    GKPlayerInternal *_internal;
    NSAttributedString *_whenString;
    NSArray *_friends;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)loadCompletePlayersForPlayers:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (void)_loadPlayersForIdentifiers:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadPlayersForIdentifiers:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadPlayersForLegacyIdentifiers:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (id)cacheKeyForPlayerID:(id)arg1;
+ (_Bool)supportsSecureCoding;
+ (id)automatchPlayer;
+ (id)unknownPlayer;
+ (id)anonymousPlayer;
+ (id)canonicalizedPlayerForInternal:(id)arg1;
+ (id)playerFromPlayerID:(id)arg1;
@property(retain, nonatomic) NSArray *friends; // @synthesize friends=_friends;
@property(retain, nonatomic) NSAttributedString *whenString; // @synthesize whenString=_whenString;
@property(retain) GKPlayerInternal *internal; // @synthesize internal=_internal;
- (_Bool)isFriendablePlayer;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)sortName;
@property(readonly, nonatomic) NSString *displayName;
- (id)displayNameWithOptions:(unsigned char)arg1;
- (void)loadProfileWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadGamesPlayedDetailsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadGamesPlayedIncludingInstalledGames:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)loadGamesPlayed:(CDUnknownBlockType)arg1;
- (void)loadRecentMatchesForGame:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)loadCommonFriends:(_Bool)arg1 asPlayersWithCompletionHandler:(CDUnknownBlockType)arg2;
- (void)loadFriendsAsPlayersWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)declineFriendRequestWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)acceptFriendRequestWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)postChangeNotification;
- (void)_postChangeNotification;
@property(readonly, nonatomic) _Bool isFamiliarFriend;
@property(readonly, nonatomic) _Bool hasPhoto;
- (id)emails;
- (id)email;
@property(readonly, nonatomic) NSString *cacheKey;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
@property(retain, nonatomic) NSString *playerID; // @dynamic playerID;
@property(readonly, nonatomic) CDStruct_c6d350ec stats;
@property(readonly, nonatomic) GKGame *lastPlayedGame;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
@property(readonly, nonatomic) _Bool isFriendRecommendation; // @dynamic isFriendRecommendation;
- (id)minimalPlayer;
@property(readonly) NSString *referenceKey;

// Remaining properties
@property(copy, nonatomic) NSString *alias; // @dynamic alias;
@property(readonly, nonatomic) NSString *firstName; // @dynamic firstName;
@property(readonly, nonatomic) _Bool isAnonymousPlayer; // @dynamic isAnonymousPlayer;
@property(readonly, nonatomic) _Bool isAutomatchPlayer; // @dynamic isAutomatchPlayer;
@property(nonatomic) _Bool isFriend; // @dynamic isFriend;
@property(readonly, nonatomic) _Bool isLocalPlayer; // @dynamic isLocalPlayer;
@property(readonly, nonatomic) _Bool isUnknownPlayer; // @dynamic isUnknownPlayer;
@property(readonly, nonatomic) NSString *lastName; // @dynamic lastName;
@property(readonly, nonatomic) NSDate *lastPlayedDate; // @dynamic lastPlayedDate;
@property(readonly, nonatomic, getter=isLoaded) _Bool loaded; // @dynamic loaded;
@property(nonatomic) unsigned long long numberOfFriends; // @dynamic numberOfFriends;
@property(retain, nonatomic) NSString *reason; // @dynamic reason;
@property(retain, nonatomic) NSString *reason2; // @dynamic reason2;
@property(nonatomic) unsigned int rid; // @dynamic rid;
@property(nonatomic) int source; // @dynamic source;
@property(copy, nonatomic) NSString *status; // @dynamic status;

@end

@interface GKLocalPlayer : GKPlayer <NSCoding, NSSecureCoding, GKSavedGameListener>
{
    _Bool _authenticated;
    _Bool _authenticating;
    _Bool _authenticatingCurrentAccount;
    _Bool _didAuthenticate;
    _Bool _validatingAccount;
    _Bool _enteringForeground;
    _Bool _appUnrecognized;
    _Bool _newToGameCenter;
    CDUnknownBlockType _authenticateHandler;
    GKInvite *_acceptedInvite;
    CDUnknownBlockType _authenticationCompletionHandler;
    CDUnknownBlockType _validateAccountCompletionHandler;
    UIAlertView *_loginAlertView;
    UIAlertView *_currentAlert;
    NSString *_lastUsernameAttempted;
    NSString *_lastAccountNameAuthenticated;
    NSInvocation *_currentFriendRequestInvocation;
    unsigned long long _failedLogins;
    NSDictionary *_authenticateAlertDictionary;
    long long _environment;
    NSString *_lastAuthPlayerID;
    NSDate *_lastAuthDate;
    GKEventEmitter<GKLocalPlayerListener> *_eventEmitter;
    UIViewController *_rootViewController;
    UIViewController *_activeViewController;
    UIViewController<GKAuthenticateViewController> *_signInViewController;
}

+ (id)localPlayer;
+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) UIViewController<GKAuthenticateViewController> *signInViewController; // @synthesize signInViewController=_signInViewController;
@property(retain, nonatomic) UIViewController *activeViewController; // @synthesize activeViewController=_activeViewController;
@property(retain, nonatomic) UIViewController *rootViewController; // @synthesize rootViewController=_rootViewController;
@property(retain, nonatomic) GKEventEmitter<GKLocalPlayerListener> *eventEmitter; // @synthesize eventEmitter=_eventEmitter;
@property(nonatomic, getter=isNewToGameCenter) _Bool newToGameCenter; // @synthesize newToGameCenter=_newToGameCenter;
@property(retain, nonatomic) NSDate *lastAuthDate; // @synthesize lastAuthDate=_lastAuthDate;
@property(retain, nonatomic) NSString *lastAuthPlayerID; // @synthesize lastAuthPlayerID=_lastAuthPlayerID;
@property(readonly, nonatomic) long long environment; // @synthesize environment=_environment;
@property(nonatomic, getter=isAppUnrecognized) _Bool appUnrecognized; // @synthesize appUnrecognized=_appUnrecognized;
@property(retain, nonatomic) NSDictionary *authenticateAlertDictionary; // @synthesize authenticateAlertDictionary=_authenticateAlertDictionary;
@property(nonatomic) unsigned long long failedLogins; // @synthesize failedLogins=_failedLogins;
@property(nonatomic) _Bool enteringForeground; // @synthesize enteringForeground=_enteringForeground;
@property(nonatomic) _Bool validatingAccount; // @synthesize validatingAccount=_validatingAccount;
@property(nonatomic) _Bool didAuthenticate; // @synthesize didAuthenticate=_didAuthenticate;
@property(retain, nonatomic) NSInvocation *currentFriendRequestInvocation; // @synthesize currentFriendRequestInvocation=_currentFriendRequestInvocation;
@property(retain, nonatomic) NSString *lastAccountNameAuthenticated; // @synthesize lastAccountNameAuthenticated=_lastAccountNameAuthenticated;
@property(nonatomic) _Bool authenticatingCurrentAccount; // @synthesize authenticatingCurrentAccount=_authenticatingCurrentAccount;
@property(retain, nonatomic) NSString *lastUsernameAttempted; // @synthesize lastUsernameAttempted=_lastUsernameAttempted;
@property(nonatomic) UIAlertView *currentAlert; // @synthesize currentAlert=_currentAlert;
@property(retain, nonatomic) UIAlertView *loginAlertView; // @synthesize loginAlertView=_loginAlertView;
@property(copy, nonatomic) CDUnknownBlockType validateAccountCompletionHandler; // @synthesize validateAccountCompletionHandler=_validateAccountCompletionHandler;
@property(copy, nonatomic) CDUnknownBlockType authenticationCompletionHandler; // @synthesize authenticationCompletionHandler=_authenticationCompletionHandler;
@property(retain, nonatomic) GKInvite *acceptedInvite; // @synthesize acceptedInvite=_acceptedInvite;
@property(copy, nonatomic) CDUnknownBlockType authenticateHandler; // @synthesize authenticateHandler=_authenticateHandler;
@property(nonatomic, getter=isAuthenticating) _Bool authenticating; // @synthesize authenticating=_authenticating;
@property(nonatomic, getter=isAuthenticated) _Bool authenticated; // @synthesize authenticated=_authenticated;
- (void)generateIdentityVerificationSignatureWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadDefaultLeaderboardCategoryIDWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadDefaultLeaderboardIdentifierWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setDefaultLeaderboardCategoryID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)setDefaultLeaderboardIdentifier:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)hasEmailAddress:(id)arg1;
- (void)daemonInviteeRespondedToGameInvite:(id)arg1;
- (void)daemonCancelledGameInvite:(id)arg1;
- (void)daemonFetchTurnBasedEvent:(id)arg1;
- (void)daemonFetchGameInvite:(id)arg1;
- (void)bundleIDIsCompatibleWithCurrentGame:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)removeFriend:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)declineFriendRequestsFromPlayers:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)acceptFriendRequestsFromPlayers:(id)arg1 withHandles:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)sendFriendRequest:(id)arg1 toAliases:(id)arg2 players:(id)arg3 emailAddresses:(id)arg4 twitterScreenNames:(id)arg5 facebookIDs:(id)arg6 rid:(id)arg7 block:(CDUnknownBlockType)arg8;
- (void)loadFriendRequests:(CDUnknownBlockType)arg1;
- (void)addEmail:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)_addEmail:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)authenticateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)showSettings;
@property(readonly, nonatomic) _Bool canChangePhoto; // @dynamic canChangePhoto;
- (void)loadGameRecommendationsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadFriendRecommendationsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadFriendsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadFriendPlayersWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)friends;
- (void)updateFromLocalPlayer:(id)arg1;
- (id)displayNameWithOptions:(unsigned char)arg1;
- (void)setStatus:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)setStatus:(id)arg1;
- (void)setupMultiplayerNotifications;
- (void)dealloc;
- (id)init;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)unregisterAllListeners;
- (void)unregisterListener:(id)arg1;
- (void)registerListener:(id)arg1;
- (void)setupForCloudSavedGames;
- (void)resolveConflictingSavedGames:(id)arg1 withData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)deleteSavedGamesWithName:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveGameData:(id)arg1 withName:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)fetchSavedGamesWithCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(retain, nonatomic) NSString *accountName; // @dynamic accountName;
@property(readonly, nonatomic) _Bool allowNearbyMultiplayer; // @dynamic allowNearbyMultiplayer;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) NSString *facebookUserID; // @dynamic facebookUserID;
@property(readonly, nonatomic, getter=isFindable) _Bool findable; // @dynamic findable;
@property(retain, nonatomic) NSString *firstName; // @dynamic firstName;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) NSString *iCloudUserID; // @dynamic iCloudUserID;
@property(retain, nonatomic) NSString *lastName; // @dynamic lastName;
@property(nonatomic, getter=isPurpleBuddyAccount) _Bool purpleBuddyAccount; // @dynamic purpleBuddyAccount;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isUnderage) _Bool underage; // @dynamic underage;

@end

@interface GKLocalPlayerInternal : GKFriendPlayerInternal
{
    NSString *_accountName;
    NSArray *_emailAddresses;
    NSString *_facebookUserID;
    NSNumber *_iCloudUserID;
    unsigned short _numberOfRequests;
    unsigned short _numberOfTurns;
    unsigned short _numberOfChallenges;
}

+ (id)secureCodedPropertyKeys;
- (void)setNumberOfChallenges:(unsigned short)arg1;
- (unsigned short)numberOfChallenges;
- (void)setNumberOfTurns:(unsigned short)arg1;
- (unsigned short)numberOfTurns;
- (void)setNumberOfRequests:(unsigned short)arg1;
- (unsigned short)numberOfRequests;
- (id)iCloudUserID;
- (void)setFacebookUserID:(id)arg1;
- (id)facebookUserID;
- (void)setEmailAddresses:(id)arg1;
- (id)emailAddresses;
- (void)setAccountName:(id)arg1;
- (id)accountName;
- (int)defaultFamiliarity;
- (void)setICloudUserID:(id)arg1;
- (_Bool)isFriend;
- (_Bool)isLocalPlayer;
- (void)setPhotoPending:(_Bool)arg1;
- (_Bool)isPhotoPending;
- (void)setFindable:(_Bool)arg1;
- (_Bool)isFindable;
- (void)setUnderage:(_Bool)arg1;
- (_Bool)isUnderage;
- (void)setPurpleBuddyAccount:(_Bool)arg1;
- (_Bool)isPurpleBuddyAccount;
- (void)dealloc;

@end

@interface GKMatch : NSObject <GKSessionDelegate, GKSessionPrivateDelegate>
{
    unsigned char _version;
    _Bool _needHostScore;
    _Bool _hostScoreForQuery;
    unsigned int _packetSequenceNumber;
    GKThreadsafeDictionary *_playersByIdentifier;
    id <GKMatchDelegate> _delegateWeak;
    GKSession *_session;
    GKConnection *_connection;
    unsigned long long _expectedPlayerCount;
    NSMutableDictionary *_playerEventQueues;
    NSMutableArray *_reinvitedPlayers;
    NSData *_selfBlob;
    id <GKMatchDelegate> _inviteDelegateWeak;
    NSMutableDictionary *_playerPushTokens;
    NSMutableArray *_opponentIDs;
    NSString *_rematchID;
    long long _rematchCount;
    NSDictionary *_networkStatistics;
    NSMutableDictionary *_hostScores;
    CDUnknownBlockType _chooseHostCompletion;
}

@property(copy, nonatomic) CDUnknownBlockType chooseHostCompletion; // @synthesize chooseHostCompletion=_chooseHostCompletion;
@property(nonatomic) _Bool hostScoreForQuery; // @synthesize hostScoreForQuery=_hostScoreForQuery;
@property(nonatomic) _Bool needHostScore; // @synthesize needHostScore=_needHostScore;
@property(retain, nonatomic) NSMutableDictionary *hostScores; // @synthesize hostScores=_hostScores;
@property(retain, nonatomic) NSDictionary *networkStatistics; // @synthesize networkStatistics=_networkStatistics;
@property(nonatomic) long long rematchCount; // @synthesize rematchCount=_rematchCount;
@property(retain, nonatomic) NSString *rematchID; // @synthesize rematchID=_rematchID;
@property(retain, nonatomic) NSMutableArray *opponentIDs; // @synthesize opponentIDs=_opponentIDs;
@property(retain, nonatomic) NSMutableDictionary *playerPushTokens; // @synthesize playerPushTokens=_playerPushTokens;
@property(nonatomic) unsigned int packetSequenceNumber; // @synthesize packetSequenceNumber=_packetSequenceNumber;
@property(nonatomic) unsigned char version; // @synthesize version=_version;
@property(retain, nonatomic) NSData *selfBlob; // @synthesize selfBlob=_selfBlob;
@property(retain, nonatomic) NSMutableArray *reinvitedPlayers; // @synthesize reinvitedPlayers=_reinvitedPlayers;
@property(retain, nonatomic) NSMutableDictionary *playerEventQueues; // @synthesize playerEventQueues=_playerEventQueues;
@property(readonly, nonatomic) unsigned long long expectedPlayerCount; // @synthesize expectedPlayerCount=_expectedPlayerCount;
@property(retain, nonatomic) GKConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) GKSession *session; // @synthesize session=_session;
@property(retain, nonatomic) GKThreadsafeDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
- (id)dataFromBase64String:(id)arg1;
- (void)session:(id)arg1 updateRelay:(id)arg2 forPeer:(id)arg3;
- (void)session:(id)arg1 initiateRelay:(id)arg2 forPeer:(id)arg3;
- (_Bool)shouldStartRelay:(id)arg1;
- (void)preemptRelay:(id)arg1;
- (void)initRelayResponse:(id)arg1 player:(id)arg2;
- (void)acceptRelayResponse:(id)arg1 player:(id)arg2;
- (void)updateRelayConnectionForPlayer:(id)arg1;
- (void)initRelayConnectionForPlayer:(id)arg1;
- (void)updateRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;
- (void)requestRelayUpdateForPlayer:(id)arg1;
- (void)requestRelayInitForPlayer:(id)arg1;
- (void)updateRelayInfo:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayInfoFromPush:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayInfoFromServerResponse:(id)arg1 forPlayer:(id)arg2;
- (void)relayPush:(id)arg1;
- (void)relayPushNotification:(id)arg1;
- (void)session:(id)arg1 networkStatisticsChanged:(id)arg2;
- (void)receiveData:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void *)arg4;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 connectionWithPeerFailed:(id)arg2 withError:(id)arg3;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;
- (void)sendHostScoreAsQuery:(_Bool)arg1;
- (void)calculateHostScore;
- (_Bool)selectHostIfRequestedAndAllScored;
- (_Bool)haveAllHostScores;
- (void)addHostScore:(int)arg1 forPlayer:(id)arg2;
- (void)receivedChooseHostData:(id)arg1 fromPlayer:(id)arg2;
- (void)chooseBestHostingPlayerWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)chooseBestHostPlayerWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)rematchWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)conditionallyRelaunchPlayer:(id)arg1;
- (void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2;
- (void)reinviteeDeclinedNotification:(id)arg1;
- (void)reinviteeAcceptedNotification:(id)arg1;
- (void)sendStateCallbackToDelegate:(id)arg1 forPlayer:(id)arg2 state:(long long)arg3;
- (void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (void)updateStateForPlayer:(id)arg1 state:(long long)arg2;
- (void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (void)sendQueuedPacketsForPlayer:(id)arg1;
- (void)sendData:(id)arg1 fromPlayer:(id)arg2;
- (void)_delegate:(id)arg1 didReceiveData:(id)arg2 fromPlayer:(id)arg3;
- (void)queueData:(id)arg1 forPlayer:(id)arg2;
- (id)peerFromPlayer:(id)arg1;
- (id)playerFromPeer:(id)arg1;
- (void)addPlayers:(id)arg1;
- (id)voiceChatWithName:(id)arg1;
- (void)disconnect;
- (void)sendVersionData:(unsigned char)arg1 toPeer:(id)arg2;
- (void)sendVersionData:(unsigned char)arg1;
- (_Bool)sendInviteData:(id)arg1 error:(id *)arg2;
- (_Bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id *)arg3;
- (_Bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id *)arg4;
- (_Bool)sendData:(id)arg1 toPlayers:(id)arg2 dataMode:(long long)arg3 error:(id *)arg4;
- (id)packet:(unsigned char)arg1 data:(id)arg2;
- (void)inviteeComboMatched:(long long)arg1;
- (void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2;
- (void)connectToPlayers:(id)arg1 withPeerDictionaries:(id)arg2 version:(unsigned char)arg3 sessionToken:(id)arg4 cdxTicket:(id)arg5;
- (void)updateRematchID;
- (void)preLoadInviter:(id)arg1 sessionToken:(id)arg2;
- (void)withEventQueueForPlayer:(id)arg1 create:(CDUnknownBlockType)arg2 perform:(CDUnknownBlockType)arg3;
- (void)withEventQueueForPlayer:(id)arg1 createIfNeeded:(_Bool)arg2 perform:(CDUnknownBlockType)arg3;
- (void)withEventQueueForPlayer:(id)arg1 perform:(CDUnknownBlockType)arg2;
- (id)nearbyConnectionData;
- (void)getLocalConnectionDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)localPlayerDidChange:(id)arg1;
- (void)dealloc;
- (id)init;
@property(nonatomic) id <GKMatchDelegate> inviteDelegate; // @synthesize inviteDelegate=_inviteDelegateWeak;
@property(nonatomic) id <GKMatchDelegate> delegate; // @synthesize delegate=_delegateWeak;
- (_Bool)connected:(id)arg1;
- (id)allIDs;
- (id)playerIDs;
@property(readonly, nonatomic) NSArray *players;
@property(readonly, copy) NSString *description;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKMatchEventQueue : NSObject
{
    GKPlayer *_player;
    NSMutableArray *_events;
    NSMutableDictionary *_connectionInfo;
    long long _playerState;
    long long _deferedPlayerState;
    unsigned int _sequenceNumber;
    _Bool _counted;
    _Bool _okToSend;
    _Bool _relayInitiated;
    _Bool _hasInitRelayInfo;
    _Bool _hasUpdateRelayInfo;
}

@property(nonatomic) unsigned int sequenceNumber; // @synthesize sequenceNumber=_sequenceNumber;
@property(nonatomic) _Bool hasUpdateRelayInfo; // @synthesize hasUpdateRelayInfo=_hasUpdateRelayInfo;
@property(nonatomic) _Bool hasInitRelayInfo; // @synthesize hasInitRelayInfo=_hasInitRelayInfo;
@property(nonatomic) _Bool relayInitiated; // @synthesize relayInitiated=_relayInitiated;
@property(retain, nonatomic) NSMutableDictionary *connectionInfo; // @synthesize connectionInfo=_connectionInfo;
@property(nonatomic) _Bool okToSend; // @synthesize okToSend=_okToSend;
@property(retain, nonatomic) NSMutableArray *events; // @synthesize events=_events;
@property(nonatomic) long long deferedPlayerState; // @synthesize deferedPlayerState=_deferedPlayerState;
@property(nonatomic) _Bool counted; // @synthesize counted=_counted;
@property(nonatomic) long long playerState; // @synthesize playerState=_playerState;
@property(retain, nonatomic) GKPlayer *player; // @synthesize player=_player;
- (void)dealloc;
- (id)init;

@end

@interface GKMatchPacket : NSObject
{
    unsigned char _version;
    unsigned char _packetType;
    unsigned int _sequenceNumber;
    unsigned int _totalLength;
    unsigned short _checksum;
    _Bool _valid;
    NSData *_data;
}

@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(nonatomic) _Bool valid; // @synthesize valid=_valid;
@property(nonatomic) unsigned short checksum; // @synthesize checksum=_checksum;
@property(nonatomic) unsigned int totalLength; // @synthesize totalLength=_totalLength;
@property(nonatomic) unsigned int sequenceNumber; // @synthesize sequenceNumber=_sequenceNumber;
@property(nonatomic) unsigned char packetType; // @synthesize packetType=_packetType;
@property(nonatomic) unsigned char version; // @synthesize version=_version;
- (void)dealloc;
- (id)message;
- (id)initWithMessage:(id)arg1;
- (id)init;

@end

@interface GKMatchRequest : NSObject
{
    GKMatchRequestInternal *_internal;
    CDUnknownBlockType _inviteeResponseHandler;
    CDUnknownBlockType _recipientResponseHandler;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (unsigned long long)maxPlayersAllowedForMatchOfType:(unsigned long long)arg1;
@property(copy) CDUnknownBlockType recipientResponseHandler; // @synthesize recipientResponseHandler=_recipientResponseHandler;
@property(copy) CDUnknownBlockType inviteeResponseHandler; // @synthesize inviteeResponseHandler=_inviteeResponseHandler;
@property(retain) GKMatchRequestInternal *internal; // @synthesize internal=_internal;
- (void)loadRecipientsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
@property(retain) NSArray *playersToInvite; // @dynamic playersToInvite;
@property(retain) NSArray *recipients; // @dynamic recipients;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)removeLocalPlayerFromPlayersToInvite;
- (void)ensureValidityHosted:(_Bool)arg1;
- (_Bool)isTurnBasedValid;
- (_Bool)isValidForHosted:(_Bool)arg1;
- (_Bool)isValidWithMax:(unsigned long long)arg1;
- (_Bool)defaultNumberOfPlayersIsValid;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)dealloc;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)init;

// Remaining properties
@property unsigned long long defaultNumberOfPlayers; // @dynamic defaultNumberOfPlayers;
@property(copy) NSString *inviteMessage; // @dynamic inviteMessage;
@property unsigned long long maxPlayers; // @dynamic maxPlayers;
@property unsigned long long minPlayers; // @dynamic minPlayers;
@property unsigned int playerAttributes; // @dynamic playerAttributes;
@property unsigned long long playerGroup; // @dynamic playerGroup;

@end

@interface GKMatchRequestInternal : GKInternalRepresentation
{
    unsigned long long _matchType;
    NSArray *_recipients;
    NSArray *_recipientPlayerIDs;
    NSString *_inviteMessage;
    NSDictionary *_localizableInviteMessage;
    NSData *_sessionToken;
    NSString *_rid;
    unsigned int _version;
    int _playerGroup;
    unsigned int _playerAttributes;
    unsigned char _minPlayers;
    unsigned char _maxPlayers;
    unsigned char _defaultNumberOfPlayers;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) unsigned char defaultNumberOfPlayers; // @synthesize defaultNumberOfPlayers=_defaultNumberOfPlayers;
@property(nonatomic) unsigned int version; // @synthesize version=_version;
@property(retain, nonatomic) NSString *rid; // @synthesize rid=_rid;
@property(retain, nonatomic) NSData *sessionToken; // @synthesize sessionToken=_sessionToken;
@property(nonatomic) unsigned long long matchType; // @synthesize matchType=_matchType;
@property(retain, nonatomic) NSDictionary *localizableInviteMessage; // @synthesize localizableInviteMessage=_localizableInviteMessage;
@property(copy, nonatomic) NSString *inviteMessage; // @synthesize inviteMessage=_inviteMessage;
@property(retain, nonatomic) NSArray *recipientPlayerIDs; // @synthesize recipientPlayerIDs=_recipientPlayerIDs;
@property(retain, nonatomic) NSArray *recipients; // @synthesize recipients=_recipients;
@property(nonatomic) unsigned int playerAttributes; // @synthesize playerAttributes=_playerAttributes;
@property(nonatomic) int playerGroup; // @synthesize playerGroup=_playerGroup;
@property(nonatomic) unsigned char maxPlayers; // @synthesize maxPlayers=_maxPlayers;
@property(nonatomic) unsigned char minPlayers; // @synthesize minPlayers=_minPlayers;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface GKMatchResponse : GKInternalRepresentation
{
    int _sequence;
    NSString *_rid;
    NSArray *_matches;
    NSData *_sessionToken;
    NSArray *_relayPushes;
    NSData *_cdxTicket;
    long long _state;
    NSDictionary *_serverRequest;
    GKMatchRequestInternal *_matchRequest;
    GKDispatchGroup *_matchingGroup;
}

+ (id)secureCodedPropertyKeys;
@property(readonly) int sequence; // @synthesize sequence=_sequence;
@property GKDispatchGroup *matchingGroup; // @synthesize matchingGroup=_matchingGroup;
@property(retain) GKMatchRequestInternal *matchRequest; // @synthesize matchRequest=_matchRequest;
@property(retain) NSDictionary *serverRequest; // @synthesize serverRequest=_serverRequest;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(retain) NSData *cdxTicket; // @synthesize cdxTicket=_cdxTicket;
@property(retain) NSArray *relayPushes; // @synthesize relayPushes=_relayPushes;
@property(retain) NSData *sessionToken; // @synthesize sessionToken=_sessionToken;
@property(retain) NSArray *matches; // @synthesize matches=_matches;
@property(retain) NSString *rid; // @synthesize rid=_rid;
- (_Bool)transitionToState:(long long)arg1;
- (_Bool)isCancelled;
- (_Bool)isFinished;
- (int)_incrementSequence;
- (void)dealloc;

@end

@interface GKMatchmaker : NSObject
{
    _Bool _nearbyAdvertising;
    _Bool _wasNearbyBrowsing;
    _Bool _nearbyBrowsing;
    int _matching;
    CDUnknownBlockType _inviteHandler;
    GKMatch *_match;
    CDUnknownBlockType _inviteeResponseHandler;
    CDUnknownBlockType _recipientResponseHandler;
    NSSet *_invitees;
    NSDictionary *_inviteesByUserID;
    CDUnknownBlockType _nearbyPlayerHandler;
    CDUnknownBlockType _nearbyPlayerIDHandler;
    NSObject<OS_dispatch_queue> *_lookForInviteQueue;
    NSMutableDictionary *_nearbyPlayers;
    NSDate *_nearbyQueryLastCheckDate;
    GKDiscovery *_nearbyDiscovery;
    double _nearbyQueryAllowance;
    NSSet *_nearbyCompatibileHashes;
    NSMutableDictionary *_nearbyInvites;
}

+ (id)sharedMatchmaker;
+ (id)descriptionForNearbyDictionary:(id)arg1;
+ (id)syncQueue;
@property(retain, nonatomic) NSMutableDictionary *nearbyInvites; // @synthesize nearbyInvites=_nearbyInvites;
@property(retain, nonatomic) NSSet *nearbyCompatibileHashes; // @synthesize nearbyCompatibileHashes=_nearbyCompatibileHashes;
@property(nonatomic) double nearbyQueryAllowance; // @synthesize nearbyQueryAllowance=_nearbyQueryAllowance;
@property(retain, nonatomic) GKDiscovery *nearbyDiscovery; // @synthesize nearbyDiscovery=_nearbyDiscovery;
@property(retain, nonatomic) NSDate *nearbyQueryLastCheckDate; // @synthesize nearbyQueryLastCheckDate=_nearbyQueryLastCheckDate;
@property(nonatomic) _Bool nearbyBrowsing; // @synthesize nearbyBrowsing=_nearbyBrowsing;
@property(nonatomic) _Bool wasNearbyBrowsing; // @synthesize wasNearbyBrowsing=_wasNearbyBrowsing;
@property(retain) NSMutableDictionary *nearbyPlayers; // @synthesize nearbyPlayers=_nearbyPlayers;
@property(nonatomic) _Bool nearbyAdvertising; // @synthesize nearbyAdvertising=_nearbyAdvertising;
@property int matching; // @synthesize matching=_matching;
@property(nonatomic) NSObject<OS_dispatch_queue> *lookForInviteQueue; // @synthesize lookForInviteQueue=_lookForInviteQueue;
@property(copy, nonatomic) CDUnknownBlockType nearbyPlayerIDHandler; // @synthesize nearbyPlayerIDHandler=_nearbyPlayerIDHandler;
@property(copy, nonatomic) CDUnknownBlockType nearbyPlayerHandler; // @synthesize nearbyPlayerHandler=_nearbyPlayerHandler;
@property(retain) NSDictionary *inviteesByUserID; // @synthesize inviteesByUserID=_inviteesByUserID;
@property(retain, nonatomic) NSSet *invitees; // @synthesize invitees=_invitees;
@property(copy, nonatomic) CDUnknownBlockType recipientResponseHandler; // @synthesize recipientResponseHandler=_recipientResponseHandler;
@property(copy, nonatomic) CDUnknownBlockType inviteeResponseHandler; // @synthesize inviteeResponseHandler=_inviteeResponseHandler;
@property(retain, nonatomic) GKMatch *match; // @synthesize match=_match;
@property(copy, nonatomic) CDUnknownBlockType inviteHandler; // @synthesize inviteHandler=_inviteHandler;
- (void)setNearbyPlayerFailed:(id)arg1;
- (void)setNearbyPlayerDeclined:(id)arg1 reason:(long long)arg2;
- (void)setNearbyPlayerAccepted:(id)arg1 connectionData:(id)arg2;
- (void)inviteeDeclinedNotification:(id)arg1;
- (void)inviteeAcceptedNotification:(id)arg1;
- (void)localPlayerAcceptedGameInvite:(id)arg1;
- (long long)responseForDeclineReason:(long long)arg1;
- (void)stopBrowsingForNearbyPlayers;
- (void)startBrowsingForNearbyPlayersWithReachableHandler:(CDUnknownBlockType)arg1;
- (void)startBrowsingForNearbyPlayersWithHandler:(CDUnknownBlockType)arg1;
- (void)queryActivityWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)queryPlayerGroupActivity:(unsigned long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)finishMatchmakingForMatch:(id)arg1;
- (void)cancel;
- (void)cancelInviteToPlayer:(id)arg1;
- (void)cancelPendingInviteToPlayer:(id)arg1;
- (void)cancelPendingInvitesAndMarkInviteComplete:(_Bool)arg1;
- (void)doneMatchmaking;
- (void)findRematchForMatch:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)addPlayersForHostedMatchRequest:(id)arg1 existingPlayerCount:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)addPlayersToMatch:(id)arg1 matchRequest:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)findPlayersForHostedMatchRequest:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)findPlayersForHostedRequest:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)findMatchForRequest:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)matchWithRequest:(id)arg1 currentMatch:(id)arg2 hostedCurrentPlayerCount:(long long)arg3 serverHosted:(_Bool)arg4 rematchID:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)_request:(id)arg1 match:(id)arg2 rematchID:(id)arg3 serverHosted:(_Bool)arg4 playerCount:(long long)arg5 connectionData:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (void)invitePlayersWithRequest:(id)arg1 serverHosted:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)invitePlayersWithRequest:(id)arg1 serverHosted:(_Bool)arg2 onlineConnectionData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)reportResponse:(long long)arg1 forInvitees:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)matchForInvite:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)matchForRemoteInvite:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)matchForNearbyInvite:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)respondToHostedInvite:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)lookForInvite;
- (_Bool)removeInvitee:(id)arg1;
@property(readonly, nonatomic) _Bool hasInviteListener;
- (void)registeredListentersChanged;
- (void)finishedAuthenticating;
- (void)dealloc;
- (void)setConnectivitySettings:(id)arg1;
- (void)loadConnectivitySettingsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)init;
- (void)nearbyInviteWasCancelled:(id)arg1 fromDevice:(id)arg2;
- (void)declineNearbyInviteFromDevice:(id)arg1 reason:(long long)arg2;
- (void)acceptNearbyInvite:(id)arg1 connectionData:(id)arg2;
- (void)localPlayerAcceptedNearbyInvite:(id)arg1;
- (void)localPlayerRespondedToNearbyInvite:(id)arg1;
- (void)declineReceivedNearbyInvites;
- (id)nearbyInviteFromPlayer:(id)arg1;
- (void)removeNearbyInviteFromPlayer:(id)arg1;
- (void)saveNearbyInvite:(id)arg1 fromPlayer:(id)arg2;
- (void)presentNearbyInvite:(id)arg1 fromDevice:(id)arg2;
- (void)handleNearbyInvite:(id)arg1 fromDevice:(id)arg2;
- (void)sendProfileResponseToDevice:(id)arg1;
- (void)handleNearbyProfileQuery:(id)arg1 fromDevice:(id)arg2;
- (void)setNearbyPlayerFailed:(id)arg1 deviceID:(id)arg2;
- (void)setNearbyPlayerDeclined:(id)arg1 deviceID:(id)arg2 reason:(long long)arg3;
- (void)setNearbyPlayerAccepted:(id)arg1 deviceID:(id)arg2 connectionData:(id)arg3;
- (void)handleNearbyInviteResponse:(id)arg1 fromDevice:(id)arg2;
- (void)cancelSentNearbyInvites;
- (void)cancelNearbyInvitesToPlayers:(id)arg1;
- (void)inviteAnyNearbyPlayersWithRequest:(id)arg1;
- (id)nearbyDevicesForPlayer:(id)arg1 withState:(long long)arg2;
- (void)setNearbyDevice:(id)arg1 reachable:(_Bool)arg2;
- (int)numberOfNearbyDevicesForPlayer:(id)arg1 withState:(long long)arg2;
- (void)handleNearbyProfileResponse:(id)arg1 fromDevice:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)lostNearbyDeviceID:(id)arg1;
- (void)foundNearbyDeviceID:(id)arg1 discoveryInfo:(id)arg2;
- (void)stopNearbyBrowsing;
- (void)startNearbyBrowsing;
- (void)updateNearbyAdvertising;
- (void)stopNearbyAdvertising;
- (void)startNearbyAdvertising;
- (id)hashForCurrentGame;
- (id)hashForBundleID:(id)arg1 version:(id)arg2;
- (id)nearbyDeviceWithDeviceID:(id)arg1;
- (id)_nearbyDeviceWithDeviceID:(id)arg1;
- (void)generateHashedCompatibiltySet;
- (_Bool)compatibilityMatrix:(id)arg1 includesAppWithBundleID:(id)arg2 version:(id)arg3;
- (void)loadCompatabilityMatrixAsDictionaryWithHandler:(CDUnknownBlockType)arg1;
- (void)loadPhotoDataDictionaryWithHandler:(CDUnknownBlockType)arg1;
- (id)profileDictionaryForLocalPlayer;
- (_Bool)shouldRespondToNearbyQuery;
- (void)determineIfShouldRespondToNearbyPlayer:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)receivedData:(id)arg1 fromNearbyDeviceID:(id)arg2;
- (long long)currentEnvironment;
- (void)setupNearbyDiscovery;
- (void)applicationWillEnterForegroundNotification:(id)arg1;
- (void)applicationWillTerminateNotification:(id)arg1;
- (void)applicationDidEnterBackgroundNotification:(id)arg1;
- (void)performSync:(CDUnknownBlockType)arg1;

@end

@interface GKMultiplayerServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKMultiplayerServicePrivateInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKNearbyDevice : NSObject
{
    NSString *_deviceID;
    GKDiscovery *_discovery;
    GKPlayer *_player;
    long long _state;
    NSDictionary *_pendingInvite;
}

+ (id)nearbyDeviceWithID:(id)arg1 discovery:(id)arg2;
@property(retain, nonatomic) GKPlayer *player; // @synthesize player=_player;
@property(retain, nonatomic) NSDictionary *pendingInvite; // @synthesize pendingInvite=_pendingInvite;
@property(retain, nonatomic) GKDiscovery *discovery; // @synthesize discovery=_discovery;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(retain, nonatomic) NSString *deviceID; // @synthesize deviceID=_deviceID;
- (void)sendDictionary:(id)arg1;
- (void)dealloc;

@end

@interface GKObserverTrampoline : NSObject
{
    id _observee;
    NSString *_keyPath;
    CDUnknownBlockType _block;
    int _cancellationPredicate;
    unsigned long long _options;
}

- (void)dealloc;
- (void)cancelObservation;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly) id token;
- (void)startObserving;
- (id)initObservingObject:(id)arg1 keyPath:(id)arg2 options:(unsigned long long)arg3 block:(CDUnknownBlockType)arg4;

@end

@interface GKPlayerEmailInternal : GKInternalRepresentation
{
    NSString *_address;
    NSString *_addressSHA1;
    NSString *_addressPrefix;
    _Bool _verified;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) _Bool verified; // @synthesize verified=_verified;
@property(retain, nonatomic) NSString *addressPrefix; // @synthesize addressPrefix=_addressPrefix;
@property(retain, nonatomic) NSString *addressSHA1; // @synthesize addressSHA1=_addressSHA1;
@property(retain, nonatomic) NSString *address; // @synthesize address=_address;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;

@end

@interface GKPreferences : NSObject
{
    _Bool _shouldSynchronizeOnNextRead;
    _Bool _webKitInspectElementEnabled;
    NSDictionary *_overrideValues;
}

+ (id)displayNameForEnvironment:(long long)arg1;
+ (id)hostNameForEnvironment:(long long)arg1;
+ (id)sharedPreferences;
@property(copy) NSDictionary *overrideValues; // @synthesize overrideValues=_overrideValues;
@property(nonatomic, getter=isWebKitInspectElementEnabled) _Bool webKitInspectElementEnabled; // @synthesize webKitInspectElementEnabled=_webKitInspectElementEnabled;
@property(nonatomic) _Bool _shouldSynchronizeOnNextRead; // @synthesize _shouldSynchronizeOnNextRead;
@property(nonatomic, getter=isComprehensiveLoggingEnabled) _Bool comprehensiveLoggingEnabled;
@property(readonly, nonatomic) _Bool HTTPShouldUsePipelining;
@property(readonly, nonatomic) unsigned long long exchangeDefaultMaxInitiatedExchangesPerPlayer;
@property(readonly, nonatomic) unsigned long long exchangeDataDefaultMaximumSize;
@property(readonly, nonatomic) unsigned long long maxDefaultGameStateSizeTurnBased;
@property(readonly, nonatomic) unsigned long long maxDefaultPlayersTurnBased;
@property(readonly, nonatomic) unsigned long long maxDefaultPlayersHosted;
@property(readonly, nonatomic) unsigned long long maxDefaultPlayersP2P;
@property(nonatomic) _Bool shouldAddPlayerInfoToAddressBook;
@property(nonatomic) _Bool shouldAllowNearbyMultiplayer;
@property(nonatomic) _Bool shouldUseSandboxServer;
@property(readonly, nonatomic) _Bool shouldDisallowInvitesFromStrangers;
@property(nonatomic) _Bool shouldAllowGameInvites;
@property(nonatomic) _Bool shouldLinkPlayerToFacebook;
@property(nonatomic) _Bool shouldLinkPlayerToTwitter;
@property(nonatomic) _Bool shouldLinkPlayerToICloud;
@property(nonatomic) _Bool shouldUseTestIcons;
@property(nonatomic) _Bool shouldTrackAtlasImageUsage;
@property(nonatomic) _Bool shouldAnnotateImageUsage;
@property(nonatomic) double cacheTTLOverride;
@property(nonatomic) double minimumCacheTTL;
@property(nonatomic) double garbageCollectionInterval;
@property(nonatomic) double terminationInterval;
@property(nonatomic) _Bool useInternalHeader;
@property(nonatomic) unsigned long long exchangeMaxInitiatedExchangesPerPlayer;
@property(nonatomic) unsigned long long exchangeDataMaximumSize;
@property(nonatomic) unsigned long long maxGameStateSizeTurnBased;
@property(nonatomic) unsigned long long maxPlayersTurnBased;
@property(nonatomic) unsigned long long maxPlayersHosted;
@property(nonatomic) unsigned long long maxPlayersP2P;
@property(nonatomic) long long pipeliningSetting;
@property(nonatomic) long long pushEnvironment;
@property(nonatomic) _Bool preemptiveRelay;
@property(nonatomic) _Bool forceRelay;
@property(nonatomic) unsigned int logFilter;
@property(nonatomic) _Bool verboseLogging;
@property(nonatomic) _Bool notificationAlertsEnabled;
@property(nonatomic) _Bool notificationSoundsEnabled;
@property(nonatomic) _Bool notificationBadgesEnabled;
@property(nonatomic, getter=isNotificationCenterEnabled) _Bool notificationCenterEnabled;
@property(nonatomic) double debugRequestTimeout;
@property(nonatomic) unsigned long long operationRetryCount;
@property(nonatomic) double operationRetryDelay;
@property(nonatomic) double operationTimeout;
@property(nonatomic) unsigned long long loginDisableThreshold;
@property(nonatomic) unsigned long long mescalSetupRetries;
@property(nonatomic) _Bool useTestProtocols;
@property(nonatomic) _Bool allowUnsignedBag;
@property(retain, nonatomic) NSString *storeBagURL;
@property(nonatomic) long long environment;
- (void)removeOverrideForKey:(id)arg1;
- (void)setStringValue:(id)arg1 forKey:(struct __CFString *)arg2;
- (id)stringValueForKey:(struct __CFString *)arg1 defaultValue:(id)arg2;
- (void)setTimeInterval:(double)arg1 forKey:(struct __CFString *)arg2;
- (double)timeIntervalForKey:(struct __CFString *)arg1 defaultValue:(double)arg2;
- (void)setUnsignedIntegerValue:(long long)arg1 forKey:(struct __CFString *)arg2;
- (long long)unsignedIntegerValueForKey:(struct __CFString *)arg1 defaultValue:(long long)arg2;
- (void)setIntegerValue:(long long)arg1 forKey:(struct __CFString *)arg2;
- (long long)integerValueForKey:(struct __CFString *)arg1 defaultValue:(long long)arg2;
- (void)setBooleanValue:(_Bool)arg1 forKey:(struct __CFString *)arg2;
- (_Bool)booleanValueForKey:(struct __CFString *)arg1;
- (_Bool)booleanValueForKey:(struct __CFString *)arg1 defaultValue:(_Bool)arg2;
- (id)preferencesValueForKey:(id)arg1;
- (void)applicationWillEnterBackground:(id)arg1;
- (void)_didWriteKey:(struct __CFString *)arg1;
- (void)synchronize;
- (void)invalidate;
- (_Bool)isInternalBuild;
- (void)dealloc;
- (id)init;
- (id)initWithoutUIKitNotifications;
- (id)initWithUIKitNotifications;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
- (_Bool)restrictionEnabledForKey:(id)arg1;
@property(readonly, nonatomic, getter=isGameCenterRestricted) _Bool gameCenterRestricted;
@property(readonly, nonatomic, getter=isAccountModificationRestricted) _Bool accountModificationRestricted;
@property(readonly, nonatomic, getter=isAppInstallationRestricted) _Bool appInstallationRestricted;
@property(readonly, nonatomic, getter=isAddingFriendsRestricted) _Bool addingFriendsRestricted;
@property(readonly, nonatomic, getter=isMultiplayerGamingRestricted) _Bool multiplayerGamingRestricted;
@property(readonly, nonatomic, getter=isStoreDemoModeEnabled) _Bool storeDemoModeEnabled;
@property(nonatomic) id <GKPreferencesDelegate> preferencesDelegate;

@end

@interface GKProfileServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKProfileServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKRecentMatchInternal : GKInternalRepresentation
{
    GKPlayerInternal *_player;
    GKGameRecordInternal *_game;
    NSDate *_date;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSDate *date; // @synthesize date=_date;
@property(retain, nonatomic) GKGameRecordInternal *game; // @synthesize game=_game;
@property(retain, nonatomic) GKPlayerInternal *player; // @synthesize player=_player;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;

@end

@interface GKRecoveryAttempter : NSObject
{
    CDUnknownBlockType _attemptRecovery;
}

+ (id)recoveryAttempterUsingHandler:(CDUnknownBlockType)arg1;
- (_Bool)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (void)dealloc;

@end

@interface GKReporter : NSObject
{
}

+ (id)reporter;
- (void)report:(id)arg1 signature:(id)arg2 result:(_Bool)arg3;
- (void)report:(id)arg1 signature:(id)arg2;
- (void)report:(id)arg1;
- (void)_nativeReport:(id)arg1 signature:(id)arg2 result:(_Bool *)arg3;

@end

@interface GKRequestIdentifier : NSObject <NSCopying>
{
    unsigned long long _savedHash;
    SEL _selector;
    NSArray *_arguments;
}

+ (id)requestIdentifierForInvocation:(id)arg1;
- (id)description;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)initWithInvocation:(id)arg1;
- (id)_argumentsForInvocation:(id)arg1;
- (void)dealloc;

@end

@interface GKRoute : NSObject
{
    NSRegularExpression *_regex;
    NSArray *_parameterNames;
    NSString *_scheme;
}

- (_Bool)matchesURL:(id)arg1 parameters:(id *)arg2;
- (_Bool)matchesURL:(id)arg1;
- (id)nonParameterCharacterSet;
- (void)dealloc;
- (id)initWithString:(id)arg1 scheme:(id)arg2;
- (id)initWithString:(id)arg1;

@end

@interface GKRouter : NSObject
{
    NSMutableArray *_routes;
    NSMutableArray *_handlers;
}

- (_Bool)dispatch:(id)arg1;
- (void)scheme:(id)arg1 from:(id)arg2 to:(CDUnknownBlockType)arg3;
- (void)from:(id)arg1 to:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)init;

@end

@interface GKSavedGame : NSObject <NSCopying>
{
    NSString *_name;
    NSString *_deviceName;
    NSDate *_modificationDate;
    NSURL *_fileURL;
}

@property(retain) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(retain) NSDate *modificationDate; // @synthesize modificationDate=_modificationDate;
@property(retain) NSString *deviceName; // @synthesize deviceName=_deviceName;
@property(retain) NSString *name; // @synthesize name=_name;
- (id)description;
- (void)loadDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface GKSavedGameDocument : NSObject <NSFilePresenter>
{
    _Bool _hasConflict;
    _Bool _isConflictVersion;
    NSURL *_fileURL;
    NSString *_name;
    NSString *_deviceName;
    NSDate *_modificationDate;
}

+ (id)currentDeviceName;
@property(retain, nonatomic) NSDate *modificationDate; // @synthesize modificationDate=_modificationDate;
@property(retain, nonatomic) NSString *deviceName; // @synthesize deviceName=_deviceName;
@property(nonatomic) _Bool isConflictVersion; // @synthesize isConflictVersion=_isConflictVersion;
@property(nonatomic) _Bool hasConflict; // @synthesize hasConflict=_hasConflict;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(readonly, copy) NSString *description;
- (void)deleteConflictVersion:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)deleteAllVersionsIncludingCurrent:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)saveData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)loadDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)metadata;
- (void)setMetadata:(id)arg1;
- (void)updateMetadata;
- (void)loadMetadataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadWrapperDataWithFilename:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)updateConflictStateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)presentedItemDidResolveConflictVersion:(id)arg1;
- (void)presentedItemDidLoseVersion:(id)arg1;
- (void)presentedItemDidGainVersion:(id)arg1;
- (void)presentedItemDidChange;
@property(readonly, copy) NSURL *presentedItemURL;
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
- (void)dealloc;
- (id)initWithFileURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSURL *primaryPresentedItemURL;
@property(readonly) Class superclass;

@end

@interface GKSavedGameManager : NSObject
{
    _Bool _ubiquityUnavailable;
    NSURL *_ubiquityURL;
    NSMetadataQuery *_query;
    NSMutableDictionary *_documents;
    long long _queryDisableCount;
    NSMutableArray *_fetchHandlers;
}

+ (id)sharedManager;
@property(retain, nonatomic) NSMutableArray *fetchHandlers; // @synthesize fetchHandlers=_fetchHandlers;
@property(nonatomic) long long queryDisableCount; // @synthesize queryDisableCount=_queryDisableCount;
@property(retain, nonatomic) NSMutableDictionary *documents; // @synthesize documents=_documents;
@property(retain, nonatomic) NSMetadataQuery *query; // @synthesize query=_query;
@property(nonatomic) _Bool ubiquityUnavailable; // @synthesize ubiquityUnavailable=_ubiquityUnavailable;
@property(retain, nonatomic) NSURL *ubiquityURL; // @synthesize ubiquityURL=_ubiquityURL;
- (void)ubiquityAvailabilityChanged:(id)arg1;
- (void)setupUbiquity;
- (void)resolveConflictingSavedGames:(id)arg1 withData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)documentConflictStateChanged:(id)arg1;
- (void)callFetchHandlers;
- (void)updateSavedGameDocumentsForQueryWithHandler:(CDUnknownBlockType)arg1;
- (void)queryDidUpdate:(id)arg1;
- (void)queryDidFinishGathering:(id)arg1;
- (void)enableQueryUpdates;
- (void)disableQueryUpdates;
- (void)startSavedGameQuery;
- (id)errorForNoUbiquity;
- (void)documentModified:(id)arg1;
- (void)deleteSavedGamesWithName:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)saveGameData:(id)arg1 withName:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)loadDataForSavedGame:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)currentDocumentWithName:(id)arg1;
- (id)documentToSaveWithName:(id)arg1;
- (id)documentForSavedGame:(id)arg1;
- (void)removeDocument:(id)arg1;
- (void)addDocument:(id)arg1;
- (id)fileURLForName:(id)arg1;
- (id)savedGameForDocument:(id)arg1;
- (id)savedGameForDocuments:(id)arg1;
- (id)savedGamesWithName:(id)arg1;
- (void)fetchSavedGamesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

@end

@interface GKScore : NSObject <NSCopying, NSCoding, NSSecureCoding>
{
    _Bool _shouldSetDefaultLeaderboard;
    GKScoreInternal *_internal;
    GKGame *_game;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)reportScores:(id)arg1 whileScreeningChallenges:(_Bool)arg2 withEligibleChallenges:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
+ (void)reportScores:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) GKGame *game; // @synthesize game=_game;
@property(nonatomic) _Bool shouldSetDefaultLeaderboard; // @synthesize shouldSetDefaultLeaderboard=_shouldSetDefaultLeaderboard;
@property(retain) GKScoreInternal *internal; // @synthesize internal=_internal;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (void)reportScoreWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, retain, nonatomic) GKPlayer *player;
@property(readonly, retain) NSString *playerID; // @dynamic playerID;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCategory:(id)arg1;
- (id)init;
- (id)initWithLeaderboardIdentifier:(id)arg1 forPlayer:(id)arg2;
- (id)initWithLeaderboardIdentifier:(id)arg1 player:(id)arg2;
- (id)initWithLeaderboardIdentifier:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1 playerID:(id)arg2;
- (id)initWithInternalRepresentation:(id)arg1 playerInternal:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

// Remaining properties
@property(copy, nonatomic) NSString *category; // @dynamic category;
@property(nonatomic) unsigned long long context; // @dynamic context;
@property(readonly, retain, nonatomic) NSDate *date; // @dynamic date;
@property(copy, nonatomic) NSString *formattedValue; // @dynamic formattedValue;
@property(retain, nonatomic) NSString *groupLeaderboardIdentifier; // @dynamic groupLeaderboardIdentifier;
@property(copy, nonatomic) NSString *leaderboardIdentifier; // @dynamic leaderboardIdentifier;
@property(nonatomic) long long rank; // @dynamic rank;
@property(nonatomic) long long value; // @dynamic value;
@property _Bool valueSet; // @dynamic valueSet;

@end

@interface GKScoreChallenge : GKChallenge
{
    GKScore *_score;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
@property(retain, nonatomic) GKScore *score; // @synthesize score=_score;
- (id)detailGoalTextForPlayer:(id)arg1 withLeaderboard:(id)arg2;
- (void)loadDetailsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)detailsLoaded;
- (id)titleText;
@property(readonly, nonatomic) GKLeaderboard *leaderboard; // @dynamic leaderboard;
- (void)setInternal:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (void)dealloc;
- (id)description;

@end

@interface GKScoreChallengeInternal : GKChallengeInternal
{
    GKScoreInternal *_score;
    GKLeaderboardInternal *_leaderboard;
}

+ (id)secureCodedPropertyKeys;
+ (id)internalRepresentation;
@property(retain, nonatomic) GKLeaderboardInternal *leaderboard; // @synthesize leaderboard=_leaderboard;
@property(copy, nonatomic) GKScoreInternal *score; // @synthesize score=_score;
- (unsigned long long)type;
- (id)serverRepresentationForReceivingPlayer:(id)arg1;
- (void)dealloc;

@end

@interface GKScoreInternal : GKInternalRepresentation
{
    GKPlayerInternal *_player;
    NSString *_leaderboardIdentifier;
    NSString *_groupLeaderboardIdentifier;
    NSString *_formattedValue;
    NSDate *_date;
    long long _value;
    unsigned long long _context;
    unsigned int _rank;
    _Bool _valueSet;
}

+ (id)secureCodedPropertyKeys;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool valueSet; // @synthesize valueSet=_valueSet;
@property(nonatomic) unsigned int rank; // @synthesize rank=_rank;
@property(nonatomic) unsigned long long context; // @synthesize context=_context;
@property(nonatomic) long long value; // @synthesize value=_value;
@property(retain, nonatomic) NSDate *date; // @synthesize date=_date;
@property(retain, nonatomic) NSString *formattedValue; // @synthesize formattedValue=_formattedValue;
@property(retain, nonatomic) NSString *groupLeaderboardIdentifier; // @synthesize groupLeaderboardIdentifier=_groupLeaderboardIdentifier;
@property(retain, nonatomic) NSString *leaderboardIdentifier; // @synthesize leaderboardIdentifier=_leaderboardIdentifier;
@property(retain, nonatomic) GKPlayerInternal *player; // @synthesize player=_player;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)serverRepresentation;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
@property(retain, nonatomic) NSString *groupCategory;
@property(retain, nonatomic) NSString *category;
@property(readonly, nonatomic) NSString *playerID;

@end

@interface GKSession : NSObject
{
    id _session;
}

+ (void)initialize;
- (id)privateImpl;
@property(readonly) GKConnection *connection;
@property id <GKSessionPrivateDelegate> privateDelegate;
@property _Bool wifiEnabled;
- (_Bool)isPeerBusy:(id)arg1;
@property(getter=isBusy) _Bool busy;
@property(readonly) NSString *peerID;
@property(getter=isAvailable) _Bool available;
@property(readonly) int sessionMode;
- (id)peersWithConnectionState:(int)arg1;
- (void)disconnectFromAllPeers;
- (void)disconnectPeerFromAllPeers:(id)arg1;
- (void)denyConnectionFromPeer:(id)arg1;
- (_Bool)acceptConnectionFromPeer:(id)arg1 error:(id *)arg2;
- (void)cancelConnectToPeer:(id)arg1;
- (void)connectToPeer:(id)arg1 withTimeout:(double)arg2;
- (void)setDataReceiveHandler:(id)arg1 withContext:(void *)arg2;
- (_Bool)sendDataToAllPeers:(id)arg1 withDataMode:(int)arg2 error:(id *)arg3;
- (_Bool)sendData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (id)displayNameForPeer:(id)arg1;
@property double disconnectTimeout;
@property(readonly) NSString *displayName;
@property(readonly) NSString *sessionID;
@property id <GKSessionDelegate> delegate;
- (void)dealloc;
- (id)description;
- (id)initWithConnection:(id)arg1 delegate:(id)arg2;
- (id)initWithSessionID:(id)arg1 displayName:(id)arg2 sessionMode:(int)arg3;

@end

@interface GKStateMachine : NSObject
{
    int _lock;
    NSString *_currentState;
    NSDictionary *_validTransitions;
    id <GKStateMachineDelegate> _delegate;
    _Bool _shouldLogStateTransitions;
}

@property id <GKStateMachineDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSDictionary *validTransitions; // @synthesize validTransitions=_validTransitions;
@property(nonatomic) _Bool shouldLogStateTransitions; // @synthesize shouldLogStateTransitions=_shouldLogStateTransitions;
- (void)_performTransitionFromState:(id)arg1 toState:(id)arg2;
- (id)_validateTransitionFromState:(id)arg1 toState:(id)arg2;
- (id)missingTransitionFromState:(id)arg1 toState:(id)arg2;
- (_Bool)_setCurrentState:(id)arg1;
@property(retain) NSString *currentState; // @synthesize currentState=_currentState;
- (_Bool)applyState:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface GKStoreItemInternal : GKInternalRepresentation
{
    NSNumber *_adamID;
    NSString *_artistName;
    NSString *_priceDisplay;
    NSURL *_viewItemURL;
    NSURL *_shortViewItemURL;
    NSURL *_tellAFriendMessageContentsUrl;
    NSDate *_expirationDate;
    unsigned int _numberOfUserRatings;
    float _averageUserRating;
    _Bool _owned;
}

+ (id)secureCodedPropertyKeys;
@property(nonatomic) _Bool owned; // @synthesize owned=_owned;
@property(nonatomic) float averageUserRating; // @synthesize averageUserRating=_averageUserRating;
@property(nonatomic) unsigned int numberOfUserRatings; // @synthesize numberOfUserRatings=_numberOfUserRatings;
@property(retain, nonatomic) NSDate *expirationDate; // @synthesize expirationDate=_expirationDate;
@property(retain, nonatomic) NSURL *tellAFriendMessageContentsUrl; // @synthesize tellAFriendMessageContentsUrl=_tellAFriendMessageContentsUrl;
@property(retain, nonatomic) NSURL *shortViewItemURL; // @synthesize shortViewItemURL=_shortViewItemURL;
@property(retain, nonatomic) NSURL *viewItemURL; // @synthesize viewItemURL=_viewItemURL;
@property(retain, nonatomic) NSString *priceDisplay; // @synthesize priceDisplay=_priceDisplay;
@property(retain, nonatomic) NSString *artistName; // @synthesize artistName=_artistName;
@property(retain, nonatomic) NSNumber *adamID; // @synthesize adamID=_adamID;
- (void)storeItemURLForGamePlatform:(unsigned char)arg1 withContext:(id)arg2 withHandler:(CDUnknownBlockType)arg3;
- (id)storeItemURLForURL:(id)arg1 gamePlatform:(unsigned char)arg2 extraQueryParams:(id)arg3;
- (_Bool)isValid;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;

@end

@interface GKThreadsafeCache : NSObject <GKCache>
{
    NSMutableDictionary *_dictionary;
    NSMutableDictionary *_missingEntryQueues;
    GKLinkedList *_cacheList;
    unsigned long long _maxCount;
    unsigned long long _count;
    NSObject<OS_dispatch_queue> *_syncQueue;
}

@property(nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(nonatomic) unsigned long long count; // @synthesize count=_count;
@property(nonatomic) unsigned long long maxCount; // @synthesize maxCount=_maxCount;
@property(retain, nonatomic) GKLinkedList *cacheList; // @synthesize cacheList=_cacheList;
@property(retain, nonatomic) NSMutableDictionary *missingEntryQueues; // @synthesize missingEntryQueues=_missingEntryQueues;
@property(retain, nonatomic) NSMutableDictionary *dictionary; // @synthesize dictionary=_dictionary;
- (void)removeAllObjects;
- (id)objectForKey:(id)arg1 withMissingHandler:(CDUnknownBlockType)arg2;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)internalSetObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)internalObjectForKey:(id)arg1;
- (void)dealloc;
- (id)initWithName:(id)arg1 maxCount:(unsigned long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GKThreadsafeDictionary : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableDictionary *_dictionary;
}

@property(retain, nonatomic) NSMutableDictionary *dictionary; // @synthesize dictionary=_dictionary;
- (id)allKeys;
- (void)writeToDictionary:(CDUnknownBlockType)arg1;
- (void)readFromDictionary:(CDUnknownBlockType)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1 objectProducerBlock:(CDUnknownBlockType)arg2;
- (id)objectForKey:(id)arg1;
- (void)removeAllObjects;
- (id)allObjects;
- (id)description;
- (void)dealloc;
- (id)initWithName:(id)arg1;

@end

@interface GKTurnBasedEventHandler : NSObject
{
    _Bool _didBecomeActive;
    NSObject<GKTurnBasedEventHandlerDelegate> *_delegateWeak;
    NSObject<OS_dispatch_queue> *_lookForEventQueue;
}

+ (id)sharedTurnBasedEventHandler;
@property(nonatomic) NSObject<OS_dispatch_queue> *lookForEventQueue; // @synthesize lookForEventQueue=_lookForEventQueue;
@property(nonatomic) _Bool didBecomeActive; // @synthesize didBecomeActive=_didBecomeActive;
- (void)lookForEvent;
- (void)callTurnEventForMatch:(id)arg1 userTapped:(_Bool)arg2;
@property(nonatomic) NSObject<GKTurnBasedEventHandlerDelegate> *delegate; // @synthesize delegate=_delegateWeak;
- (void)dealloc;
- (id)init;

@end

@interface GKTurnBasedExchange : NSObject
{
    GKTurnBasedParticipant *_sender;
    GKTurnBasedMatch *_matchWeak;
    GKTurnBasedExchangeInternal *_internal;
    NSArray *_replies;
    NSArray *_recipients;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
@property(retain, nonatomic) NSArray *recipients; // @synthesize recipients=_recipients;
@property(retain, nonatomic) NSArray *replies; // @synthesize replies=_replies;
@property(retain) GKTurnBasedExchangeInternal *internal; // @synthesize internal=_internal;
@property(retain, nonatomic) GKTurnBasedParticipant *sender; // @synthesize sender=_sender;
- (void)replyWithLocalizableMessageKey:(id)arg1 arguments:(id)arg2 data:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)cancelWithLocalizableMessageKey:(id)arg1 arguments:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_updateInternalFromMatchInternal:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
@property(nonatomic) GKTurnBasedMatch *match; // @synthesize match=_matchWeak;
@property(readonly, nonatomic) BOOL status;
@property(readonly, nonatomic) NSString *message; // @dynamic message;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;

// Remaining properties
@property(retain, nonatomic) NSDate *completionDate; // @dynamic completionDate;
@property(retain, nonatomic) NSData *data; // @dynamic data;
@property(retain, nonatomic) NSString *exchangeID; // @dynamic exchangeID;
@property(readonly, nonatomic) NSDate *sendDate; // @dynamic sendDate;
@property(retain, nonatomic) NSDate *timeoutDate; // @dynamic timeoutDate;

@end

@interface GKTurnBasedExchangeInternal : GKInternalRepresentation
{
    NSString *_exchangeID;
    NSArray *_recipientIndexes;
    NSString *_statusString;
    NSDictionary *_localizableMessage;
    NSData *_data;
    NSDate *_sendDate;
    NSDate *_timeoutDate;
    NSDate *_completionDate;
    NSArray *_replies;
    unsigned char _senderIndex;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSDate *completionDate; // @synthesize completionDate=_completionDate;
@property(retain, nonatomic) NSDictionary *localizableMessage; // @synthesize localizableMessage=_localizableMessage;
@property(retain, nonatomic) NSDate *sendDate; // @synthesize sendDate=_sendDate;
@property(retain, nonatomic) NSArray *replies; // @synthesize replies=_replies;
@property(retain, nonatomic) NSDate *timeoutDate; // @synthesize timeoutDate=_timeoutDate;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(retain, nonatomic) NSArray *recipientIndexes; // @synthesize recipientIndexes=_recipientIndexes;
@property(retain, nonatomic) NSString *statusString; // @synthesize statusString=_statusString;
@property(nonatomic) unsigned char senderIndex; // @synthesize senderIndex=_senderIndex;
@property(retain, nonatomic) NSString *exchangeID; // @synthesize exchangeID=_exchangeID;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;

@end

@interface GKTurnBasedExchangeReply : NSObject
{
    GKTurnBasedParticipant *_recipient;
    GKTurnBasedExchangeReplyInternal *_internal;
    GKTurnBasedMatch *_matchWeak;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
@property(retain) GKTurnBasedExchangeReplyInternal *internal; // @synthesize internal=_internal;
@property(retain, nonatomic) GKTurnBasedParticipant *recipient; // @synthesize recipient=_recipient;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
@property(nonatomic) GKTurnBasedMatch *match; // @synthesize match=_matchWeak;
@property(readonly, nonatomic) NSString *message; // @dynamic message;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;

// Remaining properties
@property(retain, nonatomic) NSData *data; // @dynamic data;
@property(readonly, nonatomic) NSDate *replyDate; // @dynamic replyDate;

@end

@interface GKTurnBasedExchangeReplyInternal : GKInternalRepresentation
{
    NSDictionary *_localizableMessage;
    NSData *_data;
    NSDate *_replyDate;
    unsigned char _recipientIndex;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) NSDate *replyDate; // @synthesize replyDate=_replyDate;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(retain, nonatomic) NSDictionary *localizableMessage; // @synthesize localizableMessage=_localizableMessage;
@property(nonatomic) unsigned char recipientIndex; // @synthesize recipientIndex=_recipientIndex;
- (void)dealloc;

@end

@interface GKTurnBasedMatch : NSObject <GKSessionDelegate>
{
    unsigned int _state;
    GKTurnBasedMatchInternal *_internal;
    NSArray *_participants;
    NSArray *_exchanges;
}

+ (void)loadTurnBasedMatchWithDetailsForMatchID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)_localizableMessageWithKey:(id)arg1 arguments:(id)arg2 defaultMessage:(id)arg3;
+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)loadMatchWithID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadTurnBasedMatchDetailsForMatchIDs:(id)arg1 loadGameData:(_Bool)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)loadTurnBasedMatchSummariesIncludingCompatibleBundleID:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadTurnBasedMatchSummaries:(CDUnknownBlockType)arg1;
+ (void)loadMatchesIncludingCompatibleBundleID:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadMatchesWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)findMatchForRequest:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (id)matchesWithInternalRepresentations:(id)arg1;
+ (void)getTurnBasedBadgeCountWithHandler:(CDUnknownBlockType)arg1;
@property(readonly, retain, nonatomic) NSArray *exchanges; // @synthesize exchanges=_exchanges;
@property(readonly, retain, nonatomic) NSArray *participants; // @synthesize participants=_participants;
- (void)sendReminderToParticipants:(id)arg1 localizableMessageKey:(id)arg2 arguments:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)sendExchangeToParticipants:(id)arg1 data:(id)arg2 localizableMessageKey:(id)arg3 arguments:(id)arg4 timeout:(double)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)saveMergedMatchData:(id)arg1 withResolvedExchanges:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)exchangeForID:(id)arg1;
- (void)saveCurrentTurnWithMatchData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)endMatchInTurnWithMatchData:(id)arg1 scores:(id)arg2 achievements:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)endMatchInTurnWithMatchData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)participantQuitOutOfTurnWithOutcome:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipants:(id)arg2 turnTimeout:(double)arg3 matchData:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipant:(id)arg2 matchData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)endTurnWithNextParticipants:(id)arg1 turnTimeout:(double)arg2 matchData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)indexesForParticipants:(id)arg1;
- (void)endTurnWithNextParticipant:(id)arg1 matchData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)loadMatchDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, retain, nonatomic) NSArray *completedExchanges;
@property(readonly, retain, nonatomic) NSArray *activeExchanges;
@property(readonly, nonatomic) GKTurnBasedParticipant *firstWinnerOrTiedOrLastLoser;
@property(readonly, nonatomic) GKPlayer *showcasePlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *localPlayerParticipant;
@property(readonly, nonatomic) GKTurnBasedParticipant *playingWithParticipantOrFirstKnownPlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *previousParticipantOrFirstKnownPlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *previousParticipant;
@property(retain, nonatomic) GKTurnBasedParticipant *currentParticipant;
- (void)declineInviteWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)acceptInviteWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)rematchWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSDate *dateSortKey;
- (long long)compare:(id)arg1;
@property(readonly, nonatomic) long long status; // @dynamic status;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) GKPlayer *currentPlayer; // @dynamic currentPlayer;
- (void)dealloc;
@property(nonatomic) unsigned int state; // @synthesize state=_state;
- (void)setLocalizableMessageWithKey:(id)arg1 arguments:(id)arg2;
@property(copy, nonatomic) NSString *message;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
@property(readonly, nonatomic) GKGame *game; // @dynamic game;
@property(readonly, nonatomic) _Bool localPlayerHasRecentTurn;
@property(readonly, nonatomic) _Bool isMyTurn; // @dynamic isMyTurn;
- (id)_exchangesForInternalRepresentation:(id)arg1 participants:(id)arg2;
- (id)_participantsForInternalRepresentation:(id)arg1;
- (void)_updateWithInternal:(id)arg1;
@property(retain) GKTurnBasedMatchInternal *internal; // @synthesize internal=_internal;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
@property(readonly, nonatomic) unsigned long long exchangeMaxInitiatedExchangesPerPlayer; // @dynamic exchangeMaxInitiatedExchangesPerPlayer;
@property(readonly, nonatomic) unsigned long long exchangeDataMaximumSize; // @dynamic exchangeDataMaximumSize;
@property(nonatomic) unsigned long long matchDataMaximumSize; // @dynamic matchDataMaximumSize;

// Remaining properties
@property(retain, nonatomic) NSString *bundleID; // @dynamic bundleID;
@property(retain, nonatomic) NSString *bundleVersion; // @dynamic bundleVersion;
@property(readonly, retain, nonatomic) NSDate *creationDate; // @dynamic creationDate;
@property(readonly, copy) NSString *debugDescription;
@property(copy, nonatomic) NSDate *lastTurnDate; // @dynamic lastTurnDate;
@property(readonly, retain, nonatomic) NSData *matchData; // @dynamic matchData;
@property(readonly, retain, nonatomic) NSString *matchID; // @dynamic matchID;
@property(readonly) Class superclass;
@property(readonly, nonatomic) long long turnNumber; // @dynamic turnNumber;

@end

@interface GKTurnBasedMatchInternal : GKInternalRepresentation
{
    NSString *_matchID;
    NSString *_status;
    NSString *_message;
    NSDictionary *_localizableMessage;
    NSString *_reason;
    NSDate *_creationDate;
    NSDate *_lastTurnDate;
    NSDate *_deletionDate;
    GKPlayerInternal *_currentPlayer;
    NSString *_lastTurnPlayerID;
    NSData *_matchData;
    NSString *_matchDataVersion;
    NSArray *_participants;
    NSString *_bundleID;
    NSString *_bundleVersion;
    GKGameInternal *_game;
    NSArray *_exchanges;
    unsigned int _turnNumber;
    unsigned char _minPlayers;
    unsigned char _maxPlayers;
    BOOL _currentParticipant;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) GKGameInternal *game; // @synthesize game=_game;
@property(retain, nonatomic) NSArray *exchanges; // @synthesize exchanges=_exchanges;
@property(retain, nonatomic) NSString *bundleVersion; // @synthesize bundleVersion=_bundleVersion;
@property(retain, nonatomic) NSString *bundleID; // @synthesize bundleID=_bundleID;
@property(retain, nonatomic) NSString *matchDataVersion; // @synthesize matchDataVersion=_matchDataVersion;
@property(retain, nonatomic) NSArray *participants; // @synthesize participants=_participants;
@property(retain, nonatomic) NSData *matchData; // @synthesize matchData=_matchData;
@property(retain, nonatomic) NSString *lastTurnPlayerID; // @synthesize lastTurnPlayerID=_lastTurnPlayerID;
@property(nonatomic) unsigned int turnNumber; // @synthesize turnNumber=_turnNumber;
@property(nonatomic) BOOL currentParticipant; // @synthesize currentParticipant=_currentParticipant;
@property(retain, nonatomic) NSDate *deletionDate; // @synthesize deletionDate=_deletionDate;
@property(nonatomic) unsigned char maxPlayers; // @synthesize maxPlayers=_maxPlayers;
@property(nonatomic) unsigned char minPlayers; // @synthesize minPlayers=_minPlayers;
@property(retain, nonatomic) NSString *reason; // @synthesize reason=_reason;
@property(retain, nonatomic) NSDictionary *localizableMessage; // @synthesize localizableMessage=_localizableMessage;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
@property(retain, nonatomic) NSDate *lastTurnDate; // @synthesize lastTurnDate=_lastTurnDate;
@property(retain, nonatomic) GKPlayerInternal *currentPlayer; // @synthesize currentPlayer=_currentPlayer;
@property(retain, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
@property(retain, nonatomic) NSString *status; // @synthesize status=_status;
@property(retain, nonatomic) NSString *matchID; // @synthesize matchID=_matchID;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;

@end

@interface GKTurnBasedParticipant : NSObject
{
    GKTurnBasedParticipantInternal *_internal;
}

+ (_Bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (_Bool)matchOutcomeIsValidForDoneState:(long long)arg1;
+ (id)keyPathsForValuesAffectingMatchOutcomeString;
+ (id)stringForMatchOutcome:(long long)arg1;
+ (id)keyPathsForValuesAffectingBasicMatchOutcomeString;
+ (id)keyPathsForValuesAffectingStatus;
@property(readonly, retain) GKTurnBasedParticipantInternal *internal; // @synthesize internal=_internal;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
@property(readonly, nonatomic) _Bool isLocalPlayer;
@property(readonly, copy, nonatomic) NSString *playerID;
@property(readonly, retain, nonatomic) GKPlayer *player; // @dynamic player;
@property(readonly, nonatomic) GKPlayer *invitedBy; // @dynamic invitedBy;
@property(copy, nonatomic) NSDate *lastTurnDate; // @dynamic lastTurnDate;
@property(readonly, nonatomic) _Bool isWinner;
@property(readonly, nonatomic) NSString *matchOutcomeString;
- (id)basicMatchOutcomeString;
@property(readonly, nonatomic) NSString *matchStatusString;
- (void)setStatus:(long long)arg1;
@property(readonly, nonatomic) long long status;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;

// Remaining properties
@property(readonly, nonatomic) NSString *inviteMessage; // @dynamic inviteMessage;
@property(nonatomic) long long matchOutcome; // @dynamic matchOutcome;
@property(copy, nonatomic) NSDate *timeoutDate; // @dynamic timeoutDate;

@end

@interface GKTurnBasedParticipantInternal : GKInternalRepresentation
{
    NSString *_sessionID;
    GKPlayerInternal *_player;
    GKPlayerInternal *_invitedBy;
    NSString *_inviteMessage;
    NSString *_status;
    NSDate *_lastTurnDate;
    NSDate *_timeoutDate;
    unsigned int _matchOutcome;
    unsigned char _slot;
}

+ (id)secureCodedPropertyKeys;
@property(retain, nonatomic) GKPlayerInternal *player; // @synthesize player=_player;
@property(nonatomic) unsigned char slot; // @synthesize slot=_slot;
@property(nonatomic) unsigned int matchOutcome; // @synthesize matchOutcome=_matchOutcome;
@property(retain, nonatomic) NSString *status; // @synthesize status=_status;
@property(retain, nonatomic) NSString *inviteMessage; // @synthesize inviteMessage=_inviteMessage;
@property(retain, nonatomic) GKPlayerInternal *invitedBy; // @synthesize invitedBy=_invitedBy;
@property(retain, nonatomic) NSDate *timeoutDate; // @synthesize timeoutDate=_timeoutDate;
@property(retain, nonatomic) NSDate *lastTurnDate; // @synthesize lastTurnDate=_lastTurnDate;
@property(retain, nonatomic) NSString *sessionID; // @synthesize sessionID=_sessionID;
- (id)serverRepresentation;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
@property(readonly, nonatomic) NSString *playerID;

@end

@interface GKTurnBasedServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKTurnBasedServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKUnauthenticatedPlayerInternal : GKLocalPlayerInternal
{
    int _encodingCount;
}

- (_Bool)isEqual:(id)arg1;
- (id)alias;
- (id)playerID;
- (void)encodeWithCoder:(id)arg1;

@end

@interface GKUnknownPlayerInternal : GKSpecialPlayerInternal
{
}

- (_Bool)isUnknownPlayer;
- (id)playerID;

@end

@interface GKUpdateGroup : NSObject
{
    NSObject<OS_dispatch_queue> *_targetQueue;
    NSMutableArray *_notifiers;
    NSObject<OS_dispatch_group> *_dispatchGroup;
    NSLock *_lock;
    NSError *_error;
    NSString *_name;
}

+ (id)updateGroupWithName:(id)arg1 taregetQueue:(id)arg2;
+ (id)updateGroupForTargetQueue:(id)arg1;
+ (id)updateGroupWithName:(id)arg1;
+ (id)updateGroup;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) NSObject<OS_dispatch_group> *dispatchGroup; // @synthesize dispatchGroup=_dispatchGroup;
@property(retain) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSMutableArray *notifiers; // @synthesize notifiers=_notifiers;
@property(nonatomic) NSObject<OS_dispatch_queue> *targetQueue; // @synthesize targetQueue=_targetQueue;
@property(retain) NSLock *lock; // @synthesize lock=_lock;
@property(readonly, nonatomic) long long updateCount;
- (void)cancelUpdates;
- (void)applyUpdates;
- (void)wait;
- (void)join:(CDUnknownBlockType)arg1;
- (void)perform:(CDUnknownBlockType)arg1;
- (void)performOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithName:(id)arg1 targetQueue:(id)arg2;

@end

@interface GKUpdateGroupNotifier : NSObject
{
    GKUpdateGroup *_group;
    NSLock *_lock;
    NSMutableArray *_updateQueue;
    NSError *_error;
}

@property(retain) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSMutableArray *updateQueue; // @synthesize updateQueue=_updateQueue;
@property(retain) NSLock *lock; // @synthesize lock=_lock;
- (void)addUpdatesFromGroup:(id)arg1;
- (void)addUpdate:(CDUnknownBlockType)arg1 error:(id)arg2;
- (void)updateError:(id)arg1;
@property(nonatomic) GKUpdateGroup *group; // @synthesize group=_group;
- (oneway void)release;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface GKUtilityServiceInterface : GKServiceInterface
{
}

+ (void)configureInterface:(id)arg1;
+ (id)interfaceProtocol;

@end

@interface GKUtilityServicePrivateInterface : GKServiceInterface
{
}

+ (id)interfaceProtocol;

@end

@interface GKVoiceChat : NSObject <GKVoiceChatSessionDelegate>
{
    NSArray *_players;
    CDUnknownBlockType _playerStateUpdateHandler;
    CDUnknownBlockType _playerVoiceChatStateDidChangeHandler;
    GKSession *_gkSession;
    GKVoiceChatSession *_gkVoiceChatSession;
}

+ (_Bool)isVoIPAllowed;
@property(retain, nonatomic) GKVoiceChatSession *gkVoiceChatSession; // @synthesize gkVoiceChatSession=_gkVoiceChatSession;
@property(retain, nonatomic) GKSession *gkSession; // @synthesize gkSession=_gkSession;
@property(copy, nonatomic) CDUnknownBlockType playerVoiceChatStateDidChangeHandler; // @synthesize playerVoiceChatStateDidChangeHandler=_playerVoiceChatStateDidChangeHandler;
@property(copy, nonatomic) CDUnknownBlockType playerStateUpdateHandler; // @synthesize playerStateUpdateHandler=_playerStateUpdateHandler;
@property(retain, nonatomic) NSArray *players; // @synthesize players=_players;
- (id)playerIDs;
- (void)gkVoiceChatSession:(id)arg1 stateUpdate:(unsigned long long)arg2 forPeer:(id)arg3;
@property(nonatomic) float volume;
@property(nonatomic, getter=isActive) _Bool active;
@property(readonly, copy, nonatomic) NSString *name;
- (void)setLegacyMute:(_Bool)arg1 forPlayer:(id)arg2;
- (void)setPlayer:(id)arg1 muted:(_Bool)arg2;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)initChat:(id)arg1 withSession:(id)arg2 players:(id)arg3;

@end

@interface GKVoiceChatService : NSObject
{
    id _voiceChatService;
}

+ (_Bool)isVoIPAllowed;
+ (id)defaultVoiceChatService;
+ (void)initialize;
@property(readonly) float inputMeterLevel;
@property(readonly) float outputMeterLevel;
@property(nonatomic, getter=isInputMeteringEnabled) _Bool inputMeteringEnabled;
@property(nonatomic, getter=isOutputMeteringEnabled) _Bool outputMeteringEnabled;
@property(nonatomic) float remoteParticipantVolume;
@property(nonatomic, getter=isMicrophoneMuted) _Bool microphoneMuted;
- (void)receivedData:(id)arg1 fromParticipantID:(id)arg2;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (void)denyCallID:(long long)arg1;
- (_Bool)acceptCallID:(long long)arg1 error:(id *)arg2;
- (void)stopVoiceChatWithParticipantID:(id)arg1;
- (_Bool)startVoiceChatWithParticipantID:(id)arg1 error:(id *)arg2;
@property id <GKVoiceChatClient> client;
- (void)dealloc;

@end

@interface NSArray (GKAdditions)
+ (id)_gkArrayWithIndexSet:(id)arg1;
- (id)_gkOrderedSet;
@end

@interface NSArray (GKCollectionUtils)
- (id)_gkFoldWithInitialValue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (id)_gkFirstObject;
- (id)_gkDistinctValuesForKeyPath:(id)arg1;
- (id)_gkValuesForKeyPath:(id)arg1;
- (id)_gkMapDictionaryWithKeyPath:(id)arg1 valueKeyPath:(id)arg2;
- (id)_gkMapDictionaryWithKeyPath:(id)arg1;
- (id)_gkSubarraysByKeyWithBlock:(CDUnknownBlockType)arg1;
- (id)_gkFilterWithBlock:(CDUnknownBlockType)arg1;
- (id)_gkMapWithBlock:(CDUnknownBlockType)arg1;
- (id)_gkMapConcurrentlyWithBlock:(CDUnknownBlockType)arg1;
@end

@interface NSArray (GKPlayerCanonicalization)
- (void)_gkValidatePlayersForReturnFromAPI;
- (id)_gkInternalsFromPlayers;
- (id)_gkPlayersFromInternals;
- (id)_gkPlayersIDsFromPlayers;
- (id)_gkIncompletePlayersFromPlayerIDs;
@end

@interface NSBundle (GKAdditions)
+ (id)_gkLocalizedMessageFromDictionary:(id)arg1 forBundleID:(id)arg2;
+ (id)_gkLocalizedMessageFromDictionary:(id)arg1;
+ (id)_gkBundleWithIdentifier:(id)arg1;
- (_Bool)_gkIsGameCenterUIService;
- (_Bool)_gkIsGameCenter;
- (id)_gkLocalizedStringForKey:(id)arg1 defaultValue:(id)arg2 arguments:(id)arg3;
- (id)_gkLocalizedStringForKey:(id)arg1 value:(id)arg2 table:(id)arg3 language:(id)arg4;
- (id)_gkPreferredLanguage;
- (id)_gkLocalizedName;
- (id)_gkBundleVersion;
- (id)_gkPathForChallengeSound;
- (id)_gkPathForInviteSound;
- (id)_gkPathForSoundWithName:(id)arg1;
- (_Bool)_gkIsBadgingEnabled;
@end

@interface NSBundle (GKVersioning)
- (id)_gkFrameworkVersionDescription;
@end

@interface NSData (GKAdditions)
+ (void)_gkLoadRemoteImageDataForURL:(id)arg1 queue:(id)arg2 handler:(CDUnknownBlockType)arg3;
@end

@interface NSData (GKBase64)
- (id)_gkBase64EncodedString;
- (id)initWithBase64EncodedString_gk:(id)arg1;
@end

@interface NSData (GKDigestUtils)
- (id)_gkMD5HashData;
- (id)_gkSHA1HashData;
- (id)_gkMD5HashString;
- (id)_gkSHA1HashString;
@end

@interface NSDate (GKExtensions)
- (id)_gkFormatedWhenStringWithOptions:(unsigned long long)arg1;
- (id)_gkFormattedDateForStyle:(unsigned long long)arg1 relative:(_Bool)arg2;
@end

@interface NSDate (GKServerTimestamp)
+ (id)_gkServerTimestamp;
+ (id)_gkDateFromServerTimestamp:(id)arg1;
+ (id)_gkDateFromScalarServerTimestamp:(unsigned long long)arg1;
- (id)_gkServerTimestamp;
@end

@interface NSDictionary (GKCollectionUtils)
+ (id)_gkDictionaryWithFormEncodedString:(id)arg1;
- (id)_gkValuesForKeys:(id)arg1;
- (id)_gkSubDictionaryWithKeys:(id)arg1 mappedToNewKeys:(id)arg2;
- (id)_gkSubDictionaryWithKeys:(id)arg1;
- (id)_gkDictionaryByRemovingObjectForKey:(id)arg1;
- (id)_gkDictionaryByRemovingObjectsForKeys:(id)arg1;
@end

@interface NSDictionary (GKImageAdditions)
+ (id)_gkClientImageDictionaryForServerImageURLs:(id)arg1;
+ (id)_gkImageCacheKeyPathsByKey;
- (id)_gkImageURLForSize:(long long)arg1 scale:(double)arg2;
- (id)_gkImageURLForSize:(long long)arg1 scale:(double)arg2 foundSize:(out unsigned long long *)arg3;
@end

@interface NSError (GameKitErrors)
+ (id)_gkUnauthenticatedError;
+ (id)serverErrorForCode:(long long)arg1 withReason:(id)arg2;
+ (id)serverErrorForCode:(long long)arg1 withUserInfo:(id)arg2;
+ (id)userErrorForServerCode:(long long)arg1 reason:(id)arg2;
+ (id)userErrorForServerError:(id)arg1;
+ (id)userErrorForCode:(long long)arg1 underlyingError:(id)arg2;
+ (id)userErrorForCode:(long long)arg1 userInfo:(id)arg2;
- (_Bool)_gkIsUnauthenticatedError;
@end

@interface NSFileManager (GKCachingAdditions)
- (void)_gkSetExpirationInterval:(double)arg1 ofFileAtPath:(id)arg2;
- (double)_gkExpirationIntervalOfFileAtPath:(id)arg1;
- (void)_gkRemoveXattrNamed:(id)arg1 path:(id)arg2;
- (void)_gkWriteXattrBytes:(void *)arg1 count:(unsigned long long)arg2 withName:(id)arg3 path:(id)arg4;
- (long long)_gkReadXattrBytes:(void *)arg1 count:(unsigned long long)arg2 withName:(id)arg3 path:(id)arg4;
@end

@interface NSFormatter (GKAdditions)
- (void)_gkUpdateLocale;
@end

@interface NSHTTPURLResponse (GKAdditions)
- (id)getSAPSignature;
@end

@interface NSHTTPURLResponse (GKCachingAdditions)
- (double)_maxAge;
@end

@interface NSIndexSet (GKAdditions)
+ (id)_gkIndexSetWithArray:(id)arg1;
@end

@interface NSIndexSet (GKCollectionUtils)
- (id)_gkIndexSetByAddingIndex:(long long)arg1;
- (id)_gkIndexSetByRemovingIndex:(long long)arg1;
@end

@interface NSInvocation (GKAdditions)
+ (id)_gkInvocationWithBlock:(id)arg1;
- (_Bool)_gkHasReplyBlock;
@end

@interface NSInvocation (GKProxyHelpers)
- (void)_gkInvokeOnceWithTarget:(id)arg1;
- (void)_gkInvokeOnce;
- (void)_gkClearTarget;
- (void)_gkClearArgumentAtIndex:(unsigned long long)arg1;
- (void)__gkPrepareForFakeCallbackWithNoData:(_Bool)arg1 orError:(id)arg2;
- (void)_gkPrepareForCallWithError:(id)arg1;
- (void)_gkCallbackWithError:(id)arg1 queue:(id)arg2;
- (id)_gkReplyHandlerInvocation;
- (void)_gkClearCopiedArguments;
- (void)_gkCopyArguments;
- (void)_gkPrintBlockSignature;
@end

@interface NSMapTable (GKAdditions)
- (id)objectForKeyedSubscript:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
@end

@interface NSMethodSignature (GKAdditions)
- (_Bool)_gkHasReplyBlock;
- (_Bool)_gkTakesBlockAtIndex:(unsigned long long)arg1;
@end

@interface NSMutableArray (GKAdditions)
- (id)_gkMutableOrderedSet;
@end

@interface NSMutableDictionary (GKAdditions)
- (void)_gkAddEntriesFromFormEncodedString:(id)arg1;
@end

@interface NSMutableURLRequest (GKAdditions)
+ (int)hashForPlayerID:(id)arg1;
+ (id)_gkHTTPRequestWithURL:(id)arg1 method:(id)arg2 postData:(id)arg3;
- (void)setSAPversion:(id)arg1;
- (void)setSAPSignature:(id)arg1;
- (void)setLocale:(id)arg1;
- (void)setInternal:(_Bool)arg1;
- (void)setPushToken:(id)arg1;
- (void)setBuildVersion:(id)arg1;
- (void)setProtocolVersion:(id)arg1;
- (void)setProcessName:(id)arg1;
- (void)setDeviceUniqueID:(id)arg1;
- (void)setRestrictions:(id)arg1;
- (void)setStoreMode:(id)arg1;
- (void)setGameDescriptor:(id)arg1;
- (void)setPlayerID:(id)arg1 hash:(int)arg2 authToken:(id)arg3;
@end

@interface NSNumber (GKServerTimestamp)
+ (id)_gkServerTimeInterval:(double)arg1;
@end

@interface NSNumberFormatter (GKAdditions)
+ (id)gk_formatUnsignedInteger:(unsigned long long)arg1 withGrouping:(_Bool)arg2;
+ (id)gk_formatInteger:(long long)arg1 withGrouping:(_Bool)arg2;
+ (id)gkRankFormatter;
@end

@interface NSObject (GKAdditions)
+ (id)_gkDefaultKeymap;
- (void)_gkPopulateWithObject:(id)arg1 keymap:(id)arg2;
@end

@interface NSObject (GKBlockKVO)
- (void)_gkRemoveObserverWithBlockToken:(id)arg1;
- (id)_gkAddObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withBlock:(CDUnknownBlockType)arg3;
@end

@interface NSObject (PrintDebugging)
- (id)_gkViewDebuggingChildren;
- (id)_gkViewDebuggingChildKeys;
- (id)_gkRecursiveDescription;
- (id)_gkDescriptionWithChildren:(int)arg1;
- (id)_gkDescription;
@end

@interface NSOrderedSet (GKAdditions)
- (id)_gkFilteredOrderedSetUsingPredicate:(id)arg1;
- (id)_gkSortedOrderedSetUsingDescriptors:(id)arg1;
@end

@interface NSOrderedSet (GKCollectionUtils)
- (_Bool)_gkIsEqualToOrderedSet:(id)arg1;
- (id)_gkFirstObject;
- (id)_gkDistinctValuesForKeyPath:(id)arg1;
- (id)_gkValuesForKeyPath:(id)arg1;
- (id)_gkMapDictionaryWithKeyPath:(id)arg1 valueKeyPath:(id)arg2;
- (id)_gkMapDictionaryWithKeyPath:(id)arg1;
@end

@interface NSPropertyListSerialization (GKAdditions)
+ (id)_gkTypesafePropertyListWithData:(id)arg1 withClass:(Class)arg2;
@end

@interface NSSet (GKCollectionUtils)
- (id)_gkSetByRemovingObject:(id)arg1;
- (id)_gkDistinctValuesForKeyPath:(id)arg1;
- (id)_gkValuesForKeyPath:(id)arg1;
- (id)_gkMapDictionaryWithKeyPath:(id)arg1 valueKeyPath:(id)arg2;
- (id)_gkMapDictionaryWithKeyPath:(id)arg1;
- (id)_gkMapWithBlock:(CDUnknownBlockType)arg1;
@end

@interface NSString (GKAdditions)
+ (id)stringForScoreAndPercentileWithRank:(float)arg1 totalScores:(float)arg2 formattedScore:(id)arg3;
+ (id)stringForRankAndPercentileWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForParanthenticalPercentileRankingWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForPercentileRankingWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForPercentileWithRank:(float)arg1 totalScores:(float)arg2 asPercentile:(_Bool)arg3 isTop:(_Bool *)arg4;
+ (id)_gkUUIDString;
- (id)_gkStringByEscapingHTMLEntities;
- (id)_gkStringByUnescapingFromURLQuery;
- (id)stringByAddingPercentEscapesIncludingReservedCharacters;
- (id)_gkLocaleSensitiveUppercaseString;
- (id)_gkStringByQuotingWithFormat:(id)arg1;
- (id)_gkTruncationSymbolWithFormat:(id)arg1;
- (id)_gkStringByAddingBidiEmbeddingMarkers;
- (_Bool)_gkIsMixedDirection;
- (_Bool)_gkIsNaturallyRTL;
- (void)processUTF16CharactersForBidi:(CDUnknownBlockType)arg1;
@end

@interface NSString (GKCachingAdditions)
- (id)cacheKeyRepresentation;
@end

@interface NSString (GKDigestUtils)
- (id)_gkMD5HashData;
- (id)_gkSHA1HashData;
- (id)_gkMD5HashString;
- (id)_gkSHA1HashString;
@end

@interface NSURL (GKAdditions)
- (id)_gkQueryDictionary;
- (id)_gkURLByReplacingSchemeWithScheme:(id)arg1;
- (id)_gkURLByAddingQueryParameters:(id)arg1;
- (_Bool)_gkIsSecure;
- (_Bool)_gkIsValidServerURL;
@end

@interface NSURL (GKCachingAdditions)
- (id)cacheKeyRepresentation;
@end

@interface NSURLRequest (GKAdditions)
- (id)_gkDictionaryKey;
@end

@interface NSURLRequest (GKSAPSession)
@property(retain, nonatomic, getter=_gkSAPSession, setter=_gkSetSAPSession:) GKFairPlaySAPSession *_gkSAPSession;
@end

@interface _GKIncompletePlayer : GKPlayer
{
}

@end

@interface _GKURLRequestDictionaryKey : NSObject <NSCopying>
{
    NSURLRequest *_request;
}

+ (id)keyWithRequest:(id)arg1;
@property(readonly, nonatomic) NSURLRequest *request; // @synthesize request=_request;
- (void)dealloc;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRequest:(id)arg1;

@end

