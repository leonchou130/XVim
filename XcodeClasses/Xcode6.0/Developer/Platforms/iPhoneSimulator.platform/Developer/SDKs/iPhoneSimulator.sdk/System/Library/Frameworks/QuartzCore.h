//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Animation {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    float _field3;
    struct Ref<CA::Render::Timing> _field4;
    struct Ref<CA::Render::Vector> _field5;
    void *_field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
};

struct Atomic {
    CDStruct_fcaf9308 _field1;
};

struct Behavior {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    unsigned int _field3;
    struct Ref<CA::Render::String> _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int :8;
    unsigned int :8;
    struct Ref<const CA::Render::Behavior> _field7;
};

struct Bounds {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
};

struct CAColorMatrix {
    float m11;
    float m12;
    float m13;
    float m14;
    float m15;
    float m21;
    float m22;
    float m23;
    float m24;
    float m25;
    float m31;
    float m32;
    float m33;
    float m34;
    float m35;
    float m41;
    float m42;
    float m43;
    float m44;
    float m45;
};

struct CAEAGLBuffer;

struct CAMediaTimingFunctionPrivate {
    float _field1[2];
    float _field2[2];
};

struct CAMeshFace {
    unsigned int _field1[4];
    float _field2[4];
};

struct CAMeshVertex {
    struct CGPoint _field1;
    struct CAPoint3D _field2;
};

struct CAPoint3D {
    double x;
    double y;
    double z;
};

struct CARendererPriv {
    id _field1;
    struct Weak<id> _field2;
    id _field3;
    struct Context *_field4;
    struct Renderer *_field5;
    struct CGRect _field6;
    struct Update *_field7;
    unsigned int _field8;
    unsigned int _field9[2];
    unsigned int _field10[2];
    unsigned int _field11;
    unsigned int :8;
    unsigned long long _field12;
    char _field13[0];
};

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CAWindowServerImpl {
    struct __CFArray *_field1;
    unsigned int _field2;
};

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGColorSpace;

struct CGPathElement {
    int _field1;
    struct CGPoint *_field2;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CVSMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct Command;

struct Commit;

struct Condition {
    struct _opaque_pthread_cond_t {
        long long _field1;
        char _field2[40];
    } _field1;
};

struct Context {
    unsigned int _field1;
    struct Context *_field2;
    struct Mutex _field3;
    id _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    id _field8;
    struct Context *_field9;
    struct CGColorSpace *_field10;
    struct __CFDictionary *_field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    struct ObjectCache *_field15;
    id _field16;
    unsigned int _field17;
    float _field18;
    struct Commit *_field19;
    struct Generic _field20;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct ContextItem;

struct Data {
    unsigned int _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned int :3;
    unsigned int :3;
    unsigned int :4;
    unsigned int :4;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :30;
    struct Vec2<double> _field6;
    struct Rect _field7;
};

struct Deleted;

struct Display {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct __CFString *_field3;
    struct __CFString *_field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    struct __CFString *_field8;
    struct ModeSet _field9;
    int _field10;
    int _field11;
    int _field12;
    struct Bounds _field13;
    struct Bounds _field14;
    unsigned int _field15;
    unsigned int _field16;
    float _field17;
    int _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    unsigned int _field24;
    double _field25;
    _Bool _field26;
    _Bool _field27;
};

struct DisplayLink;

struct DisplayLinkItem {
    struct Display *_field1;
    void *_field2;
    SEL _field3;
    void *_field4;
    int _field5;
    struct Mutex _field6;
    struct Condition _field7;
    struct _opaque_pthread_t *_field8;
    id _field9;
    struct Ref<CA::Display::DisplayLink> _field10;
    struct List<const __CFString *> *_field11;
    unsigned long long _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct Ext;

struct Generic {
    CDUnknownFunctionPointerType *_field1;
    struct Context *_field2;
};

struct Handle;

struct HashTable<CA::Layer *, CA::Layer *>;

struct HashTable<CA::Layer *, unsigned int *>;

struct Interpolator {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    struct Ref<CA::Render::Object> _field3;
    struct Ref<CA::Render::Object> _field4;
    struct Ref<CA::Render::Object> _field5;
    struct Ref<CA::Render::Object> _field6;
    struct ValueInterpolator _field7;
};

struct KeyValueArray {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    unsigned int _field3;
    struct Object *_field4[1];
};

struct Layer {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    struct Data _field3;
    struct Ref<CA::Render::Object> _field4;
    struct Ref<CA::Render::TypedArray<CA::Render::Layer>> _field5;
    struct Layer *_field6;
    struct Ref<CA::Render::Layer::Ext> _field7;
    struct Ref<CA::Render::TypedArray<CA::Render::Animation>> _field8;
    struct Ref<CA::Render::Handle> _field9;
};

struct LayoutList;

struct Level;

struct List<const __CFString *>;

struct List<const void *>;

struct List<void (^)()>;

struct ModeSet {
    unsigned int _field1;
    unsigned int _field2[1];
};

struct Mutex {
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } _field1;
};

struct Object {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
};

struct ObjectCache;

struct PendingOperation;

struct Proxy {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    unsigned long long _field3;
};

struct Rect {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct Ref<CA::Display::DisplayLink> {
    struct DisplayLink *_field1;
};

struct Ref<CA::Render::Handle> {
    struct Handle *_field1;
};

struct Ref<CA::Render::Layer::Ext> {
    struct Ext *_field1;
};

struct Ref<CA::Render::Object> {
    struct Object *_field1;
};

struct Ref<CA::Render::String> {
    struct String *_field1;
};

struct Ref<CA::Render::Timing> {
    struct Timing *_field1;
};

struct Ref<CA::Render::TypedArray<CA::Render::Animation>> {
    struct TypedArray<CA::Render::Animation> *_field1;
};

struct Ref<CA::Render::TypedArray<CA::Render::Layer>> {
    struct TypedArray<CA::Render::Layer> *_field1;
};

struct Ref<CA::Render::Vector> {
    struct Vector *_field1;
};

struct Ref<const CA::Render::Behavior> {
    struct Behavior *_field1;
};

struct Renderer;

struct Server {
    CDUnknownFunctionPointerType *_field1;
    struct SpinLock _field2;
    struct Mutex _field3;
    struct Display *_field4;
    struct __CFString *_field5;
    struct ContextItem *_field6;
    unsigned long long _field7;
    unsigned long long _field8;
    struct SpinLock _field9;
    struct PendingOperation *_field10;
    struct Context *_field11;
    struct Shape *_field12;
    unsigned int _field13;
    struct Context *_field14;
    struct Renderer *_field15;
    double _field16;
    double _field17;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct Shape;

struct Shared;

struct SpinLock {
    CDStruct_fcaf9308 _field1;
};

struct String;

struct Timing;

struct Transaction {
    struct Shared *_field1;
    int _field2;
    struct HashTable<CA::Layer *, unsigned int *> *_field3;
    struct SpinLock *_field4;
    unsigned int _field5;
    struct Level *_field6;
    struct List<void (^)()> *_field7;
    struct Command *_field8;
    struct Deleted *_field9;
    struct List<const void *> *_field10;
    struct Context *_field11;
    struct HashTable<CA::Layer *, CA::Layer *> *_field12;
    struct __CFRunLoop *_field13;
    struct __CFRunLoopObserver *_field14;
    struct LayoutList *_field15;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct TypedArray<CA::Render::Animation>;

struct TypedArray<CA::Render::Layer>;

struct Update;

struct ValueInterpolator {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    _Bool _field10;
};

struct Vec2<double> {
    double _field1;
    double _field2;
};

struct Vector;

struct Weak<id> {
    id _field1;
};

struct _CAEAGLNativeWindow {
    struct _EAGLWindowObject _field1;
    struct CAEAGLBuffer *_field2;
    unsigned long long _field3;
    struct Atomic _field4;
    struct Atomic _field5;
    struct SpinLock _field6;
    struct _CAImageQueue *_field7;
    id _field8;
    struct x_list_struct *_field9;
    unsigned int _field10;
    struct CAEAGLBuffer *_field11;
    struct CAEAGLBuffer *_field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    struct CAEAGLBuffer *_field16;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct _CAImageQueue;

struct _CALayerArrayIvars {
    id *layers;
    unsigned long long count;
    unsigned long long capacity;
    unsigned long long mutations;
    _Bool retained;
};

struct _CALayerIvars {
    int refcount;
    unsigned int magic;
    void *layer;
};

struct _CAMLWriterAttribute;

struct _CAMLWriterElement {
    struct _CAMLWriterElement *_field1;
    struct _CAMLWriterElement *_field2;
    struct _CAMLWriterElement *_field3;
    struct _CAMLWriterElement **_field4;
    void *_field5;
    struct __CFString *_field6;
    struct _CAMLWriterAttribute *_field7;
    struct _CAMLWriterAttribute **_field8;
    struct __CFString *_field9;
    unsigned int _field10;
};

struct _CAMLWriterPriv {
    struct __CFData *_field1;
    struct __CFURL *_field2;
    id _field3;
    struct _CAMLWriterElement *_field4;
    struct __CFString *_field5;
    struct __CFSet *_field6;
    int _field7;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct _CAPackageData {
    id _field1;
    id _field2;
    id _field3;
    _Bool _field4;
    _Bool _field5;
    id _field6;
    id _field7;
};

struct _CAPropertyInfo {
    unsigned int _field1;
    SEL _field2[2];
    unsigned int :16;
    unsigned int :16;
    char *_field3;
    struct __CFString *_field4;
};

struct _CARenderRendererInfo {
    int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct _CAStateControllerData {
    id _field1;
    struct __CFDictionary *_field2;
    id _field3;
    id _field4;
};

struct _EAGLWindowObject {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __CFDictionary;

struct __CFString;

struct x_list_struct;

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    int _field1;
} CDStruct_fcaf9308;

typedef struct {
    unsigned int _field1;
    int _field2;
    long long _field3;
    unsigned long long _field4;
    double _field5;
    long long _field6;
    struct CVSMPTETime _field7;
    unsigned long long _field8;
    unsigned long long _field9;
} CDStruct_e50ab651;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/QuartzCore.framework/QuartzCore
// UUID: 570CC910-B2DA-37C2-BDC8-68B56A2C573E
//
//                           Arch: x86_64
//                Current version: 1.10.0
//          Compatibility version: 1.2.0
//                 Source version: 361.0.11.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CAAction
- (void)runActionForKey:(NSString *)arg1 object:(id)arg2 arguments:(NSDictionary *)arg3;
@end

@protocol CAMediaTiming
@property(copy) NSString *fillMode;
@property _Bool autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property double timeOffset;
@property float speed;
@property double duration;
@property double beginTime;
@end

@protocol CAPropertyInfo
+ (NSArray *)properties;
@end

@protocol CAStateRecorder <NSObject>
- (void)addElement:(CAStateElement *)arg1;

@optional
- (void)willAddLayer:(CALayer *)arg1;
@end

@protocol EAGLDrawable
@property(copy) NSDictionary *drawableProperties;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSKeyedArchiverDelegate <NSObject>

@optional
- (void)archiverDidFinish:(NSKeyedArchiver *)arg1;
- (void)archiverWillFinish:(NSKeyedArchiver *)arg1;
- (void)archiver:(NSKeyedArchiver *)arg1 willReplaceObject:(id)arg2 withObject:(id)arg3;
- (void)archiver:(NSKeyedArchiver *)arg1 didEncodeObject:(id)arg2;
- (id)archiver:(NSKeyedArchiver *)arg1 willEncodeObject:(id)arg2;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@interface CAAnimation : NSObject <NSMutableCopying, CAPropertyInfo, NSCoding, NSCopying, CAMediaTiming, CAAction>
{
    void *_attr;
    unsigned int _flags;
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (_Bool)CA_encodesPropertyConditionally:(unsigned int)arg1 type:(int)arg2;
+ (id)animation;
+ (id)defaultValueForKey:(id)arg1;
+ (void)CAMLParserStartElement:(id)arg1;
+ (_Bool)resolveInstanceMethod:(SEL)arg1;
+ (CDUnknownFunctionPointerType)CA_getterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (CDUnknownFunctionPointerType)CA_setterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (id)properties;
@property(retain) id delegate;
@property(retain) CAMediaTimingFunction *timingFunction;
@property(getter=isRemovedOnCompletion) _Bool removedOnCompletion;
@property(copy) NSString *fillMode;
@property _Bool autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property float speed;
@property double duration;
@property double timeOffset;
@property double beginTime;
- (_Bool)removedOnCompletion;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
- (void)runActionForKey:(id)arg1 object:(id)arg2 arguments:(id)arg3;
- (void)dealloc;
- (unsigned int)_propertyFlagsForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;
@property(copy) NSString *beginTimeMode;
@property double frameInterval;
@property(getter=isEnabled) _Bool enabled;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;
- (void)setDefaultDuration:(double)arg1;

// Remaining properties
@property __weak CAStateControllerTransition *CAStateControllerTransition; // @dynamic CAStateControllerTransition;

@end

@interface CAAnimationGroup : CAAnimation
{
}

@property(copy) NSArray *animations;
- (unsigned int)_propertyFlagsForLayer:(id)arg1;
- (void)CA_prepareRenderValue;
- (struct Animation *)_copyRenderAnimationForLayer:(id)arg1;
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;
- (void)setDefaultDuration:(double)arg1;

@end

@interface CALayer : NSObject <CAPropertyInfo, NSCoding, CAMediaTiming>
{
    struct _CALayerIvars _attr;
}

+ (id)defaultActionForKey:(id)arg1;
+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)layer;
+ (_Bool)needsDisplayForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (void)CAMLParserEndElement:(id)arg1;
+ (void)CAMLParserStartElement:(id)arg1;
+ (_Bool)resolveInstanceMethod:(SEL)arg1;
+ (CDUnknownFunctionPointerType)CA_getterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (CDUnknownFunctionPointerType)CA_setterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (id)properties;
+ (_Bool)needsLayoutForKey:(id)arg1;
- (id).cxx_construct;
@property _Bool allowsGroupOpacity;
@property _Bool allowsEdgeAntialiasing;
@property _Bool drawsAsynchronously;
@property double rasterizationScale;
@property _Bool shouldRasterize;
@property struct CGPath *shadowPath;
@property double shadowRadius;
@property struct CGSize shadowOffset;
@property struct CGColor *shadowColor;
@property float shadowOpacity;
@property double cornerRadius;
@property double borderWidth;
@property struct CGColor *borderColor;
@property(copy) NSDictionary *actions;
@property(copy) NSDictionary *style;
@property(copy) NSString *name;
@property(retain) id compositingFilter;
@property(copy) NSArray *backgroundFilters;
@property(copy) NSArray *filters;
@property _Bool masksToBounds;
@property struct CGColor *backgroundColor;
@property float opacity;
@property float minificationFilterBias;
@property(copy) NSString *minificationFilter;
@property(copy) NSString *magnificationFilter;
@property double contentsScale;
@property struct CGRect contentsCenter;
@property struct CGRect contentsRect;
@property struct CATransform3D sublayerTransform;
@property _Bool needsDisplayOnBoundsChange;
@property(getter=isOpaque) _Bool opaque;
@property(getter=isDoubleSided) _Bool doubleSided;
@property(getter=isHidden) _Bool hidden;
@property double zPosition;
@property double anchorPointZ;
@property struct CGPoint anchorPoint;
@property(copy) NSString *fillMode;
@property _Bool autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property float speed;
@property double duration;
@property double timeOffset;
@property double beginTime;
- (void)layoutSublayers;
- (void)layoutIfNeeded;
- (struct CGSize)preferredFrameSize;
- (struct CGSize)_preferredSize;
- (_Bool)needsLayout;
- (void)setNeedsLayout;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)_display;
- (void)display;
- (void)_renderBorderInContext:(struct CGContext *)arg1;
- (void)_renderSublayersInContext:(struct CGContext *)arg1;
- (void)_renderForegroundInContext:(struct CGContext *)arg1;
- (void)_renderBackgroundInContext:(struct CGContext *)arg1;
- (void)renderInContext:(struct CGContext *)arg1;
- (void)displayIfNeeded;
- (_Bool)needsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setNeedsDisplay;
- (id)modelLayer;
- (id)presentationLayer;
- (void)_cancelAnimationTimer;
- (_Bool)_scheduleAnimationTimer;
- (id)animationKeys;
- (id)animationForKey:(id)arg1;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAllAnimations;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (id)actionForKey:(id)arg1;
- (void)replaceSublayer:(id)arg1 with:(id)arg2;
- (void)insertSublayer:(id)arg1 above:(id)arg2;
- (void)insertSublayer:(id)arg1 below:(id)arg2;
- (void)addSublayer:(id)arg1;
- (void)insertSublayer:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeFromSuperlayer;
@property __weak id delegate;
@property(retain) CALayer *mask;
@property(readonly) CALayer *superlayer;
@property(copy) NSArray *sublayers;
@property(copy) NSString *contentsScaling;
@property(copy) NSString *contentsGravity;
@property unsigned int edgeAntialiasingMask;
@property(retain) id contents;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (double)convertTime:(double)arg1 toLayer:(id)arg2;
- (double)convertTime:(double)arg1 fromLayer:(id)arg2;
- (struct CGRect)convertRect:(struct CGRect)arg1 toLayer:(id)arg2;
- (struct CGRect)convertRect:(struct CGRect)arg1 fromLayer:(id)arg2;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toLayer:(id)arg2;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 fromLayer:(id)arg2;
- (_Bool)contentsAreFlipped;
@property(getter=isGeometryFlipped) _Bool geometryFlipped;
@property struct CGRect frame;
- (void)setAffineTransform:(struct CGAffineTransform)arg1;
- (struct CGAffineTransform)affineTransform;
@property struct CATransform3D transform;
@property struct CGPoint position;
@property struct CGRect bounds;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (id)valueForKey:(id)arg1;
- (id)debugDescription;
- (void)dealloc;
- (void)_dealloc;
- (id)_initWithReference:(id)arg1;
- (id)initWithLayer:(id)arg1;
- (id)initWithBounds:(struct CGRect)arg1;
- (id)init;
- (_Bool)allowsWeakReference;
- (unsigned long long)retainCount;
- (oneway void)release;
- (_Bool)retainWeakReference;
- (id)retain;
- (id)stateTransitionFrom:(id)arg1 to:(id)arg2;
- (id)dependentStatesOfState:(id)arg1;
- (id)stateWithName:(id)arg1;
- (void)removeState:(id)arg1;
- (void)insertState:(id)arg1 atIndex:(unsigned int)arg2;
- (void)addState:(id)arg1;
@property(readonly) struct CGRect visibleRect;
- (struct CGRect)_visibleRectOfLayer:(id)arg1;
- (void)scrollRectToVisible:(struct CGRect)arg1;
- (void)_scrollRect:(struct CGRect)arg1 fromLayer:(id)arg2;
- (void)scrollPoint:(struct CGPoint)arg1;
- (void)_scrollPoint:(struct CGPoint)arg1 fromLayer:(id)arg2;
@property _Bool acceleratesDrawing;
@property struct CGSize backgroundColorPhase;
@property struct CGSize sizeRequisition;
@property _Bool allowsGroupBlending;
@property _Bool allowsDisplayCompositing;
@property _Bool preloadsCache;
@property _Bool swapsMaskAndLayer;
@property _Bool contentsOpaque;
@property struct CGAffineTransform contentsTransform;
@property _Bool shadowPathIsBounds;
@property _Bool invertsShadow;
@property _Bool sortsSublayers;
@property _Bool needsLayoutOnGeometryChange;
@property(getter=isFrozen) _Bool frozen;
@property _Bool clearsContext;
@property _Bool canDrawConcurrently;
@property _Bool literalContentsCenter;
@property _Bool hitTestsAsOpaque;
@property _Bool allowsHitTesting;
- (void)setFlipped:(_Bool)arg1;
- (_Bool)isFlipped;
- (_Bool)doubleSided;
- (_Bool)opaque;
- (_Bool)hidden;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (void)layerDidBecomeVisible:(_Bool)arg1;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (void)_didCommitLayer:(struct Transaction *)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (id)layerAtTime:(double)arg1;
- (id)layerBeingDrawn;
- (struct CGSize)size;
- (id)ancestorSharedWithLayer:(id)arg1;
- (_Bool)isDescendantOf:(id)arg1;
- (_Bool)ignoresHitTesting;
- (void)layoutBelowIfNeeded;
- (_Bool)layoutIsActive;
- (void)_prepareContext:(struct CGContext *)arg1;
- (void *)regionBeingDrawn;
- (unsigned int)_renderImageCopyFlags;
- (void)setContentsChanged;
- (void)invalidateContents;
@property(copy) CAMeshTransform *meshTransform;
- (id)context;
- (void)clearHasBeenCommitted;
- (_Bool)hasBeenCommitted;
- (_Bool)drawsMipmapLevels;
- (_Bool)_canDisplayConcurrently;
- (id)implicitAnimationForKeyPath:(id)arg1;
- (void)reloadValueForKeyPath:(id)arg1;
@property double metallicity;
@property double shininess;
@property double specularReflectance;
@property double diffuseReflectance;
@property double ambientReflectance;
@property _Bool acceptsLights;
@property(copy) NSArray *lights;
@property double velocityStretch;
@property(copy) NSArray *behaviors;
@property double coefficientOfRestitution;
@property double momentOfInertia;
@property double mass;
- (_Bool)getRendererInfo:(struct _CARenderRendererInfo *)arg1 size:(unsigned long long)arg2;

// Remaining properties
@property(copy) NSArray *stateTransitions; // @dynamic stateTransitions;
@property(copy) NSArray *states; // @dynamic states;

@end

@interface CABackdropLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property double statisticsInterval;
@property(copy) NSString *statisticsType;
@property _Bool disablesOccludedBackdropBlurs;
@property double marginWidth;
@property struct CGRect backdropRect;
@property double scale;
@property(copy) NSString *groupName;
@property(getter=isEnabled) _Bool enabled;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)didChangeValueForKey:(id)arg1;
- (id)statisticsValues;
- (void)layerDidBecomeVisible:(_Bool)arg1;

@end

@interface CAPropertyAnimation : CAAnimation
{
}

+ (id)animationWithKeyPath:(id)arg1;
- (_Bool)cumulative;
- (_Bool)additive;
@property(retain) CAValueFunction *valueFunction;
@property(getter=isCumulative) _Bool cumulative;
@property(copy) NSString *keyPath;
@property(getter=isAdditive) _Bool additive;
- (unsigned int)_propertyFlagsForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;

@end

@interface CABasicAnimation : CAPropertyAnimation
{
}

- (double)_timeFunction:(double)arg1;
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;
@property(retain) id byValue;
@property(retain) id toValue;
@property(retain) id fromValue;
- (void)CA_prepareRenderValue;
- (struct Animation *)_copyRenderAnimationForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;
@property double endAngle;
@property double startAngle;
@property _Bool roundsToInteger;

@end

@interface CABehavior : NSObject <NSCoding, NSCopying>
{
    void *_attr;
    unsigned int _refcount;
    unsigned int _uid;
    void *_priv;
}

+ (_Bool)resolveInstanceMethod:(SEL)arg1;
+ (CDUnknownFunctionPointerType)CA_getterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (CDUnknownFunctionPointerType)CA_setterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (void)CAMLParserStartElement:(id)arg1;
+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)behavior;
@property(copy) NSDictionary *style;
@property __weak id delegate;
@property(getter=isEnabled) _Bool enabled;
@property(copy) NSString *name;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
- (void)_setCARenderBehavior:(struct Behavior *)arg1;
- (void)dealloc;
- (_Bool)allowsWeakReference;
- (unsigned long long)retainCount;
- (oneway void)release;
- (_Bool)retainWeakReference;
- (id)retain;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CACodingProxy : NSObject <NSCoding>
{
}

- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CACGPathCodingProxy : CACodingProxy
{
    struct CGPath *_path;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CACGPathCodingSegment : NSObject <NSCoding>
{
    int _type;
    struct CGPoint _points[3];
}

- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)addToCGPath:(struct CGPath *)arg1;
- (id)initWithCGPathElement:(const struct CGPathElement *)arg1;

@end

__attribute__((visibility("hidden")))
@interface CACGPatternCodingProxy : CACodingProxy
{
    struct CGPattern *_pattern;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

@interface CAContext : NSObject
{
}

+ (id)objectForSlot:(unsigned int)arg1;
+ (void)setClientPort:(unsigned int)arg1;
+ (id)remoteContextWithOptions:(id)arg1;
+ (id)remoteContext;
+ (id)localContextWithOptions:(id)arg1;
+ (id)localContext;
+ (id)currentContext;
+ (id)allContexts;
- (void)setObject:(id)arg1 forSlot:(unsigned int)arg2;
- (void)deleteSlot:(unsigned int)arg1;
- (unsigned int)createImageSlot:(struct CGSize)arg1 hasAlpha:(_Bool)arg2;
- (unsigned int)createSlot;
- (void)setFencePort:(unsigned int)arg1 commitHandler:(CDUnknownBlockType)arg2;
- (void)setFence:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)setFencePort:(unsigned int)arg1;
- (unsigned int)createFencePort;
- (void)orderBelow:(unsigned int)arg1;
- (void)orderAbove:(unsigned int)arg1;
- (void)invalidate;

// Remaining properties
@property struct CGColorSpace *colorSpace; // @dynamic colorSpace;
@property(readonly) unsigned int contextId; // @dynamic contextId;
@property(retain) CALayer *layer; // @dynamic layer;
@property float level; // @dynamic level;
@property(readonly) NSDictionary *options; // @dynamic options;
@property(getter=isSecure) _Bool secure; // @dynamic secure;
@property(readonly) _Bool valid; // @dynamic valid;

@end

__attribute__((visibility("hidden")))
@interface CAContextImpl : CAContext
{
    struct Context *_impl;
}

- (struct Context *)renderContext;
- (void)setObject:(id)arg1 forSlot:(unsigned int)arg2;
- (void)deleteSlot:(unsigned int)arg1;
- (unsigned int)createImageSlot:(struct CGSize)arg1 hasAlpha:(_Bool)arg2;
- (unsigned int)createSlot;
- (void)setFence:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)setFencePort:(unsigned int)arg1 commitHandler:(CDUnknownBlockType)arg2;
- (void)setFencePort:(unsigned int)arg1;
- (unsigned int)createFencePort;
- (_Bool)valid;
- (id)options;
- (_Bool)isSecure;
- (void)setSecure:(_Bool)arg1;
- (float)level;
- (void)setLevel:(float)arg1;
- (void)orderBelow:(unsigned int)arg1;
- (void)orderAbove:(unsigned int)arg1;
- (void)setLayer:(id)arg1;
- (id)layer;
- (void)setColorSpace:(struct CGColorSpace *)arg1;
- (struct CGColorSpace *)colorSpace;
- (unsigned int)contextId;
- (void)dealloc;
- (void)invalidate;
- (id)initRemoteWithOptions:(id)arg1;
- (id)initWithOptions:(id)arg1 localContext:(_Bool)arg2;

@end

__attribute__((visibility("hidden")))
@interface CADebuggingArchiverDelegate : NSObject <NSKeyedArchiverDelegate>
{
}


// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface CADisplay : NSObject
{
    void *_impl;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)TVOutDisplay;
+ (id)mainDisplay;
+ (id)displays;
- (id)description;
@property(readonly, getter=isCloningSupported) _Bool cloningSupported;
@property(readonly, getter=isCloned) _Bool cloned;
@property(copy, nonatomic) NSString *overscanAdjustment;
@property(readonly) double overscanAmount;
@property(readonly, getter=isOverscanned) _Bool overscanned;
@property(readonly) double refreshRate;
@property(readonly, getter=isExternal) _Bool external;
@property(readonly, getter=isSupported) _Bool supported;
@property(readonly) long long tag;
@property(readonly, nonatomic) struct CGRect safeBounds;
@property(readonly, nonatomic) struct CGRect frame;
@property(readonly, nonatomic) struct CGRect bounds;
@property _Bool allowsVirtualModes;
@property(copy, nonatomic) NSString *colorMode;
@property(readonly, nonatomic) CADisplayMode *preferredMode;
@property(retain, nonatomic) CADisplayMode *currentMode;
@property(readonly, nonatomic) NSArray *availableModes;
@property(readonly) NSString *uniqueId;
@property(readonly) unsigned int connectionSeed;
@property(readonly) unsigned int seed;
@property(readonly) unsigned int displayId;
@property(readonly, nonatomic) NSString *deviceName;
@property(readonly, nonatomic) NSString *name;
- (void)update;
- (void)_invalidate;
- (id)_initWithDisplay:(struct Display *)arg1;

@end

@interface CADisplayLink : NSObject
{
    void *_impl;
}

+ (id)displayLinkWithTarget:(id)arg1 selector:(SEL)arg2;
+ (id)displayLinkWithDisplay:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
- (void)invalidate;
@property(nonatomic) long long frameInterval;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) double timestamp;
- (void)removeFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)addToRunLoop:(id)arg1 forMode:(id)arg2;
- (void)dealloc;
- (id)_initWithDisplayLinkItem:(struct DisplayLinkItem *)arg1;
@property(retain, nonatomic) id userInfo;
@property(readonly, nonatomic) CADisplay *display;

@end

@interface CADisplayMode : NSObject
{
    void *_priv;
    CADisplay *_dpy;
    unsigned long long _width;
    unsigned long long _height;
}

+ (id)_displayModeWithMode:(int)arg1 display:(id)arg2;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) double pixelAspectRatio;
@property(readonly, nonatomic) unsigned long long height;
@property(readonly, nonatomic) unsigned long long width;
- (void)_setWidth:(unsigned long long)arg1 height:(unsigned long long)arg2;
- (int)_mode;
- (id)_display;
- (void)dealloc;
- (id)_initWithMode:(int)arg1 display:(id)arg2;

@end

@interface CADistanceFieldLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property struct CGColor *foregroundColor;
@property double sharpness;
@property double offset;
@property double lineWidth;
@property _Bool invertsShape;
@property(copy) NSString *renderMode;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (unsigned int)_renderImageCopyFlags;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)didChangeValueForKey:(id)arg1;

@end

@interface CADynamicsBehavior : CABehavior
{
}

+ (id)defaultValueForKey:(id)arg1;
@property _Bool reactsToCollisions;
@property double angularDrag;
@property double drag;
@property double springScale;
@property double collisionInterval;
@property double stoppedAngularVelocity;
@property double stoppedVelocity;
@property double minimumTimeStep;
@property double timeStep;
@property(copy) NSArray *forceFields;
@property(copy) NSArray *springs;
- (struct Object *)CA_copyRenderValue;

@end

@interface CAEAGLLayer : CALayer <EAGLDrawable>
{
    struct _CAEAGLNativeWindow *_win;
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (id)defaultValueForKey:(id)arg1;
@property(copy) NSDictionary *drawableProperties;
- (void)_didCommitLayer:(struct Transaction *)arg1;
- (void)_display;
- (void)layerDidBecomeVisible:(_Bool)arg1;
- (void)dealloc;
@property(readonly) struct _EAGLWindowObject *nativeWindow;
- (void)didChangeValueForKey:(id)arg1;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
@property(getter=isAsynchronous) _Bool asynchronous;

@end

@interface CAEmitterBehavior : NSObject <NSCoding>
{
    unsigned int _type;
    NSString *_name;
    void *_attr;
    void *_cache;
    unsigned int _flags;
}

+ (void)CAMLParserStartElement:(id)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)behaviorWithType:(id)arg1;
+ (id)behaviorTypes;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)dealloc;
- (void)didChangeValueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (id)valueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
@property(getter=isEnabled) _Bool enabled;
@property(copy) NSString *name;
@property(readonly) NSString *type;
- (id)initWithType:(id)arg1;

@end

@interface CAEmitterCell : NSObject <NSCopying, CAPropertyInfo, NSCoding, CAMediaTiming>
{
    void *_attr[2];
    void *_state;
    unsigned int _flags;
}

+ (void)CAMLParserStartElement:(id)arg1;
+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)emitterCell;
+ (id)properties;
@property(copy) NSArray *emitterCells;
@property float minificationFilterBias;
@property(copy) NSString *minificationFilter;
@property(copy) NSString *magnificationFilter;
@property struct CGRect contentsRect;
@property(retain) id contents;
@property float alphaSpeed;
@property float alphaRange;
@property float blueSpeed;
@property float blueRange;
@property float greenSpeed;
@property float greenRange;
@property float redSpeed;
@property float redRange;
@property struct CGColor *color;
@property double spinRange;
@property double spin;
@property double rotationRange;
@property double rotation;
@property double orientationRange;
@property double orientationLongitude;
@property double orientationLatitude;
@property double scaleSpeed;
@property double scaleRange;
@property double scale;
@property double zAcceleration;
@property double yAcceleration;
@property double xAcceleration;
@property double velocityRange;
@property double velocity;
@property double emissionRange;
@property double emissionLongitude;
@property double emissionLatitude;
@property float lifetimeRange;
@property float lifetime;
@property float birthRate;
@property(copy) NSDictionary *style;
@property(getter=isEnabled) _Bool enabled;
@property(copy) NSString *name;
@property(copy) NSString *fillMode;
@property _Bool autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property float speed;
@property double duration;
@property double timeOffset;
@property double beginTime;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)debugDescription;
- (void)didChangeValueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)CA_prepareRenderValue;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property float contentsFramesPerSecond;
@property unsigned int contentsFramesPerRow;
@property unsigned int contentsFrameCount;
@property(copy) NSString *contentsFrameMode;
@property double contentsScale;
@property(copy) NSArray *emitterBehaviors;
@property float massRange;
@property float mass;
@property(copy) NSString *particleType;

@end

@interface CAEmitterLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property unsigned int seed;
@property _Bool preservesDepth;
@property(copy) NSString *renderMode;
@property float spin;
@property float scale;
@property float velocity;
@property double emitterDepth;
@property struct CGSize emitterSize;
@property double emitterZPosition;
@property struct CGPoint emitterPosition;
@property(copy) NSString *emitterMode;
@property(copy) NSString *emitterShape;
@property float lifetime;
@property float birthRate;
@property(copy) NSArray *emitterCells;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (id)implicitAnimationForKeyPath:(id)arg1;
- (void)reloadValueForKeyPath:(id)arg1;
- (void)didChangeValueForKey:(id)arg1;
@property double cullMaxZ;
@property double cullMinZ;
@property struct CGRect cullRect;
@property float spinBias;
@property float emitterDuration;
@property struct CGPath *emitterPath;
@property(copy) NSArray *emitterBehaviors;

@end

@interface CAFilter : NSObject <NSCopying, NSMutableCopying, NSCoding>
{
    unsigned int _type;
    NSString *_name;
    unsigned int _flags;
    void *_attr;
    void *_cache;
}

+ (void)CAMLParserStartElement:(id)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)filterWithName:(id)arg1;
+ (id)filterWithType:(id)arg1;
+ (id)filterTypes;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)dealloc;
- (void)setDefaults;
- (id)valueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
@property _Bool cachesInputImage;
@property(getter=isEnabled) _Bool enabled;
- (_Bool)enabled;
@property(copy) NSString *name;
@property(readonly) NSString *type;
- (id)initWithName:(id)arg1;
- (id)initWithType:(id)arg1;

@end

@interface CAForceField : NSObject <NSCopying, NSMutableCopying, NSCoding>
{
    NSString *_name;
    CALayer *_layer;
    CAValueFunction *_function;
    _Bool _enabled;
    void *_priv;
}

+ (void)CAMLParserStartElement:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)forceField;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)dealloc;
@property(retain) CAValueFunction *function;
@property(retain) CALayer *layer;
@property(getter=isEnabled) _Bool enabled;
@property(copy) NSString *name;
- (id)init;

@end

@interface CAGradientLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property(copy) NSString *type;
@property struct CGPoint endPoint;
@property struct CGPoint startPoint;
@property(copy) NSArray *locations;
@property(copy) NSArray *colors;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)_renderBackgroundInContext:(struct CGContext *)arg1;
- (id)implicitAnimationForKeyPath:(id)arg1;
- (void)didChangeValueForKey:(id)arg1;
@property(retain) id colorMap;

@end

__attribute__((visibility("hidden")))
@interface CAIOSurfaceCodingProxy : CACodingProxy
{
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

@interface CAKeyframeAnimation : CAPropertyAnimation
{
}

@property(copy) NSString *rotationMode;
@property(copy) NSArray *biasValues;
@property(copy) NSArray *continuityValues;
@property(copy) NSArray *tensionValues;
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;
@property struct CGPath *path;
@property(copy) NSArray *values;
@property(copy) NSArray *timingFunctions;
@property(copy) NSArray *keyTimes;
@property(copy) NSString *calculationMode;
- (void)CA_prepareRenderValue;
- (struct Animation *)_copyRenderAnimationForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CALayerArray : NSArray
{
    struct _CALayerArrayIvars _ivars;
}

- (id).cxx_construct;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (void)getObjects:(id *)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (id)initWithLayers:(id *)arg1 count:(unsigned long long)arg2 retain:(_Bool)arg3;

@end

@interface CALayerHost : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
@property _Bool inheritsSecurity;
@property unsigned int contextId;
- (void)layerDidBecomeVisible:(_Bool)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)didChangeValueForKey:(id)arg1;

@end

@interface CALight : NSObject <NSCopying, NSCoding>
{
    void *_attr;
    void *_priv;
}

+ (id)CA_CAMLPropertyForKey:(id)arg1;
+ (void)CAMLParserStartElement:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)lightWithType:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)dealloc;
@property(copy) NSString *imageBlendMode;
@property double imageNormalAngle;
@property double imageRotation;
@property(retain) id image;
@property double coneEdgeSoftness;
@property double coneAngle;
@property double falloff;
@property double falloffDistance;
@property struct CAPoint3D position;
@property struct CAPoint3D direction;
@property struct CGColor *color;
@property double specularIntensity;
@property double diffuseIntensity;
@property double ambientIntensity;
@property double intensity;
@property(getter=isEnabled) _Bool enabled;
@property(copy) NSString *name;
@property(copy) NSString *type;
- (id)initWithType:(id)arg1;
- (id)init;

@end

@interface CALinearMaskLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property struct CGColor *foregroundColor;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)drawInLinearMaskContext:(struct CALinearMaskContext *)arg1;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)didChangeValueForKey:(id)arg1;

@end

@interface CAMLParser : NSObject
{
    struct _CAMLParserData *_data;
}

+ (id)parser;
+ (id)parseContentsOfURL:(id)arg1;
- (void)parserWarning:(id)arg1;
- (void)parserError:(id)arg1;
- (id)didFailToLoadResourceFromURL:(id)arg1;
- (void)didLoadResource:(id)arg1 fromURL:(id)arg2;
- (id)willLoadResourceFromURL:(id)arg1;
- (id)attributeForKey:(id)arg1 remove:(_Bool)arg2;
- (void)setElementValue:(id)arg1;
- (id)elementValue;
- (id)objectById:(id)arg1;
@property(readonly) id result;
@property(readonly) NSError *error;
- (_Bool)parseContentsOfURL:(id)arg1;
- (_Bool)parseData:(id)arg1;
- (_Bool)parseString:(id)arg1;
- (_Bool)parseBytes:(const char *)arg1 length:(unsigned long long)arg2;
@property __weak id delegate;
@property(retain) NSURL *baseURL;
- (void)dealloc;
- (id)init;

@end

@interface CAMLWriter : NSObject
{
    struct _CAMLWriterPriv *_priv;
}

+ (id)writerWithData:(id)arg1;
- (void)dealloc;
- (void)_writeElementTree:(struct _CAMLWriterElement *)arg1;
- (void)endElement;
- (id)URLStringForResource:(id)arg1;
- (void)setElementContent:(id)arg1;
- (void)setElementAttribute:(id)arg1 forKey:(id)arg2;
- (void)beginPropertyElement:(id)arg1;
- (void)beginElement:(unsigned int)arg1;
- (void)encodeObject:(id)arg1;
@property __weak id delegate;
@property(retain) NSURL *baseURL;
- (id)initWithData:(id)arg1;

@end

@interface CAMatchMoveAnimation : CAAnimation
{
}

+ (id)defaultValueForKey:(id)arg1;
@property(getter=isAdditive) _Bool additive;
@property _Bool appliesRotation;
@property _Bool appliesScale;
@property _Bool appliesY;
@property _Bool appliesX;
@property _Bool targetsSuperlayer;
@property(copy) NSString *keyPath;
@property(copy) NSArray *sourcePoints;
@property(retain) CALayer *sourceLayer;
- (unsigned int)_propertyFlagsForLayer:(id)arg1;
- (struct Animation *)_copyRenderAnimationForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;

@end

@interface CAMediaTimingFunction : NSObject <NSCoding>
{
    struct CAMediaTimingFunctionPrivate *_priv;
}

+ (id)functionWithName:(id)arg1;
+ (id)functionWithControlPoints:(float)arg1:(float)arg2:(float)arg3:(float)arg4;
+ (void)CAMLParserEndElement:(id)arg1 content:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (void)getControlPointAtIndex:(unsigned long long)arg1 values:(float [2])arg2;
- (void)_getPoints:(double *)arg1;
- (void)dealloc;
- (id)initWithControlPoints:(float)arg1:(float)arg2:(float)arg3:(float)arg4;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
- (float)_solveForInput:(float)arg1;

@end

__attribute__((visibility("hidden")))
@interface CAMediaTimingFunctionBuiltin : CAMediaTimingFunction
{
    unsigned int _index;
}

- (void)encodeWithCAMLWriter:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)description;
- (void)_getPoints:(double *)arg1;

@end

@interface CAMeshTransform : NSObject <NSCoding, NSCopying, NSMutableCopying>
{
    void *_impl;
    unsigned long long _normalization;
    long long _subdivisionSteps;
}

+ (void)CAMLParserEndElement:(id)arg1 content:(id)arg2;
+ (void)CAMLParserStartElement:(id)arg1;
+ (id)meshTransformWithVertexCount:(unsigned long long)arg1 vertices:(const struct CAMeshVertex *)arg2 faceCount:(unsigned long long)arg3 faces:(const struct CAMeshFace *)arg4 depthNormalization:(id)arg5;
- (id)meshTransformForLayer:(id)arg1;
- (double)CA_distanceToValue:(id)arg1;
- (id)CA_interpolateValues:(id)arg1:(id)arg2:(id)arg3 interpolator:(const struct ValueInterpolator *)arg4;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_subdivideToDepth:(long long)arg1;
- (id)_data;
- (_Bool)_constructWithData:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct Object *)CA_copyRenderValue;
@property(readonly) int subdivisionSteps;
@property(readonly, copy) NSString *depthNormalization;
- (struct CAMeshFace)faceAtIndex:(unsigned long long)arg1;
@property(readonly) unsigned long long faceCount;
- (struct CAMeshVertex)vertexAtIndex:(unsigned long long)arg1;
@property(readonly) unsigned long long vertexCount;
- (id)_initWithMeshTransform:(id)arg1;
- (id)initWithVertexCount:(unsigned long long)arg1 vertices:(const struct CAMeshVertex *)arg2 faceCount:(unsigned long long)arg3 faces:(const struct CAMeshFace *)arg4 depthNormalization:(id)arg5;
- (id)_init;
- (id)init;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface CAMeshInterpolator : CAMeshTransform
{
    struct Interpolator *_interp;
}

- (id)meshTransformForLayer:(id)arg1;
- (void)dealloc;

@end

@interface CAMutableMeshTransform : CAMeshTransform
{
}

+ (id)meshTransform;
@property int subdivisionSteps;
@property(copy) NSString *depthNormalization;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)removeFaceAtIndex:(unsigned long long)arg1;
- (void)addFace:(struct CAMeshFace)arg1;
- (void)replaceFaceAtIndex:(unsigned long long)arg1 withFace:(struct CAMeshFace)arg2;
- (void)removeVertexAtIndex:(unsigned long long)arg1;
- (void)addVertex:(struct CAMeshVertex)arg1;
- (void)replaceVertexAtIndex:(unsigned long long)arg1 withVertex:(struct CAMeshVertex)arg2;
- (id)init;

@end

@interface CAPackage : NSObject
{
    struct _CAPackageData *_data;
}

+ (id)packageWithData:(id)arg1 type:(id)arg2 options:(id)arg3 error:(id *)arg4;
+ (id)packageWithContentsOfURL:(id)arg1 type:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (void)CAMLParser:(id)arg1 didLoadResource:(id)arg2 fromURL:(id)arg3;
- (id)CAMLParser:(id)arg1 resourceForURL:(id)arg2;
- (Class)CAMLParser:(id)arg1 didFailToFindClassWithName:(id)arg2;
- (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;
- (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
- (void)foreachLayer:(CDUnknownBlockType)arg1;
- (id)publishedObjectWithName:(id)arg1;
- (id)publishedObjectNames;
@property(readonly, getter=isGeometryFlipped) _Bool geometryFlipped;
@property(readonly) CALayer *rootLayer;
- (void)dealloc;
- (void)_readFromCAMLURL:(id)arg1 type:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (void)_readFromCAMLData:(id)arg1 type:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (void)_readFromArchiveData:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (void)_addClassSubstitutions:(id)arg1;
- (id)substitutedClasses;
- (id)_initWithData:(id)arg1 type:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (id)_initWithContentsOfURL:(id)arg1 type:(id)arg2 options:(id)arg3 error:(id *)arg4;

@end

@interface CARenderer : NSObject
{
    struct CARendererPriv *_priv;
}

+ (id)rendererWithEAGLContext:(id)arg1 options:(id)arg2;
- (void)endFrame;
- (void)render;
- (_Bool)hasMissingContent;
- (double)nextFrameTime;
- (void)addUpdateRect:(struct CGRect)arg1;
- (struct CGRect)updateBounds;
- (void)beginFrameAtTime:(double)arg1 timeStamp:(CDStruct_e50ab651 *)arg2;
@property struct CGRect bounds;
@property(retain) CALayer *layer;
- (void)dealloc;
- (id)_initWithEAGLContext:(id)arg1 options:(id)arg2;
- (id)_initWithOptions:(id)arg1;
@property __weak id <CARendererDelegate> delegate;
@property(retain) CAContext *context;

@end

@interface CAReplicatorLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property float instanceAlphaOffset;
@property float instanceBlueOffset;
@property float instanceGreenOffset;
@property float instanceRedOffset;
@property struct CGColor *instanceColor;
@property struct CATransform3D instanceTransform;
@property double instanceDelay;
@property _Bool preservesDepth;
@property long long instanceCount;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)_renderSublayersInContext:(struct CGContext *)arg1;
- (id)implicitAnimationForKeyPath:(id)arg1;
- (void)didChangeValueForKey:(id)arg1;
- (id)init;

@end

@interface CAScrollLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (id)defaultValueForKey:(id)arg1;
@property(copy) NSString *scrollMode;
- (struct CGRect)_visibleRectOfLayer:(id)arg1;
- (void)_scrollRect:(struct CGRect)arg1 fromLayer:(id)arg2;
- (void)_scrollPoint:(struct CGPoint)arg1 fromLayer:(id)arg2;
- (void)scrollToRect:(struct CGRect)arg1;
- (void)scrollToPoint:(struct CGPoint)arg1;

@end

@interface CAShapeLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (id)defaultValueForKey:(id)arg1;
@property double lineDashPhase;
@property(copy) NSArray *lineDashPattern;
@property(copy) NSString *lineCap;
@property(copy) NSString *lineJoin;
@property double miterLimit;
@property double lineWidth;
@property double strokeEnd;
@property double strokeStart;
@property struct CGColor *strokeColor;
@property(copy) NSString *fillRule;
@property struct CGColor *fillColor;
@property struct CGPath *path;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)_renderForegroundInContext:(struct CGContext *)arg1;
- (id)implicitAnimationForKeyPath:(id)arg1;
- (void)didChangeValueForKey:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CASlotProxy : NSObject
{
    struct Proxy *_proxy;
}

- (struct Object *)CA_copyRenderValue;
- (void)dealloc;
- (id)initWithName:(unsigned int)arg1;

@end

@interface CATextLayer : CALayer
{
    struct CATextLayerPrivate *_state;
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)needsDisplayForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
@property(copy) NSString *alignmentMode;
@property(copy) NSString *truncationMode;
@property(getter=isWrapped) _Bool wrapped;
@property struct CGColor *foregroundColor;
@property void *font;
@property double fontSize;
@property(copy) id string;
- (void)_prepareContext:(struct CGContext *)arg1;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)_drawLine:(struct __CTLine *)arg1 inContext:(struct CGContext *)arg2 atPoint:(struct CGPoint)arg3;
- (void)_applyLinesToFunction:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;
- (struct CGSize)_preferredSize;
- (struct __CTLine *)_createTruncationToken;
- (struct __CTTypesetter *)_retainTypesetter;
- (id)_createStringDict;
- (void)didChangeValueForKey:(id)arg1;
- (void)dealloc;
- (id)initWithLayer:(id)arg1;
- (id)init;
- (id)implicitAnimationForKeyPath:(id)arg1;
@property _Bool allowsFontSubpixelQuantization;
@property(copy) id truncationString;
- (_Bool)wrapped;

@end

@interface CASmoothedTextLayer : CATextLayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)_hasRenderLayerSubclass;
+ (_Bool)needsDisplayForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
@property unsigned int fontSmoothingStyle;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (struct Layer *)_copyRenderLayer:(struct Transaction *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;
- (void)_drawLine:(struct __CTLine *)arg1 inContext:(struct CGContext *)arg2 atPoint:(struct CGPoint)arg3;
- (void)didChangeValueForKey:(id)arg1;

@end

@interface CASpring : NSObject <NSCopying, NSMutableCopying, NSCoding>
{
    NSString *_name;
    CALayer *_layerA;
    CALayer *_layerB;
    struct CGPoint _attachmentPointA;
    struct CGPoint _attachmentPointB;
    CAValueFunction *_function;
    double _stiffness;
    double _damping;
    double _restLength;
    _Bool _enabled;
    id _delegate;
    void *_priv;
}

+ (void)CAMLParserStartElement:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)spring;
- (id).cxx_construct;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKeyPath:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (struct Object *)CA_copyRenderValue;
- (void)dealloc;
@property __weak id delegate;
@property(retain) CAValueFunction *function;
@property double restLength;
@property double damping;
@property double stiffness;
@property struct CGPoint attachmentPointB;
@property struct CGPoint attachmentPointA;
@property(retain) CALayer *layerB;
@property(retain) CALayer *layerA;
@property(getter=isEnabled) _Bool enabled;
@property(copy) NSString *name;
- (id)init;

@end

@interface CASpringAnimation : CABasicAnimation
{
}

+ (id)defaultValueForKey:(id)arg1;
@property double velocity;
@property double damping;
@property double stiffness;
@property double mass;
- (double)durationForEpsilon:(double)arg1;
- (double)_timeFunction:(double)arg1;
- (unsigned int)_propertyFlagsForLayer:(id)arg1;
- (struct Animation *)_copyRenderAnimationForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;

@end

@interface CAState : NSObject <NSCoding, NSCopying>
{
    NSString *_name;
    NSString *_basedOn;
    NSMutableArray *_elements;
    double _nextDelay;
    double _previousDelay;
    _Bool _enabled;
    _Bool _locked;
    _Bool _initial;
}

+ (void)CAMLParserStartElement:(id)arg1;
@property(getter=isInitial) _Bool initial; // @synthesize initial=_initial;
@property(nonatomic, getter=isLocked) _Bool locked; // @synthesize locked=_locked;
@property double previousDelay; // @synthesize previousDelay=_previousDelay;
@property double nextDelay; // @synthesize nextDelay=_nextDelay;
@property(getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
@property(copy) NSString *basedOn; // @synthesize basedOn=_basedOn;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (id)debugDescription;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (void)foreachLayer:(CDUnknownBlockType)arg1;
- (void)removeElement:(id)arg1;
- (void)addElement:(id)arg1;
@property(copy, nonatomic) NSArray *elements;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface CAStateElement : NSObject <NSCopying, NSCoding>
{
    CALayer *_target;
    CAStateElement *_source;
}

+ (void)CAMLParserStartElement:(id)arg1;
@property(retain, nonatomic) CAStateElement *source; // @synthesize source=_source;
@property(nonatomic) __weak CALayer *target; // @synthesize target=_target;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)foreachLayer:(CDUnknownBlockType)arg1;
- (id)save;
- (void)apply:(id)arg1;
- (_Bool)matches:(id)arg1;
@property(readonly, copy, nonatomic) NSString *keyPath;
- (id)targetName;
- (void)dealloc;

@end

@interface CAStateAddAnimation : CAStateElement
{
    NSString *_key;
    CAAnimation *_animation;
}

@property(retain, nonatomic) CAAnimation *animation; // @synthesize animation=_animation;
@property(copy, nonatomic) NSString *key; // @synthesize key=_key;
- (id)debugDescription;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)apply:(id)arg1;
- (_Bool)matches:(id)arg1;
- (id)keyPath;

@end

@interface CAStateAddElement : CAStateElement
{
    NSString *_keyPath;
    id _object;
    id _beforeObject;
}

@property(retain, nonatomic) id beforeObject; // @synthesize beforeObject=_beforeObject;
@property(retain, nonatomic) id object; // @synthesize object=_object;
@property(copy, nonatomic) NSString *keyPath; // @synthesize keyPath=_keyPath;
- (id)debugDescription;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)foreachLayer:(CDUnknownBlockType)arg1;
- (void)apply:(id)arg1;
- (_Bool)matches:(id)arg1;

@end

@interface CAStateController : NSObject
{
    struct _CAStateControllerData *_data;
}

- (void)_applyTransitionElement:(id)arg1 layer:(id)arg2 undo:(id)arg3 speed:(float)arg4;
- (void)_removeTransition:(id)arg1 layer:(id)arg2;
- (void)_applyTransition:(id)arg1 layer:(id)arg2 undo:(id)arg3 speed:(float)arg4;
- (void)_addAnimation:(id)arg1 forKey:(id)arg2 target:(id)arg3 undo:(id)arg4;
- (void)_nextStateTimer:(id)arg1;
- (void)cancelTimers;
- (void)restoreStateChanges:(id)arg1;
- (id)removeAllStateChanges;
- (void)setInitialStatesOfLayer:(id)arg1;
- (void)setInitialStatesOfLayer:(id)arg1 transitionSpeed:(float)arg2;
- (void)setState:(id)arg1 ofLayer:(id)arg2;
- (void)setState:(id)arg1 ofLayer:(id)arg2 transitionSpeed:(float)arg3;
- (id)stateOfLayer:(id)arg1;
@property __weak NSObject<CAStateControllerDelegate> *delegate;
@property(readonly) CALayer *layer;
- (void)dealloc;
- (id)initWithLayer:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CAStateControllerAnimation : NSObject
{
    CALayer *_layer;
    NSString *_key;
}

@property(readonly, nonatomic) NSString *key; // @synthesize key=_key;
@property(readonly, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (void)dealloc;
- (id)initWithLayer:(id)arg1 key:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CAStateControllerLayer : NSObject
{
    CALayer *_layer;
    CAState *_currentState;
    CAStateControllerUndo *_undoStack;
    NSMutableArray *_transitions;
    NSTimer *_nextTimer;
    CAState *_nextState;
    float _nextSpeed;
}

@property(readonly) CAStateControllerUndo *undoStack; // @synthesize undoStack=_undoStack;
@property(retain, nonatomic) CAState *currentState; // @synthesize currentState=_currentState;
@property(readonly) CALayer *layer; // @synthesize layer=_layer;
- (void)dealloc;
- (void)invalidate;
- (void)removeTransition:(id)arg1;
- (void)addTransition:(id)arg1;
- (id)initWithLayer:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CAStateControllerTransition : NSObject
{
    CAStateController *_controller;
    CALayer *_layer;
    CAStateTransition *_transition;
    double _beginTime;
    double _duration;
    float _speed;
    NSString *_masterKey;
    NSMutableArray *_animations;
}

@property(readonly, nonatomic) float speed; // @synthesize speed=_speed;
@property(readonly, nonatomic) double duration; // @synthesize duration=_duration;
@property(readonly, nonatomic) double beginTime; // @synthesize beginTime=_beginTime;
@property(readonly, nonatomic) CAStateTransition *transition; // @synthesize transition=_transition;
@property(readonly, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (void)dealloc;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (void)invalidate;
- (void)removeAnimationFromLayer:(id)arg1 forKey:(id)arg2;
- (void)addAnimation:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CAStateControllerUndo : NSObject <CAStateRecorder>
{
    CAStateControllerUndo *_next;
    CAState *_state;
    NSMutableArray *_elements;
    NSMutableArray *_transitions;
}

@property(retain, nonatomic) NSMutableArray *transitions; // @synthesize transitions=_transitions;
@property(retain, nonatomic) NSMutableArray *elements; // @synthesize elements=_elements;
@property(retain, nonatomic) CAState *state; // @synthesize state=_state;
@property(readonly) CAStateControllerUndo *next; // @synthesize next=_next;
- (void)dealloc;
- (void)addTransition:(id)arg1;
- (void)willAddLayer:(id)arg1;
- (void)addElement:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CAStateRemoveAnimation : CAStateElement
{
    NSString *_key;
}

@property(copy, nonatomic) NSString *key; // @synthesize key=_key;
- (id)debugDescription;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)apply:(id)arg1;
- (_Bool)matches:(id)arg1;
- (id)keyPath;

@end

@interface CAStateRemoveElement : CAStateElement
{
    NSString *_keyPath;
    id _object;
}

@property(retain, nonatomic) id object; // @synthesize object=_object;
@property(copy, nonatomic) NSString *keyPath; // @synthesize keyPath=_keyPath;
- (id)debugDescription;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)apply:(id)arg1;
- (_Bool)matches:(id)arg1;

@end

@interface CAStateSetValue : CAStateElement
{
    NSString *_keyPath;
    id _value;
}

@property(copy, nonatomic) NSString *keyPath; // @synthesize keyPath=_keyPath;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)debugDescription;
- (void)dealloc;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)foreachLayer:(CDUnknownBlockType)arg1;
- (void)apply:(id)arg1;
- (_Bool)matches:(id)arg1;
@property(retain, nonatomic) id value;

@end

@interface CAStateTransition : NSObject <NSCopying, NSCoding>
{
    NSString *_fromState;
    NSString *_toState;
    NSArray *_elements;
}

+ (void)CAMLParserStartElement:(id)arg1;
@property(copy, nonatomic) NSArray *elements; // @synthesize elements=_elements;
@property(copy, nonatomic) NSString *toState; // @synthesize toState=_toState;
@property(copy, nonatomic) NSString *fromState; // @synthesize fromState=_fromState;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (double)duration;
- (void)dealloc;
- (id)init;

@end

@interface CAStateTransitionElement : NSObject <NSCopying, NSCoding>
{
    CALayer *_target;
    CAAnimation *_animation;
    NSString *_key;
    _Bool _enabled;
}

+ (void)CAMLParserStartElement:(id)arg1;
@property(getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
@property(copy, nonatomic) NSString *key; // @synthesize key=_key;
@property(retain, nonatomic) CAAnimation *animation; // @synthesize animation=_animation;
@property(nonatomic) __weak CALayer *target; // @synthesize target=_target;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
@property(nonatomic) double duration;
@property(nonatomic) double beginTime;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CASuspendNotification : NSObject
{
}

- (void)willSuspend:(id)arg1;

@end

@interface CATiledLayer : CALayer
{
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (double)fadeDuration;
+ (unsigned int)prefetchedTiles;
+ (_Bool)shouldDrawOnMainThread;
@property struct CGSize tileSize;
@property unsigned long long levelsOfDetailBias;
@property unsigned long long levelsOfDetail;
- (_Bool)_canDisplayConcurrently;
- (void)_display;
- (void)dealloc;
- (void)_dealloc;
- (void)invalidateContents;
- (void)setContents:(id)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (_Bool)shouldArchiveValueForKey:(id)arg1;
- (void)didChangeValueForKey:(id)arg1;
@property(getter=isDrawingEnabled) _Bool drawingEnabled;
@property double maximumTileScale;
@property struct CGColor *fillColor;
- (void)displayInRect:(struct CGRect)arg1 levelOfDetail:(int)arg2 options:(id)arg3;
- (_Bool)canDrawRect:(struct CGRect)arg1 levelOfDetail:(int)arg2;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1 levelOfDetail:(int)arg2;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1 levelOfDetail:(int)arg2 options:(id)arg3;

@end

@interface CATransaction : NSObject
{
}

+ (void)setValue:(id)arg1 forKey:(id)arg2;
+ (id)valueForKey:(id)arg1;
+ (void)setCompletionBlock:(CDUnknownBlockType)arg1;
+ (CDUnknownBlockType)completionBlock;
+ (void)setDisableActions:(_Bool)arg1;
+ (_Bool)disableActions;
+ (void)setAnimationTimingFunction:(id)arg1;
+ (id)animationTimingFunction;
+ (void)setAnimationDuration:(double)arg1;
+ (double)animationDuration;
+ (void)unlock;
+ (void)lock;
+ (void)flush;
+ (void)commit;
+ (void)begin;
+ (void)setInputTime:(double)arg1;
+ (double)inputTime;
+ (void)setCommitTime:(double)arg1;
+ (double)commitTime;
+ (void)setAnimatesFromModelValues:(_Bool)arg1;
+ (_Bool)animatesFromModelValues;
+ (unsigned int)currentState;
+ (void)synchronize;
+ (void)activateBackground:(_Bool)arg1;
+ (void)activate;
+ (CDUnknownBlockType)animator;
+ (void)popAnimator;
+ (void)pushAnimator:(CDUnknownBlockType)arg1;
+ (id)_implicitAnimationForLayer:(id)arg1 keyPath:(id)arg2;

@end

@interface CATransactionCompletionItem : NSObject
{
    void *_priv;
}

+ (id)completionItem;
- (void)dealloc;
- (void)invalidate;
- (id)init;

@end

@interface CATransformLayer : CALayer
{
}

- (id)initWithLayer:(id)arg1;
- (id)init;

@end

@interface CATransition : CAAnimation
{
}

@property(retain) id filter;
@property float endProgress;
@property float startProgress;
@property(copy) NSString *subtype;
@property(copy) NSString *type;
- (unsigned int)_propertyFlagsForLayer:(id)arg1;
- (struct Animation *)_copyRenderAnimationForLayer:(id)arg1;
- (_Bool)_setCARenderAnimation:(struct Animation *)arg1 layer:(id)arg2;
@property unsigned int transitionFlags;
@property(copy) NSDictionary *options;

@end

@interface CAValueFunction : NSObject <NSCoding>
{
    NSString *_string;
    void *_impl;
}

+ (void)CAMLParserEndElement:(id)arg1 content:(id)arg2;
+ (void)CAMLParserStartElement:(id)arg1;
+ (id)functionWithName:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct Object *)CA_copyRenderValue;
- (_Bool)apply:(const double *)arg1 result:(double *)arg2 parameterFunction:(CDUnknownFunctionPointerType)arg3 context:(void *)arg4;
- (_Bool)apply:(const double *)arg1 result:(double *)arg2;
- (unsigned long long)outputCount;
- (unsigned long long)inputCount;
@property(readonly) NSString *name;
- (void)dealloc;
- (id)_initWithName:(int)arg1;

@end

@interface CAWindowServer : NSObject
{
    struct CAWindowServerImpl *_impl;
}

+ (id)serverIfRunning;
+ (id)server;
+ (id)contextWithOptions:(id)arg1;
+ (id)context;
- (unsigned int)contextIdHostingContextId:(unsigned int)arg1;
- (unsigned int)taskPortOfContextId:(unsigned int)arg1;
- (unsigned int)clientPortOfContextId:(unsigned int)arg1;
- (id)description;
- (id)insecureProcessIds;
@property(getter=isSecure) _Bool secure;
@property unsigned int rendererFlags;
@property(getter=isMirroringEnabled) _Bool mirroringEnabled;
@property(readonly) NSArray *displays;
- (void)dealloc;
- (void)_detectDisplays;
- (id)displayWithUniqueId:(id)arg1;
- (id)displayWithDisplayId:(unsigned int)arg1;
- (id)displayWithName:(id)arg1;
- (void)removeAllDisplays;
- (void)removeDisplay:(id)arg1;
- (void)addDisplay:(id)arg1;
- (id)_init;
- (id)init;

@end

@interface CAWindowServerDisplay : NSObject
{
    void *_impl;
}

- (id)description;
@property(getter=isSecure) _Bool secure;
@property(copy) NSString *TVSignalType;
@property(copy) NSString *TVMode;
@property long long tag;
@property(getter=isMirroringEnabled) _Bool mirroringEnabled;
@property _Bool allowsVirtualModes;
@property(copy, nonatomic) NSString *colorMode;
@property _Bool usesPreferredModeRefreshRate;
@property float idealRefreshRate;
@property float maximumRefreshRate;
@property float minimumRefreshRate;
@property float maximumBrightness;
@property float contrast;
@property(getter=isGrayscale) _Bool grayscale;
@property _Bool invertsColors;
@property double overscanAmount;
@property(copy) NSString *orientation;
- (void)willUnblank;
@property(getter=isBlanked) _Bool blanked;
@property(readonly) CAWindowServerDisplay *cloneMaster;
- (void)removeAllClones;
- (void)removeClone:(id)arg1;
- (void)addClone:(id)arg1;
- (void)addClone:(id)arg1 options:(id)arg2;
@property(readonly) NSSet *clones;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 fromContextId:(unsigned int)arg2;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toContextId:(unsigned int)arg2;
- (unsigned int)taskPortOfContextId:(unsigned int)arg1;
- (unsigned int)clientPortOfContextId:(unsigned int)arg1;
- (unsigned int)clientPortAtPosition:(struct CGPoint)arg1;
- (unsigned int)contextIdAtPosition:(struct CGPoint)arg1;
@property(readonly) unsigned int rendererFlags;
@property(readonly) NSString *uniqueId;
@property(readonly) unsigned int displayId;
@property(readonly) NSString *deviceName;
@property(readonly) NSString *name;
@property double scale;
@property(readonly) struct CGRect bounds;
- (void)dealloc;
- (void)update;
- (void)invalidate;
- (id)_initWithCADisplayServer:(struct Server *)arg1;

@end

__attribute__((visibility("hidden")))
@interface LKCGColorCodingProxy : CACodingProxy
{
    struct CGColor *_color;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface LKCGImageCodingProxy : CACodingProxy
{
    struct CGImage *_image;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface LKNSArrayCodingProxy : CACodingProxy
{
    NSArray *_array;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface LKNSDictionaryCodingProxy : CACodingProxy
{
    NSDictionary *_dict;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface LKNSValueCodingProxy : CACodingProxy
{
    int _kind;
    union {
        struct CGPoint point;
        struct CGSize size;
        struct CGRect rect;
        struct CATransform3D transform;
        struct CAPoint3D point3d;
        struct CAColorMatrix color_matrix;
    } _u;
}

- (id).cxx_construct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)decodedObject;
- (id)initWithObject:(id)arg1;

@end

@interface NSAffineTransform (CAAnimatableValue)
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
@end

@interface NSAffineTransform (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSAffineTransform (CARenderValue)
- (struct Object *)CA_copyRenderValue;
@end

@interface NSArray (CAAnimatableValue)
- (id)CA_interpolateValues:(id)arg1:(id)arg2:(id)arg3 interpolator:(const struct ValueInterpolator *)arg4;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
@end

@interface NSArray (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSCoder (CACoderAdditions)
- (_Bool)CA_decodeCGFloatArray:(double *)arg1 count:(unsigned long long)arg2 forKey:(id)arg3;
- (void)CA_encodeCGFloatArray:(const double *)arg1 count:(unsigned long long)arg2 forKey:(id)arg3;
- (id)CA_decodeObjectForKey:(id)arg1;
- (void)CA_encodeObject:(id)arg1 forKey:(id)arg2 conditional:(_Bool)arg3;
@end

@interface NSDictionary (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSDictionary (CARenderValue)
- (struct KeyValueArray *)CA_copyRenderKeyValueArray;
@end

@interface NSNull (CAMLWriter)
- (id)CAMLType;
@end

@interface NSNumber (CAAnimatableValue)
- (double)CA_distanceToValue:(id)arg1;
- (id)CA_roundToIntegerFromValue:(id)arg1;
- (id)CA_interpolateValues:(id)arg1:(id)arg2:(id)arg3 interpolator:(const struct ValueInterpolator *)arg4;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
@end

@interface NSNumber (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSNumber (CARenderValue)
- (struct Object *)CA_copyRenderValue;
@end

@interface NSObject (CAAnimatableValue)
- (double)CA_distanceToValue:(id)arg1;
- (id)CA_interpolateValues:(id)arg1:(id)arg2:(id)arg3 interpolator:(const struct ValueInterpolator *)arg4;
- (id)CA_roundToIntegerFromValue:(id)arg1;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
@end

@interface NSObject (CAMLWriter)
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSObject (CARenderValue)
- (struct Object *)CA_copyRenderValue;
- (void)CA_prepareRenderValue;
@end

@interface NSObject (_CAObjectInternal)
+ (id)CA_CAMLPropertyForKey:(id)arg1;
+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (_Bool)CA_encodesPropertyConditionally:(unsigned int)arg1 type:(int)arg2;
+ (CDUnknownFunctionPointerType)CA_getterForProperty:(const struct _CAPropertyInfo *)arg1;
+ (CDUnknownFunctionPointerType)CA_setterForProperty:(const struct _CAPropertyInfo *)arg1;
@end

@interface NSSet (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSString (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSURL (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSValue (CAAnimatableValue)
- (double)CA_distanceToValue:(id)arg1;
- (id)CA_roundToIntegerFromValue:(id)arg1;
- (id)CA_interpolateValues:(id)arg1:(id)arg2:(id)arg3 interpolator:(const struct ValueInterpolator *)arg4;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
@end

@interface NSValue (CAColorMatrixAdditions)
+ (id)valueWithCAColorMatrix:(struct CAColorMatrix)arg1;
- (struct CAColorMatrix)CAColorMatrixValue;
@end

@interface NSValue (CAMLWriter)
- (void)encodeWithCAMLWriter:(id)arg1;
- (id)CAMLType;
@end

@interface NSValue (CAPoint3DAdditions)
+ (id)valueWithCAPoint3D:(struct CAPoint3D)arg1;
- (struct CAPoint3D)CAPoint3DValue;
@end

@interface NSValue (CARenderValue)
- (struct Object *)CA_copyRenderValue;
@end

@interface NSValue (CATransform3DAdditions)
+ (id)valueWithCATransform3D:(struct CATransform3D)arg1;
@property(readonly) struct CATransform3D CATransform3DValue;
@end

