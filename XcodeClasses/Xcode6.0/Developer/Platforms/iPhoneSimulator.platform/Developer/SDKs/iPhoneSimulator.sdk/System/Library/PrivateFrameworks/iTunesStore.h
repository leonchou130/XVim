//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CC_MD5state_st {
    unsigned int A;
    unsigned int B;
    unsigned int C;
    unsigned int D;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore
// UUID: 29675E59-DE25-3236-9592-75870382E62D
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1241.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ISOperationDelegate <NSObject>

@optional
- (void)operationWillStart:(ISOperation *)arg1;
- (void)operationFinished:(ISOperation *)arg1;
- (void)operation:(ISOperation *)arg1 updatedProgress:(SSOperationProgress *)arg2;
- (void)operation:(ISOperation *)arg1 failedWithError:(NSError *)arg2;
@end

@protocol ISSingleton <NSObject>
+ (void)setSharedInstance:(id)arg1;
+ (id)sharedInstance;
@end

@protocol ISStoreURLOperationDelegate <ISURLOperationDelegate>

@optional
- (_Bool)operation:(ISStoreURLOperation *)arg1 shouldSetStoreFrontID:(NSString *)arg2;
- (void)operation:(ISStoreURLOperation *)arg1 didAuthenticateWithDSID:(NSNumber *)arg2;
@end

@protocol ISURLOperationDelegate <ISOperationDelegate>

@optional
- (NSString *)operation:(ISURLOperation *)arg1 sanitizedStringForString:(NSString *)arg2;
- (_Bool)operation:(ISURLOperation *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)operation:(ISURLOperation *)arg1 willSendRequest:(NSMutableURLRequest *)arg2;
- (_Bool)operation:(ISURLOperation *)arg1 processData:(NSMutableData *)arg2 error:(id *)arg3;
- (NSInputStream *)operation:(ISURLOperation *)arg1 needNewBodyStream:(NSURLRequest *)arg2;
- (void)operation:(ISURLOperation *)arg1 finishedWithOutput:(id)arg2;
- (void)operation:(ISURLOperation *)arg1 didReceiveResponse:(NSURLResponse *)arg2;
- (void)operation:(ISURLOperation *)arg1 didDiscoverContentLength:(NSNumber *)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol SSAuthenticateRequestDelegate <SSRequestDelegate>

@optional
- (void)authenticateRequest:(SSAuthenticateRequest *)arg1 didReceiveResponse:(SSAuthenticateResponse *)arg2;
@end

@protocol SSDownloadQueueObserver <NSObject>
- (void)downloadQueue:(SSDownloadQueue *)arg1 changedWithRemovals:(NSSet *)arg2;

@optional
- (void)downloadQueueNetworkUsageChanged:(SSDownloadQueue *)arg1;
- (void)downloadQueue:(SSDownloadQueue *)arg1 downloadStatusChangedAtIndex:(long long)arg2;
@end

@protocol SSRequestDelegate <NSObject>

@optional
- (void)requestDidFinish:(SSRequest *)arg1;
- (void)request:(SSRequest *)arg1 didFailWithError:(NSError *)arg2;
@end

@protocol SSXPCCoding <NSObject>

@optional
- (NSObject<OS_xpc_object> *)copyXPCEncoding;
- (id)initWithXPCEncoding:(NSObject<OS_xpc_object> *)arg1;
@end

@interface ISAuthenticationChallenge : NSObject
{
    NSString *_localizedMessage;
    NSString *_localizedTitle;
}

@property(retain) NSString *localizedTitle; // @synthesize localizedTitle=_localizedTitle;
@property(retain) NSString *localizedMessage; // @synthesize localizedMessage=_localizedMessage;
@property(readonly) _Bool userNameIsEmail;
@property(readonly) _Bool userNameIsEditable;
- (void)useCredential:(id)arg1;
@property(readonly, retain) NSString *user;
@property(readonly) id <NSURLAuthenticationChallengeSender> sender;
@property(readonly, retain) NSString *password;
@property(readonly) _Bool hasPassword;
@property(readonly) long long failureCount;
- (void)cancelAuthentication;
- (void)dealloc;

@end

@interface ISOperation : NSOperation
{
    id <ISOperationDelegate> _delegate;
    NSError *_error;
    NSLock *_lock;
    NSRunLoop *_operationRunLoop;
    ISOperation *_parentOperation;
    SSOperationProgress *_progress;
    _Bool _shouldMessageMainThread;
    NSString *_powerAssertionIdentifier;
    NSArray *_serializationLockIdentifiers;
    NSMutableArray *_subOperations;
    _Bool _shouldRunWithBackgroundPriority;
    _Bool _stopped;
    _Bool _success;
    id _threadSafeDelegate;
}

@property _Bool success; // @synthesize success=_success;
@property _Bool shouldRunWithBackgroundPriority; // @synthesize shouldRunWithBackgroundPriority=_shouldRunWithBackgroundPriority;
@property(retain) NSString *powerAssertionIdentifier; // @synthesize powerAssertionIdentifier=_powerAssertionIdentifier;
@property(retain) ISOperation *parentOperation; // @synthesize parentOperation=_parentOperation;
@property(retain) NSRunLoop *operationRunLoop; // @synthesize operationRunLoop=_operationRunLoop;
@property(retain) NSError *error; // @synthesize error=_error;
- (void)_sendWillStartToDelegate;
- (void)_sendSuccessToDelegate;
- (void)_sendErrorToDelegate:(id)arg1;
- (void)_removeSubOperation:(id)arg1;
- (void)_main:(_Bool)arg1;
- (void)_keepAliveTimer:(id)arg1;
- (void)_failAfterException;
- (void)_addSubOperation:(id)arg1;
- (void)unlock;
@property(copy) NSArray *serializationLockIdentifiers;
- (void)sendProgressToDelegate;
- (void)sendDidTakeSerializationLocks;
- (void)run:(_Bool)arg1;
- (void)releasePowerAssertionsDuringBlock:(CDUnknownBlockType)arg1;
- (void)lock;
- (void)dispatchCompletionBlock;
- (id)copySerializationLocks;
- (id)copyActivePowerAssertionIdentifiers;
- (void)main;
- (void)cancel;
@property(readonly) NSString *uniqueKey;
@property(readonly) id threadSafeDelegate;
@property _Bool shouldMessageMainThread;
- (_Bool)shouldFailAfterUniquePredecessorError:(id)arg1;
@property id <ISOperationDelegate> delegate;
- (_Bool)stopRunLoop;
- (_Bool)runSubOperation:(id)arg1 onQueue:(id)arg2 error:(id *)arg3;
- (_Bool)runSubOperation:(id)arg1 returningError:(id *)arg2;
- (int)runRunLoopUntilStopped;
- (void)run;
@property(readonly) long long progressWeight;
@property(readonly, nonatomic) SSOperationProgress *progress;
- (void)dealloc;
- (id)init;
- (_Bool)loadURLBagWithContext:(id)arg1 returningError:(id *)arg2;
- (id)loadedURLBagWithContext:(id)arg1 returningError:(id *)arg2;
- (_Bool)loadSoftwareMapReturningError:(id *)arg1;
- (_Bool)copyAccountID:(id *)arg1 byAuthenticatingWithContext:(id)arg2 returningError:(id *)arg3;
- (id)authenticatedAccountDSID;

@end

@interface ISDialogOperation : ISOperation
{
    ISDialog *_dialog;
    _Bool _performDefaultActions;
    ISDialogButton *_selectedButton;
    NSArray *_textFieldValues;
    id _userNotification;
}

+ (id)operationWithError:(id)arg1;
+ (id)operationWithDialog:(id)arg1;
@property(retain) id userNotification; // @synthesize userNotification=_userNotification;
@property(retain) ISDialogButton *selectedButton; // @synthesize selectedButton=_selectedButton;
@property _Bool performDefaultActions; // @synthesize performDefaultActions=_performDefaultActions;
@property(retain) ISDialog *dialog; // @synthesize dialog=_dialog;
- (void)_waitForUserNotificationResponse:(struct __CFUserNotification *)arg1;
- (void)_showUserNotification:(id)arg1;
- (void)_run;
- (void)_handleResponseForNotification:(struct __CFUserNotification *)arg1 responseFlags:(unsigned long long)arg2;
- (void)run;
- (void)cancel;
@property(readonly) NSArray *textFieldValues;
- (void)handleButtonSelected:(long long)arg1 withResponseDictionary:(id)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property id <ISDialogOperationDelegate> delegate; // @dynamic delegate;

@end

@interface ISAuthenticationChallengeOperation : ISDialogOperation
{
    ISAuthenticationChallenge *_challenge;
}

+ (id)operationWithChallenge:(id)arg1;
@property(retain) ISAuthenticationChallenge *challenge; // @synthesize challenge=_challenge;
- (id)_copyCredentialForSignInResponseDictionary:(id)arg1;
- (void)run;
- (void)handleButtonSelected:(long long)arg1 withResponseDictionary:(id)arg2;
- (void)dealloc;

@end

@interface ISClient : NSObject
{
    NSString *_appleClientApplication;
    NSString *_appleClientVersions;
    NSString *_identifier;
    NSLock *_lock;
    NSString *_partnerHeader;
    NSString *_userAgent;
}

+ (id)currentClient;
- (id)_appleClientVersions;
- (void)_softwareMapInvalidatedNotification:(id)arg1;
- (id)localStoreFrontID;
@property(copy) NSString *userAgent;
@property(copy) NSString *partnerHeader;
@property(copy) NSString *identifier;
@property(copy) NSString *appleClientApplication;
@property(readonly) NSString *appleClientVersions;
- (void)dealloc;
- (id)init;

@end

@interface ISCookieStorage : SSVCookieStorage
{
}

@end

@interface ISDataProvider : NSObject <NSCopying>
{
    SSAuthenticationContext *_authenticationContext;
    NSNumber *_authenticatedAccountDSID;
    SSURLBagContext *_bagContext;
    long long _contentLength;
    NSString *_contentType;
    id _output;
    ISOperation *_parentOperation;
    NSURL *_redirectURL;
    long long _errorHandlerResponseType;
}

+ (id)provider;
@property(retain) NSURL *redirectURL; // @synthesize redirectURL=_redirectURL;
@property ISOperation *parentOperation; // @synthesize parentOperation=_parentOperation;
@property(retain) id output; // @synthesize output=_output;
@property long long errorHandlerResponseType; // @synthesize errorHandlerResponseType=_errorHandlerResponseType;
@property(retain) NSString *contentType; // @synthesize contentType=_contentType;
@property long long contentLength; // @synthesize contentLength=_contentLength;
@property(retain) SSURLBagContext *bagContext; // @synthesize bagContext=_bagContext;
@property(retain) NSNumber *authenticatedAccountDSID; // @synthesize authenticatedAccountDSID=_authenticatedAccountDSID;
@property(retain) SSAuthenticationContext *authenticationContext; // @synthesize authenticationContext=_authenticationContext;
- (_Bool)_runServerAuthenticationOperation:(id)arg1 error:(id *)arg2;
- (_Bool)runSubOperation:(id)arg1 error:(id *)arg2;
- (_Bool)runAuthorizationDialog:(id)arg1 error:(id *)arg2;
- (void)setup;
- (_Bool)parseData:(id)arg1 returningError:(id *)arg2;
- (long long)streamedBytes;
- (void)resetStream;
- (void)migrateOutputFromSubProvider:(id)arg1;
- (void)streamDidFailWithError:(id)arg1;
- (void)streamCancelled;
- (_Bool)isStreamComplete;
- (_Bool)isStream;
- (void)configureFromProvider:(id)arg1;
- (id)closeStream;
- (_Bool)canStreamContentLength:(long long)arg1 error:(id *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface ISInvocationRecorder : NSObject
{
    id _target;
}

- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)invokeInvocation:(id)arg1;
- (id)adjustedTargetForSelector:(SEL)arg1;
- (void)dealloc;
- (id)initWithTarget:(id)arg1;

@end

@interface ISDelayedInvocationRecorder : ISInvocationRecorder
{
    double _delayInterval;
}

@property(nonatomic) double delayInterval; // @synthesize delayInterval=_delayInterval;
- (void)invokeInvocation:(id)arg1;

@end

@interface ISDelegateProxy : NSObject
{
    id _delegate;
    NSLock *_lock;
    _Bool _shouldMessageMainThread;
}

- (_Bool)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)setShouldMessageMainThread:(_Bool)arg1;
- (void)sendInvocationToDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISDeleteDaemonModule : NSObject
{
    struct __CFURLStorageSession *_storageSession;
    struct _CFURLCache *_urlCache;
    SSAppPurchaseHistoryCache *_purchaseHistoryCache;
}

- (unsigned long long)purgeableSpace;
- (unsigned long long)purge:(unsigned long long)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISDevice : NSObject <ISSingleton>
{
    unsigned long long _daemonLaunchCount;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    NSString *_guid;
    double _lastFreeSpaceRequest;
}

+ (id)sharedInstance;
+ (void)setSharedInstance:(id)arg1;
- (int)_deviceClass;
- (id)supportedOfferDeviceForDevices:(id)arg1;
- (void)resetLocationAndPrivacy;
- (void)requestFreeSpace:(unsigned long long)arg1 atPath:(id)arg2 withOptions:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (_Bool)takePowerAssertion:(id)arg1;
@property(readonly) NSString *systemName;
@property(readonly) NSString *serialNumber;
- (_Bool)releasePowerAssertion:(id)arg1;
@property(readonly) NSString *hardwareName;
@property(readonly) NSString *guid;
@property(readonly) NSString *deviceName;
- (id)copyProtocolConditionalContext;
- (_Bool)checkCapabilities:(id)arg1 withMismatches:(id *)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISDialog : NSObject <SSXPCCoding>
{
    _Bool _allowsBioAuthorization;
    _Bool _allowDuplicates;
    SSAuthenticationContext *_authenticationContext;
    _Bool _authorizationIsForced;
    NSArray *_buttons;
    long long _defaultButtonIndex;
    NSString *_displayCountKey;
    _Bool _dismissOnHomeButton;
    _Bool _dismissOnLock;
    _Bool _expectsResponse;
    _Bool _groupsTextFields;
    long long _kind;
    NSLock *_lock;
    long long _maxDisplayCount;
    NSString *_message;
    _Bool _oneButtonPerLine;
    _Bool _shouldDismissAfterUnlock;
    _Bool _shouldDisplayAsTopMost;
    _Bool _shouldPendInSetupIfNotAllowed;
    NSArray *_textFields;
    NSString *_title;
    long long _unlockActionButtonIndex;
    NSMutableDictionary *_userInfo;
    struct __CFDictionary *_userNotificationValues;
    _Bool _displaysOnLockscreen;
}

+ (long long)displayCountForKey:(id)arg1;
@property _Bool displaysOnLockscreen; // @synthesize displaysOnLockscreen=_displaysOnLockscreen;
@property long long unlockActionButtonIndex; // @synthesize unlockActionButtonIndex=_unlockActionButtonIndex;
@property(retain) NSString *title; // @synthesize title=_title;
@property(retain) NSArray *textFields; // @synthesize textFields=_textFields;
@property _Bool shouldPendInSetupIfNotAllowed; // @synthesize shouldPendInSetupIfNotAllowed=_shouldPendInSetupIfNotAllowed;
@property _Bool shouldDisplayAsTopMost; // @synthesize shouldDisplayAsTopMost=_shouldDisplayAsTopMost;
@property _Bool shouldDismissAfterUnlock; // @synthesize shouldDismissAfterUnlock=_shouldDismissAfterUnlock;
@property _Bool oneButtonPerLine; // @synthesize oneButtonPerLine=_oneButtonPerLine;
@property(retain) NSString *message; // @synthesize message=_message;
@property long long kind; // @synthesize kind=_kind;
@property _Bool groupsTextFields; // @synthesize groupsTextFields=_groupsTextFields;
@property _Bool expectsResponse; // @synthesize expectsResponse=_expectsResponse;
@property _Bool dismissOnLock; // @synthesize dismissOnLock=_dismissOnLock;
@property _Bool dismissOnHomeButton; // @synthesize dismissOnHomeButton=_dismissOnHomeButton;
@property long long defaultButtonIndex; // @synthesize defaultButtonIndex=_defaultButtonIndex;
@property(retain) NSArray *buttons; // @synthesize buttons=_buttons;
@property _Bool authorizationIsForced; // @synthesize authorizationIsForced=_authorizationIsForced;
@property(copy) SSAuthenticationContext *authenticationContext; // @synthesize authenticationContext=_authenticationContext;
@property _Bool allowDuplicates; // @synthesize allowDuplicates=_allowDuplicates;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (long long)_kindForString:(id)arg1;
@property(readonly) _Bool allowsBioAuthorization;
- (id)valueForUserInfoKey:(id)arg1;
- (void)setValue:(void *)arg1 forCFUserNotificationKey:(struct __CFString *)arg2;
- (void)setValue:(id)arg1 forUserInfoKey:(id)arg2;
@property long long maximumDisplayCount;
@property(copy) NSString *displayCountKey;
- (_Bool)isEqual:(id)arg1;
@property(readonly, getter=isDisplayable) _Bool displayable;
- (void)incrementDisplayCount;
- (void *)copyValueForCFUserNotificationKey:(struct __CFString *)arg1;
- (id)copyUserNotification;
- (void)dealloc;
- (id)initWithTitle:(id)arg1 message:(id)arg2;
- (id)initWithOfferDeviceError:(id)arg1;
- (id)initWithError:(id)arg1;
- (id)initWithDialogDictionary:(id)arg1;
- (id)init;
- (id)initWithAuthenticationChallege:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISDialogButton : NSObject <SSXPCCoding>
{
    int _actionType;
    id _parameter;
    NSString *_title;
    long long _urlType;
    NSString *_subtarget;
    NSDictionary *_dictionary;
}

+ (id)buttonWithTitle:(id)arg1;
@property long long urlType; // @synthesize urlType=_urlType;
@property(retain) NSString *title; // @synthesize title=_title;
@property(copy) NSString *subtarget; // @synthesize subtarget=_subtarget;
@property(retain) id parameter; // @synthesize parameter=_parameter;
@property(retain) NSDictionary *dictionary; // @synthesize dictionary=_dictionary;
@property int actionType; // @synthesize actionType=_actionType;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (long long)_urlTypeForString:(id)arg1;
- (void)_openURLWithRequest:(id)arg1;
- (int)_actionTypeForString:(id)arg1;
- (void)setActionTypeWithString:(id)arg1;
- (void)performDefaultActionForDialog:(id)arg1;
- (void)loadFromDictionary:(id)arg1;
- (_Bool)isEqual:(id)arg1 superficial:(_Bool)arg2;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISDialogTextField : NSObject <SSXPCCoding>
{
    long long _keyboardType;
    _Bool _secure;
    NSString *_title;
    NSString *_value;
}

+ (id)textFieldWithTitle:(id)arg1;
@property(retain) NSString *value; // @synthesize value=_value;
@property(retain) NSString *title; // @synthesize title=_title;
@property(getter=isSecure) _Bool secure; // @synthesize secure=_secure;
@property long long keyboardType; // @synthesize keyboardType=_keyboardType;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISFetchReviewOperation : ISOperation
{
    long long _assetType;
    _Bool _backgroundReview;
    unsigned long long _itemIdentifier;
    unsigned long long _softwareVersionIdentifier;
    ISReview *_review;
    NSURL *_url;
}

@property(retain) NSURL *url; // @synthesize url=_url;
@property unsigned long long softwareVersionIdentifier; // @synthesize softwareVersionIdentifier=_softwareVersionIdentifier;
@property(retain) ISReview *review; // @synthesize review=_review;
@property unsigned long long itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
@property(getter=isBackgroundReview) _Bool backgroundReview; // @synthesize backgroundReview=_backgroundReview;
@property long long assetType; // @synthesize assetType=_assetType;
- (void)_fetchReviewInformation;
- (void)run;
- (void)dealloc;

@end

@interface ISHashError : NSObject <NSCopying>
{
    NSString *_actualHashString;
    NSString *_expectedHashString;
    long long _rangeEnd;
    long long _rangeStart;
}

@property(nonatomic) long long rangeStart; // @synthesize rangeStart=_rangeStart;
@property(nonatomic) long long rangeEnd; // @synthesize rangeEnd=_rangeEnd;
@property(copy, nonatomic) NSString *expectedHashString; // @synthesize expectedHashString=_expectedHashString;
@property(copy, nonatomic) NSString *actualHashString; // @synthesize actualHashString=_actualHashString;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) NSString *hashFailureHeaderString;
- (void)dealloc;

@end

@interface ISHashedDownloadProvider : ISDataProvider <NSCopying>
{
    int _fileDescriptor;
    NSArray *_hashes;
    ISHashError *_lastHashError;
    NSString *_localFilePath;
    struct CC_MD5state_st _md5Context;
    long long _numberOfBytesToHash;
    _Bool _shouldResumeFromLocalBytes;
    long long _totalBytesWritten;
    long long _validatedBytes;
}

@property long long validatedBytes; // @synthesize validatedBytes=_validatedBytes;
@property long long streamedBytes; // @synthesize streamedBytes=_totalBytesWritten;
@property _Bool shouldResumeFromLocalBytes; // @synthesize shouldResumeFromLocalBytes=_shouldResumeFromLocalBytes;
@property long long numberOfBytesToHash; // @synthesize numberOfBytesToHash=_numberOfBytesToHash;
@property(retain) NSString *localFilePath; // @synthesize localFilePath=_localFilePath;
@property(copy) ISHashError *lastHashError; // @synthesize lastHashError=_lastHashError;
@property(retain) NSArray *hashes; // @synthesize hashes=_hashes;
- (_Bool)_writeDataWithoutHashing:(id)arg1 returningError:(id *)arg2;
- (_Bool)_writeDataWithHashing:(id)arg1 returningError:(id *)arg2;
- (long long)_verifiedBytesByInitializingHashForFileSize:(long long)arg1;
- (_Bool)_truncateToSize:(long long)arg1;
- (_Bool)_openFile;
- (void)_closeFile;
- (_Bool)_checkHashForByteCount:(long long)arg1;
- (void)setup;
- (void)resetStream;
- (_Bool)parseData:(id)arg1 returningError:(id *)arg2;
- (_Bool)isStream;
- (id)closeStream;
- (_Bool)canStreamContentLength:(long long)arg1 error:(id *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISITunesSyncHelper : NSObject <ISSingleton>
{
}

+ (id)sharedInstance;
+ (void)setSharedInstance:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISJSONDataProvider : ISDataProvider
{
    unsigned long long _options;
}

@property unsigned long long parserOptions; // @synthesize parserOptions=_options;
- (_Bool)parseData:(id)arg1 returningError:(id *)arg2;

@end

@interface ISLoadSoftwareMapOperation : ISOperation
{
}

- (id)uniqueKey;
- (void)run;

@end

@interface ISLoadURLBagOperation : ISOperation <ISStoreURLOperationDelegate>
{
    SSURLBagContext *_context;
    ISURLBag *_outputBag;
}

@property(readonly) SSURLBagContext *context; // @synthesize context=_context;
- (_Bool)_setURLBagWithDictionary:(id)arg1 response:(id)arg2 error:(id *)arg3;
- (void)_setOutputURLBag:(id)arg1;
- (void)_sendPingsForURLBag:(id)arg1;
- (void)_postBagDidLoadNotificationWithURLBag:(id)arg1;
- (void)_addHeadersToRequestProperties:(id)arg1;
- (void)operation:(id)arg1 willSendRequest:(id)arg2;
- (_Bool)operation:(id)arg1 shouldSetStoreFrontID:(id)arg2;
- (id)uniqueKey;
- (void)run;
@property(readonly) ISURLBag *URLBag;
- (void)dealloc;
- (id)initWithBagContext:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISMainThreadInvocationRecorder : ISInvocationRecorder
{
    _Bool _waitUntilDone;
}

@property(nonatomic) _Bool waitUntilDone; // @synthesize waitUntilDone=_waitUntilDone;
- (void)invokeInvocation:(id)arg1;

@end

@interface ISNetworkObserver : NSObject <SSDownloadQueueObserver>
{
    NSString *_dataStatusIndicator;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    _Bool _isCellularRestricted;
    double _lastNetworkTypeChangeTime;
    long long _networkUsageCount;
    long long _networkType;
    NSObject<OS_dispatch_queue> *_notificationQueue;
    NSMutableSet *_observedDownloadQueues;
    NSString *_operatorName;
    struct __SCNetworkReachability *_reachability;
    NSString *_registrationStatus;
    struct __CTServerConnection *_telephonyServer;
}

+ (void)setWiFiEnabled:(_Bool)arg1;
+ (void)setAirplaneModeEnabled:(_Bool)arg1;
+ (void)set3GEnabled:(_Bool)arg1;
+ (id)sharedInstance;
- (long long)_setNetworkType:(long long)arg1;
- (void)_reloadNetworkTypeWithReachabilityFlags:(unsigned int)arg1;
- (void)_reloadNetworkType;
- (void)_reloadCellularRestriction;
- (void)_postUsageChangedToValue:(_Bool)arg1;
- (void)_postTypeChangedNotificationFromValue:(long long)arg1 toValue:(long long)arg2;
- (_Bool)_ntsIsUsingNetwork;
- (long long)_networkTypeForReachabilityFlags:(unsigned int)arg1;
- (long long)_networkTypeFromDataIndicator:(id)arg1;
- (id)_dataStatusIndicator;
- (long long)_currentNetworkType;
- (void)_handleTelephonyNotificationWithName:(struct __CFString *)arg1 userInfo:(struct __CFDictionary *)arg2;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)downloadQueueNetworkUsageChanged:(id)arg1;
- (void)downloadQueue:(id)arg1 changedWithRemovals:(id)arg2;
@property long long networkType;
- (void)reloadNetworkType;
@property(readonly) NSString *operatorName;
@property(readonly) NSString *modemRegistrationStatus;
@property(readonly, getter=isWiFiEnabled) _Bool wifiEnabled;
- (_Bool)isCellularDataEnabledForBundleIdentifier:(id)arg1;
@property(readonly) NSString *dataStatusIndicator;
@property(readonly) _Bool shouldShowCellularAutomaticDownloadsSwitch;
@property(readonly) double lastNetworkTypeChangeTime;
@property(readonly, getter=isUsingNetwork) _Bool usingNetwork;
- (void)endUsingNetwork;
- (void)endObservingDownloadQueue:(id)arg1;
- (id)copyValueForCarrierBundleKey:(id)arg1;
@property(readonly) NSString *connectionTypeHeader;
- (void)beginUsingNetwork;
- (void)beginObservingDownloadQueue:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISOpenURLOperation : ISOperation
{
    ISOpenURLRequest *_request;
}

- (_Bool)_openURL:(id)arg1;
- (id)_newSortedTargetsArray;
- (void)run;
@property(readonly) ISOpenURLRequest *openURLRequest;
- (void)dealloc;
- (id)initWithOpenURLRequest:(id)arg1;
- (id)init;

@end

@interface ISOpenURLRequest : NSObject <NSCopying>
{
    _Bool _isITunesStoreURL;
    NSString *_targetIdentifier;
    NSString *_urlBagKey;
    NSURL *_url;
    _Bool _interruptsKeybagRefresh;
}

+ (id)openURLRequestWithURL:(id)arg1;
@property(copy, nonatomic) NSString *URLBagKey; // @synthesize URLBagKey=_urlBagKey;
@property(retain, nonatomic) NSURL *URL; // @synthesize URL=_url;
@property(copy, nonatomic) NSString *targetIdentifier; // @synthesize targetIdentifier=_targetIdentifier;
@property(nonatomic, getter=isITunesStoreURL) _Bool ITunesStoreURL; // @synthesize ITunesStoreURL=_isITunesStoreURL;
@property(nonatomic) _Bool interruptsKeybagRefresh; // @synthesize interruptsKeybagRefresh=_interruptsKeybagRefresh;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithURLBagKey:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)init;

@end

@interface ISOperationQueue : NSObject
{
    NSOperationQueue *_queue;
}

+ (id)mainQueue;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setSuspended:(_Bool)arg1;
- (void)setName:(id)arg1;
- (void)setMaxConcurrentOperationCount:(long long)arg1;
@property _Bool adjustsMaxConcurrentOperationCount;
- (id)operations;
- (id)name;
- (long long)maxConcurrentOperationCount;
- (long long)operationCount;
- (void)cancelAllOperations;
- (void)addOperations:(id)arg1 waitUntilFinished:(_Bool)arg2;
- (void)addOperation:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISPersonalizeOffersOperation : ISOperation
{
    ISPersonalizeOffersRequest *_request;
    SSPersonalizeOffersResponse *_response;
}

- (_Bool)_runWithURLDictionary:(id)arg1 error:(id *)arg2;
- (id)_copyResponseForURL:(id)arg1 requestString:(id)arg2 error:(id *)arg3;
- (void)_addDictionaryToResponse:(id)arg1;
- (void)run;
@property(readonly) SSPersonalizeOffersResponse *response;
@property(readonly) ISPersonalizeOffersRequest *personalizeOffersReqeust;
- (void)dealloc;
- (id)initWithPersonalizeOffersRequest:(id)arg1;

@end

@interface ISPersonalizeOffersRequest : NSObject <NSCopying>
{
    NSNumber *_accountIdentifier;
    NSMutableDictionary *_itemIDsByType;
}

@property(retain, nonatomic) NSNumber *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)itemIdentifiersForItemType:(id)arg1;
@property(readonly, nonatomic) NSArray *allItemTypes;
- (void)addItemIdentifier:(id)arg1 forItemType:(id)arg2;
- (void)dealloc;
- (id)initWithItems:(id)arg1;

@end

@interface ISPostReviewOperation : ISOperation <ISStoreURLOperationDelegate>
{
    _Bool _backgroundReview;
    ISReview *_review;
}

@property(retain) ISReview *review; // @synthesize review=_review;
@property(getter=isBackgroundReview) _Bool backgroundReview; // @synthesize backgroundReview=_backgroundReview;
- (id)_httpBody;
- (void)operation:(id)arg1 finishedWithOutput:(id)arg2;
- (void)run;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISProcessPropertyListOperation : ISOperation
{
    ISPropertyListProvider *_dataProvider;
    NSDictionary *_propertyList;
}

@property(retain) ISPropertyListProvider *dataProvider; // @synthesize dataProvider=_dataProvider;
- (void)run;
- (void)dealloc;
- (id)initWithPropertyList:(id)arg1;

@end

@interface ISProtocolDataProvider : ISDataProvider <NSCopying>
{
    _Bool _shouldPostFooterSectionChanged;
    _Bool _shouldProcessAccount;
    _Bool _shouldProcessAuthenticationDialogs;
    _Bool _shouldProcessDialogs;
    _Bool _shouldProcessProtocol;
    _Bool _shouldTriggerDownloads;
}

@property _Bool shouldTriggerDownloads; // @synthesize shouldTriggerDownloads=_shouldTriggerDownloads;
@property _Bool shouldProcessProtocol; // @synthesize shouldProcessProtocol=_shouldProcessProtocol;
@property _Bool shouldProcessDialogs; // @synthesize shouldProcessDialogs=_shouldProcessDialogs;
@property _Bool shouldProcessAuthenticationDialogs; // @synthesize shouldProcessAuthenticationDialogs=_shouldProcessAuthenticationDialogs;
@property _Bool shouldProcessAccount; // @synthesize shouldProcessAccount=_shouldProcessAccount;
@property _Bool shouldPostFooterSectionChanged; // @synthesize shouldPostFooterSectionChanged=_shouldPostFooterSectionChanged;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)_shouldFailWithTokenErrorForDialog:(id)arg1 dictionary:(id)arg2 error:(id *)arg3;
- (void)_selectFooterSection:(id)arg1;
- (_Bool)_processFailureTypeFromDictionary:(id)arg1 error:(id *)arg2;
- (void)_performActionsForResponse:(id)arg1;
- (void)_checkInAppPurchaseQueueForAction:(id)arg1;
- (void)_checkDownloadQueues;
- (void)_presentDialog:(id)arg1;
- (_Bool)parseData:(id)arg1 returningError:(id *)arg2;
- (_Bool)processDictionary:(id)arg1 error:(id *)arg2;
- (_Bool)processDialogFromDictionary:(id)arg1 error:(id *)arg2;
- (id)init;

@end

@interface ISPropertyListProvider : ISProtocolDataProvider <NSCopying>
{
}

- (_Bool)processPropertyList:(id)arg1 returningError:(id *)arg2;
- (_Bool)processDialogFromPropertyList:(id)arg1 returningError:(id *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface ISReview : NSObject <NSCoding, NSCopying>
{
    long long _assetType;
    NSString *_body;
    unsigned long long _bodyMaxLength;
    NSURL *_infoURL;
    unsigned long long _itemIdentifier;
    NSString *_nickname;
    _Bool _nicknameIsConfirmed;
    unsigned long long _nicknameMaxLength;
    float _rating;
    NSURL *_submitURL;
    NSString *_title;
    unsigned long long _titleMaxLength;
}

@property(nonatomic) unsigned long long titleMaxLength; // @synthesize titleMaxLength=_titleMaxLength;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSURL *submitURL; // @synthesize submitURL=_submitURL;
@property(nonatomic) float rating; // @synthesize rating=_rating;
@property(nonatomic) unsigned long long nicknameMaxLength; // @synthesize nicknameMaxLength=_nicknameMaxLength;
@property(nonatomic) _Bool nicknameIsConfirmed; // @synthesize nicknameIsConfirmed=_nicknameIsConfirmed;
@property(retain, nonatomic) NSString *nickname; // @synthesize nickname=_nickname;
@property(nonatomic) unsigned long long itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
@property(retain, nonatomic) NSURL *infoURL; // @synthesize infoURL=_infoURL;
@property(nonatomic) unsigned long long bodyMaxLength; // @synthesize bodyMaxLength=_bodyMaxLength;
@property(retain, nonatomic) NSString *body; // @synthesize body=_body;
@property(nonatomic) long long assetType; // @synthesize assetType=_assetType;
- (id)_draftsDirectoryPath;
- (id)_draftFileName;
- (_Bool)saveAsDraft;
- (_Bool)restoreFromDraft;
- (_Bool)removeDraft;
- (void)mergeWithReview:(id)arg1 preferLocalValues:(_Bool)arg2;
- (void)loadFromDictionary:(id)arg1;
@property(readonly, nonatomic) _Bool hasSavedDraft;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;

@end

@interface ISReviewProvider : ISDataProvider <NSCopying>
{
    _Bool _backgroundReview;
}

@property(getter=isBackgroundReview) _Bool backgroundReview; // @synthesize backgroundReview=_backgroundReview;
- (_Bool)parseData:(id)arg1 returningError:(id *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface ISServerAuthenticationOperation : ISOperation
{
    NSNumber *_authenticatedAccountDSID;
    SSAuthenticationContext *_authenticationContext;
    ISDialog *_dialog;
    _Bool _performsButtonAction;
    ISDialogButton *_performedButton;
    NSURL *_redirectURL;
    ISDialogButton *_selectedButton;
}

@property(retain) ISDialogButton *selectedButton; // @synthesize selectedButton=_selectedButton;
@property(retain) NSURL *redirectURL; // @synthesize redirectURL=_redirectURL;
@property _Bool performsButtonAction; // @synthesize performsButtonAction=_performsButtonAction;
@property(retain) ISDialogButton *performedButton; // @synthesize performedButton=_performedButton;
@property(retain) ISDialog *dialog; // @synthesize dialog=_dialog;
@property(retain) NSNumber *authenticatedAccountDSID; // @synthesize authenticatedAccountDSID=_authenticatedAccountDSID;
@property(retain) SSAuthenticationContext *authenticationContext; // @synthesize authenticationContext=_authenticationContext;
- (void)run;
- (void)dealloc;
- (id)init;

@end

@interface ISSetApplicationBadgeOperation : ISOperation
{
    NSString *_badgeValue;
    NSString *_bundleIdentifier;
}

@property(retain) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(retain) NSString *badgeValue; // @synthesize badgeValue=_badgeValue;
- (id)uniqueKey;
- (void)run;
- (void)dealloc;

@end

@interface ISSoftwareApplication : NSObject <SSXPCCoding>
{
    NSNumber *_accountDSID;
    NSString *_accountIdentifier;
    _Bool _beta;
    NSString *_bundleIdentifier;
    NSString *_bundleShortVersionString;
    NSString *_bundleVersion;
    NSString *_containerPath;
    SSItemContentRating *_contentRating;
    NSString *_deviceIdentifierForVendor;
    NSNumber *_familyAccountIdentifier;
    NSNumber *_itemIdentifier;
    NSString *_itemName;
    _Bool _placeholder;
    _Bool _profileValidated;
    NSString *_softwareType;
    NSNumber *_storeFrontIdentifier;
    NSString *_vendorName;
    NSNumber *_versionIdentifier;
    NSArray *_versionOrdering;
    NSDate *_receiptExpirationDate;
    unsigned long long _vppStateFlags;
}

@property(readonly, nonatomic) NSDate *receiptExpirationDate; // @synthesize receiptExpirationDate=_receiptExpirationDate;
@property(copy, nonatomic) NSArray *versionOrdering; // @synthesize versionOrdering=_versionOrdering;
@property(retain, nonatomic) NSNumber *versionIdentifier; // @synthesize versionIdentifier=_versionIdentifier;
@property(copy, nonatomic) NSString *vendorName; // @synthesize vendorName=_vendorName;
@property(retain, nonatomic) NSNumber *storeFrontIdentifier; // @synthesize storeFrontIdentifier=_storeFrontIdentifier;
@property(copy, nonatomic) NSString *softwareType; // @synthesize softwareType=_softwareType;
@property(nonatomic, getter=isProfileValidated) _Bool profileValidated; // @synthesize profileValidated=_profileValidated;
@property(nonatomic, getter=isPlaceholder) _Bool placeholder; // @synthesize placeholder=_placeholder;
@property(copy, nonatomic) NSString *itemName; // @synthesize itemName=_itemName;
@property(retain, nonatomic) NSNumber *itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
@property(copy, nonatomic) NSNumber *familyAccountIdentifier; // @synthesize familyAccountIdentifier=_familyAccountIdentifier;
@property(copy, nonatomic) NSString *deviceIdentifierForVendor; // @synthesize deviceIdentifierForVendor=_deviceIdentifierForVendor;
@property(copy, nonatomic) SSItemContentRating *contentRating; // @synthesize contentRating=_contentRating;
@property(copy, nonatomic) NSString *containerPath; // @synthesize containerPath=_containerPath;
@property(copy, nonatomic) NSString *bundleVersion; // @synthesize bundleVersion=_bundleVersion;
@property(copy, nonatomic) NSString *bundleShortVersionString; // @synthesize bundleShortVersionString=_bundleShortVersionString;
@property(copy, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(nonatomic, getter=isBeta) _Bool beta; // @synthesize beta=_beta;
@property(copy, nonatomic) NSString *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;
@property(retain, nonatomic) NSNumber *accountDSID; // @synthesize accountDSID=_accountDSID;
- (void)_loadMetadataFromContainer:(id)arg1;
- (id)initWithXPCEncoding:(id)arg1;
- (id)copyXPCEncoding;
- (id)ITunesMetadataDictionary;
@property(readonly, nonatomic) unsigned long long vppStateFlags;
- (void)resetVPPStateFlags;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithLaunchServicesApplication:(id)arg1 containerPath:(id)arg2;
- (id)initWithLaunchServicesApplication:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISSoftwareCapabilitiesDialogOperation : ISOperation
{
    NSDictionary *_mismatches;
    id _requiredCapabilities;
}

- (void)_postDefaultDialog;
- (void)run;
@property(readonly) id requiredCapabilities;
@property(readonly) NSDictionary *mismatches;
- (void)dealloc;
- (id)initWithRequiredCapabilities:(id)arg1 mismatches:(id)arg2;

@end

@interface ISSoftwareMap : NSObject
{
    NSArray *_applications;
}

+ (void)_startWatchingInstallationNotifications;
+ (id)_newSoftwareUpdateDictionaryForApplication:(id)arg1;
+ (void)startObservingNotifications;
+ (void)enumerateApplicationsForProxies:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (id)copySoftwareUpdatesPropertyListWithApplications:(id)arg1 updatesContext:(id)arg2;
+ (id)containerPathForApp:(id)arg1 homeDirectory:(id)arg2 systemMetadataDirectory:(id)arg3;
+ (id)applicationForBundleIdentifier:(id)arg1 applicationType:(id)arg2;
+ (id)applicationForBundleIdentifier:(id)arg1;
+ (void)setCurrentMap:(id)arg1;
+ (id)loadedMap;
+ (void)invalidateCurrentMap;
+ (_Bool)currentMapIsValid;
+ (id)currentMap;
+ (_Bool)haveApplicationsOfType:(id)arg1;
- (void)_loadFromMobileInstallation;
- (id)copySoftwareUpdatesPropertyListWithUpdatesContext:(id)arg1;
- (id)copySoftwareUpdatesPropertyList;
@property(readonly, nonatomic) NSArray *applications;
- (id)applicationForItemIdentifier:(id)arg1;
- (id)applicationForBundleIdentifier:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISStoreAuthenticateOperation : ISOperation <SSAuthenticateRequestDelegate>
{
    NSNumber *_authenticatedDSID;
    SSMutableAuthenticationContext *_authenticationContext;
}

- (void)_setAuthenticatedDSID:(id)arg1;
- (void)_handleAuthenticateResponse:(id)arg1;
- (id)_authenticatedDSID;
- (id)uniqueKey;
- (void)run;
- (id)authenticatedAccountDSID;
@property(readonly) SSAuthenticationContext *authenticationContext;
- (void)dealloc;
- (id)initWithAuthenticationContext:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISStoreAuthenticationChallenge : ISAuthenticationChallenge
{
    long long _failureCount;
    _Bool _hasPassword;
    NSString *_password;
    id <NSURLAuthenticationChallengeSender> _sender;
    NSString *_user;
    _Bool _userNameIsEditable;
}

@property _Bool userNameIsEditable; // @synthesize userNameIsEditable=_userNameIsEditable;
@property(retain) NSString *user; // @synthesize user=_user;
@property id <NSURLAuthenticationChallengeSender> sender; // @synthesize sender=_sender;
@property(retain) NSString *password; // @synthesize password=_password;
@property _Bool hasPassword; // @synthesize hasPassword=_hasPassword;
@property long long failureCount; // @synthesize failureCount=_failureCount;
- (_Bool)userNameIsEmail;
- (void)dealloc;
- (id)init;

@end

@interface ISStoreServicesRequestOperation : ISOperation
{
    SSRequest *_request;
}

- (void)run;
- (void)cancel;
@property(readonly) SSRequest *request;
- (void)dealloc;
- (id)initWithRequest:(id)arg1;

@end

@interface ISURLOperation : ISOperation
{
    NSURLRequest *_activeURLRequest;
    SSAuthenticationContext *_authenticationContext;
    NSURLConnection *_connection;
    NSMutableData *_dataBuffer;
    ISDataProvider *_dataProvider;
    long long _networkRetryCount;
    NSCountedSet *_redirectURLs;
    SSMutableURLRequestProperties *_requestProperties;
    NSURLResponse *_response;
    _Bool _shouldSetCookies;
    _Bool _usesPrivateCookieStore;
    ISURLRequestPerformance *_performanceMetrics;
    _Bool _loadsHTTPFailures;
    _Bool _uploadProgressRequested;
}

+ (_Bool)isSharedCacheStorageSession:(struct __CFURLStorageSession *)arg1;
+ (struct __CFURLStorageSession *)newSharedCacheStorageSession;
+ (struct _CFURLCache *)sharedCFURLCache;
+ (id)copyUserAgent;
@property(nonatomic, getter=isUploadProgressRequested) _Bool uploadProgressRequested; // @synthesize uploadProgressRequested=_uploadProgressRequested;
@property(getter=_usesPrivateCookieStore, setter=_setUsesPrivateCookieStore:) _Bool _usesPrivateCookieStore; // @synthesize _usesPrivateCookieStore;
@property(getter=_shouldSetCookies, setter=_setShouldSetCookies:) _Bool _shouldSetCookies; // @synthesize _shouldSetCookies;
@property(retain) NSURLResponse *response; // @synthesize response=_response;
@property(getter=_loadsHTTPFailures, setter=_setLoadsHTTPFailures:) _Bool _loadsHTTPFailures; // @synthesize _loadsHTTPFailures;
@property(retain) ISDataProvider *dataProvider; // @synthesize dataProvider=_dataProvider;
@property(retain) SSAuthenticationContext *authenticationContext; // @synthesize authenticationContext=_authenticationContext;
- (_Bool)_validateContentLength:(long long)arg1 error:(id *)arg2;
- (void)_updateProgress;
- (void)_stopIfCancelled;
- (void)_stopConnection;
- (_Bool)_shouldFollowRedirectWithRequest:(id)arg1 error:(id *)arg2;
- (void)_setActiveURLRequest:(id)arg1;
- (void)_sendResponseToDelegate:(id)arg1;
- (void)_sendRequestToDelegate:(id)arg1;
- (void)_sendOutputToDelegate:(id)arg1;
- (void)_sendContentLengthToDelegate:(long long)arg1;
- (_Bool)_runRequestWithURL:(id)arg1 dataConnectionServiceType:(struct __CFString *)arg2;
- (void)_run;
- (void)_retry;
- (void)_performDefaultHandlingForAuthenticationChallenge:(id)arg1;
- (void)_logResponseBody:(id)arg1;
- (void)_logRequest:(id)arg1;
- (_Bool)_isTrustExtendedValidation:(struct __SecTrust *)arg1;
- (id)_errorWithDomain:(id)arg1 code:(long long)arg2;
- (id)_errorWithDefaultStringsForError:(id)arg1;
- (id)_decodedDataForData:(id)arg1;
- (id)_copyQueryStringDictionaryForRedirect:(id)arg1;
- (id)_copyConnectionPropertiesWithDataConnectionServiceType:(struct __CFString *)arg1;
- (id)_copyAcceptLanguageString;
- (id)_activeURL;
- (id)_handleRedirectRequest:(id)arg1 response:(id)arg2;
- (void)_handleReceivedResponse:(id)arg1;
- (void)_handleReceivedData:(id)arg1;
- (void)_handleFinishedLoading;
- (id)_sanitizedURLForURL:(id)arg1;
- (id)_sanitizedStringForString:(id)arg1;
- (id)_sanitizedDescriptionForObject:(id)arg1;
- (id)_requestProperties;
- (id)_copyAuthenticationContext;
- (id)_accountIdentifier;
@property _Bool tracksPerformanceMetrics;
@property(readonly) ISURLRequestPerformance *performanceMetrics;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (id)connection:(id)arg1 needNewBodyStream:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (_Bool)shouldFollowRedirectWithRequest:(id)arg1 returningError:(id *)arg2;
- (id)newRequestWithURL:(id)arg1;
- (void)handleResponse:(id)arg1;
- (_Bool)handleRedirectFromDataProvider:(id)arg1 error:(id *)arg2;
- (void)run;
@property(copy) SSURLRequestProperties *requestProperties;
- (void)setRequest:(id)arg1;
- (id)request;
- (void)dealloc;
- (id)init;

// Remaining properties
@property id <ISURLOperationDelegate> delegate; // @dynamic delegate;

@end

@interface ISStoreURLOperation : ISURLOperation
{
    NSNumber *_authenticatedDSID;
    _Bool _canSendGUIDParameter;
    _Bool _ignorePreexistingSecureToken;
    _Bool _needsAuthentication;
    _Bool _needsURLBag;
    _Bool _performsMachineDataActions;
    _Bool _shouldSendXTokenHeader;
    _Bool _urlKnownToBeTrusted;
    _Bool _useUserSpecificURLBag;
}

+ (id)_restrictionsHeaderValue;
+ (void)_addITunesStoreHeadersToRequest:(id)arg1 withURLBag:(id)arg2 account:(id)arg3;
+ (void)_addITunesStoreHeadersToRequest:(id)arg1 withURLBag:(id)arg2 accountIdentifier:(id)arg3;
+ (id)propertyListOperationWithURLBagKey:(id)arg1;
+ (id)pingOperationWithUrl:(id)arg1;
+ (id)itemPingOperationWithIdentifier:(unsigned long long)arg1 urlBagKey:(id)arg2;
+ (void)handleITunesStoreResponseHeaders:(id)arg1 withAccountIdentifier:(id)arg2;
+ (void)addITunesStoreHeadersToRequest:(id)arg1 withAccountIdentifier:(id)arg2;
@property _Bool useUserSpecificURLBag; // @synthesize useUserSpecificURLBag=_useUserSpecificURLBag;
@property _Bool urlKnownToBeTrusted; // @synthesize urlKnownToBeTrusted=_urlKnownToBeTrusted;
@property _Bool needsURLBag; // @synthesize needsURLBag=_needsURLBag;
@property _Bool needsAuthentication; // @synthesize needsAuthentication=_needsAuthentication;
@property(retain) NSNumber *authenticatedDSID; // @synthesize authenticatedDSID=_authenticatedDSID;
- (id)_urlBagForContext:(id)arg1;
- (void)_runURLOperation;
- (id)_resolvedURLInBagContext:(id)arg1 URLBag:(id *)arg2;
- (_Bool)_isErrorTokenError:(id)arg1;
- (id)_copyURLBagContext;
- (id)_copyAuthenticationContextForAttemptNumber:(long long)arg1;
- (_Bool)_canSendTokenToURL:(id)arg1;
- (_Bool)_authenticateWithContext:(id)arg1 error:(id *)arg2;
- (void)_addStandardQueryParametersForURL:(id)arg1;
- (id)_account;
- (void)_setStoreFrontIdentifier:(id)arg1 isTransient:(_Bool)arg2;
- (_Bool)shouldFollowRedirectWithRequest:(id)arg1 returningError:(id *)arg2;
- (void)run;
- (id)newRequestWithURL:(id)arg1;
- (void)handleResponse:(id)arg1;
- (_Bool)handleRedirectFromDataProvider:(id)arg1 error:(id *)arg2;
- (id)_copyAuthenticationContext;
- (id)authenticatedAccountDSID;
@property _Bool shouldSendXTokenHeader;
@property _Bool performsMachineDataActions;
@property(nonatomic) _Bool ignorePreexistingSecureToken;
@property _Bool canSendGUIDParameter;
- (void)dealloc;
- (id)init;

// Remaining properties
@property id <ISStoreURLOperationDelegate> delegate; // @dynamic delegate;

@end

@interface ISStoreVersion : NSObject
{
    NSURL *_redirectURL;
}

@property(retain, nonatomic) NSURL *redirectURL; // @synthesize redirectURL=_redirectURL;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1;

@end

@interface ISURLAuthenticationChallenge : ISAuthenticationChallenge
{
    NSURLAuthenticationChallenge *_challenge;
}

- (void)useCredential:(id)arg1;
- (id)user;
- (id)sender;
- (id)password;
- (_Bool)hasPassword;
- (long long)failureCount;
- (void)cancelAuthentication;
- (void)dealloc;
- (id)initWithAuthenticationChallenge:(id)arg1;

@end

@interface ISURLBag : NSObject
{
    SSURLBagContext *_context;
    SSNetworkConstraints *_defaultConstraints;
    NSDictionary *_dictionary;
    NSArray *_guidPatterns;
    NSSet *_guidSchemes;
    NSDictionary *_headerPatterns;
    double _invalidationTime;
    _Bool _loadedFromDiskCache;
    NSString *_storeFrontIdentifier;
}

+ (_Bool)_allowUnsignedBags;
+ (id)valueForKey:(id)arg1 inBagContext:(id)arg2;
+ (_Bool)urlIsTrusted:(id)arg1 inBagContext:(id)arg2;
+ (id)urlForKey:(id)arg1 inBagContext:(id)arg2;
+ (id)urlBagForContext:(id)arg1;
+ (_Bool)shouldSendGUIDForURL:(id)arg1 inBagContext:(id)arg2;
+ (id)networkConstraintsForDownloadKind:(id)arg1 inBagContext:(id)arg2;
+ (id)copyExtraHeadersForURL:(id)arg1 inBagContext:(id)arg2;
+ (id)storeFrontURLBagKeyForItemKind:(id)arg1;
+ (void)_loadItemKindURLBagKeyMap;
@property(copy, nonatomic) NSString *storeFrontIdentifier; // @synthesize storeFrontIdentifier=_storeFrontIdentifier;
@property(nonatomic) _Bool loadedFromDiskCache; // @synthesize loadedFromDiskCache=_loadedFromDiskCache;
@property(nonatomic) double invalidationTime; // @synthesize invalidationTime=_invalidationTime;
- (void)_writeURLResolutionCacheFile;
- (void)_writeNetworkConstraintsCacheFile;
- (void)_setDictionary:(id)arg1;
- (id)_networkConstraintsCachePath;
- (id)_copyHeaderPatternsFromDictionary:(id)arg1;
- (id)_copyGUIDSchemesFromDictionary:(id)arg1;
- (id)_copyGUIDPatternsFromDictionary:(id)arg1;
- (_Bool)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
@property(readonly, nonatomic) long long versionIdentifier;
@property(readonly, nonatomic) NSDictionary *URLBagDictionary;
@property(copy, nonatomic) SSURLBagContext *URLBagContext;
- (id)sanitizedURLForURL:(id)arg1;
- (id)valueForKey:(id)arg1;
- (id)URLForURL:(id)arg1 clientIdentifier:(id)arg2;
- (_Bool)urlIsTrusted:(id)arg1;
- (id)urlForKey:(id)arg1;
- (_Bool)shouldSendGUIDForURL:(id)arg1;
- (void)setInvalidationTimeWithExprationInterval:(double)arg1;
- (id)searchQueryParametersForClientIdentifier:(id)arg1 networkType:(long long)arg2;
- (id)networkConstraintsForDownloadKind:(id)arg1;
@property(readonly, nonatomic, getter=isValid) _Bool valid;
@property(readonly) NSSet *availableStorefrontItemKinds;
- (_Bool)loadFromDictionary:(id)arg1 returningError:(id *)arg2;
- (id)copyExtraHeadersForURL:(id)arg1;
- (void)dealloc;
- (id)initWithURLBagContext:(id)arg1;
- (id)initWithRawDictionary:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)init;

@end

@interface ISURLBagCache : NSObject
{
    NSMutableDictionary *_cachedBags;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
}

+ (id)URLWithBagContext:(id)arg1;
+ (id)sharedCache;
- (id)_URLBagForContext:(id)arg1 withOptions:(long long)arg2;
- (id)_storeFrontIdentifierForResponse:(id)arg1;
- (_Bool)_shouldFallbackForContext:(id)arg1 options:(long long)arg2;
- (id)_newRequestWithURLBagContext:(id)arg1;
- (id)_fallbackContextWithContext:(id)arg1;
- (id)_cachedResponseForRequest:(id)arg1;
- (void)_storeFrontChangedNotification:(id)arg1;
- (id)URLBagForContext:(id)arg1 withOptions:(long long)arg2;
- (id)URLBagForContext:(id)arg1;
- (void)invalidateURLBagForContext:(id)arg1;
- (void)invalidateAllURLBags;
- (void)addURLBag:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISURLCache : NSObject
{
    NSURLCache *_cache;
    ISURLCacheConfiguration *_configuration;
}

+ (id)cacheDirectoryPath;
- (void)storeCachedResponse:(id)arg1 forRequest:(id)arg2;
- (void)saveMemoryCacheToDisk;
- (void)removeCachedResponseForRequest:(id)arg1;
- (void)removeAllCachedResponses;
- (void)purgeMemoryCache;
@property(readonly, nonatomic) unsigned long long memoryCapacity;
@property(readonly, nonatomic) unsigned long long diskCapacity;
@property(readonly, nonatomic) unsigned long long currentMemoryUsage;
@property(readonly, nonatomic) unsigned long long currentDiskUsage;
- (id)cachedResponseForRequest:(id)arg1;
- (void)reloadWithCacheConfiguration:(id)arg1;
@property(readonly) NSString *persistentIdentifier;
- (void)dealloc;
- (id)initWithCacheConfiguration:(id)arg1;
- (id)init;

@end

@interface ISURLCacheConfiguration : NSObject <NSCopying>
{
    unsigned long long _diskCapacity;
    unsigned long long _memoryCapacity;
    NSString *_persistentIdentifier;
}

@property(copy, nonatomic) NSString *persistentIdentifier; // @synthesize persistentIdentifier=_persistentIdentifier;
@property(nonatomic) unsigned long long memoryCapacity; // @synthesize memoryCapacity=_memoryCapacity;
@property(nonatomic) unsigned long long diskCapacity; // @synthesize diskCapacity=_diskCapacity;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface ISURLOperationPool : NSObject
{
    ISOperationQueue *_operationQueue;
}

@property(retain, nonatomic) ISOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
- (id)_poolOperationForOperation:(id)arg1 flags:(long long)arg2;
- (void)cancelOperation:(id)arg1;
- (void)addOperation:(id)arg1 withFlags:(long long)arg2;
- (void)dealloc;
- (id)init;

@end

@interface ISURLOperationPoolOperation : ISOperation
{
    long long _cancelCount;
    _Bool _forwardImmediately;
    NSMutableArray *_operations;
}

- (void)_forwardResponseFromOperation:(id)arg1 toOperation:(id)arg2;
- (void)run;
@property(readonly, nonatomic) ISURLOperation *mainOperation;
- (_Bool)containsOperation:(id)arg1;
- (void)cancelOperation:(id)arg1;
- (void)addOperation:(id)arg1;
- (void)dealloc;

@end

@interface ISURLRequest : NSObject <NSCoding, NSCopying>
{
    NSLock *_lock;
    SSMutableURLRequestProperties *_properties;
}

+ (id)requestWithURL:(id)arg1;
- (id)requestProperties;
@property(retain) NSArray *URLs;
@property long long URLBagType;
@property double timeoutInterval;
- (void)setValue:(id)arg1 forQueryStringParameter:(id)arg2;
- (void)setValue:(id)arg1 forHeaderField:(id)arg2;
@property(retain) NSDictionary *queryStringDictionary;
@property(retain) NSString *HTTPMethod;
@property(retain) NSInputStream *HTTPBodyStream;
@property(retain) NSData *HTTPBody;
@property long long expectedContentLength;
@property(retain) NSDictionary *customHeaders;
@property unsigned long long cachePolicy;
@property(retain) NSString *appleClientApplication;
@property long long allowedRetryCount;
@property(readonly) NSURL *primaryURL;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithURL:(id)arg1;
- (id)initWithURLRequest:(id)arg1;
- (id)initWithRequestProperties:(id)arg1;
- (id)init;
- (id)_initCommon;

@end

@interface ISURLRequestPerformance : NSObject
{
    double _finishTime;
    double _receivedResponseTime;
    double _renderBeginTime;
    double _renderEndTime;
    double _startTime;
    NSURLResponse *_urlResponse;
}

@property(copy, nonatomic) NSURLResponse *URLResponse; // @synthesize URLResponse=_urlResponse;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
- (void)setRenderFinishTime:(double)arg1;
- (void)setRenderBeginTime:(double)arg1;
- (void)setReceivedResponseTime:(double)arg1;
- (void)setFinishTime:(double)arg1;
@property(readonly, nonatomic) double renderEndInterval;
@property(readonly, nonatomic) double renderBeginInterval;
@property(readonly, nonatomic) double receivedResponseInterval;
@property(readonly, nonatomic) double finishInterval;
- (void)dealloc;

@end

@interface ISUniqueOperationContext : NSObject
{
    NSMutableSet *_operations;
    NSMutableDictionary *_uniqueOperations;
}

- (id)uniqueOperationForKey:(id)arg1;
- (void)setUniqueOperation:(id)arg1 forKey:(id)arg2;
- (void)removeOperation:(id)arg1;
- (unsigned long long)countOfOperations;
- (_Bool)containsOperation:(id)arg1;
- (void)addOperation:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ISUniqueOperationManager : NSObject <ISSingleton>
{
    ISUniqueOperationContext *_activeContext;
    NSMutableArray *_contexts;
    NSLock *_lock;
    NSMutableDictionary *_lockPool;
}

+ (id)sharedInstance;
+ (void)setSharedInstance:(id)arg1;
- (id)_contextForOperation:(id)arg1;
- (id)_activeContext;
- (void)uniqueOperationFinished:(id)arg1 forKey:(id)arg2;
- (void)setPredecessorIfNeeded:(id)arg1 forKey:(id)arg2;
- (id)predecessorForKey:(id)arg1 operation:(id)arg2;
- (id)lockWithIdentifier:(id)arg1;
- (void)checkOutOperation:(id)arg1;
- (void)checkInOperation:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ISUserNotification : NSObject
{
    long long _allowedRetryCount;
    long long _currentRetryCount;
    NSDictionary *_dictionary;
    unsigned long long _optionFlags;
    NSDictionary *_userInfo;
}

@property(retain) NSDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property long long currentRetryCount; // @synthesize currentRetryCount=_currentRetryCount;
@property long long allowedRetryCount; // @synthesize allowedRetryCount=_allowedRetryCount;
@property(readonly) unsigned long long optionFlags;
@property(readonly) NSDictionary *dictionary;
- (struct __CFUserNotification *)copyUserNotification;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 options:(unsigned long long)arg2;
- (id)init;

@end

@interface NSBundle (ISAdditions)
+ (id)pathForITunesStoreResource:(id)arg1 ofType:(id)arg2;
@end

@interface NSError (ISAdditions)
- (_Bool)isFatalError;
- (_Bool)isEqual:(id)arg1 compareUserInfo:(_Bool)arg2;
- (id)errorBySettingFatalError:(_Bool)arg1;
@end

@interface NSFileManager (ISAdditions)
+ (_Bool)_storeMovePath:(id)arg1 toPath:(id)arg2;
+ (_Bool)ensureDirectoryExists:(id)arg1;
+ (id)cacheDirectoryPathWithName:(id)arg1;
@end

@interface NSHTTPURLResponse (ISAdditions)
- (long long)maxExpectedContentLength;
- (id)_iTunesStore_valueForHTTPHeader:(id)arg1;
- (double)expirationInterval;
- (id)expirationDate;
- (id)_dateFromExpires;
- (_Bool)_getCacheControlMaxAge:(double *)arg1;
@end

@interface NSObject (ISInvocationAdditions)
- (id)mainThreadProxy;
- (id)delayedProxy:(double)arg1;
- (id)blockingMainThreadProxy;
@end

@interface NSString (ISAdditions)
- (id)copyUTF8StringOfLength:(unsigned long long)arg1;
@end

@interface NSURL (ISAdditions)
+ (id)unescapedStringForString:(id)arg1;
+ (id)queryStringForDictionary:(id)arg1 escapedValues:(_Bool)arg2;
+ (id)escapedStringForString:(id)arg1;
+ (id)copyDictionaryForQueryString:(id)arg1 unescapedValues:(_Bool)arg2;
- (void)enumerateQueryWithBlock:(CDUnknownBlockType)arg1;
- (id)urlByReplacingSchemeWithScheme:(id)arg1;
- (id)schemeSwizzledURL;
- (_Bool)isSafeExternalURL;
- (id)urlBySettingQueryStringDictionary:(id)arg1;
- (id)URLByAppendingQueryParameter:(id)arg1 value:(id)arg2;
- (id)copyQueryStringDictionaryWithUnescapedValues:(_Bool)arg1;
@end

@interface NSURL (ISURLBagAdditions)
- (id)sanitizedURL;
@end

@interface NSURLResponse (ISAdditions)
- (id)allHeaderFields;
- (int)statusCode;
- (long long)maxExpectedContentLength;
@end

@interface OpenURLTarget : NSObject
{
    unsigned int _applicationState;
    struct {
        NSString *clientIdentifier;
        NSString *normalScheme;
        NSString *secureScheme;
    } _targetData;
    long long _targetIndex;
}

- (id)description;
- (id)copyURLForURL:(id)arg1;
- (long long)compare:(id)arg1;
- (id)initWithTargetIdentifier:(id)arg1;
- (id)init;

@end

