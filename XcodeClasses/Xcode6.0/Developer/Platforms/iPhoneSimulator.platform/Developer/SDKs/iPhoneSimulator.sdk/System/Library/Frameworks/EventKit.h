//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CPRecordStore;

struct CalDatabase {
    struct __CFRuntimeBase {
        unsigned long long _field1;
        unsigned char _field2[4];
        unsigned int _field3;
    } _field1;
    int _field2;
    struct CPRecordStore *_field3;
    struct CalEventOccurrenceCache *_field4;
    struct CalScheduledTaskCache *_field5;
    struct __CFDictionary *_field6;
    struct __CFDictionary *_field7;
    struct _opaque_pthread_mutex_t _field8;
    unsigned int _field9;
    unsigned int _field10;
    struct __CFArray *_field11;
    struct __CFString *_field12;
    struct __CFArray *_field13;
    int _field14;
    int _field15;
    struct __CFString *_field16;
    struct __CFString *_field17;
    int _field18;
    CDUnknownBlockType _field19;
    struct _opaque_pthread_mutex_t _field20;
};

struct CalEventIdsSearchContext {
    struct __CFArray *_field1;
    struct __CFSet *_field2;
    struct __CFSet *_field3;
    _Bool *_field4;
    _Bool *_field5;
    struct CalDatabase *_field6;
};

struct CalEventOccurrenceCache;

struct CalEventOccurrenceSearchContext {
    struct __CFSet *_field1;
    struct __CFArray *_field2;
    struct __CFArray *_field3;
    struct __CFArray *_field4;
    _Bool *_field5;
    _Bool *_field6;
    double _field7;
    double _field8;
    int _field9;
    double _field10;
    unsigned int _field11;
    struct CalEventOccurrenceCache *_field12;
    CDUnknownFunctionPointerType _field13;
    void *_field14;
    int _field15;
    _Bool _field16;
    struct __CFString *_field17;
    double _field18;
    _Bool _field19;
    double _field20;
};

struct CalEventSpotlightContext {
    _Bool _field1;
    _Bool _field2;
    struct __CFSet *_field3;
    struct __CFSet *_field4;
    struct __CFSet *_field5;
    struct __CFArray *_field6;
    _Bool *_field7;
    _Bool *_field8;
    struct CalDatabase *_field9;
    CDUnknownFunctionPointerType _field10;
    void *_field11;
    int _field12;
    int _field13;
    int _field14;
    struct __CFDictionary *_field15;
    double _field16;
    double _field17;
    double _field18;
    struct CalSpotlightMatchedEventContext _field19;
};

struct CalLocationIdsSearchContext {
    struct __CFArray *_field1;
    unsigned int _field2;
    _Bool *_field3;
    _Bool *_field4;
    struct CalDatabase *_field5;
};

struct CalParticipantIdsSearchContext {
    struct __CFArray *_field1;
    unsigned int _field2;
    _Bool *_field3;
    _Bool *_field4;
    struct CalDatabase *_field5;
};

struct CalScheduledTaskCache;

struct CalSpotlightMatchedEventContext {
    int _field1;
    char *_field2;
    char *_field3;
    char *_field4;
    double _field5;
    double _field6;
    int _field7;
    int _field8;
    char *_field9;
    char *_field10;
    char *_field11;
    int _field12;
    struct __CFArray *_field13;
    int _field14;
};

struct __CFArray;

struct __CFDictionary;

struct __CFSet;

struct __CFString;

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int maxAlarmsAllowed:1;
    unsigned int maxRecurrencesAllowed:1;
    unsigned int supportsAlarmTriggerIntervals:1;
    unsigned int supportsAlarmTriggerDates:1;
    unsigned int supportsAlarmsTriggeringAfterStartDate:1;
    unsigned int snoozeAlarmRequiresDetach:1;
    unsigned int organizerCanSeeAttendeeStatuses:1;
    unsigned int inviteesCanSeeAttendeeStatuses:1;
    unsigned int statusesAreAccurate:1;
    unsigned int supportsIncomingInvitations:1;
    unsigned int supportsOutgoingInvitations:1;
    unsigned int requiresOutgoingInvitationsInDefaultCalendar:1;
    unsigned int supportsInvitationModifications:1;
    unsigned int supportsResponseComments:1;
    unsigned int deliverySourceOrExternalIDRequiredForResponse:1;
    unsigned int proposedStatusRequiredForResponse:1;
    unsigned int declinedStatusChangeRequiresNoPendingStatus:1;
    unsigned int eventDurationConstrainedToRecurrenceInterval:1;
    unsigned int alarmTriggerIntervalConstrainedToRecurrenceInterval:1;
    unsigned int occurrencesMustOccurOnSeparateDays:1;
    unsigned int futureStartDateLimitedToOccurrenceCacheBounds:1;
    unsigned int supportsRecurrencesOnDetachedEvents:1;
    unsigned int recurrencesShouldPinToMonthDays:1;
    unsigned int requiresAttendeeSearchInSingleAccount:1;
    unsigned int mustAcknowledgeMasterEvent:1;
    unsigned int canSetAvailability:1;
    unsigned int eventAvalabilityLimited:1;
    unsigned int requiresMSFormattedUID:1;
    unsigned int shouldCancelDeletedEvents:1;
    unsigned int shouldDeclineDeletedInvitations:1;
    unsigned int supportsStructuredLocations:1;
    unsigned int supportsReminderActions:1;
    unsigned int supportsReminderLocations:1;
    unsigned int supportsAlarmProximity:1;
    unsigned int allowsCalendarAddDeleteModify:1;
    unsigned int allowsTasks:1;
    unsigned int allowsEvents:1;
    unsigned int supportsURLField:1;
    unsigned int supportsAllDayDueDates:1;
    unsigned int supportsSharedCalendars:1;
    unsigned int isFacebook:1;
    unsigned int recurrenceSeriesMustIncludeMoreThanFirstOccurrence:1;
    unsigned int supportsPrivateEvents:1;
    unsigned int prohibitsPrivateEventsWithAttendees:1;
    unsigned int supportsAvailabilityRequests:1;
    unsigned int supportsIgnoringEventsInAvailabilityRequests:1;
    unsigned int supportsLocationDirectorySearches:1;
    unsigned int requiresSamePrivacyLevelAcrossRecurrenceSeries:1;
    unsigned int prohibitsMultipleMonthsInYearlyRecurrence:1;
    unsigned int prohibitsMultipleDaysInMonthlyRecurrence:1;
    unsigned int prohibitsYearlyRecurrenceInterval:1;
    unsigned int prohibitsDetachmentOnCommentChange:1;
} CDStruct_13f89de5;

typedef struct {
    int year;
    char month;
    char day;
    char hour;
    char minute;
    double second;
} CDStruct_b0fa4487;

typedef struct {
    int years;
    int months;
    int days;
    int hours;
    int minutes;
    double seconds;
} CDStruct_6e43267c;

typedef struct {
    int entityType;
    int entityID;
} CDStruct_f683c4ba;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    unsigned short _field1[64];
    struct __CFString *_field2;
    unsigned short *_field3;
    char *_field4;
    CDStruct_912cb5d2 _field5;
    long long _field6;
    long long _field7;
} CDStruct_f9502b4c;

typedef struct {
    CDStruct_f683c4ba objectID;
    double date;
} CDStruct_6a127a3b;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/EventKit.framework/EventKit
// UUID: F3819B3B-6ADD-369F-AC24-8AFE436415D7
//
//                           Arch: x86_64
//                Current version: 100.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1374.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ABSearchOperationDelegate <NSObject>
- (void)searchOperation:(ABSearchOperation *)arg1 didFindMatches:(NSArray *)arg2 moreComing:(_Bool)arg3;
@end

@protocol CADAlarmEngineInterface
- (void)CADDatabaseGetLocationBasedAlarmsWithReply:(void (^)(int, NSArray *))arg1;
- (void)CADDatabaseGetAlarmOccurrencesInRangeFromStart:(NSDate *)arg1 toEnd:(NSDate *)arg2 inCalendars:(NSArray *)arg3 reply:(void (^)(int, NSArray *))arg4;
- (void)CADDatabaseGetAlarmWithUUID:(NSString *)arg1 reply:(void (^)(int, struct))arg2;
@end

@protocol CADAnonymousInterface
- (void)CADSetConnectionIdentifier:(int)arg1 reply:(void (^)(int))arg2;
- (void)CADGetAccessStatusForEntityType:(int)arg1 reply:(void (^)(int, long long))arg2;
@end

@protocol CADCalendarInterface
- (void)CADDatabaseDeleteCalendar:(CDStruct_f683c4ba)arg1 forEntityType:(int)arg2 error:(void (^)(int))arg3;
- (void)CADCalendar:(CDStruct_f683c4ba)arg1 hasReminders:(void (^)(int, _Bool))arg2;
- (void)CADCalendar:(CDStruct_f683c4ba)arg1 hasEvents:(void (^)(int, _Bool))arg2;
- (void)CADDatabaseGetCalendarsWithFaultedProperties:(NSArray *)arg1 reply:(void (^)(int, NSArray *, NSArray *))arg2;
@end

@protocol CADCalendarItemInterface
- (void)CADDatabaseCancelFetchRequestWithIdentifier:(unsigned int)arg1;
- (void)CADDatabaseFetchCalendarItemsWithPredicate:(NSPredicate *)arg1 entityType:(int)arg2 fetchIdentifier:(int)arg3 reply:(void (^)(int, NSArray *))arg4;
- (void)CADDatabaseGetCalendarItemWithUUID:(NSString *)arg1 reply:(void (^)(int, struct))arg2;
@end

@protocol CADClientInterface
- (void)CADClientReceiveOccurrenceCacheSearchResults:(NSArray *)arg1 forSearchToken:(unsigned int)arg2 finished:(_Bool)arg3;
@end

@protocol CADDatabaseInterface
- (void)CADDatabaseResetWithReply:(void (^)(int))arg1;
- (void)CADDatabaseRollbackWithReply:(void (^)(int))arg1;
- (void)CADDatabaseCommitWithReply:(void (^)(int, _Bool, NSDictionary *))arg1;
- (void)CADDatabaseSaveWithReply:(void (^)(int))arg1;
- (void)CADDatabaseSetShowsDeclinedEvents:(_Bool)arg1 reply:(void (^)(int))arg2;
- (void)CADDatabaseImportICSData:(NSData *)arg1 intoCalendarWithID:(int)arg2 optionsMask:(unsigned long long)arg3 reply:(void (^)(int, NSArray *))arg4;
- (void)CADDatabaseSetSourceAccountManagement:(int)arg1 reply:(void (^)(int))arg2;
- (void)CADDatabaseGetNextAssignableColorWithReply:(void (^)(int, NSString *))arg1;
- (void)CADDatabaseGetChangedEntityIDsSinceTimestamp:(double)arg1 reply:(void (^)(int, _Bool, NSArray *, double))arg2;
- (void)CADDatabaseGetChangesSinceSequenceNumber:(int)arg1 reply:(void (^)(int, NSDictionary *))arg2;
- (void)CADDatabaseGetSequenceNumber:(void (^)(int, int))arg1;
- (void)CADDatabaseMarkChangedObjectIDsConsumedUpToSequenceNumber:(long long)arg1 reply:(void (^)(int))arg2;
- (void)CADDatabaseFetchChangedObjectIDsSinceSequenceNumber:(long long)arg1 reply:(void (^)(int, _Bool, long long, NSArray *, NSArray *, NSArray *))arg2;
- (void)CADDatabaseRegisterForDetailedChangeTracking:(void (^)(int))arg1;
- (void)CADDatabaseGetUUID:(void (^)(int, NSString *))arg1;
- (void)CADDatabaseSetPath:(NSString *)arg1 andInitOptions:(int)arg2 reply:(void (^)(int))arg3;
@end

@protocol CADDebugInterface
- (void)CADDebugMoveDiagnosticsDBToCrashReporterFolderWithError:(void (^)(int))arg1;
@end

@protocol CADEventInterface
- (void)CADOccurrenceCacheCancelSearchWithReplyID:(int)arg1;
- (void)CADOccurrenceCacheSearchLocationsWithTerm:(NSString *)arg1 inCalendars:(NSArray *)arg2 responseToken:(int)arg3 reply:(void (^)(int))arg4;
- (void)CADOccurrenceCacheSearchWithTerm:(NSString *)arg1 inCalendars:(NSArray *)arg2 responseToken:(int)arg3 reply:(void (^)(int))arg4;
- (void)CADOccurrenceCacheDoEvents:(NSArray *)arg1 haveOccurrencesAfterDate:(NSDate *)arg2 reply:(void (^)(int, NSArray *))arg3;
- (void)CADOccurrenceCacheGetOccurrenceDateOfEventWithRowID:(int)arg1 nearestDate:(NSDate *)arg2 reply:(void (^)(int, NSDate *))arg3;
- (void)CADOccurrenceCacheGetOccurrenceForCalendars:(NSArray *)arg1 onDay:(NSDate *)arg2 reply:(void (^)(int, NSArray *))arg3;
- (void)CADOccurrenceCacheGetOccurrenceCountsForCalendars:(NSArray *)arg1 reply:(void (^)(int, NSArray *))arg2;
- (void)CADOccurrenceCacheAreOccurrencesBeingGenerated:(void (^)(int, _Bool))arg1;
- (void)CADDatabaseSetShowsDeclinedEvents:(_Bool)arg1;
- (void)CADDatabaseGetEndDateOfEarliestExpiringNotifiableEventAfterDate:(NSDate *)arg1 timeZone:(NSTimeZone *)arg2 reply:(void (^)(int, NSDate *))arg3;
- (void)CADDatabaseGetCountOfNotifiableEvents:(void (^)(int, int))arg1;
- (void)CADDatabaseGetCountOfUnacknowledgedEvents:(void (^)(int, int))arg1;
- (void)CADDatabaseGetEventWithUniqueID:(NSString *)arg1 reply:(void (^)(int, struct))arg2;
- (void)CADDatabaseGetEventWithEventIdentifier:(NSString *)arg1 reply:(void (^)(int, struct))arg2;
- (void)CADDatabaseSetDefaultCalendarForNewEvents:(CDStruct_f683c4ba)arg1;
- (void)CADDatabaseGetDefaultCalendarForNewEventsWithReply:(void (^)(int, struct))arg1;
- (void)CADDatabaseExportEventAsICS:(CDStruct_f683c4ba)arg1 reply:(void (^)(int, NSData *))arg2;
@end

@protocol CADInterface <CADAnonymousInterface, CADDatabaseInterface, CADObjectInterface, CADSourceInterface, CADCalendarInterface, CADCalendarItemInterface, CADEventInterface, CADReminderInterface, CADDebugInterface, CADAlarmEngineInterface, CADNotificationMonitorInterface>
@end

@protocol CADNotificationMonitorInterface
- (void)CADEventSetInvitationStatus:(int)arg1 forEvent:(CDStruct_f683c4ba)arg2 error:(void (^)(int))arg3;
- (void)CADInviteReplyNotification:(CDStruct_f683c4ba)arg1 setAlertedWithError:(void (^)(int))arg2;
- (void)CADResourceChange:(CDStruct_f683c4ba)arg1 setAlertedWithError:(void (^)(int))arg2;
- (void)CADCalendar:(CDStruct_f683c4ba)arg1 setAlertedWithError:(void (^)(int))arg2;
- (void)CADEvent:(CDStruct_f683c4ba)arg1 setAlertedWithError:(void (^)(int))arg2;
- (void)CADDatabaseGetInboxRepliedSectionItems:(void (^)(int, NSArray *, NSArray *))arg1;
- (void)CADDatabaseGetReminderNotificationItems:(void (^)(int, NSArray *, NSArray *, NSArray *))arg1;
- (void)CADDatabaseGetEventNotificationItems:(void (^)(int, NSArray *, NSArray *, NSArray *))arg1;
- (void)CADDatabaseGetInviteReplyNotifications:(void (^)(int, NSArray *))arg1;
- (void)CADDatabaseGetResourceChanges:(void (^)(int, NSArray *))arg1;
- (void)CADCalendarSetClearedFromNotificationCenter:(CDStruct_f683c4ba)arg1 error:(void (^)(int))arg2;
- (void)CADDatabaseGetSharedCalendarInvitationsWithReply:(void (^)(int, NSArray *))arg1;
@end

@protocol CADObjectInterface
- (void)CADDatabaseDeleteObjectsWithObjectIDs:(NSArray *)arg1 reply:(void (^)(int))arg2;
- (void)CADDatabaseInsertObjectsWithTempObjectIDs:(NSArray *)arg1 reply:(void (^)(int))arg2;
- (void)CADObject:(CDStruct_f683c4ba)arg1 setAttributes:(NSDictionary *)arg2 andRelations:(NSDictionary *)arg3 reply:(void (^)(int))arg4;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getRelatedObjectsWithRelationName:(NSString *)arg2 reply:(void (^)(int, NSSet *))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getRelatedObjectWithRelationName:(NSString *)arg2 reply:(void (^)(int, struct))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getDataPropertyWithName:(NSString *)arg2 reply:(void (^)(int, NSData *))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getDatePropertyWithName:(NSString *)arg2 reply:(void (^)(int, NSDate *))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getNumberPropertyWithName:(NSString *)arg2 reply:(void (^)(int, NSNumber *))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getStringPropertyWithName:(NSString *)arg2 reply:(void (^)(int, NSString *))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getPropertyWithName:(NSString *)arg2 reply:(void (^)(int, NSObject<NSSecureCoding> *))arg3;
- (void)CADObject:(CDStruct_f683c4ba)arg1 getPropertiesWithNames:(NSArray *)arg2 reply:(void (^)(int, NSDictionary *))arg3;
- (void)CADObjectsExist:(NSArray *)arg1 reply:(void (^)(int, NSArray *))arg2;
- (void)CADObjectExists:(CDStruct_f683c4ba)arg1 reply:(void (^)(int, _Bool))arg2;
@end

@protocol CADReminderInterface
- (void)CADScheduledTaskCacheGetDaysAndTaskCounts:(void (^)(int, NSArray *))arg1;
- (void)CADDatabaseGetProperties:(NSArray *)arg1 forReminders:(NSArray *)arg2 reply:(void (^)(int, NSArray *))arg3;
- (void)CADDatabaseGetCountOfRemindersWithPredicate:(EKReminderPredicate *)arg1 reply:(void (^)(int, int))arg2;
- (void)CADDatabaseSetDefaultCalendarForNewReminders:(CDStruct_f683c4ba)arg1;
- (void)CADDatabaseGetDefaultCalendarForNewRemindersWithReply:(void (^)(int, struct))arg1;
@end

@protocol CADSourceInterface
- (void)CADSourceRefresh:(CDStruct_f683c4ba)arg1 isUserRequested:(_Bool)arg2 reply:(void (^)(int))arg3;
- (void)CADSourceGetConstraints:(CDStruct_f683c4ba)arg1 reply:(void (^)(int, int, int, unsigned long long))arg2;
- (void)CADDatabaseGetSources:(void (^)(int, NSArray *))arg1;
@end

@protocol CLLocationManagerDelegate <NSObject>

@optional
- (void)locationManager:(CLLocationManager *)arg1 didVisit:(CLVisit *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didFinishDeferredUpdatesWithError:(NSError *)arg2;
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didStartMonitoringForRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(CLLocationManager *)arg1 monitoringDidFailForRegion:(CLRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didFailWithError:(NSError *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didExitRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didEnterRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 rangingBeaconsDidFailForRegion:(CLBeaconRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didRangeBeacons:(NSArray *)arg2 inRegion:(CLBeaconRegion *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didDetermineState:(long long)arg2 forRegion:(CLRegion *)arg3;
- (_Bool)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateHeading:(CLHeading *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateLocations:(NSArray *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateToLocation:(CLLocation *)arg2 fromLocation:(CLLocation *)arg3;
@end

@protocol EKCancellableRemoteOperation <NSObject>
- (void)cancel;

@optional
- (void)receivedBatchResultsFromServer:(id)arg1 finished:(_Bool)arg2;
@end

@protocol EKDaemonConnection <NSObject>
- (void)daemonRestarted;
@end

@protocol EKDefaultPropertiesLoading <NSObject>
- (_Bool)shouldLoadDefaultProperties;

@optional
- (NSSet *)defaultPropertiesToLoad;
@end

@protocol EKIdentityProtocol <NSObject>
- (NSString *)emailAddress;
- (NSString *)name;

@optional
- (NSURL *)URL;
@end

@protocol EKTravelAdvice <NSObject>
@property(readonly, nonatomic) double travelStateScore;
@property(readonly, nonatomic) unsigned long long travelState;
@property(readonly, nonatomic) unsigned long long accidentState;
@property(readonly, nonatomic) unsigned long long trafficLevel;
@property(readonly, nonatomic) NSDate *predictedDepartureTime;
@end

@protocol EKTravelAdvisorWorld <NSObject>
@property(nonatomic) EKTravelAgendaItem *agendaItem;
- (void)comeOutOfHibernation;
- (void)goIntoHibernation;
- (NSDate *)now;
- (void)getCurrentLocationWithAccuracy:(double)arg1 block:(void (^)(CLLocation *))arg2;
- (CLLocation *)mostRecentLocationSeen;
- (void)disableGeofence;
- (void)disableAlarm;
- (void)setGeofenceWithRadius:(double)arg1 block:(void (^)(void))arg2;
- (void)setAlarmIn:(double)arg1 block:(void (^)(void))arg2;
- (void)setLocationAuthorizationChangeCallback:(void (^)(int))arg1;
- (_Bool)authorizedToAcquireLocation;
@end

@protocol EKTravelRoutePredictor <NSObject>
@property(nonatomic) EKTravelAgendaItem *agendaItem;
- (void)updateLocation:(CLLocation *)arg1 handler:(void (^)(EKTravelPrediction *))arg2;
- (id)initWithSource:(CLLocation *)arg1 destination:(CLLocation *)arg2 arrivalDate:(NSDate *)arg3 travelMethod:(int)arg4;
@end

@protocol GEORouteHypothesizerDelegate <NSObject>
- (void)routeHypothesizerArrived:(GEORouteHypothesizer *)arg1;
- (void)routeHypothesizer:(GEORouteHypothesizer *)arg1 receivedETAError:(NSError *)arg2;
- (void)routeHypothesizer:(GEORouteHypothesizer *)arg1 receivedETAResponse:(GEOETATrafficUpdateResponse *)arg2;
- (void)routeHypothesizer:(GEORouteHypothesizer *)arg1 willSendETARequest:(GEOETATrafficUpdateRequest *)arg2;
- (void)routeHypothesizerUpdatedETA:(GEORouteHypothesizer *)arg1 etaRoute:(GEOETARoute *)arg2;
- (void)routeHypothesizer:(GEORouteHypothesizer *)arg1 matchedToRoute:(GEORouteMatch *)arg2;
- (void)routeHypothesizerRerouted:(GEORouteHypothesizer *)arg1 request:(GEODirectionsRequest *)arg2 response:(GEODirectionsResponse *)arg3;
- (void)routeHypothesizer:(GEORouteHypothesizer *)arg1 willRequestNewRoute:(GEODirectionsRequest *)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface CADEntityWrapper : NSObject <NSSecureCoding>
{
    void *_entity;
    NSArray *_loadedKeys;
    NSArray *_loadedValues;
    EKObjectID *_objectID;
    NSMutableDictionary *_loadedProperties;
}

+ (_Bool)supportsSecureCoding;
- (id)objectID;
- (id)loadedProperties;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCalEntity:(void *)arg1 propertiesToLoad:(id)arg2;
- (id)initWithCalEntity:(void *)arg1;

@end

@interface CADEventEntityWrapper : CADEntityWrapper
{
    double _occurrenceDate;
}

+ (_Bool)supportsSecureCoding;
- (id)occurrenceDate;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCalEntity:(void *)arg1 propertiesToLoad:(id)arg2 occurrenceDate:(double)arg3;

@end

__attribute__((visibility("hidden")))
@interface CADXPCProxyHelper : NSObject
{
    NSXPCConnection *_connection;
    Protocol *_protocol;
}

- (void)_callReplyHandler:(id)arg1 ofInvocation:(id)arg2 withError:(id)arg3;
- (id)_copyReplyBlockFromInvocation:(id)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)dealloc;
- (id)initWithXPCConnection:(id)arg1 protocol:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CalAlarmMetadata : NSObject <NSCoding>
{
    NSArray *_attach;
    NSArray *_attendee;
    NSString *_description;
    NSString *_summary;
}

+ (id)metadataWithData:(id)arg1;
@property(retain) NSString *summary; // @synthesize summary=_summary;
@property(retain) NSString *description; // @synthesize description=_description;
@property(retain) NSArray *attendee; // @synthesize attendee=_attendee;
@property(retain) NSArray *attach; // @synthesize attach=_attach;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)dataRepresentation;
- (void)applyToAlarm:(id)arg1;
- (void)dealloc;
- (id)initWithICSAlarm:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CalItemMetadata : NSObject <NSCoding>
{
    NSDictionary *_x_props;
    int _classification;
}

+ (id)metadataWithData:(id)arg1;
+ (id)metadataWithICSComponent:(id)arg1;
@property int classification; // @synthesize classification=_classification;
@property(retain) NSDictionary *x_props; // @synthesize x_props=_x_props;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)dataRepresentationWithExistingMetaData:(id)arg1;
- (void)applyToComponent:(id)arg1;
- (id)init;
- (id)initWithICSComponent:(id)arg1;

@end

@interface CalSearch : NSObject
{
    struct CalDatabase *_database;
    struct CalFilter *_filter;
    struct __CFString *_searchString;
    int _seed;
    id <CalSearchDataSink> _dataSink;
    _Bool _dateToStartShowingResultsSentToDataSink;
    _Bool _moreResultsAvailable;
    struct __CFArray *_partialResults;
    struct __CFArray *_partialCachedOccurrences;
    struct __CFArray *_partialCachedDays;
    struct __CFArray *_partialCachedDaysIndexes;
    struct __CFSet *_matchedEventsSet;
    struct __CFSet *_matchedParticipantsSet;
    struct __CFSet *_matchedLocationsSet;
    _Bool _stopLoadingResults;
    struct _opaque_pthread_mutex_t _dataSourceDeallocLock;
    _Bool _implementsCancellationCallback;
    _Bool _searchParticipants;
    _Bool _searchLocations;
    _Bool _searchAttendees;
}

@property _Bool searchAttendees; // @synthesize searchAttendees=_searchAttendees;
@property _Bool searchLocations; // @synthesize searchLocations=_searchLocations;
@property _Bool searchParticipants; // @synthesize searchParticipants=_searchParticipants;
- (void)_deleteSearchContext:(struct CalEventOccurrenceSearchContext *)arg1;
- (struct CalEventOccurrenceSearchContext *)_createSearchContext;
- (void)_getApplicationSearchResults:(struct CalEventOccurrenceSearchContext *)arg1;
- (void)_deleteEventIdsSearchContext:(struct CalEventIdsSearchContext *)arg1;
- (struct CalEventIdsSearchContext *)_createEventIdsSearchContext;
- (void)_getEventsSearchResults:(struct CalEventIdsSearchContext *)arg1;
- (void)_getAttendeesSearchResults:(struct CalEventIdsSearchContext *)arg1;
- (void)_getLocationSearchResults:(struct CalLocationIdsSearchContext *)arg1;
- (void)_addMatchedLocationIds:(struct __CFArray *)arg1;
- (void)_deleteLocationIdsSearchContext:(struct CalLocationIdsSearchContext *)arg1;
- (struct CalLocationIdsSearchContext *)_createLocationIdsSearchContext;
- (void)_deleteParticipantIdsSearchContext:(struct CalParticipantIdsSearchContext *)arg1;
- (struct CalParticipantIdsSearchContext *)_createParticipantIdsSearchContext;
- (void)_getParticipantsSearchResults:(struct CalParticipantIdsSearchContext *)arg1;
- (void)_addMatchedParticipantIds:(struct __CFArray *)arg1;
- (void)_addMatchedEventIds:(struct __CFArray *)arg1;
- (void)_startLoadingResults;
- (int)seed;
- (_Bool)moreResultsAvailable;
- (void)stopSearching;
- (void)startSearching;
- (void)dealloc;
- (id)initWithDatabase:(struct CalDatabase *)arg1 filter:(struct CalFilter *)arg2 dataSink:(id)arg3;

@end

@interface CalSpotlightSearch : NSObject
{
    struct CalDatabase *_database;
    NSString *_titleString;
    NSString *_locationString;
    NSString *_descriptionString;
    NSString *_participantString;
    id <CalSearchDataSink> _dataSink;
    _Bool _moreResultsAvailable;
    _Bool _onlySearchEvents;
    struct __CFArray *_partialResults;
    struct __CFSet *_matchedEventsSet;
    struct __CFSet *_matchedParticipantsSet;
    struct __CFSet *_matchedLocationsSet;
    _Bool _implementsCancellationCallback;
    struct __CFDictionary *_closestEventOccurrences;
    _Bool _cancelled;
}

+ (struct __CFDictionary *)newQueryCache;
- (void)_deleteSpotlightEventsContext:(struct CalEventSpotlightContext *)arg1;
- (struct CalEventSpotlightContext *)_createSpotlightEventsContext;
- (void)calculateSearchWindow:(struct CalEventSpotlightContext *)arg1;
- (void)_getSpotlightEvents:(struct CalEventSpotlightContext *)arg1 callback:(CDUnknownBlockType)arg2;
- (void)_getLocationSearchResults:(struct CalLocationIdsSearchContext *)arg1;
- (void)_addMatchedLocationIds:(struct __CFArray *)arg1;
- (void)_deleteLocationIdsSearchContext:(struct CalLocationIdsSearchContext *)arg1;
- (struct CalLocationIdsSearchContext *)_createLocationIdsSearchContext;
- (void)_deleteParticipantIdsSearchContext:(struct CalParticipantIdsSearchContext *)arg1;
- (struct CalParticipantIdsSearchContext *)_createParticipantIdsSearchContext;
- (void)_getParticipantsSearchResults:(struct CalParticipantIdsSearchContext *)arg1;
- (void)_addMatchedParticipantIds:(struct __CFArray *)arg1;
- (void)_startLoadingResults:(CDUnknownBlockType)arg1;
- (id)initWithDatabase:(struct CalDatabase *)arg1 titleString:(id)arg2 locationString:(id)arg3 descriptionString:(id)arg4 participantString:(id)arg5 dataSink:(id)arg6 queryCache:(struct __CFDictionary *)arg7;
- (void)performWithBlock:(CDUnknownBlockType)arg1;
- (void)stopSearching;
- (void)startSearching;
- (void)dealloc;
- (id)initWithDatabase:(struct CalDatabase *)arg1 titleString:(id)arg2 locationString:(id)arg3 descriptionString:(id)arg4 participantString:(id)arg5 queryCache:(struct __CFDictionary *)arg6;
- (id)initWithDatabase:(struct CalDatabase *)arg1 searchString:(struct __CFString *)arg2 dataSink:(id)arg3 queryCache:(struct __CFDictionary *)arg4;

@end

__attribute__((visibility("hidden")))
@interface EKObject : NSObject
{
    unsigned int _flags;
    NSMutableDictionary *_dirtyProperties;
    NSMutableDictionary *_cachedProperties;
    EKPersistentObject *_persistentObject;
    NSString *_propertyName;
    EKObjectRelation *_owningRelation;
    NSMutableDictionary *_relations;
    NSMutableSet *_weakRelations;
}

@property(nonatomic) unsigned int flags; // @synthesize flags=_flags;
@property(retain, nonatomic) NSMutableSet *weakRelations; // @synthesize weakRelations=_weakRelations;
@property(retain, nonatomic) NSMutableDictionary *relations; // @synthesize relations=_relations;
@property(nonatomic) EKObjectRelation *owningRelation; // @synthesize owningRelation=_owningRelation;
@property(copy, nonatomic) NSString *propertyName; // @synthesize propertyName=_propertyName;
@property(retain, nonatomic) EKPersistentObject *persistentObject; // @synthesize persistentObject=_persistentObject;
@property(retain, nonatomic) NSMutableDictionary *cachedProperties; // @synthesize cachedProperties=_cachedProperties;
@property(retain, nonatomic) NSMutableDictionary *dirtyProperties; // @synthesize dirtyProperties=_dirtyProperties;
- (void)removeWeakRelation:(id)arg1;
- (void)addWeakRelation:(id)arg1;
- (void)childRelationChanged:(id)arg1;
- (id)relationForKey:(id)arg1;
- (id)lazyLoadRelationForKey:(id)arg1;
- (void)deletePersistentObject;
- (void)updatePersistentObject;
- (_Bool)validate:(id *)arg1;
- (void)insertPersistentObjectIfNeeded;
- (_Bool)refresh;
- (void)rollback;
- (void)reset;
- (void)didCommit;
- (void)updatePersistentValueForKeyIfNeeded:(id)arg1;
- (void)faultPropertiesWithNames:(id)arg1;
- (id)propertyForKey:(id)arg1 withPersistentFallback:(CDUnknownBlockType)arg2;
- (int)intPropertyForKey:(id)arg1 withPersistentFallback:(CDUnknownBlockType)arg2;
- (_Bool)boolPropertyForKey:(id)arg1 withPersistentFallback:(CDUnknownBlockType)arg2;
- (id)persistentOrDirtyPropertyForKey:(id)arg1;
- (_Bool)isPropertyDirty:(id)arg1;
- (_Bool)propertyValueForKey:(id)arg1 value:(id *)arg2;
- (id)propertyValueForKey:(id)arg1;
- (void)clearPropertyValueForKey:(id)arg1;
- (void)cachePropertyValue:(id)arg1 forKey:(id)arg2;
- (void)setPropertyValue:(id)arg1 forKey:(id)arg2;
- (id)committedValueForKey:(id)arg1;
- (_Bool)isNew;
- (_Bool)hasChanges;
- (_Bool)isEqual:(id)arg1;
- (_Bool)existsInStore;
- (id)objectID;
- (id)eventStore;
- (id)owner;
- (_Bool)rebase;
- (void)dealloc;
- (id)initWithPersistentObject:(id)arg1;

@end

@interface EKAlarm : EKObject <NSCopying>
{
    EKObjectToOneRelation *_locationRelation;
}

+ (double)defaultGeofencedReminderRadius;
+ (_Bool)areLocationsCurrentlyEnabled;
+ (_Bool)areLocationsAllowedWithAuthorizationStatus:(int)arg1;
+ (_Bool)areLocationsAllowed;
+ (int)_currentAuthorizationStatus;
+ (_Bool)areLocationsAvailable;
+ (id)alarmWithRelativeOffset:(double)arg1;
+ (id)alarmWithAbsoluteDate:(id)arg1;
@property(retain, nonatomic) EKObjectToOneRelation *locationRelation; // @synthesize locationRelation=_locationRelation;
- (_Bool)validate:(id *)arg1;
- (id)description;
- (_Bool)rebase;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) _Bool isSnoozedAlarm;
- (void)removeSnoozedAlarm:(id)arg1;
- (void)addSnoozedAlarm:(id)arg1;
@property(copy, nonatomic) NSArray *snoozedAlarms;
- (id)_snoozedAlarmsRelation;
@property(retain, nonatomic) EKAlarm *originalAlarm;
- (id)_originalAlarmRelation;
@property(nonatomic, getter=isDefaultAlarm) _Bool defaultAlarm;
- (id)ownerUUID;
@property(copy, nonatomic) EKStructuredLocation *structuredLocation;
- (id)_locationRelation;
@property(nonatomic) long long proximity;
@property(readonly) _Bool isAbsolute;
@property(readonly, nonatomic) NSString *externalID;
@property(copy, nonatomic) NSDate *acknowledgedDate;
@property(copy, nonatomic) NSDate *absoluteDate;
@property(nonatomic) double relativeOffset;
@property(readonly, nonatomic) NSString *UUID;
@property(retain, nonatomic) EKCalendarItem *owner; // @dynamic owner;
- (id)lazyLoadRelationForKey:(id)arg1;
- (void)dealloc;
- (id)initWithRelativeOffset:(double)arg1;
- (id)initWithAbsoluteDate:(id)arg1;
- (id)init;

@end

@interface EKAlarmOccurrence : NSObject
{
    EKObjectID *_alarmID;
    EKObjectID *_ownerID;
    NSDate *_ownerDate;
    NSTimeZone *_ownerTimeZone;
    NSURL *_ownerURI;
    NSDate *_fireDate;
    NSString *_externalID;
    NSDate *_acknowledgedDate;
}

+ (id)alarmOccurrenceWithAlarmID:(id)arg1 ownerID:(id)arg2 ownerDate:(id)arg3 ownerTimeZone:(id)arg4 ownerURI:(id)arg5 fireDate:(id)arg6 externalID:(id)arg7 acknowledgedDate:(id)arg8;
@property(readonly, nonatomic) NSDate *acknowledgedDate; // @synthesize acknowledgedDate=_acknowledgedDate;
@property(readonly, nonatomic) NSString *externalID; // @synthesize externalID=_externalID;
@property(readonly, nonatomic) NSDate *fireDate; // @synthesize fireDate=_fireDate;
@property(readonly, nonatomic) NSURL *ownerURI; // @synthesize ownerURI=_ownerURI;
@property(readonly, nonatomic) NSTimeZone *ownerTimeZone; // @synthesize ownerTimeZone=_ownerTimeZone;
@property(readonly, nonatomic) NSDate *ownerDate; // @synthesize ownerDate=_ownerDate;
@property(readonly, nonatomic) EKObjectID *ownerID; // @synthesize ownerID=_ownerID;
@property(readonly, nonatomic) EKObjectID *alarmID; // @synthesize alarmID=_alarmID;
- (id)dictionaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithAlarmID:(id)arg1 ownerID:(id)arg2 ownerDate:(id)arg3 ownerTimeZone:(id)arg4 ownerURI:(id)arg5 fireDate:(id)arg6 externalID:(id)arg7 acknowledgedDate:(id)arg8;

@end

@interface EKAttachment : EKObject
{
}

- (id)description;
- (_Bool)isEqual:(id)arg1;
- (long long)compareFileNames:(id)arg1;
@property(readonly, nonatomic) NSString *UUID;
@property(readonly, nonatomic) NSNumber *fileSize;
@property(readonly, nonatomic) NSURL *localURL;
@property(readonly, nonatomic) _Bool isBinary;
@property(readonly, nonatomic) NSString *fileFormat;
@property(readonly, nonatomic) NSString *fileName;
@property(readonly, nonatomic) NSURL *URL;
- (id)init;

@end

@interface EKParticipant : EKObject <EKIdentityProtocol, NSCopying>
{
    EKCalendarItem *_owner;
}

+ (void *)findABPersonByURL:(id)arg1 inAddressBook:(void *)arg2;
@property(readonly, nonatomic) EKCalendarItem *owner; // @synthesize owner=_owner;
- (void *)ABRecordWithAddressBook:(void *)arg1;
- (_Bool)isEqualToParticipant:(id)arg1;
@property(readonly, nonatomic) NSURL *URL;
@property(readonly, nonatomic) _Bool isCurrentUser;
@property(copy, nonatomic) NSString *comment;
@property(readonly, nonatomic) int participantRole;
@property(readonly, nonatomic) int participantStatus;
@property(readonly, nonatomic) int participantType;
@property(copy, nonatomic) NSString *lastName;
@property(copy, nonatomic) NSString *firstName;
@property(copy, nonatomic) NSURL *address;
@property(copy, nonatomic) NSString *emailAddress;
- (void)setDisplayName:(id)arg1;
@property(readonly, nonatomic) NSString *name;
@property(readonly, nonatomic) NSString *UUID;
- (id)_persistentItem;
- (id)copyWithZone:(struct _NSZone *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKAttendee : EKParticipant
{
}

+ (id)attendeeWithEmailAddress:(id)arg1 name:(id)arg2;
+ (id)attendeeWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3;
@property(nonatomic) _Bool statusChanged;
@property(nonatomic) _Bool commentChanged;
- (_Bool)isCurrentUser;
@property(readonly, nonatomic) NSDate *lastModifiedParticipationStatus;
- (void)setParticipantType:(int)arg1;
- (int)participantType;
@property(nonatomic) int pendingStatus;
- (void)setParticipantRole:(int)arg1;
- (int)participantRole;
- (void)setParticipantStatus:(int)arg1;
- (int)participantStatus;
- (id)_persistentAttendee;
- (id)owner;
- (id)lazyLoadRelationForKey:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithEmailAddress:(id)arg1 name:(id)arg2;
- (id)initWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface EKAvailabilityCache : NSObject
{
    _Bool _sourceIsInvalid;
    NSString *_accountID;
    _Bool _sourceSupportsAvailabilityRequests;
    NSObject<OS_dispatch_queue> *_processingQueue;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSMutableDictionary *_addressesToCachedSpanRanges;
    NSMutableDictionary *_ignoredEventIDsToAddressBasedCaches;
}

+ (void)_logRequestElapsedTime:(double)arg1 forNumberOfAddresses:(unsigned long long)arg2;
+ (long long)_convertType:(long long)arg1;
+ (id)_generateEventKitSpansFromDataAccessExpressSpans:(id)arg1;
+ (_Bool)_isValidStartDate:(id)arg1 endDate:(id)arg2;
- (id)_dictionaryForIgnoredEventID:(id)arg1;
- (void)_handleResults:(id)arg1 resultsBlock:(CDUnknownBlockType)arg2 ignoredEventID:(id)arg3;
- (void)cancelAvailabilityRequestWithID:(id)arg1;
- (id)requestAvailabilityBetweenStartDate:(id)arg1 endDate:(id)arg2 ignoredEventID:(id)arg3 addresses:(id)arg4 resultsBlock:(CDUnknownBlockType)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (id)description;
- (void)dealloc;
- (id)initWithSource:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKAvailabilityCachedSpan : NSObject
{
    NSDate *_creationDate;
    EKAvailabilitySpan *_span;
}

@property(retain, nonatomic) EKAvailabilitySpan *span; // @synthesize span=_span;
@property(retain, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
- (id)description;
- (void)dealloc;

@end

@interface EKAvailabilityCachedSpanRange : NSObject
{
    NSMutableArray *_cachedSpans;
}

+ (id)_generateCachedSpansFromSpans:(id)arg1;
+ (id)_clampDateRangeForSpans:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (_Bool)_rangeCompletelyCoversPeriodBetweenStartDate:(id)arg1 endDate:(id)arg2;
- (void)_validateCachedSpansIfDebugLoggingIsEnabled;
- (id)spans;
- (void)injectSpans:(id)arg1;
- (id)gatherFreshlyCachedSpansBetweenStartDate:(id)arg1 endDate:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface EKAvailabilitySpan : NSObject
{
    long long _type;
    NSDate *_startDate;
    NSDate *_endDate;
}

@property(readonly, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(readonly, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (id)description;
- (id)initWithStartDate:(id)arg1 endDate:(id)arg2 type:(long long)arg3;
- (id)init;

@end

@interface EKCalendar : EKObject
{
    struct CGColor *_color;
    _Bool _isMain;
    unsigned int _loadFlags;
}

+ (id)typeDescription:(int)arg1;
+ (id)calendarForEntityType:(unsigned long long)arg1 eventStore:(id)arg2;
+ (id)calendarWithEventStore:(id)arg1;
@property(nonatomic) _Bool isMainCalendarForSource; // @synthesize isMainCalendarForSource=_isMain;
@property(nonatomic) unsigned int loadFlags; // @synthesize loadFlags=_loadFlags;
- (_Bool)remove:(id *)arg1;
- (_Bool)commit:(id *)arg1;
- (_Bool)validate:(id *)arg1;
@property(copy, nonatomic) NSData *digest;
- (void)setPushKey:(id)arg1;
- (id)pushKey;
- (void)setSubcalAccountID:(id)arg1;
- (id)subcalAccountID;
- (void)setBulkRequests:(id)arg1;
- (id)bulkRequests;
@property(copy, nonatomic) NSString *ownerIdentityLastName;
@property(copy, nonatomic) NSString *ownerIdentityFirstName;
@property(copy, nonatomic) NSURL *ownerIdentityAddress;
@property(copy, nonatomic) NSString *ownerIdentityEmail;
@property(copy, nonatomic) NSString *ownerIdentityDisplayName;
@property(copy, nonatomic) NSString *selfIdentityLastName;
@property(copy, nonatomic) NSString *selfIdentityFirstName;
@property(copy, nonatomic) NSURL *selfIdentityAddress;
@property(copy, nonatomic) NSString *selfIdentityEmail;
@property(copy, nonatomic) NSString *selfIdentityDisplayName;
- (void)removeSharee:(id)arg1;
- (void)addSharee:(id)arg1;
@property(copy, nonatomic) NSArray *sharees;
- (id)_shareesRelation;
@property(readonly, nonatomic) unsigned long long supportedEventAvailabilities;
@property(readonly) _Bool allowsTasks;
@property(readonly) _Bool allowsEvents;
@property(readonly, nonatomic) _Bool hasTasks;
@property(readonly, nonatomic) _Bool hasEvents;
@property(readonly, nonatomic) unsigned long long allowedEntityTypes;
- (void)_setSource:(id)arg1;
@property(retain, nonatomic) EKSource *source;
- (id)_sourceRelation;
- (id)lazyLoadRelationForKey:(id)arg1;
@property(readonly, nonatomic) NSURL *externalURI;
@property(copy, nonatomic) NSString *externalModificationTag;
@property(copy, nonatomic) NSString *externalID;
@property(nonatomic) _Bool isIgnoringSharedCalendarNotifications;
@property(readonly, nonatomic) _Bool allowsIgnoringSharedEventChangeNotifications;
@property(nonatomic) _Bool isIgnoringEventAlerts;
@property(readonly, nonatomic) _Bool isMarkedImmutableSharees;
@property(readonly, nonatomic) _Bool isMarkedUndeletable;
@property(readonly, nonatomic) _Bool isFamilyCalendar;
@property(readonly, nonatomic) _Bool isHolidaySubscribedCalendar;
@property(readonly, nonatomic) _Bool isFacebookBirthdayCalendar;
@property(readonly, nonatomic) _Bool schedulingProhibited;
@property(readonly, nonatomic) _Bool canBeShared;
@property(readonly, nonatomic) _Bool canBePublished;
@property(nonatomic) _Bool isPublished;
@property(readonly, nonatomic) NSString *publishedURL;
@property(readonly, nonatomic) NSString *sharedOwnerEmail;
@property(copy, nonatomic) NSURL *sharedOwnerAddress;
@property(copy, nonatomic) NSString *sharedOwnerName;
@property(nonatomic) int sharingInvitationResponse;
- (void)clearInvitationStatus;
@property(nonatomic) unsigned long long invitationStatus;
@property(nonatomic) long long sharingStatus;
@property(readonly, nonatomic) _Bool isSharingInvitation;
@property(readonly, nonatomic) _Bool prohibitsScheduling;
@property(readonly, nonatomic, getter=isImmutable) _Bool immutable;
@property(readonly, nonatomic) _Bool isHidden;
@property(readonly, nonatomic, getter=isSubscribed) _Bool subscribed;
@property(readonly, nonatomic) _Bool isDefaultCalendarForSource;
- (_Bool)refresh;
- (id)description;
@property(nonatomic) int displayOrder;
@property(readonly, nonatomic) _Bool allowsContentModifications;
@property(readonly, nonatomic) NSString *calendarIdentifier;
@property(readonly, nonatomic) int type;
@property(nonatomic) struct CGColor *CGColor;
- (_Bool)getColorRed:(int *)arg1 green:(int *)arg2 blue:(int *)arg3;
- (void)setColorString:(id)arg1;
@property(readonly, nonatomic) NSString *colorString;
@property(copy, nonatomic) NSString *symbolicColorName;
@property(copy, nonatomic) NSString *title;
- (void)reset;
- (int)entityType;
- (void)dealloc;
- (id)init;

@end

@interface EKCalendarDate : NSObject <NSCopying, NSMutableCopying>
{
    CDStruct_b0fa4487 _dateGr;
    double _dateAbs;
    EKTimeZone *_timeZone;
    unsigned int _flags;
}

+ (id)calendarDateWithDateComponents:(id)arg1 timeZone:(id)arg2;
+ (id)calendarDateWithGregorianDate:(CDStruct_b0fa4487)arg1 timeZone:(id)arg2;
+ (id)calendarDateWithDate:(id)arg1 timeZone:(id)arg2;
+ (id)calendarDateWithAbsoluteTime:(double)arg1 timeZone:(id)arg2;
- (long long)compare:(id)arg1;
- (id)laterDate:(id)arg1;
- (id)earlierDate:(id)arg1;
- (id)calendarDateForYear;
- (id)calendarDateForEndOfMonth;
- (id)calendarDateForMonth;
- (id)calendarDateForEndOfWeekWithWeekStart:(int)arg1;
- (id)calendarDateForWeekWithWeekStart:(int)arg1 daysSinceWeekStart:(long long *)arg2;
- (id)calendarDateForWeekWithWeekStart:(int)arg1;
- (id)calendarDateForEndOfDay;
- (id)calendarDateForDay;
- (unsigned long long)weeksInYear;
- (unsigned long long)daysInYear;
- (unsigned long long)daysInMonth;
- (unsigned long long)weekOfYear;
- (unsigned long long)dayOfYear;
- (int)dayOfWeek;
- (double)second;
- (unsigned long long)minute;
- (unsigned long long)hour;
- (unsigned long long)day;
- (unsigned long long)month;
- (unsigned long long)year;
- (long long)differenceInDays:(id)arg1;
- (long long)differenceInMonths:(id)arg1;
- (long long)differenceInYears:(id)arg1;
- (CDStruct_6e43267c)differenceAsGregorianUnits:(id)arg1 flags:(unsigned long long)arg2;
- (id)calendarDateWithDate:(id)arg1;
- (id)calendarDateInTimeZone:(id)arg1;
- (id)calendarDateByAddingYears:(long long)arg1;
- (id)calendarDateByAddingMonths:(long long)arg1;
- (id)calendarDateByAddingWeeks:(long long)arg1;
- (id)calendarDateByAddingDays:(long long)arg1;
- (id)calendarDateByAddingGregorianUnits:(CDStruct_6e43267c)arg1;
- (long long)secondsFromGMT;
- (id)timeZone;
- (CDStruct_b0fa4487)gregorianDate;
- (id)componentsWithoutTime;
- (id)components;
- (id)componentsIncludingTime:(_Bool)arg1;
- (double)absoluteTime;
- (id)date;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithDateComponents:(id)arg1 timeZone:(id)arg2;
- (id)initWithGregorianDate:(CDStruct_b0fa4487)arg1 internalTimeZone:(id)arg2;
- (id)initWithAbsoluteTime:(double)arg1 internalTimeZone:(id)arg2;
- (id)initWithGregorianDate:(CDStruct_b0fa4487)arg1 timeZone:(id)arg2;
- (id)initWithAbsoluteTime:(double)arg1 timeZone:(id)arg2;
- (id)initWithDate:(id)arg1 timeZone:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface EKCalendarNotification : NSObject <EKIdentityProtocol>
{
    long long _type;
    NSString *_title;
    NSString *_name;
    NSString *_emailAddress;
    NSURL *_URI;
    EKObjectID *_objectID;
    struct CGColor *_dotColor;
    _Bool _hiddenFromNotificationCenter;
    _Bool _alerted;
}

@property(nonatomic) _Bool alerted; // @synthesize alerted=_alerted;
@property(nonatomic) _Bool hiddenFromNotificationCenter; // @synthesize hiddenFromNotificationCenter=_hiddenFromNotificationCenter;
@property(nonatomic) struct CGColor *dotColor; // @synthesize dotColor=_dotColor;
@property(retain, nonatomic) EKObjectID *objectID; // @synthesize objectID=_objectID;
@property(retain, nonatomic) NSURL *URI; // @synthesize URI=_URI;
@property(retain, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic) long long type; // @synthesize type=_type;
@property(readonly, nonatomic) _Bool needsAlert;
- (void)dealloc;
- (id)initWithType:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKCalendarEventInvitationNotification : EKCalendarNotification
{
    _Bool _allDay;
    _Bool _hasRecurrenceRules;
    _Bool _timeChanged;
    _Bool _dateChanged;
    _Bool _locationChanged;
    _Bool _attendeeReplyChanged;
    int _participationStatus;
    int _status;
    NSString *_location;
    NSDate *_startDate;
    NSDate *_startDateForNextOccurrence;
    NSDate *_endDate;
    NSDate *_participationStatusModifiedDate;
    NSArray *_attendees;
}

@property(retain, nonatomic) NSArray *attendees; // @synthesize attendees=_attendees;
@property(nonatomic) _Bool attendeeReplyChanged; // @synthesize attendeeReplyChanged=_attendeeReplyChanged;
@property(nonatomic) _Bool locationChanged; // @synthesize locationChanged=_locationChanged;
@property(nonatomic) _Bool dateChanged; // @synthesize dateChanged=_dateChanged;
@property(nonatomic) _Bool timeChanged; // @synthesize timeChanged=_timeChanged;
@property(nonatomic) _Bool hasRecurrenceRules; // @synthesize hasRecurrenceRules=_hasRecurrenceRules;
@property(nonatomic, getter=isAllDay) _Bool allDay; // @synthesize allDay=_allDay;
@property(nonatomic) int status; // @synthesize status=_status;
@property(nonatomic) int participationStatus; // @synthesize participationStatus=_participationStatus;
@property(retain, nonatomic) NSDate *participationStatusModifiedDate; // @synthesize participationStatusModifiedDate=_participationStatusModifiedDate;
@property(retain, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(retain, nonatomic) NSDate *startDateForNextOccurrence; // @synthesize startDateForNextOccurrence=_startDateForNextOccurrence;
@property(retain, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(retain, nonatomic) NSString *location; // @synthesize location=_location;
- (id)eventFromEventStore:(id)arg1;
- (void)dealloc;
- (id)initWithEvent:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKCalendarEventInvitationNotificationAttendee : NSObject <EKIdentityProtocol>
{
    _Bool _statusChanged;
    _Bool _commentChanged;
    int _participantStatus;
    NSString *_name;
    NSString *_emailAddress;
    NSURL *_url;
    NSString *_comment;
}

@property(readonly, nonatomic) NSString *comment; // @synthesize comment=_comment;
@property(readonly, nonatomic) int participantStatus; // @synthesize participantStatus=_participantStatus;
@property(readonly, nonatomic) _Bool commentChanged; // @synthesize commentChanged=_commentChanged;
@property(readonly, nonatomic) _Bool statusChanged; // @synthesize statusChanged=_statusChanged;
@property(readonly, nonatomic) NSURL *url; // @synthesize url=_url;
@property(readonly, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (void)dealloc;
- (id)initWithAttendee:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface EKCalendarFilter : NSObject <NSCopying>
{
    struct _opaque_pthread_mutex_t _lock;
    NSMutableSet *_calendarUIDs;
    struct CalDatabase *_database;
    NSMutableDictionary *_queryCache;
    NSString *_searchTerm;
    int _entityType;
}

+ (void)_addCalendarsForStoreWithUID:(id)arg1 toSet:(id)arg2 database:(struct CalDatabase *)arg3;
+ (void)_addCalendarUIDsFromPrefs:(id)arg1 toSet:(id)arg2 database:(struct CalDatabase *)arg3;
+ (void)_addCalendarWithUID:(id)arg1 toSet:(id)arg2 database:(struct CalDatabase *)arg3;
@property(copy, nonatomic) NSString *searchTerm; // @synthesize searchTerm=_searchTerm;
- (id)calendarIDClauseForQueryWithVariableName:(id)arg1;
- (id)filterQueryForKey:(id)arg1 prefix:(id)arg2 whereClause:(id)arg3 creator:(CDUnknownFunctionPointerType)arg4 userInfo:(void *)arg5;
- (id)filterQueryForQueryString:(id)arg1 creator:(CDUnknownFunctionPointerType)arg2 userInfo:(void *)arg3;
- (id)_addFilterToQuery:(id)arg1 creator:(CDUnknownFunctionPointerType)arg2 userInfo:(void *)arg3;
- (void)validate;
- (id)_calendarUIDsFromPersistentIdentifier:(id)arg1;
- (id)persistentIdentifier;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)removeCalendarWithUID:(id)arg1;
- (_Bool)isCalendarUIDVisible:(id)arg1;
- (int)visibleCalendarCountWithOptions:(int)arg1;
- (id)visibleCalendarsWithOptions:(int)arg1;
- (id)filteredCalendars;
- (id)_generateUIDSetToFilterAllCalendars;
- (id)_generateUIDSetToShowCalendarUIDs:(id)arg1;
- (id)_generateUIDSetToFilterCalendars:(id)arg1;
- (id)_generateUIDSetToShowCalendars:(id)arg1;
- (id)_UIDAntiSetWithCalendars:(id)arg1;
- (id)_UIDSetWithCalendars:(id)arg1;
- (_Bool)isFilteringAll;
- (_Bool)_isFilteringAllWhileLocked;
- (_Bool)isShowingAll;
- (void)_databaseChanged;
- (void)dealloc;
- (id)initWithDatabase:(struct CalDatabase *)arg1 entityType:(int)arg2 calendarUIDs:(id)arg3;
- (id)initWithDatabase:(struct CalDatabase *)arg1 entityType:(int)arg2 filteringCalendarsWithUIDs:(id)arg3;
- (id)initWithDatabase:(struct CalDatabase *)arg1 entityType:(int)arg2 filteringCalendars:(id)arg3;
- (id)initWithDatabase:(struct CalDatabase *)arg1 entityType:(int)arg2 showingCalendarsWithUIDs:(id)arg3;
- (id)initWithDatabase:(struct CalDatabase *)arg1 showingCalendarsWithUIDs:(id)arg2;
- (id)initWithDatabase:(struct CalDatabase *)arg1 showingCalendars:(id)arg2;
- (id)initFilteringAllWithDatabase:(struct CalDatabase *)arg1;
- (id)initWithPersistentIdentifier:(id)arg1 database:(struct CalDatabase *)arg2;
- (id)initWithDatabase:(struct CalDatabase *)arg1 entityType:(int)arg2;
- (id)initWithDatabase:(struct CalDatabase *)arg1;

@end

@interface EKCalendarInviteReplyNotification : EKCalendarNotification
{
    int _status;
    unsigned long long _allowedEntityTypes;
}

@property(nonatomic) unsigned long long allowedEntityTypes; // @synthesize allowedEntityTypes=_allowedEntityTypes;
@property(nonatomic) int status; // @synthesize status=_status;
- (id)inviteReplyNotificationFromEventStore:(id)arg1;
- (id)initWithType:(long long)arg1;

@end

@interface EKCalendarItem : EKObject
{
    _Bool _haveCachedActionsState;
    int _actionsStateCachedValue;
}

- (void)moveToCalendar:(id)arg1;
@property(readonly, retain, nonatomic) EKCalendarItem *originalItem;
- (void)_moveToCalendarInternal:(id)arg1;
- (_Bool)rebase;
- (void)updatePersistentObjectSkippingProperties:(id)arg1;
- (void)updatePersistentObject;
- (_Bool)validate:(id *)arg1;
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
@property(readonly, nonatomic) NSArray *attachments;
- (id)_attachmentsRelation;
@property(copy, nonatomic) NSTimeZone *sharedItemModifiedTimeZone;
@property(copy, nonatomic) NSDate *sharedItemModifiedDate;
@property(copy, nonatomic) NSString *sharedItemModifiedByLastName;
@property(copy, nonatomic) NSString *sharedItemModifiedByFirstName;
@property(copy, nonatomic) NSString *sharedItemModifiedByEmailAddress;
@property(copy, nonatomic) NSString *sharedItemModifiedByDisplayName;
@property(copy, nonatomic) NSTimeZone *sharedItemCreatedTimeZone;
@property(copy, nonatomic) NSDate *sharedItemCreatedDate;
@property(copy, nonatomic) NSString *sharedItemCreatedByLastName;
@property(copy, nonatomic) NSString *sharedItemCreatedByFirstName;
- (void)setSharedItemCreatedByAddress:(id)arg1;
@property(copy, nonatomic) NSString *sharedItemCreatedByEmailAddress; // @dynamic sharedItemCreatedByEmailAddress;
@property(copy, nonatomic) NSString *sharedItemCreatedByDisplayName;
@property(retain, nonatomic) EKOrganizer *organizer;
- (id)_organizerRelation;
@property(readonly, nonatomic) int selfParticipantStatus;
@property(retain, nonatomic) EKAttendee *selfAttendee; // @dynamic selfAttendee;
- (void)removeAttendee:(id)arg1;
- (void)addAttendee:(id)arg1;
- (void)setAttendees:(id)arg1;
@property(readonly, nonatomic) NSArray *attendees;
@property(readonly, nonatomic) _Bool hasAttendees;
- (id)_selfAttendeeRelation;
- (id)_attendeesRelation;
- (id)startDateForRecurrence;
- (void)removeRecurrenceRule:(id)arg1;
- (void)addRecurrenceRule:(id)arg1;
@property(copy, nonatomic) NSArray *recurrenceRules;
@property(readonly, nonatomic) _Bool hasRecurrenceRules;
- (id)_recurrencesRelation;
- (void)removeAllSnoozedAlarms;
- (void)removeAcknowledgedSnoozedAlarms;
- (_Bool)isAlarmAcknowledgedPropertyDirty;
- (void)snoozeAlarm:(id)arg1 withLocation:(id)arg2 proximity:(long long)arg3;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)findOriginalAlarmStartingWith:(id)arg1;
- (void)removeAlarm:(id)arg1;
- (void)addAlarm:(id)arg1;
@property(copy, nonatomic) NSArray *allAlarms;
@property(copy, nonatomic) NSArray *alarms;
@property(readonly, nonatomic) _Bool hasAlarms;
- (id)_alarmsRelation;
@property(readonly, nonatomic) int actionsState;
@property(readonly, nonatomic) _Bool allowsAttendeeModifications;
@property(readonly, nonatomic) _Bool allowsAlarmModifications;
@property(readonly, nonatomic) _Bool allowsRecurrenceModifications;
@property(readonly, nonatomic) _Bool allowsCalendarModifications;
@property(readonly, nonatomic) _Bool isOrganizedBySharedCalendarOwner;
@property(readonly, nonatomic) _Bool isExternallyOrganizedInvitation;
@property(readonly, nonatomic) _Bool isSelfOrganizedInvitation;
@property(readonly, nonatomic) _Bool isSelfOrganized;
@property(readonly, nonatomic) _Bool isFloating;
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool requiresDetach;
@property(readonly, nonatomic) NSURL *externalURI;
@property(copy, nonatomic) NSString *externalModificationTag;
@property(copy, nonatomic) NSString *externalID;
@property(nonatomic, getter=isDefaultAlarmRemoved) _Bool defaultAlarmRemoved;
@property(copy, nonatomic) NSTimeZone *endTimeZone;
@property(copy, nonatomic) NSTimeZone *startTimeZone;
@property(copy, nonatomic) NSTimeZone *timeZone;
@property(retain, nonatomic) EKCalendar *calendar;
@property(copy, nonatomic) NSURL *URL;
@property(copy, nonatomic) NSURL *action;
@property(nonatomic) long long priority;
@property(nonatomic) NSString *calendarScale;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (void)setCreationDate:(id)arg1;
@property(readonly, nonatomic) NSDate *creationDate;
- (void)setLastModifiedDate:(id)arg1;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(copy, nonatomic) EKStructuredLocation *startLocation;
@property(copy, nonatomic) EKStructuredLocation *structuredLocation;
@property(copy, nonatomic) NSString *location;
- (id)_startLocationRelation;
- (id)_locationRelation;
@property(copy, nonatomic) NSString *title;
@property(readonly, nonatomic) _Bool hasNotes;
@property(copy, nonatomic) NSString *notes;
@property(readonly, nonatomic) NSString *UUID;
@property(readonly, nonatomic) NSString *calendarItemExternalIdentifier;
@property(readonly, nonatomic) NSString *calendarItemIdentifier;
- (id)_persistentItem;
- (id)description;
- (id)lazyLoadRelationForKey:(id)arg1;

@end

@interface EKCalendarItemAlertInfo : NSObject <NSCopying>
{
    _Bool _allDay;
    _Bool _tentative;
    _Bool _acknowledged;
    _Bool _isOffsetFromTravelTimeStart;
    NSString *_title;
    NSString *_location;
    NSDate *_eventDate;
    NSDate *_endDate;
    NSTimeZone *_eventTimeZone;
    NSURL *_action;
    NSURL *_entityID;
    long long _proximity;
    NSString *_externalID;
    NSString *_dismissalID;
    NSString *_alarmID;
    id <EKTravelAdvice> _latestTravelAdvice;
    NSDate *_lastFireTimeOfAlertOffsetFromTravelTime;
    NSDate *_firstDateAlertedForTravelAdvice;
}

@property(retain, nonatomic) NSDate *firstDateAlertedForTravelAdvice; // @synthesize firstDateAlertedForTravelAdvice=_firstDateAlertedForTravelAdvice;
@property(retain, nonatomic) NSDate *lastFireTimeOfAlertOffsetFromTravelTime; // @synthesize lastFireTimeOfAlertOffsetFromTravelTime=_lastFireTimeOfAlertOffsetFromTravelTime;
@property(retain, nonatomic) id <EKTravelAdvice> latestTravelAdvice; // @synthesize latestTravelAdvice=_latestTravelAdvice;
@property(readonly, nonatomic) _Bool isOffsetFromTravelTimeStart; // @synthesize isOffsetFromTravelTimeStart=_isOffsetFromTravelTimeStart;
@property(readonly, nonatomic) NSString *alarmID; // @synthesize alarmID=_alarmID;
@property(readonly, nonatomic) NSString *dismissalID; // @synthesize dismissalID=_dismissalID;
@property(readonly, nonatomic) _Bool acknowledged; // @synthesize acknowledged=_acknowledged;
@property(readonly, nonatomic) NSString *externalID; // @synthesize externalID=_externalID;
@property(readonly, nonatomic) long long proximity; // @synthesize proximity=_proximity;
@property(readonly, nonatomic) _Bool tentative; // @synthesize tentative=_tentative;
@property(readonly, nonatomic) _Bool allDay; // @synthesize allDay=_allDay;
@property(readonly, nonatomic) NSURL *entityID; // @synthesize entityID=_entityID;
@property(readonly, nonatomic) NSURL *action; // @synthesize action=_action;
@property(readonly, nonatomic) NSTimeZone *eventTimeZone; // @synthesize eventTimeZone=_eventTimeZone;
@property(readonly, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(readonly, nonatomic) NSDate *eventDate; // @synthesize eventDate=_eventDate;
@property(readonly, nonatomic) NSString *location; // @synthesize location=_location;
@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithTitle:(id)arg1 location:(id)arg2 date:(id)arg3 endDate:(id)arg4 timeZone:(id)arg5 allDay:(_Bool)arg6 tentative:(_Bool)arg7 entityID:(id)arg8 action:(id)arg9 proximity:(long long)arg10 externalID:(id)arg11 acknowledged:(_Bool)arg12 dismissalID:(id)arg13 alarmID:(id)arg14 isOffsetFromTravelTimeStart:(_Bool)arg15;

@end

@interface EKPredicate : NSPredicate <NSSecureCoding>
{
    NSArray *_calendars;
    NSSet *_restrictedCalendarRowIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSSet *restrictedCalendarRowIDs; // @synthesize restrictedCalendarRowIDs=_restrictedCalendarRowIDs;
@property(readonly, nonatomic) NSArray *calendars;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithCalendars:(id)arg1;

@end

@interface EKEventPredicate : EKPredicate <EKDefaultPropertiesLoading, NSSecureCoding>
{
    NSDate *_startDate;
    NSDate *_endDate;
    NSString *_uuid;
    NSTimeZone *_timeZone;
    NSString *_title;
    _Bool _shouldLoadDefaultProperties;
}

+ (id)predicateWithStartDate:(id)arg1 title:(id)arg2 calendars:(id)arg3;
+ (id)predicateWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 eventUUID:(id)arg4 calendars:(id)arg5;
+ (id)predicateWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 loadDefaultProperties:(_Bool)arg5;
+ (id)predicateWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4;
+ (_Bool)supportsSecureCoding;
- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (id)predicateFormat;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;
- (id)defaultPropertiesToLoad;
@property(readonly, nonatomic) _Bool shouldLoadDefaultProperties;
@property(readonly, nonatomic) NSString *title;
@property(readonly, nonatomic) NSTimeZone *timeZone;
@property(readonly, nonatomic) NSString *eventUUID;
@property(readonly, nonatomic) NSDate *endDate;
@property(readonly, nonatomic) NSDate *startDate;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithStartDate:(id)arg1 title:(id)arg2 calendars:(id)arg3;
- (id)initWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 loadDefaultProperties:(_Bool)arg5;
- (id)initWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4;
- (id)initWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 eventUUID:(id)arg4 calendars:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKCalendarItemsWithExternalIdentifierPredicate : EKEventPredicate <NSSecureCoding>
{
    NSString *_externalIdentifier;
}

+ (_Bool)supportsSecureCoding;
- (_Bool)evaluateWithObject:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithExternalIdentifier:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKCalendarNotificationReference : NSObject
{
    CDStruct_f683c4ba _objectID;
    NSDate *_date;
    EKEventStore *_eventStore;
    EKCalendarNotification *_notification;
    int _type;
}

@property(readonly, nonatomic) int type; // @synthesize type=_type;
- (id)description;
- (long long)_notificationTypeForResourceChange:(id)arg1 notificationType:(int)arg2;
@property(readonly, nonatomic) EKCalendarNotification *notification;
- (void)dealloc;
- (id)initWithType:(int)arg1 objectID:(CDStruct_f683c4ba)arg2 eventStore:(id)arg3;
- (id)initWithType:(int)arg1 objectID:(CDStruct_f683c4ba)arg2 date:(id)arg3 eventStore:(id)arg4;

@end

@interface EKCalendarResourceChangeNotification : EKCalendarNotification
{
    NSString *_location;
    NSString *_calendarName;
    NSDate *_startDate;
    NSDate *_endDate;
    _Bool _allDay;
    NSString *_eventID;
    unsigned int _changeType;
    _Bool _dateChanged;
    _Bool _timeChanged;
    _Bool _locationChanged;
    _Bool _titleChanged;
    NSNumber *_createCount;
    NSNumber *_updateCount;
    NSNumber *_deleteCount;
    NSDate *_startDateForNextOccurrence;
}

@property(retain, nonatomic) NSNumber *deleteCount; // @synthesize deleteCount=_deleteCount;
@property(retain, nonatomic) NSNumber *updateCount; // @synthesize updateCount=_updateCount;
@property(retain, nonatomic) NSNumber *createCount; // @synthesize createCount=_createCount;
@property(nonatomic) _Bool titleChanged; // @synthesize titleChanged=_titleChanged;
@property(nonatomic) _Bool locationChanged; // @synthesize locationChanged=_locationChanged;
@property(nonatomic) _Bool timeChanged; // @synthesize timeChanged=_timeChanged;
@property(nonatomic) _Bool dateChanged; // @synthesize dateChanged=_dateChanged;
@property(nonatomic) unsigned int changeType; // @synthesize changeType=_changeType;
@property(retain, nonatomic) NSString *eventID; // @synthesize eventID=_eventID;
@property(nonatomic) _Bool allDay; // @synthesize allDay=_allDay;
@property(retain, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(retain, nonatomic) NSDate *startDateForNextOccurrence; // @synthesize startDateForNextOccurrence=_startDateForNextOccurrence;
@property(retain, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
@property(retain, nonatomic) NSString *calendarName; // @synthesize calendarName=_calendarName;
@property(retain, nonatomic) NSString *location; // @synthesize location=_location;
- (_Bool)needsAlert;
- (id)resourceChangeFromEventStore:(id)arg1;
- (void)dealloc;
- (id)initWithType:(long long)arg1;

@end

@interface EKCalendarSharedCalendarNotification : EKCalendarNotification
{
    int _sharingInvitationResponse;
    unsigned long long _allowedEntityTypes;
}

@property(nonatomic) unsigned long long allowedEntityTypes; // @synthesize allowedEntityTypes=_allowedEntityTypes;
@property(nonatomic) int sharingInvitationResponse; // @synthesize sharingInvitationResponse=_sharingInvitationResponse;
- (id)calendarFromEventStore:(id)arg1;
- (id)initWithType:(long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKDaemonConnection : NSObject <CADClientInterface>
{
    unsigned int _options;
    NSString *_dbPath;
    id _delegate;
    NSObject<OS_dispatch_queue> *_connectionLock;
    id <CADInterface> _remoteOperationProxy;
    NSObject<OS_dispatch_queue> *_replyHandlerLock;
    NSMutableDictionary *_cancellableOperations;
    unsigned int _nextCancellationToken;
    _Bool _registeredForStartNote;
    int _connectionIdentifier;
    NSXPCConnection *_xpcConnection;
}

+ (void)waitOnSemaphoreWithBlock:(CDUnknownBlockType)arg1;
@property(nonatomic) int connectionIdentifier; // @synthesize connectionIdentifier=_connectionIdentifier;
@property id delegate; // @synthesize delegate=_delegate;
- (void)CADClientReceiveOccurrenceCacheSearchResults:(id)arg1 forSearchToken:(unsigned int)arg2 finished:(_Bool)arg3;
- (void)_finishAllRepliesOnServerDeath;
- (void)cancelRemoteOperation:(unsigned int)arg1;
- (void)removeCancellableRemoteOperation:(unsigned int)arg1;
- (unsigned int)addCancellableRemoteOperation:(id)arg1;
- (void)_daemonRestarted;
@property(readonly, retain) id <CADInterface> CADOperationProxy;
@property(readonly, retain) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
- (void)disconnect;
- (_Bool)_connectToServer;
- (void)dealloc;
- (id)initWithOptions:(unsigned int)arg1 path:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface EKDebugPreferences : NSObject
{
    CalPreferences *_preferences;
}

+ (id)shared;
@property(nonatomic) double availabilityFreshnessWindow;
@property(nonatomic) double travelLookaheadInterval;
- (id)init;

@end

@interface EKDirectoryRecord : NSObject
{
    NSString *_displayName;
    NSString *_preferredAddress;
}

@property(retain, nonatomic) NSString *preferredAddress; // @synthesize preferredAddress=_preferredAddress;
@property(retain, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
- (id)description;

@end

@interface EKDirectoryGroup : EKDirectoryRecord
{
}

@end

@interface EKDirectoryLocation : EKDirectoryRecord
{
}

@end

@interface EKDirectoryPerson : EKDirectoryRecord
{
}

@end

@interface EKDirectoryResource : EKDirectoryRecord
{
}

@end

@interface EKDirectorySearchOperation : NSOperation
{
    _Bool _isFinished;
    _Bool _isExecuting;
    NSString *_accountID;
    EKDirectorySearchQuery *_query;
    CDUnknownBlockType _resultsBlock;
    id _searchID;
    _Bool _numberOfMatchesExceededLimit;
    NSError *_error;
}

@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) _Bool numberOfMatchesExceededLimit; // @synthesize numberOfMatchesExceededLimit=_numberOfMatchesExceededLimit;
- (void)_finishWithError:(id)arg1;
- (id)_processLocationsInResults:(id)arg1;
- (id)_processResourcesInResults:(id)arg1;
- (id)_processGroupsInResults:(id)arg1;
- (id)_processPeopleInResults:(id)arg1;
- (void)_processResults:(id)arg1;
- (id)_recordTypes;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (void)cancel;
- (_Bool)isConcurrent;
- (void)main;
- (void)start;
- (void)dealloc;
- (id)initWithSource:(id)arg1 query:(id)arg2 resultsBlock:(CDUnknownBlockType)arg3;
- (id)init;

@end

@interface EKDirectorySearchQuery : NSObject
{
    _Bool _findGroups;
    _Bool _findLocations;
    _Bool _findResources;
    _Bool _findUsers;
    NSSet *_terms;
    unsigned long long _resultLimit;
}

@property(nonatomic) unsigned long long resultLimit; // @synthesize resultLimit=_resultLimit;
@property(nonatomic) _Bool findUsers; // @synthesize findUsers=_findUsers;
@property(nonatomic) _Bool findResources; // @synthesize findResources=_findResources;
@property(nonatomic) _Bool findLocations; // @synthesize findLocations=_findLocations;
@property(nonatomic) _Bool findGroups; // @synthesize findGroups=_findGroups;
@property(retain, nonatomic) NSSet *terms; // @synthesize terms=_terms;

@end

@interface EKDirectorySearchResultSet : NSObject
{
    NSSet *_locations;
    NSSet *_groups;
    NSSet *_resources;
    NSSet *_people;
}

@property(retain, nonatomic) NSSet *people; // @synthesize people=_people;
@property(retain, nonatomic) NSSet *resources; // @synthesize resources=_resources;
@property(retain, nonatomic) NSSet *groups; // @synthesize groups=_groups;
@property(retain, nonatomic) NSSet *locations; // @synthesize locations=_locations;

@end

@interface EKEvent : EKCalendarItem
{
    _Bool _occurrenceIsAllDay;
    _Bool _requiresDetachDueToSnoozedAlarm;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
}

+ (id)privacyLevelAsString:(long long)arg1;
+ (id)eventWithEventStore:(id)arg1;
@property(nonatomic) _Bool requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property(nonatomic) _Bool occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;
- (_Bool)removeWithSpan:(int)arg1 error:(id *)arg2;
- (_Bool)_isInitialOccurrenceDate:(id)arg1;
- (_Bool)_cancelWithSpan:(int)arg1 error:(id *)arg2;
- (void)_deleteThisOccurrence;
- (_Bool)_deleteWithSpan:(int)arg1 error:(id *)arg2;
- (_Bool)_shouldDeclineInsteadOfDelete;
- (_Bool)_shouldCancelInsteadOfDeleteWithSpan:(int)arg1;
- (_Bool)_checkStartDateConstraintAgainstDate:(CDStruct_b0fa4487)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (_Bool)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (_Bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)arg1;
- (_Bool)_validateDurationConstrainedToRecurrenceInterval;
- (_Bool)_validateDatesAndRecurrencesGivenSpan:(int)arg1 error:(id *)arg2;
- (_Bool)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
- (id)_dateForNextOccurrence;
- (void)rollback;
- (void)revert;
- (void)didCommit;
- (id)dirtyPropertiesToSkip;
- (_Bool)commitWithSpan:(int)arg1 error:(id *)arg2;
- (_Bool)validateWithSpan:(int)arg1 error:(id *)arg2;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (_Bool)refresh;
- (id)description;
@property(readonly, nonatomic) _Bool canBeRespondedTo;
- (_Bool)allowsAlarmModifications;
- (_Bool)hasSelfAttendee;
@property(readonly, nonatomic) _Bool canSetAvailability;
@property(readonly, copy, nonatomic) NSString *uniqueId;
@property(readonly, nonatomic) NSDate *participationStatusModifiedDate;
@property(readonly, nonatomic) int pendingParticipationStatus;
@property(readonly, nonatomic) _Bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property(nonatomic) long long travelAdvisoryBehavior;
@property(readonly, nonatomic) _Bool eligibleForTravelAdvisories;
- (_Bool)changingAllDayPropertyIsAllowed;
@property(readonly) _Bool canDetachSingleOccurrence;
- (_Bool)requiresDetach;
@property(readonly, nonatomic) _Bool responseMustApplyToAll;
- (_Bool)allowsCalendarModifications;
- (_Bool)allowsRecurrenceModifications;
@property(readonly) _Bool isEditable;
@property(readonly, nonatomic) _Bool isDetached;
- (long long)compareStartDateWithEvent:(id)arg1;
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (_Bool)isTentative;
@property(readonly, nonatomic) _Bool attendeeReplyChanged;
@property(readonly, nonatomic) _Bool locationChanged;
@property(readonly, nonatomic) _Bool titleChanged;
@property(readonly, nonatomic) _Bool timeChanged;
@property(readonly, nonatomic) _Bool dateChanged;
@property(nonatomic) long long privacyLevel;
@property(readonly, nonatomic) _Bool allowsPrivacyLevelModifications;
@property(readonly) _Bool isTravelTimeEditable;
@property(readonly) long long travelRoutingMode;
@property(nonatomic) double travelTime;
@property(readonly) NSDate *startDateIncludingTravel;
- (id)_travelTimeInternalDescription;
- (void)clearInvitationStatus;
@property(nonatomic) unsigned long long invitationStatus;
@property(copy) NSString *responseComment;
@property(nonatomic) int availability;
- (id)startDateForRecurrence;
- (void)setRecurrenceRule:(id)arg1;
- (id)recurrenceRule;
@property(readonly, nonatomic) long long birthdayPersonID;
- (int)_parentParticipationStatus;
@property(nonatomic) int participationStatus;
- (void)setNeedsOccurrenceCacheUpdate:(_Bool)arg1;
- (_Bool)needsOccurrenceCacheUpdate;
- (void)setModifiedProperties:(unsigned int)arg1;
@property(readonly, nonatomic) unsigned int modifiedProperties;
@property(readonly, nonatomic) int status;
- (CDStruct_b0fa4487)endDatePinnedForAllDay;
- (CDStruct_b0fa4487)startDatePinnedForAllDay;
@property(readonly, nonatomic) CDStruct_b0fa4487 endDateGr;
@property(readonly, nonatomic) CDStruct_b0fa4487 startDateGr;
- (CDStruct_b0fa4487)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
@property(readonly, copy) NSDate *initialEndDate;
@property(readonly, nonatomic) NSDate *occurrenceDate;
@property(readonly, copy) NSDate *initialStartDate;
- (id)_effectiveTimeZone;
- (void)setTimeZone:(id)arg1;
@property(copy, nonatomic) NSDate *endDate;
@property(readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property(readonly) double durationIncludingTravel;
@property(readonly) double duration;
@property(copy, nonatomic) NSDate *startDate;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property(readonly) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (_Bool)_isAllDay;
- (id)title;
- (id)committedValueForKey:(id)arg1;
- (void)_sendModifiedNote;
@property(readonly) _Bool isAllDayDirty;
@property(readonly) _Bool isEndDateDirty;
@property(readonly) _Bool isStartDateDirty;
@property(readonly) _Bool isStatusDirty;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)exportToICS;
@property(readonly, nonatomic) EKEventStore *eventStore;
@property(readonly, nonatomic) NSURL *externalURL;
- (id)externalURI;
@property(readonly, nonatomic) NSString *eventIdentifier;
- (void)dealloc;
- (id)_persistentEvent;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithEventStore:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, nonatomic) NSString *UUID;
@property(readonly, nonatomic) NSArray *attachments;
@property(readonly, nonatomic) EKParticipant *organizer;

@end

@interface EKEventCreatedFromSuggestionPredicate : EKPredicate <EKDefaultPropertiesLoading>
{
    NSString *_opaqueKey;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) NSString *opaqueKey; // @synthesize opaqueKey=_opaqueKey;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)defaultPropertiesToLoad;
- (_Bool)shouldLoadDefaultProperties;
- (_Bool)evaluateWithObject:(id)arg1;
- (void)dealloc;
- (id)initWithOpaqueKey:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface EKEventOccurrenceInfo : NSObject
{
    CDStruct_6a127a3b _occurrenceInfo;
}

@property(nonatomic) CDStruct_6a127a3b occurrenceInfo; // @synthesize occurrenceInfo=_occurrenceInfo;
- (id)description;
- (id)initWithOccurrenceInfo:(CDStruct_6a127a3b)arg1;

@end

@interface EKEventStore : NSObject <EKDaemonConnection>
{
    unsigned int _flags;
    NSMutableDictionary *_registeredObjects;
    NSMutableDictionary *_publicRegisteredObjects;
    NSMutableSet *_insertedObjects;
    NSMutableSet *_deletedObjects;
    NSMutableSet *_updatedObjects;
    NSNumber *_defaultTimedAlarmOffset;
    NSNumber *_defaultAllDayAlarmOffset;
    EKCalendar *_defaultCalendarForNewEvents;
    EKCalendar *_defaultCalendarForNewReminders;
    EKDaemonConnection *_database;
    double _lastDatabaseNotificationTimestamp;
    NSTimeZone *_timeZone;
    NSMutableDictionary *_calendars;
    NSMutableDictionary *_sources;
    NSMutableSet *_objectsPendingCommit;
    NSObject<OS_dispatch_queue> *_calendarQueue;
    NSObject<OS_dispatch_queue> *_registeredQueue;
    NSObject<OS_dispatch_queue> *_unsavedChangesQueue;
    NSObject<OS_dispatch_queue> *_dbChangedQueue;
    NSMutableDictionary *_cachedValidatedEmails;
}

+ (long long)authorizationStatusForEntityType:(unsigned long long)arg1;
+ (Class)publicClassForEntityName:(id)arg1;
+ (Class)classForEntityName:(id)arg1;
@property(retain, nonatomic) NSMutableDictionary *_cachedValidatedEmails; // @synthesize _cachedValidatedEmails;
@property(nonatomic) NSObject<OS_dispatch_queue> *dbChangedQueue; // @synthesize dbChangedQueue=_dbChangedQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *unsavedChangesQueue; // @synthesize unsavedChangesQueue=_unsavedChangesQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *registeredQueue; // @synthesize registeredQueue=_registeredQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *calendarQueue; // @synthesize calendarQueue=_calendarQueue;
@property(nonatomic) NSMutableSet *objectsPendingCommit; // @synthesize objectsPendingCommit=_objectsPendingCommit;
@property(retain, nonatomic) NSMutableDictionary *_sources; // @synthesize _sources;
@property(retain, nonatomic) NSMutableDictionary *_calendars; // @synthesize _calendars;
@property(nonatomic) unsigned int flags; // @synthesize flags=_flags;
@property(nonatomic) double lastDatabaseNotificationTimestamp; // @synthesize lastDatabaseNotificationTimestamp=_lastDatabaseNotificationTimestamp;
@property(retain, nonatomic) EKDaemonConnection *database; // @synthesize database=_database;
@property(retain, nonatomic) EKCalendar *_defaultCalendarForNewReminders; // @synthesize _defaultCalendarForNewReminders;
@property(retain, nonatomic) EKCalendar *_defaultCalendarForNewEvents; // @synthesize _defaultCalendarForNewEvents;
@property(nonatomic) NSMutableSet *updatedObjects; // @synthesize updatedObjects=_updatedObjects;
@property(nonatomic) NSMutableSet *deletedObjects; // @synthesize deletedObjects=_deletedObjects;
@property(nonatomic) NSMutableSet *insertedObjects; // @synthesize insertedObjects=_insertedObjects;
@property(nonatomic) NSMutableDictionary *publicRegisteredObjects; // @synthesize publicRegisteredObjects=_publicRegisteredObjects;
@property(nonatomic) NSMutableDictionary *registeredObjects; // @synthesize registeredObjects=_registeredObjects;
- (_Bool)moveDiagnosticsLogToCrashReporterFolder;
- (int)emailAddressValidationStatus:(id)arg1;
- (void)cacheValidationStatusForEmail:(id)arg1 status:(int)arg2;
@property(readonly, nonatomic) EKAlarm *defaultAllDayAlarm;
@property(retain, nonatomic) NSNumber *defaultAllDayAlarmOffset; // @synthesize defaultAllDayAlarmOffset=_defaultAllDayAlarmOffset;
@property(readonly, nonatomic) EKAlarm *defaultTimedAlarm;
@property(retain, nonatomic) NSNumber *defaultTimedAlarmOffset; // @synthesize defaultTimedAlarmOffset=_defaultTimedAlarmOffset;
- (void)markChangedObjectIDsConsumedUpToToken:(long long)arg1;
- (void)fetchChangedObjectIDsSinceToken:(long long)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (_Bool)registerForDetailedChangeTracking:(id *)arg1;
- (_Bool)isDataProtected;
- (void)_protectedDataDidBecomeAvailable;
- (id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)arg1;
- (id)predicateForEventsWithStartDate:(id)arg1 title:(id)arg2 source:(id)arg3;
- (id)predicateForTravelEventsInCalendars:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (id)predicateForMasterEventsInCalendars:(id)arg1;
- (id)predicateForUpcomingEventsWithLimit:(int)arg1;
- (id)predicateForUnalertedEvents;
- (id)predicateForUnacknowledgedEvents;
- (id)predicateForNotificationCenterVisibleEvents;
- (id)predicateForNotifiableEvents;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 eventUUID:(id)arg3 calendars:(id)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 loadDefaultProperties:(_Bool)arg4;
- (id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3;
- (void)locationBasedAlarmOccurrencesWithCompletion:(CDUnknownBlockType)arg1;
- (void)alarmOccurrencesBetweenStartDate:(id)arg1 endDate:(id)arg2 inCalendars:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)alarmWithUUID:(id)arg1;
- (void)cancelFetchRequest:(id)arg1;
- (id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(CDUnknownBlockType)arg2;
- (void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)eventsMatchingPredicate:(id)arg1;
- (void)_waitOnSemaphore:(id)arg1;
- (_Bool)commit:(id *)arg1;
- (void)reset;
- (void)rollback;
- (void)_deleteObject:(id)arg1;
- (void)_insertObject:(id)arg1;
- (void)_trackModifiedObject:(id)arg1;
- (id)publicObjectWithObjectID:(id)arg1;
- (id)publicObjectWithPersistentObject:(id)arg1;
- (id)objectWithObjectID:(id)arg1;
- (id)registerFetchedObjectWithID:(id)arg1 withDefaultLoadedProperties:(id)arg2 inSet:(id)arg3;
- (id)registerFetchedObjectWithID:(id)arg1;
- (id)_addFetchedObjectWithID:(id)arg1;
- (void)_forgetRegisteredObjects;
- (void)_reregisterObject:(id)arg1 oldID:(id)arg2;
- (void)_unregisterObject:(id)arg1;
- (void)_registerObject:(id)arg1;
- (void)_registerObjectImmediate:(id)arg1;
- (void)refreshSourcesIfNecessary;
- (void)refreshSourcesIfNecessary:(_Bool)arg1;
- (void)_refreshDASource:(id)arg1 isUserRequested:(_Bool)arg2;
- (_Bool)removeInviteReplyNotifications:(id)arg1 error:(id *)arg2;
- (_Bool)removeInviteReplyNotification:(id)arg1 error:(id *)arg2;
- (_Bool)markInviteReplyNotificationAlerted:(id)arg1;
- (id)inviteReplyNotifications;
@property(readonly, nonatomic) NSArray *reminderNotifications;
@property(readonly, nonatomic) NSArray *inboxRepliedSectionItems;
@property(readonly, nonatomic) NSArray *eventNotifications;
- (_Bool)removeResourceChanges:(id)arg1 error:(id *)arg2;
- (_Bool)removeResourceChange:(id)arg1 error:(id *)arg2;
- (_Bool)markResourceChangeAlerted:(id)arg1 error:(id *)arg2;
- (id)resourceChangesForEntityTypes:(unsigned long long)arg1;
- (id)sharedCalendarInvitationsForEntityTypes:(unsigned long long)arg1;
- (id)earliestExpiringNotifiableEventEndDateAfterDate:(id)arg1 timeZone:(id)arg2;
@property(readonly, nonatomic) int notifiableEventCount;
@property(readonly, nonatomic) int unacknowledgedEventCount;
- (id)markNotificationsAlertedAndSave:(id)arg1;
@property(nonatomic) _Bool showDeclinedEvents;
- (id)scheduledTaskCacheFetchTasksOnDay:(id)arg1;
- (id)scheduledTaskCacheFetchDaysAndTaskCounts;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)arg1 onDay:(double)arg2;
- (_Bool)occurrenceCacheOccurrencesAreBeingGenerated;
- (id)insertNewExceptionDateWithDate:(id)arg1;
- (id)insertNewEvent;
- (id)calendarWithExternalURI:(id)arg1;
- (id)calendarWithIdentifier:(id)arg1;
- (id)doEvents:(id)arg1 haveOccurrencesAfterDate:(id)arg2;
- (id)closestCachedOccurrenceToDate:(double)arg1 forEventUID:(int)arg2;
- (id)eventWithUUID:(id)arg1;
- (_Bool)fetchProperties:(id)arg1 forReminders:(id)arg2;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(_Bool)arg3 completed:(_Bool)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned long long)arg9;
- (id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(_Bool)arg3 completed:(_Bool)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8;
- (id)predicateForRemindersWithSearchTerm:(id)arg1;
- (id)predicateForCompletedRemindersWithCalendars:(id)arg1;
- (id)predicateForRemindersWithTitle:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForAllRemindersWithDueDate:(id)arg1 calendars:(id)arg2;
- (id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)predicateForIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3;
- (id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(_Bool)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(_Bool)arg4 completed:(_Bool)arg5 includeDatesBefore:(_Bool)arg6 sortOrder:(int)arg7;
- (id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3;
- (id)predicateForRemindersInCalendars:(id)arg1;
- (id)fetchRemindersMatchingPredicate:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (int)countOfRemindersMatchingPredicate:(id)arg1;
- (id)remindersMatchingPredicate:(id)arg1;
- (id)insertNewReminder;
- (id)_calendarItemsMatchingPredicate:(id)arg1;
- (id)calendarItemsWithExternalIdentifier:(id)arg1;
- (id)calendarItemWithIdentifier:(id)arg1;
- (id)reminderWithExternalURI:(id)arg1;
- (_Bool)removeReminder:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeReminder:(id)arg1 error:(id *)arg2;
- (_Bool)saveReminder:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveReminder:(id)arg1 error:(id *)arg2;
- (void)setDefaultCalendarForNewReminders:(id)arg1;
- (id)defaultCalendarForNewReminders;
- (void)setDefaultCalendarForNewEvents:(id)arg1;
@property(readonly, nonatomic) EKCalendar *defaultCalendarForNewEvents;
- (struct CGColor *)copyCGColorForNewCalendar;
- (id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3;
- (void)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3 completion:(CDUnknownBlockType)arg4;
- (id)importICS:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3;
- (_Bool)markEventAlerted:(id)arg1;
- (_Bool)setInvitationStatus:(unsigned long long)arg1 forEvents:(id)arg2 error:(id *)arg3;
- (_Bool)setInvitationStatus:(unsigned long long)arg1 forEvent:(id)arg2 error:(id *)arg3;
- (_Bool)removeEvent:(id)arg1 span:(int)arg2 commit:(_Bool)arg3 error:(id *)arg4;
- (_Bool)saveEvent:(id)arg1 span:(int)arg2 commit:(_Bool)arg3 error:(id *)arg4;
- (_Bool)removeEvent:(id)arg1 span:(int)arg2 error:(id *)arg3;
- (_Bool)saveEvent:(id)arg1 span:(int)arg2 error:(id *)arg3;
- (id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2;
- (id)eventWithUniqueId:(id)arg1;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(_Bool)arg3;
- (id)eventForUID:(id)arg1 occurrenceDate:(id)arg2;
- (id)_eventOccurrenceWithURI:(id)arg1;
- (id)_eventWithURI:(id)arg1 checkValid:(_Bool)arg2;
- (_Bool)_parseURI:(id)arg1 expectedScheme:(id)arg2 identifier:(id *)arg3 options:(id *)arg4;
- (id)eventWithIdentifier:(id)arg1;
- (_Bool)deleteCalendar:(id)arg1 forEntityType:(int)arg2 error:(id *)arg3;
- (_Bool)removeCalendar:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveCalendar:(id)arg1 commit:(_Bool)arg2 error:(id *)arg3;
- (_Bool)removeCalendar:(id)arg1 error:(id *)arg2;
- (_Bool)saveCalendar:(id)arg1 error:(id *)arg2;
- (void)_addObjectToPendingCommits:(id)arg1;
- (id)calendarWithID:(id)arg1;
- (id)_calendarWithID:(id)arg1;
- (id)readWriteCalendarsForEntityType:(unsigned long long)arg1;
- (int)readWriteCalendarCountForEntityType:(unsigned long long)arg1;
- (_Bool)_calendar:(id)arg1 supportsEntityType:(unsigned long long)arg2;
- (id)_allCalendars;
- (id)calendarsForEntityType:(unsigned long long)arg1;
- (_Bool)markCalendarAlerted:(id)arg1;
- (_Bool)hideCalendarsFromNotificationCenter:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSArray *calendars;
- (_Bool)removeSource:(id)arg1 error:(id *)arg2;
- (_Bool)saveSource:(id)arg1 error:(id *)arg2;
- (id)sourceWithIdentifier:(id)arg1;
- (id)ownedSources;
- (id)localSource;
- (id)sources;
- (void)_saveWithoutNotify;
@property(readonly, nonatomic) NSString *eventStoreIdentifier;
- (void)daemonRestarted;
- (void)_databaseChangedExternally;
- (void)_validateObjectIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)changesSinceSequenceNumber:(int)arg1;
- (int)sequenceNumber;
- (void)setSourceAccountManagement:(int)arg1;
@property(readonly) EKDaemonConnection *connection;
@property(copy, nonatomic) NSTimeZone *timeZone; // @synthesize timeZone=_timeZone;
- (void)_accessStatusChanged;
- (void)requestAccessToEntityType:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_requestAccessForEntityType:(unsigned long long)arg1;
- (void)dealloc;
- (oneway void)release;
- (id)initWithOptions:(unsigned int)arg1 path:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface EKInviteReplyNotification : EKObject
{
}

@property(readonly, nonatomic) EKCalendar *calendar;
- (void)clearAlertedStatus;
@property(readonly, nonatomic) _Bool alerted;
@property(readonly, nonatomic) NSDate *creationDate;
@property(readonly, nonatomic) int status;
@property(readonly, nonatomic) NSString *shareeLastName;
@property(readonly, nonatomic) NSString *shareeFirstName;
@property(readonly, nonatomic) NSString *shareeAddress;
@property(readonly, nonatomic) NSString *shareeDisplayName;
@property(readonly, nonatomic) NSString *calendarName;
- (id)_persistentInviteReplyNotification;
- (id)lazyLoadRelationForKey:(id)arg1;

@end

@interface EKMasterEventsPredicate : EKPredicate
{
}

+ (id)predicateWithCalendarIDs:(id)arg1;
+ (_Bool)supportsSecureCoding;

@end

__attribute__((visibility("hidden")))
@interface EKMutableCalendarDate : EKCalendarDate
{
}

- (void)addGregorianUnits:(CDStruct_6e43267c)arg1;
- (void)addDays:(long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface EKNotifiableEventsPredicate : NSPredicate <EKDefaultPropertiesLoading, NSSecureCoding>
{
}

+ (id)predicate;
+ (_Bool)supportsSecureCoding;
- (id)defaultPropertiesToLoad;
- (_Bool)shouldLoadDefaultProperties;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKNotificationCenterVisibleEventsPredicate : NSPredicate <NSSecureCoding>
{
}

+ (id)predicate;
+ (_Bool)supportsSecureCoding;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;

@end

@interface EKObjectID : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _temporary;
    int _entityType;
    int _rowID;
}

+ (id)objectIDWithURL:(id)arg1;
+ (id)temporaryObjectIDWithEntityType:(int)arg1;
+ (id)objectIDWithEntityType:(int)arg1 rowID:(int)arg2;
+ (id)objectIDWithCADObjectID:(CDStruct_f683c4ba)arg1;
+ (_Bool)supportsSecureCoding;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)URIRepresentation;
- (id)stringRepresentation;
- (id)description;
- (_Bool)isTemporary;
- (CDStruct_f683c4ba)CADObjectID;
- (int)rowID;
- (int)entityType;
- (id)entityName;
- (id)dictionaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithEntityType:(int)arg1 rowID:(int)arg2 temporary:(_Bool)arg3;

@end

__attribute__((visibility("hidden")))
@interface EKObjectRelation : NSObject
{
    EKObject *_owner;
    NSString *_relationName;
    _Bool _dirty;
    _Bool _loaded;
    NSString *_inverseName;
}

@property(readonly, nonatomic) NSString *inverseName; // @synthesize inverseName=_inverseName;
@property(readonly, nonatomic) NSString *relationName; // @synthesize relationName=_relationName;
@property(readonly, nonatomic) EKObject *owner; // @synthesize owner=_owner;
- (void)_removeRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (void)_addRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (id)committedValue;
- (_Bool)validate:(id *)arg1;
- (void)relatedObjectDidChange;
- (_Bool)isDirty;
- (void)didCommit;
- (void)refresh;
- (void)rollback;
- (void)reset;
- (void)updatePersistentObject;
- (_Bool)isWeak;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initWithOwner:(id)arg1 relationName:(id)arg2 inverseRelationName:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface EKObjectToManyRelation : EKObjectRelation
{
    NSMutableSet *_loadedItems;
    NSMutableSet *_effectiveItems;
    NSMutableSet *_addedItems;
    NSMutableSet *_removedItems;
}

@property(retain, nonatomic) NSMutableSet *removedItems; // @synthesize removedItems=_removedItems;
@property(retain, nonatomic) NSMutableSet *addedItems; // @synthesize addedItems=_addedItems;
@property(retain, nonatomic) NSMutableSet *effectiveItems; // @synthesize effectiveItems=_effectiveItems;
@property(retain, nonatomic) NSMutableSet *loadedItems; // @synthesize loadedItems=_loadedItems;
- (id)description;
- (void)refresh;
- (void)rollback;
- (void)reset;
- (void)didCommit;
- (void)updatePersistentObject;
- (id)committedValue;
- (_Bool)validate:(id *)arg1;
- (void)_forgetRelatedObject:(id)arg1;
- (void)_removeRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (void)_addRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (void)removeItem:(id)arg1;
- (void)addItem:(id)arg1;
@property(readonly, nonatomic) unsigned long long count;
@property(copy, nonatomic) NSSet *items;
- (id)_effectiveItems;
- (id)_loadedItems;
@property(readonly, nonatomic) _Bool itemsWereRemoved;
@property(readonly, nonatomic) _Bool itemsWereAdded;
- (_Bool)isWeak;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface EKObjectToOneRelation : EKObjectRelation
{
    EKObject *_relatedObject;
    _Bool _weak;
}

- (id)description;
- (_Bool)validate:(id *)arg1;
- (void)didCommit;
- (void)refresh;
- (void)rollback;
- (void)_unload;
- (void)reset;
- (void)updatePersistentObject;
- (id)committedValue;
- (id)relatedObject;
- (void)_setRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (void)_removeRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (void)_addRelatedObject:(id)arg1 setInverse:(_Bool)arg2 dirty:(_Bool)arg3;
- (void)setRelatedObject:(id)arg1;
- (void)_clear;
- (_Bool)isWeak;
- (void)dealloc;
- (id)initWithObject:(id)arg1 relationName:(id)arg2 inverseRelationName:(id)arg3 weak:(_Bool)arg4;

@end

@interface EKOccurrenceCacheSearch : NSObject <EKCancellableRemoteOperation>
{
    NSSet *_calendars;
    NSString *_searchTerm;
    EKEventStore *_store;
    CDUnknownBlockType _callback;
    NSNumber *_replyID;
    _Bool _canceled;
}

+ (id)searchWithCalendars:(id)arg1 searchTerm:(id)arg2 store:(id)arg3 callback:(CDUnknownBlockType)arg4;
- (id)searchTerm;
- (void)receivedBatchResultsFromServer:(id)arg1 finished:(_Bool)arg2;
- (void)cancel;
- (void)run;
- (int)performSearchOperation:(unsigned int)arg1 inCalendars:(id)arg2 withEventStore:(id)arg3 andSearchTerm:(id)arg4;
- (void)dealloc;
- (id)initWithCalendars:(id)arg1 searchTerm:(id)arg2 store:(id)arg3 callback:(CDUnknownBlockType)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKOccurrenceCacheLocationSearch : EKOccurrenceCacheSearch
{
}

- (int)performSearchOperation:(unsigned int)arg1 inCalendars:(id)arg2 withEventStore:(id)arg3 andSearchTerm:(id)arg4;

@end

@interface EKOrganizer : EKParticipant
{
}

+ (id)organizerWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3 isCurrentUser:(_Bool)arg4;
@property(nonatomic, getter=isCurrentUser) _Bool currentUser;
- (id)owner;
- (id)lazyLoadRelationForKey:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3 isCurrentUser:(_Bool)arg4;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKPersistentObject : NSObject
{
    struct _opaque_pthread_mutex_t _lock;
    EKEventStore *_eventStore;
    id _objectID;
    struct __CFDictionary *_loadedProperties;
    NSMutableDictionary *_referencers;
    NSMutableSet *_dirtyProperties;
    unsigned int _flags;
    NSMutableDictionary *_committedProperties;
}

+ (id)relations;
+ (id)defaultPropertiesToLoad;
@property(retain, nonatomic) NSMutableDictionary *committedProperties; // @synthesize committedProperties=_committedProperties;
- (id)dump;
- (void)faultPropertiesWithNames:(id)arg1;
- (void)_loadDefaultPropertiesIfNeeded;
- (void)_takeValuesForDefaultProperties:(id)arg1 inSet:(id)arg2;
- (void)takeValuesForDefaultProperties:(id)arg1 inSet:(id)arg2;
- (void)_takeValues:(id)arg1 forProperties:(id)arg2;
- (void)takeValues:(id)arg1 forProperties:(id)arg2;
- (_Bool)_loadChildIdentifiersForKey:(id)arg1 values:(id *)arg2;
- (_Bool)_loadRelationForKey:(id)arg1 value:(id *)arg2;
- (void)primitiveSetDataValue:(id)arg1 forKey:(id)arg2;
- (id)primitiveDataValueForKey:(id)arg1;
- (void)primitiveSetURLValue:(id)arg1 forKey:(id)arg2;
- (id)primitiveURLValueForKey:(id)arg1;
- (void)primitiveSetStringValue:(id)arg1 forKey:(id)arg2;
- (id)primitiveStringValueForKey:(id)arg1;
- (id)_loadStringValueForKey:(id)arg1;
- (void)primitiveSetDateValue:(id)arg1 forKey:(id)arg2;
- (id)primitiveDateValueForKey:(id)arg1;
- (void)primitiveSetBoolValue:(_Bool)arg1 forKey:(id)arg2;
- (_Bool)primitiveBoolValueForKey:(id)arg1;
- (void)primitiveSetDoubleValue:(double)arg1 forKey:(id)arg2;
- (double)primitiveDoubleValueForKey:(id)arg1;
- (void)primitiveSetIntValue:(int)arg1 forKey:(id)arg2;
- (int)primitiveIntValueForKey:(id)arg1;
- (void)primitiveSetNumberValue:(id)arg1 forKey:(id)arg2;
- (id)primitiveNumberValueForKey:(id)arg1;
- (void)primitiveValueChangedForKey:(id)arg1;
- (void)_primitiveSetValue:(id)arg1 forKey:(id)arg2 daemonSetter:(CDUnknownBlockType)arg3;
- (id)_primitiveValueForKey:(id)arg1 loader:(CDUnknownBlockType)arg2;
- (void)primitiveSetRelationValue:(id)arg1 forKey:(id)arg2;
- (void)primitiveRemoveRelatedObject:(id)arg1 forKey:(id)arg2;
- (void)primitiveAddRelatedObject:(id)arg1 forKey:(id)arg2;
- (void)_removeObjectCore:(id)arg1 fromValues:(id)arg2 relation:(id)arg3;
- (void)_addObjectCore:(id)arg1 toValues:(id)arg2 relation:(id)arg3;
- (id)primitiveRelationValueForKey:(id)arg1;
- (id)committedValueForKey:(id)arg1;
- (void)unloadPropertyForKey:(id)arg1;
- (void)_clearWeakRelations;
- (void)_clearReferences;
- (void)_removeReference:(id)arg1 forKey:(id)arg2;
- (void)_addReference:(id)arg1 forKey:(id)arg2;
- (void)_releaseLoadedProperties;
- (void)_setProperty:(id)arg1 forKey:(id)arg2;
- (void)_fastpathSetProperty:(id)arg1 forKey:(id)arg2 isRelation:(_Bool)arg3;
- (id)_propertyForKey:(id)arg1;
- (_Bool)_shouldRetainPropertyForKey:(id)arg1;
- (id)_relationForKey:(id)arg1;
- (_Bool)_areDefaultPropertiesLoaded;
- (void)_setDefaultPropertiesLoaded:(_Bool)arg1;
- (_Bool)_isPendingDelete;
- (void)_setPendingDelete:(_Bool)arg1;
- (_Bool)_isPendingUpdate;
- (void)_setPendingUpdate:(_Bool)arg1;
- (_Bool)_isPendingInsert;
- (void)_setPendingInsert:(_Bool)arg1;
- (void)rollback;
- (void)reset;
- (void)saved;
- (_Bool)pushDirtyProperties:(id *)arg1;
- (_Bool)validate:(id *)arg1;
- (_Bool)isPropertyLoaded:(id)arg1;
- (void)_addDirtyProperty:(id)arg1;
- (id)dirtyProperties;
- (_Bool)isPropertyDirty:(id)arg1;
- (_Bool)refreshExcludingProperties:(id)arg1;
- (_Bool)refresh;
- (id)_loadedPropertyKeys;
- (void)changed;
- (_Bool)isDirty;
- (_Bool)isNew;
- (_Bool)existsInStore;
- (void)_setObjectID:(id)arg1;
- (id)objectID;
- (void)_setEventStore:(id)arg1;
@property(readonly, nonatomic) EKEventStore *eventStore;
@property(readonly, nonatomic) int entityType;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initCommon;

@end

@interface EKPersistentAlarm : EKPersistentObject <NSCopying>
{
}

+ (id)defaultPropertiesToLoad;
+ (id)relations;
- (_Bool)validate:(id *)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(copy, nonatomic) NSSet *snoozedAlarms;
@property(retain, nonatomic) EKPersistentAlarm *originalAlarm;
@property(nonatomic, getter=isDefaultAlarm) _Bool defaultAlarm;
@property(copy, nonatomic) NSDate *acknowledgedDate;
@property(copy, nonatomic) EKPersistentLocation *location;
@property(nonatomic) long long proximity;
- (void)setOwner:(id)arg1;
- (id)owner;
@property(copy, nonatomic) NSString *externalID;
@property(copy, nonatomic) NSData *externalData;
@property(nonatomic) int alarmType;
@property(copy, nonatomic) NSTimeZone *timeZone;
@property(readonly, nonatomic) _Bool isAbsolute;
@property(copy, nonatomic) NSDate *absoluteDate;
@property(nonatomic) double relativeOffset;
@property(readonly, nonatomic) NSString *UUID;
- (int)entityType;
- (id)init;

@end

@interface EKPersistentAttachment : EKPersistentObject <NSCopying>
{
}

+ (id)relations;
- (id)description;
@property(copy, nonatomic) NSDictionary *XProperties;
@property(readonly, nonatomic) NSString *UUID;
@property(copy, nonatomic) NSNumber *fileSize;
@property(copy, nonatomic) NSURL *localURL;
- (void)setIsBinary:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isBinary;
@property(copy, nonatomic) NSString *fileFormat;
@property(copy, nonatomic) NSString *fileName;
@property(copy, nonatomic) NSURL *URL;
- (int)entityType;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface EKPersistentParticipant : EKPersistentObject <NSCopying>
{
}

+ (id)defaultPropertiesToLoad;
- (id)owner;
@property(copy, nonatomic) NSString *comment;
@property(copy, nonatomic) NSURL *address;
@property(copy, nonatomic) NSString *lastName;
@property(copy, nonatomic) NSString *firstName;
@property(copy, nonatomic) NSString *emailAddress;
@property(copy, nonatomic) NSString *displayName;
@property(readonly, nonatomic) NSString *UUID;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface EKPersistentAttendee : EKPersistentParticipant
{
}

+ (id)attendeeWithEmailAddress:(id)arg1 name:(id)arg2;
+ (id)attendeeWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3;
+ (id)relations;
+ (id)defaultPropertiesToLoad;
@property(nonatomic) _Bool statusChanged;
@property(nonatomic) _Bool commentChanged;
- (_Bool)_valueForFlag:(unsigned int)arg1;
- (void)_setFlag:(unsigned int)arg1 value:(_Bool)arg2;
@property(copy, nonatomic) NSDate *lastModified;
- (id)owner;
- (void)setOwner:(id)arg1;
@property(nonatomic) int pendingStatus;
@property(nonatomic) int participantType;
@property(nonatomic) int participantRole;
@property(nonatomic) int participantStatus;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (int)entityType;
- (id)initWithAddress:(id)arg1 name:(id)arg2;
- (id)initWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3;
- (id)initWithEmailAddress:(id)arg1 name:(id)arg2;

@end

@interface EKPersistentCalendar : EKPersistentObject
{
}

+ (id)calendar;
+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (_Bool)validate:(id *)arg1;
- (void)setDigest:(id)arg1;
- (id)digest;
@property(copy, nonatomic) NSString *pushKey;
@property(copy, nonatomic) NSString *subcalAccountID;
@property(copy, nonatomic) NSString *bulkRequests;
@property(copy, nonatomic) NSString *ownerIdentityLastName;
@property(copy, nonatomic) NSString *ownerIdentityFirstName;
@property(copy, nonatomic) NSURL *ownerIdentityAddress;
@property(copy, nonatomic) NSString *ownerIdentityEmail;
@property(copy, nonatomic) NSString *ownerIdentityDisplayName;
@property(copy, nonatomic) NSString *selfIdentityLastName;
@property(copy, nonatomic) NSString *selfIdentityFirstName;
@property(copy, nonatomic) NSURL *selfIdentityAddress;
@property(copy, nonatomic) NSString *selfIdentityEmail;
@property(copy, nonatomic) NSString *selfIdentityDisplayName;
@property(nonatomic) unsigned long long allowedEntityTypes;
@property(nonatomic) unsigned long long invitationStatus;
@property(retain, nonatomic) EKPersistentSource *source;
- (void)removeSharee:(id)arg1;
- (void)addSharee:(id)arg1;
@property(copy, nonatomic) NSSet *sharees;
@property(nonatomic, getter=isPublished) _Bool published;
- (void)setIsPublished:(_Bool)arg1;
@property(copy, nonatomic) NSString *publishedURL;
@property(nonatomic) long long sharingInvitationResponse;
@property(copy, nonatomic) NSURL *sharedOwnerAddress;
@property(copy, nonatomic) NSString *sharedOwnerName;
@property(nonatomic) long long sharingStatus;
@property(readonly, nonatomic) _Bool isDefaultCalendarForSource;
@property(nonatomic) _Bool isIgnoringEventAlerts;
@property(nonatomic) _Bool isIgnoringSharedCalendarNotifications;
@property(nonatomic) _Bool isMarkedImmutableSharees;
@property(nonatomic) _Bool isMarkedUndeletable;
@property(nonatomic) _Bool isFamilyCalendar;
@property(nonatomic) _Bool isHolidaySubscribedCalendar;
@property(nonatomic) _Bool isFacebookBirthdayCalendar;
@property(nonatomic) _Bool schedulingProhibited;
@property(nonatomic) _Bool canBeShared;
@property(nonatomic) _Bool canBePublished;
@property(nonatomic, getter=isSharingInvitation) _Bool sharingInvitation;
@property(nonatomic, getter=isImmutable) _Bool immutable;
@property(nonatomic, getter=isHidden) _Bool hidden;
@property(nonatomic, getter=isSubscribed) _Bool subscribed;
@property(nonatomic) _Bool prohibitsScheduling;
@property(nonatomic) _Bool allowsContentModifications;
- (id)description;
@property(nonatomic) int displayOrder;
- (void)setUUID:(id)arg1;
@property(readonly, nonatomic) NSString *UUID;
@property(copy, nonatomic) NSString *colorString;
@property(copy, nonatomic) NSString *symbolicColorName;
@property(nonatomic, getter=isColorDisplayOnly) _Bool colorDisplayOnly;
@property(copy, nonatomic) NSString *title;
@property(copy, nonatomic) NSString *externalModificationTag;
@property(copy, nonatomic) NSString *externalID;
- (int)entityType;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKPersistentCalendarItem : EKPersistentObject
{
}

+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (void)deleteSelfAndDetached;
- (void)removeDetachedItem:(id)arg1;
- (void)addDetachedItem:(id)arg1;
@property(copy, nonatomic) NSSet *detachedItems;
@property(retain, nonatomic) EKPersistentCalendarItem *originalItem;
@property(readonly, nonatomic, getter=isDetached) _Bool detached;
@property(copy, nonatomic) NSTimeZone *sharedItemModifiedTimeZone;
@property(copy, nonatomic) NSDate *sharedItemModifiedDate;
@property(copy, nonatomic) NSString *sharedItemModifiedByLastName;
@property(copy, nonatomic) NSString *sharedItemModifiedByFirstName;
@property(copy, nonatomic) NSString *sharedItemModifiedByEmailAddress;
@property(copy, nonatomic) NSString *sharedItemModifiedByDisplayName;
@property(copy, nonatomic) NSTimeZone *sharedItemCreatedTimeZone;
@property(copy, nonatomic) NSDate *sharedItemCreatedDate;
@property(copy, nonatomic) NSString *sharedItemCreatedByLastName;
@property(copy, nonatomic) NSString *sharedItemCreatedByFirstName;
@property(copy, nonatomic) NSString *sharedItemCreatedByEmailAddress;
@property(copy, nonatomic) NSString *sharedItemCreatedByDisplayName;
- (void)removeAttachment:(id)arg1;
- (void)addAttachment:(id)arg1;
@property(copy, nonatomic) NSSet *attachments;
- (_Bool)hasAttachments;
@property(copy, nonatomic) NSData *externalData;
- (void)setExternalModificationTag:(id)arg1;
- (id)externalModificationTag;
@property(copy, nonatomic) NSString *externalID;
@property(copy, nonatomic) NSString *uniqueID;
@property(copy, nonatomic) NSDate *participationStatusModifiedDate;
@property(readonly, nonatomic) int selfParticipantStatus;
@property(retain, nonatomic) EKPersistentOrganizer *organizer;
@property(retain, nonatomic) EKPersistentAttendee *selfAttendee;
- (void)removeAttendee:(id)arg1;
- (void)addAttendee:(id)arg1;
@property(copy, nonatomic) NSSet *attendees;
- (int)attendeeCount;
@property(readonly, nonatomic) _Bool hasAttendees;
- (void)removeExceptionDate:(id)arg1;
- (void)addExceptionDate:(id)arg1;
@property(copy, nonatomic) NSSet *exceptionDates;
- (void)removeRecurrenceRule:(id)arg1;
- (void)addRecurrenceRule:(id)arg1;
@property(copy, nonatomic) NSSet *recurrenceRules;
@property(readonly, nonatomic) _Bool hasRecurrenceRules;
- (void)primitiveValueChangedForKey:(id)arg1;
@property(nonatomic, getter=isDefaultAlarmRemoved) _Bool defaultAlarmRemoved;
- (void)removeAlarm:(id)arg1;
- (void)addAlarm:(id)arg1;
@property(copy, nonatomic) NSSet *alarms;
@property(readonly, nonatomic) _Bool hasAlarms;
@property(copy, nonatomic) NSURL *URL;
@property(copy, nonatomic) NSURL *action;
@property(nonatomic) int sequence;
@property(nonatomic) int priority;
@property(nonatomic, getter=isAllDay) _Bool allDay;
@property(copy, nonatomic) NSTimeZone *endTimeZone;
@property(copy, nonatomic) NSTimeZone *startTimeZone;
@property(copy, nonatomic) NSTimeZone *timeZone;
@property(copy, nonatomic) NSDate *startDate;
@property(copy, nonatomic) NSDate *creationDate;
@property(copy, nonatomic) NSDate *lastModifiedDate;
@property(copy, nonatomic) EKPersistentLocation *startLocation;
@property(copy, nonatomic) EKPersistentLocation *location;
@property(copy, nonatomic) NSString *calendarScale;
@property(copy, nonatomic) NSString *title;
@property(readonly, nonatomic) _Bool hasNotes;
@property(copy, nonatomic) NSString *notes;
@property(retain, nonatomic) EKPersistentCalendar *calendar;
- (_Bool)validate:(id *)arg1;
@property(readonly, nonatomic) NSString *UUID;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKPersistentChangeStoreInfo : NSObject
{
    int _minConsumedSequenceNumber;
    int _secondMinConsumedSequenceNumber;
    NSString *_minConsumedClientIdentifier;
}

@property(nonatomic) int secondMinConsumedSequenceNumber; // @synthesize secondMinConsumedSequenceNumber=_secondMinConsumedSequenceNumber;
@property(retain, nonatomic) NSString *minConsumedClientIdentifier; // @synthesize minConsumedClientIdentifier=_minConsumedClientIdentifier;
@property(nonatomic) int minConsumedSequenceNumber; // @synthesize minConsumedSequenceNumber=_minConsumedSequenceNumber;
- (void)dealloc;
- (id)description;

@end

__attribute__((visibility("hidden")))
@interface EKPersistentChangeStoreRowInfo : NSObject
{
    int _consumedSequenceNumber;
    NSString *_clientIdentifier;
}

@property(nonatomic) int consumedSequenceNumber; // @synthesize consumedSequenceNumber=_consumedSequenceNumber;
@property(retain, nonatomic) NSString *clientIdentifier; // @synthesize clientIdentifier=_clientIdentifier;
- (void)dealloc;
- (id)description;

@end

@interface EKPersistentEvent : EKPersistentCalendarItem
{
    CDStruct_6e43267c _cachedDurationUnits;
}

+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;
+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (void)clearExceptionDatesAndUpdateDetachedOriginalDates;
- (void)filterExceptionDates;
- (id)detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)deleteFromOccurrenceDateOnward:(id)arg1;
- (_Bool)validate:(id *)arg1;
- (void)_adjustForNewCalendar;
- (id)description;
@property(readonly, nonatomic, getter=isEditable) _Bool editable;
@property(readonly, nonatomic) _Bool allowsParticipationStatusModifications;
- (void)removeAction:(id)arg1;
- (void)addAction:(id)arg1;
@property(copy, nonatomic) NSArray *actions;
- (_Bool)_hasExternalIDOrDeliverySource;
- (_Bool)hasValidEventAction;
- (id)committedStartDate;
@property(copy, nonatomic) NSDate *originalStartDate;
- (id)organizer;
@property(copy, nonatomic) NSString *responseComment;
@property(nonatomic) long long travelAdvisoryBehavior;
@property(nonatomic) long long privacyLevel;
@property(nonatomic) int availability;
@property(readonly, nonatomic) unsigned int invitationChangedProperties;
@property(nonatomic) unsigned long long invitationStatus;
- (_Bool)responseMustApplyToAll;
- (long long)birthdayId;
@property(readonly, nonatomic) int pendingParticipationStatus;
@property(nonatomic) int participationStatus;
@property(nonatomic) _Bool needsOccurrenceCacheUpdate;
@property(nonatomic) unsigned int modifiedProperties;
@property(nonatomic) int status;
@property(readonly, nonatomic, getter=isInvitation) _Bool invitation;
@property(readonly, nonatomic, getter=isMeeting) _Bool meeting;
@property(readonly, nonatomic, getter=isFloating) _Bool floating;
@property(readonly, nonatomic) CDStruct_6e43267c durationUnits;
- (_Bool)_areDurationUnitsCached;
- (void)_invalidateCachedDurationUnits;
- (void)primitiveValueChangedForKey:(id)arg1;
@property(copy, nonatomic) NSNumber *travelTime;
@property(copy, nonatomic) NSDate *endDate;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) int birthdayID;
@property(copy, nonatomic) NSURL *URL;
- (id)exportToICS;
@property(readonly, nonatomic) NSString *eventIdentifier;
- (_Bool)refresh;
- (int)entityType;
- (void)dealloc;
- (id)initCommon;

@end

@interface EKPersistentEventAction : EKPersistentObject
{
}

+ (id)relations;
@property(retain, nonatomic) EKPersistentCalendarItem *owner;
- (int)entityType;
@property(copy, nonatomic) NSData *externalData;
@property(copy, nonatomic) NSString *externalModTag;
@property(copy, nonatomic) NSString *externalScheduleID;
@property(copy, nonatomic) NSString *externalFolderID;
@property(copy, nonatomic) NSString *externalID;

@end

@interface EKPersistentExceptionDate : EKPersistentObject
{
}

+ (id)relations;
+ (id)exceptionDateWithDate:(id)arg1;
- (id)description;
@property(retain, nonatomic) EKPersistentCalendarItem *owner;
- (int)entityType;
- (unsigned long long)hash;
@property(readonly, nonatomic) NSDate *date; // @dynamic date;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithExceptionDate:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKPersistentInviteReplyNotification : EKPersistentObject
{
}

+ (id)relations;
+ (id)defaultPropertiesToLoad;
@property(readonly, nonatomic) EKPersistentCalendar *calendar;
@property(readonly, nonatomic) _Bool alerted;
@property(readonly, nonatomic) NSDate *creationDate;
@property(readonly, nonatomic) int status;
@property(readonly, nonatomic) NSString *shareeLastName;
@property(readonly, nonatomic) NSString *shareeFirstName;
@property(readonly, nonatomic) NSString *shareeAddress;
@property(readonly, nonatomic) NSString *shareeDisplayName;
@property(readonly, nonatomic) NSString *calendarName;

@end

@interface EKPersistentLocation : EKPersistentObject <NSCopying>
{
}

+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)alarmOwner;
- (void)setAlarmOwner:(id)arg1;
- (id)calendarItemOwner;
- (void)setCalendarItemOwner:(id)arg1;
@property(copy, nonatomic) NSString *routing;
@property(copy, nonatomic) NSString *addressBookEntityID;
@property(copy, nonatomic) NSNumber *radius;
@property(copy, nonatomic) NSNumber *longitude;
@property(copy, nonatomic) NSNumber *latitude;
@property(copy, nonatomic) NSString *address;
@property(copy, nonatomic) NSString *title;
- (int)entityType;
- (id)init;

@end

@interface EKPersistentOrganizer : EKPersistentParticipant
{
}

+ (id)organizerWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3 isCurrentUser:(_Bool)arg4;
+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (id)owner;
- (void)setOwner:(id)arg1;
@property(nonatomic, getter=isCurrentUser) _Bool currentUser;
- (int)entityType;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1 emailAddress:(id)arg2 address:(id)arg3 isCurrentUser:(_Bool)arg4;

@end

@interface EKPersistentRecurrenceRule : EKPersistentObject <NSCopying>
{
    id _helper;
    EKRecurrenceEnd *_recurrenceEnd;
}

+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (_Bool)validate:(id *)arg1;
@property(copy, nonatomic) NSArray *setPositions;
@property(copy, nonatomic) NSArray *monthsOfTheYear;
@property(copy, nonatomic) NSArray *weeksOfTheYear;
@property(copy, nonatomic) NSArray *daysOfTheYear;
@property(copy, nonatomic) NSArray *daysOfTheMonth;
@property(copy, nonatomic) NSArray *daysOfTheWeek;
- (id)_helper;
@property(nonatomic) long long firstDayOfTheWeek;
@property(readonly, nonatomic) NSDate *cachedEndDate;
@property(nonatomic) unsigned long long count;
@property(copy, nonatomic) NSDate *endDate;
@property(nonatomic) long long interval;
@property(nonatomic) int frequency;
@property(readonly, nonatomic) NSString *calendarIdentifier;
- (CDStruct_6e43267c)gregorianUnits;
- (_Bool)isDirty;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
@property(readonly, nonatomic) _Bool shouldPinMonthDays;
@property(retain, nonatomic) EKPersistentCalendarItem *owner;
@property(readonly, nonatomic) NSString *UUID;
- (int)entityType;
- (id)init;

@end

@interface EKPersistentReminder : EKPersistentCalendarItem
{
    EKObjectID *_parentID;
}

+ (id)generateUniqueIDWithReminder:(id)arg1 calendar:(id)arg2;
@property(copy, nonatomic) EKObjectID *parentID; // @synthesize parentID=_parentID;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)validate:(id *)arg1;
@property(nonatomic, getter=isCompleted) _Bool completed;
- (id)description;
@property(nonatomic) unsigned long long displayOrder;
@property(copy, nonatomic) NSDate *completionDate;
@property(nonatomic) _Bool dueDateAllDay;
@property(copy, nonatomic) NSTimeZone *dueDateTimeZone;
@property(copy, nonatomic) NSDate *dueDate;
- (id)externalURI;
- (void)_sendModifiedNote;
- (int)entityType;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface EKPersistentResourceChange : EKPersistentObject
{
}

+ (id)relations;
+ (id)defaultPropertiesToLoad;
@property(readonly, nonatomic) unsigned int publicStatus;
@property(readonly, nonatomic) _Bool alerted;
@property(readonly, nonatomic) NSString *deletedTitle;
@property(readonly, nonatomic) unsigned int changedProperties;
@property(readonly, nonatomic) NSNumber *deleteCount;
@property(readonly, nonatomic) NSNumber *updateCount;
@property(readonly, nonatomic) NSNumber *createCount;
@property(readonly, copy, nonatomic) NSDate *timestamp;
@property(readonly, nonatomic) unsigned int changeType;
@property(readonly, copy, nonatomic) NSString *changedByLastName;
@property(readonly, copy, nonatomic) NSString *changedByFirstName;
@property(readonly, copy, nonatomic) NSURL *changedByAddress;
@property(readonly, copy, nonatomic) NSString *changedByDisplayName;
@property(readonly, retain, nonatomic) EKPersistentCalendarItem *calendarItem;
@property(readonly, retain, nonatomic) EKPersistentCalendar *calendar;

@end

@interface EKPersistentSharee : EKPersistentObject <NSCopying>
{
}

+ (id)shareeWithEmailAddress:(id)arg1 name:(id)arg2;
+ (id)shareeWithName:(id)arg1 emailAddress:(id)arg2 externalID:(id)arg3;
+ (id)relations;
+ (id)defaultPropertiesToLoad;
- (id)description;
- (id)owner;
- (void)setOwner:(id)arg1;
@property(nonatomic) int shareeAccessLevel;
@property(nonatomic) int shareeStatus;
@property(copy, nonatomic) NSString *externalID;
@property(copy, nonatomic) NSString *lastName;
@property(copy, nonatomic) NSString *firstName;
@property(copy, nonatomic) NSString *emailAddress;
@property(copy, nonatomic) NSString *displayName;
@property(readonly, nonatomic) NSString *UUID;
- (unsigned long long)hash;
- (int)entityType;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1 emailAddress:(id)arg2 externalID:(id)arg3;
- (id)initWithEmailAddress:(id)arg1 name:(id)arg2;
- (id)init;

@end

@interface EKPersistentSource : EKPersistentObject
{
    EKSourceConstraints *_constraints;
}

+ (long long)_calEventPrivacyLevelToEKPrivacyLevel:(int)arg1;
+ (int)_ekPrivacyLevelToCalEventPrivacyLevel:(long long)arg1;
+ (id)relations;
+ (id)defaultPropertiesToLoad;
@property(readonly, nonatomic) EKSourceConstraints *constraints; // @synthesize constraints=_constraints;
- (void)reset;
- (_Bool)refresh;
- (id)description;
@property(nonatomic) _Bool onlyCreatorCanModify;
@property(nonatomic, getter=isEnabled) _Bool enabled;
@property(copy, nonatomic) NSString *externalModificationTag;
@property(copy, nonatomic) NSString *externalID;
@property(nonatomic) NSString *UUID;
@property(copy, nonatomic) NSNumber *defaultAlarmOffset;
@property(copy, nonatomic) NSString *title;
@property(nonatomic) long long strictestEventPrivateValue;
@property(nonatomic) long long preferredEventPrivateValue;
@property(nonatomic) int sourceType;
- (int)entityType;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKPredicateSearch : NSObject <EKCancellableRemoteOperation>
{
    CDUnknownBlockType _callback;
    Class _entityClass;
    NSPredicate *_predicate;
    EKEventStore *_store;
    id _cancellationToken;
    _Bool _finished;
    _Bool _isCancelled;
}

+ (id)searchWithEntityClass:(Class)arg1 predicate:(id)arg2 store:(id)arg3;
- (void)cancel;
- (id)startWithCompletion:(CDUnknownBlockType)arg1;
- (void)terminate;
- (void)dealloc;
- (id)initWithEntityClass:(Class)arg1 predicate:(id)arg2 store:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKPreferences : NSObject
{
    CalPreferences *_preferences;
}

+ (id)shared;
@property(nonatomic) _Bool enableTravelAdvisoriesForAutomaticBehavior;
@property(nonatomic) double travelEngineThrottlePeriod;
- (id)init;

@end

@interface EKRecurrenceDayOfWeek : NSObject <NSCopying>
{
    long long _dayOfTheWeek;
    long long _weekNumber;
}

+ (id)dayOfWeek:(long long)arg1 weekNumber:(long long)arg2;
+ (id)dayOfWeek:(long long)arg1;
@property(readonly, nonatomic) long long weekNumber; // @synthesize weekNumber=_weekNumber;
@property(readonly, nonatomic) long long dayOfTheWeek; // @synthesize dayOfTheWeek=_dayOfTheWeek;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)iCalendarDescription;
- (id)iCalendarValueFromDayOfTheWeek:(unsigned long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDayOfTheWeek:(long long)arg1 weekNumber:(long long)arg2;

@end

@interface EKRecurrenceEnd : NSObject <NSCopying>
{
    NSDate *_endDate;
    unsigned long long _occurrenceCount;
}

+ (id)recurrenceEndWithOccurrenceCount:(unsigned long long)arg1;
+ (id)recurrenceEndWithEndDate:(id)arg1;
@property(readonly, nonatomic) unsigned long long occurrenceCount; // @synthesize occurrenceCount=_occurrenceCount;
@property(readonly, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
@property(readonly, nonatomic) _Bool usesEndDate;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithOccurrenceCount:(unsigned long long)arg1;
- (id)initWithEndDate:(id)arg1;

@end

@interface EKRecurrenceGenerator : NSObject
{
    NSCalendar *_calendar;
    NSDate *_eventStartDate;
    NSDate *_eventEndDate;
    NSTimeZone *_eventTimeZone;
    unsigned long long _duration;
    _Bool _allDay;
    int _interval;
    int _frequency;
    NSDate *_endDate;
    int _weekStart;
    _Bool _shouldPinMonthDays;
    NSArray *_daysOfTheWeek;
    NSArray *_daysOfTheMonth;
    NSArray *_daysOfTheYear;
    NSArray *_weeksOfTheYear;
    NSArray *_monthsOfTheYear;
    NSArray *_setPositions;
}

+ (id)generator;
@property(copy, nonatomic) NSArray *setPositions; // @synthesize setPositions=_setPositions;
@property(copy, nonatomic) NSArray *monthsOfTheYear; // @synthesize monthsOfTheYear=_monthsOfTheYear;
@property(copy, nonatomic) NSArray *weeksOfTheYear; // @synthesize weeksOfTheYear=_weeksOfTheYear;
@property(copy, nonatomic) NSArray *daysOfTheYear; // @synthesize daysOfTheYear=_daysOfTheYear;
@property(copy, nonatomic) NSArray *daysOfTheMonth; // @synthesize daysOfTheMonth=_daysOfTheMonth;
@property(copy, nonatomic) NSArray *daysOfTheWeek; // @synthesize daysOfTheWeek=_daysOfTheWeek;
@property(copy, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(nonatomic) _Bool allDay; // @synthesize allDay=_allDay;
@property(copy, nonatomic) NSTimeZone *eventTimeZone; // @synthesize eventTimeZone=_eventTimeZone;
@property(copy, nonatomic) NSDate *eventEndDate; // @synthesize eventEndDate=_eventEndDate;
@property(copy, nonatomic) NSDate *eventStartDate; // @synthesize eventStartDate=_eventStartDate;
- (id)_copyYearlyOccurrencesWithInitialDate:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 count:(unsigned long long)arg4;
- (id)_copySimpleYearlyOccurrencesWithInitialDate:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 count:(unsigned long long)arg4;
- (_Bool)_validateCalDate:(CDStruct_b0fa4487)arg1 pinned:(_Bool)arg2;
- (id)_copyMonthlyOccurrencesWithInitialDate:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 count:(unsigned long long)arg4;
- (id)_copyWeeklyOccurrencesWithInitialDate:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 count:(unsigned long long)arg4;
- (id)_copyDailyOccurrencesWithInitialDate:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 count:(unsigned long long)arg4;
- (id)_copyOccurrenceDatesBetweenStartDate:(CDStruct_b0fa4487)arg1 endDate:(CDStruct_b0fa4487)arg2 timeZone:(id)arg3 limit:(long long)arg4;
- (double)_convertAbsoluteTime:(double)arg1 fromTimeZone:(id)arg2 toTimeZone:(id)arg3;
- (_Bool)_isSimpleYearlyRecurrence;
- (id)_computeRecurrenceEndDate:(unsigned long long)arg1;
- (void)_prepareForCalRecurrence:(void *)arg1 locked:(_Bool)arg2;
- (void)_prepareForPersistentRecurrence:(id)arg1;
- (void)_prepareForEKRecurrence:(id)arg1;
- (id)nextOccurrenceDateWithEKRecurrences:(id)arg1 exceptionDates:(id)arg2 initialDate:(id)arg3 afterDate:(id)arg4;
- (id)nextOccurrenceDateWithEKRecurrences:(id)arg1 initialDate:(id)arg2 afterDate:(id)arg3;
- (_Bool)occurrenceDate:(id)arg1 matchesRecurrenceRule:(id)arg2 forEvent:(id)arg3 includeDetachedEventsInSeries:(_Bool)arg4;
- (_Bool)isOccurrenceDate:(id)arg1 validForEvent:(id)arg2;
- (id)copyOccurrenceDatesWithInitialDate:(id)arg1 calRecurrences:(id)arg2 rangeStart:(id)arg3 rangeEnd:(id)arg4 timeZone:(id)arg5;
- (id)copyOccurrenceDatesWithEvent:(id)arg1 recurrenceRule:(id)arg2 startDate:(CDStruct_b0fa4487)arg3 endDate:(CDStruct_b0fa4487)arg4 timeZone:(id)arg5 limit:(long long)arg6;
- (id)copyOccurrenceDatesWithEvent:(id)arg1 startDate:(CDStruct_b0fa4487)arg2 endDate:(CDStruct_b0fa4487)arg3 timeZone:(id)arg4 limit:(long long)arg5;
- (id)copyOccurrenceDatesWithEKEvent:(id)arg1 recurrenceRule:(id)arg2 startDate:(CDStruct_b0fa4487)arg3 endDate:(CDStruct_b0fa4487)arg4 timeZone:(id)arg5 exceptionDates:(id)arg6 limit:(long long)arg7;
- (id)copyOccurrenceDatesWithEKEvent:(id)arg1 recurrenceRule:(id)arg2 startDate:(CDStruct_b0fa4487)arg3 endDate:(CDStruct_b0fa4487)arg4 timeZone:(id)arg5 limit:(long long)arg6;
- (id)copyOccurrenceDatesWithCalEvent:(void *)arg1 startDate:(CDStruct_b0fa4487)arg2 endDate:(CDStruct_b0fa4487)arg3 timeZone:(id)arg4 limit:(long long)arg5 locked:(_Bool)arg6;
- (id)_copyOccurrenceDatesWithBirthdayEvent:(void *)arg1 startDate:(CDStruct_b0fa4487)arg2 endDate:(CDStruct_b0fa4487)arg3 timeZone:(id)arg4 limit:(long long)arg5 locked:(_Bool)arg6;
- (id)copyOccurrenceDatesWithEKEvent:(id)arg1 startDate:(CDStruct_b0fa4487)arg2 endDate:(CDStruct_b0fa4487)arg3 timeZone:(id)arg4 limit:(long long)arg5;
- (void)_setupForCalEvent:(void *)arg1 locked:(_Bool)arg2;
- (void)_setupForPersistentEvent:(id)arg1;
- (void)_setupForEKEvent:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKRecurrenceHelper : NSObject
{
    NSString *_specifier;
    _Bool _dirty;
    _Bool _parsed;
    NSArray *_daysOfTheWeek;
    NSArray *_daysOfTheMonth;
    NSArray *_daysOfTheYear;
    NSArray *_weeksOfTheYear;
    NSArray *_monthsOfTheYear;
    NSArray *_setPositions;
}

- (id)_parseIndexList:(CDStruct_f9502b4c *)arg1 range:(CDStruct_912cb5d2)arg2;
- (id)_parseDaysOfWeek:(CDStruct_f9502b4c *)arg1 range:(CDStruct_912cb5d2)arg2;
- (void)_appendIndexList:(id)arg1 toSpecifier:(id)arg2 propertyKey:(unsigned short)arg3;
- (void)_appendDaysOfTheWeek:(id)arg1 toSpecifier:(id)arg2;
- (void)_parseSpecifierIfNeeded;
- (void)_updateSpecifier;
- (void)_clearArrays;
@property(copy, nonatomic) NSArray *setPositions;
@property(copy, nonatomic) NSArray *monthsOfTheYear;
@property(copy, nonatomic) NSArray *weeksOfTheYear;
@property(copy, nonatomic) NSArray *daysOfTheYear;
@property(copy, nonatomic) NSArray *daysOfTheMonth;
@property(copy, nonatomic) NSArray *daysOfTheWeek;
@property(copy, nonatomic) NSString *specifier;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) _Bool isDirty;
- (void)revert;
- (void)dealloc;
- (id)initWithSpecifier:(id)arg1;

@end

@interface EKRecurrenceRule : EKObject <NSCopying>
{
    _Bool _usesEndDate;
    EKRecurrenceEnd *_cachedEnd;
}

+ (id)iCalendarValueFromDate:(id)arg1 isDateOnly:(_Bool)arg2 isFloating:(_Bool)arg3;
+ (id)iCalendarValueFromDayOfTheWeek:(unsigned long long)arg1;
+ (id)iCalendarValueFromRecurrenceType:(int)arg1;
+ (id)recurrenceRuleWithType:(int)arg1 interval:(unsigned long long)arg2 end:(id)arg3;
@property(readonly) _Bool usesEndDate; // @synthesize usesEndDate=_usesEndDate;
@property(retain, nonatomic) EKRecurrenceEnd *cachedEnd; // @synthesize cachedEnd=_cachedEnd;
- (id)stringValueAsDateOnly:(_Bool)arg1 isFloating:(_Bool)arg2;
- (_Bool)isAnyDayRule;
- (_Bool)isWeekendRule;
- (_Bool)isWeekdayRule;
- (void)pinToEndsOfMonthsWithCalendarItem:(id)arg1;
- (_Bool)mayOccurAfterDate:(id)arg1;
@property(readonly, nonatomic) _Bool dirtyStateMayAffectExceptionDates;
- (void)reset;
- (void)setSetPositions:(id)arg1;
@property(readonly, nonatomic) NSArray *setPositions;
- (void)setMonthsOfTheYear:(id)arg1;
@property(readonly, nonatomic) NSArray *monthsOfTheYear;
- (void)setWeeksOfTheYear:(id)arg1;
@property(readonly, nonatomic) NSArray *weeksOfTheYear;
- (void)setDaysOfTheYear:(id)arg1;
@property(readonly, nonatomic) NSArray *daysOfTheYear;
- (void)setDaysOfTheMonth:(id)arg1;
@property(readonly, nonatomic) NSArray *daysOfTheMonth;
- (void)setDaysOfTheWeek:(id)arg1;
@property(readonly, nonatomic) NSArray *daysOfTheWeek;
- (void)setFirstDayOfTheWeek:(unsigned long long)arg1;
@property(readonly, nonatomic) long long firstDayOfTheWeek;
@property(readonly, nonatomic) NSDate *cachedEndDate;
@property(copy, nonatomic) EKRecurrenceEnd *recurrenceEnd;
- (void)setInterval:(unsigned long long)arg1;
@property(readonly, nonatomic) long long interval;
- (void)setFrequency:(int)arg1;
@property(readonly, nonatomic) int frequency;
@property(readonly, nonatomic) NSString *calendarIdentifier;
@property(retain, nonatomic) EKCalendarItem *owner; // @dynamic owner;
- (id)lazyLoadRelationForKey:(id)arg1;
@property(readonly) CDStruct_6e43267c gregorianUnits;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
@property(readonly, nonatomic) _Bool shouldPinMonthDays;
@property(readonly, nonatomic) NSString *UUID;
- (id)_persistentRule;
- (id)initRecurrenceWithFrequency:(int)arg1 interval:(long long)arg2 end:(id)arg3;
- (id)initRecurrenceWithFrequency:(int)arg1 interval:(long long)arg2 daysOfTheWeek:(id)arg3 daysOfTheMonth:(id)arg4 monthsOfTheYear:(id)arg5 weeksOfTheYear:(id)arg6 daysOfTheYear:(id)arg7 setPositions:(id)arg8 end:(id)arg9;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKRelation : NSObject
{
    NSString *_entityName;
    _Bool _toMany;
    _Bool _ownsRelated;
    NSString *_inversePropertyName;
}

+ (id)relationWithEntityName:(id)arg1 toMany:(_Bool)arg2 inversePropertyName:(id)arg3 ownsRelated:(_Bool)arg4;
+ (id)relationWithEntityName:(id)arg1 toMany:(_Bool)arg2 inversePropertyName:(id)arg3;
@property(readonly, nonatomic) NSString *inversePropertyName;
@property(readonly, nonatomic) _Bool ownsRelatedObject;
@property(readonly, nonatomic) _Bool toMany;
- (void)dealloc;
- (id)description;
- (id)initWithEntityName:(id)arg1 toMany:(_Bool)arg2 inversePropertyName:(id)arg3 ownsRelated:(_Bool)arg4;

@end

@interface EKReminder : EKCalendarItem
{
    _Bool hadRecurrences;
}

+ (void)_removeSnoozedAlarmsFromReminder:(id)arg1 usingDueDate:(id)arg2;
+ (id)reminderWithEventStore:(id)arg1;
@property(nonatomic) _Bool hadRecurrences; // @synthesize hadRecurrences;
- (id)startDateForRecurrence;
@property(readonly, nonatomic) EKAlarm *bestDisplayAlarm;
- (_Bool)commit:(id *)arg1;
- (_Bool)validate:(id *)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (void)clearParentID;
@property(readonly, nonatomic) EKObjectID *parentID;
@property(nonatomic, getter=isCompleted) _Bool completed;
- (id)description;
@property(nonatomic) long long priority;
@property(nonatomic) unsigned long long displayOrder;
@property(copy, nonatomic) NSDate *completionDate;
- (void)setTimeZone:(id)arg1;
@property(copy, nonatomic) NSDateComponents *dueDateComponents;
@property(readonly, nonatomic) NSDate *dueDate;
@property(copy, nonatomic) NSDateComponents *startDateComponents;
- (id)externalURI;
- (id)reminderIdentifier;
- (void)_sendModifiedNote;
- (id)_persistentReminder;
- (void)dealloc;
- (id)initWithPersistentObject:(id)arg1;

// Remaining properties
@property(copy, nonatomic) NSURL *action;

@end

@interface EKReminderPredicate : EKPredicate
{
    _Bool _limitToCompletedOrIncomplete;
    _Bool _completed;
    _Bool _useCompletionDateAsAlternate;
    _Bool _useDueDateAsCompletionDate;
    int _sortOrder;
    NSString *_title;
    NSString *_listTitle;
    NSDate *_dueAfter;
    NSDate *_dueBefore;
    NSString *_searchTerm;
    unsigned long long _maxResults;
}

+ (id)predicateWithCalendars:(id)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long maxResults; // @synthesize maxResults=_maxResults;
@property(nonatomic) int sortOrder; // @synthesize sortOrder=_sortOrder;
@property(retain, nonatomic) NSString *searchTerm; // @synthesize searchTerm=_searchTerm;
@property(nonatomic) _Bool useDueDateAsCompletionDate; // @synthesize useDueDateAsCompletionDate=_useDueDateAsCompletionDate;
@property(nonatomic) _Bool useCompletionDateAsAlternate; // @synthesize useCompletionDateAsAlternate=_useCompletionDateAsAlternate;
@property(retain, nonatomic) NSDate *dueBefore; // @synthesize dueBefore=_dueBefore;
@property(retain, nonatomic) NSDate *dueAfter; // @synthesize dueAfter=_dueAfter;
@property(nonatomic) _Bool completed; // @synthesize completed=_completed;
@property(nonatomic) _Bool limitToCompletedOrIncomplete; // @synthesize limitToCompletedOrIncomplete=_limitToCompletedOrIncomplete;
@property(retain, nonatomic) NSString *listTitle; // @synthesize listTitle=_listTitle;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithCalendars:(id)arg1;

@end

@interface EKRequestAvailabilityOperation : NSOperation
{
    _Bool _isFinished;
    _Bool _isExecuting;
    EKAvailabilityCache *_availabilityCache;
    NSDate *_startDate;
    NSDate *_endDate;
    NSString *_ignoredEventID;
    NSArray *_addresses;
    CDUnknownBlockType _resultsBlock;
    id _requestID;
    NSObject<OS_dispatch_queue> *_queue;
    NSError *_error;
}

@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
- (void)_finishWithError:(id)arg1;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (void)cancel;
- (_Bool)isConcurrent;
- (void)main;
- (void)start;
- (id)description;
- (void)dealloc;
- (id)initWithSource:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 ignoredEventID:(id)arg4 addresses:(id)arg5 resultsBlock:(CDUnknownBlockType)arg6;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKResourceChange : EKObject <EKIdentityProtocol>
{
}

- (void)clearAlertedStatus;
@property(readonly, nonatomic) unsigned int publicStatus;
@property(readonly, nonatomic) _Bool alerted;
@property(readonly, nonatomic) NSString *deletedTitle;
@property(readonly, nonatomic) NSNumber *deleteCount;
@property(readonly, nonatomic) NSNumber *updateCount;
@property(readonly, nonatomic) NSNumber *createCount;
@property(readonly, nonatomic) _Bool locationChanged;
@property(readonly, nonatomic) _Bool titleChanged;
@property(readonly, nonatomic) _Bool timeChanged;
@property(readonly, nonatomic) _Bool dateChanged;
@property(readonly, copy, nonatomic) NSDate *timestamp;
@property(readonly, nonatomic) unsigned int changeType;
@property(readonly, retain, nonatomic) EKCalendarItem *calendarItem;
@property(readonly, retain, nonatomic) EKCalendar *calendar;
- (id)emailAddress;
- (id)name;
@property(readonly, copy, nonatomic) NSString *changedByLastName;
@property(readonly, copy, nonatomic) NSString *changedByFirstName;
@property(readonly, copy, nonatomic) NSURL *changedByAddress;
@property(readonly, copy, nonatomic) NSString *changedByDisplayName;
- (id)_calendarItemRelation;
- (id)lazyLoadRelationForKey:(id)arg1;
- (id)_persistentResourceChange;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKRespondedEventsPredicate : NSPredicate <EKDefaultPropertiesLoading, NSSecureCoding>
{
}

+ (id)predicate;
+ (_Bool)supportsSecureCoding;
- (id)defaultPropertiesToLoad;
- (_Bool)shouldLoadDefaultProperties;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKScheduledReminderPredicate : EKPredicate
{
    NSDate *_day;
}

+ (id)predicateForScheduledRemindersInCalendars:(id)arg1 onDay:(id)arg2;
+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSDate *day; // @synthesize day=_day;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface EKSharee : EKObject <NSCopying, EKIdentityProtocol>
{
}

+ (id)shareeWithEmailAddress:(id)arg1 name:(id)arg2;
+ (id)shareeWithName:(id)arg1 emailAddress:(id)arg2 externalID:(id)arg3;
- (void *)ABRecordWithAddressBook:(void *)arg1;
@property(nonatomic) int shareeAccessLevel;
@property(nonatomic) int shareeStatus;
@property(copy, nonatomic) NSString *externalID;
@property(copy, nonatomic) NSString *lastName;
@property(copy, nonatomic) NSString *firstName;
@property(copy, nonatomic) NSString *emailAddress;
@property(copy, nonatomic) NSString *name;
@property(readonly, nonatomic) NSString *UUID;
- (id)_persistentSharee;
@property(readonly, nonatomic) EKCalendar *owner;
- (id)lazyLoadRelationForKey:(id)arg1;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithEmailAddress:(id)arg1 name:(id)arg2;
- (id)initWithName:(id)arg1 emailAddress:(id)arg2 externalID:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface EKSideAlarm : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSDate *acknowledgedDate; // @dynamic acknowledgedDate;
@property(retain, nonatomic) NSNumber *alarmID; // @dynamic alarmID;
@property(retain, nonatomic) NSNumber *allDay; // @dynamic allDay;
@property(retain, nonatomic) NSDate *entityDate; // @dynamic entityDate;
@property(retain, nonatomic) NSNumber *entityID; // @dynamic entityID;
@property(retain, nonatomic) NSString *entityTimeZone; // @dynamic entityTimeZone;
@property(retain, nonatomic) NSString *entityURI; // @dynamic entityURI;
@property(retain, nonatomic) NSString *externalID; // @dynamic externalID;
@property(retain, nonatomic) NSDate *fireTime; // @dynamic fireTime;
@property(retain, nonatomic) NSNumber *isDelayedProximityAlarm; // @dynamic isDelayedProximityAlarm;
@end

__attribute__((visibility("hidden")))
@interface EKSideTableContext : NSManagedObjectContext
{
    NSString *_path;
}

- (id)_persistentStoreCoordinator;
- (id)_managedObjectModel;
- (void)_removeSqliteFiles;
- (id)_urlForPersistentStore;
- (id)_pathForPersistentStore;
- (id)rootDirectory;
- (void)setSetting:(id)arg1 forKey:(id)arg2;
- (id)settingForKey:(id)arg1;
- (id)_settingForKey:(id)arg1;
- (id)delayedProximityAlarms;
- (id)alarmsBetweenStartDate:(id)arg1 endDate:(id)arg2;
- (id)nextAlarmFireTime;
- (id)insertNewAlarm;
- (void)deleteAllAlarms;
- (id)_alarmsMatchingPredicate:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKSocialURLSearchDelegate : NSObject <ABSearchOperationDelegate>
{
    CDUnknownBlockType _searchCompleteHandler;
}

- (void)dealloc;
- (void)searchOperation:(id)arg1 didFindMatches:(id)arg2 moreComing:(_Bool)arg3;
- (void)_completeWithRecord:(void *)arg1;
- (void)setCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKSource : EKObject
{
    EKAvailabilityCache *_availabilityCache;
    NSDate *_timeOfLastExternalIdentificationCache;
    NSString *_cachedHost;
    long long _cachedPort;
    NSSet *_cachedOwnerAddresses;
}

+ (id)sourceWithEventStore:(id)arg1;
@property(retain, nonatomic) NSSet *cachedOwnerAddresses; // @synthesize cachedOwnerAddresses=_cachedOwnerAddresses;
@property(nonatomic) long long cachedPort; // @synthesize cachedPort=_cachedPort;
@property(retain, nonatomic) NSString *cachedHost; // @synthesize cachedHost=_cachedHost;
@property(retain, nonatomic) NSDate *timeOfLastExternalIdentificationCache; // @synthesize timeOfLastExternalIdentificationCache=_timeOfLastExternalIdentificationCache;
@property(readonly, nonatomic) NSSet *ownerAddresses;
@property(readonly, nonatomic) long long serverPort;
@property(readonly, nonatomic) NSString *serverHost;
- (void)_cacheExternalIdentificationIfNeeded;
@property(readonly, nonatomic) EKAvailabilityCache *availabilityCache;
@property(readonly, nonatomic) _Bool wantsCommentPromptWhenDeclining;
- (_Bool)remove:(id *)arg1;
- (_Bool)commit:(id *)arg1;
- (id)description;
@property(readonly, nonatomic) int displayOrderForNewCalendar;
@property(readonly, nonatomic) EKSourceConstraints *constraints;
- (id)readWriteCalendarsForEntityType:(unsigned long long)arg1;
- (id)calendarsForEntityType:(unsigned long long)arg1;
@property(readonly, nonatomic) NSSet *allCalendars;
@property(readonly, nonatomic) NSSet *calendars;
@property(readonly, nonatomic) _Bool isFacebookSource;
@property(readonly, nonatomic, getter=isEnabled) _Bool enabled;
@property(nonatomic) _Bool onlyCreatorCanModify;
@property(copy, nonatomic) NSString *externalModificationTag;
@property(copy, nonatomic) NSString *externalID;
@property(readonly, nonatomic) NSString *sourceIdentifier;
@property(copy, nonatomic) NSNumber *defaultAlarmOffset;
@property(copy, nonatomic) NSString *title;
@property(readonly, nonatomic) long long strictestEventPrivateValue;
@property(readonly, nonatomic) long long preferredEventPrivateValue;
@property(readonly, nonatomic) int sourceType;
- (id)_persistentItem;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKSourceConstraints : NSObject
{
    int _maxAlarmsAllowed;
    int _maxRecurrencesAllowed;
    CDStruct_13f89de5 _flags;
}

@property(nonatomic) CDStruct_13f89de5 flags; // @synthesize flags=_flags;
@property(nonatomic) int maxRecurrencesAllowed; // @synthesize maxRecurrencesAllowed=_maxRecurrencesAllowed;
@property(nonatomic) int maxAlarmsAllowed; // @synthesize maxAlarmsAllowed=_maxAlarmsAllowed;
@property(nonatomic) _Bool prohibitsDetachmentOnCommentChange;
@property(nonatomic) _Bool prohibitsYearlyRecurrenceInterval;
@property(nonatomic) _Bool prohibitsMultipleDaysInMonthlyRecurrence;
@property(nonatomic) _Bool prohibitsMultipleMonthsInYearlyRecurrence;
@property(nonatomic) _Bool requiresSamePrivacyLevelAcrossRecurrenceSeries;
@property(nonatomic) _Bool supportsLocationDirectorySearches;
@property(nonatomic) _Bool supportsIgnoringEventsInAvailabilityRequests;
@property(nonatomic) _Bool supportsAvailabilityRequests;
@property(nonatomic) _Bool prohibitsPrivateEventsWithAttendees;
@property(nonatomic) _Bool supportsPrivateEvents;
@property(nonatomic) _Bool recurrenceSeriesMustIncludeMoreThanFirstOccurrence;
@property(nonatomic) _Bool isFacebook;
@property(nonatomic) _Bool supportsSharedCalendars;
@property(nonatomic) _Bool supportsAllDayDueDates;
@property(nonatomic) _Bool supportsURLField;
@property(nonatomic) _Bool allowsEvents;
@property(nonatomic) _Bool allowsTasks;
@property(nonatomic) _Bool allowsCalendarAddDeleteModify;
@property(nonatomic) _Bool supportsAlarmProximity;
@property(nonatomic) _Bool supportsReminderLocations;
@property(nonatomic) _Bool supportsReminderActions;
@property(nonatomic) _Bool supportsStructuredLocations;
@property(nonatomic) _Bool shouldDeclineDeletedInvitations;
@property(nonatomic) _Bool shouldCancelDeletedEvents;
@property(nonatomic) _Bool requiresMSFormattedUID;
@property(nonatomic) _Bool eventAvalabilityLimited;
@property(nonatomic) _Bool canSetAvailability;
@property(nonatomic) _Bool mustAcknowledgeMasterEvent;
@property(nonatomic) _Bool requiresAttendeeSearchInSingleAccount;
@property(nonatomic) _Bool recurrencesShouldPinToMonthDays;
@property(nonatomic) _Bool supportsRecurrencesOnDetachedEvents;
@property(nonatomic) _Bool futureStartDateLimitedToOccurrenceCacheBounds;
@property(nonatomic) _Bool occurrencesMustOccurOnSeparateDays;
@property(nonatomic) _Bool alarmTriggerIntervalConstrainedToRecurrenceInterval;
@property(nonatomic) _Bool eventDurationConstrainedToRecurrenceInterval;
@property(nonatomic) _Bool declinedStatusChangeRequiresNoPendingStatus;
@property(nonatomic) _Bool proposedStatusRequiredForResponse;
@property(nonatomic) _Bool deliverySourceOrExternalIDRequiredForResponse;
@property(nonatomic) _Bool supportsResponseComments;
@property(nonatomic) _Bool supportsInvitationModifications;
@property(nonatomic) _Bool requiresOutgoingInvitationsInDefaultCalendar;
@property(nonatomic) _Bool supportsOutgoingInvitations;
@property(nonatomic) _Bool supportsIncomingInvitations;
@property(nonatomic) _Bool statusesAreAccurate;
@property(nonatomic) _Bool inviteesCanSeeAttendeeStatuses;
@property(nonatomic) _Bool organizerCanSeeAttendeeStatuses;
@property(nonatomic) _Bool snoozeAlarmRequiresDetach;
@property(nonatomic) _Bool supportsAlarmsTriggeringAfterStartDate;
@property(nonatomic) _Bool supportsAlarmTriggerDates;
@property(nonatomic) _Bool supportsAlarmTriggerIntervals;
- (id)initWithMaxAlarms:(int)arg1 maxRecurrences:(int)arg2 constraintFlags:(unsigned long long)arg3;
- (id)init;

@end

@interface EKStats : NSObject
{
    int _domain;
    NSMutableDictionary *_scalarOperations;
    NSMutableDictionary *_distributionOperations;
}

+ (void)pushToDistribution:(id)arg1 value:(double)arg2 domain:(int)arg3;
+ (void)setDistribution:(id)arg1 value:(double)arg2 domain:(int)arg3;
+ (void)clearDistribution:(id)arg1 domain:(int)arg2;
+ (void)addToScalar:(id)arg1 value:(long long)arg2 domain:(int)arg3;
+ (void)setScalar:(id)arg1 value:(long long)arg2 domain:(int)arg3;
+ (void)clearScalar:(id)arg1 domain:(int)arg2;
+ (_Bool)enabled;
- (void)commit;
- (void)pushToDistribution:(id)arg1 value:(double)arg2;
- (void)setDistribution:(id)arg1 value:(double)arg2;
- (void)clearDistribution:(id)arg1;
- (void)addToScalar:(id)arg1 value:(long long)arg2;
- (void)setScalar:(id)arg1 value:(long long)arg2;
- (void)clearScalar:(id)arg1;
- (void)dealloc;
- (id)initWithDomain:(int)arg1;

@end

@interface EKStructuredLocation : EKObject <NSCopying>
{
}

+ (id)locationWithTitle:(id)arg1;
- (id)_asCalLocation;
- (void)updatePersistentObject;
@property(retain, nonatomic) NSString *routing;
- (id)description;
- (_Bool)isEqualToLocation:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(copy, nonatomic) NSString *addressBookEntityID;
@property(nonatomic) double radius;
@property(retain, nonatomic) CLLocation *geoLocation;
- (id)cacheKey;
@property(retain, nonatomic) NSString *address;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) _Bool isStructured;
- (id)_persistentLocation;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKTimeZone : NSObject <NSCopying>
{
    NSString *_name;
    void *_internal;
    long long _lastStart;
    long long _lastEnd;
    unsigned long long _lastIndex;
    double _offset;
}

+ (id)timeZoneWithNSTimeZone:(id)arg1;
+ (id)timeZoneWithName:(id)arg1;
- (double)secondsFromGMT;
- (id)abbreviation;
- (id)abbreviationForAbsoluteTime:(double)arg1;
- (double)nextDaylightSavingTimeTransitionAfterAbsoluteTime:(double)arg1;
- (double)secondsFromGMTForAbsoluteTime:(double)arg1;
- (id)abbreviationForDate:(id)arg1;
- (double)secondsFromGMTForDate:(id)arg1;
- (id)_abbreviationForIndex:(unsigned long long)arg1;
- (unsigned long long)_indexForAbsoluteTime:(double)arg1;
- (id)name;
- (id)NSTimeZone;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithOffset:(double)arg1 name:(id)arg2;
- (id)initWithName:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKTravelAdvice : NSObject <EKTravelAdvice>
{
    NSDate *_predictedDepartureTime;
    unsigned long long _trafficLevel;
    unsigned long long _accidentState;
    unsigned long long _travelState;
    double _travelStateScore;
}

@property(readonly, nonatomic) double travelStateScore; // @synthesize travelStateScore=_travelStateScore;
@property(readonly, nonatomic) unsigned long long travelState; // @synthesize travelState=_travelState;
@property(readonly, nonatomic) unsigned long long accidentState; // @synthesize accidentState=_accidentState;
@property(readonly, nonatomic) unsigned long long trafficLevel; // @synthesize trafficLevel=_trafficLevel;
@property(readonly, nonatomic) NSDate *predictedDepartureTime; // @synthesize predictedDepartureTime=_predictedDepartureTime;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithTrafficLevel:(unsigned long long)arg1 accidentState:(unsigned long long)arg2 travelState:(unsigned long long)arg3 travelStateScore:(double)arg4 predictedDepartureTime:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKTravelAdvisor : NSObject
{
    NSMutableArray *_queue;
    EKTravelAgendaItem *_nextAgendaItem;
    _Bool _queueDirty;
    EKTravelPrediction *_prediction;
    id <EKTravelAdvisorWorld> _world;
    Class _routePredictorClass;
    id <EKTravelRoutePredictor> _routePredictor;
    _Bool _invalidated;
}

- (void)_setWakeupCriteriaFromCurrentPrediction;
- (void)_setWakeupCriteriaForPeriodWhileWaitingForRouteHypothesis;
- (void)_updatePredictionFromCurrentLocation:(id)arg1;
- (void)_updatePrediction;
- (void)_forceInvalidatePrediction;
- (void)invalidate;
- (void)removeAgendaItem:(id)arg1;
- (void)addAgendaItem:(id)arg1;
- (_Bool)authorizedToAcquireLocation;
- (void)setLocationAuthorizationCallback:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithWorld:(id)arg1 routePredictorClass:(Class)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKTravelAdvisorRealWorld : NSObject <EKTravelAdvisorWorld, CLLocationManagerDelegate>
{
    CLLocationManager *_geofenceLocationManager;
    CLLocationManager *_pollingLocationManager;
    _Bool _geofenceUsingSignificantLocationUpdates;
    PCPersistentTimer *_persistentTimer;
    CDUnknownBlockType _geofenceHandler;
    CDUnknownBlockType _locationHandler;
    CDUnknownBlockType _alarmHandler;
    CDUnknownBlockType _locationAuthorizationHandler;
    CLLocation *_geofenceInitialLocation;
    CLLocation *_locationInitialLocation;
    NSBundle *_locationBundle;
    NSObject<OS_dispatch_queue> *_queue;
    EKTravelAgendaItem *_agendaItem;
}

+ (id)_persistentTimerIdentifier;
@property(nonatomic) EKTravelAgendaItem *agendaItem; // @synthesize agendaItem=_agendaItem;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (id)now;
- (void)getCurrentLocationWithAccuracy:(double)arg1 block:(CDUnknownBlockType)arg2;
- (id)mostRecentLocationSeen;
- (void)disableGeofence;
- (void)setGeofenceWithRadius:(double)arg1 block:(CDUnknownBlockType)arg2;
- (void)disableAlarm;
- (void)alarmFired:(id)arg1;
- (void)setAlarmIn:(double)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)authorizedToAcquireLocation;
- (void)setLocationAuthorizationChangeCallback:(CDUnknownBlockType)arg1;
- (void)comeOutOfHibernation;
- (void)goIntoHibernation;
- (void)dealloc;
- (id)initWithQueue:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKTravelAdvisorTraceLocation : NSObject <NSSecureCoding>
{
    NSDate *_date;
    CLLocation *_location;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) CLLocation *location; // @synthesize location=_location;
@property(readonly, nonatomic) NSDate *date; // @synthesize date=_date;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithDate:(id)arg1 location:(id)arg2;

@end

@interface EKTravelAdvisorTracePrediction : NSObject <NSSecureCoding>
{
    NSDate *_date;
    EKTravelPrediction *_prediction;
    double _delay;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) double delay; // @synthesize delay=_delay;
@property(readonly, nonatomic) EKTravelPrediction *prediction; // @synthesize prediction=_prediction;
@property(readonly, nonatomic) NSDate *date; // @synthesize date=_date;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithDate:(id)arg1 prediction:(id)arg2 delay:(double)arg3;

@end

@interface EKTravelAgendaItem : NSObject
{
    CDUnknownBlockType _adviceBlock;
    double _initialDistanceFromDestination;
    _Bool _haveAdvised;
    NSMutableArray *_trace;
    int _travelMethod;
    CLLocation *_location;
    NSDate *_date;
}

+ (_Bool)_clLocation:(id)arg1 isEqualToCLLocation:(id)arg2;
@property(readonly, nonatomic) int travelMethod; // @synthesize travelMethod=_travelMethod;
@property(readonly, nonatomic) NSDate *date; // @synthesize date=_date;
@property(readonly, nonatomic) CLLocation *location; // @synthesize location=_location;
- (void)traceLocation:(id)arg1 date:(id)arg2;
- (void)tracePrediction:(id)arg1 date:(id)arg2 delay:(double)arg3;
- (_Bool)writeTraceToDisk;
- (_Bool)isEqualToTravelAgendaItem:(id)arg1;
- (_Bool)haveAdvised;
- (_Bool)isCloseToPersonAtLocation:(id)arg1;
- (void)dealloc;
- (void)advise:(id)arg1;
- (id)description;
- (id)initWithLocation:(id)arg1 date:(id)arg2 adviceBlock:(CDUnknownBlockType)arg3;
- (id)initWithLocation:(id)arg1 date:(id)arg2 travelMethod:(int)arg3 adviceBlock:(CDUnknownBlockType)arg4;

@end

@interface EKTravelEngine : NSObject
{
    NSObject<OS_dispatch_queue> *_travelEngineQueue;
    NSObject<OS_dispatch_source> *_syncYieldTimer;
    PCPersistentTimer *_periodicRefreshTimer;
    _Bool _running;
    _Bool _needsRefresh;
    _Bool _databaseIsEncryptedAndUnreadable;
    _Bool _yieldingToSync;
    NSMutableDictionary *_eventExternalURLsToAgendaEntries;
    EKTravelEngineThrottle *_throttle;
    EKTravelAdvisor *_travelAdvisor;
    CDUnknownBlockType _adviceBlock;
}

+ (id)_engineIdentifier;
+ (int)_geoTransportTypeForCalLocationRoutingMode:(long long)arg1;
+ (_Bool)hasTravelEligibleEvents:(id)arg1;
@property(copy, nonatomic) CDUnknownBlockType adviceBlock; // @synthesize adviceBlock=_adviceBlock;
- (void)_periodicRefreshTimerFired:(id)arg1;
- (void)_unregisterAllAgendaItems;
- (void)_refreshIfNeeded;
- (void)_trimAgendaEntriesBeforeDate:(id)arg1 andAfterDate:(id)arg2;
- (void)_unregisterForNotificationObservation;
- (void)_registerForNotificationObservation;
- (void)_uninstallPeriodicRefreshTimer;
- (void)_installPeriodicRefreshTimer;
- (void)_uninstallSyncYieldTimer;
- (void)_installSyncYieldTimer;
- (_Bool)_isProtectedDataAvailable;
- (void)_locationAuthorizationChanged:(int)arg1;
- (void)_receivedTravelAdvice:(id)arg1 forEventWithExternalURL:(id)arg2;
- (void)_mobileKeyBagLockStatusNotificationReceived;
- (void)_significantTimeChangeNotificationReceived;
- (void)_calSyncClientFinishedMultiSaveNotificationReceived;
- (void)_calSyncClientBeginningMultiSaveNotificationReceived;
- (void)_calDatabaseChangedNotificationReceived;
- (void)ceaseMonitoringAgendaItemForEventWithExternalURL:(id)arg1;
- (void)stop;
- (void)start;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKTravelEngineAgendaEntry : NSObject
{
    _Bool _dismissed;
    NSString *_eventExternalURL;
    EKTravelAgendaItem *_agendaItem;
    EKTravelAdvisor *_advisor;
}

@property(retain, nonatomic) EKTravelAdvisor *advisor; // @synthesize advisor=_advisor;
@property(nonatomic) _Bool dismissed; // @synthesize dismissed=_dismissed;
@property(retain, nonatomic) EKTravelAgendaItem *agendaItem; // @synthesize agendaItem=_agendaItem;
@property(retain, nonatomic) NSString *eventExternalURL; // @synthesize eventExternalURL=_eventExternalURL;
- (id)description;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKTravelEngineThrottle : NSObject
{
    _Bool _running;
    CDUnknownBlockType _adviceBlock;
    NSDate *_nextEmissionDate;
    NSMutableOrderedSet *_throttledAdviceQueue;
    PCPersistentTimer *_emissionTimer;
    NSObject<OS_dispatch_queue> *_throttleQueue;
    unsigned long long _numberOfThrottleAdviceObjectsToEmitLater;
}

+ (id)_throttleIdentifier;
+ (double)_throttlePeriodInSeconds;
@property(nonatomic) _Bool running; // @synthesize running=_running;
@property(nonatomic) unsigned long long numberOfThrottleAdviceObjectsToEmitLater; // @synthesize numberOfThrottleAdviceObjectsToEmitLater=_numberOfThrottleAdviceObjectsToEmitLater;
@property(nonatomic) NSObject<OS_dispatch_queue> *throttleQueue; // @synthesize throttleQueue=_throttleQueue;
@property(retain, nonatomic) PCPersistentTimer *emissionTimer; // @synthesize emissionTimer=_emissionTimer;
@property(retain, nonatomic) NSMutableOrderedSet *throttledAdviceQueue; // @synthesize throttledAdviceQueue=_throttledAdviceQueue;
@property(retain, nonatomic) NSDate *nextEmissionDate; // @synthesize nextEmissionDate=_nextEmissionDate;
@property(copy, nonatomic) CDUnknownBlockType adviceBlock; // @synthesize adviceBlock=_adviceBlock;
- (void)_significantTimeChangeNotificationReceived;
- (void)_unregisterForNotificationObservation;
- (void)_registerForNotificationObservation;
- (void)_emitAdviceObjects:(id)arg1;
- (void)_emissionTimerFired:(id)arg1;
- (void)_uninstallEmissionTimer;
- (void)_updateEmissionTimerWithEmissionDate:(id)arg1;
- (void)_analyzeQueueAndPrepareForEmission;
- (void)removeAllThrottledAdvice;
- (void)removeThrottledAdviceForEventWithExternalURL:(id)arg1;
- (void)injectAdvice:(id)arg1 forEventWithExternalURL:(id)arg2;
- (void)stop;
- (void)start;
- (id)description;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface EKTravelEngineThrottledAdvice : NSObject
{
    NSString *_eventExternalURL;
    id <EKTravelAdvice> _advice;
}

@property(retain, nonatomic) id <EKTravelAdvice> advice; // @synthesize advice=_advice;
@property(readonly, retain, nonatomic) NSString *eventExternalURL; // @synthesize eventExternalURL=_eventExternalURL;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithEventExternalURL:(id)arg1;

@end

@interface EKTravelEngineUtilities : NSObject
{
}

+ (id)authorizationStatusAsString:(int)arg1;
+ (id)calendarLocationBundle;
+ (id)geoTransportTypeAsString:(int)arg1;
+ (id)formattedLocationCoordinates:(id)arg1;

@end

@interface EKTravelEventsPredicate : EKPredicate
{
    NSDate *_startDate;
    NSDate *_endDate;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(retain, nonatomic) NSDate *startDate; // @synthesize startDate=_startDate;
- (_Bool)isEqual:(id)arg1;
- (id)predicateFormat;
- (_Bool)evaluateWithObject:(id)arg1;
- (id)defaultPropertiesToLoad;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCalendarIDs:(id)arg1 startDate:(id)arg2 endDate:(id)arg3;

@end

@interface EKTravelLookupManager : NSObject
{
}

+ (void)estimateGeolocationFromHistoricDevicePositionAtLocation:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
+ (void)geocodeAddress:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
+ (id)defaultManager;
- (void)findCoordinatesForLocation:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_updateLocation:(id)arg1 withMapItem:(id)arg2 forRoute:(id)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)_travelTimeWithStartCoordinate:(id)arg1 endCoordinate:(id)arg2 arrivalDate:(id)arg3 withRouteType:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)travelTimeFrom:(id)arg1 to:(id)arg2 arrivalDate:(id)arg3 withRouteTypes:(id)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (void)travelTimeFrom:(id)arg1 to:(id)arg2 arrivalDate:(id)arg3 withRouteType:(id)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;

@end

__attribute__((visibility("hidden")))
@interface EKTravelPrediction : NSObject <NSSecureCoding>
{
    NSDate *_departureDate;
    NSDate *_arrivalDate;
    CLLocation *_startingLocation;
    double _validRadius;
    NSDate *_predictionDate;
    double _ttl;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) double ttl; // @synthesize ttl=_ttl;
@property(readonly, nonatomic) NSDate *predictionDate; // @synthesize predictionDate=_predictionDate;
@property(readonly, nonatomic) double validRadius; // @synthesize validRadius=_validRadius;
@property(readonly, nonatomic) CLLocation *startingLocation; // @synthesize startingLocation=_startingLocation;
@property(readonly, nonatomic) NSDate *arrivalDate; // @synthesize arrivalDate=_arrivalDate;
@property(readonly, nonatomic) NSDate *departureDate; // @synthesize departureDate=_departureDate;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, nonatomic) id <EKTravelAdvice> advice;
- (_Bool)isExpiredWithLocation:(id)arg1 date:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)initWithDepartureDate:(id)arg1 arrivalDate:(id)arg2 startingLocation:(id)arg3 predictionDate:(id)arg4 pollAggressively:(_Bool)arg5;
- (id)initWithDepartureDate:(id)arg1 arrivalDate:(id)arg2 startingLocation:(id)arg3 validRadius:(double)arg4 predictionDate:(id)arg5 ttl:(double)arg6;

@end

__attribute__((visibility("hidden")))
@interface EKTravelPredictionCar : EKTravelPrediction <NSSecureCoding>
{
    _Bool _hasTrafficIncidentOnRoute;
    int _routeIncidentType;
    int _routeIncidentSignificance;
    unsigned long long _currentTrafficDensity;
    unsigned long long _historicTrafficDensity;
    NSString *_routeIncidentStreetName;
    unsigned long long _travelState;
    double _travelStateScore;
}

@property(readonly, nonatomic) double travelStateScore; // @synthesize travelStateScore=_travelStateScore;
@property(readonly, nonatomic) unsigned long long travelState; // @synthesize travelState=_travelState;
@property(readonly, nonatomic) NSString *routeIncidentStreetName; // @synthesize routeIncidentStreetName=_routeIncidentStreetName;
@property(readonly, nonatomic) int routeIncidentSignificance; // @synthesize routeIncidentSignificance=_routeIncidentSignificance;
@property(readonly, nonatomic) int routeIncidentType; // @synthesize routeIncidentType=_routeIncidentType;
@property(readonly, nonatomic) _Bool hasTrafficIncidentOnRoute; // @synthesize hasTrafficIncidentOnRoute=_hasTrafficIncidentOnRoute;
@property(readonly, nonatomic) unsigned long long historicTrafficDensity; // @synthesize historicTrafficDensity=_historicTrafficDensity;
@property(readonly, nonatomic) unsigned long long currentTrafficDensity; // @synthesize currentTrafficDensity=_currentTrafficDensity;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)advice;
- (void)dealloc;
- (void)setTravelState:(unsigned long long)arg1 withConfidence:(double)arg2;
- (void)addTrafficIncidentOfType:(int)arg1 withSignificance:(int)arg2 onStreet:(id)arg3;
- (void)setTrafficConditionsCurrent:(unsigned long long)arg1 historic:(unsigned long long)arg2;
- (id)initWithDepartureDate:(id)arg1 arrivalDate:(id)arg2 startingLocation:(id)arg3 predictionDate:(id)arg4 hypothesizer:(id)arg5;

@end

__attribute__((visibility("hidden")))
@interface EKTravelPredictionWalking : EKTravelPrediction <NSSecureCoding>
{
}

@end

__attribute__((visibility("hidden")))
@interface EKTravelRealRoutePredictor : NSObject <EKTravelRoutePredictor>
{
    _Bool _hypothesisInProgress;
    NSDate *_arrivalDate;
    GEORouteHypothesizer *_hypothesizer;
    EKTravelRealRoutePredictorInternalDelegate *_hypothesizerDelegate;
    GEOComposedWaypoint *_sourceWaypoint;
    GEOComposedWaypoint *_destinationWaypoint;
    GEOQuickETARequester *_quickHypothesizer;
    int _travelMethod;
    EKTravelAgendaItem *_agendaItem;
}

@property(readonly, nonatomic) int travelMethod; // @synthesize travelMethod=_travelMethod;
@property(nonatomic) EKTravelAgendaItem *agendaItem; // @synthesize agendaItem=_agendaItem;
- (void)updateLocation:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)_getOneshotPredictionFrom:(id)arg1 transportType:(int)arg2 handler:(CDUnknownBlockType)arg3;
- (void)_getAutomobilePredictionFrom:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (void)_newQuickHypothesizerWithRequest:(id)arg1;
- (void)_newHypothesizer;
- (id)initWithSource:(id)arg1 destination:(id)arg2 arrivalDate:(id)arg3 travelMethod:(int)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface EKTravelRealRoutePredictorInternalDelegate : NSObject <GEORouteHypothesizerDelegate>
{
    NSDate *_lastUpdateDate;
}

@property(readonly, nonatomic) NSDate *lastUpdateDate; // @synthesize lastUpdateDate=_lastUpdateDate;
- (void)routeHypothesizerArrived:(id)arg1;
- (void)routeHypothesizer:(id)arg1 receivedETAError:(id)arg2;
- (void)routeHypothesizer:(id)arg1 receivedETAResponse:(id)arg2;
- (void)routeHypothesizer:(id)arg1 willSendETARequest:(id)arg2;
- (void)routeHypothesizerUpdatedETA:(id)arg1 etaRoute:(id)arg2;
- (void)routeHypothesizer:(id)arg1 matchedToRoute:(id)arg2;
- (void)routeHypothesizerRerouted:(id)arg1 request:(id)arg2 response:(id)arg3;
- (void)routeHypothesizer:(id)arg1 willRequestNewRoute:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface EKUnacknowledgedEventsPredicate : NSPredicate <NSSecureCoding>
{
}

+ (id)predicate;
+ (_Bool)supportsSecureCoding;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;

@end

@interface EKUnalertedEventsPredicate : NSPredicate <NSSecureCoding>
{
}

+ (id)predicate;
+ (_Bool)supportsSecureCoding;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;

@end

@interface EKUpcomingEventsPredicate : NSPredicate <NSSecureCoding>
{
    int _limit;
}

+ (id)predicateWithLimit:(int)arg1;
+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) int limit; // @synthesize limit=_limit;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)evaluateWithObject:(id)arg1;
- (id)initWithLimit:(int)arg1;

@end

__attribute__((visibility("hidden")))
@interface EKWatchdog : NSObject
{
    double _timeout;
    NSString *_identifier;
    NSObject<OS_dispatch_source> *_timer;
}

+ (void)executeWithTimeout:(double)arg1 identifier:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)start;
- (void)invalidate;
- (void)dealloc;
- (id)initWithTimeout:(double)arg1 identifier:(id)arg2 block:(CDUnknownBlockType)arg3;
- (id)initWithTimeout:(double)arg1 identifier:(id)arg2;

@end

@interface NSCalendarDate (EKMSUIDAdditions)
- (id)ekmsuidStringForYearMonthDay;
- (id)ekmsuidGMTDateToDateInTimeZone:(id)arg1;
@end

@interface NSDate (CalendarAdditions)
- (id)dateForEndOfDayInTimeZone:(id)arg1;
- (id)dateForDayInTimeZone:(id)arg1;
- (id)dateForEndOfDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
- (id)dateForDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
- (id)dateInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
@end

@interface NSError (EventKit)
+ (id)errorWithCode:(int)arg1 description:(id)arg2 reason:(id)arg3;
+ (id)errorWithCode:(int)arg1 description:(id)arg2;
+ (id)errorWithCode:(int)arg1;
+ (id)errorWithCADResult:(int)arg1 action:(id)arg2;
+ (id)errorWithCADResult:(int)arg1;
+ (id)_defaultDescriptionForCode:(int)arg1;
@end

@interface NSTimeZone (CalendarAdditions)
+ (id)calendarTimeZone;
@end

__attribute__((visibility("hidden")))
@interface StatsOperation : NSObject
{
    int _type;
    long long _intValue;
    double _doubleValue;
}

@property double doubleValue; // @synthesize doubleValue=_doubleValue;
@property long long intValue; // @synthesize intValue=_intValue;
@property int type; // @synthesize type=_type;
- (id)initWithType:(int)arg1 doubleValue:(double)arg2;
- (id)initWithType:(int)arg1 intValue:(long long)arg2;

@end

@interface _EKAlarmEngine : NSObject <CLLocationManagerDelegate>
{
    int _lastDBSequence;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    NSDate *_nextFireDate;
    double _lastCheckpoint;
    PCPersistentTimer *_timer;
    _Bool _populating;
    double _populateStart;
    NSTimer *_syncTimer;
    _Bool _pendingChanges;
    _Bool _fencesNeedAdjusted;
    NSDateFormatter *_dateFormatter;
    CLLocationManager *_locationManager;
    NSDate *_tomorrow;
    _Bool _shouldUpdateWithForceForAlarmTable;
    _Bool _shouldUpdateWithForceForFences;
}

+ (id)sharedInstance;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 monitoringDidFailForRegion:(id)arg2 withError:(id)arg3;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didExitRegion:(id)arg2;
- (void)locationManager:(id)arg1 didEnterRegion:(id)arg2;
- (void)_proximityAlertTriggered:(id)arg1 entered:(_Bool)arg2;
- (void)_adjustFences:(id)arg1;
- (_Bool)_shouldAdjustFencesWithStatus:(int)arg1;
- (id)_stringForAuthorizationStatus:(int)arg1;
- (void)_removeAllFences;
- (void)_locationDaemonDidLaunch;
- (void)_calendarNotificationSettingChanged;
- (void)_timeDidChangeSignificantly;
- (void)_syncDidEnd;
- (void)_syncDidStart;
- (void)_syncTimerFired:(id)arg1;
- (void)_killSyncTimer;
- (void)_resetSyncTimer;
- (void)_timerFired:(id)arg1;
- (void)_notifyAlarmsFired:(id)arg1;
- (void)_rescheduleTimer;
- (id)_dateFormatter;
- (void)_killTimer;
- (void)_populateFinished;
- (_Bool)_populateAlarmTable:(id)arg1;
- (void)_storeAlarms:(id)arg1 nextScheduleLimit:(double)arg2 eventStore:(id)arg3;
- (void)_timeZoneChanged:(id)arg1;
- (_Bool)_haveAlarmsChanged:(id)arg1;
- (void)_databaseChanged;
- (void)_updateWithForceForAlarmTable:(_Bool)arg1 forFences:(_Bool)arg2;
- (_Bool)_isDataProtected;
- (void)_protectedDataDidBecomeAvailable;
- (void)reschedule;
- (void)stop;
- (void)start;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _EKNotificationMonitor : NSObject
{
    EKEventStore *_eventStore;
    CDUnknownBlockType _eventStoreGetter;
    _Bool _running;
    PCPersistentTimer *_timer;
    NSDate *_nextFireTime;
    NSTimer *_syncTimer;
    _Bool _pendingChanges;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_timerQueue;
    unsigned long long _lastEventCount;
    unsigned long long _lastReminderCount;
    NSArray *_eventNotificationReferences;
    NSArray *_reminderNotificationReferences;
    NSMutableArray *_recentlyRepliedNotifications;
    NSMutableArray *_culledRecentlyRepliedNotifications;
    _Bool _initialCheck;
    _Bool _shouldInstallPersistentTimer;
    _Bool _useSyncIdleTimer;
    _Bool _loadRecentlyRepliedNotifications;
    NSMutableSet *_alertedNotificationsThatFailedToMarkAlerted;
}

- (void)_syncDidEnd;
- (void)_syncDidStart;
- (void)_syncTimerFired:(id)arg1;
- (void)_killSyncTimer;
- (void)_resetSyncTimer;
- (void)_notifyForUnalertedNotifications:(id)arg1;
- (unsigned long long)_checkForReminderNotifications:(id)arg1;
- (unsigned long long)_checkForEventNotifications:(id)arg1;
- (void)_timerFired;
- (void)_alertPrefChanged;
- (void)_notificationCountChangedExternally;
- (void)_databaseChanged;
- (void)_resetTimer;
- (void)attemptReload;
- (void)adjust;
@property(readonly, nonatomic) NSArray *reminderNotificationReferences;
@property(readonly, nonatomic) NSArray *eventNotificationReferences;
@property(readonly, nonatomic) NSArray *notificationReferences;
@property(readonly, nonatomic) unsigned long long notificationCount;
@property(readonly, nonatomic) unsigned long long eventNotificationCount;
- (void)stop;
- (void)start;
- (void)killTimer;
- (id)_eventStore;
- (void)dealloc;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initForBulletinBoardWithEventStoreGetter:(CDUnknownBlockType)arg1;

@end

