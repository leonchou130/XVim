//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CDXTicket {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    struct {
        unsigned char _field1[6];
        unsigned short _field2;
    } _field5;
    unsigned int _field6;
    unsigned char _field7[0];
};

struct _opaque_pthread_cond_t {
    long long __sig;
    char __opaque[40];
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct in_addr {
    unsigned int s_addr;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char sin_len;
    unsigned char sin_family;
    unsigned short sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

struct tagCONNRESULT {
    unsigned int dwCallID;
    int iResultCount;
    int iRole;
    unsigned int dwRemoteCallID;
    int proto;
    int bIfRelay;
    unsigned short wRelayServType;
    unsigned short wChannelNumber;
    struct tagIPPORT mbLocal;
    struct tagIPPORT mbRemote;
    struct tagIPPORT mbSrc;
    struct tagIPPORT mbDst;
    struct tagIPPORT mbRemoteSrc;
    struct tagIPPORT mbRelayExt;
    unsigned int dwRTT;
    int bIfLocalCellularQoS;
    int bIfRemoteCellularQoS;
    int iLocalCellTech;
    int iRemoteCellTech;
    unsigned int dwCellularUniqueTag;
    unsigned short wCellularMTU;
    int bIfUpgrade;
    int bIfPrimary;
    int bIfReplaceOnly;
    struct tagCONNRESULT *next;
};

struct tagIPPORT {
    int iFlags;
    char szIfName[16];
    union {
        unsigned int dwIPv4;
        unsigned char abIPv6[16];
    } IP;
    unsigned short wPort;
};

struct tagVoiceChatBeacon {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

#pragma mark Typedef'd Structures

typedef struct {
    int _field1;
    char *_field2;
    int _field3;
    unsigned int _field4;
} CDStruct_68f9d01f;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices
// UUID: A303CB2C-F2E6-3CF1-81EE-DFE254A3F89E
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 733.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CDXClientDelegate
- (void)CDXClient:(CDXClient *)arg1 error:(NSError *)arg2;
- (void)CDXClient:(CDXClient *)arg1 preblob:(NSData *)arg2;
@end

@protocol CDXClientSessionDelegate
- (void)CDXClientSession:(CDXClientSession *)arg1 receivedData:(NSData *)arg2 from:(long long)arg3;
@end

@protocol GKSessionDelegate <NSObject>

@optional
- (void)session:(GKSession *)arg1 didFailWithError:(NSError *)arg2;
- (void)session:(GKSession *)arg1 connectionWithPeerFailed:(NSString *)arg2 withError:(NSError *)arg3;
- (void)session:(GKSession *)arg1 didReceiveConnectionRequestFromPeer:(NSString *)arg2;
- (void)session:(GKSession *)arg1 peer:(NSString *)arg2 didChangeState:(int)arg3;
@end

@protocol GKSessionVoiceChatDelegate <GKSessionDelegate>
- (void)session:(id)arg1 didReceiveOOBAudioPacket:(id)arg2 fromPeerID:(NSString *)arg3;
- (void)session:(id)arg1 didReceiveAudioPacket:(NSData *)arg2 fromPeerID:(NSString *)arg3;
@end

@protocol GKSimpleTimerDelegate
- (void)timeout:(GKSimpleTimer *)arg1;
@end

@protocol GKTableCleanupWhenRemoved <NSObject>
- (void)cleanupForGKTable:(GKTable *)arg1;
@end

@protocol GKVoiceChatClient <NSObject>
- (NSString *)participantID;
- (void)voiceChatService:(GKVoiceChatService *)arg1 sendData:(NSData *)arg2 toParticipantID:(NSString *)arg3;

@optional
- (void)voiceChatService:(GKVoiceChatService *)arg1 didReceiveInvitationFromParticipantID:(NSString *)arg2 callID:(unsigned int)arg3;
- (void)voiceChatService:(GKVoiceChatService *)arg1 didStopWithParticipantID:(NSString *)arg2 error:(NSError *)arg3;
- (void)voiceChatService:(GKVoiceChatService *)arg1 didNotStartWithParticipantID:(NSString *)arg2 error:(NSError *)arg3;
- (void)voiceChatService:(GKVoiceChatService *)arg1 didStartWithParticipantID:(NSString *)arg2;
- (void)voiceChatService:(GKVoiceChatService *)arg1 sendRealTimeData:(NSData *)arg2 toParticipantID:(NSString *)arg3;
@end

@protocol InterfaceListenerDelegate
- (void)networkStateDidChange;
- (void)interfaceStateDidChangeWithWifiUp:(_Bool)arg1 cellUp:(_Bool)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol VideoConferenceDelegate
- (void)videoConference:(VideoConference *)arg1 didStartSession:(_Bool)arg2 withCallID:(unsigned int)arg3 error:(NSError *)arg4;

@optional
- (void)videoConference:(VideoConference *)arg1 closeConnectionForCallID:(unsigned int)arg2;
- (void)videoConference:(VideoConference *)arg1 localAudioEnabled:(_Bool)arg2 forCallID:(unsigned int)arg3 error:(NSError *)arg4;
- (void)videoConference:(VideoConference *)arg1 remoteAudioEnabled:(_Bool)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 didReceiveData:(NSData *)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 didChangeLocalVariablesForCallID:(unsigned int)arg2;
- (void)videoConference:(VideoConference *)arg1 didReceiveARPLData:(NSData *)arg2 fromCallID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 sendIPChangeRequest:(NSData *)arg2 withCallID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 withCallID:(unsigned int)arg2 networkHint:(_Bool)arg3;
- (void)videoConference:(VideoConference *)arg1 videoQualityNotificationForCallID:(unsigned int)arg2 isDegraded:(_Bool)arg3 isRemote:(_Bool)arg4;
- (void)videoConference:(VideoConference *)arg1 cancelRelayRequest:(unsigned int)arg2 requestDict:(NSDictionary *)arg3;
- (void)videoConference:(VideoConference *)arg1 sendRelayUpdate:(unsigned int)arg2 updateDict:(NSDictionary *)arg3;
- (void)videoConference:(VideoConference *)arg1 inititiateRelayRequest:(unsigned int)arg2 requestDict:(NSDictionary *)arg3;
- (void)videoConference:(VideoConference *)arg1 updateOutputMeterLevel:(float)arg2;
- (void)videoConference:(VideoConference *)arg1 updateInputMeterLevel:(float)arg2;
- (void)videoConference:(VideoConference *)arg1 updateOutputFrequencyLevel:(NSData *)arg2;
- (void)videoConference:(VideoConference *)arg1 updateInputFrequencyLevel:(NSData *)arg2;
- (void)videoConference:(VideoConference *)arg1 didRemoteScreenAttributesChange:(VideoAttributes *)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 remoteVideoPaused:(_Bool)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 remoteAudioPaused:(_Bool)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 didRemoteVideoAttributesChange:(VideoAttributes *)arg2 forCallID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 didReceiveFirstRemoteFrameForCallID:(unsigned int)arg2;
- (void)videoConference:(VideoConference *)arg1 remoteMediaStalled:(_Bool)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 receivedNoRemotePacketsForTime:(double)arg2 callID:(unsigned int)arg3;
- (void)videoConference:(VideoConference *)arg1 didStartSession:(_Bool)arg2 withCallID:(unsigned int)arg3 withUserInfo:(NSDictionary *)arg4 error:(NSError *)arg5;
- (void)videoConference:(VideoConference *)arg1 didStopWithCallID:(unsigned int)arg2 error:(NSError *)arg3 callMetadata:(NSDictionary *)arg4;
- (void)videoConference:(VideoConference *)arg1 didStopWithCallID:(unsigned int)arg2 error:(NSError *)arg3;
@end

@protocol VideoConferenceRealTimeChannel
- (void)vcArg:(id)arg1 sendRealTimeData:(NSData *)arg2 toParticipantID:(NSString *)arg3;
@end

@protocol VideoConferenceSpeakingDelegate
- (void)didStopSpeaking:(NSString *)arg1;
- (void)didStartSpeaking:(NSString *)arg1;
@end

__attribute__((visibility("hidden")))
@interface CDXClient : NSObject
{
    id <CDXClientDelegate> delegate_;
    long long holePunchAttemptCount_;
    NSData *preblob_;
    NSMutableDictionary *sessionLookup_;
    NSError *error_;
    int fd_;
    unsigned long long holePunchSID_;
    unsigned long long prevHolePunchSID_;
    NSString *server_;
    unsigned short port_;
    unsigned short localPort_;
    long long restartCount_;
    struct sockaddr_in cdxaddr_ipv4;
    double holePunchInterval_;
    _Bool preblobIsUpToDate_;
    _Bool willReconfigureShortly_;
    struct __SCDynamicStore *scDynamicStore_;
    struct __CFRunLoopSource *scDynamicStoreRunLoopSource_;
    NSObject<OS_dispatch_queue> *queue_;
    NSObject<OS_dispatch_source> *source_;
    NSObject<OS_dispatch_source> *holePunchTimer_;
    CDUnknownBlockType preblobCallback_;
    void *padding_[10];
}

+ (id)sharedClient;
@property(nonatomic) id <CDXClientDelegate> delegate; // @synthesize delegate=delegate_;
@property(copy, nonatomic) CDUnknownBlockType preblobCallback; // @synthesize preblobCallback=preblobCallback_;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=queue_;
- (id)createSessionWithTicket:(id)arg1 sessionKey:(id)arg2;
- (void)invalidateSession:(id)arg1;
- (_Bool)sendRaw:(id)arg1;
- (void)invalidate;
- (void)stopHolePunchTimer;
- (void)restart;
- (void)start;
- (void)dealloc;
- (id)initWithOptions:(id)arg1 delegate:(id)arg2;
- (void)startListeningOnSockets;
- (void)stopListeningOnSockets;
- (void)networkDidChange;
- (void)handleFDEvent;
- (void)resetHolepunchTimer;
- (_Bool)handleHolePunchEvent;
- (void)sendHolePunch;
- (void)setPreblob:(id)arg1;
@property(readonly) NSData *preblob; // @synthesize preblob=preblob_;
- (void)setError:(id)arg1;
@property(readonly, nonatomic) NSError *error; // @synthesize error=error_;

@end

__attribute__((visibility("hidden")))
@interface CDXClientSession : NSObject
{
    id <CDXClientSessionDelegate> delegate_;
    CDXClient *CDXClient_;
    NSData *ticket_;
    NSData *sessionKey_;
    NSData *sessionKeyPrepped_;
    NSMutableIndexSet *participantsInFlight_;
    long long retransmitAttempts_;
    NSData *lastSent_;
    unsigned short seq_;
    unsigned char pid_;
    unsigned short *ack_;
    NSObject<OS_dispatch_source> *retransmitTimer_;
    CDUnknownBlockType inboundHandler_;
}

@property(copy, nonatomic) CDUnknownBlockType inboundHandler; // @synthesize inboundHandler=inboundHandler_;
@property(readonly, copy, nonatomic) NSIndexSet *participantsInFlight; // @synthesize participantsInFlight=participantsInFlight_;
@property(readonly, copy, nonatomic) NSData *sessionKey; // @synthesize sessionKey=sessionKey_;
@property(copy, nonatomic) NSData *ticket; // @synthesize ticket=ticket_;
@property(nonatomic) id <CDXClientSessionDelegate> delegate; // @synthesize delegate=delegate_;
@property(readonly, retain, nonatomic) CDXClient *CDXClient; // @synthesize CDXClient=CDXClient_;
- (void)recvRaw:(id)arg1 ticket:(id)arg2;
- (_Bool)sendData:(id)arg1 toParticipants:(id)arg2;
- (_Bool)sendData:(id)arg1;
- (_Bool)sendRaw:(id)arg1 toParticipants:(id)arg2;
- (id)encrypt:(id)arg1;
- (id)decrypt:(id)arg1 ticket:(id)arg2;
- (void)dealloc;
- (void)resetRetransmitTimer;
- (_Bool)retransmitEvent;
- (void)invalidate;
- (void)stopRetransmitTimer;
- (id)initWithCDXClient:(id)arg1 ticket:(id)arg2 sessionKey:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface GCKEventItem : NSObject
{
    CDStruct_68f9d01f *_event;
    unsigned int _pid;
}

@property unsigned int pid; // @synthesize pid=_pid;
@property CDStruct_68f9d01f *event; // @synthesize event=_event;
- (void)dealloc;
- (id)initWithEvent:(CDStruct_68f9d01f *)arg1 remotePeer:(unsigned int)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GCKOOBMessage : NSObject <NSCoding>
{
    unsigned int type;
    unsigned int band;
    NSData *data;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)data;
- (unsigned int)band;
- (unsigned int)type;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKAsyncSocket : NSObject
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(retain, nonatomic) id socketName;
@property(copy, nonatomic) CDUnknownBlockType connectedHandler;
@property(copy, nonatomic) CDUnknownBlockType receiveDataHandler;
@property(nonatomic) NSObject<OS_dispatch_queue> *targetQueue;
- (void)setSyncQueue:(id)arg1;
- (id)syncQueue;
- (void)sendData:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)invalidate;
- (void)tcpConnectSockAddr:(const struct sockaddr *)arg1 port:(unsigned short)arg2;
- (void)tcpAttachSocketDescriptor:(int)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKAsyncSocketInternal : GKAsyncSocket
{
    NSObject<OS_dispatch_source> *_receiveSource;
    NSObject<OS_dispatch_source> *_sendSource;
    _Bool _sendSourceSuspended;
    _Bool _invalidated;
    int _connectionSocket;
    NSMutableData *_dataToSend;
    CDUnknownBlockType _receiveDataHandler;
    CDUnknownBlockType _connectedHandler;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSObject<OS_dispatch_queue> *_targetQueue;
    NSString *_socketName;
}

- (void)setSocketName:(id)arg1;
- (id)socketName;
- (void)setConnectedHandler:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)connectedHandler;
- (void)setReceiveDataHandler:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)receiveDataHandler;
- (id)targetQueue;
- (void)sendData;
- (void)receiveData;
- (void)closeConnectionNow;
- (void)sendData:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)invalidate;
- (void)dealloc;
- (void)tcpConnectSockAddr:(const struct sockaddr *)arg1 port:(unsigned short)arg2;
- (void)tcpAttachSocketDescriptor:(int)arg1;
- (_Bool)setupSourcesWithSocket:(int)arg1 receiveEventHandler:(CDUnknownBlockType)arg2 sendEventHandler:(CDUnknownBlockType)arg3;
- (void)setTargetQueue:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKTable : NSObject
{
    struct _gktableitem {
        unsigned int _field1;
        id _field2;
        double _field3;
        double _field4;
    } *_items;
    unsigned long long _count;
    unsigned long long _size;
    struct _opaque_pthread_mutex_t _lock;
}

@property(readonly) unsigned long long count; // @synthesize count=_count;
- (void)print;
- (void)unlock;
- (void)lock;
- (void)makeObjectsPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)makeObjectsPerformSelector:(SEL)arg1;
- (void)removeAllObjects;
- (void)removeObjectForKey:(unsigned int)arg1;
- (void)touchObjectForKey:(unsigned int)arg1;
- (void)touchObject:(id)arg1;
- (void)setObject:(id)arg1 forKey:(unsigned int)arg2;
- (id)allObjects;
- (id)objectForKey:(unsigned int)arg1;
- (void)dealloc;
- (id)initWithSize:(unsigned long long)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKAutoPeerIDTable : GKTable
{
}

- (void)setObject:(id)arg1 forKey:(unsigned int)arg2;
- (id)objectForKey:(unsigned int)arg1;

@end

@interface GKBluetoothSupport : NSObject
{
}

+ (int)_directBTStatus;
+ (int)_determineBluetoothStatus;
+ (void)initialize;
+ (void)turnBluetoothOn;
+ (void)cleanup;
+ (int)bluetoothStatus;

@end

@interface GKConnection : NSObject
{
}

+ (_Bool)isRelayEnabled;
+ (id)externalAddressForCDXSelfConnectionData:(id)arg1;
+ (id)externalAddressForSelfConnectionData:(id)arg1;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)getLocalConnectionDataForLocalGaming;
- (id)networkStatistics;
- (id)networkStatisticsDictionaryForGCKStats:(void *)arg1;
- (void)cancelConnectParticipant:(id)arg1;
- (void)updateRelayWithParticipant:(id)arg1 withConnectionData:(id)arg2 withRelayInfo:(id)arg3 didInitiate:(_Bool)arg4;
- (void)initiateRelayWithParticipant:(id)arg1 withConnectionData:(id)arg2 withRelayInfo:(id)arg3 didInitiate:(_Bool)arg4;
- (void)connectParticipantsWithConnectionData:(id)arg1 withSessionInfo:(id)arg2;
- (void)setParticipantID:(id)arg1 forPeerID:(id)arg2;
- (_Bool)convertPeerID:(id)arg1 toParticipantID:(id *)arg2;
- (_Bool)convertParticipantID:(id)arg1 toPeerID:(id *)arg2;
- (void)getLocalConnectionDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)connect;
- (unsigned int)gckPID;
@property id eventDelegate;
@property(nonatomic) struct opaqueRTCReporting *reportingAgent;
- (struct OpaqueGCKSession *)gckSession;
- (void)preRelease;
- (id)initWithParticipantID:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKConnectionInternal : GKConnection <CDXClientDelegate, CDXClientSessionDelegate>
{
    unsigned int _gckPID;
    NSString *_pidGUID;
    struct OpaqueGCKSession *_gckSession;
    NSMutableArray *_gckEventList;
    _Bool _toForwardEVents;
    id _eventDelegate;
    CDXClient *_cdxClient;
    NSMutableDictionary *_cdxSessions;
    NSData *_preblob;
    CDUnknownBlockType _preblobCallback;
    double _preblobCallbackCancelTime;
    struct _opaque_pthread_mutex_t _xPreblobFetch;
    struct _opaque_pthread_cond_t _cPreblobFetch;
    struct _opaque_pthread_mutex_t _xPrepareThread;
    struct _opaque_pthread_cond_t _cPrepareThread;
    int _fPrepareThread;
    double _wakeTime;
    NSMutableDictionary *_preblobToPIDMap;
    NSMutableDictionary *_pidToPreblobMap;
    NSMutableDictionary *_pidToConnectionDataMap;
    NSMutableArray *_pendingConnectionPIDList;
    _Bool _fAllowMoreRelay;
    NSMutableArray *_allowRelayPIDList;
    NSMutableDictionary *_pidToPlayerIDMap;
    NSMutableDictionary *_pidToConnectTimeoutSource;
    struct _opaque_pthread_mutex_t _xRelay;
    NSMutableDictionary *_pidToRelayInitiateInfoMap;
    NSMutableDictionary *_pidToRelayConnectionDataMap;
    NSMutableDictionary *_pidToRelayUpdateInfoMap;
    NSMutableDictionary *_initRelayQueue;
    NSMutableDictionary *_updateRelayQueue;
    int _fPreReleased;
    int _localGamingCDXSocket;
    unsigned short _localGamingCDXPort;
    NSObject<OS_dispatch_source> *_localGamingCDXListenSource;
    NSMutableDictionary *_localGamingSocketToPIDMap;
    NSMutableDictionary *_localGamingSocketToConnectionDataMap;
    NSMutableSet *_pidsPreparedForConnection;
    struct opaqueRTCReporting *_reportingAgent;
    TimingCollection *_perfTimers;
}

@property(retain) NSMutableDictionary *cdxSessions; // @synthesize cdxSessions=_cdxSessions;
@property(retain, nonatomic) CDXClient *cdxClient; // @synthesize cdxClient=_cdxClient;
- (void)setReportingAgent:(struct opaqueRTCReporting *)arg1;
- (struct opaqueRTCReporting *)reportingAgent;
@property(retain) NSMutableDictionary *pidToConnectTimeoutSource; // @synthesize pidToConnectTimeoutSource=_pidToConnectTimeoutSource;
- (id)getLocalConnectionDataForLocalGaming;
- (_Bool)startListeningForLocalGamingCDX;
- (void)localGamingReceiveDataHandler:(id)arg1 data:(id)arg2 time:(double)arg3 error:(id)arg4;
- (_Bool)localGamingCheckEstablishConnection:(id)arg1 connectionData:(id)arg2;
- (id)networkStatistics;
- (id)networkStatisticsDictionaryForGCKStats:(void *)arg1;
- (void)cancelConnectParticipant:(id)arg1;
- (void)updateRelayWithParticipant:(id)arg1 withConnectionData:(id)arg2 withRelayInfo:(id)arg3 didInitiate:(_Bool)arg4;
- (void)internalUpdateRelayWithParticipant:(id)arg1 withConnectionData:(id)arg2 withRelayInfo:(id)arg3 didInitiate:(_Bool)arg4;
- (void)initiateRelayWithParticipant:(id)arg1 withConnectionData:(id)arg2 withRelayInfo:(id)arg3 didInitiate:(_Bool)arg4;
- (void)internalInitiateRelayWithParticipant:(id)arg1 withConnectionData:(id)arg2 withRelayInfo:(id)arg3 didInitiate:(_Bool)arg4;
- (void)doRelayCheckForRemotePeerID:(id)arg1;
- (id)newRelayUpdateDictionaryForParticipant:(id)arg1 didInitiate:(_Bool)arg2;
- (id)createInitiateRelayDictionaryForParticipant:(id)arg1 remotePeerID:(id)arg2;
- (void)setParticipantID:(id)arg1 forPeerID:(id)arg2;
- (_Bool)convertPeerID:(id)arg1 toParticipantID:(id *)arg2;
- (_Bool)convertParticipantID:(id)arg1 toPeerID:(id *)arg2;
- (void)CDXClientSession:(id)arg1 receivedData:(id)arg2 from:(long long)arg3;
- (id)extractBlobUsingData:(id)arg1 withSourcePID:(unsigned int)arg2 destPID:(unsigned int)arg3;
- (void)CDXClient:(id)arg1 preblob:(id)arg2;
- (void)CDXClient:(id)arg1 error:(id)arg2;
- (id)createInsecureTicketUsingSortedConnectionsFromList:(id)arg1;
- (unsigned int)gckPID;
- (id)eventDelegate;
- (void)setEventDelegate:(id)arg1;
- (void)addEvent:(CDStruct_68f9d01f *)arg1 remotePeer:(unsigned int)arg2;
- (struct OpaqueGCKSession *)gckSession;
- (void)internal_setRemoteConnectionData:(id)arg1 fromParticipantID:(id)arg2 pendingConnectionPIDList:(id)arg3;
- (void)connectParticipantsWithConnectionData:(id)arg1 withSessionInfo:(id)arg2;
- (_Bool)shouldWeInitiateRelayWithPID:(unsigned int)arg1;
- (void)connectPendingConnectionsFromList:(id)arg1 sessionInfo:(id)arg2;
- (void)getLocalConnectionDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)asyncWorkQueue;
- (id)timerQueue;
- (void)dealloc;
- (void)preRelease;
- (id)initWithParticipantID:(id)arg1;

@end

@interface GKDiscovery : NSObject
{
    GKDiscoveryManager *_manager;
}

@property(retain, nonatomic) GKDiscoveryManager *manager; // @synthesize manager=_manager;
- (void)forgetParticipant:(id)arg1 deviceID:(id)arg2;
- (void)sendDataToParticipant:(id)arg1 deviceID:(id)arg2 data:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)stopBrowsing;
- (void)startBrowsingLocalPlayer:(id)arg1;
- (void)stopAdvertising;
- (id)startAdvertisingLocalPlayer:(id)arg1 discoveryInfo:(id)arg2;
@property(copy, nonatomic) CDUnknownBlockType receiveDataHandler;
@property(copy, nonatomic) CDUnknownBlockType playerLostHandler;
@property(copy, nonatomic) CDUnknownBlockType playerFoundHandler;
- (void)dealloc;
- (id)initWithDomain:(id)arg1 type:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKDiscoveryBonjour : NSObject
{
    NSString *_serviceType;
    NSString *_serviceDomain;
    struct _DNSServiceRef_t *_browseRef;
    struct _DNSServiceRef_t *_advertiseRef;
    CDUnknownBlockType _browseCallback;
    CDUnknownBlockType _connectionCallback;
    CDUnknownBlockType _serviceNameCollisionCallback;
    _Bool _checkedInWithLaunchd;
    NSMutableArray *_launchdSources;
    int _listeningPort;
    NSMutableDictionary *_resolveContainers;
    NSObject<OS_dispatch_queue> *_resolveContainersSyncQueue;
}

@property(copy, nonatomic) CDUnknownBlockType serviceNameCollisionCallback; // @synthesize serviceNameCollisionCallback=_serviceNameCollisionCallback;
@property(nonatomic) NSObject<OS_dispatch_queue> *resolveContainersSyncQueue; // @synthesize resolveContainersSyncQueue=_resolveContainersSyncQueue;
@property(copy, nonatomic) CDUnknownBlockType connectionCallback; // @synthesize connectionCallback=_connectionCallback;
@property(copy, nonatomic) CDUnknownBlockType browseCallback; // @synthesize browseCallback=_browseCallback;
@property(retain, nonatomic) NSMutableDictionary *resolveContainers; // @synthesize resolveContainers=_resolveContainers;
@property(retain, nonatomic) NSMutableArray *launchdSources; // @synthesize launchdSources=_launchdSources;
@property(nonatomic) struct _DNSServiceRef_t *advertiseRef; // @synthesize advertiseRef=_advertiseRef;
@property(nonatomic) struct _DNSServiceRef_t *browseRef; // @synthesize browseRef=_browseRef;
@property(copy, nonatomic) NSString *serviceDomain; // @synthesize serviceDomain=_serviceDomain;
@property(copy, nonatomic) NSString *serviceType; // @synthesize serviceType=_serviceType;
- (void)stopAdvertising;
- (void)startAdvertisingServiceName:(id)arg1 discoveryInfo:(id)arg2;
- (void)sendBonjourRegistrationEvent:(id)arg1 discoveryInfo:(id)arg2;
- (void)closeListeningSockets;
- (void)setupListeningSockets;
- (void)setupBothListeningSockets;
- (int)ipV6Socket;
- (int)ipV4Socket;
- (void)createDispatchEventWithSocket:(int)arg1;
- (void)stopResolve:(id)arg1;
- (int)resolveName:(id)arg1 onIndex:(unsigned int)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)stopBrowsing;
- (int)startBrowsing:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithDomain:(id)arg1 type:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKDiscoveryBonjourResolveContainer : NSObject
{
    NSMutableArray *_serviceRefList;
    GKDiscoveryBonjour *_context;
    CDUnknownBlockType _resolveCompletionHandler;
}

@property(nonatomic) GKDiscoveryBonjour *context; // @synthesize context=_context;
@property(copy, nonatomic) CDUnknownBlockType resolveCompletionHandler; // @synthesize resolveCompletionHandler=_resolveCompletionHandler;
@property(retain, nonatomic) NSMutableArray *serviceRefList; // @synthesize serviceRefList=_serviceRefList;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKDiscoveryManager : NSObject
{
    CDUnknownBlockType _playerFoundHandler;
    CDUnknownBlockType _playerLostHandler;
    CDUnknownBlockType _receiveDataHandler;
    NSString *_playerID;
    NSString *_deviceID;
    NSMutableDictionary *_peers;
    GKDiscoveryBonjour *_bonjour;
    NSObject<OS_dispatch_queue> *_peersQueue;
}

+ (id)parseDeviceIDFromServiceName:(id)arg1;
@property(copy, nonatomic) NSString *deviceID; // @synthesize deviceID=_deviceID;
@property(copy, nonatomic) NSString *playerID; // @synthesize playerID=_playerID;
@property(retain, nonatomic) GKDiscoveryBonjour *bonjour; // @synthesize bonjour=_bonjour;
@property(copy, nonatomic) CDUnknownBlockType receiveDataHandler; // @synthesize receiveDataHandler=_receiveDataHandler;
@property(copy, nonatomic) CDUnknownBlockType playerLostHandler; // @synthesize playerLostHandler=_playerLostHandler;
@property(copy, nonatomic) CDUnknownBlockType playerFoundHandler; // @synthesize playerFoundHandler=_playerFoundHandler;
@property(retain, nonatomic) NSMutableDictionary *peers; // @synthesize peers=_peers;
- (void)removeInterface:(unsigned int)arg1 forPeerWithServiceName:(id)arg2;
- (void)didLosePeer:(id)arg1;
- (id)peersList;
- (void)addInterface:(unsigned int)arg1 withDiscoveryInfo:(id)arg2 forPeerWithServiceName:(id)arg3;
- (void)forgetParticipant:(id)arg1 deviceID:(id)arg2;
- (void)sendDataToParticipant:(id)arg1 deviceID:(id)arg2 data:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)stopBrowsing;
- (void)startBrowsingLocalPlayer:(id)arg1;
- (void)cleanUpPeersForBrowse;
- (void)stopAdvertising;
- (id)localServiceName;
- (id)serviceNameforDeviceID:(id)arg1 playerID:(id)arg2;
- (id)startAdvertisingLocalPlayer:(id)arg1 discoveryInfo:(id)arg2;
- (void)passDataToGKLayer:(id)arg1 fromPeer:(id)arg2;
- (void)processEvent:(int)arg1 forPeer:(id)arg2 withUserInfo:(id)arg3;
- (void)connectToSockAddr:(struct sockaddr *)arg1 port:(unsigned short)arg2 forPeer:(id)arg3;
- (void)resolveForPeer:(id)arg1;
- (id)generateDeviceID;
- (void)dealloc;
- (id)initWithDomain:(id)arg1 type:(id)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKDiscoveryPeer : NSObject <GKSimpleTimerDelegate>
{
    NSString *_serviceName;
    NSString *_playerID;
    NSString *_deviceID;
    NSMutableSet *_interfaces;
    NSMutableArray *_orderedInterfaces;
    NSMutableArray *_attemptedInterfaces;
    GKDiscoveryPeerConnection *_trialConnection;
    NSNumber *_chosenInterface;
    _Bool _shouldSignalDiscovery;
    NSMutableArray *_sendDataBuffer;
    GKDiscoveryPeerConnection *_connection;
    GKSimpleTimer *_resolveTimer;
    CDUnknownBlockType _resolveTimeoutHandler;
    NSObject<OS_dispatch_queue> *_syncQueue;
    int _state;
    double _discoveryTimeStamp;
}

@property(copy, nonatomic) CDUnknownBlockType resolveTimeoutHandler; // @synthesize resolveTimeoutHandler=_resolveTimeoutHandler;
@property(retain, nonatomic) GKSimpleTimer *resolveTimer; // @synthesize resolveTimer=_resolveTimer;
@property(nonatomic) double discoveryTimeStamp; // @synthesize discoveryTimeStamp=_discoveryTimeStamp;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(nonatomic) int state; // @synthesize state=_state;
@property(retain, nonatomic) NSMutableArray *sendDataBuffer; // @synthesize sendDataBuffer=_sendDataBuffer;
@property(retain, nonatomic) GKDiscoveryPeerConnection *connection; // @synthesize connection=_connection;
@property(nonatomic) _Bool shouldSignalDiscovery; // @synthesize shouldSignalDiscovery=_shouldSignalDiscovery;
@property(retain, nonatomic) GKDiscoveryPeerConnection *trialConnection; // @synthesize trialConnection=_trialConnection;
@property(retain, nonatomic) NSNumber *chosenInterface; // @synthesize chosenInterface=_chosenInterface;
@property(retain, nonatomic) NSMutableArray *attemptedInterfaces; // @synthesize attemptedInterfaces=_attemptedInterfaces;
@property(retain, nonatomic) NSMutableArray *orderedInterfaces; // @synthesize orderedInterfaces=_orderedInterfaces;
@property(retain, nonatomic) NSMutableSet *interfaces; // @synthesize interfaces=_interfaces;
@property(copy, nonatomic) NSString *deviceID; // @synthesize deviceID=_deviceID;
@property(copy, nonatomic) NSString *playerID; // @synthesize playerID=_playerID;
@property(copy, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
- (void)timeout:(id)arg1;
- (void)flushDataBuffer;
- (void)sendData:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)invalidate;
- (void)cleanUpForBrowse;
- (void)didLoseInterface:(id)arg1;
- (void)stopResolveTimer;
- (void)startResolveTimerWithHandler:(CDUnknownBlockType)arg1;
- (id)nextInterfaceIndex;
- (id)description;
- (id)stringForState:(int)arg1;
- (void)dealloc;
- (id)initWithServiceName:(id)arg1;
- (_Bool)parseServiceNameForInit:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKDiscoveryPeerConnection : NSObject <GKSimpleTimerDelegate>
{
    NSString *_remoteServiceName;
    NSString *_localServiceName;
    id _peer;
    _Bool _connected;
    GKAsyncSocket *_connectionSocket;
    NSMutableData *_dataReceived;
    unsigned int _currentSequenceNumber;
    NSMutableData *_dataToSendHoldingQueue;
    NSMutableArray *_receivedDataHoldingQueue;
    NSMutableArray *_messageReceiptHandlerList;
    NSMutableArray *_messageReceiptHandlerHoldingQueue;
    CDUnknownBlockType _receiveDataHandler;
    CDUnknownBlockType _connectedHandler;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSObject<OS_dispatch_queue> *_targetQueue;
    GKSimpleTimer *_heartbeatTimer;
    GKSimpleTimer *_heartbeatTimeoutTimer;
    GKSimpleTimer *_timeoutTimer;
    double _connectionTimeoutInSeconds;
    double _heartbeatIntervalInSeconds;
}

+ (unsigned long long)receiveDataLimit;
+ (unsigned long long)sendDataLimit;
+ (void)checkConstants;
@property(copy, nonatomic) CDUnknownBlockType receiveDataHandler; // @synthesize receiveDataHandler=_receiveDataHandler;
@property(copy, nonatomic) CDUnknownBlockType connectedHandler; // @synthesize connectedHandler=_connectedHandler;
@property(nonatomic) NSObject<OS_dispatch_queue> *targetQueue; // @synthesize targetQueue=_targetQueue;
@property(nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(copy, nonatomic) NSString *localServiceName; // @synthesize localServiceName=_localServiceName;
@property(copy, nonatomic) NSString *remoteServiceName; // @synthesize remoteServiceName=_remoteServiceName;
- (void)sendData:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (void)invalidate;
- (void)syncCloseConnectionNow;
- (void)syncReceivedData:(id)arg1 error:(id)arg2;
- (void)timeout:(id)arg1;
- (void)syncProcessMessage:(int)arg1 data:(id)arg2 sequenceNumber:(unsigned int)arg3;
- (void)syncSendMessageReceipt:(int)arg1 sequenceNumber:(unsigned int)arg2;
- (void)syncAcceptedConnection;
- (void)syncSendAccept;
- (void)syncSendHello;
- (void)syncSendMessage:(int)arg1 data:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (_Bool)shouldDecideAboutConnection;
- (void)attachSocketDescriptor:(int)arg1;
- (void)connectToSockAddr:(const struct sockaddr *)arg1 port:(unsigned short)arg2;
- (_Bool)syncSetupNewSocket;
- (void)syncConnected:(id)arg1;
- (id)initWithLocalServiceName:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKInterface : NSObject
{
    NSNumber *_index;
    NSString *_bsdName;
    NSString *_type;
    unsigned int _priority;
}

+ (id)bsdNameForIndex:(id)arg1;
+ (id)interfaceWithInterfaceIndex:(id)arg1;
@property(nonatomic) unsigned int priority; // @synthesize priority=_priority;
@property(copy, nonatomic) NSString *type; // @synthesize type=_type;
@property(copy, nonatomic) NSString *bsdName; // @synthesize bsdName=_bsdName;
@property(retain, nonatomic) NSNumber *index; // @synthesize index=_index;
- (id)description;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface GKInterfacePrioritizer : NSObject
{
}

+ (id)prioritizeLocalInterfaces:(id)arg1;
+ (id)bsdNameToInterfaceTypeMap;
+ (void)initialize;

@end

__attribute__((visibility("hidden")))
@interface GKList : NSObject
{
    unsigned int *_items;
    unsigned long long _count;
    unsigned long long _size;
    struct _opaque_pthread_mutex_t _lock;
}

@property(readonly) unsigned long long count; // @synthesize count=_count;
- (void)print;
- (void)unlock;
- (void)lock;
- (id)allMatchingObjectsFromTable:(id)arg1;
- (void)removeAllIDs;
- (void)removeID:(unsigned int)arg1;
- (void)addIDsFromList:(id)arg1;
- (void)copyItemsInto:(id)arg1;
- (void)addID:(unsigned int)arg1;
- (_Bool)hasID:(unsigned int)arg1;
- (void)dealloc;
- (id)initWithSize:(unsigned long long)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKOOBMessage : NSObject
{
    unsigned short _type;
}

@property(readonly) unsigned short type; // @synthesize type=_type;
- (_Bool)_checkSize:(unsigned long long)arg1;
- (_Bool)_checkType:(unsigned short)arg1;
- (id)data;
- (id)initWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)initWithMessageType:(unsigned short)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKOOBMessageFactory : NSObject
{
}

+ (id)createMessageFromData:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKPeerInternal : NSObject <GKTableCleanupWhenRemoved>
{
    unsigned int _pid;
    NSString *_displayName;
    NSString *_serviceName;
    _Bool _isBusy;
    GKSessionInternal *_session;
    int _serviceCount;
    struct _DNSServiceRef_t *_resolveService;
    struct _DNSServiceRef_t *_txtRecordService;
    id *_addrList;
    unsigned int *_interfaceList;
    unsigned int _servicePort;
    struct _DNSServiceRef_t **_lookupServiceList;
    int _lookupServiceCount;
    int _lookupServiceSize;
    _Bool _moreResolvesComing;
    double _connectTimeout;
    _Bool _needsToTimeout;
}

+ (void)freeLookupList:(struct _DNSServiceRef_t **)arg1 andAddrList:(id *)arg2 andInterfaceList:(unsigned int *)arg3 count:(int)arg4;
@property _Bool needsToTimeout; // @synthesize needsToTimeout=_needsToTimeout;
@property double connectTimeout; // @synthesize connectTimeout=_connectTimeout;
@property(retain, nonatomic) GKSessionInternal *session; // @synthesize session=_session;
@property _Bool moreResolvesComing; // @synthesize moreResolvesComing=_moreResolvesComing;
@property unsigned int servicePort; // @synthesize servicePort=_servicePort;
@property struct _DNSServiceRef_t *txtRecordService; // @synthesize txtRecordService=_txtRecordService;
@property struct _DNSServiceRef_t *resolveService; // @synthesize resolveService=_resolveService;
@property(getter=isBusy) _Bool busy; // @synthesize busy=_isBusy;
@property(readonly) unsigned int pid; // @synthesize pid=_pid;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSString *serviceName; // @synthesize serviceName=_serviceName;
- (void)cleanupForGKTable:(id)arg1;
- (void)stopTXTRecordMonitoring;
- (void)clearResolving;
- (void)stopResolving;
- (int)usableAddrs;
- (void)copyLookupList:(struct _DNSServiceRef_t ***)arg1 count:(int *)arg2;
- (void)setAddr:(const struct sockaddr_in *)arg1 interface:(unsigned int)arg2 forLookupService:(struct _DNSServiceRef_t *)arg3;
- (_Bool)containsLookupService:(struct _DNSServiceRef_t *)arg1;
- (void)removeAndReturnLookupList:(struct _DNSServiceRef_t ***)arg1 andAddrList:(id **)arg2 andInterfaceList:(unsigned int **)arg3 count:(int *)arg4;
- (void)addLookup:(struct _DNSServiceRef_t *)arg1;
- (_Bool)tryDetruncateDisplayName:(id)arg1;
@property int serviceCount; // @synthesize serviceCount=_serviceCount;
- (void)dealloc;
- (id)initWithPID:(unsigned int)arg1 displayName:(id)arg2 serviceName:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface GKRWLock : NSObject
{
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _rwLock;
}

- (void)unlock;
- (void)rdlock;
- (int)tryrdlock;
- (void)wrlock;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKSessionGlobals : NSObject
{
    unsigned int *_activePIDList;
    unsigned long long _activePIDListSize;
    unsigned long long _activePIDListCount;
    struct _opaque_pthread_mutex_t _lock;
}

- (void)unlock;
- (void)lock;
- (_Bool)hasActivePID:(unsigned int)arg1;
- (void)unregisterPID:(unsigned int)arg1;
- (void)registerPID:(unsigned int)arg1;
- (id)init;

@end

@interface GKSessionInternal : NSObject
{
    GKSession *_session;
    NSString *domain;
    NSString *serviceType;
    unsigned long long _port;
    NSString *_displayName;
    unsigned int _pid;
    unsigned long long maxPeers;
    struct OpaqueGCKSession *sessionRef;
    struct OpaqueAGPSession *agpSessionRef;
    GKConnection *_connection;
    id <GKSessionDelegate> _delegate;
    id <GKSessionPrivateDelegate> _privateDelegate;
    id <GKSessionDataReceiveHandler> _dataReceiveHandler;
    void *_dataReceiveHandlerContext;
    id <GKSessionDOOBReceiveHandler> _doobReceiveHandler[2];
    void *_doobReceiveHandlerContext[2];
    GKTable *_peerInfoTable;
    GKTable *_peerNameTable;
    GKAutoPeerIDTable *_peerIDTable;
    GKList *_peersAvailable;
    GKList *_peersConnected;
    GKList *_peersForCleanup;
    GKList *_peersPendingIncomingInvitation;
    GKList *_peersPendingOutgoingInvitation;
    struct _opaque_pthread_mutex_t _lock;
    struct _opaque_pthread_mutex_t _delegateLock;
    _Bool _isSearching;
    _Bool _isPublishing;
    _Bool _sessionStarted;
    int _mode;
    _Bool _isBusy;
    NSString *sessionID;
    NSString *displayName;
    double disconnectTimeout;
    struct _DNSServiceRef_t *_dnsServiceConnection;
    struct _DNSServiceRef_t *_dnsServiceResolveConnection;
    int _sReset;
    struct _DNSServiceRef_t *_serviceBrowser;
    struct _DNSServiceRef_t *_service;
    struct _DNSServiceRef_t *_oldService;
    _Bool _handleEventsRunning;
    _Bool _stopHandlingEvents;
    _Bool _wifiEnabled;
    _Bool _shutdown;
    GKVoiceChatSessionListener *_voiceChatListener;
}

@property(readonly, retain) GKConnection *connection; // @synthesize connection=_connection;
@property(readonly) int sessionMode; // @synthesize sessionMode=_mode;
@property(readonly) NSString *sessionID; // @synthesize sessionID;
@property(nonatomic) unsigned long long port; // @synthesize port=_port;
@property(nonatomic) struct OpaqueAGPSession *agpSessionRef; // @synthesize agpSessionRef;
@property(nonatomic) struct OpaqueGCKSession *sessionRef; // @synthesize sessionRef;
@property(nonatomic) unsigned long long maxPeers; // @synthesize maxPeers;
@property(copy, nonatomic) NSString *serviceType; // @synthesize serviceType;
@property(copy, nonatomic) NSString *domain; // @synthesize domain;
- (id)voiceChatSessionListener;
- (id)stringForGCKID:(unsigned int)arg1;
- (void)didResolveService:(struct _DNSServiceRef_t *)arg1 forPeer:(id)arg2 hostName:(const char *)arg3 port:(unsigned short)arg4 interface:(unsigned int)arg5 txtLen:(unsigned short)arg6 txtRecord:(const void *)arg7 withError:(int)arg8 moreComing:(_Bool)arg9;
- (void)didLookupHostname:(struct _DNSServiceRef_t *)arg1 forPeer:(id)arg2 hostName:(const char *)arg3 address:(const struct sockaddr_in *)arg4 interface:(unsigned int)arg5 withError:(int)arg6 moreComing:(_Bool)arg7;
- (_Bool)tryConnectToPeer:(id)arg1;
- (void)browse;
- (void)didRemoveService:(const char *)arg1 fromIF:(const char *)arg2 withError:(int)arg3 moreComing:(_Bool)arg4;
- (void)didFindService:(const char *)arg1 fromIF:(const char *)arg2 withError:(int)arg3 moreComing:(_Bool)arg4;
- (void)didUpdateTXTRecordForPeer:(id)arg1 fromIF:(const char *)arg2 txtLen:(unsigned short)arg3 txtRecord:(const void *)arg4 withError:(int)arg5 moreComing:(_Bool)arg6;
- (void)processTXTRecordForPeer:(id)arg1 txtLen:(unsigned short)arg2 txtRecord:(const void *)arg3;
- (void)cleanupExAvailablePeers;
- (_Bool)filterService:(const char *)arg1 withPID:(unsigned int)arg2;
- (void)publish;
- (_Bool)checkDNSConnection;
- (void)handleEvents;
@property double disconnectTimeout;
- (_Bool)isPeerBusy:(id)arg1;
@property _Bool wifiEnabled;
@property(getter=isBusy) _Bool busy;
- (void)stopOldService;
@property(readonly) NSString *peerID;
- (id)peersWithConnectionState:(int)arg1;
@property(getter=isAvailable) _Bool available;
- (void)disconnectFromAllPeers;
- (void)disconnectPeerFromAllPeers:(id)arg1;
- (void)denyConnectionFromPeer:(id)arg1;
- (_Bool)acceptConnectionFromPeer:(id)arg1 error:(id *)arg2;
- (void)cancelConnectToPeer:(id)arg1;
- (void)connectToPeer:(id)arg1 withTimeout:(double)arg2;
- (void)timeoutConnectToPeer:(id)arg1;
- (void)setDataReceiveHandler:(id)arg1 withContext:(void *)arg2;
@property(readonly, nonatomic) id dataReceiveHandler;
- (void)setDOOBReceiveHandler:(id)arg1 withContext:(void *)arg2 inBand:(unsigned int)arg3;
- (void)receiveDOOB:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void *)arg4;
- (_Bool)sendDataToAllPeers:(id)arg1 withDataMode:(int)arg2 error:(id *)arg3;
- (_Bool)sendData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 enableOOB:(_Bool)arg4 error:(id *)arg5;
- (_Bool)sendData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (_Bool)passesSendDataSanityCheck:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (_Bool)sendAudioData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (id)displayNameForPeer:(id)arg1;
@property(readonly) NSString *displayName;
- (void)dealloc;
- (void)reset;
- (id)initWithSessionID:(id)arg1 displayName:(id)arg2 session:(id)arg3 sessionMode:(int)arg4;
- (id)initWithConnection:(id)arg1 session:(id)arg2 delegate:(id)arg3;
- (id)description;
@property id <GKSessionPrivateDelegate> privateDelegate;
@property id <GKSessionDelegate> delegate;
- (void)unlock;
- (void)lock;
- (void)didPublishWithError:(int)arg1;
- (void)stopResolvingAllPeers;
- (id)serviceName;
- (_Bool)parseServiceName:(const char *)arg1 intoDisplayName:(id *)arg2 pid:(unsigned int *)arg3 state:(id *)arg4;
- (void)tellDelegate_networkStatisticsChanged:(id)arg1;
- (void)tellDelegate_updateRelay:(id)arg1;
- (void)tellDelegate_initiateRelay:(id)arg1;
- (void)tellDelegate_peerDidBecomeBusy:(id)arg1;
- (void)tellDelegate_connectionRequestToPeerFailed:(id)arg1;
- (void)tellDelegate_gotInvited:(id)arg1;
- (void)tellDelegate_didReceiveData:(id)arg1;
- (void)tellDelegate_didReceiveBand_RetryICE:(id)arg1;
- (void)tellDelegate_peerDidBecomeUnavailable:(id)arg1;
- (void)tellDelegate_peerDidBecomeAvailable:(id)arg1;
- (void)tellDelegate_isConnectingPeer:(id)arg1;
- (void)tellDelegate_didDisconnectPeer:(id)arg1;
- (void)tellDelegate_didConnectPeer:(id)arg1;
- (void)tellDelegate_sessionDidFailWithError:(id)arg1;
- (void)setDisplayName:(id)arg1 forPeer:(unsigned int)arg2;
- (void)printDictionaries;
- (id)createNSErrorFromGKSessionError:(int)arg1 description:(id)arg2 reason:(id)arg3;
- (id)createNSErrorFromHRESULT:(int)arg1 description:(id)arg2 reason:(id)arg3;
- (_Bool)isShuttingDown;
- (void)sendCallbacksToDelegate:(CDStruct_68f9d01f *)arg1 remotePeer:(unsigned int)arg2;

@end

__attribute__((visibility("hidden")))
@interface GKSimpleTimer : NSObject
{
    struct _opaque_pthread_mutex_t _lock;
    NSObject<OS_dispatch_source> *_timerSource;
    id _delegate;
    double _startTime;
    double _interval;
    _Bool _timerSourceSet;
}

@property(readonly, nonatomic) double interval; // @synthesize interval=_interval;
@property(nonatomic) id <GKSimpleTimerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)invalidate;
- (void)fireIn:(double)arg1 fromNow:(double)arg2;
- (void)setTimer:(double)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface GKVoiceChatDictionary : NSObject
{
    NSMutableDictionary *actualDictionary;
    unsigned long long type;
    unsigned int orignalCallID;
}

+ (_Bool)validateFocus:(id)arg1;
+ (_Bool)validateCancel:(id)arg1;
+ (_Bool)validateReply:(id)arg1;
+ (_Bool)validateInvite:(id)arg1;
+ (_Bool)validateDictionary:(id)arg1;
+ (id)dictionaryFromData:(id)arg1;
+ (id)inviteDictionaryToParticipantID:(id)arg1 fromParticipantID:(id)arg2 connectionData:(id)arg3 callID:(unsigned int)arg4 focus:(_Bool)arg5;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)setRemoteVCPartyID:(id)arg1;
- (id)setLocalVCPartyID:(id)arg1;
- (id)remoteVCPartyID;
- (id)localVCPartyID;
@property unsigned int callID;
- (id)createBlob;
- (id)version;
- (void)setFocus:(_Bool)arg1;
- (_Bool)isFocus;
- (_Bool)matchesNonce:(long long)arg1;
@property long long nonce;
- (id)participantID;
- (void)setFromParticipantID:(id)arg1;
- (id)fromParticipantID;
- (id)connectionData;
- (unsigned long long)response;
- (unsigned long long)type;
- (_Bool)matchesResponse:(id)arg1;
- (_Bool)isFocusDictionary;
- (_Bool)isReplyDictionary;
- (_Bool)isCancelDictionary;
- (_Bool)isInviteDictionary;
- (id)focusDictionary:(_Bool)arg1;
- (id)cancelDictionary;
- (id)replyDictionary:(unsigned long long)arg1 connectionData:(id)arg2 callID:(unsigned int)arg3 focus:(_Bool)arg4;
@property(readonly) unsigned int originalCallID;
- (void)dealloc;

@end

@interface GKVoiceChatServicePrivate : NSObject <VideoConferenceDelegate, VideoConferenceRealTimeChannel>
{
    id <GKVoiceChatClient> client;
    _Bool outputMeteringEnabled;
    _Bool inputMeteringEnabled;
    _Bool microphoneMuted;
    unsigned int curCallID;
    int state;
    GKVoiceChatDictionary *incomingCallDict;
    GKVoiceChatDictionary *outgoingCallDict;
    NSString *sdp;
    struct tagCONNRESULT currentConnResult;
    LoopbackSocketTunnel *tunnel;
    NSRecursiveLock *stateLock;
    NSLock *clientLock;
    GKVoiceChatService *wrapperService;
    int didUseICE;
    int bundle;
    _Bool forceNoICE;
    VideoConference *conf;
    _Bool clientHasRTChannel;
    int chatMode;
    _Bool focus;
}

+ (id)defaultVoiceChatService;
@property GKVoiceChatService *wrapperService; // @synthesize wrapperService;
@property int state; // @synthesize state;
@property(nonatomic) id client; // @synthesize client;
- (id)remoteDisplayNameForCallID:(unsigned int)arg1;
- (id)localDisplayNameForCallID:(unsigned int)arg1;
@property(readonly) double remoteBitrate;
@property(readonly) double remoteFramerate;
@property(readonly) double localBitrate;
@property(readonly) double localFramerate;
@property(nonatomic) void *remoteVideoLayer;
@property(nonatomic) void *localVideoLayer;
- (void)vcArg:(id)arg1 sendRealTimeData:(id)arg2 toParticipantID:(id)arg3;
- (void)videoConference:(id)arg1 didStopWithCallID:(unsigned int)arg2 error:(id)arg3;
- (void)videoConference:(id)arg1 didStartSession:(_Bool)arg2 withCallID:(unsigned int)arg3 error:(id)arg4;
- (void)forceNoICE:(_Bool)arg1;
@property(getter=isFocus) _Bool focus; // @synthesize focus;
@property int chatMode; // @synthesize chatMode;
@property float remoteParticipantVolume;
@property(getter=isMicrophoneMuted) _Bool microphoneMuted;
@property(readonly, nonatomic) float inputMeterLevel;
@property(readonly, nonatomic) float outputMeterLevel;
@property(getter=isInputMeteringEnabled) _Bool inputMeteringEnabled; // @synthesize inputMeteringEnabled;
@property(getter=isOutputMeteringEnabled) _Bool outputMeteringEnabled; // @synthesize outputMeteringEnabled;
- (void)getNSError:(id *)arg1 code:(long long)arg2 description:(id)arg3 reason:(id)arg4;
- (void)getNSError:(id *)arg1 code:(long long)arg2 description:(id)arg3 hResult:(int)arg4;
- (int)startICEConnectionCheck:(id)arg1 isCaller:(_Bool)arg2 withCallID:(unsigned int)arg3;
- (int)startICEConnectionCheck:(id)arg1 isCaller:(_Bool)arg2;
- (id)createInvite:(id *)arg1 toParticipant:(id)arg2 callID:(unsigned int *)arg3;
- (id)createReplyUsingDictionary:(id)arg1 replyCode:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)inviteIsValid:(id)arg1;
- (void)receivedData:(id)arg1 fromParticipantID:(id)arg2;
- (void)resetState;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (void)informClientVoiceChatDidStop:(id)arg1;
- (void)informClientVoiceChatDidNotStartMainSelector:(id)arg1;
- (void)informClientVoiceChatDidNotStart:(id)arg1;
- (void)informClientVoiceChatDidStartMainSelector:(id)arg1;
- (void)informClientVoiceChatDidStart:(id)arg1;
- (void)informClientOfInviteFromParticipant:(id)arg1;
- (void)denyCallID:(unsigned int)arg1;
- (_Bool)acceptCallID:(unsigned int)arg1 error:(id *)arg2;
- (void)stopVoiceChatWithParticipantID:(id)arg1;
- (void)stopVoiceChatProc:(id)arg1;
- (_Bool)startVoiceChatWithParticipantID:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (void)cleanup;
- (id)init;

@end

@interface GKVoiceChatServiceFocus : GKVoiceChatServicePrivate
{
    NSMutableArray *outgoingCallDictList;
    NSMutableArray *incomingCallDictList;
    long long incomingUID;
    NSString *currentFocus;
    int packetsPerBundle;
    _Bool hasMic;
}

+ (id)defaultVoiceChatService;
@property(copy, nonatomic) NSString *currentFocus; // @synthesize currentFocus;
- (void)pauseAudio:(_Bool)arg1 toParticipantID:(id)arg2;
- (_Bool)isAudioPausedToParticipantID:(id)arg1;
- (id)remoteDisplayNameForCallID:(unsigned int)arg1;
- (id)localDisplayNameForCallID:(unsigned int)arg1;
- (double)remoteBitrate;
- (double)remoteFramerate;
- (double)localBitrate;
- (double)localFramerate;
- (void *)remoteVideoLayer;
- (void)setRemoteVideoLayer:(void *)arg1;
- (void *)localVideoLayer;
- (void)setLocalVideoLayer:(void *)arg1;
- (void)videoConference:(id)arg1 didStopWithCallID:(unsigned int)arg2 error:(id)arg3;
- (void)videoConference:(id)arg1 didStartSession:(_Bool)arg2 withCallID:(unsigned int)arg3 error:(id)arg4;
- (void)setShouldTimeoutPackets:(_Bool)arg1;
- (void)setIsUsingSuppression:(_Bool)arg1;
- (void)setTalkingPeersLimit:(unsigned int)arg1;
- (void)setQualityDelegate:(id)arg1;
- (void)setSpeakingDelegate:(id)arg1;
- (void)updatedConnectedPeers:(id)arg1;
- (void)updatedMutedPeers:(id)arg1 forParticipantID:(id)arg2;
@property _Bool hasMic; // @synthesize hasMic;
@property int packetsPerBundle;
- (void)setFocus:(_Bool)arg1;
- (void)setChatMode:(int)arg1;
- (void)sendFocusChange:(_Bool)arg1;
- (_Bool)processFocusChange:(id)arg1 fromParticipantID:(id)arg2;
- (_Bool)processFocusDict:(id)arg1 fromParticipantID:(id)arg2;
- (_Bool)processCancelDict:(id)arg1;
- (id)incomingDictionaryMatchingOriginalCallID:(unsigned int)arg1 participantID:(id)arg2;
- (_Bool)processReplyDict:(id)arg1;
- (_Bool)processInviteDictionary:(id)arg1 fromParticipantID:(id)arg2;
- (id)openOutgoingDictionaryForParticipantID:(id)arg1;
- (_Bool)processInviteDictionaryForTie:(id)arg1 fromParticipantID:(id)arg2;
- (void)receivedData:(id)arg1 fromParticipantID:(id)arg2;
- (void)denyCallID:(unsigned int)arg1;
- (_Bool)acceptCallID:(unsigned int)arg1 error:(id *)arg2;
- (void)stopVoiceChatProc:(id)arg1 participantDidCancel:(_Bool)arg2;
- (void)stopVoiceChatProc:(id)arg1;
- (void)remoteCancelledProc:(id)arg1;
- (void)remoteCancelled:(id)arg1;
- (id)dictionaryForCallID:(unsigned int)arg1 isIncomingDictonary:(_Bool)arg2;
- (id)dictionaryForParticipantID:(id)arg1 isIncomingDictonary:(_Bool)arg2;
- (id)dictionaryForNonce:(long long)arg1 participantID:(id)arg2 isIncomingDictonary:(_Bool)arg3;
- (_Bool)startVoiceChatWithParticipantID:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)init;

@end

@interface GKVoiceChatSession : NSObject
{
    id opaqueSession;
}

@property float sessionVolume;
@property(readonly) float inputMeter;
@property(getter=isActiveSession) _Bool activeSession;
@property(readonly) NSArray *peerList;
@property(readonly) NSString *sessionName;
@property id <GKVoiceChatSessionDelegate> delegate;
- (float)outputMeterForPeer:(id)arg1;
- (_Bool)getMuteStateForPeer:(id)arg1;
- (void)setMute:(_Bool)arg1 forPeer:(id)arg2;
- (void)stopSession;
- (void)startSession;
- (void)dealloc;
- (id)initWithGKSession:(id)arg1 sessionName:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface GKVoiceChatSessionInternal : NSObject <GKSessionVoiceChatDelegate, GKVoiceChatClient, VideoConferenceSpeakingDelegate, InterfaceListenerDelegate>
{
    NSString *_sessionName;
    unsigned int _conferenceID;
    _Bool activeSession;
    float sessionVolume;
    _Bool focusCallbacks;
    GKSessionInternal *_gkSession;
    NSString *_peerID;
    NSMutableArray *_connectedPeers;
    NSMutableArray *_focusPausedPeers;
    NSMutableArray *_connectedVoicePeers;
    NSMutableArray *_connectedFocusPeers;
    NSMutableArray *_mutedPeers;
    NSMutableArray *_myPausedList;
    NSMutableDictionary *_peerChannelQuality;
    _Bool needsRecalculateGoodChannels;
    int goodChannels;
    unsigned int talkingPeersLimit;
    _Bool isUsingSuppression;
    unsigned int _sessionState;
    GKRWLock *_rwLock;
    GKVoiceChatServiceFocus *_vcService;
    VoiceChatSessionRoster *_roster;
    NSObject<OS_dispatch_queue> *_sendQueue;
    id <GKVoiceChatSessionDelegate> delegate;
    unsigned int congestionState;
    id _publicWrapper;
    GKInterfaceListener *_wifiListener;
    _Bool _currentWifiState;
}

+ (void)brokenHash:(id)arg1 response:(char *)arg2;
@property _Bool isUsingSuppression;
@property unsigned int talkingPeersLimit;
- (unsigned int)peerCount;
- (void)parseConnectedPeers:(id)arg1;
- (void)sendConnectedPeers;
- (void)updatedConnectedPeers:(id)arg1;
- (void)updatedFocusPeers:(id)arg1;
- (void)removeFromFocusPausedList:(id)arg1;
- (void)addPeerToFocusPausedList:(id)arg1;
- (void)pruneBadLinks;
- (void)unPauseAll;
- (void)pauseAll;
- (void)parseMutedPeers:(id)arg1 forPeer:(id)arg2;
- (void)sendMutedPeers;
- (void)updatedMutedPeers:(id)arg1 forPeer:(id)arg2;
- (void)updatedFocusID:(unsigned int)arg1;
- (void)updatedSubscribedBeaconList:(id)arg1;
- (void)handlePeerDisconnected:(id)arg1;
- (_Bool)isEqual:(id)arg1;
@property float sessionVolume;
@property(readonly, nonatomic) unsigned int conferenceID;
@property(readonly, nonatomic) NSString *sessionName;
@property(getter=isActiveSession) _Bool activeSession;
@property(readonly) NSArray *peerList;
- (_Bool)getMuteStateForPeer:(id)arg1;
- (void)setMute:(_Bool)arg1 forPeer:(id)arg2;
- (void)stopSessionInternal;
- (void)stopSession;
- (void)startSessionInternal;
- (void)startSession;
- (void)cleanupProc:(id)arg1;
- (void)cleanup;
- (void)dealloc;
- (id)decodePeerID:(id)arg1;
- (id)encodePeerID:(id)arg1;
- (void)calculateConferenceID;
- (id)initWithGKSession:(id)arg1 publicWrapper:(id)arg2 sessionName:(id)arg3;
- (void)networkStateDidChange;
- (void)interfaceStateDidChangeWithWifiUp:(_Bool)arg1 cellUp:(_Bool)arg2;
- (void)session:(id)arg1 didReceiveOOBAudioPacket:(id)arg2 fromPeerID:(id)arg3;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;
- (void)session:(id)arg1 didReceiveAudioPacket:(id)arg2 fromPeerID:(id)arg3;
- (void)informClientVoiceChatFocusChange:(id)arg1;
- (void)informClientVoiceChatSilent:(id)arg1;
- (void)informClientVoiceChatSpeaking:(id)arg1;
- (void)informClientVoiceChatDidStop:(id)arg1;
- (void)informClientVoiceChatCouldNotConnect:(id)arg1;
- (void)informClientVoiceChatConnecting:(id)arg1;
- (void)informClientVoiceChatDidStart:(id)arg1;
@property id <GKVoiceChatSessionDelegate> delegate;
- (void)voiceChatService:(id)arg1 didReceiveInvitationFromParticipantID:(id)arg2 callID:(unsigned int)arg3;
- (void)voiceChatService:(id)arg1 didStopWithParticipantID:(id)arg2 error:(id)arg3;
- (void)voiceChatService:(id)arg1 didNotStartWithParticipantID:(id)arg2 error:(id)arg3;
- (void)voiceChatService:(id)arg1 didStartWithParticipantID:(id)arg2;
- (id)participantID;
- (void)voiceChatService:(id)arg1 sendData:(id)arg2 toParticipantID:(id)arg3;
- (void)didStopSpeaking:(id)arg1;
- (void)didStartSpeaking:(id)arg1;
- (void)lossRate:(float)arg1 forParticipantID:(id)arg2;
- (int)goodChannels;
- (int)calculateChannelQualities;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface GKVoiceChatSessionListener : NSObject
{
    NSMutableArray *_conferenceList;
    GKSessionInternal *_gkSession;
    GKRWLock *_rwlock;
}

- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;
- (void)receivedNewVoiceChatOOBMessage:(id)arg1 fromPeerID:(id)arg2;
- (id)currentSessions;
- (void)removeSession:(id)arg1;
- (void)registerNewGKVoiceChatSession:(id)arg1;
- (void)dealloc;
- (id)initWithSession:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GKVoiceChatSessionMessage : GKOOBMessage
{
    NSData *_data;
    unsigned int _conferenceID;
    unsigned int _subtype;
}

- (unsigned int)conferenceID;
- (_Bool)_checkSize:(unsigned long long)arg1;
- (_Bool)_checkType:(unsigned short)arg1;
- (unsigned int)subtype;
- (id)payload;
- (id)data;
- (void)dealloc;
- (id)initWithPayload:(id)arg1 conferenceID:(unsigned int)arg2 subtype:(unsigned int)arg3;
- (id)initWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)init;

@end

@interface NSData (CDXTicket)
- (_Bool)CDXTicketIsRelatedToTicket:(id)arg1;
- (_Bool)CDXTicketWellFormed;
- (id)CDXTicketTrimmed;
- (_Bool)CDXTicketIsStub;
- (_Bool)CDXTicketIsHolePunch;
- (_Bool)CDXTicketIsReflected;
- (unsigned long long)CDXTicketSID;
- (struct CDXTicket *)mutableCDXTicket;
- (const struct CDXTicket *)CDXTicket;
- (unsigned long long)CDXTicketRevision;
- (id)CDXTicketExpirationDate;
- (long long)CDXTicketPCNT;
- (long long)CDXTicketPID;
@end

@interface NSData (socketExtension)
+ (id)dataWithSockAddr:(const struct sockaddr *)arg1;
- (struct sockaddr *)sockAddr;
@end

__attribute__((visibility("hidden")))
@interface VoiceChatSessionBeaconState : NSObject
{
    struct tagVoiceChatBeacon *lastReceivedBeacon;
    unsigned int sentState;
    unsigned int receivedState;
    _Bool needsSend;
    unsigned int typeToSend;
}

@property(nonatomic) unsigned int typeToSend; // @synthesize typeToSend;
@property(nonatomic) _Bool needsSend; // @synthesize needsSend;
@property(nonatomic) unsigned int receivedState; // @synthesize receivedState;
@property(nonatomic) unsigned int sentState; // @synthesize sentState;
- (void)setLastReceivedBeacon:(struct tagVoiceChatBeacon *)arg1;
- (struct tagVoiceChatBeacon *)lastReceivedBeacon;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface VoiceChatSessionRoster : NSObject
{
    GKSessionInternal *_gkSession;
    NSString *_peerID;
    GKVoiceChatSessionInternal *_gkvs;
    NSObject<OS_dispatch_queue> *_sendQueue;
    NSMutableArray *_connectedPeers;
    NSMutableDictionary *_peerStateTable;
    struct _opaque_pthread_mutex_t resMutex;
    _Bool _needsUpdateBeaconList;
    _Bool _waitingToCalculateFocus;
    unsigned int _deviceRating;
    unsigned int _focusRating;
    unsigned int _chosenFocusRating;
    unsigned int _focusID;
    _Bool _isBeaconUp;
    _Bool _hasFocus;
}

- (_Bool)hasFocus;
- (id)subscribedPeers;
- (void)processSubscribeBeacon:(struct tagVoiceChatBeacon *)arg1 beaconState:(id)arg2 fromPeer:(id)arg3;
- (void)processUnsubscribeBeacon:(struct tagVoiceChatBeacon *)arg1 beaconState:(id)arg2 fromPeer:(id)arg3;
- (void)receivedBeacon:(id)arg1 fromPeer:(id)arg2;
- (void)peer:(id)arg1 didChangeState:(int)arg2;
- (void)calculateFocus:(id)arg1;
- (void)sendBeacons;
- (void)sendBeacon:(struct tagVoiceChatBeacon *)arg1 ToPeer:(id)arg2;
- (void)stopBeacon;
- (void)updateBeacon;
- (void)startBeacon;
- (void)startBeaconWrapper:(id)arg1;
- (_Bool)recalculateFocusRating;
- (void)configureDeviceRating;
- (unsigned int)focusID;
- (void)cleanup;
- (void)dealloc;
- (id)initWithGKSession:(id)arg1 peerID:(id)arg2 voiceChatSession:(id)arg3 sendQueue:(id)arg4;

@end

