//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities
// UUID: FFD0A9DC-D7DE-315B-BDE3-59E1A93BC70C
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 371.4.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AVConferenceDelegate
- (void)conference:(AVConference *)arg1 withCallID:(long long)arg2 networkHint:(_Bool)arg3;
- (void)conference:(AVConference *)arg1 videoQualityNotificationForCallID:(long long)arg2 isDegraded:(_Bool)arg3 isRemote:(_Bool)arg4;
- (void)conference:(AVConference *)arg1 cancelRelayRequest:(long long)arg2 requestDict:(NSDictionary *)arg3;
- (void)conference:(AVConference *)arg1 sendRelayUpdate:(long long)arg2 updateDict:(NSDictionary *)arg3;
- (void)conference:(AVConference *)arg1 inititiateRelayRequest:(long long)arg2 requestDict:(NSDictionary *)arg3;
- (void)serverDiedForConference:(AVConference *)arg1;
- (void)conference:(AVConference *)arg1 remoteVideoPaused:(_Bool)arg2 callID:(long long)arg3;
- (void)conference:(AVConference *)arg1 remoteAudioPaused:(_Bool)arg2 callID:(long long)arg3;
- (void)conference:(AVConference *)arg1 remoteVideoAttributesChanged:(VideoAttributes *)arg2 callID:(long long)arg3;
- (void)conference:(AVConference *)arg1 remoteScreenAttributesChanged:(VideoAttributes *)arg2 callID:(long long)arg3;
- (void)conference:(AVConference *)arg1 receivedFirstRemoteFrameForCallID:(long long)arg2;
- (void)conference:(AVConference *)arg1 updateOutputMeterLevel:(float)arg2;
- (void)conference:(AVConference *)arg1 updateInputMeterLevel:(float)arg2;
- (void)conference:(AVConference *)arg1 updateOutputFrequencyLevel:(NSData *)arg2;
- (void)conference:(AVConference *)arg1 updateInputFrequencyLevel:(NSData *)arg2;
- (void)conference:(AVConference *)arg1 didStopWithCallID:(long long)arg2 error:(NSError *)arg3;
- (void)conference:(AVConference *)arg1 didStartSession:(_Bool)arg2 withUserInfo:(NSDictionary *)arg3;
- (void)conference:(AVConference *)arg1 withCallID:(long long)arg2 remoteMediaStalled:(_Bool)arg3;

@optional
- (void)conference:(AVConference *)arg1 closeConnectionForCallID:(long long)arg2;
- (void)conference:(AVConference *)arg1 reinitializeCallForCallID:(unsigned int)arg2;
- (void)conference:(AVConference *)arg1 localAudioEnabled:(_Bool)arg2 forCallID:(unsigned int)arg3 error:(NSError *)arg4;
- (void)conference:(AVConference *)arg1 remoteAudioEnabled:(_Bool)arg2 forCallID:(unsigned int)arg3;
- (void)conference:(AVConference *)arg1 didChangeLocalVariablesForCallID:(long long)arg2;
- (void)conference:(AVConference *)arg1 didReceiveData:(NSData *)arg2 forCallID:(long long)arg3;
- (void)conference:(AVConference *)arg1 didReceiveARPLData:(NSData *)arg2 withCallID:(long long)arg3;
- (void)conference:(AVConference *)arg1 didStopWithCallID:(long long)arg2 error:(NSError *)arg3 callMetadata:(NSDictionary *)arg4;
- (void)conference:(AVConference *)arg1 didStartSession:(_Bool)arg2 withCallID:(long long)arg3 error:(NSError *)arg4;
- (void)conference:(AVConference *)arg1 localIPChange:(NSData *)arg2 withCallID:(long long)arg3;
@end

@protocol IDSIDQueryControllerDelegate <NSObject>

@optional
- (void)idStatusUpdatedForDestinations:(NSDictionary *)arg1 service:(NSString *)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol TUCallServicesAccountsControllerXPCDelegate <NSObject>
- (void)callerIDState:(void (^)(NSString *))arg1;
@end

@protocol TUCallServicesDaemonDelegate <NSObject, TUCallServicesProxyCallActions>
- (void)setRelayCallingEnabled:(_Bool)arg1;
- (void)callModelState:(void (^)(TUCallModelState *))arg1;
- (void)currentCalls:(void (^)(NSArray *))arg1;
- (void)requestHandoffForAllCalls;
- (void)setDisconnectedReason:(int)arg1 forCallWithCallUUID:(NSString *)arg2;
- (void)setEndpointOnCurrentDevice:(_Bool)arg1 forCallWithCallUUID:(NSString *)arg2;
- (void)setWantsHoldMusic:(_Bool)arg1 forCallWithCallUUID:(NSString *)arg2;
- (void)callStateForCallWithCallUUID:(NSString *)arg1 reply:(void (^)(NSDictionary *))arg2;
- (void)requestPendingCallNotifications:(void (^)(void))arg1;
- (void)handleNewHostedCallUUID:(NSString *)arg1 reply:(void (^)(void))arg2;
@end

@protocol TUCallServicesDaemonObserver
- (void)handleCallModelStateChanged:(TUCallModelState *)arg1;
- (void)handleCurrentProxyCallsChanged:(NSArray *)arg1;
- (void)handleCallContinuityStateChangedForProxyCall:(TUProxyCall *)arg1;
- (void)handleCallStatusChangedForProxyCall:(TUProxyCall *)arg1;
- (void)handleHardPauseDigitsAvailibilityChangedTo:(unsigned short)arg1 digits:(NSString *)arg2;
- (void)handleMutedChangedTo:(_Bool)arg1;
- (void)handleRemoteFrequencyChangedTo:(NSData *)arg1;
- (void)handleLocalFrequencyChangedTo:(NSData *)arg1;
- (void)handleDisconnectedReasonChangedTo:(int)arg1 forCallWithUUID:(NSString *)arg2;
- (void)handleEndpointOnCurrentDeviceChangedTo:(_Bool)arg1 forCallWithUUID:(NSString *)arg2;
- (void)handleWantsHoldMusicChangedTo:(_Bool)arg1 forCallWithUUID:(NSString *)arg2;
@end

@protocol TUCallServicesProxyCallActions <NSObject>
- (void)unmuteCall:(TUProxyCall *)arg1;
- (void)muteCall:(TUProxyCall *)arg1;
- (void)sendHardPauseDigits;
- (void)disconnectAllCalls;
- (void)disconnectCurrentCallAndActivateHeld;
- (void)endHeldAndAnswerCall:(TUProxyCall *)arg1;
- (void)endActiveAndAnswerCall:(TUProxyCall *)arg1;
- (void)playDTMFToneForCall:(TUProxyCall *)arg1 key:(unsigned char)arg2;
- (void)swapCalls;
- (void)unconferenceCall:(TUProxyCall *)arg1;
- (void)conferenceCall:(TUProxyCall *)arg1;
- (void)disconnectCall:(TUProxyCall *)arg1;
- (void)unholdCall:(TUProxyCall *)arg1;
- (void)holdCall:(TUProxyCall *)arg1;
- (void)answerCall:(TUProxyCall *)arg1;
- (void)dialCall:(TUProxyCall *)arg1;
@end

@interface NSDictionary (QueryParameterSupport)
- (id)asQueryParameterString;
@end

@interface NSString (FaceTime)
- (_Bool)destinationIdIsPhoneNumber;
- (_Bool)destinationIdIsEmailAddress;
@end

@interface NSString (TUFaceTimeUtilitiesAdditions)
- (id)stringWithIDSFormat;
@end

@interface NSURL (FaceTime)
+ (id)faceTimeAcceptURLWithURL:(id)arg1 conferenceID:(id)arg2;
+ (id)faceTimeAcceptURLWithURL:(id)arg1;
+ (id)faceTimePromptURLWithURL:(id)arg1;
+ (id)faceTimeURLWithURL:(id)arg1;
+ (id)_applyFaceTimeScheme:(id)arg1 toFaceTimeURL:(id)arg2;
+ (id)faceTimeTelephonyURLWithPhoneNumber:(id)arg1 showPrompt:(_Bool)arg2;
+ (id)faceTimeTelephonyURLWithPhoneNumber:(id)arg1;
+ (id)faceTimeURLWithDestinationID:(id)arg1 addressBookUID:(int)arg2 forceAssist:(_Bool)arg3 suppressAssist:(_Bool)arg4 wasAssisted:(_Bool)arg5 audioOnly:(_Bool)arg6;
+ (id)faceTimeURLWithDestinationID:(id)arg1 addressBookUID:(int)arg2 audioOnly:(_Bool)arg3;
+ (id)faceTimeURLWithDestinationID:(id)arg1 addressBookUID:(int)arg2;
+ (id)faceTimeURLWithDestinationID:(id)arg1;
+ (id)_faceTimeURLWithDestinationID:(id)arg1 addressBookUID:(int)arg2 audioOnly:(_Bool)arg3;
- (_Bool)isValidFaceTimeURL;
- (_Bool)isUpgradeURL;
- (_Bool)isFaceTimeAudioAcceptURL;
- (_Bool)isFaceTimeAudioPromptURL;
- (_Bool)isFaceTimeAudioURL;
- (_Bool)isFaceTimeAcceptURL;
- (_Bool)isFaceTimePromptURL;
- (_Bool)isFaceTimeURL;
- (_Bool)_isPhoneNumberID:(id)arg1;
- (id)faceTimeDestinationAccount;
@end

@interface NSURL (FaceTime_PhoneNumber)
+ (id)faceTimeURLWithPhoneNumber:(id)arg1 addressBookUID:(int)arg2 audioOnly:(_Bool)arg3 forceAssist:(_Bool)arg4 suppressAssist:(_Bool)arg5 wasAssisted:(_Bool)arg6;
+ (id)faceTimeURLWithPhoneNumber:(id)arg1 addressBookUID:(int)arg2 forceAssist:(_Bool)arg3 suppressAssist:(_Bool)arg4 wasAssisted:(_Bool)arg5;
@end

@interface NSURL (QueryParameters)
- (id)URLByDeletingQueryParameterWithKey:(id)arg1;
- (id)URLBySettingQueryParameterValue:(id)arg1 forKey:(id)arg2;
- (id)URLWithNewQueryParameterDictionary:(id)arg1;
- (id)queryParameters;
@end

@interface NSURL (Telephony)
+ (id)URLWithTelephoneNumber:(id)arg1 addressBookUID:(int)arg2 forceAssist:(_Bool)arg3 suppressAssist:(_Bool)arg4 wasAssisted:(_Bool)arg5;
+ (id)URLWithTelephoneNumber:(id)arg1 addressBookUID:(int)arg2;
+ (id)URLWithTelephoneNumber:(id)arg1 promptUser:(_Bool)arg2;
+ (id)URLWithTelephoneNumber:(id)arg1;
+ (id)telephonyURLForTelEmergencyCall;
+ (id)telephonyURLForTelEmergency;
+ (id)telephonyURLForVoicemail;
+ (id)telephonyURLWithDestinationID:(id)arg1 addressBookUID:(int)arg2 forceAssist:(_Bool)arg3 suppressAssist:(_Bool)arg4 wasAssisted:(_Bool)arg5;
+ (id)telephonyURLWithDestinationID:(id)arg1 addressBookUID:(int)arg2;
+ (id)telephonyURLWithDestinationID:(id)arg1 promptUser:(_Bool)arg2;
+ (id)telephonyURLWithDestinationID:(id)arg1;
+ (id)URLWithScheme:(id)arg1;
- (id)_mobilePhoneQueryParameters;
- (id)_mobilePhonePathParameters;
- (id)telephonyParameterDictionary;
@property(readonly) _Bool isVoicemailURL;
@property(readonly) _Bool isEmergencyCallURL;
@property(readonly) _Bool isEmergencyURL;
@property(readonly) _Bool isBasebandLogURL;
- (id)webSafeTelephoneURL;
- (_Bool)isWebSafeTelephoneURL;
- (id)numberQualifiedForAddressBook;
- (id)formattedPhoneNumber;
- (_Bool)hasTelephonyScheme;
@property(readonly) _Bool wasAlreadyAssisted;
@property(readonly) _Bool suppressAssist;
@property(readonly) _Bool forceAssist;
@property(readonly) NSString *originatingUIIdentifier;
@property(readonly) int callService;
@property(readonly) int addressBookUID;
@property(readonly) NSString *overrideName;
@property(readonly) NSString *phoneNumber;
- (id)_phoneNumberConvertNumbersToLatin:(_Bool)arg1;
@end

@interface NSXPCConnection (TUCallServicesAdditions)
+ (id)callServicesAccountsControllerDelegateXPCInterface;
+ (id)callServicesDaemonObserverXPCInterface;
+ (id)callServicesDaemonDelegateXPCInterface;
+ (void)dispatchMainIfCurrentXPCConnection:(CDUnknownBlockType)arg1;
@end

@interface TUAVConferenceConnection : NSObject
{
    _Bool _receivedDidStart;
    TUCall *_call;
    CDUnknownBlockType _didStartHandler;
    CDUnknownBlockType _didStopHandler;
}

+ (id)conferenceConnectionWithCall:(id)arg1;
@property(nonatomic) _Bool receivedDidStart; // @synthesize receivedDidStart=_receivedDidStart;
@property(copy, nonatomic) CDUnknownBlockType didStopHandler; // @synthesize didStopHandler=_didStopHandler;
@property(copy, nonatomic) CDUnknownBlockType didStartHandler; // @synthesize didStartHandler=_didStartHandler;
@property(retain, nonatomic) TUCall *call; // @synthesize call=_call;
@property(nonatomic, getter=isMuted) _Bool muted;
- (id)description;
- (void)dealloc;

@end

@interface TUAVConferenceInterface : NSObject <AVConferenceDelegate>
{
    _Bool _hasActiveConference;
    id <TUAVConferenceInterfaceDelegate> _delegate;
    NSMutableArray *_activeConferenceConnections;
    AVConference *_conference;
    long long _callID;
}

+ (id)sharedInstance;
@property(nonatomic) _Bool hasActiveConference; // @synthesize hasActiveConference=_hasActiveConference;
@property(nonatomic) long long callID; // @synthesize callID=_callID;
@property(retain, nonatomic) AVConference *conference; // @synthesize conference=_conference;
@property(retain, nonatomic) NSMutableArray *activeConferenceConnections; // @synthesize activeConferenceConnections=_activeConferenceConnections;
@property(nonatomic) id <TUAVConferenceInterfaceDelegate> delegate; // @synthesize delegate=_delegate;
- (void)conference:(id)arg1 withCallID:(long long)arg2 networkHint:(_Bool)arg3;
- (void)conference:(id)arg1 videoQualityNotificationForCallID:(long long)arg2 isDegraded:(_Bool)arg3 isRemote:(_Bool)arg4;
- (void)conference:(id)arg1 cancelRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)conference:(id)arg1 sendRelayUpdate:(long long)arg2 updateDict:(id)arg3;
- (void)conference:(id)arg1 inititiateRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)serverDiedForConference:(id)arg1;
- (void)conference:(id)arg1 remoteVideoPaused:(_Bool)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteAudioPaused:(_Bool)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteScreenAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 receivedFirstRemoteFrameForCallID:(long long)arg2;
- (void)conference:(id)arg1 updateOutputMeterLevel:(float)arg2;
- (void)conference:(id)arg1 updateOutputFrequencyLevel:(id)arg2;
- (void)conference:(id)arg1 updateInputFrequencyLevel:(id)arg2;
- (void)conference:(id)arg1 updateInputMeterLevel:(float)arg2;
- (void)conference:(id)arg1 closeConnectionForCallID:(long long)arg2;
- (void)conference:(id)arg1 didStopWithCallID:(long long)arg2 error:(id)arg3;
- (void)conference:(id)arg1 didStartSession:(_Bool)arg2 withUserInfo:(id)arg3;
- (void)conference:(id)arg1 withCallID:(long long)arg2 remoteMediaStalled:(_Bool)arg3;
- (_Bool)_shouldIgnoreAVConferenceError:(id)arg1;
- (void)_cleanUpConference;
- (void)_cleanUpConferenceConnection:(id)arg1 error:(id)arg2;
- (void)_cleanUpAllConferenceConnectionsWithError:(id)arg1;
- (void)_setUpDidStartTimeoutForConference:(id)arg1 conferenceConnection:(id)arg2;
- (void)_stopAudioSession;
- (void)_startAudioSession;
- (void)_startConferenceForConferenceConnection:(id)arg1 withSocket:(int)arg2;
- (id)_conferenceConnectionForCall:(id)arg1;
- (void)stopConferenceForAllCalls;
- (void)stopConferenceForCall:(id)arg1;
- (void)startConferenceForCall:(id)arg1 withSocket:(int)arg2 didStartHandler:(CDUnknownBlockType)arg3 didStopHandler:(CDUnknownBlockType)arg4;
@property(nonatomic, getter=isMuted) _Bool muted;
- (void)dealloc;
- (id)init;

@end

@interface TUAccountsController : NSObject
{
    int _outgoingRelayCallerIDChangedToken;
    NSXPCConnection *_xpcConnection;
}

@property(nonatomic) int outgoingRelayCallerIDChangedToken; // @synthesize outgoingRelayCallerIDChangedToken=_outgoingRelayCallerIDChangedToken;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(readonly, copy, nonatomic) NSString *formattedOutgoingRelayCallerID;
@property(readonly, copy, nonatomic) NSString *outgoingRelayCallerID;
- (void)_tearDownXPCConnection;
- (void)_setUpXPCConnection;
- (void)dealloc;
- (id)init;

@end

@interface TUAudioController : NSObject
{
    NSObject<OS_dispatch_semaphore> *_modifyingStateLock;
    NSObject<OS_dispatch_group> *_outstandingRequestsGroup;
}

- (void)blockUntilOutstandingRequestsComplete;
- (void)dealloc;
- (id)init;
- (void)_requestUpdatedValueWithBlock:(CDUnknownBlockType)arg1 object:(id *)arg2 isRequestingPointer:(_Bool *)arg3 forceNewRequest:(_Bool)arg4 scheduleTimePointer:(unsigned long long *)arg5 notificationString:(id)arg6 queue:(id)arg7;
- (void)_leaveOutstandingRequestsGroup;
- (void)_enterOutstandingRequestsGroup;
- (void)_releaseLock;
- (void)_acquireLock;

@end

@interface TUAudioPlayer : NSObject
{
    id <TUAudioPlayerDelegateProtocol> _delegate;
}

@property(nonatomic) id <TUAudioPlayerDelegateProtocol> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) _Bool playingSound;
- (void)stop;
- (void)playSound:(int)arg1 numOfLoops:(int)arg2 pauseDuration:(double)arg3;
- (void)playSelectedSound;
- (void)dealloc;

@end

@interface TUAudioSystemController : TUAudioController
{
    NSObject<OS_dispatch_queue> *_uplinkMutedQueue;
    NSObject<OS_dispatch_queue> *_downlinkMutedQueue;
    NSObject<OS_dispatch_queue> *_ttyQueue;
    NSObject<OS_dispatch_queue> *_pickableRoutesQueue;
    NSNumber *_isUplinkMutedCached;
    NSNumber *_isDownlinkMutedCached;
    NSNumber *_isTTYCached;
    NSArray *_pickableRoutesForTTY;
    NSArray *_pickableRoutesForPhoneCall;
    NSArray *_pickableRoutesForPlayAndRecordVideo;
    NSArray *_pickableRoutesForPlayAndRecordVoice;
    NSArray *_pickableRoutesForPlayAndRecordRemoteVoice;
    _Bool _isRequestingUplinkMuted;
    _Bool _isRequestingDownlinkMuted;
    _Bool _isRequestingTTY;
    _Bool _isRequestingPickableRoutesForTTY;
    _Bool _isRequestingPickableRoutesForPhoneCall;
    _Bool _isRequestingPickableRoutesForPlayAndRecordVideo;
    _Bool _isRequestingPickableRoutesForPlayAndRecordVoice;
    _Bool _isRequestingPickableRoutesForPlayAndRecordRemoteVoice;
    unsigned long long _lastUplinkMutedRequestScheduleTime;
    unsigned long long _lastDownlinkMutedRequestScheduleTime;
    unsigned long long _lastTTYRequestScheduleTime;
    unsigned long long _lastTTYPickableRoutesScheduleTime;
    unsigned long long _lastPhoneCallCategoryRoutesScheduleTime;
    unsigned long long _lastPlayAndRecordVideoRoutesScheduleTime;
    unsigned long long _lastPlayAndRecordVoiceRoutesScheduleTime;
    unsigned long long _lastPlayAndRecordRemoteVoiceRoutesScheduleTime;
}

+ (id)sharedAudioSystemController;
+ (id)sharedSystemController;
- (id)pickableRoutesForFaceTimeVideoCategory;
- (id)pickableRoutesForFaceTimeAudioCategory;
- (id)pickableRoutesForPhoneCallCategory;
- (id)pickableRoutesForCategory:(id)arg1 andMode:(id)arg2;
- (id)_pickableRoutesForPlayAndRecordRemoteVoiceWithForceNewRequest:(_Bool)arg1;
- (id)_pickableRoutesForPlayAndRecordVideoWithForceNewRequest:(_Bool)arg1;
- (id)_pickableRoutesForPlayAndRecordVoiceWithForceNewRequest:(_Bool)arg1;
- (id)_pickableRoutesForPhoneCallWithForceNewRequest:(_Bool)arg1;
- (id)pickableRoutesForTTY;
- (id)_pickableRoutesForTTYWithForceNewRequest:(_Bool)arg1;
- (_Bool)setDownlinkMuted:(_Bool)arg1;
- (_Bool)isDownlinkMuted;
- (_Bool)setUplinkMuted:(_Bool)arg1;
- (_Bool)isTTY;
- (_Bool)isUplinkMuted;
- (void)_handleCallStatusChanged;
- (void)_pickableRoutesDidChangeNotification:(id)arg1;
- (void)_handleDownlinkMuteDidChangeNotification:(id)arg1;
- (void)_handleUplinkMuteDidChangeNotification:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface TUCall : NSObject <NSSecureCoding>
{
    NSString *_displayName;
    NSString *_overrideName;
    NSString *_companyName;
    long long _displayNameBreakPoint;
    NSString *_abLabel;
    int _abUid;
    struct {
        unsigned int imageType:2;
        unsigned int abUidIsValid:1;
        unsigned int dialAssisted:1;
        unsigned int dialedFromEmergencyUI:1;
        unsigned int isEmergencyCall:1;
        unsigned int isEmergencyCallIsValid:1;
        unsigned int joiningConference:1;
        unsigned int leavingConference:1;
    } _phoneCallFlags;
    _Bool _requestingHandoff;
    _Bool _endpointOnCurrentDevice;
    _Bool _wantsHoldMusic;
    _Bool _connected;
    _Bool _hasUpdatedAudio;
    _Bool _requiresAudioReinterruption;
    _Bool _allowsTTYSettingChanges;
    _Bool _connectingToRelay;
    int _disconnectedReason;
    int _faceTimeIDStatus;
    int _transitionStatus;
    NSString *_suggestedDisplayName;
    NSString *_uniqueProxyIdentifier;
    NSString *_sourceIdentifier;
    NSString *_isoCountryCode;
    long long _provisionalHoldStatus;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic, getter=isConnectingToRelay) _Bool connectingToRelay; // @synthesize connectingToRelay=_connectingToRelay;
@property(nonatomic) _Bool allowsTTYSettingChanges; // @synthesize allowsTTYSettingChanges=_allowsTTYSettingChanges;
@property(nonatomic) _Bool requiresAudioReinterruption; // @synthesize requiresAudioReinterruption=_requiresAudioReinterruption;
@property(nonatomic) int transitionStatus; // @synthesize transitionStatus=_transitionStatus;
@property(nonatomic) long long provisionalHoldStatus; // @synthesize provisionalHoldStatus=_provisionalHoldStatus;
@property(copy, nonatomic) NSString *isoCountryCode; // @synthesize isoCountryCode=_isoCountryCode;
@property(copy, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
@property(copy, nonatomic) NSString *sourceIdentifier; // @synthesize sourceIdentifier=_sourceIdentifier;
@property(copy, nonatomic) NSString *uniqueProxyIdentifier; // @synthesize uniqueProxyIdentifier=_uniqueProxyIdentifier;
@property(nonatomic) _Bool hasUpdatedAudio; // @synthesize hasUpdatedAudio=_hasUpdatedAudio;
@property(nonatomic, getter=isConnected) _Bool connected; // @synthesize connected=_connected;
@property(nonatomic) _Bool wantsHoldMusic; // @synthesize wantsHoldMusic=_wantsHoldMusic;
@property(nonatomic, getter=isEndpointOnCurrentDevice) _Bool endpointOnCurrentDevice; // @synthesize endpointOnCurrentDevice=_endpointOnCurrentDevice;
@property(nonatomic, getter=isRequestingHandoff) _Bool requestingHandoff; // @synthesize requestingHandoff=_requestingHandoff;
@property(nonatomic) int faceTimeIDStatus; // @synthesize faceTimeIDStatus=_faceTimeIDStatus;
@property(nonatomic) int disconnectedReason; // @synthesize disconnectedReason=_disconnectedReason;
@property(copy) NSString *suggestedDisplayName; // @synthesize suggestedDisplayName=_suggestedDisplayName;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)updateWithCall:(id)arg1;
@property(readonly, copy, nonatomic) NSString *errorAlertMessage;
@property(readonly, copy, nonatomic) NSString *errorAlertTitle;
- (_Bool)hasSupport:(int)arg1;
- (id)contactImageDataWithFormat:(int)arg1;
- (void)_loadCallDetails;
- (int)abUID;
@property(readonly, retain, nonatomic) NSString *conferenceIdentifier;
@property(readonly, retain, nonatomic) NSData *remoteFrequency;
@property(readonly, retain, nonatomic) NSData *localFrequency;
@property(readonly, nonatomic) float localVolume;
- (_Bool)isTTY;
- (_Bool)setDownlinkMuted:(_Bool)arg1;
- (_Bool)isDownlinkMuted;
- (_Bool)setUplinkMuted:(_Bool)arg1;
- (_Bool)isUplinkMuted;
- (_Bool)setMuted:(_Bool)arg1;
- (_Bool)isMuted;
@property(readonly, nonatomic) _Bool playsConnectedSound;
- (_Bool)needsManualInCallSounds;
- (_Bool)managesAudioInterruptions;
- (id)audioMode;
- (id)audioCategory;
@property(readonly, nonatomic) _Bool statusIsProvisional;
- (int)callStatus;
@property(readonly, nonatomic, getter=isStatusFinal) _Bool statusFinal;
@property(readonly, nonatomic) int status;
- (id)totalDataUsed;
- (id)callDurationString;
- (double)callDuration;
- (_Bool)isEqual:(id)arg1;
- (int)causeCode;
@property(readonly, copy, nonatomic) NSString *callHistoryIdentifier;
@property(readonly, copy, nonatomic) NSString *callUUID;
@property(readonly, nonatomic) int callIdentifier;
@property(readonly, nonatomic, getter=isVoicemail) _Bool voicemail;
- (_Bool)isAlerting;
- (_Bool)isEmergencyCall;
- (void)setWasDialedFromEmergencyUI:(_Bool)arg1;
- (_Bool)wasDialedFromEmergencyUI;
- (void)setWasDialAssisted:(_Bool)arg1;
- (_Bool)wasDialAssisted;
@property(readonly, nonatomic, getter=isHostedOnCurrentDevice) _Bool hostedOnCurrentDevice;
- (void)setOverrideName:(id)arg1;
- (id)localizedLabel;
@property(readonly, copy, nonatomic) NSString *callerNameFromNetwork;
- (id)companyName;
- (id)multiLineDisplayName;
- (id)displayFirstName;
- (id)_displayNameWithSeparator:(id)arg1;
@property(readonly, copy, nonatomic) NSString *destinationID;
- (void)leaveConference;
- (void)joinConference;
- (_Bool)isConferenced;
- (void)_setPrimitiveDisconnectedReason:(int)arg1;
- (void)_setPrimitiveEndpointOnCurrentDevice:(_Bool)arg1;
- (void)_setPrimitiveWantsHoldMusic:(_Bool)arg1;
- (void)resetWantsHoldMusic;
@property(readonly, nonatomic) int endedError;
@property(readonly, nonatomic) unsigned int endedReason;
@property(readonly, retain, nonatomic) IMAVChatParticipant *remoteParticipant;
@property(readonly, nonatomic) _Bool hasReceivedFirstFrame;
@property(readonly, nonatomic) _Bool isActive;
@property(nonatomic) _Bool isSendingVideo;
@property(readonly, nonatomic) double startTime;
@property(readonly, nonatomic, getter=isBlocked) _Bool blocked;
@property(readonly, nonatomic) _Bool shouldIgnoreStatusChange;
@property(readonly, nonatomic, getter=isOutgoing) _Bool outgoing;
@property(readonly, nonatomic) _Bool isVideo;
@property(readonly, nonatomic) _Bool wasDeclined;
@property(readonly, nonatomic) int supportedModelType;
@property(readonly, nonatomic) int service;
- (void)playDTMFToneForKey:(unsigned char)arg1;
- (_Bool)shouldPlayDTMFTone;
- (void)resetProvisionalStatuses;
- (void)resetProvisionalHoldStatus;
- (void)inviteWithCallIdentifier:(int)arg1;
- (void)disconnectWithReason:(int)arg1;
- (void)disconnect;
- (void)unhold;
- (void)hold;
@property(nonatomic) _Bool isOnHold;
- (void)answerWithSourceIdentifier:(id)arg1;
- (void)answer;
- (void)_handleStatusChange;
- (void)_handleCallerIDChange;
- (void)_handleIdentityChange;
- (void)_handleManagesAudioInterruptionsChange;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface TUCallCapabilities : NSObject
{
}

+ (void)_initializeCTCapabilitiesSupport;
+ (void)_tearDownCTCapabilitiesNotifications;
+ (void)_setUpCTCapabilitiesNotifications;
+ (struct __CTServerConnection *)_createServerConnection;
+ (void)invalidateCachedValues;
+ (void)_sendNecessaryNotificationsAfterRunningBlock:(CDUnknownBlockType)arg1;
+ (void)_setRelayCallingEnabledDefault:(_Bool)arg1;
+ (_Bool)_relayCallingEnabledDefault;
+ (void)_setCanEnableRelayCallingDefault:(_Bool)arg1;
+ (_Bool)_canEnableRelayCallingDefault;
+ (void)_setSupportsRelayCallingDefault:(_Bool)arg1;
+ (_Bool)_supportsRelayCallingDefault;
+ (void)setRelayCallingEnabled:(_Bool)arg1;
+ (_Bool)isRelayCallingEnabled;
+ (_Bool)canEnableRelayCalling;
+ (_Bool)supportsRelayCalling;
+ (void)_tearDownRelayCallingListeners;
+ (void)_setUpRelayCallingListeners;
+ (void)_initializeState;
+ (_Bool)isWiFiCallingCurrentlyAvailable;
+ (void)setWiFiCallingCapabilityInformation:(id)arg1;
+ (id)wiFiCallingCapabilityInformation;
+ (void)setWiFiCallingEnabled:(_Bool)arg1;
+ (_Bool)isWiFiCallingEnabled;
+ (_Bool)canEnableWiFiCalling;
+ (_Bool)supportsSimultaneousVoiceAndData;
+ (_Bool)supportsDisplayingFaceTimeVideoCalls;
+ (_Bool)supportsDisplayingFaceTimeAudioCalls;
+ (_Bool)supportsDisplayingTelephonyCalls;
+ (_Bool)supportsHostingFaceTimeVideoCalls;
+ (_Bool)supportsHostingFaceTimeAudioCalls;
+ (_Bool)supportsHostingTelephonyCalls;
+ (int)faceTimeVideoCallSupport;
+ (int)faceTimeAudioCallSupport;
+ (int)telephonyCallSupport;
+ (_Bool)supportsFaceTimeVideoCalls;
+ (_Bool)supportsFaceTimeAudioCalls;
+ (_Bool)supportsTelephonyCalls;

@end

@interface TUCallCenter : NSObject <IDSIDQueryControllerDelegate>
{
    NSMutableArray *_displayedCalls;
    NSMutableArray *_conferenceParticipantCalls;
    TUCallCenterCallsCache *_callsCache;
    TUCallModelState *_callModelState;
}

+ (_Bool)emergencyCallBackModeIsActive;
+ (_Bool)shouldDisableAppFeatures;
+ (_Bool)isIMAVChatHostProcess;
+ (_Bool)isInCallServiceProcess;
+ (id)sharedInstance;
+ (id)_sharedInstanceWithDaemonDelegate:(id)arg1;
+ (void *)sharedAddressBook;
@property(retain, nonatomic) TUCallModelState *callModelState; // @synthesize callModelState=_callModelState;
@property(retain, nonatomic) TUCallCenterCallsCache *callsCache; // @synthesize callsCache=_callsCache;
@property(retain, nonatomic) NSMutableArray *conferenceParticipantCalls; // @synthesize conferenceParticipantCalls=_conferenceParticipantCalls;
@property(retain, nonatomic) NSMutableArray *displayedCalls; // @synthesize displayedCalls=_displayedCalls;
- (void)endEmergencyCallBackMode;
- (void)_callStatusChangedInternal:(id)arg1;
- (void)filteredIncomingIMAVChat:(id)arg1;
- (void)createdOutgoingIMAVChat:(id)arg1;
- (void)invitedToIMAVChat:(id)arg1;
- (void)daemonConnected:(id)arg1;
- (void)handleChatVideoStalledDidChange:(id)arg1;
- (void)handleChatVideoQualityDidChange:(id)arg1;
- (void)handleChatRemotePauseDidChange:(id)arg1;
- (void)handleChatRemoteScreenDidChange:(id)arg1;
- (void)handleChatRemoteVideoDidChange:(id)arg1;
- (void)handleChatFirstRemoteFrameArrived:(id)arg1;
- (void)handleChatFirstPreviewFrameArrived:(id)arg1;
- (void)handleChatInvitationSent:(id)arg1;
- (id)_videoCallUserInfoForUserInfo:(id)arg1;
- (void)handleChatSendingAudioChangedNotification:(id)arg1;
- (void)handleChatConferenceMetadataUpdated:(id)arg1;
- (void)handleChatStateChanged:(id)arg1;
- (void)_handleCallEnded:(id)arg1 withReason:(unsigned int)arg2 error:(int)arg3;
- (void)handleCallModelStateChanged:(id)arg1;
- (void)handleCallerIDChanged:(id)arg1;
- (void)handleCallSubTypeChanged:(id)arg1;
- (void)handleCallerUnavailableForCall:(id)arg1 reason:(unsigned int)arg2 error:(int)arg3;
- (id)_callerUnavailableUserInfoForCall:(id)arg1 reason:(unsigned int)arg2 error:(int)arg3;
- (void)handleCallFailed:(id)arg1;
- (void)handleFilteredCall:(id)arg1 userInfo:(id)arg2;
- (void)handleFilteredCall:(id)arg1;
- (void)handleCallAudioUpdatedForCall:(id)arg1 userInfo:(id)arg2;
- (void)handleCallConnected:(id)arg1;
- (void)handleCallStatusOnDefaultPairedDeviceChanged:(id)arg1;
- (void)handleCallStatusChanged:(id)arg1 userInfo:(id)arg2;
- (void)handleCallStatusChanged:(id)arg1;
- (id)_callStatusUserInfoForUserInfo:(id)arg1;
- (_Bool)isSendToVoicemailAllowed;
- (_Bool)isHoldAndAnswerAllowed;
- (_Bool)isEndAndAnswerAllowed;
- (_Bool)isHardPauseAvailable;
- (_Bool)isTakingCallsPrivateAllowed;
- (_Bool)canTakeCallsPrivate;
- (int)ambiguityState;
- (_Bool)isAmbiguous;
- (_Bool)isAddCallAllowed;
- (_Bool)isHoldAllowed;
- (_Bool)isMergeable;
- (_Bool)isSwappable;
- (void)disconnectNonRelayingCalls;
- (void)disconnectRelayingCalls;
- (void)requestHandoffForAllCalls;
- (void)disconnectAllCalls;
- (void)disconnectCurrentCallAndActivateHeld;
- (void)disconnectCall:(id)arg1 withReason:(int)arg2;
- (void)disconnectCall:(id)arg1;
- (void)resumeCall:(id)arg1;
- (void)swapCalls;
- (void)endHeldAndAnswerCall:(id)arg1;
- (void)endActiveAndAnswerCall:(id)arg1;
- (void)holdActiveAndAnswerCall:(id)arg1;
- (void)answerCall:(id)arg1 withSourceIdentifier:(id)arg2 wantsHoldMusic:(_Bool)arg3;
- (void)answerCallWithHoldMusic:(id)arg1;
- (void)answerCall:(id)arg1 withSourceIdentifier:(id)arg2;
- (void)answerCall:(id)arg1;
- (id)displayedCallFromCalls:(id)arg1;
- (void)sendFieldModeDigits:(id)arg1;
- (id)dialVoicemail;
- (id)dialEmergency:(id)arg1;
- (id)dial:(id)arg1 callID:(int)arg2 service:(int)arg3 sourceIdentifier:(id)arg4 isRelayCall:(_Bool)arg5;
- (id)dial:(id)arg1 callID:(int)arg2 service:(int)arg3 sourceIdentifier:(id)arg4;
- (id)dial:(id)arg1 callID:(int)arg2 service:(int)arg3;
- (id)dial:(id)arg1 service:(int)arg2;
- (id)_dialTelephonyCall:(id)arg1 callID:(int)arg2 sourceIdentifier:(id)arg3 callType:(struct __CFString *)arg4 isRelayCall:(_Bool)arg5;
- (id)_dialFaceTimeCall:(id)arg1 isVideo:(_Bool)arg2 callID:(int)arg3 sourceIdentifier:(id)arg4;
- (_Bool)allCallsAreOfService:(int)arg1;
- (id)callsHostedOrAnEndpointElsewhere;
- (id)callsWithAnEndpointElsewhere;
- (id)callsHostedElsewhere;
- (_Bool)anyCallIsEndpointOnCurrentDevice;
- (_Bool)anyCallIsHostedOnCurrentDevice;
- (_Bool)canInitiateCallForService:(int)arg1;
- (_Bool)canInitiateCalls;
- (id)sourceAccount:(_Bool)arg1;
- (id)proxyCallWithDestinationID:(id)arg1 service:(int)arg2 status:(int)arg3 sourceIdentifier:(id)arg4 outgoing:(_Bool)arg5 conferenceIdentifier:(id)arg6 voicemail:(_Bool)arg7 callerNameFromNetwork:(id)arg8;
- (unsigned long long)callCountOnDefaultPairedDevice;
- (id)callGroupsOnDefaultPairedDevice;
- (id)callsOnDefaultPairedDevice;
- (id)_allCalls;
- (id)callWithCallUUID:(id)arg1;
- (id)callWithUniqueProxyIdentifier:(id)arg1;
- (id)callWithStatus:(int)arg1;
- (id)currentAudioAndVideoCalls;
- (int)currentCallCount;
- (id)_currentCalls:(_Bool)arg1;
- (id)currentCalls;
- (id)currentCallGroups;
- (id)_callGroupsFromCalls:(id)arg1;
@property(readonly, retain, nonatomic) NSArray *incomingCalls;
@property(readonly, retain, nonatomic) TUCall *incomingCall;
- (void)dealloc;
- (id)initWithDaemonDelegate:(id)arg1;
- (void)_handleCallControlFailure:(id)arg1;
- (id)_callControlFailureUserInfoForUserInfo:(id)arg1;
- (id)conferenceCall;
- (void)forceUpdateOfCallList;
- (void)forceDisconnectOfCall:(id)arg1;
- (void)forceCallOutOfConference:(id)arg1;
- (void)forceCallIntoConference:(id)arg1;
- (void)forceCallActive:(id)arg1;
- (void)resumeCallChangeNotifications;
- (void)suspendCallChangeNotifications;
- (id)displayedCallsNotIncludingIncomingCall;
- (id)displayedCall;
- (_Bool)canMergeCalls;
- (_Bool)justAnIncomingCallExists;
- (_Bool)inOutgoingCall;
- (_Bool)inCall;
- (void)_updateCallCount:(id)arg1 force:(_Bool)arg2;
- (void)_updateActiveCalls:(id)arg1;
- (void)_setConferenceParticipants:(id)arg1;
- (void)_setActiveCalls:(id)arg1;
- (void)_removeActiveCall:(id)arg1;
- (void)_addActiveCall:(id)arg1;
- (void)_postConferenceParticipantsChanged;
- (void)_postDisplayedCallsChanged;
- (void)_setIncomingCall:(id)arg1;
- (void)_resetState;
- (unsigned long long)currentVideoCallCount;
- (id)allNonFinalVideoCalls;
- (id)currentVideoCalls;
- (id)videoCallWithStatus:(int)arg1;
- (id)currentVideoCall;
- (id)activeVideoCall;
- (id)incomingVideoCall;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TUCallModelState : NSObject <NSSecureCoding>
{
    _Bool _ambiguous;
    _Bool _swappable;
    _Bool _mergeable;
    _Bool _holdAllowed;
    _Bool _addCallAllowed;
    _Bool _takingCallsPrivateAllowed;
    _Bool _hardPauseAvailable;
    _Bool _endAndAnswerAllowed;
    _Bool _holdAndAnswerAllowed;
    _Bool _sendToVoicemailAllowed;
    int _ambiguityState;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic, getter=isSendToVoicemailAllowed) _Bool sendToVoicemailAllowed; // @synthesize sendToVoicemailAllowed=_sendToVoicemailAllowed;
@property(nonatomic, getter=isHoldAndAnswerAllowed) _Bool holdAndAnswerAllowed; // @synthesize holdAndAnswerAllowed=_holdAndAnswerAllowed;
@property(nonatomic, getter=isEndAndAnswerAllowed) _Bool endAndAnswerAllowed; // @synthesize endAndAnswerAllowed=_endAndAnswerAllowed;
@property(nonatomic, getter=isHardPauseAvailable) _Bool hardPauseAvailable; // @synthesize hardPauseAvailable=_hardPauseAvailable;
@property(nonatomic, getter=isTakingCallsPrivateAllowed) _Bool takingCallsPrivateAllowed; // @synthesize takingCallsPrivateAllowed=_takingCallsPrivateAllowed;
@property(nonatomic, getter=isAddCallAllowed) _Bool addCallAllowed; // @synthesize addCallAllowed=_addCallAllowed;
@property(nonatomic, getter=isHoldAllowed) _Bool holdAllowed; // @synthesize holdAllowed=_holdAllowed;
@property(nonatomic, getter=isMergeable) _Bool mergeable; // @synthesize mergeable=_mergeable;
@property(nonatomic, getter=isSwappable) _Bool swappable; // @synthesize swappable=_swappable;
@property(nonatomic) int ambiguityState; // @synthesize ambiguityState=_ambiguityState;
@property(readonly, nonatomic, getter=isAmbiguous) _Bool ambiguous; // @synthesize ambiguous=_ambiguous;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)updateInternalState;
- (void)handlePossibleStateChange;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (id)initWithAllPropertiesAllowed;

@end

@interface TUCallCenterCallModelState : TUCallModelState
{
}

- (void)faceTimeAudioCallModelDidChange:(id)arg1;
- (void)telephonyCallModelDidChange:(id)arg1;
- (id)description;
- (_Bool)isAmbiguous;
- (_Bool)_updateSendToVoicemailAllowed;
- (_Bool)_updateHoldAndAnswerAllowed;
- (_Bool)_updateEndAndAnswerAllowed;
- (_Bool)_updateHardPauseAvailable;
- (_Bool)_updateTakingCallsPrivateAllowed;
- (_Bool)_updateAmbiguityState;
- (_Bool)_updateAddCallAllowed;
- (_Bool)_updateHoldAllowed;
- (_Bool)_updateMergeable;
- (_Bool)_updateSwappable;
- (_Bool)updateInternalState;
- (void)handlePossibleStateChange;
- (_Bool)_anyCallsSupportCallModelType:(int)arg1;
- (_Bool)_allCallsSupportCallModelType:(int)arg1;
- (_Bool)_displayedCallSupportsCallModelType:(int)arg1;
- (_Bool)_onlySupportsCallModelType:(int)arg1;
- (_Bool)_supportsCallModelType:(int)arg1;
@property(readonly, retain, nonatomic) TUProxyCallModel *proxyCallModel;
@property(readonly, retain, nonatomic) TUFaceTimeAudioCallModel *faceTimeAudioCallModel;
@property(readonly, retain, nonatomic) TUTelephonyCallModel *telephonyCallModel;
- (void)dealloc;
- (id)init;

@end

@interface TUCallCenterCallsCache : NSObject
{
    NSMapTable *_callRefToTelephonyCall;
    NSObject<OS_dispatch_semaphore> *_callRefToTelephonyCallSemaphore;
    NSMapTable *_chatGUIDToFaceTimeCall;
    NSObject<OS_dispatch_semaphore> *_chatGUIDToFaceTimeCallSemaphore;
    NSMapTable *_uniqueProxyIdentifierToProxyCall;
    NSObject<OS_dispatch_semaphore> *_uniqueProxyIdentifierToProxyCallSemaphore;
    NSMutableSet *_currentCallSet;
}

@property(retain, nonatomic) NSMutableSet *currentCallSet; // @synthesize currentCallSet=_currentCallSet;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *uniqueProxyIdentifierToProxyCallSemaphore; // @synthesize uniqueProxyIdentifierToProxyCallSemaphore=_uniqueProxyIdentifierToProxyCallSemaphore;
@property(retain, nonatomic) NSMapTable *uniqueProxyIdentifierToProxyCall; // @synthesize uniqueProxyIdentifierToProxyCall=_uniqueProxyIdentifierToProxyCall;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *chatGUIDToFaceTimeCallSemaphore; // @synthesize chatGUIDToFaceTimeCallSemaphore=_chatGUIDToFaceTimeCallSemaphore;
@property(retain, nonatomic) NSMapTable *chatGUIDToFaceTimeCall; // @synthesize chatGUIDToFaceTimeCall=_chatGUIDToFaceTimeCall;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *callRefToTelephonyCallSemaphore; // @synthesize callRefToTelephonyCallSemaphore=_callRefToTelephonyCallSemaphore;
@property(retain, nonatomic) NSMapTable *callRefToTelephonyCall; // @synthesize callRefToTelephonyCall=_callRefToTelephonyCall;
- (void)_updateCallWithPersistentValues:(id)arg1;
- (id)proxyCallForProxyCall:(id)arg1;
- (id)callForChat:(id)arg1 shouldSkipLoadingCallState:(_Bool)arg2;
- (id)callForChat:(id)arg1;
- (id)callForCTCall:(struct __CTCall *)arg1 shouldSkipLoadingCallState:(_Bool)arg2;
- (id)callForCTCall:(struct __CTCall *)arg1;
- (void)stopTrackingCall:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface TUCallGroup : NSObject
{
    NSArray *_calls;
}

@property(retain) NSArray *calls; // @synthesize calls=_calls;
- (void)dealloc;
- (id)description;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (int)status;
- (id)displayName;
- (_Bool)isEqual:(id)arg1;

@end

@interface TUCallModel : NSObject
{
    _Bool _ambiguous;
    _Bool _swappable;
    _Bool _mergeable;
    _Bool _holdAllowed;
    _Bool _addCallAllowed;
    _Bool _takingCallsPrivateAllowed;
    _Bool _hardPauseAvailable;
    _Bool _endAndAnswerAllowed;
    _Bool _holdAndAnswerAllowed;
    _Bool _sendToVoicemailAllowed;
    int _ambiguityState;
}

+ (id)sharedInstance;
@property(readonly, nonatomic, getter=isSendToVoicemailAllowed) _Bool sendToVoicemailAllowed; // @synthesize sendToVoicemailAllowed=_sendToVoicemailAllowed;
@property(readonly, nonatomic, getter=isHoldAndAnswerAllowed) _Bool holdAndAnswerAllowed; // @synthesize holdAndAnswerAllowed=_holdAndAnswerAllowed;
@property(readonly, nonatomic, getter=isEndAndAnswerAllowed) _Bool endAndAnswerAllowed; // @synthesize endAndAnswerAllowed=_endAndAnswerAllowed;
@property(readonly, nonatomic, getter=isHardPauseAvailable) _Bool hardPauseAvailable; // @synthesize hardPauseAvailable=_hardPauseAvailable;
@property(readonly, nonatomic, getter=isTakingCallsPrivateAllowed) _Bool takingCallsPrivateAllowed; // @synthesize takingCallsPrivateAllowed=_takingCallsPrivateAllowed;
@property(readonly, nonatomic, getter=isAddCallAllowed) _Bool addCallAllowed; // @synthesize addCallAllowed=_addCallAllowed;
@property(readonly, nonatomic, getter=isHoldAllowed) _Bool holdAllowed; // @synthesize holdAllowed=_holdAllowed;
@property(readonly, nonatomic, getter=isMergeable) _Bool mergeable; // @synthesize mergeable=_mergeable;
@property(readonly, nonatomic, getter=isSwappable) _Bool swappable; // @synthesize swappable=_swappable;
@property(readonly, nonatomic) int ambiguityState; // @synthesize ambiguityState=_ambiguityState;
@property(readonly, nonatomic, getter=isAmbiguous) _Bool ambiguous; // @synthesize ambiguous=_ambiguous;
- (id)description;

@end

@interface TUCallServicesInterface : NSObject <TUCallServicesDaemonObserver, TUCallServicesProxyCallActions>
{
    _Bool _muted;
    id <TUCallServicesDaemonDelegate> _daemonDelegate;
    TUCallCenterCallsCache *_callsCache;
    NSArray *_currentProxyCalls;
    TUProxyCallModel *_proxyCallModel;
    NSData *_localFrequency;
    NSData *_remoteFrequency;
    NSXPCConnection *_xpcConnection;
    NSObject<OS_dispatch_semaphore> *_xpcConnectionCreationSemaphore;
}

+ (_Bool)launchesCallServicesDaemonOnDemand;
+ (id)sharedInstance;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *xpcConnectionCreationSemaphore; // @synthesize xpcConnectionCreationSemaphore=_xpcConnectionCreationSemaphore;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(nonatomic, getter=isMuted) _Bool muted; // @synthesize muted=_muted;
@property(retain, nonatomic) NSData *remoteFrequency; // @synthesize remoteFrequency=_remoteFrequency;
@property(retain, nonatomic) NSData *localFrequency; // @synthesize localFrequency=_localFrequency;
@property(retain, nonatomic) TUProxyCallModel *proxyCallModel; // @synthesize proxyCallModel=_proxyCallModel;
@property(copy, nonatomic) NSArray *currentProxyCalls; // @synthesize currentProxyCalls=_currentProxyCalls;
@property(retain, nonatomic) TUCallCenterCallsCache *callsCache; // @synthesize callsCache=_callsCache;
@property(nonatomic) id <TUCallServicesDaemonDelegate> daemonDelegate; // @synthesize daemonDelegate=_daemonDelegate;
- (void)handleCallModelStateChanged:(id)arg1;
- (void)handleCurrentProxyCallsChanged:(id)arg1;
- (void)handleCallContinuityStateChangedForProxyCall:(id)arg1;
- (void)handleCallStatusChangedForProxyCall:(id)arg1;
- (void)handleHardPauseDigitsAvailibilityChangedTo:(unsigned short)arg1 digits:(id)arg2;
- (void)handleMutedChangedTo:(_Bool)arg1;
- (void)handleRemoteFrequencyChangedTo:(id)arg1;
- (void)handleLocalFrequencyChangedTo:(id)arg1;
- (void)handleDisconnectedReasonChangedTo:(int)arg1 forCallWithUUID:(id)arg2;
- (void)handleEndpointOnCurrentDeviceChangedTo:(_Bool)arg1 forCallWithUUID:(id)arg2;
- (void)handleWantsHoldMusicChangedTo:(_Bool)arg1 forCallWithUUID:(id)arg2;
- (_Bool)relayableClientDeviceExists;
- (_Bool)relayableHostDeviceExists;
- (void)setRelayCallingEnabled:(_Bool)arg1;
- (void)unmuteCall:(id)arg1;
- (void)muteCall:(id)arg1;
- (void)sendHardPauseDigits;
- (void)disconnectAllCalls;
- (void)disconnectCurrentCallAndActivateHeld;
- (void)endHeldAndAnswerCall:(id)arg1;
- (void)endActiveAndAnswerCall:(id)arg1;
- (void)playDTMFToneForCall:(id)arg1 key:(unsigned char)arg2;
- (void)swapCalls;
- (void)unconferenceCall:(id)arg1;
- (void)conferenceCall:(id)arg1;
- (void)disconnectCall:(id)arg1;
- (void)unholdCall:(id)arg1;
- (void)holdCall:(id)arg1;
- (void)answerCall:(id)arg1;
- (void)dialCall:(id)arg1;
- (id)dial:(id)arg1 callID:(int)arg2 service:(int)arg3 sourceIdentifier:(id)arg4;
- (void)requestHandoffForAllCalls;
- (void)setDisconnectedReason:(int)arg1 forCall:(id)arg2;
- (void)setEndpointOnCurrentDevice:(_Bool)arg1 forCall:(id)arg2;
- (void)setWantsHoldMusic:(_Bool)arg1 forCall:(id)arg2;
- (id)callStateForCall:(id)arg1;
- (void)requestPendingCallNotifications;
- (void)handleRelayCallingCapabilitiesChanged:(id)arg1;
- (void)handleCallStatusChanged:(id)arg1;
- (void)_tearDownXPCConnection;
- (void)_setUpXPCConnection;
- (id)daemonDelegateWithErrorHandler:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TUFaceTimeCall : TUCall
{
    IMAVChat *_chat;
}

@property(retain, nonatomic) IMAVChat *chat; // @synthesize chat=_chat;
- (id)conferenceInviteDictionary;
- (id)remoteFrequency;
- (id)conferenceIdentifier;
- (_Bool)managesAudioRelay;
- (id)localFrequency;
- (float)localVolume;
- (_Bool)isTTY;
- (_Bool)setDownlinkMuted:(_Bool)arg1;
- (_Bool)isDownlinkMuted;
- (_Bool)setUplinkMuted:(_Bool)arg1;
- (_Bool)isUplinkMuted;
- (_Bool)playsConnectedSound;
- (_Bool)needsManualInCallSounds;
- (_Bool)managesAudioInterruptions;
- (int)faceTimeIDStatus;
- (int)disconnectedReason;
- (id)totalDataUsed;
- (double)callDuration;
- (_Bool)isEqual:(id)arg1;
- (id)callHistoryIdentifier;
- (id)callUUID;
- (int)callIdentifier;
- (_Bool)isAlerting;
- (id)callerNameFromNetwork;
- (id)destinationID;
- (id)remoteParticipant;
- (void)leaveConference;
- (void)joinConference;
- (_Bool)isConferenced;
- (_Bool)shouldPlayDTMFTone;
- (double)startTime;
- (_Bool)isBlocked;
- (_Bool)isOutgoing;
- (_Bool)isStatusFinal;
- (void)inviteWithCallIdentifier:(int)arg1;
- (void)disconnect;
- (void)answerWithSourceIdentifier:(id)arg1;
- (void)dealloc;
- (id)initWithChat:(id)arg1;

@end

@interface TUFaceTimeAudioCall : TUFaceTimeCall
{
}

- (id)audioMode;
- (id)audioCategory;
- (int)callStatus;
- (int)supportedModelType;
- (int)service;
- (_Bool)shouldIgnoreStatusChange;
- (void)removeCallConnectedObserver;
- (void)addCallConnectedObserver;
- (void)handleCallConnected:(id)arg1;
- (void)unhold;
- (void)hold;
- (void)dealloc;

@end

@interface TUFaceTimeAudioCallModel : TUCallModel
{
}

+ (id)sharedInstance;
- (_Bool)isSendToVoicemailAllowed;
- (_Bool)isHoldAndAnswerAllowed;
- (_Bool)isEndAndAnswerAllowed;
- (_Bool)isHardPauseAvailable;
- (_Bool)isTakingCallsPrivateAllowed;
- (int)ambiguityState;
- (_Bool)isAddCallAllowed;
- (_Bool)isHoldAllowed;
- (_Bool)isMergeable;
- (_Bool)isSwappable;

@end

@interface TUFaceTimeVideoCall : TUFaceTimeCall
{
}

- (id)audioMode;
- (id)audioCategory;
- (int)endedError;
- (unsigned int)endedReason;
- (_Bool)hasReceivedFirstFrame;
- (void)setIsSendingVideo:(_Bool)arg1;
- (_Bool)isSendingVideo;
- (int)callStatus;
- (_Bool)isVideo;
- (int)supportedModelType;
- (int)service;

@end

@interface TUFaceTimeVideoCallModel : TUCallModel
{
}

+ (id)sharedInstance;
- (_Bool)isSendToVoicemailAllowed;
- (_Bool)isHoldAndAnswerAllowed;
- (_Bool)isEndAndAnswerAllowed;
- (_Bool)isHardPauseAvailable;
- (_Bool)isTakingCallsPrivateAllowed;
- (int)ambiguityState;
- (_Bool)isAddCallAllowed;
- (_Bool)isHoldAllowed;
- (_Bool)isMergeable;
- (_Bool)isSwappable;

@end

@interface TUHardPauseController : NSObject
{
    _Bool _cachedValuesAreValid;
    unsigned short _state;
    unsigned short _cachedAppropriateState;
    NSString *_cachedDisplayString;
}

+ (id)sharedHardPauseController;
@property unsigned short cachedAppropriateState; // @synthesize cachedAppropriateState=_cachedAppropriateState;
@property _Bool cachedValuesAreValid; // @synthesize cachedValuesAreValid=_cachedValuesAreValid;
@property(retain) NSString *cachedDisplayString; // @synthesize cachedDisplayString=_cachedDisplayString;
@property(nonatomic) unsigned short state; // @synthesize state=_state;
- (void)updateCachedValuesIfNecessary;
- (unsigned short)appropriateState;
@property(readonly, nonatomic) NSString *displayString;
- (void)sendHardPauseDigitsRelayed;
- (void)sendHardPauseDigitsLocal;
- (void)sendHardPauseDigits;
- (_Bool)canQueryHardPauseDigits;
- (void)resetCacheValidity;
- (void)modelStateChangedNotification:(id)arg1;
- (void)stopListeningForHardPauseEvents;
- (void)startListeningToHardPauseEvents;
- (void)dealloc;
- (id)init;

@end

@interface TUIDSUtilities : NSObject <IDSIDQueryControllerDelegate>
{
}

+ (_Bool)refreshAvailabilityForABRecordID:(int)arg1 serviceType:(unsigned long long)arg2;
+ (_Bool)isService:(unsigned long long)arg1 availableForABRecordID:(int)arg2;
+ (id)personForABRecordID:(int)arg1;
+ (_Bool)isService:(unsigned long long)arg1 availableForDestinations:(id)arg2;
+ (_Bool)_refreshAvailabilityForPerson:(id)arg1 serviceType:(unsigned long long)arg2;
+ (_Bool)_availabilityForPerson:(id)arg1 serviceType:(unsigned long long)arg2;
+ (id)_IDSFormattedDestinationsForPerson:(id)arg1;
+ (_Bool)_refreshAvailabilityForDestinations:(id)arg1 serviceType:(unsigned long long)arg2 userInfo:(id)arg3;
+ (_Bool)_availabilityForDestinations:(id)arg1 serviceType:(unsigned long long)arg2;
+ (_Bool)_anyStatusInResultDictionary:(id)arg1 equalsIDStatus:(long long)arg2;
+ (id)idsServiceForType:(unsigned long long)arg1;
+ (void)initialize;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface TULogging : NSObject
{
}

+ (_Bool)sendDirectoryToCrashReporter:(id)arg1 error:(id *)arg2;
+ (void)unregisterForShouldLogChangedNotification;
+ (void)registerForShouldLogChangedNotification;
+ (void)logType:(id)arg1 topic:(id)arg2 category:(id)arg3 backtrace:(_Bool)arg4 format:(id)arg5;
+ (_Bool)shouldLogType:(id)arg1;

@end

@interface TUPhoneNumber : NSObject <NSCoding, NSSecureCoding>
{
    struct __CFPhoneNumber *_phoneNumberRef;
}

+ (_Bool)supportsSecureCoding;
+ (id)phoneNumberWithDigits:(id)arg1 countryCode:(id)arg2;
+ (id)phoneNumberWithCFPhoneNumberRef:(struct __CFPhoneNumber *)arg1;
@property struct __CFPhoneNumber *phoneNumberRef; // @synthesize phoneNumberRef=_phoneNumberRef;
- (_Bool)isEqual:(id)arg1;
@property(readonly) NSString *unformattedInternationalRepresentation; // @dynamic unformattedInternationalRepresentation;
@property(readonly) NSString *formattedInternationalRepresentation; // @dynamic formattedInternationalRepresentation;
@property(readonly) NSString *formattedRepresentation; // @dynamic formattedRepresentation;
@property(readonly) NSString *countryCode; // @dynamic countryCode;
@property(readonly) NSString *digits; // @dynamic digits;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDigits:(id)arg1 countryCode:(id)arg2;
- (id)initWithCFPhoneNumberRef:(struct __CFPhoneNumber *)arg1;

@end

@interface TUPrivacyManager : NSObject
{
}

+ (id)sharedPrivacyManager;
- (id)allBlacklistRules;
- (_Bool)isIncomingCommunicationBlockedForEmailAddress:(id)arg1;
- (_Bool)isIncomingCommunicationBlockedForPhoneNumber:(id)arg1;
- (void)removeRule:(id)arg1;
- (void)addRule:(id)arg1;
- (void)setBlockIncomingCommunication:(_Bool)arg1 forEmailAddress:(id)arg2;
- (void)setBlockIncomingCommunication:(_Bool)arg1 forPhoneNumber:(id)arg2;
- (void)_handleBlockListChanged:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface TUPrivacyRule : NSObject <NSCoding>
{
    int _type;
    TUPhoneNumber *_phoneNumber;
    NSString *_email;
}

+ (id)ruleForEmail:(id)arg1;
+ (id)ruleForPhoneNumber:(id)arg1;
@property(readonly, nonatomic) NSString *email; // @synthesize email=_email;
@property(readonly, nonatomic) TUPhoneNumber *phoneNumber; // @synthesize phoneNumber=_phoneNumber;
@property(readonly, nonatomic) int type; // @synthesize type=_type;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initForEmail:(id)arg1;
- (id)initForPhoneNumber:(id)arg1;

@end

@interface TUProxyCall : TUCall <NSSecureCoding>
{
    _Bool _conferenced;
    _Bool _outgoing;
    _Bool _voicemail;
    int _status;
    int _callIdentifier;
    int _service;
    double _startTime;
    NSString *_destinationID;
    NSString *_conferenceIdentifier;
    NSString *_callerNameFromNetwork;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *callerNameFromNetwork; // @synthesize callerNameFromNetwork=_callerNameFromNetwork;
@property(nonatomic, getter=isVoicemail) _Bool voicemail; // @synthesize voicemail=_voicemail;
@property(retain, nonatomic) NSString *conferenceIdentifier; // @synthesize conferenceIdentifier=_conferenceIdentifier;
@property(nonatomic, getter=isOutgoing) _Bool outgoing; // @synthesize outgoing=_outgoing;
@property(nonatomic) int service; // @synthesize service=_service;
@property(copy, nonatomic) NSString *destinationID; // @synthesize destinationID=_destinationID;
@property(nonatomic) int callIdentifier; // @synthesize callIdentifier=_callIdentifier;
@property(nonatomic, getter=isConferenced) _Bool conferenced; // @synthesize conferenced=_conferenced;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) int status; // @synthesize status=_status;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)supportsRelayingAudioOrVideo;
- (_Bool)supportsRelayingCallState;
- (_Bool)setDownlinkMuted:(_Bool)arg1;
- (_Bool)isDownlinkMuted;
- (_Bool)setUplinkMuted:(_Bool)arg1;
- (_Bool)isUplinkMuted;
- (id)audioMode;
- (id)audioCategory;
- (id)remoteFrequency;
- (id)localFrequency;
- (_Bool)isHostedOnCurrentDevice;
- (double)callDuration;
- (void)answerWithSourceIdentifier:(id)arg1;
- (void)playDTMFToneForKey:(unsigned char)arg1;
- (void)disconnect;
- (void)unhold;
- (void)hold;
- (_Bool)managesAudioInterruptions;
- (void)leaveConference;
- (void)joinConference;
- (id)callUUID;
- (int)supportedModelType;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (void)updateWithCall:(id)arg1;
- (id)initWithCall:(id)arg1;
- (id)initWithDestinationID:(id)arg1 service:(int)arg2 status:(int)arg3 sourceIdentifier:(id)arg4 outgoing:(_Bool)arg5 conferenceIdentifier:(id)arg6 voicemail:(_Bool)arg7 callerNameFromNetwork:(id)arg8;

// Remaining properties
@property(copy, nonatomic) NSString *displayName;

@end

@interface TUProxyCallModel : TUCallModel
{
    _Bool _swappable;
    _Bool _mergeable;
    _Bool _holdAllowed;
    _Bool _addCallAllowed;
    _Bool _takingCallsPrivateAllowed;
    _Bool _hardPauseAvailable;
    _Bool _endAndAnswerAllowed;
    _Bool _holdAndAnswerAllowed;
    _Bool _sendToVoicemailAllowed;
    int _ambiguityState;
}

+ (id)sharedInstance;
@property(nonatomic, getter=isSendToVoicemailAllowed) _Bool sendToVoicemailAllowed; // @synthesize sendToVoicemailAllowed=_sendToVoicemailAllowed;
@property(nonatomic, getter=isHoldAndAnswerAllowed) _Bool holdAndAnswerAllowed; // @synthesize holdAndAnswerAllowed=_holdAndAnswerAllowed;
@property(nonatomic, getter=isEndAndAnswerAllowed) _Bool endAndAnswerAllowed; // @synthesize endAndAnswerAllowed=_endAndAnswerAllowed;
@property(nonatomic, getter=isHardPauseAvailable) _Bool hardPauseAvailable; // @synthesize hardPauseAvailable=_hardPauseAvailable;
@property(nonatomic, getter=isTakingCallsPrivateAllowed) _Bool takingCallsPrivateAllowed; // @synthesize takingCallsPrivateAllowed=_takingCallsPrivateAllowed;
@property(nonatomic, getter=isAddCallAllowed) _Bool addCallAllowed; // @synthesize addCallAllowed=_addCallAllowed;
@property(nonatomic, getter=isHoldAllowed) _Bool holdAllowed; // @synthesize holdAllowed=_holdAllowed;
@property(nonatomic, getter=isMergeable) _Bool mergeable; // @synthesize mergeable=_mergeable;
@property(nonatomic, getter=isSwappable) _Bool swappable; // @synthesize swappable=_swappable;
@property(nonatomic) int ambiguityState; // @synthesize ambiguityState=_ambiguityState;
- (void)updateWithCallModelState:(id)arg1;

@end

@interface TUReplyWithMessageStore : NSObject
{
}

- (void)_handleMessagesStoreChanged;
- (void)setCustomReply:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)cannedRepliesForSending;
- (id)cannedReplyActionSheetOptions;
- (id)cannedReplies;
- (id)_cannedRepliesForSending:(_Bool)arg1;
- (id)customReplies;
- (id)defaultReplies;
- (id)_defaultRepliesForSending:(_Bool)arg1;
- (int)count;
- (void)dealloc;
- (id)init;

@end

@interface TUTelephonyCall : TUCall
{
    struct __CTCall *_call;
}

+ (void)stopPlayingDTMFTone;
+ (void)playDTMFToneForKey:(unsigned char)arg1;
+ (int)callStatusForCTCallStatusType:(int)arg1;
- (void)playDTMFToneForKey:(unsigned char)arg1;
- (_Bool)isTTY;
- (_Bool)managesAudioInterruptions;
- (_Bool)setDownlinkMuted:(_Bool)arg1;
- (_Bool)isDownlinkMuted;
- (_Bool)setUplinkMuted:(_Bool)arg1;
- (_Bool)isUplinkMuted;
- (id)audioMode;
- (id)audioCategory;
- (int)callStatus;
- (double)callDuration;
- (_Bool)isEqual:(id)arg1;
- (int)causeCode;
- (id)callUUID;
- (int)callIdentifier;
- (struct __CTCall *)call;
- (_Bool)isVoicemail;
- (_Bool)isAlerting;
- (_Bool)isEmergencyCall;
- (id)callerNameFromNetwork;
- (id)destinationID;
- (void)leaveConference;
- (void)joinConference;
- (_Bool)isConferenced;
- (_Bool)hasSupport:(int)arg1;
- (double)startTime;
- (_Bool)allowsTTYSettingChanges;
- (_Bool)isWiFiCall;
- (_Bool)isBlocked;
- (_Bool)isOutgoing;
- (int)supportedModelType;
- (int)service;
- (void)disconnect;
- (void)unhold;
- (void)hold;
- (void)answerWithSourceIdentifier:(id)arg1;
- (void)emergencyCallStatusChangedNotification:(id)arg1;
- (void)_refreshFaceTimeIDSStatus;
- (void)dealloc;
- (id)initWithCall:(struct __CTCall *)arg1;

@end

@interface TUTelephonyCallModel : TUCallModel
{
    NSDictionary *_callManagementState;
    NSObject<OS_dispatch_semaphore> *_callManagementStateSemaphore;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *callManagementStateSemaphore; // @synthesize callManagementStateSemaphore=_callManagementStateSemaphore;
@property(retain, nonatomic) NSDictionary *callManagementState; // @synthesize callManagementState=_callManagementState;
- (void)_invalidateCachedState;
- (void)_invalidateNetworkCanTakeCallsPrivateCache;
@property(readonly, nonatomic, getter=isWiFiCallingCurrentlyAvailable) _Bool wiFiCallingCurrentlyAvailable;
- (_Bool)isSendToVoicemailAllowed;
- (_Bool)isHoldAndAnswerAllowed;
- (_Bool)isEndAndAnswerAllowed;
- (_Bool)isHardPauseAvailable;
- (_Bool)isTakingCallsPrivateAllowed;
- (_Bool)_networkCanTakeCallsPrivate;
- (_Bool)_isAmbiguousCallList;
- (_Bool)_isAmbiguousMultiPartyCall;
- (int)ambiguityState;
- (_Bool)isAddCallAllowed;
- (_Bool)isHoldAllowed;
- (_Bool)isMergeable;
- (_Bool)isSwappable;
- (_Bool)_booleanValueForKey:(struct __CFString *)arg1;
- (_Bool)_valueExistsForKey:(struct __CFString *)arg1;
- (void)dealloc;
- (id)init;

@end

