//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice
// UUID: 8C26603B-33A8-307F-9547-0CCE4C2F5A0C
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 55.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface FMDFMIPManager : NSObject
{
    NSXPCConnection *_xpcConnection;
    NSObject<OS_dispatch_queue> *_xpcConnectionCreationQueue;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *xpcConnectionCreationQueue; // @synthesize xpcConnectionCreationQueue=_xpcConnectionCreationQueue;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
- (void).cxx_destruct;
- (void)_checkCallingOSUser;
- (id)newErrorForCode:(int)arg1 message:(id)arg2;
- (void)setLowBatteryLocateEnabled:(_Bool)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)lowBatteryLocateEnabledWithCompletion:(CDUnknownBlockType)arg1;
- (void)initiateLostModeExitAuthWithCompletion:(CDUnknownBlockType)arg1;
- (void)didReceiveLostModeExitAuthToken:(id)arg1;
- (_Bool)needsLostModeExitAuth;
- (void)enableActivationLockWithCompletion:(CDUnknownBlockType)arg1;
- (void)isActivationLockedWithCompletion:(CDUnknownBlockType)arg1;
- (id)disableFMIPUsingToken:(id)arg1 inContext:(unsigned long long)arg2;
- (id)enableFMIPInContext:(unsigned long long)arg1;
- (void)didChangeFMIPAccountInfo:(id)arg1;
- (id)fmipAccount;
- (id)fmipDeviceId;
- (void)fmipStateWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)lockdownShouldDisableDevicePairing;
- (_Bool)lockdownShouldDisableDeviceRestore;
- (void)deviceActivationDidSucceed;
- (void)disableLostMode;
- (id)enableLostModeWithInfo:(id)arg1;
- (id)lostModeInfo;
- (_Bool)lostModeIsActive;
- (void)_destroyXPCConnection;
- (id)currentXPCConnection;
- (void)dealloc;
- (id)init;
- (_Bool)_quickFetchFMIPEnabledstate;

@end

@interface FMDLogger : NSObject
{
    _Bool _logLevelsMaxedOut;
    _Bool _logLocationIndicatorSent;
    _Bool _isInternalBuild;
}

+ (id)sharedInstance;
@property(nonatomic) _Bool isInternalBuild; // @synthesize isInternalBuild=_isInternalBuild;
@property(nonatomic) _Bool logLocationIndicatorSent; // @synthesize logLocationIndicatorSent=_logLocationIndicatorSent;
@property(nonatomic) _Bool logLevelsMaxedOut; // @synthesize logLevelsMaxedOut=_logLevelsMaxedOut;
- (void)maxOutLogging;
- (void)logAtLevel:(long long)arg1 facility:(id)arg2 filename:(const char *)arg3 lineNumber:(long long)arg4 function:(const char *)arg5 message:(id)arg6;
- (void)logSettingsDidChange;
- (id)init;

@end

@interface FMDLostModeInfo : NSObject <NSSecureCoding>
{
    _Bool _lostModeEnabled;
    NSString *_message;
    NSString *_phoneNumber;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool lostModeEnabled; // @synthesize lostModeEnabled=_lostModeEnabled;
@property(retain, nonatomic) NSString *phoneNumber; // @synthesize phoneNumber=_phoneNumber;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
- (void).cxx_destruct;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;

@end

@interface FMDPreferencesUtil : NSObject
{
}

+ (void)setObject:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (id)objectForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (id)objectForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setData:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (id)dataForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (id)dataForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setArray:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (id)arrayForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (id)arrayForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setDictionary:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (id)dictionaryForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (id)dictionaryForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setDate:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (id)dateForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (id)dateForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setString:(id)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (id)stringForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (id)stringForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setInteger:(long long)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (long long)integerForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (long long)integerForKey:(id)arg1 inDomain:(id)arg2;
+ (void)setBool:(_Bool)arg1 forKey:(id)arg2 inDomain:(id)arg3;
+ (_Bool)boolForKey:(id)arg1 inDomain:(id)arg2 user:(id)arg3;
+ (_Bool)boolForKey:(id)arg1 inDomain:(id)arg2;
+ (void)removeKey:(id)arg1 inDomain:(id)arg2;
+ (void)synchronizeDomain:(id)arg1 user:(id)arg2;
+ (void)synchronizeDomain:(id)arg1;

@end

@interface FMDSynchronizer : NSObject
{
    _Bool _timeoutOccurred;
    double _timeout;
    NSObject<OS_dispatch_semaphore> *_sem;
    NSString *_info;
}

@property(retain, nonatomic) NSString *info; // @synthesize info=_info;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *sem; // @synthesize sem=_sem;
@property(nonatomic) double timeout; // @synthesize timeout=_timeout;
@property(nonatomic) _Bool timeoutOccurred; // @synthesize timeoutOccurred=_timeoutOccurred;
- (void).cxx_destruct;
- (id)loggingID;
- (void)wait;
- (void)signal;
- (id)initWithDescription:(id)arg1 andTimeout:(double)arg2;

@end

@interface NSMutableDictionary (FMDAdditions)
- (void)safelyMapKey:(id)arg1 toObject:(id)arg2;
- (void)safelySetObject:(id)arg1 forKey:(id)arg2;
@end

