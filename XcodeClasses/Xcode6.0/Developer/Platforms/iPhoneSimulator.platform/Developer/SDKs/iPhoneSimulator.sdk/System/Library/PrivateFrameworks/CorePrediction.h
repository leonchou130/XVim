//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Named Structures

struct CPMLAlgorithm {
    CDUnknownFunctionPointerType *_field1;
    char _field2[32];
    struct CPMLCDB *_field3;
    struct CPMLTunableData *_field4;
    struct CPMLIterator *_field5;
    struct CPMLSerialization *_field6;
};

struct CPMLCDB {
    struct CPMLStatistics *_field1;
    struct sqlite3 *_field2;
    struct sqlite3 *_field3;
    struct CPMLIterator *_field4;
    struct CPMLRemapper *_field5;
    struct CPMLTunableData *_field6;
};

struct CPMLFeatureVector {
    int _field1;
    struct VectorClass _field2;
    struct vector<VectorClass, std::__1::allocator<VectorClass>> _field3;
    double _field4;
    struct vector<VectorClass, std::__1::allocator<VectorClass>> _field5;
    struct vector<ProbIndex, std::__1::allocator<ProbIndex>> _field6;
};

struct CPMLIterator;

struct CPMLRemapper {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    struct sqlite3 *_field4;
    struct CPMLStatistics *_field5;
    vector_e0f2bd7e *_field6;
    vector_e0f2bd7e *_field7;
};

struct CPMLSerialization {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    int _field3;
    int _field4;
    void *_field5;
    struct sqlite3 *_field6;
};

struct CPMLStatistics {
    vector_e0f2bd7e _field1;
    struct vector<double, std::__1::allocator<double>> _field2;
    vector_e0f2bd7e _field3;
    vector_e0f2bd7e _field4;
    vector_e0f2bd7e _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    _Bool _field10;
    struct vector<double, std::__1::allocator<double>> _field11;
    struct vector<double, std::__1::allocator<double>> _field12;
    struct vector<double, std::__1::allocator<double>> _field13;
    struct vector<double, std::__1::allocator<double>> _field14;
    struct vector<double, std::__1::allocator<double>> _field15;
    void *_field16;
};

struct CPMLTunableData {
    int _field1;
    void *_field2;
    void *_field3;
};

struct ProbIndex;

struct VectorClass {
    vector_e0f2bd7e *_field1;
    struct vector<double, std::__1::allocator<double>> *_field2;
};

struct sqlite3;

struct vector<ProbIndex, std::__1::allocator<ProbIndex>> {
    struct ProbIndex *_field1;
    struct ProbIndex *_field2;
    struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex>> {
        struct ProbIndex *_field1;
    } _field3;
};

struct vector<VectorClass, std::__1::allocator<VectorClass>> {
    struct VectorClass *_field1;
    struct VectorClass *_field2;
    struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass>> {
        struct VectorClass *_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<int, std::__1::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct vector<int, std::__1::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *__first_;
    } __end_cap_;
} vector_e0f2bd7e;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CorePrediction.framework/CorePrediction
// UUID: 5A59F544-7403-3953-8AB6-70C1D6C18F74
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 47.1.1.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@interface CPMLDB : NSObject
{
    unsigned long long *repFields;
    unsigned long long maxFieldCount;
    unsigned int commitCountMax;
    unsigned int currentCommitCount;
    unsigned int rowCount;
    double *cardinality;
    double *min;
    double *max;
    double *mean;
    double *sumOfX;
    double *sumOfXX;
    double *sigma;
    CPMLSchema *cpSchema;
    NSMutableArray *indexer;
    NSMutableDictionary *vectorListCardinality;
    NSMutableString *dbTableName;
    double currentTimeInterval;
    double minTimeToLogIndex;
    int _openCPMLDBOptions;
    NSDictionary *_cInfo;
    NSString *_trainingModelFileAndPath;
    NSString *_trainingFile;
    struct sqlite3 *db;
    NSString *_dbFileName;
}

+ (id)getConfigurationFromPlist:(id)arg1;
@property(readonly) NSString *dbFileName; // @synthesize dbFileName=_dbFileName;
@property(readonly, nonatomic) struct sqlite3 *db; // @synthesize db;
@property(readonly) CPMLSchema *cpSchema; // @synthesize cpSchema;
- (void).cxx_destruct;
- (_Bool)reset;
- (void)removeTrainingRowData:(double)arg1;
- (void)removeTrainingRow:(id)arg1;
- (id)extractRow:(id)arg1;
- (id)fileProtectionClassRequest:(id)arg1;
- (void)performanceTestDB;
- (id)addValues:(int)arg1;
- (void)printFormat:(id)arg1;
- (id)getRemapTable;
- (int)getYColumnPosition;
- (int)getVectorContent:(unsigned long long)arg1;
- (int)getSchemaType:(unsigned long long)arg1;
- (id)getColumnName:(unsigned long long)arg1;
- (void)indexTable:(id)arg1 withColumn:(id)arg2;
- (void)updateStatistics;
- (_Bool)loadStatisticTable;
- (void)saveStatistics;
- (void)initStatisticsTable;
- (double)updateStatisticsString:(id)arg1 colPosition:(unsigned long long)arg2;
- (void)updateStatisticsReal:(double)arg1 colPosition:(unsigned long long)arg2;
- (_Bool)isColumnContinousData:(unsigned int)arg1;
- (double)columnQueryFor:(unsigned int)arg1 withQuery:(id)arg2;
- (double)getMaxFor:(unsigned int)arg1;
- (double)getMinFor:(unsigned int)arg1;
- (double)getStdDevFor:(unsigned int)arg1;
- (double)getMeanFor:(unsigned int)arg1;
- (unsigned long long)getRowCount;
- (unsigned long long)getColumnCount;
- (void)updateCardinality:(id)arg1 withColPos:(int)arg2;
- (id)getRepresentation:(id)arg1 withColPos:(int)arg2;
- (unsigned long long)getCardinality:(unsigned int)arg1;
- (unsigned long long)getCombinedRemapTableCardinality:(unsigned int)arg1;
- (void)dropCommands:(id)arg1;
- (void)deleteAllRows:(id)arg1;
- (void)deleteRow:(id)arg1 whereMatch:(id)arg2;
- (void)updateTable:(id)arg1 withAttribute:(id)arg2 whereMatch:(id)arg3;
- (void)queryDatabase:(id)arg1 whereMatch:(id)arg2;
- (void)insertIntoTable:(id)arg1 withTuple:(id)arg2;
- (void)addColumnToTable:(id)arg1 withNewColumn:(id)arg2;
- (void)createTable:(id)arg1 withSchema:(id)arg2 withExistingTable:(_Bool)arg3;
- (void)execSQLCommand:(id)arg1;
- (_Bool)logBatchNSDictionary:(id)arg1;
- (_Bool)logNSDictionary:(id)arg1;
- (_Bool)logBatchNSArray:(id)arg1;
- (_Bool)logNSArray:(id)arg1;
- (_Bool)logNSObjectV:(id)arg1;
- (_Bool)logCTypesV:(void *)arg1;
- (id)prepQueryStatementForTable:(id)arg1;
- (id)prepInsertStatementForMainTable;
- (void)flushDB;
- (void)restart;
- (void)dealloc;
- (void)loadTables;
- (void)doInitializeWithDataFile:(id)arg1 dataFromFile:(id)arg2 withConfiguration:(id)arg3 withWriteOptions:(int)arg4;
- (id)initWithDBName:(id)arg1 dataFromFile:(id)arg2 withConfiguration:(id)arg3 withWriteOptions:(int)arg4;
- (id)initWithDBName:(id)arg1 dataFromFile:(id)arg2 withPlistPath:(id)arg3 withWriteOptions:(int)arg4;
- (void)doInitialize:(id)arg1 withConfiguration:(id)arg2 withWriteOptions:(int)arg3;
- (void)doInitCommon:(id)arg1 withDict:(id)arg2 withFileExists:(_Bool *)arg3 withWriteOptions:(int)arg4;
- (id)initWithDBName:(id)arg1 withConfiguration:(id)arg2 withWriteOptions:(int)arg3;
- (id)initWithDBName:(id)arg1 withPlistPath:(id)arg2 withWriteOptions:(int)arg3;
- (void)initMaxSizeStatistics:(unsigned long long)arg1;

@end

@interface CPMLEvalutionResult : NSObject
{
    NSObject *object;
    unsigned long long count;
}

- (void).cxx_destruct;
- (id)getListDict;
- (id)getList;
- (int)getInt;
- (double)getDouble;
- (id)getString;
- (id)init:(id)arg1 withConfigurationList:(id)arg2;

@end

@interface CPMLModel : NSObject
{
    NSString *_savedPlistPath;
    NSString *_modelPath;
    CPMLModelEvaluate *cpModelEvaluate;
}

@property(retain, nonatomic) CPMLModelEvaluate *cpModelEvaluate; // @synthesize cpModelEvaluate;
- (void).cxx_destruct;
- (_Bool)reset;
- (_Bool)updateModelWithCPDB:(id)arg1;
- (_Bool)updateModelWithDB:(id)arg1;
- (void)boundResult:(id)arg1;
- (id)evalDict:(id)arg1;
- (id)evalArray:(id)arg1;
- (id)evalNSObjectV:(id)arg1;
- (id)evalString:(id)arg1;
- (id)getPropertyList;
- (id)initWithModelPath:(id)arg1 withConfiguration:(id)arg2;
- (id)initWithModelPath:(id)arg1 withPropertyListPath:(id)arg2;

@end

@interface CPMLModelEvaluate : NSObject
{
    _Bool enableCacheString;
    _Bool keepInMemory;
    _Bool shouldFail;
    struct sqlite3 *db;
    int countRows;
    NSMutableArray *modelSchema;
    NSMutableArray *vectorPositions;
    NSNumber *maxRemoveTrainingRow;
    NSString *serializeFunction;
    NSString *machineLearningAlgo;
    struct CPMLAlgorithm *cpMLAlgo;
    struct CPMLSerialization *trainerCPDeSerializer;
    struct CPMLRemapper *cpRemapper;
    CPMLSchema *cpmlSchema;
    struct CPMLStatistics *trainerCPStatistics;
    struct CPMLTunableData *cpTuneableData;
    int mapFunction;
    vector_e0f2bd7e boundedRemappedValues;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)updateModel:(id)arg1;
- (void)boundResult:(id)arg1;
- (void)buildEvaluateMachineLearningAlgorithm;
- (id)doEvaluate:(struct CPMLFeatureVector *)arg1 withBoundedList:(vector_e0f2bd7e *)arg2;
- (void)doRemapToFeatureVector:(struct CPMLFeatureVector *)arg1 withPositionID:(unsigned long long)arg2 withMaxCol:(unsigned long long)arg3 withValue:(id)arg4;
- (id)evalDict:(id)arg1;
- (id)evalArray:(id)arg1;
- (id)evalNSObjectV:(id)arg1;
- (id)evalString:(id)arg1;
- (id)evalCTypesV:(char *)arg1;
- (void)constructVector:(struct CPMLFeatureVector *)arg1 withColumnPosition:(unsigned long long)arg2 maxColNumber:(unsigned long long)arg3 withValue:(id)arg4;
- (int)getAttributeType:(id)arg1;
- (id)fileProtectionClassRequest:(id)arg1;
- (void)dealloc;
- (id)initWithModel:(id)arg1 withPropertyList:(id)arg2;

@end

@interface CPMLSchema : NSObject
{
    int yColumnPosition;
    NSMutableString *schemaHeader;
    NSMutableString *schemaHeaderWithType;
    NSMutableArray *attribute;
    NSMutableArray *schemaHDef;
    NSMutableArray *indexColumnList;
    NSMutableArray *nsRemapTable;
    NSMutableArray *schema;
    NSMutableArray *availableOptions;
}

@property(readonly, nonatomic) NSMutableArray *availableOptions; // @synthesize availableOptions;
@property(readonly, nonatomic) NSMutableArray *nsRemapTable; // @synthesize nsRemapTable;
@property(readonly, nonatomic) NSMutableString *schemaHeaderWithType; // @synthesize schemaHeaderWithType;
@property(readonly, nonatomic) NSMutableString *schemaHeader; // @synthesize schemaHeader;
@property(readonly, nonatomic) NSMutableArray *indexColumnList; // @synthesize indexColumnList;
@property(readonly, nonatomic) NSMutableArray *attribute; // @synthesize attribute;
- (void).cxx_destruct;
- (_Bool)hasOptions:(unsigned long long)arg1;
- (int)getYColumnPosition;
- (int)getVectorContent:(unsigned long long)arg1;
- (int)getSchemaType:(unsigned long long)arg1;
- (id)getColumnName:(unsigned long long)arg1;
- (int)getColumnPosition:(id)arg1;
- (_Bool)isColumnContinous:(unsigned int)arg1;
- (_Bool)isVectorType:(unsigned long long)arg1;
- (_Bool)isStringType:(unsigned long long)arg1;
- (_Bool)isRealType:(unsigned long long)arg1;
- (_Bool)isIntType:(unsigned long long)arg1;
- (_Bool)isNumType:(unsigned long long)arg1;
- (unsigned long long)getTotalAttributes;
- (id)initWithPlist:(id)arg1;
- (id)init:(id)arg1;

@end

@interface CPMLTrainer : NSObject
{
    _Bool shouldFail;
    struct sqlite3 *db;
    struct sqlite3 *modelDB;
    NSDictionary *modelPlist;
    CPMLDB *cpmlDB;
    struct CPMLCDB *cpCDB;
    struct CPMLAlgorithm *cpMLAlgo;
    CPMLSchema *cpmlSchema;
    struct CPMLStatistics *trainerCPStatistics;
    struct CPMLSerialization *trainerCPSerializer;
    struct CPMLTunableData *cpTuneableData;
    int mapFunction;
}

- (void).cxx_destruct;
- (void)buildTrainingMachineLearningAlgorithm:(id)arg1;
- (void)train:(_Bool)arg1;
- (id)fileProtectionClassRequest:(id)arg1;
- (void)dealloc;
- (id)init:(id)arg1 withModelDBPath:(id)arg2 withPropertyList:(id)arg3;

@end

