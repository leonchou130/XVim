//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CalendarUIKit.framework/CalendarUIKit
// UUID: 7CDA2F26-E67A-3CA8-84D2-EFF3600A8069
//
//                           Arch: x86_64
//                Current version: 61.1.0
//          Compatibility version: 1.0.0
//                 Source version: 61.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@interface CUIKAttendeeDescriptionGenerator : NSObject
{
}

+ (id)displayNameForParticipant:(id)arg1 event:(id)arg2 options:(unsigned long long)arg3;

@end

@interface CUIKAttendeeHeuristics : NSObject
{
}

+ (id)_participantRoleSortPriority;
+ (id)_participantStatusSortPriority;
+ (id)sortedHumanAttendeesForEvent:(id)arg1 includeResources:(_Bool)arg2;
+ (id)sortedHumanAttendeesToDisplayForEvent:(id)arg1 options:(unsigned long long)arg2;

@end

@interface CUIKDateStrings : NSObject
{
}

+ (id)overlayYearStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)_zodiacSymbolForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)overlayMediumStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)overlayShortStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)_overlayDayNumberStringForDate:(id)arg1 day:(long long)arg2 inCalendar:(id)arg3;
+ (id)overlayCalendarPickerDisplayNameForCalendarWithIdentifier:(id)arg1;
+ (id)overlayFirstDayOfLunarMonthLocalizedStringInCalendar:(id)arg1;
+ (_Bool)supportsOverlayCalendarWithIdentifier:(id)arg1;
+ (id)overlayLocalizedStringForKey:(id)arg1 calendar:(id)arg2;
+ (id)_pathToStringsFileForCalendar:(id)arg1;
+ (id)_languageIDfromLocalID:(id)arg1;
+ (id)_significantLocaleComponents:(id)arg1;
+ (unsigned long long)_overlayCalendarTypeForCalendarIdentifier:(id)arg1;
+ (id)monthDayStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)monthStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)yearMonthDayStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)yearMonthStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)yearStringForDate:(id)arg1 inCalendar:(id)arg2;
+ (id)cachedDateFormatterForDateStyle:(unsigned long long)arg1 timeStyle:(unsigned long long)arg2 calendar:(id)arg3;
+ (id)cachedDateFormatterForTemplate:(id)arg1 calendar:(id)arg2;
+ (id)cachedDateFormatterForFormat:(id)arg1 calendar:(id)arg2;
+ (id)_cachedDateFormatterForDomain:(id)arg1 calendar:(id)arg2 formatterKey:(id)arg3 creationBlock:(CDUnknownBlockType)arg4;
+ (id)_newDateFormatterForTemplate:(id)arg1 calendar:(id)arg2;
+ (id)_newDateFormatterForFormat:(id)arg1 calendar:(id)arg2;
+ (id)_newDateFormatterForDateStyle:(unsigned long long)arg1 timeStyle:(unsigned long long)arg2 calendar:(id)arg3;

@end

@interface CUIKEventDescriptionGenerator : NSObject
{
    NSDateFormatter *_dateFormatter;
    NSNumberFormatter *_numberFormatter;
    NSDataDetector *_addressDetector;
}

- (void).cxx_destruct;
- (void)meCardChanged:(id)arg1;
- (id)_randomNumberBetween1And3;
- (id)_addressDetector;
- (id)_locationStringForEvent:(id)arg1;
- (_Bool)_startTimeRequiresSingularForEvent:(id)arg1 withTimeString:(id)arg2;
- (id)_timeStringForEvent:(id)arg1 forBeginningOfSentence:(_Bool)arg2 useExplicitTimes:(_Bool)arg3 followingComma:(_Bool)arg4;
- (_Bool)_eventIsAlreadyLate:(id)arg1;
- (id)_adjustedMinutesTillEventStarts:(id)arg1;
- (_Bool)_doesEventStartEarly:(id)arg1;
- (id)_noonDateForEvents:(id)arg1;
- (_Bool)_arrayHasAfternoonEvents:(id)arg1;
- (_Bool)_arrayHasMorningEvents:(id)arg1;
- (_Bool)_prepareToUseMessageWithID:(id)arg1 shouldAllowWeekendUsage:(_Bool)arg2;
- (_Bool)_prependEarlyStartMessageToEventSummaryIfPossible:(id)arg1;
- (_Bool)_appendFreeAfternoonMessageToEventSummaryIfPossible:(id)arg1;
- (_Bool)_prependFreeMorningMessageToEventSummaryIfPossible:(id)arg1;
- (_Bool)_prependBusyDayMessageToEventSummaryIfPossible:(id)arg1;
- (id)tomorrowSnippetForUpcomingEvents:(id)arg1 withTodayEvents:(id)arg2;
- (id)_naturalLanguageDescriptionForEvent:(id)arg1 isFirstInDay:(_Bool)arg2;
- (id)naturalLanguageDescriptionForUpcomingEvents:(id)arg1 firstInDay:(_Bool)arg2;
- (id)naturalLanguageDescriptionForBirthdayEvents:(id)arg1;
- (void)dealloc;
- (id)_sharedNumberFormatter;
- (id)_sharedDateFormatter;
- (id)init;

@end

@interface CUIKEventHeuristics : NSObject
{
}

+ (_Bool)_shouldFilterEvent:(id)arg1 filterOptions:(unsigned long long)arg2;
+ (id)_sortedEvents:(id)arg1 withMethod:(unsigned long long)arg2;
+ (id)_sortedAndFilteredEventsForPredicate:(id)arg1 filterOptions:(unsigned long long)arg2 sortMethod:(unsigned long long)arg3 eventStore:(id)arg4;
+ (id)upcomingEventsInCalendars:(id)arg1 onlyReturnFirstEvents:(_Bool)arg2 filterOptions:(unsigned long long)arg3 sortMethod:(unsigned long long)arg4 eventStore:(id)arg5;
+ (id)tomorrowsEventsInCalendars:(id)arg1 filterOptions:(unsigned long long)arg2 sortMethod:(unsigned long long)arg3 eventStore:(id)arg4;
+ (id)todaysEventsInCalendars:(id)arg1 filterOptions:(unsigned long long)arg2 sortMethod:(unsigned long long)arg3 eventStore:(id)arg4;

@end

@interface CUIKRecurrenceRuleDescriptionGenerator : NSObject
{
}

+ (long long)daysTypeForDayArray:(id)arg1;
+ (id)_customDayCombinationDescription:(id)arg1;
+ (id)_orDaysOfWeekString:(id)arg1;
+ (id)_weekDayPositionAsString:(long long)arg1;
+ (id)_dayOfMonthAsString:(long long)arg1;
+ (id)_daysOfWeek;
+ (id)_numberedWeekDayString:(id)arg1;
+ (id)_andDaysOfWeekString:(id)arg1;
- (id)naturalLanguageDescriptionForRecurrenceRule:(id)arg1 withStartDate:(id)arg2;

@end

@interface CUIKSingleDayTimelineLayout : NSObject
{
    NSArray *_occurrences;
    unsigned long long _currentOccurrenceIndex;
    id <CUIKSingleDayTimelineViewItem> _currentOccurrence;
    NSMutableArray *_partitions;
    NSMutableArray *_occurrenceBuckets;
    NSMutableArray *_collidingOccurrences;
    NSDate *_startOfDay;
    NSDate *_endOfDay;
    double _startOfDayAbsoluteTime;
    double _endOfDayAbsoluteTime;
    struct CGRect _frame;
    NSCalendar *_calendar;
    id <CUIKSingleDayTimelineGeometryDelegate> _geometryDelegate;
    id <CUIKSingleDayTimelineLayoutScreenUtils> _screenUtilsDelegate;
}

- (void).cxx_destruct;
- (struct CGRect)_rectForStartSeconds:(long long)arg1 endSeconds:(long long)arg2;
- (double)_combinedWidthOfPartitions;
- (double)_effectiveEndTimeForOccurrence:(id)arg1;
- (double)_adjustedEndTimeForOccurrence:(id)arg1;
- (double)_adjustedStartTimeForOccurrence:(id)arg1;
- (void)_capVisibleTextForBucket:(id)arg1;
- (_Bool)_inputIsInvalid;
- (void)_initializeFirstGridStripe;
- (void)_stampOccurrenceFrames;
- (void)_reclaimSpaceFromStackedOccurrences;
- (void)_putCollidingOccurrencesIntoBuckets;
- (void)_findCollidingOccurrences;
- (double)_topOfOccurrence:(id)arg1;
- (void)_mergePartitions;
- (void)_generateNewPartitions;
- (void)_popOccurrencesInPartition:(id)arg1 endingBeforeTime:(double)arg2;
- (void)_calculateVerticalFrameAspectsForOccurrence:(id)arg1;
- (void)applyLayoutToOccurrences;
- (id)initWithOccurrences:(id)arg1 startOfDay:(id)arg2 endOfDay:(id)arg3 geometryDelegate:(id)arg4 screenUtilsDelegate:(id)arg5 calendar:(id)arg6;

@end

@interface CUIKSingleDayTimelineLayoutPartition : NSObject
{
    NSMutableArray *_stackOfOccurrences;
    double _topBoundaryTime;
    double _initialLeftBoundary;
    double _rightBoundary;
}

@property(nonatomic) double rightBoundary; // @synthesize rightBoundary=_rightBoundary;
@property(nonatomic) double initialLeftBoundary; // @synthesize initialLeftBoundary=_initialLeftBoundary;
@property(nonatomic) double topBoundaryTime; // @synthesize topBoundaryTime=_topBoundaryTime;
- (void).cxx_destruct;
@property(readonly, nonatomic) double freeSpaceWidth;
@property(readonly, nonatomic) double freeSpaceLeftBoundary;
- (void)popOccurrence;
- (void)pushOccurrence:(id)arg1;
- (id)peekOccurrence;
@property(readonly, nonatomic) NSArray *stackedOccurrences;
- (id)description;
- (id)init;

@end

@interface CUIKSingleDayTimelineOccurrenceBucket : NSObject
{
    id <CUIKSingleDayTimelineViewItem> _temporaryOccurrenceAtBeginning;
    id <CUIKSingleDayTimelineViewItem> _temporaryOccurrenceAtEnd;
    id <CUIKSingleDayTimelineLayoutScreenUtils> _screenUtilsDelegate;
    _Bool _useTemporaryFitnessLevel;
    _Bool _temporaryFitnessLevelRequiresCalculation;
    double _temporaryFitnessLevel;
    _Bool _originalFitnessLevelRequiresCalculation;
    double _originalFitnessLevel;
    _Bool _ignoreFirstOccurrenceInFitnessCalculations;
    _Bool _ignoreLastOccurrenceInFitnessCalculations;
    _Bool _isOnlyBucket;
    CUIKSingleDayTimelineLayoutPartition *_correspondingPartition;
    NSMutableArray *_currentOccurrences;
}

@property(retain, nonatomic) NSMutableArray *currentOccurrences; // @synthesize currentOccurrences=_currentOccurrences;
@property(nonatomic) _Bool isOnlyBucket; // @synthesize isOnlyBucket=_isOnlyBucket;
@property(retain, nonatomic) CUIKSingleDayTimelineLayoutPartition *correspondingPartition; // @synthesize correspondingPartition=_correspondingPartition;
- (void).cxx_destruct;
- (void)stampFramesOntoOccurrences;
- (void)makeTemporaryChangesPermanent;
- (void)revertTemporaryChanges;
- (void)removeOccurrenceAtEndTemporarily;
- (void)removeOccurrenceAtBeginningTemporarily;
- (void)addOccurrenceTemporarilyToEnd:(id)arg1;
- (void)addOccurrenceTemporarilyToBeginning:(id)arg1;
- (id)earliestOccurrence;
- (id)_occurrencesForFitnessLevel;
@property(readonly, nonatomic) NSArray *occurrences;
- (id)initWithOccurrences:(id)arg1 correspondingPartition:(id)arg2 screenUtilsDelegate:(id)arg3;

@end

@interface CUIKUserActivity : NSObject
{
    unsigned long long _type;
    unsigned long long _version;
}

+ (unsigned long long)_typeFromDictionary:(id)arg1;
+ (id)_stringFromDictionary:(id)arg1 key:(id)arg2 error:(_Bool *)arg3;
+ (double)_doubleFromDictionary:(id)arg1 key:(id)arg2 error:(_Bool *)arg3;
+ (unsigned long long)_unsignedIntegerFromDictionary:(id)arg1 key:(id)arg2 error:(_Bool *)arg3;
+ (long long)_integerFromDictionary:(id)arg1 key:(id)arg2 error:(_Bool *)arg3;
+ (id)activityForDictionary:(id)arg1;
@property(nonatomic) unsigned long long version; // @synthesize version=_version;
@property(nonatomic) unsigned long long type; // @synthesize type=_type;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithType:(unsigned long long)arg1;

@end

@interface CUIKUserActivityCalendarDate : CUIKUserActivity
{
    NSDate *_date;
    unsigned long long _view;
}

@property(readonly, nonatomic) unsigned long long view; // @synthesize view=_view;
@property(readonly, nonatomic) NSDate *date; // @synthesize date=_date;
- (void).cxx_destruct;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithDate:(id)arg1 view:(unsigned long long)arg2;

@end

@interface CUIKUserActivityWithSource : CUIKUserActivity
{
    int _sourceType;
    NSString *_sourceHost;
    NSString *_sourceOwner;
}

- (void).cxx_destruct;
- (_Bool)_isLocalSource;
- (_Bool)_supportsConsistentExternalIDAcrossDevices;
- (_Bool)_supportsConsistentExternalIDAcrossDevices:(int)arg1;
- (_Bool)_requiresHostAndOwner;
- (unsigned long long)isMatchForSource:(id)arg1;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithSource:(id)arg1 type:(unsigned long long)arg2;

@end

@interface CUIKUserActivityCalendarEvent : CUIKUserActivityWithSource
{
    NSString *_title;
    NSString *_externalID;
    NSDate *_date;
    unsigned long long _view;
}

@property(readonly, nonatomic) unsigned long long view; // @synthesize view=_view;
@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (id)eventFromStore:(id)arg1;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithEvent:(id)arg1 view:(unsigned long long)arg2;
- (id)initWithEvent:(id)arg1 view:(unsigned long long)arg2 forceLocal:(_Bool)arg3;

@end

@interface CUIKUserActivityRemindersListCategory : CUIKUserActivityWithSource
{
    NSString *_title;
    NSString *_externalID;
}

- (void).cxx_destruct;
- (id)remindersListFromStore:(id)arg1;
- (_Bool)_isMatchForRemindersList:(id)arg1;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithRemindersList:(id)arg1;
- (id)initWithRemindersList:(id)arg1 forceLocal:(_Bool)arg2;

@end

@interface CUIKUserActivityRemindersListDate : CUIKUserActivity
{
    NSDate *_date;
}

@property(readonly, nonatomic) NSDate *date; // @synthesize date=_date;
- (void).cxx_destruct;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithDate:(id)arg1;

@end

@interface CUIKUserActivityRemindersListScheduled : CUIKUserActivity
{
}

- (id)init;

@end

@interface CUIKUserActivityRemindersListSharedInvitation : CUIKUserActivityWithSource
{
    NSString *_title;
}

@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (_Bool)_isMatchForSource:(id)arg1 andTitle:(id)arg2;
- (id)dictionary;
- (id)initWithDictionary:(id)arg1;
- (id)initWithSource:(id)arg1 title:(id)arg2;

@end

