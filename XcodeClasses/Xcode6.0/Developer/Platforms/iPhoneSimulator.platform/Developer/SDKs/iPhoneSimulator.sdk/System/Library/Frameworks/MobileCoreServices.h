//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct LSContext {
    struct LSDatabase *_field1;
};

struct LSDatabase;

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices
// UUID: 38C9AC01-C2B3-3D77-A14D-F425F9877FC7
//
//                           Arch: x86_64
//                Current version: 66.0.0
//          Compatibility version: 1.0.0
//                 Source version: 66.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol LSApplicationWorkspaceObserverProtocol <NSObject>

@optional
- (void)networkUsageChanged:(_Bool)arg1;
- (void)applicationInstallsDidPrioritize:(NSArray *)arg1;
- (void)applicationInstallsDidCancel:(NSArray *)arg1;
- (void)applicationInstallsDidResume:(NSArray *)arg1;
- (void)applicationInstallsDidPause:(NSArray *)arg1;
- (void)applicationInstallsArePrioritized:(NSArray *)arg1 arePaused:(NSArray *)arg2;
- (void)applicationsDidFailToUninstall:(NSArray *)arg1;
- (void)pluginsDidUninstall:(NSArray *)arg1;
- (void)applicationsDidUninstall:(NSArray *)arg1;
- (void)pluginsWillUninstall:(NSArray *)arg1;
- (void)applicationsWillUninstall:(NSArray *)arg1;
- (void)applicationsDidFailToInstall:(NSArray *)arg1;
- (void)pluginsDidInstall:(NSArray *)arg1;
- (void)applicationsDidInstall:(NSArray *)arg1;
- (void)applicationsWillInstall:(NSArray *)arg1;
- (void)applicationInstallsDidUpdateIcon:(NSArray *)arg1;
- (void)applicationInstallsDidChange:(NSArray *)arg1;
- (void)applicationInstallsDidStart:(NSArray *)arg1;
@end

@protocol LSBestAppSuggestionManagerProtocol <NSObject>
- (void)doLaunchFollowUp:(NSUUID *)arg1 interactionType:(unsigned long long)arg2 cancelled:(_Bool)arg3;
- (void)doQueueFetchOfPayloadForBestAppSuggestion:(NSUUID *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)doUnregisterForBestAppChangeNotification;
- (void)doRegisterForBestAppChangeNotification;
- (void)doRemoveBestAppSuggestion:(NSUUID *)arg1 options:(NSDictionary *)arg2;
- (void)doDetermineBestAppSuggestions:(long long)arg1 completionHandler:(void (^)(NSArray *, NSError *))arg2;
- (void)doDetermineBestAppSuggestionWithCompletionHandler:(void (^)(NSUUID *, unsigned long long, NSString *, NSString *, NSDate *, double, NSString *, NSString *, NSString *))arg1;
- (void)doStartBestAppSuggestion:(double)arg1;
- (void)doConnected;
@end

@protocol LSBestAppSuggestionManagerResponseProtocol <NSObject>

@optional
- (void)notifyBestAppChanged:(NSUUID *)arg1 type:(unsigned long long)arg2 options:(NSDictionary *)arg3 bundleIdentifier:(NSString *)arg4 activityType:(NSString *)arg5 when:(NSDate *)arg6 confidence:(double)arg7 deviceName:(NSString *)arg8 deviceIdentifier:(NSString *)arg9 deviceType:(NSString *)arg10;
@end

@protocol LSInstallProgressProtocol <NSObject>
- (void)endObservingConnection;
- (void)beginObservingConnection;
- (void)sendFailedNotificationForApp:(LSApplicationProxy *)arg1 isUninstall:(_Bool)arg2;
- (void)sendWillUninstallNotificationForApps:(LSApplicationProxy *)arg1 Plugins:(NSArray *)arg2 isUpdate:(_Bool)arg3;
- (void)sendUninstalledNotificationForApp:(LSApplicationProxy *)arg1 reply:(void (^)(_Bool))arg2;
- (void)sendUninstalledNotificationForApps:(NSArray *)arg1;
- (void)sendInstalledNotificationForApp:(LSApplicationProxy *)arg1 reply:(void (^)(_Bool))arg2;
- (void)sendInstalledNotificationForApps:(NSArray *)arg1;
- (void)sendChangeNotificationForApp:(LSApplicationProxy *)arg1;
- (void)sendIconUpdatedNotificationForApp:(LSApplicationProxy *)arg1;
- (void)placeholderInstalledForApp:(LSApplicationProxy *)arg1;
- (void)installationFailedForApplication:(NSString *)arg1 reply:(void (^)(_Bool))arg2;
- (void)installationEndedForApplication:(NSString *)arg1;
- (void)createInstallProgressForApplication:(LSApplicationProxy *)arg1 withPhase:(unsigned long long)arg2 andPublishingString:(NSString *)arg3;
- (void)removeObserverWithUUID:(NSUUID *)arg1;
- (void)addObserver:(LSApplicationWorkspaceObserver *)arg1 withUUID:(NSUUID *)arg2;
@end

@protocol LSResumableActivitiesAdministrativeProtocol <NSObject>
- (void)doWillSaveDelegate:(NSUUID *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)doInjectBTLE:(NSUUID *)arg1 type:(unsigned long long)arg2 identifier:(NSString *)arg3 title:(NSString *)arg4 activityPayload:(NSData *)arg5 frameworkPayload:(NSData *)arg6 payloadDelay:(double)arg7;
- (void)doGetCurrentAdvertisedItemUUID:(void (^)(NSUUID *))arg1;
- (void)doTerminateServer;
- (void)doCopyStatusString:(NSDictionary *)arg1 completionHandler:(void (^)(NSString *))arg2;
- (void)doCopyEnabledUUIDsWithCompletionHandler:(void (^)(NSArray *))arg1;
- (void)doCopyAllUUIDsOfType:(unsigned long long)arg1 withCompletionHandler:(void (^)(NSArray *))arg2;
- (void)doCopyAdvertisedUUIDWithCompletionHandler:(void (^)(NSUUID *))arg1;
- (void)doFindMatchingUserActivityForString:(NSString *)arg1 withCompletionHandler:(void (^)(NSUUID *))arg2;
- (void)doNOP:(NSString *)arg1 withCompletionHandler:(void (^)(NSString *, NSError *))arg2;
@end

@protocol LSUserActivityClientProtocol <NSObject>
- (void)doMarkUserActivityAsDirty:(NSUUID *)arg1 forceImmediate:(_Bool)arg2;
- (void)doDeleteUserActivityWithUUID:(NSUUID *)arg1;
- (void)doUpdateUserActivityWithUUID:(NSUUID *)arg1 setActive:(_Bool)arg2;
- (void)doUpdateUserActivityInfo:(LSUserActivityInfo *)arg1 makeCurrent:(_Bool)arg2 completionHandler:(void (^)(NSError *))arg3;
- (void)doFetchUserActivityInfoWithUUID:(NSUUID *)arg1 completionHandler:(void (^)(LSUserActivityInfo *, NSError *))arg2;
- (void)doRegisterUserActivityInfo:(LSUserActivityInfo *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)doInitializeWithClientVersion:(long long)arg1 clientInfo:(NSDictionary *)arg2 completionHandler:(void (^)(long long, NSDictionary *, NSError *))arg3;
@end

@protocol LSUserActivityClientResponseProtocol <NSObject>
- (void)tellClientUserActivityItWasResumed:(NSUUID *)arg1;
- (void)askClientUserActivityToSave:(NSUUID *)arg1 completionHandler:(void (^)(LSUserActivityInfo *, NSError *))arg2;
- (void)askClientUserActivityToSave:(NSUUID *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol SFCompanionAdvertiserDelegate <NSObject>

@optional
- (void)advertiser:(SFCompanionAdvertiser *)arg1 didReceiveInputStream:(NSInputStream *)arg2 outputStream:(NSOutputStream *)arg3;
@end

@interface LSResourceProxy : NSObject
{
    NSString *_localizedName;
    NSString *_boundApplicationIdentifier;
    NSURL *_boundContainerURL;
    NSURL *_boundDataContainerURL;
    NSURL *_boundResourcesDirURL;
    NSDictionary *_boundIconsDictionary;
    NSString *_boundIconCacheKey;
    NSArray *_boundIconFileNames;
    LSApplicationProxy *_typeOwner;
    _Bool _boundIconIsPrerendered;
    _Bool _boundIconIsBadge;
}

@property(readonly, nonatomic) NSString *localizedName; // @synthesize localizedName=_localizedName;
- (id)iconStyleDomain;
- (id)iconDataForVariant:(int)arg1;
- (id)iconDataForStyle:(id)arg1 width:(long long)arg2 height:(long long)arg3 options:(unsigned long long)arg4;
- (void)setBoundIconIsBadge:(_Bool)arg1;
@property(readonly, nonatomic) _Bool boundIconIsBadge;
- (void)setBoundIconIsPrerendered:(_Bool)arg1;
- (_Bool)boundIconIsPrerendered;
- (void)setTypeOwner:(id)arg1;
- (id)typeOwner;
- (void)setBoundIconFileNames:(id)arg1;
- (id)boundIconFileNames;
- (void)setBoundIconCacheKey:(id)arg1;
- (id)boundIconCacheKey;
- (void)setBoundIconsDictionary:(id)arg1;
@property(readonly, nonatomic) NSDictionary *iconsDictionary;
- (id)boundIconsDictionary;
- (void)setBoundResourcesDirectoryURL:(id)arg1;
- (id)boundResourcesDirectoryURL;
- (void)setBoundDataContainerURL:(id)arg1;
- (id)boundDataContainerURL;
- (void)setBoundContainerURL:(id)arg1;
- (id)boundContainerURL;
- (void)setBoundApplicationIdentifier:(id)arg1;
- (id)boundApplicationIdentifier;
- (void)setLocalizedName:(id)arg1;
- (void)dealloc;
- (id)_initWithLocalizedName:(id)arg1;
- (id)_initWithLocalizedName:(id)arg1 boundApplicationIdentifier:(id)arg2 boundContainerURL:(id)arg3 dataContainerURL:(id)arg4 boundResourcesDirectoryURL:(id)arg5 boundIconsDictionary:(id)arg6 boundIconCacheKey:(id)arg7 boundIconFileNames:(id)arg8 typeOwner:(id)arg9 boundIconIsPrerendered:(_Bool)arg10 boundIconIsBadge:(_Bool)arg11;

@end

@interface LSBundleProxy : LSResourceProxy
{
    unsigned long long _bundleFlags;
    unsigned long long _plistContentFlags;
    NSURL *_bundleURL;
    NSURL *_appStoreReceiptURL;
    NSString *_localizedShortName;
    NSString *_bundleExecutable;
    NSString *_bundleVersion;
    NSString *_bundleType;
    NSString *_signerIdentity;
    NSDictionary *_entitlements;
    NSDictionary *_environmentVariables;
    NSDictionary *_groupContainerURLs;
    NSUUID *_cacheGUID;
    NSArray *_machOUUIDs;
    _Bool _foundBackingBundle;
    unsigned long long _sequenceNumber;
}

+ (id)bundleProxyForURL:(id)arg1;
+ (id)bundleProxyForIdentifier:(id)arg1;
@property(readonly, nonatomic) _Bool foundBackingBundle; // @synthesize foundBackingBundle=_foundBackingBundle;
@property(readonly, nonatomic) NSString *bundleExecutable; // @synthesize bundleExecutable=_bundleExecutable;
@property(readonly, nonatomic) NSURL *bundleURL; // @synthesize bundleURL=_bundleURL;
@property(readonly, nonatomic) NSString *bundleType; // @synthesize bundleType=_bundleType;
@property(readonly, nonatomic) NSURL *appStoreReceiptURL; // @synthesize appStoreReceiptURL=_appStoreReceiptURL;
@property(readonly, nonatomic) NSArray *machOUUIDs; // @synthesize machOUUIDs=_machOUUIDs;
@property(readonly, nonatomic) unsigned long long sequenceNumber; // @synthesize sequenceNumber=_sequenceNumber;
@property(readonly, nonatomic) NSString *localizedShortName; // @synthesize localizedShortName=_localizedShortName;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) NSUUID *cacheGUID; // @synthesize cacheGUID=_cacheGUID;
@property(readonly, nonatomic) NSDictionary *groupContainerURLs; // @synthesize groupContainerURLs=_groupContainerURLs;
@property(readonly, nonatomic) NSDictionary *environmentVariables;
@property(readonly, nonatomic) NSDictionary *entitlements; // @synthesize entitlements=_environmentVariables;
@property(readonly, nonatomic) NSString *signerIdentity; // @synthesize signerIdentity=_signerIdentity;
@property(readonly, nonatomic) NSString *bundleVersion;
- (void)setLocalizedShortName:(id)arg1;
@property(readonly, nonatomic) NSURL *dataContainerURL;
@property(readonly, nonatomic) NSURL *bundleContainerURL;
@property(readonly, nonatomic) NSURL *containerURL;
@property(readonly, nonatomic) NSString *bundleIdentifier;
- (void)dealloc;
- (id)_initWithBundleUnit:(unsigned int)arg1 bundleType:(unsigned long long)arg2 BundleID:(id)arg3 localizedName:(id)arg4 bundleContainerURL:(id)arg5 dataContainerURL:(id)arg6 resourcesDirectoryURL:(id)arg7 iconsDictionary:(id)arg8 iconFileNames:(id)arg9 version:(id)arg10;
- (unsigned char)_createContext:(struct LSContext *)arg1 andGetBundle:(unsigned int *)arg2 withData:(const struct LSBundleData **)arg3;
- (id)_plistValueForKey:(id)arg1;

@end

@interface LSApplicationProxy : LSBundleProxy <NSSecureCoding>
{
    unsigned long long _flags;
    NSArray *_privateDocumentIconNames;
    LSApplicationProxy *_privateDocumentTypeOwner;
    NSString *_vendorName;
    NSString *_itemName;
    NSString *_shortVersionString;
    unsigned long long _installType;
    unsigned long long _originalInstallType;
    NSDictionary *_groupContainers;
    NSArray *_externalAccessoryProtocols;
    NSArray *_deviceFamily;
    NSArray *_requiredDeviceCapabilities;
    NSString *_minimumSystemVersion;
    NSString *_sdkVersion;
    NSArray *_directionsModes;
    NSArray *_UIBackgroundModes;
    NSArray *_audioComponents;
    NSArray *_VPNPlugins;
    NSArray *_pluginUUIDs;
    NSArray *_plugInKitPlugins;
    NSArray *_appTags;
    NSString *_applicationDSID;
    NSString *_storeCohortMetadata;
    NSNumber *_storeFront;
    _Bool _isContainerized;
    int _modTime;
    NSNumber *_staticDiskUsage;
    NSNumber *_dynamicDiskUsage;
    NSNumber *_itemID;
    NSArray *_groupIdentifiers;
    NSString *_teamID;
}

+ (_Bool)supportsSecureCoding;
+ (id)applicationProxyForItemID:(id)arg1;
+ (id)applicationProxyForBundleURL:(id)arg1;
+ (id)applicationProxyForIdentifier:(id)arg1 roleIdentifier:(id)arg2;
+ (id)applicationProxyForIdentifier:(id)arg1 placeholder:(_Bool)arg2;
+ (id)applicationProxyForIdentifier:(id)arg1;
+ (id)applicationProxyWithBundleUnitID:(unsigned int)arg1;
@property(readonly, nonatomic) _Bool isContainerized; // @synthesize isContainerized=_isContainerized;
@property(readonly, nonatomic) NSString *teamID; // @synthesize teamID=_teamID;
@property(readonly, nonatomic) NSArray *groupIdentifiers; // @synthesize groupIdentifiers=_groupIdentifiers;
@property(readonly, nonatomic) unsigned long long originalInstallType; // @synthesize originalInstallType=_originalInstallType;
@property(readonly, nonatomic) unsigned long long installType; // @synthesize installType=_installType;
@property(readonly, nonatomic) NSNumber *itemID; // @synthesize itemID=_itemID;
- (id)userActivityStringForAdvertisementData:(id)arg1;
- (id)iconStyleDomain;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) _Bool isPurchasedReDownload;
@property(readonly, nonatomic) _Bool isBetaApp;
@property(readonly, nonatomic) _Bool isInstalled;
@property(readonly, nonatomic) _Bool hasSettingsBundle;
@property(readonly, nonatomic) _Bool supportsExternallyPlayableContent;
@property(readonly, nonatomic) _Bool supportsAudiobooks;
@property(readonly, nonatomic) _Bool isRestricted;
@property(readonly, nonatomic) _Bool isNewsstandApp;
@property(readonly, nonatomic) _Bool isAppUpdate;
@property(readonly, nonatomic) _Bool isPlaceholder;
@property(readonly, nonatomic) _Bool profileValidated;
@property(readonly, nonatomic) _Bool fileSharingEnabled;
@property(readonly, nonatomic) _Bool iconIsPrerendered;
- (id)localizedShortName;
- (id)localizedName;
- (void)setPrivateDocumentTypeOwner:(id)arg1;
- (id)privateDocumentTypeOwner;
- (id)iconDataForVariant:(int)arg1;
- (void)setPrivateDocumentIconAllowOverride:(_Bool)arg1;
- (_Bool)privateDocumentIconAllowOverride;
- (void)setPrivateDocumentIconNames:(id)arg1;
- (id)privateDocumentIconNames;
- (id)resourcesDirectoryURL;
- (id)installProgressSync;
@property(readonly, nonatomic) NSProgress *installProgress;
- (id)appStoreReceiptURL;
@property(readonly, nonatomic) NSNumber *storeFront; // @synthesize storeFront=_storeFront;
@property(readonly, nonatomic) NSNumber *dynamicDiskUsage; // @synthesize dynamicDiskUsage=_dynamicDiskUsage;
@property(readonly, nonatomic) NSNumber *staticDiskUsage; // @synthesize staticDiskUsage=_staticDiskUsage;
@property(readonly, nonatomic) NSUUID *deviceIdentifierForVendor;
@property(readonly, nonatomic) NSArray *requiredDeviceCapabilities; // @synthesize requiredDeviceCapabilities=_requiredDeviceCapabilities;
@property(readonly, nonatomic) NSArray *appTags; // @synthesize appTags=_appTags;
@property(readonly, nonatomic) NSArray *plugInKitPlugins; // @synthesize plugInKitPlugins=_plugInKitPlugins;
@property(readonly, nonatomic) NSArray *VPNPlugins; // @synthesize VPNPlugins=_VPNPlugins;
@property(readonly, nonatomic) NSArray *externalAccessoryProtocols;
@property(readonly, nonatomic) NSArray *audioComponents; // @synthesize audioComponents=_audioComponents;
@property(readonly, nonatomic) NSArray *UIBackgroundModes; // @synthesize UIBackgroundModes=_UIBackgroundModes;
@property(readonly, nonatomic) NSArray *directionsModes; // @synthesize directionsModes=_directionsModes;
@property(readonly, nonatomic) NSDictionary *groupContainers; // @synthesize groupContainers=_groupContainers;
@property(readonly, nonatomic) NSString *applicationDSID; // @synthesize applicationDSID=_applicationDSID;
@property(readonly, nonatomic) NSString *shortVersionString; // @synthesize shortVersionString=_shortVersionString;
@property(readonly, nonatomic) NSString *storeCohortMetadata; // @synthesize storeCohortMetadata=_storeCohortMetadata;
@property(readonly, nonatomic) NSString *itemName; // @synthesize itemName=_itemName;
@property(readonly, nonatomic) NSString *vendorName; // @synthesize vendorName=_vendorName;
@property(readonly, nonatomic) NSString *applicationType;
@property(readonly, nonatomic) NSString *sdkVersion; // @synthesize sdkVersion=_sdkVersion;
@property(readonly, nonatomic) NSString *minimumSystemVersion; // @synthesize minimumSystemVersion=_minimumSystemVersion;
@property(readonly, nonatomic) NSArray *deviceFamily; // @synthesize deviceFamily=_deviceFamily;
- (id)machOUUIDs;
- (int)bundleModTime;
@property(readonly, nonatomic) NSString *roleIdentifier;
@property(readonly, nonatomic) NSString *applicationIdentifier;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_initWithBundleUnit:(unsigned int)arg1 applicationIdentifier:(id)arg2;

// Remaining properties
@property(readonly, nonatomic) NSString *bundleVersion;

@end

@interface LSApplicationWorkspace : NSObject
{
}

+ (id)defaultWorkspace;
- (void)_LSClearSchemaCaches;
- (_Bool)_LSPrivateRebuildApplicationDatabasesForSystemApps:(_Bool)arg1 internal:(_Bool)arg2 user:(_Bool)arg3;
- (void)clearCreatedProgressForBundleID:(id)arg1;
- (_Bool)installPhaseFinishedForProgress:(id)arg1;
- (id)installProgressForApplication:(id)arg1 withPhase:(unsigned long long)arg2;
- (void)removeInstallProgressForBundleID:(id)arg1;
- (id)installProgressForBundleID:(id)arg1 makeSynchronous:(unsigned char)arg2;
- (id)deviceIdentifierForVendor;
- (id)deviceIdentifierForAdvertising;
- (void)_clearCachedAdvertisingIdentifier;
- (void)clearAdvertisingIdentifier;
- (_Bool)invalidateIconCache:(id)arg1;
- (_Bool)updateSINFWithData:(id)arg1 forApplication:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (_Bool)unregisterPlugin:(id)arg1;
- (_Bool)registerPlugin:(id)arg1;
- (_Bool)unregisterApplication:(id)arg1;
- (_Bool)registerApplication:(id)arg1;
- (_Bool)registerApplicationDictionary:(id)arg1;
- (_Bool)registerApplicationDictionary:(id)arg1 withObserverNotification:(unsigned long long)arg2;
- (_Bool)uninstallApplication:(id)arg1 withOptions:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (_Bool)uninstallApplication:(id)arg1 withOptions:(id)arg2;
- (_Bool)installApplication:(id)arg1 withOptions:(id)arg2 error:(id *)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (_Bool)installApplication:(id)arg1 withOptions:(id)arg2 error:(id *)arg3;
- (_Bool)installApplication:(id)arg1 withOptions:(id)arg2;
- (_Bool)getClaimedActivityTypes:(id *)arg1 domains:(id *)arg2;
- (id)privateURLSchemes;
- (id)publicURLSchemes;
- (_Bool)applicationIsInstalled:(id)arg1;
- (id)allApplications;
- (id)unrestrictedApplications;
- (id)placeholderApplications;
- (id)allInstalledApplications;
- (id)installedPlugins;
- (id)installedVPNPlugins;
- (id)operationToOpenResource:(id)arg1 usingApplication:(id)arg2 userInfo:(id)arg3;
- (id)operationToOpenResource:(id)arg1 usingApplication:(id)arg2 uniqueDocumentIdentifier:(id)arg3 userInfo:(id)arg4;
- (id)operationToOpenResource:(id)arg1 usingApplication:(id)arg2 uniqueDocumentIdentifier:(id)arg3 userInfo:(id)arg4 delegate:(id)arg5;
- (id)operationToOpenResource:(id)arg1 usingApplication:(id)arg2 uniqueDocumentIdentifier:(id)arg3 sourceIsManaged:(_Bool)arg4 userInfo:(id)arg5 delegate:(id)arg6;
- (_Bool)openSensitiveURL:(id)arg1 withOptions:(id)arg2;
- (_Bool)openURL:(id)arg1;
- (_Bool)openURL:(id)arg1 withOptions:(id)arg2;
- (_Bool)openApplicationWithBundleID:(id)arg1;
- (id)URLOverrideForURL:(id)arg1;
- (id)applicationsAvailableForHandlingURLScheme:(id)arg1;
- (id)applicationsAvailableForOpeningDocument:(id)arg1;
- (id)pluginsWithIdentifiers:(id)arg1 protocols:(id)arg2 version:(id)arg3;
- (id)applicationsOfType:(unsigned long long)arg1;
- (id)applicationForUserActivityDomainName:(id)arg1;
- (id)applicationForUserActivityType:(id)arg1;
- (id)applicationsWithExternalAccessoryProtocols;
- (id)applicationsWithVPNPlugins;
- (id)applicationsWithSettingsBundle;
- (id)applicationsWithAudioComponents;
- (id)applicationsWithUIBackgroundModes;
- (id)directionsApplications;
- (id)applicationForOpeningResource:(id)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)delegateProxy;
- (id)remoteObserver;
- (_Bool)establishConnection;
- (void)getKnowledgeUUID:(id *)arg1 andSequenceNumber:(id *)arg2;

@end

@interface LSApplicationWorkspaceObserver : NSObject <LSApplicationWorkspaceObserverProtocol, NSSecureCoding>
{
    NSUUID *_uuid;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
- (void)networkUsageChanged:(_Bool)arg1;
- (void)applicationInstallsDidPrioritize:(id)arg1;
- (void)applicationInstallsDidCancel:(id)arg1;
- (void)applicationInstallsDidResume:(id)arg1;
- (void)applicationInstallsDidPause:(id)arg1;
- (void)applicationInstallsArePrioritized:(id)arg1 arePaused:(id)arg2;
- (void)applicationsDidUninstall:(id)arg1;
- (void)applicationsDidFailToUninstall:(id)arg1;
- (void)applicationsDidFailToInstall:(id)arg1;
- (void)applicationsWillUninstall:(id)arg1;
- (void)applicationsWillInstall:(id)arg1;
- (void)applicationsDidInstall:(id)arg1;
- (void)applicationInstallsDidUpdateIcon:(id)arg1;
- (void)applicationInstallsDidChange:(id)arg1;
- (void)applicationInstallsDidStart:(id)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)encodeWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface LSApplicationWorkspaceRemoteObserver : LSApplicationWorkspaceObserver
{
    _Bool _observinglsd;
    NSHashTable *_observers;
    NSObject<OS_dispatch_queue> *_progressSubscriptionsQueue;
}

- (void)networkUsageChanged:(_Bool)arg1;
- (void)applicationInstallsDidPrioritize:(id)arg1;
- (void)applicationInstallsDidCancel:(id)arg1;
- (void)applicationInstallsDidResume:(id)arg1;
- (void)applicationInstallsDidPause:(id)arg1;
- (void)applicationInstallsArePrioritized:(id)arg1 arePaused:(id)arg2;
- (void)applicationsDidFailToUninstall:(id)arg1;
- (void)pluginsDidUninstall:(id)arg1;
- (void)applicationsDidUninstall:(id)arg1;
- (void)applicationsWillUninstall:(id)arg1;
- (void)pluginsWillUninstall:(id)arg1;
- (void)applicationsDidFailToInstall:(id)arg1;
- (void)pluginsDidInstall:(id)arg1;
- (void)applicationsDidInstall:(id)arg1;
- (void)applicationsWillInstall:(id)arg1;
- (void)applicationInstallsDidChange:(id)arg1;
- (void)applicationInstallsDidUpdateIcon:(id)arg1;
- (void)applicationInstallsDidStart:(id)arg1;
- (void)setObservinglsd:(_Bool)arg1;
- (_Bool)isObservinglsd;
- (unsigned long long)currentObserverCount;
- (id)localObservers;
- (void)removeLocalObserver:(id)arg1;
- (void)addLocalObserver:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface LSBestAppSuggestion : NSObject
{
    unsigned long long _type;
    NSUUID *_uniqueIdentifier;
    NSDictionary *_options;
    NSString *_bundleIdentifier;
    NSString *_activityType;
    NSDate *_lastUpdateTime;
    double _confidence;
    NSString *_originatingDeviceIdentifier;
    NSString *_originatingDeviceName;
    NSString *_originatingDeviceType;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, copy) NSString *originatingDeviceType; // @synthesize originatingDeviceType=_originatingDeviceType;
@property(readonly, copy) NSString *originatingDeviceName; // @synthesize originatingDeviceName=_originatingDeviceName;
@property(readonly, copy) NSString *originatingDeviceIdentifier; // @synthesize originatingDeviceIdentifier=_originatingDeviceIdentifier;
@property(readonly) double confidence; // @synthesize confidence=_confidence;
@property(readonly, copy) NSDate *lastUpdateTime; // @synthesize lastUpdateTime=_lastUpdateTime;
@property(copy) NSString *activityType; // @synthesize activityType=_activityType;
@property(readonly, copy) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(readonly, copy) NSDictionary *options; // @synthesize options=_options;
@property(copy) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly) unsigned long long type; // @synthesize type=_type;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSDate *when; // @dynamic when;
- (id)debugDescription;
- (id)description;
- (void)dealloc;
- (id)initWithBundleIdentifier:(id)arg1 uuid:(id)arg2 activityType:(id)arg3 lastUpdateTime:(id)arg4 type:(unsigned long long)arg5 deviceName:(id)arg6 deviceIdentifier:(id)arg7 deviceType:(id)arg8 options:(id)arg9;
@property(readonly, copy) NSString *userActivityTypeIdentifier; // @dynamic userActivityTypeIdentifier;

@end

@interface LSBestAppSuggestionManager : NSObject
{
    id <LSBestAppSuggestionManagerDelegate> _delegate;
    _Bool _listeningForBestAppSuggestions;
    int _bestAppNotificationCount;
    LSBestAppSuggestion *_lastBestAppSuggestion;
    NSXPCConnection *_connection;
}

@property(retain) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void)launchAppWithBestAppSuggestion:(id)arg1;
- (void)launchAppWithBundleIdentifier:(id)arg1 userActivityUniqueIdentifier:(id)arg2 userActivityTypeIdentifier:(id)arg3;
- (void)launchAppWithBundleIdentifier:(id)arg1 userActivityUniqueIdentifier:(id)arg2 userActivityTypeIdentifier:(id)arg3 deviceName:(id)arg4 deviceType:(id)arg5;
- (void)launchAppWithBundleIdentifier:(id)arg1 taskContinuationIdentifier:(id)arg2;
- (void)notifyBestAppChanged:(id)arg1 type:(unsigned long long)arg2 options:(id)arg3 bundleIdentifier:(id)arg4 activityType:(id)arg5 when:(id)arg6 confidence:(double)arg7 deviceName:(id)arg8 deviceIdentifier:(id)arg9 deviceType:(id)arg10;
- (void)bestAppSuggestionLaunchWasCancelled:(id)arg1;
- (void)bestAppSuggestionWasLaunched:(id)arg1 withInteractionType:(int)arg2;
- (void)queueFetchOfPayloadForBestAppSuggestion:(id)arg1;
- (id)bestAppSuggestions:(long long)arg1;
- (_Bool)determineBestAppWithDelay:(double)arg1 withBlock:(CDUnknownBlockType)arg2;
- (id)bestAppSuggestion;
- (void)stopListeningForBestAppSuggestions;
- (void)startListeningForBestAppSuggestions;
- (void)removeBestApp:(id)arg1 options:(id)arg2;
@property __weak id <LSBestAppSuggestionManagerDelegate> delegate; // @dynamic delegate;
- (void)dealloc;
- (id)init;

@end

@interface LSDocumentProxy : LSResourceProxy
{
    _Bool _sourceIsManaged;
    NSString *_name;
    NSString *_typeIdentifier;
    NSString *_MIMEType;
}

+ (id)documentProxyForName:(id)arg1 type:(id)arg2 MIMEType:(id)arg3;
+ (id)documentProxyForName:(id)arg1 type:(id)arg2 MIMEType:(id)arg3 sourceIsManaged:(_Bool)arg4;
@property(readonly, nonatomic) _Bool sourceIsManaged; // @synthesize sourceIsManaged=_sourceIsManaged;
@property(readonly, nonatomic) NSString *MIMEType; // @synthesize MIMEType=_MIMEType;
@property(readonly, nonatomic) NSString *typeIdentifier; // @synthesize typeIdentifier=_typeIdentifier;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (id)description;
- (id)iconStyleDomain;
- (void)dealloc;
- (id)initWithName:(id)arg1 type:(id)arg2 MIMEType:(id)arg3 sourceIsManaged:(_Bool)arg4;
- (void)bind;

@end

__attribute__((visibility("hidden")))
@interface LSInstallProgressDelegate : NSObject <NSXPCListenerDelegate, LSInstallProgressProtocol>
{
    NSMutableDictionary *_observers;
    LSInstallProgressList *_progresses;
    NSMutableOrderedSet *_orderedInstalls;
    NSMutableDictionary *_installIndexes;
    NSMutableSet *_inactiveInstalls;
    LSObserverTimer *installsStartedTimer;
    LSObserverTimer *iconsUpdatedTimer;
    LSObserverTimer *installsUpdatedTimer;
    LSObserverTimer *installsFinishedTimer;
    LSObserverTimer *didUninstallTimer;
    NSObject<OS_dispatch_queue> *_installControlsQueue;
    NSObject<OS_dispatch_queue> *_observersQueue;
    _Bool _usingNetwork;
}

- (void)endObservingConnection;
- (void)beginObservingConnection;
- (void)sendNetworkUsageChangedNotification;
- (void)sendAppControlsNotificationForApp:(id)arg1 withName:(id)arg2;
- (void)sendUninstalledNotificationForApp:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)sendUninstalledNotificationForApps:(id)arg1;
- (void)sendInstalledNotificationForApp:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)sendInstalledNotificationForApps:(id)arg1;
- (void)sendFailedNotificationForApp:(id)arg1 isUninstall:(_Bool)arg2;
- (void)sendWillUninstallNotificationForApps:(id)arg1 Plugins:(id)arg2 isUpdate:(_Bool)arg3;
- (void)sendChangeNotificationForApp:(id)arg1;
- (void)placeholderInstalledForApp:(id)arg1;
- (void)sendIconUpdatedNotificationForApp:(id)arg1;
- (void)installationFailedForApplication:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)installationEndedForApplication:(id)arg1;
- (void)rebuildInstallIndexes;
- (void)createInstallProgressForApplication:(id)arg1 withPhase:(unsigned long long)arg2 andPublishingString:(id)arg3;
- (id)parentProgressForApplication:(id)arg1 andPhase:(unsigned long long)arg2 isActive:(_Bool)arg3;
- (void)handleCancelInstallationForApp:(id)arg1;
- (void)removeObserverWithUUID:(id)arg1;
- (void)addObserver:(id)arg1 withUUID:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)restoreInactiveInstalls;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface LSInstallProgressList : NSObject
{
    NSMutableDictionary *_progresses;
    NSMutableDictionary *_subscriptions;
}

- (id)description;
- (void)removeProgressForBundleID:(id)arg1;
- (void)removeSubscriberForPublishingKey:(id)arg1 andBundleID:(id)arg2;
- (id)subscriberForBundleID:(id)arg1 andPublishingKey:(id)arg2;
- (void)addSubscriber:(id)arg1 forPublishingKey:(id)arg2 andBundleID:(id)arg3;
- (void)setProgress:(id)arg1 forBundleID:(id)arg2;
- (id)progressForBundleID:(id)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface LSObserverTimer : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_name;
    NSTimer *_timer;
    NSDate *_lastFiredDate;
    NSMutableSet *_applications;
    NSMutableSet *_plugins;
    double _minInterval;
    double _latency;
    SEL _appObserverSelector;
}

@property SEL appObserverSelector; // @synthesize appObserverSelector=_appObserverSelector;
@property(readonly, nonatomic) double latency; // @synthesize latency=_latency;
@property(readonly, nonatomic) double minInterval; // @synthesize minInterval=_minInterval;
@property(retain, nonatomic) NSMutableSet *plugins; // @synthesize plugins=_plugins;
@property(retain, nonatomic) NSMutableSet *applications; // @synthesize applications=_applications;
@property(retain, nonatomic) NSDate *lastFiredDate; // @synthesize lastFiredDate=_lastFiredDate;
@property(retain, nonatomic) NSTimer *timer; // @synthesize timer=_timer;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (id)description;
- (void)sendMessage:(id)arg1;
- (void)notifyObservers:(id)arg1 withApplication:(id)arg2;
- (void)clear;
- (void)removeApplication:(id)arg1;
- (void)addApplication:(id)arg1;
- (void)stopTimer;
- (void)dealloc;
- (id)initWithAppSelector:(SEL)arg1 queue:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface LSOpenOperation : NSOperation
{
    _Bool _executing;
    _Bool _finished;
    _Bool _sourceIsManaged;
    NSURL *_resourceURL;
    NSString *_applicationIdentifier;
    NSString *_documentIdentifier;
    id _userInfoPlist;
    NSDictionary *_options;
    id _delegate;
    int _result;
}

- (void)start;
- (_Bool)didSucceed;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (_Bool)isConcurrent;
- (void)completeOperation;
- (void)main;
- (void)dealloc;
- (id)initForOpeningResource:(id)arg1 usingApplication:(id)arg2 uniqueDocumentIdentifier:(id)arg3 sourceIsManaged:(_Bool)arg4 userInfo:(id)arg5 options:(id)arg6 delegate:(id)arg7;

@end

@interface LSPlugInKitProxy : LSBundleProxy <NSSecureCoding>
{
    NSDictionary *_infoPlist;
    LSBundleProxy *_parentBundle;
    unsigned int _parentBundleID;
    _Bool _isOnSystemPartition;
    NSString *_pluginIdentifier;
    NSString *_protocol;
    NSUUID *_pluginUUID;
    NSDictionary *_pluginKitDictionary;
    NSDate *_registrationDate;
}

+ (_Bool)supportsSecureCoding;
+ (id)plugInKitProxyForUUID:(id)arg1 bundleIdentifier:(id)arg2 pluginIdentifier:(id)arg3 version:(id)arg4 bundleURL:(id)arg5;
+ (id)pluginKitProxyForURL:(id)arg1;
+ (id)pluginKitProxyForIdentifier:(id)arg1;
+ (id)pluginKitProxyForUUID:(id)arg1;
+ (id)plugInKitProxyForPlugin:(unsigned int)arg1;
@property(readonly, nonatomic) _Bool isOnSystemPartition; // @synthesize isOnSystemPartition=_isOnSystemPartition;
@property(readonly, nonatomic) NSDate *registrationDate; // @synthesize registrationDate=_registrationDate;
@property(readonly, nonatomic) NSDictionary *pluginKitDictionary; // @synthesize pluginKitDictionary=_pluginKitDictionary;
@property(readonly, nonatomic) NSUUID *pluginUUID; // @synthesize pluginUUID=_pluginUUID;
@property(readonly, nonatomic) NSString *protocol; // @synthesize protocol=_protocol;
@property(readonly, nonatomic) NSString *pluginIdentifier; // @synthesize pluginIdentifier=_pluginIdentifier;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (id)iconDataForVariant:(int)arg1;
- (id)appStoreReceiptURL;
- (id)localizedShortName;
- (id)localizedName;
@property(readonly, nonatomic) LSBundleProxy *containingBundle;
@property(readonly, nonatomic) NSDictionary *infoPlist;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_initWithUUID:(id)arg1 bundleIdentifier:(id)arg2 pluginIdentifier:(id)arg3 version:(id)arg4 bundleURL:(id)arg5;
- (id)_initWithPlugin:(unsigned int)arg1;

@end

@interface LSResumableActivitiesControlManager : NSObject
{
    NSXPCConnection *connection;
    id _delegate;
}

+ (id)resumableActivitiesControlManager;
@property id delegate; // @synthesize delegate=_delegate;
@property(retain) NSXPCConnection *connection; // @synthesize connection;
- (void)callDidSaveDelegate:(id)arg1;
- (void)callWillSaveDelegate:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)callWillSaveDelegate:(id)arg1;
- (void)injectBTLEItem:(id)arg1 type:(unsigned long long)arg2 identifier:(id)arg3 title:(id)arg4 activityPayload:(id)arg5 frameworkPayload:(id)arg6 payloadDelay:(double)arg7;
- (void)terminateServer;
- (void)restartServer;
- (id)status;
- (id)enabledUUIDs;
- (id)allUUIDsOfType:(unsigned long long)arg1;
- (id)advertisedItemUUID;
- (id)matchingUUIDForString:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface LSUserActivity : NSObject <SFCompanionAdvertiserDelegate>
{
    LSUserActivityManager *_manager;
    NSMutableDictionary *_userInfo;
    NSMutableDictionary *_frameworkPayload;
    NSString *_title;
    NSURL *_webpageURL;
    id <LSUserActivityDelegate> _delegate;
    SFCompanionAdvertiser *_advertiser;
    SFCompanionAdvertiser *_resumerAdvertiser;
    double _lastSaveTime;
    _Bool _saveScheduled;
    _Bool _createsNewUUIDIfSaved;
    NSError *_decodeUserInfoError;
    _Bool _needsSave;
    _Bool _dirty;
    _Bool _sendToServerPending;
    _Bool _inWillSaveCallback;
    _Bool _supportsContinuationStreams;
    _Bool _forceImmediateSendToServer;
    _Bool _canCreateStreams;
    NSString *_typeIdentifier;
    NSUUID *_uniqueIdentifier;
    unsigned long long _suggestedActionType;
    NSDate *_lastActivityDate;
    NSDictionary *_options;
    NSData *_streamsData;
}

+ (void)fetchUserActivityWithUUID:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)userActivityFromUUID:(id)arg1 withError:(id *)arg2;
+ (id)userActivity;
+ (_Bool)userActivityContinuationSupported;
+ (id)suggestedActionOfType:(unsigned long long)arg1;
+ (_Bool)checkWebpageURL:(id)arg1 actionType:(unsigned long long)arg2 throwIfFailed:(_Bool)arg3;
+ (id)allowedWebpageURLSchemes;
+ (void)unregisterForSuggestedActionNudgeOfType:(id)arg1;
+ (id)registerForSuggestedActionNudgeOfType:(unsigned long long)arg1 withOptions:(id)arg2 block:(CDUnknownBlockType)arg3;
@property _Bool canCreateStreams; // @synthesize canCreateStreams=_canCreateStreams;
@property(copy) NSData *streamsData; // @synthesize streamsData=_streamsData;
@property(copy) NSDictionary *options; // @synthesize options=_options;
@property(copy) NSDate *lastActivityDate; // @synthesize lastActivityDate=_lastActivityDate;
@property(readonly) unsigned long long suggestedActionType; // @synthesize suggestedActionType=_suggestedActionType;
@property(copy) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(copy) NSString *typeIdentifier; // @synthesize typeIdentifier=_typeIdentifier;
@property(retain) NSError *decodeUserInfoError; // @synthesize decodeUserInfoError=_decodeUserInfoError;
@property _Bool createsNewUUIDIfSaved; // @synthesize createsNewUUIDIfSaved=_createsNewUUIDIfSaved;
@property _Bool forceImmediateSendToServer; // @synthesize forceImmediateSendToServer=_forceImmediateSendToServer;
@property _Bool sendToServerPending; // @synthesize sendToServerPending=_sendToServerPending;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly) LSUserActivityManager *manager; // @dynamic manager;
- (id)decodeUserInfo:(id)arg1;
- (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;
- (id)encodeUserInfo:(id)arg1;
- (id)archiver:(id)arg1 willEncodeObject:(id)arg2;
- (void)invalidate;
- (void)becomeCurrent;
- (void)getContinuationStreamsWithCompletionHandler:(CDUnknownBlockType)arg1;
@property id <LSUserActivityDelegate> delegate; // @dynamic delegate;
@property _Bool supportsContinuationStreams; // @dynamic supportsContinuationStreams;
@property _Bool needsSave; // @dynamic needsSave;
@property _Bool dirty; // @dynamic dirty;
- (void)addUserInfoEntriesFromDictionary:(id)arg1;
@property(copy) NSURL *webpageURL; // @dynamic webpageURL;
@property(copy) NSDictionary *userInfo; // @dynamic userInfo;
@property(copy) NSString *title; // @dynamic title;
- (void)dealloc;
- (id)initWithTypeIdentifier:(id)arg1 suggestedActionType:(unsigned long long)arg2 options:(id)arg3;
- (id)initWithTypeIdentifier:(id)arg1 options:(id)arg2;
- (id)initWithTypeIdentifier:(id)arg1;
- (id)init;
- (id)resourceURLForKey:(id)arg1;
- (void)removeResourceURL:(id)arg1;
- (id)addResourceURL:(id)arg1;
- (void)setResourceURLs:(id)arg1;
- (id)resourceURLs;
- (void)remove;
- (void)save;
@property(getter=isActive) _Bool active;
@property(copy, getter=activityPayload, setter=setActivityPayload:) NSDictionary *activityPayloadDictionary;
- (void)removeActivityPayloadForKey:(id)arg1;
- (void)updateActivityPayloadValue:(id)arg1 forKey:(id)arg2;
- (void)removeFrameworkPayloadForKey:(id)arg1;
- (void)removeFrameworkPayloadValueForKey:(id)arg1;
- (void)updateFrameworkPayloadValue:(id)arg1 forKey:(id)arg2;
@property(copy) NSDictionary *frameworkPayload;
- (void)removeUserInfoValueForKey:(id)arg1;
- (void)updateUserInfoValue:(id)arg1 forKey:(id)arg2;
@property(copy) NSString *owningBundleIdentifier; // @dynamic owningBundleIdentifier;
- (id)initWithSuggestedActionType:(unsigned long long)arg1 options:(id)arg2;
- (id)initWithUUID:(id)arg1;
@property(copy) NSURL *webPageURL; // @dynamic webPageURL;
- (void)advertiser:(id)arg1 didReceiveInputStream:(id)arg2 outputStream:(id)arg3;
- (void)sendUserActivityInfoToLSUserActivityd:(_Bool)arg1 onAsyncQueue:(_Bool)arg2;
- (id)callWillSaveDelegateIfDirtyAndPackageUpData:(_Bool)arg1 clearDirty:(_Bool)arg2;
- (id)userActivityInfoForSelf;
- (void)scheduleSendUserActivityInfoToLSUserActivityd;
- (void)didReceiveInputStream:(id)arg1 outputStream:(id)arg2;
- (void)didSynchronizeUserActivity;
- (void)willSynchronizeUserActivityWithHandler:(CDUnknownBlockType)arg1;
- (void)tellDaemonAboutNewLSUserActivity;
- (id)initWithManager:(id)arg1 userActivityInfo:(id)arg2;

// Remaining properties
@property(copy) NSDictionary *activityPayload;
@property(copy, getter=frameworkPayload, setter=setFrameworkPayload:) NSDictionary *frameworkPayloadDictionary;
@property(readonly) Class superclass;

@end

@interface LSUserActivityDebuggingManager : NSObject
{
    struct __asl_object_s *_client;
}

+ (id)hexDataDump:(id)arg1;
+ (void)log:(int)arg1 format:(id)arg2;
+ (id)sharedDebugManager;
@property struct __asl_object_s *client; // @synthesize client=_client;
- (void)logCommon:(unsigned long long)arg1 format:(id)arg2 args:(struct __va_list_tag [1])arg3;
- (_Bool)shouldLogCommon:(unsigned long long)arg1;
- (void)log:(int)arg1 file:(const char *)arg2 line:(long long)arg3 format:(id)arg4;
- (void)log:(int)arg1 format:(id)arg2;
- (void)log:(int)arg1 format:(id)arg2 args:(struct __va_list_tag [1])arg3 file:(const char *)arg4 line:(long long)arg5;
- (void)log:(int)arg1 format:(id)arg2 args:(struct __va_list_tag [1])arg3;
- (_Bool)shouldLog:(int)arg1;
- (id)init;

@end

@interface LSUserActivityInfo : NSObject <NSCopying, NSSecureCoding>
{
    NSUUID *_uuid;
    unsigned long long _type;
    NSDictionary *_options;
    unsigned long long _changeCount;
    NSDate *_activityDate;
    NSString *_title;
    NSString *_typeIdentifier;
    NSURL *_webpageURL;
    NSData *_streamsData;
    NSData *_activityPayload;
    NSError *_error;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSError *error; // @synthesize error=_error;
@property(copy) NSData *activityPayload; // @synthesize activityPayload=_activityPayload;
@property(copy) NSData *streamsData; // @synthesize streamsData=_streamsData;
@property(copy) NSURL *webpageURL; // @synthesize webpageURL=_webpageURL;
@property(copy) NSString *typeIdentifier; // @synthesize typeIdentifier=_typeIdentifier;
@property(copy) NSString *title; // @synthesize title=_title;
@property(copy) NSDate *activityDate; // @synthesize activityDate=_activityDate;
@property unsigned long long changeCount; // @synthesize changeCount=_changeCount;
@property(copy) NSDictionary *options; // @synthesize options=_options;
@property unsigned long long type; // @synthesize type=_type;
@property(copy) NSUUID *uuid; // @synthesize uuid=_uuid;
- (id)statusString;
- (id)description;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface LSUserActivityManager : NSObject <LSUserActivityClientResponseProtocol>
{
    NSXPCConnection *_connection;
    NSObject<OS_dispatch_queue> *_serverQ;
    _Bool _connectionInitializationSucceeded;
    _Bool _needToSendInitialMessage;
    NSMutableDictionary *_userActivitiesByUUID;
    _Bool _supportsActivityContinuation;
    _Bool _activityContinuationIsEnabled;
    NSUUID *_activeUserActivityUUID;
}

+ (id)defaultManager;
+ (_Bool)userActivityContinuationSupported;
+ (_Bool)shouldSupportActivityContinuation;
@property(retain) NSMutableDictionary *userActivitiesByUUID; // @synthesize userActivitiesByUUID=_userActivitiesByUUID;
@property(readonly) NSObject<OS_dispatch_queue> *serverQ; // @synthesize serverQ=_serverQ;
@property(copy) NSUUID *activeUserActivityUUID; // @synthesize activeUserActivityUUID=_activeUserActivityUUID;
@property(readonly) _Bool supportsActivityContinuation; // @synthesize supportsActivityContinuation=_supportsActivityContinuation;
- (void)markUserActivityAsDirty:(id)arg1 forceImmediate:(_Bool)arg2;
- (void)sendUserActivityInfoToLSUserActivityd:(id)arg1 makeCurrent:(_Bool)arg2;
- (void)tellDaemonAboutNewLSUserActivity:(id)arg1;
- (id)createByDecodingUserActivity:(id)arg1;
- (id)encodeUserActivity:(id)arg1;
- (void)didReceiveInputStreamWithUUID:(id)arg1 inputStream:(id)arg2 outputStream:(id)arg3;
- (void)tellClientUserActivityItWasResumed:(id)arg1;
- (void)askClientUserActivityToSave:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)askClientUserActivityToSave:(id)arg1;
- (id)_findUserActivityForUUID:(id)arg1;
- (_Bool)userActivityIsActive:(id)arg1;
- (void)makeActive:(id)arg1;
- (void)removeUserActivity:(id)arg1;
- (void)addUserActivity:(id)arg1;
- (void)fetchUUID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
@property(readonly) _Bool activityContinuationIsEnabled;
@property(readonly, retain) NSXPCConnection *connection;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;
- (id)init;
- (void)sendInitialMessage;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface LSVPNPluginProxy : LSBundleProxy
{
}

+ (id)VPNPluginProxyForIdentifier:(id)arg1;
- (id)_initWithBundleIdentifier:(id)arg1;

@end

@interface NSProgress (LSInstallProgressAdditions)
+ (id)keyPathsForValuesAffectingInstallPhase;
+ (id)keyPathsForValuesAffectingInstallState;
+ (id)publishingKeyForApp:(id)arg1 withPhase:(unsigned long long)arg2;
+ (id)childProgressForBundleID:(id)arg1 andPhase:(unsigned long long)arg2;
- (id)_LSDescription;
- (void)resume;
@property(nonatomic) unsigned long long installPhase;
@property(nonatomic) unsigned long long installState;
- (id)initWithParent:(id)arg1 bundleID:(id)arg2 andPhase:(unsigned long long)arg3;
@end

@interface NSString (LSAdditions)
- (id)queryToDict;
- (id)LS_unescapedQueryValue;
- (_Bool)LS_hasCaseInsensitivePrefix:(id)arg1;
@end

@interface NSURL (LSAdditions)
- (id)betaStoreURL;
- (id)fmipURL;
- (id)photosURL;
- (id)twitterURL;
- (id)facebookURL;
- (id)iTunesStoreURL;
- (id)gamecenterURL;
- (id)youTubeURL;
- (id)iCloudFamilyURL;
- (id)fmfURL;
- (id)mapsURL;
- (id)iWorkDocumentName;
- (id)iWorkApplicationName;
- (_Bool)isiWorkURL;
- (_Bool)conformsToOverridePatternWithKey:(id)arg1;
@end

