//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CC_SHA1state_st {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8[16];
    int _field9;
};

struct IPCMessage;

struct NEAgentFilterPluginCallbacks {
    CDUnknownFunctionPointerType PluginInit;
    CDUnknownFunctionPointerType PluginStart;
    CDUnknownFunctionPointerType PluginStop;
    CDUnknownFunctionPointerType PluginEnvironmentEvent;
    CDUnknownFunctionPointerType PluginDispose;
};

struct _VPNConfigurationPrivate {
    struct __CFRuntimeBase {
        unsigned long long _field1;
        unsigned char _field2[4];
        unsigned int _field3;
    } _field1;
    struct __CFString *_field2;
    unsigned char _field3;
    struct __CFRunLoopSource *_field4;
    struct __CFRunLoopSource *_field5;
    struct __CFRunLoopSource *_field6;
    struct __CFArray *_field7;
    CDUnknownFunctionPointerType _field8;
    CDStruct_e097db04 _field9;
    CDUnknownFunctionPointerType _field10;
    CDStruct_e097db04 _field11;
    id _field12;
    void *_field13;
    struct ipc_queue _field14;
    id _field15;
    struct {
        struct _VPNConfigurationPrivate *_field1;
    } _field16;
};

struct __CFRunLoopSource;

struct ipc_queue {
    struct IPCMessage *_field1;
    struct IPCMessage **_field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
} CDStruct_c0454aff;

typedef struct {
    long long _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
} CDStruct_e097db04;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/NetworkExtension.framework/NetworkExtension
// UUID: FB118B48-ECEA-3A81-A9E5-3B34F94F3B72
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 168.1.8.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NEAgentServerDelegate
- (void)handleMessage:(NSObject<OS_xpc_object> *)arg1 withOuterMessage:(NSObject<OS_xpc_object> *)arg2;
- (void)handleDisposeWithCompletionHandler:(void (^)(void))arg1;
- (_Bool)handleInit;
- (id)initWithServer:(NEAgentServer *)arg1 pluginType:(NSString *)arg2 primaryPluginType:(NSString *)arg3 pluginBundle:(struct __CFBundle *)arg4;
@end

@protocol NEConfigurationLegacySupport
- (id)initFromLegacyDictionary:(NSDictionary *)arg1;
- (NSMutableDictionary *)copyLegacyDictionary;
@end

@protocol NEConfigurationValidating
- (_Bool)checkValidityAndCollectErrors:(NSMutableArray *)arg1;
@end

@protocol NEPrettyDescription
- (NSString *)descriptionWithIndent:(int)arg1;
@end

@protocol NEProfileIngestionDelegate
+ (void)profileMigrationComplete;
+ (NSString *)getServiceIDForPayload:(NSDictionary *)arg1;
- (_Bool)updateAppLayerVPNMappingRules:(NSDictionary *)arg1;
- (NSArray *)copyManagedConfigurationIDs;
- (_Bool)updateDefaultAfterDeletingConfiguration;
- (_Bool)updateDefaultAfterAddingConfiguration;
- (_Bool)enableAlwaysOnVpn;
- (void)enableDefaultService;
- (void)unlockConfigurations;
- (_Bool)lockConfigurations;
- (_Bool)isInstalled:(NSString *)arg1;
- (NEConfiguration *)setAsideConfigurationName:(NSString *)arg1 unsetAside:(_Bool)arg2;
- (_Bool)removeConfigurationWithIdentifier:(NSString *)arg1;
- (_Bool)removeIngestedConfiguration;
- (_Bool)removeConfiguration:(NEConfiguration *)arg1;
- (_Bool)saveIngestedConfiguration;
- (NEConfiguration *)ingestedConfiguration;
- (_Bool)createConfigurationFromPayload:(id <NEProfilePayloadBaseDelegate>)arg1 payloadType:(NSString *)arg2;
- (NEConfiguration *)findConfigurationByConfigurationID:(NSString *)arg1;
- (NEConfiguration *)findConfigurationByPayloadUUID:(NSString *)arg1;
- (NEConfiguration *)findConfigurationByName:(NSString *)arg1;
- (_Bool)loadConfigurationsForceReloadFromDisk;
- (id)initWithNameAndType:(NSString *)arg1 payloadType:(NSString *)arg2;
@end

@protocol NEProfilePayloadBaseDelegate
- (_Bool)setPostprocessedPayloadContents:(NSDictionary *)arg1;
- (NSDictionary *)getPreprocessedPayloadContents;
- (NSError *)validatePayload;
- (id)initWithPayload:(NSDictionary *)arg1;
@end

@protocol NEProfilePayloadHandlerDelegate
- (_Bool)setAppLayerVPNRuleSettings:(NSDictionary *)arg1 withAppIdentifier:(NSString *)arg2;
- (_Bool)setAppLayerVPNUUID:(NSString *)arg1 andSafariDomains:(NSArray *)arg2;
- (_Bool)setProfileInfo:(NSDictionary *)arg1;
- (_Bool)setPayloadInfoCommon:(NSString *)arg1 payloadOrganization:(NSString *)arg2;
- (_Bool)setPayloadInfoIdentity:(id <NEProfilePayloadBaseDelegate>)arg1;
- (_Bool)setCertificates:(NSDictionary *)arg1;
- (NSDictionary *)getPendingCertificateUUIDs:(id <NEProfilePayloadBaseDelegate>)arg1;
- (NSString *)getConfigurationIdentifier;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface NEAOVPN : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
{
    _Bool _enabled;
    _Bool _toggleEnabled;
    _Bool _allowCaptiveWebSheet;
    _Bool _allowAllCaptiveNetworkPlugins;
    NSDictionary *_interfaceProtocolMapping;
    NSDictionary *_serviceExceptions;
    NSDictionary *_allowedCaptiveNetworkPlugins;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSDictionary *allowedCaptiveNetworkPlugins; // @synthesize allowedCaptiveNetworkPlugins=_allowedCaptiveNetworkPlugins;
@property(copy) NSDictionary *serviceExceptions; // @synthesize serviceExceptions=_serviceExceptions;
@property(copy) NSDictionary *interfaceProtocolMapping; // @synthesize interfaceProtocolMapping=_interfaceProtocolMapping;
@property(getter=isAllowAllCaptiveNetworkPlugins) _Bool allowAllCaptiveNetworkPlugins; // @synthesize allowAllCaptiveNetworkPlugins=_allowAllCaptiveNetworkPlugins;
@property(getter=isAllowCaptiveWebSheet) _Bool allowCaptiveWebSheet; // @synthesize allowCaptiveWebSheet=_allowCaptiveWebSheet;
@property(getter=isToggleEnabled) _Bool toggleEnabled; // @synthesize toggleEnabled=_toggleEnabled;
@property(getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface NEAOVPNException : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_serviceName;
    NSString *_bundleIdentifier;
    long long _action;
}

+ (_Bool)supportsSecureCoding;
@property long long action; // @synthesize action=_action;
@property(copy) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(copy) NSString *serviceName; // @synthesize serviceName=_serviceName;
- (void).cxx_destruct;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface NEAgentFilterPlugin : NSObject <NEAgentServerDelegate>
{
    struct __CFBundle *_pluginBundle;
    struct __CFDictionary *_pendingGlobalPersistentData;
    struct __CFDictionary *_pendingPerConfigurationPersistentData;
    struct NESocketContentFilter_s *_socketContentFilter;
    struct NEAgentFilterPluginCallbacks _pluginCallbacks;
    void *_pluginInfo;
    CDUnknownBlockType _browserNewFlowHandler;
    CDUnknownBlockType _browserDataHandler;
    CDUnknownBlockType _browserDataCompleteHandler;
    NSObject<OS_dispatch_queue> *_clientQueue;
    void *_clientInfo;
    struct __CFDictionary *_browserFlows;
    _Bool _pluginInitialized;
    _Bool _builtInPlugin;
    int _outstandingSetGlobalDataOps;
    int _outstandingSetDataOps;
    NEAgentServer *_server;
    NSString *_pluginType;
    NSObject<OS_dispatch_queue> *_queue;
    NSUUID *_configID;
    NEPluginPreferences *_pluginPrefs;
    NSObject<OS_xpc_object> *_clientListener;
}

@property(readonly) _Bool builtInPlugin; // @synthesize builtInPlugin=_builtInPlugin;
@property int outstandingSetDataOps; // @synthesize outstandingSetDataOps=_outstandingSetDataOps;
@property int outstandingSetGlobalDataOps; // @synthesize outstandingSetGlobalDataOps=_outstandingSetGlobalDataOps;
@property(retain) NSObject<OS_xpc_object> *clientListener; // @synthesize clientListener=_clientListener;
@property(retain) NEPluginPreferences *pluginPrefs; // @synthesize pluginPrefs=_pluginPrefs;
@property(retain) NSUUID *configID; // @synthesize configID=_configID;
@property _Bool pluginInitialized; // @synthesize pluginInitialized=_pluginInitialized;
@property(readonly) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly) NSString *pluginType; // @synthesize pluginType=_pluginType;
@property(readonly) __weak NEAgentServer *server; // @synthesize server=_server;
- (void).cxx_destruct;
- (void)setBrowserNewFlowHandler:(CDUnknownBlockType)arg1 dataHandler:(CDUnknownBlockType)arg2 dataCompleteHandler:(CDUnknownBlockType)arg3 clientQueue:(id)arg4 andClientInfo:(void *)arg5;
- (struct NESocketContentFilter_s *)copySocketContentFilter;
- (struct __CFDictionary *)copyPersistentDataOfType:(long long)arg1;
- (_Bool)sendSetPersistentData:(struct __CFDictionary *)arg1 ofType:(long long)arg2;
- (_Bool)sendSocketContentFilterRequestWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)sendBrowserContentFilterServerRequest;
- (void)sendEnvironmentEventComplete:(long long)arg1;
- (void)sendStatus:(long long)arg1 withError:(long long)arg2;
- (void)handleEnvironmentEvent:(id)arg1;
- (void)handleStop:(id)arg1;
- (void)handleStart:(id)arg1;
- (void)handleInitMessage:(id)arg1;
- (void)handleAddClientMessage:(id)arg1;
- (void)acceptNewClientConnection:(id)arg1;
- (void)handleClientMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleDataCompleteMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleAddDataMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleNewFlowMessage:(id)arg1 forConnection:(id)arg2;
- (void)closeBrowserFilterFlow:(struct NEContentFilterFlow_s *)arg1 forUUID:(struct __CFUUID *)arg2;
- (void)handleMessage:(id)arg1 withOuterMessage:(id)arg2;
- (void)handleDisposeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)handleInit;
- (void)cleanup;
- (id)initWithServer:(id)arg1 pluginType:(id)arg2 primaryPluginType:(id)arg3 pluginBundle:(struct __CFBundle *)arg4;

@end

@interface NEConfiguration : NSObject <NEProfilePayloadHandlerDelegate, NEConfigurationValidating, NSSecureCoding, NSCopying>
{
    long long _grade;
    NSUUID *_identifier;
    NSString *_application;
    NSString *_name;
    NSString *_applicationName;
    NSString *_applicationIdentifier;
    NSString *_externalIdentifier;
    NEVPN *_VPN;
    NEAOVPN *_alwaysOnVPN;
    NEVPNApp *_appVPN;
    NEContentFilter *_contentFilter;
    NEProfileIngestionPayloadInfo *_payloadInfo;
}

+ (void)addError:(id)arg1 toList:(id)arg2;
+ (_Bool)supportsSecureCoding;
+ (struct __CFDictionary *)copyConfigurationForProtocol:(struct __CFString *)arg1 inService:(struct __SCNetworkService *)arg2;
+ (_Bool)setConfiguration:(struct __CFDictionary *)arg1 forProtocol:(struct __CFString *)arg2 inService:(struct __SCNetworkService *)arg3;
+ (_Bool)removeSCServiceWithIdentifier:(id)arg1 fromPreferences:(struct __SCPreferences *)arg2;
+ (_Bool)SCServiceWithIdentifier:(id)arg1 existsInPreferences:(struct __SCPreferences *)arg2;
@property(copy) NEProfileIngestionPayloadInfo *payloadInfo; // @synthesize payloadInfo=_payloadInfo;
@property(copy) NEContentFilter *contentFilter; // @synthesize contentFilter=_contentFilter;
@property(copy) NEVPNApp *appVPN; // @synthesize appVPN=_appVPN;
@property(copy) NEAOVPN *alwaysOnVPN; // @synthesize alwaysOnVPN=_alwaysOnVPN;
@property(copy) NEVPN *VPN; // @synthesize VPN=_VPN;
@property(copy) NSString *externalIdentifier; // @synthesize externalIdentifier=_externalIdentifier;
@property(copy) NSString *applicationIdentifier; // @synthesize applicationIdentifier=_applicationIdentifier;
@property(copy) NSString *applicationName; // @synthesize applicationName=_applicationName;
@property(copy) NSString *name; // @synthesize name=_name;
@property(copy) NSString *application; // @synthesize application=_application;
@property(readonly) NSUUID *identifier; // @synthesize identifier=_identifier;
@property(readonly) long long grade; // @synthesize grade=_grade;
- (void).cxx_destruct;
- (void)copyPasswordsFromSystemKeychain;
@property(readonly) NSString *pluginType;
- (id)copyProfileDictionary;
- (void)clearUserKeychain;
- (void)clearSystemKeychain;
- (void)clearKeychainInDomain:(long long)arg1;
- (void)syncWithUserKeychain;
- (void)syncWithSystemKeychain;
- (void)syncWithKeychainInDomain:(long long)arg1;
- (id)description;
- (id)generateSignature;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithConfiguration:(id)arg1;
- (id)initWithName:(id)arg1 grade:(long long)arg2;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)setAppLayerVPNUUID:(id)arg1 andSafariDomains:(id)arg2;
- (_Bool)setAppLayerVPNRuleSettings:(id)arg1 withAppIdentifier:(id)arg2;
- (_Bool)setProfileInfo:(id)arg1;
- (_Bool)setPayloadInfoCommon:(id)arg1 payloadOrganization:(id)arg2;
- (_Bool)setPayloadInfoIdentity:(id)arg1;
- (_Bool)setPayloadInfoIdentityPIN:(id)arg1;
- (_Bool)setPayloadInfoIdentityIPSecSharedSecret:(id)arg1;
- (_Bool)setPayloadInfoIdentityProxy:(id)arg1;
- (_Bool)setPayloadInfoIdentityUserNameAndPassword:(id)arg1;
- (_Bool)setConfigurationSharedSecret:(id)arg1;
- (_Bool)setConfigurationHTTPPassword:(id)arg1;
- (_Bool)setConfigurationVPNPassword:(id)arg1;
- (id)getConfigurationPasswordPersist:(id)arg1 account:(id)arg2 description:(id)arg3;
- (_Bool)setConfigurationPassword:(id)arg1 account:(id)arg2 password:(id)arg3 description:(id)arg4;
- (id)getConfigurationIdentifier;
- (id)getPendingCertificateUUIDs:(id)arg1;
- (id)getPendingCertificateUUIDsContentFilter:(id)arg1;
- (id)getPendingCertificateUUIDsAOVpn:(id)arg1;
- (id)getPendingCertificateUUIDsAppVPN:(id)arg1;
- (id)getPendingCertificateUUIDsVPN:(id)arg1;
- (_Bool)setCertificates:(id)arg1;
- (_Bool)setCertificateContentFilter:(id)arg1;
- (_Bool)setCertificatesVPN:(id)arg1;
- (_Bool)setCertificatesAppVPN:(id)arg1;
- (_Bool)setCertificatesAOVpn:(id)arg1;
- (id)initWithContentFilterPayload:(id)arg1 configurationName:(id)arg2;
- (id)initWithAlwaysOnVPNPayload:(id)arg1 configurationName:(id)arg2;
- (id)configureAOVPNTunnelFromTunnelDict:(id)arg1 payloadBase:(id)arg2;
- (id)initWithAppLayerVPNPayload:(id)arg1 configurationName:(id)arg2;
- (id)initWithVPNPayload:(id)arg1 configurationName:(id)arg2;
- (_Bool)ingestIPSecDict:(id)arg1 vpnType:(id)arg2 vpn:(id)arg3;
- (_Bool)ingestPPPData:(id)arg1 vnpType:(id)arg2;
- (_Bool)configureVpnOnDemand:(id)arg1 vpnType:(id)arg2;
- (_Bool)configureVpnOnDemandRules:(id)arg1;
- (_Bool)configureIKE:(id)arg1 vpnType:(id)arg2 payloadBase:(id)arg3 vpn:(id)arg4;
- (_Bool)ingestProxyOptions:(id)arg1;
- (_Bool)configurePPPWithVPNOptions:(id)arg1 payloadBase:(id)arg2;
- (_Bool)configurePPTPWithPPPOptions:(id)arg1;
- (_Bool)configureL2TPWithPPPOptions:(id)arg1;
- (_Bool)configurePPPCommon:(id)arg1;
- (_Bool)ingestPPPDict:(id)arg1;
- (_Bool)ingestDNSOptions:(id)arg1;
- (_Bool)ingestDisconnectOptions:(id)arg1;
- (_Bool)configurePluginWithPayload:(id)arg1 pluginType:(id)arg2 payloadType:(id)arg3;
- (id)getConfigurationProtocol;
- (_Bool)updateFromSCService:(struct __SCNetworkService *)arg1;
- (id)initFromSCService:(struct __SCNetworkService *)arg1;
- (_Bool)applyChangesToSCServiceInPreferences:(struct __SCPreferences *)arg1;
- (_Bool)isSupportedBySC;

@end

@interface NEConfigurationManager : NSObject
{
    NSString *_description;
    NEHelper *_helper;
    _Bool _hasVPNAPIEntitlement;
    _Bool _hasReadPermission;
    _Bool _isVPNPublicAPI;
    _Bool _isNEHelper;
    int _changedNotifyToken;
    NSUUID *_userUUID;
    id <NEConfigurationManagerDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_queue;
    NSDictionary *_currentIndex;
    NSObject<OS_dispatch_queue> *_changedQueue;
    CDUnknownBlockType _changedHandler;
    NSMutableDictionary *_loadedIndex;
    NSMutableDictionary *_loadedConfigurations;
    NSKeyedUnarchiver *_decoder;
    long long _generation;
    NSData *_SCPreferencesSignature;
    NSString *_pluginType;
}

+ (void)disableConfiguration:(id)arg1 onDemandOnly:(_Bool)arg2;
+ (long long)configuration:(id)arg1 overlapsWithOtherConfiguration:(id)arg2;
+ (_Bool)configurationIsEnabled:(id)arg1;
+ (void)updateFlags:(unsigned long long *)arg1 withConfiguration:(id)arg2;
+ (id)sharedManagerForAllUsers;
+ (id)sharedManager;
@property _Bool isNEHelper; // @synthesize isNEHelper=_isNEHelper;
@property _Bool isVPNPublicAPI; // @synthesize isVPNPublicAPI=_isVPNPublicAPI;
@property _Bool hasReadPermission; // @synthesize hasReadPermission=_hasReadPermission;
@property(readonly) NSString *pluginType; // @synthesize pluginType=_pluginType;
@property(retain) NSData *SCPreferencesSignature; // @synthesize SCPreferencesSignature=_SCPreferencesSignature;
@property long long generation; // @synthesize generation=_generation;
@property(retain) NSKeyedUnarchiver *decoder; // @synthesize decoder=_decoder;
@property(retain) NSMutableDictionary *loadedConfigurations; // @synthesize loadedConfigurations=_loadedConfigurations;
@property(retain) NSMutableDictionary *loadedIndex; // @synthesize loadedIndex=_loadedIndex;
@property(copy) CDUnknownBlockType changedHandler; // @synthesize changedHandler=_changedHandler;
@property(retain) NSObject<OS_dispatch_queue> *changedQueue; // @synthesize changedQueue=_changedQueue;
@property(retain) NSDictionary *currentIndex; // @synthesize currentIndex=_currentIndex;
@property int changedNotifyToken; // @synthesize changedNotifyToken=_changedNotifyToken;
@property(readonly) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain) id <NEConfigurationManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) NSUUID *userUUID; // @synthesize userUUID=_userUUID;
@property _Bool hasVPNAPIEntitlement; // @synthesize hasVPNAPIEntitlement=_hasVPNAPIEntitlement;
- (void).cxx_destruct;
- (void)copyIdentities:(id)arg1 fromDomain:(long long)arg2 withCompletionQueue:(id)arg3 handler:(CDUnknownBlockType)arg4;
- (void)handleApplicationsRemoved:(id)arg1 pluginTypesRemoved:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)handlePluginTypesRemoved:(id)arg1 configuration:(id)arg2 vpn:(id)arg3 updateSCPreferences:(struct __SCPreferences *)arg4;
- (void)handleFileRemovedWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setChangedQueue:(id)arg1 andHandler:(CDUnknownBlockType)arg2;
- (void)removeConfiguration:(id)arg1 withCompletionQueue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)saveConfiguration:(id)arg1 withCompletionQueue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (_Bool)resetKeychainItemsAfterProtocolChange:(id)arg1 newConfiguration:(id)arg2;
- (void)loadConfigurationsWithCompletionQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)loadConfigurationWithID:(id)arg1 withCompletionQueue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)loadConfigurations:(id)arg1 withFilter:(id)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)loadConfigurationsInternal:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)loadIndexWithFilter:(id)arg1 completionQueue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)syncWithSystemConfigurationWithAppNameCallback:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)updateSCPreferencesSignatureOnDisk;
- (void)removeConfigurationFromDisk:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)removeConfigurationFromDisk:(id)arg1 updateSCPreferences:(struct __SCPreferences *)arg2;
- (void)saveConfigurationToDisk:(id)arg1 currentSignature:(id)arg2 userUUID:(id)arg3 completionQueue:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (id)saveConfigurationToDisk:(id)arg1 updateSCPreferences:(struct __SCPreferences *)arg2 currentSignature:(id)arg3 userUUID:(id)arg4;
- (void)postChangeNotificationWithGeneration:(long long)arg1 andFlags:(unsigned long long)arg2;
- (id)makeMutableCopyOfIndex:(id)arg1;
- (id)filterIndexWithFilter:(id)arg1;
- (id)readIndexFromDiskWithError:(id *)arg1;
- (id)copyChangedConfigurationIDs:(id)arg1;
- (_Bool)configurationHasChanged:(id)arg1;
- (void)clearLoadedConfigurationsWithIDs:(id)arg1;
- (void)didLoadConfiguration:(id)arg1;
- (void)didLoadConfiguration:(id)arg1 withSignature:(id)arg2;
- (void)registerForChangeNotifications;
- (void)notifyChanges;
- (void)getCurrentIndexWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)reloadFromDisk;
- (void)postGeneration;
- (void)sendRequest:(id)arg1 responseHandler:(CDUnknownBlockType)arg2;
@property(readonly) NEHelper *helper;
- (id)decodeConfigurationWithIdentifier:(id)arg1;
- (id)errorWithCode:(long long)arg1 specifics:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)initWithPluginType:(id)arg1;
- (id)init;
- (id)initWithUserUUID:(id)arg1;

@end

@interface NEContentFilter : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
{
    _Bool _enabled;
    NEContentFilterPlugin *_plugin;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NEContentFilterPlugin *plugin; // @synthesize plugin=_plugin;
@property(getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface NEContentFilterPlugin : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
{
    _Bool _filterBrowsers;
    _Bool _filterSockets;
    NSString *_pluginType;
    NSDictionary *_vendorConfiguration;
    NSString *_serverAddress;
    NSString *_username;
    NSString *_organization;
    NSData *_passwordReference;
    NSData *_identityReference;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSData *identityReference; // @synthesize identityReference=_identityReference;
@property(copy) NSData *passwordReference; // @synthesize passwordReference=_passwordReference;
@property(copy) NSString *organization; // @synthesize organization=_organization;
@property(copy) NSString *username; // @synthesize username=_username;
@property(copy) NSString *serverAddress; // @synthesize serverAddress=_serverAddress;
@property(copy) NSDictionary *vendorConfiguration; // @synthesize vendorConfiguration=_vendorConfiguration;
@property _Bool filterSockets; // @synthesize filterSockets=_filterSockets;
@property _Bool filterBrowsers; // @synthesize filterBrowsers=_filterBrowsers;
@property(readonly) NSString *pluginType; // @synthesize pluginType=_pluginType;
- (void).cxx_destruct;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPluginType:(id)arg1;
- (void)setPluginType:(id)arg1;

@end

@interface NEDNSSettings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    NSArray *_servers;
    NSArray *_searchDomains;
}

+ (_Bool)supportsSecureCoding;
@property(readonly) NSArray *searchDomains; // @synthesize searchDomains=_searchDomains;
@property(readonly) NSArray *servers; // @synthesize servers=_servers;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithServers:(id)arg1 andSearchDomains:(id)arg2;

@end

@interface NEEvaluateConnectionRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    long long _action;
    NSArray *_matchDomains;
    NSArray *_useDNSServers;
    NSURL *_probeURL;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSURL *probeURL; // @synthesize probeURL=_probeURL;
@property(copy) NSArray *useDNSServers; // @synthesize useDNSServers=_useDNSServers;
@property(readonly) NSArray *matchDomains; // @synthesize matchDomains=_matchDomains;
@property(readonly) long long action; // @synthesize action=_action;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMatchDomains:(id)arg1 andAction:(long long)arg2;

@end

@interface NEFilterManager : NSObject
{
    _Bool _hasLoaded;
    NSArray *_entitlements;
    NEConfiguration *_configuration;
    NEConfigurationManager *_configurationManager;
}

+ (id)sharedManager;
@property(readonly) NEConfigurationManager *configurationManager; // @synthesize configurationManager=_configurationManager;
@property(retain) NEConfiguration *configuration; // @synthesize configuration=_configuration;
@property(retain) NSArray *entitlements; // @synthesize entitlements=_entitlements;
@property _Bool hasLoaded; // @synthesize hasLoaded=_hasLoaded;
- (void).cxx_destruct;
@property(copy) NSString *localizedDescription;
@property(getter=isEnabled) _Bool enabled;
@property(retain) NEContentFilterPlugin *pluginConfiguration;
- (void)saveToPreferencesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeFromPreferencesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadFromPreferencesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initFilterManager;
- (void)createEmptyConfiguration;
- (id)init;

@end

@interface NEFilterSource : NSObject
{
    _Bool _registered;
    long long _status;
    NSURL *_url;
    long long _direction;
    unsigned long long _socketIdentifier;
    NSMutableData *_pendingData;
    NSUUID *_flowUUID;
    unsigned long long _pendingDataStartIndex;
    unsigned long long _peekIndex;
    unsigned long long _passLength;
}

+ (_Bool)filterRequired;
+ (void)connectToAgentWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (unsigned int)filterUnit;
+ (unsigned int)checkPolicyFilterUnit;
+ (void)initializeGlobals;
@property unsigned long long passLength; // @synthesize passLength=_passLength;
@property unsigned long long peekIndex; // @synthesize peekIndex=_peekIndex;
@property unsigned long long pendingDataStartIndex; // @synthesize pendingDataStartIndex=_pendingDataStartIndex;
@property(retain) NSUUID *flowUUID; // @synthesize flowUUID=_flowUUID;
@property(retain) NSMutableData *pendingData; // @synthesize pendingData=_pendingData;
@property _Bool registered; // @synthesize registered=_registered;
@property(readonly) unsigned long long socketIdentifier; // @synthesize socketIdentifier=_socketIdentifier;
@property(readonly) long long direction; // @synthesize direction=_direction;
@property(readonly) NSURL *url; // @synthesize url=_url;
@property(readonly) long long status; // @synthesize status=_status;
- (void).cxx_destruct;
- (void)dataCompleteWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)addData:(id)arg1 withCompletionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (_Bool)sendDataToPluginWithConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)initWithURL:(id)arg1 direction:(long long)arg2 socketIdentifier:(unsigned long long)arg3;
- (void)prepareAgentWithHandler:(CDUnknownBlockType)arg1;

@end

@interface NEHasher : NSCoder
{
    struct CC_SHA1state_st *_sha1Context;
}

+ (id)hashObject:(id)arg1;
@property struct CC_SHA1state_st *sha1Context; // @synthesize sha1Context=_sha1Context;
- (id)decodePropertyListForKey:(id)arg1;
- (id)decodeObjectOfClasses:(id)arg1 forKey:(id)arg2;
- (id)decodeObjectOfClass:(Class)arg1 forKey:(id)arg2;
- (id)decodeObjectForKey:(id)arg1;
- (int)decodeIntForKey:(id)arg1;
- (long long)decodeIntegerForKey:(id)arg1;
- (long long)decodeInt64ForKey:(id)arg1;
- (int)decodeInt32ForKey:(id)arg1;
- (float)decodeFloatForKey:(id)arg1;
- (double)decodeDoubleForKey:(id)arg1;
- (const char *)decodeBytesForKey:(id)arg1 returnedLength:(unsigned long long *)arg2;
- (_Bool)decodeBoolForKey:(id)arg1;
- (id)decodeDataObject;
- (void)decodeValueOfObjCType:(const char *)arg1 at:(void *)arg2;
- (void)encodeObject:(id)arg1 forKey:(id)arg2;
- (void)encodeInt64:(long long)arg1 forKey:(id)arg2;
- (void)encodeInt32:(int)arg1 forKey:(id)arg2;
- (void)encodeInteger:(long long)arg1 forKey:(id)arg2;
- (void)encodeFloat:(float)arg1 forKey:(id)arg2;
- (void)encodeInt:(int)arg1 forKey:(id)arg2;
- (void)encodeDouble:(double)arg1 forKey:(id)arg2;
- (void)encodeConditionalObject:(id)arg1 forKey:(id)arg2;
- (void)encodeBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)encodeBytes:(const char *)arg1 length:(unsigned long long)arg2 forKey:(id)arg3;
- (void)encodeBool:(_Bool)arg1 forKey:(id)arg2;
- (void)encodeDataObject:(id)arg1;
- (void)encodeValueOfObjCType:(const char *)arg1 at:(const void *)arg2;
- (long long)versionForClassName:(id)arg1;
- (_Bool)containsValueForKey:(id)arg1;
- (_Bool)allowsKeyedCoding;
- (id)finishHashing;
- (void)dealloc;
- (id)init;

@end

@interface NEHelper : NSObject
{
    NSObject<OS_xpc_object> *_connection;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_xpc_object> *_initMessage;
}

@property(readonly) NSObject<OS_xpc_object> *initMessage; // @synthesize initMessage=_initMessage;
@property(readonly) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void).cxx_destruct;
- (void)sendRequest:(id)arg1 responseHandler:(CDUnknownBlockType)arg2;
- (id)connection;
- (void)dealloc;
- (id)initWithDelegateClassName:(id)arg1 queue:(id)arg2;

@end

@interface NEIPC : NSObject
{
    int _socket;
    NSObject<OS_dispatch_io> *_socket_io;
    NSObject<OS_dispatch_data> *_previousData;
    CDUnknownBlockType _messageHandler;
}

@property(copy) CDUnknownBlockType messageHandler; // @synthesize messageHandler=_messageHandler;
@property(retain) NSObject<OS_dispatch_data> *previousData; // @synthesize previousData=_previousData;
@property(retain) NSObject<OS_dispatch_io> *socket_io; // @synthesize socket_io=_socket_io;
@property int socket; // @synthesize socket=_socket;
- (void).cxx_destruct;
- (void)logMessageType:(unsigned int)arg1 data:(id)arg2 actionString:(id)arg3;
- (_Bool)sendMessageWithType:(unsigned int)arg1 data:(id)arg2 andQueue:(id)arg3;
- (void)stop;
- (void)startWithQueue:(id)arg1 messageHandler:(CDUnknownBlockType)arg2;
- (_Bool)parseMessageFromData:(id)arg1 messageHeader:(CDStruct_c0454aff *)arg2 messageData:(id *)arg3;
- (id)initWithSocket:(int)arg1;

@end

@interface NEIPCHandle : NSObject
{
    NEIPC *_primary_ipc;
    NEIPC *_secondary_ipc;
    NSUUID *_config_id;
    struct __CFArray *_configurations;
    struct ipc_queue *_send_queue;
}

+ (_Bool)sendMessageWithType:(unsigned int)arg1 data:(struct __CFData *)arg2 forConfiguration:(struct _VPNConfigurationPrivate *)arg3;
+ (void)deregisterConfiguration:(struct _VPNConfigurationPrivate *)arg1;
@property struct ipc_queue *send_queue; // @synthesize send_queue=_send_queue;
@property struct __CFArray *configurations; // @synthesize configurations=_configurations;
@property NSUUID *config_id; // @synthesize config_id=_config_id;
@property NEIPC *secondary_ipc; // @synthesize secondary_ipc=_secondary_ipc;
@property NEIPC *primary_ipc; // @synthesize primary_ipc=_primary_ipc;
- (id)createIPCFromSocket:(int)arg1;
- (_Bool)sendMessage:(struct __CFData *)arg1 withType:(unsigned int)arg2;
- (void)addConfiguration:(struct _VPNConfigurationPrivate *)arg1;
- (void)removeConfiguration:(struct _VPNConfigurationPrivate *)arg1;
- (long long)getIndexOfConfiguration:(struct _VPNConfigurationPrivate *)arg1;
- (void)dealloc;
- (id)initWithConfiguration:(struct _VPNConfigurationPrivate *)arg1;

@end

@interface NEIPv4Settings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    _Bool _overridePrimary;
    long long _configMethod;
    NSString *_address;
    NSString *_subnetMask;
    NSString *_router;
}

+ (_Bool)supportsSecureCoding;
@property _Bool overridePrimary; // @synthesize overridePrimary=_overridePrimary;
@property(copy) NSString *router; // @synthesize router=_router;
@property(copy) NSString *subnetMask; // @synthesize subnetMask=_subnetMask;
@property(copy) NSString *address; // @synthesize address=_address;
@property long long configMethod; // @synthesize configMethod=_configMethod;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEIPv6Settings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    int _prefixLength;
    long long _configMethod;
    NSString *_router;
    NSString *_address;
}

+ (_Bool)supportsSecureCoding;
@property int prefixLength; // @synthesize prefixLength=_prefixLength;
@property(copy) NSString *address; // @synthesize address=_address;
@property(copy) NSString *router; // @synthesize router=_router;
@property long long configMethod; // @synthesize configMethod=_configMethod;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEKeychainItem : NSObject <NEPrettyDescription, NSCopying, NSSecureCoding>
{
    NSString *_password;
    NSString *_identifier;
    NSData *_persistentReference;
    _Bool _legacy;
    long long _domain;
    NEKeychainItem *_oldItem;
}

+ (_Bool)supportsSecureCoding;
@property(readonly) _Bool legacy; // @synthesize legacy=_legacy;
@property(copy) NEKeychainItem *oldItem; // @synthesize oldItem=_oldItem;
@property(readonly) long long domain; // @synthesize domain=_domain;
- (void).cxx_destruct;
- (void)migrateFromPreferences:(struct __SCPreferences *)arg1;
- (void)syncUsingConfiguration:(id)arg1 accountName:(id)arg2 passwordType:(long long)arg3 identifierSuffix:(id)arg4;
- (void)remove;
- (void)addOrUpdateWithConfiguration:(id)arg1 passwordType:(long long)arg2 accountName:(id)arg3 identifierSuffix:(id)arg4;
- (id)copyKindForPasswordType:(long long)arg1;
- (id)copyPassword;
- (_Bool)copyDataFromKeychainItem:(void *)arg1 outPassword:(id *)arg2 outIdentifier:(id *)arg3 outPersistentReference:(id *)arg4;
@property(copy) NSString *password;
@property(copy) NSData *persistentReference;
- (void)setIdentifierInternal:(id)arg1;
@property(copy) NSString *identifier;
- (id)descriptionWithIndent:(int)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithLegacyIdentifier:(id)arg1 domain:(long long)arg2;
- (id)initWithPersistentReference:(id)arg1 domain:(long long)arg2;
- (id)initWithIdentifier:(id)arg1 domain:(long long)arg2;
- (id)initWithPassword:(id)arg1 domain:(long long)arg2;

@end

@interface NEIdentityKeychainItem : NEKeychainItem
{
}

+ (id)copyIdentities:(id)arg1 fromDomain:(long long)arg2;
+ (id)copyPropertiesForIdentity:(struct __SecIdentity *)arg1 persistentReference:(id)arg2;
+ (id)copyPersistentReferenceForIdentity:(struct __SecIdentity *)arg1;
- (void)sync;
- (id)copyPassword;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)syncUsingConfiguration:(id)arg1 accountName:(id)arg2 passwordType:(long long)arg3 identifierSuffix:(id)arg4;
- (id)initWithIdentifier:(id)arg1 domain:(long long)arg2;
- (id)initWithPassword:(id)arg1 domain:(long long)arg2;

@end

@interface NEOnDemandRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    long long _action;
    NSArray *_DNSSearchDomainMatch;
    NSArray *_DNSServerAddressMatch;
    long long _interfaceTypeMatch;
    NSArray *_SSIDMatch;
    NSURL *_probeURL;
}

+ (id)createOnDemandRulesFromLegacyDictionary:(id)arg1;
+ (_Bool)supportsSecureCoding;
@property(copy) NSURL *probeURL; // @synthesize probeURL=_probeURL;
@property(copy) NSArray *SSIDMatch; // @synthesize SSIDMatch=_SSIDMatch;
@property long long interfaceTypeMatch; // @synthesize interfaceTypeMatch=_interfaceTypeMatch;
@property(copy) NSArray *DNSServerAddressMatch; // @synthesize DNSServerAddressMatch=_DNSServerAddressMatch;
@property(copy) NSArray *DNSSearchDomainMatch; // @synthesize DNSSearchDomainMatch=_DNSSearchDomainMatch;
@property(readonly) long long action; // @synthesize action=_action;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)description;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithAction:(long long)arg1;

@end

@interface NEOnDemandRuleConnect : NEOnDemandRule
{
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface NEOnDemandRuleDisconnect : NEOnDemandRule
{
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface NEOnDemandRuleEvaluateConnection : NEOnDemandRule
{
    NSArray *_connectionRules;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSArray *connectionRules; // @synthesize connectionRules=_connectionRules;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEOnDemandRuleIgnore : NEOnDemandRule
{
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface NEPluginPreferences : NSObject
{
    struct __SCPreferences *_prefs;
    NSString *_pluginType;
}

+ (void)removePreferencesForPluginType:(id)arg1;
@property(readonly) NSString *pluginType; // @synthesize pluginType=_pluginType;
@property struct __SCPreferences *prefs; // @synthesize prefs=_prefs;
- (void).cxx_destruct;
- (struct __CFDictionary *)copyPersistentDataOfType:(long long)arg1 configurationIdentifier:(id)arg2;
- (_Bool)setPreferences:(struct __CFDictionary *)arg1 ofType:(long long)arg2 configurationIdentifier:(id)arg3;
- (_Bool)isFlagSet:(struct __CFString *)arg1;
- (id)copyAppURL;
- (void)setPluginTypeEnabled:(_Bool)arg1 appURLData:(id)arg2;
- (_Bool)isPluginTypeEnabled;
- (void)dealloc;
- (id)initWithPluginType:(id)arg1;

@end

@interface NEProfileIngestion : NSObject <NEProfileIngestionDelegate>
{
    NSString *_clientName;
    NSString *_payloadType;
    NEConfigurationManager *_manager;
    NSMutableArray *_currentConfigurations;
    NEConfiguration *_ingestedConfiguration;
}

+ (void)profileMigrationComplete;
+ (id)getServiceIDForPayload:(id)arg1;
@property(retain) NEConfiguration *ingestedConfiguration; // @synthesize ingestedConfiguration=_ingestedConfiguration;
@property(retain) NSMutableArray *currentConfigurations; // @synthesize currentConfigurations=_currentConfigurations;
@property(readonly) NEConfigurationManager *manager; // @synthesize manager=_manager;
@property(readonly) NSString *payloadType; // @synthesize payloadType=_payloadType;
@property(readonly) NSString *clientName; // @synthesize clientName=_clientName;
- (void).cxx_destruct;
- (_Bool)updateAppLayerVPNMappingRules:(id)arg1;
- (void)enableDefaultService;
- (void)unlockConfigurations;
- (_Bool)lockConfigurations;
- (_Bool)enableAlwaysOnVpn;
- (id)copyManagedConfigurationIDs;
- (_Bool)updateDefaultAfterDeletingConfiguration;
- (_Bool)updateDefaultAfterAddingConfiguration;
- (_Bool)removeIngestedConfiguration;
- (_Bool)removeConfigurationWithIdentifier:(id)arg1;
- (_Bool)removeConfiguration:(id)arg1;
- (_Bool)enableAlwaysOnVpnInternal:(_Bool)arg1;
- (_Bool)saveIngestedConfiguration;
- (_Bool)saveConfiguration:(id)arg1;
- (_Bool)createConfigurationFromPayload:(id)arg1 payloadType:(id)arg2;
- (_Bool)isInstalled:(id)arg1;
- (id)findConfigurationByConfigurationID:(id)arg1;
- (id)findConfigurationByPayloadUUID:(id)arg1;
- (id)setAsideConfigurationName:(id)arg1 unsetAside:(_Bool)arg2;
- (id)resolveConfigurationNameConflict:(id)arg1;
- (id)findConfigurationByName:(id)arg1;
- (_Bool)loadConfigurationsForceReloadFromDisk;
- (_Bool)loadConfigurationsWithRefreshOption:(_Bool)arg1;
- (void)dealloc;
- (id)initWithName:(id)arg1;
- (id)initWithNameAndType:(id)arg1 payloadType:(id)arg2;

@end

@interface NEProfileIngestionPayloadInfo : NSObject <NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    _Bool _isSetAside;
    _Bool _applicationCreated;
    NSString *_payloadProtocolType;
    NSString *_payloadUUID;
    NSString *_payloadOrganization;
    NSString *_profileOrganization;
    NSString *_profileIdentifier;
    NSString *_profileUUID;
}

+ (_Bool)supportsSecureCoding;
@property _Bool applicationCreated; // @synthesize applicationCreated=_applicationCreated;
@property _Bool isSetAside; // @synthesize isSetAside=_isSetAside;
@property(copy) NSString *profileUUID; // @synthesize profileUUID=_profileUUID;
@property(copy) NSString *profileIdentifier; // @synthesize profileIdentifier=_profileIdentifier;
@property(copy) NSString *profileOrganization; // @synthesize profileOrganization=_profileOrganization;
@property(copy) NSString *payloadOrganization; // @synthesize payloadOrganization=_payloadOrganization;
@property(copy) NSString *payloadUUID; // @synthesize payloadUUID=_payloadUUID;
@property(copy) NSString *payloadProtocolType; // @synthesize payloadProtocolType=_payloadProtocolType;
- (void).cxx_destruct;
- (id)copyLegacyDictionary;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)descriptionWithIndent:(int)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface NEProfilePayloadBase : NSObject <NEProfilePayloadBaseDelegate>
{
    NSDictionary *_payloadAtom;
    NSMutableDictionary *_pendingCertificates;
}

@property(copy, nonatomic) NSMutableDictionary *pendingCertificates; // @synthesize pendingCertificates=_pendingCertificates;
@property(retain, nonatomic) NSDictionary *payloadAtom; // @synthesize payloadAtom=_payloadAtom;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)addCertificatePending:(id)arg1 certificateTag:(id)arg2;
- (_Bool)setPostprocessedPayloadContents:(id)arg1;
- (id)getPreprocessedPayloadContents;
- (id)validatePayload;
- (id)initWithPayload:(id)arg1;

@end

@interface NEProfilePayloadAOVPN : NEProfilePayloadBase
{
}

- (id)validatePayload;

@end

@interface NEProfilePayloadBaseVPN : NEProfilePayloadBase
{
    _Bool _userNameRequired;
    _Bool _passwordRequired;
    _Bool _proxyUserNameRequired;
    _Bool _proxyPasswordRequired;
    _Bool _sharedSecretRequired;
    _Bool _pinRequired;
    NSString *_userName;
    NSString *_password;
    NSString *_proxyUserName;
    NSString *_proxyPassword;
    NSString *_sharedSecret;
    NSString *_pin;
}

@property(copy, nonatomic) NSString *pin; // @synthesize pin=_pin;
@property(copy, nonatomic) NSString *sharedSecret; // @synthesize sharedSecret=_sharedSecret;
@property(copy, nonatomic) NSString *proxyPassword; // @synthesize proxyPassword=_proxyPassword;
@property(copy, nonatomic) NSString *proxyUserName; // @synthesize proxyUserName=_proxyUserName;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *userName; // @synthesize userName=_userName;
@property(nonatomic) _Bool pinRequired; // @synthesize pinRequired=_pinRequired;
@property(nonatomic) _Bool sharedSecretRequired; // @synthesize sharedSecretRequired=_sharedSecretRequired;
@property(nonatomic) _Bool proxyPasswordRequired; // @synthesize proxyPasswordRequired=_proxyPasswordRequired;
@property(nonatomic) _Bool proxyUserNameRequired; // @synthesize proxyUserNameRequired=_proxyUserNameRequired;
@property(nonatomic) _Bool passwordRequired; // @synthesize passwordRequired=_passwordRequired;
@property(nonatomic) _Bool userNameRequired; // @synthesize userNameRequired=_userNameRequired;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)setPostprocessedPayloadContents:(id)arg1;
- (id)getPreprocessedPayloadContents;
- (id)validatePayload;
- (id)initWithPayload:(id)arg1;
- (void)extractPayloadContents:(id)arg1;
- (void)extractPayloadContentsPIN:(id)arg1;
- (void)extractPayloadContentsSharedSecret:(id)arg1;
- (void)extractPayloadContentsUserNamePassword:(id)arg1;
- (void)extractPayloadContentsHTTPProxy:(id)arg1;

@end

@interface NEProfilePayloadContentFilter : NEProfilePayloadBase
{
}

- (id)validatePayload;

@end

@interface NEProxyServer : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
{
    _Bool _authenticationRequired;
    int _port;
    NSString *_address;
    long long _type;
    NSString *_username;
    NSString *_password;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSString *password; // @synthesize password=_password;
@property(copy) NSString *username; // @synthesize username=_username;
@property _Bool authenticationRequired; // @synthesize authenticationRequired=_authenticationRequired;
@property(readonly) long long type; // @synthesize type=_type;
@property(readonly) int port; // @synthesize port=_port;
@property(readonly) NSString *address; // @synthesize address=_address;
- (void).cxx_destruct;
- (id)copyPassword;
- (void)syncWithKeychain;
- (id)copyProtectionSpace;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1 address:(id)arg2 port:(int)arg3;
- (id)initWithAddress:(id)arg1 andPort:(int)arg2;

@end

@interface NEProxySettings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    _Bool _autoProxyDiscovery;
    _Bool _autoProxyConfigurationEnabled;
    _Bool _HTTPEnabled;
    _Bool _HTTPSEnabled;
    _Bool _FTPEnabled;
    _Bool _SOCKSEnabled;
    _Bool _RTSPEnabled;
    _Bool _gopherEnabled;
    _Bool _excludeSimpleHostnames;
    _Bool _usePassiveFTP;
    NSURL *_proxyAutoConfigURL;
    NSString *_proxyAutoConfigJavaScript;
    NEProxyServer *_HTTPServer;
    NEProxyServer *_HTTPSServer;
    NEProxyServer *_FTPServer;
    NEProxyServer *_SOCKSServer;
    NEProxyServer *_RTSPServer;
    NEProxyServer *_gopherServer;
    NSArray *_exceptionList;
    NSArray *_supplementalMatchDomains;
    NSArray *_supplementalMatchOrders;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSArray *supplementalMatchOrders; // @synthesize supplementalMatchOrders=_supplementalMatchOrders;
@property(copy) NSArray *supplementalMatchDomains; // @synthesize supplementalMatchDomains=_supplementalMatchDomains;
@property _Bool usePassiveFTP; // @synthesize usePassiveFTP=_usePassiveFTP;
@property(copy) NSArray *exceptionList; // @synthesize exceptionList=_exceptionList;
@property _Bool excludeSimpleHostnames; // @synthesize excludeSimpleHostnames=_excludeSimpleHostnames;
@property(copy) NEProxyServer *gopherServer; // @synthesize gopherServer=_gopherServer;
@property _Bool gopherEnabled; // @synthesize gopherEnabled=_gopherEnabled;
@property(copy) NEProxyServer *RTSPServer; // @synthesize RTSPServer=_RTSPServer;
@property _Bool RTSPEnabled; // @synthesize RTSPEnabled=_RTSPEnabled;
@property(copy) NEProxyServer *SOCKSServer; // @synthesize SOCKSServer=_SOCKSServer;
@property _Bool SOCKSEnabled; // @synthesize SOCKSEnabled=_SOCKSEnabled;
@property(copy) NEProxyServer *FTPServer; // @synthesize FTPServer=_FTPServer;
@property _Bool FTPEnabled; // @synthesize FTPEnabled=_FTPEnabled;
@property(copy) NEProxyServer *HTTPSServer; // @synthesize HTTPSServer=_HTTPSServer;
@property _Bool HTTPSEnabled; // @synthesize HTTPSEnabled=_HTTPSEnabled;
@property(copy) NEProxyServer *HTTPServer; // @synthesize HTTPServer=_HTTPServer;
@property _Bool HTTPEnabled; // @synthesize HTTPEnabled=_HTTPEnabled;
@property(copy) NSString *proxyAutoConfigJavaScript; // @synthesize proxyAutoConfigJavaScript=_proxyAutoConfigJavaScript;
@property(copy) NSURL *proxyAutoConfigURL; // @synthesize proxyAutoConfigURL=_proxyAutoConfigURL;
@property _Bool autoProxyConfigurationEnabled; // @synthesize autoProxyConfigurationEnabled=_autoProxyConfigurationEnabled;
@property _Bool autoProxyDiscovery; // @synthesize autoProxyDiscovery=_autoProxyDiscovery;
- (void).cxx_destruct;
- (void)removeKeychainItems;
- (void)syncWithKeychain;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEUserNotification : NSObject
{
    _Bool _isBanner;
    struct __CFUserNotification *_notification;
    struct __CFRunLoopSource *_notificationSource;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    CDUnknownBlockType _callback;
}

@property(copy, nonatomic) CDUnknownBlockType callback; // @synthesize callback=_callback;
@property(retain) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property struct __CFRunLoopSource *notificationSource; // @synthesize notificationSource=_notificationSource;
@property struct __CFUserNotification *notification; // @synthesize notification=_notification;
@property _Bool isBanner; // @synthesize isBanner=_isBanner;
- (void).cxx_destruct;
- (void)cancel;
- (_Bool)postNotificationWithCallbackQueue:(id)arg1 callbackHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initAuthenticationWithHeader:(id)arg1 options:(id)arg2 flags:(unsigned long long)arg3;
- (id)initBannerWithHeader:(id)arg1 message:(id)arg2 disagreeMessage:(id)arg3;

@end

@interface NEVPN : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    _Bool _enabled;
    _Bool _onDemandEnabled;
    NSArray *_onDemandRules;
    NEVPNProtocol *_protocol;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NEVPNProtocol *protocol; // @synthesize protocol=_protocol;
@property(copy) NSArray *onDemandRules; // @synthesize onDemandRules=_onDemandRules;
@property(getter=isOnDemandEnabled) _Bool onDemandEnabled; // @synthesize onDemandEnabled=_onDemandEnabled;
@property(getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyProfileDictionaryWithCertificateUUID:(id)arg1;
- (id)copyLegacyDictionary;
- (id)description;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNApp : NEVPN
{
    NSArray *_appRules;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSArray *appRules; // @synthesize appRules=_appRules;
- (void).cxx_destruct;
- (id)copyAppRuleIDs;
- (_Bool)removeAppRuleByID:(id)arg1;
- (id)copyAppRuleBySigningIdentifier:(id)arg1;
- (id)copyAppRuleByID:(id)arg1;
- (id)copyLegacyDictionary;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNAppRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    NSString *_identifier;
    NSArray *_matchExecutables;
    NSArray *_matchDomains;
    NSArray *_matchAccountIdentifiers;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSArray *matchAccountIdentifiers; // @synthesize matchAccountIdentifiers=_matchAccountIdentifiers;
@property(copy) NSArray *matchDomains; // @synthesize matchDomains=_matchDomains;
@property(copy) NSArray *matchExecutables; // @synthesize matchExecutables=_matchExecutables;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (_Bool)overlapsWithRule:(id)arg1;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;

@end

@interface NEVPNAppRuleExecutable : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    _Bool _requiresDomains;
    NSString *_matchSigningIdentifier;
    NSString *_matchDesignatedRequirement;
    NSString *_matchPath;
}

+ (_Bool)supportsSecureCoding;
@property(readonly) _Bool requiresDomains; // @synthesize requiresDomains=_requiresDomains;
@property(copy) NSString *matchPath; // @synthesize matchPath=_matchPath;
@property(readonly) NSString *matchDesignatedRequirement; // @synthesize matchDesignatedRequirement=_matchDesignatedRequirement;
@property(readonly) NSString *matchSigningIdentifier; // @synthesize matchSigningIdentifier=_matchSigningIdentifier;
- (void).cxx_destruct;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSigningIdentifier:(id)arg1 andDesignatedRequirement:(id)arg2;

@end

@interface NEVPNConnection : NSObject
{
    long long _status;
    void *_session;
}

@property void *session; // @synthesize session=_session;
@property(readonly) long long status; // @synthesize status=_status;
- (void)destroySession;
- (void)newSessionWithConfigID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)stopVPNTunnel;
- (_Bool)startVPNTunnelAndReturnError:(id *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface NEVPNIKEv1ProposalParameters : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
{
    int _diffieHellmanGroup;
    int _lifetimeSeconds;
    long long _encryptionAlgorithm;
    long long _integrityAlgorithm;
}

+ (_Bool)supportsSecureCoding;
@property int lifetimeSeconds; // @synthesize lifetimeSeconds=_lifetimeSeconds;
@property int diffieHellmanGroup; // @synthesize diffieHellmanGroup=_diffieHellmanGroup;
@property long long integrityAlgorithm; // @synthesize integrityAlgorithm=_integrityAlgorithm;
@property long long encryptionAlgorithm; // @synthesize encryptionAlgorithm=_encryptionAlgorithm;
- (id)copyLegacyDictionary;
- (id)initFromLegacyDictionary:(id)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)descriptionWithIndent:(int)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNIKEv2SecurityAssociationParameters : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
{
    int _lifetimeMinutes;
    long long _encryptionAlgorithm;
    long long _integrityAlgorithm;
    long long _diffieHellmanGroup;
}

+ (_Bool)supportsSecureCoding;
@property int lifetimeMinutes; // @synthesize lifetimeMinutes=_lifetimeMinutes;
@property long long diffieHellmanGroup; // @synthesize diffieHellmanGroup=_diffieHellmanGroup;
@property long long integrityAlgorithm; // @synthesize integrityAlgorithm=_integrityAlgorithm;
@property long long encryptionAlgorithm; // @synthesize encryptionAlgorithm=_encryptionAlgorithm;
- (id)copyDictionary;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)descriptionWithIndent:(int)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNManager : NSObject
{
    _Bool _hasLoaded;
    NSString *_localizedDescription;
    NEVPNConnection *_connection;
    NEConfiguration *_configuration;
    NEConfigurationManager *_configurationManager;
}

+ (id)sharedManager;
@property(readonly) NEConfigurationManager *configurationManager; // @synthesize configurationManager=_configurationManager;
@property _Bool hasLoaded; // @synthesize hasLoaded=_hasLoaded;
@property(copy) NEConfiguration *configuration; // @synthesize configuration=_configuration;
@property(readonly) NEVPNConnection *connection; // @synthesize connection=_connection;
@property(copy) NSString *localizedDescription; // @synthesize localizedDescription=_localizedDescription;
- (void).cxx_destruct;
@property(getter=isEnabled) _Bool enabled;
@property(getter=isOnDemandEnabled) _Bool onDemandEnabled;
@property(copy) NSArray *onDemandRules;
@property(retain) NEVPNProtocol *protocol;
- (void)saveToPreferencesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeFromPreferencesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadFromPreferencesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initVPNManager;
- (id)init;

@end

@interface NEVPNProtocol : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSCopying, NSSecureCoding>
{
    _Bool _disconnectOnSleep;
    _Bool _disconnectOnWake;
    _Bool _identityDataImported;
    _Bool _disconnectOnIdle;
    _Bool _disconnectOnUserSwitch;
    _Bool _disconnectOnLogout;
    int _disconnectOnWakeTimeout;
    int _disconnectOnIdleTimeout;
    NSString *_serverAddress;
    NSString *_username;
    NSString *_identityDataPassword;
    NSUUID *_identifier;
    long long _type;
    NEKeychainItem *_passwordKeychainItem;
    NSString *_passwordEncryption;
    NEProxySettings *_proxySettings;
    NSData *_identityDataInternal;
    NSData *_identityDataHash;
    long long _keychainDomain;
    NEIdentityKeychainItem *_identity;
}

+ (_Bool)supportsSecureCoding;
@property(retain) NEIdentityKeychainItem *identity; // @synthesize identity=_identity;
@property long long keychainDomain; // @synthesize keychainDomain=_keychainDomain;
@property _Bool disconnectOnLogout; // @synthesize disconnectOnLogout=_disconnectOnLogout;
@property _Bool disconnectOnUserSwitch; // @synthesize disconnectOnUserSwitch=_disconnectOnUserSwitch;
@property int disconnectOnIdleTimeout; // @synthesize disconnectOnIdleTimeout=_disconnectOnIdleTimeout;
@property _Bool disconnectOnIdle; // @synthesize disconnectOnIdle=_disconnectOnIdle;
@property(copy) NSData *identityDataHash; // @synthesize identityDataHash=_identityDataHash;
@property _Bool identityDataImported; // @synthesize identityDataImported=_identityDataImported;
@property(copy) NSData *identityDataInternal; // @synthesize identityDataInternal=_identityDataInternal;
@property(copy) NEProxySettings *proxySettings; // @synthesize proxySettings=_proxySettings;
@property(copy) NSString *passwordEncryption; // @synthesize passwordEncryption=_passwordEncryption;
@property(copy) NEKeychainItem *passwordKeychainItem; // @synthesize passwordKeychainItem=_passwordKeychainItem;
@property int disconnectOnWakeTimeout; // @synthesize disconnectOnWakeTimeout=_disconnectOnWakeTimeout;
@property _Bool disconnectOnWake; // @synthesize disconnectOnWake=_disconnectOnWake;
@property(readonly) long long type; // @synthesize type=_type;
@property(copy) NSUUID *identifier; // @synthesize identifier=_identifier;
@property _Bool disconnectOnSleep; // @synthesize disconnectOnSleep=_disconnectOnSleep;
@property(copy) NSString *identityDataPassword; // @synthesize identityDataPassword=_identityDataPassword;
@property(copy) NSString *username; // @synthesize username=_username;
@property(copy) NSString *serverAddress; // @synthesize serverAddress=_serverAddress;
- (void).cxx_destruct;
- (id)description;
- (void)copyPasswordsFromKeychainInDomain:(long long)arg1;
- (void)migratePasswordsFromPreferences:(struct __SCPreferences *)arg1;
- (void)removeKeychainItemsInDomain:(long long)arg1;
- (void)syncWithKeychainInDomain:(long long)arg1 configuration:(id)arg2 suffix:(id)arg3;
- (void)syncWithKeychainInDomainCommon:(long long)arg1;
@property(copy) NSData *identityData;
@property(copy) NSData *identityReference;
@property(copy) NSData *identityReferenceInternal;
@property(copy) NSData *passwordReference;
- (struct __SCNetworkInterface *)createInterface;
- (_Bool)updateWithServiceProtocolsFromService:(struct __SCNetworkService *)arg1;
- (_Bool)setServiceProtocolsInService:(struct __SCNetworkService *)arg1;
- (void)initDisconnectOptions:(id)arg1;
- (void)addDisconnectOptions:(id)arg1;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (id)type2str;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithProtocolIdentifier:(id)arg1;
- (id)initWithType:(long long)arg1;

@end

@interface NEVPNProtocolIPSec : NEVPNProtocol
{
    _Bool _useExtendedAuthentication;
    long long _authenticationMethod;
    NSString *_localIdentifier;
    NSString *_remoteIdentifier;
    NEDNSSettings *_DNSSettings;
    NEKeychainItem *_sharedSecretKeychainItem;
    NSArray *_legacyProposals;
    NSArray *_legacyExchangeMode;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NSArray *legacyExchangeMode; // @synthesize legacyExchangeMode=_legacyExchangeMode;
@property(copy) NSArray *legacyProposals; // @synthesize legacyProposals=_legacyProposals;
@property(copy) NEKeychainItem *sharedSecretKeychainItem; // @synthesize sharedSecretKeychainItem=_sharedSecretKeychainItem;
@property(copy) NEDNSSettings *DNSSettings; // @synthesize DNSSettings=_DNSSettings;
@property(copy) NSString *remoteIdentifier; // @synthesize remoteIdentifier=_remoteIdentifier;
@property(copy) NSString *localIdentifier; // @synthesize localIdentifier=_localIdentifier;
@property _Bool useExtendedAuthentication; // @synthesize useExtendedAuthentication=_useExtendedAuthentication;
@property long long authenticationMethod; // @synthesize authenticationMethod=_authenticationMethod;
- (void).cxx_destruct;
- (void)migratePasswordsFromPreferences:(struct __SCPreferences *)arg1;
- (void)removeKeychainItemsInDomain:(long long)arg1;
- (void)syncWithKeychainInDomain:(long long)arg1 configuration:(id)arg2 suffix:(id)arg3;
@property(copy) NSData *sharedSecretReference;
- (struct __SCNetworkInterface *)createInterface;
- (_Bool)updateWithServiceProtocolsFromService:(struct __SCNetworkService *)arg1;
- (_Bool)setServiceProtocolsInService:(struct __SCNetworkService *)arg1;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1;
- (id)init;

@end

@interface NEVPNProtocolIKEv2 : NEVPNProtocolIPSec
{
    _Bool _wakeForRekey;
    long long _deadPeerDetectionRate;
    NSString *_serverCertificateIssuerCommonName;
    NSString *_serverCertificateCommonName;
    NEVPNIKEv2SecurityAssociationParameters *_IKESecurityAssociationParameters;
    NEVPNIKEv2SecurityAssociationParameters *_childSecurityAssociationParameters;
}

+ (_Bool)supportsSecureCoding;
@property _Bool wakeForRekey; // @synthesize wakeForRekey=_wakeForRekey;
@property(readonly) NEVPNIKEv2SecurityAssociationParameters *childSecurityAssociationParameters; // @synthesize childSecurityAssociationParameters=_childSecurityAssociationParameters;
@property(readonly) NEVPNIKEv2SecurityAssociationParameters *IKESecurityAssociationParameters; // @synthesize IKESecurityAssociationParameters=_IKESecurityAssociationParameters;
@property(copy) NSString *serverCertificateCommonName; // @synthesize serverCertificateCommonName=_serverCertificateCommonName;
@property(copy) NSString *serverCertificateIssuerCommonName; // @synthesize serverCertificateIssuerCommonName=_serverCertificateIssuerCommonName;
@property long long deadPeerDetectionRate; // @synthesize deadPeerDetectionRate=_deadPeerDetectionRate;
- (void).cxx_destruct;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)clone;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNProtocolPPP : NEVPNProtocol
{
    _Bool _verboseLoggingEnabled;
    long long _authenticationMethod;
    NEDNSSettings *_DNSSettings;
    NEIPv4Settings *_IPv4Settings;
    NEIPv6Settings *_IPv6Settings;
}

+ (_Bool)supportsSecureCoding;
@property(copy) NEIPv6Settings *IPv6Settings; // @synthesize IPv6Settings=_IPv6Settings;
@property(copy) NEIPv4Settings *IPv4Settings; // @synthesize IPv4Settings=_IPv4Settings;
@property(copy) NEDNSSettings *DNSSettings; // @synthesize DNSSettings=_DNSSettings;
@property _Bool verboseLoggingEnabled; // @synthesize verboseLoggingEnabled=_verboseLoggingEnabled;
@property long long authenticationMethod; // @synthesize authenticationMethod=_authenticationMethod;
- (void).cxx_destruct;
- (_Bool)updateWithServiceProtocolsFromService:(struct __SCNetworkService *)arg1;
- (_Bool)setServiceProtocolsInService:(struct __SCNetworkService *)arg1;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1;

@end

@interface NEVPNProtocolL2TP : NEVPNProtocolPPP
{
    _Bool _machineIdentityDataImported;
    long long _machineAuthenticationMethod;
    NEKeychainItem *_sharedSecretKeychainItem;
    NSString *_localIdentifier;
    NSData *_machineIdentityDataInternal;
    NEIdentityKeychainItem *_machineIdentity;
}

+ (_Bool)supportsSecureCoding;
@property(retain) NEIdentityKeychainItem *machineIdentity; // @synthesize machineIdentity=_machineIdentity;
@property _Bool machineIdentityDataImported; // @synthesize machineIdentityDataImported=_machineIdentityDataImported;
@property(copy) NSData *machineIdentityDataInternal; // @synthesize machineIdentityDataInternal=_machineIdentityDataInternal;
@property(copy) NSString *localIdentifier; // @synthesize localIdentifier=_localIdentifier;
@property(copy) NEKeychainItem *sharedSecretKeychainItem; // @synthesize sharedSecretKeychainItem=_sharedSecretKeychainItem;
@property long long machineAuthenticationMethod; // @synthesize machineAuthenticationMethod=_machineAuthenticationMethod;
- (void).cxx_destruct;
- (_Bool)updateWithServiceProtocolsFromService:(struct __SCNetworkService *)arg1;
- (_Bool)setServiceProtocolsInService:(struct __SCNetworkService *)arg1;
- (struct __SCNetworkInterface *)createInterface;
- (void)setIPSecSettingsFromLegacyDictionary:(id)arg1;
- (id)copyLegacyIPSecDictionary;
- (void)migratePasswordsFromPreferences:(struct __SCPreferences *)arg1;
- (void)removeKeychainItemsInDomain:(long long)arg1;
- (void)syncWithKeychainInDomain:(long long)arg1 configuration:(id)arg2 suffix:(id)arg3;
@property(copy) NSData *machineIdentityReference;
@property(copy) NSData *sharedSecretReference;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNProtocolPPTP : NEVPNProtocolPPP
{
    long long _encryptionLevel;
}

+ (_Bool)supportsSecureCoding;
@property long long encryptionLevel; // @synthesize encryptionLevel=_encryptionLevel;
- (struct __SCNetworkInterface *)createInterface;
- (id)initFromLegacyDictionary:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface NEVPNProtocolPlugin : NEVPNProtocol
{
    int _reassertTimeout;
    NSString *_pluginType;
    NSString *_authenticationPluginType;
    NSDictionary *_vendorConfiguration;
    NSDictionary *_vendorInfo;
    long long _authenticationMethod;
}

+ (_Bool)supportsSecureCoding;
@property int reassertTimeout; // @synthesize reassertTimeout=_reassertTimeout;
@property long long authenticationMethod; // @synthesize authenticationMethod=_authenticationMethod;
@property(copy) NSDictionary *vendorInfo; // @synthesize vendorInfo=_vendorInfo;
@property(copy) NSDictionary *vendorConfiguration; // @synthesize vendorConfiguration=_vendorConfiguration;
@property(copy) NSString *authenticationPluginType; // @synthesize authenticationPluginType=_authenticationPluginType;
@property(readonly) NSString *pluginType; // @synthesize pluginType=_pluginType;
- (void).cxx_destruct;
- (void)copyPasswordsFromKeychainInDomain:(long long)arg1;
- (_Bool)updateWithServiceProtocolsFromService:(struct __SCNetworkService *)arg1;
- (_Bool)setServiceProtocolsInService:(struct __SCNetworkService *)arg1;
- (struct __SCNetworkInterface *)createInterface;
- (id)initFromLegacyDictionary:(id)arg1;
- (void)initFromLegacyDictionaryExtra:(id)arg1;
- (id)copyLegacyDictionary;
- (id)descriptionWithIndent:(int)arg1;
- (_Bool)checkValidityAndCollectErrors:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPluginType:(id)arg1;
- (id)init;
- (void)setPluginType:(id)arg1;

@end

@interface NSMutableString (NEPrettyPrint)
- (void)appendPrettyInt:(int)arg1 withName:(id)arg2 andIndent:(int)arg3;
- (void)appendPrettyBOOL:(_Bool)arg1 withName:(id)arg2 andIndent:(int)arg3;
- (void)appendPrettyObject:(id)arg1 withName:(id)arg2 andIndent:(int)arg3;
@end

