//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGColor;

struct CGColorSpace;

struct CGImage;

struct CGPDFContentStream;

struct CGPDFDictionary;

struct CGPDFStream;

struct CGPath;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CPInlineContainer {
    unsigned int _field1;
    id _field2;
    struct CPInlineContainer *_field3;
};

struct CPListInfo {
    unsigned int _field1;
    unsigned int _field2;
    struct CGRect _field3;
    struct __CFString *_field4;
    int _field5;
    unsigned int _field6;
    unsigned int _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    void *_field12;
};

struct CPMultiUnicodes;

struct CPPDFChar {
    struct CPPDFObject _field1;
    unsigned short _field2;
    unsigned short _field3;
    struct CGPoint _field4;
    struct CGSize _field5;
    struct CPPDFStyle *_field6;
    double _field7;
    int _field8;
};

struct CPPDFClipBuffer {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int *_field3;
    unsigned int _field4;
};

struct CPPDFContext {
    struct CGRect _field1;
    unsigned int _field2;
    struct CPPDFGraphicState *_field3;
    struct CPPDFGraphicState *_field4;
    struct CGPDFContentStream *_field5[250];
    unsigned int _field6;
    struct PrimitiveBuffer _field7;
    struct PrimitiveBuffer _field8;
    struct PrimitiveBuffer _field9;
    struct CPPDFClipBuffer _field10;
    struct __CFDictionary *_field11;
    struct __CFDictionary *_field12;
    struct __CFDictionary *_field13;
    struct CPPDFStyle *_field14;
    int *_field15;
    unsigned int _field16;
    unsigned int _field17;
    unsigned int _field18;
    int _field19;
    struct CPMultiUnicodes *_field20;
    long long _field21;
    long long _field22;
    unsigned int *_field23;
    struct CGPath **_field24;
    _Bool _field25;
};

struct CPPDFGraphicState;

struct CPPDFImage {
    struct CPPDFObject _field1;
    unsigned int _field2;
    struct CGPDFStream *_field3;
    int _field4;
    struct CGImage *_field5;
    struct CGAffineTransform _field6;
    struct CGPDFDictionary *_field7;
    double _field8;
    struct CGColor *_field9;
};

struct CPPDFObject {
    struct CGRect _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct CPPDFShape {
    struct CPPDFObject _field1;
    unsigned int _field2;
    struct CPPDFStyle *_field3;
    int _field4;
    struct CGPath *_field5;
    _Bool _field6;
    struct CGAffineTransform _field7;
    struct CGAffineTransform _field8;
};

struct CPPDFStyle {
    struct CGColor *_field1;
    struct CGColorSpace *_field2;
    struct CGColor *_field3;
    struct CGColorSpace *_field4;
    double _field5;
    double _field6;
    unsigned char _field7;
    unsigned char _field8;
    int _field9;
    double _field10;
    id _field11;
    double _field12;
    union CGPDFObject *_field13;
    union CGPDFObject *_field14;
    struct CGColor *_field15;
    struct CPPDFStyle *_field16;
};

struct PrimitiveBuffer {
    void *_field1;
    void *_field2;
    void *_field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    int _field8;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __CFDictionary;

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_2a61e2ef;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    double _field1;
    unsigned int _field2;
    double _field3;
    double _field4;
    unsigned int _field5;
    double _field6;
    double _field7;
    _Bool _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    _Bool _field20;
} CDStruct_1ec70fb1;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    long long location;
    long long length;
} CDStruct_627e0f85;

typedef struct CDStruct_183601bc;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    int _field5;
    int *_field6;
    struct CPPDFStyle *_field7;
} CDStruct_8db92b66;

typedef struct {
    struct CGPoint _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
} CDStruct_f9662865;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    int _field3;
    int _field4;
    struct CGRect _field5;
} CDStruct_2e2afed4;

typedef struct {
    double fontStretch;
    double fontWeight;
    unsigned int flags;
    struct CGRect fontBBox;
    double italicAngle;
    double ascent;
    double descent;
    double leading;
    double capHeight;
    double xHeight;
    double stemV;
    double stemH;
    double avgWidth;
    double maxWidth;
    double missingWidth;
    double spaceWidth;
    double underlinePosition;
    double underlineThickness;
} CDStruct_05724ab2;

#pragma mark Named Unions

union CGPDFObject;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CorePDF.framework/CorePDF
// UUID: A93BFABB-884E-3FCB-8BBE-C3468DBC2A2F
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 372.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CPCopying
- (id)initSuper;
@end

@protocol CPDisposable
- (void)dispose;
@end

@protocol CPGraphicUser
- (unsigned int)usedGraphicCount;
- (void)incrementUsedGraphicCount;
@end

@protocol CPVisitor
- (void)visitBody:(CPBody *)arg1;
- (void)visitRotation:(CPRotation *)arg1;
- (void)visitZone:(CPZone *)arg1;
- (void)visitShapeRegion:(CPShapeRegion *)arg1;
- (void)visitImageRegion:(CPImageRegion *)arg1;
- (void)visitTextBox:(CPTextBox *)arg1;
- (void)visitLayoutArea:(CPLayoutArea *)arg1;
- (void)visitColumn:(CPColumn *)arg1;
- (void)visitParagraph:(CPParagraph *)arg1;
- (void)visitTextLine:(CPTextLine *)arg1;
- (void)visitRegion:(CPRegion *)arg1;
- (void)visitPage:(CPPage *)arg1;
- (void)visitImage:(CPImage *)arg1;
- (void)visitCompoundGraphic:(CPCompoundGraphic *)arg1;
- (void)visitShape:(CPShape *)arg1;
- (void)visitChunk:(CPChunk *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSXMLParserDelegate <NSObject>

@optional
- (void)parser:(NSXMLParser *)arg1 validationErrorOccurred:(NSError *)arg2;
- (void)parser:(NSXMLParser *)arg1 parseErrorOccurred:(NSError *)arg2;
- (NSData *)parser:(NSXMLParser *)arg1 resolveExternalEntityName:(NSString *)arg2 systemID:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundCDATA:(NSData *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundComment:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundProcessingInstructionWithTarget:(NSString *)arg2 data:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundIgnorableWhitespace:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundCharacters:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 didEndMappingPrefix:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 didStartMappingPrefix:(NSString *)arg2 toURI:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 didEndElement:(NSString *)arg2 namespaceURI:(NSString *)arg3 qualifiedName:(NSString *)arg4;
- (void)parser:(NSXMLParser *)arg1 didStartElement:(NSString *)arg2 namespaceURI:(NSString *)arg3 qualifiedName:(NSString *)arg4 attributes:(NSDictionary *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundExternalEntityDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4;
- (void)parser:(NSXMLParser *)arg1 foundInternalEntityDeclarationWithName:(NSString *)arg2 value:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundElementDeclarationWithName:(NSString *)arg2 model:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundAttributeDeclarationWithName:(NSString *)arg2 forElement:(NSString *)arg3 type:(NSString *)arg4 defaultValue:(NSString *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundUnparsedEntityDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4 notationName:(NSString *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundNotationDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4;
- (void)parserDidEndDocument:(NSXMLParser *)arg1;
- (void)parserDidStartDocument:(NSXMLParser *)arg1;
@end

@protocol UIGestureRecognizerDelegate <NSObject>

@optional
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldReceiveTouch:(UITouch *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizerShouldBegin:(UIGestureRecognizer *)arg1;
@end

@protocol UIPDFSelectionLayer
- (void)setSelectionNeedsDisplay;
@end

@protocol UIPDFSelectionWidget
@property(nonatomic) UIPDFPageView *pageView;
@property(readonly, nonatomic) struct CGPoint currentSelectionPointOnPage;
@property(readonly, nonatomic) struct CGPoint initialSelectionPointOnPage;
- (void)setSelectedGrabber:(unsigned long long)arg1;
- (struct CGRect)selectionRectangle;
- (void)endTracking;
- (void)track:(struct CGPoint)arg1;
- (void)layout;
- (struct CGPoint)viewOffset;
- (struct CGPoint)selectedPointFor:(struct CGPoint)arg1;
- (_Bool)hitTest:(struct CGPoint)arg1 fixedPoint:(struct CGPoint *)arg2 preceeds:(_Bool *)arg3;
- (void)hide;
- (void)remove;
- (void)setSelection:(UIPDFSelection *)arg1;
@end

@interface CPArchive : NSObject <CPDisposable>
{
    struct __CFArray *selections;
    struct __CFArray *imageNodes;
    NSMutableString *plainText;
    NSMutableString *htmlString;
    NSMutableString *htmlStringNoImages;
    NSData *webArchiveData;
}

- (id)webArchiveData;
- (id)html;
- (id)plainText;
- (void)addSelection:(struct CGPDFSelection *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)init;

@end

@interface CPObject : NSObject <NSCopying, CPCopying>
{
    CPObject *parent;
    NSMutableArray *children;
    CPDocument *document;
    CPPage *page;
    long long zOrder;
}

- (int)depth;
- (id)page;
- (void)setPage:(id)arg1;
- (id)firstDescendantsOfClass:(Class)arg1;
- (void)clearCachedInfo;
- (void)setZOrder:(long long)arg1;
- (void)updateZOrder:(long long)arg1;
- (void)recomputeZOrder;
- (long long)zOrder;
- (id)document;
- (void)setDocument:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)indexOf:(id)arg1;
- (void)accept:(id)arg1;
- (unsigned int)countOfFirstDescendantsOfClass:(Class)arg1;
- (id)lastDescendantOfClass:(Class)arg1;
- (id)firstDescendantOfClass:(Class)arg1;
- (id)descendantsOfClass:(Class)arg1 omitTraversing:(Class)arg2;
- (id)shallowDescendantsOfClass:(Class)arg1;
- (id)descendantsOfClass:(Class)arg1;
- (void)descendantsOfClass:(Class)arg1 to:(id)arg2;
- (id)descendantsOfClass:(Class)arg1 deep:(_Bool)arg2;
- (id)children;
- (void)map:(SEL)arg1 target:(id)arg2 last:(_Bool)arg3;
- (void)map:(SEL)arg1 target:(id)arg2;
- (void)mapSafely:(SEL)arg1 target:(id)arg2 childrenOfClass:(Class)arg3;
- (void)map:(SEL)arg1 target:(id)arg2 childrenOfClass:(Class)arg3;
- (void)map:(SEL)arg1 target:(id)arg2 childrenOfClass:(Class)arg3 last:(_Bool)arg4;
- (void)performSelector:(SEL)arg1;
- (id)childrenNotOfClass:(Class)arg1;
- (id)childrenOfClass:(Class)arg1;
- (void)childrenOfClass:(Class)arg1 into:(id)arg2;
- (id)ancestorOfClass:(Class)arg1;
- (void)promoteChildren;
- (void)removeAll;
- (void)removeObjectAtIndex:(unsigned int)arg1;
- (void)remove;
- (void)removeLastChild;
- (void)removeFirstChild;
- (void)remove:(id)arg1;
- (void)addChildrenOf:(id)arg1;
- (void)addChildren:(id)arg1;
- (void)add:(id)arg1 atIndex:(unsigned int)arg2;
- (void)add:(id)arg1;
- (id)firstSibling;
- (id)lastSibling;
- (id)previousSibling;
- (id)nextSibling;
- (id)lastChild;
- (id)firstChild;
- (id)childAtIndex:(unsigned int)arg1;
- (unsigned int)countOfClass:(Class)arg1;
- (unsigned int)count;
- (id)parent;
- (void)setParent:(id)arg1;
- (id)newTakeChildrenAmong:(id)arg1;
- (id)newTakeChildren;
- (id)copyAndSplitChildrenAtIndex:(unsigned int)arg1;
- (id)copyWithoutChildren;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)disposeDescendants;
- (void)dealloc;
- (id)initSuper;
- (id)init;

@end

@interface CPChunk : CPObject
{
    struct CGRect bounds;
    _Bool shrinksWithChildren;
    _Bool dirtyBounds;
    unsigned int position;
    long long insertionOrder;
}

+ (float)chooseReferenceFontSizeFrom:(float)arg1 and:(float)arg2;
- (double)rotationAngle;
- (void)setChunkPosition:(unsigned int)arg1;
- (unsigned int)chunkPosition;
- (void)translateObjectYBy:(double)arg1;
- (_Bool)intersectsChild:(struct CGRect)arg1;
- (void)setShrinksWithChildren:(_Bool)arg1;
- (_Bool)shrinksWithChildren;
- (_Bool)boundsEqualsRect:(struct CGRect)arg1 accuracy:(double)arg2;
- (_Bool)geometricallyContains:(id)arg1;
- (_Bool)overlapsVerticallyWith:(id)arg1;
- (_Bool)overlapsHorizontallyWith:(id)arg1;
- (void)orderedInsert:(id)arg1 usingSelector:(SEL)arg2;
- (int)clusterLevelHint;
- (struct CGSize)advance;
- (float)fontSize;
- (double)bottom;
- (double)top;
- (double)center;
- (double)right;
- (double)left;
- (long long)compareChunkPosition:(id)arg1;
- (long long)compareYDescendingX:(id)arg1;
- (long long)compareYDescending:(id)arg1;
- (long long)compareTopDescending:(id)arg1;
- (long long)compareYBounds:(id)arg1;
- (long long)compareY:(id)arg1;
- (long long)compareLinearBounds:(id)arg1;
- (long long)compareXBounds:(id)arg1;
- (long long)compareZDescending:(id)arg1;
- (long long)compareZ:(id)arg1;
- (long long)compareInsertionOrder:(id)arg1;
- (long long)compareX:(id)arg1;
- (long long)compareAnchorYDescending:(id)arg1;
- (long long)compareAnchorX:(id)arg1;
- (long long)compareAnchorY:(id)arg1;
- (void)sortUsingSelector:(SEL)arg1;
- (long long)insertionOrder;
- (void)setInsertionOrder:(long long)arg1;
- (void)resizeWith:(id)arg1;
- (void)fitBoundsToChildren;
- (float)referenceAdvanceWidth;
- (float)absoluteGapTo:(id)arg1;
- (float)advanceDeltaAfterSpace;
- (float)clusterGapTo:(id)arg1;
- (struct CGPoint)anchor;
- (void)setAnchor:(struct CGPoint)arg1;
- (id)describeBounds;
- (struct CGRect)renderedBounds;
- (struct CGRect)adjustToPointBoundary:(struct CGRect)arg1;
- (struct CGRect)bounds;
- (void)setBounds:(struct CGRect)arg1;
- (void)setChildren:(id)arg1;
- (id)newTakeChildrenAmong:(id)arg1;
- (id)newTakeChildren;
- (void)removeAll;
- (void)remove:(id)arg1;
- (void)addChildrenOf:(id)arg1;
- (void)add:(id)arg1 atIndex:(unsigned int)arg2;
- (void)add:(id)arg1;
- (float)opticalLeading;
- (void)accept:(id)arg1;
- (id)copyAndSplitChildrenAtIndex:(unsigned int)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface CPRegion : CPChunk
{
    _Bool isTextRegion;
    _Bool isImageRegion;
    _Bool isCompoundShape;
    CPRegion *nextRegion;
    int order;
    id link;
}

- (id)link;
- (void)setLink:(id)arg1;
- (void)setOrder:(int)arg1;
- (int)order;
- (void)setNextRegion:(id)arg1;
- (id)nextRegion;
- (_Bool)isIndivisible;
- (_Bool)isRotated;
- (_Bool)isZone;
- (void)setIsCompoundShape:(_Bool)arg1;
- (_Bool)isCompoundShape;
- (_Bool)isGraphicalRegion;
- (void)setIsTextRegion:(_Bool)arg1;
- (_Bool)isBodyZone;
- (_Bool)isTableCellRegion;
- (_Bool)isRowRegion;
- (_Bool)isListItemRegion;
- (_Bool)isParagraphRegion;
- (_Bool)isShapeRegion;
- (void)setIsImageRegion:(_Bool)arg1;
- (_Bool)isImageRegion;
- (_Bool)isBoxRegion;
- (_Bool)isTextRegion;
- (void)accept:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface CPZone : CPRegion <CPGraphicUser>
{
    NSMutableArray *zoneBorders;
    struct CGPoint *outerVertices;
    struct CGPoint *swollenOuterVertices;
    double area;
    _Bool isStraddleZone;
    CPZoneProfile *zoneProfile;
    NSArray *leftGuides;
    NSArray *rightGuides;
    NSArray *gutters;
    NSArray *spacers;
    CPCharSequence *charactersInZone;
    NSMutableArray *textLinesInZone;
    NSArray *graphicsInZone;
    NSMutableArray *backgroundGraphics;
    unsigned int usedGraphicCount;
}

- (unsigned int)usedGraphicCount;
- (void)incrementUsedGraphicCount;
- (id)spacers;
- (void)setSpacers:(id)arg1;
- (id)gutters;
- (void)setGutters:(id)arg1;
- (id)rightGuides;
- (void)setRightGuides:(id)arg1;
- (id)leftGuides;
- (void)setLeftGuides:(id)arg1;
- (void)setZoneProfile:(id)arg1;
- (id)zoneProfile;
- (void)setIsStraddleZone:(_Bool)arg1;
- (_Bool)isStraddleZone;
- (long long)compareArea:(id)arg1;
- (void)addContentFrom:(id)arg1;
- (id)charactersInZone;
- (void)setCharactersInZone:(id)arg1;
- (void)addPDFChar:(void *)arg1;
- (_Bool)canContain:(struct CGRect)arg1;
- (_Bool)contains:(id)arg1;
- (_Bool)rectangleBordersAtLeft:(id *)arg1 top:(id *)arg2 right:(id *)arg3 bottom:(id *)arg4;
- (_Bool)isRectangular;
- (struct CGRect)swollenZoneBounds;
- (struct CGRect)zoneBounds;
- (double)area;
- (struct CGPoint *)swollenOuterVertices;
- (void)accept:(id)arg1;
- (struct CGPoint *)outerVertices;
- (long long)neighborZOrder;
- (long long)borderZOrder;
- (unsigned int)vertexCount;
- (void)removeUnfilledNeighborShapes;
- (id)backgroundGraphics;
- (struct CGColor *)newBackgroundColor;
- (_Bool)hasNeighborShape:(id)arg1;
- (_Bool)bordersWindClockwise;
- (void)setZoneBorders:(id)arg1;
- (id)zoneBorders;
- (_Bool)hasBorders;
- (_Bool)isZone;
- (_Bool)mapToWordPairsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToWordPairs:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToWordsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToWords:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (unsigned int)wordCount;
- (id)graphicsInZone;
- (id)textLinesInZone;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface CPBody : CPZone
{
}

- (void)accept:(id)arg1;
- (_Bool)isBodyZone;

@end

@interface CPBuilder : NSObject
{
}

- (void)prepareZone:(id)arg1;
- (void)cluster:(id)arg1 andPutTextLinesInto:(id)arg2;

@end

@interface CPCharSequence : NSObject <NSCopying, CPCopying, CPDisposable>
{
    unsigned int length;
    struct CPPDFChar **charArray;
    unsigned int previousSize;
    unsigned int size;
    CPMemoryOwner *sharedMemory;
    _Bool wasMerged;
}

- (struct CGRect)boundsFrom:(unsigned int)arg1 length:(unsigned int)arg2;
- (struct CGRect)bounds;
- (_Bool)map:(CDUnknownFunctionPointerType)arg1 whereNeighborsWith:(id)arg2 passing:(void *)arg3;
- (_Bool)mapToPairsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToPairs:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapWithIndex:(CDUnknownFunctionPointerType)arg1 from:(unsigned int)arg2 length:(unsigned int)arg3 passing:(void *)arg4;
- (_Bool)mapWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)map:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)removeToSubsequence:(id)arg1 ifTrue:(CDUnknownFunctionPointerType)arg2 passing:(void *)arg3;
- (void)copyToSubsequence:(id)arg1 ifTrue:(CDUnknownFunctionPointerType)arg2 passing:(void *)arg3;
- (void)copyToSubsequence:(id)arg1 from:(unsigned int)arg2 length:(unsigned int)arg3;
- (_Bool)removeSubsequences:(id)arg1 whereTrue:(CDUnknownFunctionPointerType)arg2 passing:(void *)arg3;
- (void)splitToSubsequences:(id)arg1 whereTrue:(CDUnknownFunctionPointerType)arg2 passing:(void *)arg3;
- (id)newSubsequenceFrom:(unsigned int)arg1 length:(unsigned int)arg2;
- (_Bool)wasMerged;
- (void)merge:(id)arg1 by:(CDUnknownFunctionPointerType)arg2;
- (void)mergeByAnchorXIncreasingYDecreasing:(id)arg1;
- (void)mergeByAnchorYDecreasingXIncreasing:(id)arg1;
- (void)sortBy:(CDUnknownFunctionPointerType)arg1;
- (void)sortByAnchorXIncreasingYDecreasing;
- (void)sortByAnchorYDecreasingXIncreasing;
- (void)removeFrom:(unsigned int)arg1;
- (void)removeCharAtIndex:(unsigned int)arg1;
- (void)replaceCharAtIndex:(unsigned int)arg1 withChar:(struct CPPDFChar *)arg2;
- (void)removeAllChars;
- (void)removeChar;
- (void)addCharsFromSequence:(id)arg1;
- (void)addChars:(struct CPPDFChar *)arg1 length:(unsigned int)arg2 ifTrue:(CDUnknownFunctionPointerType)arg3 passing:(void *)arg4;
- (void)addChars:(struct CPPDFChar *)arg1 length:(unsigned int)arg2;
- (void)addChar:(struct CPPDFChar *)arg1;
- (struct CPPDFChar **)charArray;
- (struct CPPDFChar *)charAtIndex:(unsigned int)arg1;
- (unsigned int)length;
- (void)resize:(unsigned int)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initSuper;
- (id)initWithChars:(struct CPPDFChar *)arg1 length:(unsigned int)arg2;
- (id)initWithSizeFor:(unsigned int)arg1;

@end

@interface CPCluster : NSObject <CPDisposable>
{
    const CDStruct_1ec70fb1 *profile;
    unsigned int xCount;
    double *x;
    double *dx;
    unsigned int *dxOrderIndex;
    unsigned int interClusterMinIndex;
    double *ddx;
    unsigned int *ddxOrderIndex;
    unsigned int interLevelMinIndex;
    unsigned int minClusterSize;
    double maxClusterSpread;
    double minInterClusterDiff;
    double minInterLevel2ndDiff;
    unsigned int clusterCount;
    CDStruct_2a61e2ef *xStats;
    unsigned int levels;
    CDStruct_2a61e2ef *dxStats;
    _Bool ownData;
    _Bool ownDifferences;
}

+ (unsigned int *)createOrderIndexFor:(double *)arg1 ofSize:(unsigned int)arg2;
+ (void)reclusterTextLine:(id)arg1 fromWordIndex:(unsigned int)arg2 count:(unsigned int *)arg3;
+ (void)clusterTextLine:(id)arg1;
- (CDStruct_2a61e2ef)largestClusterStatistics;
- (CDStruct_2a61e2ef)differenceClusterStatisticsAtIndex:(unsigned int)arg1;
- (CDStruct_2a61e2ef)clusterStatisticsAtIndex:(unsigned int)arg1;
- (unsigned int)levels;
- (unsigned int)clusterCount;
- (_Bool)applyDifferenceHints:(CDStruct_2a61e2ef *)arg1 count:(unsigned int)arg2;
- (void)findDensityClusters:(double *)arg1 count:(unsigned int)arg2;
- (void)findClustersFromDifferences:(double *)arg1 count:(unsigned int)arg2;
- (void)findClusters:(double *)arg1 count:(unsigned int)arg2;
- (void)analyzeDensities;
- (void)assembleDensityDifferenceStats;
- (void)setMinimumRecognizedInterLevel2ndDifference:(double)arg1;
- (void)setMinimumRecognizedInterClusterDifference:(double)arg1;
- (void)setMaximumClusterSpread:(double)arg1;
- (void)setMinimumClusterSize:(unsigned int)arg1;
- (void)assembleDataStats;
- (void)analyzeDifferences;
- (_Bool)coalesceFrom:(unsigned int)arg1 to:(unsigned int)arg2;
- (_Bool)splitLevelAtIndex:(unsigned int)arg1 betweenValue:(double)arg2 andValue:(double)arg3;
- (_Bool)joinClosestLevelPairFrom:(unsigned int)arg1 to:(unsigned int)arg2;
- (_Bool)joinLevelsFrom:(unsigned int)arg1 to:(unsigned int)arg2;
- (void)assembleDifferenceStats;
- (void)splitSecondDifferences;
- (void)computeDataFromDifferences;
- (void)computeDifferencesFromData;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithProfile:(const CDStruct_1ec70fb1 *)arg1;
- (id)init;
- (void)makeWords:(CDStruct_2e2afed4 *)arg1 count:(unsigned int)arg2 fromCharacterSequence:(id)arg3 charOffset:(unsigned int)arg4;
- (void)findClustersFromCharacterSequence:(id)arg1 withSpaceHint:(_Bool)arg2;
- (void)tryLevel0SplitBetween:(double)arg1 and:(double)arg2 usingHints:(CDStruct_2a61e2ef *)arg3;

@end

@interface CPColumn : CPRegion
{
    _Bool hasCentredParagraph;
    _Bool hasColumnBreak;
    double maxLeftPad;
    double maxRightPad;
    double maxRight;
    double minLeft;
    _Bool complete;
}

@property _Bool complete; // @synthesize complete;
- (id)description;
- (double)selectionBottom;
- (struct CGRect)paddedBounds;
- (void)setMaxRightPad:(double)arg1;
- (double)maxRightPad;
- (void)setMaxLeftPad:(double)arg1;
- (double)maxLeftPad;
- (double)rightPad;
- (double)leftPad;
- (void)setHasCentredParagraph:(_Bool)arg1;
- (_Bool)hasCentredParagraph;
- (double)bottomBaseline;
- (struct CGRect)columnBounds;
- (_Bool)isShapeRegion;
- (_Bool)isImageRegion;
- (void)setIsImageRegion:(_Bool)arg1;
- (_Bool)isRowRegion;
- (_Bool)isGraphicalRegion;
- (_Bool)isBoxRegion;
- (void)setHasColumnBreak:(_Bool)arg1;
- (void)accept:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;
- (int)inOrder;
- (int)outOrder;

@end

@interface CPColumnMaker : NSObject
{
    NSMutableArray *columns;
    CPZone *currentZone;
    NSMutableArray *allParagraphs;
    NSMutableArray *thinHorizontalShapes;
    NSMutableArray *otherShapes;
    NSMutableArray *images;
    NSMutableArray *paragraphWrappers;
    struct CGRect pageBounds;
    double maxParagraphDistance;
}

@property struct CGRect pageBounds; // @synthesize pageBounds;
- (void)makeColumnsFrom:(id)arg1 zone:(id)arg2;
- (void)anchorImages;
- (void)splitColumns:(id)arg1;
- (double)averageSpacing:(id)arg1;
- (_Bool)closeImagesBetween:(id)arg1 and:(id)arg2 bounds:(struct CGRect)arg3;
- (void)callOuts;
- (void)intersectionCallout:(id)arg1;
- (_Bool)canSafelyAdd:(id)arg1 to:(id)arg2;
- (_Bool)column:(id)arg1 isLinkedBelowTo:(id)arg2;
- (_Bool)paragraph:(id)arg1 isLinkedBelowTo:(id)arg2;
- (id)chunkAbove:(id)arg1 in:(id)arg2;
- (id)paragraphAbove:(id)arg1 in:(id)arg2;
- (id)paragraphBelow:(id)arg1 in:(id)arg2;
- (_Bool)paragraph:(id)arg1 isBelow:(id)arg2;
- (_Bool)paragraph:(id)arg1 isAbove:(id)arg2;
- (_Bool)paragraph:(id)arg1 notOnSameShapeAs:(id)arg2;
- (_Bool)cuttingShapeBetween:(id)arg1 and:(id)arg2;
- (void)partitionShapes:(id)arg1;
- (_Bool)intervalOverlapLeft:(double)arg1 right:(double)arg2 paragraphs:(id)arg3;
- (id)columns;
- (void)dealloc;
- (id)init;

@end

@interface CPGraphicObject : CPChunk
{
    unsigned int clipIndex;
    struct CGRect renderedBounds;
    _Bool isInZoneBorder;
    int zoneGraphicType;
    CPTextLine *anchoringTextLine;
    CPParagraph *anchoringParagraph;
    CPChunk<CPGraphicUser> *user;
}

@property(retain, nonatomic) CPParagraph *anchoringParagraph; // @synthesize anchoringParagraph;
@property(nonatomic) unsigned int clipIndex; // @synthesize clipIndex;
- (id)user;
- (void)setUser:(id)arg1;
- (id)anchoringTextLine;
- (void)setAnchoringTextLine:(id)arg1;
- (void)setZoneGraphicType:(int)arg1;
- (int)zoneGraphicType;
- (void)setIsInZoneBorder:(_Bool)arg1;
- (_Bool)isInZoneBorder;
- (_Bool)isIndivisible;
- (_Bool)isVisible;
- (_Bool)canBeContainer;
- (_Bool)isNarrow;
- (unsigned short)unicode;
- (struct CGRect)renderedBounds;
- (void)dealloc;
- (id)init;

@end

@interface CPCompoundGraphic : CPGraphicObject
{
}

- (void)accept:(id)arg1;
- (id)initWithGraphicObjects:(id)arg1 withRenderedBounds:(struct CGRect)arg2;

@end

@interface CPCompoundGraphicMaker : NSObject <CPDisposable>
{
    CPChunk *parentChunk;
    _Bool shapesAreVectorGraphics;
    unsigned int shapeCount;
    id *shapes;
    double pageSpread;
    CPCluster *cluster;
    unsigned int groupInfoCount;
    struct {
        unsigned int _field1;
        struct CGRect _field2;
    } *groupInfoArray;
    _Bool disposed;
}

+ (_Bool)makeCompoundGraphicsInZonesOf:(id)arg1;
- (_Bool)makeCompoundGraphics;
- (_Bool)groupOverlappingGraphics;
- (_Bool)makeCompoundGraphicsFromShapeGroups;
- (void)coalesceShapeGroups;
- (void)makeCompoundGraphicFromShapesAtIndex:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)addGroupInfoWithIndex:(unsigned int)arg1 bounds:(struct CGRect)arg2;
- (_Bool)findClusterLevel;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithGraphicsIn:(id)arg1 ofClass:(Class)arg2;

@end

@interface CPDocument : NSObject
{
    NSMutableArray *pages;
}

- (void)addPage:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface CPFont : NSObject <CPDisposable>
{
    struct CGPDFFont *cgPDFFont;
    struct CGFont *cgFont;
    NSString *fontName;
    _Bool exactMatch;
    CDStruct_05724ab2 descriptor;
    struct __CFDictionary *kernDictionary;
    double kernUnitsPerEm;
    _Bool isHorizontal;
    double defaultWidth;
    _Bool disposed;
}

- (void)uniCharsFor:(unsigned long long)arg1 count:(unsigned long long *)arg2 toArray:(unsigned short *)arg3 maxChars:(unsigned int)arg4;
- (_Bool)getGlyphs:(unsigned short *)arg1 forCodes:(const unsigned short *)arg2 count:(unsigned int)arg3;
- (double)kernBetweenUnicode:(unsigned short)arg1 andUnicode:(unsigned short)arg2;
- (_Bool)isHorizontal;
- (double)underlineThickness;
- (double)underlinePosition;
- (double)spaceWidth;
- (double)missingWidth;
- (double)maxWidth;
- (double)avgWidth;
- (double)stemH;
- (double)stemV;
- (double)xHeight;
- (double)capHeight;
- (double)leading;
- (double)descent;
- (double)ascent;
- (double)italicAngle;
- (struct CGRect)fontBBox;
- (unsigned int)flags;
- (double)fontWeight;
- (double)fontStretch;
- (_Bool)isSameFontAs:(id)arg1;
- (id)fontName;
- (struct CGFont *)cgFont;
- (struct CGPDFFont *)cgPDFFont;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWith:(struct CGPDFDictionary *)arg1;
- (void)loadEmbeddedFontInfo;
- (void)loadExternalFontInfoFor:(id)arg1;
- (void)getFontName;
- (id)matchingFontName;

@end

@interface CPFontInfo : NSObject <CPDisposable>
{
    struct __CFData *fontData;
    const char *dataPtr;
    unsigned int offset;
    unsigned int fontDataLength;
    _Bool valid;
}

- (struct __CFData *)newKernData;
- (int)kernUnitsPerEm;
- (_Bool)getDescriptor:(CDStruct_05724ab2 *)arg1;
- (struct CGRect)readRect;
- (float)readFloat;
- (int)readLong;
- (unsigned int)readUnsignedLong;
- (unsigned char)readByte;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithFontData:(struct __CFData *)arg1;

@end

@interface CPFontKerning : NSObject <CPDisposable>
{
    struct __CFData *kernTable;
    const char *dataPtr;
    unsigned int offset;
    unsigned int kernTableLength;
    struct __CFDictionary *kernDictionary;
    _Bool override;
    _Bool valid;
}

- (struct __CFDictionary *)createKernTable;
- (void)doTable;
- (void)doOTSubtable;
- (void)doTTSubtable;
- (void)doSubtableFormat3;
- (void)doSubtableFormat2;
- (void)doSubtableFormat1;
- (void)doSubtableFormat0;
- (void)doKerningPair;
- (unsigned int)readUnsignedLong;
- (short)readShort;
- (unsigned short)readUnsignedShort;
- (unsigned char)readByte;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithCGFont:(struct CGFont *)arg1;
- (id)initWithKernData:(struct __CFData *)arg1;

@end

@interface CPGenericVisitor : NSObject <CPVisitor>
{
}

- (void)visitShapeRegion:(id)arg1;
- (void)visitImageRegion:(id)arg1;
- (void)visitTextBox:(id)arg1;
- (void)visitColumn:(id)arg1;
- (void)visitLayoutArea:(id)arg1;
- (void)visitParagraph:(id)arg1;
- (void)visitBody:(id)arg1;
- (void)visitRotation:(id)arg1;
- (void)visitZone:(id)arg1;
- (void)visitTextLine:(id)arg1;
- (void)visitRegion:(id)arg1;
- (void)visitPage:(id)arg1;
- (void)visitCompoundGraphic:(id)arg1;
- (void)visitImage:(id)arg1;
- (void)visitShape:(id)arg1;
- (void)visitChunk:(id)arg1;

@end

@interface CPGraphicMaker : NSObject
{
}

+ (void)makeCombinedShapesIn:(id)arg1;
+ (void)combineShapesIn:(id)arg1;

@end

@interface CPGraphicRegion : CPRegion
{
}

@end

@interface CPGuideFinder : NSObject <CPDisposable>
{
    CPZone *contentZone;
    unsigned int countOfWordsInZone;
    double *anchorArray;
    double *rightHandSideArray;
    CDStruct_8db92b66 *crossingWordArray;
    CPCluster *anchors;
    CPCluster *rightHandSides;
    double medianFontSizeOfFirstCharacter;
    double medianFontSizeOfLastCharacter;
    NSMutableArray *gutters;
    NSMutableArray *leftGuides;
    NSMutableArray *rightGuides;
}

+ (void)reclusterBetweenGuides:(id)arg1;
+ (void)reclusterPreservingAlignment:(id)arg1;
+ (_Bool)gutterSeparates:(id)arg1 from:(id)arg2;
+ (_Bool)guideSeparates:(id)arg1 from:(id)arg2;
- (id)rightGuides;
- (_Bool)hasRightGuides;
- (id)leftGuides;
- (_Bool)hasLeftGuides;
- (id)gutters;
- (_Bool)hasGutters;
- (void)markTextLines;
- (void)splitTextLines;
- (void)splitTextLinesBetweenBorderWords;
- (void)splitTextLinesAtBorderWords;
- (void)findGuides;
- (void)findGutters;
- (void)findWordEdgeClusters;
- (void)subdivideRightGuideAt:(unsigned int)arg1;
- (void)subdivideLeftGuideAt:(unsigned int)arg1;
- (void)subdivideGutterFrom:(unsigned int)arg1 to:(unsigned int)arg2;
- (void)subdivideStripInto:(id)arg1 from:(double)arg2 to:(double)arg3 borderedBy:(CDStruct_8db92b66 *)arg4 ofCount:(unsigned int)arg5 crossedBy:(CDStruct_8db92b66 *)arg6 ofCount:(unsigned int)arg7;
- (void)setAlignForWordWithExtent:(CDStruct_8db92b66 *)arg1 stripArray:(id)arg2 stripMax:(double)arg3;
- (_Bool)addStripTo:(id)arg1 bottom:(double)arg2 left:(double)arg3 top:(double)arg4 right:(double)arg5;
- (void)getWordEdges;
- (double)medianFontSizeOfLastCharacter;
- (double)medianFontSizeOfFirstCharacter;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithContentZone:(id)arg1;

@end

@interface CPHeadingFinder : NSObject
{
}

+ (struct __CFArray *)createHeadings:(struct CGPDFLayout *)arg1;

@end

@interface CPHighlighter : NSObject
{
    CPZone *boundingZone;
    CPTextLine *textLine;
    struct CGColor *color;
    struct CPPDFStyle *style;
    struct CPPDFStyle *highlightedStyle;
}

+ (_Bool)reconstructHighlightFor:(id)arg1;
@property(nonatomic) struct CPPDFStyle *highlightedStyle; // @synthesize highlightedStyle;
@property(nonatomic) struct CPPDFStyle *style; // @synthesize style;
@property(readonly, nonatomic) struct CGColor *color; // @synthesize color;
- (void)highlight;
- (id)initWithTextLine:(id)arg1 inZone:(id)arg2 ofColor:(struct CGColor *)arg3;

@end

@interface CPHitTest : NSObject
{
    CPPage *page;
    NSMutableArray *objectsOnPage;
    float mapTemp;
}

- (long long)compareByReadingOrder:(struct CGPoint)arg1 to:(struct CGPoint)arg2;
- (id)objectAtPoint:(struct CGPoint)arg1;
- (id)textLine:(struct CGPoint)arg1;
- (id)column:(struct CGPoint)arg1;
- (unsigned int)columnsAt:(struct CGPoint)arg1;
- (id)layoutArea:(struct CGPoint)arg1;
- (id)paragraphNear:(struct CGPoint)arg1;
- (id)paragraph:(struct CGPoint)arg1;
- (id)page;
- (void)dealloc;
- (id)initWithPage:(id)arg1;
- (id)findObjectIn:(id)arg1 at:(struct CGPoint)arg2 count:(int *)arg3;
- (id)findBestMatch:(id)arg1 atPoint:(struct CGPoint)arg2;
- (_Bool)hitTestParagraph:(id)arg1 point:(struct CGPoint)arg2;
- (_Bool)hitTestGraphicObject:(id)arg1 point:(struct CGPoint)arg2;
- (void)findClickableObjects:(_Bool)arg1;

@end

@interface CPImage : CPGraphicObject
{
    struct CPPDFImage *imageData;
    _Bool renderedBoundsComputed;
}

- (_Bool)isVisible;
- (long long)zOrder;
- (void)accept:(id)arg1;
- (void)recomputeRenderedBounds;
- (struct CGRect)bounds;
- (struct CGRect)renderedBounds;
- (struct CPPDFImage *)imageData;
- (id)initWithBounds:(struct CGRect)arg1;
- (id)initWithPDFImage:(struct CPPDFImage *)arg1;

@end

@interface CPImageRegion : CPGraphicRegion
{
}

- (void)accept:(id)arg1;
- (_Bool)isImageRegion;

@end

@interface CPInterval : NSObject
{
    double left;
    double right;
}

- (_Bool)contains:(id)arg1;
- (double)right;
- (double)left;
- (void)add:(id)arg1;
- (_Bool)intersects:(id)arg1;
- (id)initLeft:(double)arg1 right:(double)arg2;

@end

@interface CPIsland : CPZone
{
}

- (_Bool)bordersWindClockwise;

@end

@interface CPLayoutArea : CPRegion
{
    _Bool isFirstLayout;
}

- (id)description;
- (id)properties;
- (double)selectionBottom;
- (struct CGRect)layoutAreaBounds;
- (_Bool)isShapeRegion;
- (_Bool)isImageRegion;
- (void)setIsImageRegion:(_Bool)arg1;
- (_Bool)isRowRegion;
- (_Bool)isGraphicalRegion;
- (_Bool)isBoxRegion;
- (void)addColumnBreaks;
- (void)setIsFirstLayout:(_Bool)arg1;
- (_Bool)isFirstLayout;
- (_Bool)isSimilarTo:(id)arg1;
- (void)accept:(id)arg1;
- (id)init;

@end

@interface CPLayoutMaker : NSObject
{
}

- (void)makeLayouts:(id)arg1 from:(id)arg2;
- (_Bool)column:(id)arg1 fits:(id)arg2;

@end

@interface CPLineBreaker : NSObject
{
}

+ (void)breakLinesInPage:(id)arg1;
- (void)breakLinesIn:(id)arg1;
- (void)breakLinesInParagraph:(id)arg1;

@end

@interface CPList : NSObject <CPDisposable>
{
    struct CGRect spacer;
    int type;
    unsigned int ordinalPrefixLength;
    unsigned int ordinalSuffixLength;
    CPListItem *parentItem;
    struct __CFArray *items;
}

@property(retain, nonatomic) CPListItem *parentItem; // @synthesize parentItem;
@property(nonatomic) unsigned int ordinalSuffixLength; // @synthesize ordinalSuffixLength;
@property(nonatomic) unsigned int ordinalPrefixLength; // @synthesize ordinalPrefixLength;
@property(nonatomic) int type; // @synthesize type;
@property(nonatomic) struct CGRect spacer; // @synthesize spacer;
- (_Bool)isMultilevel;
- (_Bool)containsParagraph:(id)arg1;
- (void)addItem:(id)arg1;
- (id)itemAtIndex:(unsigned int)arg1;
- (unsigned int)itemCount;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)init;

@end

@interface CPListItem : NSObject <CPDisposable>
{
    CPList *list;
    int number;
    struct __CFArray *paragraphs;
}

@property(nonatomic) int number; // @synthesize number;
@property(retain, nonatomic) CPList *list; // @synthesize list;
- (void)addParagraph:(id)arg1;
- (id)paragraphAtIndex:(unsigned int)arg1;
- (unsigned int)paragraphCount;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)init;

@end

@interface CPListMaker : NSObject <CPDisposable>
{
    CPLayoutArea *area;
    NSArray *spacers;
    unsigned int textLineCount;
    id *textLines;
    CPList *list;
}

+ (void)makeListsInPage:(id)arg1;
+ (void)makeListsInChunk:(id)arg1;
+ (void)makeListsInLayoutArea:(id)arg1;
- (void)makeLists;
- (void)makeListsInColumn:(id)arg1;
- (_Bool)makeListFrom:(struct CPListInfo *)arg1;
- (void)makeListItemFrom:(struct CPListInfo *)arg1 stopAt:(unsigned int)arg2;
- (void)fetchTextLinesInColumn:(id)arg1;
- (void)fetchTextLine:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithLayoutArea:(id)arg1;

@end

@interface CPMemoryOwner : NSObject <CPDisposable>
{
    void *memory;
}

- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithAllocatedMemory:(void *)arg1;

@end

@interface CPObjectUtility : NSObject
{
}

+ (float)complexityOfPage:(id)arg1;

@end

@interface CPPDFAnnotationParserDelegate : NSObject <NSXMLParserDelegate>
{
    NSMutableString *_characters;
    _Bool _parseError;
    struct CGPoint _p[4];
    struct __CFArray *_quadPoints;
    struct CGRect _rect;
    struct __CFDictionary *_annotationDictionary;
    struct __CFString *_id;
    struct __CFString *_otherId;
    struct __CFString *_content;
    struct CGColor *_color;
}

@property(readonly, nonatomic) struct CGColor *color; // @synthesize color=_color;
@property(readonly, nonatomic) struct __CFString *content; // @synthesize content=_content;
@property(readonly, nonatomic) struct __CFString *otherId; // @synthesize otherId=_otherId;
@property(readonly, nonatomic) struct __CFString *annotationId; // @synthesize annotationId=_id;
@property(nonatomic) struct __CFDictionary *annotationDictionary; // @synthesize annotationDictionary=_annotationDictionary;
@property(readonly, nonatomic) _Bool parseError; // @synthesize parseError=_parseError;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)parser:(id)arg1 foundCharacters:(id)arg2;
- (void)parserDidStartDocument:(id)arg1;
- (void)parser:(id)arg1 parseErrorOccurred:(id)arg2;
- (void)addQuadpoints;
@property(readonly, nonatomic) struct CGRect rect; // @dynamic rect;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CPPage : CPChunk <CPDisposable>
{
    int pageNumber;
    struct CGRect pageCropBox;
    _Bool hasZones;
    _Bool hasTextLines;
    _Bool isDirty;
    _Bool isStartOfSection;
    long long maxLayoutZOrder;
    CPChunk *background;
    float complexity;
    int rotation;
    NSMutableArray *shapesOnPage;
    NSMutableArray *imagesOnPage;
    NSMutableArray *graphicsOnPage;
    NSMutableArray *columnsOnPage;
    struct CPPDFContext *pdfContext;
    _Bool contextOwner;
    struct CGPDFPage *pdfPage;
    NSMutableArray *textLinesOnPage;
    void *_layout;
    id hitTest;
    _Bool reconstructed;
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } mutex;
}

+ (void)sortByReadingOrder:(id)arg1;
- (void)addColumns:(id)arg1;
- (id)columnsOnPage;
- (id)textLinesOnPage;
- (void)layDownObjectsOnPageOld;
- (void)sortByReadingOrder;
- (void)layDownObjectsOnPage;
- (unsigned int)setReadingOrder:(id)arg1 from:(unsigned int)arg2;
- (unsigned int)setGraphicPositions:(id)arg1 from:(unsigned int)arg2;
- (unsigned int)setCellPositionsOf:(id)arg1 from:(unsigned int)arg2;
- (unsigned int)setPositionsOf:(id)arg1 from:(unsigned int)arg2;
- (unsigned int)traverse:(id)arg1 ordinal:(unsigned int)arg2;
- (id)children;
- (void)restoreBackGroundObjectToPage;
- (void)setBackground:(id)arg1;
- (id)background;
- (void)setRotation:(int)arg1;
- (int)rotation;
- (void)setIsStartOfSection:(_Bool)arg1;
- (_Bool)isStartOfSection;
- (void)setHasTextLines:(_Bool)arg1;
- (_Bool)hasTextLines;
- (id)bodyZone;
- (_Bool)hasZones;
- (void)setHasZones:(_Bool)arg1;
- (id)graphicsOnPage;
- (id)imagesOnPage;
- (void)addImage:(id)arg1;
- (id)shapesOnPage;
- (void)addShape:(id)arg1;
- (id)parent;
- (void)setPageNumber:(int)arg1;
- (int)pageNumber;
- (void)setComplexity:(float)arg1;
- (float)complexity;
- (void)accept:(id)arg1;
- (struct CGRect)pageCropBox;
- (void)setPageCropBox:(struct CGRect)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct CPPDFContext *)PDFContext;
- (void)setPDFContext:(struct CPPDFContext *)arg1;
- (void)reconstruct;
- (struct CGPDFPage *)pdfPage;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithPDFPage:(struct CGPDFPage *)arg1;
- (id)init;
- (struct CGPDFLayout *)layout;
- (_Bool)populatePDFLayout:(struct CGPDFLayout *)arg1;
- (id)hitTest;
- (struct CPPDFClipBuffer *)clipBuffer;

@end

@interface CPParagraph : CPRegion
{
    _Bool noIndentation;
    _Bool below;
    unsigned long long alignment;
    _Bool hasDropCap;
    id flowProperties;
    CPListItem *listItem;
    double preformatWidth;
}

@property(retain, nonatomic) CPListItem *listItem; // @synthesize listItem;
- (_Bool)isPreformattedWithUnitWidth:(double *)arg1;
- (void)setAlignment:(unsigned long long)arg1;
- (unsigned long long)alignment;
- (_Bool)below;
- (void)setBelow:(_Bool)arg1;
- (double)selectionBottom;
- (struct CGRect)reducedBounds;
- (void)explode;
- (void)setHasDropCap:(_Bool)arg1;
- (_Bool)hasDropCap;
- (_Bool)noIndentation;
- (void)setNoIndentation:(_Bool)arg1;
- (_Bool)isShapeRegion;
- (_Bool)isImageRegion;
- (void)setIsImageRegion:(_Bool)arg1;
- (_Bool)isRowRegion;
- (_Bool)isGraphicalRegion;
- (_Bool)isBoxRegion;
- (void)setIsTextRegion:(_Bool)arg1;
- (_Bool)isTextRegion;
- (unsigned long long)index;
- (_Bool)isListItemRegion;
- (_Bool)isParagraphRegion;
- (void)accept:(id)arg1;
- (void)setFlowProperties:(id)arg1;
- (id)flowProperties;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface CPParagraphFlow : NSObject
{
    CPParagraph *paragraph;
    double fLeft;
    double fRight;
    double fTop;
    double fBottom;
    NSMutableArray *paragraphsAbove;
    NSMutableArray *paragraphsBelow;
    NSMutableArray *paragraphsLeft;
    NSMutableArray *paragraphsRight;
    _Bool placed;
    _Bool adjacentToCallout;
    int calloutType;
    CPParagraph *nextInColumn;
}

@property(nonatomic) CPParagraph *nextInColumn; // @synthesize nextInColumn;
@property int calloutType; // @synthesize calloutType;
@property _Bool placed; // @synthesize placed;
@property double fBottom; // @synthesize fBottom;
@property double fRight; // @synthesize fRight;
@property double fLeft; // @synthesize fLeft;
@property(retain, nonatomic) CPParagraph *paragraph; // @synthesize paragraph;
- (int)rightOrder;
- (int)leftOrder;
- (int)outOrder;
- (int)inOrder:(_Bool)arg1;
- (int)inOrder;
- (double)area;
- (double)dAbove;
- (double)dBelow;
- (struct CGRect)belowBounds;
- (void)replaceAbove:(id)arg1 withOneOf:(id)arg2;
- (void)replaceBelow:(id)arg1 withOneOf:(id)arg2;
- (void)removeFromAbove:(id)arg1;
- (void)removeFromBelow:(id)arg1;
- (id)nextParagraphInColumn:(id)arg1;
- (id)belowTwoSides:(unsigned int)arg1;
- (id)twoSides:(unsigned int)arg1;
- (id)ignoreCallouts:(unsigned int)arg1;
- (id)simpleRule:(unsigned int)arg1;
- (void)setParagraphsRightIn:(id)arg1;
- (void)setParagraphsLeftIn:(id)arg1;
- (void)setParagraphsBelowIn:(id)arg1;
- (id)paragraphsRight;
- (id)paragraphsLeft;
- (id)paragraphsBelow;
- (id)paragraphsAbove;
- (void)setParagraphsAboveIn:(id)arg1;
- (_Bool)intervalOverlapTop:(double)arg1 bottom:(double)arg2 paragraphs:(id)arg3;
- (_Bool)intervalOverlapLeft:(double)arg1 right:(double)arg2 paragraphs:(id)arg3;
- (_Bool)intervalOverlapLeft:(double)arg1 right:(double)arg2 rects:(id)arg3;
- (long long)topDescending:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithParagraph:(id)arg1;

@end

@interface CPParagraphMaker : NSObject
{
    NSMutableArray *avail;
    NSMutableArray *paragraphs;
    NSMutableArray *compoundedShapesOnPage;
    _Bool spacingSet;
    double currentSpacing;
    CPZone *parent;
    CPPage *page;
}

+ (_Bool)line:(id)arg1 alignsWith:(id)arg2;
- (void)makeParagraphsIn:(id)arg1;
- (void)addCompoundedShapesOn:(id)arg1 to:(id)arg2;
- (void)addLinesTo:(id)arg1;
- (int)paragraph:(id)arg1 splits:(id)arg2;
- (id)newInitialParagraph;
- (_Bool)fitsBelow:(id)arg1 alignment:(unsigned long long)arg2 spacing:(double)arg3 from:(int)arg4;
- (_Bool)line:(id)arg1 isAlignedWith:(id)arg2;
- (unsigned long long)alignmentOf:(id)arg1 and:(id)arg2 and:(id)arg3;
- (_Bool)styleOf:(id)arg1 differsFromStyleOf:(id)arg2;
- (unsigned long long)alignmentOf:(id)arg1 and:(id)arg2;
- (_Bool)spacingOf:(id)arg1 and:(id)arg2 and:(id)arg3 is:(double *)arg4;
- (int)indexOfUniqueLineBelow:(id)arg1 from:(int)arg2;
- (int)linesThatOverlapLineAt:(int)arg1 between:(double)arg2 and:(double)arg3 from:(int)arg4;
- (_Bool)line:(id)arg1 isBelow:(id)arg2;
- (_Bool)line:(id)arg1 isDirectlyBelow:(id)arg2;
- (_Bool)isGraphicBetween:(id)arg1 and:(id)arg2;
- (_Bool)firstWordOf:(id)arg1 fits:(id)arg2 indent:(double)arg3;
- (id)paragraphs;
- (void)dealloc;

@end

@interface CPPreformatter : NSObject
{
}

+ (void)preformatInPage:(id)arg1;
- (void)preformatIn:(id)arg1;
- (void)preformatInParagraph:(id)arg1;

@end

@interface CPReadingModel : NSObject
{
    long long _count;
    CDStruct_627e0f85 *_textLineRanges;
    CDStruct_627e0f85 *_stringLineRanges;
    long long *_pageNumbers;
    CDStruct_627e0f85 _pageRange;
    struct CGPDFDocument *_document;
    long long _numberOfLines;
    long long _numberOfParagraphs;
    long long _numberOfColumns;
    long long _numberOfLayoutAreas;
    NSString *_cachedString;
    NSAttributedString *_cachedAttributedString;
    long long _pageNumber;
    long long _pos;
    NSMutableArray *_tables;
    NSMutableArray *_lists;
    NSMutableArray *_headings;
    long long _pageNumberMemo;
    CDStruct_627e0f85 _textRangeMemo;
    struct _NSRange _rangeMemo;
    RMList *_currentList;
}

- (long long)lineIndexForPoint:(struct CGPoint)arg1 onPage:(unsigned long long)arg2;
- (struct _NSRange)linesForPage:(unsigned long long)arg1;
- (struct _NSRange)pageRangeForStringRange:(CDStruct_627e0f85)arg1;
- (struct _NSRange)stringRangeForTextRange:(CDStruct_627e0f85)arg1 onPageNumber:(unsigned long long)arg2;
- (id)attributedStringForLine:(unsigned long long)arg1;
- (id)stringForLine:(unsigned long long)arg1;
- (CDStruct_627e0f85)textRangeForStringRange:(struct _NSRange)arg1;
- (struct CGRect)pdfBoundsForRange:(struct _NSRange)arg1;
- (struct _NSRange)rangeForLine:(unsigned long long)arg1;
- (unsigned long long)lineForIndex:(unsigned long long)arg1;
- (id)attributedStringForRange:(struct _NSRange)arg1;
- (id)attributedString;
- (id)stringForRange:(struct _NSRange)arg1;
- (id)string;
- (struct CGRect)pdfBoundsForLine:(unsigned long long)arg1;
- (struct _NSRange)textRangeForLine:(unsigned long long)arg1;
- (struct _NSRange)stringRangeForLine:(unsigned long long)arg1;
- (unsigned long long)pageNumberForLine:(unsigned long long)arg1;
- (unsigned long long)lineCount;
- (long long)indexOfFirstLineOnPage:(unsigned long long)arg1;
- (void)clearCache;
- (void)buildModel:(struct CGPDFDocument *)arg1;
- (void)buildModel:(struct CGPDFDocument *)arg1 pageRange:(struct _NSRange)arg2;
- (void)headings:(struct CGPDFNode *)arg1 layout:(struct CGPDFLayout *)arg2;
- (void)lists:(struct CGPDFNode *)arg1 layout:(struct CGPDFLayout *)arg2;
- (void)addListsInColumn:(struct CGPDFNode *)arg1;
- (long long)findParagraph:(struct CGPDFNode *)arg1 inListArray:(id)arg2;
- (struct CGPDFNode *)firstParagraphInList:(id)arg1;
- (void)tables:(struct CGPDFNode *)arg1 layout:(struct CGPDFLayout *)arg2;
- (void)addTable:(struct CGPDFNode *)arg1 layout:(struct CGPDFLayout *)arg2;
- (id)headings;
- (id)lists;
- (id)tables;
- (void)dealloc;
- (id)initWithDocument:(struct CGPDFDocument *)arg1 withPageRange:(struct _NSRange)arg2;
- (id)initWithDocument:(struct CGPDFDocument *)arg1;
- (CDStruct_627e0f85)mapStringRange:(struct _NSRange)arg1;
- (struct CGRect)pdfBoundsForCursor:(struct _NSRange)arg1;
- (struct CGRect)pdfBoundsForNewLine:(CDStruct_627e0f85)arg1;
- (void)stringLineRanges;
- (unsigned long long)addRangeForLine:(unsigned long long)arg1 from:(unsigned long long)arg2;
- (void)visitLayoutAreas:(struct CGPDFNode *)arg1 completion:(CDUnknownBlockType)arg2;
- (void)visitColumns:(struct CGPDFNode *)arg1 completion:(CDUnknownBlockType)arg2;
- (void)visitParagraphs:(struct CGPDFNode *)arg1 completion:(CDUnknownBlockType)arg2;
- (void)visitTextLines:(struct CGPDFNode *)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addRange:(CDStruct_627e0f85)arg1;
- (void)increamentLayoutAreaCount;
- (void)incrementColumnCount;
- (void)incrementParagraphCount;
- (void)incrementLineCount;

@end

@interface CPRotatedText : NSObject
{
    NSMutableArray *zones;
}

- (void)addRotationZonesTo:(id)arg1;
- (id)rotationZones;
- (void)makeRotationZonesIn:(id)arg1;
- (void)dealloc;

@end

@interface CPRotation : CPZone
{
    double rotationAngle;
}

- (struct CGRect)renderedBounds;
- (struct CGRect)bounds;
- (double)rotationAngle;
- (void)setRotationAngle:(double)arg1;
- (void)accept:(id)arg1;
- (id)init;

@end

@interface CPShape : CPGraphicObject <CPDisposable>
{
    unsigned int pdfObjectID;
    struct CGPath *path;
    _Bool isUprightRectangle;
    int windingRule;
    double lineWidth;
    double miterLimit;
    int lineCap;
    int lineJoin;
    struct CGColor *fillColor;
    struct CGColor *strokeColor;
    union CGPDFObject *fillObject;
    union CGPDFObject *strokeObject;
    struct CGAffineTransform paintTransform;
    _Bool boundsComputed;
    _Bool renderedBoundsComputed;
}

- (unsigned int)pathElementCount;
- (void)makeLineFromVertex:(struct CGPoint)arg1 toVertex:(struct CGPoint)arg2;
- (id)string;
- (void)addShape:(id)arg1;
- (_Bool)canCombineWith:(id)arg1;
- (_Bool)isVisible;
- (_Bool)isStrokeFor:(id)arg1;
- (_Bool)hasSamePathAs:(id)arg1;
- (void)setPaintTransform:(struct CGAffineTransform)arg1;
- (struct CGAffineTransform)paintTransform;
- (void)setLineJoin:(int)arg1;
- (int)lineJoin;
- (void)setLineCap:(int)arg1;
- (int)lineCap;
- (void)setMiterLimit:(double)arg1;
- (double)miterLimit;
- (void)setLineWidth:(double)arg1;
- (double)lineWidth;
- (_Bool)hasStroke;
- (void)setStrokeObject:(union CGPDFObject *)arg1;
- (union CGPDFObject *)strokeObject;
- (void)setStrokeColor:(struct CGColor *)arg1;
- (struct CGColor *)strokeColor;
- (_Bool)hasFill;
- (void)setFillObject:(union CGPDFObject *)arg1;
- (union CGPDFObject *)fillObject;
- (void)setFillColor:(struct CGColor *)arg1;
- (struct CGColor *)fillColor;
- (void)setWindingRule:(int)arg1;
- (int)windingRule;
- (long long)zOrder;
- (void)accept:(id)arg1;
- (id)attributes;
- (_Bool)isUprightRectangle;
- (struct CGRect)innerBounds;
- (void)recomputeRenderedBounds;
- (struct CGRect)renderedBounds;
- (void)setPath:(struct CGPath *)arg1;
- (struct CGPath *)path;
- (void)setPdfObjectID:(unsigned int)arg1;
- (unsigned int)pdfObjectID;
- (void)recomputeBounds;
- (struct CGRect)bounds;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)init;
- (id)initWithPDFShape:(struct CPPDFShape *)arg1;

@end

@interface CPShapeRegion : CPGraphicRegion
{
}

- (void)accept:(id)arg1;
- (_Bool)isShapeRegion;

@end

@interface CPSpacerFinder : NSObject <CPDisposable>
{
    CPZone *contentZone;
    struct CGRect zoneBounds;
    struct CGRect textBounds;
    struct {
        unsigned int allocatedSize;
        unsigned int size;
        unsigned int count;
        CDStruct_183601bc *stats;
        CDStruct_183601bc **ordered;
    } spacerSequence;
    NSMutableArray *spacers;
    unsigned int segmentationCount;
    struct {
        id _field1;
        unsigned int _field2;
        CDStruct_183601bc *_field3;
    } *segmentations;
    struct {
        struct CGRect _field1;
        unsigned int _field2;
        unsigned int _field3;
        unsigned int _field4;
        unsigned int _field5;
        unsigned int _field6;
        unsigned int _field7;
        unsigned int _field8;
        unsigned int _field9;
        unsigned int _field10;
        unsigned int _field11;
        unsigned int _field12;
        unsigned int _field13;
        unsigned int _field14;
        CDStruct_c3b9c2ee _field15;
        CDStruct_c3b9c2ee _field16;
        CDStruct_c3b9c2ee _field17;
        CDStruct_c3b9c2ee _field18;
        double _field19;
        double _field20;
        _Bool _field21;
        _Bool _field22;
        _Bool _field23;
    } *qualityEntries;
}

- (id)spacers;
- (void)splitTextLines;
- (void)determineValidity;
- (void)assessQuality;
- (void)findSpacers;
- (void)initializeJunctions;
- (void)initializeSegmentations;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithContentZone:(id)arg1;

@end

@interface CPTable : CPChunk <CPDisposable, CPGraphicUser>
{
    struct CGRect tableBounds;
    unsigned int rowCount;
    double *rowY;
    unsigned int columnCount;
    double *columnX;
    struct CGColor *backgroundColor;
    unsigned int backgroundGraphicCount;
    id *backgroundGraphics;
    unsigned int usedGraphicCount;
    _Bool disposed;
}

@property(readonly, nonatomic) unsigned int backgroundGraphicCount; // @synthesize backgroundGraphicCount;
@property(readonly, nonatomic) double *columnX; // @synthesize columnX;
@property(readonly, nonatomic) double *rowY; // @synthesize rowY;
@property(readonly, nonatomic) struct CGRect tableBounds; // @synthesize tableBounds;
- (unsigned int)usedGraphicCount;
- (void)incrementUsedGraphicCount;
- (id)backgroundGraphicAtIndex:(unsigned int)arg1;
- (void)setBackgroundGraphics:(id)arg1;
- (struct CGColor *)backgroundColor;
@property(nonatomic) unsigned int columnCount;
@property(nonatomic) unsigned int rowCount;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithBounds:(struct CGRect)arg1;

@end

@interface CPTableCell : CPChunk <CPDisposable>
{
    struct CGRect cellBounds;
    CDStruct_627e0f85 rowSpan;
    CDStruct_627e0f85 columnSpan;
    struct {
        struct CGRect _field1;
        struct CGColor *_field2;
        unsigned int _field3;
        id *_field4;
    } *borders;
    struct CGColor *backgroundColor;
    unsigned int backgroundGraphicCount;
    id *backgroundGraphics;
}

@property(readonly, nonatomic) unsigned int backgroundGraphicCount; // @synthesize backgroundGraphicCount;
@property(nonatomic) CDStruct_627e0f85 columnSpan; // @synthesize columnSpan;
@property(nonatomic) CDStruct_627e0f85 rowSpan; // @synthesize rowSpan;
@property(readonly, nonatomic) struct CGRect cellBounds; // @synthesize cellBounds;
- (long long)compareCellOrdinal:(id)arg1;
- (id)graphicObjectOfBorder:(int)arg1 atIndex:(unsigned int)arg2;
- (unsigned int)graphicCountOfBorder:(int)arg1;
- (struct CGColor *)colorOfBorder:(int)arg1;
- (struct CGRect)boundsOfBorder:(int)arg1;
- (void)setBorder:(int)arg1 bounds:(struct CGRect)arg2 graphics:(id)arg3;
- (id)backgroundGraphicAtIndex:(unsigned int)arg1;
- (void)setBackgroundGraphics:(id)arg1;
- (struct CGColor *)backgroundColor;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)initWithBounds:(struct CGRect)arg1;

@end

@interface CPTableMaker : NSObject
{
    CPZone *tableZone;
    CPTable *table;
    unsigned int cellIndex;
    CDStruct_c3b9c2ee *rowYIntervals;
    CDStruct_c3b9c2ee *columnXIntervals;
}

+ (void)makeTablesInPage:(id)arg1;
+ (void)makeTablesInZone:(id)arg1;
+ (void)makeTableFrom:(id)arg1;
+ (_Bool)isTable:(id)arg1;
- (void)makeTable;
- (void)determineRowsAndColumns:(_Bool)arg1;
- (id)newTableCellFromZone:(id)arg1;
- (id)newBackgroundGraphicArrayFromRectangularZone:(id)arg1;
- (void)dealloc;
- (id)initWithZone:(id)arg1;

@end

@interface CPTextBox : CPRegion
{
    double rotationAngle;
}

- (id)description;
- (struct CGRect)bounds;
- (_Bool)isRotated;
- (double)rotationAngle;
- (void)setRotationAngle:(double)arg1;
- (void)accept:(id)arg1;
- (_Bool)isBoxRegion;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface CPTextBoxMaker : NSObject
{
    CPBody *bodyZone;
    CPZone *mainZone;
}

+ (void)boxLayoutsIn:(id)arg1;
+ (void)promoteLayoutsIn:(id)arg1;
- (void)boxLayoutsIn:(id)arg1;
- (void)boxLayout:(id)arg1;
- (void)promoteLayoutsIn:(id)arg1;
- (void)promoteLayoutsInCertainRegions:(id)arg1;
- (_Bool)layoutIsSliced:(id)arg1;
- (void)rotate:(id)arg1;
- (void)rotateTextBox:(id)arg1;
- (void)makeBoxesWith:(id)arg1 parent:(id)arg2;

@end

@interface CPTextObject : CPChunk
{
    struct CGPoint anchor;
    _Bool metricInfoCalculated;
    float maxFontSize;
    double maxFontLineHeight;
}

- (void)translateObjectYBy:(double)arg1;
- (void)clearCachedInfo;
- (double)maxFontLineHeight;
- (float)maxFontSize;
- (void)calculateMetrics;

@end

@interface CPTextLine : CPTextObject <CPDisposable>
{
    CPCharSequence *charSequence;
    CDStruct_2e2afed4 *wordArray;
    unsigned int wordCount;
    struct CPInlineContainer *inlineList;
    int lineNumber;
    int columnNumber;
    double baseline;
    _Bool baseLineIsNull;
    _Bool hasBeenSplit;
    _Bool hasBeenProcessed;
    _Bool maySplit;
    _Bool hasTabs;
    NSArray *columnBreaks;
    NSArray *xsegments;
    int levels;
    float maximumLetterGap;
    float maximumWordGap;
    int tabsBefore;
    _Bool irregular;
    unsigned int leftSpacerIndex;
    unsigned int rightSpacerIndex;
    _Bool isListItem;
    unsigned int listSpacerIndex;
    _Bool lineBreakAfter;
    struct CPPDFStyle *uniformStyle;
    unsigned short uniformStyleFlags;
    double monospaceWidth;
    unsigned int *spacesBefore;
    _Bool disposed;
}

@property(nonatomic) _Bool lineBreakAfter; // @synthesize lineBreakAfter;
@property(nonatomic) unsigned int listSpacerIndex; // @synthesize listSpacerIndex;
@property(nonatomic) _Bool isListItem; // @synthesize isListItem;
@property(nonatomic) unsigned int rightSpacerIndex; // @synthesize rightSpacerIndex;
@property(nonatomic) unsigned int leftSpacerIndex; // @synthesize leftSpacerIndex;
- (double)medianFontSize;
- (_Bool)hasDropCap;
- (long long)topIsAbove:(id)arg1;
- (id)attributes;
- (void)setIrregular:(_Bool)arg1;
- (_Bool)irregular;
- (void)setMaximumWordGap:(float)arg1;
- (float)maximumWordGap;
- (void)setMaximumLetterGap:(float)arg1;
- (float)maximumLetterGap;
- (void)recomputeLevels;
- (void)setLevels:(int)arg1;
- (int)levels;
- (void)setSpaces:(unsigned int)arg1 beforeWordAtIndex:(unsigned int)arg2;
- (unsigned int)spacesBeforeWordAtIndex:(unsigned int)arg1;
- (double)monospaceWidth;
- (_Bool)isMonospaced;
- (_Bool)styleIsUniform:(struct CPPDFStyle **)arg1 styleFlags:(unsigned short)arg2;
- (void)recomputeBaseline;
- (void)translateObjectYBy:(double)arg1;
- (_Bool)isIndivisible;
- (void)setBaselineToNull;
- (void)setBaseline:(double)arg1;
- (double)baseline;
- (_Bool)hyphenated;
- (struct CGPoint)anchor;
- (_Bool)overlapsHorizontally:(struct CGRect)arg1;
- (_Bool)overlapsWith:(id)arg1;
- (long long)baseLineDescending:(id)arg1;
- (long long)baseLineAscending:(id)arg1;
- (struct CGRect)bounds;
- (void)fitBoundsToChildren;
- (int)tabsBefore;
- (void)setTabsBefore:(int)arg1;
- (_Bool)hasTabs;
- (void)setHasTabs:(_Bool)arg1;
- (void)accept:(id)arg1;
- (void)setColumnBreaks:(id)arg1;
- (id)columnBreaks;
- (_Bool)hasBeenProcessed;
- (void)setHasBeenProcessed:(_Bool)arg1;
- (_Bool)hasBeenSplit;
- (void)setHasBeenSplit:(_Bool)arg1;
- (id)properties;
- (_Bool)mapToWordPairsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToWordPairs:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToWordsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)mapToWords:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;
- (_Bool)removeTextLines:(id)arg1 whereTrue:(CDUnknownFunctionPointerType)arg2 passing:(void *)arg3;
- (id)newTextLineFromWordAt:(unsigned int)arg1 lengthInWords:(unsigned int)arg2;
- (_Bool)changesFontAt:(id)arg1;
- (_Bool)hasJustifiedAlignment;
- (int)align;
- (long long)zOrder;
- (void)anchorChunk:(id)arg1 atWordIndex:(unsigned int)arg2;
- (struct CPInlineContainer *)inlineList;
- (unsigned int)inlineCount;
- (CDStruct_2e2afed4 *)lastWord;
- (CDStruct_2e2afed4 *)firstWord;
- (CDStruct_2e2afed4 *)wordAtIndex:(unsigned int)arg1;
- (struct CGRect)boundsOfWordAtIndex:(unsigned int)arg1;
- (unsigned int)wordCount;
- (CDStruct_2e2afed4 *)wordArrayOfSize:(unsigned int)arg1;
- (CDStruct_2e2afed4 *)wordArray;
- (id)charSequence;
- (void)setCharSequence:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)dispose;
- (id)init;

@end

@interface CPTextLineMaker : NSObject
{
    NSMutableArray *textLines;
}

- (unsigned int)makeTextLines:(id)arg1;
- (void)zOrderSplitLines:(id)arg1;
- (void)splitByGraphic:(id)arg1 with:(struct CPPDFContext *)arg2;
- (id)textLines;
- (void)dealloc;

@end

@interface CPTextLineMerge : NSObject
{
    NSMutableArray *avail;
}

- (void)mergeLinesIn:(id)arg1;
- (void)dropCaps:(id)arg1 to:(id)arg2;
- (double)averageHeight:(id)arg1;
- (id)findLineFor:(id)arg1 in:(id)arg2;
- (void)detachDropCaps:(id)arg1 to:(id)arg2;
- (unsigned int)countOverlapsOfLineAtIndex:(unsigned int)arg1 in:(id)arg2;
- (void)removeOverlapping:(id)arg1;
- (void)makeOverlappingLinesTo:(id)arg1;
- (_Bool)hasOverlappingLines;
- (void)eliminate:(id)arg1;
- (void)mergeByColumn:(id)arg1;
- (void)mergeLinesInInterval:(id)arg1 from:(id)arg2;
- (void)mergeColumn:(id)arg1;
- (void)addInterval:(id)arg1 to:(id)arg2;
- (_Bool)fits:(id)arg1 into:(id)arg2;

@end

@interface CPTextLineSplitter : NSObject
{
}

+ (void)splitLinesIn:(id)arg1;

@end

@interface CPZoneBorder : NSObject <NSCopying, CPCopying>
{
    struct CGRect bounds;
    CPPage *page;
    NSMutableArray *ownerArray;
    NSMutableArray *graphicObjects;
    NSMutableArray *neighbors;
    NSMutableArray *intersections;
    _Bool isHorizontal;
    _Bool hasForwardVector;
    _Bool hasBackwardVector;
    double overhangMin;
    double overhangMax;
}

+ (struct CGRect)extendRect:(struct CGRect)arg1;
+ (int)clockwiseWindingNumberOfShapeWithBorders:(id)arg1;
+ (void)outerVertices:(struct CGPoint *)arg1 fromBorders:(id)arg2 swollenBy:(double)arg3;
+ (void)removeIntersectionBetweenBorder:(id)arg1 andBorder:(id)arg2;
+ (void)addIntersectionBetweenBorder:(id)arg1 andBorder:(id)arg2 atRect:(struct CGRect)arg3;
- (long long)compareYBounds:(id)arg1;
- (long long)compareXBounds:(id)arg1;
- (void)removeLooseThreadsStartingFrom:(id)arg1;
- (void)trimToLastIntersections;
- (void)combine:(id)arg1;
- (_Bool)continues:(id)arg1;
- (_Bool)crosses:(id)arg1;
- (_Bool)extractCycleTo:(id)arg1 goingForward:(_Bool)arg2 throughIntersectionIndex:(unsigned int)arg3 returningTo:(id)arg4 atRect:(struct CGRect *)arg5;
- (_Bool)extractCycleTo:(id)arg1 goingForward:(_Bool)arg2 startingAtIndex:(unsigned int)arg3;
- (_Bool)hasVectorGoingForward:(_Bool)arg1 startingAtIndex:(unsigned int *)arg2;
- (void)instantiateVectors;
- (_Bool)hasCounterclockwiseVectorAtIndex:(unsigned int)arg1 startingForward:(_Bool)arg2;
- (_Bool)hasClockwiseVectorAtIndex:(unsigned int)arg1 startingForward:(_Bool)arg2;
- (_Bool)windsClockwiseOnto:(id)arg1;
- (unsigned int)indexOfIntersectionWith:(id)arg1;
- (_Bool)intersectsWith:(id)arg1 atRect:(struct CGRect *)arg2;
- (unsigned int)intersectionCount;
- (_Bool)isVertical;
- (_Bool)isHorizontal;
- (void)setSide:(int)arg1 ofPage:(id)arg2;
- (_Bool)hasBackwardVector;
- (void)setHasBackwardVector:(_Bool)arg1;
- (_Bool)hasForwardVector;
- (void)setHasForwardVector:(_Bool)arg1;
- (_Bool)hasNeighborShape:(id)arg1 atSide:(int)arg2;
- (_Bool)hasNeighborShape:(id)arg1;
- (id)neighborAtIndex:(unsigned int)arg1;
- (void)removeNeighborAtIndex:(unsigned int)arg1;
- (void)addNeighbor:(id)arg1;
- (unsigned int)neighborCount;
- (id)graphicObjects;
- (id)graphicObjectAtIndex:(unsigned int)arg1;
- (void)removeGraphicObjectAtIndex:(unsigned int)arg1;
- (void)addGraphicObject:(id)arg1;
- (unsigned int)graphicObjectCount;
- (long long)zOrder;
- (void)setBounds:(struct CGRect)arg1;
- (struct CGRect)bounds;
- (id)ownerArray;
- (void)removeFromArrayAtIndex:(unsigned int)arg1;
- (void)removeFromArray;
- (void)addToArray:(id)arg1 atIndex:(unsigned int)arg2;
- (void)addToArray:(id)arg1;
- (id)page;
- (id)copyWithoutIntersections;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initSuper;
- (id)initWithGraphicObject:(id)arg1;
- (id)init;

@end

@interface CPZoneBorderIntersection : NSObject <NSCopying, CPCopying>
{
    struct CGRect intersectionRect;
    CPZoneBorder *intersectingBorder;
    _Bool forwardVector;
    _Bool backwardVector;
}

- (long long)comparePositionLengthwise:(id)arg1;
- (_Bool)backwardVector;
- (void)setBackwardVector:(_Bool)arg1;
- (_Bool)forwardVector;
- (void)setForwardVector:(_Bool)arg1;
- (id)intersectingBorder;
- (void)setIntersectingBorder:(id)arg1;
- (struct CGRect)intersectionRect;
- (void)setIntersectionRect:(struct CGRect)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initSuper;

@end

@interface CPZoneBorderNeighbor : NSObject <NSCopying, CPCopying>
{
    CPShape *neighborShape;
    int shapeSide;
}

- (int)shapeSide;
- (void)setShapeSide:(int)arg1;
- (id)neighborShape;
- (void)setNeighborShape:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initSuper;
- (id)init;

@end

@interface CPZoneFilter : NSObject
{
    CPPage *page;
    double minArea;
}

+ (void)filterZonesInPage:(id)arg1;
- (void)findUsedGraphicsInZone:(id)arg1;
- (void)findBackgroundGraphicsInZone:(id)arg1;
- (void)filterZonesInZone:(id)arg1;
- (id)initWithPage:(id)arg1;

@end

@interface CPZoneMaker : NSObject
{
    CPCharSequence *charactersOnPage;
}

- (id)newZoneForStraddlersFrom:(id)arg1;
- (void)addObjectsToStraddler:(id)arg1 from:(id)arg2;
- (void)cutVerticalBorders:(id)arg1 whereObscuredByShape:(id)arg2;
- (void)cutHorizontalBorders:(id)arg1 whereObscuredByShape:(id)arg2;
- (void)makeZonesWithBoundaryIn:(id)arg1;
- (void)mergeQualifyingRectanglesIn:(id)arg1;
- (unsigned int)categorizeGraphicsIn:(id)arg1;
- (void)makeZonesIn:(id)arg1;
- (_Bool)overlap:(id)arg1 with:(id)arg2;
- (void)dealloc;

@end

@interface RMHeading : NSObject
{
    struct CGPDFNode *_node;
    struct CGPDFPage *_page;
    CDStruct_627e0f85 _textRange;
}

@property CDStruct_627e0f85 textRange; // @synthesize textRange=_textRange;
@property(readonly) struct CGPDFPage *page; // @dynamic page;
- (struct CGRect)bounds;
- (id)initWithNode:(struct CGPDFNode *)arg1 onPage:(struct CGPDFPage *)arg2;

@end

@interface RMList : NSObject
{
    NSMutableArray *_items;
}

@property(readonly) NSArray *listItems; // @synthesize listItems=_items;
- (struct CGRect)bounds;
@property(readonly) struct CGPDFPage *page; // @dynamic page;
- (void)addItem:(id)arg1;

@end

@interface RMListItem : NSObject
{
    struct CGPDFNode **_paragraphs;
    unsigned long long _count;
    unsigned long long _pos;
}

@property(readonly) struct CGPDFNode **paragraphNodes; // @synthesize paragraphNodes=_paragraphs;
- (struct CGRect)bounds;
@property(readonly) struct CGPDFPage *page; // @dynamic page;
- (void)addParagraph:(struct CGPDFNode *)arg1;
- (void)dealloc;
- (id)initWithCount:(unsigned long long)arg1;

@end

@interface RMTable : NSObject <NSFastEnumeration>
{
    NSMutableArray *_matrix;
    unsigned long long _elementCount;
    NSMutableArray *_rowFirstElements;
    NSMutableArray *_columnFirstElements;
    struct CGPDFLayout *_layout;
    struct CGPDFNode *_tableRoot;
    _Bool _rowOrder;
}

@property _Bool rowOrder; // @synthesize rowOrder=_rowOrder;
- (struct CGRect)bounds;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)columnAtIndex:(unsigned long long)arg1;
- (id)rowAtIndex:(unsigned long long)arg1;
- (unsigned long long)columns;
- (unsigned long long)rows;
@property(readonly) struct CGPDFPage *page; // @dynamic page;
- (struct CGPDFLayout *)layout;
- (void)dealloc;
- (void)matrixDealloc;
- (id)initWithRoot:(struct CGPDFNode *)arg1 layout:(struct CGPDFLayout *)arg2;
- (void)dump;

@end

@interface RMTableCell : NSObject
{
    NSString *_contents;
    RMTableCell *_nextCellInColumn;
    RMTableCell *_nextCellInRow;
    RMTable *_table;
    struct CGPDFNode *_tableCellNode;
}

@property struct CGPDFNode *tableCellNode; // @synthesize tableCellNode=_tableCellNode;
@property RMTable *table; // @synthesize table=_table;
@property(retain) RMTableCell *nextCellInRow; // @synthesize nextCellInRow=_nextCellInRow;
@property(retain) RMTableCell *nextCellInColumn; // @synthesize nextCellInColumn=_nextCellInColumn;
- (struct CGColor *)backgroundColor;
- (unsigned long long)column;
- (unsigned long long)row;
- (id)contents;
- (struct CGRect)bounds;
@property(readonly) struct CGPDFPage *page; // @dynamic page;
- (void)dealloc;

@end

@interface SurfaceLayer : CALayer
{
}

- (id)actionForKey:(id)arg1;

@end

@interface UIPDFAnnotation : NSObject
{
    struct CGPDFDictionary *_dictionary;
    struct CGColor *_color;
    void *_appearanceStream;
    struct CGPDFString *_pdfContents;
    NSString *_annotationID;
    _Bool _hidden;
    UIPDFAnnotationView *_annotationView;
    UIPDFAnnotationController *_annotationController;
    NSMutableArray *_quadPoints;
    CALayer *_drawingLayer;
    UIPDFSelection *_selection;
    _Bool editable;
    id data;
    NSString *_contents;
    long long _index;
    UIPDFPopupAnnotation *_popup;
    NSString *_associatedAnnotationID;
    UIPDFPage *_page;
    unsigned long long _tag;
}

+ (id)newAnnotationWithPage:(id)arg1 fromArchive:(id)arg2;
@property(nonatomic) unsigned long long tag; // @synthesize tag=_tag;
@property(nonatomic) UIPDFPage *page; // @synthesize page=_page;
@property(retain, nonatomic) CALayer *drawingLayer; // @synthesize drawingLayer=_drawingLayer;
@property(retain, nonatomic) NSString *associatedAnnotationID; // @synthesize associatedAnnotationID=_associatedAnnotationID;
@property(nonatomic) UIPDFPopupAnnotation *popup; // @synthesize popup=_popup;
@property(nonatomic) long long index; // @synthesize index=_index;
@property(retain, nonatomic) NSString *contents; // @synthesize contents=_contents;
@property(retain, nonatomic) id data; // @synthesize data;
@property(nonatomic) _Bool editable; // @synthesize editable;
@property(nonatomic) UIPDFAnnotationController *annotationController; // @synthesize annotationController=_annotationController;
@property(retain, nonatomic) UIPDFAnnotationView *annotationView; // @synthesize annotationView=_annotationView;
@property(nonatomic) UIPDFSelection *selection; // @dynamic selection;
- (id)descriptionHOLD;
- (struct CGRect)popUpAnnotationRect;
- (const char *)pdfContents;
- (_Bool)hasPopUp;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)drawInContext:(struct CGContext *)arg1;
- (struct CGColor *)color;
- (void)setColor:(struct CGColor *)arg1;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (struct CGRect)bounds;
- (struct CGRect)frame;
- (struct CGRect)Rect;
- (struct CGRect)rectIn:(struct CGPDFArray *)arg1;
- (_Bool)hidden;
- (id)getImageNamed:(id)arg1 ofType:(id)arg2;
- (id)archive;
- (int)annotationType;
- (Class)viewClass;
- (void)setAnnotationID:(id)arg1;
- (id)annotationID;
- (void)setPageView:(id)arg1;
- (void)dealloc;
- (id)initWithAnnotationDictionary:(struct CGPDFDictionary *)arg1;
- (id)init;
@property(readonly, nonatomic) _Bool recognizeGestures; // @dynamic recognizeGestures;
- (struct CGPath *)newPathFromQuadPoints;
- (void)makeQuadpointsFrom:(id)arg1;
- (id)newSelection;

@end

@interface UIPDFAnnotationController : NSObject <UIGestureRecognizerDelegate>
{
    UIPDFPageView *_pageView;
    int _lock;
    struct CGPoint _startPoint;
    _Bool _moving;
    UIPDFMarkupAnnotation *_currentAnnotation;
    CDStruct_627e0f85 _initialRange;
    _Bool _tracking;
    CALayer *_drawingSurface;
    id <NSObject><UIPDFAnnotationControllerDelegate> _delegate;
    struct CGSize _cachedMarginNoteSize;
    _Bool makeUnderlineAnnotation;
    _Bool _allowEditing;
    UIColor *_currentColor;
}

+ (struct CGImage *)newMaskImage:(struct CGPDFPage *)arg1 size:(struct CGSize)arg2;
+ (id)newAnnotation:(struct CGPDFDictionary *)arg1 type:(const char *)arg2;
+ (_Bool)pageHasAnnotations:(id)arg1;
@property(nonatomic) UIColor *currentColor; // @synthesize currentColor=_currentColor;
@property(nonatomic) _Bool allowEditing; // @synthesize allowEditing=_allowEditing;
@property(readonly, nonatomic) UIPDFPageView *pageView; // @synthesize pageView=_pageView;
@property(readonly, nonatomic) _Bool tracking; // @synthesize tracking=_tracking;
@property(nonatomic) id <NSObject><UIPDFAnnotationControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) CALayer *drawingSurface; // @synthesize drawingSurface=_drawingSurface;
@property(nonatomic) _Bool makeUnderlineAnnotation; // @synthesize makeUnderlineAnnotation;
@property(retain, nonatomic) UIPDFAnnotation *currentAnnotation; // @synthesize currentAnnotation=_currentAnnotation;
- (id)marginNoteImage:(id)arg1;
- (struct CGSize)marginNoteImageSize;
- (struct CGImage *)underlineImageFor:(struct CGRect)arg1;
- (struct CGImage *)newHighlightMaskImageFor:(struct CGRect)arg1;
- (void)copyAttributesOf:(id)arg1 to:(id)arg2;
- (id)annotatePageSelection;
- (_Bool)willDoSomethingWithTap:(struct CGPoint)arg1;
- (_Bool)annotationLongPressRecognized:(id)arg1;
- (_Bool)annotationSingleTapRecognized:(id)arg1;
- (_Bool)annotationBriefPressRecognized:(id)arg1;
- (id)linkAnnotationAt:(struct CGPoint)arg1;
- (id)annotationAt:(struct CGPoint)arg1;
- (_Bool)linkAnnotationShouldBegin:(id)arg1;
- (_Bool)isLinkAnnotationAt:(struct CGPoint)arg1;
- (id)_linkAnnotationViewAt:(struct CGPoint)arg1;
- (void)didEndTrackingAtPoint:(struct CGPoint)arg1;
- (void)endTrackingAtPoint:(struct CGPoint)arg1;
- (void)tracking:(struct CGPoint)arg1;
- (void)startTracking:(struct CGPoint)arg1;
- (_Bool)willTrackAtPoint:(struct CGPoint)arg1;
- (void)_initialRange:(struct CGPoint)arg1;
- (_Bool)trackMoved:(struct CGPoint)arg1;
- (_Bool)madeInstantAnnotation;
- (void)mergeSelectionOfAnnotation:(id)arg1;
- (_Bool)isSelection:(struct CGPDFSelection *)arg1 equalTo:(struct CGPDFSelection *)arg2;
- (_Bool)intersects:(struct CGPDFSelection *)arg1 with:(struct CGPDFSelection *)arg2;
- (void)annotationTapRecognized:(id)arg1;
- (void)linkPressRecognized:(id)arg1;
- (void)doubleTapRecognized:(id)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)unlock;
- (void)lock;
- (void)drawAnnotations:(struct CGContext *)arg1;
- (void)setNeedsDisplay;
- (void)setView:(id)arg1;
- (void)layoutAnnotationViews:(id)arg1;
- (void)_addAnnotationViewFor:(id)arg1;
- (void)_addLinkAnnotationViewFor:(id)arg1;
- (void)_addRecognizers:(id)arg1;
- (void)hostViewDidScroll;
- (void)setSurfacePosition:(id)arg1;
- (void)addDrawingSurface:(id)arg1 view:(id)arg2;
- (struct CGRect)convertRect:(struct CGRect)arg1 toSurfaceLayer:(id)arg2;
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toSurfaceLayer:(id)arg2;
- (void)addLinkAnnotationViews;
- (_Bool)willHandleTouchGestureAtPoint:(struct CGPoint)arg1;
- (void)addAnnotation:(id)arg1;
- (void)dealloc;
- (id)initWithPageView:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface UIPDFAnnotationParserDelegate : NSObject <NSXMLParserDelegate>
{
    NSMutableString *_characters;
    _Bool _parseError;
    UIPDFAnnotation *_annotation;
}

@property(readonly, nonatomic) _Bool parseError; // @synthesize parseError=_parseError;
@property(retain, nonatomic) UIPDFAnnotation *annotation; // @synthesize annotation=_annotation;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)parser:(id)arg1 foundCharacters:(id)arg2;
- (void)parserDidStartDocument:(id)arg1;
- (void)parser:(id)arg1 parseErrorOccurred:(id)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface UIPDFAnnotationView : UIView
{
    UIPDFAnnotation *_annotation;
}

@property(nonatomic) UIPDFAnnotation *annotation; // @synthesize annotation=_annotation;

@end

@interface UIPDFSquareOrCircleAnnotation : UIPDFAnnotation
{
    double _W;
    unsigned short _S;
    struct CGPDFArray *_D;
    double _SE;
    double _I;
}

- (id)initWithAnnotationDictionary:(struct CGPDFDictionary *)arg1;

@end

@interface UIPDFCircleAnnotation : UIPDFSquareOrCircleAnnotation
{
}

- (void)drawInContext:(struct CGContext *)arg1;
- (int)annotationType;

@end

@interface UIPDFDocument : NSObject
{
    struct CGPDFDocument *_cgDocument;
    unsigned long long _numberOfPages;
    double _cachedWidth;
    NSString *_documentID;
    NSString *_documentName;
    UIPDFPageImageCache *_pageImageCache;
    unsigned long long _imageCacheCount;
    unsigned long long _imageCacheLookAhead;
    int _lock;
    int _imageCacheLock;
    UIPDFPageImageCache *_thumbnailCache;
    int _thumbnailLock;
    id <NSObject><UIPDFDocumentDelegate> _delegate;
}

+ (id)documentNamed:(id)arg1;
@property(readonly) struct CGPDFDocument *CGDocument; // @synthesize CGDocument=_cgDocument;
@property(nonatomic) id <NSObject><UIPDFDocumentDelegate> delegate; // @synthesize delegate=_delegate;
- (_Bool)copyDocumentTo:(id)arg1;
- (_Bool)allowsCopying;
@property(readonly) NSString *documentID; // @dynamic documentID;
- (void)purgePagesBefore:(unsigned long long)arg1;
- (id)copyPageAtIndex:(unsigned long long)arg1;
- (id)pageAtIndex:(unsigned long long)arg1;
@property(readonly) unsigned long long numberOfPages; // @dynamic numberOfPages;
- (void)setImageCacheCount:(unsigned long long)arg1 lookAhead:(unsigned long long)arg2;
- (void)dealloc;
- (id)initWithURL:(id)arg1;
- (id)initWithCGPDFDocument:(struct CGPDFDocument *)arg1;
- (struct CGPDFDocument *)copyCGPDFDocument;
@property(retain) UIPDFPageImageCache *thumbnailCache; // @dynamic thumbnailCache;
@property(retain) UIPDFPageImageCache *pageImageCache; // @dynamic pageImageCache;
- (double)sumHeight;
- (double)sumWidth;
- (double)maxHeight;
- (double)maxWidth;

@end

@interface UIPDFFreeTextAnnotation : UIPDFAnnotation
{
}

- (int)annotationType;
- (_Bool)hasPopUp;

@end

@interface UIPDFMarkupAnnotation : UIPDFAnnotation
{
}

@end

@interface UIPDFHighlightAnnotation : UIPDFMarkupAnnotation
{
    struct CGColor *_highLightColor;
}

- (_Bool)recognizeGestures;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)drawLayerRotated:(id)arg1 inContext:(struct CGContext *)arg2 selection:(id)arg3 rectangles:(unsigned long long)arg4;
- (void)drawLayerUpright:(id)arg1 inContext:(struct CGContext *)arg2 selection:(id)arg3 rectangles:(unsigned long long)arg4;
- (int)annotationType;
- (Class)viewClass;

@end

@interface UIPDFHighlightAnnotationView : UIPDFAnnotationView
{
}

@end

@interface UIPDFHighlightLayer : CALayer
{
    struct CGPath *_clipPath;
    struct CGPath *_borderPath;
    struct CGPoint offset;
}

@property(nonatomic) struct CGPoint offset; // @synthesize offset;
@property(nonatomic) struct CGPath *borderPath; // @dynamic borderPath;
@property(nonatomic) struct CGPath *clipPath; // @dynamic clipPath;
- (void)dealloc;

@end

@interface UIPDFHighlighter : NSObject
{
    NSMutableArray *_highLightLayers;
    struct CGColor *_highlightColor;
    struct CGColor *_borderColor;
    struct CGColor *_whiteColor;
    struct CGPDFPage *_page;
    double _enlargeFactor;
    double _pdfToViewScale;
    double inset;
}

@property(nonatomic) double inset; // @synthesize inset;
- (void)clear;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)setNeedsDisplay;
- (void)addHighlightFor:(id)arg1 to:(id)arg2 animated:(_Bool)arg3;
- (void)addHighlightLayerFor:(id)arg1 atIndex:(unsigned long long)arg2 to:(id)arg3 animated:(_Bool)arg4;
- (void)addAnimation:(id)arg1;
- (void)makeTheBorderPath:(id)arg1 layer:(id)arg2 rectangle:(CDStruct_f9662865)arg3 upright:(_Bool)arg4;
- (void)makeTheClipPath:(id)arg1 layer:(id)arg2 rectangle:(CDStruct_f9662865)arg3 upright:(_Bool)arg4;
- (void)addRectPath:(struct CGPath *)arg1 toView:(id)arg2 layer:(id)arg3 rectangle:(CDStruct_f9662865)arg4 upright:(_Bool)arg5;
- (void)unhide;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFLineAnnotation : UIPDFAnnotation
{
}

- (int)annotationType;

@end

@interface UIPDFLinkAnnotation : UIPDFMarkupAnnotation
{
}

- (_Bool)recognizeGestures;
- (_Bool)shouldRecognizeTapOrPress:(struct CGPoint)arg1;
- (_Bool)quadPoints:(struct CGPDFArray *)arg1 within:(struct CGRect)arg2;
- (struct CGRect)linkRectangle;
- (unsigned long long)pageNumber;
- (id)url;
- (unsigned long long)getNamedDestination:(struct CGPDFDictionary *)arg1;
- (unsigned long long)getDestination:(struct CGPDFDictionary *)arg1;
- (id)newBaseURL;

@end

@interface UIPDFMagnifierController : NSObject
{
    UIWindow *_textEffectsWindow;
    UIView *_textEffectsSubView;
    CALayer *_loLayer;
    CALayer *_hiLayer;
    CALayer *_imageContainer;
    CALayer *_imageLayer;
    CAShapeLayer *_selectionLayer;
    CALayer *_maskLayer;
    double _power;
    struct CGSize _magnifierSize;
    _Bool _loupe;
    struct CGPoint _touchPoint;
    struct CGPoint _pointToMagnify;
    double _enlargementScale;
    CALayer *_leftBar;
    CALayer *_leftGrabber;
    CALayer *_rightBar;
    CALayer *_rightGrabber;
    struct CGSize _controlPointSize;
    struct CGColor *_grabberColor;
    unsigned long long _pageRotation;
    _Bool _visible;
    UIPDFPageView *pageView;
}

@property(nonatomic) UIPDFPageView *pageView; // @synthesize pageView;
- (_Bool)visible;
- (void)hide;
- (void)move;
- (void)showMagnifier;
- (void)showLoupe;
- (void)_show;
- (void)setPosition:(struct CGPoint)arg1 viewPoint:(struct CGPoint)arg2;
- (void)dealloc;
- (id)init;
- (void)setImageContainerMask;
- (id)imageReceived:(id)arg1 data:(id)arg2;
- (void)placeImage;
- (void)setSelectionPath;
- (void)setSelectionPath:(struct CGPath *)arg1 bounds:(struct CGRect)arg2 transform:(struct CGAffineTransform)arg3;
- (void)addBling;
- (void)setLayerPositions;
- (void)setImageContainerPositionLoupe;
- (void)setImageContainerPositionMagnifier;
- (struct CGPoint)pointToMagnifyInPDFSpace;
- (struct CGPoint)viewPointInTextEffectsSpace;
- (struct CGPoint)convertPointToEnlargedSpace:(struct CGPoint)arg1;
- (struct CGRect)convertRectToEnlargedSpace:(struct CGRect)arg1;
- (struct CGRect)convertRectToRotatedPage:(struct CGRect)arg1;
- (struct CGPoint)convertPointToRotatedPage:(struct CGPoint)arg1;
- (struct CGPoint)convertViewPointToEnlargedSpace:(struct CGPoint)arg1;
- (_Bool)isSelectionUniformlyRotated:(double *)arg1;
- (void)setPower;
- (void)tearDownLayers;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)addTextRangeHandles;
- (void)setTextRangeHandlePositions;

@end

@interface UIPDFPage : NSObject
{
    struct CGPDFPage *_cgPage;
    unsigned long long _pageNumber;
    NSString *_stringInReadingOrder;
    UIPDFSelection *_selection;
    int _lock;
    UIPDFDocument *_document;
    unsigned long long _pageIndex;
    UIImage *_pageImage;
    NSMutableArray *_annotations;
}

@property(retain) UIImage *pageImage; // @synthesize pageImage=_pageImage;
@property(readonly) UIPDFDocument *document; // @synthesize document=_document;
@property(retain) UIPDFSelection *selection; // @synthesize selection=_selection;
@property(readonly) unsigned long long pageIndex; // @synthesize pageIndex=_pageIndex;
@property(readonly) unsigned long long pageNumber; // @synthesize pageNumber=_pageNumber;
@property(readonly) struct CGPDFPage *CGPage; // @synthesize CGPage=_cgPage;
- (void)removeAnnotation:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (void)removeAllAnnotations;
- (void)clearAnnotations;
- (id)annotations;
- (id)annotationIn:(id)arg1 withIndex:(unsigned long long)arg2;
- (void)refresh;
- (id)copyPage;
- (id)findString:(id)arg1 fromSelection:(id)arg2 options:(unsigned long long)arg3;
- (unsigned long long)cfCompareFlagsFromNSOptions:(unsigned long long)arg1;
- (id)string;
- (unsigned long long)rotation;
- (struct CGRect)mediaBoxAccountForRotation;
- (struct CGRect)mediaBox;
- (struct CGRect)cropBoxAccountForRotation;
@property(readonly) struct CGRect cropBox;
- (struct CGSize)size;
- (void)deliverImageWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 receiver:(id)arg3 selector:(SEL)arg4 info:(id)arg5;
- (id)getImageIfAvailable;
- (void)drawInRect:(struct CGRect)arg1 context:(struct CGContext *)arg2;
- (void)dealloc;
- (id)initWithDocument:(id)arg1 pageNumber:(unsigned long long)arg2;
- (void)setDocument:(id)arg1;
- (id)initWithCGPDFPage:(struct CGPDFPage *)arg1;

@end

@interface UIPDFPageContentDelegate : NSObject
{
    UIPDFDocument *_document;
    unsigned long long _pageIndex;
    UIPDFPageView *_view;
    struct CGRect _bounds;
    struct CGAffineTransform _transform;
    struct CGColor *_white;
    struct CGColor *_highlightColor;
    CALayer *_owner;
    struct CGRect _box;
    unsigned long long _pageRotation;
    int _lock;
    unsigned long long _threadCount;
    _Bool _isCancelled;
}

@property(readonly) struct CGAffineTransform transform; // @synthesize transform=_transform;
@property unsigned long long pageIndex; // @synthesize pageIndex=_pageIndex;
@property(retain) UIPDFDocument *document; // @synthesize document=_document;
@property struct CGColor *highlightColor; // @synthesize highlightColor=_highlightColor;
@property unsigned long long pageRotation; // @synthesize pageRotation=_pageRotation;
@property struct CGRect box; // @synthesize box=_box;
@property CALayer *owner; // @synthesize owner=_owner;
- (void)drawSelectionLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (_Bool)pageHasSelection;
- (void)addRect:(struct CGRect)arg1 toPath:(struct CGPath *)arg2 transform:(struct CGAffineTransform *)arg3 view:(id)arg4 owner:(id)arg5;
- (void)drawSelectionLayerBlockMode:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
@property _Bool isCancelled; // @dynamic isCancelled;
@property UIPDFPageView *view; // @dynamic view;
- (void)computeTransform;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFPageContentLayer : CALayer <UIPDFSelectionLayer>
{
    CALayer *_selectionLayer;
}

- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)layoutSublayers;
- (void)setNeedsDisplay;
- (void)setSelectionNeedsDisplay;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFPageContentTiledLayer : CATiledLayer <UIPDFSelectionLayer>
{
    CALayer *_selectionLayer;
}

- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)layoutSublayers;
- (void)setNeedsDisplay;
- (void)setSelectionNeedsDisplay;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFPageImageCache : NSObject
{
    UIPDFDocument *_document;
    unsigned long long _lookAhead;
    unsigned long long _jobCount;
    id *_jobsPrioritized;
    unsigned long long _nextJobIndex;
    unsigned long long _pageCount;
    id *_jobsByPage;
    NSOperationQueue *_renderQueue;
    int _lock;
}

@property(readonly) unsigned long long lookAhead; // @synthesize lookAhead=_lookAhead;
@property(readonly) unsigned long long pageCount; // @synthesize pageCount=_pageCount;
@property(readonly) UIPDFDocument *document; // @synthesize document=_document;
- (void)didReceiveMemoryWarning:(id)arg1;
- (void)cancelPendingRenderOperationsForTarget:(id)arg1;
- (void)cancelPendingRenderOperations;
- (id)getImageIfAvailableForPage:(unsigned long long)arg1;
- (void)deliverImageOfPage:(unsigned long long)arg1 maxSize:(struct CGSize)arg2 quality:(_Bool *)arg3 receiver:(id)arg4 selector:(SEL)arg5 info:(id)arg6;
- (void)cacheImageOfPage:(unsigned long long)arg1 maxSize:(struct CGSize)arg2;
- (void)addRenderJob:(id)arg1;
- (void)dealloc;
- (void)clearCache;
- (id)initWithDocument:(id)arg1 cacheCount:(unsigned long long)arg2 lookAhead:(unsigned long long)arg3;
- (id)initWithDocument:(id)arg1;

@end

@interface UIPDFPageRenderJob : NSObject
{
    UIPDFPage *_page;
    unsigned long long _pageIndex;
    struct CGSize _size;
    long long _priority;
    UIImage *_image;
    UIPDFPageRenderOperation *_operation;
    id _target;
    SEL _callback;
    id _userData;
    _Bool _sendPending;
    _Bool _releaseWhenDone;
    int _lock;
}

@property(readonly) struct CGSize size; // @synthesize size=_size;
@property _Bool releaseWhenDone; // @synthesize releaseWhenDone=_releaseWhenDone;
@property(readonly) long long priority; // @synthesize priority=_priority;
@property(readonly) unsigned long long pageIndex; // @synthesize pageIndex=_pageIndex;
- (void)sendImageTo:(id)arg1 callback:(SEL)arg2 userData:(id)arg3;
- (void)sendImage;
- (void)renderImage;
@property(readonly, retain) UIImage *image; // @dynamic image;
- (void)releaseOperation;
@property UIPDFPageRenderOperation *operation; // @dynamic operation;
- (void)setTarget:(id)arg1 callback:(SEL)arg2 userData:(id)arg3;
- (void)cancelOperationForTarget:(id)arg1;
- (void)cancelOperation;
- (void)cancel;
- (void)dealloc;
- (id)initWithPage:(id)arg1 maxSize:(struct CGSize)arg2 queuePriority:(long long)arg3;
- (_Bool)hasPage;

@end

@interface UIPDFPageRenderOperation : NSOperation
{
    UIPDFPageRenderJob *_job;
    _Bool executing;
    _Bool finished;
}

@property(retain) UIPDFPageRenderJob *job; // @synthesize job=_job;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (_Bool)isConcurrent;
- (void)completeOperation;
- (void)main;
- (void)start;
- (void)dealloc;
- (id)initWithJob:(id)arg1;

@end

@interface UIPDFPageView : UIView
{
    UIPDFDocument *_document;
    unsigned long long _pageIndex;
    UIPDFViewTouchHandler *_touchHandler;
    struct CGAffineTransform _pageToViewTransform;
    struct CGAffineTransform _viewToPageTransform;
    struct CGRect _cropBox;
    double _margin;
    _Bool _allowSelection;
    UIPDFSelectionController *_selectionController;
    id <NSObject><UIPDFPageViewDelegate> _delegate;
    struct CGRect zoomRect;
    _Bool _useBackingLayer;
    CALayer *_backingLayer;
    UIImage *_backgroundImage;
    _Bool _backgroundIsScheduled;
    unsigned long long _backgroundScheduleCount;
    _Bool _backgroundIsFullResolution;
    _Bool _boundsChanged;
    _Bool _useTiledContent;
    CALayer *_contentLayer;
    CALayer *_effectsLayer;
    UIPDFPageContentDelegate *_contentDelegate;
    UIPDFAnnotationController *_annotationController;
    _Bool _scalePageOnDraw;
    struct CGColor *_highLightColor;
    _Bool _animateSetFrame;
    UIActivityIndicatorView *_activityIndicator;
    _Bool _showActivityIndicator;
    UIColor *_backingLayerColor;
    int _lock;
    NSMutableArray *_highlights;
    double _cachedScale;
    _Bool _allowHighlighting;
    UIPDFSearchHighlightsController *_searchHighlightController;
    NSMutableArray *_searchHiglightLayers;
    UIPDFPage *_page;
    _Bool showAnnotations;
    _Bool _allowTwoFingerSelection;
    _Bool _showTextAnnotations;
    _Bool _showLinkAnnotationUnderline;
}

@property(nonatomic) _Bool showLinkAnnotationUnderline; // @synthesize showLinkAnnotationUnderline=_showLinkAnnotationUnderline;
@property(nonatomic) _Bool showTextAnnotations; // @synthesize showTextAnnotations=_showTextAnnotations;
@property(nonatomic) _Bool allowTwoFingerSelection; // @synthesize allowTwoFingerSelection=_allowTwoFingerSelection;
@property(readonly, nonatomic) UIPDFAnnotationController *annotationController; // @synthesize annotationController=_annotationController;
@property(nonatomic) _Bool showActivityIndicator; // @synthesize showActivityIndicator=_showActivityIndicator;
@property(nonatomic) _Bool useBackingLayer; // @synthesize useBackingLayer=_useBackingLayer;
@property(nonatomic) _Bool showAnnotations; // @synthesize showAnnotations;
@property(retain, nonatomic) UIColor *backingLayerColor; // @synthesize backingLayerColor=_backingLayerColor;
@property(nonatomic) _Bool animateSetFrame; // @synthesize animateSetFrame=_animateSetFrame;
@property UIPDFSelectionController *selectionController; // @synthesize selectionController=_selectionController;
@property(nonatomic) _Bool allowSelection; // @synthesize allowSelection=_allowSelection;
@property(readonly, nonatomic) CALayer *contentLayer; // @synthesize contentLayer=_contentLayer;
@property(nonatomic) id <NSObject><UIPDFPageViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) double margin; // @synthesize margin=_margin;
@property(nonatomic) _Bool allowMenu; // @dynamic allowMenu;
- (void)suspendInstantTouchHighlighting;
@property(nonatomic) _Bool allowHighlighting; // @dynamic allowHighlighting;
- (void)addWidgetToSelection;
- (id)searchHighlightSelectionAt:(struct CGPoint)arg1;
- (_Bool)hasSearchHighlights;
- (void)clearSearchHighlights;
- (void)highlightSearchSelection:(id)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) CALayer *effectsLayer; // @synthesize effectsLayer=_effectsLayer;
- (void)showSelection;
- (void)hideSelection;
@property(readonly) struct CGColor *highLightColor;
- (void)clearSelection;
- (void)displayContent;
- (struct CGRect)rectangleOfInterestAt:(struct CGPoint)arg1 kind:(int *)arg2;
- (struct CGRect)fitRect:(struct CGRect)arg1;
- (struct CGRect)fitWidth:(struct CGRect)arg1 atVertical:(double)arg2;
- (struct CGRect)convertRectFromPDFPageSpace:(struct CGRect)arg1;
- (struct CGRect)convertRectToPDFPageSpace:(struct CGRect)arg1;
- (struct CGPoint)convertPointFromPDFPageSpace:(struct CGPoint)arg1;
- (struct CGPoint)convertPointToPDFPageSpace:(struct CGPoint)arg1;
- (void)setTransforms;
- (_Bool)willDoSomethingWithTap:(struct CGPoint)arg1;
- (void)singleTapAt:(struct CGPoint)arg1;
- (void)twoFingerDoubleTapAt:(struct CGPoint)arg1;
- (void)doubleTapAt:(struct CGPoint)arg1;
- (void)ignoreTouches:(_Bool)arg1;
- (void)drawAnnotations:(struct CGContext *)arg1;
@property UIPDFPage *page; // @dynamic page;
- (void)addPage:(id)arg1;
- (void)layoutTextEffects;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (id)receiveBackgroundImage:(id)arg1 info:(id)arg2;
- (void)showContent;
- (void)stopActivityIndicator;
- (void)layoutSubviews;
- (void)removeBackingLayer;
- (void)didScroll:(id)arg1;
- (void)scheduleBackgroundImage;
@property(retain) UIImage *backgroundImage; // @dynamic backgroundImage;
- (void)willMoveToSuperview:(id)arg1;
- (void)setNeedsDisplay;
- (void)setSelectionNeedsDisplay;
@property(readonly, retain) UIPDFDocument *document; // @dynamic document;
@property(readonly) unsigned long long pageIndex; // @dynamic pageIndex;
- (void)setDrawingSurfaceLayer:(id)arg1;
- (void)didReceiveMemoryWarning:(id)arg1;
- (void)dealloc;
- (id)initWithPage:(id)arg1 tiledContent:(_Bool)arg2;
- (id)initWithPage:(id)arg1;
- (void)addLayers:(_Bool)arg1;
- (id)init;
- (struct CGPDFDictionary *)_annotForPoint:(struct CGPoint)arg1 rect:(struct CGRect *)arg2;

@end

@interface UIPDFParagraphWidget : NSObject <UIPDFSelectionWidget>
{
    CAShapeLayer *_trackingBorder;
    struct CGRect _initialRect;
    _Bool _tracking;
    struct CGRect _currentTrackingRect;
    CALayer *_leftGrabber;
    CALayer *_rightGrabber;
    CALayer *_topGrabber;
    CALayer *_bottomGrabber;
    CALayer *_selectedGrabber;
    struct CGRect _boundsInPDFSpace;
    UIPDFPageView *_pageView;
    struct CGPoint _initialSelectionPointOnPage;
}

@property(readonly, nonatomic) struct CGPoint initialSelectionPointOnPage; // @synthesize initialSelectionPointOnPage=_initialSelectionPointOnPage;
@property(nonatomic) UIPDFPageView *pageView; // @synthesize pageView=_pageView;
- (void)hide;
@property(readonly, nonatomic) struct CGPoint currentSelectionPointOnPage;
- (struct CGRect)selectionRectangle;
- (void)endTracking;
- (void)track:(struct CGPoint)arg1;
- (void)setSelectedGrabberPosition:(struct CGRect)arg1;
- (struct CGRect)adjustRect:(struct CGRect)arg1 toPoint:(struct CGPoint)arg2;
- (void)setSelectedGrabber:(unsigned long long)arg1;
- (void)layout;
- (struct CGPoint)viewOffset;
- (struct CGPoint)selectedPointFor:(struct CGPoint)arg1;
- (_Bool)hitTest:(struct CGPoint)arg1 fixedPoint:(struct CGPoint *)arg2 preceeds:(_Bool *)arg3;
- (void)remove;
- (void)setSelection:(id)arg1;
- (struct CGRect)selectionBoundsInEffectsSpace;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFParserDelegate : NSObject <NSXMLParserDelegate>
{
    struct CGPoint _p[4];
    struct CGPath *_path;
    _Bool _parserError;
}

@property(readonly) _Bool parserError; // @synthesize parserError=_parserError;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)parserDidStartDocument:(id)arg1;
- (void)parser:(id)arg1 parseErrorOccurred:(id)arg2;
@property(readonly) struct CGPath *path; // @dynamic path;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface UIPDFPlacementController : NSObject
{
    NSMutableArray *_popups;
    struct CGSize _viewSize;
    UIPDFPageView *pageView;
}

@property(nonatomic) UIPDFPageView *pageView; // @synthesize pageView;
- (void)layoutViews:(double)arg1;
- (void)shift:(double)arg1;
- (id)viewAtIndex:(unsigned long long)arg1;
- (double)yForObjectAtIndex:(unsigned long long)arg1;
- (struct CGRect)boundsForObjectAtIndex:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithAnnotations:(id)arg1 viewSize:(struct CGSize)arg2;

@end

@interface UIPDFPopupAnnotation : UIPDFAnnotation
{
    UIPDFAnnotation *parent;
    struct CGRect _adjustedBounds;
}

@property(nonatomic) struct CGRect adjustedBounds; // @synthesize adjustedBounds=_adjustedBounds;
@property(nonatomic) UIPDFAnnotation *parent; // @synthesize parent;
- (_Bool)recognizeGestures;
- (int)annotationType;
- (struct CGRect)bounds;
- (Class)viewClass;
- (id)init;
- (id)initWithAnnotationDictionary:(struct CGPDFDictionary *)arg1;

@end

@interface UIPDFPopupAnnotationView : UIPDFAnnotationView
{
    UIImage *_image;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)dealloc;

@end

@interface UIPDFSearchHighlightsController : NSObject
{
    NSMutableArray *_searchHighlightLayers;
    UIPDFPageView *_pageView;
    struct CGColor *_highlightColor;
    struct CGColor *_borderColor;
    struct CGColor *_shadowColor;
    _Bool _pageRendered;
    NSMutableArray *_rectangles;
    UIPDFSelection *_selection;
}

- (void)addSearchHighlightForSelection:(id)arg1 animated:(_Bool)arg2;
- (void)makeType4Path:(struct CGPath *)arg1 from:(unsigned long long)arg2 to:(unsigned long long)arg3 shadowPath:(struct CGPath *)arg4;
- (void)makeType3Path:(struct CGPath *)arg1 from:(unsigned long long)arg2 to:(unsigned long long)arg3 shadowPath:(struct CGPath *)arg4;
- (void)makeType2Path:(struct CGPath *)arg1 to:(unsigned long long)arg2 shadowPath:(struct CGPath *)arg3;
- (void)makeType1Path:(struct CGPath *)arg1 shadowPath:(struct CGPath *)arg2;
- (void)makeType2Shadow:(struct CGPath *)arg1 rect:(struct CGRect)arg2;
- (void)makeType1Shadow:(struct CGPath *)arg1 rect:(struct CGRect)arg2 inset:(struct CGPoint)arg3;
- (struct CGRect)unionFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (unsigned long long)indexOfColumnBreakStartingAt:(unsigned long long)arg1;
- (void)addLayer:(struct CGRect)arg1 path:(struct CGPath *)arg2 shadowPath:(struct CGPath *)arg3 animated:(_Bool)arg4;
- (void)addSearchHighlightForRotatedSelection:(id)arg1 animated:(_Bool)arg2;
- (void)_addAnimation2:(id)arg1;
- (void)_addAnimation:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (_Bool)hasSearchHighlights;
- (void)clearSearchHighlights;
- (void)pageDidRender:(id)arg1;
- (void)dealloc;
- (id)initWithPageView:(id)arg1;

@end

@interface UIPDFSelection : NSObject
{
    UIPDFPage *_page;
    struct CGPDFSelection *_cgSelection;
    _Bool _dirty;
    struct __CFString *_string;
    long long _cachedStartIndex;
    long long _cachedEndIndex;
    CDStruct_627e0f85 stringRange;
}

@property(nonatomic) CDStruct_627e0f85 stringRange; // @synthesize stringRange;
- (unsigned long long)endIndex;
- (unsigned long long)startIndex;
- (double)baseLineAtIndex:(unsigned long long)arg1;
- (CDStruct_627e0f85)extent;
- (void)copyToPasteboard;
- (unsigned long long)extendAtEnd:(unsigned long long)arg1;
- (unsigned long long)extendAtStart:(unsigned long long)arg1;
- (id)archive;
- (CDStruct_f9662865)rectangleAtIndex:(unsigned long long)arg1 scale:(double)arg2 inset:(double)arg3;
- (id)htmlAtIndex:(unsigned long long)arg1;
- (id)textAtIndex:(unsigned long long)arg1;
- (_Bool)getBounds:(struct CGRect *)arg1 transform:(struct CGAffineTransform *)arg2 index:(unsigned long long)arg3;
- (unsigned long long)numberOfRectangles;
- (_Bool)isWord;
- (id)containingTextLine;
- (id)selectionExtendedToLineBoundaries;
- (_Bool)isNonEmpty;
- (_Bool)isEmpty;
- (id)attributedStringAtIndex:(unsigned long long)arg1;
- (id)string;
- (struct CGRect)bounds;
- (struct CGAffineTransform)transform;
- (id)page;
- (id)initWithPage:(id)arg1 fromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3;
- (id)initWithSelection:(id)arg1;
- (id)initWithPage:(id)arg1 fromArchive:(id)arg2;
- (id)init;
- (id)description;
- (void)extendToParagraph;
- (struct CGPDFSelection *)CGSelection;
- (void)dealloc;
- (id)initWithPage:(id)arg1 cgSelection:(struct CGPDFSelection *)arg2;

@end

@interface UIPDFSelectionController : NSObject
{
    UIPDFPageView *_pageView;
    _Bool _rangeMode;
    id <UIPDFSelectionWidget><NSObject> _selectionWidget;
    _Bool _resizingWidget;
    struct CGPoint _selectionFixedPoint;
    struct CGRect _selectionBounds;
    _Bool _preceeds;
    _Bool _isTracking;
    struct CGPoint _adjustedPoint;
    _Bool _hiding;
    long long _firstIndex;
    long long _lastIndex;
    struct CGPoint _startPoint;
    _Bool _needsLayout;
    _Bool _cancelled;
    _Bool _instantModeIsSuspended;
    _Bool _instantHighlightMode;
}

@property(nonatomic) _Bool instantHighlightMode; // @synthesize instantHighlightMode=_instantHighlightMode;
@property(readonly, nonatomic) struct CGPoint adjustedPoint; // @synthesize adjustedPoint=_adjustedPoint;
@property(readonly, nonatomic) _Bool isTracking; // @synthesize isTracking=_isTracking;
@property(readonly, nonatomic) id <UIPDFSelectionWidget> selectionWidget; // @synthesize selectionWidget=_selectionWidget;
@property(readonly, nonatomic) _Bool rangeMode; // @synthesize rangeMode=_rangeMode;
@property(nonatomic) UIPDFPageView *pageView; // @synthesize pageView=_pageView;
- (id)description;
- (void)layoutSelections;
@property(readonly, nonatomic) struct CGPoint currentSelectionPoint;
@property(readonly, nonatomic) struct CGPoint initialSelectionPoint;
- (struct CGPoint)selectedPointOffset;
- (void)tracking:(struct CGPoint)arg1 andPoint:(struct CGPoint)arg2;
- (void)startTracking:(struct CGPoint)arg1 andPoint:(struct CGPoint)arg2;
- (void)suspendInstantHighlightMode;
- (void)endTracking:(struct CGPoint)arg1;
- (void)tracking:(struct CGPoint)arg1 showMagnifier:(_Bool *)arg2;
- (void)startTracking:(struct CGPoint)arg1 showMagnifier:(_Bool *)arg2;
- (void)startSelectingAt:(struct CGPoint)arg1;
- (_Bool)shouldTrackAt:(struct CGPoint)arg1;
- (void)hideWidget;
- (void)clearSelection;
- (void)extendSelectionToParagraph;
- (void)setSelectionFor:(struct CGPoint)arg1;
- (void)addSelectionWidget:(id)arg1;
- (_Bool)useParagraphMode;
- (void)adjustSelection:(struct CGPoint)arg1;
- (void)selectionShowDelayed:(id)arg1;
- (void)selectionShow:(id)arg1;
- (void)selectionHide:(id)arg1;
- (void)selectionShowToAncestor:(id)arg1;
- (void)selectionHideFromAncestor:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFSquareAnnotation : UIPDFSquareOrCircleAnnotation
{
}

- (void)drawInContext:(struct CGContext *)arg1;
- (int)annotationType;

@end

@interface UIPDFStampAnnotation : UIPDFAnnotation
{
}

- (int)annotationType;

@end

@interface UIPDFStrikeOutAnnotation : UIPDFMarkupAnnotation
{
}

- (int)annotationType;

@end

@interface UIPDFTextAnnotation : UIPDFAnnotation
{
}

- (void)drawInContext:(struct CGContext *)arg1;
- (int)annotationType;

@end

@interface UIPDFTextRangeWidget : NSObject <UIPDFSelectionWidget>
{
    CALayer *_startSelectionGrabber;
    CALayer *_startBar;
    CALayer *_endSelectionGrabber;
    CALayer *_endBar;
    CALayer *_startHandle;
    CALayer *_endHandle;
    CALayer *_fixedSelectionGrabber;
    UIPDFPageView *_pageView;
    double _handleHeight;
    double _handleWidth;
    struct CGPoint _initialSelectionPointOnPage;
    double _offsetX;
    double _offsetY;
    unsigned long long _startIndex;
    unsigned long long _endIndex;
    struct CGColor *_grabberColor;
    long long _startRectangle;
    long long _endRectangle;
    _Bool _startLeft;
    _Bool _endRight;
    double _startX;
    double _endX;
}

@property(readonly, nonatomic) struct CGPoint initialSelectionPointOnPage; // @synthesize initialSelectionPointOnPage=_initialSelectionPointOnPage;
@property(nonatomic) UIPDFPageView *pageView; // @synthesize pageView=_pageView;
- (id)description;
- (void)hide;
@property(readonly, nonatomic) struct CGPoint currentSelectionPointOnPage;
- (struct CGRect)selectionRectangle;
- (void)endTracking;
- (void)track:(struct CGPoint)arg1;
- (void)layout;
- (struct CGPoint)viewOffset;
- (_Bool)hitTest:(struct CGPoint)arg1 fixedPoint:(struct CGPoint *)arg2 preceeds:(_Bool *)arg3;
- (struct CGPoint)selectedPointFor:(struct CGPoint)arg1;
- (void)remove;
- (void)setSelection:(id)arg1;
- (void)setSelectedGrabber:(unsigned long long)arg1;
- (void)layoutWidget;
- (void)layoutEndSelectionGrabber:(struct CGRect)arg1 transform:(struct CGAffineTransform *)arg2 width:(double)arg3 extraHeight:(double)arg4 unitSize:(struct CGSize)arg5;
- (void)layoutStartSelectionGrabber:(struct CGRect)arg1 transform:(struct CGAffineTransform *)arg2 width:(double)arg3 extraHeight:(double)arg4 unitSize:(struct CGSize)arg5;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)dealloc;
- (id)init;

@end

@interface UIPDFUnderlineAnnotation : UIPDFMarkupAnnotation
{
}

- (_Bool)recognizeGestures;
- (void)drawInContext:(struct CGContext *)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;
- (void)drawLayerRotated:(id)arg1 inContext:(struct CGContext *)arg2 selection:(id)arg3 rectangles:(unsigned long long)arg4;
- (void)drawLayerUpright:(id)arg1 inContext:(struct CGContext *)arg2 selection:(id)arg3 rectangles:(unsigned long long)arg4;
- (Class)viewClass;
- (int)annotationType;

@end

@interface UIPDFUnderlineAnnotationView : UIPDFAnnotationView
{
}

@end

@interface UIPDFViewManager : NSObject
{
    UIView *_activeView;
}

+ (id)sharedViewManager;
- (void)viewReleased:(id)arg1;
- (void)makeViewActive:(id)arg1;

@end

@interface UIPDFViewTouchHandler : UIResponder <UIGestureRecognizerDelegate>
{
    UIPDFPageView *_pdfPageView;
    UITapGestureRecognizer *_doubleTapRecognizer;
    UITapGestureRecognizer *_singleTapRecognizer;
    UILongPressGestureRecognizer *_briefPressRecognizer;
    UILongPressGestureRecognizer *_longPressRecognizer;
    UITapGestureRecognizer *_twoFingerTapRecognizer;
    UIMenuController *_menuController;
    UIPDFSelectionController *_selectionController;
    UIPDFMagnifierController *_magnifyController;
    _Bool _trackingSelection;
    _Bool _showMagnifier;
    _Bool _showLoupe;
    _Bool _firstTouch;
    _Bool _useDelegateForLinks;
    _Bool _allowMenu;
}

+ (void)releaseViewManager;
@property _Bool allowMenu; // @synthesize allowMenu=_allowMenu;
- (void)hideMenu;
- (void)showMenu;
- (void)selectAll:(id)arg1;
- (void)copy:(id)arg1;
- (_Bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)twoFingerTapRecognized:(id)arg1;
- (void)singleTapRecognized:(id)arg1;
- (void)doubleTapRecognized:(id)arg1;
- (void)longPressRecognized:(id)arg1;
- (void)briefPressRecognized:(id)arg1;
- (_Bool)delegateGesture:(id)arg1 kind:(int)arg2;
- (void)setFirstTouch;
- (_Bool)resignFirstResponder;
- (_Bool)canBecomeFirstResponder;
- (id)nextResponder;
- (void)disableRecognizers;
- (void)enableRecognizers;
- (void)dealloc;
- (id)initWithView:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

