//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct UIEdgeInsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

#pragma mark Typedef'd Structures

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
// UUID: EE0C3138-068C-34DA-89D9-D8E0F557A84D
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 2933.5.5.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol SBFCancelable <NSObject>
- (void)cancel;
@end

@protocol SBFLegibilitySettingsProvider <NSObject>
@property(readonly, retain, nonatomic) _UILegibilitySettings *legibilitySettings;
@property(nonatomic) id <SBFLegibilitySettingsProviderDelegate> delegate;
@end

@protocol SBFLockScreenDateFormatter <NSObject>
- (void)resetFormattersIfNecessary;
- (NSString *)formatDateAsDayOfWeekMonthDayStyle:(NSDate *)arg1;
- (NSString *)formatDateAsTimeNoAMPM:(NSDate *)arg1;
@end

@protocol SBFObservable <NSObject>
- (id <SBFObservable>)generate:(id (^)(void))arg1;
- (id <SBFObservable>)map:(id (^)(id))arg1;
- (id <SBFObservable>)throttle:(double)arg1 onScheduler:(id <SBFScheduler>)arg2;
- (id <SBFObservable>)observeOn:(id <SBFScheduler>)arg1;
- (id <SBFObservable>)subscribeOn:(id <SBFScheduler>)arg1;
- (id <SBFCancelable>)subscribeWithResultBlock:(void (^)(id))arg1 completionBlock:(void (^)(void))arg2 failureBlock:(void (^)(NSError *))arg3;
- (id <SBFCancelable>)subscribeWithResultBlock:(void (^)(id))arg1;
- (id <SBFCancelable>)subscribe:(id <SBFObserver>)arg1;
@end

@protocol SBFObserver <NSObject>
- (void)observerDidFailWithError:(NSError *)arg1;
- (void)observerDidComplete;
- (void)observerDidReceiveResult:(id)arg1;
@end

@protocol SBFProceduralWallpaper <NSObject>
+ (NSString *)identifier;
- (UIView *)view;
- (void)setAnimating:(_Bool)arg1;

@optional
+ (_Bool)colorChangesSignificantly;
+ (UIImage *)thumbnailImageForOptions:(NSDictionary *)arg1;
+ (NSString *)representativeThumbnailImageName;
+ (NSString *)thumbnailImageName;
+ (NSArray *)presetWallpaperOptions;
@property(nonatomic) id <SBFProceduralWallpaperDelegate> delegate;
- (UIColor *)averageColorForRect:(struct CGRect)arg1;
- (void)stopComputingAverageColor;
- (void)startComputingAverageColorForRect:(struct CGRect)arg1;
- (void *)copyBlurForRect:(inout struct CGRect *)arg1;
- (void)stopGeneratingBlurs;
- (void)startGeneratingBlursForRect:(struct CGRect)arg1;
- (UIColor *)averageLifetimeColor;
- (void)setWallpaperOptions:(NSDictionary *)arg1;
- (void)setWallpaperVariant:(long long)arg1;
@end

@protocol SBFProceduralWallpaperDelegate <NSObject>
- (void)wallpaper:(id <SBFProceduralWallpaper>)arg1 didComputeAverageColor:(UIColor *)arg2 forRect:(struct CGRect)arg3;
- (void)wallpaper:(id <SBFProceduralWallpaper>)arg1 didGenerateBlur:(void *)arg2 forRect:(struct CGRect)arg3;
@end

@protocol SBFScheduler <NSObject>
- (id <SBFCancelable>)afterDelay:(double)arg1 performBlock:(void (^)(void))arg2;
- (id <SBFCancelable>)performCancelableBlock:(void (^)(SBFCancelationToken *))arg1;
- (id <SBFCancelable>)performBlock:(void (^)(void))arg1;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol _UIBackdropViewObserver
- (void)backdropViewDidChange:(_UIBackdropView *)arg1;
@end

@protocol _UIBasicAnimationFactory <NSObject>
- (CABasicAnimation *)_basicAnimationForView:(UIView *)arg1 withKeyPath:(NSString *)arg2;

@optional
- (CAMediaTimingFunction *)_timingFunctionForAnimationInView:(UIView *)arg1 withKeyPath:(NSString *)arg2;
- (CAMediaTimingFunction *)_timingFunctionForAnimation;
@end

@protocol _UISettingsKeyObserver <NSObject>
- (void)settings:(_UISettings *)arg1 changedValueForKey:(NSString *)arg2;
@end

@interface NSCalendar (SBFTimeUtilities)
- (_Bool)date:(id)arg1 isSameYearAsDate:(id)arg2;
- (_Bool)date:(id)arg1 isSameDayAsDate:(id)arg2;
- (id)_timeOnlyComponentsForDate:(id)arg1;
- (id)_dateOnlyComponentsForDate:(id)arg1;
@end

@interface NSDate (SBFTimeUtilities)
- (_Bool)isBeforeDate:(id)arg1;
- (_Bool)isAfterDate:(id)arg1;
@end

@interface NSDateComponents (SBFTimeUtilities)
- (_Bool)isSameYearAsComponents:(id)arg1;
- (_Bool)isSameMonthAsComponents:(id)arg1;
- (_Bool)isSameDayAsComponents:(id)arg1;
@end

@interface SBFAnimationCurveSettings : _UISettings
{
    unsigned long long _curve;
    struct CGPoint _controlPoint1;
    struct CGPoint _controlPoint2;
}

+ (id)_rowsRelativeToKeyPath:(id)arg1;
+ (id)settingsControllerModule;
@property(nonatomic) struct CGPoint controlPoint2; // @synthesize controlPoint2=_controlPoint2;
@property(nonatomic) struct CGPoint controlPoint1; // @synthesize controlPoint1=_controlPoint1;
@property(nonatomic) unsigned long long curve; // @synthesize curve=_curve;
- (void)_invalidate;
- (void)setDefaultValues;

@end

@interface SBFAnimationFactory : NSObject <NSCopying, _UIBasicAnimationFactory>
{
    BSAnimationSettings *_settings;
}

+ (void)animateWithFactory:(id)arg1 additionalDelay:(double)arg2 options:(unsigned long long)arg3 actions:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;
+ (void)animateWithFactory:(id)arg1 additionalDelay:(double)arg2 options:(unsigned long long)arg3 actions:(CDUnknownBlockType)arg4;
+ (void)animateWithFactory:(id)arg1 additionalDelay:(double)arg2 actions:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)animateWithFactory:(id)arg1 additionalDelay:(double)arg2 actions:(CDUnknownBlockType)arg3;
+ (void)animateWithFactory:(id)arg1 options:(unsigned long long)arg2 actions:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)animateWithFactory:(id)arg1 options:(unsigned long long)arg2 actions:(CDUnknownBlockType)arg3;
+ (void)animateWithFactory:(id)arg1 actions:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)animateWithFactory:(id)arg1 actions:(CDUnknownBlockType)arg2;
+ (id)factoryWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 epsilon:(double)arg4 timingFunction:(id)arg5;
+ (id)factoryWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 timingFunction:(id)arg4;
+ (id)factoryWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 epsilon:(double)arg4;
+ (id)factoryWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3;
+ (id)factoryWithDuration:(double)arg1 delay:(double)arg2 timingFunction:(id)arg3;
+ (id)factoryWithDuration:(double)arg1 timingFunction:(id)arg2;
+ (id)factoryWithDuration:(double)arg1 delay:(double)arg2;
+ (id)factoryWithDuration:(double)arg1;
+ (id)factoryWithAnimationAttributes:(id)arg1;
+ (id)factoryWithSettings:(id)arg1 timingFunction:(id)arg2;
+ (id)factoryWithSettings:(id)arg1;
@property(readonly, copy) NSString *description;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)_timingFunctionForAnimation;
- (id)_basicAnimationForView:(id)arg1 withKeyPath:(id)arg2;
@property(readonly, nonatomic) double delay;
@property(readonly, nonatomic) double duration;
- (void)_animateWithAdditionalDelay:(double)arg1 options:(unsigned long long)arg2 actions:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)factoryWithTimingFunction:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)_initWithSettings:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface SBFAnimationSettings : SBFAnimationCurveSettings
{
    BSAnimationSettings *_exportedSettings;
    long long _animationType;
    double _delay;
    double _duration;
    double _mass;
    double _stiffness;
    double _damping;
    double _epsilon;
    double _calculatedDuration;
}

+ (id)_moduleWithSectionTitle:(id)arg1 delay:(_Bool)arg2;
+ (id)_moduleWithSectionTitle:(id)arg1;
+ (id)settingsControllerModule;
@property(nonatomic) double calculatedDuration; // @synthesize calculatedDuration=_calculatedDuration;
@property(nonatomic) double epsilon; // @synthesize epsilon=_epsilon;
@property(nonatomic) double damping; // @synthesize damping=_damping;
@property(nonatomic) double stiffness; // @synthesize stiffness=_stiffness;
@property(nonatomic) double mass; // @synthesize mass=_mass;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) double delay; // @synthesize delay=_delay;
@property(nonatomic) long long animationType; // @synthesize animationType=_animationType;
- (id)BSAnimationSettings;
- (void)_invalidate;
- (void)setDefaultValues;
- (void)dealloc;

@end

@interface SBFBackdropLegibilitySettingsProvider : NSObject <_UIBackdropViewObserver, SBFLegibilitySettingsProvider>
{
    _UIBackdropView *_backdropView;
    id <SBFLegibilitySettingsProviderDelegate> _delegate;
    _UILegibilitySettings *_legibilitySettings;
}

@property(readonly, retain, nonatomic) _UILegibilitySettings *legibilitySettings; // @synthesize legibilitySettings=_legibilitySettings;
@property(nonatomic) id <SBFLegibilitySettingsProviderDelegate> delegate; // @synthesize delegate=_delegate;
- (void)backdropViewDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithBackdropView:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFBackdropStatisticsProvider : NSObject
{
    SBFWallpaperView *_wallpaperView;
}

@property SBFWallpaperView *wallpaperView; // @synthesize wallpaperView=_wallpaperView;
- (void)backdropLayerStatisticsDidChange:(id)arg1;

@end

@interface SBFWallpaperView : UIView <_UISettingsKeyObserver>
{
    SBFWallpaperSettings *_wallpaperSettings;
    UIImageView *_topGradientView;
    UIImageView *_bottomGradientView;
    UIView *_parallaxView;
    double _contentScaleFactor;
    long long _variant;
    _UILegibilitySettingsProvider *_legibilitySettingsProvider;
    _UILegibilitySettings *_legibilitySettings;
    UIColor *_lastAverageColor;
    NSTimer *_colorSampleTimer;
    _Bool _shouldGenerateBlurredImagesWhenVisible;
    _Bool _generatingBlurredImages;
    SBFWallpaperParallaxSettings *_parallaxSettings;
    _Bool _wantsRasterization;
    long long _disallowRasterizationBlockCount;
    _Bool _filtersAverageColor;
    _Bool _continuousColorSamplingEnabled;
    _Bool _wallpaperAnimationEnabled;
    _Bool _parallaxEnabled;
    _Bool _suppressesGradients;
    id <SBFWallpaperViewLegibilityObserver> _legibilityObserver;
    UIView *_contentView;
    double _zoomFactor;
    double _contrast;
    double _parallaxFactor;
    id <SBFWallpaperViewInternalObserver> _internalObserver;
    double _parallaxAxisAdjustmentAngle;
}

+ (_Bool)_allowsRasterization;
+ (_Bool)_shouldScaleForParallax;
+ (_Bool)_allowsParallax;
@property(nonatomic) double parallaxAxisAdjustmentAngle; // @synthesize parallaxAxisAdjustmentAngle=_parallaxAxisAdjustmentAngle;
@property(nonatomic) _Bool suppressesGradients; // @synthesize suppressesGradients=_suppressesGradients;
@property(nonatomic) id <SBFWallpaperViewInternalObserver> internalObserver; // @synthesize internalObserver=_internalObserver;
@property(nonatomic) double parallaxFactor; // @synthesize parallaxFactor=_parallaxFactor;
@property(nonatomic) _Bool parallaxEnabled; // @synthesize parallaxEnabled=_parallaxEnabled;
@property(nonatomic) _Bool wallpaperAnimationEnabled; // @synthesize wallpaperAnimationEnabled=_wallpaperAnimationEnabled;
@property(nonatomic) _Bool continuousColorSamplingEnabled; // @synthesize continuousColorSamplingEnabled=_continuousColorSamplingEnabled;
@property(nonatomic) double contrast; // @synthesize contrast=_contrast;
@property(nonatomic) _Bool filtersAverageColor; // @synthesize filtersAverageColor=_filtersAverageColor;
@property(nonatomic) long long variant; // @synthesize variant=_variant;
@property(nonatomic) double zoomFactor; // @synthesize zoomFactor=_zoomFactor;
@property(retain, nonatomic) UIView *contentView; // @synthesize contentView=_contentView;
@property(nonatomic) id <SBFWallpaperViewLegibilityObserver> legibilityObserver; // @synthesize legibilityObserver=_legibilityObserver;
- (void)_cleanupAfterAnimatingGradients;
- (void)_updateGradientImage;
- (double)_bottomGradientAlpha;
- (double)_topGradientAlpha;
- (struct CGRect)_bottomGradientTestRect;
- (struct CGRect)_topGradientTestRect;
- (double)gradientOpacityInRect:(struct CGRect)arg1 contrastWithinBoxesFactor:(double)arg2 allowLuminanceCheck:(_Bool)arg3;
- (void)_updateGradientAlpha;
- (void)_prepareToAnimateGradients;
- (_Bool)_shouldShowBottomGradient;
- (_Bool)_shouldShowTopGradient;
- (_Bool)contrastRequiresTreatments;
- (_Bool)luminanceInRectRequiresTreatments:(struct CGRect)arg1;
- (void)_updateContentViewScale;
- (void)_updateScaleFactor;
- (void)_removeParallax;
- (void)_addParallax;
- (void)_applyParallaxSettings;
- (void)_updateParallaxSettings;
- (void)_updateGeneratingBlurs;
- (void)_updateRasterizationState;
- (void)_endDisallowRasterizationBlock;
- (void)_beginDisallowRasterizationBlock;
- (void)_notifyGeometryInvalidated;
- (void)_notifyBlursInvalidated;
- (_Bool)_isVisible;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (_Bool)wantsRasterization;
@property(readonly, nonatomic) UIImage *wallpaperImage;
- (double)contentScaleFactor;
- (void)setContentsRect:(struct CGRect)arg1;
- (id)_displayedImage;
- (id)_imageForBackdropParameters:(CDStruct_2ec95fd7)arg1 includeTint:(_Bool)arg2;
- (id)_blurredImage;
- (void)_stopGeneratingBlurredImages;
- (void)_startGeneratingBlurredImages;
- (id)_averageColorInContentViewRect:(struct CGRect)arg1 smudgeRadius:(double)arg2;
- (id)_computeAverageColor;
- (void)_handleVariantChange;
- (void)_handleVisibilityChange;
- (_Bool)isDisplayingWallpaper:(id)arg1 forVariant:(long long)arg2 options:(id)arg3;
- (void)didMoveToWindow;
- (void)setHidden:(_Bool)arg1;
- (void)layoutSubviews;
- (void)invalidate;
- (id)_blurReplacementImage;
- (id)imageForBackdropParameters:(CDStruct_2ec95fd7)arg1 includeTint:(_Bool)arg2;
- (id)blurredImage;
- (void)setGeneratesBlurredImages:(_Bool)arg1;
- (double)contrastInRect:(struct CGRect)arg1 contrastWithinBoxes:(double *)arg2 contrastBetweenBoxes:(double *)arg3;
- (double)contrastInRect:(struct CGRect)arg1;
- (id)averageColorInRect:(struct CGRect)arg1 withSmudgeRadius:(double)arg2;
- (void)_updateLegibilitySettingsForAverageColor:(id)arg1 notify:(_Bool)arg2;
- (void)updateLegibilitySettingsForAverageColor:(id)arg1;
- (void)_setLegibilitySettings:(id)arg1 notify:(_Bool)arg2;
@property(retain, nonatomic) _UILegibilitySettings *legibilitySettings;
- (void)setVariant:(long long)arg1 withAnimationFactory:(id)arg2;
- (double)cropZoomScale;
- (_Bool)supportsCropping;
- (void)prepareToDisappear;
- (void)prepareToAppear;
- (void)setCropRect:(struct CGRect)arg1 zoomScale:(double)arg2;
- (struct CGRect)cropRect;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFBackdropWallpaperView : SBFWallpaperView
{
    SBFBackdropStatisticsProvider *_statisticsProvider;
    CABackdropLayer *_layer;
}

+ (_Bool)_allowsParallax;
- (void)layoutSubviews;
- (id)_computeAverageColor;
@property(nonatomic) _Bool colorSamplingEnabled;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SBFButton : UIButton
{
}

- (void)setHighlighted:(_Bool)arg1;
- (void)setSelected:(_Bool)arg1;
- (void)_updateSelected:(_Bool)arg1 highlighted:(_Bool)arg2;
- (_Bool)_drawingAsSelected;
- (void)_touchUpInside;
- (void)_updateForStateChange;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SBFCancelationToken : NSObject <SBFCancelable>
{
    _Bool _isCanceled;
    NSMutableArray *_cancelationBlocks;
}

+ (id)tokenWrappingCancelable:(id)arg1;
+ (id)tokenWithCancelationBlock:(CDUnknownBlockType)arg1;
- (void)callCancelationBlocks:(id)arg1;
- (_Bool)isCanceled;
- (void)addCancelationBlock:(CDUnknownBlockType)arg1;
- (id)nts_cancel;
- (void)cancel;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFColorBoxes : NSObject
{
    struct **_colorBoxes;
    unsigned long long _rowCount;
    unsigned long long _columnCount;
    unsigned long long _size;
    double _contrast;
}

@property(readonly, nonatomic) double contrast; // @synthesize contrast=_contrast;
@property(readonly, nonatomic) unsigned long long size; // @synthesize size=_size;
@property(readonly, nonatomic) unsigned long long columnCount; // @synthesize columnCount=_columnCount;
@property(readonly, nonatomic) unsigned long long rowCount; // @synthesize rowCount=_rowCount;
@property(readonly, nonatomic) struct **colorBoxes; // @synthesize colorBoxes=_colorBoxes;
- (id)description;
- (void)_freeColorBoxes;
- (void)dealloc;
- (id)initWithColorBoxes:(struct **)arg1 size:(unsigned long long)arg2 rowCount:(unsigned long long)arg3 columnCount:(unsigned long long)arg4 contrast:(double)arg5;

@end

@interface SBFDescriptionBuilder : NSObject
{
    NSObject *_object;
    NSMutableString *_description;
}

+ (id)descriptionForObject:(id)arg1 withNamesAndObjects:(id)arg2;
+ (id)descriptionBuilderWithObject:(id)arg1;
+ (id)nameObjectSeparator;
+ (id)componentSeparator;
- (id)build;
- (void)tryAppendKey:(id)arg1;
- (id)appendKeys:(id)arg1;
- (id)appendKey:(id)arg1;
- (id)appendNamesAndObjects:(id)arg1 args:(struct __va_list_tag [1])arg2;
- (id)appendNamesAndObjects:(id)arg1;
- (id)appendName:(id)arg1 selector:(SEL)arg2;
- (id)appendName:(id)arg1 pointerValue:(void *)arg2;
- (id)appendName:(id)arg1 cgFloatValue:(double)arg2;
- (id)appendName:(id)arg1 doubleValue:(double)arg2;
- (id)appendName:(id)arg1 intValue:(int)arg2;
- (id)appendName:(id)arg1 unsignedInteger:(unsigned long long)arg2;
- (id)appendName:(id)arg1 integerValue:(long long)arg2;
- (id)appendName:(id)arg1 boolValue:(_Bool)arg2;
- (id)appendName:(id)arg1 size:(struct CGSize)arg2;
- (id)appendName:(id)arg1 object:(id)arg2;
- (id)appendObject:(id)arg1 withName:(id)arg2;
- (void)dealloc;
- (id)initWithObject:(id)arg1;

@end

@interface SBFDeviceBlockTimer : NSObject
{
    _Bool _enabled;
    CDUnknownBlockType _handler;
    NSString *_titleText;
    NSString *_subtitleText;
    SBFDeviceLockController *_deviceLockController;
    NSTimer *_timer;
    NSString *_cachedLocalizedPlatformName;
}

@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
@property(copy, nonatomic) NSString *cachedLocalizedPlatformName; // @synthesize cachedLocalizedPlatformName=_cachedLocalizedPlatformName;
@property(retain, nonatomic) NSTimer *timer; // @synthesize timer=_timer;
@property(retain, nonatomic) SBFDeviceLockController *deviceLockController; // @synthesize deviceLockController=_deviceLockController;
@property(copy, nonatomic) NSString *subtitleText; // @synthesize subtitleText=_subtitleText;
@property(copy, nonatomic) NSString *titleText; // @synthesize titleText=_titleText;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void)_scheduleTimerIfNecessaryAndUpdateState;
- (void)_clearTimer;
- (id)_localizedPlatformName;
- (void)invalidate;
- (void)start;
- (void)dealloc;
- (id)initWithDeviceLockController:(id)arg1;

@end

@interface SBFDeviceLockController : NSObject
{
    int _lockState;
    _Bool _isBlockedForThermalCondition;
    double _lastLockDate;
    _Bool _isPermanentlyBlocked;
    double _deviceLockUnblockTime;
    PCPersistentTimer *_deviceLockUnblockTimer;
    _Bool _cachedPasscodeLockedOrBlocked;
    _Bool _hasBeenUnlockedOnceSinceBoot;
    SBFPasscodeLockAssertionManager *_assertionManager;
    SBFPasscodeLockDisableAssertion *_transientPasscodeCheckingAssertion;
    _Bool _okToSendNotifications;
    NSString *_lastIncorrectPasscodeAttempt;
    _Bool _shouldFetchPasscodeLockState;
    _Bool _lastPasscodeLockStateWasLocked;
    struct __CFRunLoopObserver *_runLoopObserver;
}

+ (id)_lockStateDefaults;
- (id)description;
- (void)_uncachePasscodeIfNecessary;
- (void)_cachePassword:(id)arg1;
- (void)_removeDeviceLockDisableAssertion:(id)arg1;
- (void)_addDeviceLockDisableAssertion:(id)arg1;
- (void)_wipeDevice;
- (_Bool)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(_Bool)arg2;
- (void)_notifyOfFirstUnlock;
- (void)_lockStateChangedFrom:(int)arg1 to:(int)arg2;
- (void)_setLockState:(int)arg1;
- (void)_enablePasscodeLockImmediately:(_Bool)arg1;
- (void)enablePasscodeLockImmediately;
- (void)_updateDeviceLockedState;
- (_Bool)_shouldLockDeviceNow;
- (_Bool)_shouldSuppressLockOnInit;
- (void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(_Bool)arg1;
- (_Bool)deviceHasBeenPasscodeUnlockedOnceSinceBoot;
- (_Bool)isPasscodeLockedOrBlocked;
- (_Bool)isPasscodeLocked;
- (_Bool)isPasscodeLockedCached;
- (_Bool)deviceHasPasscodeSet;
- (void)_setupRunLoopObserverIfNecessary;
- (void)_setDeviceLockUnblockTime:(double)arg1;
- (void)_unblockTimerFired;
- (void)_scheduleUnblockTimer;
- (void)_clearUnblockTimer;
- (void)_clearBlockedState;
- (void)synchronize;
- (_Bool)isPermanentlyBlocked:(double *)arg1;
- (void)_noteBlockedReasonsMayHaveChanged;
- (_Bool)isBlocked;
- (_Bool)_temporarilyBlocked;
- (void)setBlockedForThermalCondition:(_Bool)arg1;
- (void)_sendBlockStateChangeNotification;
- (_Bool)isBlockedForThermalCondition;
- (id)lastLockDate;
- (void)dealloc;
- (id)init;

@end

@interface SBFEqualsBuilder : NSObject
{
}

+ (_Bool)isSize:(struct CGSize)arg1 equalToOther:(struct CGSize)arg2;
+ (_Bool)isBool:(_Bool)arg1 equalToOther:(_Bool)arg2;
+ (_Bool)isObject:(id)arg1 equalToOther:(id)arg2;
+ (_Bool)evaluateBuilderBlock:(CDUnknownBlockType)arg1 remainingBlocks:(struct __va_list_tag [1])arg2;
+ (_Bool)isObject:(id)arg1 memberOfSameClassAndEqualTo:(id)arg2 withBlocks:(CDUnknownBlockType)arg3;
+ (_Bool)isObject:(id)arg1 memberOfClass:(Class)arg2 andEqualToObject:(id)arg3 withBlocks:(CDUnknownBlockType)arg4;
+ (_Bool)isObject:(id)arg1 kindOfClass:(Class)arg2 andEqualToObject:(id)arg3 withBlocks:(CDUnknownBlockType)arg4;
+ (_Bool)isObject:(id)arg1 equalToOther:(id)arg2 withBlocks:(CDUnknownBlockType)arg3;

@end

@interface SBFHashBuilder : NSObject
{
}

+ (unsigned long long)doubleHash:(double)arg1;
+ (unsigned long long)unsignedIntegerHash:(unsigned long long)arg1;
+ (unsigned long long)integerHash:(long long)arg1;
+ (unsigned long long)boolHash:(_Bool)arg1;
+ (unsigned long long)arrayHash:(id)arg1;
+ (unsigned long long)pointerHash:(void *)arg1;
+ (unsigned long long)objectHash:(id)arg1;
+ (unsigned long long)hashWithBlocks:(CDUnknownBlockType)arg1;

@end

@interface SBFParallaxSettings : _UISettings
{
    _Bool _slideEnabled;
    _Bool _tiltEnabled;
    _Bool _increaseEnabled;
    long long _slideDirectionX;
    long long _slideDirectionY;
    double _slidePixelsX;
    double _slidePixelsY;
    long long _tiltDirectionX;
    long long _tiltDirectionY;
    double _tiltDegreesX;
    double _tiltDegreesY;
    long long _distanceFromScreen;
    double _slideIncreaseX;
    double _slideIncreaseY;
}

+ (id)settingsControllerModule;
@property double slideIncreaseY; // @synthesize slideIncreaseY=_slideIncreaseY;
@property double slideIncreaseX; // @synthesize slideIncreaseX=_slideIncreaseX;
@property _Bool increaseEnabled; // @synthesize increaseEnabled=_increaseEnabled;
@property long long distanceFromScreen; // @synthesize distanceFromScreen=_distanceFromScreen;
@property double tiltDegreesY; // @synthesize tiltDegreesY=_tiltDegreesY;
@property double tiltDegreesX; // @synthesize tiltDegreesX=_tiltDegreesX;
@property long long tiltDirectionY; // @synthesize tiltDirectionY=_tiltDirectionY;
@property long long tiltDirectionX; // @synthesize tiltDirectionX=_tiltDirectionX;
@property _Bool tiltEnabled; // @synthesize tiltEnabled=_tiltEnabled;
@property double slidePixelsY; // @synthesize slidePixelsY=_slidePixelsY;
@property double slidePixelsX; // @synthesize slidePixelsX=_slidePixelsX;
@property long long slideDirectionY; // @synthesize slideDirectionY=_slideDirectionY;
@property long long slideDirectionX; // @synthesize slideDirectionX=_slideDirectionX;
@property _Bool slideEnabled; // @synthesize slideEnabled=_slideEnabled;
- (void)setDefaultValues;

@end

@interface SBFWallpaperParallaxSettings : SBFParallaxSettings
{
    double _overhangX;
    double _overhangY;
    double _perspectiveTransform;
}

+ (id)settingsControllerModule;
+ (struct CGSize)overhangSizeForCurrentDevice;
+ (struct CGSize)minimumWallpaperSizeForCurrentDevice;
+ (struct CGSize)bestWallpaperSizeForParallaxFactor:(double)arg1;
+ (struct CGSize)_requiredOverhangSizeForCurrentDevice;
@property double perspectiveTransform; // @synthesize perspectiveTransform=_perspectiveTransform;
@property double overhangY; // @synthesize overhangY=_overhangY;
@property double overhangX; // @synthesize overhangX=_overhangX;
- (void)setDefaultValues;

@end

@interface SBFHomeScreenWallpaperParallaxSettings : SBFWallpaperParallaxSettings
{
}

- (void)setDefaultValues;

@end

@interface SBFLockScreenDateView : UIView
{
    UILabel *_timeLabel;
    UILabel *_dateLabel;
    _Bool _useLegibilityLabels;
    _UILegibilityLabel *_legibilityTimeLabel;
    _UILegibilityLabel *_legibilityDateLabel;
    double _timeAlpha;
    double _dateAlpha;
    NSString *_customSubtitleText;
    UIColor *_customSubtitleColor;
    NSDate *_date;
    id <SBFLockScreenDateFormatter> _formatter;
    _UILegibilitySettings *_legibilitySettings;
    double _timeStrength;
    double _dateStrength;
    UIColor *_textColor;
    double _dateAlphaPercentage;
}

+ (double)defaultHeight;
@property(nonatomic) double dateAlphaPercentage; // @synthesize dateAlphaPercentage=_dateAlphaPercentage;
@property(retain, nonatomic) UIColor *textColor; // @synthesize textColor=_textColor;
@property(nonatomic) double dateStrength; // @synthesize dateStrength=_dateStrength;
@property(nonatomic) double timeStrength; // @synthesize timeStrength=_timeStrength;
@property(retain, nonatomic) _UILegibilitySettings *legibilitySettings; // @synthesize legibilitySettings=_legibilitySettings;
@property(retain, nonatomic) id <SBFLockScreenDateFormatter> formatter; // @synthesize formatter=_formatter;
@property(retain, nonatomic) NSDate *date; // @synthesize date=_date;
- (id)_dateFont;
- (id)_timeFont;
- (void)_layoutTimeLabel;
- (void)_layoutDateLabel;
- (void)layoutSubviews;
- (void)_useLegibilityLabels:(_Bool)arg1;
- (double)_effectiveDateAlpha;
- (void)_updateLabelAlpha;
- (void)_setDateAlpha:(double)arg1;
- (id)_dateColor;
- (id)_dateText;
- (void)_updateLabels;
- (void)_addLabels;
- (void)_updateLegibilityLabelsWithUpdatedDateString:(_Bool)arg1;
- (double)dateBaselineOffsetFromOrigin;
- (double)timeBaselineOffsetFromOrigin;
- (void)updateFormat;
- (void)setCustomSubtitleText:(id)arg1 withColor:(id)arg2;
- (void)setContentAlpha:(double)arg1 withDateVisible:(_Bool)arg2;
@property(nonatomic, getter=isDateHidden) _Bool dateHidden;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SBFLockScreenMetrics : NSObject
{
}

+ (struct UIEdgeInsets)notificationListInsets;
+ (double)_notificationListTopPadding;
+ (double)_notificationListSideOffset;
+ (double)_notificationListBottomOffset;
+ (struct UIEdgeInsets)slideToUnlockInsets;
+ (double)slideToUnlockOverlayMargin;
+ (double)slideToUnlockFontSize;
+ (double)slideUpGrabberInset;
+ (double)dateLabelFontSize;
+ (double)subtitleBaselineOffsetFromTopOfScreen;
+ (double)dateBaselineOffsetFromTime;
+ (double)dateViewBaselineY;
+ (double)pinKeypadStatusTitleBaselineOffsetFromTitle;
+ (double)pinKeypadStatusTitleBaselineOffsetIncludingSubtitle:(_Bool)arg1;
+ (double)pinKeypadStatusTitleBaselineOffset:(_Bool)arg1;
+ (double)pinKeypadEntryFieldOffsetForSubtitle;
+ (id)pinKeypadStatusSubtitleViewTitleFont;
+ (id)pinKeypadStatusTitleViewTitleFont;
+ (double)pinLongNumericEntryFieldBottomYDistanceFromNumberPadTopButton;
+ (double)pinFourDigitEntryFieldBottomYDistanceFromNumberPadTopButton:(_Bool)arg1;
+ (double)pinNumberPadBaseOffsetFromTopOfScreen:(_Bool)arg1;
+ (double)pinNumberPadButtonOuterCircleDiameter;
+ (double)pinNumberPadButtonPaddingWidth;
+ (double)pinNumberPadButtonPaddingHeight;
+ (double)pinNumberPadAncillaryButtonOffset;
+ (double)pinNumberPadBottomPaddingHeight;
+ (double)pinNumberPadWidth;
+ (double)pinFourDigitEntryFieldIndicatorPaddingWidth;
+ (double)pinFourDigitEntryFieldIndicatorDiameter;

@end

@interface SBFLockScreenSimpleDateFormatter : NSObject <SBFLockScreenDateFormatter>
{
    NSTimeZone *_timeZone;
}

@property(retain, nonatomic) NSTimeZone *timeZone; // @synthesize timeZone=_timeZone;
- (id)formatDateAsDayOfWeekMonthDayStyle:(id)arg1;
- (id)formatDateAsTimeNoAMPM:(id)arg1;
- (void)resetFormattersIfNecessary;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFLockScreenWallpaperParallaxSettings : SBFWallpaperParallaxSettings
{
}

- (void)setDefaultValues;

@end

@interface SBFMagnifyMode : NSObject <NSCopying>
{
    float _zoomFactor;
    NSString *_name;
    struct CGSize _size;
}

+ (id)magnifyModeWithSize:(struct CGSize)arg1 name:(id)arg2;
+ (id)currentMagnifyMode;
@property(nonatomic) float zoomFactor; // @synthesize zoomFactor=_zoomFactor;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) struct CGSize size; // @synthesize size=_size;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface SBFMappedImageCache : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_path;
    NSMutableDictionary *_images;
}

+ (id)wallpaperCache;
- (void)removeAllObjects;
- (void)removeImageForKey:(id)arg1;
- (void)warmupImageForKey:(id)arg1;
- (void)setImage:(id)arg1 forKey:(id)arg2;
- (id)imageForKey:(id)arg1 generateImageWithBlockIfNecessary:(CDUnknownBlockType)arg2;
- (id)imageForKey:(id)arg1 options:(int)arg2 generateImageWithBlockIfNecessary:(CDUnknownBlockType)arg3;
- (id)imageForKey:(id)arg1 options:(int)arg2;
- (id)imageForKey:(id)arg1;
- (void)dealloc;
- (id)initWithDescription:(id)arg1;

@end

@interface SBFProceduralWallpaper : UIView <SBFProceduralWallpaper>
{
}

+ (id)identifier;
- (id)view;
- (void)setAnimating:(_Bool)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) id <SBFProceduralWallpaperDelegate> delegate;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFMicaWallpaper : SBFProceduralWallpaper
{
    NSBundle *_loadedBundle;
    _UICAPackageView *_packageView;
    UIView *_rootView;
}

+ (id)thumbnailImageForOptions:(id)arg1;
+ (id)presetWallpaperOptions;
+ (id)identifier;
- (void)setWallpaperOptions:(id)arg1;
- (void)setAnimating:(_Bool)arg1;
- (void)_loadView;
- (void)_unloadView;
- (void)layoutSubviews;
- (void)dealloc;

@end

@interface SBFObliterationController : NSObject
{
}

+ (id)sharedInstance;
- (void)obliterateDataPartitionShowingProgress:(_Bool)arg1 skipDataObliteration:(_Bool)arg2;
- (void)wipeAndBrickShowingProgress:(_Bool)arg1;

@end

@interface SBFObservable : NSObject <SBFObservable>
{
}

+ (id)forkJoin:(id)arg1;
+ (id)observableWithBlock:(CDUnknownBlockType)arg1;
- (id)throttle:(double)arg1 onScheduler:(id)arg2;
- (id)subscribe:(id)arg1;
- (id)subscribeWithResultBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
- (id)subscribeWithResultBlock:(CDUnknownBlockType)arg1;
- (id)waitForResults:(id *)arg1;
- (id)map:(CDUnknownBlockType)arg1;
- (id)generate:(CDUnknownBlockType)arg1;
- (id)observeOn:(id)arg1;
- (id)subscribeOn:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFObserver : NSObject
{
}

+ (void)sendObserver:(id)arg1 resultsOfBlock:(CDUnknownBlockType)arg2;
+ (void)sendArray:(id)arg1 error:(id)arg2 toObserver:(id)arg3;
+ (id)observerWithResultBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (id)observerWithResultBlock:(CDUnknownBlockType)arg1;

@end

@interface SBFPasscodeLockAssertionManager : NSObject
{
    SBFPasscodeLockAssertionTracker *_preventLockTracker;
    SBFPasscodeLockAssertionTracker *_lockScreenCameraTracker;
    SBFPasscodeLockAssertionTracker *_siriTracker;
    SBFPasscodeLockAssertionTracker *_transientTracker;
}

- (id)description;
- (_Bool)hasActiveAssertions;
- (void)removeAssertion:(id)arg1;
- (void)addAssertion:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SBFPasscodeLockAssertionTracker : NSObject
{
    void *_mkbAssertion;
    NSMutableSet *_assertions;
}

- (id)description;
- (id)mkbAssertionOptions;
- (_Bool)hasActiveAssertions;
- (void)removeAssertion:(id)arg1;
- (void)addAssertion:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SBFPasscodeLockDisableAssertion : NSObject
{
    NSString *_identifier;
    int _type;
    SBFWeakReference *_weakController;
}

- (void)dealloc;
- (int)type;
- (id)description;
- (id)initWithIdentifier:(id)arg1 type:(int)arg2 withController:(id)arg3;

@end

@interface SBFPasscodeLockTrackerForLockScreenCameraAssertions : SBFPasscodeLockAssertionTracker
{
}

@end

@interface SBFPasscodeLockTrackerForPreventLockAssertions : SBFPasscodeLockAssertionTracker
{
}

@end

@interface SBFPasscodeLockTrackerForSiriAssertions : SBFPasscodeLockAssertionTracker
{
}

@end

@interface SBFPasscodeLockTrackerForTransientAssertions : SBFPasscodeLockAssertionTracker
{
}

@end

@interface SBFProceduralWallpaperView : SBFWallpaperView <SBFProceduralWallpaperDelegate>
{
    id <SBFProceduralWallpaper> _proceduralWallpaper;
    NSDictionary *_options;
    NSTimer *_colorSampleTimer;
    UIImage *_blur;
    int _thermalNotificationToken;
    _Bool _pausedForThermalReasons;
}

+ (_Bool)_allowsRasterization;
+ (_Bool)_allowsParallax;
- (id)options;
- (void)prepareToAppear;
- (void)prepareToDisappear;
- (void)_updateAnimating;
- (_Bool)_isVisible;
- (void)_sample;
- (_Bool)_shouldSampleContinuously;
- (void)_updateSampleTimer;
- (id)_newImageFromBlurSurface:(void *)arg1 rect:(struct CGRect)arg2;
- (void)wallpaper:(id)arg1 didComputeAverageColor:(id)arg2 forRect:(struct CGRect)arg3;
- (void)wallpaper:(id)arg1 didGenerateBlur:(void *)arg2 forRect:(struct CGRect)arg3;
- (id)_blurredImage;
- (void)_stopGeneratingBlurredImages;
- (void)_startGeneratingBlurredImages;
- (id)_computeAverageColor;
- (void)_handleVariantChange;
- (void)_handleVisibilityChange;
- (_Bool)isDisplayingWallpaper:(id)arg1 forVariant:(long long)arg2 options:(id)arg3;
- (void)layoutSubviews;
- (void)setWallpaperAnimationEnabled:(_Bool)arg1;
- (void)setContinuousColorSamplingEnabled:(_Bool)arg1;
- (void)invalidate;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 proceduralWallpaper:(id)arg2 options:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFScheduler : NSObject
{
}

+ (id)mainScheduler;
+ (id)globalAsyncScheduler;
+ (id)immediateScheduler;

@end

@interface SBFStaticWallpaperView : SBFWallpaperView
{
    NSMutableSet *_mappedBackdropKeys;
    UIImage *_image;
    UIImage *_treatedImage;
    _Bool _treatWallpaper;
    SBFColorBoxes *_colorBoxes;
}

+ (_Bool)_allowsRasterization;
+ (_Bool)_allowsParallax;
@property(retain, nonatomic) SBFColorBoxes *colorBoxes; // @synthesize colorBoxes=_colorBoxes;
- (id)_createColorBoxes;
- (id)_wallpaperImageForAnalysis;
- (void)_resetColorBoxes;
- (struct CGSize)_imageSize;
- (float)_zoomScale;
- (unsigned long long)_colorBoxSize;
- (void)_removeMappedBlurs;
- (id)_treatedImageKey;
- (id)_mappedImageKeyForParameters:(CDStruct_2ec95fd7)arg1 includingTint:(_Bool)arg2;
- (void)_cacheTreatedImage;
- (void)_setupContentView;
- (void)setContentView:(id)arg1;
- (void)setCropRect:(struct CGRect)arg1 zoomScale:(double)arg2;
- (double)cropZoomScale;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (id)_averageColorInContentViewRect:(struct CGRect)arg1 smudgeRadius:(double)arg2;
- (double)contrastInRect:(struct CGRect)arg1 contrastWithinBoxes:(double *)arg2 contrastBetweenBoxes:(double *)arg3;
- (double)contrastInRect:(struct CGRect)arg1;
- (void)setContentsRect:(struct CGRect)arg1;
- (id)_newTreatedImage;
- (id)_displayedImage;
- (id)_untintedImageForBackdropParameters:(CDStruct_2ec95fd7)arg1;
- (id)_imageForBackdropParameters:(CDStruct_2ec95fd7)arg1 includeTint:(_Bool)arg2;
- (id)_blurredImage;
- (id)_computeAverageColor;
- (id)wallpaperImage;
- (_Bool)isDisplayingWallpaper:(id)arg1 forVariant:(long long)arg2 options:(id)arg3;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 wallpaperImage:(id)arg2 treatWallpaper:(_Bool)arg3;
- (id)initWithFrame:(struct CGRect)arg1 wallpaperImage:(id)arg2;

@end

@interface SBFScrollableStaticWallpaperView : SBFStaticWallpaperView <UIScrollViewDelegate>
{
    UIImageView *_imageView;
    UIScrollView *_scrollView;
    SBFLockScreenWallpaperParallaxSettings *_parallaxSettings;
    SBFSubject *_scrollViewObserver;
    id <SBFCancelable> _colorBoxCancelToken;
    id <SBFCancelable> _parallaxCancelToken;
    double _minimumZoomScaleForParallax;
    double _minimumZoomScale;
    _Bool _parallaxCanBeEnabledAutomatically;
    UIColor *_averageColor;
}

+ (_Bool)_shouldScaleForParallax;
@property(readonly) UIColor *averageColor; // @synthesize averageColor=_averageColor;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (id)viewForZoomingInScrollView:(id)arg1;
- (void)layoutSubviews;
- (void)setCropRect:(struct CGRect)arg1 zoomScale:(double)arg2;
- (double)cropZoomScale;
- (_Bool)supportsCropping;
- (struct CGRect)cropRect;
- (struct CGRect)_cropRect;
- (struct CGPoint)_maximumContentOffsetForOverhang;
- (struct CGPoint)_minimumContentOffsetForOverhang;
- (struct CGPoint)_boundedContentOffsetForOverhang;
- (void)_setupScrollView;
- (void)_updateScrollViewZoomScales;
- (double)_throttleDuration;
- (void)_updateParallaxForScroll;
- (void)_setupParallaxObserver;
- (void)_setupColorBoxObserver;
- (void)_setupScrollViewObserver;
- (id)_wallpaperImageForAnalysis;
- (struct CGSize)_imageSize;
- (void)_setupContentView;
- (double)_parallaxFactorWithZoomScale:(double)arg1 contentOffset:(struct CGPoint)arg2;
- (double)_scrollViewParallaxFactor;
- (double)parallaxFactor;
- (void)setParallaxEnabled:(_Bool)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 wallpaperImage:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFSubject : SBFObservable <SBFObserver>
{
    NSMutableArray *_observers;
}

- (id)subscribe:(id)arg1;
- (void)observerDidFailWithError:(id)arg1;
- (void)observerDidComplete;
- (void)observerDidReceiveResult:(id)arg1;
- (id)_observers;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBFWallpaperDefaults : NSObject
{
}

+ (id)defaults;
- (_Bool)magnifyEnabledForVariant:(long long)arg1;
- (void)setMagnifyEnabled:(_Bool)arg1 forLocations:(long long)arg2;
- (void)resetMagnifyDefaults;
- (_Bool)supportsCroppingForVariant:(long long)arg1;
- (void)setSupportsCropping:(_Bool)arg1 forLocations:(long long)arg2;
- (struct CGRect)cropRectForVariant:(long long)arg1;
- (void)setCropRect:(struct CGRect)arg1 forLocations:(long long)arg2;
- (void)resetCroppingDefaults;
- (double)zoomScaleForVariant:(long long)arg1;
- (void)setZoomScale:(double)arg1 forLocations:(long long)arg2;
- (void)resetZoomScaleDefaults;
- (double)parallaxFactorForVariant:(long long)arg1;
- (void)setParallaxFactor:(double)arg1 forLocations:(long long)arg2;
- (void)resetParallaxFactorDefaults;
- (void)setWallpaperOptions:(id)arg1 forLocations:(long long)arg2;
- (void)resetDefaults;
- (id)description;

@end

@interface SBFWallpaperOptions : NSObject
{
    _Bool _supportsCropping;
    NSString *_name;
    double _parallaxFactor;
    double _zoomScale;
    struct CGRect _cropRect;
}

+ (id)optionsWithName:(id)arg1 parallaxFactor:(double)arg2 zoomScale:(double)arg3 supportsCropping:(_Bool)arg4 cropRect:(struct CGRect)arg5;
@property(readonly, nonatomic) struct CGRect cropRect; // @synthesize cropRect=_cropRect;
@property(readonly, nonatomic) _Bool supportsCropping; // @synthesize supportsCropping=_supportsCropping;
@property(readonly, nonatomic) double zoomScale; // @synthesize zoomScale=_zoomScale;
@property(readonly, nonatomic) double parallaxFactor; // @synthesize parallaxFactor=_parallaxFactor;
@property(readonly, copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) _Bool parallaxEnabled;
- (void)dealloc;
- (id)initWithName:(id)arg1 parallaxFactor:(double)arg2 zoomScale:(double)arg3 supportsCropping:(_Bool)arg4 cropRect:(struct CGRect)arg5;

@end

@interface SBFWallpaperSettings : _UISettings
{
    _Bool _replaceBlurs;
    unsigned long long _colorBoxSize;
    long long _blurReplacementMode;
}

+ (id)settingsControllerModule;
@property(nonatomic) long long blurReplacementMode; // @synthesize blurReplacementMode=_blurReplacementMode;
@property(nonatomic) _Bool replaceBlurs; // @synthesize replaceBlurs=_replaceBlurs;
@property(nonatomic) unsigned long long colorBoxSize; // @synthesize colorBoxSize=_colorBoxSize;
- (void)setDefaultValues;

@end

@interface SBFWeakReference : NSObject
{
    id _object;
}

+ (id)weakReferenceWithObject:(id)arg1;
- (id)object;
- (void)dealloc;
- (id)init;
- (id)initWithObject:(id)arg1;

@end

@interface SBReadonlyRow : PTSRow
{
}

- (Class)rowTableViewCellClass;

@end

@interface SBReadonlyTableViewCell : PTSRowTableViewCell
{
}

+ (long long)cellStyleForRow:(id)arg1;
- (void)updateDisplayedValue;

@end

@interface SBWallpaperImage : UIImage
{
    long long _variant;
    NSData *_data;
}

+ (void)preheatWallpaperDataForVariant:(long long)arg1;
+ (struct CGImage *)_newBlackWallpaperImage;
+ (id)cachedWallpaperDataForVariant:(long long)arg1;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) long long variant; // @synthesize variant=_variant;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithVariant:(long long)arg1;

@end

@interface UIDevice (ControlCenter)
- (id)_deviceInfoForKey:(struct __CFString *)arg1;
- (id)_currentProduct;
- (id)_mediumQualityProductsIncludingN41:(_Bool)arg1;
- (long long)_graphicsQualityIncludingMediumN41:(_Bool)arg1;
- (long long)sbf_controlCenterGraphicsQuality;
- (long long)sbf_bannerGraphicsQuality;
@end

@interface UIImage (Magnify)
- (id)sbf_resizedImagedForCurrentMagnifyMode;
@end

@interface UIImage (SBFImageMasking)
- (id)sbf_imageMaskedByColor:(id)arg1 withShadow:(id)arg2;
- (id)sbf_imageWithEtchedBorderOfColor:(id)arg1 radius:(double)arg2;
- (id)sbf_imageWithShadow:(id)arg1;
- (id)sbf_imageMaskedByColor:(id)arg1;
- (id)sbf_invertedMaskImage;
- (id)sbf_maskImage;
@end

@interface UIImage (SBFImageSizing)
- (id)sbf_resizeImageToSize:(struct CGSize)arg1;
- (id)sbf_resizeImageToSize:(struct CGSize)arg1 preservingAspectRatio:(_Bool)arg2;
- (id)sbf_scaleImage:(double)arg1;
- (id)sbf_cropImageWithRect:(struct CGRect)arg1 outputSize:(struct CGSize)arg2;
@end

@interface UIScreen (SpringBoard)
+ (id)sbs_snapshotImagePathComponent:(long long)arg1;
+ (id)sbs_launchImageInfoPlistKeyModifier:(long long)arg1;
+ (id)sbs_screenTypes;
- (id)sbs_snapshotImagePathComponent;
- (id)sbs_launchImageInfoPlistKeyModifier;
- (_Bool)sbs_isMainScreen;
- (_Bool)sbs_isCarScreen;
@end

@interface _SBFAccumulatingObserver : NSObject <SBFObserver>
{
    NSMutableArray *_results;
    NSError *_error;
    _Bool _didComplete;
    NSObject<OS_dispatch_semaphore> *_semaphore;
}

- (id)waitForResults:(id *)arg1;
- (void)observerDidFailWithError:(id)arg1;
- (void)observerDidComplete;
- (void)observerDidReceiveResult:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _SBFAnimationAttributesFactory : SBFAnimationFactory
{
    _UIViewAnimationAttributes *_attributes;
}

- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)_animateWithAdditionalDelay:(double)arg1 options:(unsigned long long)arg2 actions:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (id)factoryWithTimingFunction:(id)arg1;
- (double)delay;
- (double)duration;
- (void)dealloc;
- (id)_initWithSettings:(id)arg1;
- (id)_initWithAttributes:(id)arg1;

@end

@interface _SBFBlockObservable : SBFObservable
{
    CDUnknownBlockType _block;
}

- (id)subscribe:(id)arg1;
- (void)dealloc;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

@end

@interface _SBFBlockObserver : NSObject <SBFObserver>
{
    CDUnknownBlockType _resultBlock;
    CDUnknownBlockType _completionBlock;
    CDUnknownBlockType _failureBlock;
}

- (void)observerDidFailWithError:(id)arg1;
- (void)observerDidComplete;
- (void)observerDidReceiveResult:(id)arg1;
- (void)dealloc;
- (id)initWithResultBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _SBFForkJoinObservable : SBFObservable
{
    NSArray *_observables;
    NSMutableArray *_results;
    unsigned long long _uncompletedObservableCount;
}

- (id)subscribe:(id)arg1;
- (void)_observableFinishedForObserver:(id)arg1;
- (void)_setResult:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)dealloc;
- (id)initWithWithObservables:(id)arg1;

@end

@interface _SBFImmediateScheduler : NSObject <SBFScheduler>
{
}

- (id)afterDelay:(double)arg1 performBlock:(CDUnknownBlockType)arg2;
- (id)performCancelableBlock:(CDUnknownBlockType)arg1;
- (id)performBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _SBFQueueScheduler : NSObject <SBFScheduler>
{
    NSObject<OS_dispatch_queue> *_queue;
}

- (id)afterDelay:(double)arg1 performBlock:(CDUnknownBlockType)arg2;
- (id)performCancelableBlock:(CDUnknownBlockType)arg1;
- (id)performBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithQueue:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _SBFScheduledObservable : SBFObservable
{
    id <SBFObservable> _observable;
    id <SBFScheduler> _scheduler;
}

- (id)subscribe:(id)arg1;
- (void)dealloc;
- (id)initWithObservable:(id)arg1 scheduler:(id)arg2;

@end

@interface _SBFThrottledObservable : SBFObservable
{
    double _interval;
    id <SBFCancelable> _delayToken;
    id <SBFObservable> _observable;
    id <SBFScheduler> _scheduler;
    id _result;
    _Bool _hasResult;
    unsigned long long _resultCounter;
}

- (id)subscribe:(id)arg1;
- (void)_cancel;
- (unsigned long long)_setResult:(id)arg1;
- (void)_clearResult;
- (void)_sendCompletionToObsever:(id)arg1;
- (void)_sendResultToObserver:(id)arg1 withIdentifier:(unsigned long long)arg2;
- (void)_setDelayToken:(id)arg1;
- (void)dealloc;
- (id)initWithInterval:(double)arg1 observable:(id)arg2 scheduler:(id)arg3;

@end

@interface _SBFVibrantSettings : NSObject
{
    long long _style;
    UIColor *_referenceColor;
    _UILegibilitySettings *_legibilitySettings;
    double _referenceContrast;
    UIColor *_tintColor;
    UIColor *_shimmerColor;
    UIColor *_chevronShimmerColor;
    UIColor *_highlightColor;
    UIColor *_highlightLimitingColor;
}

+ (id)vibrantSettingsWithReferenceColor:(id)arg1 referenceContrast:(double)arg2 legibilitySettings:(id)arg3;
@property(retain, nonatomic) UIColor *highlightLimitingColor; // @synthesize highlightLimitingColor=_highlightLimitingColor;
@property(retain, nonatomic) UIColor *highlightColor; // @synthesize highlightColor=_highlightColor;
@property(retain, nonatomic) UIColor *chevronShimmerColor; // @synthesize chevronShimmerColor=_chevronShimmerColor;
@property(retain, nonatomic) UIColor *shimmerColor; // @synthesize shimmerColor=_shimmerColor;
@property(retain, nonatomic) UIColor *tintColor; // @synthesize tintColor=_tintColor;
@property(readonly, nonatomic) double referenceContrast; // @synthesize referenceContrast=_referenceContrast;
@property(readonly, nonatomic) _UILegibilitySettings *legibilitySettings; // @synthesize legibilitySettings=_legibilitySettings;
@property(readonly, nonatomic) UIColor *referenceColor; // @synthesize referenceColor=_referenceColor;
@property(readonly, nonatomic) long long style; // @synthesize style=_style;
- (id)highlightLimitingViewWithFrame:(struct CGRect)arg1;
- (id)tintViewWithFrame:(struct CGRect)arg1;
- (id)_computeSourceColorDodgeColorForDestinationColor:(id)arg1 producingLuminanceChange:(double)arg2;
- (long long)_style;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithReferenceColor:(id)arg1 referenceContrast:(double)arg2 legibilitySettings:(id)arg3;

@end

@interface _SBFVibrantTableViewCell : UITableViewCell
{
    long long _graphicsQuality;
}

@property(nonatomic) long long graphicsQuality; // @synthesize graphicsQuality=_graphicsQuality;
@property(nonatomic) _Bool usesVibrantSelection;

@end

@interface _SBFVibrantTableViewHeaderFooterView : UITableViewHeaderFooterView
{
    _UIBackdropView *_backdrop;
    UIView *_plusDView;
    _Bool _wantsPlusDLayer;
    long long _graphicsQuality;
    NSString *_backdropGroupName;
}

+ (id)defaultBackgroundColorForGraphicsQuality:(long long)arg1;
@property(nonatomic) _Bool wantsPlusDLayer; // @synthesize wantsPlusDLayer=_wantsPlusDLayer;
@property(copy, nonatomic) NSString *backdropGroupName; // @synthesize backdropGroupName=_backdropGroupName;
@property(nonatomic) long long graphicsQuality; // @synthesize graphicsQuality=_graphicsQuality;
- (void)setFloating:(_Bool)arg1;
- (long long)initialGraphicsQuality;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface _UILegibilitySettings (SpringBoard)
- (id)sb_styleString;
- (id)sb_description;
@end

