//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PlugInKit.framework/PlugInKit
// UUID: 51BD0B5C-C46F-31E2-BD5E-6AB8CE498B81
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 91.1.2.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol LSApplicationWorkspaceObserverProtocol <NSObject>

@optional
- (void)networkUsageChanged:(_Bool)arg1;
- (void)applicationInstallsDidPrioritize:(NSArray *)arg1;
- (void)applicationInstallsDidCancel:(NSArray *)arg1;
- (void)applicationInstallsDidResume:(NSArray *)arg1;
- (void)applicationInstallsDidPause:(NSArray *)arg1;
- (void)applicationInstallsArePrioritized:(NSArray *)arg1 arePaused:(NSArray *)arg2;
- (void)applicationsDidFailToUninstall:(NSArray *)arg1;
- (void)pluginsDidUninstall:(NSArray *)arg1;
- (void)applicationsDidUninstall:(NSArray *)arg1;
- (void)pluginsWillUninstall:(NSArray *)arg1;
- (void)applicationsWillUninstall:(NSArray *)arg1;
- (void)applicationsDidFailToInstall:(NSArray *)arg1;
- (void)pluginsDidInstall:(NSArray *)arg1;
- (void)applicationsDidInstall:(NSArray *)arg1;
- (void)applicationsWillInstall:(NSArray *)arg1;
- (void)applicationInstallsDidUpdateIcon:(NSArray *)arg1;
- (void)applicationInstallsDidChange:(NSArray *)arg1;
- (void)applicationInstallsDidStart:(NSArray *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCConnectionDelegate <NSObject>

@optional
- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;
- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol PKCoreHostProtocol
@end

@protocol PKCorePlugInProtocol
- (void)prefsSetObject:(id)arg1 forKey:(NSString *)arg2 inPlugIn:(NSString *)arg3 result:(void (^)(void))arg4;
- (void)prefsObjectForKey:(NSString *)arg1 inPlugIn:(NSString *)arg2 result:(void (^)(id))arg3;
- (void)shutdownPlugIn;
- (void)beginUsingPlugIn:(id)arg1 ready:(void (^)(PKServicePersonality *, id))arg2;
- (void)prepareUsing:(NSDictionary *)arg1 reply:(void (^)(NSError *, NSDictionary *))arg2;
- (void)prepareUsingPlugIn:(NSString *)arg1 hostProtocol:(NSString *)arg2 reply:(void (^)(NSArray *))arg3;
@end

@protocol PKModularService <NSObject>
+ (id <PKModularService>)initForPlugInKit;

@optional
- (void)communicationsFailed:(id <PKSubsystemServicePersonality>)arg1;
- (void)endUsing:(id <PKSubsystemServicePersonality>)arg1;
- (void)beginUsing:(id <PKSubsystemServicePersonality>)arg1 withBundle:(NSBundle *)arg2;
@end

@protocol PKPlugIn <NSObject>
@property(copy) CDUnknownBlockType notificationBlock;
@property(readonly) NSBundle *embeddedBundle;
@property(readonly) id embeddedPrincipal;
@property(readonly) id plugInPrincipal;
@property(readonly) _Bool active;
@property(readonly) id <PKPlugIn> supersededBy;
@property long long userElection;
@property(readonly) NSString *localizedContainingName;
@property(readonly) NSString *localizedShortName;
@property(readonly) NSString *localizedName;
@property(readonly) NSDictionary *attributes;
@property(readonly) NSDictionary *plugInDictionary;
@property(readonly) NSDictionary *bundleInfoDictionary;
@property(readonly) _Bool onSystemVolume;
@property(readonly) NSURL *containingUrl;
@property(readonly) NSURL *url;
@property(readonly) NSString *version;
@property(readonly) NSString *identifier;
- (void)setReplyQueue:(NSObject<OS_dispatch_queue> *)arg1;
- (NSUserDefaults *)defaults;
- (void)setHostPrincipal:(id)arg1 withProtocol:(Protocol *)arg2;
- (void)endUsing:(void (^)(NSError *))arg1;
- (_Bool)useBundle:(NSString *)arg1 error:(id *)arg2;
- (void)beginUsing:(void (^)(NSError *))arg1;
@end

@protocol PKPlugInPrivate <PKPlugIn>
@property(retain) NSDictionary *extensionState;
@property(readonly) NSXPCConnection *pluginConnection;
@property(readonly) NSDate *timestamp;
@property(readonly) NSUUID *uuid;
@end

@protocol PKServiceDelegate <NSObject>
- (id)rootObjectForPlugIn:(NSString *)arg1;
@end

@protocol PKSubsystemServicePersonality <NSObject>
@property(readonly) NSXPCConnection *connection;
@property(readonly) NSDictionary *plugInDictionary;
@property(readonly) NSDictionary *bundleInfoDictionary;
@property(readonly) NSUUID *uuid;
@property(readonly) NSURL *url;
@property(readonly) NSString *version;
@property(readonly) NSString *identifier;
@end

@interface NSArray (NSArrayBlockComprehension)
+ (id)arrayWithValues:(id)arg1 inBlock:(CDUnknownBlockType)arg2;
@end

@interface NSDictionary (SmallDictionaryChanges)
- (id)dictionaryChanging:(id)arg1 to:(id)arg2;
@end

@interface NSString (PKVersionComparison)
- (long long)compareVersionString:(id)arg1;
@end

@interface PKBundle : NSObject
{
    NSString *_supportPath;
    NSObject<OS_xpc_object> *__bundle;
}

@property(retain) NSObject<OS_xpc_object> *_bundle; // @synthesize _bundle=__bundle;
- (void).cxx_destruct;
@property(readonly) NSString *plugInsPath;
@property(readonly) NSString *executablePath;
- (id)bundleDirectory:(id)arg1;
@property(readonly) NSString *supportPath; // @synthesize supportPath=_supportPath;
@property(readonly) NSString *path;
@property(readonly) NSURL *url;
@property(readonly) NSString *bundleIdentifier;
@property(readonly) NSDictionary *infoDictionary;
- (id)stringProperty:(int)arg1;
- (id)initWithXPCBundle:(id)arg1;
- (id)initWithExecutablePath:(id)arg1;
- (id)initWithExecutableURL:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)initForMainBundle;

@end

@interface PKDaemonClient : NSObject
{
    NSObject<OS_xpc_object> *_pkd;
    NSObject<OS_dispatch_queue> *_replyQueue;
    long long _protocolVersion;
}

@property long long protocolVersion; // @synthesize protocolVersion=_protocolVersion;
@property(retain) NSObject<OS_dispatch_queue> *replyQueue; // @synthesize replyQueue=_replyQueue;
@property(retain) NSObject<OS_xpc_object> *pkd; // @synthesize pkd=_pkd;
- (void).cxx_destruct;
- (void)set:(id)arg1 uuids:(id)arg2;
- (void)send:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (id)request:(const char *)arg1 paths:(id)arg2;
- (id)request:(const char *)arg1;
- (void)copyReceipt:(CDUnknownBlockType)arg1;
- (void)releaseHold:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)holdPlugins:(id)arg1 flags:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)setPluginAnnotations:(id)arg1 annotations:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)matchPlugIns:(id)arg1 flags:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)accessPlugIns:(id)arg1 flags:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)readyPlugIns:(id)arg1 flags:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;
- (void)bulkPlugins:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;
- (void)removePlugIns:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)addPlugIns:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (id)errorInReply:(id)arg1;
- (id)initWithServiceName:(const char *)arg1;

@end

@interface PKDiscoveryDriver : NSObject <LSApplicationWorkspaceObserverProtocol>
{
    int _annotationNotifyToken;
    NSDictionary *_attributes;
    unsigned long long _flags;
    CDUnknownBlockType _report;
    NSSet *_lastResults;
}

@property int annotationNotifyToken; // @synthesize annotationNotifyToken=_annotationNotifyToken;
@property(retain) NSSet *lastResults; // @synthesize lastResults=_lastResults;
@property(copy) CDUnknownBlockType report; // @synthesize report=_report;
@property unsigned long long flags; // @synthesize flags=_flags;
@property(retain) NSDictionary *attributes; // @synthesize attributes=_attributes;
- (void).cxx_destruct;
- (void)cancel;
- (void)pluginsDidUninstall:(id)arg1;
- (void)pluginsDidInstall:(id)arg1;
- (void)performWithPreviousResults:(id)arg1 forceNotify:(_Bool)arg2;
- (void)dealloc;
- (id)initWithAttributes:(id)arg1 flags:(unsigned long long)arg2 report:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKHost : NSObject
{
    NSDictionary *_hostInfoPlist;
    NSMutableDictionary *_activePlugIns;
    NSObject<OS_dispatch_queue> *_hostQueue;
    PKDaemonClient *_client;
}

+ (id)defaultHost;
@property(retain) PKDaemonClient *client; // @synthesize client=_client;
@property(retain) NSObject<OS_dispatch_queue> *hostQueue; // @synthesize hostQueue=_hostQueue;
@property(retain) NSMutableDictionary *activePlugIns; // @synthesize activePlugIns=_activePlugIns;
- (void).cxx_destruct;
@property(readonly) NSDictionary *hostInfoPlist; // @synthesize hostInfoPlist=_hostInfoPlist;
- (void)deactivatePlugIn:(id)arg1;
- (void)activatePlugIn:(id)arg1;
- (id)activePlugInForIdentifier:(id)arg1;
- (void)setExtensionState:(id)arg1 forPlugIn:(id)arg2;
- (void)setElection:(long long)arg1 forPlugIn:(id)arg2;
- (void)readyPlugIns:(id)arg1 ready:(CDUnknownBlockType)arg2;
- (void)accessPlugIns:(id)arg1 flags:(unsigned long long)arg2 extensions:(CDUnknownBlockType)arg3;
- (void)cancelPlugInDiscovery:(id)arg1;
- (id)continuouslyDiscoverPlugInsForAttributes:(id)arg1 flags:(unsigned long long)arg2 found:(CDUnknownBlockType)arg3;
- (id)rewriteDiscoveryAttributes:(id)arg1 flags:(unsigned long long)arg2;
- (void)discoverPlugInsForAttributes:(id)arg1 flags:(unsigned long long)arg2 found:(CDUnknownBlockType)arg3;
- (id)init;

@end

@interface PKHostDefaults : NSUserDefaults
{
    PKHostPlugIn *_plugin;
    NSObject<OS_dispatch_queue> *_queue;
}

@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property __weak PKHostPlugIn *plugin; // @synthesize plugin=_plugin;
- (void).cxx_destruct;
- (void)registerDefaults:(id)arg1;
- (_Bool)synchronize;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (id)initWithPlugIn:(id)arg1;

@end

@interface PKPlugInCore : NSObject
{
    _Bool _onSystemVolume;
    NSDictionary *_topDictionary;
    NSDictionary *_plugInDictionary;
    NSString *_identifier;
    NSURL *_url;
    NSURL *_containingUrl;
    NSDictionary *_bundleInfoDictionary;
    unsigned long long _hubProtocolVersion;
    NSString *_localizedName;
    NSString *_localizedShortName;
    NSString *_localizedContainingName;
    NSDictionary *_annotations;
    long long _lastModified;
    NSUUID *_uuid;
    NSData *_cdhash;
    NSString *_requirement;
}

+ (id)readSDKDictionary:(id)arg1;
@property(retain) NSString *requirement; // @synthesize requirement=_requirement;
@property(retain) NSData *cdhash; // @synthesize cdhash=_cdhash;
@property(retain) NSUUID *uuid; // @synthesize uuid=_uuid;
@property long long lastModified; // @synthesize lastModified=_lastModified;
@property(retain) NSDictionary *annotations; // @synthesize annotations=_annotations;
@property(retain) NSString *localizedContainingName; // @synthesize localizedContainingName=_localizedContainingName;
@property(retain) NSString *localizedShortName; // @synthesize localizedShortName=_localizedShortName;
@property(retain) NSString *localizedName; // @synthesize localizedName=_localizedName;
@property unsigned long long hubProtocolVersion; // @synthesize hubProtocolVersion=_hubProtocolVersion;
@property(retain) NSDictionary *bundleInfoDictionary; // @synthesize bundleInfoDictionary=_bundleInfoDictionary;
@property _Bool onSystemVolume; // @synthesize onSystemVolume=_onSystemVolume;
@property(retain) NSURL *containingUrl; // @synthesize containingUrl=_containingUrl;
@property(retain) NSURL *url; // @synthesize url=_url;
@property(retain) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)augmentInterface:(id)arg1;
@property(readonly) NSDate *timestamp;
@property(readonly) _Bool isData;
@property(readonly) _Bool isDedicated;
@property(readonly) _Bool isHybrid;
@property(readonly) _Bool isMultiplexed;
@property(readonly) _Bool isAppExtension;
- (id)embeddedProtocolSpec;
- (id)embeddedCodePath;
@property(readonly) NSString *sdkSpec;
@property(readonly) id protocolSpec;
@property(readonly) NSString *version;
@property(readonly) NSDictionary *attributes;
@property(readonly) NSString *containingPath;
@property(readonly) NSString *path;
@property(readonly) _Bool oldStyle;
@property(retain) NSDictionary *plugInDictionary; // @synthesize plugInDictionary=_plugInDictionary;
@property(retain) NSDictionary *topDictionary; // @synthesize topDictionary=_topDictionary;
- (void)setAnnotation:(id)arg1 value:(id)arg2;
- (void)updateFromForm:(id)arg1;
- (id)diagnose;
- (id)export:(id *)arg1;
- (id)mergeSharedResources:(id)arg1 into:(id)arg2;
- (_Bool)sdkOverridesKey:(id)arg1;
- (id)mergeDictionary:(id)arg1 into:(id)arg2;
- (void)resolveSDK;
- (void)canonicalize;
- (_Bool)setupWithForm:(id)arg1;
- (id)newAttributesFrom:(id)arg1;
- (id)newMultiplesFrom:(id)arg1;
- (id)newPlugInKitDictionaryFrom:(id)arg1;
- (id)normalizeInfoDictionary:(id)arg1;
- (_Bool)setDictionaries:(id)arg1;
- (_Bool)setupWithName:(id)arg1 url:(id)arg2 bundleInfo:(id)arg3 info:(id)arg4 uuid:(id)arg5;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithForm:(id)arg1;
- (id)initWithName:(id)arg1 url:(id)arg2 bundleInfo:(id)arg3 info:(id)arg4 uuid:(id)arg5;
- (id)init;

@end

@interface PKHostPlugIn : PKPlugInCore <PKPlugInPrivate, NSXPCConnectionDelegate>
{
    unsigned int _useCount;
    NSUserDefaults *_defaults;
    CDUnknownBlockType _notificationBlock;
    NSXPCConnection *_pluginConnection;
    NSObject<OS_dispatch_queue> *__replyQueue;
    NSObject<OS_dispatch_queue> *__syncQueue;
    NSObject<OS_dispatch_queue> *__startQueue;
    id <PKCorePlugInProtocol> _service;
    NSUUID *_supersedingUUID;
    id <PKPlugIn> _supersededBy;
    NSDictionary *_discoveryExtensions;
    NSArray *_sandboxExtensions;
    id _queuedHostPrincipal;
    Protocol *_queuedHostProtocol;
    unsigned long long _state;
    id _plugInPrincipal;
    id _embeddedPrincipal;
    NSBundle *_embeddedBundle;
    NSDate *_beganUsingAt;
}

@property(retain) NSDate *beganUsingAt; // @synthesize beganUsingAt=_beganUsingAt;
@property(retain) NSBundle *embeddedBundle; // @synthesize embeddedBundle=_embeddedBundle;
@property(retain) id embeddedPrincipal; // @synthesize embeddedPrincipal=_embeddedPrincipal;
@property(retain) id plugInPrincipal; // @synthesize plugInPrincipal=_plugInPrincipal;
@property unsigned int useCount; // @synthesize useCount=_useCount;
@property unsigned long long state; // @synthesize state=_state;
@property(retain) Protocol *queuedHostProtocol; // @synthesize queuedHostProtocol=_queuedHostProtocol;
@property(retain) id queuedHostPrincipal; // @synthesize queuedHostPrincipal=_queuedHostPrincipal;
@property(retain) NSArray *sandboxExtensions; // @synthesize sandboxExtensions=_sandboxExtensions;
@property(retain) NSDictionary *discoveryExtensions; // @synthesize discoveryExtensions=_discoveryExtensions;
@property(retain) id <PKPlugIn> supersededBy; // @synthesize supersededBy=_supersededBy;
@property(retain) NSUUID *supersedingUUID; // @synthesize supersedingUUID=_supersedingUUID;
@property(retain) id <PKCorePlugInProtocol> service; // @synthesize service=_service;
@property(retain) NSObject<OS_dispatch_queue> *_startQueue; // @synthesize _startQueue=__startQueue;
@property(retain) NSObject<OS_dispatch_queue> *_syncQueue; // @synthesize _syncQueue=__syncQueue;
@property(retain) NSObject<OS_dispatch_queue> *_replyQueue; // @synthesize _replyQueue=__replyQueue;
@property(retain) NSXPCConnection *pluginConnection; // @synthesize pluginConnection=_pluginConnection;
@property(copy) CDUnknownBlockType notificationBlock; // @synthesize notificationBlock=_notificationBlock;
- (void).cxx_destruct;
- (void)changeState:(unsigned long long)arg1;
- (void)messageTraceUsage;
- (void)unwind:(unsigned long long)arg1 force:(_Bool)arg2;
- (void)endUsing:(CDUnknownBlockType)arg1;
- (_Bool)useBundle:(id)arg1 error:(id *)arg2;
- (_Bool)loadExtensions:(id)arg1 error:(id *)arg2;
- (void)setBootstrap;
- (void)preparePlugin:(CDUnknownBlockType)arg1;
- (void)startPlugIn:(CDUnknownBlockType)arg1;
- (void)beginUsing:(CDUnknownBlockType)arg1;
- (void)setHostPrincipal:(id)arg1 withProtocol:(id)arg2;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(_Bool)arg3;
- (void)setReplyQueue:(id)arg1;
@property(readonly) _Bool active;
- (void)resume;
- (void)suspend;
@property(retain) NSDictionary *extensionState;
@property long long userElection;
@property(readonly) NSUserDefaults *defaults; // @synthesize defaults=_defaults;
@property(readonly, copy) NSString *description;
- (id)initWithForm:(id)arg1;

// Remaining properties
@property(readonly) NSDictionary *attributes;
@property(readonly) NSDictionary *bundleInfoDictionary;
@property(readonly) NSURL *containingUrl;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) NSString *identifier;
@property(readonly) NSString *localizedContainingName;
@property(readonly) NSString *localizedName;
@property(readonly) NSString *localizedShortName;
@property(readonly) _Bool onSystemVolume;
@property(readonly) NSDictionary *plugInDictionary;
@property(readonly) Class superclass;
@property(readonly) NSDate *timestamp;
@property(readonly) NSURL *url;
@property(readonly) NSUUID *uuid;
@property(readonly) NSString *version;

@end

@interface PKManager : NSObject
{
    PKDaemonClient *_client;
}

+ (id)defaultManager;
@property(retain) PKDaemonClient *client; // @synthesize client=_client;
- (void).cxx_destruct;
- (void)releaseHold:(id)arg1;
- (void)holdRequest:(id)arg1 flags:(unsigned long long)arg2 result:(CDUnknownBlockType)arg3;
- (void)forceHoldPlugIn:(id)arg1 result:(CDUnknownBlockType)arg2;
- (void)holdPlugInsInApplication:(id)arg1 result:(CDUnknownBlockType)arg2;
- (id)containingAppForExtensionProperties:(id)arg1;
- (id)containingAppForPlugInWithPid:(int)arg1;
- (id)containingAppForPlugInConnectedTo:(id)arg1;
- (id)informationForPlugInWithPid:(int)arg1;
- (void)unregisterPlugInsInBundle:(id)arg1 result:(CDUnknownBlockType)arg2;
- (void)registerPlugInsInBundle:(id)arg1 result:(CDUnknownBlockType)arg2;
- (void)unregisterPlugInAtURL:(id)arg1 result:(CDUnknownBlockType)arg2;
- (void)registerPlugInAtURL:(id)arg1 result:(CDUnknownBlockType)arg2;
- (id)initForService:(const char *)arg1;

@end

@interface PKSandboxExtension : NSObject
{
    NSString *_token;
    long long _handle;
}

@property long long handle; // @synthesize handle=_handle;
@property(retain) NSString *token; // @synthesize token=_token;
- (void).cxx_destruct;
- (void)expel;
- (void)consume;
- (void)dealloc;
- (id)initWithExtension:(id)arg1;

@end

@interface PKService : NSObject <NSXPCListenerDelegate>
{
    _Bool _shared;
    id <PKServiceDelegate> _delegate;
    NSXPCListener *_serviceListener;
    NSMutableDictionary *_personalities;
    PKServicePersonality *_solePersonality;
    NSObject<OS_dispatch_queue> *__sync;
    NSArray *_subsystems;
}

+ (int)_defaultRun:(int)arg1 arguments:(const char **)arg2;
+ (id)defaultService;
+ (void)main;
@property _Bool shared; // @synthesize shared=_shared;
@property(retain) NSArray *subsystems; // @synthesize subsystems=_subsystems;
@property(retain) NSObject<OS_dispatch_queue> *_sync; // @synthesize _sync=__sync;
@property(retain) PKServicePersonality *solePersonality; // @synthesize solePersonality=_solePersonality;
@property(retain) NSMutableDictionary *personalities; // @synthesize personalities=_personalities;
@property(retain) NSXPCListener *serviceListener; // @synthesize serviceListener=_serviceListener;
@property(retain) id <PKServiceDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)checkEnvironment:(id)arg1;
- (_Bool)unregisterPersonality:(id)arg1;
- (void)registerPersonality:(id)arg1;
- (id)personalityNamed:(id)arg1 forHostPid:(int)arg2;
- (id)personalityNamed:(id)arg1;
- (id)connectionForPlugInNamed:(id)arg1;
- (id)embeddedPrincipalForPlugInNamed:(id)arg1;
- (id)hostPrincipalForPlugInNamed:(id)arg1;
- (id)plugInPrincipalForPlugInNamed:(id)arg1;
- (id)defaultsForPlugInNamed:(id)arg1;
- (void)copyAppStoreReceipt:(CDUnknownBlockType)arg1;
- (void)launchContainingApplicationForPlugInNamed:(id)arg1;
- (id)discoverSubsystemNamed:(id)arg1 logMissing:(_Bool)arg2;
- (void)mergeSubsystemList:(id)arg1 from:(id)arg2;
- (void)mergeSubsystems:(id)arg1 from:(id)arg2;
- (id)configuredSubsystemList;
- (void)discoverSubsystems;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)run;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PKServiceDefaults : NSUserDefaults
{
    PKServicePersonality *_personality;
}

@property __weak PKServicePersonality *personality; // @synthesize personality=_personality;
- (void).cxx_destruct;
- (_Bool)synchronize;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (id)initWithPersonality:(id)arg1;

@end

@interface PKServicePersonality : PKPlugInCore <PKCorePlugInProtocol, PKSubsystemServicePersonality>
{
    id _plugInPrincipal;
    id _hostPrincipal;
    id _embeddedPrincipal;
    NSXPCConnection *_connection;
    NSUserDefaults *_preferences;
}

@property(retain) NSUserDefaults *preferences; // @synthesize preferences=_preferences;
@property(retain) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(retain) id embeddedPrincipal; // @synthesize embeddedPrincipal=_embeddedPrincipal;
@property(retain) id hostPrincipal; // @synthesize hostPrincipal=_hostPrincipal;
@property(retain) id plugInPrincipal; // @synthesize plugInPrincipal=_plugInPrincipal;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
- (void)prefsSetObject:(id)arg1 forKey:(id)arg2 inPlugIn:(id)arg3 result:(CDUnknownBlockType)arg4;
- (void)prefsObjectForKey:(id)arg1 inPlugIn:(id)arg2 result:(CDUnknownBlockType)arg3;
- (void)shutdownPlugIn;
- (id)defaultPrincipalObject;
- (id)findProtocol:(id)arg1;
- (void)beginUsingPlugIn:(id)arg1 ready:(CDUnknownBlockType)arg2;
- (void)prepareUsingPlugIn:(id)arg1 hostProtocol:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)prepareUsing:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (id)setupWithIdentifier:(id)arg1;
- (id)initWithConnection:(id)arg1;

// Remaining properties
@property(readonly) NSDictionary *bundleInfoDictionary;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) NSString *identifier;
@property(readonly) NSDictionary *plugInDictionary;
@property(readonly) Class superclass;
@property(readonly) NSURL *url;
@property(readonly) NSUUID *uuid;
@property(readonly) NSString *version;

@end

@interface PKXPCObject : NSObject <NSSecureCoding>
{
    NSObject<OS_xpc_object> *_object;
}

+ (_Bool)supportsSecureCoding;
+ (id)object:(id)arg1;
@property(retain) NSObject<OS_xpc_object> *object; // @synthesize object=_object;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithObject:(id)arg1;

@end

