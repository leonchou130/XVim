//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UIOffset {
    double horizontal;
    double vertical;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/MusicUI.framework/MusicUI
// UUID: BB81F4C8-87B9-3F94-90ED-E95702FFE315
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1208.2.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol MCProfileConnectionObserver <NSObject>

@optional
- (void)profileConnectionDidReceiveAppWhitelistChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveDefaultsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveProfileListChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceivePasscodePolicyChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceivePasscodeChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveRestrictionChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
@end

@protocol MPMusicPlayerControllerServerDelegate <NSObject>
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 prepareQueueWithRadioStation:(MPRadioStation *)arg2;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 prepareQueueWithGeniusMixPlaylist:(MPMediaPlaylist *)arg2;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 prepareQueueWithQuery:(MPMediaQuery *)arg2;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 setShuffleMode:(long long)arg2;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 setFirstItem:(MPMediaItem *)arg2;
- (MPRadioStation *)currentRadioStationForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (MPMediaQuery *)currentMediaQueryForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (_Bool)isNowPlayingItemFromGeniusMixForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (unsigned long long)unshuffledIndexOfNowPlayingItemForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (unsigned long long)indexOfNowPlayingItemForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 setNowPlayingItem:(MPMediaItem *)arg2;
- (MPMediaItem *)nowPlayingItemForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 setPlaybackSpeed:(long long)arg2;
- (long long)playbackSpeedForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1;
- (MPAVController *)playerForMusicPlayerServer:(MPMusicPlayerControllerServer *)arg1 usingApplicationSpecificQueue:(_Bool)arg2;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 registerForShuffleModeChangesWithChangeHandler:(void (^)(long long))arg2;
- (void)musicPlayerServer:(MPMusicPlayerControllerServer *)arg1 registerForRepeatModeChangesWithChangeHandler:(void (^)(long long))arg2;
@end

@protocol MPTermsViewControllerDelegate <NSObject>
- (void)termsViewController:(MPTermsViewController *)arg1 acceptTermsAndConditions:(SSTermsAndConditions *)arg2 completionHandler:(void (^)(NSError *))arg3;
- (void)termsViewController:(MPTermsViewController *)arg1 loadTermsAndConditionsWithCompletionHandler:(void (^)(SSTermsAndConditions *, NSError *))arg2;
- (void)termsViewControllerDidCancel:(MPTermsViewController *)arg1;
- (void)termsViewControllerShouldDismiss:(MPTermsViewController *)arg1;
@end

@protocol MPTransportControlsTarget <NSObject>

@optional
- (void)transportControlsDidResize:(MPTransportControls *)arg1;
- (_Bool)transportControls:(MPTransportControls *)arg1 tappedButtonPart:(unsigned long long)arg2;
- (_Bool)transportControls:(MPTransportControls *)arg1 releasedHeldButtonPart:(unsigned long long)arg2;
- (_Bool)transportControls:(MPTransportControls *)arg1 heldButtonPart:(unsigned long long)arg2;
@end

@protocol MPUCompletionFooterViewDelegate <NSObject>
- (void)completionFooterView:(MPUCompletionFooterView *)arg1 purchaseCollectionFromOffering:(MPStoreCompletionOffering *)arg2;
- (void)completionFooterView:(MPUCompletionFooterView *)arg1 showItemsInOffering:(MPStoreCompletionOffering *)arg2;

@optional
- (void)completionFooterView:(MPUCompletionFooterView *)arg1 didChangePreferredVariant:(long long)arg2;
@end

@protocol MPUCompletionQueryDataSourceDelegate <NSObject>
- (void)completionQueryDataSource:(MPUCompletionQueryDataSource *)arg1 didUpdateOffer:(MPStoreCompletionOffering *)arg2 forSectionAtIndex:(long long)arg3;
- (void)completionQueryDataSource:(MPUCompletionQueryDataSource *)arg1 didRemoveOfferForSectionAtIndex:(long long)arg2;
- (void)completionQueryDataSource:(MPUCompletionQueryDataSource *)arg1 didLoadOffer:(MPStoreCompletionOffering *)arg2 forSectionAtIndex:(long long)arg3;
@end

@protocol MPUCoverZoomViewControllerDelegate <NSObject>
- (UIViewController *)detailViewControllerForEntity:(MPMediaEntity *)arg1;

@optional
- (double)imageAspectRatio;
- (unsigned long long)maximumNumberOfRows;
- (unsigned long long)minimumNumberOfRows;
- (unsigned long long)defaultNumberOfRows;
@end

@protocol MPUMiniPlayerParticipant <NSObject>
- (MPUProspectivePlaybackInformation *)MPU_prospectivePlaybackInformation;

@optional
- (_Bool)MPU_beginPlaybackForVisibleContent;
@end

@protocol MPURatingControlDelegate <NSObject>
- (void)ratingDidChangeForRatingControl:(MPURatingControl *)arg1;
@end

@protocol MusicFlipsideRating <NSObject>
@property(nonatomic) _Bool showingRating;
@property(nonatomic) __weak id <MPURatingControlDelegate> ratingDelegate;
- (void)setShowingRating:(_Bool)arg1 animated:(_Bool)arg2;
@end

@protocol MusicGeniusMixQueueFeederDataSource <NSObject>
- (unsigned long long)geniusMixQueueFeeder:(MusicGeniusMixQueueFeeder *)arg1 indexOfMediaItem:(MPMediaItem *)arg2;
- (MPMediaQuery *)geniusMixQueueFeeder:(MusicGeniusMixQueueFeeder *)arg1 queryForMediaItemAtIndex:(unsigned long long)arg2;
- (MPMediaItem *)geniusMixQueueFeeder:(MusicGeniusMixQueueFeeder *)arg1 mediaItemAtIndex:(unsigned long long)arg2;
- (unsigned long long)geniusMixQueueFeederMediaItemCount:(MusicGeniusMixQueueFeeder *)arg1;
@end

@protocol MusicPickerOverlayDelegate <NSObject>

@optional
- (void)pickerOverlayDidFinish:(MusicPickerOverlay *)arg1;
- (void)pickerOverlayRequestsFinish:(MusicPickerOverlay *)arg1;
@end

@protocol MusicSearchTableViewDelegate <UITableViewDelegate>

@optional
- (void)musicSearchTableView:(MusicSearchTableView *)arg1 traitCollectionDidChange:(UITraitCollection *)arg2;
@end

@protocol MusicSearchViewControllerDelegate <NSObject>

@optional
- (void)searchViewControllerWillEndSearch:(MusicSearchViewController *)arg1;
- (void)searchViewControllerWillBeginSearch:(MusicSearchViewController *)arg1;
@end

@protocol MusicTableViewDelegate <UITableViewDelegate>

@optional
- (void)musicTableView:(MusicTableView *)arg1 traitCollectionDidChange:(UITraitCollection *)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol SKUIItemOfferButtonDelegate <NSObject>

@optional
- (void)itemOfferButtonWillAnimateTransition:(SKUIItemOfferButton *)arg1;
- (void)itemOfferButtonDidAnimateTransition:(SKUIItemOfferButton *)arg1;
@end

@protocol SSDownloadManagerObserver <NSObject>

@optional
- (void)downloadManagerNetworkUsageDidChange:(SSDownloadManager *)arg1;
- (void)downloadManagerDownloadsDidChange:(SSDownloadManager *)arg1;
- (void)downloadManagerActiveDownloadsDidChange:(SSDownloadManager *)arg1;
- (void)downloadManager:(SSDownloadManager *)arg1 downloadStatesDidChange:(NSArray *)arg2;
@end

@protocol UIActionSheetDelegate <NSObject>

@optional
- (void)actionSheet:(UIActionSheet *)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)actionSheet:(UIActionSheet *)arg1 willDismissWithButtonIndex:(long long)arg2;
- (void)didPresentActionSheet:(UIActionSheet *)arg1;
- (void)willPresentActionSheet:(UIActionSheet *)arg1;
- (void)actionSheetCancel:(UIActionSheet *)arg1;
- (void)actionSheet:(UIActionSheet *)arg1 clickedButtonAtIndex:(long long)arg2;
@end

@protocol UICollectionViewDataSource <NSObject>
- (UICollectionViewCell *)collectionView:(UICollectionView *)arg1 cellForItemAtIndexPath:(NSIndexPath *)arg2;
- (long long)collectionView:(UICollectionView *)arg1 numberOfItemsInSection:(long long)arg2;

@optional
- (UICollectionReusableView *)collectionView:(UICollectionView *)arg1 viewForSupplementaryElementOfKind:(NSString *)arg2 atIndexPath:(NSIndexPath *)arg3;
- (long long)numberOfSectionsInCollectionView:(UICollectionView *)arg1;
@end

@protocol UICollectionViewDelegate <UIScrollViewDelegate>

@optional
- (UICollectionViewTransitionLayout *)collectionView:(UICollectionView *)arg1 transitionLayoutForOldLayout:(UICollectionViewLayout *)arg2 newLayout:(UICollectionViewLayout *)arg3;
- (void)collectionView:(UICollectionView *)arg1 performAction:(SEL)arg2 forItemAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)collectionView:(UICollectionView *)arg1 canPerformAction:(SEL)arg2 forItemAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldShowMenuForItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didEndDisplayingSupplementaryView:(UICollectionReusableView *)arg2 forElementOfKind:(NSString *)arg3 atIndexPath:(NSIndexPath *)arg4;
- (void)collectionView:(UICollectionView *)arg1 didEndDisplayingCell:(UICollectionViewCell *)arg2 forItemAtIndexPath:(NSIndexPath *)arg3;
- (void)collectionView:(UICollectionView *)arg1 willDisplaySupplementaryView:(UICollectionReusableView *)arg2 forElementKind:(NSString *)arg3 atIndexPath:(NSIndexPath *)arg4;
- (void)collectionView:(UICollectionView *)arg1 willDisplayCell:(UICollectionViewCell *)arg2 forItemAtIndexPath:(NSIndexPath *)arg3;
- (void)collectionView:(UICollectionView *)arg1 didDeselectItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didSelectItemAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldDeselectItemAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldSelectItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didUnhighlightItemAtIndexPath:(NSIndexPath *)arg2;
- (void)collectionView:(UICollectionView *)arg1 didHighlightItemAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)collectionView:(UICollectionView *)arg1 shouldHighlightItemAtIndexPath:(NSIndexPath *)arg2;
@end

@protocol UIGestureRecognizerDelegate <NSObject>

@optional
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldReceiveTouch:(UITouch *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizerShouldBegin:(UIGestureRecognizer *)arg1;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UISearchDisplayDelegate <NSObject>

@optional
- (_Bool)searchDisplayController:(UISearchDisplayController *)arg1 shouldReloadTableForSearchScope:(long long)arg2;
- (_Bool)searchDisplayController:(UISearchDisplayController *)arg1 shouldReloadTableForSearchString:(NSString *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 didHideSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 willHideSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 didShowSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 willShowSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 willUnloadSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 didLoadSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayControllerDidEndSearch:(UISearchDisplayController *)arg1;
- (void)searchDisplayControllerWillEndSearch:(UISearchDisplayController *)arg1;
- (void)searchDisplayControllerDidBeginSearch:(UISearchDisplayController *)arg1;
- (void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)arg1;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

@protocol UITextFieldDelegate <NSObject>

@optional
- (_Bool)textFieldShouldReturn:(UITextField *)arg1;
- (_Bool)textFieldShouldClear:(UITextField *)arg1;
- (_Bool)textField:(UITextField *)arg1 shouldChangeCharactersInRange:(struct _NSRange)arg2 replacementString:(NSString *)arg3;
- (void)textFieldDidEndEditing:(UITextField *)arg1;
- (_Bool)textFieldShouldEndEditing:(UITextField *)arg1;
- (void)textFieldDidBeginEditing:(UITextField *)arg1;
- (_Bool)textFieldShouldBeginEditing:(UITextField *)arg1;
@end

@protocol UIViewControllerRestoration
+ (UIViewController *)viewControllerWithRestorationIdentifierPath:(NSArray *)arg1 coder:(NSCoder *)arg2;
@end

@interface MusicAlbumsDetailTableHeaderView : UITableViewHeaderFooterView
{
    MPUSlantedTextPlaceholderArtworkView *_artworkView;
    UILabel *_copyrightLabel;
    UILabel *_detailTextLabel;
    UIView *_hairlineView;
    MPUItemOfferButton *_itemOfferButton;
    UIButton *_shuffleButton;
    UILabel *_titleLabel;
    UIView *_topCellSeparatorView;
    UILabel *_yearLabel;
    double _cloudRightInset;
    CDUnknownBlockType _downloadActionBlock;
    CDUnknownBlockType _shuffleActionBlock;
    long long _songCount;
    double _totalDuration;
}

+ (double)defaultHeight;
+ (struct CGSize)artworkSize;
+ (id)newAlbumsDetailTableHeaderViewForSizing;
@property(readonly, nonatomic) double totalDuration; // @synthesize totalDuration=_totalDuration;
@property(readonly, nonatomic) long long songCount; // @synthesize songCount=_songCount;
@property(copy, nonatomic) CDUnknownBlockType shuffleActionBlock; // @synthesize shuffleActionBlock=_shuffleActionBlock;
@property(copy, nonatomic) CDUnknownBlockType downloadActionBlock; // @synthesize downloadActionBlock=_downloadActionBlock;
@property(nonatomic) double cloudRightInset; // @synthesize cloudRightInset=_cloudRightInset;
- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_shuffleButtonAction:(id)arg1;
- (void)_itemOfferButtonAction:(id)arg1;
@property(copy, nonatomic) NSString *yearText;
@property(copy, nonatomic) NSString *title;
- (void)setSongCount:(long long)arg1 totalDuration:(double)arg2;
@property(nonatomic, getter=isShufflable) _Bool shufflable;
@property(copy, nonatomic) NSString *placeholderTitleText;
@property(copy, nonatomic) NSString *placeholderSubtitleText;
@property(nonatomic, getter=isDownloadable) _Bool downloadable;
@property(copy, nonatomic) NSString *copyrightText;
- (void)setBackgroundTransitionProgress:(double)arg1;
@property(retain, nonatomic) UIImage *artworkImage;
- (double)backgroundTransitionProgress;
- (void)setTableViewStyle:(long long)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithReuseIdentifier:(id)arg1;

@end

@interface MPHCZAlbumTableHeaderView : MusicAlbumsDetailTableHeaderView
{
}

+ (struct CGSize)artworkSize;
- (id)initWithReuseIdentifier:(id)arg1;

@end

@interface MusicTableViewController : MPUTableViewController <MPUMiniPlayerParticipant, MusicSearchViewControllerDelegate, MusicTableViewDelegate>
{
    NSMapTable *_calculatedHeightByTableViewRelatedClass;
    _Bool _isVisible;
    UITraitCollection *_previousTraitCollection;
    UISearchBar *_searchBar;
    UISearchDisplayController *_searchDisplayController;
    MusicSearchViewController *_searchViewController;
    id <MusicTableViewControllerDelegate> _delegate;
}

+ (_Bool)_supportsSearch;
+ (_Bool)_shouldPopWhenEmpty;
+ (Class)_tableViewClass;
@property(nonatomic) __weak id <MusicTableViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_updateVisibleCellsPlaybackState;
- (void)_updateTableViewMinimumHeightAdditions;
- (void)_updateNavigationPrompt;
- (id)_searchDisplayController;
- (id)_searchBar;
- (void)_invalidateCalculatedHeights;
- (double)_heightForCellConfigurationClass:(Class)arg1 inTableView:(id)arg2;
- (void)_tableViewController_itemDidChangeNotification:(id)arg1;
- (void)_tableViewController_defaultMediaLibraryDidChangeNotification:(id)arg1;
- (void)_tableViewController_cloudControllerCanShowCloudDownloadButtonsDidChangeNotification:(id)arg1;
- (void)_tableViewController_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_registerHeight:(id)arg1 forTableRelatedClass:(Class)arg2;
- (id)_heightForTableRelatedClass:(Class)arg1;
- (id)_createTableViewBackgroundView;
- (void)contentSizeCategoryDidChange;
@property(readonly, nonatomic) struct CGSize contentSize;
- (void)musicTableView:(id)arg1 traitCollectionDidChange:(id)arg2;
- (void)tableViewDidFinishReload:(id)arg1;
- (void)tableView:(id)arg1 willDisplayFooterView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayHeaderView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (long long)tableView:(id)arg1 sectionForSectionIndexTitle:(id)arg2 atIndex:(long long)arg3;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (_Bool)tableView:(id)arg1 canEditRowAtIndexPath:(id)arg2;
- (id)sectionIndexTitlesForTableView:(id)arg1;
- (void)searchViewControllerWillEndSearch:(id)arg1;
- (void)searchViewControllerWillBeginSearch:(id)arg1;
- (id)_createTableView;
- (_Bool)MPU_beginPlaybackForVisibleContent;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)reloadData;
- (void)reloadActionRowsAnimated:(_Bool)arg1;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_hasContent;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (id)view;
- (void)traitCollectionDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1 cellConfigurationClass:(Class)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicAlbumsDetailViewController : MusicTableViewController <MPUCompletionQueryDataSourceDelegate, MPUCompletionFooterViewDelegate>
{
    _Bool _hasEverReceivedWillAppear;
    _Bool _useDownloadAllArtistCellConfig;
    NSOperationQueue *_downloadabilityOperationQueue;
    _Bool _isTransitioning;
    _Bool _isDownloading;
    double _maximumDurationWidth;
    long long _downloadableSongCount;
}

+ (Class)_albumsDetailTableHeaderViewClass;
+ (id)actionCellConfigurationClasses;
+ (_Bool)shouldShowCMC;
+ (_Bool)shouldPushNowPlayingOnSelection;
@property(readonly, nonatomic) _Bool isDownloading; // @synthesize isDownloading=_isDownloading;
@property(readonly, nonatomic) long long downloadableSongCount; // @synthesize downloadableSongCount=_downloadableSongCount;
- (void).cxx_destruct;
- (void)_updateDownloadabilityStateWithCanReloadActionRowsSynchronously:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_downloadAllButtonAction:(id)arg1;
- (void)_updateTitle;
- (void)_updateVisibleHeadersCloudRightInset;
- (void)_updateVisibleHeadersCloudDownloadStates;
- (long long)_footerStyleForSection:(long long)arg1;
- (void)_configureFooterView:(id)arg1 forSection:(long long)arg2 offer:(id)arg3;
- (void)_applyCloudDownloadStateForHeaderView:(id)arg1 withAlbum:(id)arg2;
- (_Bool)_getCollectionPersistentID:(long long *)arg1 groupingType:(long long *)arg2;
- (long long)_collectionGroupingForProperty:(id)arg1;
- (void)_MusicAlbumsDetailViewController_canShowCloudDownloadButtonsDidChangeNotification:(id)arg1;
- (void)_MusicAlbumsDetailViewController_defaultsDidChangeNotification:(id)arg1;
@property(readonly, nonatomic) double maximumDurationWidth; // @synthesize maximumDurationWidth=_maximumDurationWidth;
- (void)completionFooterView:(id)arg1 purchaseCollectionFromOffering:(id)arg2;
- (void)completionFooterView:(id)arg1 showItemsInOffering:(id)arg2;
- (void)completionQueryDataSource:(id)arg1 didUpdateOffer:(id)arg2 forSectionAtIndex:(long long)arg3;
- (void)completionQueryDataSource:(id)arg1 didRemoveOfferForSectionAtIndex:(long long)arg2;
- (void)completionQueryDataSource:(id)arg1 didLoadOffer:(id)arg2 forSectionAtIndex:(long long)arg3;
- (id)tableView:(id)arg1 viewForFooterInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForFooterInSection:(long long)arg2;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (void)contentSizeCategoryDidChange;
- (id)_createTableView;
@property(readonly, nonatomic) MPUCompletionQueryDataSource *completionDataSource;
- (void)setDataSource:(id)arg1;
- (void)reloadData;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)downloadManager:(id)arg1 downloadDidFinish:(id)arg2;
- (void)downloadManager:(id)arg1 didAddDownloads:(id)arg2 removeDownloads:(id)arg3;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPHCZAlbumTableViewController : MusicAlbumsDetailViewController <MPTransportControlsTarget, UIGestureRecognizerDelegate>
{
    MPUCoverZoomViewController *_coverZoomViewController;
    UIPinchGestureRecognizer *_pinchGestureRecognizer;
    UIView *_tapView;
    MPTransportControls *_transportControlsView;
}

+ (Class)_albumsDetailTableHeaderViewClass;
+ (_Bool)_supportsSearch;
@property(nonatomic) __weak MPUCoverZoomViewController *coverZoomViewController; // @synthesize coverZoomViewController=_coverZoomViewController;
- (void).cxx_destruct;
- (void)_itemDidChangeNotification:(id)arg1;
- (void)_tapAction:(id)arg1;
- (void)_pinchAction:(id)arg1;
- (_Bool)transportControls:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (id)tableView:(id)arg1 viewForFooterInSection:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayFooterView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayHeaderView:(id)arg2 forSection:(long long)arg3;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)_createTableViewBackgroundView;
- (id)_createTableView;
- (void)reloadData;
- (void)viewDidLayoutSubviews;
- (void)loadView;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1;
- (id)initWithEntity:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicCellConfiguration : MPUCellConfiguration
{
}

+ (long long)tableViewSeparatorStyle;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (id)tableViewSeparatorColor;

@end

@interface MusicMediaCellConfiguration : MusicCellConfiguration
{
}

+ (_Bool)mediaCellConfigurationUsesSubtitle;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (double)tableViewCellHeight;
+ (Class)tableViewCellClass;
+ (id)tableViewCellBackgroundColor;
+ (id)tableViewBackgroundColor;
+ (void)configureCellForSizing:(id)arg1;

@end

@interface MusicSongCellConfiguration : MusicMediaCellConfiguration
{
}

+ (Class)tableViewCellClass;
+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;
+ (void)configureDownloadStatusForCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicAlbumTracksCellConfiguration : MusicSongCellConfiguration
{
}

+ (struct CGSize)sizeForDuration:(double)arg1;
+ (double)cloudRightInsetForDurationWidth:(double)arg1;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (Class)tableViewCellClass;
+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MPHCZAlbumTracksCellConfiguration : MusicAlbumTracksCellConfiguration
{
}

+ (id)tableViewCellBackgroundColor;
+ (id)tableViewBackgroundColor;

@end

@interface MPHCZTransportControls : MPTransportControls
{
}

- (void)layoutSubviews;
- (void)reloadForAdditions:(id)arg1 removals:(id)arg2 animate:(_Bool)arg3;
- (id)newVolumeSlider;
- (id)newButtonForPart:(unsigned long long)arg1;
- (id)buttonImageForPart:(unsigned long long)arg1;

@end

@interface MPHRootViewController : UIViewController <MPUCoverZoomViewControllerDelegate>
{
    _Bool _canShowCoverZoom;
    MPUCoverZoomViewController *_coverZoomViewController;
    _Bool _isCoverZoomVisible;
    _Bool _mediaLibrarySupportsCoverZoom;
    long long _statusBarOrientation;
    MusicTabBarController *_tabBarController;
}

- (void).cxx_destruct;
- (_Bool)_updateCanShowCoverZoom;
- (_Bool)_updateMediaLibrarySupportsCoverZoom;
- (void)_updateCoverFlowWithTraitCollection:(id)arg1 animated:(_Bool)arg2;
- (_Bool)_shouldShowCoverZoomWithTraitCollection:(id)arg1;
- (void)_layoutCoverZoomView;
- (id)_coverZoomViewController;
- (_Bool)_canShowCoverZoom;
- (void)_updateInProgressDidChangeNotification:(id)arg1;
- (void)_mediaLibraryDidChangeNotification:(id)arg1;
- (void)_applicationWillChangeStatusBarOrientationNotification:(id)arg1;
- (void)_updateCoverFlow;
- (id)detailViewControllerForEntity:(id)arg1;
- (void)willTransitionToTraitCollection:(id)arg1 withTransitionCoordinator:(id)arg2;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutomaticallyForwardAppearanceMethods;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (id)childViewControllerForStatusBarHidden;
- (id)childViewControllerForStatusBarStyle;
- (void)dealloc;
- (id)initWithTabBarController:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPMediaEntity (MusicAdditions)
@property(readonly, nonatomic) _Bool hasDeletableContent;
@end

@interface MPMediaItemCollection (MusicAdditions)
- (_Bool)hasDeletableContent;
@end

@interface MPMediaLibrary (MusicAdditions)
- (long long)music_compareMediaLibrary:(id)arg1;
@end

@interface MPMediaPlaylist (MusicAdditions)
+ (id)activeGeniusPlaylist;
- (void)generateGeniusArtworkWithImageSize:(struct CGSize)arg1 completionHandler:(CDUnknownBlockType)arg2 queue:(id)arg3;
@property(readonly, nonatomic, getter=music_seedItem) MPMediaItem *music_seedItem;
@end

@interface MPMediaPlaylist (MusicPlaylistDataSourceAdditions)
- (long long)_sortPlaylistByName:(id)arg1;
@end

@interface MPMediaQuery (MusicAdditions)
+ (id)musicQueryWithFilterPredicates:(id)arg1;
- (id)_music_nowPlayingComparableQuery;
- (void)music_getListingCountFormatString:(id *)arg1 isFallbackFormatString:(_Bool *)arg2;
@property(readonly, nonatomic, getter=music_playlistTitle) NSString *music_playlistTitle;
@property(readonly, nonatomic, getter=music_playlist) MPMediaPlaylist *music_playlist;
- (_Bool)music_isEqualToNowPlayingQuery:(id)arg1;
@end

@interface MusicAVPlayer : RURadioAVPlayer
{
}

+ (id)sharedAVPlayer;
- (void)_endPlaybackIfNeededForCurrentNetwork;
- (void)seekPlaylist:(int)arg1;
- (void)seekAlbum:(int)arg1;
- (void)beginOrTogglePlayback;
- (void)beginPlayback;
- (void)_networkTypeDidChangeNotification:(id)arg1;
- (void)_musicPlayer_defaultsDidChangeNotification:(id)arg1;
- (void)_matchCellularRestrictedDidChangeNotification:(id)arg1;
- (void)_downloadCancelledNotification:(id)arg1;
- (_Bool)_shouldSwitchToAudioPlaybackWhenTransitioningFromVideo;
- (id)_expectedAssetTypesForPlaybackMode:(int)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicActionCellConfiguration : MPUActionCellConfiguration
{
}

+ (void)configureCellForSizing:(id)arg1;
+ (long long)tableViewSeparatorStyle;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (id)tableViewSeparatorColor;
+ (Class)tableViewCellClass;

@end

@interface MusicTableViewCell : UITableViewCell
{
    MusicTableViewCellContentView *_cellContentView;
    double _maximumContentViewHeight;
}

+ (Class)contentViewClass;
@property(nonatomic) double maximumContentViewHeight; // @synthesize maximumContentViewHeight=_maximumContentViewHeight;
@property(readonly, nonatomic) MusicTableViewCellContentView *cellContentView; // @synthesize cellContentView=_cellContentView;
- (void).cxx_destruct;
- (void)prepareForReuse;
- (void)layoutSubviews;
- (struct UIEdgeInsets)layoutMargins;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicActionTableViewCell : MusicTableViewCell
{
}

+ (Class)contentViewClass;
- (id)_actionCellContentView;
@property(copy, nonatomic) NSString *title;
@property(nonatomic) struct UIOffset imageOffset;
@property(retain, nonatomic) UIImage *image;
@property(nonatomic, getter=isDisplayingAsDisabled) _Bool displayAsDisabled;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicTableViewCellContentView : UIView
{
}

- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicActionTableViewCellContentView : MusicTableViewCellContentView
{
    _Bool _displayAsDisabled;
    UIImageView *_imageView;
    UILabel *_titleLabel;
    struct UIOffset _imageOffset;
}

@property(readonly, nonatomic) UILabel *titleLabel; // @synthesize titleLabel=_titleLabel;
@property(readonly, nonatomic) UIImageView *imageView; // @synthesize imageView=_imageView;
@property(nonatomic) struct UIOffset imageOffset; // @synthesize imageOffset=_imageOffset;
@property(nonatomic, getter=isDisplayingAsDisabled) _Bool displayAsDisabled; // @synthesize displayAsDisabled=_displayAsDisabled;
- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
@property(copy, nonatomic) NSString *title;
@property(retain, nonatomic) UIImage *image;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicAddAllCellConfiguration : MusicActionCellConfiguration
{
}

+ (void)performActionForCell:(id)arg1 withViewController:(id)arg2;
+ (Class)tableViewCellClass;
+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicAddAllTableViewCell : MusicActionTableViewCell
{
}

- (void)setSectionLocation:(int)arg1 animated:(_Bool)arg2;
- (void)setDisplayAsDisabled:(_Bool)arg1;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicAddPlaylistActionCellConfiguration : MusicActionCellConfiguration
{
}

+ (id)reuseIdentifier;
+ (void)performActionForCell:(id)arg1 withViewController:(id)arg2;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicStandardMediaCellConfiguration : MusicMediaCellConfiguration
{
}

+ (Class)tableViewCellClass;

@end

@interface MusicAlbumCellConfiguration : MusicStandardMediaCellConfiguration
{
}

+ (id)mediaEntityPropertiesToFetch;
+ (_Bool)mediaCellConfigurationUsesSubtitle;
+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicQueryDataSource : MPUCompletionQueryDataSource
{
}

- (id)_queryForNowPlayingComparisonAtIndex:(unsigned long long)arg1;
- (void)_defaultsDidChangeNotification:(id)arg1;
- (_Bool)_updateQueryPredicatesAndOrdering;
- (_Bool)queryIsNowPlayingAtIndex:(unsigned long long)arg1;
- (id)playbackContextForIndex:(unsigned long long)arg1;
- (_Bool)entityIsNowPlayingAtIndex:(unsigned long long)arg1;
- (id)entityCountFormat;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicAlbumsDataSource : MusicQueryDataSource
{
}

- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;

@end

@interface MusicAlbumsViewController : MusicTableViewController
{
}

+ (long long)containerItemType;
- (id)_viewControllerForSelectedMediaEntity:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;

@end

@interface MusicArtistAlbumsDataSource : MusicQueryDataSource
{
    NSArray *_sectionEntities;
    NSMutableDictionary *_sectionRanges;
}

- (void).cxx_destruct;
- (void)_invalidateCalculatedEntities;
- (_Bool)usesSections;
- (_Bool)showsIndexBar;
- (void)removeOverlayCompletionForSectionAtIndex:(unsigned long long)arg1;
- (void)overlayCompletionForSectionAtIndex:(unsigned long long)arg1;
- (struct _NSRange)rangeOfSectionAtIndex:(unsigned long long)arg1;
- (_Bool)shouldShowCompletions;
- (unsigned long long)numberOfSections;
- (id)sectionEntities;
- (id)entities;

@end

@interface MusicArtistCellConfiguration : MusicStandardMediaCellConfiguration
{
}

+ (void)_appDefaultsDidChangeNotification:(id)arg1;
+ (id)unknownTitleText;
+ (id)titleProperty;
+ (id)representativeItemTitleProperty;
+ (id)representativeItemPersistentIDProperty;
+ (id)mediaEntityPropertiesToFetch;
+ (id)persistentIDProperty;
+ (id)itemPersistentIDProperty;
+ (long long)groupingType;
+ (id)collectionPropertiesToFetch;
+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicShuffleActionCellConfiguration : MusicActionCellConfiguration
{
}

+ (id)reuseIdentifier;
+ (void)performActionForCell:(id)arg1 withViewController:(id)arg2;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicArtistShuffleActionCellConfiguration : MusicShuffleActionCellConfiguration
{
}

+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicArtistsDataSource : MusicQueryDataSource
{
}

- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;
- (_Bool)entityIsNowPlayingAtIndex:(unsigned long long)arg1;

@end

@interface MusicArtistsViewController : MusicTableViewController
{
    _Bool _allowsActions;
}

+ (id)persistentIDProperty;
+ (id)itemPersistentIDProperty;
+ (long long)groupingType;
+ (long long)containerItemType;
+ (id)actionCellConfigurationClasses;
@property(nonatomic) _Bool allowsActions; // @synthesize allowsActions=_allowsActions;
- (id)_viewControllerForSelectedMediaEntity:(id)arg1;
- (void)defaultsDidChange;
- (void)_appDefaultsDidChangeNotification:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1 cellConfigurationClass:(Class)arg2;

@end

@interface MusicArtworkTiler : NSObject
{
    NSObject<OS_dispatch_queue> *_callbackQueue;
    UIImage *_placeholderImage;
    NSString *_cacheIdentifier;
    id _context;
    struct CGSize _imageSize;
}

@property(nonatomic) struct CGSize imageSize; // @synthesize imageSize=_imageSize;
@property(nonatomic) __weak id context; // @synthesize context=_context;
@property(copy, nonatomic) NSString *cacheIdentifier; // @synthesize cacheIdentifier=_cacheIdentifier;
@property(retain, nonatomic) UIImage *placeholderImage; // @synthesize placeholderImage=_placeholderImage;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
- (void).cxx_destruct;
- (void)requestTiledArtworkForPlaylist:(id)arg1 tileCount:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)requestTiledArtworkForCatalogs:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface MusicMediaTableViewCell : MusicTableViewCell
{
    MusicMediaOfferButtonState *_offerButtonState;
}

+ (struct CGSize)artworkSize;
+ (Class)contentViewClass;
@property(retain, nonatomic) MusicMediaOfferButtonState *offerButtonState; // @synthesize offerButtonState=_offerButtonState;
- (void).cxx_destruct;
- (id)_mediaCellContentView;
@property(copy, nonatomic) NSString *titleText;
@property(copy, nonatomic) MPUEmphasizedText *titleEmphasizedText;
@property(copy, nonatomic) NSString *subtitleText;
@property(copy, nonatomic) MPUEmphasizedText *subtitleEmphasizedText;
@property(nonatomic) _Bool showsArtworkImage;
@property(retain, nonatomic) UIImage *rightAccessoryImage;
@property(retain, nonatomic) UIImage *rightAccessoryHighlightedImage;
@property(nonatomic) long long playbackState;
@property(copy, nonatomic) NSString *placeholderTitleText;
@property(copy, nonatomic) NSString *placeholderSubtitleText;
- (void)setOfferButtonState:(id)arg1 animated:(_Bool)arg2;
@property(copy, nonatomic) CDUnknownBlockType offerButtonActionHandler;
@property(nonatomic, getter=isExplicitTrack) _Bool explicitTrack;
@property(nonatomic, getter=isDisplayingAsDisabled) _Bool displayAsDisabled;
@property(copy, nonatomic) NSString *detailText;
@property(copy, nonatomic) MPUEmphasizedText *detailEmphasizedText;
@property(nonatomic) struct UIEdgeInsets contentBoundsEdgeInsets;
- (void)setArtworkImage:(id)arg1 animated:(_Bool)arg2;
@property(retain, nonatomic) UIImage *artworkImage;
- (_Bool)isEditing;
- (void)setSelected:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setHighlighted:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setEditing:(_Bool)arg1 animated:(_Bool)arg2;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicStandardMediaTableViewCell : MusicMediaTableViewCell
{
}

+ (Class)contentViewClass;

@end

@interface MusicPartialPlaybackTableViewCell : MusicStandardMediaTableViewCell
{
}

+ (Class)contentViewClass;
- (id)_partialPlaybackCellContentView;
@property(retain, nonatomic) UIImage *unplayedIndicatorImage;
@property(retain, nonatomic) UIImage *unplayedIndicatorHighlightedImage;

@end

@interface MusicAudiobookTableViewCell : MusicPartialPlaybackTableViewCell
{
}

+ (Class)contentViewClass;

@end

@interface MusicMediaTableViewCellContentView : MusicTableViewCellContentView <SKUIItemOfferButtonDelegate>
{
    _Bool _needsContentReload;
    _Bool _showsArtworkImage;
    _Bool _displayAsDisabled;
    _Bool _explicitTrack;
    _Bool _editing;
    _Bool _highlighted;
    _Bool _selected;
    UIImage *_artworkImage;
    NSString *_placeholderSubtitleText;
    NSString *_placeholderTitleText;
    MPUEmphasizedText *_detailEmphasizedText;
    CDUnknownBlockType _offerButtonActionHandler;
    MusicMediaOfferButtonState *_offerButtonState;
    long long _playbackState;
    UIImage *_rightAccessoryHighlightedImage;
    UIImage *_rightAccessoryImage;
    MPUEmphasizedText *_subtitleEmphasizedText;
    MPUEmphasizedText *_titleEmphasizedText;
    MPUSlantedTextPlaceholderArtworkView *_artworkView;
    UILabel *_detailLabel;
    MPUItemOfferButton *_itemOfferButton;
    MusicNowPlayingIndicatorView *_nowPlayingIndicatorView;
    UIImageView *_rightAccessoryImageView;
    UILabel *_subtitleLabel;
    UILabel *_titleLabel;
    struct UIEdgeInsets _contentBoundsEdgeInsets;
}

+ (void)contentSizeCategoryDidChange;
+ (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
+ (struct CGSize)artworkSize;
+ (void)initialize;
@property(retain, nonatomic) UILabel *titleLabel; // @synthesize titleLabel=_titleLabel;
@property(retain, nonatomic) UILabel *subtitleLabel; // @synthesize subtitleLabel=_subtitleLabel;
@property(retain, nonatomic) UIImageView *rightAccessoryImageView; // @synthesize rightAccessoryImageView=_rightAccessoryImageView;
@property(retain, nonatomic) MusicNowPlayingIndicatorView *nowPlayingIndicatorView; // @synthesize nowPlayingIndicatorView=_nowPlayingIndicatorView;
@property(retain, nonatomic) MPUItemOfferButton *itemOfferButton; // @synthesize itemOfferButton=_itemOfferButton;
@property(retain, nonatomic) UILabel *detailLabel; // @synthesize detailLabel=_detailLabel;
@property(retain, nonatomic) MPUSlantedTextPlaceholderArtworkView *artworkView; // @synthesize artworkView=_artworkView;
@property(copy, nonatomic) MPUEmphasizedText *titleEmphasizedText; // @synthesize titleEmphasizedText=_titleEmphasizedText;
@property(copy, nonatomic) MPUEmphasizedText *subtitleEmphasizedText; // @synthesize subtitleEmphasizedText=_subtitleEmphasizedText;
@property(retain, nonatomic) UIImage *rightAccessoryImage; // @synthesize rightAccessoryImage=_rightAccessoryImage;
@property(retain, nonatomic) UIImage *rightAccessoryHighlightedImage; // @synthesize rightAccessoryHighlightedImage=_rightAccessoryHighlightedImage;
@property(nonatomic) long long playbackState; // @synthesize playbackState=_playbackState;
@property(retain, nonatomic) MusicMediaOfferButtonState *offerButtonState; // @synthesize offerButtonState=_offerButtonState;
@property(copy, nonatomic) CDUnknownBlockType offerButtonActionHandler; // @synthesize offerButtonActionHandler=_offerButtonActionHandler;
@property(nonatomic, getter=isSelected) _Bool selected; // @synthesize selected=_selected;
@property(nonatomic, getter=isHighlighted) _Bool highlighted; // @synthesize highlighted=_highlighted;
@property(nonatomic, getter=isEditing) _Bool editing; // @synthesize editing=_editing;
@property(nonatomic, getter=isExplicitTrack) _Bool explicitTrack; // @synthesize explicitTrack=_explicitTrack;
@property(nonatomic, getter=isDisplayingAsDisabled) _Bool displayAsDisabled; // @synthesize displayAsDisabled=_displayAsDisabled;
@property(copy, nonatomic) MPUEmphasizedText *detailEmphasizedText; // @synthesize detailEmphasizedText=_detailEmphasizedText;
@property(nonatomic) struct UIEdgeInsets contentBoundsEdgeInsets; // @synthesize contentBoundsEdgeInsets=_contentBoundsEdgeInsets;
@property(copy, nonatomic) NSString *placeholderTitleText; // @synthesize placeholderTitleText=_placeholderTitleText;
@property(copy, nonatomic) NSString *placeholderSubtitleText; // @synthesize placeholderSubtitleText=_placeholderSubtitleText;
@property(nonatomic) _Bool showsArtworkImage; // @synthesize showsArtworkImage=_showsArtworkImage;
@property(retain, nonatomic) UIImage *artworkImage; // @synthesize artworkImage=_artworkImage;
- (void).cxx_destruct;
- (void)_updateItemOfferButtonAnimated:(_Bool)arg1;
- (void)_reloadRightAccessoryImageView;
- (_Bool)updateLabelFonts;
- (_Bool)updateAttributedTextForLabel:(id)arg1;
- (void)setNeedsContentReload;
- (void)reloadContent;
- (void)contentSizeCategoryDidChange;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_itemOfferButtonCancelConfirmationAction:(id)arg1;
- (void)_itemOfferButtonShowConfirmationAction:(id)arg1;
- (void)_itemOfferButtonAction:(id)arg1;
- (void)setSelected:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setOfferButtonState:(id)arg1 animated:(_Bool)arg2;
- (void)setHighlighted:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setEditing:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setArtworkImage:(id)arg1 animated:(_Bool)arg2;
- (void)itemOfferButtonWillAnimateTransition:(id)arg1;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicStandardMediaTableViewCellContentView : MusicMediaTableViewCellContentView
{
}

+ (id)_titleRegularTextAttributes;
+ (id)_subtitleRegularTextAttributes;
+ (id)titleRegularTextAttributes;
+ (double)textLeadingDistance;
+ (double)textLeadingDistanceFromArtwork;
+ (id)titleEmphasizedTextAttributes;
+ (id)subtitleRegularTextAttributes;
+ (id)subtitleEmphasizedTextAttributes;
+ (double)interLabelLeading;
+ (id)detailRegularTextAttributes;
+ (id)detailEmphasizedTextAttributes;
+ (void)contentSizeCategoryDidChange;
+ (struct CGSize)artworkSize;
@property(readonly, nonatomic) long long titleLabelNumberOfLines;
@property(readonly, nonatomic) double rightContentInset;
@property(readonly, copy, nonatomic) NSArray *rightAccessoryViews;
- (void)reloadContent;
- (void)setDisplayAsDisabled:(_Bool)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;

@end

@interface MusicPartialPlaybackTableViewCellContentView : MusicStandardMediaTableViewCellContentView
{
    UIImage *_tintedUnplayedIndicatorImage;
    UIImageView *_unplayedIndicatorImageView;
    UIImage *_unplayedIndicatorHighlightedImage;
    UIImage *_unplayedIndicatorImage;
}

+ (double)textLeadingDistanceFromArtwork;
@property(retain, nonatomic) UIImage *unplayedIndicatorImage; // @synthesize unplayedIndicatorImage=_unplayedIndicatorImage;
@property(retain, nonatomic) UIImage *unplayedIndicatorHighlightedImage; // @synthesize unplayedIndicatorHighlightedImage=_unplayedIndicatorHighlightedImage;
- (void).cxx_destruct;
- (void)_reloadUnplayedIndicatorImageView;
- (id)_effectiveTintedUnplayedIndicatorImage;
- (void)tintColorDidChange;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface MusicAudiobookTableViewCellContentView : MusicPartialPlaybackTableViewCellContentView
{
}

+ (struct CGSize)artworkSize;

@end

@interface MusicPartialPlaybackCellConfiguration : MusicStandardMediaCellConfiguration
{
}

+ (Class)tableViewCellClass;

@end

@interface MusicAudiobookTrackCellConfiguration : MusicPartialPlaybackCellConfiguration
{
}

+ (_Bool)mediaCellConfigurationUsesSubtitle;
+ (Class)tableViewCellClass;
+ (id)reuseIdentifier;
+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicAudiobookTracksDataSource : MusicQueryDataSource
{
}

- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicPodcastCellConfiguration : MusicStandardMediaCellConfiguration
{
}

+ (id)mediaEntityPropertiesToFetch;
+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicAudiobooksCellConfiguration : MusicPodcastCellConfiguration
{
}

+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicQueryPlaybackContext : MPQueryPlaybackContext
{
}

+ (Class)queueFeederClass;

@end

@interface MusicCloudGeniusMixPlaybackContext : MusicQueryPlaybackContext <MusicGeniusMixQueueFeederDataSource>
{
    MPMediaQueryShuffledItems *_items;
    MPMediaPlaylist *_mixPlaylist;
    MPMediaItem *_requiredInitialMediaItem;
}

+ (Class)queueFeederClass;
@property(retain, nonatomic) MPMediaItem *requiredInitialMediaItem; // @synthesize requiredInitialMediaItem=_requiredInitialMediaItem;
@property(readonly, nonatomic) MPMediaPlaylist *mixPlaylist; // @synthesize mixPlaylist=_mixPlaylist;
- (void).cxx_destruct;
- (unsigned long long)geniusMixQueueFeeder:(id)arg1 indexOfMediaItem:(id)arg2;
- (id)geniusMixQueueFeeder:(id)arg1 queryForMediaItemAtIndex:(unsigned long long)arg2;
- (id)geniusMixQueueFeeder:(id)arg1 mediaItemAtIndex:(unsigned long long)arg2;
- (unsigned long long)geniusMixQueueFeederMediaItemCount:(id)arg1;
- (id)initWithGeniusMixPlaylist:(id)arg1 requiredInitialMediaItem:(id)arg2 error:(id *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicCloudLoadingView : UIView
{
    UILabel *_titleLabel;
    UIProgressView *_progressView;
    NSObject<OS_dispatch_source> *_updateTimerSource;
}

- (void).cxx_destruct;
- (void)_updateCloudProgressAnimated:(_Bool)arg1;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicCollectionTrackTableViewCell : MusicMediaTableViewCell
{
}

+ (struct CGSize)sizeForDuration:(double)arg1;
+ (Class)contentViewClass;
- (id)_collectionTrackContentView;
@property(copy, nonatomic) NSString *trackNumberText;
@property(nonatomic) double maximumDurationWidth;
@property(copy, nonatomic) NSString *durationText;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicCollectionTrackTableViewCellContentView : MusicStandardMediaTableViewCellContentView
{
    UILabel *_trackNumberLabel;
    double _maximumDurationWidth;
    NSString *_trackNumberText;
}

+ (id)trackNumberTextAttributes;
+ (id)titleTextAttributes;
+ (id)subtitleTextAttributes;
+ (struct CGSize)sizeForDuration:(double)arg1;
+ (id)durationTextAttributes;
+ (void)contentSizeCategoryDidChange;
+ (struct CGSize)artworkSize;
@property(copy, nonatomic) NSString *trackNumberText; // @synthesize trackNumberText=_trackNumberText;
@property(nonatomic) double maximumDurationWidth; // @synthesize maximumDurationWidth=_maximumDurationWidth;
- (void).cxx_destruct;
- (_Bool)updateLabelFonts;
- (void)reloadContent;
- (void)setPlaybackState:(long long)arg1;
- (void)setDisplayAsDisabled:(_Bool)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface MusicCompilationCellConfiguration : MusicAlbumCellConfiguration
{
}

+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicCompilationsDataSource : MusicQueryDataSource
{
}

- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;

@end

@interface MusicCompilationsViewController : MusicAlbumsViewController
{
}

+ (long long)containerItemType;

@end

@interface MusicCompletionFooterView : MPUCompletionFooterView
{
}

- (id)initWithReuseIdentifier:(id)arg1;

@end

@interface MusicComposerCellConfiguration : MusicArtistCellConfiguration
{
}

+ (id)unknownTitleText;
+ (id)titleProperty;
+ (id)representativeItemTitleProperty;
+ (id)representativeItemPersistentIDProperty;
+ (id)mediaEntityPropertiesToFetch;
+ (id)persistentIDProperty;
+ (id)itemPersistentIDProperty;

@end

@interface MusicComposersDataSource : MusicQueryDataSource
{
}

- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;

@end

@interface MusicComposersViewController : MusicArtistsViewController
{
}

+ (id)persistentIDProperty;
+ (id)itemPersistentIDProperty;
+ (long long)containerItemType;
- (void)defaultsDidChange;

@end

@interface MusicDefaults : MPUApplicationDefaults
{
}

+ (id)sharedDefaults;
- (void)migrateTabBarOrderingIfNeeded;
- (void)ensureInvertedDefaultPlaybackSpeedHackIsInPlace;
- (void)beginObservingDefaultsChanges;
@property(nonatomic, getter=isGeniusUserEnabled) _Bool geniusUserEnabled;
@property(copy, nonatomic) NSArray *tabBarOrdering;
@property(nonatomic) unsigned long long shuffleType;
@property(nonatomic) unsigned long long repeatType;
@property(nonatomic) unsigned long long playbackSpeed;
@property(readonly, nonatomic, getter=isSoundCheckEnabled) _Bool soundCheckEnabled;
@property(readonly, nonatomic, getter=isSortByArtistEnabled) _Bool sortByArtistEnabled;
@property(readonly, nonatomic, getter=isShowCloudMediaEnabled) _Bool showCloudMediaEnabled;
@property(readonly, nonatomic, getter=isShakeToShuffleEnabled) _Bool shakeToShuffleEnabled;
@property(readonly, nonatomic, getter=isPinningEnabled) _Bool pinningEnabled;
@property(readonly, nonatomic, getter=isGroupByAlbumArtistEnabled) _Bool groupByAlbumArtistEnabled;
@property(readonly, nonatomic, getter=isActivityContinuationEnabled) _Bool activityContinuationEnabled;
@property(readonly, nonatomic) int eqPreset;
@property(readonly, nonatomic, getter=areLyricsAndPodcastInfoEnabled) _Bool lyricsAndPodcastInfoEnabled;
@property(nonatomic) _Bool lastEffectiveRadioExplicitTracksEnabled;

@end

@interface MusicDownloadAllCellConfiguration : MusicActionCellConfiguration
{
}

+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (Class)tableViewCellClass;
+ (void)configureCellForSizing:(id)arg1;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicDownloadAllArtistCellConfiguration : MusicDownloadAllCellConfiguration
{
}

+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicDownloadAllTableViewCell : MusicTableViewCell
{
    _Bool _downloadAllCellForArtist;
}

+ (Class)contentViewClass;
@property(nonatomic, getter=isDownloadAllCellForArtist) _Bool downloadAllCellForArtist; // @synthesize downloadAllCellForArtist=_downloadAllCellForArtist;
- (id)_downloadAllCellContentView;
@property(nonatomic) long long downloadableSongCount;
- (void)setSectionLocation:(int)arg1 animated:(_Bool)arg2;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicDownloadAllTableViewCellContentView : MusicTableViewCellContentView <SKUIItemOfferButtonDelegate>
{
    SKUIItemOfferButton *_itemOfferButton;
    UILabel *_titleLabel;
    _Bool _downloadAllCellForArtist;
    long long _downloadableSongCount;
}

@property(nonatomic, getter=isDownloadAllCellForArtist) _Bool downloadAllCellForArtist; // @synthesize downloadAllCellForArtist=_downloadAllCellForArtist;
@property(nonatomic) long long downloadableSongCount; // @synthesize downloadableSongCount=_downloadableSongCount;
- (void).cxx_destruct;
- (void)_updateDownloadStateViews;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_itemOfferButtonAction:(id)arg1 withEvent:(id)arg2;
- (void)itemOfferButtonWillAnimateTransition:(id)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicFlipsideAlbumDataSource : MusicArtistAlbumsDataSource
{
}

- (_Bool)entityIsNowPlayingAtIndex:(unsigned long long)arg1;

@end

@interface MusicFlipsideAlbumDetailHeaderView : UITableViewHeaderFooterView
{
    UIImageView *_artworkImageView;
    UIView *_hairlineView;
    MPUItemOfferButton *_itemOfferButton;
    UILabel *_artistLabel;
    UILabel *_albumLabel;
    UILabel *_songLabel;
    UILabel *_durationLabel;
    UILabel *_copyrightYearLabel;
    UIView *_topCellSeparatorView;
    double _cloudRightInset;
    CDUnknownBlockType _downloadActionBlock;
    long long _songCount;
    double _totalDuration;
    NSString *_copyright;
    NSString *_year;
}

+ (struct CGSize)artworkSize;
@property(readonly, copy, nonatomic) NSString *year; // @synthesize year=_year;
@property(readonly, copy, nonatomic) NSString *copyright; // @synthesize copyright=_copyright;
@property(nonatomic) double totalDuration; // @synthesize totalDuration=_totalDuration;
@property(nonatomic) long long songCount; // @synthesize songCount=_songCount;
@property(copy, nonatomic) CDUnknownBlockType downloadActionBlock; // @synthesize downloadActionBlock=_downloadActionBlock;
@property(nonatomic) double cloudRightInset; // @synthesize cloudRightInset=_cloudRightInset;
- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_itemOfferButtonAction:(id)arg1;
- (void)setCopyright:(id)arg1 year:(id)arg2;
@property(copy, nonatomic) NSString *album;
@property(copy, nonatomic) NSString *artist;
- (void)setBackgroundTransitionProgress:(double)arg1;
@property(nonatomic, getter=isDownloadable) _Bool downloadable;
@property(retain, nonatomic) UIImage *artworkImage;
- (double)backgroundTransitionProgress;
- (void)setTableViewStyle:(long long)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicFlipsideAlbumDetailViewController : MusicAlbumsDetailViewController <MusicFlipsideRating, MPURatingControlDelegate>
{
    id <MPURatingControlDelegate> _ratingDelegate;
    NSIndexPath *_ratingItemIndexPath;
}

+ (_Bool)shouldShowCMC;
+ (_Bool)_supportsSearch;
+ (_Bool)shouldPushNowPlayingOnSelection;
- (void).cxx_destruct;
- (id)newHeaderView;
- (void)ratingDidChangeForRatingControl:(id)arg1;
@property(nonatomic) _Bool showingRating;
- (void)setShowingRating:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic) __weak id <MPURatingControlDelegate> ratingDelegate;
- (double)maximumDurationWidth;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didEndDisplayingCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 willDisplayFooterView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (void)_updateDownloadabilityStateWithCanReloadActionRowsSynchronously:(_Bool)arg1 animated:(_Bool)arg2;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (id)_createTableViewBackgroundView;
- (id)_createTableView;
- (void)viewDidLoad;
- (id)initWithDataSource:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicFlipsideAlbumTrackTableViewCell : MusicCollectionTrackTableViewCell
{
    _Bool _showsRatingControl;
    MPURatingControl *_ratingControl;
}

+ (Class)contentViewClass;
@property(nonatomic) _Bool showsRatingControl; // @synthesize showsRatingControl=_showsRatingControl;
@property(readonly, nonatomic) MPURatingControl *ratingControl; // @synthesize ratingControl=_ratingControl;
- (void).cxx_destruct;
- (void)setShowsRatingControl:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setContentBoundsEdgeInsets:(struct UIEdgeInsets)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicFlipsideAlbumTrackTableViewCellContentView : MusicCollectionTrackTableViewCellContentView
{
}

- (void)layoutSubviews;

@end

@interface MusicFlipsideAlbumTracksCellConfiguration : MusicAlbumTracksCellConfiguration
{
}

+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (Class)tableViewCellClass;

@end

@interface MusicPlaylistSongsDataSource : MusicQueryDataSource
{
    MPMediaLibrary *_mediaLibrary;
}

- (void).cxx_destruct;
- (_Bool)entityIsSeedItemAtIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) MPMediaPlaylist *playlist;
- (void)moveItemFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2;
- (void)deleteEntityAtIndex:(unsigned long long)arg1;
- (void)_mediaLibraryDynamicPropertiesDidChangeNotification:(id)arg1;
- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicFlipsidePlaylistDataSource : MusicPlaylistSongsDataSource
{
}

- (_Bool)showsEntityCountFooter;

@end

@interface MusicSongListTableViewCell : MusicStandardMediaTableViewCell
{
}

+ (Class)contentViewClass;

@end

@interface MusicFlipsidePlaylistTrackTableViewCell : MusicSongListTableViewCell
{
    _Bool _showsRatingControl;
    MPURatingControl *_ratingControl;
}

+ (struct CGSize)sizeForDuration:(double)arg1;
+ (Class)contentViewClass;
@property(readonly, nonatomic) MPURatingControl *ratingControl; // @synthesize ratingControl=_ratingControl;
@property(nonatomic) _Bool showsRatingControl; // @synthesize showsRatingControl=_showsRatingControl;
- (void).cxx_destruct;
- (id)_flipsidePlaylistTrackCellContentView;
@property(copy, nonatomic) NSString *trackNumberText;
@property(nonatomic) double maximumDurationWidth;
@property(copy, nonatomic) NSString *durationText;
- (void)setShowsRatingControl:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setContentBoundsEdgeInsets:(struct UIEdgeInsets)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicSongListTableViewCellContentView : MusicStandardMediaTableViewCellContentView
{
}

+ (id)_detailRegularTextAttributes;
+ (void)contentSizeCategoryDidChange;
+ (id)titleRegularTextAttributes;
+ (id)titleEmphasizedTextAttributes;
+ (id)subtitleRegularTextAttributes;
+ (id)detailEmphasizedTextAttributes;
+ (id)detailRegularTextAttributes;
+ (id)detailRegularGrayTextAttributes;
+ (struct CGSize)artworkSize;
- (id)subtitleDetailTextSeparatorString;
- (id)currentSubtitleAttributedText;
- (void)reloadContent;
- (void)setDisplayAsDisabled:(_Bool)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;

@end

@interface MusicFlipsidePlaylistTrackTableViewCellContentView : MusicSongListTableViewCellContentView
{
    UILabel *_durationLabel;
    UILabel *_trackNumberLabel;
    NSString *_durationText;
    double _maximumDurationWidth;
    NSString *_trackNumberText;
}

+ (id)trackNumberTextAttributes;
+ (struct CGSize)sizeForDuration:(double)arg1;
+ (id)durationTextAttributes;
+ (double)textLeadingDistance;
+ (void)contentSizeCategoryDidChange;
+ (struct CGSize)artworkSize;
@property(copy, nonatomic) NSString *trackNumberText; // @synthesize trackNumberText=_trackNumberText;
@property(nonatomic) double maximumDurationWidth; // @synthesize maximumDurationWidth=_maximumDurationWidth;
@property(copy, nonatomic) NSString *durationText; // @synthesize durationText=_durationText;
- (void).cxx_destruct;
- (double)rightContentInset;
- (id)rightAccessoryViews;
- (_Bool)updateLabelFonts;
- (void)reloadContent;
- (void)setPlaybackState:(long long)arg1;
- (void)setDisplayAsDisabled:(_Bool)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface MusicSongListCellConfiguration : MusicSongCellConfiguration
{
}

+ (_Bool)_showsArtwork;
+ (_Bool)mediaCellConfigurationUsesSubtitle;
+ (id)reuseIdentifier;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (Class)tableViewCellClass;
+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicPlaylistSongCellConfiguration : MusicSongListCellConfiguration
{
}

+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicFlipsidePlaylistTracksCellConfiguration : MusicPlaylistSongCellConfiguration
{
}

+ (struct CGSize)sizeForDuration:(double)arg1;
+ (double)cloudRightInsetForDurationWidth:(double)arg1;
+ (id)mediaEntityPropertiesToFetch;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (Class)tableViewCellClass;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicSongsViewController : MusicTableViewController
{
    _Bool _hasShuffleActionRow;
}

+ (id)actionCellConfigurationClasses;
+ (_Bool)shouldPushNowPlayingOnSelection;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;

@end

@interface MusicPlaylistSongsViewController : MusicSongsViewController <MusicPickerOverlayDelegate, UIActionSheetDelegate>
{
    MusicPlaylistActionsView *_actionsView;
    struct UIEdgeInsets _actionsViewContentInsetAdditions;
    UIActionSheet *_clearActionSheet;
    UIActionSheet *_deleteActionSheet;
    NSOperationQueue *_downloadabilityOperationQueue;
    _Bool _isTransitioning;
    _Bool _isDownloading;
    long long _downloadableSongCount;
}

+ (_Bool)_shouldDisplayActions;
+ (id)actionCellConfigurationClasses;
+ (_Bool)_supportsSearch;
+ (_Bool)_shouldPopWhenEmpty;
@property(readonly, nonatomic) _Bool isDownloading; // @synthesize isDownloading=_isDownloading;
@property(readonly, nonatomic) long long downloadableSongCount; // @synthesize downloadableSongCount=_downloadableSongCount;
- (void).cxx_destruct;
- (void)_updateCloudPlaylist;
- (void)_updateDownloadabilityStateWithCanReloadActionRowsSynchronously:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_updateActionsView;
- (id)_seedItem;
- (id)_playlistTitle;
- (id)_playlist;
- (_Bool)_allowsAddingSongs;
- (_Bool)_allowsEditing;
- (_Bool)_allowsIndividualTrackDeletion;
- (void)_playlistSongs_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_geniusSaveAction:(id)arg1;
- (void)_geniusRefreshAction:(id)arg1;
- (void)_geniusNewAction:(id)arg1;
- (void)_editAction:(id)arg1;
- (void)_downloadAllButtonAction:(id)arg1;
- (void)_doneEditingAction:(id)arg1;
- (void)_deleteAction:(id)arg1;
- (void)_clearAction:(id)arg1;
- (void)_addItemsAction:(id)arg1;
- (id)tableView:(id)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 editingStyleForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 moveRowAtIndexPath:(id)arg2 toIndexPath:(id)arg3;
- (void)tableView:(id)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(id)arg3;
- (_Bool)tableView:(id)arg1 canEditRowAtIndexPath:(id)arg2;
- (void)actionSheet:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)pickerOverlayDidFinish:(id)arg1;
- (void)pickerOverlayRequestsFinish:(id)arg1;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)downloadManager:(id)arg1 didAddDownloads:(id)arg2 removeDownloads:(id)arg3;
- (void)reloadData;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicFlipsidePlaylistViewController : MusicPlaylistSongsViewController <MusicFlipsideRating, MPURatingControlDelegate>
{
    id <MPURatingControlDelegate> _ratingDelegate;
    NSIndexPath *_ratingItemIndexPath;
    double _maximumDurationWidth;
}

+ (_Bool)_shouldDisplayActions;
+ (_Bool)_shouldShowActions;
+ (_Bool)shouldPushNowPlayingOnSelection;
- (void).cxx_destruct;
- (void)_flipsidePlaylist_contentSizeCategoryDidChangeNotification:(id)arg1;
@property(readonly, nonatomic) double maximumDurationWidth; // @synthesize maximumDurationWidth=_maximumDurationWidth;
- (void)ratingDidChangeForRatingControl:(id)arg1;
@property(nonatomic) _Bool showingRating;
- (void)setShowingRating:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic) __weak id <MPURatingControlDelegate> ratingDelegate;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didEndDisplayingCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)_updateDownloadabilityStateWithCanReloadActionRowsSynchronously:(_Bool)arg1 animated:(_Bool)arg2;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)reloadData;
- (id)_createTableViewBackgroundView;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1 cellConfigurationClass:(Class)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicSongsDataSource : MusicQueryDataSource
{
    unsigned long long _syncAssetTotal;
    int _syncAssetTotalToken;
    _Bool _syncAssetTotalTokenIsValid;
    int _syncCurrentAssetNumberToken;
    _Bool _syncCurrentAssetNumberTokenIsValid;
    unsigned long long _syncCurrentAssetNumber;
    NSString *_syncProgressString;
}

- (void).cxx_destruct;
- (void)_updateSyncProgressString;
- (_Bool)showsIndexBar;
- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicFlipsideTracksDataSource : MusicSongsDataSource
{
}

- (_Bool)entityIsNowPlayingAtIndex:(unsigned long long)arg1;

@end

@interface MusicFlipsideTracksViewController : UIViewController <MPURatingControlDelegate>
{
    MPMediaItem *_currentMediaItem;
    MPAVItem *_currentAVItem;
    UIView *_container;
    MusicFlipsideAlbumDetailHeaderView *_trackInfoView;
    UISegmentedControl *_segmentedControl;
    _Bool _showingRating;
    _Bool _hasPlaylist;
}

@property(nonatomic) _Bool hasPlaylist; // @synthesize hasPlaylist=_hasPlaylist;
- (void).cxx_destruct;
- (void)_itemDidChangeNotification:(id)arg1;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)ratingDidChangeForRatingControl:(id)arg1;
- (void)_updateMediaItem;
- (void)_selectedSegmentDidChange:(id)arg1;
- (void)_setShowingRating:(_Bool)arg1;
- (void)_performRating:(id)arg1;
- (void)_performDone:(id)arg1;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (id)contentScrollView;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicGeniusIndexedSubQuery : NSObject
{
    unsigned long long _index;
    MPMediaQuery *_itemsQuery;
}

@property(readonly, nonatomic) MPMediaQuery *itemsQuery; // @synthesize itemsQuery=_itemsQuery;
@property(readonly, nonatomic) unsigned long long index; // @synthesize index=_index;
- (void).cxx_destruct;
- (id)initWithIndex:(unsigned long long)arg1 itemsQuery:(id)arg2;

@end

@interface MusicGeniusMixPlaybackContext : MusicQueryPlaybackContext <MusicGeniusMixQueueFeederDataSource>
{
    NSMutableArray *_indexedSubQueries;
    _Bool _finite;
    MPMediaPlaylist *_mixPlaylist;
    MPMediaItem *_requiredInitialMediaItem;
}

+ (Class)queueFeederClass;
@property(retain, nonatomic) MPMediaItem *requiredInitialMediaItem; // @synthesize requiredInitialMediaItem=_requiredInitialMediaItem;
@property(readonly, nonatomic) MPMediaPlaylist *mixPlaylist; // @synthesize mixPlaylist=_mixPlaylist;
- (void).cxx_destruct;
- (void)_enumerateItemsBySubQueryUsingBlock:(CDUnknownBlockType)arg1;
- (id)_generateNewItemsQuery:(id *)arg1 index:(unsigned long long)arg2;
- (unsigned long long)_indexOfSubQueryWithSubQueryIndex:(unsigned long long)arg1 searchOptions:(unsigned long long)arg2;
- (id)_queryForMediaItemAtIndex:(unsigned long long)arg1;
- (unsigned long long)geniusMixQueueFeeder:(id)arg1 indexOfMediaItem:(id)arg2;
- (id)geniusMixQueueFeeder:(id)arg1 queryForMediaItemAtIndex:(unsigned long long)arg2;
- (id)geniusMixQueueFeeder:(id)arg1 mediaItemAtIndex:(unsigned long long)arg2;
- (unsigned long long)geniusMixQueueFeederMediaItemCount:(id)arg1;
- (id)query;
- (void)dealloc;
- (id)initWithGeniusMixPlaylist:(id)arg1 requiredInitialMediaItem:(id)arg2 error:(id *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicQueryQueueFeeder : MPMediaQueryQueueFeeder
{
}

- (unsigned long long)realShuffleType;
- (unsigned long long)realRepeatType;
- (id)playbackInfoAtIndex:(unsigned long long)arg1;
- (Class)itemClass;
- (id)errorResolverForItem:(id)arg1;
@property(retain, nonatomic) MPMediaPlaylist *mixPlaylist;

@end

@interface MusicGeniusMixQueueFeeder : MusicQueryQueueFeeder
{
    unsigned long long _currentPlaylistOffset;
    id <MusicGeniusMixQueueFeederDataSource> _dataSource;
}

@property(retain, nonatomic) id <MusicGeniusMixQueueFeederDataSource> dataSource; // @synthesize dataSource=_dataSource;
- (void).cxx_destruct;
- (_Bool)_configureWithMixPlaylist:(id)arg1 playbackContext:(id)arg2 startPlayback:(_Bool)arg3;
- (void)shuffleItemsWithAnchor:(unsigned long long *)arg1;
- (id)mediaItemAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfMediaItem:(id)arg1;
- (id)query;
- (_Bool)reloadWithDataSource:(id)arg1 keepPlayingCurrentItemIfPossible:(_Bool)arg2;
- (unsigned long long)shuffleType;
- (unsigned long long)realRepeatType;
- (_Bool)userCanChangeShuffleAndRepeatType;
- (id)localizedPositionInPlaylistString:(id)arg1;
- (id)localizedAttributedPositionInPlaylistStringForItem:(id)arg1 withRegularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3;
- (void)restoreAVControllerPlaybackQueue:(id)arg1 fromUnarchiver:(id)arg2;
- (void)archiveAVControllerPlaybackQueue:(id)arg1 toArchiver:(id)arg2;
- (id)pathAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfPaths;
- (unsigned long long)itemCount;

@end

@interface MusicGeniusMixesDataSource : MusicQueryDataSource
{
    NSMutableArray *_mixes;
}

- (void).cxx_destruct;
- (_Bool)_updateQueryPredicatesAndOrdering;
- (_Bool)showsIndexBar;
- (id)playbackContextForIndex:(unsigned long long)arg1;
- (void)_invalidateCalculatedEntities;
- (_Bool)isEmpty;
- (unsigned long long)indexOfEntity:(id)arg1;
- (_Bool)entityIsNowPlayingAtIndex:(unsigned long long)arg1;
- (id)entities;
- (long long)editingTypeForEntityAtIndex:(unsigned long long)arg1;
- (void)deleteEntityAtIndex:(unsigned long long)arg1;
- (_Bool)canSelectEntityAtIndex:(unsigned long long)arg1;

@end

@interface MusicGeniusMixesViewController : MPUDataSourceViewController <MPUMiniPlayerParticipant, UICollectionViewDataSource, UICollectionViewDelegate>
{
    UICollectionView *_collectionView;
    struct UIEdgeInsets _collectionViewContentInsetAdditions;
    _Bool _isVisible;
    UIPageControl *_pageControl;
    UIView *_pageControlSpacingView;
}

- (void).cxx_destruct;
- (void)_updatePageControlCurrentPage;
- (void)_updateNavigationPrompt;
- (void)_reloadPageControl;
- (struct CGSize)_itemSizeForCurrentSizeClass;
- (void)_configureForCurrentSizeClassAndReloadCollectionViewLayout:(_Bool)arg1;
- (void)_configureForBoundsChange;
- (id)_collectionViewLayoutForCurrentSizeClass;
- (void)_itemWillChangeNotification:(id)arg1;
- (void)_networkTypeDidChangeNotification:(id)arg1;
- (void)_defaultMediaLibraryDidChangeNotification:(id)arg1;
- (void)_pageControlAction:(id)arg1;
- (void)_cellPlayButtonAction:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (_Bool)collectionView:(id)arg1 shouldSelectItemAtIndexPath:(id)arg2;
- (_Bool)collectionView:(id)arg1 shouldHighlightItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (_Bool)MPU_beginPlaybackForVisibleContent;
- (void)reloadData;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (id)contentScrollView;
- (void)traitCollectionDidChange:(id)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidLayoutSubviews;
- (id)view;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicGeniusOptInViewController : UIViewController <MPTermsViewControllerDelegate>
{
    HSCloudClient *_cloudClient;
    long long _state;
    long long _geniusTermsVersion;
    _Bool _hasUpdateGeniusCompletionBlock;
    NSObject<OS_dispatch_source> *_updateStatusTimer;
    NSURL *_learnMoreURL;
    UIImageView *_geniusImageView;
    UIView *_widthConstrainingView;
    UIView *_bottomSpacerView;
    UILabel *_aboutGeniusLabel;
    UIButton *_geniusOptInButton;
    UILabel *_geniusLegalLabel;
    UIButton *_geniusLearnMoreButton;
    UILabel *_stepOneBulletLabel;
    UILabel *_stepOneDescriptionLabel;
    UILabel *_stepTwoBulletLabel;
    UILabel *_stepTwoDescriptionLabel;
    UILabel *_stepThreeBulletLabel;
    UILabel *_stepThreeDescriptionLabel;
    UILabel *_continueUsingMusicLabel;
    UIImageView *_stepOneCompleteImageView;
    UIImageView *_stepTwoCompleteImageView;
    UIImageView *_stepThreeCompleteImageView;
    MPUIndeterminateProgressIndicatorView *_indeterminateProgressIndicator;
    NSLayoutConstraint *_contentSizeHeightConstraint;
    MPUContentSizeLayoutConstraint *_updatingAboutGeniusLabelBaselineContraint;
    MPUContentSizeLayoutConstraint *_updatingGeniusOptInButtonBaselineContraint;
    NSLayoutConstraint *_updatingGeniusLegalLabelTopConstraint;
    MPUContentSizeLayoutConstraint *_updatingGeniusLearnMoreButtonBaselineContraint;
    NSLayoutConstraint *_updatingStepOneBulletLeadingToLeadingConstraint;
    NSLayoutConstraint *_updatingStepOneCompletedImageViewCenterYConstraint;
    MPUContentSizeLayoutConstraint *_updatingStepOneDescriptionLabelBaselineContraint;
    NSLayoutConstraint *_updatingStepTwoBulletLeadingToLeadingConstraint;
    NSLayoutConstraint *_updatingStepTwoCompletedImageViewCenterYConstraint;
    MPUContentSizeLayoutConstraint *_updatingStepTwoDescriptionLabelBaselineContraint;
    NSLayoutConstraint *_updatingStepThreeBulletLeadingToLeadingConstraint;
    NSLayoutConstraint *_updatingStepThreeCompletedImageViewCenterYConstraint;
    MPUContentSizeLayoutConstraint *_updatingStepThreeDescriptionLabelBaselineContraint;
    NSLayoutConstraint *_updatingContinueUsingMusicLabelTopConstraint;
    NSLayoutConstraint *_updatingIndeterminateProgressIndicatorWidthConstraint;
    MPUNotificationObserver *_preferredContentSizeDidChangeObserver;
    UIScrollView *_scrollView;
}

@property(retain, nonatomic) UIScrollView *scrollView; // @synthesize scrollView=_scrollView;
- (void).cxx_destruct;
- (void)_showErrorAlert;
- (void)_updateGeniusState;
- (CDUnknownBlockType)_completionBlock;
- (void)_ensureUpdateStatusTimerIsRunning;
- (void)_ensureCompletionHandlerIsAttached;
- (void)_enableGenius;
- (void)_optInToGenius;
- (id)_createHorizontalSpacerViewInView:(id)arg1;
- (id)_createVerticalSpacerViewInView:(id)arg1;
- (void)_prepareIndeterminateProgressIndicatorForUse;
- (void)_updateLearnMoreButtonState;
- (void)_updateViewsForCurrentState;
- (void)_updateViewConstraintsForGeniusEnabled;
- (void)_updateViewConstraintsForGeniusDisabled;
- (void)_prepareForEnabledViews;
- (void)_setupViewsForGeniusEnabledIfNeeded;
- (void)_prepareForDisabledViews;
- (void)_setupViewsForGeniusDisabledIfNeeded;
- (void)_updateConstraintsForContentSizeDidChangeNotification;
- (void)_animateToGeniusEnabledStateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)termsViewController:(id)arg1 acceptTermsAndConditions:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)termsViewController:(id)arg1 loadTermsAndConditionsWithCompletionHandler:(CDUnknownBlockType)arg2;
- (void)termsViewControllerDidCancel:(id)arg1;
- (void)termsViewControllerShouldDismiss:(id)arg1;
- (void)_doneButtonPressed:(id)arg1;
- (void)_geniusLearnMoreButtonAction:(id)arg1;
- (void)_geniusOptInButtonAction:(id)arg1;
- (void)updateViewConstraints;
- (void)viewDidLayoutSubviews;
- (id)contentScrollView;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicPickerOverlay : NSObject
{
    _Bool _allowsMultipleSelections;
    id <MusicPickerOverlayDelegate> _delegate;
    UIViewController *_viewController;
}

@property(nonatomic) _Bool allowsMultipleSelections; // @synthesize allowsMultipleSelections=_allowsMultipleSelections;
@property(retain, nonatomic) UIViewController *viewController; // @synthesize viewController=_viewController;
@property(nonatomic) __weak id <MusicPickerOverlayDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)viewController:(id)arg1 didPickAllEntitiesFromDataSource:(id)arg2;
- (void)viewController:(id)arg1 didPickEntity:(id)arg2;
@property(readonly, nonatomic) NSString *title;
- (_Bool)shouldDisplayEntityAsDisabled:(id)arg1;
- (_Bool)shouldDisplayAddAllAsDisabledFromDataSource:(id)arg1;
@property(readonly, nonatomic) UIBarButtonItem *rightBarButtonItem;
- (void)loadViewController;
- (void)finish;

@end

@interface MusicGeniusPickerOverlay : MusicPickerOverlay
{
    MPMediaItem *_pickedItem;
}

- (void).cxx_destruct;
- (void)viewController:(id)arg1 didPickEntity:(id)arg2;
- (id)title;
- (id)rightBarButtonItem;
- (void)loadViewController;
- (void)finish;

@end

@interface MusicGeniusPlaylistActionCellConfiguration : MusicActionCellConfiguration
{
}

+ (id)reuseIdentifier;
+ (void)performActionForCell:(id)arg1 withViewController:(id)arg2;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicGenreCellConfiguration : MusicAlbumCellConfiguration
{
}

+ (id)collectionPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicGenresDataSource : MusicQueryDataSource
{
}

- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;

@end

@interface MusicGenresViewController : MusicTableViewController
{
}

- (id)_viewControllerForSelectedMediaEntity:(id)arg1 containerItemType:(long long)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;

@end

@interface MusicITunesUTracksDataSource : MusicQueryDataSource
{
}

- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicMediaOfferButtonState : NSObject
{
    _Bool _enabled;
    _Bool _hidden;
    _Bool _showsCloudButton;
    _Bool _showsConfirmationState;
    NSString *_confirmationTitle;
    MPUMediaDownloadObserver *_downloadObserver;
    long long _progressType;
    NSString *_title;
}

@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic) _Bool showsConfirmationState; // @synthesize showsConfirmationState=_showsConfirmationState;
@property(nonatomic) _Bool showsCloudButton; // @synthesize showsCloudButton=_showsCloudButton;
@property(nonatomic) long long progressType; // @synthesize progressType=_progressType;
@property(nonatomic, getter=isHidden) _Bool hidden; // @synthesize hidden=_hidden;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) MPUMediaDownloadObserver *downloadObserver; // @synthesize downloadObserver=_downloadObserver;
@property(copy, nonatomic) NSString *confirmationTitle; // @synthesize confirmationTitle=_confirmationTitle;
- (void).cxx_destruct;

@end

@interface MusicMiniPlayerActionsViewController : RUMiniPlayerActionsViewController
{
}

+ (id)_titleForAction:(long long)arg1;
+ (id)_imageForAction:(long long)arg1;
+ (id)_actionsForItem:(id)arg1;
- (void)_cloudControllerIsJaliscoGeniusEnabledDidChangeNotification:(id)arg1;
- (void)_avItemStoreIDDidChangeNotification:(id)arg1;
- (void)dealloc;
- (id)initWithItem:(id)arg1;

@end

@interface MusicMiniPlayerCoordinator : RUMiniPlayerCoordinator <UIActionSheetDelegate>
{
    UIActionSheet *_repeatActionSheet;
}

+ (id)sharedCoordinator;
- (void).cxx_destruct;
- (void)_startGeniusPlaylistFromItem:(id)arg1;
- (void)actionSheet:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)miniPlayerActionsViewController:(id)arg1 didSelectAction:(long long)arg2;
- (_Bool)transportControls:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (unsigned long long)shuffleTypeForPlaybackControls:(id)arg1;
- (unsigned long long)repeatTypeForPlaybackControls:(id)arg1;
- (_Bool)playbackControls:(id)arg1 changedShuffleType:(unsigned long long)arg2;
- (_Bool)playbackControls:(id)arg1 changedRepeatType:(unsigned long long)arg2;
- (Class)_miniPlayerPlaybackControlsViewClass;
- (void)dealloc;
- (id)_init;
- (id)initWithPlaybackCoordinator:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicMiniPlayerPlaybackControlsView : RUMiniPlayerPlaybackControlsView
{
}

- (void)_applyShuffleSettingsToButton:(id)arg1;
- (void)_applyRepeatSettingsToButton:(id)arg1;
@property(readonly, nonatomic) UIView *viewForPresentingRepeat;
- (Class)_transportControlsClassForItem:(id)arg1;
- (void)_setupVisibleAndDisabledPartsForItem:(id)arg1;
- (Class)_miniPlayerActionsViewControllerClass;
- (id)_albumTextForItem:(id)arg1;
- (void)reloadView;
- (id)newButtonForPart:(unsigned long long)arg1;
- (void)layoutSubviews;

@end

@interface MusicMiniPlayerTransportControls : MPUMiniPlayerTransportControls
{
    UIImageView *_artworkImageView;
    MPImageCacheRequest *_currentImageCacheRequest;
}

+ (unsigned long long)defaultVisibleParts;
- (void).cxx_destruct;
- (void)_updateItemArtwork;
- (void)_avItemArtworkDidChangeNotification:(id)arg1;
- (void)_updateForItemChangeWithPreviousItem:(id)arg1 animated:(_Bool)arg2;
- (void)_prospectivePlaybackInformationDidChangeAnimated:(_Bool)arg1;
- (void)setItem:(id)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicMoreListController : UIMoreListController
{
    _Bool _disableNavigationItemRemoval;
}

@property(nonatomic) _Bool disableNavigationItemRemoval; // @synthesize disableNavigationItemRemoval=_disableNavigationItemRemoval;
- (void)_updateEditButton;
- (id)_existingViewControllerAtIndexPath:(id)arg1;
- (void)_defaultMediaLibraryDidChangeNotification:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface MusicMoreNavigationController : UIMoreNavigationController
{
}

+ (Class)_moreListControllerClass;
- (_Bool)canBecomeFirstResponder;
- (void)traitCollectionDidChange:(id)arg1;
- (id)init;

// Remaining properties
@property(nonatomic) __weak id <MusicNavigationControllerDelegate> delegate;

@end

@interface MusicNavigationController : UINavigationController
{
}

- (_Bool)music_shouldPresentModallyInMoreList;
- (void)traitCollectionDidChange:(id)arg1;

// Remaining properties
@property(nonatomic) __weak id <MusicNavigationControllerDelegate> delegate;

@end

@interface MusicNoContentView : UIView
{
    _UIContentUnavailableView *_contentUnavailableView;
}

+ (void)endApplicationTranslucency;
+ (void)beginApplicationTranslucency;
- (void).cxx_destruct;
- (void)_updateStoreButton;
- (void)_musicStoreRestrictionDidChangeNotification:(id)arg1;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicNoContentViewController : UIViewController
{
}

- (_Bool)music_hasContent;
- (id)view;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface MusicNowPlayingIndicatorView : MPUNowPlayingIndicatorView
{
}

- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicNowPlayingObserver : RUNowPlayingObserver
{
}

+ (id)sharedObserver;

@end

@interface MusicNowPlayingPlaybackControlsView : RUNowPlayingPlaybackControlsView
{
}

+ (unsigned long long)defaultVisibleParts;
- (void)_shuffleTypeChangedNotification:(id)arg1;
- (void)_repeatTypeChangedNotification:(id)arg1;
- (void)_cloudControllerIsJaliscoGeniusEnabledDidChangeNotification:(id)arg1;
- (void)_applyShuffleSettingsToButton:(id)arg1;
- (void)_applyRepeatSettingsToButton:(id)arg1;
@property(readonly, nonatomic) UIView *viewForPresentingRepeat;
- (void)_updateForItemDidChangeAnimated:(_Bool)arg1;
- (Class)_transportControlsClass;
- (id)_titleForCreateAction:(long long)arg1;
- (id)_availableCreateActionsForItem:(id)arg1;
- (void)unregisterForPlayerNotifications;
- (void)reloadView;
- (void)registerForPlayerNotifications;
- (id)playbackSpeedTitleForPlaybackSpeed:(unsigned long long)arg1;
- (id)playbackSpeedButtonImageForPlaybackSpeed:(unsigned long long)arg1;
- (id)newButtonForPart:(unsigned long long)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicNowPlayingTransportControls : RUNowPlayingTransportControls
{
}

+ (unsigned long long)defaultVisibleParts;
- (void)_updateItemRelatedParts;
- (id)buttonImageForPart:(unsigned long long)arg1;
- (void)layoutSubviews;

@end

@interface MusicNowPlayingViewController : RUNowPlayingViewController <UIActionSheetDelegate>
{
    UIActionSheet *_repeatActionSheet;
    _Bool _supportsCoverFlow;
}

- (void).cxx_destruct;
- (void)_startGeniusPlaylistFromCurrentItem;
- (void)_flipsideAction:(id)arg1;
- (void)actionSheet:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)playbackControls:(id)arg1 didSelectCreateAction:(long long)arg2;
- (unsigned long long)shuffleTypeForPlaybackControls:(id)arg1;
- (unsigned long long)repeatTypeForPlaybackControls:(id)arg1;
- (_Bool)playbackControls:(id)arg1 changedShuffleType:(unsigned long long)arg2;
- (_Bool)playbackControls:(id)arg1 changedRepeatType:(unsigned long long)arg2;
- (unsigned long long)controlsOverlay:(id)arg1 playbackSpeedForItem:(id)arg2;
- (void)controlsOverlayDidClickPlaybackSpeedButton:(id)arg1;
- (_Bool)_updateNavigationItemAnimated:(_Bool)arg1;
- (_Bool)_updateItemRelatedStateForChangeToItem:(id)arg1 animated:(_Bool)arg2;
- (Class)_playbackControlsViewClass;
- (id)_albumTextForItem:(id)arg1;
- (SEL)_actionForHandlingDoubleTapOnArtworkImageView;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (_Bool)_displayingActionSheet;
- (_Bool)MPH_supportsCoverFlow;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicPagingCollectionViewFlowLayout : UICollectionViewFlowLayout
{
    double _distanceFromCenterForMinimumAlpha;
    double _minimumCellAlpha;
    long long _numberOfItemsPerPage;
}

@property(nonatomic) long long numberOfItemsPerPage; // @synthesize numberOfItemsPerPage=_numberOfItemsPerPage;
@property(nonatomic) double minimumCellAlpha; // @synthesize minimumCellAlpha=_minimumCellAlpha;
@property(nonatomic) double distanceFromCenterForMinimumAlpha; // @synthesize distanceFromCenterForMinimumAlpha=_distanceFromCenterForMinimumAlpha;
- (long long)indexOfItemClosestToPoint:(struct CGPoint)arg1;
- (struct CGPoint)targetContentOffsetForProposedContentOffset:(struct CGPoint)arg1 withScrollingVelocity:(struct CGPoint)arg2;
- (struct CGPoint)targetContentOffsetForProposedContentOffset:(struct CGPoint)arg1;
- (_Bool)shouldInvalidateLayoutForBoundsChange:(struct CGRect)arg1;
- (id)layoutAttributesForElementsInRect:(struct CGRect)arg1;
- (struct CGSize)collectionViewContentSize;

@end

@interface MusicPickerTabBarController : UITabBarController
{
}

- (_Bool)MPH_supportsCoverFlow;
- (unsigned long long)supportedInterfaceOrientations;

@end

@interface MusicPlayerServerDelegate : NSObject <MPMusicPlayerControllerServerDelegate>
{
    MusicAVPlayer *_applicationPlayer;
    MPMediaItem *_firstItem;
    MPNowPlayingObserver *_nowPlayingObserver;
    long long _playbackShuffleMode;
    CDUnknownBlockType _repeatChangeHandler;
    MPAVController *_repeatChangeHandlerPlayer;
    long long _repeatMode;
    CDUnknownBlockType _shuffleChangeHandler;
    MPAVController *_shuffleChangeHandlerPlayer;
    long long _shuffleMode;
}

- (void).cxx_destruct;
- (void)_appDefaultsChanged:(id)arg1;
- (void)musicPlayerServer:(id)arg1 prepareQueueWithRadioStation:(id)arg2;
- (void)musicPlayerServer:(id)arg1 prepareQueueWithGeniusMixPlaylist:(id)arg2;
- (void)musicPlayerServer:(id)arg1 prepareQueueWithQuery:(id)arg2;
- (void)musicPlayerServer:(id)arg1 setShuffleMode:(long long)arg2;
- (void)musicPlayerServer:(id)arg1 setFirstItem:(id)arg2;
- (id)currentRadioStationForMusicPlayerServer:(id)arg1;
- (id)currentMediaQueryForMusicPlayerServer:(id)arg1;
- (_Bool)isNowPlayingItemFromGeniusMixForMusicPlayerServer:(id)arg1;
- (unsigned long long)unshuffledIndexOfNowPlayingItemForMusicPlayerServer:(id)arg1;
- (unsigned long long)indexOfNowPlayingItemForMusicPlayerServer:(id)arg1;
- (id)nowPlayingItemForMusicPlayerServer:(id)arg1;
- (void)musicPlayerServer:(id)arg1 setNowPlayingItem:(id)arg2;
- (long long)playbackSpeedForMusicPlayerServer:(id)arg1;
- (void)musicPlayerServer:(id)arg1 setPlaybackSpeed:(long long)arg2;
- (id)playerForMusicPlayerServer:(id)arg1 usingApplicationSpecificQueue:(_Bool)arg2;
- (void)musicPlayerServer:(id)arg1 registerForShuffleModeChangesWithChangeHandler:(CDUnknownBlockType)arg2;
- (void)musicPlayerServer:(id)arg1 registerForRepeatModeChangesWithChangeHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicPlaylistActionsView : UIView
{
    _UIBackdropView *_backdropView;
    NSMutableArray *_buttons;
    UIView *_hairlineView;
    long long _actionsStyle;
}

@property(nonatomic) long long actionsStyle; // @synthesize actionsStyle=_actionsStyle;
- (void).cxx_destruct;
- (void)_updateButtonsForCurrentStyle;
- (void)_addButtonWithTitle:(id)arg1 target:(id)arg2 action:(SEL)arg3;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)setCanRefreshPlaylist:(_Bool)arg1;
- (void)setCanEditPlaylist:(_Bool)arg1;
- (void)setCanDeletePlaylist:(_Bool)arg1;
- (void)setCanClearPlaylist:(_Bool)arg1;
@property(copy, nonatomic) NSString *backdropViewGroupName;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MusicPlaylistCellConfiguration : MusicStandardMediaCellConfiguration
{
}

+ (id)_detailEmphasizedTextWithCount:(unsigned long long)arg1 duration:(double)arg2;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (Class)tableViewCellClass;
+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicPlaylistEditingPickerOverlay : MusicPickerOverlay
{
    NSArray *_pickedEntities;
    MPMediaPlaylist *_playlist;
}

@property(readonly, nonatomic) MPMediaPlaylist *playlist; // @synthesize playlist=_playlist;
@property(readonly, nonatomic) NSArray *pickedEntities; // @synthesize pickedEntities=_pickedEntities;
- (void).cxx_destruct;
- (void)viewController:(id)arg1 didPickAllEntitiesFromDataSource:(id)arg2;
- (void)viewController:(id)arg1 didPickEntity:(id)arg2;
- (id)title;
- (_Bool)allowsMultipleSelections;
- (_Bool)shouldDisplayEntityAsDisabled:(id)arg1;
- (_Bool)shouldDisplayAddAllAsDisabledFromDataSource:(id)arg1;
- (id)newAccessoryView;
- (void)loadViewController;
- (void)finish;
- (id)initWithPlaylist:(id)arg1;
- (id)init;

@end

@interface MusicPlaylistsViewController : MusicTableViewController <MusicPickerOverlayDelegate, UITextFieldDelegate>
{
    UIImage *_initialPlaceholderImage;
    UITextField *_newPlaylistAlertTextField;
    id _newPlaylistAlertTextFieldChangeObserver;
    UIAlertController *_newPlaylistAlertController;
    NSCache *_playlistMetadataCache;
}

@property(retain, nonatomic) NSCache *playlistMetadataCache; // @synthesize playlistMetadataCache=_playlistMetadataCache;
- (void).cxx_destruct;
- (id)_viewControllerForSelectedMediaEntity:(id)arg1 containerItemType:(long long)arg2;
- (void)_updateCloudPlaylist:(id)arg1;
- (id)_playlistTitle;
- (void)_cleanupNewPlaylistAlertController;
- (void)createGeniusPlaylistAction;
- (void)addPlaylistAction;
- (void)switchToShortcutIdentifier:(id)arg1;
- (void)_handlePlaylistSaveAction;
- (_Bool)textFieldShouldReturn:(id)arg1;
- (void)_updateSaveButtonEnabledState;
- (void)tableView:(id)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)pickerOverlayDidFinish:(id)arg1;
- (void)pickerOverlayRequestsFinish:(id)arg1;
- (_Bool)MPH_supportsCoverFlow;
- (_Bool)music_hasContent;
- (void)reloadData;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicPlaylistFolderViewController : MusicPlaylistsViewController
{
}

@end

@interface MusicPlaylistShuffleActionCellConfiguration : MusicShuffleActionCellConfiguration
{
}

+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicPlaylistTableViewCell : MusicStandardMediaTableViewCell
{
}

+ (Class)contentViewClass;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MusicPlaylistTableViewCellContentView : MusicStandardMediaTableViewCellContentView
{
}

+ (struct CGSize)artworkSize;

@end

@interface MusicPlaylistsDataSource : MusicQueryDataSource
{
    _Bool _hasParentPlaylist;
    NSCache *_cachedDurations;
    NSCache *_cachedCounts;
    NSCache *_cachedRepresentativeItems;
    NSObject<OS_dispatch_queue> *_cacheQueue;
}

- (void).cxx_destruct;
- (void)_breadthFirstVisitNonFolderPlaylistsWithRootPlaylist:(id)arg1 visitor:(CDUnknownBlockType)arg2;
- (void)_bfsNonFolderPlaylistsWithRootPlaylist:(id)arg1 visitedPlaylistPIDs:(id)arg2 stop:(_Bool *)arg3 visitor:(CDUnknownBlockType)arg4;
- (id)_representativePlaylistForEntityAtIndex:(unsigned long long)arg1;
- (void)_networkTypeDidChangeNotification:(id)arg1;
- (_Bool)showsIndexBar;
- (_Bool)showsEntityCountFooter;
- (id)entityCountFormat;
- (void)_invalidateCalculatedEntities;
- (_Bool)entityIsNowPlayingAtIndex:(unsigned long long)arg1;
- (long long)editingTypeForEntityAtIndex:(unsigned long long)arg1;
- (void)deleteEntityAtIndex:(unsigned long long)arg1;
- (_Bool)canEditEntityAtIndex:(unsigned long long)arg1;
- (void)resetCaches;
- (id)representativeItemForEntityAtIndex:(unsigned long long)arg1;
- (unsigned long long)countForEntityAtIndex:(unsigned long long)arg1;
- (double)durationForEntityAtIndex:(unsigned long long)arg1;
- (id)cachedRepresentativeItemForEntityAtIndex:(unsigned long long)arg1;
- (unsigned long long)cachedCountForEntityAtIndex:(unsigned long long)arg1;
- (double)cachedDurationForEntityAtIndex:(unsigned long long)arg1;
- (_Bool)isFolderForEntityAtIndex:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicPlaylistsListViewController : MusicPlaylistsViewController
{
}

+ (id)actionCellConfigurationClasses;
- (void)_cloudControllerIsJaliscoGeniusEnabledDidChangeNotification:(id)arg1;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1;

@end

@interface MusicPodcastDetailsViewController : MusicSongsViewController
{
}

+ (id)actionCellConfigurationClasses;
- (void)reloadData;

@end

@interface MusicPodcastTrackCellConfiguration : MusicPartialPlaybackCellConfiguration
{
}

+ (_Bool)mediaCellConfigurationUsesSubtitle;
+ (id)reuseIdentifier;
+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicPodcastTracksDataSource : MusicQueryDataSource
{
}

- (id)initWithQuery:(id)arg1 entityType:(long long)arg2;

@end

@interface MusicPodcastsViewController : MusicTableViewController
{
}

- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;

@end

@interface MusicQueryNowPlayingItem : MPMediaQueryNowPlayingItem
{
}

+ (void)applyVolumeNormalizationForQueuedItems:(id)arg1;
- (void)setupPlaybackInfo;
- (_Bool)hasDisplayableText;
- (float)defaultPlaybackRate;

@end

@interface MusicRadioDataSource : RURadioDataSource
{
}

- (id)initWithEntityType:(long long)arg1;

@end

@interface MusicRadioPlaybackCoordinator : RURadioPlaybackCoordinator
{
}

+ (id)sharedCoordinator;
- (id)_init;
- (id)initWithPlayer:(id)arg1;
- (id)init;

@end

@interface MusicRadioViewController : RURadioViewController
{
}

- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (Class)_nowPlayingViewControllerClass;
- (void)traitCollectionDidChange:(id)arg1;
- (id)initWithDataSource:(id)arg1;

@end

@interface MusicSearchCellConfiguration : MusicSongListCellConfiguration
{
}

+ (void)_appDefaultsDidChangeNotification:(id)arg1;
+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)subtitleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (_Bool)isMediaEntityExplicit:(id)arg1 valuesForProperties:(id)arg2;
+ (void)appDefaultsDidChange;
+ (Class)tableViewCellClass;
+ (id)reuseIdentifier;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MusicSearchAlbumCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)subtitleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicSearchArtistCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)_titleProperty;
+ (id)_artistRepresentativeItemProperty;
+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;
+ (void)appDefaultsDidChange;

@end

@interface MusicSearchAudiobookCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicSearchCompilationCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicSearchComposerCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicSearchGenreCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicSearchPodcastCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicSearchPodcastEpisodeCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)subtitleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;

@end

@interface MusicTableSectionHeaderView : UITableViewHeaderFooterView
{
    _Bool _needsTitleLabelUpdate;
    NSDictionary *_titleEmphasizedTextAttributes;
    NSDictionary *_titleRegularTextAttributes;
    UILabel *_titleLabel;
    double _backgroundTransitionWeighting;
    MPUEmphasizedText *_titleEmphasizedText;
}

@property(copy, nonatomic) MPUEmphasizedText *titleEmphasizedText; // @synthesize titleEmphasizedText=_titleEmphasizedText;
@property(nonatomic) double backgroundTransitionWeighting; // @synthesize backgroundTransitionWeighting=_backgroundTransitionWeighting;
- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (id)titleRegularTextAttributes;
- (id)titleEmphasizedTextAttributes;
- (void)contentSizeCategoryDidChange;
- (void)setTableViewStyle:(long long)arg1;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithReuseIdentifier:(id)arg1;

@end

@interface MusicSearchSectionHeaderView : MusicTableSectionHeaderView
{
    NSDictionary *_titleEmphasizedTextAttributes;
    NSDictionary *_titleRegularTextAttributes;
}

- (void).cxx_destruct;
- (id)titleRegularTextAttributes;
- (id)titleEmphasizedTextAttributes;
- (void)contentSizeCategoryDidChange;

@end

@interface MusicSearchSongCellConfiguration : MusicSearchCellConfiguration
{
}

+ (id)titleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)subtitleForMediaEntity:(id)arg1 valuesForProperties:(id)arg2;
+ (id)mediaEntityPropertiesToFetch;
+ (_Bool)isMediaEntityExplicit:(id)arg1 valuesForProperties:(id)arg2;

@end

@interface MusicSearchTableView : UISearchResultsTableView
{
    UITraitCollection *_previousTraitCollection;
}

- (void).cxx_destruct;
- (void)traitCollectionDidChange:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;

// Remaining properties
@property(nonatomic) id <MusicSearchTableViewDelegate> delegate; // @dynamic delegate;

@end

@interface MusicSearchTableViewCell : MusicSongListTableViewCell
{
}

+ (Class)contentViewClass;

@end

@interface MusicSearchTableViewCellContentView : MusicSongListTableViewCellContentView
{
}

+ (id)titleRegularTextAttributes;
+ (id)titleEmphasizedTextAttributes;
+ (id)subtitleRegularTextAttributes;
+ (id)subtitleEmphasizedTextAttributes;
+ (id)detailRegularTextAttributes;
+ (void)contentSizeCategoryDidChange;
- (id)subtitleDetailTextSeparatorString;
- (id)currentSubtitleAttributedText;

@end

@interface MusicSearchViewController : UIViewController <MusicSearchTableViewDelegate, UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate>
{
    SKUICircleProgressIndicator *_activityIndicatorView;
    _Bool _canShowContinueSearch;
    NSMapTable *_calculatedHeightByTableViewRelatedClass;
    UIButton *_continueSearchButton;
    _Bool _isSearchInProgress;
    UILabel *_loadingLabel;
    NSMutableArray *_nonEmptySearchDataSources;
    UILabel *_noResultsLabel;
    UITraitCollection *_previousTraitCollection;
    NSArray *_searchDataSources;
    NSOperationQueue *_searchOperationQueue;
    UIView *_tableViewBackgroundView;
    UIView *_tableViewDimmingView;
    UITapGestureRecognizer *_tapGestureRecognizer;
    id <MusicSearchViewControllerDelegate> _delegate;
    NSString *_searchTerm;
    UITableView *_tableView;
}

@property(readonly, nonatomic) UITableView *tableView; // @synthesize tableView=_tableView;
@property(readonly, nonatomic) NSString *searchTerm; // @synthesize searchTerm=_searchTerm;
@property(nonatomic) __weak id <MusicSearchViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_updateVisibleHeadersState;
- (void)_updateResultsForSearchTerm:(id)arg1;
- (id)_searchSectionTitleForSearchDataSource:(id)arg1;
- (Class)_searchCellConfigurationClassForSearchDataSource:(id)arg1;
- (void)_reloadData;
- (void)_performDefaultActionForSearchDataSource:(id)arg1 entity:(id)arg2;
- (id)_newSearchDataSources;
- (_Bool)_isSearchInProgress;
- (void)_invalidateCalculatedHeights;
- (double)_heightForCellConfigurationClass:(Class)arg1 inTableView:(id)arg2;
- (void)_storeRestrictionsDidChangeNotification:(id)arg1;
- (void)_searchDataSourceDidInvalidateNotification:(id)arg1;
- (void)_musicDefaultsDidChangeNotification:(id)arg1;
- (void)_mediaLibraryDidChangeNotification:(id)arg1;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)_tapGestureRecognizerAction:(id)arg1;
- (void)_continueSearchAction:(id)arg1;
- (void)musicSearchTableView:(id)arg1 traitCollectionDidChange:(id)arg2;
- (void)tableViewDidFinishReload:(id)arg1;
- (void)tableView:(id)arg1 willDisplayHeaderView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (id)tableView:(id)arg1 viewForFooterInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForFooterInSection:(long long)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (Class)_resultsTableViewClass;
- (void)searchDisplayControllerWillEndSearch:(id)arg1;
- (void)searchDisplayControllerWillBeginSearch:(id)arg1;
- (void)searchDisplayController:(id)arg1 willUnloadSearchResultsTableView:(id)arg2;
- (_Bool)searchDisplayController:(id)arg1 shouldReloadTableForSearchString:(id)arg2;
- (void)searchDisplayController:(id)arg1 didLoadSearchResultsTableView:(id)arg2;
- (void)searchDisplayControllerDidEndSearch:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicSharedLibrariesViewController : UITableViewController <UIViewControllerRestoration>
{
    MPMediaLibrary *_connectingMediaLibrary;
    NSArray *_sharedMediaLibraries;
}

+ (id)viewControllerWithRestorationIdentifierPath:(id)arg1 coder:(id)arg2;
- (void).cxx_destruct;
- (void)_updateConnectionProgress;
- (void)_updateConnectionProgressForCell:(id)arg1;
- (void)_updateNavigationPrompt;
- (id)_sharedMediaLibraries;
- (void)_cancelConnectionAndDismiss;
- (void)_mediaLibraryConnectionProgressDidChangeNotification:(id)arg1;
- (void)_defaultMediaLibraryDidChangeNotification:(id)arg1;
- (void)_availableMediaLibrariesDidChangeNotification:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (_Bool)music_shouldPresentModallyInMoreList;
- (void)viewWillAppear:(_Bool)arg1;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface MusicStoreClientController : SUClientController <MCProfileConnectionObserver, SSDownloadManagerObserver>
{
    _Bool _hasContinueSearchCapability;
    _Bool _isUsingNetwork;
}

+ (void)setSharedController:(id)arg1;
+ (id)sharedController;
+ (id)continueSearchingURLForMediaType:(unsigned long long)arg1 searchString:(id)arg2;
+ (id)musicStoreURLWithAction:(id)arg1;
- (_Bool)_isStoreRestricted;
- (void)downloadManagerNetworkUsageDidChange:(id)arg1;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
@property(readonly, nonatomic) _Bool hasStoreSearchCapability;
- (void)dealloc;
- (id)initWithClientIdentifier:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MusicTabBarController : UITabBarController
{
    _Bool _isVisible;
    _Bool _needsReloadWhenBecomingVisible;
    NSArray *_visibleViewControllerIdentifiers;
    _Bool _supportsTransiency;
    _Bool _displayEmptyTabs;
    NSArray *_customizableViewControllerIdentifiers;
    id <UINavigationControllerDelegate> _navigationControllerDelegate;
    NSArray *_orderedViewControllerIdentifiers;
    UINavigationController *_radioNavigationController;
    MusicRadioViewController *_radioViewController;
}

+ (Class)_moreNavigationControllerClass;
@property(nonatomic) _Bool displayEmptyTabs; // @synthesize displayEmptyTabs=_displayEmptyTabs;
@property(nonatomic) _Bool supportsTransiency; // @synthesize supportsTransiency=_supportsTransiency;
@property(readonly, nonatomic) MusicRadioViewController *radioViewController; // @synthesize radioViewController=_radioViewController;
@property(readonly, nonatomic) UINavigationController *radioNavigationController; // @synthesize radioNavigationController=_radioNavigationController;
@property(copy, nonatomic) NSArray *orderedViewControllerIdentifiers; // @synthesize orderedViewControllerIdentifiers=_orderedViewControllerIdentifiers;
@property(nonatomic) __weak id <UINavigationControllerDelegate> navigationControllerDelegate; // @synthesize navigationControllerDelegate=_navigationControllerDelegate;
@property(copy, nonatomic) NSArray *customizableViewControllerIdentifiers; // @synthesize customizableViewControllerIdentifiers=_customizableViewControllerIdentifiers;
- (void).cxx_destruct;
- (id)_viewControllerIdentifierForNavigationControllerIdentifier:(id)arg1;
- (id)_tabBarCustomizableViewControllerIdentifiers;
- (void)_setOrderedViewControllerIdentifiers:(id)arg1 animated:(_Bool)arg2 notifyDelegate:(_Bool)arg3;
- (void)_reloadTabsAnimated:(_Bool)arg1;
- (id)_navigationControllerIdentifierForViewControllerIdentifier:(id)arg1;
- (id)_orderedViewControllerIdentifiersForViewControllers:(id)arg1;
- (id)_mergedOrderedViewControllerIdentifiersWithViewControllers:(id)arg1;
- (id)_navigationControllerForNavigationIdentifier:(id)arg1;
- (void)_mediaLibraryDidChangeNotification:(id)arg1;
- (void)_isRadioEnabledDidChangeNotification:(id)arg1;
- (void)_availableMediaLibrariesDidChangeNotification:(id)arg1;
- (id)viewControllerForViewControllerIdentifier:(id)arg1;
- (void)switchToShortcutIdentifier:(id)arg1;
- (void)switchToPlaylistWithPID:(id)arg1;
- (void)ensureTabsAreLoaded;
@property(readonly, nonatomic) NSArray *visibleViewControllerIdentifiers;
- (void)setOrderedViewControllerIdentifiers:(id)arg1 animated:(_Bool)arg2;
- (void)tabBar:(id)arg1 didEndCustomizingItems:(id)arg2 changed:(_Bool)arg3;
- (void)_setSelectedViewController:(id)arg1;
- (id)moreNavigationController;
- (void)setViewControllers:(id)arg1 animated:(_Bool)arg2;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(nonatomic) __weak id <MusicTabBarControllerDelegate> delegate;

@end

@interface MusicTableView : UITableView
{
    UITraitCollection *_previousTraitCollection;
    double _headerBackgroundTransitionWeighting;
    double _footerBackgroundTransitionWeighting;
    double _minimumContentSizeHeightAdditions;
}

@property(nonatomic) double minimumContentSizeHeightAdditions; // @synthesize minimumContentSizeHeightAdditions=_minimumContentSizeHeightAdditions;
@property(nonatomic) double footerBackgroundTransitionWeighting; // @synthesize footerBackgroundTransitionWeighting=_footerBackgroundTransitionWeighting;
@property(nonatomic) double headerBackgroundTransitionWeighting; // @synthesize headerBackgroundTransitionWeighting=_headerBackgroundTransitionWeighting;
- (void).cxx_destruct;
- (void)updateVisibleHeaderFooterState;
- (void)updateStateForHeaderView:(id)arg1 inSection:(long long)arg2;
- (void)updateStateForFooterView:(id)arg1 inSection:(long long)arg2;
- (void)setTableHeaderBackgroundColor:(id)arg1;
- (void)setContentSize:(struct CGSize)arg1;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;

// Remaining properties
@property(nonatomic) id <MusicTableViewDelegate> delegate; // @dynamic delegate;

@end

@interface MusicTheme : MPUTheme
{
}

+ (id)newAddAccessoryButton;
+ (id)newBackgroundViewWithFrame:(struct CGRect)arg1;
+ (long long)unplayedIndicatorStyleForMediaItem:(id)arg1;
+ (double)tableViewContentLeftInset;
+ (id)tintColor;
+ (id)tableViewCellSeparatorColor;
+ (id)unplayedIndicatorImageWithStyle:(long long)arg1 selected:(_Bool)arg2;
+ (id)keepLocalErrorStatusImage;
+ (id)keepLocalMixedStatusImage;
+ (id)keepLocalImageWithEnabledState:(_Bool)arg1;
+ (id)shuffleImage;
+ (id)miniPlayerEmptyAlbumPlaceholderImage;
+ (id)gradientMaskImageWithGradientDistance:(double)arg1;
+ (id)grayColorGeniusPlaylistImage;
+ (id)tintColorGeniusPlaylistImage;
+ (id)addPlaylistImage;
+ (id)disabledAddAccessoryImage;
+ (id)addAccessoryImage;

@end

@interface MusicViewControllerFactory : MPUViewControllerFactory
{
}

+ (id)_sanitizedQueryForQuery:(id)arg1;
+ (void)registerViewControllerIdentifiers;

@end

@interface NSBundle (MusicAdditions)
+ (id)musicUIBundle;
@end

@interface NSURL (MusicAdditions)
@property(readonly, nonatomic) NSString *shortcutIdentifier;
@property(readonly, nonatomic) _Bool isShowNowPlayingURL;
@property(readonly, nonatomic) _Bool isPlayImmediatelyURL;
@end

@interface UILabel (AnimatableLabelColor)
- (void)transitionToTextColor:(id)arg1 duration:(double)arg2;
@end

@interface UINavigationController (MusicAdditions)
- (void)music_pushNowPlayingViewControllerAnimated:(_Bool)arg1;
@end

@interface UIViewController (MPHAdditions)
- (void)MPH_supportsCoverFlowDidChange;
- (_Bool)MPH_supportsCoverFlow;
@end

@interface UIViewController (MusicAdditions) <MPUMiniPlayerParticipant>
+ (id)music_sanitizedQueryForQuery:(id)arg1;
+ (id)music_queryForIdentifier:(id)arg1;
- (void)_music_setNoContentView:(id)arg1;
- (void)_music_setCloudLoadingView:(id)arg1;
- (id)_music_noContentView;
- (id)_music_cloudLoadingView;
- (void)_music_storeClientRestrictionsDidChangeNotification:(id)arg1;
- (void)_music_cloudControllerIsUpdateInProgressDidChangeNotification:(id)arg1;
- (void)_music_storeButtonAction:(id)arg1;
- (void)music_updateStoreNavigationItem;
- (void)_music_updateForContentChangeForInitialViewLoad:(_Bool)arg1;
- (void)music_updateForContentChange;
@property(nonatomic, getter=music_showsStoreNavigationItem, setter=music_setShowsStoreNavigationItem:) _Bool music_showsStoreNavigationItem;
@property(nonatomic, getter=music_showsNowPlayingNavigationItem, setter=music_setShowsNowPlayingNavigationItem:) _Bool music_showsNowPlayingNavigationItem;
@property(nonatomic, getter=music_showsNoContent, setter=music_setShowsNoContent:) _Bool music_showsNoContent;
@property(nonatomic, getter=music_showsMatchLoading, setter=music_setShowsMatchLoading:) _Bool music_showsMatchLoading;
@property(nonatomic, getter=music_representativeSelectedMediaEntity, setter=music_setRepresentativeSelectedMediaEntity:) MPMediaEntity *music_representativeSelectedMediaEntity;
- (_Bool)music_shouldPresentModallyInMoreList;
- (void)music_loadNoContentOrMatchLoadingViewIfAppropriate;
- (_Bool)music_hasContent;
- (_Bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (_Bool)music_appendCurrentUserActivityContainerItems:(id)arg1 previousViewController:(id)arg2 nextViewController:(id)arg3;
- (id)MPU_prospectivePlaybackInformation;
- (_Bool)MPU_beginPlaybackForVisibleContent;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface UIViewController (MusicPickerOverlayAdditions)
- (void)dismissPickerOverlay;
- (void)presentPickerOverlay:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)presentPickerOverlay:(id)arg1;
@property(retain, nonatomic) MusicPickerOverlay *pickerOverlay;
@end

@interface _MusicGeniusMixCollectionViewCell : UICollectionViewCell
{
    UILabel *_artistsLabel;
    NSLayoutConstraint *_artistsLabelBaselineConstraint;
    UILabel *_basedOnLabel;
    NSLayoutConstraint *_basedOnLabelBaselineConstraint;
    NSMutableArray *_coverViews;
    UILabel *_titleLabel;
    NSLayoutConstraint *_titleLabelBaselineConstraint;
    _Bool _offline;
    _Bool _playing;
    UIButton *_playButton;
}

+ (long long)numberOfArtworkImages;
@property(nonatomic, getter=isPlaying) _Bool playing; // @synthesize playing=_playing;
@property(nonatomic, getter=isOffline) _Bool offline; // @synthesize offline=_offline;
@property(readonly, nonatomic) UIButton *playButton; // @synthesize playButton=_playButton;
- (void).cxx_destruct;
- (void)_updatePlayButtonAlpha;
- (void)_updateCoverViewsAlpha;
- (id)_pressedPlayButtonImage;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)setArtworkImage:(id)arg1 atIndex:(long long)arg2;
- (id)artworkImageDestinationAtIndex:(long long)arg1;
@property(copy, nonatomic) NSString *title;
- (void)setPlaying:(_Bool)arg1 animated:(_Bool)arg2;
@property(copy, nonatomic) NSString *artistsText;
- (void)updateConstraints;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface _MusicStoreViewControllerFactory : SUViewControllerFactory
{
}

- (id)newPlaceholderViewController;

@end

@interface _MusicViewControllerNotificationObserver : NSObject
{
    NSString *_notificationName;
    id _object;
    SEL _selector;
    id _target;
}

@property(readonly, nonatomic) __weak id target; // @synthesize target=_target;
@property(readonly, nonatomic) SEL selector; // @synthesize selector=_selector;
@property(readonly, nonatomic) __weak id object; // @synthesize object=_object;
@property(readonly, nonatomic) NSString *notificationName; // @synthesize notificationName=_notificationName;
- (void).cxx_destruct;
- (void)_didReceiveNotification:(id)arg1;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2 notificationName:(id)arg3 object:(id)arg4;

@end

