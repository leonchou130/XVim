//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct GLKBigInt_s {
    unsigned long long n0;
    unsigned long long n1;
};

struct GLKEffectPropertyPrv {
    struct GLKBigInt_s *_field1;
    struct GLKBigInt_s *_field2;
    struct GLKBigInt_s *_field3;
    struct GLKBigInt_s *_field4;
    id _field5;
};

#pragma mark Named Unions

union _GLKMatrix3 {
    struct {
        float m00;
        float m01;
        float m02;
        float m10;
        float m11;
        float m12;
        float m20;
        float m21;
        float m22;
    } ;
    float m[9];
};

union _GLKMatrix4 {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
};

union _GLKVector3 {
    struct {
        float x;
        float y;
        float z;
    } ;
    struct {
        float r;
        float g;
        float b;
    } ;
    struct {
        float s;
        float t;
        float p;
    } ;
    float v[3];
};

union _GLKVector4 {
    struct {
        float x;
        float y;
        float z;
        float w;
    } ;
    struct {
        float r;
        float g;
        float b;
        float a;
    } ;
    struct {
        float s;
        float t;
        float p;
        float q;
    } ;
    float v[4];
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/GLKit.framework/GLKit
// UUID: 1588D1F0-A0F1-39B2-9B68-A0E1CE7D8565
//
//                           Arch: x86_64
//                Current version: 21.0.0
//          Compatibility version: 1.0.0
//                 Source version: 29.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol GLKNamedEffect
- (void)prepareToDraw;
@end

@protocol GLKViewDelegate <NSObject>
- (void)glkView:(GLKView *)arg1 drawInRect:(struct CGRect)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSXMLParserDelegate <NSObject>

@optional
- (void)parser:(NSXMLParser *)arg1 validationErrorOccurred:(NSError *)arg2;
- (void)parser:(NSXMLParser *)arg1 parseErrorOccurred:(NSError *)arg2;
- (NSData *)parser:(NSXMLParser *)arg1 resolveExternalEntityName:(NSString *)arg2 systemID:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundCDATA:(NSData *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundComment:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundProcessingInstructionWithTarget:(NSString *)arg2 data:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundIgnorableWhitespace:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 foundCharacters:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 didEndMappingPrefix:(NSString *)arg2;
- (void)parser:(NSXMLParser *)arg1 didStartMappingPrefix:(NSString *)arg2 toURI:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 didEndElement:(NSString *)arg2 namespaceURI:(NSString *)arg3 qualifiedName:(NSString *)arg4;
- (void)parser:(NSXMLParser *)arg1 didStartElement:(NSString *)arg2 namespaceURI:(NSString *)arg3 qualifiedName:(NSString *)arg4 attributes:(NSDictionary *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundExternalEntityDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4;
- (void)parser:(NSXMLParser *)arg1 foundInternalEntityDeclarationWithName:(NSString *)arg2 value:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundElementDeclarationWithName:(NSString *)arg2 model:(NSString *)arg3;
- (void)parser:(NSXMLParser *)arg1 foundAttributeDeclarationWithName:(NSString *)arg2 forElement:(NSString *)arg3 type:(NSString *)arg4 defaultValue:(NSString *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundUnparsedEntityDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4 notationName:(NSString *)arg5;
- (void)parser:(NSXMLParser *)arg1 foundNotationDeclarationWithName:(NSString *)arg2 publicID:(NSString *)arg3 systemID:(NSString *)arg4;
- (void)parserDidEndDocument:(NSXMLParser *)arg1;
- (void)parserDidStartDocument:(NSXMLParser *)arg1;
@end

@interface GLKBaseEffect : NSObject <GLKNamedEffect>
{
    unsigned char _colorMaterialEnabled;
    unsigned char _fogEnabled;
    GLKEffectPropertyTransform *_transform;
    int _lightingType;
    GLKEffectPropertyLight *_light0;
    GLKEffectPropertyLight *_light1;
    GLKEffectPropertyLight *_light2;
    GLKEffectPropertyMaterial *_material;
    GLKEffectPropertyTexture *_texture2d0;
    GLKEffectPropertyTexture *_texture2d1;
    NSArray *_textureOrder;
    union _GLKVector4 _constantColor;
    GLKEffectPropertyFog *_fog;
    NSString *_label;
    unsigned char _lightModelTwoSided;
    unsigned char _useConstantColor;
    unsigned char _propertyArrayStale;
    unsigned char _effectStale;
    unsigned int _programName;
    GLKEffectPropertyConstantColor *_constantColorProp;
    NSMutableArray *_propertyArray;
    GLKEffect *_effect;
    union _GLKVector4 _lightModelAmbientColor;
}

@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(nonatomic) unsigned int programName; // @synthesize programName=_programName;
@property(nonatomic) GLKEffect *effect; // @synthesize effect=_effect;
@property(nonatomic) unsigned char effectStale; // @synthesize effectStale=_effectStale;
@property(readonly, nonatomic) NSMutableArray *propertyArray; // @synthesize propertyArray=_propertyArray;
@property(nonatomic) unsigned char propertyArrayStale; // @synthesize propertyArrayStale=_propertyArrayStale;
@property(nonatomic) unsigned char useConstantColor; // @synthesize useConstantColor=_useConstantColor;
@property(readonly, nonatomic) GLKEffectPropertyConstantColor *constantColorProp; // @synthesize constantColorProp=_constantColorProp;
@property(copy, nonatomic) NSArray *textureOrder; // @synthesize textureOrder=_textureOrder;
@property(nonatomic) union _GLKVector4 lightModelAmbientColor; // @synthesize lightModelAmbientColor=_lightModelAmbientColor;
@property(nonatomic) int lightingType; // @synthesize lightingType=_lightingType;
@property(readonly, nonatomic) GLKEffectPropertyTransform *transform; // @synthesize transform=_transform;
@property(nonatomic) unsigned char lightModelTwoSided; // @synthesize lightModelTwoSided=_lightModelTwoSided;
@property(nonatomic) unsigned char colorMaterialEnabled; // @synthesize colorMaterialEnabled=_colorMaterialEnabled;
- (void)dealloc;
- (id)description;
- (void)prepareToDraw;
- (void)updateBaseEffect;
- (_Bool)perPixelLightingEnabled;
- (_Bool)perVertexLightingEnabled;
@property(nonatomic) union _GLKVector4 constantColor; // @synthesize constantColor=_constantColor;
@property(readonly, nonatomic) GLKEffectPropertyFog *fog; // @synthesize fog=_fog;
@property(readonly, nonatomic) GLKEffectPropertyTexture *texture2d1; // @synthesize texture2d1=_texture2d1;
@property(readonly, nonatomic) GLKEffectPropertyTexture *texture2d0; // @synthesize texture2d0=_texture2d0;
@property(readonly, nonatomic) GLKEffectPropertyMaterial *material; // @synthesize material=_material;
@property(readonly, nonatomic) GLKEffectPropertyLight *light2; // @synthesize light2=_light2;
@property(readonly, nonatomic) GLKEffectPropertyLight *light1; // @synthesize light1=_light1;
@property(readonly, nonatomic) GLKEffectPropertyLight *light0; // @synthesize light0=_light0;
- (id)init;

@end

@interface GLKDisplayLinkMessenger : NSObject
{
    id _target;
}

- (void)message;
- (void)setTarget:(id)arg1;

@end

@interface GLKEffect : NSObject
{
    NSMutableArray *_properties;
    unsigned char _colorMaterialEnabled;
    unsigned char _lightModelTwoSided;
    union _GLKVector4 _lightModelAmbientColor;
    unsigned char _texturingEnabled;
    NSArray *_textureOrder;
    NSString *_label;
    unsigned char _perVertexLightingEnabled;
    unsigned char _perPixelLightingEnabled;
    unsigned char _masksInitialized;
    _Bool _textureOrderStale;
    unsigned int _numLights;
    unsigned int _numTextures;
    int _aColorLoc;
    unsigned int _vshName;
    unsigned int _fshName;
    unsigned int _programName;
    unsigned int _numVshStrings;
    unsigned int _numFshStrings;
    int _lightModelAmbientColorLoc;
    int _baseLightingColorLoc;
    NSMutableDictionary *_programHash;
    float *_materialAmbientColor;
    float *_materialDiffuseColor;
    id *_effectShaderArray;
    NSMutableArray *_lightProperties;
    GLKShaderBlockNode *_vshRootNode;
    GLKShaderBlockNode *_fshRootNode;
    char **_vshStrings;
    char **_fshStrings;
    unsigned long long _dirtyUniforms;
    struct GLKBigInt_s *_fshMask;
    struct GLKBigInt_s *_vshMask;
    union _GLKVector4 _baseLightingColor;
    struct GLKBigInt_s _prevFshMask;
    struct GLKBigInt_s _prevVshMask;
}

+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
+ (id)shaderInfoLogForName:(unsigned int)arg1 effectLabel:(id)arg2 msg:(const char *)arg3;
+ (id)programInfoLogForName:(unsigned int)arg1 effectLabel:(id)arg2 msg:(const char *)arg3;
+ (void)unrollLoopNodesForStaticTreeWithRoot:(id)arg1;
+ (_Bool)parseXMLFile:(id)arg1 rootNode:(id)arg2;
+ (void)initializeStaticMasks;
+ (void)initialize;
@property(nonatomic) struct GLKBigInt_s prevVshMask; // @synthesize prevVshMask=_prevVshMask;
@property(nonatomic) struct GLKBigInt_s prevFshMask; // @synthesize prevFshMask=_prevFshMask;
@property(nonatomic) struct GLKBigInt_s *vshMask; // @synthesize vshMask=_vshMask;
@property(nonatomic) struct GLKBigInt_s *fshMask; // @synthesize fshMask=_fshMask;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(nonatomic) int baseLightingColorLoc; // @synthesize baseLightingColorLoc=_baseLightingColorLoc;
@property(nonatomic) int lightModelAmbientColorLoc; // @synthesize lightModelAmbientColorLoc=_lightModelAmbientColorLoc;
@property(nonatomic) _Bool textureOrderStale; // @synthesize textureOrderStale=_textureOrderStale;
@property(nonatomic) unsigned long long dirtyUniforms; // @synthesize dirtyUniforms=_dirtyUniforms;
@property(nonatomic) unsigned int numFshStrings; // @synthesize numFshStrings=_numFshStrings;
@property(nonatomic) unsigned int numVshStrings; // @synthesize numVshStrings=_numVshStrings;
@property(nonatomic) char **fshStrings; // @synthesize fshStrings=_fshStrings;
@property(nonatomic) char **vshStrings; // @synthesize vshStrings=_vshStrings;
@property(nonatomic) unsigned int programName; // @synthesize programName=_programName;
@property(nonatomic) unsigned int fshName; // @synthesize fshName=_fshName;
@property(nonatomic) unsigned int vshName; // @synthesize vshName=_vshName;
@property(readonly, nonatomic) GLKShaderBlockNode *fshRootNode; // @synthesize fshRootNode=_fshRootNode;
@property(readonly, nonatomic) GLKShaderBlockNode *vshRootNode; // @synthesize vshRootNode=_vshRootNode;
@property(copy, nonatomic) NSArray *textureOrder; // @synthesize textureOrder=_textureOrder;
@property(retain, nonatomic) NSMutableArray *lightProperties; // @synthesize lightProperties=_lightProperties;
@property(nonatomic) id *effectShaderArray; // @synthesize effectShaderArray=_effectShaderArray;
@property(nonatomic) int aColorLoc; // @synthesize aColorLoc=_aColorLoc;
@property(nonatomic) unsigned char masksInitialized; // @synthesize masksInitialized=_masksInitialized;
@property(nonatomic) union _GLKVector4 baseLightingColor; // @synthesize baseLightingColor=_baseLightingColor;
@property(readonly, nonatomic) float *materialDiffuseColor; // @synthesize materialDiffuseColor=_materialDiffuseColor;
@property(readonly, nonatomic) float *materialAmbientColor; // @synthesize materialAmbientColor=_materialAmbientColor;
@property(nonatomic) unsigned char texturingEnabled; // @synthesize texturingEnabled=_texturingEnabled;
@property(nonatomic) union _GLKVector4 lightModelAmbientColor; // @synthesize lightModelAmbientColor=_lightModelAmbientColor;
@property(nonatomic) unsigned char lightModelTwoSided; // @synthesize lightModelTwoSided=_lightModelTwoSided;
@property(nonatomic) unsigned char colorMaterialEnabled; // @synthesize colorMaterialEnabled=_colorMaterialEnabled;
@property(nonatomic) unsigned int numTextures; // @synthesize numTextures=_numTextures;
@property(nonatomic) unsigned int numLights; // @synthesize numLights=_numLights;
@property(nonatomic) unsigned char perPixelLightingEnabled; // @synthesize perPixelLightingEnabled=_perPixelLightingEnabled;
@property(nonatomic) unsigned char perVertexLightingEnabled; // @synthesize perVertexLightingEnabled=_perVertexLightingEnabled;
@property(readonly, nonatomic) NSMutableDictionary *programHash; // @synthesize programHash=_programHash;
@property(retain, nonatomic) NSMutableArray *properties; // @synthesize properties=_properties;
- (void)dealloc;
- (char **)fshMaskStr;
- (char **)vshMaskStr;
- (unsigned int)fshMaskCt;
- (unsigned int)vshMaskCt;
- (struct GLKBigInt_s *)fshMasks;
- (struct GLKBigInt_s *)vshMasks;
- (id)description;
- (_Bool)includeVshShaderTextForRootNode:(id)arg1;
- (_Bool)includeFshShaderTextForRootNode:(id)arg1;
- (_Bool)includeShaderTextForRootNode:(id)arg1;
- (void)initializeMasks;
- (void)bind;
- (void)createAndUseProgramWithShadingHash:(id)arg1;
- (void)updateFshStringsWithRoot:(id)arg1 enabled:(struct GLKBigInt_s)arg2;
- (void)updateVshStringsWithRoot:(id)arg1 enabled:(struct GLKBigInt_s)arg2;
- (void)setShaderBindings;
- (_Bool)useColorAttrib;
- (_Bool)useTexCoordAttrib;
- (void)setTextureIndices;
- (void)addTransformProperty;
- (void)dirtyAllUniforms;
- (id)initWithPropertyArray:(id)arg1;
- (id)init;

@end

@interface GLKEffectProperty : NSObject
{
    int _location;
    char *_nameString;
    struct GLKEffectPropertyPrv *_prv;
    unsigned char _masksInitialized;
    char *_vshSource;
    char *_fshSource;
    unsigned long long _dirtyUniforms;
    GLKEffect *_effect;
}

+ (void)logSetMasksWithLabel:(id)arg1 obj:(id)arg2 typeStr:(id)arg3;
+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(nonatomic) GLKEffect *effect; // @synthesize effect=_effect;
@property(nonatomic) unsigned char masksInitialized; // @synthesize masksInitialized=_masksInitialized;
@property(nonatomic) unsigned long long dirtyUniforms; // @synthesize dirtyUniforms=_dirtyUniforms;
@property(nonatomic) char *fshSource; // @synthesize fshSource=_fshSource;
@property(nonatomic) char *vshSource; // @synthesize vshSource=_vshSource;
@property(nonatomic) char *nameString; // @synthesize nameString=_nameString;
@property(nonatomic) int location; // @synthesize location=_location;
- (void)dealloc;
- (struct GLKBigInt_s *)fshMask;
- (struct GLKBigInt_s *)vshMask;
- (void)dirtyAllUniforms;
- (void)bind;
- (void)initializeMasks;
- (void)setMasks;
- (_Bool)includeFshShaderTextForRootNode:(id)arg1;
- (_Bool)includeVshShaderTextForRootNode:(id)arg1;
- (void)setShaderBindings;
- (void)setFSHSource:(char *)arg1;
- (void)setVSHSource:(char *)arg1;
- (id)init;

@end

@interface GLKEffectPropertyConstantColor : GLKEffectProperty
{
    union _GLKVector4 _color;
    unsigned char _enabled;
}

+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(nonatomic) unsigned char enabled; // @synthesize enabled=_enabled;
@property(nonatomic) union _GLKVector4 color; // @synthesize color=_color;
- (void)dealloc;
- (id)description;
- (void)bind;
- (void)setShaderBindings;
- (void)dirtyAllUniforms;
- (id)init;

@end

@interface GLKEffectPropertyFog : GLKEffectProperty
{
    unsigned char _enabled;
    int _mode;
    union _GLKVector4 _color;
    float _density;
    float _start;
    float _end;
    int _modeLoc;
    int _colorLoc;
    int _densityLoc;
    int _startLoc;
    int _endLoc;
}

+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(nonatomic) int endLoc; // @synthesize endLoc=_endLoc;
@property(nonatomic) int startLoc; // @synthesize startLoc=_startLoc;
@property(nonatomic) int densityLoc; // @synthesize densityLoc=_densityLoc;
@property(nonatomic) int colorLoc; // @synthesize colorLoc=_colorLoc;
@property(nonatomic) int modeLoc; // @synthesize modeLoc=_modeLoc;
@property(nonatomic) float end; // @synthesize end=_end;
@property(nonatomic) float start; // @synthesize start=_start;
@property(nonatomic) float density; // @synthesize density=_density;
@property(nonatomic) union _GLKVector4 color; // @synthesize color=_color;
@property(nonatomic) int mode; // @synthesize mode=_mode;
@property(nonatomic) unsigned char enabled; // @synthesize enabled=_enabled;
- (void)dealloc;
- (id)description;
- (void)bind;
- (void)setShaderBindings;
- (_Bool)includeFshShaderTextForRootNode:(id)arg1;
- (_Bool)includeVshShaderTextForRootNode:(id)arg1;
- (void)initializeMasks;
- (void)dirtyAllUniforms;
- (id)init;

@end

@interface GLKEffectPropertyLight : GLKEffectProperty
{
    unsigned char _enabled;
    union _GLKVector4 _position;
    union _GLKVector4 _ambientColor;
    union _GLKVector4 _diffuseColor;
    union _GLKVector4 _specularColor;
    union _GLKVector3 _spotDirection;
    float _spotExponent;
    float _spotCutoff;
    float _constantAttenuation;
    float _linearAttenuation;
    float _quadraticAttenuation;
    GLKEffectPropertyTransform *_transform;
    unsigned char _positionEyeStale;
    unsigned char _firstLight;
    float _spotCutoffDegrees;
    int _positionEyeLoc;
    int _ambientLoc;
    int _diffuseLoc;
    int _specularLoc;
    int _normalizedSpotDirectionEyeLoc;
    int _spotExponentLoc;
    int _spotCutoffLoc;
    int _constantAttenuationLoc;
    int _linearAttenuationLoc;
    int _quadraticAttenuationLoc;
    int _normalizeLoc;
    int _ambientTermLoc;
    int _lightIndex;
    int _lightingType;
    unsigned long long *_effectDirtyUniforms;
    union _GLKVector3 _normalizedSpotDirectionEye;
    union _GLKVector4 _positionEye;
    struct GLKBigInt_s _allVshMasks;
    struct GLKBigInt_s _allFshMasks;
}

+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(readonly, nonatomic) struct GLKBigInt_s allFshMasks; // @synthesize allFshMasks=_allFshMasks;
@property(readonly, nonatomic) struct GLKBigInt_s allVshMasks; // @synthesize allVshMasks=_allVshMasks;
@property(nonatomic) unsigned char firstLight; // @synthesize firstLight=_firstLight;
@property(nonatomic) int lightingType; // @synthesize lightingType=_lightingType;
@property(nonatomic) int lightIndex; // @synthesize lightIndex=_lightIndex;
@property(nonatomic) int ambientTermLoc; // @synthesize ambientTermLoc=_ambientTermLoc;
@property(nonatomic) int normalizeLoc; // @synthesize normalizeLoc=_normalizeLoc;
@property(nonatomic) int quadraticAttenuationLoc; // @synthesize quadraticAttenuationLoc=_quadraticAttenuationLoc;
@property(nonatomic) int linearAttenuationLoc; // @synthesize linearAttenuationLoc=_linearAttenuationLoc;
@property(nonatomic) int constantAttenuationLoc; // @synthesize constantAttenuationLoc=_constantAttenuationLoc;
@property(nonatomic) int spotCutoffLoc; // @synthesize spotCutoffLoc=_spotCutoffLoc;
@property(nonatomic) int spotExponentLoc; // @synthesize spotExponentLoc=_spotExponentLoc;
@property(nonatomic) int normalizedSpotDirectionEyeLoc; // @synthesize normalizedSpotDirectionEyeLoc=_normalizedSpotDirectionEyeLoc;
@property(nonatomic) int specularLoc; // @synthesize specularLoc=_specularLoc;
@property(nonatomic) int diffuseLoc; // @synthesize diffuseLoc=_diffuseLoc;
@property(nonatomic) int ambientLoc; // @synthesize ambientLoc=_ambientLoc;
@property(nonatomic) int positionEyeLoc; // @synthesize positionEyeLoc=_positionEyeLoc;
@property(nonatomic) unsigned char positionEyeStale; // @synthesize positionEyeStale=_positionEyeStale;
@property(retain, nonatomic) GLKEffectPropertyTransform *transform; // @synthesize transform=_transform;
@property(nonatomic) unsigned long long *effectDirtyUniforms; // @synthesize effectDirtyUniforms=_effectDirtyUniforms;
@property(nonatomic) float quadraticAttenuation; // @synthesize quadraticAttenuation=_quadraticAttenuation;
@property(nonatomic) float linearAttenuation; // @synthesize linearAttenuation=_linearAttenuation;
@property(nonatomic) float constantAttenuation; // @synthesize constantAttenuation=_constantAttenuation;
@property(nonatomic) float spotCutoffDegrees; // @synthesize spotCutoffDegrees=_spotCutoffDegrees;
@property(nonatomic) float spotExponent; // @synthesize spotExponent=_spotExponent;
@property(nonatomic) union _GLKVector3 normalizedSpotDirectionEye; // @synthesize normalizedSpotDirectionEye=_normalizedSpotDirectionEye;
@property(nonatomic) union _GLKVector3 spotDirection; // @synthesize spotDirection=_spotDirection;
@property(nonatomic) union _GLKVector4 specularColor; // @synthesize specularColor=_specularColor;
@property(nonatomic) union _GLKVector4 diffuseColor; // @synthesize diffuseColor=_diffuseColor;
@property(nonatomic) union _GLKVector4 ambientColor; // @synthesize ambientColor=_ambientColor;
@property(nonatomic) union _GLKVector4 positionEye; // @synthesize positionEye=_positionEye;
@property(nonatomic) union _GLKVector4 position; // @synthesize position=_position;
@property(nonatomic) unsigned char enabled; // @synthesize enabled=_enabled;
- (void)dealloc;
- (id)description;
- (void)bind;
@property(readonly, nonatomic) unsigned char isAttenuated;
@property(readonly, nonatomic) unsigned char isSpot;
- (_Bool)includeFshShaderTextForRootNode:(id)arg1;
- (_Bool)includeVshShaderTextForRootNode:(id)arg1;
@property(nonatomic) float spotCutoff; // @synthesize spotCutoff=_spotCutoff;
- (void)setNormalize:(unsigned char)arg1;
- (void)setShaderBindings;
- (void)initializeMasks;
- (void)setGLDefaults;
- (void)dirtyAllUniforms;
- (id)initWithTransform:(id)arg1 lightingType:(int)arg2 firstLight:(unsigned char)arg3;

@end

@interface GLKEffectPropertyMaterial : GLKEffectProperty
{
    union _GLKVector4 _ambientColor;
    union _GLKVector4 _diffuseColor;
    union _GLKVector4 _specularColor;
    union _GLKVector4 _emissiveColor;
    float _shininess;
    int _ambientColorLoc;
    int _diffuseColorLoc;
    int _specularColorLoc;
    int _emissiveColorLoc;
    int _shininessLoc;
    unsigned long long *_effectDirtyUniforms;
    struct GLKBigInt_s _colorMaterialEnabledMask;
}

+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(nonatomic) struct GLKBigInt_s _colorMaterialEnabledMask; // @synthesize _colorMaterialEnabledMask;
@property(nonatomic) int _shininessLoc; // @synthesize _shininessLoc;
@property(nonatomic) int _emissiveColorLoc; // @synthesize _emissiveColorLoc;
@property(nonatomic) int _specularColorLoc; // @synthesize _specularColorLoc;
@property(nonatomic) int _diffuseColorLoc; // @synthesize _diffuseColorLoc;
@property(nonatomic) int _ambientColorLoc; // @synthesize _ambientColorLoc;
@property(nonatomic) unsigned long long *effectDirtyUniforms; // @synthesize effectDirtyUniforms=_effectDirtyUniforms;
@property(nonatomic) float shininess; // @synthesize shininess=_shininess;
@property(nonatomic) union _GLKVector4 emissiveColor; // @synthesize emissiveColor=_emissiveColor;
@property(nonatomic) union _GLKVector4 specularColor; // @synthesize specularColor=_specularColor;
@property(nonatomic) union _GLKVector4 diffuseColor; // @synthesize diffuseColor=_diffuseColor;
@property(nonatomic) union _GLKVector4 ambientColor; // @synthesize ambientColor=_ambientColor;
- (void)dealloc;
- (id)description;
- (void)bind;
- (_Bool)includeFshShaderTextForRootNode:(id)arg1;
- (_Bool)includeVshShaderTextForRootNode:(id)arg1;
- (void)setShaderBindings;
- (void)initializeMasks;
- (void)dirtyAllUniforms;
- (id)init;

@end

@interface GLKEffectPropertyTexGen : GLKEffectProperty
{
    int _mode;
    float *_plane;
    int _coord;
    int _modeLoc;
    int _planeLoc;
    int _eyePlaneByInvModelviewLoc;
    unsigned int _textureIndex;
    float *_eyePlaneByInvModelview;
    char *_modeNameString;
    char *_planeNameString;
}

@property(nonatomic) unsigned int textureIndex; // @synthesize textureIndex=_textureIndex;
@property(nonatomic) char *planeNameString; // @synthesize planeNameString=_planeNameString;
@property(nonatomic) char *modeNameString; // @synthesize modeNameString=_modeNameString;
@property(nonatomic) int eyePlaneByInvModelviewLoc; // @synthesize eyePlaneByInvModelviewLoc=_eyePlaneByInvModelviewLoc;
@property(nonatomic) int planeLoc; // @synthesize planeLoc=_planeLoc;
@property(nonatomic) int modeLoc; // @synthesize modeLoc=_modeLoc;
@property(nonatomic) float *eyePlaneByInvModelview; // @synthesize eyePlaneByInvModelview=_eyePlaneByInvModelview;
@property(readonly, nonatomic) int coord; // @synthesize coord=_coord;
@property(nonatomic) float *plane; // @synthesize plane=_plane;
@property(nonatomic) int mode; // @synthesize mode=_mode;
- (void)dealloc;
- (void)bind;
- (void)initializeMasks;
- (void)setShaderBindings;
- (void)dirtyAllUniforms;
- (id)initWithMode:(int)arg1 coord:(int)arg2;
- (id)init;

@end

@interface GLKEffectPropertyTexture : GLKEffectProperty
{
    unsigned char _enabled;
    unsigned int _name;
    unsigned int _target;
    int _envMode;
    unsigned char _matrixEnabled;
    int _textureIndex;
    int _unit2dLoc;
    int _unitCubeLoc;
    NSString *_filePath;
    char *_unit2dNameString;
    char *_unitCubeNameString;
    NSMutableArray *_texGenArray;
    GLKEffectPropertyTexGen *_texGenS;
    GLKEffectPropertyTexGen *_texGenT;
    GLKEffectPropertyTexGen *_texGenR;
    struct GLKBigInt_s _allFshMasks;
}

+ (void)clearAllTexturingMasks:(struct GLKBigInt_s *)arg1 fshMask:(struct GLKBigInt_s *)arg2;
+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(readonly, nonatomic) struct GLKBigInt_s allFshMasks; // @synthesize allFshMasks=_allFshMasks;
@property(readonly, nonatomic) NSMutableArray *texGenArray; // @synthesize texGenArray=_texGenArray;
@property(nonatomic) int unitCubeLoc; // @synthesize unitCubeLoc=_unitCubeLoc;
@property(nonatomic) int unit2dLoc; // @synthesize unit2dLoc=_unit2dLoc;
@property(nonatomic) unsigned int name; // @synthesize name=_name;
@property(nonatomic) char *unitCubeNameString; // @synthesize unitCubeNameString=_unitCubeNameString;
@property(nonatomic) char *unit2dNameString; // @synthesize unit2dNameString=_unit2dNameString;
@property(nonatomic) int envMode; // @synthesize envMode=_envMode;
@property(nonatomic) unsigned char matrixEnabled; // @synthesize matrixEnabled=_matrixEnabled;
@property(nonatomic) int textureIndex; // @synthesize textureIndex=_textureIndex;
@property(readonly, nonatomic) NSString *filePath; // @synthesize filePath=_filePath;
@property(nonatomic) unsigned char enabled; // @synthesize enabled=_enabled;
@property(nonatomic) unsigned int target; // @synthesize target=_target;
- (void)dealloc;
- (void)bind;
- (id)description;
@property(readonly, nonatomic) unsigned char useTexCoordAttribMask;
@property(readonly, nonatomic) unsigned char vNormalEyeMask;
@property(readonly, nonatomic) unsigned char vPositionEyeMask;
@property(readonly, nonatomic) unsigned char normalizedNormalsMask;
- (void)initializeMasks;
- (_Bool)includeFshShaderTextForRootNode:(id)arg1;
- (_Bool)includeVshShaderTextForRootNode:(id)arg1;
- (void)setShaderBindings;
@property(readonly, nonatomic) GLKEffectPropertyTexGen *texGenR; // @synthesize texGenR=_texGenR;
@property(readonly, nonatomic) GLKEffectPropertyTexGen *texGenT; // @synthesize texGenT=_texGenT;
@property(readonly, nonatomic) GLKEffectPropertyTexGen *texGenS; // @synthesize texGenS=_texGenS;
- (void)dirtyAllUniforms;
- (id)init;

@end

@interface GLKEffectPropertyTransform : GLKEffectProperty
{
    union _GLKMatrix4 _modelviewMatrix;
    union _GLKMatrix4 _projectionMatrix;
    union _GLKMatrix3 _normalMatrix;
    int _mvpMatrixLoc;
    int _modelviewMatrixLoc;
    int _projectionMatrixLoc;
    int _normalMatrixLoc;
    int _invModelviewMatrixLoc;
    union _GLKMatrix4 _invModelviewMatrix;
    union _GLKMatrix4 _mvpMatrix;
}

+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
@property(nonatomic) int invModelviewMatrixLoc; // @synthesize invModelviewMatrixLoc=_invModelviewMatrixLoc;
@property(nonatomic) int normalMatrixLoc; // @synthesize normalMatrixLoc=_normalMatrixLoc;
@property(nonatomic) int projectionMatrixLoc; // @synthesize projectionMatrixLoc=_projectionMatrixLoc;
@property(nonatomic) int modelviewMatrixLoc; // @synthesize modelviewMatrixLoc=_modelviewMatrixLoc;
@property(nonatomic) int mvpMatrixLoc; // @synthesize mvpMatrixLoc=_mvpMatrixLoc;
@property(nonatomic) union _GLKMatrix4 mvpMatrix; // @synthesize mvpMatrix=_mvpMatrix;
@property(nonatomic) union _GLKMatrix4 invModelviewMatrix; // @synthesize invModelviewMatrix=_invModelviewMatrix;
@property(nonatomic) union _GLKMatrix4 projectionMatrix; // @synthesize projectionMatrix=_projectionMatrix;
@property(nonatomic) union _GLKMatrix4 modelviewMatrix; // @synthesize modelviewMatrix=_modelviewMatrix;
- (void)dealloc;
- (id)description;
- (void)bind;
@property(readonly, nonatomic) union _GLKMatrix3 normalMatrix; // @synthesize normalMatrix=_normalMatrix;
- (void)setShaderBindings;
- (void)loadMatrix:(int)arg1 matrix:(union _GLKMatrix4)arg2;
- (void)loadIdentity:(int)arg1;
- (void)dirtyAllUniforms;
- (id)init;

@end

@interface GLKHashableBigInt : NSObject <NSCopying>
{
    struct GLKBigInt_s _bigInt;
}

- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithBigInt:(struct GLKBigInt_s *)arg1;

@end

@interface GLKReflectionMapEffect : GLKBaseEffect <GLKNamedEffect>
{
    GLKEffectPropertyTexture *_textureCubeMap;
    union _GLKMatrix3 _matrix;
    _Bool _dirtyUniforms;
    int _matrixLoc;
}

@property(nonatomic) int matrixLoc; // @synthesize matrixLoc=_matrixLoc;
@property(nonatomic) union _GLKMatrix3 matrix; // @synthesize matrix=_matrix;
@property(nonatomic) _Bool dirtyUniforms; // @synthesize dirtyUniforms=_dirtyUniforms;
@property(readonly, nonatomic) GLKEffectPropertyTexture *textureCubeMap; // @synthesize textureCubeMap=_textureCubeMap;
- (id)description;
- (void)dealloc;
- (void)prepareToDraw;
- (id)init;

@end

@interface GLKShaderBlockNode : NSObject <NSXMLParserDelegate, NSCopying>
{
    struct GLKBigInt_s _mask;
    GLKShaderBlockNode *_parent;
    GLKShaderBlockNode *_next;
    GLKShaderBlockNode *_children;
    NSString *_label;
    NSString *_loopVar;
    int _type;
    int _unrollCt;
    unsigned int _index;
    NSMutableString *_blockText;
    int _propertyClass;
    _Bool _indexedMask;
}

+ (void)printTreeVerbose:(id)arg1;
+ (void)printTree:(id)arg1;
+ (void)setIndicesForRoot:(id)arg1 andReplaceLoopVar:(id)arg2 baseLabel:(id)arg3 basePropertyClass:(int)arg4 usingIndex:(unsigned int)arg5 indexString:(id)arg6;
+ (unsigned int)nodeCt:(id)arg1 nodeCt:(unsigned int *)arg2;
+ (void)insertNode:(id)arg1 afterSibling:(id)arg2;
+ (void)buildUnrollNodeArray:(id)arg1 array:(id)arg2;
+ (void)setMasksWithRoot:(id)arg1 treeRoot:(id)arg2 mask:(struct GLKBigInt_s *)arg3;
+ (struct GLKBigInt_s)maskForLabel:(id)arg1 root:(id)arg2 index:(int)arg3;
+ (id)copyTreeWithRootButNotSiblings:(id)arg1 parent:(id)arg2;
+ (id)copyTreeWithRoot:(id)arg1 parent:(id)arg2;
@property(nonatomic) _Bool indexedMask; // @synthesize indexedMask=_indexedMask;
@property(nonatomic) unsigned int index; // @synthesize index=_index;
@property(nonatomic) int propertyClass; // @synthesize propertyClass=_propertyClass;
@property(retain, nonatomic) NSMutableString *blockText; // @synthesize blockText=_blockText;
@property(nonatomic) int unrollCt; // @synthesize unrollCt=_unrollCt;
@property(nonatomic) struct GLKBigInt_s mask; // @synthesize mask=_mask;
@property(nonatomic) GLKShaderBlockNode *children; // @synthesize children=_children;
@property(nonatomic) GLKShaderBlockNode *next; // @synthesize next=_next;
@property(nonatomic) GLKShaderBlockNode *parent; // @synthesize parent=_parent;
@property(nonatomic) int type; // @synthesize type=_type;
@property(copy, nonatomic) NSString *loopVar; // @synthesize loopVar=_loopVar;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
- (void)dealloc;
@property(readonly, copy) NSString *description;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 foundCharacters:(id)arg2;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface GLKShadingHash : NSObject
{
    NSObject<OS_dispatch_queue> *_vshQueue;
    NSObject<OS_dispatch_queue> *_fshQueue;
    NSMutableDictionary *_compiledVshs;
    NSMutableDictionary *_compiledFshs;
}

- (void)dealloc;
- (id)compiledFshForKey:(id)arg1;
- (void)setCompiledFsh:(id)arg1 forKey:(id)arg2;
- (id)compiledVshForKey:(id)arg1;
- (void)setCompiledVsh:(id)arg1 forKey:(id)arg2;
- (void)purgeAllShaders;
- (id)init;

@end

@interface GLKSkyboxEffect : NSObject <GLKNamedEffect>
{
    union _GLKVector3 _center;
    float _xSize;
    float _ySize;
    float _zSize;
    GLKEffectPropertyTexture *_textureCubeMap;
    GLKEffectPropertyTransform *_transform;
    NSString *_label;
    unsigned char _effectStale;
    unsigned char _centerChanged;
    unsigned int _vao;
    unsigned int _positionVBO;
    unsigned int _texCoordVBO;
    unsigned int _programName;
    NSMutableArray *_propertyArray;
    GLKEffect *_effect;
}

@property(nonatomic) unsigned char centerChanged; // @synthesize centerChanged=_centerChanged;
@property(readonly, nonatomic) GLKEffectPropertyTransform *transform; // @synthesize transform=_transform;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(nonatomic) unsigned int programName; // @synthesize programName=_programName;
@property(nonatomic) GLKEffect *effect; // @synthesize effect=_effect;
@property(nonatomic) unsigned char effectStale; // @synthesize effectStale=_effectStale;
@property(readonly, nonatomic) NSMutableArray *propertyArray; // @synthesize propertyArray=_propertyArray;
@property(nonatomic) unsigned int texCoordVBO; // @synthesize texCoordVBO=_texCoordVBO;
@property(nonatomic) unsigned int positionVBO; // @synthesize positionVBO=_positionVBO;
@property(nonatomic) unsigned int vao; // @synthesize vao=_vao;
@property(readonly, nonatomic) GLKEffectPropertyTexture *textureCubeMap; // @synthesize textureCubeMap=_textureCubeMap;
@property(nonatomic) float zSize; // @synthesize zSize=_zSize;
@property(nonatomic) float ySize; // @synthesize ySize=_ySize;
@property(nonatomic) float xSize; // @synthesize xSize=_xSize;
@property(nonatomic) union _GLKVector3 center; // @synthesize center=_center;
- (id)description;
- (void)dealloc;
- (void)draw;
- (void)prepareToDraw;
- (void)updateSkyboxEffect;
- (void)createAndBindVAOWithPositions:(float *)arg1 texCoords:(float *)arg2;
- (id)init;

@end

@interface GLKTexture : NSObject
{
    NSData *imageData;
    struct CGImageBlockSet *_blockSet;
    struct __CFData *_cfData;
    unsigned int _width;
    unsigned int _height;
    unsigned int orientation;
    unsigned int numMipMapLevels;
    unsigned int bitsPerPixel;
    unsigned int _rowBytes;
    unsigned int nComponents;
    unsigned int nPrimarySurfaces;
    unsigned int nSurfaces;
    int loadMode;
    int texelFormat;
    int _dataCategory;
    unsigned int _index;
    unsigned int GLTextureName;
    unsigned int bindTarget;
    unsigned int textureTarget;
    unsigned int internalFormat;
    unsigned int format;
    unsigned int type;
    int _unpackAlignment;
    _Bool _requestIssuedForAlphaPremultiplication;
    _Bool _requestIssuedForMipmapGeneration;
    _Bool _requestIssuedToReorientToGL;
    _Bool _requestIssuedToInterpretGrayAsAlpha;
    _Bool _requestIssuedForSRGB;
    _Bool _hasPremultipliedAlpha;
    _Bool isPowerOfTwo;
    _Bool _isCubeMap;
    _Bool isMipmapped;
    _Bool isVerticalFlipped;
    _Bool hasAlpha;
    _Bool reOrient;
    unsigned int _primarySurfaceLength;
    NSString *_label;
}

@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(nonatomic) _Bool reOrient; // @synthesize reOrient;
@property(nonatomic) _Bool hasAlpha; // @synthesize hasAlpha;
@property(nonatomic) _Bool isVerticalFlipped; // @synthesize isVerticalFlipped;
@property(nonatomic) _Bool isMipmapped; // @synthesize isMipmapped;
@property(nonatomic) _Bool isCubeMap; // @synthesize isCubeMap=_isCubeMap;
@property(nonatomic) _Bool isPowerOfTwo; // @synthesize isPowerOfTwo;
@property(readonly) _Bool hasPremultipliedAlpha; // @synthesize hasPremultipliedAlpha=_hasPremultipliedAlpha;
@property(nonatomic) unsigned int nSurfaces; // @synthesize nSurfaces;
@property(nonatomic) unsigned int nPrimarySurfaces; // @synthesize nPrimarySurfaces;
@property(nonatomic) unsigned int nComponents; // @synthesize nComponents;
@property(nonatomic) unsigned int rowBytes; // @synthesize rowBytes=_rowBytes;
@property(nonatomic) unsigned int bitsPerPixel; // @synthesize bitsPerPixel;
@property(nonatomic) unsigned int numMipMapLevels; // @synthesize numMipMapLevels;
@property(nonatomic) unsigned int orientation; // @synthesize orientation;
@property(nonatomic) unsigned int height; // @synthesize height=_height;
@property(nonatomic) unsigned int width; // @synthesize width=_width;
@property(nonatomic) unsigned int type; // @synthesize type;
@property(nonatomic) int texelFormat; // @synthesize texelFormat;
@property(nonatomic) unsigned int format; // @synthesize format;
@property(nonatomic) unsigned int internalFormat; // @synthesize internalFormat;
@property(nonatomic) unsigned int textureTarget; // @synthesize textureTarget;
@property(nonatomic) unsigned int bindTarget; // @synthesize bindTarget;
@property(nonatomic) unsigned int index; // @synthesize index=_index;
@property(nonatomic) int dataCategory; // @synthesize dataCategory=_dataCategory;
@property(nonatomic) int loadMode; // @synthesize loadMode;
@property(nonatomic) unsigned int GLTextureName; // @synthesize GLTextureName;
@property(readonly) NSData *imageData; // @synthesize imageData;
- (_Bool)premultiplyWithAlpha:(void *)arg1 source:(void *)arg2 withWidth:(unsigned int)arg3 withHeight:(unsigned int)arg4 withRowBytes:(unsigned int)arg5 error:(id *)arg6;
- (_Bool)reorientToGL:(void *)arg1 source:(void *)arg2 withWidth:(unsigned int)arg3 withHeight:(unsigned int)arg4 withRowBytes:(unsigned int)arg5 error:(id *)arg6;
- (_Bool)determinePVRFormat:(unsigned int)arg1;
- (_Bool)determineCGImageBlockFormatWithComponentType:(int)arg1 andPixelSize:(unsigned long long)arg2 andColorModel:(int)arg3;
- (_Bool)uploadToGLTexture:(unsigned int)arg1 error:(id *)arg2;
- (_Bool)_uploadToGLTexture:(unsigned int)arg1 data:(id)arg2 width:(int)arg3 height:(int)arg4 dataCategory:(int)arg5 cubeMapIndex:(int)arg6 mipMapIndex:(int)arg7 error:(id *)arg8;
- (_Bool)loadCGImage:(struct CGImage *)arg1 options:(id)arg2 error:(id *)arg3;
- (_Bool)loadWithData:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (_Bool)decodeCGImage:(struct CGImage *)arg1;
- (_Bool)decodeCGImageImageProvider:(struct CGImage *)arg1 CGImageProvider:(struct CGImageProvider *)arg2;
- (_Bool)decodeCGImageDataProvider:(struct CGImage *)arg1;
- (void *)alignmentFix:(unsigned int)arg1 data:(const void *)arg2;
- (_Bool)loadPVRTCData:(id)arg1 error:(id *)arg2;
- (id)initWithDecodedData:(id)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3 rowBytes:(unsigned int)arg4 texture:(id)arg5 cubeMapIndex:(int)arg6 options:(id)arg7 error:(id *)arg8;
- (id)initWithCGImage:(struct CGImage *)arg1 forceCubeMap:(_Bool)arg2 wasCubeMap:(_Bool *)arg3 cubeMapIndex:(int)arg4 options:(id)arg5 error:(id *)arg6;
- (id)initWithData:(id)arg1 forceCubeMap:(_Bool)arg2 wasCubeMap:(_Bool *)arg3 cubeMapIndex:(int)arg4 options:(id)arg5 error:(id *)arg6;
- (_Bool)canHonorSRGBrequest;
- (_Bool)shouldApplyReorientToGL;
- (_Bool)shouldApplyPremultiplication;
- (void)updateRequestedOperationsFromOptions:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface GLKTextureInfo : NSObject <NSCopying>
{
    unsigned int name;
    unsigned int target;
    unsigned int width;
    unsigned int height;
    int alphaState;
    int textureOrigin;
    _Bool containsMipmaps;
}

@property(readonly) _Bool containsMipmaps; // @synthesize containsMipmaps;
@property(readonly) int textureOrigin; // @synthesize textureOrigin;
@property(readonly) int alphaState; // @synthesize alphaState;
@property(readonly) unsigned int height; // @synthesize height;
@property(readonly) unsigned int width; // @synthesize width;
@property(readonly) unsigned int target; // @synthesize target;
@property(readonly) unsigned int name; // @synthesize name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)description;
- (id)initWithTexture:(id)arg1 textureName:(unsigned int)arg2;

@end

@interface GLKTextureLoader : NSObject
{
    EAGLContext *_glContext;
    NSLock *_nsLock;
}

+ (id)cubeMapWithContentsOfURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)cubeMapWithContentsOfFile:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)cubeMapWithContentsOfFiles:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)textureWithCGImage:(struct CGImage *)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)textureWithContentsOfData:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)textureWithContentsOfURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)textureWithContentsOfFile:(id)arg1 options:(id)arg2 error:(id *)arg3;
+ (id)commonCubeMapWithContentsOfURL:(id)arg1 options:(id)arg2 error:(id *)arg3 lock:(id)arg4 glContext:(id)arg5;
+ (id)commonCubeMapWithContentsOfFiles:(id)arg1 options:(id)arg2 error:(id *)arg3 lock:(id)arg4 glContext:(id)arg5;
+ (id)commonTextureWithCGImage:(struct CGImage *)arg1 options:(id)arg2 error:(id *)arg3 lock:(id)arg4 glContext:(id)arg5;
+ (id)commonTextureWithContentsOfURL:(id)arg1 options:(id)arg2 error:(id *)arg3 lock:(id)arg4 glContext:(id)arg5;
+ (id)commonTextureWithContentsOfData:(id)arg1 options:(id)arg2 error:(id *)arg3 lock:(id)arg4 glContext:(id)arg5;
+ (id)_textureWithTexture:(id)arg1 error:(id *)arg2;
+ (void)unlockAndRestoreContext:(id)arg1 glContext:(id)arg2;
+ (id)lockAndSwitchContext:(id)arg1 glContext:(id)arg2;
@property(retain) NSLock *nsLock; // @synthesize nsLock=_nsLock;
@property(retain) EAGLContext *glContext; // @synthesize glContext=_glContext;
- (void)cubeMapWithContentsOfURL:(id)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)cubeMapWithContentsOfFile:(id)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)cubeMapWithContentsOfFiles:(id)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)textureWithCGImage:(struct CGImage *)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)textureWithContentsOfData:(id)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)textureWithContentsOfURL:(id)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)textureWithContentsOfFile:(id)arg1 options:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (id)initWithSharegroup:(id)arg1;

@end

@interface GLKView : UIView <NSCoding>
{
    _Bool _inDraw;
    _Bool _shouldDeleteFramebuffer;
    _Bool _enableSetNeedsDisplay;
    unsigned int _resolveFramebuffer;
    unsigned int _resolveColorRenderbuffer;
    unsigned int _multisampleFramebuffer;
    unsigned int _multisampleColorRenderbuffer;
    unsigned int _depthRenderbuffer;
    unsigned int _stencilRenderbuffer;
    unsigned int _depthStencilRenderbuffer;
    int _drawableColorFormat;
    int _drawableDepthFormat;
    int _drawableStencilFormat;
    int _drawableMultisample;
    NSMutableDictionary *_drawableProperties;
    id <GLKViewDelegate> _delegate;
    EAGLContext *_context;
    long long _drawableWidth;
    long long _drawableHeight;
    CDUnknownFunctionPointerType _drawRectIMP;
}

+ (Class)layerClass;
@property(nonatomic) CDUnknownFunctionPointerType drawRectIMP; // @synthesize drawRectIMP=_drawRectIMP;
@property(readonly, nonatomic) long long drawableHeight; // @synthesize drawableHeight=_drawableHeight;
@property(readonly, nonatomic) long long drawableWidth; // @synthesize drawableWidth=_drawableWidth;
@property(nonatomic) id <GLKViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned int depthStencilRenderbuffer; // @synthesize depthStencilRenderbuffer=_depthStencilRenderbuffer;
@property(nonatomic) unsigned int stencilRenderbuffer; // @synthesize stencilRenderbuffer=_stencilRenderbuffer;
@property(nonatomic) unsigned int depthRenderbuffer; // @synthesize depthRenderbuffer=_depthRenderbuffer;
@property(nonatomic) unsigned int multisampleColorRenderbuffer; // @synthesize multisampleColorRenderbuffer=_multisampleColorRenderbuffer;
@property(nonatomic) unsigned int multisampleFramebuffer; // @synthesize multisampleFramebuffer=_multisampleFramebuffer;
@property(nonatomic) unsigned int resolveColorRenderbuffer; // @synthesize resolveColorRenderbuffer=_resolveColorRenderbuffer;
@property(nonatomic) unsigned int resolveFramebuffer; // @synthesize resolveFramebuffer=_resolveFramebuffer;
@property(nonatomic) _Bool shouldDeleteFramebuffer; // @synthesize shouldDeleteFramebuffer=_shouldDeleteFramebuffer;
@property(retain, nonatomic) NSMutableDictionary *drawableProperties; // @synthesize drawableProperties=_drawableProperties;
@property(nonatomic) _Bool inDraw; // @synthesize inDraw=_inDraw;
- (void)layoutSubviews;
- (void)setContentScaleFactor:(double)arg1;
- (void)display;
- (_Bool)_controlsOwnScaleFactor;
- (_Bool)_canDrawContent;
- (void)displayLayer:(id)arg1;
@property(nonatomic) _Bool enableSetNeedsDisplay; // @synthesize enableSetNeedsDisplay=_enableSetNeedsDisplay;
@property(readonly) UIImage *snapshot;
- (void)bindDrawable;
@property(nonatomic) int drawableMultisample; // @synthesize drawableMultisample=_drawableMultisample;
@property(nonatomic) int drawableStencilFormat; // @synthesize drawableStencilFormat=_drawableStencilFormat;
@property(nonatomic) int drawableDepthFormat; // @synthesize drawableDepthFormat=_drawableDepthFormat;
@property(nonatomic) int drawableColorFormat; // @synthesize drawableColorFormat=_drawableColorFormat;
@property(retain, nonatomic) EAGLContext *context; // @synthesize context=_context;
- (void)_display:(_Bool)arg1;
- (_Bool)_presentFramebuffer;
- (void)_resolveAndDiscard;
- (void)_setFramebuffer:(_Bool *)arg1;
- (void)_deleteFramebuffer;
- (void)deleteDrawable;
- (void)_createFramebuffer;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 context:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_initCommon;

@end

@interface GLKViewController : UIViewController <NSCoding, GLKViewDelegate>
{
    _Bool _displayLinkPaused;
    _Bool _viewIsVisible;
    _Bool _firstResumeOccurred;
    _Bool _lastResumeOccurred;
    _Bool _lastUpdateOccurred;
    _Bool _lastDrawOccurred;
    _Bool _pauseOnWillResignActive;
    _Bool _resumeOnDidBecomeActive;
    UIScreen *_screen;
    CADisplayLink *_displayLink;
    GLKDisplayLinkMessenger *_displayLinkMessenger;
    double _timeSinceFirstResumeStartTime;
    double _timeSinceLastResumeStartTime;
    double _timeSinceLastUpdatePreviousTime;
    double _timeSinceLastDrawPreviousTime;
    CDUnknownFunctionPointerType _updateIMP;
    id <GLKViewControllerDelegate> _delegate;
    long long _screenFramesPerSecond;
    long long _frameInterval;
    long long _preferredFramesPerSecond;
    long long _framesPerSecond;
    long long _framesDisplayed;
    double _timeSinceFirstResume;
    double _timeSinceLastResume;
    double _timeSinceLastUpdate;
    double _timeSinceLastDraw;
}

@property(readonly, nonatomic) double timeSinceLastDraw; // @synthesize timeSinceLastDraw=_timeSinceLastDraw;
@property(readonly, nonatomic) double timeSinceLastUpdate; // @synthesize timeSinceLastUpdate=_timeSinceLastUpdate;
@property(readonly, nonatomic) long long framesDisplayed; // @synthesize framesDisplayed=_framesDisplayed;
@property(readonly, nonatomic) long long framesPerSecond; // @synthesize framesPerSecond=_framesPerSecond;
@property(nonatomic) long long frameInterval; // @synthesize frameInterval=_frameInterval;
@property(nonatomic) long long screenFramesPerSecond; // @synthesize screenFramesPerSecond=_screenFramesPerSecond;
@property(nonatomic) id <GLKViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) CDUnknownFunctionPointerType updateIMP; // @synthesize updateIMP=_updateIMP;
@property(nonatomic) double timeSinceLastDrawPreviousTime; // @synthesize timeSinceLastDrawPreviousTime=_timeSinceLastDrawPreviousTime;
@property(nonatomic) _Bool lastDrawOccurred; // @synthesize lastDrawOccurred=_lastDrawOccurred;
@property(nonatomic) double timeSinceLastUpdatePreviousTime; // @synthesize timeSinceLastUpdatePreviousTime=_timeSinceLastUpdatePreviousTime;
@property(nonatomic) _Bool lastUpdateOccurred; // @synthesize lastUpdateOccurred=_lastUpdateOccurred;
@property(nonatomic) double timeSinceLastResumeStartTime; // @synthesize timeSinceLastResumeStartTime=_timeSinceLastResumeStartTime;
@property(nonatomic) _Bool lastResumeOccurred; // @synthesize lastResumeOccurred=_lastResumeOccurred;
@property(nonatomic) double timeSinceFirstResumeStartTime; // @synthesize timeSinceFirstResumeStartTime=_timeSinceFirstResumeStartTime;
@property(nonatomic) _Bool firstResumeOccurred; // @synthesize firstResumeOccurred=_firstResumeOccurred;
@property(nonatomic) _Bool viewIsVisible; // @synthesize viewIsVisible=_viewIsVisible;
@property(retain, nonatomic) GLKDisplayLinkMessenger *displayLinkMessenger; // @synthesize displayLinkMessenger=_displayLinkMessenger;
@property(nonatomic) _Bool displayLinkPaused; // @synthesize displayLinkPaused=_displayLinkPaused;
@property(retain, nonatomic) CADisplayLink *displayLink; // @synthesize displayLink=_displayLink;
@property(retain, nonatomic) UIScreen *screen; // @synthesize screen=_screen;
- (void)glkView:(id)arg1 drawInRect:(struct CGRect)arg2;
@property(nonatomic) _Bool resumeOnDidBecomeActive; // @synthesize resumeOnDidBecomeActive=_resumeOnDidBecomeActive;
@property(nonatomic) _Bool pauseOnWillResignActive; // @synthesize pauseOnWillResignActive=_pauseOnWillResignActive;
@property(readonly, nonatomic) double timeSinceLastResume; // @synthesize timeSinceLastResume=_timeSinceLastResume;
@property(readonly, nonatomic) double timeSinceFirstResume; // @synthesize timeSinceFirstResume=_timeSinceFirstResume;
@property(nonatomic, getter=isPaused) _Bool paused;
@property(nonatomic) long long preferredFramesPerSecond; // @synthesize preferredFramesPerSecond=_preferredFramesPerSecond;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidUnload;
- (void)viewDidLoad;
- (void)loadView;
- (void)setView:(id)arg1;
- (void)viewDidMoveToWindow:(id)arg1 shouldAppearOrDisappear:(_Bool)arg2;
- (void)_updateScreenIfChanged;
- (void)_resumeByNotification;
- (void)_pauseByNotification;
- (void)_updateAndDraw;
- (void)_createDisplayLinkForScreen:(id)arg1;
- (long long)_calculateScreenFramesPerSecond:(id)arg1;
- (void)_configureNotifications;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)init;
- (void)_initCommon;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

