//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CallbackData {
    struct CallbackData *_field1;
    id _field2;
    id _field3;
    struct OpaqueJSValue *_field4;
    struct OpaqueJSValue *_field5;
    unsigned long long _field6;
    struct OpaqueJSValue **_field7;
    id _field8;
};

struct HashMap<id, JSC::Weak<JSC::JSObject>, WTF::PtrHash<id>, WTF::HashTraits<id>, WTF::HashTraits<JSC::Weak<JSC::JSObject>>> {
    struct HashTable<id, WTF::KeyValuePair<id, JSC::Weak<JSC::JSObject>>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<id, JSC::Weak<JSC::JSObject>>>, WTF::PtrHash<id>, WTF::HashMap<id, JSC::Weak<JSC::JSObject>, WTF::PtrHash<id>, WTF::HashTraits<id>, WTF::HashTraits<JSC::Weak<JSC::JSObject>>>::KeyValuePairTraits, WTF::HashTraits<id>> m_impl;
};

struct HashTable<id, WTF::KeyValuePair<id, JSC::Weak<JSC::JSObject>>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<id, JSC::Weak<JSC::JSObject>>>, WTF::PtrHash<id>, WTF::HashMap<id, JSC::Weak<JSC::JSObject>, WTF::PtrHash<id>, WTF::HashTraits<id>, WTF::HashTraits<JSC::Weak<JSC::JSObject>>>::KeyValuePairTraits, WTF::HashTraits<id>> {
    struct KeyValuePair<id, JSC::Weak<JSC::JSObject>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct JSCell;

struct JSLock;

struct JSValue {
    union EncodedValueDescriptor u;
};

struct KeyValuePair<id, JSC::Weak<JSC::JSObject>>;

struct OpaqueJSValue;

struct RefPtr<JSC::JSLock> {
    struct JSLock *m_ptr;
};

struct Strong<JSC::JSObject> {
    struct JSValue *m_slot;
};

struct Weak<JSC::JSGlobalObject> {
    struct WeakImpl *m_impl;
};

struct Weak<JSC::JSObject> {
    struct WeakImpl *m_impl;
};

struct Weak<JSC::JSString> {
    struct WeakImpl *m_impl;
};

struct WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id>> {
    struct HashMap<id, JSC::Weak<JSC::JSObject>, WTF::PtrHash<id>, WTF::HashTraits<id>, WTF::HashTraits<JSC::Weak<JSC::JSObject>>> m_map;
    int m_gcThreshold;
};

struct WeakImpl;

struct WeakValueRef {
    int m_tag;
    union WeakValueUnion u;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark Named Unions

union EncodedValueDescriptor {
    long long asInt64;
    struct JSCell *ptr;
    struct {
        int payload;
        int tag;
    } asBits;
};

union WeakValueUnion {
    struct JSValue m_primitive;
    struct Weak<JSC::JSObject> m_object;
    struct Weak<JSC::JSString> m_string;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore
// UUID: 23C4DED2-7220-34AB-905E-D656620F3536
//
//                           Arch: x86_64
//                Current version: 600.1.4
//          Compatibility version: 1.0.0
//                 Source version: 7600.1.4.9.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol JSExport
@end

@interface JSContext : NSObject
{
    JSVirtualMachine *m_virtualMachine;
    struct OpaqueJSContext *m_context;
    JSWrapperMap *m_wrapperMap;
    struct Strong<JSC::JSObject> m_exception;
    CDUnknownBlockType exceptionHandler;
}

+ (id)currentArguments;
+ (id)currentCallee;
+ (id)currentThis;
+ (id)currentContext;
+ (id)contextWithJSGlobalContextRef:(struct OpaqueJSContext *)arg1;
@property(copy) CDUnknownBlockType exceptionHandler; // @synthesize exceptionHandler;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_setDebuggerRunLoop:(struct __CFRunLoop *)arg1;
- (struct __CFRunLoop *)_debuggerRunLoop;
- (void)_setIncludesNativeCallStackWhenReportingExceptions:(_Bool)arg1;
- (_Bool)_includesNativeCallStackWhenReportingExceptions;
- (void)_setRemoteInspectionEnabled:(_Bool)arg1;
- (_Bool)_remoteInspectionEnabled;
@property(copy) NSString *name;
@property(readonly) JSVirtualMachine *virtualMachine;
@property(readonly) JSValue *globalObject;
@property(readonly, retain) JSWrapperMap *wrapperMap;
@property(retain) JSValue *exception;
- (id)evaluateScript:(id)arg1 withSourceURL:(id)arg2;
- (id)evaluateScript:(id)arg1;
- (void)dealloc;
- (id)initWithVirtualMachine:(id)arg1;
- (id)init;
- (struct OpaqueJSContext *)JSGlobalContextRef;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)wrapperForJSObject:(struct OpaqueJSValue *)arg1;
- (id)wrapperForObjCObject:(id)arg1;
- (void)endCallbackWithData:(struct CallbackData *)arg1;
- (void)beginCallbackWithData:(struct CallbackData *)arg1 calleeValue:(struct OpaqueJSValue *)arg2 thisValue:(struct OpaqueJSValue *)arg3 argumentCount:(unsigned long long)arg4 arguments:(const struct OpaqueJSValue **)arg5;
- (_Bool)boolFromNotifyException:(struct OpaqueJSValue *)arg1;
- (id)valueFromNotifyException:(struct OpaqueJSValue *)arg1;
- (void)notifyException:(struct OpaqueJSValue *)arg1;
- (id)initWithGlobalContextRef:(struct OpaqueJSContext *)arg1;

@end

__attribute__((visibility("hidden")))
@interface JSExport <JSExport>
{
}

@end

@interface JSManagedValue : NSObject
{
    struct Weak<JSC::JSGlobalObject> m_globalObject;
    struct RefPtr<JSC::JSLock> m_lock;
    struct WeakValueRef m_weakValue;
    NSMapTable *m_owners;
}

+ (id)managedValueWithValue:(id)arg1 andOwner:(id)arg2;
+ (id)managedValueWithValue:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)disconnectValue;
@property(readonly) JSValue *value;
- (void)didRemoveOwner:(id)arg1;
- (void)didAddOwner:(id)arg1;
- (void)dealloc;
- (id)initWithValue:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface JSObjCClassInfo : NSObject
{
    JSContext *m_context;
    Class m_class;
    _Bool m_block;
    // Error parsing type: ^{OpaqueJSClass={atomic<int>=Ai}^{OpaqueJSClass}^{OpaqueJSClass}^?^?^?^?^?^?^?^?^?^?^?{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}{OwnPtr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > >=^{HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > >}}{OwnPtr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > >=^{HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > >}}}, name: m_classRef
    struct Weak<JSC::JSObject> m_prototype;
    struct Weak<JSC::JSObject> m_constructor;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)constructor;
- (id)wrapperForObject:(id)arg1;
- (void)reallocateConstructorAndOrPrototype;
- (void)allocateConstructorAndPrototypeWithSuperClassInfo:(id)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1 forClass:(Class)arg2 superClassInfo:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface JSVMWrapperCache : NSObject
{
}

+ (id)wrapperForJSContextGroupRef:(struct OpaqueJSContextGroup *)arg1;
+ (void)addWrapper:(id)arg1 forJSContextGroupRef:(struct OpaqueJSContextGroup *)arg2;

@end

@interface JSValue : NSObject
{
    struct OpaqueJSValue *m_value;
    JSContext *_context;
}

+ (id)valueWithUndefinedInContext:(id)arg1;
+ (id)valueWithNullInContext:(id)arg1;
+ (id)valueWithNewErrorFromMessage:(id)arg1 inContext:(id)arg2;
+ (id)valueWithNewRegularExpressionFromPattern:(id)arg1 flags:(id)arg2 inContext:(id)arg3;
+ (id)valueWithNewArrayInContext:(id)arg1;
+ (id)valueWithNewObjectInContext:(id)arg1;
+ (id)valueWithUInt32:(unsigned int)arg1 inContext:(id)arg2;
+ (id)valueWithInt32:(int)arg1 inContext:(id)arg2;
+ (id)valueWithDouble:(double)arg1 inContext:(id)arg2;
+ (id)valueWithBool:(_Bool)arg1 inContext:(id)arg2;
+ (id)valueWithObject:(id)arg1 inContext:(id)arg2;
+ (id)valueWithSize:(struct CGSize)arg1 inContext:(id)arg2;
+ (id)valueWithRect:(struct CGRect)arg1 inContext:(id)arg2;
+ (id)valueWithRange:(struct _NSRange)arg1 inContext:(id)arg2;
+ (id)valueWithPoint:(struct CGPoint)arg1 inContext:(id)arg2;
+ (SEL)selectorForValueToStruct:(const char *)arg1;
+ (SEL)selectorForStructToValue:(const char *)arg1;
+ (id)valueWithJSValueRef:(struct OpaqueJSValue *)arg1 inContext:(id)arg2;
@property(readonly) JSContext *context; // @synthesize context=_context;
- (id)invokeMethod:(id)arg1 withArguments:(id)arg2;
- (id)constructWithArguments:(id)arg1;
- (id)callWithArguments:(id)arg1;
- (_Bool)isInstanceOf:(id)arg1;
- (_Bool)isEqualWithTypeCoercionToObject:(id)arg1;
- (_Bool)isEqualToObject:(id)arg1;
- (_Bool)isObject;
- (_Bool)isString;
- (_Bool)isNumber;
- (_Bool)isBoolean;
- (_Bool)isNull;
- (_Bool)isUndefined;
- (void)setValue:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)valueAtIndex:(unsigned long long)arg1;
- (void)defineProperty:(id)arg1 descriptor:(id)arg2;
- (_Bool)hasProperty:(id)arg1;
- (_Bool)deleteProperty:(id)arg1;
- (void)setValue:(id)arg1 forProperty:(id)arg2;
- (id)valueForProperty:(id)arg1;
- (id)toDictionary;
- (id)toArray;
- (id)toDate;
- (id)toString;
- (id)toNumber;
- (unsigned int)toUInt32;
- (int)toInt32;
- (double)toDouble;
- (_Bool)toBool;
- (id)toObjectOfClass:(Class)arg1;
- (id)toObject;
- (struct OpaqueJSValue *)JSValueRef;
- (struct CGSize)toSize;
- (struct CGRect)toRect;
- (struct _NSRange)toRange;
- (struct CGPoint)toPoint;
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithValue:(struct OpaqueJSValue *)arg1 inContext:(id)arg2;
- (id)init;

@end

@interface JSVirtualMachine : NSObject
{
    struct OpaqueJSContextGroup *m_group;
    NSMapTable *m_contextCache;
    NSMapTable *m_externalObjectGraph;
    NSMapTable *m_externalRememberedSet;
}

+ (id)virtualMachineWithContextGroupRef:(struct OpaqueJSContextGroup *)arg1;
- (void)removeManagedReference:(id)arg1 withOwner:(id)arg2;
- (void)addManagedReference:(id)arg1 withOwner:(id)arg2;
- (void)addExternalRememberedObject:(id)arg1;
- (_Bool)isOldExternalObject:(id)arg1;
- (void)dealloc;
- (id)initWithContextGroupRef:(struct OpaqueJSContextGroup *)arg1;
- (id)init;
- (id)externalRememberedSet;
- (id)externalObjectGraph;
- (void)addContext:(id)arg1 forGlobalContextRef:(struct OpaqueJSContext *)arg2;
- (id)contextForGlobalContextRef:(struct OpaqueJSContext *)arg1;

@end

__attribute__((visibility("hidden")))
@interface JSWTFMainThreadCaller : NSObject
{
}

- (void)call;

@end

__attribute__((visibility("hidden")))
@interface JSWrapperMap : NSObject
{
    JSContext *m_context;
    NSMutableDictionary *m_classMap;
    struct WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id>> m_cachedJSWrappers;
    NSMapTable *m_cachedObjCWrappers;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)objcWrapperForJSValueRef:(struct OpaqueJSValue *)arg1;
- (id)jsWrapperForObject:(id)arg1;
- (id)classInfoForClass:(Class)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1;

@end

