//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

#pragma mark Typedef'd Structures

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/AVKit.framework/AVKit
// UUID: D0E3E15B-8033-3F0A-B518-AF30CCD5D33E
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 70.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol MPVolumeControllerDelegate <NSObject>

@optional
- (void)volumeController:(MPVolumeController *)arg1 EUVolumeLimitEnforcedDidChange:(_Bool)arg2;
- (void)volumeController:(MPVolumeController *)arg1 EUVolumeLimitDidChange:(float)arg2;
- (void)volumeController:(MPVolumeController *)arg1 mutedStateDidChange:(_Bool)arg2;
- (void)volumeController:(MPVolumeController *)arg1 volumeWarningStateDidChange:(long long)arg2;
- (void)volumeController:(MPVolumeController *)arg1 volumeValueDidChange:(float)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol UIPopoverControllerDelegate <NSObject>

@optional
- (void)popoverController:(UIPopoverController *)arg1 willRepositionPopoverToRect:(inout struct CGRect *)arg2 inView:(inout id *)arg3;
- (void)popoverControllerDidDismissPopover:(UIPopoverController *)arg1;
- (_Bool)popoverControllerShouldDismissPopover:(UIPopoverController *)arg1;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

@protocol UIViewControllerAnimatedTransitioning <NSObject>
- (void)animateTransition:(id <UIViewControllerContextTransitioning>)arg1;
- (double)transitionDuration:(id <UIViewControllerContextTransitioning>)arg1;

@optional
- (void)animationEnded:(_Bool)arg1;
@end

@protocol UIViewControllerTransitioningDelegate <NSObject>

@optional
- (UIPresentationController *)presentationControllerForPresentedViewController:(UIViewController *)arg1 presentingViewController:(UIViewController *)arg2 sourceViewController:(UIViewController *)arg3;
- (id <UIViewControllerInteractiveTransitioning>)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning>)arg1;
- (id <UIViewControllerInteractiveTransitioning>)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning>)arg1;
- (id <UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)arg1;
- (id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)arg1 presentingController:(UIViewController *)arg2 sourceController:(UIViewController *)arg3;
@end

@interface AVAlphaUpdatingView : UIView
{
    CDUnknownBlockType _alphaUpdatingBlock;
}

@property(copy, nonatomic) CDUnknownBlockType alphaUpdatingBlock; // @synthesize alphaUpdatingBlock=_alphaUpdatingBlock;
- (void).cxx_destruct;
- (void)setAlpha:(double)arg1;

@end

@interface AVAudioOnlyIndicatorView : UIView
{
    UIImageView *_imageView;
}

- (void).cxx_destruct;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface AVButton : UIButton
{
}

- (void)didMoveToSuperview;
- (void)_updateForStateChangeAnimated:(_Bool)arg1;
- (void)_updateSelected:(_Bool)arg1 highlighted:(_Bool)arg2;
- (_Bool)_drawingAsSelected;
- (void)setSelected:(_Bool)arg1;
- (void)setHighlighted:(_Bool)arg1;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (struct CGRect)hitRect;

@end

@interface AVChapter : NSObject <NSCopying>
{
    UIImage *_image;
    CDUnknownBlockType _imageBlock;
    double _startTime;
    double _duration;
    unsigned long long _number;
    NSString *_title;
}

+ (id)chapterAtTime:(double)arg1 inChapters:(id)arg2;
+ (id)playbackChapterWithStartTime:(double)arg1 duration:(double)arg2 number:(unsigned long long)arg3 title:(id)arg4 imageFaultBlock:(CDUnknownBlockType)arg5;
+ (void)initialize;
@property(readonly) UIImage *image; // @synthesize image=_image;
@property(readonly, copy) NSString *title; // @synthesize title=_title;
@property(readonly) unsigned long long number; // @synthesize number=_number;
@property(readonly) double duration; // @synthesize duration=_duration;
@property(readonly) double startTime; // @synthesize startTime=_startTime;
- (void).cxx_destruct;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithStartTime:(double)arg1 duration:(double)arg2 number:(unsigned long long)arg3 title:(id)arg4 imageFaultBlock:(CDUnknownBlockType)arg5;

@end

@interface AVValueTiming : NSObject <NSCoding, NSCopying, NSMutableCopying>
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)valueTimingWithAnchorValue:(double)arg1 anchorTimeStamp:(double)arg2 rate:(double)arg3;
+ (double)currentTimeStamp;
@property(readonly, nonatomic) double rate;
@property(readonly, nonatomic) double anchorTimeStamp;
@property(readonly, nonatomic) double anchorValue;
- (CDStruct_c3b9c2ee)_timing;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithValueTiming:(id)arg1;
- (id)initWithAnchorValue:(double)arg1 anchorTimeStamp:(double)arg2 rate:(double)arg3;
- (_Bool)isEqualToValueTiming:(id)arg1;
- (double)timeStampForValue:(double)arg1;
- (double)valueForTimeStamp:(double)arg1;
@property(readonly, nonatomic) double currentValue;

@end

@interface AVMutableValueTiming : AVValueTiming
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) double rate; // @dynamic rate;
@property(nonatomic) double anchorTimeStamp; // @dynamic anchorTimeStamp;
@property(nonatomic) double anchorValue; // @dynamic anchorValue;
- (Class)classForCoder;
- (void)setValueTiming:(id)arg1;

@end

@interface AVConcreteMutableValueTiming : AVMutableValueTiming
{
    double _value;
    double _timeStamp;
    double _rate;
}

- (CDStruct_c3b9c2ee)_timing;
- (void)setRate:(double)arg1;
- (void)setAnchorTimeStamp:(double)arg1;
- (void)setAnchorValue:(double)arg1;
- (double)rate;
- (double)anchorTimeStamp;
- (double)anchorValue;
- (id)initWithAnchorValue:(double)arg1 anchorTimeStamp:(double)arg2 rate:(double)arg3;

@end

@interface AVConcreteValueTiming : AVValueTiming
{
    double _value;
    double _timeStamp;
    double _rate;
}

- (CDStruct_c3b9c2ee)_timing;
- (double)rate;
- (double)anchorTimeStamp;
- (double)anchorValue;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithAnchorValue:(double)arg1 anchorTimeStamp:(double)arg2 rate:(double)arg3;

@end

@interface AVPlaybackControlsViewController : UIViewController
{
    AVPlayerController *_playerController;
    AVPlayerControllerTimeResolver *_intervalTimeResolver;
    AVPlayerControllerTimeResolver *_resolutionTimeResolver;
    id _AVSystemControllerCurrentRouteHasVolumeControlDidChangeObserver;
    _Bool _showsDoneButton;
    _Bool _playing;
    _Bool _scrubberEnabled;
    _Bool _scanBackwardButtonEnabled;
    _Bool _playPauseButtonEnabled;
    _Bool _scanForwardButtonEnabled;
    _Bool _showsStreamingControls;
    _Bool _skipBackwardThirtySecondsButtonEnabled;
    _Bool _gotoEndOfSeekableRangesButtonEnabled;
    _Bool _showsScaleButton;
    _Bool _showsLoadingIndicator;
    _Bool _showsMediaSelectionButton;
    _Bool _showsExitFullScreenButton;
    _Bool _showsVolumeSlider;
    AVPlayerViewController *_playerViewController;
    double _scrubberWidth;
    NSArray *_scrubberLoadedTimeRanges;
    long long _scaleButtonType;
}

@property(nonatomic) _Bool showsVolumeSlider; // @synthesize showsVolumeSlider=_showsVolumeSlider;
@property(nonatomic) _Bool showsExitFullScreenButton; // @synthesize showsExitFullScreenButton=_showsExitFullScreenButton;
@property(nonatomic) _Bool showsMediaSelectionButton; // @synthesize showsMediaSelectionButton=_showsMediaSelectionButton;
@property(nonatomic) _Bool showsLoadingIndicator; // @synthesize showsLoadingIndicator=_showsLoadingIndicator;
@property(nonatomic) long long scaleButtonType; // @synthesize scaleButtonType=_scaleButtonType;
@property(nonatomic) _Bool showsScaleButton; // @synthesize showsScaleButton=_showsScaleButton;
@property(nonatomic, getter=isGotoEndOfSeekableRangesButtonEnabled) _Bool gotoEndOfSeekableRangesButtonEnabled; // @synthesize gotoEndOfSeekableRangesButtonEnabled=_gotoEndOfSeekableRangesButtonEnabled;
@property(nonatomic, getter=isSkipBackwardThirtySecondsButtonEnabled) _Bool skipBackwardThirtySecondsButtonEnabled; // @synthesize skipBackwardThirtySecondsButtonEnabled=_skipBackwardThirtySecondsButtonEnabled;
@property(nonatomic) _Bool showsStreamingControls; // @synthesize showsStreamingControls=_showsStreamingControls;
@property(nonatomic, getter=isScanForwardButtonEnabled) _Bool scanForwardButtonEnabled; // @synthesize scanForwardButtonEnabled=_scanForwardButtonEnabled;
@property(nonatomic, getter=isPlayPauseButtonEnabled) _Bool playPauseButtonEnabled; // @synthesize playPauseButtonEnabled=_playPauseButtonEnabled;
@property(nonatomic, getter=isScanBackwardButtonEnabled) _Bool scanBackwardButtonEnabled; // @synthesize scanBackwardButtonEnabled=_scanBackwardButtonEnabled;
@property(retain, nonatomic) NSArray *scrubberLoadedTimeRanges; // @synthesize scrubberLoadedTimeRanges=_scrubberLoadedTimeRanges;
@property(nonatomic, getter=isScrubberEnabled) _Bool scrubberEnabled; // @synthesize scrubberEnabled=_scrubberEnabled;
@property(nonatomic, getter=isPlaying) _Bool playing; // @synthesize playing=_playing;
@property(nonatomic) _Bool showsDoneButton; // @synthesize showsDoneButton=_showsDoneButton;
@property(readonly, nonatomic) double scrubberWidth; // @synthesize scrubberWidth=_scrubberWidth;
@property(nonatomic) __weak AVPlayerViewController *playerViewController; // @synthesize playerViewController=_playerViewController;
- (void).cxx_destruct;
- (void)fullScreenButtonTapped:(id)arg1;
- (void)mediaSelectionButtonTapped:(id)arg1;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (void)seekChapterForward:(id)arg1;
- (void)endScanningForward:(id)arg1;
- (void)beginScanningForward:(id)arg1;
- (void)togglePlayback:(id)arg1;
- (void)endScanningBackward:(id)arg1;
- (void)beginScanningBackward:(id)arg1;
- (void)seekChapterBackward:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (void)volumeSliderValueChanged:(id)arg1;
- (void)scaleButtonTapped:(id)arg1;
- (void)scrubberValueChanged:(id)arg1;
- (void)doneButtonTapped:(id)arg1;
- (void)removeControlForUserInteractionObservation:(id)arg1;
- (void)addControlForUserInteractionObservation:(id)arg1;
- (void)updateVolumeSliderValue:(float)arg1;
- (void)updateRemainingTimeLabel:(id)arg1;
- (void)updateScrubberMaximumValue:(float)arg1;
- (void)updateScrubberValue:(float)arg1;
- (void)updateScrubberMinimumValue:(float)arg1;
- (void)updateElapsedTimeLabel:(id)arg1;
- (void)_userInteractionObservationControlTouchUp:(id)arg1;
- (void)_userInteractionObservationControlTouchDown:(id)arg1;
- (void)_updateVolumeSliderVisibility;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)didMoveToParentViewController:(id)arg1;
- (void)willMoveToParentViewController:(id)arg1;
- (void)viewDidLoad;
@property(retain, nonatomic) AVPlayerController *playerController;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface AVEmbeddedPlaybackControlsViewController : AVPlaybackControlsViewController
{
    unsigned int _showsLoadingIndicator:1;
    unsigned int _playing:1;
    unsigned int _scrubberEnabled:1;
    NSArray *_scrubberLoadedTimeRanges;
    unsigned int _playPauseButtonEnabled:1;
    unsigned int _showsStreamingControls:1;
    unsigned int _showsMediaSelectionButton:1;
    NSString *_elapsedTimeLabelText;
    float _scrubberMinimumValue;
    float _scrubberValue;
    float _scrubberMaximumValue;
    NSString *_remainingTimeLabelText;
    UIView *_lowerControlsSubContainerView;
    UIButton *_playPauseButton;
    UILabel *_elapsedTimeLabel;
    AVScrubber *_scrubber;
    UILabel *_remainingTimeLabel;
    UIButton *_mediaSelectionButton;
    UIButton *_fullScreenButton;
    UILabel *_liveStreamingLabel;
    AVLoadingIndicatorView *_loadingIndicatorView;
    UILabel *_scrubInstructionsTitleLabel;
    UILabel *_scrubInstructionsSubtitleLabel;
    NSMutableArray *_layoutConstraints;
    NSLayoutConstraint *_controlsContainerViewHeightLayoutConstraint;
    unsigned int _showsScrubInstructions:1;
    unsigned int _controlsVisibilityHasBeenManagedBefore:1;
}

- (void).cxx_destruct;
- (void)_hideScrubInstructions;
- (void)_showScrubInstructions;
- (void)_manageControlsVisibility;
- (void)_scrubberEndTracking:(id)arg1;
- (void)_scrubberBeginTracking:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateViewConstraints;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (void)updateRemainingTimeLabel:(id)arg1;
- (void)updateScrubberMaximumValue:(float)arg1;
- (void)updateScrubberValue:(float)arg1;
- (void)updateScrubberMinimumValue:(float)arg1;
- (void)updateElapsedTimeLabel:(id)arg1;
- (void)setShowsMediaSelectionButton:(_Bool)arg1;
- (_Bool)showsMediaSelectionButton;
- (void)setShowsLoadingIndicator:(_Bool)arg1;
- (_Bool)showsLoadingIndicator;
- (void)setShowsStreamingControls:(_Bool)arg1;
- (_Bool)showsStreamingControls;
- (void)setPlayPauseButtonEnabled:(_Bool)arg1;
- (_Bool)isPlayPauseButtonEnabled;
- (void)setScrubberLoadedTimeRanges:(id)arg1;
- (id)scrubberLoadedTimeRanges;
- (void)setScrubberEnabled:(_Bool)arg1;
- (_Bool)isScrubberEnabled;
- (void)setPlaying:(_Bool)arg1;
- (_Bool)isPlaying;
- (double)scrubberWidth;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface AVExternalPlaybackIndicatorView : UIView
{
    UILabel *_titleLabel;
    UILabel *_subtitleLabel;
}

- (void).cxx_destruct;
- (void)setTitleString:(id)arg1 subtitleString:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface AVFullScreenPlaybackControlsViewController : AVPlaybackControlsViewController <MPVolumeControllerDelegate>
{
    unsigned int _showsDoneButton:1;
    unsigned int _showsScaleButton:1;
    long long _scaleButtonType;
    unsigned int _showsLoadingIndicator:1;
    unsigned int _playing:1;
    unsigned int _scrubberEnabled:1;
    NSArray *_scrubberLoadedTimeRanges;
    unsigned int _scanBackwardButtonEnabled:1;
    unsigned int _playPauseButtonEnabled:1;
    unsigned int _scanForwardButtonEnabled:1;
    unsigned int _showsStreamingControls:1;
    unsigned int _skipBackwardThirtySecondsButtonEnabled:1;
    unsigned int _gotoEndOfSeekableRangesButtonEnabled:1;
    unsigned int _showsMediaSelectionButton:1;
    unsigned int _showsExitFullScreenButton:1;
    unsigned int _showsVolumeSlider:1;
    NSString *_elapsedTimeLabelText;
    float _scrubberMinimumValue;
    float _scrubberValue;
    float _scrubberMaximumValue;
    NSString *_remainingTimeLabelText;
    float _volumeSliderValue;
    UIView *_upperControlsSubContainerView;
    UIView *_lowerControlsLeftSubContainerView;
    UIView *_lowerControlsCenterSubContainerView;
    UIView *_lowerControlsRightSubContainerView;
    UIButton *_doneButton;
    UILabel *_elapsedTimeLabel;
    AVScrubber *_scrubber;
    UILabel *_remainingTimeLabel;
    UIButton *_scaleButton;
    UILabel *_liveStreamingLabel;
    AVLoadingIndicatorView *_loadingIndicatorView;
    UILabel *_scrubInstructionsTitleLabel;
    UILabel *_scrubInstructionsSubtitleLabel;
    MPVolumeSlider *_volumeSlider;
    UIButton *_skipBackwardThirtySecondsButton;
    UIButton *_scanBackwardButton;
    UIButton *_playPauseButton;
    UIButton *_scanForwardButton;
    UIButton *_gotoEndOfSeekableRangesButton;
    UIButton *_mediaSelectionButton;
    UIButton *_fullScreenButton;
    NSMutableArray *_layoutConstraints;
    NSLayoutConstraint *_topControlsContainerViewHeightLayoutConstraint;
    NSLayoutConstraint *_bottomControlsContainerViewHeightLayoutConstraint;
    unsigned int _bottomControlsSingleRowLayoutPossible:1;
    unsigned int _showsScrubInstructions:1;
    unsigned int _userDidTapScanButton:1;
    NSTimer *_beginScanningBackwardTimer;
    NSTimer *_beginScanningForwardTimer;
    unsigned int _isScanningBackward:1;
    unsigned int _isScanningForward:1;
    unsigned int _controlsVisibilityHasBeenManagedBefore:1;
    MPVolumeController *_volumeController;
}

- (void).cxx_destruct;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)_hideScrubInstructions;
- (void)_showScrubInstructions;
- (void)_manageControlsVisibility;
- (void)_updateScaleButton;
- (void)_fireBeginScanningForwardTimer:(id)arg1;
- (void)_fireBeginScanningBackwardTimer:(id)arg1;
- (void)_gotoEndOfSeekableRangesButtonTouchUpOutside:(id)arg1;
- (void)_gotoEndOfSeekableRangesButtonTouchUpInside:(id)arg1;
- (void)_gotoEndOfSeekableRangesButtonTouchDown:(id)arg1;
- (void)_scanForwardButtonTouchUpOutside:(id)arg1;
- (void)_scanForwardButtonTouchUpInside:(id)arg1;
- (void)_scanForwardButtonTouchDown:(id)arg1;
- (void)_scanBackwardButtonTouchUpOutside:(id)arg1;
- (void)_scanBackwardButtonTouchUpInside:(id)arg1;
- (void)_scanBackwardButtonTouchDown:(id)arg1;
- (void)_skipBackwardThirtySecondsButtonTouchUpOutside:(id)arg1;
- (void)_skipBackwardThirtySecondsButtonTouchUpInside:(id)arg1;
- (void)_skipBackwardThirtySecondsButtonTouchDown:(id)arg1;
- (void)_scrubberEndTracking:(id)arg1;
- (void)_scrubberBeginTracking:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateViewConstraints;
- (_Bool)prefersStatusBarHidden;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (void)updateRemainingTimeLabel:(id)arg1;
- (void)updateScrubberMaximumValue:(float)arg1;
- (void)updateScrubberValue:(float)arg1;
- (void)updateScrubberMinimumValue:(float)arg1;
- (void)updateElapsedTimeLabel:(id)arg1;
- (void)setShowsVolumeSlider:(_Bool)arg1;
- (_Bool)showsVolumeSlider;
- (void)setShowsExitFullScreenButton:(_Bool)arg1;
- (_Bool)showsExitFullScreenButton;
- (void)setShowsMediaSelectionButton:(_Bool)arg1;
- (_Bool)showsMediaSelectionButton;
- (void)setShowsLoadingIndicator:(_Bool)arg1;
- (_Bool)showsLoadingIndicator;
- (void)setScaleButtonType:(long long)arg1;
- (long long)scaleButtonType;
- (void)setShowsScaleButton:(_Bool)arg1;
- (_Bool)showsScaleButton;
- (void)setGotoEndOfSeekableRangesButtonEnabled:(_Bool)arg1;
- (_Bool)isGotoEndOfSeekableRangesButtonEnabled;
- (void)setSkipBackwardThirtySecondsButtonEnabled:(_Bool)arg1;
- (_Bool)isSkipBackwardThirtySecondsButtonEnabled;
- (void)setShowsStreamingControls:(_Bool)arg1;
- (_Bool)showsStreamingControls;
- (void)setScanForwardButtonEnabled:(_Bool)arg1;
- (_Bool)isScanForwardButtonEnabled;
- (void)setPlayPauseButtonEnabled:(_Bool)arg1;
- (_Bool)isPlayPauseButtonEnabled;
- (void)setScanBackwardButtonEnabled:(_Bool)arg1;
- (_Bool)isScanBackwardButtonEnabled;
- (void)setScrubberLoadedTimeRanges:(id)arg1;
- (id)scrubberLoadedTimeRanges;
- (void)setScrubberEnabled:(_Bool)arg1;
- (_Bool)isScrubberEnabled;
- (void)setPlaying:(_Bool)arg1;
- (_Bool)isPlaying;
- (void)setShowsDoneButton:(_Bool)arg1;
- (_Bool)showsDoneButton;
- (double)scrubberWidth;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVFullScreenViewController : UIViewController
{
    unsigned int _statusBarWasHidden:1;
}

- (_Bool)prefersStatusBarHidden;
- (_Bool)modalPresentationCapturesStatusBarAppearance;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface AVLoadedTimeRangesView : UIView
{
    NSArray *_loadedTimeRanges;
    struct CGRect _clipRect;
    UIColor *_fillColor;
}

@property(retain, nonatomic) UIColor *fillColor; // @synthesize fillColor=_fillColor;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
@property(nonatomic) struct CGRect clipRect;
@property(retain, nonatomic) NSArray *loadedTimeRanges;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface AVLoadingIndicatorView : UIView
{
    UIActivityIndicatorView *_activityIndicatorView;
    UILabel *_label;
}

- (void).cxx_destruct;
- (void)_setDrawsAsBackdropOverlay:(_Bool)arg1;
- (void)tintColorDidChange;
- (void)setHidden:(_Bool)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;

@end

@interface AVMediaSelectionOption (AVAdditions)
@property(readonly, nonatomic) NSString *localizedDisplayName;
@end

@interface AVMediaSelectionOption (AVPlayerControllerInternal)
- (_Bool)_isAC3;
- (id)_extendedLanguageTagOrUndetermined;
- (long long)_caseInsensitiveCompare:(id)arg1;
@end

@interface AVMediaSelectionViewController : UIViewController <UITableViewDelegate, UITableViewDataSource>
{
    UITableView *_tableView;
    AVMediaSelectionOption *_selectedAudioMediaSelectionOption;
    AVMediaSelectionOption *_selectedLegibleMediaSelectionOption;
    AVPlayerController *_playerController;
    CDUnknownBlockType _doneButtonHandler;
}

@property(copy, nonatomic) CDUnknownBlockType doneButtonHandler; // @synthesize doneButtonHandler=_doneButtonHandler;
@property(retain, nonatomic) AVPlayerController *playerController; // @synthesize playerController=_playerController;
- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayHeaderView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)_doneButtonTapped:(id)arg1;
- (_Bool)_isSelectedOrCurrentLegibleMediaSelectionOption:(id)arg1;
- (_Bool)_isSelectedOrCurrentAudioMediaSelectionOption:(id)arg1;
- (_Bool)prefersStatusBarHidden;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)loadView;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVNowPlayingInfoController : NSObject
{
    AVPlayerController *_playerController;
    id _playerControllerCurrentTimeJumpedObserver;
    unsigned int _nowPlayingInfoNeedsUpdate:1;
}

- (void).cxx_destruct;
- (void)_updateNowPlayingInfo;
- (void)_updateNowPlayingInfoIfNeeded;
- (void)_setNowPlayingInfoNeedsUpdate;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(retain, nonatomic) AVPlayerController *playerController;
- (void)dealloc;
- (id)init;

@end

@interface AVPlayerController : UIResponder
{
    AVPlayer *_player;
    long long _status;
    NSError *_error;
}

+ (void)initialize;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) long long status; // @synthesize status=_status;
@property(readonly, nonatomic) AVPlayer *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (void)setCurrentLegibleMediaSelectionOption:(id)arg1;
- (id)currentLegibleMediaSelectionOption;
- (id)legibleMediaSelectionOptions;
- (_Bool)hasLegibleMediaSelectionOptions;
- (void)setCurrentAudioMediaSelectionOption:(id)arg1;
- (id)currentAudioMediaSelectionOption;
- (id)audioMediaSelectionOptions;
- (_Bool)hasAudioMediaSelectionOptions;
- (_Bool)hasMediaSelectionOptions;
- (id)externalPlaybackAirPlayDeviceLocalizedName;
- (long long)externalPlaybackType;
@property(nonatomic, getter=isPlayingOnSecondScreen) _Bool playingOnSecondScreen;
- (_Bool)isExternalPlaybackActive;
- (_Bool)isPlayingOnExternalScreen;
- (void)setAllowsExternalPlayback:(_Bool)arg1;
- (_Bool)allowsExternalPlayback;
- (id)timing;
- (void)seekChapterBackward:(id)arg1;
- (_Bool)canSeekChapterBackward;
- (void)seekChapterForward:(id)arg1;
- (_Bool)canSeekChapterForward;
- (void)seekToChapter:(id)arg1;
- (id)contentChapters;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (void)seekFrameBackward:(id)arg1;
- (_Bool)canSeekFrameBackward;
- (void)seekFrameForward:(id)arg1;
- (_Bool)canSeekFrameForward;
- (void)seekToEnd:(id)arg1;
- (_Bool)canSeekToEnd;
- (void)seekToBeginning:(id)arg1;
- (_Bool)canSeekToBeginning;
- (void)endScanningBackward:(id)arg1;
- (void)beginScanningBackward:(id)arg1;
- (void)scanBackward:(id)arg1;
- (_Bool)canScanBackward;
- (void)endScanningForward:(id)arg1;
- (void)beginScanningForward:(id)arg1;
- (void)scanForward:(id)arg1;
- (_Bool)canScanForward;
- (void)seekByTimeInterval:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekByTimeInterval:(double)arg1;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekToTime:(double)arg1;
- (_Bool)isSeeking;
- (_Bool)canSeek;
- (id)metadata;
- (_Bool)hasShareableContent;
- (_Bool)hasTrimmableContent;
- (_Bool)hasLiveStreamingContent;
- (_Bool)hasContentChapters;
- (_Bool)hasEnabledVideo;
- (_Bool)hasEnabledAudio;
- (id)seekableTimeRanges;
- (id)loadedTimeRanges;
- (double)contentDurationWithinEndTimes;
- (void)setMaxTime:(double)arg1;
- (double)maxTime;
- (void)setMinTime:(double)arg1;
- (double)minTime;
- (struct CGSize)contentDimensions;
- (void)setContentDuration:(double)arg1;
- (double)contentDuration;
- (_Bool)hasContent;
- (void)toggleMuted:(id)arg1;
- (void)changeVolumeToMaximum:(id)arg1;
- (void)changeVolumeToMinimum:(id)arg1;
- (void)decreaseVolume:(id)arg1;
- (void)increaseVolume:(id)arg1;
- (void)setVolume:(double)arg1;
- (double)volume;
- (void)setLooping:(_Bool)arg1;
- (_Bool)isLooping;
- (void)togglePlayback:(id)arg1;
- (_Bool)canTogglePlayback;
- (void)pause:(id)arg1;
- (void)setCanPause:(_Bool)arg1;
- (_Bool)canPause;
- (void)autoplay:(id)arg1;
- (void)play:(id)arg1;
- (void)setPlaying:(_Bool)arg1;
- (_Bool)isPlaying;
- (_Bool)canPlay;
- (void)setRateWithThrottling:(double)arg1;
- (void)setRate:(double)arg1;
- (double)rate;
- (id)initWithPlayer:(id)arg1;
- (void)endScrubbing:(id)arg1;
- (void)beginScrubbing:(id)arg1;
@property(nonatomic) _Bool CALayerDestinationIsTVOut;

@end

@interface AVPlayerControllerInternal : AVPlayerController
{
    unsigned int _jKeyDown:1;
    unsigned int _kKeyDown:1;
    unsigned int _lKeyDown:1;
    CALayer<AVPlayerLayer> *_playerLayer;
    id _deviceBatteryStateDidChangeObserver;
    unsigned int _deviceBatteryMonitoringWasEnabled:1;
    unsigned int _deviceBatteryChargingOrFull:1;
    unsigned int _playingOnSecondScreen:1;
    NSArray *_audioMediaSelectionOptions;
    NSArray *_legibleMediaSelectionOptions;
    id _timeObserverToken;
    id _playerItemTimeJumpedObserver;
    id _playerItemDidPlayToEndTimeObserver;
    id _audioSessionInterruptionObserver;
    unsigned int _audioSessionInterrupted:1;
    double _rateBeforeAudioSessionInterruption;
    unsigned int _pausedDuringAudioSessionInterruption:1;
    _Bool _looping;
    long long _actionAtItemEnd;
    NSObject<OS_dispatch_queue> *_seekQueue;
    _Bool _isSeeking;
    _Bool _pendingSeek;
    CDStruct_1b6d18a9 _seekToTime;
    CDStruct_1b6d18a9 _toleranceBefore;
    CDStruct_1b6d18a9 _toleranceAfter;
    _Bool _isScanningForward;
    _Bool _isScanningBackward;
    unsigned long long _scanningCount;
    double _preScanningRate;
    NSObject<OS_dispatch_queue> *_setRateWithThrottlingQueue;
    _Bool _isActuallySettingRateWithThrottling;
    _Bool _pendingSetRateWithThrottling;
    double _setToRate;
    _Bool _ignoreBackwardAndForwardScans;
    unsigned int _shouldPlayWhenLikelyToKeepUp:1;
    _Bool _scrubbing;
    _Bool _composable;
    _Bool _hasProtectedContent;
    _Bool _preventingIdleSystemSleep;
    _Bool _preventingIdleDisplaySleep;
    _Bool _disablingAutomaticTermination;
    AVPlayer *_player;
    AVValueTiming *_timing;
    NSDictionary *_metadata;
    NSArray *_contentChapters;
    NSArray *_availableMetadataFormats;
    double _rateBeforeScrubBegan;
}

+ (id)keyPathsForValuesAffectingExternalPlaybackAirPlayDeviceLocalizedName;
+ (id)keyPathsForValuesAffectingExternalPlaybackType;
+ (id)keyPathsForValuesAffectingExternalPlaybackActive;
+ (id)keyPathsForValuesAffectingPlayingOnExternalScreen;
+ (id)keyPathsForValuesAffectingAllowsExternalPlayback;
+ (id)keyPathsForValuesAffectingCanSeekChapterBackward;
+ (id)keyPathsForValuesAffectingCanSeekChapterForward;
+ (id)keyPathsForValuesAffectingCanSeekFrameBackward;
+ (id)keyPathsForValuesAffectingCanSeekFrameForward;
+ (id)keyPathsForValuesAffectingCanSeekToEnd;
+ (id)keyPathsForValuesAffectingCanSeekToBeginning;
+ (id)keyPathsForValuesAffectingCanScanBackward;
+ (id)keyPathsForValuesAffectingCanScanForward;
+ (id)keyPathsForValuesAffectingCanSeek;
+ (id)keyPathsForValuesAffectingHasShareableContent;
+ (id)keyPathsForValuesAffectingHasTrimmableContent;
+ (id)keyPathsForValuesAffectingHasLiveStreamingContent;
+ (id)keyPathsForValuesAffectingHasContentChapters;
+ (id)keyPathsForValuesAffectingHasEnabledVideo;
+ (id)keyPathsForValuesAffectingHasEnabledAudio;
+ (id)keyPathsForValuesAffectingLoadedTimeRanges;
+ (id)keyPathsForValuesAffectingContentDurationWithinEndTimes;
+ (id)keyPathsForValuesAffectingMaxTime;
+ (id)keyPathsForValuesAffectingMinTime;
+ (id)keyPathsForValuesAffectingContentDimensions;
+ (id)keyPathsForValuesAffectingContentDuration;
+ (id)keyPathsForValuesAffectingHasContent;
+ (id)keyPathsForValuesAffectingVolume;
+ (id)keyPathsForValuesAffectingCanTogglePlayback;
+ (id)keyPathsForValuesAffectingCanPause;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingCanPlay;
+ (id)keyPathsForValuesAffectingRate;
+ (id)keyPathsForValuesAffectingSeekableTimeRanges;
+ (id)keyPathsForValuesAffectingError;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)keyPathsForValuesAffectingHasLegibleMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasAudioMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingShouldPreventIdleDisplaySleep;
@property(nonatomic, getter=isDisablingAutomaticTermination) _Bool disablingAutomaticTermination; // @synthesize disablingAutomaticTermination=_disablingAutomaticTermination;
@property(nonatomic, getter=isPreventingIdleDisplaySleep) _Bool preventingIdleDisplaySleep; // @synthesize preventingIdleDisplaySleep=_preventingIdleDisplaySleep;
@property(nonatomic, getter=isPreventingIdleSystemSleep) _Bool preventingIdleSystemSleep; // @synthesize preventingIdleSystemSleep=_preventingIdleSystemSleep;
@property(nonatomic) double rateBeforeScrubBegan; // @synthesize rateBeforeScrubBegan=_rateBeforeScrubBegan;
@property(retain, nonatomic) NSArray *availableMetadataFormats; // @synthesize availableMetadataFormats=_availableMetadataFormats;
@property(nonatomic) _Bool hasProtectedContent; // @synthesize hasProtectedContent=_hasProtectedContent;
@property(nonatomic, getter=isComposable) _Bool composable; // @synthesize composable=_composable;
@property(retain, nonatomic) NSArray *contentChapters; // @synthesize contentChapters=_contentChapters;
@property(retain, nonatomic) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) AVValueTiming *timing; // @synthesize timing=_timing;
@property(nonatomic, getter=isScrubbing) _Bool scrubbing; // @synthesize scrubbing=_scrubbing;
@property(retain, nonatomic) AVPlayer *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (id)scanningDelays;
- (float)preferredRate;
- (id)externalPlaybackAirPlayDeviceLocalizedName;
- (long long)externalPlaybackType;
- (_Bool)isPlayingOnSecondScreen;
- (_Bool)isExternalPlaybackActive;
- (_Bool)isPlayingOnExternalScreen;
- (void)setAllowsExternalPlayback:(_Bool)arg1;
- (_Bool)allowsExternalPlayback;
- (void)updateTiming;
- (void)seekChapterBackward:(id)arg1;
- (_Bool)canSeekChapterBackward;
- (void)seekChapterForward:(id)arg1;
- (_Bool)canSeekChapterForward;
- (void)seekToChapter:(id)arg1;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (void)seekFrameBackward:(id)arg1;
- (_Bool)canSeekFrameBackward;
- (void)seekFrameForward:(id)arg1;
- (_Bool)canSeekFrameForward;
- (void)seekToEnd:(id)arg1;
- (_Bool)canSeekToEnd;
- (void)seekToBeginning:(id)arg1;
- (_Bool)canSeekToBeginning;
- (void)endScanningBackward:(id)arg1;
- (void)_updateScanningBackwardRate;
- (void)beginScanningBackward:(id)arg1;
- (void)scanBackward:(id)arg1;
- (_Bool)canScanBackward;
- (void)endScanningForward:(id)arg1;
- (void)_updateScanningForwardRate;
- (void)beginScanningForward:(id)arg1;
- (void)scanForward:(id)arg1;
- (_Bool)canScanForward;
- (void)seekByTimeInterval:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekByTimeInterval:(double)arg1;
- (void)actuallySeekToTime;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)endScrubbing;
- (void)beginScrubbing;
- (void)seekToTime:(double)arg1;
- (_Bool)isSeeking;
- (_Bool)canSeek;
- (_Bool)_isMarkedNotSerializablePlayerItem:(id)arg1;
- (_Bool)_isRestrictedFromSavingPlayerItem:(id)arg1;
- (_Bool)hasShareableContent;
- (_Bool)hasTrimmableContent;
- (_Bool)hasLiveStreamingContent;
- (_Bool)hasContentChapters;
- (_Bool)hasEnabledVideo;
- (_Bool)hasEnabledAudio;
- (id)loadedTimeRanges;
- (double)contentDurationWithinEndTimes;
- (void)setMaxTime:(double)arg1;
- (double)maxTime;
- (void)setMinTime:(double)arg1;
- (double)minTime;
- (struct CGSize)contentDimensions;
- (double)contentDuration;
- (_Bool)hasContent;
- (void)toggleMuted:(id)arg1;
- (void)changeVolumeToMaximum:(id)arg1;
- (void)changeVolumeToMinimum:(id)arg1;
- (void)decreaseVolume:(id)arg1;
- (void)increaseVolume:(id)arg1;
- (void)setVolume:(double)arg1;
- (double)volume;
- (void)setLooping:(_Bool)arg1;
- (_Bool)isLooping;
- (void)togglePlayback:(id)arg1;
- (_Bool)canTogglePlayback;
- (void)pause:(id)arg1;
- (_Bool)canPause;
- (void)autoplay:(id)arg1;
- (void)play:(id)arg1;
- (void)setPlaying:(_Bool)arg1;
- (_Bool)isPlaying;
- (_Bool)canPlay;
- (void)actuallySetRateWithThrottling;
- (void)setRateWithThrottling:(double)arg1;
- (void)setRate:(double)arg1;
- (double)rate;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)seekableTimeRanges;
- (id)error;
- (long long)status;
- (void)dealloc;
- (id)init;
- (id)initWithPlayer:(id)arg1;
- (id)_playableMediaSelectionOptionsForMediaCharacteristic:(id)arg1;
- (id)_selectedMediaOptionWithMediaCharacteristic:(id)arg1;
- (void)_setMediaOption:(id)arg1 mediaCharacteristic:(id)arg2;
- (id)_extendedLanguageTagsForOptions:(id)arg1;
- (id)_pushSystemLanguageToTop:(id)arg1;
- (void)_enableAutoMediaSelection:(id)arg1;
- (void)_disableLegibleMediaSelectionOptions:(id)arg1;
- (id)_subtitlesForOptions:(id)arg1;
- (id)_auxiliaryAudioOptionsForMediaSelectionOptions:(id)arg1;
- (id)_DVSAudioOptionsForMediaSelectionOptions:(id)arg1;
- (id)_mainAudioOptionsForMediaSelectionOptions:(id)arg1;
- (id)_languageCodesForOptions:(id)arg1;
- (id)_mediaSelectionOptionForLanguageCode:(id)arg1 options:(id)arg2 preferAC3:(_Bool)arg3;
- (id)_mediaSelectionOptionForLanguageCode:(id)arg1 options:(id)arg2;
- (id)legibleOptions;
- (id)audioOptions;
- (void)reloadLegibleOptions;
- (void)reloadAudioOptions;
- (void)reloadOptions;
- (void)setCurrentLegibleMediaSelectionOption:(id)arg1;
- (id)currentLegibleMediaSelectionOption;
- (void)setLegibleMediaSelectionOptions:(id)arg1;
- (id)legibleMediaSelectionOptions;
- (_Bool)hasLegibleMediaSelectionOptions;
- (id)currentAudioMediaSelectionOption;
- (void)setCurrentAudioMediaSelectionOption:(id)arg1;
- (void)setAudioMediaSelectionOptions:(id)arg1;
- (id)audioMediaSelectionOptions;
- (_Bool)hasAudioMediaSelectionOptions;
- (_Bool)hasMediaSelectionOptions;
- (void)_Starsky_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly, nonatomic) _Bool shouldPreventIdleDisplaySleep;
@property(nonatomic, getter=isDeviceBatteryChargingOrFull) _Bool deviceBatteryChargingOrFull;
- (void)_Starsky_dealloc;
- (void)_Starsky_init;
- (void)endScrubbing:(id)arg1;
- (void)beginScrubbing:(id)arg1;
- (void)setCALayerDestinationIsTVOut:(_Bool)arg1;
- (_Bool)CALayerDestinationIsTVOut;
- (void)setPlayingOnSecondScreen:(_Bool)arg1;

@end

@interface AVPlayerControllerTimeResolver : NSObject <NSCoding>
{
    AVPlayerController *_playerController;
    double _interval;
    double _resolution;
    double _currentTime;
    NSTimer *_timer;
}

+ (_Bool)automaticallyNotifiesObserversOfCurrentTime;
+ (id)keyPathsForValuesAffectingCurrentTimeAtEndOfSeekableTimeRanges;
+ (id)keyPathsForValuesAffectingThirtySecondsBeforeCurrentTimeWithinSeekableTimeRanges;
+ (id)keyPathsForValuesAffectingRemainingTimeWithinEndTimes;
+ (id)keyPathsForValuesAffectingRemainingTime;
+ (id)keyPathsForValuesAffectingCurrentTimeWithinEndTimes;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property double currentTime;
@property double resolution;
@property double interval;
@property(retain) AVPlayerController *playerController;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)dealloc;
@property(readonly, getter=isCurrentTimeAtEndOfSeekableTimeRanges) _Bool currentTimeAtEndOfSeekableTimeRanges;
@property(readonly, getter=isThirtySecondsBeforeCurrentTimeWithinSeekableTimeRanges) _Bool thirtySecondsBeforeCurrentTimeWithinSeekableTimeRanges;
@property(readonly) double remainingTimeWithinEndTimes;
@property(readonly) double remainingTime;
@property double currentTimeWithinEndTimes;

@end

@interface AVPlayerLayer (AVVideoLayer)
+ (id)keyPathsForValuesAffectingVideoLayerGravity;
- (void)setVideoLayerGravity:(long long)arg1;
- (long long)videoLayerGravity;
- (void)setPlayerController:(id)arg1;
@end

@interface AVPlayerView : UIView
{
    long long _viewWindowState;
}

- (void)_updateViewWindowState;
- (void)didMoveToWindow;
- (void)willMoveToWindow:(id)arg1;
- (void)setFrame:(struct CGRect)arg1;
@property(readonly, nonatomic) long long viewWindowState;

@end

@interface AVPlayerViewController : UIViewController <UIPopoverControllerDelegate, UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate>
{
    unsigned int _playerShouldAutoplay:1;
    unsigned int _showsPlaybackControls:1;
    long long _videoLayerGravity;
    AVNowPlayingInfoController *_nowPlayingInfoController;
    AVRemoteCommandController *_remoteCommandController;
    UIView *_containerView;
    AVUnsupportedContentIndicatorView *_unsupportedContentIndicatorView;
    AVAudioOnlyIndicatorView *_audioOnlyIndicatorView;
    AVExternalPlaybackIndicatorView *_externalPlaybackIndicatorView;
    AVLoadingIndicatorView *_loadingIndicatorView;
    UIView *_contentView;
    AVVideoLayerView *_videoLayerView;
    UIView *_contentOverlayView;
    UIView *_controlsView;
    AVTouchIgnoringView *_iAdPrerollView;
    AVPlaybackControlsViewController *_playbackControlsViewController;
    UIWindow *_secondScreenWindow;
    id _screenDidConnectObserver;
    id _screenDidDisconnectObserver;
    id _screenModeDidChangeObserver;
    id _activeAudioRouteDidChangeObserver;
    id _remoteCommandControllerDidReceiveStopCommandEventObserver;
    NSTimer *_loadingIndicatorTimer;
    unsigned int _playbackControlsViewControllerShouldShowLoadingIndicator:1;
    unsigned int _playbackControlsViewControllerShowsScaleButton:1;
    long long _playbackControlsViewControllerScaleButtonType;
    unsigned int _playbackControlsViewVisibilityNeedsUpdate:1;
    long long _playbackControlsViewVisibilityCounter;
    NSTimer *_playbackControlsViewVisibilityTimer;
    unsigned int _isShowingPlaybackControlsViewForUserInteraction:1;
    unsigned int _isShowingPlaybackControlsViewAfterUserInteraction:1;
    unsigned int _isShowingPlaybackControlsViewForUnsupportedContent:1;
    unsigned int _isShowingPlaybackControlsViewForAudioOnlyContent:1;
    unsigned int _isShowingPlaybackControlsViewForPlayingOnExternalScreen:1;
    unsigned int _showsPlaybackControlsView:1;
    unsigned int _isAnimatingPlaybackControlsViewVisibility:1;
    UIPopoverController *_mediaSelectionPopoverController;
    AVFullScreenViewController *_fullScreenViewController;
    unsigned int _animateFullScreenTransitionForPresenting:1;
    unsigned int _isTransitioningToOrFromFullScreen:1;
    unsigned int _animateFullScreenTransition:1;
    AVPlayerController *_playerController;
    CALayer<AVVideoLayer> *_videoLayer;
    unsigned int _showsExitFullScreenButton:1;
    id <AVPlayerViewControllerDelegate> _delegate;
    struct {
        unsigned int playerViewController_shouldExitFullScreenWithReason:1;
    } _delegateRespondsTo;
}

+ (id)keyPathsForValuesAffectingVideoBounds;
+ (id)keyPathsForValuesAffectingReadyForDisplay;
+ (id)keyPathsForValuesAffectingVideoGravity;
+ (id)keyPathsForValuesAffectingPlayer;
+ (void)initialize;
- (void).cxx_destruct;
- (id)animationControllerForDismissedController:(id)arg1;
- (id)animationControllerForPresentedController:(id)arg1 presentingController:(id)arg2 sourceController:(id)arg3;
- (void)animationEnded:(_Bool)arg1;
- (void)animateTransition:(id)arg1;
- (double)transitionDuration:(id)arg1;
- (void)popoverControllerDidDismissPopover:(id)arg1;
- (void)_transitionFromFullScreenViewControllerAnimated:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_transitionToFullScreenViewControllerAnimated:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_transitionFromFullScreenViewControllerWithReason:(long long)arg1;
- (_Bool)_showsPlaybackControlsView;
- (void)_showOrHidePlaybackControlsView;
- (void)_updatePlaybackControlsViewVisibilityIfNeeded;
- (void)_setPlaybackControlsViewVisibilityNeedsUpdate;
- (void)_hidePlaybackControlsViewIfPossibleUntilFurtherUserInteraction;
- (void)_firePlaybackControlsViewVisibilityTimer:(id)arg1;
- (void)_showPlaybackControlsViewIfNeededAndHideIfPossibleAfterDelayIfPlayingWithDelay:(double)arg1;
- (void)_showPlaybackControlsViewIfNeededAndHideIfPossibleAfterDelayIfPlaying;
- (void)_hidePlaybackControlsViewIfPossibleAfterDelayIfPlaying;
- (void)_hidePlaybackControlsViewIfPossible;
- (void)_showPlaybackControlsViewIfNeeded;
- (void)_handlePinchGesture:(id)arg1;
- (void)_handleSingleTapGesture:(id)arg1;
- (void)_handleDoubleTapGesture:(id)arg1;
- (void)_updatePlaybackControlsViewVisibilityForPlayingOnExternalScreen;
- (void)_updatePlaybackControlsViewVisibilityForAudioOnlyContent;
- (void)_updatePlaybackControlsViewVisibilityForUnsupportedContent;
- (void)_updatePlaybackControlsViewController;
- (void)_updateVideoLayerView;
- (void)_updateExternalPlaybackIndicatorView;
- (void)_updateAudioOnlyIndicatorView;
- (_Bool)_isAudioOnlyContent;
- (void)_updateUnsupportedContentIndicatorView;
- (_Bool)_isUnsupportedContent;
- (void)_updateScaleButtonType;
- (void)_updateShowsScaleButton;
- (void)_fireLoadingIndicatorTimer:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)canBecomeFirstResponder;
- (id)childViewControllerForStatusBarHidden;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)loadView;
@property(readonly, nonatomic) UIView *contentOverlayView;
@property(readonly, nonatomic) struct CGRect videoBounds;
@property(readonly, nonatomic, getter=isReadyForDisplay) _Bool readyForDisplay;
@property(copy, nonatomic) NSString *videoGravity;
@property(nonatomic) _Bool showsPlaybackControls;
@property(retain, nonatomic) AVPlayer *player;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
@property(retain, nonatomic) AVPlayerController *playerController;
@property(readonly, nonatomic) UIView *iAdPrerollView;
- (void)exitFullScreenWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)enterFullScreenWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)exitFullScreenAnimated:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)enterFullScreenAnimated:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(nonatomic) __weak id <AVPlayerViewControllerDelegate> delegate;
@property(nonatomic) _Bool showsExitFullScreenButton;
- (id)initWithVideoLayer:(id)arg1;
- (void)showPlaybackControlsViewForVolumeChange;
- (void)hidePlaybackControlsViewForTouchUp;
- (void)showPlaybackControlsViewForTouchDown;
- (void)fullScreenButtonTapped:(id)arg1;
- (void)mediaSelectionButtonTapped:(id)arg1;
- (void)togglePlayback:(id)arg1;
- (void)scaleButtonTapped:(id)arg1;
- (void)doneButtonTapped:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVRemoteCommandController : NSObject
{
    AVPlayerController *_playerController;
}

- (void).cxx_destruct;
- (void)_updateRegisteredRemoteCommandEnabledStates;
- (long long)_handleRemoteCommandEvent:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(retain, nonatomic) AVPlayerController *playerController;
- (void)dealloc;
- (id)init;

@end

@interface AVScrubber : UISlider
{
    NSArray *_loadedTimeRanges;
    AVLoadedTimeRangesView *_loadedTimeRangesMaxTrackView;
    UIImageView *_thumbView;
    double _touchLocationOffsetFromThumbViewCenter;
    double _beginTouchLocationInViewY;
    long long _scrubbingSpeed;
}

+ (id)keyPathsForValuesAffectingLocalizedScrubbingSpeedName;
+ (id)keyPathsForValuesAffectingPreciseScrubbingFeasible;
@property(nonatomic) long long scrubbingSpeed; // @synthesize scrubbingSpeed=_scrubbingSpeed;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)_layoutSubviewsForBoundsChange:(_Bool)arg1;
- (void)_initSubviews;
- (id)createThumbView;
@property(readonly, nonatomic) NSString *localizedScrubbingSpeedName;
@property(readonly, nonatomic, getter=isPreciseScrubbingFeasible) _Bool preciseScrubbingFeasible;
@property(retain, nonatomic) NSArray *loadedTimeRanges;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface AVTableViewCell : UITableViewCell
{
    id _representedObject;
}

@property(retain, nonatomic) id representedObject; // @synthesize representedObject=_representedObject;
- (void).cxx_destruct;

@end

@interface AVTimeFormatter : NSFormatter
{
    long long _style;
    unsigned int _fullWidth:1;
    double _formatTemplate;
}

@property(getter=isFullWidth) _Bool fullWidth;
@property double formatTemplate;
@property long long style;
- (id)stringForObjectValue:(id)arg1;
- (id)stringFromTimeInterval:(double)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface AVTouchIgnoringView : UIView
{
}

- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

@interface AVUnsupportedContentIndicatorView : UIView
{
    UIImageView *_imageView;
}

- (void).cxx_destruct;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface AVVideoLayerDelegate : NSObject
{
}

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;

@end

@interface AVVideoLayerView : UIView
{
    CALayer<AVVideoLayer> *_videoLayer;
    AVVideoLayerDelegate *_videoLayerDelegate;
    AVPlayerController *_playerController;
}

+ (id)keyPathsForValuesAffectingVideoScaled;
+ (id)keyPathsForValuesAffectingVideoRect;
+ (id)keyPathsForValuesAffectingReadyForDisplay;
+ (id)keyPathsForValuesAffectingVideoGravity;
- (void).cxx_destruct;
- (_Bool)_isPlayingOnSecondScreen;
- (void)layoutSublayersOfLayer:(id)arg1;
- (void)didMoveToWindow;
@property(nonatomic, getter=isVideoScaled) _Bool videoScaled;
@property(readonly, nonatomic) struct CGRect videoRect;
@property(readonly, nonatomic, getter=isReadyForDisplay) _Bool readyForDisplay;
@property(nonatomic) long long videoLayerGravity;
@property(retain, nonatomic) AVPlayerController *playerController;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 videoLayer:(id)arg2;

@end

@interface NSBundle (AVAdditions)
+ (_Bool)mainBundleIsXcode;
- (id)URLForMovieResource:(id)arg1;
- (id)imageForResource:(id)arg1 size:(struct CGSize)arg2;
@end

@interface UIFont (AVAdditions)
+ (id)italicTimeFontOfSize:(double)arg1;
+ (id)boldTimeFontOfSize:(double)arg1;
+ (id)timeFontOfSize:(double)arg1;
+ (id)timeFontWithName:(id)arg1 size:(double)arg2;
+ (id)_timeFontFromFont:(id)arg1;
@end

@interface UIImage (AVAdditions)
- (id)imageWithShadow:(id)arg1;
- (id)imageWithEtchedBorderOfColor:(id)arg1 radius:(double)arg2;
@end

@interface _AVBundle : NSObject
{
}

+ (id)bundle;

@end

