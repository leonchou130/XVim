//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct internal_state;

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/StoreBookkeeper.framework/StoreBookkeeper
// UUID: A0E9B985-FFE2-3173-845C-99922ECA1B39
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 121.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ISOperationDelegate <NSObject>

@optional
- (void)operationWillStart:(ISOperation *)arg1;
- (void)operationFinished:(ISOperation *)arg1;
- (void)operation:(ISOperation *)arg1 updatedProgress:(SSOperationProgress *)arg2;
- (void)operation:(ISOperation *)arg1 failedWithError:(NSError *)arg2;
@end

@protocol ISStoreURLOperationDelegate <ISURLOperationDelegate>

@optional
- (_Bool)operation:(ISStoreURLOperation *)arg1 shouldSetStoreFrontID:(NSString *)arg2;
- (void)operation:(ISStoreURLOperation *)arg1 didAuthenticateWithDSID:(NSNumber *)arg2;
@end

@protocol ISURLOperationDelegate <ISOperationDelegate>

@optional
- (NSString *)operation:(ISURLOperation *)arg1 sanitizedStringForString:(NSString *)arg2;
- (_Bool)operation:(ISURLOperation *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)operation:(ISURLOperation *)arg1 willSendRequest:(NSMutableURLRequest *)arg2;
- (_Bool)operation:(ISURLOperation *)arg1 processData:(NSMutableData *)arg2 error:(id *)arg3;
- (NSInputStream *)operation:(ISURLOperation *)arg1 needNewBodyStream:(NSURLRequest *)arg2;
- (void)operation:(ISURLOperation *)arg1 finishedWithOutput:(id)arg2;
- (void)operation:(ISURLOperation *)arg1 didReceiveResponse:(NSURLResponse *)arg2;
- (void)operation:(ISURLOperation *)arg1 didDiscoverContentLength:(NSNumber *)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol SBKKeyValuePayloadPair <NSObject>
+ (id)pairWithKVSKey:(NSString *)arg1 kvsPayload:(NSData *)arg2;
- (id)kvsValueDescription;
- (double)timestamp;
- (NSData *)kvsPayload;
- (NSString *)kvsKey;
@end

@protocol SBKSyncTransactionProcessing <NSObject>
- (id <SBKKeyValuePayloadPair>)transaction:(SBKSyncTransaction *)arg1 keyValuePairForUpdatedKey:(NSString *)arg2;
- (void)transaction:(SBKSyncTransaction *)arg1 processDeletedKey:(NSString *)arg2 isDirty:(_Bool *)arg3;
- (void)transaction:(SBKSyncTransaction *)arg1 processUpdatedKey:(NSString *)arg2 data:(NSData *)arg3 conflict:(_Bool)arg4 isDirty:(_Bool *)arg5;
- (void)transaction:(SBKSyncTransaction *)arg1 didProcessResponseData:(SBKSyncResponseData *)arg2;
- (void)transaction:(SBKSyncTransaction *)arg1 willProcessResponseData:(SBKSyncResponseData *)arg2;

@optional
- (NSNumber *)transaction:(SBKSyncTransaction *)arg1 conflictDetectionOrdinalForKey:(NSString *)arg2;
- (long long)transaction:(SBKSyncTransaction *)arg1 conflictDetectionTypeForTransactionDetectionType:(long long)arg2;
- (NSArray *)transaction:(SBKSyncTransaction *)arg1 keysForTransactionForTransactionKeysToDelete:(NSArray *)arg2;
- (NSArray *)transaction:(SBKSyncTransaction *)arg1 keysForTransactionForTransactionKeysToUpdate:(NSArray *)arg2;
- (NSString *)transaction:(SBKSyncTransaction *)arg1 syncAnchorForTransactionSyncAnchor:(NSString *)arg2;
@end

@protocol SBKTransactionControllerDelegate <NSObject>
- (void)transactionController:(SBKTransactionController *)arg1 transactionDidFinish:(SBKTransaction *)arg2;
- (void)transactionController:(SBKTransactionController *)arg1 transactionDidCancel:(SBKTransaction *)arg2 error:(SBKStoreError *)arg3;
- (_Bool)transactionController:(SBKTransactionController *)arg1 transactionDidFail:(SBKTransaction *)arg2 error:(SBKStoreError *)arg3;

@optional
- (_Bool)transactionController:(SBKTransactionController *)arg1 shouldScheduleTransaction:(SBKTransaction *)arg2;
@end

@interface NSData (SBKAdditions)
+ (id)SBKStringByMD5HashingString:(id)arg1;
+ (id)SBKStringFromDigestData:(id)arg1;
- (id)SBKDataByDeflatingWithGZip;
- (id)SBKDataByInflatingWithGZip;
- (id)SBKDataByDeflatingWithNoZipHeader;
- (id)SBKDataByInflatingWithNoZipHeader;
- (id)_SBKDataByDeflatingWithNoZipHeaderWithCompression:(unsigned long long)arg1;
- (id)_SBKDataByInflatingWithNoZipHeader;
@end

__attribute__((visibility("hidden")))
@interface SBKAlertDialog : NSObject
{
    NSString *_title;
    NSString *_message;
    NSString *_cancelButtonTitle;
    CDUnknownBlockType _completionHandler;
    NSString *_acceptButtonTitle;
}

@property(copy) NSString *acceptButtonTitle; // @synthesize acceptButtonTitle=_acceptButtonTitle;
@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(copy) NSString *cancelButtonTitle; // @synthesize cancelButtonTitle=_cancelButtonTitle;
@property(copy) NSString *message; // @synthesize message=_message;
@property(copy) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (void)_runAsCFUserNotificationDisplayAlert;
- (_Bool)_runAsUIAlertView;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)showWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initWithTitle:(id)arg1 message:(id)arg2 cancelButtonTitle:(id)arg3 acceptButtonTitle:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface SBKAsynchronousTask : NSObject
{
    NSString *_debugDescription;
    NSObject<OS_dispatch_queue> *_handlerQueue;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_source> *_timeoutTimer;
    _Bool _taskInvalidationDisabled;
    double _timeout;
    int _cancelType;
    id _result;
    NSError *_error;
    CDUnknownBlockType _expirationHandler;
    CDUnknownBlockType _finishedHandler;
    SBKTaskAssertion *_taskAssertion;
    NSMutableArray *_completions;
}

@property(retain) NSMutableArray *completions; // @synthesize completions=_completions;
@property(retain) SBKTaskAssertion *taskAssertion; // @synthesize taskAssertion=_taskAssertion;
- (void).cxx_destruct;
- (void)invokeTaskCompletionBlocksWithBlock:(CDUnknownBlockType)arg1;
- (void)addTaskCompletionBlock:(CDUnknownBlockType)arg1;
- (void)invalidate;
- (void)_invalidateAssertion:(_Bool)arg1;
- (void)endTaskOperation;
- (void)finishTaskOperationWithResult:(id)arg1 error:(id)arg2;
- (void)beginTaskOperation;
@property(retain) NSError *error; // @synthesize error=_error;
@property(retain) id result; // @synthesize result=_result;
@property int cancelType; // @synthesize cancelType=_cancelType;
- (void)_onQueueFireExpirationHandlerIfNecesary;
@property(copy) CDUnknownBlockType finishedHandler; // @synthesize finishedHandler=_finishedHandler;
@property(copy) CDUnknownBlockType expirationHandler; // @synthesize expirationHandler=_expirationHandler;
- (id)description;
- (void)_invalidateTimer;
- (void)dealloc;
- (id)debugDescription;
- (id)initWithHandlerQueue:(id)arg1 timeout:(double)arg2 debugDescription:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface SBKGenericKeyValuePair : NSObject <SBKKeyValuePayloadPair>
{
    NSString *_kvsKey;
    NSData *_kvsPayload;
}

+ (id)pairWithKVSKey:(id)arg1 kvsPayload:(id)arg2;
@property(readonly, nonatomic) NSData *kvsPayload; // @synthesize kvsPayload=_kvsPayload;
@property(readonly, nonatomic) NSString *kvsKey; // @synthesize kvsKey=_kvsKey;
- (void).cxx_destruct;
- (double)timestamp;
- (id)kvsValueDescription;
- (id)initWithKVSKey:(id)arg1 kvsPayload:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SBKRequestHandler : NSObject
{
    SBKStoreURLBagContext *_bagContext;
}

@property(readonly, nonatomic) SBKStoreURLBagContext *bagContext; // @synthesize bagContext=_bagContext;
- (void).cxx_destruct;
- (void)cancel;
- (void)timeout;
- (id)initWithBagContext:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKSyncRequestHandler : SBKRequestHandler <SBKSyncTransactionProcessing>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_overrideResponseDomainVersion;
    SBKSyncResponseData *_responseData;
    NSMutableArray *_responseUpdatedKeys;
    NSMutableArray *_responseDeletedKeys;
    NSMutableArray *_responseConflictedKeys;
    NSMutableDictionary *_responseDataByKey;
    SBKTransactionController *_transactionController;
}

+ (long long)conflictDetectionType;
@property(readonly) SBKTransactionController *transactionController; // @synthesize transactionController=_transactionController;
@property(readonly) SBKSyncResponseData *responseData; // @synthesize responseData=_responseData;
- (void).cxx_destruct;
- (id)transaction:(id)arg1 keyValuePairForUpdatedKey:(id)arg2;
- (void)transaction:(id)arg1 processDeletedKey:(id)arg2 isDirty:(_Bool *)arg3;
- (void)transaction:(id)arg1 processUpdatedKey:(id)arg2 data:(id)arg3 conflict:(_Bool)arg4 isDirty:(_Bool *)arg5;
- (void)transaction:(id)arg1 didProcessResponseData:(id)arg2;
- (void)transaction:(id)arg1 willProcessResponseData:(id)arg2;
- (void)startTransactionWithSyncAnchor:(id)arg1 keysToUpdate:(id)arg2 keysToDelete:(id)arg3 finishedBlock:(CDUnknownBlockType)arg4;
- (void)clearTransactionResponseData;
- (void)_onQueue_clearTransactionResponseData;
- (id)responseDataForResponseKey:(id)arg1;
@property(readonly) NSArray *responseConflictedKeys; // @synthesize responseConflictedKeys=_responseConflictedKeys;
@property(readonly) NSArray *responseDeletedKeys; // @synthesize responseDeletedKeys=_responseDeletedKeys;
@property(readonly) NSArray *responseUpdatedKeys; // @synthesize responseUpdatedKeys=_responseUpdatedKeys;
@property(copy) NSString *responseDomainVersion;
- (id)initWithBagContext:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBKLoadDomainVersionRequestHandler : SBKSyncRequestHandler <SBKSyncTransactionProcessing>
{
    _Bool _loadsRemoteItemCount;
    unsigned long long _responseItemCount;
    unsigned long long _itemCount;
    SBKSyncTransaction *_transaction;
}

+ (long long)conflictDetectionType;
@property(retain) SBKSyncTransaction *transaction; // @synthesize transaction=_transaction;
@property unsigned long long itemCount; // @synthesize itemCount=_itemCount;
@property(readonly) unsigned long long responseItemCount; // @synthesize responseItemCount=_responseItemCount;
@property _Bool loadsRemoteItemCount; // @synthesize loadsRemoteItemCount=_loadsRemoteItemCount;
- (void).cxx_destruct;
- (void)runWithCompletionHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(copy) NSString *responseDomainVersion;
@property(readonly) Class superclass;

@end

@interface SBKLogger : NSObject
{
    NSString *_auxPath;
    NSFileHandle *_fileHandle;
    NSString *_filter;
    NSString *_runtimeOverride;
    int _pid;
    NSString *_procName;
    NSRegularExpression *_runtimeOverrideRegex;
    NSLock *_lock;
}

+ (id)sharedLogger;
+ (_Bool)debugLoggingEnabled;
+ (_Bool)verboseLoggingEnabled;
@property(copy) NSString *runtimeOverride; // @synthesize runtimeOverride=_runtimeOverride;
@property(copy) NSString *filter; // @synthesize filter=_filter;
- (void).cxx_destruct;
- (void)removeRuntimeOverride:(id)arg1;
- (void)addRuntimeOverride:(id)arg1;
- (void)logString:(id)arg1;
- (void)logFunction:(const char *)arg1 format:(id)arg2;
- (void)logFile:(const char *)arg1 lineNumber:(int)arg2 format:(id)arg3;
- (void)performLoggingBlock:(CDUnknownBlockType)arg1;
- (_Bool)shouldOverrideCondition:(id)arg1 file:(id)arg2;
- (id)auxPath;
- (void)setAuxPath:(id)arg1;
- (void)dealloc;
- (void)_updateSettingsFromPreferences:(id)arg1;
- (id)init;

@end

@interface SBKStoreURLBagContext : NSObject <NSMutableCopying, NSCopying>
{
    _Bool _domainDisabled;
    double _pollingIntervalInSeconds;
    NSString *_domain;
    NSURL *_syncRequestURL;
    NSURL *_pushKeyValueRequestURL;
    NSURL *_pullKeyValueRequestURL;
    NSURL *_pushAllKeyValueRequestURL;
    NSURL *_pullAllKeyValueRequestURL;
    SSURLBag *_bag;
}

+ (void)loadBagContextFromURLBag:(id)arg1 domain:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
+ (void)_findFirstValueInBag:(id)arg1 keyEnumerator:(id)arg2 valueTransformer:(CDUnknownBlockType)arg3 defaultValue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
+ (id)ExtrasDomainIdentifier;
+ (id)UPPDomainIdentifier;
+ (void)enumerateRequestURLBagKeysWithBlock:(CDUnknownBlockType)arg1;
@property(retain) SSURLBag *bag; // @synthesize bag=_bag;
@property _Bool domainDisabled; // @synthesize domainDisabled=_domainDisabled;
@property(retain) NSURL *pullAllKeyValueRequestURL; // @synthesize pullAllKeyValueRequestURL=_pullAllKeyValueRequestURL;
@property(retain) NSURL *pushAllKeyValueRequestURL; // @synthesize pushAllKeyValueRequestURL=_pushAllKeyValueRequestURL;
@property(retain) NSURL *pullKeyValueRequestURL; // @synthesize pullKeyValueRequestURL=_pullKeyValueRequestURL;
@property(retain) NSURL *pushKeyValueRequestURL; // @synthesize pushKeyValueRequestURL=_pushKeyValueRequestURL;
@property(retain) NSURL *syncRequestURL; // @synthesize syncRequestURL=_syncRequestURL;
@property(copy) NSString *domain; // @synthesize domain=_domain;
- (void).cxx_destruct;
@property double pollingIntervalInSeconds; // @synthesize pollingIntervalInSeconds=_pollingIntervalInSeconds;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithBag:(id)arg1 domain:(id)arg2;
- (id)description;
- (id)init;
- (id)_initWithDomain:(id)arg1 syncRequestURL:(id)arg2 domainDisabled:(_Bool)arg3;

@end

__attribute__((visibility("hidden")))
@interface SBKMutableStoreURLBagContext : SBKStoreURLBagContext
{
}


// Remaining properties
@property(copy) NSString *domain;
@property _Bool domainDisabled;
@property double pollingIntervalInSeconds;
@property(retain) NSURL *pullAllKeyValueRequestURL;
@property(retain) NSURL *pullKeyValueRequestURL;
@property(retain) NSURL *pushAllKeyValueRequestURL;
@property(retain) NSURL *pushKeyValueRequestURL;
@property(retain) NSURL *syncRequestURL;
@end

__attribute__((visibility("hidden")))
@interface SBKPlaybackPositionSyncRequestHandler : SBKSyncRequestHandler <SBKTransactionControllerDelegate, SBKSyncTransactionProcessing>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_syncOperationQueue;
    _Bool _syncInProgress;
    _Bool _canceled;
    id <SBKUniversalPlaybackPositionDataSource> _dataSource;
    SBKTransactionController *_kvsController;
    id <SBKUniversalPlaybackPositionTransactionContext> _dataSourceTransactionContext;
    NSMutableDictionary *_metadataItemsFromDataSource;
    NSDictionary *_metadataItemsToCommitToDataSource;
    NSDictionary *_metadataItemsToCommitToKVSStorage;
    NSMutableDictionary *_responseMetadataItemsToCommitToDataSource;
    NSMutableDictionary *_responseMetadataItemsMergedToCommitBackToKVSStorage;
    SBKSyncTransaction *_currentKVSTransaction;
    NSError *_fatalSyncError;
    NSString *_overrideSyncAnchor;
}

@property(retain) NSString *overrideSyncAnchor; // @synthesize overrideSyncAnchor=_overrideSyncAnchor;
@property(retain) NSError *fatalSyncError; // @synthesize fatalSyncError=_fatalSyncError;
@property _Bool canceled; // @synthesize canceled=_canceled;
@property _Bool syncInProgress; // @synthesize syncInProgress=_syncInProgress;
@property(retain) SBKSyncTransaction *currentKVSTransaction; // @synthesize currentKVSTransaction=_currentKVSTransaction;
@property(retain) NSMutableDictionary *responseMetadataItemsMergedToCommitBackToKVSStorage; // @synthesize responseMetadataItemsMergedToCommitBackToKVSStorage=_responseMetadataItemsMergedToCommitBackToKVSStorage;
@property(retain) NSMutableDictionary *responseMetadataItemsToCommitToDataSource; // @synthesize responseMetadataItemsToCommitToDataSource=_responseMetadataItemsToCommitToDataSource;
@property(retain) NSDictionary *metadataItemsToCommitToKVSStorage; // @synthesize metadataItemsToCommitToKVSStorage=_metadataItemsToCommitToKVSStorage;
@property(retain) NSDictionary *metadataItemsToCommitToDataSource; // @synthesize metadataItemsToCommitToDataSource=_metadataItemsToCommitToDataSource;
@property(retain) NSMutableDictionary *metadataItemsFromDataSource; // @synthesize metadataItemsFromDataSource=_metadataItemsFromDataSource;
@property(retain) id <SBKUniversalPlaybackPositionTransactionContext> dataSourceTransactionContext; // @synthesize dataSourceTransactionContext=_dataSourceTransactionContext;
@property(retain) SBKTransactionController *kvsController; // @synthesize kvsController=_kvsController;
@property(retain) id <SBKUniversalPlaybackPositionDataSource> dataSource; // @synthesize dataSource=_dataSource;
- (void).cxx_destruct;
- (id)transaction:(id)arg1 conflictDetectionOrdinalForKey:(id)arg2;
- (id)transaction:(id)arg1 syncAnchorForTransactionSyncAnchor:(id)arg2;
- (id)transaction:(id)arg1 keyValuePairForUpdatedKey:(id)arg2;
- (void)transaction:(id)arg1 processDeletedKey:(id)arg2 isDirty:(_Bool *)arg3;
- (void)transaction:(id)arg1 processUpdatedKey:(id)arg2 data:(id)arg3 conflict:(_Bool)arg4 isDirty:(_Bool *)arg5;
- (void)transaction:(id)arg1 didProcessResponseData:(id)arg2;
- (void)transaction:(id)arg1 willProcessResponseData:(id)arg2;
- (void)transactionController:(id)arg1 transactionDidFinish:(id)arg2;
- (void)transactionController:(id)arg1 transactionDidCancel:(id)arg2 error:(id)arg3;
- (_Bool)transactionController:(id)arg1 transactionDidFail:(id)arg2 error:(id)arg3;
- (void)_signalKVSTransactionCompletion:(id)arg1 withError:(id)arg2;
- (void)_signalKVSTransactionCompletion:(id)arg1;
- (id)_synchronouslyRunKVSTransaction:(id)arg1;
- (id)newKVSSyncTransactionWithUpdatedMetadataItemIdentifiers:(id)arg1 processConflicts:(_Bool)arg2;
- (void)_mergeMetadataItemsFromSyncResponse;
- (int)_mergeConflictedItemFromSyncResponse:(id)arg1;
- (void)synchronizeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)cancel;
- (void)timeout;
- (void)cancelWithError:(id)arg1;
- (_Bool)_shouldStop;
- (_Bool)_synchronize:(id *)arg1;
- (void)_dataSourceCancelTransaction;
- (void)clearTransactionResponseData;
- (id)initWithDataSource:(id)arg1 bagContext:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SBKPreferences : NSObject
{
}

+ (id)storeBookkeeperPreferences;
- (_Bool)boolForKey:(id)arg1;
- (void)setBool:(_Bool)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1 withDefaultValue:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)registerDefaultsIfKeyNotSet:(id)arg1 registrationBlock:(CDUnknownBlockType)arg2;
- (void)_preferencesDidChange;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SBKProcessAssertion : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    CDUnknownBlockType _expirationBlock;
    unsigned long long _identifier;
    BKSProcessAssertion *_bkProcessAssertion;
    id _expirationObserver;
}

@property(retain) id expirationObserver; // @synthesize expirationObserver=_expirationObserver;
@property(readonly) unsigned long long identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (void)invalidate;
- (void)_expireBackgroundTask;
@property(retain) BKSProcessAssertion *bkProcessAssertion; // @synthesize bkProcessAssertion=_bkProcessAssertion;
- (void)_onQueueSetBkProcessAssertion:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)initWithExpirationBlock:(CDUnknownBlockType)arg1 debugDescription:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SBKRequest : NSObject
{
    _Bool _shouldAuthenticate;
    NSURL *_requestURL;
    NSString *_action;
    NSData *_bodyData;
    long long _bodyContentType;
    NSDictionary *_headers;
    NSDictionary *_arguments;
    long long _method;
    ISDataProvider *_responseDataProvider;
    _Bool _concurrent;
    _Bool _includeDeviceGUID;
    SBKTransaction *_transaction;
}

+ (id)_contentTypeStringForBodyContentType:(long long)arg1;
+ (id)_contentEncodingTypeStringForBodyContentEncodingType:(long long)arg1;
+ (id)_methodStringForMethod:(long long)arg1;
+ (long long)bodyContentEncodingType;
+ (long long)bodyContentType;
+ (id)requestWithRequestURL:(id)arg1;
@property(retain, nonatomic) ISDataProvider *responseDataProvider; // @synthesize responseDataProvider=_responseDataProvider;
@property(retain, nonatomic) NSData *bodyData; // @synthesize bodyData=_bodyData;
@property(nonatomic) _Bool includeDeviceGUID; // @synthesize includeDeviceGUID=_includeDeviceGUID;
@property(nonatomic) _Bool shouldAuthenticate; // @synthesize shouldAuthenticate=_shouldAuthenticate;
@property(nonatomic) long long method; // @synthesize method=_method;
@property(readonly, nonatomic, getter=isConcurrent) _Bool concurrent; // @synthesize concurrent=_concurrent;
@property(retain, nonatomic) SBKTransaction *transaction; // @synthesize transaction=_transaction;
- (void).cxx_destruct;
- (id)newURLOperation;
- (id)_defaultHeaderFields;
- (_Bool)acceptsGzipEncoding;
- (id)canonicalResponseForResponse:(id)arg1;
- (id)copyRequestProperties;
- (void)setBodyDataWithPropertyList:(id)arg1;
- (void)setValue:(id)arg1 forArgument:(id)arg2;
- (void)setValue:(id)arg1 forHeaderField:(id)arg2;
- (id)descriptionWithoutHeaderFields;
@property(readonly, nonatomic) double timeoutInterval;
- (id)description;
- (id)initWithRequestURL:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKPullValueRequest : SBKRequest
{
}

+ (id)requestForTransaction:(id)arg1;
+ (id)propertyListBodyWithTransaction:(id)arg1;
- (id)canonicalResponseForResponse:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKResponse : NSObject
{
    NSDictionary *_responseDictionary;
    unsigned long long _responseCode;
    NSDictionary *_responseHeaderFields;
    NSError *_error;
    double _retrySeconds;
    NSString *_MIMEType;
    SBKResponseStatus *_responseStatus;
}

+ (id)responseWithResponse:(id)arg1;
+ (id)responseWithCode:(unsigned long long)arg1 headerFields:(id)arg2 responseDictionary:(id)arg3 MIMEType:(id)arg4 error:(id)arg5;
+ (id)responseWithURLResponse:(id)arg1 responseDictionary:(id)arg2;
@property(readonly, nonatomic) SBKResponseStatus *responseStatus; // @synthesize responseStatus=_responseStatus;
@property(readonly, nonatomic) NSString *MIMEType; // @synthesize MIMEType=_MIMEType;
@property(readonly) double retrySeconds; // @synthesize retrySeconds=_retrySeconds;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) NSDictionary *responseHeaderFields; // @synthesize responseHeaderFields=_responseHeaderFields;
@property(readonly, nonatomic) unsigned long long responseCode; // @synthesize responseCode=_responseCode;
@property(readonly, nonatomic) NSDictionary *responseDictionary; // @synthesize responseDictionary=_responseDictionary;
- (void).cxx_destruct;
@property(readonly) _Bool isPuntedError;
@property(readonly) _Bool isValidationError;
@property(readonly) _Bool isAuthenticationError;
@property(readonly) _Bool isUnsupportedClient;
@property(readonly) _Bool isGenericError;
@property(readonly) _Bool shouldFileRadar;
@property(readonly) _Bool isError;
@property(readonly) _Bool isRecoverable;
@property(readonly) _Bool isSuccess;
@property(readonly) NSError *requestError;
@property(readonly, copy) NSString *consoleDescription;
@property(readonly) long long statusCode;
- (id)description;
- (id)initWithCode:(unsigned long long)arg1 headerFields:(id)arg2 responseDictionary:(id)arg3 MIMEType:(id)arg4 error:(id)arg5;
- (id)initWithURLResponse:(id)arg1 responseDictionary:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SBKPullValueResponse : SBKResponse
{
    NSString *_itemKey;
    NSString *_itemVersion;
    NSData *_itemValuePayload;
    NSString *_domainVersion;
}

+ (id)responseWithResponse:(id)arg1 transaction:(id)arg2;
@property(readonly) NSString *domainVersion; // @synthesize domainVersion=_domainVersion;
@property(readonly) NSData *itemValuePayload; // @synthesize itemValuePayload=_itemValuePayload;
@property(readonly) NSString *itemVersion; // @synthesize itemVersion=_itemVersion;
@property(readonly) NSString *itemKey; // @synthesize itemKey=_itemKey;
- (void).cxx_destruct;
- (void)deserializeResponseBodyWithTransaction:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKTransaction : NSObject
{
    NSString *_domain;
    NSURL *_requestURL;
    SBKRequest *_activeRequest;
    NSMutableDictionary *_userInfo;
}

@property(retain) NSMutableDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property(retain) SBKRequest *activeRequest; // @synthesize activeRequest=_activeRequest;
@property(retain) NSURL *requestURL; // @synthesize requestURL=_requestURL;
@property(readonly, copy) NSString *domain; // @synthesize domain=_domain;
- (void).cxx_destruct;
- (id)newRequest;
- (id)clampsKey;
- (void)processDataInResponse:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)transactionContextForKey:(id)arg1;
- (void)setTransactionContext:(id)arg1 forKey:(id)arg2;
- (id)init;
- (id)initWithDomain:(id)arg1 requestURL:(id)arg2;

@end

@interface SBKPullValueTransaction : SBKTransaction
{
    _Bool _success;
    NSString *_requestedKey;
    id <SBKKeyValuePayloadPair> _clientItemPayloadPair;
    NSString *_clientItemVersionAnchor;
    id <SBKKeyValuePayloadPair> _resultItemPayloadPair;
    NSString *_resultItemVersionAnchor;
    NSString *_resultDomainVersion;
}

@property(readonly) NSString *resultDomainVersion; // @synthesize resultDomainVersion=_resultDomainVersion;
@property(readonly) NSString *resultItemVersionAnchor; // @synthesize resultItemVersionAnchor=_resultItemVersionAnchor;
@property(readonly) id <SBKKeyValuePayloadPair> resultItemPayloadPair; // @synthesize resultItemPayloadPair=_resultItemPayloadPair;
@property(readonly) _Bool success; // @synthesize success=_success;
@property(readonly) NSString *clientItemVersionAnchor; // @synthesize clientItemVersionAnchor=_clientItemVersionAnchor;
@property(readonly) id <SBKKeyValuePayloadPair> clientItemPayloadPair; // @synthesize clientItemPayloadPair=_clientItemPayloadPair;
@property(readonly, copy) NSString *requestedKey; // @synthesize requestedKey=_requestedKey;
- (void).cxx_destruct;
- (void)processDataInResponse:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)newRequest;
- (id)clampsKey;
- (id)description;
- (id)initWithStoreBagContext:(id)arg1 requestedKey:(id)arg2 clientItemPayloadPair:(id)arg3 clientItemVersionAnchor:(id)arg4;

@end

__attribute__((visibility("hidden")))
@interface SBKPushValueRequest : SBKRequest
{
}

+ (id)requestForTransaction:(id)arg1;
+ (id)propertyListBodyWithTransaction:(id)arg1;
- (id)canonicalResponseForResponse:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKPushValueResponse : SBKResponse
{
    NSString *_domainVersion;
    NSData *_conflictItemValuePayload;
    NSString *_conflictItemKey;
    NSString *_conflictItemVersionAnchor;
}

+ (id)responseWithResponse:(id)arg1 transaction:(id)arg2;
@property(readonly) NSString *conflictItemVersionAnchor; // @synthesize conflictItemVersionAnchor=_conflictItemVersionAnchor;
@property(readonly) NSString *conflictItemKey; // @synthesize conflictItemKey=_conflictItemKey;
@property(readonly) NSData *conflictItemValuePayload; // @synthesize conflictItemValuePayload=_conflictItemValuePayload;
@property(readonly) NSString *domainVersion; // @synthesize domainVersion=_domainVersion;
- (void).cxx_destruct;
- (void)deserializeResponseBodyWithTransaction:(id)arg1;

@end

@interface SBKPushValueTransaction : SBKTransaction
{
    _Bool _isRechedulable;
    _Bool _success;
    id <SBKKeyValuePayloadPair> _clientItemPayloadPair;
    NSString *_clientItemVersionAnchor;
    id <SBKKeyValuePayloadPair> _requestItemPayloadPair;
    NSString *_requestItemVersionAnchor;
    id <SBKKeyValuePayloadPair> _resultItemPayloadPair;
    NSString *_resultItemVersionAnchor;
    NSString *_resultDomainVersion;
}

@property(readonly) NSString *resultDomainVersion; // @synthesize resultDomainVersion=_resultDomainVersion;
@property(readonly) NSString *resultItemVersionAnchor; // @synthesize resultItemVersionAnchor=_resultItemVersionAnchor;
@property(readonly) id <SBKKeyValuePayloadPair> resultItemPayloadPair; // @synthesize resultItemPayloadPair=_resultItemPayloadPair;
@property(readonly) _Bool success; // @synthesize success=_success;
@property(readonly) NSString *requestItemVersionAnchor; // @synthesize requestItemVersionAnchor=_requestItemVersionAnchor;
@property(readonly) id <SBKKeyValuePayloadPair> requestItemPayloadPair; // @synthesize requestItemPayloadPair=_requestItemPayloadPair;
@property(readonly) NSString *clientItemVersionAnchor; // @synthesize clientItemVersionAnchor=_clientItemVersionAnchor;
@property(readonly) id <SBKKeyValuePayloadPair> clientItemPayloadPair; // @synthesize clientItemPayloadPair=_clientItemPayloadPair;
- (void).cxx_destruct;
- (id)_resolveConflictBetweenClientPayloadPair:(id)arg1 andServerPayloadPair:(id)arg2;
- (void)processDataInResponse:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)newRequest;
- (id)clampsKey;
- (id)description;
- (id)initWithStoreBagContext:(id)arg1 clientItemPayloadPair:(id)arg2 clientItemVersionAnchor:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface SBKRequestData : NSObject
{
    SBKTransaction *_transaction;
}

+ (id)propertyListBodyWithTransaction:(id)arg1;
@property(retain) SBKTransaction *transaction; // @synthesize transaction=_transaction;
- (void).cxx_destruct;
- (id)serializableRequestBodyPropertyList;
- (id)initWithTransaction:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKResponseStatus : NSObject
{
    _Bool _isRecoverable;
    _Bool _isError;
    _Bool _shouldFileRadar;
    _Bool _isPuntedError;
    long long _statusCode;
    NSString *_consoleDescription;
}

+ (id)responseStatusForStatusCodeNumber:(id)arg1;
@property(readonly) _Bool isPuntedError; // @synthesize isPuntedError=_isPuntedError;
@property(readonly) _Bool shouldFileRadar; // @synthesize shouldFileRadar=_shouldFileRadar;
@property(readonly) _Bool isError; // @synthesize isError=_isError;
@property(readonly) _Bool isRecoverable; // @synthesize isRecoverable=_isRecoverable;
@property(readonly, copy) NSString *consoleDescription; // @synthesize consoleDescription=_consoleDescription;
@property(readonly) long long statusCode; // @synthesize statusCode=_statusCode;
- (void).cxx_destruct;
@property(readonly) _Bool isGenericError;
@property(readonly) _Bool isValidationError;
@property(readonly) _Bool isAuthenticationError;
@property(readonly) _Bool isUnsupportedClient;
@property(readonly) NSError *requestError;
@property(readonly) _Bool isSuccess;
- (id)initWithStatus:(long long)arg1 isRecoverable:(_Bool)arg2 isError:(_Bool)arg3 consoleDescription:(id)arg4 shouldFileRadar:(_Bool)arg5;

@end

__attribute__((visibility("hidden")))
@interface SBKSimpleTransactionRequestHandler : SBKRequestHandler
{
    _Bool _canceled;
    SBKTransactionController *_transactionController;
}

@property(readonly, nonatomic) _Bool canceled; // @synthesize canceled=_canceled;
@property(readonly, nonatomic) SBKTransactionController *transactionController; // @synthesize transactionController=_transactionController;
- (void).cxx_destruct;
- (void)cancelWithError:(id)arg1;
- (void)cancel;
- (void)timeout;
- (void)scheduleTransaction:(id)arg1 finishedBlock:(CDUnknownBlockType)arg2;
- (id)initWithBagContext:(id)arg1;

@end

@interface SBKStoreAuthenticationController : NSObject
{
    _Bool _shouldAuthenticate;
    SSAccount *_storeAccount;
}

+ (id)lastFailedSyncAccountName;
+ (id)lastFailedSyncAccountIdentifier;
+ (id)lastSyncedAccountName;
+ (id)lastSyncedAccountIdentifier;
+ (void)clearLastSyncnedAccount;
@property _Bool shouldAuthenticate; // @synthesize shouldAuthenticate=_shouldAuthenticate;
@property(readonly) SSAccount *storeAccount; // @synthesize storeAccount=_storeAccount;
- (void).cxx_destruct;
- (void)saveAccountToLastFailedSyncDefaults;
- (void)saveAccountToLastSyncedDefaults;
- (id)authenticationErrorsForTransaction:(id)arg1;
- (_Bool)shouldForceAuthenticationForTransaction:(id)arg1;
- (_Bool)isAuthenticationValidForTransaction:(id)arg1 error:(id *)arg2;
- (id)initWithStoreAccount:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKStoreClampsController : NSObject <NSCoding>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSDictionary *_transactionClamps;
    double _accountIdentifierCheckTimestamp;
    double _authenticationNeededTimestamp;
    double _userAcceptedSyncTimestamp;
    double _networkingBlockedUntil;
    double _backOffUntil;
    double _userCancelledSignInBackOffUntil;
    double _nextUserCancelBackOffInterval;
    NSData *_pendingUserDefaultArchivedData;
}

+ (id)sharedClampsController;
@property(retain) NSData *pendingUserDefaultArchivedData; // @synthesize pendingUserDefaultArchivedData=_pendingUserDefaultArchivedData;
@property double nextUserCancelBackOffInterval; // @synthesize nextUserCancelBackOffInterval=_nextUserCancelBackOffInterval;
@property double userCancelledSignInBackOffUntil; // @synthesize userCancelledSignInBackOffUntil=_userCancelledSignInBackOffUntil;
@property double backOffUntil; // @synthesize backOffUntil=_backOffUntil;
@property double networkingBlockedUntil; // @synthesize networkingBlockedUntil=_networkingBlockedUntil;
@property double userAcceptedSyncTimestamp; // @synthesize userAcceptedSyncTimestamp=_userAcceptedSyncTimestamp;
@property double authenticationNeededTimestamp; // @synthesize authenticationNeededTimestamp=_authenticationNeededTimestamp;
@property double accountIdentifierCheckTimestamp; // @synthesize accountIdentifierCheckTimestamp=_accountIdentifierCheckTimestamp;
@property(retain) NSDictionary *transactionClamps; // @synthesize transactionClamps=_transactionClamps;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void).cxx_destruct;
- (_Bool)_canScheduleTransactionBasedOnUserCancelledSignIn:(id)arg1 error:(id *)arg2;
- (_Bool)_canScheduleTransactionBasedOnBackOff:(id)arg1 error:(id *)arg2;
- (_Bool)_canScheduleTransactionBasedOnAccountIdentifierCheck:(id)arg1 error:(id *)arg2;
- (_Bool)_canScheduleTransactionBasedOfNetworkingBlocked:(id)arg1 error:(id *)arg2;
- (_Bool)_canScheduleTransactionBasedOnType:(id)arg1 error:(id *)arg2;
- (id)_keyForTransaction:(id)arg1;
- (double)_rightNow;
- (_Bool)isNetworkingBlocked;
- (void)clearNetworkingBlocked;
- (void)setNetworkingBlocked;
- (void)clearBackOff;
- (void)backOffForTimeInterval:(double)arg1;
- (void)clearUserCancelledSignIn;
- (void)setUserCancelledSignIn;
- (_Bool)hasUserRecentlyAcceptedSync;
- (void)clearUserAcceptedSyncTimestamp;
- (void)setUserAcceptedSyncTimestamp;
- (_Bool)hasAuthenticatedTooRecentlyForTransaction:(id)arg1 error:(id *)arg2;
- (void)clearAuthenticationRequest;
- (void)setAuthenticationRequest;
- (void)clearAccountIdentifierCheckTimestamp;
- (void)setAccountIdentifierCheckTimestamp;
- (void)clearTimestampForTransaction:(id)arg1;
- (void)setTimestampForTransaction:(id)arg1;
- (void)reset;
- (_Bool)canScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)accessTransactionClampsWithBlock:(CDUnknownBlockType)arg1;
- (void)saveToUserDefaults;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SBKStoreError : NSError
{
    SBKTransaction *_transaction;
}

+ (id)serverClampErrorWithTransaction:(id)arg1 retrySeconds:(double)arg2 underlyingError:(id)arg3;
+ (id)userClampErrorWithTransaction:(id)arg1 retrySeconds:(double)arg2 underlyingError:(id)arg3;
+ (id)delegateCancelledErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)transactionCancelledErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)transactionTimeoutErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)transactionCancelledErrorWithTransaction:(id)arg1 code:(long long)arg2 underlyingError:(id)arg3;
+ (id)transactionMissingURLErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)transactionMissingDomainErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)storeAccountSessionExpiredWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)noStoreAccountErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)userEnteredWrongCredentialsErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)userCancelledSignInErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)storeValidationErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)storeGenericErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)storeAccountMismatchErrorWithPreviousStoreAccountName:(id)arg1 currentStoreAccountName:(id)arg2 transaction:(id)arg3 underlyingError:(id)arg4;
+ (id)storeLoggedOutErrorWithPreviousStoreAccountName:(id)arg1 transaction:(id)arg2 underlyingError:(id)arg3;
+ (id)killSwitchErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)networkingBlockedErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)keyValueStoreDisabledErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)unknownErrorWithTransaction:(id)arg1 underlyingError:(id)arg2;
+ (id)keyValueStoreErrorWithCode:(long long)arg1 localizedDescription:(id)arg2 transaction:(id)arg3 underlyingError:(id)arg4;
@property(retain) SBKTransaction *transaction; // @synthesize transaction=_transaction;
- (void).cxx_destruct;
@property(readonly) double retrySeconds;
@property(readonly, copy) NSString *currentStoreAccountName;
@property(readonly, copy) NSString *previousStoreAccountName;
@property(readonly) _Bool isTransactionMissingInformationError;
@property(readonly) _Bool isTransactionCancelledError;
@property(readonly) _Bool isClampError;
@property(readonly) _Bool isRecoverableError;
@property(readonly) _Bool isAccountsChangedError;
@property(readonly) _Bool isAuthenticationError;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;

@end

__attribute__((visibility("hidden")))
@interface SBKSyncRequest : SBKRequest
{
}

+ (id)requestForTransaction:(id)arg1;
- (id)canonicalResponseForResponse:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKSyncRequestData : SBKRequestData
{
}

- (id)_serializableDeleteItemPayloadDictionaryForKey:(id)arg1;
- (id)_serializableUpdateItemPayloadDictionaryForKey:(id)arg1;
- (_Bool)_needsConflictDetection;
- (id)_serializableConflictDetectionOrdinalForKey:(id)arg1;
- (id)_serializableConflictDetectionValue;
- (id)serializableRequestBodyPropertyList;
- (id)syncTransaction;

// Remaining properties
@property(readonly) SBKSyncTransaction *transaction;

@end

__attribute__((visibility("hidden")))
@interface SBKSyncResponse : SBKResponse
{
    SBKSyncResponseData *_syncResponseData;
}

+ (id)responseWithResponse:(id)arg1 transaction:(id)arg2;
@property(readonly) SBKSyncResponseData *syncResponseData; // @synthesize syncResponseData=_syncResponseData;
- (void).cxx_destruct;
- (void)deserializeResponseBodyWithTransaction:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKSyncResponseData : NSObject
{
    SBKSyncTransaction *_transaction;
    NSString *_syncAnchor;
    NSArray *_updatedKeys;
    NSArray *_conflictedKeys;
    NSArray *_deletedKeys;
    NSArray *_successfullyUpdatedKeys;
    NSArray *_successfullyDeletedKeys;
    NSMutableDictionary *_responseOpEntiesByKey;
}

+ (id)deserializedResponseBodyWithTransaction:(id)arg1 responseDictionary:(id)arg2 response:(id)arg3;
@property(retain) NSMutableDictionary *responseOpEntiesByKey; // @synthesize responseOpEntiesByKey=_responseOpEntiesByKey;
@property(readonly) NSArray *successfullyDeletedKeys; // @synthesize successfullyDeletedKeys=_successfullyDeletedKeys;
@property(readonly) NSArray *successfullyUpdatedKeys; // @synthesize successfullyUpdatedKeys=_successfullyUpdatedKeys;
@property(readonly) NSArray *deletedKeys; // @synthesize deletedKeys=_deletedKeys;
@property(readonly) NSArray *conflictedKeys; // @synthesize conflictedKeys=_conflictedKeys;
@property(readonly) NSArray *updatedKeys; // @synthesize updatedKeys=_updatedKeys;
@property(readonly, copy) NSString *syncAnchor; // @synthesize syncAnchor=_syncAnchor;
@property(readonly) SBKSyncTransaction *transaction; // @synthesize transaction=_transaction;
- (void).cxx_destruct;
- (void)_deserializeResponseDictionary:(id)arg1 response:(id)arg2;
- (id)payloadDataForUpdateResponseKey:(id)arg1;
- (id)description;
- (id)initWithTransaction:(id)arg1 responseDictionary:(id)arg2 response:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface SBKSyncResponseDataKeyEnumerator : NSObject
{
    _Bool _resolvedConflictsNeedSyncToServer;
    SBKSyncResponseData *_responseData;
    SBKSyncTransaction *_transaction;
    CDUnknownBlockType _completionBlock;
    NSEnumerator *_updatedKeysEnumerator;
    NSEnumerator *_conflictedKeysEnumerator;
    NSEnumerator *_deletedKeysEnumerator;
}

@property(retain) NSEnumerator *deletedKeysEnumerator; // @synthesize deletedKeysEnumerator=_deletedKeysEnumerator;
@property(retain) NSEnumerator *conflictedKeysEnumerator; // @synthesize conflictedKeysEnumerator=_conflictedKeysEnumerator;
@property(retain) NSEnumerator *updatedKeysEnumerator; // @synthesize updatedKeysEnumerator=_updatedKeysEnumerator;
@property _Bool resolvedConflictsNeedSyncToServer; // @synthesize resolvedConflictsNeedSyncToServer=_resolvedConflictsNeedSyncToServer;
@property(copy) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property(retain) SBKSyncTransaction *transaction; // @synthesize transaction=_transaction;
@property(retain) SBKSyncResponseData *responseData; // @synthesize responseData=_responseData;
- (void).cxx_destruct;
- (void)_processNextKey;
- (void)_processDeletedKey:(id)arg1 isDirty:(_Bool *)arg2;
- (void)_processUpdatedKey:(id)arg1 isConflict:(_Bool)arg2 isDirty:(_Bool *)arg3;
- (void)enumerateKeysInResponseForTransaction:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (id)initWithResponseData:(id)arg1;

@end

@interface SBKSyncTransaction : SBKTransaction
{
    NSString *_syncAnchor;
    NSString *_domain;
    NSArray *_keysToUpdate;
    NSArray *_keysToDelete;
    long long _conflictDetectionType;
    id <SBKSyncTransactionProcessing> _transactionProcessor;
    long long _type;
    NSURL *_syncRequestURL;
}

@property(readonly) NSURL *syncRequestURL; // @synthesize syncRequestURL=_syncRequestURL;
@property(readonly) long long type; // @synthesize type=_type;
- (void).cxx_destruct;
- (void)processDataInResponse:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
@property(readonly) NSArray *keysToDelete; // @synthesize keysToDelete=_keysToDelete;
@property(readonly) NSArray *keysToUpdate; // @synthesize keysToUpdate=_keysToUpdate;
@property(readonly) long long conflictDetectionType; // @synthesize conflictDetectionType=_conflictDetectionType;
@property(readonly, copy) NSString *syncAnchor; // @synthesize syncAnchor=_syncAnchor;
- (id)keyValuePairForUpdatedKey:(id)arg1;
- (id)conflictDetectionOrdinalForKey:(id)arg1;
- (id)description;
@property __weak id <SBKSyncTransactionProcessing> transactionProcessor; // @synthesize transactionProcessor=_transactionProcessor;
- (void)_validateTransactionProcessor:(id)arg1;
- (id)newRequest;
- (id)requestURL;
- (id)domain;
- (id)clampsKey;
- (id)initWithStoreBagContext:(id)arg1 syncAnchor:(id)arg2 keysToUpdate:(id)arg3 keysToDelete:(id)arg4 conflictDetectionType:(long long)arg5;
- (id)initWithSyncRequestURL:(id)arg1 domain:(id)arg2 syncAnchor:(id)arg3 keysToUpdate:(id)arg4 keysToDelete:(id)arg5 conflictDetectionType:(long long)arg6;

@end

__attribute__((visibility("hidden")))
@interface SBKTaskAssertion : NSObject
{
    CDUnknownBlockType _expireHandler;
    NSString *_debugInfo;
    SBKProcessAssertion *_processAssertion;
}

+ (id)newBackgroundTaskWithExpirationHandler:(CDUnknownBlockType)arg1 debugInfo:(id)arg2;
- (void).cxx_destruct;
- (id)description;
- (void)invalidate;
- (void)performExpirationHandler;
- (void)dealloc;
- (id)initWithExpirationHandler:(CDUnknownBlockType)arg1 debugInfo:(id)arg2;

@end

@interface SBKTransactionController : NSObject <ISStoreURLOperationDelegate>
{
    _Bool _enabled;
    _Bool _shouldAuthenticateIfNecessary;
    _Bool _isResolvingError;
    id <SBKTransactionControllerDelegate> _delegate;
    NSString *_domain;
    NSURL *_requestURL;
    SBKStoreAuthenticationController *_authenticationController;
    SBKTransaction *_currentTransaction;
    SSAccount *_account;
    NSObject<OS_dispatch_queue> *_queue;
    NSOperationQueue *_operationQueue;
    NSMutableArray *_pendingTransactions;
    SBKTaskAssertion *_backgroundTaskAssertion;
    id _networkTypeObserver;
    long long _conflictResolutionAttempts;
}

@property long long conflictResolutionAttempts; // @synthesize conflictResolutionAttempts=_conflictResolutionAttempts;
@property __weak id networkTypeObserver; // @synthesize networkTypeObserver=_networkTypeObserver;
@property(retain) SBKTaskAssertion *backgroundTaskAssertion; // @synthesize backgroundTaskAssertion=_backgroundTaskAssertion;
@property _Bool isResolvingError; // @synthesize isResolvingError=_isResolvingError;
@property(retain) NSMutableArray *pendingTransactions; // @synthesize pendingTransactions=_pendingTransactions;
@property(retain) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain) SSAccount *account; // @synthesize account=_account;
@property(retain, nonatomic) SBKTransaction *currentTransaction; // @synthesize currentTransaction=_currentTransaction;
@property _Bool shouldAuthenticateIfNecessary; // @synthesize shouldAuthenticateIfNecessary=_shouldAuthenticateIfNecessary;
@property(retain) SBKStoreAuthenticationController *authenticationController; // @synthesize authenticationController=_authenticationController;
@property(readonly, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
@property(readonly) NSURL *requestURL; // @synthesize requestURL=_requestURL;
@property(readonly, copy) NSString *domain; // @synthesize domain=_domain;
@property __weak id <SBKTransactionControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)operation:(id)arg1 failedWithError:(id)arg2;
- (void)operation:(id)arg1 didReceiveResponse:(id)arg2;
- (void)operation:(id)arg1 finishedWithOutput:(id)arg2;
- (void)_delegateTransactionDidFinish:(id)arg1;
- (void)_delegateTransactionDidCancel:(id)arg1 withError:(id)arg2;
- (_Bool)_delegateTransactionDidFail:(id)arg1 withError:(id)arg2;
- (_Bool)_sendFinishedBlockForTransaction:(id)arg1 success:(_Bool)arg2 cancelled:(_Bool)arg3 error:(id)arg4 handledAsFinishedBlock:(_Bool *)arg5;
- (_Bool)_delegateShouldScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)_onQueue_performDefaultErrorHandlingForError:(id)arg1;
- (void)_onQueue_performCancelErrorHandlingForError:(id)arg1;
- (void)_onQueue_performRetryErrorHandlingForError:(id)arg1;
- (void)_onQueue_resolveError:(id)arg1 resolution:(int)arg2;
- (void)_onQueue_processOperationOutput:(id)arg1 operation:(id)arg2 operationAuthenticated:(_Bool)arg3;
- (void)_processDataInResponse:(id)arg1;
- (void)_onQueue_transactionDidCancel:(id)arg1 withError:(id)arg2;
- (void)_onQueue_transactionDidFail:(id)arg1 withError:(id)arg2;
- (void)_onQueue_currentTransactionDidFinish;
- (_Bool)_onQueue_authenticationCanProcessTransaction:(id)arg1 error:(id *)arg2;
- (_Bool)_onQueue_clampsCanScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)_onQueue_assertIsTransactionValid:(id)arg1 error:(id *)arg2;
- (_Bool)_onQueue_isEnabledForTransaction:(id)arg1 error:(id *)arg2;
- (_Bool)_onQueue_canScheduleTransaction:(id)arg1 error:(id *)arg2;
- (void)_onQueue_addPendingTransaction:(id)arg1;
- (void)_onQueue_scheduleTransaction:(id)arg1 isRetry:(_Bool)arg2;
- (void)_onQueue_processCurrentTransaction;
- (void)_onQueue_processPendingTransactions;
- (void)_onQueue_cancelTransaction:(id)arg1 error:(id)arg2;
- (void)_onQueue_cancelAllPendingTransactions:(id)arg1;
- (void)_onQueue_endBackgroundTask;
- (void)_onQueue_beginBackgroundTask;
- (void)_endBackgroundTask;
- (void)_beginBackgroundTask;
- (void)_resolveError:(id)arg1 resolution:(int)arg2;
- (void)_storeOperationDidComplete:(id)arg1;
- (void)_enqueueStoreOperation:(id)arg1;
- (void)cancelAllTransactionsCancelCode:(long long)arg1;
- (void)cancelAllTransactions;
- (void)cancelScheduledTransaction:(id)arg1;
- (void)scheduleTransaction:(id)arg1;
- (void)scheduleTransaction:(id)arg1 withTransactionFinishedBlock:(CDUnknownBlockType)arg2;
@property(readonly, getter=isIdle) _Bool idle;
- (_Bool)_onQueue_isIdle;
- (id)_onQueue_clampsController;
- (void)_networkTypeChangedNotification:(id)arg1;
- (void)setEnabled:(_Bool)arg1;
- (void)setRequestURL:(id)arg1;
- (void)setDomain:(id)arg1;
- (void)dealloc;
- (id)initWithDomain:(id)arg1 requestURL:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SBKTransactionURLOperation : ISStoreURLOperation
{
    _Bool _shouldAuthenticate;
    SBKRequest *_SBKRequest;
}

+ (id)operationWithRequest:(id)arg1 delegate:(id)arg2;
@property(retain, nonatomic) SBKRequest *SBKRequest; // @synthesize SBKRequest=_SBKRequest;
- (void).cxx_destruct;
- (id)description;
@property(nonatomic) _Bool shouldAuthenticate; // @synthesize shouldAuthenticate=_shouldAuthenticate;
- (id)_init;
- (id)init;

@end

@interface SBKUniversalPlaybackPositionMetadata : NSObject <SBKKeyValuePayloadPair, NSCopying>
{
    _Bool _hasBeenPlayed;
    NSString *_itemIdentifier;
    double _timestamp;
    double _bookmarkTime;
    unsigned long long _playCount;
}

+ (id)metadataWithItemIdentifier:(id)arg1 keyValueStorePayload:(id)arg2 failuresOkay:(_Bool)arg3;
+ (id)metadataWithItemIdentifier:(id)arg1 keyValueStorePayload:(id)arg2;
+ (id)metadataWithItemIdentifier:(id)arg1 bookmarkTime:(double)arg2 bookmarkTimestamp:(double)arg3 hasBeenPlayed:(_Bool)arg4 playCount:(unsigned long long)arg5;
+ (id)metadataWithValuesFromDataSourceItem:(id)arg1;
+ (id)keyValueStoreItemIdentifierForUniqueStoreID:(long long)arg1 itemTitle:(id)arg2 albumName:(id)arg3 itemArtistName:(id)arg4 feedURL:(id)arg5 feedGUID:(id)arg6;
+ (id)keyValueStoreItemIdentifierForItem:(id)arg1;
+ (id)_testableMetadataItem_1;
+ (id)pairWithKVSKey:(id)arg1 kvsPayload:(id)arg2;
@property unsigned long long playCount; // @synthesize playCount=_playCount;
@property _Bool hasBeenPlayed; // @synthesize hasBeenPlayed=_hasBeenPlayed;
@property double bookmarkTime; // @synthesize bookmarkTime=_bookmarkTime;
@property(copy) NSString *itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
- (void).cxx_destruct;
- (id)kvsValueDescription;
- (id)kvsPayload;
- (id)kvsKey;
- (id)keyValueStorePayload;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
@property double timestamp; // @synthesize timestamp=_timestamp;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (id)initAsTestableItem;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface SBKUniversalPlaybackPositionStore : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _isActive;
    _Bool _hasLocalChangesToSync;
    NSMutableArray *_pendingTaskBlocks;
    NSString *_domain;
    unsigned long long _automaticSynchronizeOptions;
    double _initialAutosyncInterval;
    double _pollingLimitFromBag;
    double _autorefreshInterval;
    _Bool _refreshTimerActive;
    id _accountsObserver;
    id _prefsObserver;
    id <SBKUniversalPlaybackPositionDataSource> _dataSource;
    SBKAsynchronousTask *_currentTask;
    SBKAsynchronousTask *_lookupDomainVersionTask;
    SBKAsynchronousTask *_bagLookupTask;
    SBKRequestHandler *_currentTaskRequestHandler;
    NSDate *_dateToFireNextTimer;
    NSTimer *_timer;
}

+ (id)keyValueStoreItemIdentifierForItem:(id)arg1;
@property(retain) NSTimer *timer; // @synthesize timer=_timer;
@property(retain) NSDate *dateToFireNextTimer; // @synthesize dateToFireNextTimer=_dateToFireNextTimer;
@property(retain) SBKRequestHandler *currentTaskRequestHandler; // @synthesize currentTaskRequestHandler=_currentTaskRequestHandler;
@property(retain) SBKAsynchronousTask *bagLookupTask; // @synthesize bagLookupTask=_bagLookupTask;
@property(retain) SBKAsynchronousTask *lookupDomainVersionTask; // @synthesize lookupDomainVersionTask=_lookupDomainVersionTask;
@property(retain) SBKAsynchronousTask *currentTask; // @synthesize currentTask=_currentTask;
@property(readonly) __weak id <SBKUniversalPlaybackPositionDataSource> dataSource; // @synthesize dataSource=_dataSource;
- (void).cxx_destruct;
- (void)_onQueueStartNewTimerWithTimeIntervalSinceNow:(double)arg1;
- (void)_onQueueStartNewTimer;
- (void)_onQueueStopTimer;
- (void)_onQueueResumeTimer;
- (void)_onQueueSuspendTimer;
- (void)_onQueueScheduleTimer;
- (_Bool)_timerIsStopped;
- (void)_timerFired:(id)arg1;
- (void)_updateAutorefreshRateSettingAndRestartTimer:(_Bool)arg1;
- (double)_effectiveAutorefreshRate;
- (void)_updateForStoreAccountsChange;
- (void)_onQueueLoadBagContextWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_updateSettingsFromLoadedBagContext:(id)arg1;
- (id)_accountForSyncing;
- (void)_onQueuePullMetadataItemWithItemIdentifier:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_onQueuePushMetadataItem:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_onQueueSynchronizeImmediatelyWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_onQueueRunTaskWithName:(id)arg1 taskCompletionHandler:(CDUnknownBlockType)arg2 runTaskBlock:(CDUnknownBlockType)arg3;
- (void)_onQueueRunNextPendingTaskBlock;
- (void)_onQueueLoadRemoteDomainVersionWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_onQueueSynchronizeWithAutosynchronizeMask:(unsigned long long)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadBagContextWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)loadRemoteDomainVersionWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)checkForAvailabilityWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)synchronizeImmediatelyWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)pullMetadataItemWithItemIdentifier:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)pushMetadataItem:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)synchronizeImmediatelyWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)automaticallySynchronizeOnBecomeActive;
- (_Bool)_automaticallySynchronizeOnBecomeActive;
- (void)setAutomaticallySynchronizeOnBecomeActive:(_Bool)arg1;
- (_Bool)automaticallySynchronizeLocalChangesOnResignActive;
- (_Bool)_automaticallySynchronizeLocalChangesOnResignActive;
- (void)setAutomaticallySynchronizeLocalChangesOnResignActive:(_Bool)arg1;
@property _Bool hasLocalChangesToSync;
@property unsigned long long automaticSynchronizeOptions;
- (void)resignActive;
- (void)becomeActive;
- (void)_onQueueUpdateTimerForAutomaticSyncOptionChanges;
- (void)_onQueueUpdateTimerForActiveChanges;
- (void)dealloc;
- (id)initWithInitialUpdateDelay:(double)arg1;
- (id)init;
- (id)initWithDomain:(id)arg1 dataSource:(id)arg2 automaticSynchronizeOptions:(unsigned long long)arg3 isActive:(_Bool)arg4;
- (void)deprecated_setDataSource:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SBKZipDeflateMemoryOutputStream : NSObject
{
    NSMutableData *deflatedData;
    struct z_stream_s zstream;
    char *_outputBuffer;
    int _bufferingSize;
}

+ (id)dataByDeflatingData:(id)arg1;
- (void).cxx_destruct;
- (_Bool)writeBuffer:(const char *)arg1 size:(unsigned long long)arg2;
- (id)close;
- (void)dealloc;
- (id)initWithBufferingSize:(int)arg1 compressionType:(unsigned long long)arg2;

@end

