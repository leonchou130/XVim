//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Typedef'd Structures

typedef struct {
    unsigned short _field1[64];
    struct __CFString *_field2;
    unsigned short *_field3;
    char *_field4;
    struct {
        long long _field1;
        long long _field2;
    } _field5;
    long long _field6;
    long long _field7;
} CDStruct_f9502b4c;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
// UUID: BD3CFCBF-E058-36E2-B3B9-8FE550B8CA13
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 813.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AFClientService <NSObject>
- (oneway void)_refreshAssistantValidation;
- (oneway void)_startSpeechWithURL:(NSURL *)arg1 isNarrowBand:(_Bool)arg2;
- (oneway void)_barrierWithReply:(void (^)(void))arg1;
- (oneway void)_clearAssistantInfoForAccountIdentifier:(NSString *)arg1;
- (oneway void)_fetchAppContextWithReply:(void (^)(NSArray *))arg1;
- (oneway void)_broadcastCommandDictionary:(NSDictionary *)arg1;
- (oneway void)_performCommandDictionary:(NSDictionary *)arg1 forBundleIdentifier:(NSString *)arg2 reply:(void (^)(NSDictionary *, NSError *))arg3;
- (oneway void)_sendLargeData:(NSData *)arg1 reply:(void (^)(NSString *, NSData *))arg2;
- (oneway void)_pingServiceForIdentifier:(NSString *)arg1 reply:(void (^)(NSDictionary *))arg2;
- (oneway void)_listInstalledServicesWithReply:(void (^)(NSDictionary *))arg1;
- (oneway void)recordFailureMetricsForError:(NSError *)arg1;
- (oneway void)recordMetrics:(AFMetrics *)arg1;
- (oneway void)markUsefulUserResultPresentationTimestamp:(double)arg1;
- (oneway void)telephonyRequestCompleted;
- (oneway void)prepareForPhoneCall;
- (oneway void)setAlertContextDirty;
- (oneway void)setOverriddenApplicationContext:(NSString *)arg1 withSMSContext:(NSDictionary *)arg2;
- (oneway void)setApplicationContextForApplicationInfos:(NSArray *)arg1;
- (oneway void)rollbackClearContext;
- (oneway void)clearContext;
- (oneway void)performGenericAceCommand:(NSDictionary *)arg1 interruptOutstandingRequest:(_Bool)arg2 reply:(void (^)(_Bool))arg3;
- (oneway void)requestStateUpdateWithReply:(void (^)(_Bool, unsigned int))arg1;
- (oneway void)stopSpeechWithOptions:(AFSpeechRequestOptions *)arg1;
- (oneway void)cancelSpeech;
- (oneway void)startSpeechCorrectionWithText:(NSString *)arg1 forCorrectionContext:(NSDictionary *)arg2;
- (oneway void)rollbackRequest;
- (oneway void)cancelRequest;
- (oneway void)updateSpeechOptions:(AFSpeechRequestOptions *)arg1;
- (oneway void)startAcousticIDRequestWithOptions:(AFSpeechRequestOptions *)arg1 context:(NSString *)arg2;
- (oneway void)startSpeechPronunciationRequestWithOptions:(AFSpeechRequestOptions *)arg1 pronunciationContext:(SASPronunciationContext *)arg2;
- (oneway void)startSpeechRequestWithOptions:(AFSpeechRequestOptions *)arg1;
- (oneway void)startContinuationRequestWithUserInfo:(NSDictionary *)arg1;
- (oneway void)startDirectActionRequest:(NSString *)arg1;
- (oneway void)sendAssistantRequest:(NSString *)arg1 reply:(void (^)(void))arg2;
- (oneway void)endSession;
- (oneway void)setVoiceOverIsActive:(_Bool)arg1;
- (oneway void)setIsStark:(_Bool)arg1;
- (oneway void)setLockState:(_Bool)arg1 showingLockScreen:(_Bool)arg2;
- (oneway void)forceAudioSessionActive;
@end

@protocol AFClientServiceDelegate <NSObject>
- (oneway void)speechRecognitionDidFail:(NSError *)arg1;
- (oneway void)speechRecognizedPartialResult:(SASSpeechPartialResult *)arg1;
- (oneway void)speechRecognized:(SASSpeechRecognized *)arg1;
- (oneway void)speechRecordingDidFail:(NSError *)arg1;
- (oneway void)speechRecordingDidCancel;
- (oneway void)speechRecordingDidEnd;
- (oneway void)speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (oneway void)speechRecordingDidChangeAVRecordRoute:(NSString *)arg1;
- (oneway void)speechRecordingDidBeginOnAVRecordRoute:(NSString *)arg1;
- (oneway void)speechRecordingWillBegin;
- (oneway void)getBulletinContext:(void (^)(NSArray *))arg1;
- (oneway void)acousticIDRequestDidFinishWithSuccess:(_Bool)arg1;
- (oneway void)musicWasDetected;
- (oneway void)acousticIDRequestWillStart;
- (oneway void)requestRequestedDismissAssistant;
- (oneway void)requestRequestedOpenURL:(NSURL *)arg1 reply:(void (^)(_Bool))arg2;
- (oneway void)requestDidFailWithError:(NSError *)arg1 requestClass:(NSString *)arg2;
- (oneway void)requestDidReceiveCommand:(AceObject<SAAceCommand> *)arg1 reply:(void (^)(AceObject<SAAceCommand> *))arg2;
- (oneway void)requestDidFinish;
- (oneway void)shouldSpeakChanged:(_Bool)arg1;
@end

@protocol AFDictationService <NSObject>
- (oneway void)_startDictationWithURL:(NSURL *)arg1 isNarrowBand:(_Bool)arg2 language:(NSString *)arg3 options:(AFDictationOptions *)arg4;
- (oneway void)requestStateUpdateWithReply:(void (^)(unsigned int))arg1;
- (oneway void)endSession;
- (oneway void)preheat;
- (oneway void)sendSpeechCorrectionInfo:(AFSpeechCorrectionInfo *)arg1 forCorrectionContext:(NSDictionary *)arg2;
- (oneway void)updateSpeechOptions:(AFSpeechRequestOptions *)arg1;
- (oneway void)stopSpeechWithOptions:(AFSpeechRequestOptions *)arg1;
- (oneway void)cancelSpeech;
- (oneway void)startDictationWithLanguageCode:(NSString *)arg1 options:(AFDictationOptions *)arg2 speechOptions:(AFSpeechRequestOptions *)arg3;
- (oneway void)prepareWithOptions:(AFSpeechRequestOptions *)arg1;
@end

@protocol AFDictationServiceDelegate <NSObject>
- (oneway void)speechDidFinishWritingAudioFile:(NSFileHandle *)arg1 error:(NSError *)arg2;
- (oneway void)speechRecognitionDidFail:(NSError *)arg1;
- (oneway void)speechDidRecognizeTranscriptionObjects:(NSArray *)arg1 usingSpeechModel:(NSString *)arg2;
- (oneway void)speechDidRecognizeTokens:(NSArray *)arg1 usingSpeechModel:(NSString *)arg2;
- (oneway void)speechDidRecognizePhrases:(NSArray *)arg1 usingSpeechModel:(NSString *)arg2 correctionContext:(NSDictionary *)arg3;
- (oneway void)speechRecordingDidFail:(NSError *)arg1;
- (oneway void)speechRecordingDidCancel;
- (oneway void)speechRecordingDidEnd;
- (oneway void)speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (oneway void)speechRecordingDidBegin;
- (oneway void)speechRecordingWillBegin;
@end

@protocol AFManagedStorageService <NSObject>
- (oneway void)fetchManagedStoreObjectForKey:(NSString *)arg1 reply:(void (^)(NSDictionary *))arg2;
- (oneway void)setManagedStoreObject:(NSDictionary *)arg1 forKey:(NSString *)arg2;
@end

@protocol AFManagedStore <NSObject>
- (void)setDomainObject:(NSDictionary *)arg1 forKey:(NSString *)arg2;
- (NSDictionary *)domainObjectForKey:(NSString *)arg1;
@end

@protocol AFSettingsService <NSObject>
- (oneway void)setLanguage:(NSString *)arg1 withCompletion:(void (^)(void))arg2;
- (oneway void)setOutputVoice:(AFVoiceInfo *)arg1 withCompletion:(void (^)(void))arg2;
- (oneway void)getAvailableVoices:(void (^)(NSArray *))arg1;
- (oneway void)_syncDataWithAnchorKeys:(NSArray *)arg1 forceReset:(_Bool)arg2 reply:(void (^)(NSArray *))arg3;
- (oneway void)barrierWithReply:(void (^)(void))arg1;
- (oneway void)_killDaemon;
- (oneway void)setDictationEnabled:(_Bool)arg1;
- (oneway void)setAssistantEnabled:(_Bool)arg1;
- (oneway void)setActiveAccountIdentifier:(NSString *)arg1;
- (oneway void)deleteAccountWithIdentifier:(NSString *)arg1;
- (oneway void)saveAccountWithMessageDictionary:(NSDictionary *)arg1 setActive:(_Bool)arg2;
- (oneway void)retrieveAccountMessageDictionariesWithReply:(void (^)(NSArray *))arg1;
- (oneway void)fetchSupportedLanguagesWithReply:(void (^)(NSArray *, NSError *))arg1;
@end

@protocol AFSiriResponseHandling <NSObject>
- (void)handleFailureOfRequest:(AFSiriRequest *)arg1 error:(NSError *)arg2;
- (void)handleSiriResponse:(AFSiriResponse *)arg1;
@end

@protocol AFSiriTaskHandling <NSObject>
- (void)handleSiriTask:(AFSiriTask *)arg1;
@end

@protocol AFSpeakableNamespaceProvider <NSObject>
- (NSString *)stringForExpression:(NSString *)arg1;

@optional
- (void)setAssistantBulletin:(AFBulletin *)arg1;
- (NSString *)identifier;
- (id)initWithAceObject:(AceObject *)arg1;
@end

@protocol AFTranscriptionType <NSObject, NSSecureCoding>
@end

@protocol BSXPCCoding <NSObject>
- (void)encodeWithXPCDictionary:(NSObject<OS_xpc_object> *)arg1;
- (id)initWithXPCDictionary:(NSObject<OS_xpc_object> *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@interface AFAccount : NSObject
{
    _Bool _isActive;
    NSString *_identifier;
    NSString *_label;
    NSString *_assistantIdentifier;
    NSString *_speechIdentifier;
    NSString *_hostname;
    NSString *_predefinedServer;
    NSString *_aceHost;
    NSDictionary *_connectionPolicy;
    NSDate *_connectionPolicyDate;
    NSString *_connectionPolicyHostname;
    NSString *_group;
    NSDictionary *_lastSyncDates;
    NSString *_localeIdentifier;
}

@property(readonly, nonatomic) _Bool isActive; // @synthesize isActive=_isActive;
@property(copy, nonatomic) NSString *localeIdentifier; // @synthesize localeIdentifier=_localeIdentifier;
@property(copy, nonatomic) NSDictionary *lastSyncDates; // @synthesize lastSyncDates=_lastSyncDates;
@property(copy, nonatomic) NSString *group; // @synthesize group=_group;
@property(copy, nonatomic) NSString *connectionPolicyHostname; // @synthesize connectionPolicyHostname=_connectionPolicyHostname;
@property(copy, nonatomic) NSDate *connectionPolicyDate; // @synthesize connectionPolicyDate=_connectionPolicyDate;
@property(copy, nonatomic) NSDictionary *connectionPolicy; // @synthesize connectionPolicy=_connectionPolicy;
@property(copy, nonatomic) NSString *aceHost; // @synthesize aceHost=_aceHost;
@property(copy, nonatomic) NSString *predefinedServer; // @synthesize predefinedServer=_predefinedServer;
@property(copy, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(copy, nonatomic) NSString *speechIdentifier; // @synthesize speechIdentifier=_speechIdentifier;
@property(copy, nonatomic) NSString *assistantIdentifier; // @synthesize assistantIdentifier=_assistantIdentifier;
@property(copy, nonatomic) NSString *label; // @synthesize label=_label;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)messageDictionary;
- (id)initWithMessageDictionary:(id)arg1;
- (id)description;

@end

@interface AFAggregator : NSObject
{
    unsigned long long _type;
    double _startTime;
    _Bool _hasActiveRequest;
    _Bool _sessionIsRetrying;
    _Bool _retryPrefersWWAN;
}

+ (void)logPingTimeout;
+ (void)logDictationCancelled;
+ (void)logDictationSucceeded;
+ (void)logDictationFailedWithError:(id)arg1;
+ (void)logDictationStarted;
+ (void)logSiriRequestCancelled;
+ (void)logSiriRequestSucceeded;
+ (void)logSiriRequestFailedWithError:(id)arg1;
+ (void)logSiriOtherRequestStarted;
+ (void)logSiriSpeechRequestStarted;
+ (id)_fullAggDKeyWithPrefix:(id)arg1 error:(id)arg2;
+ (void)logRequestCancelAfterSeconds:(double)arg1;
+ (void)missedAlertContextForRequest;
+ (void)missedAppContextForRequest;
+ (void)logRequestCompletedWithDuration:(double)arg1;
+ (id)_stringForGatekeeperType:(unsigned long long)arg1;
+ (void)logStarkGatekeeperAppearedForType:(unsigned long long)arg1;
+ (void)logStarkGatekeeperDismissedManuallyForType:(unsigned long long)arg1;
+ (void)logHomeButtonPressToActivationDuration:(double)arg1;
+ (void)logTimeToBeepWithDuration:(double)arg1;
@property(nonatomic) _Bool hasActiveRequest; // @synthesize hasActiveRequest=_hasActiveRequest;
@property(nonatomic) unsigned long long connectionType; // @synthesize connectionType=_type;
- (void)speechResponseFailure;
- (void)speechResponseReceived;
- (void)startWaitingForSpeechResponse;
- (void)beginSessionRetryPreferringWWAN:(_Bool)arg1;
- (void)connectionDidDrop;
- (void)connectionDidFail;
- (void)recordSessionRetrySuccess;
- (void)recordFailure:(int)arg1 forConnectionType:(unsigned long long)arg2;
- (void)recordSuccessForConnectionType:(unsigned long long)arg1 isWarm:(_Bool)arg2 forTimeInterval:(double)arg3;

@end

@interface AFApplicationInfo : NSObject <NSSecureCoding>
{
    int _pid;
    NSString *_identifier;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) int pid; // @synthesize pid=_pid;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface AFBulletin : NSObject <NSSecureCoding>
{
    _Bool _read;
    _Bool _allDay;
    NSString *_bulletinID;
    NSDate *_date;
    NSDate *_endDate;
    NSString *_message;
    NSString *_modalAlertContentMessage;
    NSDate *_recencyDate;
    NSString *_sectionID;
    NSString *_subtitle;
    NSString *_timeZone;
    NSString *_title;
    NSString *_displayName;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, copy, nonatomic) NSString *timeZone; // @synthesize timeZone=_timeZone;
@property(readonly, copy, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(readonly, copy, nonatomic) NSString *sectionID; // @synthesize sectionID=_sectionID;
@property(readonly, copy, nonatomic) NSDate *recencyDate; // @synthesize recencyDate=_recencyDate;
@property(readonly, copy, nonatomic) NSString *modalAlertContentMessage; // @synthesize modalAlertContentMessage=_modalAlertContentMessage;
@property(readonly, copy, nonatomic) NSString *message; // @synthesize message=_message;
@property(readonly, nonatomic, getter=isAllDay) _Bool allDay; // @synthesize allDay=_allDay;
@property(readonly, copy, nonatomic) NSDate *endDate; // @synthesize endDate=_endDate;
@property(readonly, copy, nonatomic) NSDate *date; // @synthesize date=_date;
@property(readonly, copy, nonatomic) NSString *bulletinID; // @synthesize bulletinID=_bulletinID;
@property(nonatomic, getter=isRead) _Bool read; // @synthesize read=_read;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)setBulletin:(id)arg1;

@end

@interface AFConnection : NSObject
{
    NSXPCConnection *_connection;
    NSString *_outstandingRequestClass;
    NSArray *_cachedBulletins;
    _Bool _hasActiveRequest;
    _Bool _hasActiveTimeout;
    NSMutableDictionary *_replyHandlerForAceId;
    unsigned int _stateInSync:1;
    unsigned int _shouldSpeak:1;
    unsigned int _isCapturingSpeech:1;
    unsigned int _hasOutstandingRequest:1;
    unsigned int _audioSessionID;
    float _averagePower;
    float _peakPower;
    unsigned int _clientStateIsInSync:1;
    unsigned int _voiceOverIsActive:1;
    id <AFAssistantUIService> _delegate;
    id <AFSpeechDelegate> _speechDelegate;
}

+ (void)preheat;
+ (void)preheatWithStyle:(long long)arg1;
+ (void)defrost;
+ (id)outputVoice;
+ (_Bool)isReadyForLanguageCode:(id)arg1;
+ (id)currentLanguageCode;
+ (_Bool)userDataSyncNeeded;
+ (void)stopMonitoringAvailability;
+ (_Bool)isAvailable;
+ (void)beginMonitoringAvailability;
+ (_Bool)assistantIsSupported;
+ (_Bool)assistantIsSupportedForLanguageCode:(id)arg1 error:(id *)arg2;
+ (void)initialize;
@property(nonatomic) __weak id <AFSpeechDelegate> speechDelegate; // @synthesize speechDelegate=_speechDelegate;
@property(nonatomic) __weak id <AFAssistantUIService> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)usefulUserResultWillPresent;
- (void)telephonyRequestCompleted;
- (void)prepareForPhoneCall;
- (void)setAlertContextWithBulletins:(id)arg1;
- (void)setOverriddenApplicationContext:(id)arg1 withSMSContext:(id)arg2;
- (void)setApplicationContextForApplicationInfos:(id)arg1;
- (void)clearContext;
- (void)sendReplyCommand:(id)arg1;
- (void)sendGenericAceCommand:(id)arg1 conflictHandler:(CDUnknownBlockType)arg2;
- (void)sendGenericAceCommand:(id)arg1;
- (float)peakPower;
- (float)averagePower;
- (unsigned int)audioSessionID;
- (_Bool)shouldSpeak;
@property(readonly, nonatomic) _Bool isRecording;
- (void)startRequestWithCorrectedText:(id)arg1 forSpeechIdentifier:(id)arg2;
- (void)rollbackRequest;
- (void)rollbackClearContext;
- (void)recordMetrics:(id)arg1;
- (void)updateSpeechOptions:(id)arg1;
- (void)stopSpeechWithOptions:(id)arg1;
- (void)stopSpeech;
- (void)cancelSpeech;
- (void)startAcousticIDRequestWithOptions:(id)arg1;
- (void)startSpeechPronunciationRequestWithOptions:(id)arg1 pronunciationContext:(id)arg2;
- (void)startSpeechRequestWithOptions:(id)arg1;
- (void)startContinuationRequestWithUserInfo:(id)arg1;
- (void)startDirectActionRequestWithString:(id)arg1;
- (void)startRequestWithText:(id)arg1;
- (void)setVoiceOverIsActive:(_Bool)arg1;
- (void)setIsStark:(_Bool)arg1;
- (void)setLockState:(_Bool)arg1 screenLocked:(_Bool)arg2;
- (void)forceAudioSessionActive;
- (void)preheatWithStyle:(long long)arg1;
- (void)preheat;
- (void)endSession;
- (void)_willCompleteRequest;
- (void)_willFailRequestWithError:(id)arg1;
- (void)_willCancelRequest;
- (void)_willStartRequestForSpeech:(_Bool)arg1;
- (void)_updateClientState;
- (void)_updateState;
- (void)_extendExistingRequestTimeout;
- (void)_extendRequestTimeout;
- (void)_cancelRequestTimeout;
- (void)_invokeRequestTimeout;
- (void)_scheduleRequestTimeout;
- (id)_connection;
- (void)_clearConnection;
- (void)_connectionInterrupted;
- (void)_tellSpeechDelegateRecognitionDidFail:(id)arg1;
- (void)_tellSpeechDelegateSpeechRecognizedPartialResult:(id)arg1;
- (void)_tellSpeechDelegateSpeechRecognized:(id)arg1;
- (void)_tellSpeechDelegateRecordingDidFail:(id)arg1;
- (void)_tellSpeechDelegateRecordingDidCancel;
- (void)_tellSpeechDelegateRecordingDidEnd;
- (void)_tellSpeechDelegateRecordingDidChangeAVRecordRoute:(id)arg1;
- (void)_tellSpeechDelegateRecordingDidBeginOnAVRecordRoute:(id)arg1;
- (void)_tellSpeechDelegateRecordingWillBegin;
- (void)_tellDelegateDidFinishAcousticIDRequestWithSuccess:(_Bool)arg1;
- (void)_tellDelegateDidDetectMusic;
- (void)_tellDelegateWillStartAcousticIDRequest;
- (void)_tellDelegateAudioSessionIDChanged:(unsigned int)arg1;
- (void)_tellDelegateShouldSpeakChanged:(_Bool)arg1;
- (void)_tellDelegateRequestFailed:(id)arg1 requestClass:(id)arg2;
- (void)_tellDelegateRequestFinished;
- (void)_tellDelegateRequestWillStart;
- (void)_speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (void)_setAudioSessionID:(unsigned int)arg1;
- (void)_setShouldSpeak:(_Bool)arg1;
- (void)_doCommand:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)_requestDidEnd;
- (void)_requestWillBeginWithRequestClass:(id)arg1 isSpeechRequest:(_Bool)arg2 isBackgroundRequest:(_Bool)arg3;
- (void)_requestWillBeginWithRequestClass:(id)arg1 isSpeechRequest:(_Bool)arg2;
- (void)_checkAndSetIsCapturingSpeech:(_Bool)arg1;
- (void)dealloc;
- (id)init;
- (void)cancelRequest;
- (void)startSpeechRequestWithSpeechFileAtURL:(id)arg1 isNarrowBand:(_Bool)arg2;
- (void)startSpeechRequestWithSpeechFileAtURL:(id)arg1;
- (id)_cachedBulletins;
- (id)_clientServiceWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)_clientService;
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)arg1;
- (void)_barrier;

@end

@interface AFConnectionClientServiceDelegate : NSObject <AFClientServiceDelegate>
{
    AFConnection *_connection;
}

- (void).cxx_destruct;
- (oneway void)speechRecognitionDidFail:(id)arg1;
- (oneway void)speechRecognizedPartialResult:(id)arg1;
- (oneway void)speechRecognized:(id)arg1;
- (oneway void)speechRecordingDidFail:(id)arg1;
- (oneway void)speechRecordingDidCancel;
- (oneway void)speechRecordingDidEnd;
- (oneway void)speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (oneway void)speechRecordingDidChangeAVRecordRoute:(id)arg1;
- (oneway void)speechRecordingDidBeginOnAVRecordRoute:(id)arg1;
- (oneway void)speechRecordingWillBegin;
- (oneway void)shouldSpeakChanged:(_Bool)arg1;
- (oneway void)acousticIDRequestDidFinishWithSuccess:(_Bool)arg1;
- (oneway void)musicWasDetected;
- (oneway void)acousticIDRequestWillStart;
- (oneway void)getBulletinContext:(CDUnknownBlockType)arg1;
- (oneway void)requestDidFailWithError:(id)arg1 requestClass:(id)arg2;
- (oneway void)requestRequestedDismissAssistant;
- (oneway void)requestRequestedOpenURL:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (oneway void)requestDidFinish;
- (oneway void)requestDidReceiveCommand:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (id)_connectionDelegate;
- (id)initWithConnection:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFContextManager : NSObject
{
    struct __CFArray *_contextProviders;
    CPDistributedMessagingCenter *_center;
}

+ (id)defaultContextManager;
- (void).cxx_destruct;
- (void)dealloc;
- (void)removeContextProvider:(id)arg1;
- (_Bool)addContextProvider:(id)arg1;
- (void)_shutdownServer;
- (id)_collateContexts;
- (void)_collateContextsIntoArray:(id)arg1;
- (void)startCenter:(id)arg1;
- (void)nothing;
- (id)init;

@end

@interface AFDictationConnection : NSObject
{
    NSXPCConnection *_connection;
    NSString *_lastUsedLanguage;
    id <AFDictationDelegate> _delegate;
    unsigned int _stateInSync:1;
    unsigned int _audioSessionID;
    float _averagePower;
    float _peakPower;
    _Bool _isCapturingSpeech;
    _Bool _hasActiveRequest;
}

+ (void)fetchSupportedLanguageCodes:(CDUnknownBlockType)arg1;
+ (_Bool)dictationIsSupportedForLanguageCode:(id)arg1 error:(id *)arg2;
+ (_Bool)dictationIsEnabled;
@property(nonatomic) __weak id <AFDictationDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)endSession;
- (float)peakPower;
- (float)averagePower;
- (unsigned int)audioSessionID;
- (void)prepareWithOptions:(id)arg1;
- (void)sendSpeechCorrection:(id)arg1 forIdentifier:(id)arg2;
- (void)stopSpeech;
- (void)stopSpeechWithOptions:(id)arg1;
- (void)cancelSpeech;
- (void)startDictationWithLanguageCode:(id)arg1 options:(id)arg2;
- (void)startDictationWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3;
@property(readonly, nonatomic) _Bool currentlyUsingLocalDication;
- (void)preheat;
- (void)_willCompleteDictation;
- (void)_willFailDictationWithError:(id)arg1;
- (void)_willCancelDictation;
- (void)_willStartDictation;
- (void)cancelAvailabilityMonitoring;
- (void)beginAvailabilityMonitoring;
- (_Bool)dictationIsAvailableForLanguage:(id)arg1;
- (void)_availabilityChanged:(id)arg1;
- (void)_extendRequestTimeout;
- (void)_invokeRequestTimeout;
- (void)_cancelRequestTimeout;
- (void)_scheduleRequestTimeout;
- (id)_dictationService;
- (id)_connection;
- (void)_registerInvalidationHandlerForXPCConnection:(id)arg1;
- (void)_clearConnections;
- (void)_connectionInterrupted;
- (void)_tellDelegateAudioSessionIDChanged:(unsigned int)arg1;
- (void)_tellSpeechDelegateAudioFileFinished:(id)arg1 error:(id)arg2;
- (void)_tellSpeechDelegateRecognitionDidFail:(id)arg1;
- (void)_tellSpeechDelegateDidRecognizeTranscriptionObjects:(id)arg1 languageModel:(id)arg2;
- (void)_tellSpeechDelegateDidRecognizeSpeechTokens:(id)arg1 languageModel:(id)arg2;
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)arg1 languageModel:(id)arg2 correctionIdentifier:(id)arg3;
- (void)_tellSpeechDelegateDidHypothesizeSpeechPhrases:(id)arg1 languageModel:(id)arg2;
- (void)_tellSpeechDelegateRecordingDidFail:(id)arg1;
- (void)_tellSpeechDelegateRecordingDidCancel;
- (void)_tellSpeechDelegateRecordingDidEnd;
- (void)_tellSpeechDelegateRecordingDidBegin;
- (void)_tellSpeechDelegateRecordingWillBegin;
- (void)_updateState;
- (void)_speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (void)_setAudioSessionID:(unsigned int)arg1;
- (void)_checkAndSetIsCapturingSpeech:(_Bool)arg1;
- (void)dealloc;
- (id)init;
- (void)startDictationWithSpeechFileAtURL:(id)arg1 isNarrowBand:(_Bool)arg2 options:(id)arg3 forLanguage:(id)arg4;
- (void)startDictationWithSpeechFileAtURL:(id)arg1 options:(id)arg2 forLanguage:(id)arg3;

@end

@interface AFDictationConnectionServiceDelegate : NSObject <AFDictationServiceDelegate>
{
    AFDictationConnection *_connection;
}

- (void).cxx_destruct;
- (oneway void)speechDidFinishWritingAudioFile:(id)arg1 error:(id)arg2;
- (oneway void)speechRecognitionDidFail:(id)arg1;
- (oneway void)speechDidRecognizeTranscriptionObjects:(id)arg1 usingSpeechModel:(id)arg2;
- (oneway void)speechDidRecognizeTokens:(id)arg1 usingSpeechModel:(id)arg2;
- (oneway void)speechDidRecognizePhrases:(id)arg1 usingSpeechModel:(id)arg2 correctionContext:(id)arg3;
- (oneway void)speechRecordingDidFail:(id)arg1;
- (oneway void)speechRecordingDidCancel;
- (oneway void)speechRecordingDidEnd;
- (oneway void)speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (oneway void)speechRecordingDidBegin;
- (oneway void)speechRecordingWillBegin;
- (id)initWithDictationConnection:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFDictationOptions : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_applicationName;
    NSString *_applicationVersion;
    NSString *_fieldLabel;
    NSString *_fieldIdentifier;
    NSString *_interactionIdentifier;
    long long _keyboardType;
    NSString *_prefixText;
    NSString *_postfixText;
    NSString *_selectedText;
    long long _returnKeyType;
    long long _transcriptionMode;
    NSString *_languageCodeOverride;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *languageCodeOverride; // @synthesize languageCodeOverride=_languageCodeOverride;
@property(nonatomic) long long transcriptionMode; // @synthesize transcriptionMode=_transcriptionMode;
@property(nonatomic) long long returnKeyType; // @synthesize returnKeyType=_returnKeyType;
@property(copy, nonatomic) NSString *selectedText; // @synthesize selectedText=_selectedText;
@property(copy, nonatomic) NSString *postfixText; // @synthesize postfixText=_postfixText;
@property(copy, nonatomic) NSString *prefixText; // @synthesize prefixText=_prefixText;
@property(nonatomic) long long keyboardType; // @synthesize keyboardType=_keyboardType;
@property(copy, nonatomic) NSString *interactionIdentifier; // @synthesize interactionIdentifier=_interactionIdentifier;
@property(copy, nonatomic) NSString *fieldIdentifier; // @synthesize fieldIdentifier=_fieldIdentifier;
@property(copy, nonatomic) NSString *fieldLabel; // @synthesize fieldLabel=_fieldLabel;
@property(copy, nonatomic) NSString *applicationVersion; // @synthesize applicationVersion=_applicationVersion;
@property(copy, nonatomic) NSString *applicationName; // @synthesize applicationName=_applicationName;
- (void).cxx_destruct;
- (id)dictationOptionsWithoutTextContext;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface AFError : NSObject
{
}

+ (id)errorWithCode:(long long)arg1;
+ (id)errorWithCode:(long long)arg1 description:(id)arg2 underlyingError:(id)arg3;

@end

@interface AFLocation : NSObject <AFTranscriptionType>
{
    NSURL *_addressBookID;
    NSString *_addressLabel;
    NSString *_contactName;
    NSData *_geoResult;
    long long _resultType;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long resultType; // @synthesize resultType=_resultType;
@property(copy, nonatomic) NSData *geoResult; // @synthesize geoResult=_geoResult;
@property(copy, nonatomic) NSString *contactName; // @synthesize contactName=_contactName;
@property(copy, nonatomic) NSString *addressLabel; // @synthesize addressLabel=_addressLabel;
@property(copy, nonatomic) NSURL *addressBookID; // @synthesize addressBookID=_addressBookID;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFManagedStorageConnection : NSObject <AFManagedStore>
{
    NSXPCConnection *_connection;
}

- (void).cxx_destruct;
- (void)setDomainObject:(id)arg1 forKey:(id)arg2;
- (id)domainObjectForKey:(id)arg1;
- (id)_managedStoreServiceWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)_managedStoreService;
- (id)_connection;
- (void)_clearConnection;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFMetrics : NSObject <NSSecureCoding>
{
    NSString *_originalCommandId;
    long long _category;
    NSNumber *_duration;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSNumber *duration; // @synthesize duration=_duration;
@property(nonatomic) long long category; // @synthesize category=_category;
@property(copy, nonatomic) NSString *originalCommandId; // @synthesize originalCommandId=_originalCommandId;
- (void).cxx_destruct;
- (id)description;
- (id)categoryString;
- (double)_roundDouble:(double)arg1 toSignificantDigits:(unsigned long long)arg2;
- (id)aceMetrics;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface AFPerson : NSObject <AFTranscriptionType>
{
    NSSet *_contactHandles;
    NSString *_fullName;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *fullName; // @synthesize fullName=_fullName;
@property(copy, nonatomic) NSSet *contactHandles; // @synthesize contactHandles=_contactHandles;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFPreferences : NSObject
{
    _Bool _registeredForInternalPrefs;
    _Bool _registeredForLanguageCode;
    _Bool _registeredForOutputVoice;
    NSObject<OS_dispatch_queue> *_navTokenQueue;
    _Bool _navTokenIsValid;
    int _navToken;
}

+ (id)sharedPreferences;
- (void).cxx_destruct;
- (_Bool)fileLoggingIsEnabled;
- (void)setFileLoggingIsEnabled:(_Bool)arg1;
- (void)_setLoggingDefaultValue:(id)arg1 forKey:(id)arg2;
- (id)languagesMissingBirthCertificates;
- (void)setBirthCertificateData:(id)arg1 forLanguageCode:(id)arg2;
- (id)birthCertificateDataForLanguageCode:(id)arg1;
- (id)whitelistedLanguages;
- (void)setValue:(id)arg1 forSessionContextKey:(id)arg2;
- (id)valueForSessionContextPreferenceKey:(id)arg1;
- (void)_registerForNavStatusIfNeeded;
- (void)setOutputVoice:(id)arg1;
- (id)outputVoice;
- (void)synchronizeVoiceServicesLanguageCode;
- (void)setLanguageCode:(id)arg1;
- (id)languageCode;
- (void)setShouldShowReadyForLanguageCode:(id)arg1;
- (void)didShowReadyForLanguageCode:(id)arg1;
- (_Bool)shouldShowReadyForLanguageCode:(id)arg1;
- (void)setDisableAssistantWhilePasscodeLocked:(_Bool)arg1;
- (_Bool)disableAssistantWhilePasscodeLocked;
- (void)setStreamingDictationEnabled:(_Bool)arg1;
- (_Bool)streamingDictationEnabled;
- (void)setManualEndpointingThreshold:(id)arg1;
- (id)manualEndpointingThreshold;
- (void)setIgnoreServerManualEndpointingThreshold:(_Bool)arg1;
- (_Bool)ignoreServerManualEndpointingThreshold;
- (void)setHandsFreeMode:(long long)arg1;
- (long long)handsFreeMode;
- (void)setDebugButtonIsEnabled:(_Bool)arg1;
- (_Bool)debugButtonIsEnabled;
- (void)setBugReportingMode:(long long)arg1;
- (long long)bugReportingMode;
- (void)setDictationIsEnabled:(_Bool)arg1;
- (void)setAssistantIsEnabled:(_Bool)arg1;
- (void)_setDictationIsEnabledLocal:(_Bool)arg1;
- (void)_setAssistantIsEnabledLocal:(_Bool)arg1;
- (_Bool)dictationIsEnabled;
- (_Bool)assistantIsEnabled;
- (void)_registerForOutputVoice;
- (void)_registerForLanguageCode;
- (void)_registerForInteralPrefs;
- (void)synchronize;
- (void)dealloc;
- (id)init;
- (void)_ouputVoiceDidChangeExternally;
- (void)_languageCodeDidChangeExternally;
- (void)_internalPreferencesDidChangeExternally;
- (void)_preferencesDidChangeExternally;

@end

@interface AFSpeakableUtteranceParser : NSObject
{
    NSMutableDictionary *_providers;
    id _functionHandler;
    NSLocale *_locale;
}

+ (id)parseUserGeneratedMessage:(id)arg1;
+ (_Bool)_shouldAutomaticallyProvideFunctions;
- (void).cxx_destruct;
- (id)parseStringRemovingControlCharacters:(id)arg1 error:(id *)arg2;
- (id)parseStringWithFormat:(id)arg1 error:(id *)arg2;
- (id)parseStringWithFormat:(id)arg1 includeControlCharacters:(_Bool)arg2 error:(id *)arg3 hadEmpties:(_Bool *)arg4;
- (id)_handleControlCodeAtIndex:(unsigned int)arg1 withBuffer:(CDStruct_f9502b4c)arg2 totalLength:(unsigned long long)arg3 consumedLength:(unsigned int *)arg4 hadEmpties:(_Bool *)arg5;
- (id)_handleOptionalAtIndex:(unsigned int)arg1 withBuffer:(CDStruct_f9502b4c)arg2 totalLength:(unsigned long long)arg3 consumedLength:(unsigned int *)arg4;
- (id)_handleProviderAtIndex:(unsigned int)arg1 withBuffer:(CDStruct_f9502b4c)arg2 totalLength:(unsigned long long)arg3 consumedLength:(unsigned int *)arg4;
@property(nonatomic) _Bool handlesFunctions;
@property(nonatomic) _Bool handleTTSCodes;
- (void)registerProvider:(id)arg1 forNamespace:(id)arg2;
- (id)initWithLocale:(id)arg1;
- (id)init;

@end

@interface AFSUPFunctionProvider : AFSpeakableUtteranceParser <AFSpeakableNamespaceProvider>
{
    NSDateFormatter *_dateFormatter;
    NSDateFormatter *_timeFormatter;
    _Bool _useSpeechMode;
}

+ (_Bool)_shouldAutomaticallyProvideFunctions;
- (void).cxx_destruct;
- (id)stringForExpression:(id)arg1;
- (id)_callFunction:(id)arg1 withArguments:(id)arg2;
- (id)_deviceModel;
- (id)_lowercaseString:(id)arg1;
- (id)_tempInWeatherUnits:(id)arg1;
- (id)_currentWeekday:(id)arg1;
- (id)_currentShortDate:(id)arg1;
- (id)_currentLongDate:(id)arg1;
- (id)_currentTime:(id)arg1;
- (id)_dateFormattedWithFormatter:(id)arg1 arguments:(id)arg2;
- (void)useSpeechMode:(_Bool)arg1;
- (id)initWithLocale:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFSettingsConnection : NSObject
{
    NSXPCConnection *_connection;
    NSObject<OS_dispatch_queue> *_voicesQueue;
    NSArray *_voices;
    AFVoiceInfo *_selectedVoice;
}

- (void).cxx_destruct;
- (void)setLanguage:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)setLanguage:(id)arg1;
- (void)setOutputVoice:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)setOutputVoice:(id)arg1;
- (void)getAvailableVoicesForRecognitionLanguage:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_updateVoicesWithCompletion:(CDUnknownBlockType)arg1;
- (void)_updateVoicesSync;
- (id)_filterVoices:(id)arg1 forLanguage:(id)arg2;
- (id)_voices;
- (void)_setVoices:(id)arg1;
- (void)barrier;
- (void)killDaemon;
- (void)setDictationEnabled:(_Bool)arg1;
- (void)setAssistantEnabled:(_Bool)arg1;
- (void)setActiveAccountIdentifier:(id)arg1;
- (void)deleteAccountWithIdentifier:(id)arg1;
- (void)saveAccount:(id)arg1 setActive:(_Bool)arg2;
- (id)accounts;
- (void)fetchSupportedLanguageCodes:(CDUnknownBlockType)arg1;
- (id)_settingsServiceWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)_settingsService;
- (id)_connection;
- (void)_clearConnection;
- (void)dealloc;
- (id)init;
- (void)_syncDataWithAnchorKeys:(id)arg1 forceReset:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;

@end

@interface AFSiriRequest : NSObject <NSSecureCoding>
{
    NSUUID *_identifier;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_identifier;
- (id)init;
- (id)_initWithIdentifier:(id)arg1;

@end

@interface AFSiriResponse : NSObject <NSSecureCoding>
{
    NSUUID *_requestIdentifier;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_requestIdentifier;
- (id)_initWithRequest:(id)arg1;
- (id)_initWithRequestIdentifier:(id)arg1;

@end

@interface AFSiriTask : NSObject <BSXPCCoding, NSSecureCoding>
{
    AFSiriRequest *_request;
    NSXPCListenerEndpoint *_remoteResponseListenerEndpoint;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithXPCDictionary:(id)arg1;
- (void)encodeWithXPCDictionary:(id)arg1;
- (void)completeWithResponse:(id)arg1;
- (void)failWithError:(id)arg1;
- (id)_responseHandlerProxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)request;
- (id)_initWithRequest:(id)arg1 remoteResponseListenerEndpoint:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFSiriTaskService : NSObject <AFSiriTaskHandling, NSXPCListenerDelegate>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSXPCListener *_listener;
    id <AFSiriTaskServiceDelegate> _delegate;
}

+ (id)appTaskService;
+ (id)_machServiceNameForAppTaskServiceWithBundleIdentifier:(id)arg1;
- (void).cxx_destruct;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)handleSiriTask:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)resume;
- (id)initWithMachServiceName:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AFSpeechCorrectionInfo : NSObject <NSSecureCoding>
{
    long long _alternativeSelectionCount;
    long long _characterModificationCount;
    NSString *_correctedText;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSString *correctedText; // @synthesize correctedText=_correctedText;
@property(nonatomic) long long characterModificationCount; // @synthesize characterModificationCount=_characterModificationCount;
@property(nonatomic) long long alternativeSelectionCount; // @synthesize alternativeSelectionCount=_alternativeSelectionCount;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface AFSpeechInterpretation : NSObject <NSSecureCoding>
{
    NSArray *_tokens;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSArray *tokens; // @synthesize tokens=_tokens;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (long long)confidenceScore;
- (id)text;

@end

@interface AFSpeechPhrase : NSObject <NSSecureCoding>
{
    _Bool _isLowConfidence;
    NSArray *_interpretations;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isLowConfidence; // @synthesize isLowConfidence=_isLowConfidence;
@property(copy, nonatomic) NSArray *interpretations; // @synthesize interpretations=_interpretations;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)bestInterpretation;

@end

@interface AFSpeechRequestOptions : NSObject <NSSecureCoding>
{
    _Bool _isEyesFree;
    _Bool _useAutomaticEndpointing;
    _Bool _useStreamingDictation;
    _Bool _isInitialBringUp;
    _Bool _acousticIdEnabled;
    long long _activationEvent;
    NSString *_btDeviceAddress;
    NSString *_serverCommandId;
    double _activationEventTime;
    double _expectedActivationEventTime;
    NSNumber *_homeButtonUpFromBeep;
    long long _audioFileType;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) long long audioFileType; // @synthesize audioFileType=_audioFileType;
@property(nonatomic) _Bool acousticIdEnabled; // @synthesize acousticIdEnabled=_acousticIdEnabled;
@property(copy, nonatomic) NSNumber *homeButtonUpFromBeep; // @synthesize homeButtonUpFromBeep=_homeButtonUpFromBeep;
@property(nonatomic) _Bool isInitialBringUp; // @synthesize isInitialBringUp=_isInitialBringUp;
@property(nonatomic) double expectedActivationEventTime; // @synthesize expectedActivationEventTime=_expectedActivationEventTime;
@property(nonatomic) double activationEventTime; // @synthesize activationEventTime=_activationEventTime;
@property(nonatomic) _Bool useStreamingDictation; // @synthesize useStreamingDictation=_useStreamingDictation;
@property(nonatomic) _Bool useAutomaticEndpointing; // @synthesize useAutomaticEndpointing=_useAutomaticEndpointing;
@property(copy, nonatomic) NSString *serverCommandId; // @synthesize serverCommandId=_serverCommandId;
@property(nonatomic) _Bool isEyesFree; // @synthesize isEyesFree=_isEyesFree;
@property(copy, nonatomic) NSString *btDeviceAddress; // @synthesize btDeviceAddress=_btDeviceAddress;
@property(nonatomic) long long activationEvent; // @synthesize activationEvent=_activationEvent;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithActivationEvent:(long long)arg1;

@end

@interface AFSpeechToken : NSObject <NSSecureCoding>
{
    _Bool _removeSpaceBefore;
    _Bool _removeSpaceAfter;
    NSString *_text;
    long long _confidenceScore;
    double _startTime;
    double _endTime;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool removeSpaceAfter; // @synthesize removeSpaceAfter=_removeSpaceAfter;
@property(nonatomic) _Bool removeSpaceBefore; // @synthesize removeSpaceBefore=_removeSpaceBefore;
@property(nonatomic) double endTime; // @synthesize endTime=_endTime;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) long long confidenceScore; // @synthesize confidenceScore=_confidenceScore;
@property(copy, nonatomic) NSString *text; // @synthesize text=_text;
- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;

@end

@interface AFUserUtterance : NSObject
{
    NSMutableArray *_phrases;
    NSMutableArray *_tokens;
    NSString *_text;
    NSDictionary *_correctionIdentifier;
}

@property(readonly, nonatomic) NSDictionary *correctionIdentifier; // @synthesize correctionIdentifier=_correctionIdentifier;
- (void).cxx_destruct;
- (id)description;
- (id)streamingTokens;
@property(readonly, nonatomic) NSArray *dictationResult;
- (id)bestTextInterpretation;
- (id)initWithString:(id)arg1 correctionIdentifier:(id)arg2;
- (id)initWithTokens:(id)arg1 correctionIdentifier:(id)arg2;
- (id)initWithPhrases:(id)arg1 correctionIdentifier:(id)arg2;

@end

@interface AFVoiceInfo : NSObject <NSSecureCoding, NSCopying>
{
    _Bool _isCustom;
    NSString *_languageCode;
    long long _gender;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool isCustom; // @synthesize isCustom=_isCustom;
@property(nonatomic) long long gender; // @synthesize gender=_gender;
@property(readonly, nonatomic) NSString *languageCode; // @synthesize languageCode=_languageCode;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithLanguageCode:(id)arg1 gender:(long long)arg2 isCustom:(_Bool)arg3;

@end

@interface NSURL (AMOSExtensions)
- (_Bool)isAMOSCommittedIdentifier;
- (_Bool)isAMOSIdentifier;
@end

@interface NSXPCInterface (AFSiriResponseHandler)
+ (id)af_siriResponseHandlingInterface;
@end

@interface NSXPCInterface (AFSiriTaskHandling)
+ (id)af_siriTaskHandlingInterface;
@end

@interface SASInterpretation (AFSpeechTokenAdditions)
- (id)af_speechTokens;
@end

@interface SASPhrase (AFSpeechTokenAdditions)
- (id)af_speechInterpretations;
@end

@interface SASRecognition (AFSpeechTokenAdditions)
- (id)af_speechPhrases;
@end

@interface SASSpeechPartialResult (AFUserUtteranceAdditions)
- (id)af_bestTextInterpretation;
- (id)af_userUtteranceValue;
@end

@interface SASSpeechPartialResult (AssistantAdditions)
- (id)af_correctionContext;
@end

@interface SASSpeechRecognized (AFUserUtteranceAdditions)
- (id)af_bestTextInterpretation;
- (id)af_userUtteranceValue;
@end

@interface SASSpeechRecognized (AssistantAdditions)
- (id)af_correctionContext;
@end

@interface SASToken (AFSpeechTokenAdditions)
- (id)af_speechToken;
@end

@interface SAStructuredDictationItem (AssistantAdditions)
- (id)af_personTranscriptionResults;
- (id)af_locationTranscriptionResults;
@end

@interface _AFSpeakableUtterancePassThroughProvider : NSObject <AFSpeakableNamespaceProvider>
{
}

- (id)stringForExpression:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

