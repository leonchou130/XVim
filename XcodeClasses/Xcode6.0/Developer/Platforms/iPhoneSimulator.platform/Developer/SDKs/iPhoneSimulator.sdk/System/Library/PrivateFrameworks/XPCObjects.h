//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/XPCObjects.framework/XPCObjects
// UUID: 34C0C1CA-42AD-3B9C-8A1A-6D38C493A86C
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 47.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface NSCoder (XPCSafeDecoding)
- (id)safeDecodeDictionaryForKey:(id)arg1 keyClass:(Class)arg2 valueClass:(Class)arg3;
- (id)safeDecodeSetForKey:(id)arg1 valueClass:(Class)arg2;
- (id)safeDecodeArrayForKey:(id)arg1 valueClass:(Class)arg2;
- (id)_safeDecodeContainerForKey:(id)arg1 containerClass:(Class)arg2 valueClass:(Class)arg3;
- (id)safeDecodeNumberForKey:(id)arg1;
- (id)safeDecodeDateForKey:(id)arg1;
- (id)safeDecodeStringForKey:(id)arg1;
- (id)safeDecodeObjectForKey:(id)arg1 expectedClass:(Class)arg2;
@end

@interface NSKeyedUnarchiver (Security)
+ (id)unarchiveObjectWithData:(id)arg1 allowedClasses:(id)arg2;
@end

@interface XPCDecoder : NSCoder
{
    NSObject<OS_xpc_object> *_encoding;
    NSObject<OS_xpc_object> *_currentObject;
    struct __CFDictionary *_decodedObjects;
    struct __CFSet *_requestedDecodedObjects;
    NSArray *_allowedClasses;
    NSString *_errorDescription;
}

+ (id)rootObjectForEncoding:(id)arg1 allowedClasses:(id)arg2 errorDescription:(id)arg3;
+ (id)rootObjectForEncoding:(id)arg1 allowedClasses:(id)arg2;
+ (id)rootObjectForEncoding:(id)arg1;
@property(copy, nonatomic) NSString *errorDescription; // @synthesize errorDescription=_errorDescription;
- (_Bool)_classIsAllowed:(Class)arg1;
- (long long)versionForClassName:(id)arg1;
- (unsigned int)decodeMachSendRightForKey:(id)arg1;
- (id)decodeEndpointForKey:(id)arg1;
- (const char *)decodeBytesForKey:(id)arg1 returnedLength:(unsigned long long *)arg2;
- (double)decodeDoubleForKey:(id)arg1;
- (float)decodeFloatForKey:(id)arg1;
- (long long)decodeInt64ForKey:(id)arg1;
- (int)decodeInt32ForKey:(id)arg1;
- (long long)decodeIntegerForKey:(id)arg1;
- (int)decodeIntForKey:(id)arg1;
- (_Bool)decodeBoolForKey:(id)arg1;
- (id)decodeObjectForKey:(id)arg1;
- (_Bool)containsValueForKey:(id)arg1;
- (void)_verifyCurrentObject;
- (_Bool)allowsKeyedCoding;
- (id)decodeObject;
- (void)dealloc;
- (id)initWithEncoding:(id)arg1;

@end

@interface XPCDetailedSignature : NSObject
{
    unsigned long long _argumentCount;
    Class *_classes;
}

+ (id)signatureWithoutArguments;
+ (id)signatureWithArgumentCount:(unsigned long long)arg1 classes:(Class)arg2;
- (Class)argumentClassAtIndex:(unsigned long long)arg1;
- (void)setClass:(Class)arg1 forArgumentAtIndex:(unsigned long long)arg2;
- (void)dealloc;
- (id)initWithArgumentCount:(unsigned long long)arg1;

@end

@interface XPCEncoder : NSCoder
{
    NSObject<OS_xpc_object> *_encoding;
    NSObject<OS_xpc_object> *_currentObject;
    struct __CFDictionary *_encodedObjects;
    struct __CFDictionary *_conditionalObjects;
    unsigned long long _nextConditionalObjectID;
    struct __CFDictionary *_replacementObjects;
}

+ (id)copyEncodingForRootObject:(id)arg1;
- (void)_fixUpConditionalObjects;
- (id)_replacementObjectForObject:(id)arg1;
- (long long)versionForClassName:(id)arg1;
- (void)encodeMachSendRight:(unsigned int)arg1 forKey:(id)arg2;
- (void)encodeEndpoint:(id)arg1 forKey:(id)arg2;
- (void)encodeBytes:(const char *)arg1 length:(unsigned long long)arg2 forKey:(id)arg3;
- (void)encodeDouble:(double)arg1 forKey:(id)arg2;
- (void)encodeFloat:(float)arg1 forKey:(id)arg2;
- (void)encodeInt64:(long long)arg1 forKey:(id)arg2;
- (void)encodeInteger:(long long)arg1 forKey:(id)arg2;
- (void)encodeInt32:(int)arg1 forKey:(id)arg2;
- (void)encodeInt:(int)arg1 forKey:(id)arg2;
- (void)encodeBool:(_Bool)arg1 forKey:(id)arg2;
- (void)encodeConditionalObject:(id)arg1 forKey:(id)arg2;
- (void)encodeObject:(id)arg1 forKey:(id)arg2;
- (void)_verifyCurrentObject;
- (void)encodeRootObject:(id)arg1;
- (_Bool)allowsKeyedCoding;
- (id)encoding;
- (void)dealloc;
- (id)init;

@end

@interface XPCEndpoint : NSObject <NSCoding>
{
    NSObject<OS_xpc_object> *_endpoint;
}

@property(nonatomic) NSObject<OS_xpc_object> *endpoint; // @synthesize endpoint=_endpoint;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)createConnection;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;
- (id)_initWithEndpoint:(id)arg1;
- (id)init;

@end

@interface XPCMachSendRight : NSObject <NSSecureCoding>
{
    unsigned int _sendRight;
}

+ (_Bool)supportsSecureCoding;
+ (id)wrapSendRight:(unsigned int)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (unsigned int)sendRight;
- (void)dealloc;

@end

@interface XPCProxy : NSObject <NSCopying>
{
    NSObject<OS_xpc_object> *_connection;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_internalQueue;
    id <XPCProxyTarget> _target;
    Class _remoteClass;
    Protocol *_remoteProtocol;
    CDUnknownBlockType _errorHandler;
    _Bool _invalidated;
    _Bool _useTraditionalEncoder;
    NSArray *_whitelistedClassNames;
}

+ (void)initialize;
@property(nonatomic) _Bool useTraditionalEncoder; // @synthesize useTraditionalEncoder=_useTraditionalEncoder;
@property(readonly, nonatomic) NSObject<OS_xpc_object> *connection; // @synthesize connection=_connection;
@property Protocol *remoteProtocol; // @synthesize remoteProtocol=_remoteProtocol;
@property Class remoteClass; // @synthesize remoteClass=_remoteClass;
@property id <XPCProxyTarget> target; // @synthesize target=_target;
@property(copy) CDUnknownBlockType errorHandler; // @synthesize errorHandler=_errorHandler;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_proxyDescription;
- (id)_errorForXpcError:(id)arg1;
- (id)_objectForXpcEncoding:(id)arg1;
- (id)_newXpcEncodingForObject:(id)arg1;
- (void)_getInvocationArgument:(void *)arg1 argumentType:(const char *)arg2 class:(Class *)arg3 forXpcArgument:(id)arg4 message:(id)arg5;
- (id)_newXpcArgumentForInvocationArgumentAt:(void *)arg1 ofType:(const char *)arg2;
- (id)_newMessageAndReplyHandler:(CDUnknownBlockType *)arg1 forInvocation:(id)arg2;
- (id)_invocationForMessage:(id)arg1;
- (SEL)_selectorForMessage:(id)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)invalidate;
- (void)dealloc;
- (void)restrictDecodingToWhitelistedClassNames:(id)arg1;
- (id)initWithConnection:(id)arg1 queue:(id)arg2 target:(id)arg3;

@end

