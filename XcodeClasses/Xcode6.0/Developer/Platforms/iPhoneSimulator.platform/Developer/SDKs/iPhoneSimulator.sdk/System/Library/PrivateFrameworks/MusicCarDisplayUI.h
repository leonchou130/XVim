//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct UIEdgeInsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/MusicCarDisplayUI.framework/MusicCarDisplayUI
// UUID: FD2B74B1-D294-340F-99BB-506D0F96AD58
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1208.2.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AFContextProvider
- (NSArray *)getCurrentContext;
- (_Bool)allowContextProvider:(id <AFContextProvider>)arg1;
@end

@protocol MCDBrowsableContentModelListener <NSObject>
- (void)model:(MCDBrowsableContentModel *)arg1 didUpdateContentItemsAtIndexPaths:(NSArray *)arg2;
- (void)model:(MCDBrowsableContentModel *)arg1 didInitiatePlaybackOfItemAtIndexPath:(NSIndexPath *)arg2 error:(NSError *)arg3;
- (void)model:(MCDBrowsableContentModel *)arg1 didUpdateContentItemsAtIndexPath:(NSIndexPath *)arg2;
@end

@protocol MCDNowPlayingViewControllerDataSource <NSObject>
- (_Bool)nowPlayingViewControllerIsPlaying:(MCDNowPlayingViewController *)arg1;
- (double)playbackDurationForNowPlayingViewController:(MCDNowPlayingViewController *)arg1 withElapsedTime:(out double *)arg2;
- (_Bool)nowPlayingViewControllerIsShowingExplicitTrack:(MCDNowPlayingViewController *)arg1;
- (UIImage *)backgroundArtForNowPlayingController:(MCDNowPlayingViewController *)arg1;
- (NSString *)titleForNowPlayingController:(MCDNowPlayingViewController *)arg1;
- (NSString *)albumTextForNowPlayingController:(MCDNowPlayingViewController *)arg1;
- (NSString *)artistTextForNowPlayingController:(MCDNowPlayingViewController *)arg1;

@optional
- (NSString *)repeatStringForNowPlayingViewController:(MCDNowPlayingViewController *)arg1;
- (unsigned long long)repeatTypeForNowPlayingViewController:(MCDNowPlayingViewController *)arg1;
- (NSString *)shuffleStringForNowPlayingViewController:(MCDNowPlayingViewController *)arg1;
- (unsigned long long)shuffleTypeForNowPlayingViewController:(MCDNowPlayingViewController *)arg1;
@end

@protocol MCDNowPlayingViewControllerDelegate <NSObject>

@optional
- (void)nowPlayingViewControllerCreate:(MCDNowPlayingViewController *)arg1;
- (void)nowPlayingViewControllerToggleRepeat:(MCDNowPlayingViewController *)arg1;
- (void)nowPlayingViewControllerToggleShuffle:(MCDNowPlayingViewController *)arg1;
- (_Bool)nowPlayingViewControllerCanCreate:(MCDNowPlayingViewController *)arg1;
- (_Bool)nowPlayingViewControllerCanRepeat:(MCDNowPlayingViewController *)arg1;
- (_Bool)nowPlayingViewControllerCanShuffle:(MCDNowPlayingViewController *)arg1;
- (void)nowPlayingViewController:(MCDNowPlayingViewController *)arg1 didSendAction:(long long)arg2 state:(long long)arg3;
- (_Bool)nowPlayingViewController:(MCDNowPlayingViewController *)arg1 shouldEnableButton:(long long)arg2;
- (_Bool)nowPlayingViewController:(MCDNowPlayingViewController *)arg1 shouldDisplayButton:(long long)arg2 withImage:(out id *)arg3 tinted:(out _Bool *)arg4;
@end

@protocol MPUNowPlayingDelegate <NSObject>

@optional
- (void)nowPlayingController:(MPUNowPlayingController *)arg1 nowPlayingApplicationDidChange:(NSString *)arg2;
- (void)nowPlayingController:(MPUNowPlayingController *)arg1 elapsedTimeDidChange:(double)arg2;
- (void)nowPlayingController:(MPUNowPlayingController *)arg1 playbackStateDidChange:(_Bool)arg2;
- (void)nowPlayingController:(MPUNowPlayingController *)arg1 nowPlayingInfoDidChange:(NSDictionary *)arg2;
- (void)nowPlayingControllerDidStopListeningForNotifications:(MPUNowPlayingController *)arg1;
- (void)nowPlayingControllerDidBeginListeningForNotifications:(MPUNowPlayingController *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol RURadioDataSourceDelegate <NSObject>

@optional
- (void)radioDataSourceDidInvalidate:(RURadioDataSource *)arg1;
@end

@protocol UIGestureRecognizerDelegate <NSObject>

@optional
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldReceiveTouch:(UITouch *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizerShouldBegin:(UIGestureRecognizer *)arg1;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UITabBarControllerDelegate <NSObject>

@optional
- (id <UIViewControllerAnimatedTransitioning>)tabBarController:(UITabBarController *)arg1 animationControllerForTransitionFromViewController:(UIViewController *)arg2 toViewController:(UIViewController *)arg3;
- (id <UIViewControllerInteractiveTransitioning>)tabBarController:(UITabBarController *)arg1 interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning>)arg2;
- (long long)tabBarControllerPreferredInterfaceOrientationForPresentation:(UITabBarController *)arg1;
- (unsigned long long)tabBarControllerSupportedInterfaceOrientations:(UITabBarController *)arg1;
- (void)tabBarController:(UITabBarController *)arg1 didEndCustomizingViewControllers:(NSArray *)arg2 changed:(_Bool)arg3;
- (void)tabBarController:(UITabBarController *)arg1 willEndCustomizingViewControllers:(NSArray *)arg2 changed:(_Bool)arg3;
- (void)tabBarController:(UITabBarController *)arg1 willBeginCustomizingViewControllers:(NSArray *)arg2;
- (void)tabBarController:(UITabBarController *)arg1 didSelectViewController:(UIViewController *)arg2;
- (_Bool)tabBarController:(UITabBarController *)arg1 shouldSelectViewController:(UIViewController *)arg2;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

@interface MCDActionCellConfiguration : MPUActionCellConfiguration
{
}

+ (Class)tableViewCellClass;
+ (long long)tableViewSeparatorStyle;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (id)tableViewSeparatorColor;
+ (double)tableViewCellHeight;
+ (id)tableViewCellBackgroundColor;
+ (id)tableViewBackgroundColor;

@end

@interface MCDTableViewCell : UITableViewCell
{
    UIImageView *_artworkImageView;
    double _originalLeftInset;
}

- (void).cxx_destruct;
@property(retain, nonatomic) UIImage *artworkImage;
- (void)layoutSubviews;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface MCDActionTableViewCell : MCDTableViewCell
{
}

- (void)setSectionLocation:(int)arg1 animated:(_Bool)arg2;

@end

@interface MCDCellConfiguration : MPUCellConfiguration
{
}

+ (Class)tableViewCellClass;
+ (long long)tableViewSeparatorStyle;
+ (struct UIEdgeInsets)tableViewSeparatorInset;
+ (id)tableViewSeparatorColor;
+ (double)tableViewCellHeight;
+ (id)tableViewCellBackgroundColor;
+ (id)tableViewBackgroundColor;

@end

@interface MCDAlbumCellConfiguration : MCDCellConfiguration
{
}

+ (id)collectionPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDAlbumTracksCellConfiguration : MCDCellConfiguration
{
}

+ (struct CGSize)sizeForDuration:(double)arg1;
+ (Class)tableViewCellClass;
+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDAlbumsDetailTableHeaderView : UITableViewHeaderFooterView
{
    UIImageView *_artworkImageView;
    UILabel *_titleLabel;
    UIView *_separatorView;
    UILabel *_subtitleLabel;
    MCDButton *_shuffleButton;
    CDUnknownBlockType _shuffleActionBlock;
}

@property(copy, nonatomic) CDUnknownBlockType shuffleActionBlock; // @synthesize shuffleActionBlock=_shuffleActionBlock;
- (void).cxx_destruct;
- (void)_shuffleButtonAction:(id)arg1;
- (void)setDuration:(double)arg1 count:(unsigned long long)arg2;
@property(copy, nonatomic) NSString *title;
@property(retain, nonatomic) UIImage *artworkImage;
- (void)layoutSubviews;
- (id)initWithReuseIdentifier:(id)arg1;

@end

@interface MCDTableViewController : MPUTableViewController
{
    NSIndexPath *_previouslySelectedIndexPath;
    _Bool _shouldHideIndexTitles;
}

+ (Class)_tableViewClass;
@property(nonatomic) _Bool shouldHideIndexTitles; // @synthesize shouldHideIndexTitles=_shouldHideIndexTitles;
- (void).cxx_destruct;
- (void)viewDidAppear:(_Bool)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)sectionIndexTitlesForTableView:(id)arg1;
- (id)_createTableView;
- (void)_MCD_nowPlayingButtonAction:(id)arg1;
- (_Bool)_viewControllerWasSelected;
- (id)MPU_createNowPlayingButton;
- (_Bool)shouldScrollToFirstDataSourceSectionOnInitialAppearance;
- (void)reloadData;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1 cellConfigurationClass:(Class)arg2;

@end

@interface MCDAlbumsDetailViewController : MCDTableViewController
{
    MPImageCache *_imageCache;
    double _maximumDurationWidth;
}

+ (id)actionCellConfigurationClasses;
- (void).cxx_destruct;
- (void)_updateTitle;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
@property(readonly, nonatomic) double maximumDurationWidth;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;
- (void)reloadData;
- (void)viewDidLoad;
- (id)initWithDataSource:(id)arg1 cellConfigurationClass:(Class)arg2;

@end

@interface MCDAlbumsViewController : MCDTableViewController
{
}

- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;

@end

@interface MCDAndOthersLabel : UIView
{
    UIFont *_font;
    UIColor *_textColor;
    NSArray *_items;
    NSString *_separator;
    NSString *_andOthers;
    NSString *_truncatedItemsString;
}

@property(retain, nonatomic) NSString *andOthers; // @synthesize andOthers=_andOthers;
@property(retain, nonatomic) NSString *separator; // @synthesize separator=_separator;
@property(retain, nonatomic) NSArray *items; // @synthesize items=_items;
@property(retain, nonatomic) UIColor *textColor; // @synthesize textColor=_textColor;
@property(retain, nonatomic) UIFont *font; // @synthesize font=_font;
- (void).cxx_destruct;
- (id)_textAttributes;
- (long long)_stringDrawingOptions;
- (void)_truncateItemsToFit;
@property(readonly, nonatomic) double desiredHeight;
@property(readonly, nonatomic) double actualHeight;
- (void)setBounds:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface MCDArtistCellConfiguration : MCDCellConfiguration
{
}

+ (Class)musicProxyClass;
+ (id)collectionPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDArtistsViewController : MCDTableViewController
{
    _Bool _allowsActions;
}

+ (Class)musicProxyClass;
+ (id)actionCellConfigurationClasses;
@property(nonatomic) _Bool allowsActions; // @synthesize allowsActions=_allowsActions;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;

@end

@interface MCD_OLD_TableViewController : UITableViewController
{
    id <MCDCarDisplayServiceProvider> _serviceProvider;
    MPAVController *_player;
    MPMediaQuery *_query;
    _Bool _viewHasAppeared;
    MCDNowPlayingButton *_nowPlayingButton;
    NSIndexPath *_previouslySelectedIndexPath;
    _Bool _alwaysShowNavBar;
}

+ (id)addAlbumArtViewWithImage:(id)arg1 toCell:(id)arg2 rowHeight:(double)arg3;
+ (id)addAlbumArtViewFromItem:(id)arg1 toCell:(id)arg2 rowHeight:(double)arg3;
@property(nonatomic) _Bool alwaysShowNavBar; // @synthesize alwaysShowNavBar=_alwaysShowNavBar;
@property(readonly, nonatomic) MPMediaQuery *query; // @synthesize query=_query;
@property(readonly, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(readonly, nonatomic) id <MCDCarDisplayServiceProvider> serviceProvider; // @synthesize serviceProvider=_serviceProvider;
@property(nonatomic) _Bool viewHasAppeared; // @synthesize viewHasAppeared=_viewHasAppeared;
- (void).cxx_destruct;
- (id)viewControllerForRowAtIndexPath:(id)arg1;
- (void)_updateNowPlayingVisibility;
- (void)_presentNowPlayingViewController;
- (void)_nowPlayingButtonTapped:(id)arg1;
- (void)_itemChanged:(id)arg1;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (_Bool)hasRowsToDisplay;
- (id)dequeueReusableCarDisplayCellForTableView:(id)arg1 indexPath:(id)arg2;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;

@end

@interface MCDAudiobookPartsTableViewController : MCD_OLD_TableViewController
{
    NSNumberFormatter *_formatter;
    NSString *_numberOfParts;
}

- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)initWithQuery:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;

@end

@interface MCDSectionedTableViewController : MCD_OLD_TableViewController
{
    unsigned long long *_offsetOfSection;
}

- (long long)tableView:(id)arg1 sectionForSectionIndexTitle:(id)arg2 atIndex:(long long)arg3;
- (id)sectionIndexTitlesForTableView:(id)arg1;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (unsigned long long)rowAtIndexPath:(id)arg1;
@property(readonly, nonatomic) _Bool isSectioning;
@property(readonly, nonatomic) unsigned long long countOfActions;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;

@end

@interface MCDAudiobooksTableViewController : MCDSectionedTableViewController
{
}

- (id)viewControllerForRowAtIndexPath:(id)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;

@end

@interface MCDBrowsableContentItem : NSObject
{
    struct _MRContentItem *_contentItem;
}

@property(readonly, nonatomic) _Bool isPlayable;
@property(readonly, nonatomic) _Bool isContainer;
@property(readonly, nonatomic) float playbackProgress;
@property(readonly, nonatomic) NSData *artworkData;
@property(readonly, nonatomic) NSString *subtitle;
@property(readonly, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (void)dealloc;
- (id)initWithMRContentItem:(struct _MRContentItem *)arg1;

@end

@interface MCDBrowsableContentModel : NSObject
{
    NSObject<OS_dispatch_queue> *_backgroundQueue;
    NSObject<OS_dispatch_queue> *_serialAccessQueue;
    NSMapTable *_indexPathsToViewControllers;
    NSCache *_fetchedItems;
    NSMutableDictionary *_identifiersToIndexPaths;
    NSString *_bundleID;
}

@property(readonly, copy, nonatomic) NSString *bundleID; // @synthesize bundleID=_bundleID;
- (void).cxx_destruct;
- (_Bool)remoteAppIsPlaying;
- (void)unregisterListenerAtIndexPath:(id)arg1;
- (void)registerListener:(id)arg1 forIndexPath:(id)arg2;
- (id)listenerForIndexPath:(id)arg1;
- (void)initiatePlaybackAtIndexPath:(id)arg1;
- (void)fetchChildrenAtIndexPath:(id)arg1 forRange:(struct _NSRange)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)getCountOfItemsForIndexPath:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)contentItemForIndexPath:(id)arg1;
- (void)loadBrowsableContentForIndexPath:(id)arg1;
- (void)_playbackInitiatedNotification:(id)arg1;
- (void)_nowPlayingDidChangeNotifiction:(id)arg1;
- (void)_dataSourceInvalidated:(id)arg1;
- (void)_contentItemsUpdated:(id)arg1;
- (void)_finishLoadingNotification:(id)arg1;
- (void)_notifyLoadOfIndexPath:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithBundleID:(id)arg1;

@end

@interface MCDBrowsableContentTableViewController : UIViewController <UITableViewDataSource, UITableViewDelegate, MCDBrowsableContentModelListener, UIGestureRecognizerDelegate>
{
    UITableView *_tableView;
    MCDNowPlayingButton *_nowPlayingButton;
    NSIndexPath *_containerIndexPath;
    MCDBrowsableContentModel *_model;
    long long _count;
    NSArray *_items;
    NSIndexPath *_selectedNextIndexPath;
    UIActivityIndicatorView *_activityIndicator;
    _UIFilteredDataSource *_dataSource;
    NSIndexPath *_awaitingCallbackForIndexPath;
    _Bool _shouldReloadOnAppear;
    NSIndexPath *_reselectIndexPath;
    NSMutableSet *_indexesToUpdate;
    NSObject<OS_dispatch_queue> *_serialQueue;
    _Bool _isFetchingGuard;
    UITapGestureRecognizer *_backGestureRecognizer;
}

- (void).cxx_destruct;
- (void)_makeBestCellFirstResponder;
- (void)_clearTableViewSelection;
- (void)_nowPlayingDidChange:(id)arg1;
- (void)_nowPlayingButtonTapped:(id)arg1;
- (void)_updateNowPlayingButtonVisibility;
- (void)_pushToIndexPath:(id)arg1;
- (id)_modelIndexPathForRow:(long long)arg1;
- (void)getContentItemsWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)_clearLoadingActivity;
- (void)_displayLoadingActivity;
- (void)tableViewDidFinishReload:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)_configureCell:(id)arg1 forIndexPath:(id)arg2;
- (void)_actuallyUpdate;
- (void)_updateForIndexPaths:(id)arg1;
- (void)model:(id)arg1 didUpdateContentItemsAtIndexPaths:(id)arg2;
- (void)model:(id)arg1 didInitiatePlaybackOfItemAtIndexPath:(id)arg2 error:(id)arg3;
- (void)model:(id)arg1 didUpdateContentItemsAtIndexPath:(id)arg2;
- (void)_performBackGesture:(id)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithModel:(id)arg1 indexPath:(id)arg2;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCDBrowserViewController : UINavigationController <UITabBarControllerDelegate>
{
    _Bool _viewHasAppeared;
    _Bool _libraryHasSongs;
    UITabBarController *_tabBarController;
    UIButton *_nowPlayingButton;
    NSMapTable *_noContentViews;
    MPAVController *_player;
    id <MCDCarDisplayServiceProvider> _serviceProvider;
    UITabBarController *_hostTabBarController;
}

@property(nonatomic) __weak UITabBarController *hostTabBarController; // @synthesize hostTabBarController=_hostTabBarController;
@property(nonatomic) __weak id <MCDCarDisplayServiceProvider> serviceProvider; // @synthesize serviceProvider=_serviceProvider;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (void)_accountsDidChangeNotification:(id)arg1;
- (void)_reloadHostTabs;
- (void)_nowPlayingButtonTouchUpInside:(id)arg1;
- (void)music_pushNowPlayingViewControllerAnimated:(_Bool)arg1;
- (id)nowPlayingButton;
- (void)_updateNowPlayingVisibility;
- (_Bool)_isNowPlayingAvailable;
- (void)tabBarController:(id)arg1 didSelectViewController:(id)arg2;
- (void)_tabBarDidChangeViewControllers:(id)arg1;
- (void)_mediaLibraryDidChange:(id)arg1;
- (void)_itemChanged:(id)arg1;
- (void)refreshNavigationPath;
- (void)pushNowPlaying:(_Bool)arg1;
- (void)reloadWithTabs:(id)arg1 forceReload:(_Bool)arg2;
- (id)_createViewControllerForIdentifier:(id)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)dealloc;
- (id)initWithHostTabBarController:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCDButton : UIButton
{
    CALayer *_focusColorLayer;
    _Bool _showBezelInTouch;
    NSString *_labelTemplateString;
}

+ (id)buttonWithType:(long long)arg1;
@property(nonatomic) _Bool showBezelInTouch; // @synthesize showBezelInTouch=_showBezelInTouch;
@property(copy, nonatomic) NSString *labelTemplateString; // @synthesize labelTemplateString=_labelTemplateString;
- (void).cxx_destruct;
- (void)_updateButtonStyle;
- (void)layoutSubviews;
@property(nonatomic, getter=isSelected) _Bool selected;
- (void)willMoveToWindow:(id)arg1;
- (void)_focusStateDidChange;
- (_Bool)_isFocusableElement;

@end

@interface MCDCompilationsTableViewController : MCDSectionedTableViewController
{
}

- (id)viewControllerForRowAtIndexPath:(id)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;

@end

@interface MCDComposerCellConfiguration : MCDArtistCellConfiguration
{
}

+ (Class)musicProxyClass;

@end

@interface MCDComposersViewController : MCDArtistsViewController
{
}

+ (Class)musicProxyClass;

@end

@interface MCDErrorViewController : UIViewController
{
    UILabel *_titleLabel;
    UILabel *_messageLabel;
    UIButton *_okButton;
    NSString *_errorTitle;
    NSString *_errorMessage;
}

@property(retain, nonatomic) NSString *errorMessage; // @synthesize errorMessage=_errorMessage;
@property(retain, nonatomic) NSString *errorTitle; // @synthesize errorTitle=_errorTitle;
- (void).cxx_destruct;
- (void)okButtonTapped:(id)arg1;
- (void)updateMessageLabelText;
- (void)updateTitleLabelText;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)loadView;
- (void)dealloc;

@end

@interface MCDGeniusMixesViewController : MCD_OLD_TableViewController
{
    NSMutableDictionary *_geniusImages;
}

- (void).cxx_destruct;
- (id)_playlistAtIndexPath:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;

@end

@interface MCDGenreCellConfiguration : MCDCellConfiguration
{
}

+ (id)collectionPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDGenresViewController : MCDTableViewController
{
}

- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;

@end

@interface MCDMediaRemoteNowPlayingViewController : UIViewController <MPUNowPlayingDelegate, MCDNowPlayingViewControllerDataSource, MCDNowPlayingViewControllerDelegate>
{
    MPUNowPlayingController *_nowPlayingController;
    _Bool _isScrubbing;
    UIAlertController *_actionSheetAlertController;
    MCDNowPlayingViewController *_nowPlayingViewController;
    double _elapsedTime;
    struct {
        unsigned int play:1;
        unsigned int pause:1;
        unsigned int stop:1;
        unsigned int togglePlayPause:1;
        unsigned int nextTrack:1;
        unsigned int previousTrack:1;
        unsigned int toggleRecord:1;
        unsigned int fastForward:1;
        unsigned int rewind:1;
        unsigned int record:1;
        unsigned int changePlaybackRate:1;
        unsigned int likeTrack:1;
        unsigned int banTrack:1;
        unsigned int rateTrack:1;
        unsigned int bookmarkTrack:1;
        unsigned int fastForwardWithInterval:1;
        unsigned int rewindWithInterval:1;
    } __supportedCommandsFlags;
    NSDictionary *_supportedCommands;
    _Bool _observingMediaRemoteCommandChanges;
    NSDictionary *_nowPlayingInfo;
}

@property(retain, nonatomic) NSDictionary *nowPlayingInfo; // @synthesize nowPlayingInfo=_nowPlayingInfo;
- (void).cxx_destruct;
- (id)_skipIntervalButtonImageForInterval:(double)arg1;
- (unsigned int)_bestCommandForFastForwardPosition;
- (unsigned int)_bestCommandForRewindPosition;
- (void)_performActionForRightCommand;
- (void)_presentLikeBanActionSheet;
- (id)_titleForFeedbackCommand:(unsigned int)arg1;
- (_Bool)_trackIsLiked;
- (double)_skipBackwardInterval;
- (double)_skipForwardInterval;
- (struct _MRMediaRemoteCommandInfo *)_mediaCommandInfoForCommand:(unsigned int)arg1;
- (void)_stopObservingRemoteCommandChanges;
- (void)_startObservingRemoteCommandChanges;
- (void)_updateSupportedCommands;
- (void)_updateSupportedCommandsWithArray:(id)arg1;
- (void)_supportedControlsDidUpdate:(id)arg1;
- (_Bool)nowPlayingViewControllerIsPlaying:(id)arg1;
- (void)nowPlayingViewController:(id)arg1 didSendAction:(long long)arg2 state:(long long)arg3;
- (_Bool)nowPlayingViewController:(id)arg1 shouldDisplayButton:(long long)arg2 withImage:(out id *)arg3 tinted:(out _Bool *)arg4;
- (void)nowPlayingController:(id)arg1 nowPlayingApplicationDidChange:(id)arg2;
- (void)nowPlayingController:(id)arg1 elapsedTimeDidChange:(double)arg2;
- (void)nowPlayingController:(id)arg1 playbackStateDidChange:(_Bool)arg2;
- (void)nowPlayingController:(id)arg1 nowPlayingInfoDidChange:(id)arg2;
- (void)_updateAllContent;
- (void)_updatePlayControls;
- (double)playbackDurationForNowPlayingViewController:(id)arg1 withElapsedTime:(out double *)arg2;
- (_Bool)nowPlayingViewControllerIsShowingExplicitTrack:(id)arg1;
- (id)backgroundArtForNowPlayingController:(id)arg1;
- (id)albumTextForNowPlayingController:(id)arg1;
- (id)artistTextForNowPlayingController:(id)arg1;
- (id)titleForNowPlayingController:(id)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCDMusicNowPlayingViewController : UIViewController <AFContextProvider, MCDNowPlayingViewControllerDataSource, MCDNowPlayingViewControllerDelegate>
{
    id <MCDCarDisplayServiceProvider> _serviceProvider;
    MPAVController *_player;
    MCDNowPlayingViewController *_nowPlayingViewController;
    MPMediaQuery *_albumQuery;
    NSString *_nowPlayingTitle;
    NSString *_nowPlayingArtist;
    NSString *_nowPlayingAlbum;
    UIImage *_nowPlayingAlbumArt;
    MCDButton *_wishlistButton;
    UILabel *_rightTitleLabel;
    UIAlertController *_actionSheetAlertController;
    _Bool _isLive;
    _Bool _isExplicitTrack;
    int _viewMode;
    NSArray *_controlPages;
    unsigned long long _currentPageIndex;
}

@property(nonatomic) int viewMode; // @synthesize viewMode=_viewMode;
@property(nonatomic) unsigned long long currentPageIndex; // @synthesize currentPageIndex=_currentPageIndex;
@property(retain, nonatomic) NSArray *controlPages; // @synthesize controlPages=_controlPages;
- (void).cxx_destruct;
- (id)newPresentationNavigationController;
- (void)_presentNowPlayingInfo;
- (void)_setPlayerRepeatType:(unsigned long long)arg1;
- (void)updateTrackInformation;
- (void)_updatePlaymodesForRadio;
- (void)_updateWishlistString;
- (void)_wishlistPressed:(id)arg1;
- (void)_playerTick:(id)arg1;
- (void)_playbackContentsChanged:(id)arg1;
- (void)_itemStoreIDDidChangeNotification:(id)arg1;
- (void)_itemTitlesDidChangeNotification:(id)arg1;
- (void)_itemIsExplicitDidChangeNotification:(id)arg1;
- (void)_itemChanged:(id)arg1;
- (void)nowPlayingViewControllerCreate:(id)arg1;
- (void)nowPlayingViewControllerToggleRepeat:(id)arg1;
- (void)nowPlayingViewControllerToggleShuffle:(id)arg1;
- (_Bool)nowPlayingViewControllerCanCreate:(id)arg1;
- (_Bool)nowPlayingViewControllerCanRepeat:(id)arg1;
- (_Bool)nowPlayingViewControllerCanShuffle:(id)arg1;
- (void)nowPlayingViewController:(id)arg1 didSendAction:(long long)arg2 state:(long long)arg3;
- (_Bool)nowPlayingViewController:(id)arg1 shouldEnableButton:(long long)arg2;
- (_Bool)nowPlayingViewController:(id)arg1 shouldDisplayButton:(long long)arg2 withImage:(out id *)arg3 tinted:(out _Bool *)arg4;
- (_Bool)nowPlayingViewControllerShouldUseWishlist:(id)arg1;
- (id)repeatStringForNowPlayingViewController:(id)arg1;
- (unsigned long long)repeatTypeForNowPlayingViewController:(id)arg1;
- (id)shuffleStringForNowPlayingViewController:(id)arg1;
- (unsigned long long)shuffleTypeForNowPlayingViewController:(id)arg1;
- (_Bool)nowPlayingViewControllerIsPlaying:(id)arg1;
- (double)playbackDurationForNowPlayingViewController:(id)arg1 withElapsedTime:(out double *)arg2;
- (_Bool)nowPlayingViewControllerIsShowingExplicitTrack:(id)arg1;
- (id)backgroundArtForNowPlayingController:(id)arg1;
- (id)titleForNowPlayingController:(id)arg1;
- (id)artistTextForNowPlayingController:(id)arg1;
- (id)albumTextForNowPlayingController:(id)arg1;
- (id)getCurrentContext;
- (_Bool)allowContextProvider:(id)arg1;
- (void)_unregisterForNotifications;
- (void)_registerForNotifications;
- (void)setTitle:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithRadioStation:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;
- (id)initWithGeniusMixPlaylist:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;
- (id)initWithQueryToShuffle:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;
- (id)initWithQuery:(id)arg1 startingAtIndex:(unsigned long long)arg2 player:(id)arg3 serviceProvider:(id)arg4;
- (id)initWithPlayer:(id)arg1 serviceProvider:(id)arg2 startPlay:(_Bool)arg3;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCDNoContentView : UIView
{
}

- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MCDNowPlayingButton : UIButton
{
    CALayer *_leftBorder;
    CALayer *_focusColorLayer;
    _Bool _hidesLeftBorder;
}

+ (id)buttonWithHeight:(double)arg1;
@property(nonatomic) _Bool hidesLeftBorder; // @synthesize hidesLeftBorder=_hidesLeftBorder;
- (void).cxx_destruct;
- (void)_focusStateDidChange;
- (_Bool)_isFocusableElement;
- (void)layoutSubviews;
- (void)sizeToFit;

@end

@interface MCDNowPlayingNavigationController : UINavigationController
{
    UIViewController *_fakeViewController;
}

@property(readonly, nonatomic) UIViewController *previousViewController; // @synthesize previousViewController=_fakeViewController;
- (void).cxx_destruct;
- (_Bool)navigationBar:(id)arg1 shouldPopItem:(id)arg2;
- (id)initWithRootViewController:(id)arg1;

@end

@interface MCDNowPlayingView : UIView
{
    UIImageView *_explicitImageView;
    MPUGradientView *_gradientView;
    _Bool _explicitTrack;
    UILabel *_artistLabel;
    UILabel *_titleLabel;
    UILabel *_albumLabel;
    UIImageView *_artworkView;
    MCDProgressView *_progressView;
}

@property(nonatomic, getter=isExplicitTrack) _Bool explicitTrack; // @synthesize explicitTrack=_explicitTrack;
@property(readonly, nonatomic) MCDProgressView *progressView; // @synthesize progressView=_progressView;
@property(readonly, nonatomic) UIImageView *artworkView; // @synthesize artworkView=_artworkView;
@property(readonly, nonatomic) UILabel *albumLabel; // @synthesize albumLabel=_albumLabel;
@property(readonly, nonatomic) UILabel *titleLabel; // @synthesize titleLabel=_titleLabel;
@property(readonly, nonatomic) UILabel *artistLabel; // @synthesize artistLabel=_artistLabel;
- (void).cxx_destruct;
- (id)_addLabelWithFont:(id)arg1;
- (void)_layoutLabel:(id)arg1 baseLineFromTop:(double)arg2 inBounds:(struct CGRect)arg3;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MCDNowPlayingViewController : UIViewController
{
    _Bool _isScrubbing;
    long long _heldAction;
    UIViewController *_transportViewController;
    UIViewController *_playModeViewController;
    _Bool _highTouchMode;
    UIColor *_navbarColor;
    _Bool _navbarHidesShadow;
    _MCDNowPlayingHostView *_viewForSelectingAFirstResponderForKnobSupport;
    MCDTransportControlView *_transportControlView;
    id <MCDNowPlayingViewControllerDelegate> _delegate;
    id <MCDNowPlayingViewControllerDataSource> _dataSource;
    MCDNowPlayingView *_nowPlayingView;
    MCDPlayModeControlView *_playModeControlView;
    UITapGestureRecognizer *_knobPressRecognizer;
    UITapGestureRecognizer *_backPressRecognizer;
}

@property(readonly, nonatomic) UITapGestureRecognizer *backPressRecognizer; // @synthesize backPressRecognizer=_backPressRecognizer;
@property(readonly, nonatomic) UITapGestureRecognizer *knobPressRecognizer; // @synthesize knobPressRecognizer=_knobPressRecognizer;
@property(readonly, nonatomic) MCDPlayModeControlView *playModeControlView; // @synthesize playModeControlView=_playModeControlView;
@property(readonly, nonatomic) MCDNowPlayingView *nowPlayingView; // @synthesize nowPlayingView=_nowPlayingView;
@property(nonatomic) __weak id <MCDNowPlayingViewControllerDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property(nonatomic) __weak id <MCDNowPlayingViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) MCDTransportControlView *transportControlView; // @synthesize transportControlView=_transportControlView;
- (void).cxx_destruct;
- (void)_updateTransportControl:(id)arg1 withDefaultImage:(id)arg2 actionType:(long long)arg3;
- (void)_initializeTransportControls;
- (void)_geniusButtonTouchUp:(id)arg1;
- (void)_repeatButtonTouchUp:(id)arg1;
- (void)_shuffleButtonTouchUp:(id)arg1;
- (void)_fastForwardButtonTouchUp:(id)arg1;
- (void)_fastForwardButtonTouchDown:(id)arg1;
- (void)_leftButtonTouchUp:(id)arg1;
- (void)_leftButtonTouchDown:(id)arg1;
- (void)_sendHeldAction;
- (void)_respondToHeldAction;
- (void)_playPauseButtonTouchUp:(id)arg1;
- (void)_sendAction:(long long)arg1 withState:(long long)arg2;
- (void)attemptFirstResponderThing;
- (void)reloadData;
- (void)_updateShuffleStateWithType:(unsigned long long)arg1;
- (void)_updateRepeatStateWithType:(unsigned long long)arg1;
- (void)_updatePlayModesState;
- (void)updatePlayControls;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)loadView;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface MCDPlayModeControlView : UIView
{
    _Bool _creatingGenius;
    MCDButton *_repeatButton;
    MCDButton *_geniusButton;
    MCDButton *_shuffleButton;
}

@property(nonatomic) _Bool creatingGenius; // @synthesize creatingGenius=_creatingGenius;
@property(readonly, nonatomic) MCDButton *shuffleButton; // @synthesize shuffleButton=_shuffleButton;
@property(readonly, nonatomic) MCDButton *geniusButton; // @synthesize geniusButton=_geniusButton;
@property(readonly, nonatomic) MCDButton *repeatButton; // @synthesize repeatButton=_repeatButton;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MCDPlayableContentViewController : UIViewController
{
    UINavigationController *_navigationController;
    MCDBrowsableContentModel *_model;
    NSString *_bundleID;
}

@property(readonly, copy, nonatomic) NSString *bundleID; // @synthesize bundleID=_bundleID;
- (void).cxx_destruct;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)refreshNavigationStack;
- (void)_embedAppropriateViewController;
- (id)initWithBundleID:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface MCDPlaylistCellConfiguration : MCDCellConfiguration
{
}

+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDPlaylistsViewController : MCDTableViewController
{
}

- (id)sectionIndexTitlesForTableView:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;

@end

@interface MCDPodcastEpisodesTableViewController : MCD_OLD_TableViewController
{
    NSDateFormatter *_formatter;
}

- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (id)initWithQuery:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;

@end

@interface MCDPodcastsTableViewController : MCDSectionedTableViewController
{
}

- (id)viewControllerForRowAtIndexPath:(id)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;

@end

@interface MCDProgressView : UIView
{
    _Bool _progressActive;
    UILabel *_timeLabel;
    UILabel *_timeRemainingLabel;
    UIView *_progressView;
    UIView *_trackView;
    UIView *_indicatorView;
    float _progress;
    _Bool _isLive;
}

- (void).cxx_destruct;
- (void)setPlaybackTime:(double)arg1 duration:(double)arg2;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MCDRadioStationListViewController : MCD_OLD_TableViewController
{
    NSMutableDictionary *_stationArtworkRequests;
    NSArray *_stations;
}

@property(retain, nonatomic) NSArray *stations; // @synthesize stations=_stations;
- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)initWithQuery:(id)arg1 player:(id)arg2 serviceProvider:(id)arg3;

@end

@interface MCDRadioViewController : MCD_OLD_TableViewController <RURadioDataSourceDelegate>
{
    RURadioDataSource *_dataSource;
    NSArray *_featuredStations;
    NSArray *_myStations;
    NSString *_featuredStationNamesBrief;
}

- (void).cxx_destruct;
- (id)_stationFromIndexPath:(id)arg1;
- (void)_categorizeStations;
- (void)_radioDataSourceDidInvalidate:(id)arg1;
- (id)viewControllerForRowAtIndexPath:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)radioDataSourceDidInvalidate:(id)arg1;
- (void)dealloc;
- (id)initWithPlayer:(id)arg1 serviceProvider:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MCDRootController : NSObject
{
    UIWindow *_carDisplayWindow;
    MCDBrowserViewController *_browserViewController;
    MPAVController *_player;
    id <MCDCarDisplayServiceProvider> _serviceProvider;
}

@property(readonly, nonatomic) UIWindow *carDisplayWindow; // @synthesize carDisplayWindow=_carDisplayWindow;
@property(nonatomic) __weak id <MCDCarDisplayServiceProvider> serviceProvider; // @synthesize serviceProvider=_serviceProvider;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (void)showNowPlaying;
- (void)dealloc;
- (id)initWithScreen:(id)arg1 hostTabBarController:(id)arg2;

@end

@interface MCDShuffleActionCellConfiguration : MCDActionCellConfiguration
{
}

+ (void)performActionForCell:(id)arg1 withViewController:(id)arg2;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDSongCellConfiguration : MCDCellConfiguration
{
}

+ (id)mediaEntityPropertiesToFetch;
+ (void)configureCell:(id)arg1 withViewController:(id)arg2 entity:(id)arg3 atIndex:(unsigned long long)arg4 animated:(_Bool)arg5;

@end

@interface MCDSongsViewController : MCDTableViewController
{
}

+ (id)actionCellConfigurationClasses;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)shouldShowActionCellConfiguration:(Class)arg1;

@end

@interface MCDTableView : MusicTableView
{
    _Bool _shouldShowHeadersAndFooters;
}

@property(nonatomic) _Bool shouldShowHeadersAndFooters; // @synthesize shouldShowHeadersAndFooters=_shouldShowHeadersAndFooters;
- (void)_moveWithEvent:(id)arg1;
- (void)_selectAndScrollToIndexPath:(id)arg1;
- (void)selectRowAtIndexPath:(id)arg1 animated:(_Bool)arg2 scrollPosition:(long long)arg3;
- (_Bool)_shouldShowHeadersAndFooters;

@end

@interface MCDTransportControlView : UIView
{
    _Bool _progressActive;
    int _mode;
    UIButton *_leftButton;
    UIButton *_playPauseButton;
    UIButton *_fastForwardButton;
    UIImage *_pauseImage;
}

@property(retain, nonatomic) UIImage *pauseImage; // @synthesize pauseImage=_pauseImage;
@property(nonatomic) _Bool progressActive; // @synthesize progressActive=_progressActive;
@property(readonly, nonatomic) UIButton *fastForwardButton; // @synthesize fastForwardButton=_fastForwardButton;
@property(readonly, nonatomic) UIButton *playPauseButton; // @synthesize playPauseButton=_playPauseButton;
@property(readonly, nonatomic) UIButton *leftButton; // @synthesize leftButton=_leftButton;
@property(nonatomic) int mode; // @synthesize mode=_mode;
- (void).cxx_destruct;
@property(readonly, nonatomic) UIImage *defaultFastForwardButtonImage;
@property(readonly, nonatomic) UIImage *defaultLeftButtonImage;
- (void)_updateProgressActive;
- (void)_layoutSubviewsForLowTouch;
- (void)_layoutSubviewsForHiTouch;
- (void)_createSubviews;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MCDiTunesUEpisodesTableViewController : MCD_OLD_TableViewController
{
}

- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;

@end

@interface MCDiTunesUTableViewController : MCDSectionedTableViewController
{
}

- (id)viewControllerForRowAtIndexPath:(id)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;

@end

@interface MPMediaItem (CarDisplay)
- (id)albumImageWithFallbackForSize:(struct CGSize)arg1 doubleLineRow:(_Bool)arg2;
@property(readonly, nonatomic) NSString *artistWithFallback;
@property(readonly, nonatomic) NSString *albumArtistWithFallback;
@property(readonly, nonatomic) NSString *albumTitleWithFallback;
@property(readonly, nonatomic) NSString *titleWithFallback;
@end

@interface MPMediaItem (CarDisplayAdditions)
- (id)SAMPMediaItemRepresentation;
@end

@interface UIViewController (MusicCarDisplayAdditions)
+ (id)MCD_carDisplayIdentifierForIdentifier:(id)arg1;
+ (void)MCD_registerViewControllerIdentifiers;
@end

@interface _MCDAlbumTracksCell : UITableViewCell
{
    UILabel *_titleLabel;
    UILabel *_trackNumberLabel;
    UILabel *_durationLabel;
    double _maximumDurationWidth;
}

@property(nonatomic) double maximumDurationWidth; // @synthesize maximumDurationWidth=_maximumDurationWidth;
- (void).cxx_destruct;
@property(copy, nonatomic) NSString *durationText;
@property(copy, nonatomic) NSString *trackNumberText;
@property(copy, nonatomic) NSString *title;
- (void)layoutSubviews;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface _MCDBrowsableTableView : UITableView
{
}

- (void)_moveWithEvent:(id)arg1;

@end

@interface _MCDBrowsableTableViewCell : UITableViewCell
{
}

- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@interface _MCDNowPlayingHostView : UIView
{
    NSArray *_responderViews;
}

@property(retain, nonatomic) NSArray *responderViews; // @synthesize responderViews=_responderViews;
- (void).cxx_destruct;
- (void)didMoveToWindow;
- (void)attemptToMakeAFirstResponder;

@end

@interface _MCDTableViewCell : UITableViewCell
{
}

- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

