//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AudioChannelDescription {
    unsigned int _field1;
    unsigned int _field2;
    float _field3[3];
};

struct AudioChannelLayout {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct AudioChannelDescription _field4[1];
};

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioValueRange {
    double _field1;
    double _field2;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct SubtitleLayoutParameters {
    struct CGRect _field1;
    struct CGSize _field2;
    struct CGAffineTransform _field3;
    unsigned char _field4;
    double _field5;
    int _field6;
};

#pragma mark Typedef'd Structures

typedef struct {
    double left;
    double top;
    double right;
    double bottom;
} CDStruct_1edcc8d7;

typedef struct {
    float redGain;
    float greenGain;
    float blueGain;
} CDStruct_d6531dd4;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    int width;
    int height;
} CDStruct_79c71658;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long horizontalSpacing;
    long long verticalSpacing;
} CDStruct_43f4b5b8;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    CDStruct_e83c9415 source;
    CDStruct_e83c9415 target;
} CDStruct_82206317;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/AVFoundation.framework/AVFoundation
// UUID: 2943C952-2A89-35B0-87B9-535B47B45BB7
//
//                           Arch: x86_64
//                Current version: 2.0.0
//          Compatibility version: 1.0.0
//                 Source version: 887.21.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AVAssetResourceLoaderRequest <NSObject>
+ (SEL)_selectorForInformingDelegateOfCancellationByFig;
- (_Bool)_shouldInformDelegateOfFigCancellation;
- (void)_performCancellationByClient;
- (NSDictionary *)_requestDictionary;
- (AVWeakReference *)_weakReference;
@end

@protocol AVAssetWriterFigAssetWriterNotificationHandlerDelegate <NSObject>
- (void)didReceiveFigAssetWriterNotificationWithSuccess:(_Bool)arg1 error:(NSError *)arg2;
@end

@protocol AVAssetWriterFinishWritingHelperDelegate <NSObject>
- (_Bool)shouldHelperPrepareInputs;
- (void)finishWritingHelperDidFail:(AVWeakReference *)arg1;
- (void)finishWritingHelperDidCancelFinishWriting:(AVWeakReference *)arg1;
- (void)finishWritingHelper:(AVWeakReference *)arg1 didInitiateFinishWritingForFigAssetWriter:(struct OpaqueFigAssetWriter *)arg2;
@end

@protocol AVAssetWriterInputMediaDataRequesterDelegate <NSObject>
- (_Bool)mediaDataRequesterShouldRequestMediaData:(AVAssetWriterInputMediaDataRequester *)arg1;
@end

@protocol AVAsynchronousKeyValueLoading
- (void)loadValuesAsynchronouslyForKeys:(NSArray *)arg1 completionHandler:(void (^)(void))arg2;
- (long long)statusOfValueForKey:(NSString *)arg1 error:(id *)arg2;
@end

@protocol AVDecodedAudioSettingsForFig
- (NSDictionary *)audioOptions;
- (struct AudioChannelLayout *)copyAudioChannelLayoutForSourceFormatDescription:(struct opaqueCMFormatDescription *)arg1 audioChannelLayoutSize:(unsigned long long *)arg2;
- (void)getAudioStreamBasicDescription:(struct AudioStreamBasicDescription *)arg1 forAudioFileTypeID:(unsigned int)arg2 sourceFormatDescription:(struct opaqueCMFormatDescription *)arg3;
@end

@protocol AVDecodedVideoSettingsForFig
@property(readonly, nonatomic) NSDictionary *pixelBufferAttributes;
@end

@protocol AVDelegateStorage <NSObject>
- (void)getRetainedDelegate:(id *)arg1 retainedDelegateQueue:(id *)arg2;
@end

@protocol AVMediaDataRequesterConsumer <NSObject>
- (_Bool)isReadyForMoreMediaData;
@end

@protocol AVOutputSettingsAssistantBaseSettingsProvider <NSObject>
@property(readonly, nonatomic) NSDictionary *baseVideoSettings;
@property(readonly, nonatomic) NSDictionary *baseAudioSettings;
@end

@protocol AVOutputSettingsAssistantVideoEncoderCapabilities <NSObject>
- (_Bool)averageNonDroppableFrameIntervalIsSupportedByDefaultEncoderForVideoCodec:(NSString *)arg1;
@end

@protocol AVOutputSettingsAssistantVideoSettingsAdjuster <NSObject>
- (long long)averageBitRateForSourceDimensions:(struct CGSize)arg1 andTargetFrameRate:(float)arg2;
@end

@protocol AVOutputSettingsValidation
- (_Bool)validateVideoOutputSettings:(AVVideoOutputSettings *)arg1 reason:(id *)arg2;
- (_Bool)validateAudioOutputSettings:(AVAudioOutputSettings *)arg1 reason:(id *)arg2;
@end

@protocol AVPlayerItemLegibleOutputDependencyFactory <NSObject>
- (id <AVPlayerItemOutputHost>)playerItemOutputHostForPlayerItem:(AVPlayerItem *)arg1;
@end

@protocol AVQueuedSampleBufferRendering <NSObject>
@property(readonly, getter=isReadyForMoreMediaData) _Bool readyForMoreMediaData;
@property(readonly, retain) struct OpaqueCMTimebase *timebase;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
- (void)stopRequestingMediaData;
- (void)requestMediaDataWhenReadyOnQueue:(NSObject<OS_dispatch_queue> *)arg1 usingBlock:(void (^)(void))arg2;
- (void)flush;
- (void)enqueueSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
@end

@protocol AVQueuedSampleBufferRenderingInternal <NSObject>
- (_Bool)setRenderSynchronizer:(AVSampleBufferRenderSynchronizer *)arg1;
- (void)copyFigSampleBufferAudioRenderer:(struct OpaqueFigSampleBufferAudioRenderer **)arg1;
@end

@protocol AVReencodedAudioSettingsForFig
- (NSDictionary *)audioOptions;
- (struct AudioChannelLayout *)copyAudioChannelLayoutForSourceFormatDescription:(struct opaqueCMFormatDescription *)arg1 audioChannelLayoutSize:(unsigned long long *)arg2;
- (void)getAudioStreamBasicDescription:(struct AudioStreamBasicDescription *)arg1 forAudioFileTypeID:(unsigned int)arg2 sourceFormatDescription:(struct opaqueCMFormatDescription *)arg3;
@end

@protocol AVReencodedVideoSettingsForFig
@property(readonly, nonatomic) NSDictionary *videoCompressionProperties;
@property(readonly, nonatomic) NSDictionary *videoEncoderSpecification;
@property(readonly, nonatomic) unsigned int videoCodecType;
@end

@protocol AVVideoCompositing <NSObject>
@property(readonly, nonatomic) NSDictionary *requiredPixelBufferAttributesForRenderContext;
@property(readonly, nonatomic) NSDictionary *sourcePixelBufferAttributes;
- (void)startVideoCompositionRequest:(AVAsynchronousVideoCompositionRequest *)arg1;
- (void)renderContextChanged:(AVVideoCompositionRenderContext *)arg1;

@optional
- (void)cancelAllPendingVideoCompositionRequests;
@end

@protocol AVVideoCompositionInstruction <NSObject>
@property(readonly, nonatomic) int passthroughTrackID;
@property(readonly, nonatomic) NSArray *requiredSourceTrackIDs;
@property(readonly, nonatomic) _Bool containsTweening;
@property(readonly, nonatomic) _Bool enablePostProcessing;
@property(readonly, nonatomic) CDStruct_e83c9415 timeRange;
@end

@protocol MCProfileConnectionObserver <NSObject>

@optional
- (void)profileConnectionDidReceiveAppWhitelistChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveDefaultsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveProfileListChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceivePasscodePolicyChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceivePasscodeChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveRestrictionChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSURLAuthenticationChallengeSender <NSObject>
- (void)cancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg1;
- (void)continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg1;
- (void)useCredential:(NSURLCredential *)arg1 forAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;

@optional
- (void)rejectProtectionSpaceAndContinueWithChallenge:(NSURLAuthenticationChallenge *)arg1;
- (void)performDefaultHandlingForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg1;
@end

@interface AVMediaFileOutputSettingsValidator : NSObject <AVOutputSettingsValidation>
{
    AVMediaFileType *_fileType;
}

+ (id)mediaFileOutputSettingsValidatorForFileType:(id)arg1;
+ (void)initialize;
- (_Bool)validateVideoOutputSettings:(id)arg1 reason:(id *)arg2;
- (_Bool)validateAudioOutputSettings:(id)arg1 reason:(id *)arg2;
@property(readonly, nonatomic) AVMediaFileType *fileType;
- (void)dealloc;
- (id)initWithFileType:(id)arg1;
- (id)init;

@end

@interface AVAIFCOutputSettingsValidator : AVMediaFileOutputSettingsValidator
{
}

- (_Bool)validateAudioOutputSettings:(id)arg1 reason:(id *)arg2;
- (id)initWithFileType:(id)arg1;

@end

@interface AVAIFFOutputSettingsValidator : AVMediaFileOutputSettingsValidator
{
}

- (_Bool)validateAudioOutputSettings:(id)arg1 reason:(id *)arg2;
- (id)initWithFileType:(id)arg1;

@end

@interface AVOutputSettings : NSObject <NSCopying>
{
    NSDictionary *_outputSettingsDictionary;
}

+ (id)defaultOutputSettingsForMediaType:(id)arg1;
+ (id)_outputSettingsWithOutputSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)outputSettingsWithOutputSettingsDictionary:(id)arg1;
+ (unsigned long long)_validateOutputSettingsDictionary:(id)arg1 compatibilityDescription:(id *)arg2;
+ (unsigned long long)validateOutputSettingsDictionary:(id)arg1;
+ (id)eligibleOutputSettingsDictionaryKeys;
+ (id)registeredOutputSettingsClasses;
@property(readonly, nonatomic) NSDictionary *outputSettingsDictionary; // @synthesize outputSettingsDictionary=_outputSettingsDictionary;
- (_Bool)encoderIsAvailableOnCurrentSystemReturningError:(id *)arg1;
- (_Bool)validateUsingOutputSettingsValidator:(id)arg1 reason:(id *)arg2;
- (_Bool)canFullySpecifyOutputFormatReturningReason:(id *)arg1;
@property(readonly, nonatomic) _Bool willYieldCompressedSamples;
@property(readonly, nonatomic) NSSet *compatibleMediaTypes;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithOutputSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
- (id)init;

@end

@interface AVAudioOutputSettings : AVOutputSettings
{
}

+ (id)audioConverterPropertiesForAudioSettingsDictionary:(id)arg1;
+ (id)defaultAudioOutputSettings;
+ (id)_audioOutputSettingsWithAudioSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)audioOutputSettingsWithTrustedAudioSettingsDictionary:(id)arg1;
+ (id)audioOutputSettingsWithAudioSettingsDictionary:(id)arg1;
+ (id)_outputSettingsWithOutputSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)registeredOutputSettingsClasses;
- (_Bool)validateUsingOutputSettingsValidator:(id)arg1 reason:(id *)arg2;
@property(readonly, nonatomic) NSDictionary *audioSettingsDictionary;
- (id)compatibleMediaTypes;
- (id)initWithAudioSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;

@end

@interface AVAVAudioSettingsAudioOutputSettings : AVAudioOutputSettings <AVReencodedAudioSettingsForFig, AVDecodedAudioSettingsForFig>
{
}

+ (id)_audioOutputSettingsWithAudioSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)eligibleOutputSettingsDictionaryKeys;
- (id)audioOptions;
- (struct AudioChannelLayout *)copyAudioChannelLayoutForSourceFormatDescription:(struct opaqueCMFormatDescription *)arg1 audioChannelLayoutSize:(unsigned long long *)arg2;
- (void)getAudioStreamBasicDescription:(struct AudioStreamBasicDescription *)arg1 forAudioFileTypeID:(unsigned int)arg2 sourceFormatDescription:(struct opaqueCMFormatDescription *)arg3;
- (_Bool)canFullySpecifyOutputFormatReturningReason:(id *)arg1;
- (_Bool)encoderIsAvailableOnCurrentSystemReturningError:(id *)arg1;
- (_Bool)willYieldCompressedSamples;
- (id)initWithTrustedAVAudioSettingsDictionary:(id)arg1;
- (id)initWithAVAudioSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;

@end

@interface AVVideoOutputSettings : AVOutputSettings
{
}

+ (id)defaultVideoOutputSettings;
+ (id)_videoOutputSettingsWithVideoSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)videoOutputSettingsWithTrustedVideoSettingsDictionary:(id)arg1;
+ (id)videoOutputSettingsWithVideoSettingsDictionary:(id)arg1;
+ (id)_outputSettingsWithOutputSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)registeredOutputSettingsClasses;
+ (id)_validValuesForScalingMode;
- (_Bool)validateUsingOutputSettingsValidator:(id)arg1 reason:(id *)arg2;
@property(readonly, nonatomic) _Bool dimensionsAreBoundingBox;
@property(readonly, nonatomic) NSDictionary *videoCompositionProcessorProperties;
@property(readonly, nonatomic) NSDictionary *pixelTransferProperties;
@property(readonly, nonatomic) NSDictionary *videoScalingProperties;
@property(readonly, nonatomic) NSDictionary *cleanApertureDictionary;
@property(readonly, nonatomic) NSDictionary *pixelAspectRatioDictionary;
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int width;
@property(readonly, nonatomic) NSDictionary *videoSettingsDictionary;
- (id)compatibleMediaTypes;
- (id)initWithVideoSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;

@end

@interface AVAVVideoSettingsVideoOutputSettings : AVVideoOutputSettings <AVReencodedVideoSettingsForFig>
{
    NSDictionary *_adaptedVideoCompressionProperties;
    NSDictionary *_VTPixelAspectRatioDictionary;
    NSDictionary *_VTCleanApertureDictionary;
}

+ (_Bool)_validateVideoCompressionProperties:(id)arg1 againstSupportedPropertyDictionary:(id)arg2 forCodecType:(id)arg3 exceptionReason:(id *)arg4;
+ (id)_videoOutputSettingsWithVideoSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)eligibleOutputSettingsDictionaryKeys;
@property(readonly, nonatomic) NSDictionary *videoCompressionProperties;
@property(readonly, nonatomic) NSDictionary *videoEncoderSpecification;
@property(readonly, nonatomic) unsigned int videoCodecType;
- (id)cleanApertureDictionary;
- (id)pixelAspectRatioDictionary;
- (int)height;
- (int)width;
- (_Bool)canFullySpecifyOutputFormatReturningReason:(id *)arg1;
- (_Bool)encoderIsAvailableOnCurrentSystemReturningError:(id *)arg1;
- (_Bool)willYieldCompressedSamples;
- (void)dealloc;
- (id)initWithTrustedAVVideoSettingsDictionary:(id)arg1;
- (id)initWithAVVideoSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;

@end

@interface AVAsset : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
{
    AVAssetInternal *_asset;
}

+ (id)assetWithURL:(id)arg1 figPlaybackItem:(struct OpaqueFigPlaybackItem *)arg2 trackIDs:(id)arg3 dynamicBehavior:(_Bool)arg4;
+ (id)assetWithURL:(id)arg1;
+ (id)assetProxyWithPropertyList:(id)arg1;
- (_Bool)_hasResourceLoaderDelegate;
- (_Bool)containsMovieFragments;
- (_Bool)canContainMovieFragments;
- (_Bool)isCompatibleWithSavedPhotosAlbum;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)isPlayable;
- (_Bool)hasProtectedContent;
- (id)compatibleTrackForCompositionTrack:(id)arg1;
- (id)tracksWithMediaCharacteristics:(id)arg1;
- (id)tracksWithMediaCharacteristic:(id)arg1;
- (id)tracksWithMediaType:(id)arg1;
- (id)trackWithTrackID:(int)arg1;
- (void)_tracksDidChange;
- (id)tracks;
- (id)_ID3Metadata;
- (id)metadata;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)lyrics;
- (id)creationDate;
- (id)trackReferences;
- (id)mediaSelectionGroupForPropertyList:(id)arg1 mediaSelectionOption:(id *)arg2;
- (id)mediaSelectionGroupForMediaCharacteristic:(id)arg1;
- (id)availableMediaCharacteristicsWithMediaSelectionOptions;
- (id)mediaSelectionGroups;
- (id)alternateTrackGroups;
- (id)subtitleAlternatesTrackGroup;
- (id)audioAlternatesTrackGroup;
- (id)_firstTrackGroupWithMediaType:(id)arg1;
- (id)trackGroups;
- (unsigned long long)referenceRestrictions;
- (_Bool)providesPreciseDurationAndTiming;
- (int)naturalTimeScale;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) struct CGAffineTransform preferredTransform;
- (float)preferredSoundCheckVolumeNormalization;
@property(readonly, nonatomic) float preferredVolume;
@property(readonly, nonatomic) float preferredRate;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
- (_Bool)_isStreaming;
- (struct OpaqueFigMutableComposition *)_mutableComposition;
- (id)_absoluteURL;
- (Class)_classForTrackInspectors;
- (struct OpaqueFigPlaybackItem *)_playbackItem;
- (struct OpaqueFigFormatReader *)_formatReader;
- (struct OpaqueFigAsset *)_figAsset;
- (void)cancelLoading;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 keysForCollectionKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (long long)statusOfValueForKey:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)_comparisonToken;
- (id)_assetInspectorLoader;
- (id)_assetInspector;
- (id)_weakReference;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
@property(readonly, nonatomic) _Bool isProxy;
@property(readonly, nonatomic) id propertyListForProxy;
- (id)chapterMetadataGroupsBestMatchingPreferredLanguages:(id)arg1;
- (id)chapterMetadataGroupsWithTitleLocale:(id)arg1 containingItemsWithCommonKeys:(id)arg2;
- (id)_chapterMetadataGroupsWithFigChapterGroups:(id)arg1 titleLocale:(id)arg2 containingItemsWithCommonKeys:(id)arg3;
- (id)_chapterDataTypeForMediaSubType:(int)arg1;
- (unsigned long long)_addChapterMetadataItem:(id)arg1 timeRange:(CDStruct_e83c9415)arg2 toChapters:(id)arg3 fromIndex:(unsigned long long)arg4;
@property(readonly) NSArray *availableChapterLocales;
- (void)_loadChapterInfo;
- (int)unusedTrackID;
- (id)_exportURL;
- (_Bool)_containsAtLeastOnePlayableVideoTrack;
- (_Bool)_containsAtLeastOnePlayableAudioTrack;
- (id)_chapterTracks;

@end

@interface AVAssetCache : NSObject
{
    AVAssetCacheInternal *_priv;
}

+ (id)assetCacheWithURL:(id)arg1;
- (id)allKeys;
- (id)lastModifiedDateOfEntryForKey:(id)arg1;
- (long long)sizeOfEntryForKey:(id)arg1;
- (void)removeEntryForKey:(id)arg1;
@property(readonly, copy, nonatomic) NSURL *URL;
@property(readonly, nonatomic) long long currentSize;
@property(nonatomic) long long maxEntrySize;
@property(nonatomic) long long maxSize;
- (void)finalize;
- (void)dealloc;
- (id)initWithURL:(id)arg1;

@end

@interface AVAssetCacheInternal : NSObject
{
    NSURL *url;
}

@end

@interface AVAssetDownloadSession : NSObject
{
    AVAssetDownloadSessionInternal *_internal;
}

+ (id)assetDownloadSessionWithDownloadToken:(unsigned long long)arg1;
+ (id)assetDownloadSessionWithURL:(id)arg1 destinationURL:(id)arg2 options:(id)arg3;
@property(readonly, nonatomic) unsigned long long downloadToken;
@property(readonly, nonatomic) unsigned long long availableFileSize;
@property(readonly, nonatomic) unsigned long long fileSize;
@property(readonly, nonatomic) long long priority;
@property(readonly, nonatomic) NSURL *destinationURL;
@property(readonly, nonatomic) NSURL *URL;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
- (void)stop;
- (void)pause;
- (void)start;
- (void)finalize;
- (void)dealloc;
- (id)initWithDownloadToken:(unsigned long long)arg1;
- (id)initWithURL:(id)arg1 destinationURL:(id)arg2 options:(id)arg3;
- (id)init;
- (void)_removeFigPlaybackItemListeners;
- (void)_addFigPlaybackItemListeners;
- (id)_figPlaybackItemNotificationNames;
- (void)_removeFigAssetListeners;
- (void)_addFigAssetListeners;
- (id)_figAssetNotificationNames;
- (int)_readyForInspection;
- (int)_primeCache;
- (void)_primeCacheOnDispatchQueue;
- (id)_errorForFigNotificationPayload:(struct __CFDictionary *)arg1 key:(struct __CFString *)arg2;
- (void)_transitionToTerminalStatus:(long long)arg1 error:(id)arg2;
- (struct OpaqueFigPlaybackItem *)_playbackItem;
- (_Bool)_setFigAsset:(struct OpaqueFigAsset *)arg1;
- (struct OpaqueFigAsset *)_figAsset;
- (id)_weakReference;

@end

@interface AVAssetDownloadSessionInternal : NSObject
{
    AVWeakReference *weakReference;
    struct OpaqueFigPlayer *player;
    struct OpaqueFigPlaybackItem *playbackItem;
    struct OpaqueFigAsset *asset;
    NSObject<OS_dispatch_queue> *readWriteQueue;
    long long status;
    NSError *error;
    long long priority;
    NSURL *URL;
    NSURL *destinationURL;
    unsigned long long downloadToken;
    NSNumber *cachePrimingDownloadTokenNum;
}

@end

@interface AVAssetExportSession : NSObject
{
    AVAssetExportSessionInternal *_exportSession;
}

+ (id)keyPathsForValuesAffectingEstimatedOutputFileLength;
+ (long long)_getPassthroughExportPolicyForAssetTrack:(id)arg1 fileType:(id)arg2 asChapterTrack:(_Bool)arg3;
+ (long long)estimatedOutputFileLengthForPreset:(id)arg1 duration:(CDStruct_1b6d18a9)arg2 properties:(id)arg3;
+ (CDStruct_1b6d18a9)maximumDurationForPreset:(id)arg1 properties:(id)arg2;
+ (id)exportSessionWithAsset:(id)arg1 presetName:(id)arg2;
+ (void)determineCompatibilityOfExportPreset:(id)arg1 withAsset:(id)arg2 outputFileType:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
+ (_Bool)_canWriteMediaOfAsset:(id)arg1 toFileType:(id)arg2;
+ (id)exportPresetsCompatibleWithAsset:(id)arg1;
+ (id)allExportPresets;
+ (id)_videoCompressionPropertiesForVideoSetting:(id)arg1;
+ (_Bool)_disablePassthrough;
+ (long long)_estimatedOutputFileLengthForPreset:(id)arg1 duration:(CDStruct_1b6d18a9)arg2 properties:(id)arg3;
+ (CDStruct_1b6d18a9)_maximumDurationForPreset:(id)arg1 fileSizeBytesLimit:(long long)arg2 properties:(id)arg3;
+ (id)_figRemakerNotificationNames;
+ (id)_settingForPreset:(id)arg1;
+ (_Bool)_isExportPreset:(id)arg1 compatibleWithAsset:(id)arg2 outputFileType:(id)arg3;
+ (_Bool)_disableExportCompatibilityCheck;
+ (_Bool)_isNonPassthroughExportPreset:(id)arg1 compatibleWithAsset:(id)arg2 outputFileType:(id)arg3;
+ (_Bool)_isNonPassthroughExportPreset:(id)arg1 compatibleWithAssetContainingPlayableAudio:(_Bool)arg2 playableVideo:(_Bool)arg3 outputFileType:(id)arg4;
+ (_Bool)_isPassthroughExportPresetCompatibleWithAsset:(id)arg1 outputFileType:(id)arg2;
+ (_Bool)_failsAudioPassthroughRestrictions:(id)arg1 outputFileType:(id)arg2;
+ (_Bool)_isPassthroughExportSupportedForFormatDescription:(struct opaqueCMFormatDescription *)arg1 forFileType:(struct __CFString *)arg2 asChapterTrack:(_Bool)arg3;
+ (_Bool)_isPassthroughExportSupportedForAudioFormatDescription:(struct opaqueCMFormatDescription *)arg1 forFileType:(struct __CFString *)arg2 asChapterTrack:(_Bool)arg3 usingModifiedFormatDescription:(const struct opaqueCMFormatDescription **)arg4;
+ (id)_mediaTypesToFailPassthroughExport;
+ (id)_mediaTypesToStripOnPassthroughExport;
+ (id)_asynchronousDispatchQueue;
+ (id)_utTypesForAudioOnly;
+ (id)_utTypesForDefaultPassthroughPreset;
+ (id)_utTypesForTemporalMetadataPresets;
+ (id)_utTypesForPresets;
+ (id)_audioVideoPresets;
+ (id)_audioOnlyPresets;
@property(copy, nonatomic) NSURL *directoryForTemporaryFiles;
@property(nonatomic) _Bool canPerformMultiplePassesOverSourceMediaData;
@property(nonatomic) _Bool shouldOptimizeForNetworkUse;
@property(readonly, nonatomic) id <AVVideoCompositing> customVideoCompositor;
@property(copy, nonatomic) AVVideoComposition *videoComposition;
@property(copy, nonatomic) AVAudioMix *audioMix;
@property(copy, nonatomic) NSString *audioTimePitchAlgorithm;
@property(nonatomic) long long fileLengthLimit;
@property(retain, nonatomic) AVMetadataItemFilter *metadataItemFilter;
@property(copy, nonatomic) NSArray *metadata;
@property(readonly, nonatomic) long long estimatedOutputFileLength;
- (_Bool)_canPerformFastFrameRateConversionWithPreset:(id)arg1 usingRemaker:(struct OpaqueFigRemaker *)arg2;
- (id)videoFrameRateConversionAlgorithm;
- (void)setVideoFrameRateConversionAlgorithm:(id)arg1;
- (CDStruct_1b6d18a9)minVideoFrameDuration;
- (void)setMinVideoFrameDuration:(CDStruct_1b6d18a9)arg1;
@property(readonly, nonatomic) CDStruct_1b6d18a9 maxDuration;
@property(nonatomic) CDStruct_e83c9415 timeRange;
- (void)cancelExport;
- (void)_createRemakerAndBeginExport;
- (void)exportAsynchronouslyWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_validateOutputFileTypeForExport;
- (_Bool)_validateSettablePropertiesReturningError:(id *)arg1;
@property(readonly, nonatomic) float progress;
- (void)_updateProgress;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
@property(copy, nonatomic) NSURL *outputURL;
@property(copy, nonatomic) NSString *outputFileType;
- (void)determineCompatibleFileTypesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_determineCompatibleFileTypes;
@property(readonly, nonatomic) NSArray *supportedFileTypes;
@property(readonly, nonatomic) NSString *presetName;
@property(readonly, retain, nonatomic) AVAsset *asset;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 presetName:(id)arg2;
- (id)init;
- (id)_createFigRemaker:(struct OpaqueFigRemaker **)arg1;
- (id)_remakerOptionsForFileFormat:(id)arg1;
- (void)_createFormatWriterOptions:(id *)arg1 forFileFormat:(id)arg2;
- (id)_actualOutputFileType;
- (void)_transferTrackProperties:(struct OpaqueFigRemaker *)arg1 sourceTrackID:(int)arg2 destinationTrackID:(int)arg3;
- (id)_addTracksAndPropertiesToFigRemakerForPassthroughExport:(struct OpaqueFigRemaker *)arg1;
- (id)_addAudioPassthroughTrack:(id)arg1 asChapterTrack:(_Bool)arg2 toFigRemaker:(struct OpaqueFigRemaker *)arg3 returningTrackID:(int *)arg4;
- (id)_audioProcessingOptions;
- (_Bool)_isAudioMixdownRequired:(struct __CFString *)arg1 error:(id *)arg2;
- (_Bool)_canPassThroughVideo:(id)arg1 remaker:(struct OpaqueFigRemaker *)arg2 checkEnabled:(_Bool)arg3 checkAll:(_Bool)arg4 checkProtected:(_Bool)arg5;
- (_Bool)_canPassThroughTemporalMetadata;
- (id)_settingForFigRemaker;
- (id)_retrieveChannelSpecificAudioSettingForAudioTrack:(id)arg1 fromAudioSetting:(id)arg2;
- (_Bool)_canPassThroughAudio:(id)arg1 checkEnabled:(_Bool)arg2 checkProtected:(_Bool)arg3;
- (_Bool)_totalSizeOfTracksIsWithinFileLengthLimit:(id)arg1 forSetting:(id)arg2;
- (_Bool)_hasProtectedNonAudioVideoTracks;
- (long long)_getTrackCountOfType:(id)arg1 checkEnabled:(_Bool)arg2;
- (float)_getSourceVideoFrameRate;
- (struct CGSize)_getUntransformedSourceDimension;
- (struct CGSize)_getSourceDimension;
- (void)_addListeners;
- (void)_removeListeners;
- (void)_transitionToStatus:(long long)arg1 error:(id)arg2;
- (id)_actualPresetName;
- (void)_handleFigRemakerNotificationAsync:(id)arg1 payload:(id)arg2;
- (void)_handleFigRemakerNotification:(id)arg1 payload:(id)arg2;
- (id)_actualSettingForPreset:(id)arg1;
- (id)_actualSettingForPresetAppleM4VAppleTV:(id)arg1;
- (int)_averageBitRateForSourceAndPreset:(id)arg1 targetFrameRate:(float)arg2;

@end

@interface AVAssetExportSessionInternal : NSObject
{
    AVWeakReference *weakReference;
    NSObject<OS_dispatch_queue> *readWriteQueue;
    struct OpaqueFigRemaker *remaker;
    long long status;
    NSError *error;
    float progress;
    AVAsset *asset;
    AVAssetTrack *firstVideoTrack;
    NSString *preset;
    NSString *preset16x9;
    NSURL *outputURL;
    NSString *outputFileType;
    NSString *actualOutputFileType;
    NSString *audioTimePitchAlgorithm;
    AVAudioMix *audioMix;
    AVVideoComposition *videoComposition;
    void *figVideoCompositor;
    AVCustomVideoCompositorSession *customVideoCompositorSession;
    NSArray *metadata;
    AVMetadataItemFilter *metadataItemFilter;
    CDStruct_e83c9415 timeRange;
    CDStruct_1b6d18a9 minVideoFrameDuration;
    _Bool canUseFastFrameRateConversion;
    NSString *videoFrameRateConversionAlgorithm;
    _Bool waitingForFastFrameRateResponse;
    NSObject<OS_dispatch_semaphore> *canUseFastFrameRateConversionSemaphore;
    long long maxFileSize;
    CDUnknownBlockType handler;
    _Bool optimizeForNetworkUse;
    _Bool useMultiPass;
    NSURL *directoryForTemporaryFiles;
    _Bool outputFileCreatedByRemaker;
    long long compatibleFileTypesDispatchOncePredicate;
    NSArray *compatibleFileTypes;
    NSObject<OS_dispatch_queue> *remakerNotificationSerializationQueue;
}

@end

@interface AVAssetImageGenerator : NSObject
{
    AVAssetImageGeneratorInternal *_priv;
}

+ (id)assetImageGeneratorWithAsset:(id)arg1;
- (id)_NSErrorForError:(int)arg1;
- (struct CGImage *)_copyCGImageAtTime:(CDStruct_1b6d18a9)arg1 usingAssetReader:(id)arg2 error:(id *)arg3;
- (struct CGSize)_scaledSizeForRenderSize:(struct CGSize)arg1;
- (id)_requestWithRequestID:(id)arg1;
- (void)_serverDied;
- (void)_failedToGenerateCGImage:(id)arg1;
- (void)_didGenerateCGImage:(id)arg1;
- (id)_optionsDictionary;
@property(nonatomic) CDStruct_1b6d18a9 requestedTimeToleranceAfter;
@property(nonatomic) CDStruct_1b6d18a9 requestedTimeToleranceBefore;
@property(readonly, nonatomic) id <AVVideoCompositing> customVideoCompositor;
@property(copy, nonatomic) AVVideoComposition *videoComposition;
@property(copy, nonatomic) NSString *apertureMode;
@property(nonatomic) struct CGSize maximumSize;
@property(nonatomic) _Bool appliesPreferredTrackTransform;
- (void)cancelAllCGImageGeneration;
- (void)generateCGImagesAsynchronouslyForTimes:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (struct CGImage *)copyCGImageAtTime:(CDStruct_1b6d18a9)arg1 actualTime:(CDStruct_1b6d18a9 *)arg2 error:(id *)arg3;
- (id)_makeAutoreleasedAssetReader;
- (struct __CFDictionary *)_createPixelBufferAttributesWithSize:(struct CGSize)arg1;
- (_Bool)_ensureFigAssetImageGeneratorReturningError:(id *)arg1;
@property(readonly, nonatomic) AVAsset *asset;
- (void)finalize;
- (void)dealloc;
- (id)initWithAsset:(id)arg1;
- (id)init;

@end

@interface AVAssetImageGeneratorInternal : NSObject
{
    AVWeakReference *weakReference;
    struct OpaqueFigAssetImageGenerator *generator;
    AVAsset *asset;
    _Bool appliesPreferredTrackTransform;
    struct CGSize maximumSize;
    NSString *apertureMode;
    CDStruct_1b6d18a9 requestedTimeToleranceBefore;
    CDStruct_1b6d18a9 requestedTimeToleranceAfter;
    NSMutableArray *requests;
    NSObject<OS_dispatch_queue> *requestsQueue;
    int nextRequestID;
    AVVideoComposition *videoComposition;
    AVCustomVideoCompositorSession *customVideoCompositorSession;
    NSObject<OS_dispatch_queue> *imageRequestQueue;
    int cancelledRequestIDThreshold;
}

@end

@interface AVFigObjectInspector : NSObject
{
}

+ (void)initialize;
- (id)_dataForProperty:(struct __CFString *)arg1;
- (id)_nonNilDictionaryForProperty:(struct __CFString *)arg1;
- (id)_dictionaryForProperty:(struct __CFString *)arg1;
- (id)_nonNilArrayForProperty:(struct __CFString *)arg1;
- (id)_arrayForProperty:(struct __CFString *)arg1;
- (id)_stringForProperty:(struct __CFString *)arg1;
- (id)_tollFreeBridgedObjectForProperty:(struct __CFString *)arg1;
- (struct CGAffineTransform)_affineTransformForProperty:(struct __CFString *)arg1;
- (struct CGSize)_sizeForProperty:(struct __CFString *)arg1;
- (struct CGSize)_sizeForProperty:(struct __CFString *)arg1 defaultValue:(struct CGSize)arg2;
- (unsigned char)_booleanForProperty:(struct __CFString *)arg1;
- (long long)_longLongForProperty:(struct __CFString *)arg1;
- (int)_SInt32ForProperty:(struct __CFString *)arg1;
- (short)_SInt16ForProperty:(struct __CFString *)arg1;
- (float)_floatForProperty:(struct __CFString *)arg1;
- (float)_floatForProperty:(struct __CFString *)arg1 defaultValue:(float)arg2;
- (CDStruct_e83c9415)_timeRangeForProperty:(struct __CFString *)arg1;
- (CDStruct_1b6d18a9)_timeForProperty:(struct __CFString *)arg1;
- (CDStruct_1b6d18a9)_timeForProperty:(struct __CFString *)arg1 defaultValue:(CDStruct_1b6d18a9)arg2;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;

@end

@interface AVAssetInspector : AVFigObjectInspector <NSCopying>
{
}

@property(readonly, nonatomic) id propertyListForProxy;
@property(readonly, nonatomic) _Bool containsMovieFragments;
@property(readonly, nonatomic) _Bool canContainMovieFragments;
@property(readonly, nonatomic) NSData *SHA1Digest;
@property(readonly, nonatomic, getter=isCompatibleWithSavedPhotosAlbum) _Bool compatibleWithSavedPhotosAlbum;
@property(readonly, nonatomic, getter=isComposable) _Bool composable;
@property(readonly, nonatomic, getter=isReadable) _Bool readable;
@property(readonly, nonatomic, getter=isExportable) _Bool exportable;
@property(readonly, nonatomic, getter=isPlayable) _Bool playable;
- (_Bool)hasProtectedContent;
- (id)metadataForFormat:(id)arg1;
@property(readonly, nonatomic) NSArray *availableMetadataFormats;
@property(readonly, nonatomic) NSArray *commonMetadata;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) AVMetadataItem *creationDate;
@property(readonly, nonatomic) NSArray *mediaSelectionGroups;
@property(readonly, nonatomic) NSDictionary *trackReferences;
@property(readonly, nonatomic) NSArray *alternateTrackGroups;
@property(readonly, nonatomic) NSArray *trackIDs;
@property(readonly, nonatomic) long long trackCount;
@property(readonly, nonatomic) _Bool providesPreciseDurationAndTiming;
@property(readonly, nonatomic) int naturalTimeScale;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) struct CGAffineTransform preferredTransform;
@property(readonly, nonatomic) float preferredSoundCheckVolumeNormalization;
@property(readonly, nonatomic) float preferredVolume;
@property(readonly, nonatomic) float preferredRate;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface AVAssetInspectorLoader : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
{
    AVWeakReference *_weakReference;
}

+ (void)initialize;
- (id)_mapFigErrorCodeToNSError:(int)arg1;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 keysForCollectionKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_ensureAllDependenciesOfKeyAreLoaded:(id)arg1;
@property(readonly, nonatomic, getter=_isStreaming) _Bool streaming;
@property(readonly, nonatomic) _Bool hasProtectedContent;
@property(readonly, nonatomic) unsigned long long downloadToken;
@property(readonly, nonatomic) NSURL *resolvedURL;
@property(readonly, nonatomic) NSArray *figChapters;
@property(readonly, nonatomic) NSArray *figChapterGroupInfo;
@property(readonly, nonatomic, getter=isCompatibleWithSavedPhotosAlbum) _Bool compatibleWithSavedPhotosAlbum;
@property(readonly, nonatomic, getter=isComposable) _Bool composable;
@property(readonly, nonatomic, getter=isReadable) _Bool readable;
@property(readonly, nonatomic, getter=isExportable) _Bool exportable;
@property(readonly, nonatomic, getter=isPlayable) _Bool playable;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
@property(readonly, nonatomic, getter=_classForTrackInspectors) Class classForTrackInspectors;
@property(readonly, nonatomic, getter=_playbackItem) struct OpaqueFigPlaybackItem *playbackItem;
@property(readonly, nonatomic, getter=_figAsset) struct OpaqueFigAsset *figAsset;
@property(readonly, nonatomic, getter=_formatReader) struct OpaqueFigFormatReader *formatReader;
@property(readonly, nonatomic) NSURL *URL;
- (void)cancelLoading;
- (id)assetInspector;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
@property(readonly, nonatomic, getter=_weakReference) AVWeakReference *weakReference;
- (id)init;

@end

@interface AVAssetInternal : NSObject
{
    AVWeakReference *weakReference;
    long long loadChapterInfoOnce;
    NSArray *chapterGroupInfo;
    NSString *anchorChapterType;
    NSArray *availableChapterLocales;
}

@end

@interface AVAssetMakeReadyForInspectionLoader : AVAssetInspectorLoader
{
    AVAssetInspector *_assetInspector;
    struct OpaqueFigFormatReader *_formatReader;
    struct OpaqueFigSimpleMutex *_loadingMutex;
    NSMutableArray *_keysAwaitingCompletion;
    long long _status;
    int _basicInspectionFailureCode;
    NSURL *_URL;
}

- (id)URL;
- (_Bool)_isStreaming;
- (_Bool)hasProtectedContent;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)isPlayable;
- (id)figChapterGroupInfo;
- (id)lyrics;
- (CDStruct_1b6d18a9)duration;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)_loadValuesWhileMutexLockedForKeys:(id)arg1;
- (id)_dictionaryOfSpecialLoadingMethodsForKeys;
- (id)_loadValuesUsingDefaultLoadingMethodWhileMutexLockedForKeys:(id)arg1;
- (void)_setStatus:(long long)arg1 figErrorCode:(int)arg2;
- (_Bool)_updateStatusWhileMutexLocked:(long long)arg1 figErrorCode:(int)arg2;
- (long long)_status;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (id)_getAndPruneCompletionsWhileMutexLocked;
- (_Bool)_statusOfValuesIsTerminalWhileMutexLockedForKeys:(id)arg1;
- (long long)_statusOfValueWhileMutexLockedForKey:(id)arg1 error:(id *)arg2;
- (id)_dictionaryOfSpecialGettersForKeyValueStatus;
- (id)_statusOfValueForKeyThatIsAlwaysLoaded;
- (struct OpaqueFigPlaybackItem *)_playbackItem;
- (_Bool)_inspectionRequiresAFormatReader;
- (struct OpaqueFigFormatReader *)_copyFormatReaderFromFigObjectWithFigErrorCode:(int *)arg1;
- (_Bool)_providesAccurateTiming;
- (struct OpaqueFigSimpleMutex *)_loadingMutex;
- (struct OpaqueFigFormatReader *)_formatReader;
- (void)cancelLoading;
- (id)assetInspector;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithURL:(id)arg1;

@end

@interface AVMediaSelectionGroup : NSObject <NSCopying>
{
    AVMediaSelectionGroupInternal *_mediaSelectionGroup;
}

+ (id)mediaSelectionOptionsFromArray:(id)arg1 withoutMediaCharacteristics:(id)arg2;
+ (id)mediaSelectionOptionsFromArray:(id)arg1 withMediaCharacteristics:(id)arg2;
+ (id)mediaSelectionOptionsFromArray:(id)arg1 filteredAndSortedAccordingToPreferredLanguages:(id)arg2;
+ (id)mediaSelectionOptionsFromArray:(id)arg1 withLocale:(id)arg2;
+ (id)playableMediaSelectionOptionsFromArray:(id)arg1;
+ (id)mediaSelectionGroupWithAsset:(id)arg1 dictionary:(id)arg2;
- (id)mediaSelectionOptionWithPropertyList:(id)arg1;
- (id)_optionWithID:(id)arg1 displaysNonForcedSubtitles:(_Bool)arg2;
@property(readonly, nonatomic) AVMediaSelectionOption *defaultOption;
- (_Bool)_isStreamingGroup;
- (_Bool)_matchesGroupID:(id)arg1 mediaType:(id)arg2;
- (id)_groupMediaType;
- (id)_groupID;
- (id)dictionary;
@property(readonly, nonatomic) _Bool allowsEmptySelection;
@property(readonly, nonatomic) NSArray *options;
- (id)asset;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)_weakReference;
- (id)init;

@end

@interface AVAssetMediaSelectionGroup : AVMediaSelectionGroup
{
    AVAsset *_asset;
    NSDictionary *_dictionary;
    NSArray *_options;
    AVMediaSelectionOption *_defaultOption;
    _Bool _isStreamingGroup;
}

- (id)mediaSelectionOptionWithPropertyList:(id)arg1;
- (id)_optionWithID:(id)arg1 displaysNonForcedSubtitles:(_Bool)arg2;
- (id)_optionWithID:(id)arg1 identifier:(id)arg2 source:(id)arg3 displaysNonForcedSubtitles:(_Bool)arg4;
- (id)defaultOption;
- (_Bool)_isStreamingGroup;
- (id)dictionary;
- (id)asset;
- (id)options;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 dictionary:(id)arg2;
- (id)init;

@end

@interface AVAssetProxy : AVAsset
{
    AVAssetProxyInternal *_assetProxy;
}

+ (id)assetProxyWithPropertyList:(id)arg1;
+ (id)makePropertyListForMovieProxyHeader:(id)arg1 name:(id)arg2;
- (id)tracks;
- (Class)_classForTrackInspectors;
- (id)_assetInspector;
- (id)_assetInspectorLoader;
- (struct OpaqueFigPlaybackItem *)_playbackItem;
- (struct OpaqueFigFormatReader *)_formatReader;
- (struct OpaqueFigAsset *)_figAsset;
- (_Bool)isProxy;
- (void)finalize;
- (void)dealloc;
- (id)initWithPropertyList:(id)arg1;

@end

@interface AVAssetProxyInternal : NSObject
{
    AVAssetInspectorLoader *loader;
    NSArray *tracks;
    long long makeTracksArrayOnce;
}

@end

@interface AVAssetReader : NSObject
{
    AVAssetReaderInternal *_priv;
}

+ (id)_errorForOSStatus:(int)arg1;
+ (id)assetReaderWithAsset:(id)arg1 error:(id *)arg2;
+ (void)initialize;
@property(readonly, nonatomic, getter=_figAssetReader) struct OpaqueFigAssetReader *figAssetReader;
- (void)cancelReading;
- (_Bool)startReading;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)addOutput:(id)arg1;
- (_Bool)canAddOutput:(id)arg1;
- (_Bool)_canAddOutput:(id)arg1 exceptionReason:(id *)arg2;
@property(readonly, nonatomic) NSArray *outputs;
@property(nonatomic) CDStruct_e83c9415 timeRange;
@property(readonly) NSError *error;
- (void)_transitionToStatus:(long long)arg1 failureError:(id)arg2;
@property(readonly) long long status;
@property(readonly, retain, nonatomic) AVAsset *asset;
- (id)description;
- (void)_tearDownFigAssetReader;
- (void)finalize;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 error:(id *)arg2;
- (id)init;

@end

@interface AVAssetReaderOutput : NSObject
{
    AVAssetReaderOutputInternal *_internal;
}

+ (void)initialize;
- (void)_figAssetReaderFailed;
- (void)_figAssetReaderDecodeError;
- (void)markConfigurationAsFinal;
- (void)resetForReadingTimeRanges:(id)arg1;
- (void)_figAssetReaderSampleBufferDidBecomeAvailableForExtractionID:(int)arg1;
- (struct opaqueCMSampleBuffer *)copyNextSampleBuffer;
- (id)_errorForOSStatus:(int)arg1;
- (void)_cancelReading;
- (void)_markAsFinished;
- (_Bool)_isFinished;
- (id)currentTimeRanges;
- (_Bool)_enableTrackExtractionReturningError:(id *)arg1;
- (_Bool)_prepareForReadingReturningError:(id *)arg1;
- (_Bool)_updateTimeRangesOnFigAssetReaderReturningError:(id *)arg1;
@property(readonly, nonatomic, getter=_trimsSampleDurations) _Bool trimsSampleDurations;
@property(readonly, nonatomic, getter=_figAssetReaderExtractionOptions) NSDictionary *figAssetReaderExtractionOptions;
@property(nonatomic, getter=_extractionID, setter=_setExtractionID:) int extractionID;
- (long long)_status;
- (void)_attachToWeakReferenceToAssetReader:(id)arg1;
@property(readonly, nonatomic, getter=_weakReferenceToAssetReader) AVWeakReference *weakReferenceToAssetReader;
- (void)_setFigAssetReader:(struct OpaqueFigAssetReader *)arg1;
- (struct OpaqueFigAssetReader *)_figAssetReader;
- (id)_asset;
- (void)setSupportsRandomAccess:(_Bool)arg1;
- (_Bool)supportsRandomAccess;
@property(nonatomic) _Bool alwaysCopiesSampleData;
@property(readonly, nonatomic) NSString *mediaType;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVAssetReaderAudioMixOutput : AVAssetReaderOutput
{
    AVAssetReaderAudioMixOutputInternal *_audioMixOutputInternal;
}

+ (id)assetReaderAudioMixOutputWithAudioTracks:(id)arg1 audioSettings:(id)arg2;
- (_Bool)_enableTrackExtractionReturningError:(id *)arg1;
- (id)_asset;
- (id)mediaType;
@property(copy, nonatomic) NSString *audioTimePitchAlgorithm;
@property(copy, nonatomic) AVAudioMix *audioMix;
- (void)_setAudioTapProcessor:(struct opaqueMTAudioProcessingTap *)arg1 forTrack:(id)arg2;
- (struct opaqueMTAudioProcessingTap *)_audioTapProcessorForTrack:(id)arg1;
- (void)_setAudioTimePitchAlgorithm:(id)arg1 forTrack:(id)arg2;
- (id)_audioTimePitchAlgorithmForTrack:(id)arg1;
- (void)_setAudioVolumeCurve:(id)arg1 forTrack:(id)arg2;
- (id)_audioVolumeCurveForTrack:(id)arg1;
@property(readonly, nonatomic) NSDictionary *audioSettings;
@property(readonly, nonatomic) NSArray *audioTracks;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithAudioTracks:(id)arg1 audioSettings:(id)arg2;
- (id)init;

@end

@interface AVAssetReaderAudioMixOutputInternal : NSObject
{
    NSArray *audioTracks;
    AVAudioMix *audioMix;
    NSMutableDictionary *audioVolumeCurvesForTracks;
    NSMutableDictionary *audioTimePitchAlgorithmsForTracks;
    NSMutableDictionary *audioTapProcessorsForTracks;
    AVAudioOutputSettings *audioOutputSettings;
    NSString *audioTimePitchAlgorithm;
}

@end

@interface AVAssetReaderInternal : NSObject
{
    AVWeakReference *weakReference;
    AVWeakKeyValueObserverProxy *KVOProxy;
    AVAsset *asset;
    struct OpaqueFigAssetReader *figAssetReader;
    CDStruct_e83c9415 timeRange;
    NSMutableArray *outputs;
    long long status;
    NSError *error;
    NSObject<OS_dispatch_queue> *statusReadWriteQueue;
}

@end

@interface AVAssetReaderOutputInternal : NSObject
{
    AVWeakReference *weakReference;
    _Bool alwaysCopiesSampleData;
    _Bool supportsRandomAccess;
    NSArray *currentTimeRanges;
    AVWeakReference *weakReferenceToAssetReader;
    struct OpaqueFigAssetReader *figAssetReader;
    int extractionID;
    AVRunLoopCondition *sampleBufferAvailabilityCondition;
    _Bool currentConfigurationIsFinal;
    _Bool extractionCompleteForCurrentConfiguration;
    int finished;
}

@end

@interface AVAssetReaderOutputMetadataAdaptor : NSObject
{
    AVAssetReaderOutputMetadataAdaptorInternal *_internal;
}

+ (id)assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput:(id)arg1;
- (id)nextTimedMetadataGroup;
@property(readonly, nonatomic) AVAssetReaderTrackOutput *assetReaderTrackOutput;
- (void)finalize;
- (void)dealloc;
- (id)initWithAssetReaderTrackOutput:(id)arg1;
- (id)init;

@end

@interface AVAssetReaderOutputMetadataAdaptorInternal : NSObject
{
    AVAssetReaderTrackOutput *trackOutput;
}

@end

@interface AVAssetReaderSampleReferenceOutput : AVAssetReaderOutput
{
    AVAssetReaderSampleReferenceOutputInternal *_sampleReferenceOutputInternal;
}

+ (id)assetReaderSampleReferenceOutputWithTrack:(id)arg1;
- (_Bool)_enableTrackExtractionReturningError:(id *)arg1;
- (_Bool)_trimsSampleDurations;
- (id)_asset;
- (id)mediaType;
@property(readonly, nonatomic) AVAssetTrack *track;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithTrack:(id)arg1;
- (id)init;

@end

@interface AVAssetReaderSampleReferenceOutputInternal : NSObject
{
    AVAssetTrack *track;
}

@end

@interface AVAssetReaderTrackOutput : AVAssetReaderOutput
{
    AVAssetReaderTrackOutputInternal *_trackOutputInternal;
}

+ (id)assetReaderTrackOutputWithTrack:(id)arg1 outputSettings:(id)arg2;
- (_Bool)_enableTrackExtractionReturningError:(id *)arg1;
- (id)_figAssetReaderExtractionOptions;
- (_Bool)_trimsSampleDurations;
- (id)_asset;
- (struct opaqueCMSampleBuffer *)_copyNextSampleBufferForMetadataAdaptor;
- (struct opaqueCMSampleBuffer *)copyNextSampleBuffer;
- (id)mediaType;
@property(nonatomic) _Bool appliesPreferredTrackTransform;
@property(readonly, nonatomic, getter=_isAttachedToMetadataAdaptor) _Bool attachedToMetadataAdaptor;
- (void)_attachToMetadataAdaptor:(id)arg1;
@property(copy, nonatomic) NSString *audioTimePitchAlgorithm;
@property(readonly, nonatomic) NSDictionary *outputSettings;
@property(readonly, nonatomic) AVAssetTrack *track;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithTrack:(id)arg1 outputSettings:(id)arg2;
- (id)init;

@end

@interface AVAssetReaderTrackOutputInternal : NSObject
{
    AVAssetTrack *track;
    AVOutputSettings *outputSettings;
    NSString *audioTimePitchAlgorithm;
    _Bool appliesPreferredTrackTransform;
    _Bool isAttachedToMetadataAdaptor;
}

@end

@interface AVAssetReaderVideoCompositionOutput : AVAssetReaderOutput
{
    AVAssetReaderVideoCompositionOutputInternal *_videoCompositionOutputInternal;
}

+ (id)assetReaderVideoCompositionOutputWithVideoTracks:(id)arg1 videoSettings:(id)arg2;
- (_Bool)_enableTrackExtractionReturningError:(id *)arg1;
- (_Bool)_prepareForReadingReturningError:(id *)arg1;
- (id)_errorForOSStatus:(int)arg1;
- (id)_asset;
- (id)mediaType;
@property(readonly, nonatomic) id <AVVideoCompositing> customVideoCompositor;
@property(copy, nonatomic) AVVideoComposition *videoComposition;
- (void)_setVideoComposition:(id)arg1 customVideoCompositorSession:(id)arg2;
- (void)_setVideoComposition:(id)arg1;
@property(readonly, nonatomic) NSDictionary *videoSettings;
@property(readonly, nonatomic) NSArray *videoTracks;
- (id)description;
- (_Bool)alwaysCopiesSampleData;
- (void)finalize;
- (void)dealloc;
- (id)initWithVideoTracks:(id)arg1 videoSettings:(id)arg2;
- (id)init;

@end

@interface AVAssetReaderVideoCompositionOutputInternal : NSObject
{
    NSArray *videoTracks;
    AVVideoOutputSettings *videoOutputSettings;
    AVVideoComposition *videoComposition;
    void *figVideoCompositor;
    AVCustomVideoCompositorSession *customVideoCompositorSession;
}

@end

@interface AVAssetResourceLoader : NSObject <NSURLAuthenticationChallengeSender>
{
    AVAssetResourceLoaderInternal *_resourceLoader;
}

- (void)_noteFinishingOfRequest:(id)arg1;
- (void)_poseAuthenticationChallengeWithKey:(id)arg1 data:(id)arg2 requestDictionary:(id)arg3 fallbackHandler:(CDUnknownBlockType)arg4;
- (void)_issueLoadingRequestWithKey:(id)arg1 requestDictionary:(id)arg2 fallbackHandler:(CDUnknownBlockType)arg3;
- (void)_cancelRequestWithKey:(id)arg1 requestDictionary:(id)arg2 fallbackHandler:(CDUnknownBlockType)arg3;
- (void)_performDelegateSelector:(SEL)arg1 withObject:(id)arg2 representingNewRequest:(_Bool)arg3 key:(id)arg4 fallbackHandler:(CDUnknownBlockType)arg5;
- (void)_performDelegateCallbackSynchronouslyIfCurrentDelegateQueueIsQueue:(id)arg1 delegateCallbackBlock:(CDUnknownBlockType)arg2;
- (void)cancelLoading;
- (id)asset;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property(readonly, nonatomic) id <AVAssetResourceLoaderDelegate> delegate;
- (id)stateQueue;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setDelegate:(id)arg1;
- (id)_weakReference;
- (void)finalize;
- (void)dealloc;
- (id)initWithAsset:(id)arg1;
- (id)init;
- (void)performDefaultHandlingForAuthenticationChallenge:(id)arg1;
- (void)rejectProtectionSpaceAndContinueWithChallenge:(id)arg1;
- (void)continueWithoutCredentialForAuthenticationChallenge:(id)arg1;
- (void)cancelAuthenticationChallenge:(id)arg1;
- (void)_rejectChallenge:(id)arg1 withError:(id)arg2;
- (void)useCredential:(id)arg1 forAuthenticationChallenge:(id)arg2;
- (id)cachedContentInformationForURL:(id)arg1;
- (void)cacheContentInformation:(id)arg1 forURL:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetResourceLoaderInternal : NSObject
{
    AVWeakReference *weakReference;
    AVWeakReference *weakReferenceToAsset;
    NSObject<OS_dispatch_queue> *stateQueue;
    AVWeakReference *weakReferenceToDelegate;
    NSObject<OS_dispatch_queue> *delegateQueue;
    int loadingCancelled;
    NSMutableDictionary *pendingRequests;
    NSObject<OS_dispatch_queue> *contentInformationCachingQueue;
    NSMutableDictionary *contentInformationCache;
}

@end

@interface AVAssetResourceLoadingContentInformationRequest : NSObject
{
    AVAssetResourceLoadingContentInformationRequestInternal *_contentInformationRequest;
}

- (_Bool)isDiskCachingPermitted;
- (void)setDiskCachingPermitted:(_Bool)arg1;
@property(copy, nonatomic) NSDate *renewalDate;
@property(nonatomic, getter=isByteRangeAccessSupported) _Bool byteRangeAccessSupported;
@property(nonatomic) long long contentLength;
@property(copy, nonatomic) NSString *contentType;
- (id)propertyList;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithLoadingRequest:(id)arg1;
- (id)init;

@end

@interface AVAssetResourceLoadingContentInformationRequestInternal : NSObject
{
    NSString *contentType;
    long long contentLength;
    _Bool byteRangeAccessSupported;
    NSDate *renewalDate;
    _Bool diskCachingPermitted;
}

@end

@interface AVAssetResourceLoadingDataRequest : NSObject
{
    AVAssetResourceLoadingDataRequestInternal *_dataRequest;
}

- (void)respondWithData:(id)arg1;
- (id)_loadingRequest;
@property(readonly, nonatomic) long long currentOffset;
@property(readonly, nonatomic) long long requestedLength;
@property(readonly, nonatomic) long long requestedOffset;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithLoadingRequest:(id)arg1 requestedOffset:(long long)arg2 requestedLength:(long long)arg3 canSupplyIncrementalDataImmediately:(_Bool)arg4;
- (id)init;

@end

@interface AVAssetResourceLoadingDataRequestInternal : NSObject
{
    long long requestedOffset;
    long long requestedLength;
    long long currentOffset;
    NSObject<OS_dispatch_queue> *dataResponseQueue;
    _Bool canSupplyIncrementalDataImmediately;
    AVWeakReference *weakReferenceToLoadingRequest;
}

@end

@interface AVAssetResourceLoadingRequest : NSObject <AVAssetResourceLoaderRequest>
{
    AVAssetResourceLoadingRequestInternal *_loadingRequest;
}

+ (SEL)_selectorForInformingDelegateOfCancellationByFig;
- (void)_removeFigAssetImageGeneratorListeners;
- (void)_addFigAssetImageGeneratorListeners;
- (void)_removeFigPlaybackItemListeners;
- (void)_addFigPlaybackItemListeners;
- (void)generateStreamingContentKeyRequestDataAsynchronouslyForApp:(id)arg1 contentIdentifier:(id)arg2 options:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)streamingContentKeyRequestDataForApp:(id)arg1 contentIdentifier:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (void)finishLoadingWithResponse:(id)arg1 data:(id)arg2 redirect:(id)arg3;
- (void)finishLoadingWithError:(id)arg1;
- (void)finishLoading;
- (void)_sendDataIncrementally:(id)arg1 data:(id)arg2;
- (void)_sendDictionaryForURLRequest:(id)arg1 context:(id)arg2;
- (id)serializableRepresentation;
@property(copy, nonatomic) NSURLRequest *redirect;
- (void)_appendToCachedData:(id)arg1;
- (id)_getAndClearCachedData;
@property(copy, nonatomic) NSURLResponse *response;
@property(readonly, nonatomic) AVAssetResourceLoadingDataRequest *dataRequest;
- (void)_setDataRequest:(id)arg1;
@property(readonly, nonatomic) AVAssetResourceLoadingContentInformationRequest *contentInformationRequest;
- (void)_setContentInformationRequest:(id)arg1;
- (void)_performCancellationByClient;
- (_Bool)_shouldInformDelegateOfFigCancellation;
@property(readonly, nonatomic, getter=isCancelled) _Bool cancelled;
- (_Bool)_tryToMarkAsCancelled;
- (_Bool)finished;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
@property(readonly, nonatomic) NSURLRequest *request;
- (id)_requestDictionary;
- (id)_resourceLoader;
- (id)_weakReference;
@property(readonly, copy) NSString *description;
- (void)finalize;
- (void)dealloc;
- (id)initWithResourceLoader:(id)arg1 requestDictionary:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetResourceLoadingRequestInternal : NSObject
{
    AVWeakReference *weakReference;
    AVWeakReference *weakReferenceToResourceLoader;
    NSDictionary *requestDictionary;
    NSMutableURLRequest *URLRequest;
    NSURLResponse *response;
    NSURLRequest *redirect;
    NSObject<OS_dispatch_queue> *dataCachingQueue;
    NSMutableData *cachedData;
    NSDictionary *cachedContentInformation;
    AVAssetResourceLoadingContentInformationRequest *contentInformationRequest;
    AVAssetResourceLoadingDataRequest *dataRequest;
    int finished;
    int cancelled;
    int sentContentInfo;
    struct OpaqueFigPlaybackItem *figPlaybackItem;
    struct OpaqueFigAssetImageGenerator *figImageGenerator;
    CDUnknownBlockType streamingKeyRequestCompletionHandler;
}

@end

@interface AVAssetResourceRenewalRequest : AVAssetResourceLoadingRequest
{
}

@end

@interface AVAssetSynchronousInspectorLoader : AVAssetInspectorLoader
{
    AVAssetInspector *_assetInspector;
}

- (_Bool)isCompatibleWithSavedPhotosAlbum;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)isPlayable;
- (id)lyrics;
- (CDStruct_1b6d18a9)duration;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 keysForCollectionKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (id)assetInspector;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithAssetInspector:(id)arg1;

@end

@interface AVAssetTrack : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
{
    AVAssetTrackInternal *_track;
}

+ (id)keyPathsForValuesAffectingTimeRange;
+ (id)mediaTypesForMediaCharacteristics;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)associatedTracksOfType:(id)arg1;
- (id)availableTrackAssociationTypes;
- (_Bool)hasProtectedContent;
- (id)_trackReferences;
- (id)_pairedForcedOnlySubtitlesTrack;
- (id)_followingTrackAmongTracks:(id)arg1;
- (id)_fallbackTrack;
- (id)_firstAssociatedTrackWithAssociationType:(id)arg1;
- (_Bool)isExcludedFromAutoselectionInTrackGroup;
- (long long)alternateGroupID;
- (id)metadata;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (CDStruct_1b6d18a9)samplePresentationTimeForTrackTime:(CDStruct_1b6d18a9)arg1;
- (id)segmentForTrackTime:(CDStruct_1b6d18a9)arg1;
- (id)segments;
- (CDStruct_1b6d18a9)minFrameDuration;
- (float)nominalFrameRate;
- (id)loudnessInfo;
- (float)preferredVolume;
- (long long)layer;
- (struct CGAffineTransform)preferredTransform;
- (struct CGSize)dimensions;
- (struct CGSize)naturalSize;
- (id)locale;
- (id)extendedLanguageTag;
- (id)languageCode;
- (float)estimatedDataRate;
- (int)naturalTimeScale;
- (_Bool)requiresFrameReordering;
- (CDStruct_e83c9415)mediaDecodeTimeRange;
- (CDStruct_e83c9415)mediaPresentationTimeRange;
- (CDStruct_e83c9415)timeRange;
- (id)mediaCharacteristics;
- (_Bool)hasMediaCharacteristics:(id)arg1;
- (_Bool)hasMediaCharacteristic:(id)arg1;
- (_Bool)_subtitleFormatDescriptionMatchesTextDisplayFlags:(unsigned int)arg1 flagsMask:(unsigned int)arg2;
- (long long)totalSampleDataLength;
- (_Bool)isSelfContained;
- (_Bool)isEnabled;
- (int)playabilityValidationResult;
- (_Bool)isPlayable;
- (id)formatDescriptions;
- (id)mediaType;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (long long)statusOfValueForKey:(id)arg1;
@property(readonly, nonatomic) int trackID;
- (struct OpaqueFigAssetTrack *)_figAssetTrack;
- (struct OpaqueFigTrackReader *)_figTrackReader;
- (id)_assetTrackInspector;
@property(readonly, nonatomic) AVAsset *asset;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithAsset:(id)arg1 trackIndex:(long long)arg2;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2;
- (id)init;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;
- (_Bool)_firstFormatDescriptionIsLPCM;
- (_Bool)_hasMultipleDistinctFormatDescriptions;
- (_Bool)_hasEmptyEdits;
- (_Bool)_hasScaledEdits;
- (_Bool)_hasMultipleEdits;

@end

@interface AVAssetTrackEnumerator : NSEnumerator
{
    NSString *_mediaType;
    NSArray *_mediaCharacteristics;
    NSEnumerator *_enumerator;
}

+ (id)trackEnumeratorWithAsset:(id)arg1;
- (id)nextObject;
- (void)setMediaCharacteristics:(id)arg1;
- (void)setMediaType:(id)arg1;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 mediaCharacteristics:(id)arg2;
- (id)initWithAsset:(id)arg1 mediaType:(id)arg2;
- (id)initWithAsset:(id)arg1;

@end

@interface AVAssetTrackGroup : NSObject <NSCopying>
{
    AVAssetTrackGroupInternal *_assetTrackGroup;
}

- (id)_assetComparisonToken;
@property(readonly, nonatomic) NSArray *trackIDs;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)initWithAsset:(id)arg1 trackIDs:(id)arg2;

@end

@interface AVAssetTrackGroupInternal : NSObject
{
    id assetComparisonToken;
    NSArray *trackIDs;
}

@end

@interface AVAssetTrackInspector : AVFigObjectInspector <AVAsynchronousKeyValueLoading>
{
    AVWeakReference *_weakReference;
    long long _synthesizeMediaCharacteristicsOnce;
    NSArray *_cachedMediaCharacteristics;
}

+ (id)assetTrackInspectorWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;
@property(readonly, nonatomic) _Bool hasProtectedContent;
@property(readonly, nonatomic, getter=_trackReferences) NSDictionary *trackReferences;
@property(readonly, nonatomic, getter=isExcludedFromAutoselectionInTrackGroup) _Bool excludedFromAutoselectionInTrackGroup;
@property(readonly, nonatomic) long long alternateGroupID;
- (id)metadataForFormat:(id)arg1;
@property(readonly, nonatomic) NSArray *availableMetadataFormats;
@property(readonly, nonatomic) NSArray *commonMetadata;
- (CDStruct_1b6d18a9)samplePresentationTimeForTrackTime:(CDStruct_1b6d18a9)arg1;
- (id)segmentForTrackTime:(CDStruct_1b6d18a9)arg1;
@property(readonly, copy, nonatomic) NSArray *segments;
@property(readonly, nonatomic) CDStruct_1b6d18a9 minSampleDuration;
@property(readonly, nonatomic) float nominalFrameRate;
@property(readonly, nonatomic) NSDictionary *loudnessInfo;
@property(readonly, nonatomic) float preferredVolume;
@property(readonly, nonatomic) long long layer;
@property(readonly, nonatomic) struct CGAffineTransform preferredTransform;
@property(readonly, nonatomic) struct CGSize dimensions;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) NSLocale *locale;
@property(readonly, nonatomic) NSString *extendedLanguageTag;
@property(readonly, nonatomic) NSArray *mediaCharacteristics;
@property(readonly, nonatomic) NSString *languageCode;
@property(readonly, nonatomic) float estimatedDataRate;
@property(readonly, nonatomic) int naturalTimeScale;
@property(readonly, nonatomic) _Bool requiresFrameReordering;
@property(readonly, nonatomic) CDStruct_e83c9415 mediaDecodeTimeRange;
@property(readonly, nonatomic) CDStruct_e83c9415 mediaPresentationTimeRange;
@property(readonly, nonatomic) CDStruct_e83c9415 timeRange;
@property(readonly, nonatomic) long long totalSampleDataLength;
@property(readonly, nonatomic, getter=isSelfContained) _Bool selfContained;
@property(readonly, nonatomic, getter=isEnabled) _Bool enabled;
@property(readonly, nonatomic) int playabilityValidationResult;
@property(readonly, nonatomic, getter=isPlayable) _Bool playable;
@property(readonly, nonatomic) NSArray *formatDescriptions;
@property(readonly, nonatomic) NSString *mediaType;
@property(readonly, nonatomic, getter=_figAssetTrack) struct OpaqueFigAssetTrack *figAssetTrack;
@property(readonly, nonatomic, getter=_figTrackReader) struct OpaqueFigTrackReader *figTrackReader;
@property(readonly, nonatomic, getter=_figMediaType) unsigned int figMediaType;
@property(readonly, nonatomic) int trackID;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)_weakReference;
- (id)init;
- (id)_initWithAsset:(id)arg1 trackIndex:(long long)arg2;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

@end

@interface AVAssetTrackInternal : NSObject
{
    AVAssetTrackInspector *trackInspector;
    AVWeakReference *assetWeakReference;
}

@end

@interface AVAssetTrackSegment : NSObject
{
    CDStruct_82206317 _timeMapping;
}

@property(readonly, nonatomic) CDStruct_82206317 timeMapping; // @synthesize timeMapping=_timeMapping;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic, getter=isEmpty) _Bool empty;
- (id)_initWithTimeMapping:(CDStruct_82206317)arg1;

@end

@interface AVAssetWriter : NSObject
{
    AVAssetWriterInternal *_internal;
}

+ (id)_errorForOSStatus:(int)arg1;
+ (id)keyPathsForValuesAffectingError;
+ (id)keyPathsForValuesAffectingStatus;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)assetWriterWithURL:(id)arg1 fileType:(id)arg2 error:(id *)arg3;
+ (void)initialize;
- (void)_transitionToFailedStatusWithError:(id)arg1;
- (void)finishWritingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)finishWriting;
- (void)cancelWriting;
- (void)endSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (void)startSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (_Bool)startWriting;
@property(copy, nonatomic) NSArray *metadata;
- (void)addInputGroup:(id)arg1;
- (_Bool)canAddInputGroup:(id)arg1;
- (void)addInput:(id)arg1;
- (_Bool)canAddInput:(id)arg1;
- (_Bool)canApplyOutputSettings:(id)arg1 forMediaType:(id)arg2;
- (id)inputGroups;
@property(readonly, nonatomic) NSArray *inputs;
- (void)setPreferredRate:(float)arg1;
- (float)preferredRate;
- (void)setPreferredVolume:(float)arg1;
- (float)preferredVolume;
- (void)setPreferredTransform:(struct CGAffineTransform)arg1;
- (struct CGAffineTransform)preferredTransform;
- (void)setMovieTimeScale:(int)arg1;
- (int)movieTimeScale;
@property(copy, nonatomic) NSURL *directoryForTemporaryFiles;
@property(nonatomic) _Bool shouldOptimizeForNetworkUse;
- (void)setMovieFragmentInterval:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)movieFragmentInterval;
@property(readonly) NSError *error;
@property(readonly) long long status;
- (_Bool)_supportsSampleReferencesReturningError:(id *)arg1;
@property(readonly, nonatomic) NSArray *availableMediaTypes;
@property(readonly, copy, nonatomic) NSString *outputFileType;
@property(readonly, copy, nonatomic) NSURL *outputURL;
- (_Bool)_setHelper:(id)arg1 ifCurrentHelper:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
- (_Bool)_setHelper:(id)arg1 ifCurrentHelper:(id)arg2;
@property(readonly, retain, getter=_helper) AVAssetWriterHelper *helper;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithURL:(id)arg1 fileType:(id)arg2 error:(id *)arg3;
- (id)init;

@end

@interface AVAssetWriterAsynchronousFinishWritingDelegate : NSObject <AVAssetWriterFigAssetWriterNotificationHandlerDelegate, AVAssetWriterFinishWritingHelperDelegate>
{
    CDUnknownBlockType _handler;
    int _handlerCalled;
    AVAssetWriterFigAssetWriterNotificationHandler *_notificationHandler;
    AVWeakReference *_weakReferenceToHelper;
    AVWeakReference *_weakReferenceToSelf;
}

- (_Bool)shouldHelperPrepareInputs;
- (void)_callHandlerIfNotCalled;
- (void)finishWritingHelperDidFail:(id)arg1;
- (void)finishWritingHelperDidCancelFinishWriting:(id)arg1;
- (void)finishWritingHelper:(id)arg1 didInitiateFinishWritingForFigAssetWriter:(struct OpaqueFigAssetWriter *)arg2;
- (void)didReceiveFigAssetWriterNotificationWithSuccess:(_Bool)arg1 error:(id)arg2;
- (void)dealloc;
- (id)initWithHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetWriterHelper : NSObject
{
    AVAssetWriterConfigurationState *_configurationState;
    AVWeakReference *_weakReferenceToAssetWriter;
}

@property(retain) AVWeakReference *weakReferenceToAssetWriter; // @synthesize weakReferenceToAssetWriter=_weakReferenceToAssetWriter;
@property(readonly, nonatomic) AVAssetWriterConfigurationState *configurationState; // @synthesize configurationState=_configurationState;
- (void)transitionToFailedStatusWithError:(id)arg1;
- (_Bool)_transitionToClientInitiatedTerminalStatus:(long long)arg1;
- (void)finishWritingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finishWriting;
- (void)cancelWriting;
- (void)endSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (void)startSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (void)startWriting;
- (void)addInputGroup:(id)arg1;
- (_Bool)canAddInputGroup:(id)arg1;
- (void)addInput:(id)arg1;
- (_Bool)canAddInput:(id)arg1;
- (_Bool)_canApplyTrackReferences:(id)arg1 exceptionReason:(id *)arg2;
- (_Bool)canApplyOutputSettings:(id)arg1 forMediaType:(id)arg2;
- (_Bool)_canApplyOutputSettings:(id)arg1 forMediaType:(id)arg2 sourceFormat:(struct opaqueCMFormatDescription *)arg3 exceptionReason:(id *)arg4;
@property(readonly, nonatomic) NSArray *inputGroups;
@property(readonly, nonatomic) NSArray *inputs;
@property(nonatomic) float preferredRate;
@property(nonatomic) float preferredVolume;
@property(nonatomic) struct CGAffineTransform preferredTransform;
@property(copy, nonatomic) NSArray *metadata;
@property(nonatomic) int movieTimeScale;
@property(copy, nonatomic) NSURL *directoryForTemporaryFiles;
@property(nonatomic) _Bool shouldOptimizeForNetworkUse;
@property(nonatomic) CDStruct_1b6d18a9 movieFragmentInterval;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
@property(readonly, nonatomic) NSArray *availableMediaTypes;
@property(readonly, nonatomic) AVMediaFileType *mediaFileType;
@property(readonly, nonatomic) NSURL *outputURL;
- (void)dealloc;
- (id)initWithConfigurationState:(id)arg1;
- (id)init;

@end

@interface AVAssetWriterTerminalHelper : AVAssetWriterHelper
{
}

- (void)transitionToFailedStatusWithError:(id)arg1;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterClientInitiatedTerminalHelper : AVAssetWriterTerminalHelper
{
    long long _terminalStatus;
}

- (long long)status;
- (id)initWithConfigurationState:(id)arg1 terminalStatus:(long long)arg2;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterConfigurationState : NSObject
{
    NSURL *_URL;
    AVMediaFileType *_mediaFileType;
    CDStruct_1b6d18a9 _movieFragmentInterval;
    _Bool _shouldOptimizeForNetworkUse;
    NSURL *_directoryForTemporaryFiles;
    NSArray *_metadataItems;
    int _movieTimeScale;
    struct CGAffineTransform _preferredTransform;
    float _preferredVolume;
    float _preferredRate;
    NSArray *_inputs;
    NSArray *_inputGroups;
}

@property(copy, nonatomic) NSArray *inputGroups; // @synthesize inputGroups=_inputGroups;
@property(copy, nonatomic) NSArray *inputs; // @synthesize inputs=_inputs;
@property(nonatomic) float preferredRate; // @synthesize preferredRate=_preferredRate;
@property(nonatomic) float preferredVolume; // @synthesize preferredVolume=_preferredVolume;
@property(nonatomic) struct CGAffineTransform preferredTransform; // @synthesize preferredTransform=_preferredTransform;
@property(nonatomic) int movieTimeScale; // @synthesize movieTimeScale=_movieTimeScale;
@property(copy, nonatomic) NSArray *metadataItems; // @synthesize metadataItems=_metadataItems;
@property(copy, nonatomic) NSURL *directoryForTemporaryFiles; // @synthesize directoryForTemporaryFiles=_directoryForTemporaryFiles;
@property(nonatomic) _Bool shouldOptimizeForNetworkUse; // @synthesize shouldOptimizeForNetworkUse=_shouldOptimizeForNetworkUse;
@property(nonatomic) CDStruct_1b6d18a9 movieFragmentInterval; // @synthesize movieFragmentInterval=_movieFragmentInterval;
@property(copy, nonatomic) AVMediaFileType *mediaFileType; // @synthesize mediaFileType=_mediaFileType;
@property(copy, nonatomic) NSURL *URL; // @synthesize URL=_URL;
- (void)dealloc;

@end

@interface AVAssetWriterDoNothingFinishWritingDelegate : NSObject <AVAssetWriterFinishWritingHelperDelegate>
{
    CDUnknownBlockType _handler;
    int _handlerCalled;
}

- (_Bool)shouldHelperPrepareInputs;
- (void)_callHandlerIfNotCalled;
- (void)finishWritingHelperDidFail:(id)arg1;
- (void)finishWritingHelperDidCancelFinishWriting:(id)arg1;
- (void)finishWritingHelper:(id)arg1 didInitiateFinishWritingForFigAssetWriter:(struct OpaqueFigAssetWriter *)arg2;
- (void)dealloc;
- (id)initWithHandler:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetWriterFailedTerminalHelper : AVAssetWriterTerminalHelper
{
    NSError *_terminalError;
}

- (void)finishWritingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finishWriting;
- (void)endSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (void)startSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (id)error;
- (long long)status;
- (void)dealloc;
- (id)initWithConfigurationState:(id)arg1 terminalError:(id)arg2;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterFigAssetWriterNotificationHandler : NSObject
{
    struct OpaqueFigAssetWriter *_figAssetWriter;
    int _didNotCallDelegate;
    AVWeakReference *_weakReferenceToSelf;
    AVWeakReference *_weakReferenceToDelegate;
    int _notificationHandlersAreRegistered;
}

@property(retain) AVWeakReference *weakReferenceToDelegate; // @synthesize weakReferenceToDelegate=_weakReferenceToDelegate;
- (void)_handleFailedNotificationWithError:(id)arg1;
- (void)_handleCompletedWritingNotification;
- (void)_teardownNotificationHandlers;
- (void)_callDelegateIfNotCalledWithSuccess:(_Bool)arg1 error:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)initWithFigAssetWriter:(struct OpaqueFigAssetWriter *)arg1 weakReferenceToDelegate:(id)arg2;

@end

@interface AVAssetWriterFinishWritingHelper : AVAssetWriterHelper
{
    id <AVAssetWriterFinishWritingHelperDelegate> _delegate;
    struct OpaqueFigAssetWriter *_figAssetWriter;
    NSObject<OS_dispatch_queue> *_figAssetWriterAccessQueue;
    AVWeakReference *_weakReferenceToSelf;
}

- (struct OpaqueFigAssetWriter *)_retainedFigAssetWriter;
- (long long)status;
- (void)cancelWriting;
- (void)finishOperationCompletedSuccessfully:(_Bool)arg1 withError:(id)arg2;
- (void)performFinishOperation;
- (void)finalize;
- (void)dealloc;
- (id)initWithConfigurationState:(id)arg1 figAssetWriter:(struct OpaqueFigAssetWriter *)arg2 delegate:(id)arg3;

@end

@interface AVAssetWriterInput : NSObject
{
    AVAssetWriterInputInternal *_internal;
}

+ (id)keyPathsForValuesAffectingCurrentPassDescription;
+ (id)keyPathsForValuesAffectingCanPerformMultiplePasses;
+ (id)keyPathsForValuesAffectingReadyForMoreMediaData;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)assetWriterInputWithMediaType:(id)arg1 outputSettings:(id)arg2 sourceFormatHint:(struct opaqueCMFormatDescription *)arg3;
+ (id)assetWriterInputWithMediaType:(id)arg1 outputSettings:(id)arg2;
+ (void)initialize;
- (id)associatedInputsWithTrackAssociationType:(id)arg1;
- (id)availableTrackAssociationTypes;
- (void)addTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (_Bool)canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (void)markCurrentPassAsFinished;
- (void)markAsFinished;
@property(readonly) long long numberOfAppendFailures;
- (_Bool)_appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)appendSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)respondToEachPassDescriptionOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)currentPassDescription;
- (_Bool)canPerformMultiplePasses;
- (void)setPerformsMultiPassEncodingIfSupported:(_Bool)arg1;
- (_Bool)performsMultiPassEncodingIfSupported;
@property(nonatomic) _Bool expectsMediaDataInRealTime;
@property(readonly, nonatomic, getter=isReadyForMoreMediaData) _Bool readyForMoreMediaData;
- (void)_transitionToTerminalStatus:(long long)arg1;
- (_Bool)_prepareToFinishWritingReturningError:(id *)arg1;
- (void)_prepareToEndSession;
- (void)_didStartInitialSession;
- (_Bool)_prepareForWritingWithFigAssetWriter:(struct OpaqueFigAssetWriter *)arg1 mediaFileType:(id)arg2 error:(id *)arg3;
@property(readonly, nonatomic, getter=_isAttachedToMetadataAdaptor) _Bool attachedToMetadataAdaptor;
- (void)_attachToMetadataAdaptor:(id)arg1;
@property(nonatomic, getter=_isAttachedToPixelBufferAdaptor, setter=_setAttachedToPixelBufferAdaptor:) _Bool attachedToPixelBufferAdaptor;
@property(copy, nonatomic, getter=_sourcePixelBufferAttributes, setter=_setSourcePixelBufferAttributes:) NSDictionary *sourcePixelBufferAttributes;
@property(readonly, nonatomic, getter=_pixelBufferPool) struct __CVPixelBufferPool *pixelBufferPool;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (id)sampleReferenceBaseURL;
- (void)setPreferredMediaChunkSize:(long long)arg1;
- (long long)preferredMediaChunkSize;
- (void)setPreferredMediaChunkAlignment:(long long)arg1;
- (long long)preferredMediaChunkAlignment;
- (void)setPreferredMediaChunkDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)preferredMediaChunkDuration;
@property(readonly, nonatomic, getter=_trackReferences) NSDictionary *trackReferences;
@property(nonatomic, getter=_alternateGroupID, setter=_setAlternateGroupID:) short alternateGroupID;
- (void)setLayer:(long long)arg1;
- (long long)layer;
- (void)setPreferredVolume:(float)arg1;
- (float)preferredVolume;
- (void)setMarksOutputTrackAsEnabled:(_Bool)arg1;
- (_Bool)marksOutputTrackAsEnabled;
- (void)setExtendedLanguageTag:(id)arg1;
- (id)extendedLanguageTag;
- (void)setLanguageCode:(id)arg1;
- (id)languageCode;
- (void)setNaturalSize:(struct CGSize)arg1;
- (struct CGSize)naturalSize;
- (void)setMediaTimeScale:(int)arg1;
- (int)mediaTimeScale;
- (void)setTransform:(struct CGAffineTransform)arg1;
- (struct CGAffineTransform)transform;
@property(copy, nonatomic) NSArray *metadata;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *sourceFormatHint;
@property(readonly, nonatomic) NSDictionary *outputSettings;
@property(readonly, nonatomic, getter=_outputSettingsObject) AVOutputSettings *outputSettingsObject;
@property(readonly, nonatomic) NSString *mediaType;
@property(readonly, nonatomic, getter=_trackID) int trackID;
@property(retain, nonatomic, getter=_helper, setter=_setHelper:) AVAssetWriterInputHelper *helper;
@property(readonly, nonatomic, getter=_status) long long status;
- (void)_tellAssetWriterToTransitionToFailedStatusWithError:(id)arg1;
@property(retain, nonatomic, getter=_weakReferenceToAssetWriter, setter=_setWeakReferenceToAssetWriter:) AVWeakReference *weakReferenceToAssetWriter;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithMediaType:(id)arg1 outputSettings:(id)arg2 sourceFormatHint:(struct opaqueCMFormatDescription *)arg3;
- (id)initWithMediaType:(id)arg1 outputSettings:(id)arg2;
- (id)init;

@end

@interface AVAssetWriterInputConfigurationState : NSObject
{
    NSString *_mediaType;
    AVOutputSettings *_outputSettings;
    struct opaqueCMFormatDescription *_sourceFormatHint;
    NSDictionary *_sourcePixelBufferAttributes;
    _Bool _attachedToPixelBufferAdaptor;
    NSArray *_metadataItems;
    struct CGAffineTransform _transform;
    int _mediaTimeScale;
    _Bool _expectsMediaDataInRealTime;
    struct CGSize _naturalSize;
    NSString *_languageCode;
    NSString *_extendedLanguageTag;
    _Bool _marksOutputTrackAsEnabled;
    float _preferredVolume;
    long long _layer;
    short _alternateGroupID;
    NSDictionary *_trackReferences;
    _Bool _performsMultiPassEncodingIfSupported;
    CDStruct_1b6d18a9 _chunkDuration;
    long long _chunkAlignment;
    long long _chunkSize;
    NSURL *_sampleReferenceBaseURL;
}

@property(copy, nonatomic) NSURL *sampleReferenceBaseURL; // @synthesize sampleReferenceBaseURL=_sampleReferenceBaseURL;
@property(nonatomic) long long preferredMediaChunkSize; // @synthesize preferredMediaChunkSize=_chunkSize;
@property(nonatomic) long long preferredMediaChunkAlignment; // @synthesize preferredMediaChunkAlignment=_chunkAlignment;
@property(nonatomic) CDStruct_1b6d18a9 preferredMediaChunkDuration; // @synthesize preferredMediaChunkDuration=_chunkDuration;
@property(nonatomic) _Bool performsMultiPassEncodingIfSupported; // @synthesize performsMultiPassEncodingIfSupported=_performsMultiPassEncodingIfSupported;
@property(copy, nonatomic) NSDictionary *trackReferences; // @synthesize trackReferences=_trackReferences;
@property(nonatomic) short alternateGroupID; // @synthesize alternateGroupID=_alternateGroupID;
@property(nonatomic) long long layer; // @synthesize layer=_layer;
@property(nonatomic) float preferredVolume; // @synthesize preferredVolume=_preferredVolume;
@property(nonatomic) _Bool marksOutputTrackAsEnabled; // @synthesize marksOutputTrackAsEnabled=_marksOutputTrackAsEnabled;
@property(copy, nonatomic) NSString *extendedLanguageTag; // @synthesize extendedLanguageTag=_extendedLanguageTag;
@property(copy, nonatomic) NSString *languageCode; // @synthesize languageCode=_languageCode;
@property(nonatomic) struct CGSize naturalSize; // @synthesize naturalSize=_naturalSize;
@property(nonatomic) _Bool expectsMediaDataInRealTime; // @synthesize expectsMediaDataInRealTime=_expectsMediaDataInRealTime;
@property(nonatomic) int mediaTimeScale; // @synthesize mediaTimeScale=_mediaTimeScale;
@property(nonatomic) struct CGAffineTransform transform; // @synthesize transform=_transform;
@property(copy, nonatomic) NSArray *metadataItems; // @synthesize metadataItems=_metadataItems;
@property(nonatomic) _Bool attachedToPixelBufferAdaptor; // @synthesize attachedToPixelBufferAdaptor=_attachedToPixelBufferAdaptor;
@property(copy, nonatomic) NSDictionary *sourcePixelBufferAttributes; // @synthesize sourcePixelBufferAttributes=_sourcePixelBufferAttributes;
@property(retain, nonatomic) struct opaqueCMFormatDescription *sourceFormatHint; // @synthesize sourceFormatHint=_sourceFormatHint;
@property(copy, nonatomic) AVOutputSettings *outputSettings; // @synthesize outputSettings=_outputSettings;
@property(copy, nonatomic) NSString *mediaType; // @synthesize mediaType=_mediaType;
- (void)dealloc;

@end

@interface AVAssetWriterInputFigAssetWriterEndPassOperation : NSObject
{
    struct OpaqueFigAssetWriter *_figAssetWriter;
    int _trackID;
    CDUnknownBlockType _completionBlock;
    _Bool _succeeded;
    NSError *_error;
    AVAssetWriterInputPassDescription *_nextPassDescription;
}

@property(readonly, nonatomic) AVAssetWriterInputPassDescription *descriptionForNextPass; // @synthesize descriptionForNextPass=_nextPassDescription;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) _Bool succeeded; // @synthesize succeeded=_succeeded;
@property(copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
- (void)_markOperationAsCompletedWithSuccess:(_Bool)arg1 error:(id)arg2;
- (void)_notifyWhetherMorePassesAreNeeded:(_Bool)arg1 timeRanges:(id)arg2 forTrackWithID:(int)arg3;
- (void)start;
- (void)finalize;
- (void)dealloc;
- (id)initWithFigAssetWriter:(struct OpaqueFigAssetWriter *)arg1 trackID:(int)arg2;
- (id)init;

@end

@interface AVAssetWriterInputGroup : AVMediaSelectionGroup
{
    AVAssetWriterInputGroupInternal *_internal;
}

+ (id)assetWriterInputGroupWithInputs:(id)arg1 defaultInput:(id)arg2;
- (id)options;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_stopObservingInputPropertiesThatMayChangeValueOfOptions;
- (void)_startObservingInputPropertiesThatMayChangeValueOfOptions;
@property(readonly, nonatomic) AVAssetWriterInput *defaultInput;
@property(readonly, nonatomic) NSArray *inputs;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithInputs:(id)arg1 defaultInput:(id)arg2;
- (id)init;

@end

@interface AVAssetWriterInputGroupInternal : NSObject
{
    NSArray *inputs;
    AVAssetWriterInput *defaultInput;
}

@end

@interface AVAssetWriterInputHelper : NSObject
{
    AVAssetWriterInputConfigurationState *_configurationState;
    AVWeakReference *_weakReferenceToAssetWriterInput;
}

@property(retain) AVWeakReference *weakReferenceToAssetWriterInput; // @synthesize weakReferenceToAssetWriterInput=_weakReferenceToAssetWriterInput;
@property(readonly, nonatomic) AVAssetWriterInputConfigurationState *configurationState; // @synthesize configurationState=_configurationState;
- (id)associatedInputsWithTrackAssociationType:(id)arg1;
- (id)availableTrackAssociationTypes;
- (void)addTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (_Bool)canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
@property(readonly, nonatomic) struct __CVPixelBufferPool *pixelBufferPool;
@property(copy, nonatomic) NSDictionary *sourcePixelBufferAttributes;
- (void)markCurrentPassAsFinished;
- (void)markAsFinished;
- (_Bool)prepareToFinishWritingReturningError:(id *)arg1;
- (void)prepareToEndSession;
- (void)didStartInitialSession;
- (_Bool)appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)appendSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) NSURL *sampleReferenceBaseURL;
@property(nonatomic) long long preferredMediaChunkSize;
@property(nonatomic) long long preferredMediaChunkAlignment;
@property(nonatomic) CDStruct_1b6d18a9 preferredMediaChunkDuration;
@property(readonly, nonatomic) _Bool shouldRespondToInitialPassDescription;
- (_Bool)canStartRespondingToEachPassDescriptionReturningReason:(id *)arg1;
@property(readonly, nonatomic) AVAssetWriterInputPassDescription *currentPassDescription;
@property(readonly, nonatomic) _Bool canPerformMultiplePasses;
@property(nonatomic) _Bool performsMultiPassEncodingIfSupported;
@property(readonly, nonatomic) NSDictionary *trackReferences;
@property(nonatomic) short alternateGroupID;
@property(nonatomic) long long layer;
@property(nonatomic) float preferredVolume;
@property(nonatomic) _Bool marksOutputTrackAsEnabled;
@property(copy, nonatomic) NSString *extendedLanguageTag;
@property(copy, nonatomic) NSString *languageCode;
@property(nonatomic) struct CGSize naturalSize;
@property(nonatomic) _Bool expectsMediaDataInRealTime;
@property(readonly, nonatomic, getter=isReadyForMoreMediaData) _Bool readyForMoreMediaData;
@property(nonatomic) int mediaTimeScale;
@property(copy, nonatomic) NSArray *metadata;
@property(nonatomic) struct CGAffineTransform transform;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *sourceFormatHint;
@property(readonly, nonatomic) AVOutputSettings *outputSettings;
@property(readonly, nonatomic) NSString *mediaType;
@property(readonly, nonatomic) int trackID;
- (void)transitionAssetWriterAndAllInputsToFailedStatusWithError:(id)arg1;
- (id)transitionToAndReturnTerminalHelperWithTerminalStatus:(long long)arg1;
@property(readonly, nonatomic) long long status;
- (id)description;
- (void)dealloc;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterInputInterPassAnalysisHelper : AVAssetWriterInputHelper
{
    AVAssetWriterInputWritingHelper *_writingHelper;
    AVAssetWriterInputPassDescription *_initialPassDescription;
}

- (void)markCurrentPassAsFinished;
- (void)markAsFinished;
- (struct __CVPixelBufferPool *)pixelBufferPool;
- (_Bool)appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)appendSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)shouldRespondToInitialPassDescription;
- (_Bool)isReadyForMoreMediaData;
- (id)currentPassDescription;
- (_Bool)canPerformMultiplePasses;
- (long long)status;
- (void)startPassAnalysis;
- (void)dealloc;
- (id)initWithWritingHelper:(id)arg1;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterInputInternal : NSObject
{
    AVWeakReference *weakReference;
    AVAssetWriterInputHelper *helper;
    NSObject<OS_dispatch_queue> *helperQueue;
    _Bool attachedToPixelBufferAdaptor;
    _Bool attachedToMetadataAdaptor;
    AVWeakReference *weakReferenceToAssetWriter;
    long long numberOfAppendFailures;
    NSObject<OS_dispatch_queue> *appendFailureReadWriteQueue;
    AVAssetWriterInputPassDescriptionResponder *passDescriptionResponder;
}

@end

@interface AVAssetWriterInputMediaDataRequester : NSObject
{
    NSObject<OS_dispatch_queue> *_requestQueue;
    CDUnknownBlockType _requestBlock;
    id <AVAssetWriterInputMediaDataRequesterDelegate> _delegate;
}

@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *requestQueue; // @synthesize requestQueue=_requestQueue;
@property id <AVAssetWriterInputMediaDataRequesterDelegate> delegate; // @synthesize delegate=_delegate;
- (void)requestMediaDataIfNecessary;
- (void)finalize;
- (void)dealloc;
- (void)_collectUncollectables_invokedFromDeallocAndFinalize;
- (id)init;
- (id)initWithRequestQueue:(id)arg1 requestBlock:(CDUnknownBlockType)arg2;

@end

@interface AVAssetWriterInputMetadataAdaptor : NSObject
{
    AVAssetWriterInputMetadataAdaptorInternal *_internal;
}

+ (id)assetWriterInputMetadataAdaptorWithAssetWriterInput:(id)arg1;
+ (void)initialize;
- (_Bool)appendTimedMetadataGroup:(id)arg1;
@property(readonly, nonatomic) AVAssetWriterInput *assetWriterInput;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithAssetWriterInput:(id)arg1;
- (id)init;

@end

@interface AVAssetWriterInputMetadataAdaptorInternal : NSObject
{
    AVAssetWriterInput *input;
}

@end

@interface AVAssetWriterInputNoMorePassesHelper : AVAssetWriterInputHelper
{
    AVAssetWriterInputWritingHelper *_writingHelper;
}

- (void)markCurrentPassAsFinished;
- (void)markAsFinished;
- (struct __CVPixelBufferPool *)pixelBufferPool;
- (_Bool)appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)appendSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)isReadyForMoreMediaData;
- (id)currentPassDescription;
- (_Bool)canPerformMultiplePasses;
- (long long)status;
- (void)dealloc;
- (id)initWithWritingHelper:(id)arg1;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterInputPassDescription : NSObject
{
    AVAssetWriterInputPassDescriptionInternal *_internal;
}

@property(readonly, nonatomic) NSArray *sourceTimeRanges;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithTimeRanges:(id)arg1;
- (id)init;

@end

@interface AVAssetWriterInputPassDescriptionInternal : NSObject
{
    NSArray *timeRanges;
}

@end

@interface AVAssetWriterInputPassDescriptionResponder : NSObject
{
    NSObject<OS_dispatch_queue> *_callbackQueue;
    int _stoppedResponding;
    NSObject<OS_dispatch_queue> *_serializationQueue;
    _Bool _hasRespondedAtLeastOnce;
    AVAssetWriterInputPassDescription *_mostRecentPassDescription;
    CDUnknownBlockType _callbackBlock;
}

- (_Bool)_hasStoppedResponding;
- (void)stopRespondingToPassDescriptions;
- (void)_releaseAndClearCallbackBlock_invokeOnSerializationQueue;
- (void)respondToNewPassDescription:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithCallbackQueue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (id)init;

@end

@interface AVAssetWriterInputPixelBufferAdaptor : NSObject
{
    AVAssetWriterInputPixelBufferAdaptorInternal *_internal;
}

+ (id)keyPathsForValuesAffectingPixelBufferPool;
+ (id)assetWriterInputPixelBufferAdaptorWithAssetWriterInput:(id)arg1 sourcePixelBufferAttributes:(id)arg2;
- (_Bool)appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
@property(readonly, nonatomic) struct __CVPixelBufferPool *pixelBufferPool;
@property(readonly, nonatomic) NSDictionary *sourcePixelBufferAttributes;
@property(readonly, nonatomic) AVAssetWriterInput *assetWriterInput;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithAssetWriterInput:(id)arg1 sourcePixelBufferAttributes:(id)arg2;
- (id)init;

@end

@interface AVAssetWriterInputPixelBufferAdaptorInternal : NSObject
{
    AVAssetWriterInput *input;
}

@end

@interface AVMediaSelectionOption : NSObject <NSCopying>
{
    AVMediaSelectionOptionInternal *_mediaSelectionOption;
}

+ (id)mediaSelectionOptionForAsset:(id)arg1 group:(id)arg2 dictionary:(id)arg3 hasUnderlyingTrack:(_Bool)arg4;
@property(readonly, nonatomic) int trackID;
@property(readonly, nonatomic) AVAssetTrack *track;
- (id)outOfBandIdentifier;
- (id)outOfBandSource;
@property(readonly, nonatomic) NSString *displayName;
- (id)displayNameWithLocale:(id)arg1;
- (id)displayNameWithLocale:(id)arg1 fallingBackToMatchingUndeterminedAndMultilingual:(_Bool)arg2;
- (id)_preferredMetadataTitleAccordingToPreferredLanguages:(id)arg1 fallingBackToMatchingEmptyLocale:(_Bool)arg2;
- (id)propertyList;
- (id)associatedMediaSelectionOptionInMediaSelectionGroup:(id)arg1;
- (id)metadataForFormat:(id)arg1;
@property(readonly, nonatomic) NSArray *availableMetadataFormats;
- (id)_title;
@property(readonly, nonatomic) NSArray *commonMetadata;
- (_Bool)displaysNonForcedSubtitles;
- (id)associatedPersistentIDs;
- (id)associatedExtendedLanguageTag;
@property(readonly, nonatomic) NSString *extendedLanguageTag;
@property(readonly, nonatomic) NSLocale *locale;
- (_Bool)_isDesignatedDefault;
@property(readonly, nonatomic, getter=isPlayable) _Bool playable;
- (_Bool)hasMediaCharacteristic:(id)arg1;
@property(readonly, nonatomic) NSArray *mediaSubTypes;
@property(readonly, nonatomic) NSString *mediaType;
- (id)_groupMediaType;
- (id)_groupID;
- (id)group;
- (id)optionID;
- (id)dictionary;
- (id)_ancillaryDescription;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AVAssetWriterInputSelectionOption : AVMediaSelectionOption
{
    AVAssetWriterInput *_input;
    NSString *_mediaType;
    NSDictionary *_outputSettings;
    struct opaqueCMFormatDescription *_sourceFormatHint;
    NSString *_languageCode;
    NSString *_extendedLanguageTag;
    NSArray *_metadata;
    NSDictionary *_trackReferences;
    _Bool _displaysNonForcedSubtitles;
    _Bool _enabled;
}

+ (id)assetWriterInputSelectionOptionWithAssetWriterInput:(id)arg1 displaysNonForcedSubtitles:(_Bool)arg2;
+ (id)assetWriterInputSelectionOptionWithAssetWriterInput:(id)arg1;
@property(readonly, nonatomic) _Bool displaysNonForcedSubtitles; // @synthesize displaysNonForcedSubtitles=_displaysNonForcedSubtitles;
@property(readonly, nonatomic) NSDictionary *trackReferences; // @synthesize trackReferences=_trackReferences;
@property(readonly, nonatomic) NSArray *metadata; // @synthesize metadata=_metadata;
@property(readonly, nonatomic) NSString *extendedLanguageTag; // @synthesize extendedLanguageTag=_extendedLanguageTag;
@property(readonly, nonatomic) NSString *languageCode; // @synthesize languageCode=_languageCode;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *sourceFormatHint; // @synthesize sourceFormatHint=_sourceFormatHint;
@property(readonly, nonatomic) NSDictionary *outputSettings; // @synthesize outputSettings=_outputSettings;
@property(readonly, nonatomic) NSString *mediaType; // @synthesize mediaType=_mediaType;
@property(readonly, nonatomic) AVAssetWriterInput *input; // @synthesize input=_input;
- (id)propertyList;
- (id)associatedMediaSelectionOptionInMediaSelectionGroup:(id)arg1;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)locale;
- (_Bool)_isDesignatedDefault;
- (_Bool)isPlayable;
- (_Bool)hasMediaCharacteristic:(id)arg1;
- (_Bool)_isMainProgramContent;
- (_Bool)_isAuxiliaryContent;
- (id)_taggedCharacteristics;
- (id)mediaSubTypes;
- (id)_ancillaryDescription;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)_hasEqualValueForKey:(id)arg1 asObject:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)initWithAssetWriterInput:(id)arg1 displaysNonForcedSubtitles:(_Bool)arg2;
- (id)initWithAssetWriterInput:(id)arg1;

@end

@interface AVAssetWriterInputTerminalHelper : AVAssetWriterInputHelper <AVAssetWriterInputMediaDataRequesterDelegate>
{
    long long _terminalStatus;
    _Bool _didRequestMediaDataOnce;
}

- (void)markCurrentPassAsFinished;
- (void)markAsFinished;
- (_Bool)appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)appendSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (_Bool)canStartRespondingToEachPassDescriptionReturningReason:(id *)arg1;
- (void)requestMediaDataOnceIfNecessaryWithMediaDataRequester:(id)arg1;
- (_Bool)mediaDataRequesterShouldRequestMediaData:(id)arg1;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)isReadyForMoreMediaData;
- (id)transitionToAndReturnTerminalHelperWithTerminalStatus:(long long)arg1;
- (long long)status;
- (id)initWithConfigurationState:(id)arg1 terminalStatus:(long long)arg2;
- (id)initWithConfigurationState:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetWriterInputUnknownHelper : AVAssetWriterInputHelper
{
}

+ (id)keyPathsForValuesAffectingCanPerformMultiplePasses;
- (_Bool)canStartRespondingToEachPassDescriptionReturningReason:(id *)arg1;
- (void)addTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (_Bool)canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (_Bool)_canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2 exceptionReason:(id *)arg3;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setPreferredMediaChunkSize:(long long)arg1;
- (void)setPreferredMediaChunkAlignment:(long long)arg1;
- (void)setPreferredMediaChunkDuration:(CDStruct_1b6d18a9)arg1;
- (void)setSourcePixelBufferAttributes:(id)arg1;
- (_Bool)canPerformMultiplePasses;
- (void)setPerformsMultiPassEncodingIfSupported:(_Bool)arg1;
- (void)setAlternateGroupID:(short)arg1;
- (void)setLayer:(long long)arg1;
- (void)setPreferredVolume:(float)arg1;
- (void)setMarksOutputTrackAsEnabled:(_Bool)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (_Bool)_validateLanguageCode:(id)arg1;
- (void)setNaturalSize:(struct CGSize)arg1;
- (void)setExpectsMediaDataInRealTime:(_Bool)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setMetadata:(id)arg1;
- (void)setTransform:(struct CGAffineTransform)arg1;
- (long long)status;
- (id)initWithMediaType:(id)arg1 outputSettings:(id)arg2 sourceFormatHint:(struct opaqueCMFormatDescription *)arg3;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterInputWritingHelper : AVAssetWriterInputHelper <AVAssetWriterInputMediaDataRequesterDelegate>
{
    AVFigAssetWriterTrack *_assetWriterTrack;
    AVAssetWriterInputMediaDataRequester *_mediaDataRequester;
    struct __CVPixelBufferPool *_pixelBufferPool;
    AVAssetWriterInputPassDescription *_currentPassDescription;
}

+ (id)keyPathsForValuesAffectingReadyForMoreMediaData;
@property(retain, nonatomic) AVAssetWriterInputPassDescription *currentPassDescription; // @synthesize currentPassDescription=_currentPassDescription;
@property(readonly, nonatomic, getter=_assetWriterTrack) AVFigAssetWriterTrack *assetWriterTrack; // @synthesize assetWriterTrack=_assetWriterTrack;
- (struct __CVPixelBufferPool *)pixelBufferPool;
- (id)transitionToAndReturnTerminalHelperWithTerminalStatus:(long long)arg1;
- (int)trackID;
- (void)markAsFinishedAndTransitionCurrentHelper:(id)arg1;
- (void)markAsFinished;
- (void)markCurrentPassAsFinished;
- (_Bool)prepareToFinishWritingReturningError:(id *)arg1;
- (void)prepareToEndSession;
- (_Bool)appendPixelBuffer:(struct __CVBuffer *)arg1 withPresentationTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)appendSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)beginPassIfAppropriate;
- (void)didStartInitialSession;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_detachFromMediaDataRequester:(id)arg1;
- (void)_attachToMediaDataRequester:(id)arg1;
- (_Bool)mediaDataRequesterShouldRequestMediaData:(id)arg1;
- (void)_nudgeMediaDataRequesterIfAppropriate;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)isReadyForMoreMediaData;
- (_Bool)canPerformMultiplePasses;
- (long long)status;
- (void)finalize;
- (void)dealloc;
- (id)initWithConfigurationState:(id)arg1 assetWriterTrack:(id)arg2 error:(id *)arg3;
- (id)initWithConfigurationState:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetWriterInternal : NSObject
{
    AVWeakReference *weakReference;
    AVAssetWriterHelper *helper;
    NSObject<OS_dispatch_queue> *helperReadWriteQueue;
}

@end

@interface AVAssetWriterSynchronousMainThreadFinishWritingDelegate : NSObject <AVAssetWriterFinishWritingHelperDelegate>
{
}

- (_Bool)shouldHelperPrepareInputs;
- (void)finishWritingHelperDidFail:(id)arg1;
- (void)finishWritingHelperDidCancelFinishWriting:(id)arg1;
- (void)finishWritingHelper:(id)arg1 didInitiateFinishWritingForFigAssetWriter:(struct OpaqueFigAssetWriter *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetWriterSynchronousNonMainThreadFinishWritingDelegate : NSObject <AVAssetWriterFigAssetWriterNotificationHandlerDelegate, AVAssetWriterFinishWritingHelperDelegate>
{
    NSObject<OS_dispatch_semaphore> *_finishedWritingNotificationSemaphore;
    AVWeakReference *_weakReferenceToHelper;
    AVWeakReference *_weakReferenceToSelf;
}

- (_Bool)shouldHelperPrepareInputs;
- (void)finishWritingHelperDidFail:(id)arg1;
- (void)finishWritingHelperDidCancelFinishWriting:(id)arg1;
- (void)finishWritingHelper:(id)arg1 didInitiateFinishWritingForFigAssetWriter:(struct OpaqueFigAssetWriter *)arg2;
- (void)didReceiveFigAssetWriterNotificationWithSuccess:(_Bool)arg1 error:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAssetWriterUnknownHelper : AVAssetWriterHelper
{
    short _alternateGroupID;
}

- (void)cancelWriting;
- (void)startWriting;
- (void)addInputGroup:(id)arg1;
- (_Bool)canAddInputGroup:(id)arg1;
- (_Bool)_canAddInputGroup:(id)arg1 exceptionReason:(id *)arg2;
- (void)addInput:(id)arg1;
- (_Bool)canAddInput:(id)arg1;
- (_Bool)_canAddInput:(id)arg1 exceptionReason:(id *)arg2;
- (void)setPreferredRate:(float)arg1;
- (void)setPreferredVolume:(float)arg1;
- (void)setPreferredTransform:(struct CGAffineTransform)arg1;
- (void)setMovieTimeScale:(int)arg1;
- (void)setMetadata:(id)arg1;
- (void)setDirectoryForTemporaryFiles:(id)arg1;
- (void)setShouldOptimizeForNetworkUse:(_Bool)arg1;
- (void)setMovieFragmentInterval:(CDStruct_1b6d18a9)arg1;
- (long long)status;
- (id)initWithURL:(id)arg1 fileType:(id)arg2;
- (id)initWithConfigurationState:(id)arg1;

@end

@interface AVAssetWriterWritingHelper : AVAssetWriterHelper <AVAssetWriterFigAssetWriterNotificationHandlerDelegate>
{
    AVWeakReference *_weakReference;
    struct OpaqueFigAssetWriter *_figAssetWriter;
    NSObject<OS_dispatch_queue> *_figAssetWriterAccessQueue;
    _Bool _startSessionCalled;
    AVAssetWriterFigAssetWriterNotificationHandler *_notificationHandler;
}

- (void)finishWritingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)finishWriting;
- (void)cancelWriting;
- (struct OpaqueFigAssetWriter *)_retainedFigAssetWriter;
- (void)endSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (void)startSessionAtSourceTime:(CDStruct_1b6d18a9)arg1;
- (long long)status;
- (void)didReceiveFigAssetWriterNotificationWithSuccess:(_Bool)arg1 error:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)figTrackReferences;
- (id)initWithConfigurationState:(id)arg1 error:(id *)arg2;
- (id)initWithConfigurationState:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAsynchronousVideoCompositionRequest : NSObject <NSCopying>
{
    AVAsynchronousVideoCompositionRequestInternal *_internal;
}

- (void)finishCancelledRequest;
- (void)finishWithError:(id)arg1;
- (void)finishWithComposedVideoFrame:(struct __CVBuffer *)arg1;
- (struct __CVBuffer *)sourceFrameByTrackID:(int)arg1;
@property(readonly, nonatomic) id <AVVideoCompositionInstruction> videoCompositionInstruction;
@property(readonly, nonatomic) NSArray *sourceTrackIDs;
@property(readonly, nonatomic) CDStruct_1b6d18a9 compositionTime;
@property(readonly, nonatomic) AVVideoCompositionRenderContext *renderContext;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)_willDeallocOrFinalize;
- (struct OpaqueFigVideoCompositorFrame *)compositionFrame;
- (id)initUsingSession:(id)arg1 withRenderContext:(id)arg2 compositionFrame:(struct OpaqueFigVideoCompositorFrame *)arg3 atTime:(CDStruct_1b6d18a9)arg4 usingSources:(id)arg5 instruction:(id)arg6;

@end

@interface AVAsynchronousVideoCompositionRequestInternal : NSObject
{
    AVWeakReference *_session;
    AVVideoCompositionRenderContext *_renderContext;
    struct OpaqueFigVideoCompositorFrame *_compositionFrame;
    CDStruct_1b6d18a9 _compositionTime;
    NSDictionary *_sourcesByTrackID;
    NSArray *_sourceTrackIDsInClientOrder;
    id <AVVideoCompositionInstruction> _instruction;
    _Bool _isFinished;
}

@property(nonatomic) _Bool isFinished; // @synthesize isFinished=_isFinished;
@property(retain, nonatomic) id <AVVideoCompositionInstruction> instruction; // @synthesize instruction=_instruction;
@property(retain, nonatomic) NSArray *sourceTrackIDsInClientOrder; // @synthesize sourceTrackIDsInClientOrder=_sourceTrackIDsInClientOrder;
@property(retain, nonatomic) NSDictionary *sourcesByTrackID; // @synthesize sourcesByTrackID=_sourcesByTrackID;
@property(nonatomic) CDStruct_1b6d18a9 compositionTime; // @synthesize compositionTime=_compositionTime;
@property(nonatomic) struct OpaqueFigVideoCompositorFrame *compositionFrame; // @synthesize compositionFrame=_compositionFrame;
@property(retain, nonatomic) AVVideoCompositionRenderContext *renderContext; // @synthesize renderContext=_renderContext;
@property(retain, nonatomic) AVWeakReference *session; // @synthesize session=_session;
- (void)dealloc;

@end

@interface AVAudioMix : NSObject <NSCopying, NSMutableCopying>
{
    AVAudioMixInternal *_audioMix;
}

- (id)_audioMixInputParametersForTrackID:(int)arg1;
- (void)setInputParameters:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *inputParameters;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVAudioMixInputParameters : NSObject <NSCopying, NSMutableCopying>
{
    AVAudioMixInputParametersInternal *_inputParameters;
}

- (id)_volumeCurveAsString;
- (id)_audioVolumeCurve;
- (void)_setScheduledAudioParameters:(id)arg1;
- (_Bool)getVolumeRampForTime:(CDStruct_1b6d18a9)arg1 startVolume:(float *)arg2 endVolume:(float *)arg3 timeRange:(CDStruct_e83c9415 *)arg4;
- (void)setVolume:(float)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)setVolumeRampFromStartVolume:(float)arg1 toEndVolume:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)_setVolume:(float)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)_setVolumeRampFromStartVolume:(float)arg1 toEndVolume:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setAudioTapProcessor:(struct opaqueMTAudioProcessingTap *)arg1;
@property(readonly, retain, nonatomic) struct opaqueMTAudioProcessingTap *audioTapProcessor;
- (void)setAudioTimePitchAlgorithm:(id)arg1;
@property(readonly, copy, nonatomic) NSString *audioTimePitchAlgorithm;
- (void)setTrackID:(int)arg1;
@property(readonly, nonatomic) int trackID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVAudioMixInputParametersInternal : NSObject
{
    int trackID;
    AVMutableScheduledAudioParameters *scheduledAudioParameters;
    NSString *audioTimePitchAlgorithm;
    struct opaqueMTAudioProcessingTap *tap;
}

@end

@interface AVAudioMixInternal : NSObject
{
    NSArray *inputParameters;
}

@end

@interface AVAudioSessionMediaPlayerOnly : NSObject
{
    AVAudioSessionMediaPlayerOnlyInternal *_audioSession;
}

+ (void)initialize;
- (void)_removeFPListeners;
- (void)_addFPListeners;
- (void)_setFigPlayer:(struct OpaqueFigPlayer *)arg1;
- (id)_weakReference;
- (void)setApplicationAudioSession:(_Bool)arg1;
- (_Bool)isApplicationAudioSession;
- (_Bool)setMode:(id)arg1 error:(id *)arg2;
@property(readonly) NSString *mode;
@property(readonly) long long currentHardwareOutputNumberOfChannels;
@property(readonly) long long currentHardwareInputNumberOfChannels;
@property(readonly) double currentHardwareSampleRate;
@property(readonly) _Bool inputIsAvailable;
@property(readonly) double preferredIOBufferDuration;
@property(readonly) double preferredHardwareSampleRate;
@property(readonly) NSString *category;
- (_Bool)setPreferredIOBufferDuration:(double)arg1 error:(id *)arg2;
- (_Bool)setPreferredHardwareSampleRate:(double)arg1 error:(id *)arg2;
- (_Bool)setCategory:(id)arg1 error:(id *)arg2;
- (_Bool)setActive:(_Bool)arg1 withFlags:(long long)arg2 error:(id *)arg3;
- (_Bool)setActive:(_Bool)arg1 error:(id *)arg2;
@property id <AVAudioSessionDelegateMediaPlayerOnly> delegate;
- (void)dealloc;
- (id)init;

@end

@interface AVAudioSessionMediaPlayerOnlyInternal : NSObject
{
    AVWeakReference *weakReference;
    struct OpaqueFigPlayer *figPlayer;
    _Bool isAppAudioSession;
    _Bool isActive;
    NSString *category;
    NSString *mode;
    id <AVAudioSessionDelegateMediaPlayerOnly> delegate;
}

@end

@interface AVAudioSettingsValueConstrainer : NSObject
{
    struct AudioStreamBasicDescription _inputASBD;
    struct AudioStreamBasicDescription _outputASBD;
    struct OpaqueAudioConverter *_audioConverter;
    unsigned int _outputDataRate;
    _Bool _needNewConverter;
    _Bool _needAvailableSampleRates;
    _Bool _needApplicableParameters;
    NSArray *_availableOutputSampleRates;
    NSMutableArray *_availableOutputDataRates;
    NSMutableArray *_applicableOutputSampleRatesForDataRate;
    NSMutableArray *_applicableOutputDataRatesForSampleRate;
}

- (float)_getAvailableOutputSampleRateFor:(float)arg1 rounding:(long long)arg2;
- (unsigned int)availableOutputChannelCountForDesiredChannelCount:(unsigned int)arg1 rounding:(long long)arg2;
- (float)applicableOutputSampleRateForDesiredSampleRate:(float)arg1 rounding:(long long)arg2;
@property(nonatomic) unsigned int outputDataRate;
@property(nonatomic) unsigned int outputChannelCount;
@property(nonatomic) unsigned int outputBitsPerChannel;
@property(nonatomic) unsigned int outputFormatFlags;
@property(nonatomic) unsigned int outputFormat;
@property(nonatomic) float outputSampleRate;
- (void)setInputPropertiesFromASBD:(struct AudioStreamBasicDescription)arg1;
- (void)_bringUpToDate;
- (id)_fetchApplicableOutputDataRates;
- (void)_buildApplicableDataRatesForSampleRates;
- (void)_buildAvailableSampleRates;
- (void)_buildAudioConverter;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVCMNotificationDispatcher : NSObject
{
    struct opaqueCMNotificationCenter *_cmNotificationCenter;
    AVCallbackRegistry *_callbackRegistry;
    NSMutableDictionary *_listenerObjectsPassedToFig;
    NSObject<OS_dispatch_queue> *_listenerObjectsQueue;
}

+ (id)notificationDispatcherForCMNotificationCenter:(struct opaqueCMNotificationCenter *)arg1;
+ (void)initialize;
- (id)_copyAndRemoveListenerAndCallbackForWeakReferenceToListener:(id)arg1 callback:(CDUnknownFunctionPointerType)arg2 name:(struct __CFString *)arg3 object:(const void *)arg4;
- (void)_addListenerAndCallback:(id)arg1 forWeakReferenceToListener:(id)arg2 callback:(CDUnknownFunctionPointerType)arg3 name:(struct __CFString *)arg4 object:(const void *)arg5;
- (void)removeListenerWithWeakReference:(id)arg1 callback:(CDUnknownFunctionPointerType)arg2 name:(struct __CFString *)arg3 object:(const void *)arg4;
- (void)addListenerWithWeakReference:(id)arg1 callback:(CDUnknownFunctionPointerType)arg2 name:(struct __CFString *)arg3 object:(const void *)arg4 flags:(unsigned int)arg5;
@property(readonly, nonatomic) struct opaqueCMNotificationCenter *CMNotificationCenter;
@property(readonly, nonatomic, getter=_callbackRegistry) AVCallbackRegistry *callbackRegistry;
- (void)finalize;
- (void)dealloc;
- (id)initWithCMNotificationCenter:(struct opaqueCMNotificationCenter *)arg1;

@end

@interface AVCMNotificationDispatcherListenerAndCallback : NSObject
{
    AVWeakReference *_weakReferenceToListener;
    CDUnknownFunctionPointerType _callback;
}

@property(readonly, nonatomic) CDUnknownFunctionPointerType callback; // @synthesize callback=_callback;
@property(readonly, nonatomic) id listener;
- (void)dealloc;
- (id)initWithWeakReferenceToListener:(id)arg1 callback:(CDUnknownFunctionPointerType)arg2;

@end

@interface AVCMNotificationDispatcherListenerKey : NSObject <NSCopying>
{
    AVWeakReference *_weakReferenceToListener;
    CDUnknownFunctionPointerType _callback;
    NSString *_name;
    const void *_object;
}

+ (id)listenerKeyWithWeakReferenceToListener:(id)arg1 callback:(CDUnknownFunctionPointerType)arg2 name:(id)arg3 object:(const void *)arg4;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithWeakReferenceToListener:(id)arg1 callback:(CDUnknownFunctionPointerType)arg2 name:(id)arg3 object:(const void *)arg4;

@end

@interface AVCallbackRegistry : NSObject
{
    struct __CFBag *_observers;
    NSObject<OS_dispatch_queue> *_readWriteQueue;
}

+ (id)sharedCallbackRegistry;
+ (void)initialize;
- (id)callbackObserver:(id)arg1;
- (void)unregisterCallbackObserver:(id)arg1;
- (void)registerCallbackObserver:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureAudioChannel : NSObject
{
    AVCaptureAudioChannelInternal *_internal;
}

@property(readonly, nonatomic) float peakHoldLevel;
@property(readonly, nonatomic) float averagePowerLevel;
- (void)invalidate;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;

@end

@interface AVCaptureAudioChannelInternal : NSObject
{
    AVCaptureConnection *connection;
}

@end

@interface AVCaptureAudioChannelInternal_FigRecorder : NSObject
{
    AVCaptureConnection_FigRecorder *connection;
}

@end

@interface AVCaptureAudioChannel_FigRecorder : NSObject
{
    AVCaptureAudioChannelInternal_FigRecorder *_internal;
}

@property(readonly, nonatomic) float peakHoldLevel;
@property(readonly, nonatomic) float averagePowerLevel;
- (void)invalidate;
- (void)dealloc;
- (id)initWithConnection:(id)arg1;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureOutput : NSObject
{
    AVCaptureOutputInternal *_outputInternal;
}

+ (void)initialize;
- (id)recommendedOutputSettingsForConnection:(id)arg1 sourceSettings:(id)arg2 fileType:(id)arg3;
- (id)_recommendedAudioOutputSettingsForConnection:(id)arg1 sourceSettings:(id)arg2 fileType:(id)arg3;
- (id)_recommendedVideoOutputSettingsForConnection:(id)arg1 sourceSettings:(id)arg2;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (id)liveConnections;
- (id)firstEnabledConnectionForMediaType:(id)arg1;
- (void)removeConnection:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (_Bool)appliesMirroringWithPhysicalFlipForConnection:(id)arg1;
- (_Bool)appliesOrientationWithPhysicalRotationForConnection:(id)arg1;
- (struct CGSize)outputSizeForSourceFormat:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateMetadataTransformForSourceFormat:(id)arg1;
- (struct CGRect)rectForMetadataOutputRectOfInterest:(struct CGRect)arg1;
- (struct CGRect)metadataOutputRectOfInterestForRect:(struct CGRect)arg1;
- (id)transformedMetadataObjectForMetadataObject:(id)arg1 connection:(id)arg2;
- (id)_inputForConnection:(id)arg1;
- (id)connectionWithMediaType:(id)arg1;
@property(readonly, nonatomic) NSArray *connections;
- (_Bool)canAddConnectionForMediaType:(id)arg1;
- (id)connectionMediaTypes;
- (int)requiredOutputFormatForConnection:(id)arg1;
- (_Bool)hasRequiredOutputFormatForConnection:(id)arg1;
- (void)setSinkID:(id)arg1;
- (id)sinkID;
- (void)detachSafelyFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)detachFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachSafelyToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)performBlockOnSessionNotifyingThread:(CDUnknownBlockType)arg1;
- (void)performFigCaptureSessionOperationSafelyUsingBlock:(CDUnknownBlockType)arg1;
- (void)setSession:(id)arg1;
- (id)session;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureAudioDataOutput : AVCaptureOutput
{
    AVCaptureAudioDataOutputInternal *_internal;
}

+ (id)alloc;
+ (void)initialize;
- (id)connectionMediaTypes;
- (id)recommendedAudioSettingsForAssetWriterWithOutputFileType:(id)arg1;
- (id)supportedAssetWriterOutputFileTypes;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *sampleBufferCallbackQueue;
@property(readonly, nonatomic) id <AVCaptureAudioDataOutputSampleBufferDelegate> sampleBufferDelegate;
- (void)setSampleBufferDelegate:(id)arg1 queue:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureAudioDataOutputInternal : NSObject
{
    AVWeakReference *weakReference;
    AVWeakReferencingDelegateStorage *delegateStorage;
    NSObject<OS_dispatch_queue> *bufferQueue;
    struct OpaqueFigSimpleMutex *remoteQueueMutex;
    void *remoteReceiverQueue;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureAudioDataOutputInternal_FigRecorder : NSObject
{
    AVWeakReferencingDelegateStorage *delegateStorage;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureOutput_FigRecorder : NSObject
{
    AVCaptureOutputInternal_FigRecorder *_outputInternal;
}

+ (void)initialize;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (id)liveConnections;
- (id)firstEnabledConnectionForMediaType:(id)arg1;
- (id)notReadyError;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)handleEnabledChangedForConnection:(id)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)didStartForSessionWithoutGraphRebuild:(id)arg1;
- (void)didStartForSession:(id)arg1;
- (void)removeConnection:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (_Bool)appliesMirroringWithPhysicalFlipForConnection:(id)arg1;
- (_Bool)appliesOrientationWithPhysicalRotationForConnection:(id)arg1;
- (struct CGSize)outputSizeForCaptureOptions:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateMetadataTransformForCaptureOptions:(id)arg1;
- (struct CGRect)rectForMetadataOutputRectOfInterest:(struct CGRect)arg1;
- (struct CGRect)metadataOutputRectOfInterestForRect:(struct CGRect)arg1;
- (id)transformedMetadataObjectForMetadataObject:(id)arg1 connection:(id)arg2;
- (id)_inputForConnection:(id)arg1;
- (id)connectionWithMediaType:(id)arg1;
@property(readonly, nonatomic) NSArray *connections;
- (_Bool)canAddConnectionForMediaType:(id)arg1;
- (void)setSession:(id)arg1;
- (id)session;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureAudioDataOutput_FigRecorder : AVCaptureOutput_FigRecorder
{
    AVCaptureAudioDataOutputInternal_FigRecorder *_internal;
}

+ (void)initialize;
- (void)_AVCaptureAudioDataOutput_AudioDataBecameReady;
- (void)didStartForSession:(id)arg1;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)handleEnabledChangedForConnection:(id)arg1;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (id)connectionMediaTypes;
- (id)recommendedAudioSettingsForAssetWriterWithOutputFileType:(id)arg1;
- (id)supportedAssetWriterOutputFileTypes;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *sampleBufferCallbackQueue;
@property(readonly, nonatomic) id <AVCaptureAudioDataOutputSampleBufferDelegate_FigRecorder> sampleBufferDelegate;
- (void)setSampleBufferDelegate:(id)arg1 queue:(id)arg2;
- (void)setSession:(id)arg1;
- (_Bool)isTheOnlyDataOutput;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureBracketedStillImageSettings : NSObject
{
}

- (id)init;

@end

@interface AVCaptureAutoExposureBracketedStillImageSettings : AVCaptureBracketedStillImageSettings
{
    float _exposureTargetBias;
}

+ (id)autoExposureSettingsWithExposureTargetBias:(float)arg1;
@property(readonly) float exposureTargetBias; // @synthesize exposureTargetBias=_exposureTargetBias;
- (id)description;
- (id)_initAutoExposureSettingsWithExposureTargetBias:(float)arg1;

@end

@interface AVCaptureConnection : NSObject
{
    AVCaptureConnectionInternal *_internal;
}

+ (id)connectionWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
+ (id)connectionWithInputPorts:(id)arg1 output:(id)arg2;
+ (id)alloc;
+ (void)initialize;
- (void)_updatePropertiesForFormat:(id)arg1;
- (long long)_resolveActiveVideoStabilizationMode:(long long)arg1 format:(id)arg2;
- (void)_updateActiveVideoStabilizationMode:(long long)arg1 bumpChangeSeed:(_Bool)arg2;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (id)figCaptureConnectionConfigurationForSessionPreset:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)sourcesFromFrontFacingCamera;
- (id)sourceDevice;
- (void)setVideoRetainedBufferCountHint:(int)arg1;
- (int)videoRetainedBufferCountHint;
- (_Bool)isVideoRetainedBufferCountHintSupported;
@property(readonly, nonatomic) long long activeVideoStabilizationMode;
@property(nonatomic) long long preferredVideoStabilizationMode;
@property(nonatomic) _Bool enablesVideoStabilizationWhenAvailable;
@property(readonly, nonatomic, getter=isVideoStabilizationEnabled) _Bool videoStabilizationEnabled;
@property(readonly, nonatomic, getter=isVideoStabilizationSupported) _Bool supportsVideoStabilization;
- (void)_updateMaxScaleAndCropFactorForFormat:(id)arg1;
@property(nonatomic) double videoScaleAndCropFactor;
@property(readonly, nonatomic) double videoMaxScaleAndCropFactor;
@property(nonatomic) CDStruct_1b6d18a9 videoMaxFrameDuration;
- (CDStruct_1b6d18a9)_videoMaxFrameDuration;
- (_Bool)isVideoMaxFrameDurationSet;
@property(readonly, nonatomic, getter=isVideoMaxFrameDurationSupported) _Bool supportsVideoMaxFrameDuration;
@property(nonatomic) CDStruct_1b6d18a9 videoMinFrameDuration;
- (void)_setVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)_videoMinFrameDuration;
- (_Bool)isVideoMinFrameDurationSet;
@property(readonly, nonatomic, getter=isVideoMinFrameDurationSupported) _Bool supportsVideoMinFrameDuration;
@property(nonatomic) long long videoOrientation;
@property(readonly, nonatomic, getter=isVideoOrientationSupported) _Bool supportsVideoOrientation;
@property(nonatomic) _Bool automaticallyAdjustsVideoMirroring;
- (void)_setVideoMirrored:(_Bool)arg1;
@property(nonatomic, getter=isVideoMirrored) _Bool videoMirrored;
@property(readonly, nonatomic, getter=isVideoMirroringSupported) _Bool supportsVideoMirroring;
- (void)updateAudioChannelsArray;
- (float)getPeakAudioLevelForChannel:(id)arg1;
- (float)getAvgAudioLevelForChannel:(id)arg1;
- (void)updateAudioLevelsArray;
@property(readonly, nonatomic) NSArray *audioChannels;
- (id)mediaType;
- (_Bool)isLive;
@property(nonatomic, getter=isEnabled) _Bool enabled;
- (void)_setActive:(_Bool)arg1;
@property(readonly, nonatomic, getter=isActive) _Bool active;
@property(readonly, nonatomic) NSArray *inputPorts;
@property(readonly, nonatomic) AVCaptureVideoPreviewLayer *videoPreviewLayer;
@property(readonly, nonatomic) AVCaptureOutput *output;
- (void)teardownObservers;
- (void)setupObservers;
- (id)session;
- (void)inputPortFormatDescriptionChanged:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
- (id)initWithInputPorts:(id)arg1 output:(id)arg2;
- (void)setupInternalStorage;

@end

@interface AVCaptureConnectionInternal : NSObject
{
    NSMutableArray *inputPorts;
    AVCaptureDevice *sourceDevice;
    AVWeakReference *outputWeakReference;
    AVWeakReference *videoPreviewLayerWeakReference;
    _Bool hasActiveObservers;
    _Bool active;
    _Bool enabled;
    int changeSeed;
    AVCaptureInputPort *audioInputPort;
    NSMutableArray *audioChannels;
    NSArray *audioChannelLevels;
    long long lastGetAudioLevelsTime;
    AVCaptureInputPort *videoInputPort;
    AVCaptureInputPort *metadataInputPort;
    AVCaptureInputPort *metadataItemInputPort;
    _Bool videoMirroringSupported;
    _Bool automaticallyAdjustsVideoMirroring;
    _Bool videoMirrored;
    _Bool videoOrientationSupported;
    long long videoOrientation;
    CDStruct_1b6d18a9 videoMinFrameDuration;
    CDStruct_1b6d18a9 videoMaxFrameDuration;
    double videoMaxScaleAndCropFactor;
    double videoScaleAndCropFactor;
    int videoRetainedBufferCountHint;
    long long preferredVideoStabilizationMode;
    _Bool videoStabilizationEnabled;
    long long activeVideoStabilizationMode;
    _Bool hasVideoMinFrameDurationObserver;
}

@end

@interface AVCaptureConnectionInternal_FigRecorder : NSObject
{
    NSMutableArray *inputPorts;
    AVCaptureOutput_FigRecorder *output;
    AVCaptureVideoPreviewLayer_FigRecorder *videoPreviewLayer;
    _Bool active;
    _Bool enabled;
    int outputChangeSeedOnDisable;
    AVCaptureInputPort_FigRecorder *audioInputPort;
    NSMutableArray *audioChannels;
    NSArray *audioChannelLevels;
    long long lastGetAudioLevelsTime;
    AVCaptureInputPort_FigRecorder *videoInputPort;
    _Bool videoMirroringSupported;
    _Bool automaticallyAdjustsVideoMirroring;
    _Bool videoMirrored;
    _Bool videoOrientationSupported;
    long long videoOrientation;
    CDStruct_1b6d18a9 videoMinFrameDuration;
    CDStruct_1b6d18a9 videoMaxFrameDuration;
    double videoMaxScaleAndCropFactor;
    double videoScaleAndCropFactor;
    int videoRetainedBufferCountHint;
    _Bool enablesVideoStabilizationWhenAvailable;
    _Bool videoStabilizationEnabled;
    _Bool preferredVideoStabilizationMode;
}

@end

@interface AVCaptureConnection_FigRecorder : NSObject
{
    AVCaptureConnectionInternal_FigRecorder *_internal;
}

+ (id)connectionWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
+ (id)connectionWithInputPorts:(id)arg1 output:(id)arg2;
+ (void)initialize;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)sourcesFromFrontFacingCamera;
- (id)sourceDevice;
- (void)setVideoRetainedBufferCountHint:(int)arg1;
- (int)videoRetainedBufferCountHint;
- (_Bool)isVideoRetainedBufferCountHintSupported;
- (long long)activeVideoStabilizationMode;
- (void)setPreferredVideoStabilizationMode:(long long)arg1;
- (long long)preferredVideoStabilizationMode;
@property(nonatomic) _Bool enablesVideoStabilizationWhenAvailable;
@property(readonly, nonatomic, getter=isVideoStabilizationEnabled) _Bool videoStabilizationEnabled;
@property(readonly, nonatomic, getter=isVideoStabilizationSupported) _Bool supportsVideoStabilization;
@property(nonatomic) double videoScaleAndCropFactor;
@property(readonly, nonatomic) double videoMaxScaleAndCropFactor;
@property(nonatomic) CDStruct_1b6d18a9 videoMaxFrameDuration;
- (CDStruct_1b6d18a9)_videoMaxFrameDuration;
- (_Bool)isVideoMaxFrameDurationSet;
@property(readonly, nonatomic, getter=isVideoMaxFrameDurationSupported) _Bool supportsVideoMaxFrameDuration;
@property(nonatomic) CDStruct_1b6d18a9 videoMinFrameDuration;
- (void)_setVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)_videoMinFrameDuration;
- (_Bool)isVideoMinFrameDurationSet;
@property(readonly, nonatomic, getter=isVideoMinFrameDurationSupported) _Bool supportsVideoMinFrameDuration;
@property(nonatomic) long long videoOrientation;
@property(readonly, nonatomic, getter=isVideoOrientationSupported) _Bool supportsVideoOrientation;
@property(nonatomic) _Bool automaticallyAdjustsVideoMirroring;
- (void)_setVideoMirrored:(_Bool)arg1;
@property(nonatomic, getter=isVideoMirrored) _Bool videoMirrored;
@property(readonly, nonatomic, getter=isVideoMirroringSupported) _Bool supportsVideoMirroring;
- (void)updateAudioChannelsArray;
- (float)getPeakAudioLevelForChannel:(id)arg1;
- (float)getAvgAudioLevelForChannel:(id)arg1;
@property(readonly, nonatomic) NSArray *audioChannels;
- (id)mediaType;
- (_Bool)isLive;
@property(nonatomic, getter=isEnabled) _Bool enabled;
- (void)setActive:(_Bool)arg1;
@property(readonly, nonatomic, getter=isActive) _Bool active;
@property(readonly, nonatomic) NSArray *inputPorts;
@property(readonly, nonatomic) AVCaptureVideoPreviewLayer_FigRecorder *videoPreviewLayer;
@property(readonly, nonatomic) AVCaptureOutput_FigRecorder *output;
- (void)invalidate;
- (id)session;
- (void)inputPortFormatDescriptionChanged:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
- (id)initWithInputPorts:(id)arg1 output:(id)arg2;
- (void)initCommonStorage;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureDevice : NSObject
{
    AVCaptureDeviceInternal *_internal;
}

+ (void)initialize;
+ (void)requestAccessForMediaType:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (long long)authorizationStatusForMediaType:(id)arg1;
+ (id)_devices;
+ (id)deviceWithUniqueID:(id)arg1;
+ (id)defaultDeviceWithMediaType:(id)arg1;
+ (id)devices;
+ (id)devicesWithMediaType:(id)arg1;
- (CDStruct_79c71658)maxH264VideoDimensions;
- (CDStruct_79c71658)maxH264PhotoDimensions;
- (id)AVVideoSettingsForSessionPreset:(id)arg1;
- (id)availableBoxedMetadataFormatDescriptions;
- (_Bool)smileDetectionEnabled;
- (_Bool)eyeClosedDetectionEnabled;
- (_Bool)eyeDetectionEnabled;
- (void)setSmileDetectionEnabled:(_Bool)arg1;
- (void)setEyeClosedDetectionEnabled:(_Bool)arg1;
- (void)setEyeDetectionEnabled:(_Bool)arg1;
- (_Bool)isSmileDetectionSupported;
- (_Bool)isEyeClosedDetectionSupported;
- (_Bool)isEyeDetectionSupported;
- (id)supportedMetadataObjectIdentifiers;
- (void)setAutomaticallyEnablesLowLightBoostWhenAvailable:(_Bool)arg1;
- (_Bool)automaticallyEnablesLowLightBoostWhenAvailable;
- (_Bool)isLowLightBoostEnabled;
- (_Bool)isLowLightBoostSupported;
- (_Bool)isRawStillImageCaptureSupported;
- (_Bool)isVideoStabilizationSupported;
- (_Bool)isHDRSupported;
- (void)cancelVideoZoomRamp;
- (_Bool)isRampingVideoZoom;
- (void)rampToVideoZoomFactor:(double)arg1 withRate:(float)arg2;
- (void)setVideoZoomFactor:(double)arg1;
- (double)videoZoomFactor;
- (void)setContrast:(float)arg1;
- (float)contrast;
- (void)setSaturation:(float)arg1;
- (float)saturation;
- (void)setVideoHDREnabled:(_Bool)arg1;
- (_Bool)isVideoHDREnabled;
- (void)setAutomaticallyAdjustsVideoHDREnabled:(_Bool)arg1;
- (_Bool)automaticallyAdjustsVideoHDREnabled;
- (void)setImageControlMode:(long long)arg1;
- (long long)imageControlMode;
- (void)setAutomaticallyAdjustsImageControlMode:(_Bool)arg1;
- (_Bool)automaticallyAdjustsImageControlMode;
- (_Bool)isImageControlModeSupported:(long long)arg1;
- (CDStruct_d6531dd4)deviceWhiteBalanceGainsForTemperatureAndTintValues:(CDStruct_b2fbf00d)arg1;
- (CDStruct_b2fbf00d)temperatureAndTintValuesForDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1;
- (CDStruct_d6531dd4)deviceWhiteBalanceGainsForChromaticityValues:(CDStruct_b2fbf00d)arg1;
- (CDStruct_b2fbf00d)chromaticityValuesForDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1;
- (void)setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)maxWhiteBalanceGain;
- (CDStruct_d6531dd4)grayWorldDeviceWhiteBalanceGains;
- (CDStruct_d6531dd4)deviceWhiteBalanceGains;
- (_Bool)isAdjustingWhiteBalance;
- (void)setWhiteBalanceMode:(long long)arg1;
- (long long)whiteBalanceMode;
- (_Bool)isWhiteBalanceModeSupported:(long long)arg1;
- (_Bool)isAdjustingExposure;
- (void)setExposureTargetBias:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)maxExposureTargetBias;
- (float)minExposureTargetBias;
- (float)exposureTargetBias;
- (float)exposureTargetOffset;
- (void)setExposureModeCustomWithDuration:(CDStruct_1b6d18a9)arg1 ISO:(float)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (float)ISODigitalThreshold;
- (float)ISO;
- (CDStruct_1b6d18a9)exposureDuration;
- (void)setExposurePointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)exposurePointOfInterest;
- (_Bool)isExposurePointOfInterestSupported;
- (void)setExposureMode:(long long)arg1;
- (long long)exposureMode;
- (_Bool)isExposureModeSupported:(long long)arg1;
- (float)lensAperture;
- (void)setFocusModeLockedWithLensPosition:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)lensPosition;
- (void)setSmoothAutoFocusEnabled:(_Bool)arg1;
- (_Bool)isSmoothAutoFocusEnabled;
- (_Bool)isSmoothAutoFocusSupported;
- (void)setAutoFocusRangeRestriction:(long long)arg1;
- (long long)autoFocusRangeRestriction;
- (_Bool)isAutoFocusRangeRestrictionSupported;
- (void)setFocusPointOfInterest:(struct CGPoint)arg1;
- (_Bool)isAdjustingFocus;
- (struct CGPoint)focusPointOfInterest;
- (_Bool)isFocusPointOfInterestSupported;
- (void)setFocusMode:(long long)arg1;
- (long long)focusMode;
- (_Bool)isFocusModeSupported:(long long)arg1;
- (_Bool)setTorchModeOnWithLevel:(float)arg1 error:(id *)arg2;
- (void)setTorchMode:(long long)arg1;
- (long long)torchMode;
- (_Bool)isTorchActive;
- (_Bool)isTorchAvailable;
- (_Bool)isTorchModeSupported:(long long)arg1;
- (float)torchLevel;
- (_Bool)hasTorch;
- (void)setFlashMode:(long long)arg1;
- (long long)flashMode;
- (_Bool)isFlashModeSupported:(long long)arg1;
- (_Bool)isFlashActive;
- (_Bool)isFlashAvailable;
- (_Bool)hasFlash;
- (long long)position;
- (void)stopUsingDevice;
- (_Bool)startUsingDevice:(id *)arg1;
- (void)_stopUsingDevice;
- (_Bool)_startUsingDevice:(id *)arg1;
- (void)close;
- (_Bool)open:(id *)arg1;
- (_Bool)isOpen;
- (void)unlockForConfiguration;
- (_Bool)lockForConfiguration:(id *)arg1;
- (_Bool)isLockedForConfiguration;
- (struct OpaqueCMClock *)deviceClock;
- (void)_setActiveVideoMaxFrameDuration:(CDStruct_1b6d18a9)arg1;
- (_Bool)isActiveVideoMaxFrameDurationSet;
- (_Bool)isActiveVideoMinFrameDurationSet;
@property(nonatomic) CDStruct_1b6d18a9 activeVideoMaxFrameDuration;
- (void)_setActiveVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
@property(nonatomic) CDStruct_1b6d18a9 activeVideoMinFrameDuration;
@property(retain, nonatomic) AVCaptureDeviceFormat *activeFormat;
@property(readonly, nonatomic) NSArray *formats;
@property(readonly, nonatomic, getter=isConnected) _Bool connected;
- (_Bool)isInUseByAnotherApplication;
- (_Bool)isMachineReadableCodeDetectionSupported;
- (void)_setStillImageStabilizationAutomaticallyEnabled:(_Bool)arg1;
- (void)_setVideoHDREnabled:(_Bool)arg1;
- (_Bool)cachesFigCaptureSourceConfigurationChanges;
- (void)setCachesFigCaptureSourceConfigurationChanges:(_Bool)arg1;
- (_Bool)isHighDynamicRangeScene;
- (void)setHighDynamicRangeSceneDetectionEnabled:(_Bool)arg1;
- (_Bool)isHighDynamicRangeSceneDetectionEnabled;
- (_Bool)isHighDynamicRangeSceneDetectionSupported;
- (void)setProvidesStortorgetMetadata:(_Bool)arg1;
- (_Bool)providesStortorgetMetadata;
- (int)faceRectangleAngle;
- (struct CGRect)faceRectangle;
- (void)setFaceDetectionDrivenImageProcessingEnabled:(_Bool)arg1;
- (_Bool)isFaceDetectionDrivenImageProcessingEnabled;
- (_Bool)isFaceDetectionDuringVideoPreviewSupported;
- (_Bool)isFaceDetectionSupported;
- (void)setSubjectAreaChangeMonitoringEnabled:(_Bool)arg1;
- (_Bool)isSubjectAreaChangeMonitoringEnabled;
- (_Bool)supportsAVCaptureSessionPreset:(id)arg1;
- (_Bool)hasMediaType:(id)arg1;
@property(readonly, nonatomic) NSString *localizedName;
@property(readonly, nonatomic) NSString *modelID;
@property(readonly, nonatomic) NSString *uniqueID;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureDeviceControlRequest : NSObject
{
    CDUnknownBlockType _completionBlock;
    int _requestID;
    int _errorCode;
}

+ (id)deviceControlRequestWithCompletionBlock:(CDUnknownBlockType)arg1;
@property(nonatomic) int errorCode; // @synthesize errorCode=_errorCode;
@property(readonly, nonatomic) int requestID; // @synthesize requestID=_requestID;
@property(readonly, copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
- (void)dealloc;
- (id)_initWithCompletionBlock:(CDUnknownBlockType)arg1;

@end

@interface AVCaptureDeviceControlRequestQueue : NSObject
{
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSMutableArray *_mutableArray;
}

- (id)head;
- (id)dequeue;
- (void)enqueueRequest:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureDeviceFakeBiasControlRequest : AVCaptureDeviceControlRequest
{
    float _fakeBias;
    CDStruct_1b6d18a9 _fakeBiasCompletionTime;
}

@property(nonatomic) CDStruct_1b6d18a9 fakeBiasCompletionTime; // @synthesize fakeBiasCompletionTime=_fakeBiasCompletionTime;
@property(nonatomic) float fakeBias; // @synthesize fakeBias=_fakeBias;

@end

@interface AVCaptureDeviceFormat : NSObject
{
    AVCaptureDeviceFormatInternal *_internal;
}

+ (void)initialize;
@property(readonly, nonatomic) long long autoFocusSystem;
@property(readonly, nonatomic) CDStruct_1b6d18a9 maxExposureDuration;
@property(readonly, nonatomic) CDStruct_1b6d18a9 minExposureDuration;
@property(readonly, nonatomic) float maxISO;
@property(readonly, nonatomic) float minISO;
- (id)figCaptureSourceFormat;
- (id)AVCaptureSessionPresets;
- (CDStruct_79c71658)previewDimensions;
- (CDStruct_79c71658)sensorDimensions;
- (id)vtScalingMode;
- (_Bool)isDefaultActiveFormat;
- (CDStruct_1b6d18a9)defaultActiveMaxFrameDuration;
- (CDStruct_1b6d18a9)defaultActiveMinFrameDuration;
- (int)supportedFormatsArrayIndex;
- (_Bool)needsPhotoPreviewDPCC;
- (_Bool)supportsHighProfileH264;
- (_Bool)isHighResPhotoFormat;
- (_Bool)isPhotoFormat;
- (id)videoZoomSupportedUpscaleStages;
- (id)videoZoomSupportedDownscaleStages;
- (_Bool)isExperimental;
- (int)rawBitDepth;
- (_Bool)isSISSupported;
- (_Bool)supportsDynamicCrop;
- (_Bool)supportsLowLightBoost;
- (_Bool)prefersVideoHDREnabledForSessionPreset:(id)arg1;
- (int)supportedStabilizationMethod;
- (_Bool)supportsHighResolutionStillImageOutput;
@property(readonly, nonatomic) CDStruct_79c71658 highResolutionStillImageDimensions;
- (_Bool)isVideoStabilizationModeSupported:(long long)arg1;
@property(readonly, nonatomic, getter=isVideoHDRSupported) _Bool videoHDRSupported;
@property(readonly, nonatomic, getter=isVideoStabilizationSupported) _Bool videoStabilizationSupported;
@property(readonly, nonatomic) double videoZoomFactorUpscaleThreshold;
@property(readonly, nonatomic) double videoMaxZoomFactor;
@property(readonly, nonatomic) float videoFieldOfView;
@property(readonly, nonatomic, getter=isVideoBinned) _Bool videoBinned;
- (CDStruct_1b6d18a9)highestSupportedVideoFrameDuration;
- (CDStruct_1b6d18a9)lowestSupportedVideoFrameDuration;
@property(readonly, nonatomic) NSArray *videoSupportedFrameRateRanges;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *formatDescription;
@property(readonly, nonatomic) NSString *mediaType;
- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (id)initWithFigCaptureSourceFormat:(id)arg1;
- (id)description;
- (id)_stringForFormatDescription:(struct opaqueCMFormatDescription *)arg1 frameRateRanges:(id)arg2;

@end

@interface AVCaptureDeviceFormatInternal : NSObject
{
    FigCaptureSourceFormat *sourceFormat;
    NSArray *videoSupportedFrameRateRanges;
    CDStruct_1b6d18a9 defaultActiveMinFrameDuration;
    CDStruct_1b6d18a9 defaultActiveMaxFrameDuration;
}

@end

@interface AVCaptureDeviceFormatInternal_FigRecorder : NSObject
{
    NSString *mediaType;
    NSDictionary *formatDictionary;
    struct opaqueCMFormatDescription *formatDescription;
    NSArray *videoSupportedFrameRateRanges;
    CDStruct_1b6d18a9 defaultActiveMinFrameDuration;
    CDStruct_1b6d18a9 defaultActiveMaxFrameDuration;
}

@end

@interface AVCaptureDeviceFormat_FigRecorder : NSObject
{
    AVCaptureDeviceFormatInternal_FigRecorder *_internal;
}

+ (id)deviceFormatWithDictionary:(id)arg1;
+ (void)initialize;
- (id)vtScalingMode;
- (_Bool)isDefaultActiveFormat;
- (CDStruct_1b6d18a9)defaultActiveMaxFrameDuration;
- (CDStruct_1b6d18a9)defaultActiveMinFrameDuration;
- (int)visCompanionSupportedFormatsArrayIndex;
- (int)supportedFormatsArrayIndex;
- (_Bool)usesPreviewSizedThumbnail;
- (_Bool)needsPhotoPreviewDPCC;
- (_Bool)needsPhotoTNR;
- (_Bool)supportsHighProfileH264;
- (_Bool)isHighResPhotoFormat;
- (_Bool)isPhotoFormat;
- (CDStruct_79c71658)sensorDimensions;
- (CDStruct_79c71658)outputDimensions;
- (id)formatDictionary;
- (id)videoZoomSupportedUpscaleStages;
- (id)videoZoomSupportedDownscaleStages;
- (_Bool)isExperimental;
- (int)rawBitDepth;
- (_Bool)isSISSupported;
- (_Bool)supportsDynamicCrop;
- (_Bool)supportsVideoZoom;
- (_Bool)supportsLowLightBoost;
- (int)supportedStabilizationMethod;
- (_Bool)isVideoStabilizationModeSupported:(long long)arg1;
@property(readonly, nonatomic, getter=isVideoStabilizationSupported) _Bool videoStabilizationSupported;
@property(readonly, nonatomic) double videoZoomFactorUpscaleThreshold;
@property(readonly, nonatomic) double videoMaxZoomFactor;
- (struct CGSize)_maxVideoDimensions;
@property(readonly, nonatomic) float videoFieldOfView;
@property(readonly, nonatomic, getter=isVideoBinned) _Bool videoBinned;
- (CDStruct_1b6d18a9)highestSupportedVideoFrameDuration;
- (CDStruct_1b6d18a9)lowestSupportedVideoFrameDuration;
@property(readonly, nonatomic) NSArray *videoSupportedFrameRateRanges;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *formatDescription;
@property(readonly, nonatomic) NSString *mediaType;
- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)description;
- (id)_stringForFormatDescription:(struct opaqueCMFormatDescription *)arg1 frameRateRanges:(id)arg2;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureInput : NSObject
{
    AVCaptureInputInternal *_inputInternal;
}

+ (void)initialize;
- (void)performFigCaptureSessionOperationSafelyUsingBlock:(CDUnknownBlockType)arg1;
- (void)detachSafelyFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)detachFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachSafelyToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (struct OpaqueCMClock *)clock;
- (void)setSession:(id)arg1;
- (id)session;
@property(readonly, nonatomic) NSArray *ports;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureDeviceInput : AVCaptureInput
{
    AVCaptureDeviceInputInternal *_internal;
}

+ (id)deviceInputWithDevice:(id)arg1 error:(id *)arg2;
+ (id)alloc;
+ (void)initialize;
- (void)_sourceFormatDidChange:(struct opaqueCMFormatDescription *)arg1;
- (void)_handleNotification:(id)arg1 payload:(id)arg2;
- (int)_requestCameraRecordPermissionForDevice:(id)arg1;
- (_Bool)_authorizedToUseDevice:(id)arg1;
- (struct OpaqueCMClock *)clock;
- (id)ports;
- (id)notReadyError;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)detachSafelyFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachSafelyToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
@property(readonly, nonatomic) AVCaptureDevice *device;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithDevice:(id)arg1 error:(id *)arg2;

@end

@interface AVCaptureDeviceInputInternal : NSObject
{
    AVCaptureDevice *device;
    NSArray *ports;
    _Bool ready;
    _Bool authorizedForCamera;
    AVWeakReference *weakReference;
    AVWeakKeyValueObserverProxy *KVOProxy;
}

- (void)dealloc;

@end

@interface AVCaptureDeviceInputInternal_FigRecorder : NSObject
{
    AVCaptureDevice_FigRecorder *_device;
    NSArray *_ports;
    _Bool _ready;
    _Bool _authorizedForCamera;
}

@end

@interface AVCaptureInput_FigRecorder : NSObject
{
    AVCaptureInputInternal_FigRecorder *_inputInternal;
}

- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (struct OpaqueCMClock *)clock;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)didStartForSession:(id)arg1;
- (void)willStartForSession:(id)arg1;
- (id)notReadyError;
- (void)setSession:(id)arg1;
- (id)session;
@property(readonly, nonatomic) NSArray *ports;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureDeviceInput_FigRecorder : AVCaptureInput_FigRecorder
{
    AVCaptureDeviceInputInternal_FigRecorder *_internal;
}

+ (id)deviceInputWithDevice:(id)arg1 error:(id *)arg2;
+ (void)initialize;
- (void)_checkForFigCameraAccess;
- (int)_requestCameraRecordPermission;
- (_Bool)_authorizedToUseDevice:(id)arg1;
- (struct OpaqueCMClock *)clock;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)didStartForSession:(id)arg1;
- (void)willStartForSession:(id)arg1;
- (void)setSession:(id)arg1;
- (id)ports;
- (id)notReadyError;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_setDevice:(id)arg1;
@property(readonly, nonatomic) AVCaptureDevice_FigRecorder *device;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithDevice:(id)arg1 error:(id *)arg2;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureDeviceInternal : NSObject
{
    int openRefCount;
    int configLockRefCount;
    int configLockPid;
    _Bool usingDevice;
    AVCaptureDeviceInput *activeInput;
}

@end

@interface AVCaptureDeviceInternal_FigRecorder : NSObject
{
    int _openRefCount;
    int _configLockRefCount;
    int _configLockPid;
    _Bool _usingDevice;
    AVCaptureDeviceInput_FigRecorder *_activeInput;
}

@end

@interface AVCaptureDevice_FigRecorder : NSObject
{
    AVCaptureDeviceInternal_FigRecorder *_internal;
}

+ (void)initialize;
+ (void)requestAccessForMediaType:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (long long)authorizationStatusForMediaType:(id)arg1;
+ (id)_devices;
+ (id)deviceWithUniqueID:(id)arg1;
+ (id)defaultDeviceWithMediaType:(id)arg1;
+ (id)devices;
+ (id)devicesWithMediaType:(id)arg1;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (_Bool)doesHandleNotification:(id)arg1;
- (void)setAutomaticallyEnablesLowLightBoostWhenAvailable:(_Bool)arg1;
- (_Bool)automaticallyEnablesLowLightBoostWhenAvailable;
- (_Bool)isLowLightBoostEnabled;
- (_Bool)isLowLightBoostSupported;
- (_Bool)isSISSupported;
- (_Bool)HDRUsesPreBracketedFrameAsEV0;
- (_Bool)isHDRSupported;
- (void)cancelVideoZoomRamp;
- (_Bool)isRampingVideoZoom;
- (void)rampToVideoZoomFactor:(double)arg1 withRate:(float)arg2;
- (void)setVideoZoomFactor:(double)arg1;
- (double)videoZoomFactor;
- (void)setContrast:(float)arg1;
- (float)contrast;
- (void)setSaturation:(float)arg1;
- (float)saturation;
- (void)setImageControlMode:(long long)arg1;
- (long long)imageControlMode;
- (void)setAutomaticallyAdjustsImageControlMode:(_Bool)arg1;
- (_Bool)automaticallyAdjustsImageControlMode;
- (_Bool)isImageControlModeSupported:(long long)arg1;
- (_Bool)isAdjustingWhiteBalance;
- (void)setWhiteBalanceTemperature:(float)arg1;
- (float)whiteBalanceTemperature;
- (void)setWhiteBalanceMode:(long long)arg1;
- (long long)whiteBalanceMode;
- (_Bool)isWhiteBalanceModeSupported:(long long)arg1;
- (_Bool)isAdjustingExposure;
- (void)setExposurePointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)exposurePointOfInterest;
- (_Bool)isExposurePointOfInterestSupported;
- (void)setAutoExposureBias:(float)arg1;
- (float)autoExposureBias;
- (void)setManualExposureSupportEnabled:(_Bool)arg1;
- (_Bool)isManualExposureSupportEnabled;
- (void)setExposureGain:(float)arg1;
- (float)exposureGain;
- (void)setExposureDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)exposureDuration;
- (void)setExposureMode:(long long)arg1;
- (long long)exposureMode;
- (_Bool)isExposureModeSupported:(long long)arg1;
- (void)setSmoothAutoFocusEnabled:(_Bool)arg1;
- (_Bool)isSmoothAutoFocusEnabled;
- (_Bool)isSmoothAutoFocusSupported;
- (void)setManualFocusSupportEnabled:(_Bool)arg1;
- (_Bool)isManualFocusSupportEnabled;
- (void)setFocusPosition:(float)arg1;
- (float)focusPosition;
- (void)setAutoFocusRangeRestriction:(long long)arg1;
- (long long)autoFocusRangeRestriction;
- (_Bool)isAutoFocusRangeRestrictionSupported;
- (void)setFocusPointOfInterest:(struct CGPoint)arg1;
- (_Bool)isAdjustingFocus;
- (struct CGPoint)focusPointOfInterest;
- (_Bool)isFocusPointOfInterestSupported;
- (void)setFocusMode:(long long)arg1;
- (long long)focusMode;
- (_Bool)isFocusModeSupported:(long long)arg1;
- (_Bool)setTorchModeOnWithLevel:(float)arg1 error:(id *)arg2;
- (void)setTorchMode:(long long)arg1;
- (long long)torchMode;
- (_Bool)isTorchActive;
- (_Bool)isTorchAvailable;
- (_Bool)isTorchModeSupported:(long long)arg1;
- (float)torchLevel;
- (_Bool)hasTorch;
- (void)setFlashMode:(long long)arg1;
- (long long)flashMode;
- (_Bool)isFlashModeSupported:(long long)arg1;
- (_Bool)isFlashActive;
- (_Bool)isFlashAvailable;
- (_Bool)hasFlash;
- (long long)position;
- (void)stopUsingDevice;
- (_Bool)startUsingDevice:(id *)arg1;
- (void)_stopUsingDevice;
- (_Bool)_startUsingDevice:(id *)arg1;
- (void)close;
- (_Bool)open:(id *)arg1;
- (_Bool)isOpen;
- (void)unlockForConfiguration;
- (_Bool)lockForConfiguration:(id *)arg1;
- (_Bool)isLockedForConfiguration;
- (struct OpaqueCMClock *)deviceClock;
- (void)_setActiveFormatAndFrameRatesForResolvedOptions:(id)arg1 sendingFrameRatesToFig:(_Bool)arg2;
- (void)_setActiveVideoMaxFrameDuration:(CDStruct_1b6d18a9)arg1;
- (_Bool)isActiveVideoMaxFrameDurationSet;
- (_Bool)isActiveVideoMinFrameDurationSet;
@property(nonatomic) CDStruct_1b6d18a9 activeVideoMaxFrameDuration;
- (void)_setActiveVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
@property(nonatomic) CDStruct_1b6d18a9 activeVideoMinFrameDuration;
@property(retain, nonatomic) AVCaptureDeviceFormat_FigRecorder *activeFormat;
@property(readonly, nonatomic) NSArray *formats;
@property(readonly, nonatomic, getter=isConnected) _Bool connected;
- (_Bool)isInUseByAnotherApplication;
- (_Bool)isMachineReadableCodeDetectionSupported;
- (_Bool)isHighDynamicRangeScene;
- (void)setHighDynamicRangeSceneDetectionEnabled:(_Bool)arg1;
- (_Bool)isHighDynamicRangeSceneDetectionEnabled;
- (_Bool)isHighDynamicRangeSceneDetectionSupported;
- (void)setFaceDetectionDebugMetadataReportingEnabled:(_Bool)arg1;
- (_Bool)isFaceDetectionDebugMetadataReportingEnabled;
- (int)faceRectangleAngle;
- (struct CGRect)faceRectangle;
- (void)setFaceDetectionDrivenImageProcessingEnabled:(_Bool)arg1;
- (_Bool)isFaceDetectionDrivenImageProcessingEnabled;
- (_Bool)isFaceDetectionDuringVideoPreviewSupported;
- (_Bool)isFaceDetectionSupported;
- (void)setSubjectAreaChangeMonitoringEnabled:(_Bool)arg1;
- (_Bool)isSubjectAreaChangeMonitoringEnabled;
- (void)_sessionDidStart;
- (void)_sessionWillStart;
- (void)setActiveInput:(id)arg1;
- (id)activeInput;
- (void)removeInput:(id)arg1;
- (_Bool)addInput:(id)arg1;
- (id)session;
- (_Bool)supportsAVCaptureSessionPreset:(id)arg1;
- (_Bool)hasMediaType:(id)arg1;
@property(readonly, nonatomic) NSString *localizedName;
@property(readonly, nonatomic) NSString *modelID;
@property(readonly, nonatomic) NSString *uniqueID;
- (id)description;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureFigAudioDevice : AVCaptureDevice
{
    NSObject<OS_dispatch_queue> *_fcsQueue;
    struct OpaqueFigCaptureSource *_fcs;
    NSDictionary *_attributes;
    _Bool _levelMeteringEnabled;
    _Bool _isConnected;
    NSString *_localizedName;
    AVWeakReference *_weakReference;
}

+ (id)_devices;
+ (void)initialize;
+ (id)alloc;
- (void)_handleNotification:(struct __CFString *)arg1 payload:(id)arg2;
- (void)audioInputDeviceLocalizedNameDidChangeHandler:(id)arg1;
- (void)audioInputDevicesDidChangeHandler:(id)arg1;
- (id)_copyFigCaptureSourceProperty:(struct __CFString *)arg1;
- (struct OpaqueCMClock *)deviceClock;
- (_Bool)supportsAVCaptureSessionPreset:(id)arg1;
- (void)stopUsingDevice;
- (_Bool)startUsingDevice:(id *)arg1;
- (_Bool)isConnected;
- (_Bool)isInUseByAnotherApplication;
- (_Bool)hasMediaType:(id)arg1;
- (id)localizedName;
- (id)modelID;
- (id)uniqueID;
- (void)_setFigCaptureSource:(struct OpaqueFigCaptureSource *)arg1;
- (struct OpaqueFigCaptureSource *)figCaptureSource;
- (void)dealloc;
- (id)_initWithFigCaptureSource:(struct OpaqueFigCaptureSource *)arg1;
- (id)init;

@end

@interface AVCaptureFigAudioDevice_FigRecorder : AVCaptureDevice_FigRecorder
{
    NSDictionary *_deviceProperties;
    _Bool _levelMeteringEnabled;
    _Bool _isConnected;
    NSString *_localizedName;
    struct OpaqueCMClock *_deviceClock;
}

+ (id)_devices;
- (struct OpaqueCMClock *)deviceClock;
- (void)audioInputDeviceLocalizedNameDidChangeHandler:(id)arg1;
- (void)audioInputDevicesDidChangeHandler:(id)arg1;
- (_Bool)supportsAVCaptureSessionPreset:(id)arg1;
- (id)devicePropertiesDictionary;
- (void)stopUsingDevice;
- (_Bool)startUsingDevice:(id *)arg1;
- (_Bool)isConnected;
- (_Bool)isInUseByAnotherApplication;
- (_Bool)hasMediaType:(id)arg1;
- (id)localizedName;
- (id)modelID;
- (id)uniqueID;
- (void)dealloc;
- (id)initWithProperties:(id)arg1;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureFigVideoDevice : AVCaptureDevice
{
    NSObject<OS_dispatch_queue> *_fcsQueue;
    struct OpaqueFigCaptureSource *_fcs;
    NSDictionary *_fcsAttributes;
    NSObject<OS_dispatch_queue> *_devicePropsQueue;
    NSString *_fcsUID;
    long long _position;
    NSString *_localizedName;
    NSArray *_formats;
    AVCaptureDeviceFormat *_activeFormat;
    CDStruct_1b6d18a9 _activeMinFrameDuration;
    _Bool _activeMinFrameDurationSetByClient;
    CDStruct_1b6d18a9 _activeMaxFrameDuration;
    _Bool _activeMaxFrameDurationSetByClient;
    _Bool _cachesFigCaptureSourceConfigurationChanges;
    long long _focusMode;
    struct CGPoint _focusPointOfInterest;
    float _lensPositionKVO;
    _Bool _adjustingFocus;
    long long _autoFocusRangeRestriction;
    _Bool _smoothAutoFocusEnabled;
    long long _exposureMode;
    CDStruct_1b6d18a9 _exposureDurationKVO;
    float _ISOKVO;
    float _exposureTargetBias;
    float _exposureTargetOffsetKVO;
    struct CGPoint _exposurePointOfInterest;
    _Bool _adjustingExposure;
    _Bool _waitingForExposureAdjustmentBeforeLocking;
    long long _wbMode;
    CDStruct_d6531dd4 _deviceWhiteBalanceGainsKVO;
    CDStruct_d6531dd4 _grayWorldDeviceWhiteBalanceGainsKVO;
    _Bool _adjustingWB;
    unsigned long long _wbCalibrationCount;
    CDStruct_b2fbf00d *_wbCalibrationTemperatures;
    double **_wbCalibrationMatrices;
    double _wbLastTargetMix;
    double _wbSeedMix;
    double _wbSeedScale;
    _Bool _providesStortorgetMetadata;
    _Bool _automaticallyAdjustsImageControlMode;
    AVCaptureDeviceControlRequestQueue *_manualFocusControlRequests;
    AVCaptureDeviceControlRequestQueue *_manualExposureControlRequests;
    AVCaptureDeviceControlRequestQueue *_biasedExposureControlRequests;
    AVCaptureDeviceControlRequestQueue *_manualWhiteBalanceControlRequests;
    CDStruct_1b6d18a9 _lastCustomExposureDuration;
    float _lastCustomExposureISO;
    long long _imageControlMode;
    long long _flashMode;
    _Bool _flashActive;
    _Bool _flashAvailable;
    long long _torchMode;
    _Bool _torchActive;
    float _torchLevel;
    _Bool _torchAvailable;
    _Bool _isConnected;
    _Bool _subjectMonitoringEnabled;
    _Bool _faceDetectionDrivenImageProcessingEnabled;
    struct CGRect _faceRectangle;
    int _faceRectangleAngle;
    _Bool _automaticallyEnablesLowLightBoostWhenAvailable;
    _Bool _lowLightBoostEnabled;
    _Bool _highDynamicRangeSceneDetectionEnabled;
    _Bool _automaticallyAdjustsVideoHDREnabled;
    _Bool _videoHDREnabled;
    _Bool _sceneIsHighDynamicRange;
    float _saturation;
    float _contrast;
    long long _videoZoomDownscaleStageHint;
    long long _videoZoomUpscaleStageHint;
    float _videoZoomFactor;
    float _videoZoomRampTarget;
    int _videoZoomRampCounter;
    float _videoZoomRampAcceleration;
    _Bool _videoZoomDrawOverlay;
    AVWeakReference *_weakReference;
    NSMutableArray *_captureSourceSupportedMetadata;
    NSDictionary *_supportedOptionalFaceDetectionFeatures;
    _Bool _eyeDetectionEnabled;
    _Bool _eyeClosedDetectionEnabled;
    _Bool _smileDetectionEnabled;
    NSArray *_availableBoxedMetadataFormatDescriptions;
    NSDictionary *_sessionPresetCompressionSettings;
    NSDictionary *_h264EncoderLimitations;
    NSObject<OS_dispatch_queue> *_observedHighFrequencyPropertiesQueue;
    NSMutableDictionary *_observedHighFrequencyPropertyCounts;
    NSMutableDictionary *_propertyToFigCaptureSourcePropertyMap;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (_Bool)_cameraAccessIsEnabled;
+ (id)_devices;
+ (id)_newFigCaptureSources;
+ (void)initialize;
+ (id)alloc;
- (void)_performBlockOnMainThread:(CDUnknownBlockType)arg1;
- (void)_drainManualControlRequestQueue:(id)arg1;
- (void)_drainManualControlRequestQueues;
- (void)_handleManualControlCompletionForRequestQueue:(id)arg1 withPayload:(id)arg2;
- (void)_handleNotification:(struct __CFString *)arg1 payload:(id)arg2;
- (id)_copyFormatsArray;
- (int)_setFigCaptureSourceProperty:(struct __CFString *)arg1 withValue:(id)arg2;
- (id)_copyFigCaptureSourceProperty:(struct __CFString *)arg1;
- (CDStruct_79c71658)maxH264VideoDimensions;
- (CDStruct_79c71658)maxH264PhotoDimensions;
- (id)AVVideoSettingsForSessionPreset:(id)arg1;
- (id)deviceFormatForSessionPreset:(id)arg1 videoFormat:(int)arg2;
- (struct OpaqueCMClock *)deviceClock;
- (id)availableBoxedMetadataFormatDescriptions;
- (_Bool)smileDetectionEnabled;
- (_Bool)eyeClosedDetectionEnabled;
- (_Bool)eyeDetectionEnabled;
- (id)_faceDetectionConfigurationDictionary;
- (int)_setFaceDetectionFeatureEnabled:(_Bool)arg1 enabledState:(_Bool *)arg2;
- (void)setSmileDetectionEnabled:(_Bool)arg1;
- (void)setEyeClosedDetectionEnabled:(_Bool)arg1;
- (void)setEyeDetectionEnabled:(_Bool)arg1;
- (id)_supportedOptionalFaceDetectionFeaturesDictionary;
- (_Bool)isSmileDetectionSupported;
- (_Bool)isEyeClosedDetectionSupported;
- (_Bool)isEyeDetectionSupported;
- (id)supportedMetadataObjectIdentifiers;
- (void)setAutomaticallyEnablesLowLightBoostWhenAvailable:(_Bool)arg1;
- (_Bool)automaticallyEnablesLowLightBoostWhenAvailable;
- (void)_setLowLightBoostEnabled:(_Bool)arg1;
- (_Bool)isLowLightBoostEnabled;
- (_Bool)isLowLightBoostSupported;
- (_Bool)isVideoStabilizationSupported;
- (_Bool)isRawStillImageCaptureSupported;
- (void)_setStillImageStabilizationAutomaticallyEnabled:(_Bool)arg1;
- (_Bool)isSISSupported;
- (void)_setVideoHDREnabled:(_Bool)arg1;
- (void)setVideoHDREnabled:(_Bool)arg1;
- (_Bool)isVideoHDREnabled;
- (void)setAutomaticallyAdjustsVideoHDREnabled:(_Bool)arg1;
- (_Bool)automaticallyAdjustsVideoHDREnabled;
- (_Bool)isHDRSupported;
- (void)cancelVideoZoomRamp;
- (_Bool)isRampingVideoZoom;
- (void)rampToVideoZoomFactor:(double)arg1 withRate:(float)arg2;
- (void)_setVideoZoomFactor:(double)arg1;
- (void)setVideoZoomFactor:(double)arg1;
- (double)videoZoomFactor;
- (void)setVideoZoomUpscaleStageHint:(long long)arg1;
- (long long)videoZoomUpscaleStageHint;
- (void)setVideoZoomDownscaleStageHint:(long long)arg1;
- (long long)videoZoomDownscaleStageHint;
- (void)setVideoZoomDrawOverlay:(_Bool)arg1;
- (_Bool)videoZoomDrawOverlay;
- (void)setVideoZoomRampAcceleration:(float)arg1;
- (float)videoZoomRampAcceleration;
- (void)setContrast:(float)arg1;
- (float)contrast;
- (void)setSaturation:(float)arg1;
- (float)saturation;
- (_Bool)isMachineReadableCodeDetectionSupported;
- (void)setHighDynamicRangeSceneDetectionEnabled:(_Bool)arg1;
- (void)_setHighDynamicRangeScene:(_Bool)arg1;
- (_Bool)isHighDynamicRangeScene;
- (_Bool)isHighDynamicRangeSceneDetectionEnabled;
- (_Bool)isHighDynamicRangeSceneDetectionSupported;
- (int)faceRectangleAngle;
- (struct CGRect)faceRectangle;
- (void)setFaceDetectionDrivenImageProcessingEnabled:(_Bool)arg1;
- (_Bool)isFaceDetectionDrivenImageProcessingEnabled;
- (_Bool)isFaceDetectionDuringVideoPreviewSupported;
- (_Bool)isFaceDetectionSupported;
- (void)_setImageControlMode:(long long)arg1;
- (void)setImageControlMode:(long long)arg1;
- (long long)imageControlMode;
- (void)setAutomaticallyAdjustsImageControlMode:(_Bool)arg1;
- (_Bool)automaticallyAdjustsImageControlMode;
- (_Bool)isImageControlModeSupported:(long long)arg1;
- (void)setProvidesStortorgetMetadata:(_Bool)arg1;
- (_Bool)providesStortorgetMetadata;
- (void)setSubjectAreaChangeMonitoringEnabled:(_Bool)arg1;
- (_Bool)isSubjectAreaChangeMonitoringEnabled;
- (int)_setTorchMode:(long long)arg1 withLevel:(float)arg2;
- (_Bool)setTorchModeOnWithLevel:(float)arg1 error:(id *)arg2;
- (void)setTorchMode:(long long)arg1;
- (long long)torchMode;
- (void)_setTorchAvailable:(_Bool)arg1;
- (_Bool)isTorchAvailable;
- (_Bool)isTorchModeSupported:(long long)arg1;
- (void)_setTorchLevel:(float)arg1;
- (float)torchLevel;
- (void)_setTorchActive:(_Bool)arg1;
- (_Bool)isTorchActive;
- (_Bool)hasTorch;
- (void)setFlashMode:(long long)arg1;
- (long long)flashMode;
- (void)_setFlashAvailable:(_Bool)arg1;
- (_Bool)isFlashAvailable;
- (void)_setFlashActive:(_Bool)arg1;
- (_Bool)isFlashActive;
- (_Bool)isFlashModeSupported:(long long)arg1;
- (_Bool)hasFlash;
- (CDStruct_d6531dd4)deviceWhiteBalanceGainsForTemperatureAndTintValues:(CDStruct_b2fbf00d)arg1;
- (CDStruct_b2fbf00d)temperatureAndTintValuesForDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1;
- (CDStruct_d6531dd4)deviceWhiteBalanceGainsForChromaticityValues:(CDStruct_b2fbf00d)arg1;
- (CDStruct_b2fbf00d)chromaticityValuesForDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1;
- (CDStruct_b2fbf00d)_chromaticityValuesForDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1 atMix:(double)arg2;
- (double)_predictedMixForGains:(CDStruct_d6531dd4)arg1;
- (CDStruct_d6531dd4)_deviceWhiteBalanceGainsForChromaticityValues:(CDStruct_b2fbf00d)arg1 temperature:(float)arg2;
- (int)_setWhiteBalanceWithMode:(long long)arg1 gains:(CDStruct_d6531dd4)arg2 requestID:(int)arg3;
- (void)setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:(CDStruct_d6531dd4)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)_ensureWhiteBalanceCalibrationUnpacked;
- (float)maxWhiteBalanceGain;
- (CDStruct_d6531dd4)grayWorldDeviceWhiteBalanceGains;
- (CDStruct_d6531dd4)deviceWhiteBalanceGains;
- (void)setWhiteBalanceMode:(long long)arg1;
- (long long)whiteBalanceMode;
- (_Bool)isWhiteBalanceModeSupported:(long long)arg1;
- (void)_setAdjustingWhiteBalance:(_Bool)arg1;
- (_Bool)isAdjustingWhiteBalance;
- (void)setExposurePointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)exposurePointOfInterest;
- (_Bool)isExposurePointOfInterestSupported;
- (float)exposureTargetOffset;
- (void)setExposureTargetBias:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)exposureTargetBias;
- (float)maxExposureTargetBias;
- (float)minExposureTargetBias;
- (void)setExposureModeCustomWithDuration:(CDStruct_1b6d18a9)arg1 ISO:(float)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (float)ISO;
- (float)ISODigitalThreshold;
- (CDStruct_1b6d18a9)exposureDuration;
- (void)setExposureMode:(long long)arg1;
- (long long)exposureMode;
- (int)_setExposureWithMode:(long long)arg1 duration:(CDStruct_1b6d18a9)arg2 ISO:(float)arg3 requestID:(int)arg4 newMaxFrameDuration:(CDStruct_1b6d18a9 *)arg5;
- (_Bool)isExposureModeSupported:(long long)arg1;
- (void)_setAdjustingExposure:(_Bool)arg1;
- (_Bool)isAdjustingExposure;
- (float)lensAperture;
- (void)setSmoothAutoFocusEnabled:(_Bool)arg1;
- (_Bool)isSmoothAutoFocusEnabled;
- (_Bool)isSmoothAutoFocusSupported;
- (void)setFocusModeLockedWithLensPosition:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (float)lensPosition;
- (void)setAutoFocusRangeRestriction:(long long)arg1;
- (long long)autoFocusRangeRestriction;
- (_Bool)isAutoFocusRangeRestrictionSupported;
- (void)_setAdjustingFocus:(_Bool)arg1;
- (_Bool)isAdjustingFocus;
- (void)setFocusPointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)focusPointOfInterest;
- (_Bool)isFocusPointOfInterestSupported;
- (void)setFocusMode:(long long)arg1;
- (long long)focusMode;
- (int)_setFocusWithMode:(long long)arg1 lensPosition:(float)arg2 requestID:(int)arg3;
- (_Bool)isFocusModeSupported:(long long)arg1;
- (long long)position;
- (_Bool)isConnected;
- (_Bool)isInUseByAnotherApplication;
- (_Bool)cachesFigCaptureSourceConfigurationChanges;
- (void)setCachesFigCaptureSourceConfigurationChanges:(_Bool)arg1;
- (_Bool)isActiveVideoMaxFrameDurationSet;
- (_Bool)isActiveVideoMinFrameDurationSet;
- (void)_setActiveVideoMaxFrameDuration:(CDStruct_1b6d18a9)arg1;
- (void)setActiveVideoMaxFrameDuration:(CDStruct_1b6d18a9)arg1;
- (int)_setActiveVideoMaxFrameDurationInternal:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)activeVideoMaxFrameDuration;
- (void)_setActiveVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (void)setActiveVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (int)_setActiveVideoMinFrameDurationInternal:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)activeVideoMinFrameDuration;
- (void)setActiveFormat:(id)arg1;
- (id)activeFormat;
- (id)formats;
- (void)unlockForConfiguration;
- (_Bool)lockForConfiguration:(id *)arg1;
- (_Bool)isLockedForConfiguration;
- (_Bool)supportsAVCaptureSessionPreset:(id)arg1;
- (_Bool)hasMediaType:(id)arg1;
- (id)localizedName;
- (id)modelID;
- (id)uniqueID;
- (void)_setFigCaptureSource:(struct OpaqueFigCaptureSource *)arg1;
- (struct OpaqueFigCaptureSource *)figCaptureSource;
- (_Bool)_hasKeyValueObserversForHighFrequencyProperty:(id)arg1;
- (void)_updateFigCaptureSourceObserverCounts;
- (void)_decrementObserverCountForHighFrequencyProperty:(id)arg1;
- (void)_incrementObserverCountForHighFrequencyProperty:(id)arg1;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void *)arg3;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)init;
- (id)_initWithFigCaptureSource:(struct OpaqueFigCaptureSource *)arg1;

@end

@interface AVCaptureFigVideoDevice_FigRecorder : AVCaptureDevice_FigRecorder <MCProfileConnectionObserver>
{
    NSDictionary *_deviceProperties;
    NSDictionary *_sensorProperties;
    AVCaptureDeviceFormat_FigRecorder *_activeFormat;
    CDStruct_1b6d18a9 _activeMinFrameDuration;
    _Bool _activeMinFrameDurationSetByClient;
    CDStruct_1b6d18a9 _activeMaxFrameDuration;
    _Bool _activeMaxFrameDurationSetByClient;
    long long _focusMode;
    struct CGPoint _focusPointOfInterest;
    float _focusPosition;
    _Bool _manualFocusSupportEnabled;
    int _focusInFlightCount;
    _Bool _adjustingFocus;
    long long _autoFocusRangeRestriction;
    _Bool _smoothAutoFocusEnabled;
    long long _exposureMode;
    CDStruct_1b6d18a9 _exposureDuration;
    float _exposureGain;
    _Bool _manualExposureSupportEnabled;
    float _autoExposureBias;
    struct CGPoint _exposurePointOfInterest;
    _Bool _adjustingExposure;
    long long _wbMode;
    float _whiteBalanceTemperature;
    _Bool _adjustingWB;
    _Bool _automaticallyAdjustsImageControlMode;
    long long _imageControlMode;
    long long _pendingImageControlMode;
    long long _flashMode;
    _Bool _flashActive;
    _Bool _flashAvailable;
    long long _torchMode;
    _Bool _torchActive;
    float _torchLevel;
    _Bool _torchAvailable;
    NSObject<OS_dispatch_queue> *_torchAppsSerialQueue;
    NSObject<OS_dispatch_source> *_torchAppsKillTimer;
    struct OpaqueCMBaseObject *_recorderForTorchApps;
    _Bool _isConnected;
    _Bool _subjectMonitoringEnabled;
    _Bool _faceDetectionDrivenImageProcessingEnabled;
    struct CGRect _faceRectangle;
    int _faceRectangleAngle;
    _Bool _faceDetectionMetadataEnabled;
    _Bool _automaticallyEnablesLowLightBoostWhenAvailable;
    _Bool _lowLightBoostEnabled;
    _Bool _highDynamicRangeSceneDetectionEnabled;
    _Bool _sceneIsHighDynamicRange;
    float _saturation;
    float _contrast;
    long long _videoZoomDownscaleStageHint;
    long long _videoZoomUpscaleStageHint;
    float _videoZoomFactor;
    float _videoZoomRampTarget;
    int _videoZoomRampCounter;
    float _videoZoomRampAcceleration;
    _Bool _videoZoomDrawOverlay;
    NSArray *_formats;
    struct OpaqueCMClock *_deviceClock;
    AVWeakReference *_weakReference;
}

+ (_Bool)_cameraAccessIsEnabled;
+ (id)_devices;
+ (void)initialize;
- (struct OpaqueCMClock *)deviceClock;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (_Bool)doesHandleNotification:(id)arg1;
- (void)setAutomaticallyEnablesLowLightBoostWhenAvailable:(_Bool)arg1;
- (_Bool)automaticallyEnablesLowLightBoostWhenAvailable;
- (void)_setAutomaticallyEnablesLowLightBoostWhenAvailable:(_Bool)arg1;
- (_Bool)isLowLightBoostEnabled;
- (_Bool)isLowLightBoostSupported;
- (_Bool)isSISSupported;
- (_Bool)HDRUsesPreBracketedFrameAsEV0;
- (_Bool)isHDRSupported;
- (void)setVideoZoomUpscaleStageHint:(long long)arg1;
- (long long)videoZoomUpscaleStageHint;
- (void)setVideoZoomDownscaleStageHint:(long long)arg1;
- (long long)videoZoomDownscaleStageHint;
- (void)setVideoZoomDrawOverlay:(_Bool)arg1;
- (_Bool)videoZoomDrawOverlay;
- (void)setVideoZoomRampAcceleration:(float)arg1;
- (float)videoZoomRampAcceleration;
- (void)_restoreColorProperties;
- (void)setContrast:(float)arg1;
- (_Bool)_setContrast:(float)arg1;
- (float)contrast;
- (void)setSaturation:(float)arg1;
- (_Bool)_setSaturation:(float)arg1;
- (float)saturation;
- (id)_numberForRecorderProperty:(struct __CFString *)arg1;
- (_Bool)_setNumber:(id)arg1 forRecorderProperty:(struct __CFString *)arg2;
- (_Bool)_setBoolValue:(_Bool)arg1 forRecorderProperty:(struct __CFString *)arg2;
- (_Bool)_setFloatValue:(float)arg1 forRecorderProperty:(struct __CFString *)arg2;
- (float)_floatValueForRecorderProperty:(struct __CFString *)arg1;
- (_Bool)isMachineReadableCodeDetectionSupported;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)setHighDynamicRangeSceneDetectionEnabled:(_Bool)arg1;
- (_Bool)_setHighDynamicRangeSceneDetectionEnabled:(_Bool)arg1;
- (void)_setHighDynamicRangeScene:(_Bool)arg1;
- (_Bool)isHighDynamicRangeScene;
- (_Bool)isHighDynamicRangeSceneDetectionEnabled;
- (_Bool)isHighDynamicRangeSceneDetectionSupported;
- (_Bool)_faceDetectionDebugMetadataReportingEnabled;
- (_Bool)isFaceDetectionDebugMetadataReportingEnabled;
- (_Bool)_setFaceDetectionDebugMetadataReportingEnabled:(_Bool)arg1;
- (void)setFaceDetectionDebugMetadataReportingEnabled:(_Bool)arg1;
- (int)faceRectangleAngle;
- (struct CGRect)faceRectangle;
- (_Bool)_faceDetectionDrivenImageProcessingEnabled;
- (void)setFaceDetectionDrivenImageProcessingEnabled:(_Bool)arg1;
- (_Bool)_setFaceDetectionDrivenImageProcessingEnabled:(_Bool)arg1;
- (_Bool)isFaceDetectionDrivenImageProcessingEnabled;
- (_Bool)isFaceDetectionDuringVideoPreviewSupported;
- (_Bool)isFaceDetectionSupported;
- (void)_updateImageControlMode;
- (void)setImageControlMode:(long long)arg1;
- (_Bool)_setImageControlMode:(long long)arg1;
- (long long)imageControlMode;
- (void)setAutomaticallyAdjustsImageControlMode:(_Bool)arg1;
- (_Bool)automaticallyAdjustsImageControlMode;
- (_Bool)isImageControlModeSupported:(long long)arg1;
- (_Bool)_subjectAreaChangeMonitoringEnabled;
- (void)setSubjectAreaChangeMonitoringEnabled:(_Bool)arg1;
- (_Bool)_setSubjectAreaChangeMonitoringEnabled:(_Bool)arg1;
- (_Bool)isSubjectAreaChangeMonitoringEnabled;
- (void)_teardownFigRecorderForTorchApps;
- (struct OpaqueCMBaseObject *)_createFigRecorderForTorchApps;
- (void)_updateFlashAndTorchAvailability;
- (_Bool)setTorchModeOnWithLevel:(float)arg1 error:(id *)arg2;
- (void)setTorchMode:(long long)arg1;
- (long long)torchMode;
- (int)_setTorchMode:(long long)arg1 withLevel:(float)arg2;
- (void)_teardownTorchAppsKillTimer;
- (id)_createTorchAppsKillTimer;
- (long long)_torchMode;
- (_Bool)isTorchAvailable;
- (_Bool)isTorchModeSupported:(long long)arg1;
- (float)torchLevel;
- (void)_setTorchActive:(_Bool)arg1;
- (_Bool)isTorchActive;
- (_Bool)hasTorch;
- (void)setFlashMode:(long long)arg1;
- (_Bool)isFlashAvailable;
- (long long)flashMode;
- (_Bool)_setFlashMode:(long long)arg1;
- (long long)_flashMode;
- (void)_setFlashActive:(_Bool)arg1;
- (_Bool)isFlashModeSupported:(long long)arg1;
- (_Bool)isFlashActive;
- (_Bool)hasFlash;
- (void)setWhiteBalanceTemperature:(float)arg1;
- (_Bool)_setWhiteBalanceTemperature:(float)arg1;
- (float)whiteBalanceTemperature;
- (void)setWhiteBalanceMode:(long long)arg1;
- (long long)whiteBalanceMode;
- (_Bool)_setWhiteBalanceMode:(long long)arg1;
- (long long)_whiteBalanceMode;
- (_Bool)isWhiteBalanceModeSupported:(long long)arg1;
- (void)_setAdjustingWhiteBalance:(_Bool)arg1;
- (_Bool)isAdjustingWhiteBalance;
- (_Bool)isAdjustingExposure;
- (void)setExposurePointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)exposurePointOfInterest;
- (_Bool)isExposurePointOfInterestSupported;
- (float)exposureTargetBias;
- (void)setExposureTargetBias:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)setAutoExposureBias:(float)arg1;
- (_Bool)_setAutoExposureBias:(float)arg1;
- (float)autoExposureBias;
- (void)setManualExposureSupportEnabled:(_Bool)arg1;
- (_Bool)isManualExposureSupportEnabled;
- (void)setExposureGain:(float)arg1;
- (float)exposureGain;
- (void)setExposureDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)exposureDuration;
- (void)setExposureMode:(long long)arg1;
- (long long)exposureMode;
- (_Bool)_setExposureWithMode:(long long)arg1 pointOfInterest:(id)arg2;
- (_Bool)isExposureModeSupported:(long long)arg1;
- (void)_setAdjustingExposure:(_Bool)arg1;
- (void)setSmoothAutoFocusEnabled:(_Bool)arg1;
- (_Bool)isSmoothAutoFocusEnabled;
- (_Bool)isSmoothAutoFocusSupported;
- (void)setManualFocusSupportEnabled:(_Bool)arg1;
- (_Bool)isManualFocusSupportEnabled;
- (void)setFocusPosition:(float)arg1;
- (float)focusPosition;
- (void)setAutoFocusRangeRestriction:(long long)arg1;
- (long long)autoFocusRangeRestriction;
- (_Bool)isAutoFocusRangeRestrictionSupported;
- (void)_setAdjustingFocus:(_Bool)arg1;
- (_Bool)isAdjustingFocus;
- (void)setFocusPointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)focusPointOfInterest;
- (_Bool)isFocusPointOfInterestSupported;
- (void)setFocusMode:(long long)arg1;
- (long long)focusMode;
- (_Bool)_setFocusWithMode:(long long)arg1 pointOfInterest:(id)arg2;
- (_Bool)isFocusModeSupported:(long long)arg1;
- (long long)position;
- (void)finishPendingAdjustmentsKVO;
- (void)_sessionDidStart;
- (void)_sessionWillStart;
- (void)setActiveInput:(id)arg1;
- (void)_applyPendingPropertiesToRecorder;
- (id)devicePropertiesDictionary;
- (void)stopUsingDevice;
- (_Bool)startUsingDevice:(id *)arg1;
- (_Bool)isConnected;
- (_Bool)isInUseByAnotherApplication;
- (_Bool)isActiveVideoMaxFrameDurationSet;
- (_Bool)isActiveVideoMinFrameDurationSet;
- (void)setActiveVideoMaxFrameDuration:(CDStruct_1b6d18a9)arg1;
- (void)_setActiveVideoMaxFrameDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)activeVideoMaxFrameDuration;
- (void)setActiveVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (void)_setActiveVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)activeVideoMinFrameDuration;
- (void)setActiveFormat:(id)arg1;
- (id)activeFormat;
- (void)_setActiveFormatAndFrameRatesForResolvedOptions:(id)arg1 sendingFrameRatesToFig:(_Bool)arg2;
- (id)formats;
- (_Bool)supportsAVCaptureSessionPreset:(id)arg1;
- (_Bool)hasMediaType:(id)arg1;
- (id)localizedName;
- (id)modelID;
- (id)uniqueID;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
- (void)dealloc;
- (id)init;
- (id)initWithProperties:(id)arg1 sensorProperties:(id)arg2;
- (_Bool)isKindOfClass:(Class)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVCaptureFileOutput : AVCaptureOutput
{
    AVCaptureFileOutputInternal *_fileOutputInternal;
}

+ (void)initialize;
@property(nonatomic) long long minFreeDiskSpaceLimit;
@property(nonatomic) long long maxRecordedFileSize;
@property(nonatomic) CDStruct_1b6d18a9 maxRecordedDuration;
@property(readonly, nonatomic) long long recordedFileSize;
@property(readonly, nonatomic) CDStruct_1b6d18a9 recordedDuration;
- (void)setPausesRecordingOnInterruption:(_Bool)arg1;
- (_Bool)pausesRecordingOnInterruption;
- (void)resumeRecording;
- (void)pauseRecording;
- (_Bool)isRecordingPaused;
- (void)stopRecording;
- (void)startRecordingToOutputFileURL:(id)arg1 recordingDelegate:(id)arg2;
@property(readonly, nonatomic, getter=isRecording) _Bool recording;
@property(readonly, nonatomic) NSURL *outputFileURL;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureFileOutputDelegateWrapper : NSObject
{
    _Bool _recording;
    _Bool _paused;
    long long _settingsID;
    NSURL *_outputFileURL;
    NSArray *_metadata;
    AVWeakReferencingDelegateStorage *_delegateStorage;
    NSArray *_connections;
}

+ (id)wrapperWithURL:(id)arg1 delegate:(id)arg2 settingsID:(long long)arg3 connections:(id)arg4;
@property(nonatomic, getter=isPaused) _Bool paused; // @synthesize paused=_paused;
@property(nonatomic, getter=isRecording) _Bool recording; // @synthesize recording=_recording;
@property(readonly) NSArray *connections; // @synthesize connections=_connections;
@property(readonly) AVWeakReferencingDelegateStorage *delegateStorage; // @synthesize delegateStorage=_delegateStorage;
@property(retain) NSArray *metadata; // @synthesize metadata=_metadata;
@property(readonly) NSURL *outputFileURL; // @synthesize outputFileURL=_outputFileURL;
@property(readonly) long long settingsID; // @synthesize settingsID=_settingsID;
- (void)dealloc;
- (id)initWithURL:(id)arg1 delegate:(id)arg2 settingsID:(long long)arg3 connections:(id)arg4;

@end

@interface AVCaptureFileOutputDelegateWrapper_FigRecorder : NSObject
{
    id <AVCaptureFileOutputRecordingDelegate_FigRecorder><AVCaptureFileOutputPauseResumeDelegate_FigRecorder> _delegate;
    NSURL *_outputFileURL;
    _Bool _receivedDidStartRecording;
    _Bool _receivedDidStopRecording;
    int _didStopRecordingError;
    NSArray *_metadata;
    NSArray *_connections;
}

+ (id)wrapperWithURL:(id)arg1 delegate:(id)arg2 connections:(id)arg3;
@property(readonly) NSArray *connections; // @synthesize connections=_connections;
@property(retain) NSArray *metadata; // @synthesize metadata=_metadata;
@property int didStopRecordingError; // @synthesize didStopRecordingError=_didStopRecordingError;
@property _Bool receivedDidStopRecording; // @synthesize receivedDidStopRecording=_receivedDidStopRecording;
@property _Bool receivedDidStartRecording; // @synthesize receivedDidStartRecording=_receivedDidStartRecording;
@property(readonly) NSURL *outputFileURL; // @synthesize outputFileURL=_outputFileURL;
@property(readonly) id <AVCaptureFileOutputRecordingDelegate_FigRecorder><AVCaptureFileOutputPauseResumeDelegate_FigRecorder> delegate; // @synthesize delegate=_delegate;
- (void)dealloc;
- (id)initWithURL:(id)arg1 delegate:(id)arg2 connections:(id)arg3;

@end

@interface AVCaptureFileOutputInternal : NSObject
{
    CDStruct_1b6d18a9 maxRecordedDuration;
    long long maxRecordedFileSize;
    long long minFreeDiskSpaceLimit;
    _Bool pausesRecordingOnInterruption;
}

- (id)init;

@end

@interface AVCaptureFileOutputInternal_FigRecorder : NSObject
{
    CDStruct_1b6d18a9 maxRecordedDuration;
    long long maxRecordedFileSize;
    long long minFreeDiskSpaceLimit;
    _Bool pausesRecordingOnInterruption;
}

- (id)init;

@end

@interface AVCaptureFileOutput_FigRecorder : AVCaptureOutput_FigRecorder
{
    AVCaptureFileOutputInternal_FigRecorder *_fileOutputInternal;
}

+ (void)initialize;
@property(nonatomic) long long minFreeDiskSpaceLimit;
@property(nonatomic) long long maxRecordedFileSize;
@property(nonatomic) CDStruct_1b6d18a9 maxRecordedDuration;
@property(readonly, nonatomic) long long recordedFileSize;
@property(readonly, nonatomic) CDStruct_1b6d18a9 recordedDuration;
- (void)setPausesRecordingOnInterruption:(_Bool)arg1;
- (_Bool)pausesRecordingOnInterruption;
- (void)resumeRecording;
- (void)pauseRecording;
- (_Bool)isRecordingPaused;
- (void)stopRecording;
- (void)startRecordingToOutputFileURL:(id)arg1 recordingDelegate:(id)arg2;
@property(readonly, nonatomic, getter=isRecording) _Bool recording;
@property(readonly, nonatomic) NSURL *outputFileURL;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureInputInternal : NSObject
{
    AVCaptureSession *session;
    NSObject<OS_dispatch_queue> *figCaptureSessionSyncQueue;
    struct OpaqueFigCaptureSession *figCaptureSession;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureInputInternal_FigRecorder : NSObject
{
    AVCaptureSession_FigRecorder *_session;
}

@end

@interface AVCaptureInputPort : NSObject
{
    AVCaptureInputPortInternal *_internal;
}

+ (_Bool)automaticallyNotifiesObserversOfClock;
+ (id)portWithInput:(id)arg1 mediaType:(id)arg2 formatDescription:(struct opaqueCMFormatDescription *)arg3 enabled:(_Bool)arg4;
+ (id)alloc;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (id)figCaptureSourceConfigurationForSessionPreset:(id)arg1;
- (id)sourceID;
- (id)valueForUndefinedKey:(id)arg1;
- (void)_setClock:(struct OpaqueCMClock *)arg1;
@property(readonly, nonatomic) struct OpaqueCMClock *clock;
@property(nonatomic, getter=isEnabled) _Bool enabled;
- (void)_setFormatDescription:(struct opaqueCMFormatDescription *)arg1;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *formatDescription;
@property(readonly, nonatomic) NSString *mediaType;
@property(readonly, nonatomic) AVCaptureInput *input;
- (id)description;
- (void)setOwner:(id)arg1;
- (void)dealloc;
- (id)initWithInput:(id)arg1 mediaType:(id)arg2 formatDescription:(struct opaqueCMFormatDescription *)arg3 enabled:(_Bool)arg4;
- (id)init;

@end

@interface AVCaptureInputPortInternal : NSObject
{
    AVCaptureInput *input;
    NSString *mediaType;
    struct opaqueCMFormatDescription *formatDescription;
    struct OpaqueCMClock *clock;
    _Bool enabled;
    int changeSeed;
    NSString *sourceID;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureInputPortInternal_FigRecorder : NSObject
{
    AVCaptureInput_FigRecorder *input;
    NSString *mediaType;
    struct opaqueCMFormatDescription *formatDescription;
    struct OpaqueCMClock *clock;
    _Bool enabled;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureInputPort_FigRecorder : NSObject
{
    AVCaptureInputPortInternal_FigRecorder *_internal;
}

+ (_Bool)automaticallyNotifiesObserversOfClock;
+ (id)portWithInput:(id)arg1 mediaType:(id)arg2 formatDescription:(struct opaqueCMFormatDescription *)arg3 enabled:(_Bool)arg4;
- (id)valueForUndefinedKey:(id)arg1;
- (void)_setClock:(struct OpaqueCMClock *)arg1;
@property(readonly, nonatomic) struct OpaqueCMClock *clock;
@property(nonatomic, getter=isEnabled) _Bool enabled;
- (void)_setFormatDescription:(struct opaqueCMFormatDescription *)arg1;
@property(readonly, nonatomic) struct opaqueCMFormatDescription *formatDescription;
@property(readonly, nonatomic) NSString *mediaType;
@property(readonly, nonatomic) AVCaptureInput_FigRecorder *input;
- (id)description;
- (void)setOwner:(id)arg1;
- (void)dealloc;
- (id)initWithInput:(id)arg1 mediaType:(id)arg2 formatDescription:(struct opaqueCMFormatDescription *)arg3 enabled:(_Bool)arg4;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureManualExposureBracketedStillImageSettings : AVCaptureBracketedStillImageSettings
{
    CDStruct_1b6d18a9 _exposureDuration;
    float _ISO;
}

+ (id)manualExposureSettingsWithExposureDuration:(CDStruct_1b6d18a9)arg1 ISO:(float)arg2;
@property(readonly) float ISO; // @synthesize ISO=_ISO;
@property(readonly) CDStruct_1b6d18a9 exposureDuration; // @synthesize exposureDuration=_exposureDuration;
- (id)description;
- (id)_initManualExposureSettingsWithExposureDuration:(CDStruct_1b6d18a9)arg1 ISO:(float)arg2;

@end

@interface AVCaptureMetadataInput : AVCaptureInput
{
    AVCaptureMetadataInputInternal *_internal;
}

+ (id)metadataInputWithFormatDescription:(struct opaqueCMFormatDescription *)arg1 clock:(struct OpaqueCMClock *)arg2;
- (_Bool)appendTimedMetadataGroup:(id)arg1 error:(id *)arg2;
- (id)sourceID;
- (struct OpaqueCMClock *)clock;
- (id)ports;
- (void)dealloc;
- (id)initWithFormatDescription:(struct opaqueCMFormatDescription *)arg1 clock:(struct OpaqueCMClock *)arg2;
- (id)init;

@end

@interface AVCaptureMetadataInputInternal : NSObject
{
    AVCaptureInputPort *metadataPort;
    NSString *sourceID;
    struct opaqueCMFormatDescription *desc;
    struct OpaqueCMClock *clock;
    struct OpaqueCMBlockBuffer *emptyBoxedMetadata;
}

@end

@interface AVCaptureMetadataOutput : AVCaptureOutput
{
    AVCaptureMetadataOutputInternal *_internal;
}

+ (id)_metadataConstantValueToName:(id)arg1;
+ (void)initialize;
+ (id)alloc;
- (_Bool)_faceMetadataIsActive;
- (id)connectionMediaTypes;
@property(nonatomic) struct CGRect rectOfInterest;
- (id)_metadataIdentifiers;
@property(copy, nonatomic) NSArray *metadataObjectTypes;
@property(readonly, nonatomic) NSArray *availableMetadataObjectTypes;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *metadataObjectsCallbackQueue;
@property(readonly, nonatomic) id <AVCaptureMetadataOutputObjectsDelegate> metadataObjectsDelegate;
- (void)setMetadataObjectsDelegate:(id)arg1 queue:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureMetadataOutputInternal : NSObject
{
    AVWeakReferencingDelegateStorage *delegateStorage;
    NSArray *metadataObjectTypes;
    struct CGRect rectOfInterest;
    AVWeakReference *weakReference;
    struct OpaqueFigSimpleMutex *remoteQueueMutex;
    void *remoteReceiverQueue;
    NSObject<OS_dispatch_queue> *objectQueue;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureMetadataOutputInternal_FigRecorder : NSObject
{
    AVWeakReferencingDelegateStorage *delegateStorage;
    NSArray *metadataObjectTypes;
    struct CGRect rectOfInterest;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureMetadataOutput_FigRecorder : AVCaptureOutput_FigRecorder
{
    AVCaptureMetadataOutputInternal_FigRecorder *_internal;
}

+ (void)initialize;
- (void)applyLiveSourceProperties;
- (void)didStartForSessionWithoutGraphRebuild:(id)arg1;
- (void)didStartForSession:(id)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (id)_input;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (_Bool)_faceMetadataIsActive;
- (id)connectionMediaTypes;
@property(nonatomic) struct CGRect rectOfInterest;
@property(copy, nonatomic) NSArray *metadataObjectTypes;
@property(readonly, nonatomic) NSArray *availableMetadataObjectTypes;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *metadataObjectsCallbackQueue;
@property(readonly, nonatomic) id <AVCaptureMetadataOutputObjectsDelegate_FigRecorder> metadataObjectsDelegate;
- (void)setMetadataObjectsDelegate:(id)arg1 queue:(id)arg2;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureMovieFileOutput : AVCaptureFileOutput
{
    AVCaptureMovieFileOutputInternal *_internal;
}

+ (_Bool)consolidateMovieFragmentsInFile:(id)arg1 error:(id *)arg2;
+ (_Bool)updateMovieMetadataInFile:(id)arg1 withMetadata:(id)arg2 error:(id *)arg3;
+ (id)recorderCommonMetadataForAVMetadataItemArray:(id)arg1;
+ (long long)nextMovieFileSettingsID;
+ (void)initialize;
+ (id)alloc;
- (int)_stopRecording;
- (void)_startRecording:(id)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (void)handleDidStopRecordingNotificationForWrapper:(id)arg1 withPayload:(id)arg2 demoof:(_Bool)arg3 addMetadata:(_Bool)arg4;
- (void)_removeRecordingDelegateWrapper:(id)arg1;
- (void)detachSafelyFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachSafelyToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (id)_avErrorUserInfoDictionaryForError:(int)arg1 wrapper:(id)arg2;
@property(copy, nonatomic) NSArray *metadata;
- (id)outputSettingsForConnection:(id)arg1;
- (_Bool)sendsLastVideoPreviewFrame;
- (void)setSendsLastVideoPreviewFrame:(_Bool)arg1;
@property(nonatomic) CDStruct_1b6d18a9 movieFragmentInterval;
- (void)stopRecording;
- (void)startRecordingToOutputFileURL:(id)arg1 recordingDelegate:(id)arg2;
- (id)outputFileURL;
- (void)resumeRecording;
- (void)pauseRecording;
- (_Bool)isRecordingPaused;
- (_Bool)isRecording;
- (id)connectionMediaTypes;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureMovieFileOutputInternal : NSObject
{
    AVWeakReference *weakReference;
    NSMutableArray *recordingDelegatesArray;
    CDStruct_1b6d18a9 movieFragmentInterval;
    NSArray *metadata;
    _Bool sendLastVideoPreviewFrame;
    _Bool recording;
    _Bool paused;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureMovieFileOutputInternal_FigRecorder : NSObject
{
    NSMutableArray *recordingDelegatesArray;
    CDStruct_1b6d18a9 movieFragmentInterval;
    NSArray *metadata;
    _Bool sendLastVideoPreviewFrame;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureMovieFileOutput_FigRecorder : AVCaptureFileOutput_FigRecorder
{
    AVCaptureMovieFileOutputInternal_FigRecorder *_internal;
}

+ (_Bool)consolidateMovieFragmentsInFile:(id)arg1 error:(id *)arg2;
+ (_Bool)updateMovieMetadataInFile:(id)arg1 withMetadata:(id)arg2 error:(id *)arg3;
+ (id)recorderCommonMetadataForAVMetadataItemArray:(id)arg1;
+ (void)initialize;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (int)_stopRecording;
- (int)_startRecording:(id)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (id)_avErrorUserInfoDictionaryForError:(int)arg1 wrapper:(id)arg2;
- (void)_handleStartRecordingError:(int)arg1 info:(id)arg2;
@property(copy, nonatomic) NSArray *metadata;
- (id)outputSettingsForConnection:(id)arg1;
- (_Bool)sendsLastVideoPreviewFrame;
- (void)setSendsLastVideoPreviewFrame:(_Bool)arg1;
@property(nonatomic) CDStruct_1b6d18a9 movieFragmentInterval;
- (void)handleEnabledChangedForConnection:(id)arg1;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)stopRecording;
- (void)startRecordingToOutputFileURL:(id)arg1 recordingDelegate:(id)arg2;
- (id)outputFileURL;
- (void)resumeRecording;
- (void)pauseRecording;
- (_Bool)isRecordingPaused;
- (_Bool)isRecording;
- (id)connectionMediaTypes;
- (void)dealloc;
- (id)init;
- (_Bool)getRecorderBoolForKey:(id)arg1 withDefault:(_Bool)arg2;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureOutputInternal : NSObject
{
    NSObject<OS_dispatch_queue> *figCaptureSessionSyncQueue;
    struct OpaqueFigCaptureSession *figCaptureSession;
    AVCaptureSession *session;
    NSString *sinkID;
    NSMutableArray *connections;
    int changeSeed;
    struct CGAffineTransform metadataTransform;
    double rollAdjustment;
    _Bool physicallyMirrorsVideo;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureOutputInternal_FigRecorder : NSObject
{
    AVCaptureSession_FigRecorder *session;
    NSMutableArray *connections;
    int changeSeed;
    struct CGAffineTransform metadataTransform;
    double rollAdjustment;
    _Bool physicallyMirrorsVideo;
}

- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCapturePrepareBracketRequest : NSObject
{
    CDUnknownBlockType _completionBlock;
    FigCaptureStillImageSettings *_settings;
}

+ (id)prepareBracketRequestWithCompletionBlock:(CDUnknownBlockType)arg1 settings:(id)arg2;
@property(readonly) FigCaptureStillImageSettings *settings; // @synthesize settings=_settings;
@property(readonly) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
- (void)dealloc;
- (id)_initWithCompletionBlock:(CDUnknownBlockType)arg1 settings:(id)arg2;

@end

@interface AVCapturePrewarmer : NSObject
{
}

+ (void)prewarmUsingDefaultSettingsAfterDate:(id)arg1;
+ (void)cancel;
+ (void)prewarm;

@end

@interface AVCapturePrewarmer_FigRecorder : NSObject
{
}

+ (void)prewarmUsingDefaultSettingsAfterDate:(id)arg1;
+ (void)cancel;
+ (void)prewarm;

@end

@interface AVCaptureSession : NSObject
{
    AVCaptureSessionInternal *_internal;
}

+ (_Bool)automaticallyNotifiesObserversOfRunning;
+ (_Bool)automaticallyNotifiesObserversOfMasterClock;
+ (id)publicSessionPresets;
+ (id)allSessionPresets;
+ (id)dotString;
+ (void)initialize;
+ (id)alloc;
- (void)_handleNotification:(id)arg1 payload:(id)arg2;
- (void)_handleServerConnectionDiedNotification;
- (void)_notifyMediaServerdDied;
- (void)_handleConfigurationDidBecomeLiveNotificationWithPayload:(id)arg1;
- (void)_handleConfigurationCommittedNotificationWithPayload:(id)arg1;
- (void)_handleDidStopRunningNotificationWithPayload:(id)arg1;
- (void)_notifySessionStopped;
- (void)_handleDidStartRunningNotificationWithPayload:(id)arg1;
- (void)_notifySessionStarted;
- (void)_updateActiveConnections;
- (void)_updateDeviceActiveFormats;
- (void)_stopAndTearDownGraph;
- (_Bool)_buildAndRunGraph;
- (id)_figCaptureSessionConfiguration;
- (void)_makeConfigurationLive:(id)arg1 masterClock:(struct OpaqueCMClock *)arg2;
- (void)_postRuntimeError:(id)arg1;
- (id)_stopError;
- (id)sessionVideoCaptureDevices;
- (void)_removeConnectionsForInputPort:(id)arg1;
- (id)_connectionsForNewVideoPreviewLayer:(id)arg1;
- (id)_connectionsForNewOutput:(id)arg1;
- (id)_connectionsForNewInputPort:(id)arg1;
- (void)_teardownFigCaptureSession;
- (int)_createFigCaptureSession;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (_Bool)videoHDREnabledForDevice:(id)arg1 format:(id)arg2 sessionPreset:(id)arg3;
- (id)valueForUndefinedKey:(id)arg1;
- (void)_setMasterClock:(struct OpaqueCMClock *)arg1;
@property(readonly, nonatomic) struct OpaqueCMClock *masterClock;
- (void)_rebuildGraph;
- (void)_setRunning:(_Bool)arg1;
- (_Bool)_stopFigCaptureSession;
- (_Bool)_startFigCaptureSession;
- (void)stopRunning;
- (void)startRunning;
@property(readonly, nonatomic, getter=isRunning) _Bool running;
@property(nonatomic) _Bool automaticallyConfiguresApplicationAudioSession;
@property(nonatomic) _Bool usesApplicationAudioSession;
- (void)_setInterrupted:(_Bool)arg1;
@property(readonly, nonatomic, getter=isInterrupted) _Bool interrupted;
- (void)_removeConnection:(id)arg1;
- (void)removeConnection:(id)arg1;
- (void)_addConnection:(id)arg1;
- (void)addConnection:(id)arg1;
- (_Bool)canAddConnection:(id)arg1;
- (_Bool)_canAddConnection:(id)arg1 failureReason:(id *)arg2;
- (void)_removeVideoPreviewLayer:(id)arg1;
- (void)_removeAllPreviewLayers;
- (void)_addVideoPreviewLayerWithNoConnection:(id)arg1;
- (void)_addVideoPreviewLayer:(id)arg1;
- (_Bool)_canAddVideoPreviewLayer:(id)arg1 failureReason:(id *)arg2;
- (void)removeOutput:(id)arg1;
- (void)_addOutputWithNoConnections:(id)arg1;
- (void)addOutputWithNoConnections:(id)arg1;
- (void)addOutput:(id)arg1;
- (_Bool)canAddOutput:(id)arg1;
- (_Bool)_canAddOutput:(id)arg1 failureReason:(id *)arg2;
@property(readonly, nonatomic) NSArray *outputs;
- (void)removeInput:(id)arg1;
- (void)_addInputWithNoConnections:(id)arg1;
- (void)addInputWithNoConnections:(id)arg1;
- (void)addInput:(id)arg1;
- (_Bool)canAddInput:(id)arg1;
- (_Bool)_canAddInput:(id)arg1 failureReason:(id *)arg2;
@property(readonly, nonatomic) NSArray *inputs;
- (_Bool)isBeingConfigured;
- (void)_commitConfiguration;
- (void)_beginConfiguration;
- (void)commitConfiguration;
- (void)beginConfiguration;
@property(copy, nonatomic) NSString *sessionPreset;
- (_Bool)canSetSessionPreset:(id)arg1;
- (_Bool)notifiesOnMainThread;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureSessionConfiguration : NSObject
{
    long long _configurationID;
    NSArray *_inputs;
    NSArray *_outputs;
    NSHashTable *_videoPreviewLayers;
    NSArray *_connections;
}

@property(readonly) NSArray *connections; // @synthesize connections=_connections;
@property(readonly) NSHashTable *videoPreviewLayers; // @synthesize videoPreviewLayers=_videoPreviewLayers;
@property(readonly) NSArray *outputs; // @synthesize outputs=_outputs;
@property(readonly) NSArray *inputs; // @synthesize inputs=_inputs;
@property(readonly) long long configurationID; // @synthesize configurationID=_configurationID;
- (id)uniqueVideoPreviewLayers:(id)arg1;
- (id)uniqueConnections:(id)arg1;
- (id)uniqueOutputs:(id)arg1;
- (id)uniqueInputs:(id)arg1;
- (void)dealloc;
- (id)initWithConfigurationID:(long long)arg1 inputs:(id)arg2 outputs:(id)arg3 videoPreviewLayers:(id)arg4 connections:(id)arg5;

@end

@interface AVCaptureSessionInternal : NSObject
{
    AVWeakReference *weakReference;
    NSString *sessionPreset;
    AVCaptureDevice *adjustingDeviceActiveFormat;
    int beginConfigRefCount;
    FigCaptureSessionConfiguration *sessionConfig;
    struct OpaqueFigCaptureSession *figCaptureSession;
    _Bool figCaptureSessionRunning;
    NSMutableArray *inputs;
    NSMutableArray *outputs;
    NSHashTable *videoPreviewLayers;
    NSMutableArray *connections;
    NSMutableArray *committedAVCaptureSessionConfigurations;
    AVCaptureSessionConfiguration *liveAVCaptureSessionConfiguration;
    NSError *stopError;
    _Bool running;
    _Bool interrupted;
    _Bool usesApplicationAudioSession;
    _Bool automaticallyConfiguresApplicationAudioSession;
    AVRunLoopCondition *runLoopCondition;
    _Bool waitingForFigCaptureSessionToStart;
    _Bool waitingForFigCaptureSessionToStop;
    _Bool waitingForFigCaptureSessionConfigurationToBecomeLive;
    _Bool waitingForFigCaptureSessionToStopDueToEmptyConfig;
    struct OpaqueCMClock *masterClock;
    _Bool notifiesOnMainThread;
    _Bool adjustingVideoDeviceHDREnabled;
    _Bool sessionPresetChanging;
}

@end

@interface AVCaptureSessionInternal_FigRecorder : NSObject
{
    AVWeakReference *weakReference;
    NSString *sessionPreset;
    _Bool adjustingDeviceActiveFormat;
    int sessionPresetChangeSeed;
    int resolvedSessionPresetChangeSeed;
    int videoDeviceChangeSeed;
    int resolvedVideoDeviceChangeSeed;
    int beginConfigRefCount;
    NSMutableDictionary *captureOptions;
    NSMutableDictionary *figRecorderOptions;
    AVCaptureFigAudioDevice_FigRecorder *audioDevice;
    AVCaptureFigVideoDevice_FigRecorder *videoDevice;
    struct OpaqueCMBaseObject *recorder;
    NSMutableArray *inputs;
    NSMutableArray *outputs;
    NSMutableArray *connections;
    NSMutableArray *liveConnections;
    AVCaptureVideoPreviewLayer_FigRecorder *videoPreviewLayer;
    NSError *stopError;
    _Bool running;
    _Bool interrupted;
    _Bool recording;
    _Bool usesApplicationAudioSession;
    _Bool automaticallyConfiguresApplicationAudioSession;
    AVRunLoopCondition *runLoopCondition;
    _Bool waitingForRecorderDidStartPreviewing;
    _Bool waitingForRecorderDidStartRecording;
    _Bool waitingForRecorderDidStopSource;
    _Bool waitingForRecorderDidStopPreviewing;
    _Bool waitingForRecorderDidStopRecording;
    struct OpaqueCMClock *masterClock;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureSession_FigRecorder : NSObject
{
    AVCaptureSessionInternal_FigRecorder *_internal;
}

+ (id)_createCaptureOptionsForPreset:(id)arg1 audioDevice:(id)arg2 videoDevice:(id)arg3 errorStatus:(int *)arg4;
+ (id)avCaptureSessionPlist;
+ (_Bool)automaticallyNotifiesObserversOfMasterClock;
+ (id)publicSessionPresets;
+ (id)allSessionPresets;
+ (void)initialize;
- (void)_handleNotification:(id)arg1 payload:(id)arg2;
- (id)_errorForFigRecorderNotification:(id)arg1;
- (id)_currentDeviceWithMediaType:(id)arg1;
- (void)_stopAndTearDownGraph;
- (_Bool)_buildAndRunGraph;
- (void)_rebuildLiveConnections;
- (_Bool)_figRecorderOldOptionsAreEqual:(id)arg1 toNewOptions:(id)arg2 livesourceOptionsAreEqual:(_Bool *)arg3 frameRatesChanged:(_Bool *)arg4;
- (void)_doDidStop:(id)arg1;
- (void)_doDidStart:(_Bool)arg1;
- (void)_doWillStart;
- (void)_doDidStartSources;
- (void)_postRuntimeError:(id)arg1;
- (id)_stopError;
- (void)_removeVideoPreviewLayerConnectionsForInputPort:(id)arg1;
- (void)_removeConnectionsForInputPort:(id)arg1;
- (id)_connectionsForNewVideoPreviewLayer:(id)arg1;
- (id)_connectionsForNewOutput:(id)arg1;
- (id)_connectionsForNewInputPort:(id)arg1;
- (id)_resolvedCaptureOptions;
- (id)_resolvedCaptureOptionsForPreset:(id)arg1 audioDevice:(id)arg2 videoDevice:(id)arg3;
- (id)_addFastSwitchOptionsToCaptureOptions:(id)arg1 forDevice:(id)arg2 preset:(id)arg3;
- (id)_resolvedCaptureOptionsByApplyingOverridesToCaptureOptions:(id)arg1 preset:(id)arg2;
- (_Bool)_sessionHasEnabledMovieFileOutput;
- (void)_rebuildInternalCaptureOptions;
- (void)_excludeOutputsForCaptureOptions:(id)arg1;
- (int)_createRecorderIfNeeded;
- (id)figRecorderOptions;
- (id)captureOptions;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)valueForUndefinedKey:(id)arg1;
- (void)_determineMasterClock;
- (void)_setMasterClock:(struct OpaqueCMClock *)arg1;
@property(readonly, nonatomic) struct OpaqueCMClock *masterClock;
- (void)_rebuildGraph;
- (int)_stopRecording;
- (int)_startRecording;
- (void)_setRunning:(_Bool)arg1;
- (_Bool)_stopPreviewing;
- (_Bool)_startPreviewing;
- (_Bool)isPreviewing;
- (void)stopRunning;
- (void)startRunning;
@property(readonly, nonatomic, getter=isRunning) _Bool running;
@property(nonatomic) _Bool automaticallyConfiguresApplicationAudioSession;
@property(nonatomic) _Bool usesApplicationAudioSession;
- (void)_setInterrupted:(_Bool)arg1;
@property(readonly, nonatomic, getter=isInterrupted) _Bool interrupted;
- (id)_liveConnections;
- (void)_removeConnection:(id)arg1;
- (void)removeConnection:(id)arg1;
- (void)_addConnection:(id)arg1;
- (void)addConnection:(id)arg1;
- (_Bool)canAddConnection:(id)arg1;
- (_Bool)_canAddConnection:(id)arg1 failureReason:(id *)arg2;
- (void)setVideoPreviewLayer:(id)arg1;
- (void)removeVideoPreviewLayer;
- (void)addVideoPreviewLayer:(id)arg1;
- (void)removeVideoPreviewLayerConnection:(id)arg1;
- (void)addVideoPreviewLayerConnection:(id)arg1;
- (id)videoPreviewLayer;
- (void)removeOutput:(id)arg1;
- (void)_addOutputWithNoConnections:(id)arg1;
- (void)addOutputWithNoConnections:(id)arg1;
- (void)addOutput:(id)arg1;
- (_Bool)canAddOutput:(id)arg1;
- (_Bool)_canAddOutput:(id)arg1 failureReason:(id *)arg2;
@property(readonly, nonatomic) NSArray *outputs;
- (void)removeInput:(id)arg1;
- (void)_addInputWithNoConnections:(id)arg1;
- (void)addInputWithNoConnections:(id)arg1;
- (id)description;
- (void)addInput:(id)arg1;
- (_Bool)canAddInput:(id)arg1;
- (_Bool)_canAddInput:(id)arg1 failureReason:(id *)arg2;
- (id)inputWithClass:(Class)arg1;
- (id)outputWithClass:(Class)arg1;
@property(readonly, nonatomic) NSArray *inputs;
- (_Bool)isBeingConfigured;
- (void)_commitConfiguration;
- (void)_beginConfiguration;
- (void)commitConfiguration;
- (void)beginConfiguration;
@property(copy, nonatomic) NSString *sessionPreset;
- (_Bool)canSetSessionPreset:(id)arg1;
- (struct OpaqueCMBaseObject *)recorder;
- (void)dealloc;
- (void)_teardownFigRecorder;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureStillImageOutput : AVCaptureOutput
{
    AVCaptureStillImageOutputInternal *_internal;
}

+ (struct CGImage *)cgImageForBGRASurface:(void *)arg1 size:(unsigned long long)arg2;
+ (id)jpegStillImageNSDataRepresentationForSurface:(void *)arg1 size:(unsigned long long)arg2 metadata:(id)arg3;
+ (id)jpegStillImageNSDataRepresentation:(struct opaqueCMSampleBuffer *)arg1;
+ (unsigned long long)maxStillImageJPEGDataSize;
+ (void)initialize;
+ (id)alloc;
- (void)playShutterSound:(unsigned int)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (void)handleNotificationForPrepareRequest:(id)arg1 withPayload:(id)arg2;
- (void)handleNotificationForRequest:(id)arg1 withPayload:(id)arg2 imageIsEV0:(_Bool *)arg3;
- (void)_setStillImageStabilizationAutomaticallyEnabled:(_Bool)arg1;
- (void)detachSafelyFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachSafelyToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)_updateMaxBracketedStillImageCaptureCountForSourceFormat:(id)arg1;
- (_Bool)_preparedForBracketedCaptureWithSettings:(id)arg1;
- (id)_figCaptureStillImageSettingsForBracketedCaptureSettingsArray:(id)arg1 fromConnection:(id)arg2;
- (_Bool)_bracketedSettingsAreValid:(id)arg1 fromConnection:(id)arg2 exceptionReason:(id *)arg3;
- (void)captureStillImageBracketAsynchronouslyFromConnection:(id)arg1 withSettingsArray:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)prepareToCaptureStillImageBracketFromConnection:(id)arg1 withSettingsArray:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (unsigned long long)maxBracketedCaptureStillImageCount;
- (void)captureStillImageSurfaceAsynchronouslyFromConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)captureStillImageAsynchronouslyFromConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)_figCaptureStillImageSettingsForConnection:(id)arg1;
- (id)firstActiveConnection;
@property(readonly, getter=isCapturingStillImage) _Bool capturingStillImage;
- (_Bool)resumeVideoProcessing;
- (void)setSuspendsVideoProcessingDuringStillImageCapture:(_Bool)arg1;
- (_Bool)suspendsVideoProcessingDuringStillImageCapture;
- (void)setShutterSound:(unsigned int)arg1;
- (unsigned int)shutterSound;
- (void)setRawCaptureEnabled:(_Bool)arg1;
- (_Bool)isRawCaptureEnabled;
- (_Bool)isRawCaptureSupported;
- (void)setNoiseReductionEnabled:(_Bool)arg1;
- (_Bool)isNoiseReductionEnabled;
@property(nonatomic, getter=isHighResolutionStillImageOutputEnabled) _Bool highResolutionStillImageOutputEnabled;
@property(nonatomic) _Bool automaticallyEnablesStillImageStabilizationWhenAvailable;
@property(readonly, nonatomic, getter=isStillImageStabilizationActive) _Bool stillImageStabilizationActive;
@property(readonly, nonatomic, getter=isStillImageStabilizationSupported) _Bool stillImageStabilizationSupported;
- (void)setEV0CaptureEnabled:(_Bool)arg1;
- (_Bool)isEV0CaptureEnabled;
- (void)setHDRCaptureEnabled:(_Bool)arg1;
- (_Bool)isHDRCaptureEnabled;
- (void)setHDRMode:(long long)arg1;
- (long long)HDRMode;
- (_Bool)isHDRSupported;
- (unsigned int)imageDataFormatType;
- (void)setPreviewImageSize:(struct CGSize)arg1;
- (struct CGSize)previewImageSize;
- (void)setSquareCropEnabled:(_Bool)arg1;
- (_Bool)squareCropEnabled;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)connectionMediaTypes;
@property(readonly, nonatomic) NSArray *availableImageDataCodecTypes;
@property(readonly, nonatomic) NSArray *availableImageDataCVPixelFormatTypes;
@property(copy, nonatomic) NSDictionary *outputSettings;
- (void)removeConnection:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (void)clearPreparedBracketIfNeeded;
- (void)updateSISSupportedForSourceDevice:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureStillImageOutputInternal : NSObject
{
    AVWeakReference *weakReference;
    NSMutableArray *stillImageRequests;
    _Bool squareCropEnabled;
    struct CGSize previewImageSize;
    unsigned int imageDataFormatType;
    float jpegQuality;
    _Bool jpegQualitySpecified;
    long long HDRCaptureMode;
    _Bool EV0CaptureEnabled;
    _Bool noiseReductionEnabled;
    _Bool suspendsVideoProcessingDuringCapture;
    NSDictionary *outputSettings;
    _Bool isCapturingPhoto;
    _Bool rawCaptureEnabled;
    _Bool SISSupported;
    _Bool SISEnabled;
    _Bool SISActive;
    _Bool highResStillEnabled;
    unsigned int shutterSoundID;
    struct {
        unsigned int imageCount;
        int outputFormat;
        unsigned int outputWidth;
        unsigned int outputHeight;
    } preparedBracket;
    NSMutableArray *prepareRequests;
    unsigned long long maxBracketedCaptureCount;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureStillImageOutputInternal_FigRecorder : NSObject
{
    NSMutableArray *stillImageRequests;
    _Bool squareCropEnabled;
    struct CGSize previewImageSize;
    unsigned int imageDataFormatType;
    float jpegQuality;
    _Bool jpegQualitySpecified;
    long long HDRCaptureMode;
    _Bool EV0CaptureEnabled;
    _Bool noiseReductionEnabled;
    _Bool suspendsVideoProcessingDuringCapture;
    NSDictionary *outputSettings;
    _Bool isCapturingPhoto;
    _Bool rawCaptureEnabled;
    _Bool SISSupported;
    _Bool SISEnabled;
    _Bool SISActive;
    unsigned int shutterSoundID;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureStillImageOutput_FigRecorder : AVCaptureOutput_FigRecorder
{
    AVCaptureStillImageOutputInternal_FigRecorder *_internal;
}

+ (id)jpegStillImageNSDataRepresentationForBGRASurface:(void *)arg1 size:(unsigned long long)arg2;
+ (struct CGImage *)cgImageForBGRASurface:(void *)arg1 size:(unsigned long long)arg2;
+ (id)jpegStillImageNSDataRepresentationForSurface:(void *)arg1 size:(unsigned long long)arg2 metadata:(id)arg3;
+ (id)jpegStillImageNSDataRepresentation:(struct opaqueCMSampleBuffer *)arg1;
+ (unsigned long long)maxStillImageJPEGDataSize;
+ (void)initialize;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (void)handlePhotoTakenForRequest:(id)arg1 info:(id)arg2 imageIsEV0:(_Bool *)arg3;
- (void)captureStillImageSurfaceAsynchronouslyFromConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)captureStillImageAsynchronouslyFromConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)configureAndInitiateCopyStillImageForRequest:(id)arg1;
- (id)firstActiveConnection;
@property(readonly, getter=isCapturingStillImage) _Bool capturingStillImage;
- (_Bool)resumeVideoProcessing;
- (void)setSuspendsVideoProcessingDuringStillImageCapture:(_Bool)arg1;
- (_Bool)suspendsVideoProcessingDuringStillImageCapture;
- (void)setShutterSound:(unsigned int)arg1;
- (unsigned int)shutterSound;
- (void)setRawCaptureEnabled:(_Bool)arg1;
- (_Bool)isRawCaptureEnabled;
- (_Bool)isRawCaptureSupported;
- (void)setNoiseReductionEnabled:(_Bool)arg1;
- (_Bool)isNoiseReductionEnabled;
@property(nonatomic) _Bool automaticallyEnablesStillImageStabilizationWhenAvailable;
@property(readonly, nonatomic, getter=isStillImageStabilizationActive) _Bool stillImageStabilizationActive;
@property(readonly, nonatomic, getter=isStillImageStabilizationSupported) _Bool stillImageStabilizationSupported;
- (void)setEV0CaptureEnabled:(_Bool)arg1;
- (_Bool)isEV0CaptureEnabled;
- (void)setHDRCaptureEnabled:(_Bool)arg1;
- (_Bool)isHDRCaptureEnabled;
- (void)setHDRMode:(long long)arg1;
- (long long)HDRMode;
- (_Bool)isHDRSupported;
- (unsigned int)imageDataFormatType;
- (void)setPreviewImageSize:(struct CGSize)arg1;
- (struct CGSize)previewImageSize;
- (void)setSquareCropEnabled:(_Bool)arg1;
- (_Bool)squareCropEnabled;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)connectionMediaTypes;
@property(readonly, nonatomic) NSArray *availableImageDataCodecTypes;
@property(readonly, nonatomic) NSArray *availableImageDataCVPixelFormatTypes;
@property(copy, nonatomic) NSDictionary *outputSettings;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)removeConnection:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (void)updateSISSupportedForSourceDevice:(id)arg1;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureStillImageRequest : NSObject
{
    CDUnknownBlockType _sbufCompletionBlock;
    CDUnknownBlockType _iosurfaceCompletionBlock;
    CDUnknownBlockType _bracketedCaptureCompletionBlock;
    long long _settingsID;
    unsigned int _shutterSoundID;
    AVCaptureBracketedStillImageSettings *_bracketedSettings;
}

+ (id)request;
@property(retain) AVCaptureBracketedStillImageSettings *bracketedSettings; // @synthesize bracketedSettings=_bracketedSettings;
@property unsigned int shutterSoundID; // @synthesize shutterSoundID=_shutterSoundID;
@property long long settingsID; // @synthesize settingsID=_settingsID;
@property(copy) CDUnknownBlockType bracketedCaptureCompletionBlock; // @synthesize bracketedCaptureCompletionBlock=_bracketedCaptureCompletionBlock;
@property(copy) CDUnknownBlockType iosurfaceCompletionBlock; // @synthesize iosurfaceCompletionBlock=_iosurfaceCompletionBlock;
@property(copy) CDUnknownBlockType sbufCompletionBlock; // @synthesize sbufCompletionBlock=_sbufCompletionBlock;
- (void)dealloc;

@end

@interface AVCaptureStillImageRequest_FigRecorder : NSObject <NSCopying>
{
    CDUnknownBlockType _sbufCompletionBlock;
    CDUnknownBlockType _iosurfaceCompletionBlock;
    long long _stillImageOrientation;
    _Bool _stillImageMirrored;
    struct CGSize _previewImageSize;
    unsigned int _imageDataFormatType;
    long long _HDRMode;
    _Bool _noiseReductionEnabled;
    _Bool _suspendsVideoProcessing;
    unsigned int _shutterSoundID;
    _Bool _jpegQualitySpecified;
    float _jpegQuality;
}

+ (id)request;
@property unsigned int shutterSoundID; // @synthesize shutterSoundID=_shutterSoundID;
@property _Bool suspendsVideoProcessing; // @synthesize suspendsVideoProcessing=_suspendsVideoProcessing;
@property _Bool noiseReductionEnabled; // @synthesize noiseReductionEnabled=_noiseReductionEnabled;
@property long long HDRMode; // @synthesize HDRMode=_HDRMode;
@property(copy) CDUnknownBlockType iosurfaceCompletionBlock; // @synthesize iosurfaceCompletionBlock=_iosurfaceCompletionBlock;
@property(copy) CDUnknownBlockType sbufCompletionBlock; // @synthesize sbufCompletionBlock=_sbufCompletionBlock;
@property long long stillImageOrientation; // @synthesize stillImageOrientation=_stillImageOrientation;
@property(getter=isStillImageMirrored) _Bool stillImageMirrored; // @synthesize stillImageMirrored=_stillImageMirrored;
@property _Bool jpegQualitySpecified; // @synthesize jpegQualitySpecified=_jpegQualitySpecified;
@property float jpegQuality; // @synthesize jpegQuality=_jpegQuality;
@property unsigned int imageDataFormatType; // @synthesize imageDataFormatType=_imageDataFormatType;
@property struct CGSize previewImageSize; // @synthesize previewImageSize=_previewImageSize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface AVCaptureVideoDataOutput : AVCaptureOutput
{
    AVCaptureVideoDataOutputInternal *_internal;
}

+ (id)supportedVideoSettingsKeys;
+ (void)initialize;
+ (id)alloc;
- (int)requiredOutputFormatForConnection:(id)arg1;
- (_Bool)hasRequiredOutputFormatForConnection:(id)arg1;
- (_Bool)appliesMirroringWithPhysicalFlipForConnection:(id)arg1;
- (_Bool)appliesOrientationWithPhysicalRotationForConnection:(id)arg1;
- (struct CGSize)outputSizeForSourceFormat:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (id)connectionMediaTypes;
@property(nonatomic) _Bool alwaysDiscardsLateVideoFrames;
@property(nonatomic) CDStruct_1b6d18a9 minFrameDuration;
- (void)_setMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (id)recommendedVideoSettingsForAssetWriterWithOutputFileType:(id)arg1;
- (id)supportedAssetWriterOutputFileTypes;
@property(copy, nonatomic) NSDictionary *videoSettings;
- (id)vettedVideoSettingsForSettingsDictionary:(id)arg1;
- (id)outputScalingModeForSourceFormat:(id)arg1;
- (int)outputFormat;
- (_Bool)usesPreviewSizedBuffers;
@property(readonly, nonatomic) NSArray *availableVideoCodecTypes;
@property(readonly, nonatomic) NSArray *availableVideoCVPixelFormatTypes;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *sampleBufferCallbackQueue;
@property(readonly, nonatomic) id <AVCaptureVideoDataOutputSampleBufferDelegate> sampleBufferDelegate;
- (void)setSampleBufferDelegate:(id)arg1 queue:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface AVCaptureVideoDataOutputInternal : NSObject
{
    AVWeakReference *weakReference;
    AVWeakReferencingDelegateStorage *delegateStorage;
    NSDictionary *videoSettings;
    CDStruct_1b6d18a9 deprecatedMinFrameDuration;
    _Bool alwaysDiscardsLateVideoFrames;
    NSObject<OS_dispatch_queue> *bufferQueue;
    struct OpaqueFigSimpleMutex *remoteQueueMutex;
    void *remoteReceiverQueue;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureVideoDataOutputInternal_FigRecorder : NSObject
{
    AVWeakReferencingDelegateStorage *delegateStorage;
    _Bool delegateRespondsToDidOutputSBufCallback;
    _Bool delegateRespondsToDidDropSBufCallback;
    NSDictionary *videoSettings;
    CDStruct_1b6d18a9 deprecatedMinFrameDuration;
    _Bool alwaysDiscardsLateVideoFrames;
}

- (void)dealloc;
- (id)init;

@end

@interface AVCaptureVideoDataOutput_FigRecorder : AVCaptureOutput_FigRecorder
{
    AVCaptureVideoDataOutputInternal_FigRecorder *_internal;
}

+ (id)supportedVideoSettingsKeys;
+ (void)initialize;
- (void)_AVCaptureVideoDataOutput_VideoDataBecameReady;
- (_Bool)appliesMirroringWithPhysicalFlipForConnection:(id)arg1;
- (_Bool)appliesOrientationWithPhysicalRotationForConnection:(id)arg1;
- (struct CGSize)outputSizeForCaptureOptions:(id)arg1;
- (void)didStartForSession:(id)arg1;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)handleEnabledChangedForConnection:(id)arg1;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (id)connectionMediaTypes;
@property(nonatomic) _Bool alwaysDiscardsLateVideoFrames;
@property(nonatomic) CDStruct_1b6d18a9 minFrameDuration;
- (void)_setMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (id)recommendedVideoSettingsForAssetWriterWithOutputFileType:(id)arg1;
- (id)supportedAssetWriterOutputFileTypes;
@property(copy, nonatomic) NSDictionary *videoSettings;
- (id)vettedVideoSettingsForSettingsDictionary:(id)arg1;
@property(readonly, nonatomic) NSArray *availableVideoCodecTypes;
@property(readonly, nonatomic) NSArray *availableVideoCVPixelFormatTypes;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *sampleBufferCallbackQueue;
@property(readonly, nonatomic) id <AVCaptureVideoDataOutputSampleBufferDelegate_FigRecorder> sampleBufferDelegate;
- (void)setSampleBufferDelegate:(id)arg1 queue:(id)arg2;
- (void)setSession:(id)arg1;
- (_Bool)isTheOnlyDataOutput;
- (void)dealloc;
- (id)init;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVCaptureVideoPreviewLayer : CALayer
{
    AVCaptureVideoPreviewLayerInternal *_internal;
}

+ (id)layerWithSessionWithNoConnection:(id)arg1;
+ (id)layerWithSession:(id)arg1;
+ (id)alloc;
+ (void)initialize;
- (void)_handleNotification:(id)arg1 payload:(id)arg2;
- (void)_updateCaptureDeviceTransform;
- (void)_setSensorAndEstimatedPreviewSizes;
- (struct CGRect)rectForMetadataOutputRectOfInterest:(struct CGRect)arg1;
- (struct CGRect)metadataOutputRectOfInterestForRect:(struct CGRect)arg1;
- (id)transformedMetadataObjectForMetadataObject:(id)arg1;
- (id)_input;
- (struct CGRect)rectForMetadataObject:(id)arg1;
- (struct CGRect)rectForCaptureDeviceFaceRect:(struct CGRect)arg1;
- (struct CGPoint)pointForCaptureDevicePointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)captureDevicePointOfInterestForPoint:(struct CGPoint)arg1;
- (id)liveConnections;
- (void)setSinkID:(id)arg1;
- (id)sinkID;
- (void)detachFromFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)attachToFigCaptureSession:(struct OpaqueFigCaptureSession *)arg1;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (_Bool)canAddConnectionForMediaType:(id)arg1;
- (void)removeConnection:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (id)connectionMediaTypes;
- (id)connections;
- (id)activeConnections;
- (void)layerDidBecomeVisible:(_Bool)arg1;
- (void)setChromaNoiseReductionEnabled:(_Bool)arg1;
- (_Bool)isChromaNoiseReductionEnabled;
- (_Bool)isChromaNoiseReductionSupported;
- (void)setPaused:(_Bool)arg1;
- (_Bool)isPaused;
@property(nonatomic, getter=isMirrored) _Bool mirrored;
- (_Bool)_isMirrored;
@property(nonatomic) _Bool automaticallyAdjustsMirroring;
- (_Bool)_automaticallyAdjustsMirroring;
@property(readonly, nonatomic, getter=isMirroringSupported) _Bool mirroringSupported;
@property(nonatomic) long long orientation;
- (long long)_orientation;
@property(readonly, nonatomic, getter=isOrientationSupported) _Bool orientationSupported;
@property(copy) NSString *videoGravity;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)layoutSublayers;
- (void)setBounds:(struct CGRect)arg1;
- (void)setSessionWithNoConnection:(id)arg1;
@property(retain, nonatomic) AVCaptureSession *session;
@property(readonly, nonatomic) AVCaptureConnection *connection;
- (void)dealloc;
- (id)initWithLayer:(id)arg1;
- (double)previewRotationDegrees;
- (id)_initWithSession:(id)arg1 makeConnection:(_Bool)arg2;
- (id)initWithSessionWithNoConnection:(id)arg1;
- (id)initWithSession:(id)arg1;
- (id)init;
- (void)centerSublayer:(long long)arg1;

@end

@interface AVCaptureVideoPreviewLayerInternal : NSObject
{
    NSString *sinkID;
    AVCaptureSession *session;
    AVCaptureConnection *connection;
    struct OpaqueFigCaptureSession *figCaptureSession;
    CALayer *sublayer;
    struct CGSize sensorSize;
    NSString *sensorToPreviewVTScalingMode;
    struct CGSize previewSize;
    double previewRotationDegrees;
    NSString *gravity;
    _Bool disableActions;
    AVWeakReference *weakReference;
    long long orientation;
    _Bool automaticallyAdjustsMirroring;
    _Bool mirrored;
    _Bool isPresentationLayer;
    _Bool visible;
    _Bool isPaused;
    _Bool chromaNoiseReductionEnabled;
    int changeSeed;
    struct CGAffineTransform captureDeviceTransform;
    double rollAdjustment;
}

@end

@interface AVCaptureVideoPreviewLayerInternal_FigRecorder : NSObject
{
    AVCaptureSession_FigRecorder *session;
    AVCaptureConnection_FigRecorder *connection;
    CALayer *sublayer;
    struct CGSize sensorSize;
    NSString *sensorToPreviewVTScalingMode;
    struct CGSize previewSize;
    double previewRotationDegrees;
    NSString *gravity;
    _Bool disableActions;
    long long orientation;
    _Bool automaticallyAdjustsMirroring;
    _Bool mirrored;
    _Bool isPresentationLayer;
    _Bool visible;
    _Bool isPaused;
    _Bool chromaNoiseReductionEnabled;
    int changeSeed;
    struct CGAffineTransform captureDeviceTransform;
    double rollAdjustment;
}

@end

@interface AVCaptureVideoPreviewLayer_FigRecorder : CALayer
{
    AVCaptureVideoPreviewLayerInternal_FigRecorder *_internal;
}

+ (id)layerWithSession:(id)arg1;
+ (void)initialize;
- (void)_updateCaptureDeviceTransform;
- (struct CGRect)rectForMetadataOutputRectOfInterest:(struct CGRect)arg1;
- (struct CGRect)metadataOutputRectOfInterestForRect:(struct CGRect)arg1;
- (id)transformedMetadataObjectForMetadataObject:(id)arg1;
- (id)_input;
- (struct CGRect)rectForMetadataObject:(id)arg1;
- (struct CGRect)rectForCaptureDeviceFaceRect:(struct CGRect)arg1;
- (struct CGPoint)pointForCaptureDevicePointOfInterest:(struct CGPoint)arg1;
- (struct CGPoint)captureDevicePointOfInterestForPoint:(struct CGPoint)arg1;
- (id)liveConnections;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (id)notReadyError;
- (_Bool)canAddConnectionForMediaType:(id)arg1;
- (void)removeConnection:(id)arg1;
- (id)addConnection:(id)arg1 error:(id *)arg2;
- (id)connectionMediaTypes;
- (id)connections;
- (id)activeConnections;
- (void)_applyOverridesToCaptureOptions:(id)arg1;
- (void)didStopForSession:(id)arg1 error:(id)arg2;
- (void)didStartForSession:(id)arg1;
- (void)setHidden:(_Bool)arg1;
- (void)layerDidBecomeVisible:(_Bool)arg1;
- (void)setChromaNoiseReductionEnabled:(_Bool)arg1;
- (_Bool)isChromaNoiseReductionEnabled;
- (_Bool)isChromaNoiseReductionSupported;
- (void)setPaused:(_Bool)arg1;
- (_Bool)isPaused;
@property(nonatomic, getter=isMirrored) _Bool mirrored;
- (_Bool)_isMirrored;
@property(nonatomic) _Bool automaticallyAdjustsMirroring;
- (_Bool)_automaticallyAdjustsMirroring;
@property(readonly, nonatomic, getter=isMirroringSupported) _Bool mirroringSupported;
@property(nonatomic) long long orientation;
- (long long)_orientation;
@property(readonly, nonatomic, getter=isOrientationSupported) _Bool orientationSupported;
@property(copy) NSString *videoGravity;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateInternalStateForCaptureOptions:(id)arg1;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
- (void)handleEnabledChangedForConnection:(id)arg1;
- (id)subLayer;
- (void)layoutSublayers;
- (void)setBounds:(struct CGRect)arg1;
@property(retain, nonatomic) AVCaptureSession_FigRecorder *session;
@property(readonly, nonatomic) AVCaptureConnection_FigRecorder *connection;
- (void)dealloc;
- (id)initWithLayer:(id)arg1;
- (double)previewRotationDegrees;
- (id)initWithSession:(id)arg1;
- (id)init;
- (void)centerSublayer;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVMetadataItem : NSObject <AVAsynchronousKeyValueLoading, NSCopying, NSMutableCopying>
{
    AVMetadataItemInternal *_priv;
}

+ (id)dataTypeForValue:(id)arg1;
+ (id)_figMetadataPropertyFromMetadataItems:(id)arg1;
+ (id)_replaceQuickTimeUserDataKeySpaceWithISOUserDataKeySpaceIfRequired:(id)arg1;
+ (id)_isoUserDataKeysRequiringKeySpaceConversion;
+ (_Bool)_clientExpectsISOUserDataKeysInQuickTimeUserDataKeySpace;
+ (id)keySpaceForIdentifier:(id)arg1;
+ (id)keyForIdentifier:(id)arg1;
+ (id)identifierForKey:(id)arg1 keySpace:(id)arg2;
+ (id)metadataItemsFromArray:(id)arg1 filteredByMetadataItemFilter:(id)arg2;
+ (id)metadataItemsFromArray:(id)arg1 withStringValue:(id)arg2;
+ (id)metadataItemsFromArray:(id)arg1 withKey:(id)arg2 keySpace:(id)arg3;
+ (id)metadataItemsFromArray:(id)arg1 filteredByIdentifier:(id)arg2;
+ (id)metadataItemsFromArray:(id)arg1 filteredAndSortedAccordingToPreferredLanguages:(id)arg2;
+ (id)metadataItemsFromArray:(id)arg1 withLocale:(id)arg2;
+ (void)initialize;
- (void)cancelLoading;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (id)_conformingDataTypes;
@property(readonly, copy) NSDictionary *extraAttributes;
- (id)_serializationDataType;
@property(readonly, copy) NSString *dataType;
@property(readonly, copy) id <NSObject><NSCopying> value;
@property(readonly) CDStruct_1b6d18a9 duration;
@property(readonly) CDStruct_1b6d18a9 time;
@property(readonly, copy) NSString *extendedLanguageTag;
@property(readonly, copy) NSLocale *locale;
@property(readonly, copy) NSString *identifier;
- (id)keySpace;
- (id)commonKey;
- (id)key;
- (void *)_copyValueAsCFTypeWithFormatDescription:(struct opaqueCMFormatDescription *)arg1 failureReason:(id *)arg2;
- (id)_figMetadataSpecificationReturningError:(id *)arg1;
- (id)_figMetadataFormat;
- (id)_figMetadataDictionary;
- (id)_figMetadataProperties;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)_areExtraAttributesOf:(id)arg1 comparableToExtraAttributesOf:(id)arg2;
- (id)intrinsicAttributesOfExtraAttributes:(id)arg1;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)_initWithFigMetadataDictionary:(id)arg1;
- (id)_initWithReader:(struct OpaqueFigMetadataReader *)arg1 itemIndex:(long long)arg2;
- (id)init;
- (id)_keyAsString;
- (void)_extractPropertiesFromDictionary:(id)arg1;
- (void)_updateLocaleFromExtendedLanguageTag:(id)arg1;
- (void)_updateExtendedLanguageTagFromLocale:(id)arg1;
- (void)_updateIdentifier;
- (void)_updateCommonKey;
- (void)_makePropertiesReady;
- (void)_makeValueReady;
- (struct CGImage *)imageValue;
@property(readonly) NSData *dataValue;
@property(readonly) NSDate *dateValue;
@property(readonly) NSNumber *numberValue;
@property(readonly) NSString *stringValue;

@end

@interface AVChapterMetadataItem : AVMetadataItem
{
    AVChapterMetadataItemInternal *_privChapter;
}

- (void)cancelLoading;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (void)_ensureValueLoadedSync;
- (void)_setValueStatus:(long long)arg1 figErrorCode:(int)arg2;
- (long long)_valueStatus;
- (_Bool)_valueForKeyDependsOnMetadataValue:(id)arg1;
- (long long)_chapterIndex;
- (long long)_chapterGroupIndex;
- (id)extraAttributes;
- (void)_takeValueFrom:(id)arg1;
- (id)dataType;
- (id)value;
- (CDStruct_1b6d18a9)duration;
- (CDStruct_1b6d18a9)time;
- (id)locale;
- (id)keySpace;
- (id)commonKey;
- (id)key;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (void)_removeFigAssetNotifications;
- (void)_addFigAssetNotifications;
- (id)_initWithAsset:(id)arg1 chapterGroupIndex:(long long)arg2 chapterIndex:(long long)arg3 chapterType:(id)arg4 locale:(id)arg5 chapterDataType:(id)arg6 time:(CDStruct_1b6d18a9)arg7 duration:(CDStruct_1b6d18a9)arg8;
- (id)init;

@end

@interface AVChapterMetadataItemInternal : NSObject
{
    AVWeakReference *weakReference;
    struct OpaqueFigAsset *figAsset;
    long long chapterGroupIndex;
    long long chapterIndex;
    NSString *chapterType;
    NSLocale *locale;
    NSString *chapterDataType;
    id <NSObject><NSCopying> value;
    CDStruct_1b6d18a9 time;
    CDStruct_1b6d18a9 duration;
    long long valueStatus;
    int valueErrorCode;
    NSMutableArray *completions;
    NSObject<OS_dispatch_queue> *readWriteQueue;
}

@end

@interface AVComposition : AVAsset <NSMutableCopying>
{
    AVCompositionInternal *_priv;
}

+ (void)initialize;
- (void)_setNaturalSize:(struct CGSize)arg1;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) NSArray *tracks;
- (id)_mutableTracks;
- (id)_newTrackForIndex:(long long)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (Class)_classForTrackInspectors;
- (struct OpaqueFigFormatReader *)_formatReader;
- (id)_assetInspector;
- (id)_assetInspectorLoader;
- (void)_loadAssetInspectorAndLoaderOnce;
- (struct OpaqueFigMutableComposition *)_mutableComposition;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)_initWithComposition:(id)arg1;
- (int)_createEmptyMutableCompositionIfNeeded;

@end

@interface AVFormatReaderInspector : AVAssetInspector
{
    struct OpaqueFigFormatReader *_formatReader;
    _Bool didCheckForSaveRestriction;
    _Bool hasSaveRestriction;
}

- (_Bool)containsMovieFragments;
- (_Bool)canContainMovieFragments;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)_hasQTSaveRestriction;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)lyrics;
- (id)trackReferences;
- (id)alternateTrackGroups;
- (long long)trackCount;
- (_Bool)providesPreciseDurationAndTiming;
- (int)naturalTimeScale;
- (struct CGSize)naturalSize;
- (struct CGAffineTransform)preferredTransform;
- (float)preferredSoundCheckVolumeNormalization;
- (float)preferredVolume;
- (float)preferredRate;
- (CDStruct_1b6d18a9)duration;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;
@property(retain, nonatomic, getter=_formatReader, setter=_setFormatReader:) struct OpaqueFigFormatReader *formatReader;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithFormatReader:(struct OpaqueFigFormatReader *)arg1;

@end

@interface AVCompositionFormatReaderInspector : AVFormatReaderInspector
{
}

- (_Bool)isCompatibleWithSavedPhotosAlbum;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)isPlayable;

@end

@interface AVCompositionInternal : NSObject
{
    struct OpaqueFigMutableComposition *mutableComposition;
    long long formatReaderInitializationOnce;
    long long assetInspectorInitializationOnce;
    long long tracksInitializationOnce;
    struct OpaqueFigFormatReader *formatReader;
    AVAssetInspectorLoader *assetInspectorLoader;
    AVAssetInspector *assetInspector;
    struct CGSize naturalSize;
    NSMutableArray *tracks;
}

@end

@interface AVCompositionTrack : AVAssetTrack
{
    AVCompositionTrackInternal *_priv;
}

@property(readonly, copy, nonatomic) NSArray *segments;
- (struct OpaqueFigMutableComposition *)_mutableComposition;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

@end

@interface AVCompositionTrackInternal : NSObject
{
    struct OpaqueFigMutableComposition *mutableComposition;
}

@end

@interface AVTrackReaderInspector : AVAssetTrackInspector
{
    struct OpaqueFigFormatReader *_formatReader;
    struct OpaqueFigTrackReader *_trackReader;
    int _trackID;
    unsigned int _mediaType;
    AVWeakReference *_weakReferenceToAsset;
}

- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isExcludedFromAutoselectionInTrackGroup;
- (long long)alternateGroupID;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)segmentForTrackTime:(CDStruct_1b6d18a9)arg1;
- (id)segments;
- (CDStruct_1b6d18a9)minSampleDuration;
- (float)nominalFrameRate;
- (id)loudnessInfo;
- (float)preferredVolume;
- (long long)layer;
- (struct CGAffineTransform)preferredTransform;
- (struct CGSize)dimensions;
- (struct CGSize)naturalSize;
- (id)extendedLanguageTag;
- (id)languageCode;
- (float)estimatedDataRate;
- (int)naturalTimeScale;
- (_Bool)requiresFrameReordering;
- (CDStruct_e83c9415)timeRange;
- (long long)totalSampleDataLength;
- (_Bool)isSelfContained;
- (_Bool)isEnabled;
- (id)formatDescriptions;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;
- (struct OpaqueFigTrackReader *)_figTrackReader;
- (id)mediaType;
- (unsigned int)_figMediaType;
- (int)trackID;
- (id)asset;
- (void)finalize;
- (void)dealloc;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

@end

@interface AVCompositionTrackReaderInspector : AVTrackReaderInspector
{
    struct OpaqueFigMutableComposition *_figMutableComposition;
}

- (id)segmentForTrackTime:(CDStruct_1b6d18a9)arg1;
- (id)segments;
@property(readonly, nonatomic, getter=_mutableComposition) struct OpaqueFigMutableComposition *mutableComposition;
- (void)finalize;
- (void)dealloc;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

@end

@interface AVCompositionTrackSegment : AVAssetTrackSegment
{
    AVCompositionTrackSegmentInternal *_priv;
}

+ (id)compositionTrackSegmentWithTimeRange:(CDStruct_e83c9415)arg1;
+ (id)compositionTrackSegmentWithURL:(id)arg1 trackID:(int)arg2 sourceTimeRange:(CDStruct_e83c9415)arg3 targetTimeRange:(CDStruct_e83c9415)arg4;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, nonatomic) int sourceTrackID;
@property(readonly, nonatomic) NSURL *sourceURL;
@property(readonly, nonatomic, getter=isEmpty) _Bool empty;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)initWithTimeRange:(CDStruct_e83c9415)arg1;
- (id)initWithURL:(id)arg1 trackID:(int)arg2 sourceTimeRange:(CDStruct_e83c9415)arg3 targetTimeRange:(CDStruct_e83c9415)arg4;
- (id)init;

@end

@interface AVCompositionTrackSegmentInternal : NSObject
{
    NSURL *editAssetURL;
    int editAssetTrackID;
}

@end

@interface AVCustomVideoCompositorSession : NSObject
{
    struct OpaqueFigVideoCompositor *_figCustomCompositor;
    _Bool _hasRegisteredFigCustomCompositorCallbacks;
    NSDictionary *_clientRequiredPixelBufferAttributes;
    AVWeakReference *_weakSelf;
    NSObject<OS_dispatch_queue> *_videoCompositionQ;
    AVVideoComposition *_videoComposition;
    _Bool _videoCompositionDidChange;
    NSObject<OS_dispatch_queue> *_clientCustomCompositorQ;
    id <AVVideoCompositing> _clientCustomCompositor;
    NSObject<OS_dispatch_queue> *_clientErrorQ;
    NSError *_clientError;
    NSObject<OS_dispatch_queue> *_renderContextQ;
    AVVideoCompositionRenderContext *_renderContext;
    NSObject<OS_dispatch_queue> *_finishedRequestQ;
}

+ (id)sessionWithVideoComposition:(id)arg1 recyclingSession:(id)arg2;
- (void)requestDidCancel:(id)arg1;
- (void)request:(id)arg1 didFinishWithError:(id)arg2;
- (void)request:(id)arg1 didFinishWithComposedPixelBuffer:(struct __CVBuffer *)arg2;
- (id)getAndClearClientError;
- (struct OpaqueFigVideoCompositor *)_copyFigVideoCompositor;
- (void)setVideoComposition:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (void)_willDeallocOrFinalize;
- (void)detachVideoComposition;
- (id)customVideoCompositor;
- (id)initWithVideoComposition:(id)arg1;
- (void)_cleanupFigCallbacks;
- (int)_setupFigCallbacks;
- (void)_customCompositorFigPropertyDidChange;
- (int)_customCompositorShouldCancelPendingFrames;
- (int)_compositionFrame:(struct OpaqueFigVideoCompositorFrame *)arg1 atTime:(CDStruct_1b6d18a9)arg2 requiresRenderUsingSources:(id)arg3 withInstruction:(void *)arg4;

@end

@interface AVExportSettingsOutputSettingsAssistantBaseSettings : NSObject <AVOutputSettingsAssistantBaseSettingsProvider>
{
    NSDictionary *_exportSettings;
}

@property(readonly, nonatomic) NSDictionary *baseVideoSettings;
@property(readonly, nonatomic) NSDictionary *baseAudioSettings;
- (void)dealloc;
- (id)initWithOutputSettingsPreset:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVExportSettingsOutputSettingsAssistantVideoSettingsAdjuster : NSObject <AVOutputSettingsAssistantVideoSettingsAdjuster>
{
    NSString *_outputSettingsPresetIdentifier;
    NSDictionary *_exportSettings;
}

- (long long)averageBitRateForSourceDimensions:(struct CGSize)arg1 andTargetFrameRate:(float)arg2;
- (void)dealloc;
- (id)initWithOutputSettingsPreset:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVExternalDevice : NSObject
{
    AVExternalDeviceInternal *_externalDevice;
}

+ (id)sharedLocalDevice;
+ (id)currentCarPlayExternalDevice;
+ (id)currentExternalDevice;
- (struct OpaqueFigEndpoint *)figEndpoint;
- (void)_triggerFakeNotificationNamed:(id)arg1 withPayload:(id)arg2;
- (void)takeScreenForClient:(id)arg1 reason:(id)arg2;
- (id)borrowScreenForClient:(id)arg1 reason:(id)arg2;
- (id)requestTurnByTurnNavigationOwnership;
- (void)requestCarUI;
@property(readonly, nonatomic) _Bool ownsTurnByTurnNavigation;
@property(readonly, nonatomic) _Bool limitedUI;
@property(readonly, nonatomic) NSArray *limitedUIElements;
@property(readonly, nonatomic) _Bool rightHandDrive;
@property(readonly, nonatomic) _Bool nightModeSupported;
@property(readonly, nonatomic) _Bool nightMode;
@property(readonly, nonatomic) NSString *modelName;
@property(readonly, nonatomic) NSData *settingsIcon;
@property(readonly, nonatomic) _Bool OEMIconVisible;
@property(readonly, nonatomic) NSString *OEMIconLabel;
@property(readonly, nonatomic) NSData *OEMIcon;
- (id)externalDeviceHIDWithUUID:(id)arg1;
@property(readonly, nonatomic) NSArray *externalDeviceHIDs;
@property(readonly, nonatomic) NSDictionary *screenInputCapabilities;
@property(readonly, nonatomic) NSString *name;
@property(readonly, nonatomic) NSString *ID;
@property(readonly, nonatomic) NSArray *screenIDs;
- (id)_figEndpointPropertyValueForKey:(struct __CFString *)arg1;
@property(nonatomic) id <AVExternalDeviceDelegate> delegate;
- (void)finalize;
- (void)dealloc;
- (id)_weakReference;
- (id)initWithFigEndpoint:(struct OpaqueFigEndpoint *)arg1;
- (id)initWithCurrentCarPlayExternalDevice;
- (id)init;

@end

@interface AVExternalDeviceController : NSObject
{
    AVExternalDeviceControllerInternal *_externalDeviceController;
}

- (_Bool)isExternalDeviceCurrent:(id)arg1;
- (_Bool)setCurrentExternalDevice:(id)arg1;
- (_Bool)setCurrentExternalDevice:(id)arg1 withPassword:(id)arg2;
@property(readonly, copy, nonatomic) NSArray *availableExternalDevices;
@property(nonatomic) __weak id <AVExternalDeviceControllerDelegate> delegate;
@property(nonatomic) long long discoveryMode;
- (void)dealloc;
- (id)init;

@end

@interface AVExternalDeviceControllerInternal : NSObject
{
    id <AVExternalDeviceControllerDelegate> delegate;
    long long discoveryMode;
}

@end

@interface AVExternalDeviceHID : NSObject
{
    AVExternalDeviceHIDInternal *_externalDeviceHID;
}

- (id)_externalDevice;
@property(nonatomic) long long inputMode;
@property(readonly, nonatomic) NSString *UUID;
@property(readonly, nonatomic) NSString *screenID;
- (void)finalize;
- (void)dealloc;
- (id)initWithExternalDeviceAndHIDDictionary:(id)arg1 hidDictionary:(id)arg2;
- (id)_figEndpointHIDInputMode;

@end

@interface AVExternalDeviceHIDInternal : NSObject
{
    AVWeakReference *weakReferenceToExternalDevice;
    NSString *UUID;
    NSString *screenID;
    NSNumber *inputMode;
}

@end

@interface AVExternalDeviceInternal : NSObject
{
    struct OpaqueFigEndpoint *_figEndpoint;
    id <AVExternalDeviceDelegate> _delegate;
    AVWeakReference *_weakReference;
    NSArray *_HIDs;
    long long _makeHIDsOnlyOnce;
}

@end

@interface AVExternalDeviceScreenBorrowToken : NSObject
{
    AVExternalDevice *_externalDevice;
    NSString *_client;
    NSString *_reason;
}

@property(readonly, nonatomic) NSString *reason; // @synthesize reason=_reason;
@property(readonly, nonatomic) NSString *client; // @synthesize client=_client;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)initWithExternalDevice:(id)arg1 client:(id)arg2 reason:(id)arg3;

@end

@interface AVExternalDeviceTurnByTurnToken : NSObject
{
    AVExternalDevice *_externalDevice;
}

- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)initWithExternalDevice:(id)arg1;

@end

@interface AVExternalProtectionMonitor : NSObject
{
    AVExternalProtectionMonitorInternal *_monitor;
}

@property(readonly, nonatomic) long long externalProtectionState;
- (void)dealloc;
- (id)init;

@end

@interface AVExternalProtectionMonitorInternal : NSObject
{
}

@end

@interface AVFigAssetInspector : AVAssetInspector
{
    struct OpaqueFigAsset *_figAsset;
    struct OpaqueFigFormatReader *_formatReader;
    long long _formatReaderOnce;
    _Bool didCheckForSaveRestriction;
    _Bool hasSaveRestriction;
}

- (id)propertyListForProxy;
- (_Bool)containsMovieFragments;
- (_Bool)canContainMovieFragments;
- (id)SHA1Digest;
- (_Bool)isCompatibleWithSavedPhotosAlbum;
- (_Bool)isPlayable;
@property(readonly, nonatomic, getter=_isStreaming) _Bool streaming;
@property(readonly, nonatomic) _Bool hasProtectedContent;
@property(readonly, nonatomic) unsigned long long downloadToken;
@property(readonly, nonatomic) NSURL *resolvedURL;
@property(readonly, nonatomic) NSURL *URL;
@property(readonly, nonatomic) NSArray *figChapters;
@property(readonly, nonatomic) NSArray *figChapterGroupInfo;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)_hasQTSaveRestriction;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)lyrics;
- (id)creationDate;
- (id)mediaSelectionGroups;
- (id)trackReferences;
- (id)alternateTrackGroups;
- (long long)trackCount;
- (_Bool)providesPreciseDurationAndTiming;
- (int)naturalTimeScale;
- (struct CGSize)naturalSize;
- (struct CGAffineTransform)preferredTransform;
- (float)preferredSoundCheckVolumeNormalization;
- (float)preferredVolume;
- (float)preferredRate;
- (CDStruct_1b6d18a9)duration;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;
@property(readonly, nonatomic, getter=_formatReader) struct OpaqueFigFormatReader *formatReader;
@property(readonly, nonatomic, getter=_figAsset) struct OpaqueFigAsset *figAsset;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithFigAsset:(struct OpaqueFigAsset *)arg1;

@end

@interface AVFigAssetInspectorLoader : AVAssetInspectorLoader
{
    struct OpaqueFigAsset *_figAsset;
    int _figAssetCreationStatus;
    unsigned long long _figAssetCreationFlags;
    NSDictionary *_figAssetCreationOptions;
    long long _figAssetOnce;
    AVWeakReference *_weakReferenceToAsset;
    AVAssetInspector *_assetInspector;
    long long _assetInspectorOnce;
    NSObject<OS_dispatch_queue> *_completionHandlerQueue;
    struct OpaqueFigSimpleMutex *_loadingMutex;
    NSMutableArray *_loadingBatches;
    _Bool _loadingCanceled;
    NSURL *_URL;
}

+ (void)_mapAssetKeys:(id)arg1 toFigAssetPropertySet:(id)arg2 figAssetTrackPropertySet:(id)arg3 callerName:(id)arg4;
+ (id)_figAssetTrackPropertiesForKeys;
+ (id)_figAssetPropertiesForKeys;
- (void)_invokeCompletionHandlerForLoadingBatches:(id)arg1;
- (_Bool)_isStreaming;
- (_Bool)hasProtectedContent;
- (unsigned long long)downloadToken;
- (id)resolvedURL;
- (id)URL;
- (id)figChapters;
- (id)figChapterGroupInfo;
- (_Bool)isCompatibleWithSavedPhotosAlbum;
- (_Bool)isComposable;
- (_Bool)isReadable;
- (_Bool)isExportable;
- (_Bool)isPlayable;
- (id)lyrics;
- (CDStruct_1b6d18a9)duration;
- (void)_ensureAllDependenciesOfKeyAreLoaded:(id)arg1;
- (void)cancelLoading;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 keysForCollectionKeys:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (long long)_loadStatusForProperty:(id)arg1 figAsset:(struct OpaqueFigAsset *)arg2 returningError:(int *)arg3;
- (id)_loadingBatches;
- (struct OpaqueFigSimpleMutex *)_loadingMutex;
- (id)_completionHandlerQueue;
- (Class)_classForTrackInspectors;
- (struct OpaqueFigAsset *)_figAsset;
- (id)assetInspector;
- (struct OpaqueFigFormatReader *)_formatReader;
- (void)finalize;
- (void)dealloc;
- (void)_removeFigAssetNotifications;
- (void)_addFigAssetNotifications;
- (id)initWithFigAsset:(struct OpaqueFigAsset *)arg1 forAsset:(id)arg2;
- (id)initWithURL:(id)arg1 figAssetCreationFlags:(unsigned long long)arg2 figAssetCreationOptions:(id)arg3 forAsset:(id)arg4;

@end

@interface AVFigAssetTrackInspector : AVAssetTrackInspector
{
    struct OpaqueFigAsset *_figAsset;
    struct OpaqueFigFormatReader *_figFormatReader;
    struct OpaqueFigAssetTrack *_figAssetTrack;
    struct OpaqueFigTrackReader *_figTrackReader;
    struct OpaqueFigSimpleMutex *_loadingMutex;
    NSObject<OS_dispatch_queue> *_completionHandlerQueue;
    NSMutableArray *_loadingBatches;
    AVWeakReference *_weakReferenceToAsset;
}

- (void)_invokeCompletionHandlerForLoadingBatches:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)hasProtectedContent;
- (id)_trackReferences;
- (_Bool)isExcludedFromAutoselectionInTrackGroup;
- (long long)alternateGroupID;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)segmentForTrackTime:(CDStruct_1b6d18a9)arg1;
- (id)segments;
- (CDStruct_1b6d18a9)minSampleDuration;
- (float)nominalFrameRate;
- (id)loudnessInfo;
- (float)preferredVolume;
- (long long)layer;
- (struct CGAffineTransform)preferredTransform;
- (struct CGSize)dimensions;
- (struct CGSize)naturalSize;
- (id)extendedLanguageTag;
- (id)languageCode;
- (float)estimatedDataRate;
- (int)naturalTimeScale;
- (_Bool)requiresFrameReordering;
- (CDStruct_e83c9415)mediaDecodeTimeRange;
- (CDStruct_e83c9415)mediaPresentationTimeRange;
- (CDStruct_e83c9415)timeRange;
- (long long)totalSampleDataLength;
- (_Bool)isSelfContained;
- (_Bool)isEnabled;
- (int)playabilityValidationResult;
- (_Bool)isPlayable;
- (id)formatDescriptions;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;
- (id)mediaType;
- (unsigned int)_figMediaType;
- (int)trackID;
- (id)_loadingBatches;
- (struct OpaqueFigSimpleMutex *)_loadingMutex;
- (struct OpaqueFigTrackReader *)_figTrackReader;
- (struct OpaqueFigAssetTrack *)_figAssetTrack;
- (id)asset;
- (void)_ensureAllDependenciesOfKeyAreLoaded:(id)arg1;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (long long)_loadStatusForFigAssetTrackProperty:(id)arg1 returningError:(int *)arg2;
- (void)_removeFigNotifications;
- (void)_addFigNotifications;
- (void)finalize;
- (void)dealloc;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

@end

@interface AVFigAssetWriterTrack : NSObject
{
    AVWeakReference *_weakReference;
    struct OpaqueFigAssetWriter *_figAssetWriter;
    int _trackID;
    NSString *_mediaType;
    AVMediaFileType *_mediaFileType;
    NSObject<OS_dispatch_queue> *_aboveHighWaterLevelQueue;
    _Bool _aboveHighWaterLevel;
    CDStruct_1b6d18a9 _sampleBufferCoalescingInterval;
    AVAssetWriterInputFigAssetWriterEndPassOperation *_endPassOperation;
}

+ (id)assetWriterTrackWithFigAssetWriter:(struct OpaqueFigAssetWriter *)arg1 mediaType:(id)arg2 mediaFileType:(id)arg3 formatSpecification:(id)arg4 sourcePixelBufferAttributes:(id)arg5 multiPass:(_Bool)arg6 error:(id *)arg7;
@property(readonly, nonatomic) AVMediaFileType *mediaFileType; // @synthesize mediaFileType=_mediaFileType;
@property(readonly, nonatomic) NSString *mediaType; // @synthesize mediaType=_mediaType;
@property(readonly, nonatomic) int trackID; // @synthesize trackID=_trackID;
@property(readonly, nonatomic) struct OpaqueFigAssetWriter *figAssetWriter; // @synthesize figAssetWriter=_figAssetWriter;
@property(nonatomic) CDStruct_1b6d18a9 sampleBufferCoalescingInterval; // @synthesize sampleBufferCoalescingInterval=_sampleBufferCoalescingInterval;
- (int)_attachToFigAssetWriterUsingFormatSpecification:(id)arg1 sourcePixelBufferAttributes:(id)arg2 multiPass:(_Bool)arg3 error:(id *)arg4;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setPreferredChunkSize:(long long)arg1;
- (void)setPreferredChunkAlignment:(long long)arg1;
- (void)setPreferredChunkDuration:(CDStruct_1b6d18a9)arg1;
- (void)setExcludeFromAutoSelection:(_Bool)arg1;
- (void)setAlternateGroupID:(short)arg1;
- (void)setLayer:(long long)arg1;
- (void)setTrackVolume:(float)arg1;
- (void)setMarksOutputTrackAsEnabled:(_Bool)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (void)setFigDimensions:(id)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setFigTrackMatrix:(id)arg1;
- (void)setFigMetadata:(id)arg1;
- (_Bool)markEndOfDataReturningError:(id *)arg1;
- (void)prepareToEndSession;
- (void)endPassWithCompletionHandler:(CDUnknownBlockType)arg1;
- (_Bool)addPixelBuffer:(struct __CVBuffer *)arg1 atPresentationTime:(CDStruct_1b6d18a9)arg2 error:(id *)arg3;
- (_Bool)addSampleBuffer:(struct opaqueCMSampleBuffer *)arg1 error:(id *)arg2;
- (_Bool)beginPassReturningError:(id *)arg1;
@property(readonly, getter=isAboveHighWaterLevel) _Bool aboveHighWaterLevel;
@property(readonly, nonatomic) _Bool encoderSupportsMultiPass;
- (void)_refreshAboveHighWaterLevel;
- (void)_figAssetWriterDidDropBelowLowWaterLevelForTrackID:(int)arg1;
@property(readonly, nonatomic) struct __CVPixelBufferPool *pixelBufferPool;
- (void)finalize;
- (void)dealloc;
- (id)initWithFigAssetWriter:(struct OpaqueFigAssetWriter *)arg1 mediaType:(id)arg2 mediaFileType:(id)arg3 formatSpecification:(id)arg4 sourcePixelBufferAttributes:(id)arg5 multiPass:(_Bool)arg6 error:(id *)arg7;
- (id)init;

@end

@interface AVFigAssetWriterAudioTrack : AVFigAssetWriterTrack
{
    NSMutableArray *_pendingAudioSampleBuffers;
}

- (_Bool)markEndOfDataReturningError:(id *)arg1;
- (void)prepareToEndSession;
- (_Bool)addSampleBuffer:(struct opaqueCMSampleBuffer *)arg1 error:(id *)arg2;
- (_Bool)_flushPendingSampleBuffersReturningError:(id *)arg1;
- (int)_attachToFigAssetWriterUsingFormatSpecification:(id)arg1 sourcePixelBufferAttributes:(id)arg2 multiPass:(_Bool)arg3 error:(id *)arg4;
- (void)dealloc;
- (id)initWithFigAssetWriter:(struct OpaqueFigAssetWriter *)arg1 mediaType:(id)arg2 mediaFileType:(id)arg3 formatSpecification:(id)arg4 sourcePixelBufferAttributes:(id)arg5 multiPass:(_Bool)arg6 error:(id *)arg7;

@end

@interface AVFigAssetWriterGenericTrack : AVFigAssetWriterTrack
{
}

@end

@interface AVFigAssetWriterVideoTrack : AVFigAssetWriterTrack
{
}

- (int)_attachToFigAssetWriterUsingFormatSpecification:(id)arg1 sourcePixelBufferAttributes:(id)arg2 multiPass:(_Bool)arg3 error:(id *)arg4;

@end

@interface AVFlashlight : NSObject
{
    AVFlashlightInternal *_internal;
}

+ (_Bool)hasFlashlight;
+ (void)initialize;
+ (id)alloc;
- (void)_handleNotification:(id)arg1 payload:(id)arg2;
@property(readonly, nonatomic) float flashlightLevel;
- (_Bool)setFlashlightLevel:(float)arg1 withError:(id *)arg2;
- (void)turnPowerOff;
- (_Bool)turnPowerOnWithError:(id *)arg1;
@property(readonly, nonatomic, getter=isOverheated) _Bool overheated;
@property(readonly, nonatomic, getter=isAvailable) _Bool available;
- (void)dealloc;
- (id)init;
- (void)_teardownFlashlight;
- (void)_setupFlashlight;

@end

@interface AVFlashlightInternal : NSObject
{
    AVWeakReference *weakReference;
    struct OpaqueFigFlashlight *flashlight;
    _Bool available;
    _Bool overheated;
    float flashlightLevel;
    struct OpaqueFigSimpleMutex *lock;
}

@end

@interface AVFlashlightInternal_FigRecorder : NSObject
{
    struct OpaqueCMBaseObject *recorder;
    AVWeakReference *weakReference;
    _Bool overheated;
    _Bool available;
    float flashlightLevel;
}

@end

@interface AVFlashlight_FigRecorder : NSObject
{
    AVFlashlightInternal_FigRecorder *_internal;
}

+ (_Bool)hasFlashlight;
+ (void)initialize;
- (void)handleNotification:(id)arg1 payload:(id)arg2;
@property(readonly, nonatomic) float flashlightLevel;
- (_Bool)setFlashlightLevel:(float)arg1 withError:(id *)arg2;
- (void)turnPowerOff;
- (_Bool)turnPowerOnWithError:(id *)arg1;
@property(readonly, nonatomic, getter=isOverheated) _Bool overheated;
@property(readonly, nonatomic, getter=isAvailable) _Bool available;
- (void)_refreshIsAvailable;
- (void)dealloc;
- (id)init;
- (void)teardownFigRecorder;
- (_Bool)ensureFigRecorderWithError:(id *)arg1;
- (_Bool)bringupFigRecorderWithError:(id *)arg1;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVFloat64Range : NSObject <NSCopying>
{
    double _minimum;
    double _maximum;
}

+ (id)float64RangeWithAudioValueRange:(struct AudioValueRange)arg1;
+ (id)float64RangeWithMinimum:(double)arg1 maximum:(double)arg2;
@property(readonly, nonatomic) double maximum; // @synthesize maximum=_maximum;
@property(readonly, nonatomic) double minimum; // @synthesize minimum=_minimum;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithAudioValueRange:(struct AudioValueRange)arg1;
- (id)initWithMinimum:(double)arg1 maximum:(double)arg2;

@end

@interface AVFormatSpecification : NSObject
{
    AVOutputSettings *_outputSettings;
    struct opaqueCMFormatDescription *_sourceFormatDescription;
}

+ (id)formatSpecificationWithOutputSettings:(id)arg1 sourceFormatDescription:(struct opaqueCMFormatDescription *)arg2;
- (struct opaqueCMFormatDescription *)sourceFormatDescription;
- (id)outputSettings;
- (void)dealloc;
- (id)initWithOutputSettings:(id)arg1 sourceFormatDescription:(struct opaqueCMFormatDescription *)arg2;

@end

@interface AVFrameRateRange : NSObject
{
    AVFrameRateRangeInternal *_internal;
}

+ (id)frameRateRangeWithMinRate:(int)arg1 maxFrameRate:(int)arg2;
- (_Bool)includesFrameDuration:(CDStruct_1b6d18a9)arg1;
- (_Bool)includesFrameRate:(double)arg1;
@property(readonly) CDStruct_1b6d18a9 minFrameDuration;
@property(readonly) CDStruct_1b6d18a9 maxFrameDuration;
@property(readonly) double maxFrameRate;
@property(readonly) double minFrameRate;
- (void)dealloc;
- (id)initWithMinFrameRate:(int)arg1 maxFrameRate:(int)arg2;
- (_Bool)isEqual:(id)arg1;
- (id)description;

@end

@interface AVFrameRateRangeInternal : NSObject
{
    int minFrameRate;
    int maxFrameRate;
}

@end

@interface AVFrameRateRangeInternal_FigRecorder : NSObject
{
    int minFrameRate;
    int maxFrameRate;
}

@end

@interface AVFrameRateRange_FigRecorder : NSObject
{
    AVFrameRateRangeInternal_FigRecorder *_internal;
}

+ (id)frameRateRangeWithMinRate:(int)arg1 maxFrameRate:(int)arg2;
- (_Bool)includesFrameDuration:(CDStruct_1b6d18a9)arg1;
- (_Bool)includesFrameRate:(double)arg1;
@property(readonly) CDStruct_1b6d18a9 minFrameDuration;
@property(readonly) CDStruct_1b6d18a9 maxFrameDuration;
@property(readonly) double maxFrameRate;
@property(readonly) double minFrameRate;
- (void)dealloc;
- (id)initWithMinFrameRate:(int)arg1 maxFrameRate:(int)arg2;
- (_Bool)isEqual:(id)arg1;
- (id)description;

@end

@interface AVWeakReference : NSObject
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (void)initialize;
- (id)referencedObject;
- (id)initWithReferencedObject:(id)arg1;

@end

@interface AVGarbageCollectedWeakReference : AVWeakReference
{
    id _referencedObject;
    NSString *_cachedReferencedObjectDescription;
}

- (id)referencedObject;
- (id)description;
- (id)init;
- (id)initWithReferencedObject:(id)arg1;

@end

@interface AVGenericMediaFileOutputSettingsValidator : AVMediaFileOutputSettingsValidator
{
}

@end

@interface AVIOKitOutputSettingsAssistantVideoEncoderCapabilities : NSObject <AVOutputSettingsAssistantVideoEncoderCapabilities>
{
}

- (_Bool)averageNonDroppableFrameIntervalIsSupportedByDefaultEncoderForVideoCodec:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVISOOutputSettingsValidator : AVMediaFileOutputSettingsValidator
{
}

- (_Bool)validateVideoOutputSettings:(id)arg1 reason:(id *)arg2;
- (_Bool)validateAudioOutputSettings:(id)arg1 reason:(id *)arg2;

@end

@interface AVMediaDataRequester : NSObject
{
    id <AVMediaDataRequesterConsumer> _mediaDataConsumer;
    NSObject<OS_dispatch_queue> *_requestQueue;
    CDUnknownBlockType _requestBlock;
}

@property(readonly, nonatomic) CDUnknownBlockType requestBlock; // @synthesize requestBlock=_requestBlock;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *requestQueue; // @synthesize requestQueue=_requestQueue;
- (void)_requestMediaDataIfReady;
- (void)invalidate;
- (void)startRequestingMediaData;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)initWithMediaDataConsumer:(id)arg1 requestQueue:(id)arg2 requestBlock:(CDUnknownBlockType)arg3;

@end

@interface AVMediaFileType : NSObject <NSCopying>
{
    NSString *_uti;
    long long _supportsSampleReferencesOnce;
    _Bool _supportsSampleReferences;
}

+ (id)isoFileTypes;
+ (id)_mediaFileTypeWithFileTypeIdentifier:(id)arg1 exceptionReason:(id *)arg2;
+ (id)mediaFileTypeWithFileTypeIdentifier:(id)arg1;
+ (id)allFileTypeIdentifiers;
+ (void)initialize;
- (_Bool)supportsFormat:(struct opaqueCMFormatDescription *)arg1;
- (_Bool)supportsOutputSettings:(id)arg1 reason:(id *)arg2;
@property(readonly, nonatomic) unsigned int audioFileTypeID;
@property(readonly, nonatomic) NSString *figFormatReaderFileFormat;
@property(readonly, nonatomic) NSString *UTI;
@property(readonly, nonatomic) _Bool supportsSampleReferences;
@property(readonly, nonatomic) NSSet *supportedMediaTypes;
@property(readonly, nonatomic) NSString *defaultFileExtension;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithFileTypeIdentifier:(id)arg1 exceptionReason:(id *)arg2;

@end

@interface AVMediaSelectionGroupInternal : NSObject
{
    AVWeakReference *weakReference;
}

@end

@interface AVMediaSelectionKeyValueOption : AVMediaSelectionOption
{
    id _groupID;
    id _groupMediaType;
    NSString *_optionMediaType;
    NSDictionary *_dictionary;
    AVWeakReference *_weakReferenceToGroup;
    _Bool _displaysNonForcedSubtitles;
}

- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)locale;
- (_Bool)isPlayable;
- (_Bool)hasMediaCharacteristic:(id)arg1;
- (id)mediaSubTypes;
- (id)mediaType;
- (id)_groupMediaType;
- (id)_groupID;
- (id)group;
- (id)dictionary;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 group:(id)arg2 dictionary:(id)arg3;

@end

@interface AVMediaSelectionOptionInternal : NSObject
{
    NSString *_displayName;
    NSString *_displayNameLocaleIdentifier;
}

@end

@interface AVMediaSelectionTrackOption : AVMediaSelectionOption
{
    id _groupID;
    AVAssetTrack *_track;
    NSDictionary *_dictionary;
    AVWeakReference *_weakReferenceToGroup;
    _Bool _displaysNonForcedSubtitles;
}

- (int)trackID;
- (id)track;
- (id)associatedMediaSelectionOptionInMediaSelectionGroup:(id)arg1;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)locale;
- (_Bool)isPlayable;
- (_Bool)hasMediaCharacteristic:(id)arg1;
- (id)mediaSubTypes;
- (id)mediaType;
- (_Bool)displaysNonForcedSubtitles;
- (id)_groupID;
- (id)group;
- (id)dictionary;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 group:(id)arg2 dictionary:(id)arg3;

@end

@interface AVMetadataEnumerator : NSEnumerator
{
    struct OpaqueFigMetadataReader *_reader;
    NSEnumerator *_arrayEnumerator;
    id _key;
    NSString *_keySpace;
    NSLocale *_locale;
    long long _count;
    long long _index;
}

+ (id)metadataEnumeratorWithArray:(id)arg1 key:(id)arg2 keySpace:(id)arg3 locale:(id)arg4;
+ (id)metadataEnumeratorWithMetadataReader:(struct OpaqueFigMetadataReader *)arg1;
- (id)nextObject;
- (void)_setLocale:(id)arg1;
- (void)_setKeySpace:(id)arg1;
- (void)_setKey:(id)arg1;
- (void)_setArrayEnumerator:(id)arg1;
- (void)_setMetadataReader:(struct OpaqueFigMetadataReader *)arg1;
- (void)dealloc;
- (void)finalize;
- (id)initWithMetadataReader:(struct OpaqueFigMetadataReader *)arg1 array:(id)arg2 key:(id)arg3 keySpace:(id)arg4 locale:(id)arg5;
- (id)initWithArray:(id)arg1 key:(id)arg2 keySpace:(id)arg3 locale:(id)arg4;
- (id)initWithMetadataReader:(struct OpaqueFigMetadataReader *)arg1;

@end

@interface AVMetadataObject : NSObject
{
    AVMetadataObjectInternal *_objectInternal;
}

+ (id)derivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)originalMetadataObject;
- (id)input;
@property(readonly) NSString *type;
@property(readonly) struct CGRect bounds;
@property(readonly) CDStruct_1b6d18a9 duration;
@property(readonly) CDStruct_1b6d18a9 time;
- (void)dealloc;
- (id)initDerivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)initWithType:(id)arg1 time:(CDStruct_1b6d18a9)arg2 duration:(CDStruct_1b6d18a9)arg3 bounds:(struct CGRect)arg4 originalMetadataObject:(id)arg5 sourceCaptureInput:(id)arg6;
- (id)init;

@end

@interface AVMetadataFaceObject : AVMetadataObject <NSCopying>
{
    AVMetadataFaceObjectInternal *_internal;
}

- (struct CGRect)rightEyeBounds;
- (struct CGRect)leftEyeBounds;
- (_Bool)hasRightEyeBounds;
- (_Bool)hasLeftEyeBounds;
- (int)smileConfidence;
- (_Bool)hasSmileConfidence;
- (int)rightEyeClosedConfidence;
- (int)leftEyeClosedConfidence;
- (_Bool)hasRightEyeClosedConfidence;
- (_Bool)hasLeftEyeClosedConfidence;
@property(readonly) double yawAngle;
@property(readonly) _Bool hasYawAngle;
@property(readonly) double rollAngle;
@property(readonly) _Bool hasRollAngle;
@property(readonly) long long faceID;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)dealloc;
- (id)initDerivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)initWithFaceID:(long long)arg1 hasRollAngle:(_Bool)arg2 rollAngle:(double)arg3 hasYawAngle:(_Bool)arg4 yawAngle:(double)arg5 time:(CDStruct_1b6d18a9)arg6 duration:(CDStruct_1b6d18a9)arg7 bounds:(struct CGRect)arg8 optionalInfoDict:(id)arg9 originalMetadataObject:(id)arg10 sourceCaptureInput:(id)arg11;
- (id)initWithFaceID:(long long)arg1 hasRollAngle:(_Bool)arg2 rollAngle:(double)arg3 hasYawAngle:(_Bool)arg4 yawAngle:(double)arg5 time:(CDStruct_1b6d18a9)arg6 duration:(CDStruct_1b6d18a9)arg7 bounds:(struct CGRect)arg8;
- (id)initWithType:(id)arg1 time:(CDStruct_1b6d18a9)arg2 duration:(CDStruct_1b6d18a9)arg3 bounds:(struct CGRect)arg4 originalMetadataObject:(id)arg5 sourceCaptureInput:(id)arg6;

@end

@interface AVMetadataFaceObjectInternal : NSObject
{
    long long _faceID;
    _Bool _hasRollAngle;
    double _rollAngle;
    _Bool _hasYawAngle;
    double _yawAngle;
    _Bool _hasLeftEyeClosedConfidence;
    int _leftEyeClosedConfidence;
    _Bool _hasRightEyeClosedConfidence;
    int _rightEyeClosedConfidence;
    _Bool _hasSmileConfidence;
    int _smileConfidence;
    _Bool _hasLeftEyeBounds;
    struct CGRect _leftEyeBounds;
    _Bool _hasRightEyeBounds;
    struct CGRect _rightEyeBounds;
}

@property(nonatomic) struct CGRect rightEyeBounds; // @synthesize rightEyeBounds=_rightEyeBounds;
@property(nonatomic) _Bool hasRightEyeBounds; // @synthesize hasRightEyeBounds=_hasRightEyeBounds;
@property(nonatomic) struct CGRect leftEyeBounds; // @synthesize leftEyeBounds=_leftEyeBounds;
@property(nonatomic) _Bool hasLeftEyeBounds; // @synthesize hasLeftEyeBounds=_hasLeftEyeBounds;
@property(nonatomic) int smileConfidence; // @synthesize smileConfidence=_smileConfidence;
@property(nonatomic) _Bool hasSmileConfidence; // @synthesize hasSmileConfidence=_hasSmileConfidence;
@property(nonatomic) int rightEyeClosedConfidence; // @synthesize rightEyeClosedConfidence=_rightEyeClosedConfidence;
@property(nonatomic) _Bool hasRightEyeClosedConfidence; // @synthesize hasRightEyeClosedConfidence=_hasRightEyeClosedConfidence;
@property(nonatomic) int leftEyeClosedConfidence; // @synthesize leftEyeClosedConfidence=_leftEyeClosedConfidence;
@property(nonatomic) _Bool hasLeftEyeClosedConfidence; // @synthesize hasLeftEyeClosedConfidence=_hasLeftEyeClosedConfidence;
@property(nonatomic) double yawAngle; // @synthesize yawAngle=_yawAngle;
@property(nonatomic) _Bool hasYawAngle; // @synthesize hasYawAngle=_hasYawAngle;
@property(nonatomic) double rollAngle; // @synthesize rollAngle=_rollAngle;
@property(nonatomic) _Bool hasRollAngle; // @synthesize hasRollAngle=_hasRollAngle;
@property(nonatomic) long long faceID; // @synthesize faceID=_faceID;

@end

@interface AVMetadataFaceObjectInternal_FigRecorder : NSObject
{
    _Bool hasRollAngle;
    _Bool hasYawAngle;
    long long faceID;
    double rollAngle;
    double yawAngle;
}

@property double yawAngle; // @synthesize yawAngle;
@property _Bool hasYawAngle; // @synthesize hasYawAngle;
@property double rollAngle; // @synthesize rollAngle;
@property _Bool hasRollAngle; // @synthesize hasRollAngle;
@property long long faceID; // @synthesize faceID;

@end

@interface AVMetadataObject_FigRecorder : NSObject
{
    AVMetadataObjectInternal_FigRecorder *_objectInternal;
}

+ (id)derivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)originalMetadataObject;
- (id)input;
@property(readonly) NSString *type;
@property(readonly) struct CGRect bounds;
@property(readonly) CDStruct_1b6d18a9 duration;
@property(readonly) CDStruct_1b6d18a9 time;
- (void)dealloc;
- (id)initDerivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)init;

@end

@interface AVMetadataFaceObject_FigRecorder : AVMetadataObject_FigRecorder
{
    AVMetadataFaceObjectInternal_FigRecorder *_internal;
}

+ (id)faceObjectWithFigEmbeddedCaptureDeviceFaceDictionary:(id)arg1 input:(id)arg2;
@property(readonly) double yawAngle;
@property(readonly) _Bool hasYawAngle;
@property(readonly) double rollAngle;
@property(readonly) _Bool hasRollAngle;
@property(readonly) long long faceID;
- (id)description;
- (void)dealloc;
- (id)initDerivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)initWithFigEmbeddedCaptureDeviceFaceDictionary:(id)arg1 input:(id)arg2;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVMetadataItemFilter : NSObject
{
    AVMetadataItemFilterInternal *_itemFilterInternal;
}

+ (id)metadataItemFilterForSharing;
@property(readonly) NSDictionary *whitelist;

@end

@interface AVMetadataItemFilterForSharing : AVMetadataItemFilter
{
}

+ (void)addIdentifier:(id)arg1 toWhitelistDictionary:(id)arg2;
+ (void)addKeySpace:(id)arg1 key:(id)arg2 toWhitelistDictionary:(id)arg3;
- (id)whitelist;

@end

@interface AVMetadataItemFilterInternal : NSObject
{
}

@end

@interface AVMetadataItemInternal : NSObject
{
    struct OpaqueFigMetadataReader *reader;
    long long itemIndex;
    NSString *identifier;
    NSString *keySpace;
    id <NSObject><NSCopying> key;
    NSString *commonKey;
    NSLocale *locale;
    NSString *extendedLanguageTag;
    id <NSObject><NSCopying> value;
    CDStruct_1b6d18a9 time;
    CDStruct_1b6d18a9 duration;
    NSString *dataType;
    NSDictionary *extras;
}

@end

@interface AVMetadataMachineReadableCodeObject : AVMetadataObject
{
    AVMetadataMachineReadableCodeObjectInternal *_internal;
}

+ (id)machineReadableCodeObjectWithFigEmbeddedCaptureDeviceMachineReadableCodeDictionary:(id)arg1 input:(id)arg2;
@property(readonly) NSString *stringValue;
@property(readonly) NSArray *corners;
- (id)description;
- (void)dealloc;
- (id)initDerivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)initWithFigEmbeddedCaptureDeviceMachineReadableCodeDictionary:(id)arg1 input:(id)arg2;

@end

@interface AVMetadataMachineReadableCodeObjectInternal : NSObject
{
    _Bool decoded;
    NSArray *corners;
    NSString *stringValue;
    NSDictionary *basicDescriptor;
}

@property _Bool decoded; // @synthesize decoded;
@property(retain) NSDictionary *basicDescriptor; // @synthesize basicDescriptor;
@property(retain) NSString *stringValue; // @synthesize stringValue;
@property(retain) NSArray *corners; // @synthesize corners;
- (void)dealloc;

@end

@interface AVMetadataMachineReadableCodeObjectInternal_FigRecorder : NSObject
{
    _Bool decoded;
    NSArray *corners;
    NSString *stringValue;
    NSDictionary *basicDescriptor;
}

@property _Bool decoded; // @synthesize decoded;
@property(retain) NSDictionary *basicDescriptor; // @synthesize basicDescriptor;
@property(retain) NSString *stringValue; // @synthesize stringValue;
@property(retain) NSArray *corners; // @synthesize corners;
- (void)dealloc;

@end

@interface AVMetadataMachineReadableCodeObject_FigRecorder : AVMetadataObject_FigRecorder
{
    AVMetadataMachineReadableCodeObjectInternal_FigRecorder *_internal;
}

+ (id)machineReadableCodeObjectWithFigEmbeddedCaptureDeviceMachineReadableCodeDictionary:(id)arg1 input:(id)arg2;
@property(readonly) NSString *stringValue;
@property(readonly) NSArray *corners;
- (id)description;
- (void)dealloc;
- (id)initDerivedMetadataObjectFromMetadataObject:(id)arg1 withTransform:(struct CGAffineTransform)arg2 isVideoMirrored:(_Bool)arg3 rollAdjustment:(double)arg4;
- (id)initWithFigEmbeddedCaptureDeviceMachineReadableCodeDictionary:(id)arg1 input:(id)arg2;
- (_Bool)isKindOfClass:(Class)arg1;

@end

@interface AVMetadataObjectInternal : NSObject
{
    CDStruct_1b6d18a9 _time;
    CDStruct_1b6d18a9 _duration;
    struct CGRect _bounds;
    NSString *_type;
    AVCaptureInput *_input;
    AVMetadataObject *_originalMetadataObject;
}

@property(retain) AVMetadataObject *originalMetadataObject; // @synthesize originalMetadataObject=_originalMetadataObject;
@property(retain) AVCaptureInput *input; // @synthesize input=_input;
@property(retain) NSString *type; // @synthesize type=_type;
@property struct CGRect bounds; // @synthesize bounds=_bounds;
@property CDStruct_1b6d18a9 duration; // @synthesize duration=_duration;
@property CDStruct_1b6d18a9 time; // @synthesize time=_time;
- (void)dealloc;
- (id)init;

@end

@interface AVMetadataObjectInternal_FigRecorder : NSObject
{
    NSString *type;
    AVCaptureInput_FigRecorder *input;
    AVMetadataObject_FigRecorder *originalMetadataObject;
    CDStruct_1b6d18a9 time;
    CDStruct_1b6d18a9 duration;
    struct CGRect bounds;
}

@property(retain) AVMetadataObject_FigRecorder *originalMetadataObject; // @synthesize originalMetadataObject;
@property(retain) AVCaptureInput_FigRecorder *input; // @synthesize input;
@property(retain) NSString *type; // @synthesize type;
@property struct CGRect bounds; // @synthesize bounds;
@property CDStruct_1b6d18a9 duration; // @synthesize duration;
@property CDStruct_1b6d18a9 time; // @synthesize time;
- (void)dealloc;
- (id)init;

@end

@interface AVMutableAudioMix : AVAudioMix
{
    AVMutableAudioMixInternal *_mutableAudioMix;
}

+ (id)audioMix;
@property(copy, nonatomic) NSArray *inputParameters;

@end

@interface AVMutableAudioMixInputParameters : AVAudioMixInputParameters
{
    AVMutableAudioMixInputParametersInternal *_mutableInputParameters;
}

+ (id)audioMixInputParameters;
+ (id)audioMixInputParametersWithTrack:(id)arg1;
- (void)setVolume:(float)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)setVolumeRampFromStartVolume:(float)arg1 toEndVolume:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
@property(retain, nonatomic) struct opaqueMTAudioProcessingTap *audioTapProcessor;
@property(copy, nonatomic) NSString *audioTimePitchAlgorithm;
@property(nonatomic) int trackID;

@end

@interface AVMutableComposition : AVComposition
{
    AVMutableCompositionInternal *_mutablePriv;
}

+ (id)composition;
- (void)_notifyAllTracksThatSegmentsDidChange;
- (void)_notifyAllTracksThatSegmentsWillChange;
- (id)mutableTrackCompatibleWithTrack:(id)arg1;
- (void)removeTrack:(id)arg1;
- (id)addMutableTrackWithMediaType:(id)arg1 preferredTrackID:(int)arg2;
- (void)scaleTimeRange:(CDStruct_e83c9415)arg1 toDuration:(CDStruct_1b6d18a9)arg2;
- (void)removeTimeRange:(CDStruct_e83c9415)arg1;
- (void)insertEmptyTimeRange:(CDStruct_e83c9415)arg1;
- (_Bool)insertTimeRange:(CDStruct_e83c9415)arg1 ofAsset:(id)arg2 atTime:(CDStruct_1b6d18a9)arg3 error:(id *)arg4;
@property(nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) NSArray *tracks;
- (id)_newTrackForIndex:(long long)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithComposition:(id)arg1;

@end

@interface AVMutableCompositionInternal : NSObject
{
}

@end

@interface AVMutableCompositionTrack : AVCompositionTrack
{
    AVMutableCompositionTrackInternal *_mutablePriv;
}

- (void)setAlternateGroupID:(long long)arg1;
- (long long)alternateGroupID;
@property(nonatomic) float preferredVolume;
@property(nonatomic) struct CGAffineTransform preferredTransform;
@property(copy, nonatomic) NSString *extendedLanguageTag;
@property(copy, nonatomic) NSString *languageCode;
@property(nonatomic) int naturalTimeScale;
- (void)_setTrackReaderPropertyValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (_Bool)validateTrackSegments:(id)arg1 error:(id *)arg2;
- (void)scaleTimeRange:(CDStruct_e83c9415)arg1 toDuration:(CDStruct_1b6d18a9)arg2;
- (void)removeTimeRange:(CDStruct_e83c9415)arg1;
- (void)insertEmptyTimeRange:(CDStruct_e83c9415)arg1;
- (_Bool)insertTimeRanges:(id)arg1 ofTracks:(id)arg2 atTime:(CDStruct_1b6d18a9)arg3 error:(id *)arg4;
- (_Bool)insertTimeRange:(CDStruct_e83c9415)arg1 ofTrack:(id)arg2 atTime:(CDStruct_1b6d18a9)arg3 error:(id *)arg4;
@property(copy, nonatomic) NSArray *segments;

@end

@interface AVMutableCompositionTrackInternal : NSObject
{
}

@end

@interface AVMutableMetadataItem : AVMetadataItem
{
    AVMutableMetadataItemInternal *_mutablePriv;
}

+ (id)keyPathsForValuesAffectingIdentifier;
+ (id)metadataItem;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(copy) NSDictionary *extraAttributes;
@property(copy) NSString *dataType;
@property(copy) id <NSObject><NSCopying> value;
@property CDStruct_1b6d18a9 duration;
@property CDStruct_1b6d18a9 time;
@property(copy) NSString *extendedLanguageTag;
@property(copy) NSLocale *locale;
@property(copy) NSString *identifier;
- (void)setKeySpace:(id)arg1;
- (void)setKey:(id)arg1;
- (id)keySpace;
- (id)key;

@end

@interface AVScheduledAudioParameters : NSObject <NSCopying, NSMutableCopying>
{
    AVScheduledAudioParametersInternal *_scheduledParametersInternal;
}

- (void)_setVolumeRampFromStartVolume:(float)arg1 toEndVolume:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (_Bool)getVolumeRampForTime:(CDStruct_1b6d18a9)arg1 startVolume:(float *)arg2 endVolume:(float *)arg3 timeRange:(CDStruct_e83c9415 *)arg4;
@property(copy, nonatomic, getter=_ramps, setter=_setRamps:) NSArray *ramps;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)_volumeCurveAsString;
- (id)_audioVolumeCurve;

@end

@interface AVMutableScheduledAudioParameters : AVScheduledAudioParameters
{
    AVMutableScheduledAudioParametersInternal *_mutableScheduledParametersInternal;
}

+ (id)scheduledAudioParameters;
- (void)setVolume:(float)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)setVolumeRampFromStartVolume:(float)arg1 toEndVolume:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface AVTimedMetadataGroup : NSObject <NSCopying>
{
    AVTimedMetadataGroupInternal *_priv;
}

+ (void)initialize;
- (struct opaqueCMSampleBuffer *)_createSerializedRepresentationWithFormatDescription:(struct opaqueCMFormatDescription *)arg1 error:(id *)arg2;
- (struct opaqueCMFormatDescription *)copyFormatDescription;
@property(readonly, copy) NSArray *items;
@property(readonly) CDStruct_e83c9415 timeRange;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (id)initWithItems:(id)arg1 timeRange:(CDStruct_e83c9415)arg2;
- (id)init;

@end

@interface AVMutableTimedMetadataGroup : AVTimedMetadataGroup
{
    AVMutableTimedMetadataGroupInternal *_mutablePriv;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
@property(copy) NSArray *items;
@property CDStruct_e83c9415 timeRange;

@end

@interface AVVideoComposition : NSObject <NSCopying, NSMutableCopying>
{
    AVVideoCompositionInternal *_videoComposition;
}

+ (void)initialize;
+ (id)videoCompositionWithPropertiesOfAsset:(id)arg1 videoGravity:(id)arg2;
+ (id)videoCompositionWithPropertiesOfAsset:(id)arg1;
- (_Bool)isValidForAsset:(id)arg1 timeRange:(CDStruct_e83c9415)arg2 validationDelegate:(id)arg3;
- (_Bool)_isValidReturningExceptionReason:(id *)arg1;
- (id)instructionForFigInstruction:(void *)arg1;
- (id)_serializableInstructions;
- (void)setAnimationTool:(id)arg1;
@property(readonly, retain, nonatomic) AVVideoCompositionCoreAnimationTool *animationTool;
- (id)_postProcessingRootLayer;
- (id)_postProcessingVideoLayers;
- (id)_postProcessingVideoLayer;
- (_Bool)_hasPostProcessingLayers;
- (int)_auxiliaryTrackID;
- (id)_auxiliaryTrackLayer;
- (_Bool)_hasLayerAsAuxiliaryTrack;
- (void)setInstructions:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *instructions;
- (void)setRenderScale:(float)arg1;
@property(readonly, nonatomic) float renderScale;
- (void)setRenderSize:(struct CGSize)arg1;
@property(readonly, nonatomic) struct CGSize renderSize;
- (void)setFrameDuration:(CDStruct_1b6d18a9)arg1;
@property(readonly, nonatomic) CDStruct_1b6d18a9 frameDuration;
- (_Bool)_copyFigVideoCompositor:(const void **)arg1 andSession:(id *)arg2 recyclingSession:(id)arg3 forFigRemaker:(_Bool)arg4 error:(id *)arg5;
- (void)setCustomVideoCompositorClass:(Class)arg1;
@property(readonly, nonatomic) Class customVideoCompositorClass;
- (void)setBuiltInCompositorName:(id)arg1;
- (id)builtInCompositorName;
- (void)_bumpChangeSeed;
- (unsigned long long)_changeSeed;
- (void)finalize;
- (void)dealloc;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface AVMutableVideoComposition : AVVideoComposition
{
    AVMutableVideoCompositionInternal *_mutableVideoComposition;
}

+ (id)videoCompositionWithPropertiesOfAsset:(id)arg1 videoGravity:(id)arg2;
+ (id)videoCompositionWithPropertiesOfAsset:(id)arg1;
+ (id)videoComposition;
@property(retain, nonatomic) AVVideoCompositionCoreAnimationTool *animationTool;
@property(copy, nonatomic) NSArray *instructions;
@property(nonatomic) float renderScale;
@property(nonatomic) struct CGSize renderSize;
@property(nonatomic) CDStruct_1b6d18a9 frameDuration;
@property(retain, nonatomic) Class customVideoCompositorClass;
- (void)setBuiltInCompositorName:(id)arg1;
- (id)builtInCompositorName;

@end

@interface AVVideoCompositionInstruction : NSObject <NSSecureCoding, NSCopying, NSMutableCopying, AVVideoCompositionInstruction>
{
    AVVideoCompositionInstructionInternal *_instruction;
}

+ (_Bool)supportsSecureCoding;
+ (void)initialize;
@property(readonly, copy) NSString *description;
- (void)_setValuesFromDictionary:(id)arg1;
- (id)dictionaryRepresentation;
- (void)setEnablePostProcessing:(_Bool)arg1;
@property(readonly, nonatomic) _Bool enablePostProcessing;
- (void)setLayerInstructions:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *layerInstructions;
@property(retain, nonatomic) struct CGColor *backgroundColor;
- (void)setTimeRange:(CDStruct_e83c9415)arg1;
@property(readonly, nonatomic) CDStruct_e83c9415 timeRange;
@property(readonly, nonatomic) _Bool containsTweening;
@property(readonly, nonatomic) NSArray *requiredSourceTrackIDs;
@property(readonly, nonatomic) int passthroughTrackID;
- (void)finalize;
- (void)dealloc;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVMutableVideoCompositionInstruction : AVVideoCompositionInstruction
{
    AVMutableVideoCompositionInstructionInternal *_mutableInstruction;
}

+ (id)videoCompositionInstruction;
@property(nonatomic) _Bool enablePostProcessing;
@property(copy, nonatomic) NSArray *layerInstructions;
@property(retain, nonatomic) struct CGColor *backgroundColor;
@property(nonatomic) CDStruct_e83c9415 timeRange;

@end

@interface AVVideoCompositionLayerInstruction : NSObject <NSSecureCoding, NSCopying, NSMutableCopying>
{
    AVVideoCompositionLayerInstructionInternal *_layerInstruction;
}

+ (_Bool)supportsSecureCoding;
+ (void)initialize;
- (void)_setValuesFromDictionary:(id)arg1 timeRange:(CDStruct_e83c9415)arg2;
- (id)dictionaryRepresentationWithTimeRange:(CDStruct_e83c9415)arg1;
- (_Bool)getCropRectangleRampForTime:(CDStruct_1b6d18a9)arg1 startCropRectangle:(struct CGRect *)arg2 endCropRectangle:(struct CGRect *)arg3 timeRange:(CDStruct_e83c9415 *)arg4;
- (void)setCropRectangleRampFromStartCropRectangle:(struct CGRect)arg1 toEndCropRectangle:(struct CGRect)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setCropRectangle:(struct CGRect)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)_setCropRectangleRampFromStartCropRectangle:(struct CGRect)arg1 toEndCropRectangle:(struct CGRect)arg2 timeRange:(CDStruct_e83c9415)arg3 selector:(SEL)arg4;
- (_Bool)getOpacityRampForTime:(CDStruct_1b6d18a9)arg1 startOpacity:(float *)arg2 endOpacity:(float *)arg3 timeRange:(CDStruct_e83c9415 *)arg4;
- (void)setOpacityRampFromStartOpacity:(float)arg1 toEndOpacity:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setOpacity:(float)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)_setOpacityRampFromStartOpacity:(float)arg1 toEndOpacity:(float)arg2 timeRange:(CDStruct_e83c9415)arg3 selector:(SEL)arg4;
- (_Bool)getTransformRampForTime:(CDStruct_1b6d18a9)arg1 startTransform:(struct CGAffineTransform *)arg2 endTransform:(struct CGAffineTransform *)arg3 timeRange:(CDStruct_e83c9415 *)arg4;
- (void)setTransformRampFromStartTransform:(struct CGAffineTransform)arg1 toEndTransform:(struct CGAffineTransform)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setTransform:(struct CGAffineTransform)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)_setTransformRampFromStartTransform:(struct CGAffineTransform)arg1 toEndTransform:(struct CGAffineTransform)arg2 timeRange:(CDStruct_e83c9415)arg3 selector:(SEL)arg4;
- (void)_setCropRectangleRamps:(id)arg1;
- (void)_setOpacityRamps:(id)arg1;
- (void)_setTransformRamps:(id)arg1;
- (void)setTrackID:(int)arg1;
@property(readonly, nonatomic) int trackID;
- (void)finalize;
- (void)dealloc;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface AVMutableVideoCompositionLayerInstruction : AVVideoCompositionLayerInstruction
{
    AVMutableVideoCompositionLayerInstructionInternal *_mutableLayerInstruction;
}

+ (id)videoCompositionLayerInstruction;
+ (id)videoCompositionLayerInstructionWithAssetTrack:(id)arg1;
- (void)setCropRectangleRampFromStartCropRectangle:(struct CGRect)arg1 toEndCropRectangle:(struct CGRect)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setCropRectangle:(struct CGRect)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)setOpacityRampFromStartOpacity:(float)arg1 toEndOpacity:(float)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setOpacity:(float)arg1 atTime:(CDStruct_1b6d18a9)arg2;
- (void)setTransformRampFromStartTransform:(struct CGAffineTransform)arg1 toEndTransform:(struct CGAffineTransform)arg2 timeRange:(CDStruct_e83c9415)arg3;
- (void)setTransform:(struct CGAffineTransform)arg1 atTime:(CDStruct_1b6d18a9)arg2;
@property(nonatomic) int trackID;

@end

@interface AVTimebaseObserver : NSObject
{
    NSObject<OS_dispatch_queue> *_timerQueue;
    AVWeakReference *_weakReference;
    NSObject<OS_dispatch_source> *_timerSource;
    struct OpaqueCMTimebase *_timebase;
    double _lastRate;
    double _currentRate;
    _Bool _invalid;
}

@property(readonly, nonatomic, getter=_weakReference) AVWeakReference *weakReference; // @synthesize weakReference=_weakReference;
- (void)_stopObservingTimebaseNotifications;
- (void)_startObservingTimebaseNotifications;
- (void)_removeTimebaseFromTimerSource;
- (void)_finishInitialization;
- (void)_attachTimerSourceToTimebase;
@property(readonly, nonatomic) _Bool invalidated;
- (void)_effectiveRateChanged;
- (void)_handleTimeDiscontinuity;
- (void)_resetNextFireTime;
- (void)invalidate;
@property(readonly) struct OpaqueCMTimebase *timebase;
- (void)finalize;
- (void)dealloc;
- (id)initWithTimebase:(struct OpaqueCMTimebase *)arg1 queue:(id)arg2;

@end

@interface AVOccasionalTimebaseObserver : AVTimebaseObserver
{
    NSArray *_times;
    CDUnknownBlockType _block;
}

- (void)_handleTimeDiscontinuity;
- (void)_resetNextFireTime;
- (CDStruct_1b6d18a9)_nextFiringTimeAfterTime:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)_previousFiringTimeBeforeTime:(CDStruct_1b6d18a9)arg1;
- (void)_effectiveRateChanged;
- (void)_fireBlock;
- (void)dealloc;
- (id)initWithTimebase:(struct OpaqueCMTimebase *)arg1 times:(id)arg2 queue:(id)arg3 block:(CDUnknownBlockType)arg4;

@end

@interface AVOnceTimebaseObserver : AVTimebaseObserver
{
    CDStruct_1b6d18a9 _fireTime;
    CDUnknownBlockType _block;
    _Bool _didFire;
}

- (void)_effectiveRateChanged;
- (void)_handleTimeDiscontinuity;
- (void)_resetNextFireTime;
@property(readonly, nonatomic) _Bool didFire;
- (void)_fireBlock;
- (void)invalidate;
- (void)dealloc;
- (id)initWithTimebase:(struct OpaqueCMTimebase *)arg1 fireTime:(CDStruct_1b6d18a9)arg2 queue:(id)arg3 block:(CDUnknownBlockType)arg4;

@end

@interface AVOutputSettingsAssistant : NSObject
{
    AVOutputSettingsAssistantInternal *_internal;
}

+ (id)outputSettingsAssistantWithPreset:(id)arg1;
+ (id)availableOutputSettingsPresets;
+ (id)_allOutputSettingsPresets;
+ (_Bool)validatesSourceVideoMinFrameDuration;
+ (id)videoEncoderCapabilities;
+ (id)videoSettingsAdjusterForPreset:(id)arg1;
+ (id)baseSettingsProviderForPreset:(id)arg1;
- (void)setSourceVideoMinFrameDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)sourceVideoMinFrameDuration;
- (void)setSourceVideoAverageFrameDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)sourceVideoAverageFrameDuration;
- (void)setSourceVideoFormat:(struct opaqueCMFormatDescription *)arg1;
- (struct opaqueCMFormatDescription *)sourceVideoFormat;
- (void)setSourceAudioFormat:(struct opaqueCMFormatDescription *)arg1;
- (struct opaqueCMFormatDescription *)sourceAudioFormat;
@property(readonly, nonatomic) NSDictionary *videoSettings;
@property(readonly, nonatomic) NSDictionary *audioSettings;
@property(readonly, nonatomic) NSString *outputFileType;
- (void)finalize;
- (void)dealloc;
- (id)initWithPreset:(id)arg1;
- (id)init;

@end

@interface AVOutputSettingsAssistantInternal : NSObject
{
    id <AVOutputSettingsAssistantBaseSettingsProvider> baseSettingsProvider;
    id <AVOutputSettingsAssistantVideoSettingsAdjuster> videoSettingsAdjuster;
    struct opaqueCMFormatDescription *sourceVideoFormat;
    struct opaqueCMFormatDescription *sourceAudioFormat;
    CDStruct_1b6d18a9 sourceVideoAverageFrameDuration;
    CDStruct_1b6d18a9 sourceVideoMinFrameDuration;
}

@end

@interface AVPeriodicTimebaseObserver : AVTimebaseObserver
{
    CDStruct_1b6d18a9 _intervalRequested;
    CDStruct_1b6d18a9 _lastIntervalUsed;
    CDStruct_1b6d18a9 _lastPeriodicFireTime;
    CDStruct_1b6d18a9 _lastNonperiodicFireTime;
    CDStruct_1b6d18a9 _lastStopTime;
    unsigned int _sequenceNum;
    CDUnknownBlockType _block;
}

- (void)_handleTimeDiscontinuity;
- (void)_resetNextFireTime;
- (void)_effectiveRateChanged;
- (void)_fireBlockForTime:(CDStruct_1b6d18a9)arg1;
- (void)dealloc;
- (id)initWithTimebase:(struct OpaqueCMTimebase *)arg1 interval:(CDStruct_1b6d18a9)arg2 queue:(id)arg3 block:(CDUnknownBlockType)arg4;

@end

@interface AVPixelBufferAttributeMediator : NSObject
{
    struct OpaqueVTPixelBufferAttributesMediator *_mediator;
}

- (id)mediatedPixelBufferAttributes;
- (void)setLayersAreSuppressed:(_Bool)arg1;
- (void)removeRequestedPixelBufferAttributesAttributesForKey:(id)arg1;
- (void)setRequestedPixelBufferAttributes:(id)arg1 forKey:(id)arg2;
- (void)dealloc;
- (void)finalize;
- (id)init;

@end

@interface AVPixelBufferAttributesVideoOutputSettings : AVVideoOutputSettings <AVDecodedVideoSettingsForFig>
{
    NSDictionary *_VTPixelAspectRatioDictionary;
    NSDictionary *_VTCleanApertureDictionary;
}

+ (id)_videoOutputSettingsWithVideoSettingsDictionary:(id)arg1 exceptionReason:(id *)arg2;
+ (id)eligibleOutputSettingsDictionaryKeys;
@property(readonly, nonatomic) NSDictionary *pixelBufferAttributes;
- (_Bool)canFullySpecifyOutputFormatReturningReason:(id *)arg1;
- (_Bool)encoderIsAvailableOnCurrentSystemReturningError:(id *)arg1;
- (_Bool)willYieldCompressedSamples;
- (id)cleanApertureDictionary;
- (id)pixelAspectRatioDictionary;
- (int)height;
- (int)width;
- (void)dealloc;
- (id)initWithTrustedPixelBufferAttributes:(id)arg1;
- (id)initWithPixelBufferAttributes:(id)arg1 exceptionReason:(id *)arg2;

@end

@interface AVPlaybackItemInspector : AVAssetInspector
{
    struct OpaqueFigPlaybackItem *_playbackItem;
    NSArray *_trackIDs;
}

- (id)compatibleTrackForCompositionTrack:(id)arg1;
- (id)metadataForFormat:(id)arg1;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)lyrics;
- (id)trackIDs;
- (long long)trackCount;
- (_Bool)providesPreciseDurationAndTiming;
- (struct CGSize)naturalSize;
- (CDStruct_1b6d18a9)duration;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;
@property(retain, nonatomic, getter=_playbackItem, setter=_setPlaybackItem:) struct OpaqueFigPlaybackItem *playbackItem;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 trackIDs:(id)arg2;

@end

@interface AVPlaybackItemInspectorLoader : AVAssetMakeReadyForInspectionLoader
{
    struct OpaqueFigPlaybackItem *_playbackItem;
    NSArray *_trackIDs;
    _Bool _shouldCacheDuration;
    CDStruct_1b6d18a9 _cachedDuration;
}

- (CDStruct_1b6d18a9)duration;
- (id)_loadValuesUsingDefaultLoadingMethodWhileMutexLockedForKeys:(id)arg1;
- (id)_playbackItemPropertiesForKeys:(id)arg1;
- (id)_dictionaryOfSpecialGettersForKeyValueStatus;
- (_Bool)_inspectionRequiresAFormatReader;
- (struct OpaqueFigFormatReader *)_copyFormatReaderFromFigObjectWithFigErrorCode:(int *)arg1;
- (Class)_classForTrackInspectors;
@property(readonly, nonatomic, getter=_playbackItem) struct OpaqueFigPlaybackItem *playbackItem;
- (void)cancelLoading;
- (id)assetInspector;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (void)_removeFigObjectNotifications;
- (void)_addFigObjectNotifications;
- (id)initWithURL:(id)arg1 playbackItem:(struct OpaqueFigPlaybackItem *)arg2 trackIDs:(id)arg3 dynamicBehavior:(_Bool)arg4;

@end

@interface AVPlaybackItemTrackInspector : AVAssetTrackInspector
{
    struct OpaqueFigPlaybackItem *_playbackItem;
    int _trackID;
    unsigned int _mediaType;
    AVWeakReference *_weakReferenceToAsset;
}

- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (CDStruct_1b6d18a9)samplePresentationTimeForTrackTime:(CDStruct_1b6d18a9)arg1;
- (struct CGAffineTransform)preferredTransform;
- (struct CGSize)dimensions;
- (struct CGSize)naturalSize;
- (float)estimatedDataRate;
- (CDStruct_e83c9415)timeRange;
- (_Bool)isEnabled;
- (id)formatDescriptions;
- (void *)_valueAsCFTypeForProperty:(struct __CFString *)arg1;
- (struct OpaqueFigPlaybackItem *)_playbackItem;
- (id)mediaType;
- (unsigned int)_figMediaType;
- (int)trackID;
- (id)asset;
- (void)finalize;
- (void)dealloc;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

@end

@interface AVPlayer : NSObject
{
    AVPlayerInternal *_player;
}

+ (_Bool)automaticallyNotifiesObserversOfUsesAirPlayVideoWhileAirPlayScreenIsActive;
+ (_Bool)automaticallyNotifiesObserversOfAirPlayVideoActive;
+ (_Bool)automaticallyNotifiesObserversOfUsesAudioOnlyModeForExternalPlayback;
+ (_Bool)automaticallyNotifiesObserversOfExternalPlaybackActive;
+ (id)keyPathsForValuesAffectingClosedCaptionDisplayEnabled;
+ (id)keyPathsForValuesAffectingActionAtItemEnd;
+ (_Bool)automaticallyNotifiesObserversOfActionAtItemEnd;
+ (id)keyPathsForValuesAffectingMuted;
+ (id)keyPathsForValuesAffectingVolume;
+ (_Bool)automaticallyNotifiesObserversOfVibrationPattern;
+ (_Bool)automaticallyNotifiesObserversOfUserVolume;
+ (id)keyPathsForValuesAffectingRate;
+ (_Bool)automaticallyNotifiesObserversOfRate;
+ (_Bool)automaticallyNotifiesObserversOfCurrentItem;
+ (id)playerWithPlayerItem:(id)arg1;
+ (id)playerWithURL:(id)arg1;
+ (void)initialize;
+ (_Bool)automaticallyNotifiesObserversOfAutoSwitchStreamVariants;
- (void)_logPerformanceDataForCurrentItem;
- (id)_copyPerformanceDataForCurrentItem;
- (void)_logPerformanceDataForPreviousItem;
- (_Bool)_shouldLogPerformanceData;
- (void)_checkDefaultsWriteForPerformanceLogging;
- (void)_setFigPlaybackItemToMakeCurrent:(struct OpaqueFigPlaybackItem *)arg1;
- (void)_removeFPListeners;
- (void)_addFPListeners;
- (id)_fpNotificationNames;
- (void)_setNeroVideoGravityOnFigPlayer;
- (void)setExternalPlaybackVideoGravity:(id)arg1;
- (id)externalPlaybackVideoGravity;
- (void)_addLayer:(id)arg1 withPixelBufferAttributes:(id)arg2;
- (void)_removeLayer:(id)arg1;
- (void)_detachClosedCaptionLayersFromFigPlayer;
- (void)_attachClosedCaptionLayersToFigPlayer;
- (void)_detachVideoLayersFromFigPlayer;
- (void)_attachVideoLayersToFigPlayer;
- (void)_detachFigPlayerFromSubtitleLayers;
- (void)_attachFigPlayerToSubtitleLayers;
- (void)_noteDisplaySize:(struct CGSize)arg1 forPlayerLayer:(id)arg2;
- (void)_conformVideoLayer:(id)arg1 toSize:(struct CGSize)arg2;
- (void)_updateClosedCaptionLayerBounds:(id)arg1;
- (id)_avPlayerLayers;
- (id)_videoLayers;
- (id)_closedCaptionLayers;
- (id)_subtitleLayers;
- (id)_pixelBufferAttributeMediator;
- (void)_removeAllLayers;
- (void)removeTimeObserver:(id)arg1;
- (id)addBoundaryTimeObserverForTimes:(id)arg1 queue:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)addPeriodicTimeObserverForInterval:(CDStruct_1b6d18a9)arg1 queue:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)replaceCurrentItemWithPlayerItem:(id)arg1;
- (void)pause;
- (void)play;
- (void)setUsesAirPlayVideoWhileAirPlayScreenIsActive:(_Bool)arg1;
- (_Bool)usesAirPlayVideoWhileAirPlayScreenIsActive;
- (_Bool)isAirPlayVideoActive;
- (_Bool)_airPlayVideoActive;
- (void)setAllowsAirPlayVideo:(_Bool)arg1;
- (_Bool)allowsAirPlayVideo;
- (void)setUsesAudioOnlyModeForExternalPlayback:(_Bool)arg1;
- (_Bool)usesAudioOnlyModeForExternalPlayback;
- (_Bool)_usesAudioOnlyModeForExternalPlayback;
- (long long)externalPlaybackType;
- (_Bool)isExternalPlaybackActive;
- (_Bool)_externalPlaybackActive;
- (void)setUsesExternalPlaybackWhileExternalScreenIsActive:(_Bool)arg1;
- (_Bool)usesExternalPlaybackWhileExternalScreenIsActive;
- (_Bool)_usesExternalPlaybackWhileExternalScreenIsActive;
- (void)setAllowsExternalPlayback:(_Bool)arg1;
- (_Bool)allowsExternalPlayback;
- (_Bool)_allowsExternalPlayback;
- (_Bool)isDisplayingClosedCaptions;
- (_Bool)_isDisplayingClosedCaptions;
- (void)setClosedCaptionDisplayEnabled:(_Bool)arg1;
- (_Bool)isClosedCaptionDisplayEnabled;
- (_Bool)_isClosedCaptionDisplayEnabled;
- (void)setActionAtItemEnd:(long long)arg1;
- (void)_setActionAtItemEnd:(long long)arg1 allowingAdvance:(_Bool)arg2;
- (long long)actionAtItemEnd;
- (long long)_actionAtItemEnd;
- (long long)_defaultActionAtItemEnd;
- (void)setMuted:(_Bool)arg1;
- (_Bool)isMuted;
- (_Bool)_isMuted;
- (void)setVolume:(float)arg1;
- (float)volume;
- (float)_playerVolume;
- (void)setVibrationPattern:(id)arg1;
- (id)vibrationPattern;
- (void)_setUserVolume:(float)arg1;
- (float)_userVolume;
- (void)setMasterClock:(struct OpaqueCMClock *)arg1;
- (struct OpaqueCMClock *)masterClock;
- (void)prerollOperationDidComplete:(_Bool)arg1 notificationPayload:(struct __CFDictionary *)arg2;
- (void)cancelPendingPrerolls;
- (void)prerollAtRate:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (CDUnknownBlockType)_unregisterAndReturnRetainedPrerollCompletionHandler;
- (int)_cancelPendingPrerollAndRegisterPrerollCompletionHandler:(CDUnknownBlockType)arg1;
- (int)_createPrerollID;
- (void)setRate:(float)arg1 time:(CDStruct_1b6d18a9)arg2 atHostTime:(CDStruct_1b6d18a9)arg3;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1;
- (void)seekToDate:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)seekToDate:(id)arg1;
- (CDStruct_1b6d18a9)currentTime;
- (void)setRate:(float)arg1;
- (void)setRate:(float)arg1 withVolumeRampDuration:(CDStruct_1b6d18a9)arg2;
- (float)rate;
- (float)_rate;
- (void)_removeAllItems;
- (id)_items;
- (void)_enumerateItemsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)_removeItem:(id)arg1;
- (void)_coordinateWithRemovalOfItem:(id)arg1;
- (_Bool)_attachItem:(id)arg1 andPerformOperation:(long long)arg2 withObject:(id)arg3;
- (void)setExpectedAssetTypes:(id)arg1;
- (id)expectedAssetTypes;
- (void)_createPlayer:(long long)arg1 item:(id)arg2 preparationRequested:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (_Bool)_insertItem:(id)arg1 afterItem:(id)arg2;
- (void)prepareItem:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (_Bool)_insertPlaybackItemOfItem:(id)arg1 inPlayerQueueAfterPlaybackItemOfItem:(id)arg2;
- (void)_advanceCurrentItemAccordingToFigPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1;
- (void)_currentItemStatusIsReadyToPlay;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_stopObservingPropertiesOfCurrentItem:(id)arg1;
- (void)_startObservingPropertiesOfCurrentItem:(id)arg1;
- (void)_setCurrentItem:(id)arg1;
- (void)_updateCurrentItemPreferredPixelBufferAttributesAndVideoLayerSuppression;
- (id)currentItem;
- (void)_updateDecoderPixelBufferAttributes:(id)arg1 onFigPlayer:(struct OpaqueFigPlayer *)arg2;
- (void)_changeStatusToFailedWithError:(id)arg1;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
- (void)didChangeValueForKey:(id)arg1;
- (_Bool)_isChangingValueForKey:(id)arg1;
- (void)willChangeValueForKey:(id)arg1;
- (void)_didAccessKVOForKey:(id)arg1;
- (void)_willAccessKVOForKey:(id)arg1;
- (void)_setCachedValue:(id)arg1 forKey:(id)arg2;
- (id)_cachedValueForKey:(id)arg1;
- (id)_propertyStorage;
- (struct OpaqueFigPlayer *)_copyFigPlayer;
- (id)_stateDispatchQueue;
- (id)dispatchQueue;
- (id)_weakReference;
- (void)finalize;
- (void)dealloc;
- (id)initWithDispatchQueue:(id)arg1;
- (id)init;
- (id)initWithURL:(id)arg1;
- (id)initWithPlayerItem:(id)arg1;
- (_Bool)outputObscuredDueToInsufficientExternalProtection;
- (_Bool)_outputObscuredDueToInsufficientExternalProtection;
- (long long)_extractVerifiedFPExternalProtectionStatus:(id)arg1;
@property(readonly, nonatomic) long long _externalProtectionStatus;
@property(copy, nonatomic, setter=_setDisplaysUsedForPlayback:) NSArray *_displaysUsedForPlayback;
- (id)_playbackDisplaysForFigPlayer;
@property(nonatomic) float maxRateForAudioPlayback;
@property(nonatomic) float minRateForAudioPlayback;
@property(readonly, nonatomic, getter=isAudioPlaybackEnabledAtAllRates) _Bool audioPlaybackEnabledAtAllRates;
- (void)removeAudioPlaybackRateLimits;
- (void)_willEnterForeground:(id)arg1;
- (void)_didFinishSuspension:(id)arg1;
- (_Bool)_shouldDetachVideoLayersFromFigPlayer;
- (long long)_itemOkayToPlayWhileTransitioningToBackground:(id)arg1;
- (_Bool)_carplayIsActive;
- (_Bool)_iapdExtendedModeIsActive;
- (_Bool)_hasAssociatedOnscreenAVPlayerLayer;
- (_Bool)_applicationHasExternallyDisplayedAVPlayerLayerAndIsUnderDeviceLock;
- (_Bool)_hasAssociatedAVPlayerLayerInPIPMode;
- (_Bool)_resumePlayback:(double)arg1 error:(id *)arg2;
- (void)_setPreferredLanguageList:(id)arg1;
- (_Bool)_CALayerDestinationIsTVOut;
- (void)_setCALayerDestinationIsTVOut:(_Bool)arg1;
- (void)_setClientPriority:(long long)arg1;
- (long long)_clientPriority;
- (void)_setClientName:(id)arg1;
- (id)_clientName;
- (void)_setStoppingFadeOutDuration:(float)arg1;
- (void)_setEQPreset:(int)arg1;
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(_Bool)arg1;
- (id)playerAVAudioSession;
@property(nonatomic) _Bool allowsPixelBufferPoolSharing;
- (_Bool)_allowsPixelBufferPoolSharing;
- (void)setDisallowsHardwareAcceleratedVideoDecoder:(_Bool)arg1;
- (_Bool)disallowsHardwareAcceleratedVideoDecoder;
- (_Bool)_disallowsHardwareAcceleratedVideoDecoder;
@property(nonatomic) _Bool disallowsAMRAudio;
- (_Bool)_disallowsAMRAudio;
- (id)mediaSelectionCriteriaForMediaCharacteristic:(id)arg1;
- (void)setMediaSelectionCriteria:(id)arg1 forMediaCharacteristic:(id)arg2;
@property(nonatomic) _Bool appliesMediaSelectionCriteriaAutomatically;
- (_Bool)_appliesMediaSelectionCriteriaAutomatically;
- (id)defaultMediaSelectionCriteriaForMediaCharacteristic:(id)arg1;
- (void)setPreparesItemsForPlaybackAsynchronously:(_Bool)arg1;
- (_Bool)preparesItemsForPlaybackAsynchronously;
- (void)setAutoSwitchStreamVariants:(_Bool)arg1;
- (_Bool)autoSwitchStreamVariants;
@property(copy, nonatomic) NSString *audioOutputDeviceUniqueID;
- (id)_audioOutputDeviceUniqueID;
@property(nonatomic) _Bool allowsOutOfBandTextTrackRendering;

@end

@interface AVPlayerConnection : NSObject
{
    AVWeakReference *_playerReference;
    AVWeakReference *_playerItemReference;
    _Bool _shouldAppendItem;
    long long _status;
    NSError *_error;
    AVPlayerItem *_previousPlayerItem;
}

@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *serializationQueue;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
- (void)removeItemFromPlayQueue;
- (_Bool)addItemToPlayQueue;
@property(readonly, nonatomic) AVPlayerItem *playerItem;
@property(readonly, nonatomic) AVPlayer *player;
- (id)description;
- (void)dealloc;
- (id)initWithWeakReferenceToPlayer:(id)arg1 weakReferenceToPlayerItem:(id)arg2 shouldAppendItem:(_Bool)arg3;

@end

@interface AVPlayerInternal : NSObject
{
    AVWeakReference *weakReference;
    AVWeakKeyValueObserverProxy *KVOProxy;
    AVPixelBufferAttributeMediator *pixelBufferAttributeMediator;
    NSObject<OS_dispatch_queue> *figConfigurationQueue;
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    AVPlayerItem *currentItem;
    struct OpaqueFigPlayer *figPlayer;
    struct OpaqueCMClock *figMasterClock;
    AVPropertyStorage *propertyStorage;
    NSMutableDictionary *pendingFigPlayerProperties;
    NSArray *expectedAssetTypes;
    AVPlayerItem *lastItem;
    struct OpaqueFigPlaybackItem *figPlaybackItemToIdentifyNextCurrentItem;
    NSMutableSet *items;
    NSObject<OS_dispatch_queue> *layersQ;
    struct __CFDictionary *videoLayers;
    NSMutableSet *subtitleLayers;
    NSMutableSet *closedCaptionLayers;
    struct CGSize cachedDisplaySize;
    NSHashTable *avPlayerLayers;
    NSString *externalPlaybackVideoGravity;
    long long status;
    NSError *error;
    NSObject<OS_dispatch_queue> *stateDispatchQueue;
    NSArray *displaysUsedForPlayback;
    _Bool needsToCreateFigPlayer;
    _Bool logPerformanceData;
    NSDictionary *cachedFigMediaSelectionCriteriaProperty;
    struct OpaqueCMTimebase *proxyTimebase;
    _Bool reevaluateBackgroundPlayback;
    _Bool hostApplicationInForeground;
    _Bool hadAssociatedOnscreenPlayerLayerWhenSuspended;
    _Bool iapdExtendedModeIsActive;
    AVAudioSessionMediaPlayerOnly *audioSessionMediaPlayerOnly;
    NSDictionary *vibrationPattern;
    struct OpaqueFigSimpleMutex *prerollIDMutex;
    int nextPrerollIDToGenerate;
    int pendingPrerollID;
    CDUnknownBlockType prerollCompletionHandler;
    _Bool autoSwitchStreamVariants;
    _Bool preparesItemsForPlaybackAsynchronously;
    _Bool allowsOutOfBandTextTrackRendering;
}

@end

@interface AVPlayerItem : NSObject <NSCopying>
{
    AVPlayerItemInternal *_playerItem;
}

+ (_Bool)automaticallyNotifiesObserversOfTracks;
+ (_Bool)automaticallyNotifiesObserversOfPresentationSize;
+ (_Bool)automaticallyNotifiesObserversOfLoadedTimeRanges;
+ (_Bool)automaticallyNotifiesObserversOfSeekableTimeRanges;
+ (_Bool)automaticallyNotifiesObserversOfPlaybackBufferFull;
+ (_Bool)automaticallyNotifiesObserversOfPlaybackBufferEmpty;
+ (_Bool)automaticallyNotifiesObserversOfPlaybackLikelyToKeepUp;
+ (_Bool)automaticallyNotifiesObserversOfAsset;
+ (_Bool)automaticallyNotifiesObserversOfStatus;
+ (_Bool)automaticallyNotifiesObserversOfAllowProgressiveSwitchUp;
+ (_Bool)automaticallyNotifiesObserversOfNetworkUsuallyExceedsMaxBitRate;
+ (_Bool)automaticallyNotifiesObserversOfHasEnabledAudio;
+ (_Bool)automaticallyNotifiesObserversOfHasEnabledVideo;
+ (_Bool)automaticallyNotifiesObserversOfVariantIndex;
+ (_Bool)automaticallyNotifiesObserversOfSavesDownloadedDataToDiskWhenDone;
+ (struct OpaqueCMTimebase *)_copyTimebaseFromFigPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1;
+ (id)playerItemWithAsset:(id)arg1 automaticallyLoadedAssetKeys:(id)arg2;
+ (id)playerItemWithAsset:(id)arg1;
+ (id)playerItemWithURL:(id)arg1;
+ (_Bool)_forNonStreamingURLsFireKVOForAssetWhenReadyForInspection;
+ (_Bool)_forStreamingItemsVendAssetWithFigPlaybackItem;
+ (void)initialize;
+ (void)_uninitializeProtectedContentPlaybackSupportSession:(id)arg1;
+ (id)_initializeProtectedContentPlaybackSupportSessionAsynchronouslyForProvider:(id)arg1 withOptions:(id)arg2;
- (void)setRequiresAccessLog:(_Bool)arg1;
- (_Bool)requiresAccessLog;
- (void)_renderingSuppressionDidChangeForOutput:(id)arg1;
- (void)setMaximumBitRate:(float)arg1;
- (float)maximumBitRate;
- (void)setPreferredPeakBitRate:(double)arg1;
- (double)preferredPeakBitRate;
- (void)setAllowProgressiveSwitchUp:(_Bool)arg1;
- (_Bool)allowProgressiveSwitchUp;
- (void)setNetworkUsuallyExceedsMaxBitRate:(_Bool)arg1;
- (_Bool)networkUsuallyExceedsMaxBitRate;
- (void)_updateLegibleSuppressionOnFigPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 basedOnOutputs:(id)arg2;
- (void)_updateVideoSuppressionOnFigPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 basedOnOutputs:(id)arg2;
- (void)_setSuppressesVideoLayers:(_Bool)arg1;
- (_Bool)_suppressesVideoLayers;
- (_Bool)_suppressionForOutputs:(id)arg1;
- (_Bool)hasEnabledAudio;
- (_Bool)_hasEnabledAudio;
- (_Bool)hasEnabledVideo;
- (_Bool)_hasEnabledVideo;
- (id)_playbackItemNotificationPayloadToError:(struct __CFDictionary *)arg1;
- (void)_addSyncLayer:(id)arg1;
- (void)_removeSyncLayer:(id)arg1;
- (void)_setSyncLayersOnFigPlaybackItem:(id)arg1;
- (void)_setTimedMetadata:(id)arg1;
- (id)timedMetadata;
- (struct OpaqueFigCPEProtector *)_figCPEProtector;
- (void)setNonForcedSubtitleDisplayEnabled:(_Bool)arg1;
- (_Bool)isNonForcedSubtitleDisplayEnabled;
- (_Bool)_isNonForcedSubtitleDisplayEnabled;
- (void)_quietlySetNonForcedSubtitleDisplayEnabled:(_Bool)arg1;
- (id)selectedMediaOptionInMediaSelectionGroup:(id)arg1;
- (void)selectMediaOptionAutomaticallyInMediaSelectionGroup:(id)arg1;
- (void)selectMediaOption:(id)arg1 inMediaSelectionGroup:(id)arg2;
- (void)_selectMediaOption:(id)arg1 inMediaSelectionGroup:(id)arg2 cacheIfAppropriate:(_Bool)arg3;
- (void)_selectMediaOption:(id)arg1 inStreamingGroup:(id)arg2 cacheIfAppropriate:(_Bool)arg3;
- (void)_selectMediaOption:(id)arg1 inNonStreamingGroup:(id)arg2 cacheIfAppropriate:(_Bool)arg3;
- (void)_allowSelectMediaOptionsAutomaticallyUsingFigSelectedMediaArrayObtainedFromGroup:(id)arg1;
- (void)_selectMediaOption:(id)arg1 usingFigSelectedMediaArrayObtainedFromGroup:(id)arg2;
- (void)_clearCachedMediaSelectionGroup:(id)arg1;
- (void)_cacheMediaSelectionOption:(id)arg1 forMediaSelectionGroup:(id)arg2;
- (void)_applyMediaSelectionOptions;
- (float)volumeAdjustment;
- (void)setVolumeAdjustment:(float)arg1;
- (void)_quietlySetVolumeAdjustment:(float)arg1;
- (float)soundCheckVolumeNormalization;
- (void)setSoundCheckVolumeNormalization:(float)arg1;
- (void)_quietlySetSoundCheckVolumeNormalization:(float)arg1;
- (void)setVariantIndex:(long long)arg1;
- (void)_quietlySetVariantIndex:(long long)arg1;
- (long long)variantIndex;
- (void)setGaplessInfo:(id)arg1;
- (void)_quietlySetPlaybackProperties:(id)arg1;
- (id)_playbackProperties;
- (id)gaplessInfo;
- (id)loadedTimeRanges;
- (id)_loadedTimeRanges;
- (id)_loadedTimeRangesFromFPPlaybableTimeIntervals:(id)arg1;
- (id)seekableTimeRanges;
- (id)_seekableTimeRanges;
- (id)_seekableTimeRangesFromFPSeekableTimeIntervals:(id)arg1;
- (id)playabilityMetrics;
- (float)progressTowardsPlaybackLikelyToKeepUp;
- (_Bool)isPlaybackBufferEmpty;
- (_Bool)isPlaybackBufferFull;
- (_Bool)isPlaybackLikelyToKeepUp;
- (void)setAudioTimePitchAlgorithm:(id)arg1;
- (void)_quietlySetFigTimePitchAlgorithm:(struct __CFString *)arg1;
- (id)audioTimePitchAlgorithm;
- (id)_audioTimePitchAlgorithm;
- (void)setTextStyleRules:(id)arg1;
- (void)_applyTextStyleRules;
- (id)textStyleRules;
- (void)setSeekingWaitsForVideoCompositionRendering:(_Bool)arg1;
- (void)_applySeekingWaitsForVideoCompositionRendering;
- (_Bool)seekingWaitsForVideoCompositionRendering;
- (id)customVideoCompositor;
- (void)_setVideoCompositor:(void *)arg1;
- (void)_setVideoCompositionInstructions:(id)arg1;
- (void)_setVideoCompositionRenderScale:(float)arg1;
- (void)_setVideoCompositionRenderSize:(struct CGSize)arg1;
- (void)_setVideoCompositionFrameDuration:(CDStruct_1b6d18a9)arg1;
- (void)setVideoComposition:(id)arg1;
- (id)videoComposition;
- (void)setAudioMix:(id)arg1;
- (void)_applyNewAudioMix:(id)arg1 oldAudioMix:(id)arg2;
- (void)_setAudioTimePitchAlgorithm:(id)arg1 forTrackID:(int)arg2;
- (void)_setAudioTapProcessor:(struct opaqueMTAudioProcessingTap *)arg1 forTrackID:(int)arg2;
- (void)_setAudioCurvesAccordingToInputParameters:(id)arg1 forTrackID:(int)arg2;
- (id)audioMix;
- (void)setSpeedThresholdForIFrameOnlyPlayback:(float)arg1;
- (void)_quietlySetSpeedThresholdForIFrameOnlyPlayback:(float)arg1;
- (float)speedThresholdForIFrameOnlyPlayback;
- (void)setMinimumIntervalForIFrameOnlyPlayback:(CDStruct_1b6d18a9)arg1;
- (void)_quietlySetMinimumIntervalForIFrameOnlyPlayback:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)minimumIntervalForIFrameOnlyPlayback;
- (void)setUsesIFrameOnlyPlaybackForHighRateScaledEdits:(_Bool)arg1;
- (void)_quietlySetUsesIFrameOnlyPlaybackForHighRateScaledEdits:(_Bool)arg1;
- (_Bool)usesIFrameOnlyPlaybackForHighRateScaledEdits;
- (void)setContinuesPlayingDuringPrerollForRateChange:(_Bool)arg1;
- (void)_quietlySetContinuesPlayingDuringPrerollForRateChange:(_Bool)arg1;
- (_Bool)continuesPlayingDuringPrerollForRateChange;
- (_Bool)_continuesPlayingDuringPrerollForRateChange;
- (void)setContinuesPlayingDuringPrerollForSeek:(_Bool)arg1;
- (void)_quietlySetContinuesPlayingDuringPrerollForSeek:(_Bool)arg1;
- (_Bool)continuesPlayingDuringPrerollForSeek;
- (_Bool)_continuesPlayingDuringPrerollForSeek;
- (void)setSavesDownloadedDataToDiskWhenDone:(_Bool)arg1;
- (_Bool)savesDownloadedDataToDiskWhenDone;
- (void)setWillNeverSeekBackwardsHint:(_Bool)arg1;
- (void)_quietlySetWillNeverSeekBackwardsHint:(_Bool)arg1;
- (_Bool)willNeverSeekBackwardsHint;
- (_Bool)_willNeverSeekBackwardsHint;
- (void)setPlaybackLikelyToKeepUpTrigger:(long long)arg1;
- (void)_quietlySetPlaybackLikelyToKeepUpTrigger:(long long)arg1;
- (long long)playbackLikelyToKeepUpTrigger;
- (long long)_playbackLikelyToKeepUpTrigger;
- (void)setAlwaysMonitorsPlayability:(_Bool)arg1;
- (void)_quietlySetAlwaysMonitorsPlayability:(_Bool)arg1;
- (_Bool)alwaysMonitorsPlayability;
- (_Bool)_alwaysMonitorsPlayability;
- (void)setMaximumTrailingBufferDuration:(CDStruct_1b6d18a9)arg1;
- (void)_quietlySetMaximumTrailingBufferDuration:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)maximumTrailingBufferDuration;
- (void)setAllowsExtendedReadAhead:(_Bool)arg1;
- (void)_quietlySetAllowsExtendedReadAhead:(_Bool)arg1;
- (_Bool)allowsExtendedReadAhead;
- (void)setLimitReadAhead:(_Bool)arg1;
- (unsigned int)RTCReportingFlags;
- (void)setRTCReportingFlags:(unsigned int)arg1;
- (void)_quietlySetRTCReportingFlags:(unsigned int)arg1;
- (void)_quietlySetLimitReadAhead:(_Bool)arg1;
- (_Bool)limitReadAhead;
- (_Bool)_limitReadAhead;
- (void)_updateTimebase;
- (struct OpaqueCMTimebase *)timebase;
- (struct OpaqueCMTimebase *)_copyTimebase;
- (struct OpaqueCMTimebase *)_copyProxyTimebase;
- (void)setReversePlaybackEndTime:(CDStruct_1b6d18a9)arg1;
- (void)_quietlySetReversePlaybackEndTime:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)reversePlaybackEndTime;
- (CDStruct_1b6d18a9)_reversePlaybackEndTime;
- (void)setForwardPlaybackEndTime:(CDStruct_1b6d18a9)arg1;
- (void)_quietlySetForwardPlaybackEndTime:(CDStruct_1b6d18a9)arg1;
- (CDStruct_1b6d18a9)forwardPlaybackEndTime;
- (CDStruct_1b6d18a9)_forwardPlaybackEndTime;
- (void)stepByCount:(long long)arg1;
- (void)setInitialEstimatedDate:(id)arg1;
- (id)initialEstimatedDate;
- (id)currentEstimatedDate;
- (void)setInitialDate:(id)arg1;
- (id)initialDate;
- (_Bool)seekToDate:(id)arg1;
- (_Bool)seekToDate:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)currentDate;
- (void)cancelPendingSeeks;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1;
- (void)_unregisterInvokeAndReleasePendingSeekCompletionHandlerForSeekID:(int)arg1 finished:(_Bool)arg2;
- (int)_cancelPendingSeekAndRegisterSeekCompletionHandler:(CDUnknownBlockType)arg1;
- (int)_CreateSeekID;
- (CDStruct_1b6d18a9)currentTime;
- (struct CGSize)presentationSize;
- (struct CGSize)_presentationSize;
- (_Bool)canStepBackward;
- (_Bool)_canStepBackward;
- (_Bool)canStepForward;
- (_Bool)_canStepForward;
- (_Bool)canPlaySlowReverse;
- (_Bool)_canPlaySlowReverse;
- (_Bool)canPlaySlowForward;
- (_Bool)_canPlaySlowForward;
- (_Bool)canPlayReverse;
- (_Bool)_canPlayReverse;
- (_Bool)_isAFileBasedItemThatsReadyToPlay;
- (_Bool)canPlayFastReverse;
- (_Bool)_canPlayFastReverse;
- (_Bool)canPlayFastForward;
- (_Bool)_canPlayFastForward;
- (void)_makeReadyForEnqueueingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_invokeReadyForEnqueueingHandlers;
- (void)_respondToBecomingReadyForBasicInspectionWithDuration:(CDStruct_1b6d18a9)arg1;
- (void)_respondToBecomingReadyForBasicInspection;
- (void)_removeFAListeners;
- (void)_addFAListeners;
- (void)_removeFPListeners;
- (void)_addFPListeners;
- (id)_fpNotificationNames;
- (id)_trackWithTrackID:(int)arg1;
- (id)tracks;
- (id)_tracks;
- (id)_tracksFromAssetTrackIDs;
- (id)_cachedTracks;
- (id)_tracksWithFPTrackIDArray:(id)arg1;
- (CDStruct_1b6d18a9)duration;
- (CDStruct_1b6d18a9)_duration;
- (id)automaticallyLoadedAssetKeys;
- (id)asset;
- (void)_changeStatusToFailedWithError:(id)arg1;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
- (void)_informObserversAboutAvailabilityOfDuration:(CDStruct_1b6d18a9)arg1;
- (void)_informObserversAboutAvailabilityOfPresentationSize;
- (void)_informObserversAboutAvailabilityOfTracks;
- (void)_kickAssetObserversIfAppropriate;
- (void)_setAssetToAssetWithFigPlaybackItemIfAppropriate;
- (void)_makeNewAssetWithFigPlaybackItem;
- (void)_setTrackIDsForAssetWithFigPlaybackItem:(id)arg1;
- (void)_setAssetWithFigPlaybackItem:(id)arg1;
- (void)_setAsset:(id)arg1;
- (void)_setURL:(id)arg1;
- (id)_URL;
- (void)_removeFromItems;
- (void)_insertAfterItem:(id)arg1;
- (id)_previousItem;
- (id)_nextItem;
- (void)_playerChangeStatusToFailedWithError:(id)arg1;
- (void)_dequeueFromPlayer;
- (void)_enqueueWithPlayer:(id)arg1 shouldAppendItem:(_Bool)arg2;
- (void)_attachToFigPlayer;
- (void)_attachToPlayer:(id)arg1;
- (void)_createPlayerConnection:(id)arg1 shouldAppendItem:(_Bool)arg2;
- (void)_setPlayerConnection:(id)arg1;
- (id)_playerConnection;
- (void)_setIsCurrentPlayerItem:(_Bool)arg1;
- (_Bool)_isCurrentPlayerItem;
- (id)_player;
- (void)_configurePlaybackItem;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
- (void)didChangeValueForKey:(id)arg1;
- (void)willChangeValueForKey:(id)arg1;
- (void)_didAccessKVOForKey:(id)arg1;
- (void)_willAccessKVOForKey:(id)arg1;
- (id)_cachedValueForKey:(id)arg1;
- (id)_propertyStorage;
- (struct OpaqueFigPlaybackItem *)_copyFigPlaybackItem;
- (id)_stateDispatchQueue;
- (id)_weakReference;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithAsset:(id)arg1 automaticallyLoadedAssetKeys:(id)arg2;
- (id)initWithAsset:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)init;
- (void)_createPlayerItemInternal;
@property(readonly, nonatomic, getter=isContentAuthorizedForPlayback) _Bool contentAuthorizedForPlayback;
@property(readonly, nonatomic, getter=isApplicationAuthorizedForPlayback) _Bool applicationAuthorizedForPlayback;
@property(readonly, nonatomic, getter=isAuthorizationRequiredForPlayback) _Bool authorizationRequiredForPlayback;
@property(readonly, nonatomic) NSDate *_rentalPlaybackExpirationDate;
@property(readonly, nonatomic) NSDate *_rentalPlaybackStartedDate;
@property(readonly, nonatomic, getter=_isRentalPlaybackStarted) _Bool _rentalPlaybackStarted;
@property(readonly, nonatomic) NSDate *_rentalExpirationDate;
@property(readonly, nonatomic) NSDate *_rentalStartDate;
@property(readonly, nonatomic, getter=_isRental) _Bool _rental;
@property(nonatomic, getter=_isExternalProtectionRequiredForPlayback, setter=_setExternalProtectionRequiredForPlayback:) _Bool _externalProtectionRequiredForPlayback;
- (id)_isExternalProtectionRequiredForPlaybackInternal;
- (id)errorLog;
- (id)accessLog;
- (long long)_availableFileSize;
- (long long)_fileSize;
- (void)_setEQPreset:(int)arg1;
- (void)_quietlySetEQPreset:(int)arg1;
- (void)_setAudibleDRMInfo:(id)arg1;
- (void)_setRampInOutInfo:(id)arg1;
@property(copy, nonatomic) NSString *dataYouTubeID;
@property(readonly, nonatomic) NSArray *outputs;
- (void)removeOutput:(id)arg1;
- (void)_removeMetadataOutput:(id)arg1;
- (void)_removeLegibleOutput:(id)arg1;
- (void)_removeVideoOutput:(id)arg1;
- (void)addOutput:(id)arg1;
- (void)_addMetadataOutput:(id)arg1;
- (void)_addLegibleOutput:(id)arg1;
- (void)_addVideoOutput:(id)arg1;
- (id)_preferredPixelBufferAttributes;
- (void)_evaluateMetadataOutputs;
- (void)_evaluateLegibleOutputs;
- (void)_evaluateVideoOutputs;
- (id)_metadataOutputsForKeys;
- (id)_legibleOutputsForKeys;
- (id)_videoOutputs;
@property(copy, nonatomic) NSString *mediaKind;
- (void)_quietlySetMediaKind:(id)arg1;
- (id)_mediaKind;
@property(nonatomic) unsigned long long restrictions;
- (void)_quietlySetRestrictions:(unsigned long long)arg1;
@property(copy, nonatomic) NSString *serviceIdentifier;
- (void)_quietlySetServiceIdentifier:(id)arg1;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 didFlushLegibleOutputWithDictionaryKey:(id)arg2;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 didOutputAttributedStrings:(id)arg2 nativeSampleBuffers:(id)arg3 atItemTime:(CDStruct_1b6d18a9)arg4 withLegibleOutputsDictionaryKey:(id)arg5;
- (id)_legibleOutputForKey:(id)arg1;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 didFlushMetadataOutputWithDictionaryKey:(id)arg2;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 didOutputSampleBuffers:(id)arg2 fromTrackWithID:(int)arg3 forMetadataOutputWithDictionaryKey:(id)arg4;
- (id)_metadataOutputForKey:(id)arg1;

@end

@interface AVPlayerItemAccessLog : NSObject <NSCopying>
{
    AVPlayerItemAccessLogInternal *_playerItemAccessLog;
}

- (id)_accessLogArray;
@property(readonly, nonatomic) NSArray *events;
@property(readonly, nonatomic) unsigned long long extendedLogDataStringEncoding;
- (id)extendedLogData;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithLogArray:(id)arg1;
- (id)init;

@end

@interface AVPlayerItemAccessLogEvent : NSObject <NSCopying>
{
    AVPlayerItemAccessLogEventInternal *_playerItemAccessLogEvent;
}

@property(readonly, nonatomic) double switchBitrate;
@property(readonly, nonatomic) long long mediaRequestsWWAN;
@property(readonly, nonatomic) NSString *playbackType;
@property(readonly, nonatomic) double observedBitrateStandardDeviation;
@property(readonly, nonatomic) double observedMinBitrate;
@property(readonly, nonatomic) double observedMaxBitrate;
- (long long)entryReasonCode;
@property(readonly, nonatomic) long long downloadOverdue;
@property(readonly, nonatomic) double startupTime;
@property(readonly, nonatomic) long long numberOfDroppedVideoFrames;
@property(readonly, nonatomic) double indicatedBitrate;
- (double)currentObservedBitrate;
@property(readonly, nonatomic) double observedBitrate;
@property(readonly, nonatomic) double transferDuration;
@property(readonly, nonatomic) long long numberOfBytesTransferred;
@property(readonly, nonatomic) long long numberOfStalls;
@property(readonly, nonatomic) double durationWatched;
@property(readonly, nonatomic) double segmentsDownloadedDuration;
@property(readonly, nonatomic) double playbackStartOffset;
@property(readonly, nonatomic) NSString *playbackSessionID;
@property(readonly, nonatomic) long long numberOfServerAddressChanges;
@property(readonly, nonatomic) NSString *serverAddress;
@property(readonly, nonatomic) NSString *URI;
@property(readonly, nonatomic) NSDate *playbackStartDate;
@property(readonly, nonatomic) long long numberOfSegmentsDownloaded;
@property(readonly, nonatomic) long long numberOfMediaRequests;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)init;
- (id)serviceIdentifier;

@end

@interface AVPlayerItemAccessLogEventInternal : NSObject
{
    NSDictionary *dict;
}

@end

@interface AVPlayerItemAccessLogInternal : NSObject
{
    NSArray *logArray;
}

@end

@interface AVPlayerItemErrorLog : NSObject <NSCopying>
{
    AVPlayerItemErrorLogInternal *_playerItemErrorLog;
}

- (id)_errorLogArray;
@property(readonly, nonatomic) NSArray *events;
@property(readonly, nonatomic) unsigned long long extendedLogDataStringEncoding;
- (id)extendedLogData;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithLogArray:(id)arg1;
- (id)init;

@end

@interface AVPlayerItemErrorLogEvent : NSObject <NSCopying>
{
    AVPlayerItemErrorLogEventInternal *_playerItemErrorLogEvent;
}

@property(readonly, nonatomic) NSString *errorComment;
@property(readonly, nonatomic) NSString *errorDomain;
@property(readonly, nonatomic) long long errorStatusCode;
@property(readonly, nonatomic) NSString *playbackSessionID;
@property(readonly, nonatomic) NSString *serverAddress;
@property(readonly, nonatomic) NSString *URI;
@property(readonly, nonatomic) NSDate *date;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface AVPlayerItemErrorLogEventInternal : NSObject
{
    NSDictionary *dict;
}

@end

@interface AVPlayerItemErrorLogInternal : NSObject
{
    NSArray *logArray;
}

@end

@interface AVPlayerItemInternal : NSObject
{
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    AVWeakReference *weakReference;
    NSObject<OS_dispatch_queue> *figConfigurationQueue;
    struct OpaqueVTPixelBufferAttributesMediator *pixelBufferAttributeMediator;
    struct OpaqueCMTimebase *proxyTimebase;
    _Bool isCurrentPlayerItem;
    NSArray *cachedTracks;
    NSMutableArray *syncLayers;
    NSArray *itemOutputs;
    NSMutableArray *itemVideoOutputs;
    NSMutableDictionary *itemLegibleOutputsForKeys;
    NSMutableDictionary *itemMetadataOutputsForKeys;
    _Bool suppressesVideoLayers;
    struct OpaqueCMTimebase *figTimebase;
    struct OpaqueFigPlaybackItem *figPlaybackItem;
    AVPlayerItem *previousItem;
    AVPlayerItem *nextItem;
    struct OpaqueFigCPEProtector *figCPEProtector;
    id <AVPlayerItemDelegate> delegate;
    AVWeakReference *playerReference;
    AVPlayerConnection *playerConnection;
    NSObject<OS_dispatch_queue> *stateDispatchQueue;
    AVPropertyStorage *propertyStorage;
    long long status;
    NSError *error;
    NSURL *URL;
    AVAsset *asset;
    NSArray *automaticallyLoadedAssetKeys;
    AVAsset *assetWithFigPlaybackItem;
    NSArray *trackIDsForAssetWithFigPlaybackItem;
    NSArray *timedMetadata;
    CDStruct_1b6d18a9 initialTime;
    CDStruct_1b6d18a9 initialToleranceBefore;
    CDStruct_1b6d18a9 initialToleranceAfter;
    CDStruct_1b6d18a9 forwardPlaybackEndTime;
    CDStruct_1b6d18a9 reversePlaybackEndTime;
    NSDate *initialDate;
    NSDate *initialEstimatedDate;
    _Bool initialLimitReadAhead;
    _Bool allowsExtendedReadAhead;
    CDStruct_1b6d18a9 maximumTrailingBufferDuration;
    long long initialPlaybackLikelyToKeepUpTrigger;
    _Bool initialAlwaysMonitorsPlayability;
    _Bool initialWillNeverSeekBackwardsHint;
    _Bool initialContinuesPlayingDuringPrerollForSeek;
    _Bool initialContinuesPlayingDuringPrerollForRateChange;
    _Bool usesIFrameOnlyPlaybackForHighRateScaledEdits;
    _Bool usesIFrameOnlyPlaybackForHighRateScaledEditsWasSet;
    CDStruct_1b6d18a9 minimumIntervalForIFrameOnlyPlayback;
    _Bool minimumIntervalForIFrameOnlyPlaybackWasSet;
    float speedThresholdForIFrameOnlyPlayback;
    _Bool speedThresholdForIFrameOnlyPlaybackWasSet;
    struct __CFString *initialFigTimePitchAlgorithm;
    _Bool savesDownloadedDataToDiskWhenDone;
    _Bool nonForcedSubtitlesEnabled;
    _Bool networkUsuallyExceedsMaxBitRate;
    _Bool allowProgressiveSwitchUp;
    double preferredPeakBitRate;
    AVAudioMix *audioMix;
    AVVideoComposition *videoComposition;
    AVWeakReference *clientsOriginalVideoComposition;
    void *figVideoCompositor;
    AVCustomVideoCompositorSession *customVideoCompositorSession;
    _Bool seekingWaitsForVideoCompositionRendering;
    NSArray *textStyleRules;
    NSDictionary *gaplessInfo;
    long long initialVariantIndex;
    NSDictionary *audibleDRMInfo;
    NSDictionary *rampInOutInfo;
    float soundCheckVolumeNormalization;
    float volumeAdjustment;
    NSMutableArray *handlersToCallWhenReadyForEnqueueing;
    NSMutableDictionary *mediaOptionsSelectedByClient;
    _Bool haveInitialSamples;
    _Bool haveCPEProtector;
    _Bool didSetAssetToAssetWithFigPlaybackItem;
    _Bool didBecomeReadyForBasicInspection;
    _Bool didBecomeReadyForInspectionOfMediaSelectionOptions;
    _Bool didBecomeReadyForInspectionOfTracks;
    _Bool didBecomeReadyForInspectionOfPresentationSize;
    _Bool didBecomeReadyForInspectionOfDuration;
    _Bool didInformObserversAboutAvailabilityOfTracks;
    _Bool didFireKVOForAssetForNonStreamingItem;
    _Bool wasInitializedWithURL;
    _Bool needTimedMetadataNotification;
    _Bool externalSubtitlesEnabled;
    _Bool externalProtectionRequested;
    _Bool requiresAccessLog;
    int eqPreset;
    struct OpaqueFigSimpleMutex *seekIDMutex;
    unsigned int nextSeekIDToGenerate;
    int pendingSeekID;
    CDUnknownBlockType seekCompletionHandler;
    NSString *dataYouTubeID;
    unsigned int RTCReportingFlags;
    NSString *serviceIdentifier;
    NSString *mediaKind;
    unsigned long long restrictions;
}

@end

@interface AVPlayerItemOutput : NSObject
{
    AVPlayerItemOutputInternal *_outputInternal;
}

- (void)_setTimebase:(struct OpaqueCMTimebase *)arg1;
- (struct OpaqueCMTimebase *)_copyTimebase;
- (void)_detachFromPlayerItem;
- (_Bool)_attachToPlayerItem:(id)arg1;
- (id)_weakReference;
@property(nonatomic) _Bool suppressesPlayerRendering;
- (CDStruct_1b6d18a9)itemTimeForMachAbsoluteTime:(long long)arg1;
- (CDStruct_1b6d18a9)itemTimeForHostTime:(double)arg1;
- (CDStruct_1b6d18a9)_itemTimeForHostTimeAsCMTime:(CDStruct_1b6d18a9)arg1;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVPlayerItemLegibleOutput : AVPlayerItemOutput
{
    AVPlayerItemLegibleOutputInternal *_legibleOutputInternal;
}

+ (void)initialize;
- (void)setSuppressesPlayerRendering:(_Bool)arg1;
- (_Bool)suppressesPlayerRendering;
- (void)setTextStylingResolution:(id)arg1;
- (id)textStylingResolution;
@property(nonatomic) double advanceIntervalForDelegateInvocation;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property(readonly, nonatomic) id <AVPlayerItemLegibleOutputPushDelegate> delegate;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (id)_figLegibleOutputsDictionaryOptions;
- (void)_detachFromPlayerItem;
- (_Bool)_attachToPlayerItem:(id)arg1;
- (void)_signalFlush;
- (void)_pushAttributedStrings:(id)arg1 andSampleBuffers:(id)arg2 atItemTime:(CDStruct_1b6d18a9)arg3;
- (void)finalize;
- (void)dealloc;
- (void)_collectUncollectables;
- (id)initWithDependencyFactory:(id)arg1 mediaSubtypesForNativeRepresentation:(id)arg2;
- (id)initWithMediaSubtypesForNativeRepresentation:(id)arg1;
- (id)init;

@end

@interface AVPlayerItemLegibleOutputInternal : NSObject
{
    id <AVPlayerItemLegibleOutputDependencyFactory> dependencyFactory;
    NSArray *nativeRepresentationSubtypes;
    AVWeakReferencingDelegateStorage *delegateStorage;
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    AVWeakReference *weakReferenceToHost;
    _Bool suppressesPlayerRendering;
    double advanceInterval;
    NSString *textStylingResolution;
}

@end

@interface AVPlayerItemLegibleOutputRealDependencyFactory : NSObject <AVPlayerItemLegibleOutputDependencyFactory>
{
}

- (id)playerItemOutputHostForPlayerItem:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVPlayerItemMetadataOutput : AVPlayerItemOutput
{
    AVPlayerItemMetadataOutputInternal *_metadataOutputInternal;
}

+ (void)initialize;
@property(nonatomic) double advanceIntervalForDelegateInvocation;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property(readonly, nonatomic) id <AVPlayerItemMetadataOutputPushDelegate> delegate;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)_detachFromPlayerItem;
- (_Bool)_attachToPlayerItem:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (void)_collectUncollectables;
- (id)initWithIdentifiers:(id)arg1;
- (id)init;
- (void)_pushTimedMetadataGroups:(id)arg1 fromPlayerItemTrack:(id)arg2;
- (void)_signalFlush;

@end

@interface AVPlayerItemMetadataOutputInternal : NSObject
{
    NSArray *metadataIdentifiers;
    AVWeakReferencingDelegateStorage *delegateStorage;
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    NSObject<OS_dispatch_queue> *accumulationQueue;
    AVWeakReference *weakReferenceToHost;
    double advanceInterval;
    struct __CFDictionary *accumulatedMetadataGroups;
}

@end

@interface AVPlayerItemOutputInternal : NSObject
{
    AVWeakReference *weakReference;
    NSObject<OS_dispatch_queue> *timebaseReadWriteQueue;
    struct OpaqueCMTimebase *timebase;
}

@end

@interface AVPlayerItemTrack : NSObject
{
    AVPlayerItemTrackInternal *_playerItemTrack;
}

+ (id)playerItemTrackWithFigPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 readyForInspection:(_Bool)arg2 trackID:(int)arg3 asset:(id)arg4 playerItem:(id)arg5;
- (void)_respondToFigPlaybackItemBecomingReadyForInpection;
- (void)_attachToFigPlaybackItemOfPlayerItem:(id)arg1;
- (void)_transferCachedValuesToFig;
- (void)setLoudnessInfo:(id)arg1;
- (void)_transferLoudnessInfoToFig;
- (id)loudnessInfo;
@property(readonly, nonatomic) float currentVideoFrameRate;
- (id)fallbackTrack;
@property(nonatomic, getter=isEnabled) _Bool enabled;
- (void)_transferEnabledToFig;
@property(readonly, nonatomic) AVAssetTrack *assetTrack;
- (int)trackID;
- (id)_playerItem;
- (id)_weakReferenceToPlayerItem;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (id)_initWithFigPlaybackItem:(struct OpaqueFigPlaybackItem *)arg1 readyForInspection:(_Bool)arg2 trackID:(int)arg3 asset:(id)arg4 playerItem:(id)arg5;

@end

@interface AVPlayerItemTrackInternal : NSObject
{
    AVWeakReference *weakReferenceToPlayerItem;
    struct OpaqueFigPlaybackItem *figPlaybackItem;
    _Bool figPlaybackItemIsReadyForInspection;
    AVAsset *asset;
    int trackID;
    NSString *videoFieldMode;
    NSDictionary *loudnessInfo;
    _Bool enabled;
    _Bool enabledWasSet;
}

@end

@interface AVPlayerItemVideoOutput : AVPlayerItemOutput
{
    AVPlayerItemVideoOutputInternal *_videoOutputInternal;
}

- (void)_dispatchOutputSequenceWasFlushed;
- (void)_dispatchOutputMediaDataWillChange;
- (void)_setTimebase:(struct OpaqueCMTimebase *)arg1;
- (void)_startObservingTimebaseNotificationsForTimebase:(struct OpaqueCMTimebase *)arg1;
- (void)_stopObservingTimebaseNotificationsForTimebase:(struct OpaqueCMTimebase *)arg1;
- (struct OpaqueFigVisualContext *)_visualContext;
- (void)_setTagBuffersWithConversionInformation;
- (_Bool)suppressesPlayerRendering;
- (void)setSuppressesPlayerRendering:(_Bool)arg1;
- (struct __CVBuffer *)copyPixelBufferForItemTime:(CDStruct_1b6d18a9)arg1 itemTimeForDisplay:(CDStruct_1b6d18a9 *)arg2;
- (_Bool)hasNewPixelBufferForItemTime:(CDStruct_1b6d18a9)arg1;
- (void)requestNotificationOfMediaDataChangeWithAdvanceInterval:(double)arg1;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property(readonly, nonatomic) id <AVPlayerItemOutputPullDelegate> delegate;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)_detachFromPlayerItem;
- (_Bool)_attachToPlayerItem:(id)arg1;
- (id)_pixelBufferAttributes;
- (void)dealloc;
- (void)finalize;
- (id)initWithPixelBufferAttributes:(id)arg1;
- (id)init;

@end

@interface AVPlayerItemVideoOutputInternal : NSObject
{
    struct OpaqueCMTimebase *timebase;
    double currentRate;
    struct OpaqueFigVisualContext *vc;
    AVWeakReference *playerItemWeakReference;
    struct OpaqueVTPixelBufferConformer *pixelBufferConformer;
    id <AVPlayerItemOutputPullDelegate> delegate;
    NSObject<OS_dispatch_queue> *stateQueue;
    NSObject<OS_dispatch_queue> *delegateQueue;
    NSObject<OS_dispatch_source> *delegateWakeupSource;
    double advanceWakeUpInterval;
    _Bool advanceWakeUpIntervalIsValid;
    CDStruct_1b6d18a9 wakeUpImageTime;
    _Bool suppressesPlayerRendering;
    _Bool shouldTagBuffersWithInfo;
}

@end

@interface AVPlayerLayer : CALayer
{
    AVPlayerLayerInternal *_playerLayer;
}

+ (id)keyPathsForValuesAffectingVideoRect;
+ (id)playerLayerWithPlayer:(id)arg1;
- (struct CGRect)_videoRectForBounds:(struct CGRect)arg1;
@property(readonly, nonatomic) struct CGRect videoRect;
- (void)setOverscanSubtitleSupportEnabled:(_Bool)arg1;
- (_Bool)isOverscanSubtitleSupportEnabled;
- (id)_subtitleLayer;
- (id)_closedCaptionLayer;
- (id)_videoLayer;
- (void)setPixelBufferAttributes:(id)arg1;
- (id)pixelBufferAttributes;
- (void)_setSubtitleGravity:(id)arg1;
- (id)_subtitleGravity;
- (void)_setItem:(id)arg1 readyForDisplay:(_Bool)arg2;
@property(readonly, nonatomic, getter=isReadyForDisplay) _Bool readyForDisplay;
@property(copy) NSString *videoGravity;
- (void)layerDidBecomeVisible:(_Bool)arg1;
@property(retain, nonatomic) AVPlayer *player;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_setHasPlayerToObserve:(long long)arg1 andShouldObserveIt:(long long)arg2;
- (void)_updatePresentationSize:(struct CGSize)arg1 forceUpdate:(_Bool)arg2;
- (void)_notifyPlayerOfDisplaySize;
- (struct CGSize)_getAVPlayerCurrentItemPresentationSizeKeyFromPlayer:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (void)removeAllAnimations;
- (void)removeAnimationForKey:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)_forBoundsAnimations:(id)arg1 applyBlock:(CDUnknownBlockType)arg2;
- (id)_transformToAbsoluteAnimationOfBounds:(id)arg1;
- (void)_addAnimationsForVideoLayer:(id)arg1 size:(struct CGSize)arg2 gravity:(id)arg3;
- (void)_addAnimationsForClosedCaptionLayer:(id)arg1 gravity:(id)arg2;
- (void)_addAnimationsForMaskLayer:(id)arg1;
- (void)setBounds:(struct CGRect)arg1;
- (id)initWithLayer:(id)arg1;
- (id)init;

@end

@interface AVPlayerLayerIntermediateLayer : CALayer
{
}

+ (id)defaultActionForKey:(id)arg1;
- (id)actionForKey:(id)arg1;

@end

@interface AVPlayerLayerInternal : NSObject
{
    AVPlayer *_player;
    CALayer *maskLayer;
    CALayer *videoLayer;
    CALayer *closedCaptionLayer;
    NSString *videoGravity;
    NSString *subtitleGravity;
    FigSubtitleCALayer *subtitleLayer;
    struct CGRect latestPlayerLayerBoundsAtRendering;
    struct CGRect latestSubtitleLayoutAtRendering;
    _Bool shouldObservePlayer;
    _Bool isObservingPlayer;
    _Bool hasPlayerToObserve;
    NSObject<OS_dispatch_queue> *serialQueue;
    _Bool isPresentationLayer;
    _Bool isReadyForDisplay;
    struct OpaqueFigSimpleMutex *isReadyForDisplayMutex;
    AVPlayerItem *itemMarkedReadyForDisplay;
    struct CGSize presentationSize;
    struct CGSize latestPresentationSizeAtRendering;
    _Bool isInPIPMode;
    NSDictionary *pixelBufferAttributes;
}

@end

@interface AVPlayerMediaSelectionCriteria : NSObject
{
    AVPlayerMediaSelectionCriteriaInternal *_criteria;
}

- (id)description;
- (_Bool)precludeMultichannelAudio;
- (_Bool)preferMultichannelAudio;
- (id)precludedMediaSubTypes;
- (id)preferredMediaSubTypes;
@property(readonly, nonatomic) NSArray *preferredMediaCharacteristics;
@property(readonly, nonatomic) NSArray *preferredLanguages;
- (void)dealloc;
- (id)initWithPreferredLanguages:(id)arg1 preferredMediaCharacteristics:(id)arg2 preferredMediaSubTypes:(id)arg3 precludedMediaSubTypes:(id)arg4;
- (id)initWithPreferredLanguages:(id)arg1 preferredMediaCharacteristics:(id)arg2;
- (id)initWithPreferredLanguages:(id)arg1 preferredMediaCharacteristics:(id)arg2 preferredMediaSubTypes:(id)arg3 precludedMediaSubTypes:(id)arg4 preferMultichannelAudio:(_Bool)arg5 precludeMultichannelAudio:(_Bool)arg6;
- (id)init;
- (id)initWithFigDictionary:(id)arg1;
- (id)figDictionary;

@end

@interface AVPlayerMediaSelectionCriteriaInternal : NSObject
{
    NSArray *_preferredLanguages;
    NSArray *_requiredMediaCharacteristics;
    NSArray *_preferredMediaCharacteristics;
    NSArray *_precludedMediaCharacteristics;
    NSArray *_preferredMediaSubTypes;
    NSArray *_precludedMediaSubTypes;
    _Bool _preferMultichannelAudio;
    _Bool _precludeMultichannelAudio;
}

@property(nonatomic) _Bool precludeMultichannelAudio; // @synthesize precludeMultichannelAudio=_precludeMultichannelAudio;
@property(nonatomic) _Bool preferMultichannelAudio; // @synthesize preferMultichannelAudio=_preferMultichannelAudio;
@property(retain, nonatomic) NSArray *precludedMediaSubTypes; // @synthesize precludedMediaSubTypes=_precludedMediaSubTypes;
@property(retain, nonatomic) NSArray *preferredMediaSubTypes; // @synthesize preferredMediaSubTypes=_preferredMediaSubTypes;
@property(retain, nonatomic) NSArray *precludedMediaCharacteristics; // @synthesize precludedMediaCharacteristics=_precludedMediaCharacteristics;
@property(retain, nonatomic) NSArray *preferredMediaCharacteristics; // @synthesize preferredMediaCharacteristics=_preferredMediaCharacteristics;
@property(retain, nonatomic) NSArray *requiredMediaCharacteristics; // @synthesize requiredMediaCharacteristics=_requiredMediaCharacteristics;
@property(retain, nonatomic) NSArray *preferredLanguages; // @synthesize preferredLanguages=_preferredLanguages;
- (void)dealloc;

@end

@interface AVPropertyStorage : NSObject
{
    NSObject<OS_dispatch_queue> *_storageAccessWorkQueue;
    NSMutableDictionary *_propertyStorage;
}

- (void)didAccessKVOForKey:(id)arg1;
- (void)willAccessKVOForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)objectForKey:(id)arg1 defaultObjectBlock:(CDUnknownBlockType)arg2;
- (_Bool)shouldUsePropertyStorageCacheForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface AVQueuePlayer : AVPlayer
{
    AVQueuePlayerInternal *_queuePlayer;
}

+ (id)playerWithURL:(id)arg1;
+ (id)playerWithPlayerItem:(id)arg1;
+ (id)queuePlayerWithItems:(id)arg1;
+ (void)initialize;
- (void)commitModifications;
- (void)beginModifications;
- (void)removeAllItems;
- (void)removeItem:(id)arg1;
- (void)insertItem:(id)arg1 afterItem:(id)arg2;
- (void)_enqueueModification:(CDUnknownBlockType)arg1;
- (_Bool)_shouldEnqueueModifications;
- (_Bool)canInsertItem:(id)arg1 afterItem:(id)arg2;
- (void)advanceToNextItem;
- (id)items;
- (void)setActionAtItemEnd:(long long)arg1;
- (long long)_defaultActionAtItemEnd;
- (void)dealloc;
- (id)initWithItems:(id)arg1;
- (id)init;

@end

@interface AVQueuePlayerInternal : NSObject
{
    long long beginModificationCount;
    NSMutableArray *queuedModifications;
}

@end

@interface AVRawImageReprocessor : NSObject
{
    AVRawImageReprocessorInternal *_internal;
}

+ (void)initialize;
- (void)handlePhotoReady:(id)arg1;
- (void)reprocessRawImageSurface:(void *)arg1 andMetadata:(id)arg2 withOutputSettings:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (id)init;

@end

@interface AVRawImageReprocessorInternal : NSObject
{
    struct OpaqueCMBaseObject *reprocessor;
    NSMutableArray *reprocessHandlers;
}

@end

@interface AVResolvedCaptureOptions : NSObject
{
    NSString *sessionPreset;
    _Bool captureSessionPresetChanging;
    NSMutableDictionary *baseCaptureOptions;
    NSMutableDictionary *optionsOverrides;
    struct __CFDictionary *outputSettingsOverrides;
    _Bool usePreviewSizedCaptureBuffers;
    _Bool useStabilizationIfAvailable;
    _Bool hasStillImageOutput;
    NSString *faceDetectionMode;
    _Bool faceDetectionNotificationsEnabled;
    CDStruct_1b6d18a9 videoConnectionMinFrameDuration;
    CDStruct_1b6d18a9 videoConnectionMaxFrameDuration;
    AVCaptureDeviceFormat_FigRecorder *resolvedVideoDeviceFormat;
    CDStruct_1b6d18a9 resolvedVideoMinFrameDuration;
    CDStruct_1b6d18a9 resolvedVideoMaxFrameDuration;
    NSMutableDictionary *resolvedVideoCompressionProperties;
    NSMutableDictionary *resolvedCaptureOptions;
    _Bool resolvesFrameRatesUsingDefaultValues;
    _Bool resetsVideoZoomFactorToDefaultValue;
}

+ (id)resolvedCaptureOptionsWithSessionPreset:(id)arg1 captureOptionsDictionary:(id)arg2;
+ (void)initialize;
@property(readonly) NSString *sessionPreset; // @synthesize sessionPreset;
@property _Bool resetsVideoZoomFactorToDefaultValue; // @synthesize resetsVideoZoomFactorToDefaultValue;
@property _Bool resolvesFrameRatesUsingDefaultValues; // @synthesize resolvesFrameRatesUsingDefaultValues;
- (void)setBestCaptureResolutionForAVScalingMode:(id)arg1 captureOptions:(id)arg2;
- (void)setBestPreviewResolutionForCaptureOptions:(id)arg1;
- (id)deviceFormatForCamera:(id)arg1 captureOptions:(id)arg2;
- (void)applyInputPriorityOverridesToCaptureOptions:(id)arg1 forCamera:(id)arg2;
- (void)resolveOutputSettingsToCaptureOptions:(id)arg1 resolvedScalingMode:(id *)arg2;
- (void)resolveFrameRatesToCaptureOptions:(id)arg1 withCamera:(id)arg2 activeFormat:(id)arg3;
- (_Bool)hasOverridesAffectingPreviewFormatInResolvedOptions:(id)arg1 withScalingMode:(id)arg2;
- (_Bool)hasOverridesAffectingCaptureFormatInResolvedOptions:(id)arg1 withScalingMode:(id)arg2;
- (_Bool)hasHeightOverrideInResolvedOptions:(id)arg1;
- (_Bool)hasWidthOverrideInResolvedOptions:(id)arg1;
- (id)cameraForCaptureOptions:(id)arg1;
- (id)resolvedVideoCompressionProperties;
- (id)resolvedVideoSettingsForMovieFileOutput;
- (id)resolvedVideoSettingsForAssetWriter;
- (id)resolvedVideoSettingsWithScalingAllowed:(_Bool)arg1;
- (CDStruct_1b6d18a9)resolvedVideoMaxFrameDuration;
- (CDStruct_1b6d18a9)resolvedVideoMinFrameDuration;
- (id)resolvedVideoDeviceFormat;
- (id)resolvedCaptureOptionsDictionary;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)addMaxFrameDuration:(CDStruct_1b6d18a9)arg1 forConnection:(id)arg2;
- (void)addMinFrameDuration:(CDStruct_1b6d18a9)arg1 forConnection:(id)arg2;
- (void)enableFaceDetectionNotificationsForConnection:(id)arg1;
- (void)addFaceDetectionMode:(id)arg1 forConnection:(id)arg2;
- (int)rankForFaceDetectionMode:(id)arg1;
@property(nonatomic) _Bool hasStillImageOutput;
- (void)useStabilizationIfAvailableForConnection:(id)arg1;
- (void)usePreviewSizedCaptureBuffersForConnection:(id)arg1;
- (void)addOutputSettings:(id)arg1 forConnection:(id)arg2;
- (id)baseCaptureOptions;
- (void)dealloc;
- (id)initWithSessionPreset:(id)arg1 captureOptionsDictionary:(id)arg2;

@end

@interface AVRetainReleaseWeakReference : AVWeakReference
{
    NSString *_cachedReferencedObjectDescription;
    id _weakStorage;
}

- (id)referencedObject;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithReferencedObject:(id)arg1;

@end

@interface AVRunLoopCondition : NSCondition
{
    NSMutableArray *_runLoopStateList;
}

- (void)_signalRunLoopWithState:(id)arg1;
- (void)broadcast;
- (void)signal;
- (_Bool)_waitInMode:(id)arg1 untilDate:(id)arg2;
- (_Bool)waitUntilDate:(id)arg1 inMode:(id)arg2;
- (void)waitInMode:(id)arg1;
- (_Bool)waitUntilDate:(id)arg1;
- (void)wait;
- (void)dealloc;
- (id)init;

@end

@interface AVRunLoopConditionRunLoopState : NSObject
{
    struct __CFRunLoop *_runLoop;
    struct __CFRunLoopSource *_signalSource;
    _Bool _signaled;
}

+ (id)runLoopStateWithRunLoop:(struct __CFRunLoop *)arg1;
@property(nonatomic) _Bool signaled; // @synthesize signaled=_signaled;
@property(nonatomic) struct __CFRunLoopSource *signalSource; // @synthesize signalSource=_signalSource;
@property(readonly, nonatomic) struct __CFRunLoop *runLoop; // @synthesize runLoop=_runLoop;
- (void)dealloc;
- (id)initWithRunLoop:(struct __CFRunLoop *)arg1;

@end

@interface AVSampleBufferDisplayLayer : CALayer <AVQueuedSampleBufferRendering, AVMediaDataRequesterConsumer, AVQueuedSampleBufferRenderingInternal>
{
    AVSampleBufferDisplayLayerInternal *_sampleBufferDisplayLayerInternal;
}

+ (_Bool)automaticallyNotifiesObserversOfError;
+ (_Bool)automaticallyNotifiesObserversOfStatus;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long status;
@property(readonly, getter=isReadyForMoreMediaData) _Bool readyForMoreMediaData;
- (void)copyFigSampleBufferAudioRenderer:(struct OpaqueFigSampleBufferAudioRenderer **)arg1;
- (_Bool)setRenderSynchronizer:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)_forBoundsAnimations:(id)arg1 applyBlock:(CDUnknownBlockType)arg2;
- (id)_transformToAbsoluteAnimationOfBounds:(id)arg1;
- (void)_addAnimationsForContentLayer:(id)arg1 size:(struct CGSize)arg2 gravity:(id)arg3;
- (void)setBounds:(struct CGRect)arg1;
@property(copy) NSString *videoGravity;
@property(retain) struct OpaqueCMTimebase *controlTimebase;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (void)_removeFigVideoQueueListeners;
- (void)_addFigVideoQueueListeners;
- (id)_weakReference;
- (void)_setOutputObscuredDueToInsufficientExternalProtection:(_Bool)arg1;
- (void)_resetStatusWithOSStatus:(int)arg1;
- (void)_setStatus:(long long)arg1 error:(id)arg2;
- (void)_refreshAboveHighWaterLevel;
- (void)_updatePresentationSize:(struct CGSize)arg1;
- (void)_updateLayerTreeGeometryWithVideoGravity:(id)arg1 bounds:(struct CGRect)arg2 presentationSize:(struct CGSize)arg3;
- (int)_createVideoQueue;
- (int)_initializeTimebases;
- (void)_setSynchronizerTimebase:(struct OpaqueCMTimebase *)arg1;
- (void)_setControlTimebase:(struct OpaqueCMTimebase *)arg1;
- (void)stopRequestingMediaData;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)flushAndRemoveImage;
- (void)flush;
- (void)enqueueSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
@property(readonly, retain) struct OpaqueCMTimebase *timebase;
- (void)_didFinishSuspension:(id)arg1;
- (id)videoPerformanceMetrics;
@property(readonly, nonatomic) _Bool outputObscuredDueToInsufficientExternalProtection;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVSampleBufferDisplayLayerContentLayer : CALayer
{
}

+ (id)defaultActionForKey:(id)arg1;
- (id)actionForKey:(id)arg1;

@end

@interface AVSampleBufferDisplayLayerInternal : NSObject
{
    CALayer *contentLayer;
    struct OpaqueFigVideoQueue *videoQueue;
    _Bool outputObscured;
    long long status;
    NSError *error;
    NSString *videoGravity;
    struct CGSize presentationSize;
    struct CGRect bounds;
    _Bool isRequestingMediaData;
    AVMediaDataRequester *mediaDataRequester;
    _Bool aboveHighWaterLevel;
    NSObject<OS_dispatch_queue> *serialQueue;
    AVWeakReference *weakReferenceToSelf;
    AVWeakReference *weakReferenceToSynchronizer;
    _Bool addedToSynchronizer;
    _Bool controlTimebaseSetByUserIsInUse;
    struct OpaqueCMTimebase *controlTimebaseSetByUser;
    struct OpaqueCMTimebase *readOnlyVideoQueueTimebase;
    struct OpaqueCMTimebase *readOnlyRenderingTimebase;
}

@end

@interface AVScheduledAudioParametersInternal : NSObject
{
    NSMutableArray *ramps;
}

@end

@interface AVStreamingResourceInspector : AVAssetInspector
{
}

- (CDStruct_1b6d18a9)duration;

@end

@interface AVSubtitleLayer : CALayer
{
    AVSubtitleLayerInternal *_subtitleLayer;
}

+ (id)subtitleLayerWithPlayer:(id)arg1;
@property(readonly, nonatomic) CADisplay *subtitleLayerDisplay;
@property(nonatomic, getter=isOverscanSubtitleSupportEnabled) _Bool overscanSubtitleSupportEnabled;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)layerDidBecomeVisible:(_Bool)arg1;
- (void)setDelegate:(id)arg1;
@property(retain, nonatomic) AVPlayer *player;
- (void)dealloc;
- (void)finalize;
- (void)_setHasPlayerToObserve:(long long)arg1 andShouldObserveIt:(long long)arg2;
- (void)_updateNonForcedSubtitleDisplayEnabled:(_Bool)arg1;
- (void)drawInContext:(struct CGContext *)arg1;
- (id)initWithLayer:(id)arg1;
- (id)init;
- (void)subtitleRenderingNeedsLayout;
- (int)getLayout:(struct SubtitleLayoutParameters)arg1 suggestLayout:(struct CGRect *)arg2 shouldUpdateCachedSubtitleSample:(_Bool)arg3;
- (int)updateSubtitle:(id)arg1 forcedSubtitleSample:(_Bool)arg2 shouldBeHidden:(_Bool *)arg3;
- (void)_setSubtitleSample:(id)arg1;

@end

@interface AVSubtitleLayerInternal : NSObject
{
    AVPlayer *player;
    struct OpaqueFigSubtitleRenderer *renderer;
    NSDictionary *currentSubtitleSample;
    _Bool currentSubtitleSampleIsForced;
    _Bool nonForcedSubtitleDisplayEnabled;
    _Bool shouldObservePlayer;
    _Bool isObservingPlayer;
    _Bool hasPlayerToObserve;
    NSObject<OS_dispatch_queue> *serialQueue;
    _Bool isPresentationLayer;
    _Bool isOverscanSubtitleSupportEnabled;
    id delegate;
}

@end

@interface AVSynchronizedLayer : CALayer
{
    AVSynchronizedLayerInternal *_syncLayer;
}

+ (id)synchronizedLayerWithPlayerItem:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (void)layerDidBecomeVisible:(_Bool)arg1;
@property(retain, nonatomic) AVPlayerItem *playerItem;
- (id)init;

@end

@interface AVSynchronizedLayerInternal : NSObject
{
    AVPlayerItem *playerItem;
    _Bool isVisible;
    NSObject<OS_dispatch_queue> *serialQueue;
}

@end

@interface AVTextStyleRule : NSObject <NSCopying>
{
    AVTextStyleRuleInternal *_textStyleRule;
}

+ (id)textStyleRuleWithTextMarkupAttributes:(id)arg1 textSelector:(id)arg2;
+ (id)textStyleRuleWithTextMarkupAttributes:(id)arg1;
+ (id)textStyleRulesFromPropertyList:(id)arg1;
+ (id)propertyListForTextStyleRules:(id)arg1;
- (id)_dictionaryPlistRepresentation;
@property(readonly, nonatomic) NSString *textSelector;
@property(readonly, nonatomic) NSDictionary *textMarkupAttributes;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithTextMarkupAttributes:(id)arg1 textSelector:(id)arg2;
- (id)initWithTextMarkupAttributes:(id)arg1;

@end

@interface AVTextStyleRuleInternal : NSObject
{
    NSString *textSelector;
    NSDictionary *textMarkupAttributes;
}

@end

@interface AVTimedMetadataGroupInternal : NSObject
{
    NSArray *items;
    CDStruct_e83c9415 timeRange;
    struct opaqueCMSampleBuffer *backingSBuf;
}

@end

@interface AVURLAsset : AVAsset
{
    AVURLAssetInternal *_URLAsset;
}

+ (id)URLAssetWithURL:(id)arg1 options:(id)arg2;
+ (_Bool)isPlayableExtendedMIMEType:(id)arg1;
+ (id)audiovisualMIMETypes;
+ (id)audiovisualTypes;
+ (id)_UTTypes;
+ (id)_fileUTTypes;
+ (id)_streamingUTTypes;
+ (id)_figMIMETypes;
+ (id)_figFilePathExtensions;
+ (id)_figFileMIMETypes;
+ (id)_figStreamingMIMETypes;
+ (id)_avfValidationPlist;
- (unsigned long long)referenceRestrictions;
- (id)lyrics;
- (void)cancelLoading;
@property(readonly, copy, nonatomic) NSURL *URL;
- (id)_absoluteURL;
- (void)_tracksDidChange;
- (id)tracks;
- (id)_tracks;
- (Class)_classForTrackInspectors;
- (struct OpaqueFigPlaybackItem *)_playbackItem;
- (struct OpaqueFigFormatReader *)_formatReader;
- (id)_assetInspector;
- (void)_setAssetInspectorLoader:(id)arg1;
- (id)_assetInspectorLoader;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (void)_removeFigAssetNotifications;
- (void)_addFigAssetNotifications;
- (id)_errorForFigNotificationPayload:(struct __CFDictionary *)arg1 key:(struct __CFString *)arg2;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)_handleURLAssetInitializationOptionsReturningFigAssetCreationOptions:(id)arg1 selector:(SEL)arg2;
- (id)init;
- (_Bool)_shouldOptimizeAccessForLinearMoviePlayback;
- (id)SHA1Digest;
- (unsigned long long)downloadToken;
- (id)downloadDestinationURL;
- (id)resolvedURL;
@property(readonly, nonatomic) NSString *cacheKey;
@property(readonly, nonatomic) _Bool shouldMatchDataInCacheByURLWithoutQueryComponent;
@property(readonly, nonatomic) _Bool shouldMatchDataInCacheByURLPathComponentOnly;
@property(readonly, nonatomic) AVAssetCache *assetCache;
- (_Bool)_hasResourceLoaderDelegate;
@property(readonly, nonatomic) AVAssetResourceLoader *resourceLoader;
- (void)_handleURLRequest:(id)arg1;
- (void)_finishLoadingCustomURLProviderRequestWithResponseProperties:(id)arg1 context:(id)arg2;

@end

@interface AVURLAssetInternal : NSObject
{
    AVAssetInspectorLoader *loader;
    NSURL *URL;
    NSArray *tracks;
    AVAssetResourceLoader *resourceLoader;
    long long makeOneResourceLoaderOnly;
    NSObject<OS_dispatch_queue> *tracksAccessQueue;
    AVAssetCache *assetCache;
    _Bool shouldMatchDataInCacheByURLPathComponentOnly;
    _Bool shouldMatchDataInCacheByURLWithoutQueryComponent;
    _Bool shouldOptimizeAccessForLinearMoviePlayback;
    NSURL *downloadDestinationURL;
    unsigned long long referenceRestrictions;
}

@end

@interface AVURLAuthenticationChallenge : NSURLAuthenticationChallenge <AVAssetResourceLoaderRequest>
{
    AVWeakReference *_weakReference;
    NSDictionary *_requestDictionary;
}

+ (SEL)_selectorForInformingDelegateOfCancellationByFig;
- (void)_performCancellationByClient;
- (_Bool)_shouldInformDelegateOfFigCancellation;
- (id)_requestDictionary;
- (id)_weakReference;
- (void)dealloc;
- (id)initWithProtectionSpace:(id)arg1 proposedCredential:(id)arg2 previousFailureCount:(long long)arg3 failureResponse:(id)arg4 error:(id)arg5 sender:(id)arg6;
- (id)initWithAuthenticationChallenge:(id)arg1 sender:(id)arg2;
- (id)initWithAuthenticationChallenge:(id)arg1 sender:(id)arg2 requestDictionary:(id)arg3;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVUnreachableAssetInspectorLoader : AVAssetInspectorLoader
{
    int _figError;
    NSDictionary *_figErrorUserInfo;
}

- (Class)_classForTrackInspectors;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)initWithFigError:(int)arg1 userInfo:(id)arg2;

@end

@interface AVVideoCompositionCoreAnimationTool : NSObject
{
    AVVideoCompositionCoreAnimationToolInternal *_videoCompositionTool;
}

+ (id)videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:(id)arg1 inLayer:(id)arg2;
+ (id)videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:(id)arg1 inLayer:(id)arg2;
+ (id)videoCompositionCoreAnimationToolWithAdditionalLayer:(id)arg1 asTrackID:(int)arg2;
- (id)_postProcessingVideoLayers;
- (id)_postProcessingRootLayer;
- (_Bool)_hasPostProcessingLayers;
- (int)_auxiliaryTrackID;
- (id)_auxiliaryTrackLayer;
- (_Bool)_hasLayerAsAuxiliaryTrack;
- (void)finalize;
- (void)dealloc;
- (id)initWithMagicTrackID:(int)arg1 animationLayer:(id)arg2 videoLayers:(id)arg3;

@end

@interface AVVideoCompositionCoreAnimationToolInternal : NSObject
{
    CALayer *animationLayer;
    int auxiliaryTrackID;
    NSArray *postProcessingVideoLayers;
    long long way;
}

@end

@interface AVVideoCompositionInstructionInternal : NSObject
{
    CDStruct_e83c9415 timeRange;
    struct CGColor *backgroundColor;
    NSArray *layerInstructions;
    _Bool enablePostProcessing;
}

@end

@interface AVVideoCompositionInternal : NSObject
{
    unsigned long long changeSeed;
    NSString *builtInCompositorName;
    Class customCompositorClass;
    CDStruct_1b6d18a9 frameDuration;
    struct CGSize renderSize;
    float renderScale;
    NSArray *instructions;
    _Bool auxiliaryTrackLayerSetLast;
    AVVideoCompositionCoreAnimationTool *animationTool;
}

@end

@interface AVVideoCompositionLayerInstructionInternal : NSObject
{
    int trackID;
    NSMutableArray *transformRamps;
    NSMutableArray *opacityRamps;
    NSMutableArray *cropRectangleRamps;
}

@end

@interface AVVideoCompositionRenderContext : NSObject
{
    AVVideoCompositionRenderContextInternal *_internal;
}

+ (id)renderContextPropertiesFromFigCompositor:(struct OpaqueFigVideoCompositor *)arg1;
- (struct __CVBuffer *)newPixelBuffer;
@property(readonly, nonatomic) AVVideoComposition *videoComposition;
@property(readonly, nonatomic) _Bool highQualityRendering;
@property(readonly, nonatomic) CDStruct_1edcc8d7 edgeWidths;
@property(readonly, nonatomic) CDStruct_43f4b5b8 pixelAspectRatio;
@property(readonly, nonatomic) float renderScale;
@property(readonly, nonatomic) struct CGAffineTransform renderTransform;
@property(readonly, nonatomic) struct CGSize size;
- (void)dealloc;
- (void)finalize;
- (void)_willDeallocOrFinalize;
- (_Bool)isBufferYCbCr:(struct __CVBuffer *)arg1;
- (struct __CVPixelBufferPool *)pixelBufferPool;
- (_Bool)hasEqualPropertiesToFigVideoCompositor:(struct OpaqueFigVideoCompositor *)arg1;
- (id)initWithFigVideoCompositor:(struct OpaqueFigVideoCompositor *)arg1 clientRequiredPixelBufferAttributes:(id)arg2 videoComposition:(id)arg3 pixelBufferPool:(struct __CVPixelBufferPool *)arg4;

@end

@interface AVVideoCompositionRenderContextInternal : NSObject
{
    NSDictionary *_basisProperties;
    struct CGSize _size;
    struct CGAffineTransform _renderTransform;
    float _renderScale;
    CDStruct_43f4b5b8 _pixelAspectRatio;
    CDStruct_1edcc8d7 _edgeWidths;
    _Bool _highQualityRendering;
    NSDictionary *_clientRequiredPixelBufferAttributes;
    NSDictionary *_destinationDesiredPixelBufferAttributes;
    NSString *_destinationDesiredPixelBufferYCbCrMatrix;
    NSString *_destinationDesiredPixelBufferColorPrimaries;
    NSString *_destinationDesiredPixelBufferTransferFunction;
    int pixelFormatFamily;
    struct __CFDictionary *_pixelAspectRatioDict;
    struct __CFDictionary *_cleanApertureDict;
    CDStruct_79c71658 _destinationPixelBufferDimensions;
    NSObject<OS_dispatch_queue> *_pixelBufferPoolQ;
    struct __CVPixelBufferPool *_pixelBufferPool;
    AVVideoComposition *_videoComposition;
}

- (void)dealloc;
- (void)finalize;
- (void)_willDeallocOrFinalize;

@end

@interface AVVideoPerformanceMetrics : NSObject
{
    AVVideoPerformanceMetricsInternal *_performanceMetricsInternal;
}

@property(readonly, nonatomic) double totalFrameDelay;
@property(readonly, nonatomic) unsigned long long numberOfCorruptedVideoFrames;
@property(readonly, nonatomic) unsigned long long numberOfDroppedVideoFrames;
@property(readonly, nonatomic) unsigned long long totalNumberOfVideoFrames;
- (void)dealloc;
- (void)finalize;
- (id)initWithDictionary:(id)arg1;
- (id)init;

@end

@interface AVVideoPerformanceMetricsInternal : NSObject
{
    NSDictionary *_metricsDictionary;
}

@end

@interface AVWAVEOutputSettingsValidator : AVMediaFileOutputSettingsValidator
{
}

- (_Bool)validateAudioOutputSettings:(id)arg1 reason:(id *)arg2;
- (id)initWithFileType:(id)arg1;

@end

@interface AVWeakKeyValueObserverProxy : NSObject
{
    AVWeakReference *_weakReferenceToObserver;
}

- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)init;
- (id)initWithWeakReferenceToObserver:(id)arg1;

@end

@interface AVWeakReferencingDelegateStorage : NSObject <AVDelegateStorage>
{
    NSObject<OS_dispatch_queue> *_delegateReadWriteQueue;
    AVWeakReference *_weakReferenceToDelegate;
    NSObject<OS_dispatch_queue> *_delegateQueue;
}

+ (void)initialize;
- (void)invokeDelegateCallbackWithBlock:(CDUnknownBlockType)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)getRetainedDelegate:(id *)arg1 retainedDelegateQueue:(id *)arg2;
- (void)_setDelegate:(id)arg1;
- (id)_delegate;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property(readonly, nonatomic) id delegate;
- (void)finalize;
- (void)dealloc;
- (void)_collectUncollectables;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface CMTimeAsValue : NSValue
{
    CDStruct_1b6d18a9 _time;
}

+ (id)valueWithCMTime:(CDStruct_1b6d18a9)arg1;
- (id)description;
- (unsigned long long)unsignedIntegerValue;
- (long long)integerValue;
- (_Bool)boolValue;
- (unsigned long long)unsignedLongLongValue;
- (long long)longLongValue;
- (unsigned long long)unsignedLongValue;
- (long long)longValue;
- (unsigned int)unsignedIntValue;
- (int)intValue;
- (unsigned short)unsignedShortValue;
- (short)shortValue;
- (unsigned char)unsignedCharValue;
- (BOOL)charValue;
- (double)doubleValue;
- (float)floatValue;
- (const char *)objCType;
- (void)getValue:(void *)arg1;
- (CDStruct_1b6d18a9)CMTimeValue;

@end

@interface CMTimeMappingAsValue : NSValue
{
    CDStruct_82206317 _timeMapping;
}

+ (id)valueWithCMTimeMapping:(CDStruct_82206317)arg1;
- (id)description;
- (const char *)objCType;
- (void)getValue:(void *)arg1;
- (CDStruct_82206317)CMTimeMappingValue;

@end

@interface CMTimeRangeAsValue : NSValue
{
    CDStruct_e83c9415 _timeRange;
}

+ (id)valueWithCMTimeRange:(CDStruct_e83c9415)arg1;
- (id)description;
- (const char *)objCType;
- (void)getValue:(void *)arg1;
- (CDStruct_e83c9415)CMTimeRangeValue;

@end

@interface NSCoder (AVTimeCoding)
- (CDStruct_82206317)decodeCMTimeMappingForKey:(id)arg1;
- (void)encodeCMTimeMapping:(CDStruct_82206317)arg1 forKey:(id)arg2;
- (CDStruct_e83c9415)decodeCMTimeRangeForKey:(id)arg1;
- (void)encodeCMTimeRange:(CDStruct_e83c9415)arg1 forKey:(id)arg2;
- (CDStruct_1b6d18a9)decodeCMTimeForKey:(id)arg1;
- (void)encodeCMTime:(CDStruct_1b6d18a9)arg1 forKey:(id)arg2;
@end

@interface NSDictionary (AVCaptureSessionAdditions)
- (id)mutableDeepAutoreleasedCopy;
@end

@interface NSMutableDictionary (AVCaptureSessionPlistAdditions)
- (void)addEntriesFromDictionaryWithRecursion:(id)arg1;
@end

@interface NSValue (NSValueCMTimeExtensions)
+ (id)valueWithCMTimeMapping:(CDStruct_82206317)arg1;
+ (id)valueWithCMTimeRange:(CDStruct_e83c9415)arg1;
+ (id)valueWithCMTime:(CDStruct_1b6d18a9)arg1;
- (CDStruct_82206317)CMTimeMappingValue;
- (CDStruct_e83c9415)CMTimeRangeValue;
- (CDStruct_1b6d18a9)CMTimeValue;
@end

