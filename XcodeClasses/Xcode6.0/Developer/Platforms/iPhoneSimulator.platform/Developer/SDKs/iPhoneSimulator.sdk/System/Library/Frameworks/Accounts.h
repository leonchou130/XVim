//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/Accounts.framework/Accounts
// UUID: 6D812EEE-F08B-3162-825C-372714438852
//
//                           Arch: x86_64
//                Current version: 113.0.0
//          Compatibility version: 1.0.0
//                 Source version: 527.0.7.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ACAccountStoreProtocol <NSObject>
- (void)accountCredentialsDidChangeForAccountWithIdentifier:(NSString *)arg1;
@end

@protocol ACDAccountStoreProtocol <NSObject>
- (void)notifyRemoteDevicesOfModifiedAccount:(ACAccount *)arg1 withChangeType:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)notifyRemoteDevicesOfModifiedAccount:(ACAccount *)arg1 withChangeType:(NSString *)arg2;
- (void)openAuthenticationURL:(NSURL *)arg1 forAccount:(ACAccount *)arg2 shouldConfirm:(_Bool)arg3 completion:(void (^)(_Bool, NSError *))arg4;
- (void)clientTokenForAccountIdentifier:(NSString *)arg1 completion:(void (^)(NSString *, NSError *))arg2;
- (void)addClientToken:(NSString *)arg1 forAccountIdentifier:(NSString *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)handleURL:(NSURL *)arg1;
- (void)accountIdentifiersEnabledForDataclasses:(NSArray *)arg1 withAccountTypeIdentifiers:(NSArray *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)isPushSupportedForAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)tetheredSyncSourceTypeForDataclass:(NSString *)arg1 completion:(void (^)(NSString *, NSError *))arg2;
- (void)isTetheredSyncingEnabledForDataclass:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)renewCredentialsForAccount:(ACAccount *)arg1 options:(NSDictionary *)arg2 completion:(void (^)(NSNumber *, NSError *))arg3;
- (void)verifyCredentialsForAccount:(ACAccount *)arg1 saveWhenAuthorized:(_Bool)arg2 withHandler:(void (^)(ACAccount *, NSError *))arg3;
- (void)clearAllPermissionsGrantedForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(id, NSError *))arg2;
- (void)typeIdentifierForDomain:(NSString *)arg1 withHandler:(void (^)(NSString *, NSError *))arg2;
- (void)clearGrantedPermissionsForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSError *))arg2;
- (void)grantedPermissionsForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSSet *, NSError *))arg2;
- (void)permissionForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSNumber *, NSError *))arg2;
- (void)setPermissionGranted:(NSNumber *)arg1 forBundleID:(NSString *)arg2 onAccountType:(ACAccountType *)arg3 withHandler:(void (^)(id, NSError *))arg4;
- (void)appPermissionsForAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSDictionary *, NSError *))arg2;
- (void)requestAccessForAccountTypeWithIdentifier:(NSString *)arg1 options:(NSDictionary *)arg2 withHandler:(void (^)(NSNumber *, NSError *))arg3;
- (void)removeAccountType:(ACAccountType *)arg1 withHandler:(void (^)(NSNumber *, NSError *))arg2;
- (void)insertAccountType:(ACAccountType *)arg1 withHandler:(void (^)(ACAccountType *, NSError *))arg2;
- (void)updateExistenceCacheOfAccountWithTypeIdentifier:(NSString *)arg1 withHandler:(void (^)(NSNumber *, NSError *))arg2;
- (void)saveAccount:(ACAccount *)arg1 verify:(_Bool)arg2 dataclassActions:(NSDictionary *)arg3 completion:(void (^)(NSURL *, NSError *))arg4;
- (void)saveAccount:(ACAccount *)arg1 withHandler:(void (^)(NSURL *, NSError *))arg2;
- (void)canSaveAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)removeAccount:(ACAccount *)arg1 withDataclassActions:(NSDictionary *)arg2 completion:(void (^)(_Bool, NSError *))arg3;
- (void)accessKeysForAccountType:(ACAccountType *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)isPerformingDataclassActionsForAccount:(ACAccount *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)dataclassActionsForAccountDeletion:(ACAccount *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;
- (void)dataclassActionsForAccountSave:(ACAccount *)arg1 completion:(void (^)(NSDictionary *, NSError *))arg2;
- (void)syncableDataclassesForAccountType:(ACAccountType *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)supportedDataclassesForAccountType:(ACAccountType *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)dataclassesWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)provisionedDataclassesForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)enabledDataclassesForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(NSSet *, NSError *))arg2;
- (void)credentialForAccount:(ACAccount *)arg1 serviceID:(NSString *)arg2 handler:(void (^)(ACAccountCredential *, NSError *))arg3;
- (void)credentialForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccountCredential *, NSError *))arg2;
- (void)accountTypeWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccountType *, NSError *))arg2;
- (void)displayAccountTypeForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccountType *, NSError *))arg2;
- (void)childAccountsWithAccountTypeIdentifier:(NSString *)arg1 parentAccountIdentifier:(NSString *)arg2 handler:(void (^)(NSArray *, NSError *))arg3;
- (void)accountsWithAccountTypeIdentifiers:(NSArray *)arg1 preloadedProperties:(NSArray *)arg2 completion:(void (^)(NSArray *, NSError *))arg3;
- (void)visibleTopLevelAccountsWithAccountTypeIdentifiers:(NSArray *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)kerberosAccountsForDomainFromURL:(NSURL *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)accountExistsWithDescription:(NSString *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)accountIdentifiersEnabledForDataclass:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)accountIdentifiersEnabledToSyncDataclass:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)childAccountsForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)parentAccountForAccountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccount *, NSError *))arg2;
- (void)accountsWithAccountType:(ACAccountType *)arg1 handler:(void (^)(NSArray *, NSError *))arg2;
- (void)accountWithIdentifier:(NSString *)arg1 handler:(void (^)(ACAccount *, NSError *))arg2;
- (void)accountTypesWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)accountsWithHandler:(void (^)(NSArray *, NSError *))arg1;
- (void)setNotificationsEnabled:(_Bool)arg1;
- (void)setClientBundleID:(NSString *)arg1 withHandler:(void (^)(_Bool, NSError *))arg2;
@end

@protocol ACDOAuthSignerProtocol <NSObject>
- (void)setClientBundleID:(NSString *)arg1 withHandler:(void (^)(_Bool, NSError *))arg2;
- (void)signURLRequest:(NSURLRequest *)arg1 withAccount:(ACAccount *)arg2 applicationID:(NSString *)arg3 timestamp:(NSDate *)arg4 handler:(void (^)(NSURLRequest *, NSError *))arg5;
- (void)signURLRequest:(NSURLRequest *)arg1 withAccount:(ACAccount *)arg2 callingPID:(NSNumber *)arg3 timestamp:(NSDate *)arg4 handler:(void (^)(NSURLRequest *, NSError *))arg5;
- (void)setShouldIncludeAppIdInRequest:(_Bool)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCProxyCreating
- (id)remoteObjectProxyWithErrorHandler:(void (^)(NSError *))arg1;
- (id)remoteObjectProxy;
@end

@interface ACAccount : NSObject <NSSecureCoding>
{
    ACAccountStore *_store;
    NSString *_identifier;
    NSString *_accountDescription;
    NSString *_owningBundleID;
    NSString *_username;
    NSString *_authenticationType;
    NSString *_credentialType;
    NSString *_clientToken;
    _Bool _haveCheckedForClientToken;
    ACAccountType *_accountType;
    ACAccountCredential *_credential;
    NSMutableDictionary *_properties;
    NSMutableDictionary *_dataclassProperties;
    _Bool _accountAccessAvailable;
    _Bool _authenticated;
    _Bool _active;
    _Bool _supportsAuthentication;
    _Bool _visible;
    NSURL *_objectID;
    NSDate *_date;
    NSDate *_lastCredentialRenewalRejectionDate;
    ACAccount *_parentAccount;
    _Bool _haveCheckedForParentAccount;
    NSString *_parentAccountIdentifier;
    _Bool _haveCheckedForChildAccounts;
    NSArray *_childAccounts;
    NSMutableSet *_enabledDataclasses;
    NSMutableSet *_provisionedDataclasses;
    NSMutableSet *_dirtyProperties;
    NSMutableSet *_dirtyAccountProperties;
    id _credentialsDidChangeObserver;
    CDUnknownBlockType _accountPropertiesTransformer;
    _Bool _creatingFromManagedObject;
}

+ (id)_createNewAccountUID;
+ (_Bool)supportsSecureCoding;
@property(copy) CDUnknownBlockType accountPropertiesTransformer; // @synthesize accountPropertiesTransformer=_accountPropertiesTransformer;
@property(readonly, nonatomic) NSSet *dirtyAccountProperties; // @synthesize dirtyAccountProperties=_dirtyAccountProperties;
@property(readonly, nonatomic) NSSet *dirtyProperties; // @synthesize dirtyProperties=_dirtyProperties;
- (void).cxx_destruct;
- (id)diffAccount:(id)arg1;
@property(readonly, nonatomic) NSString *shortDebugName;
- (void)setCreatingFromManagedObject:(_Bool)arg1;
- (_Bool)addClientToken:(id)arg1;
@property(readonly, nonatomic) NSString *clientToken;
- (id)accountByCleaningThirdPartyTransformations;
- (void)_loadAllCachedProperties;
- (void)refresh;
- (void)reload;
- (void)takeValuesFromModifiedAccount:(id)arg1;
- (void)_setObjectID:(id)arg1;
@property(readonly, nonatomic) NSURL *objectID;
- (void)setProperties:(id)arg1 forDataclass:(id)arg2;
- (id)propertiesForDataclass:(id)arg1;
- (void)setDataclassProperties:(id)arg1;
@property(readonly, nonatomic) __weak NSDictionary *dataclassProperties;
- (_Bool)isProvisionedForDataclass:(id)arg1;
- (void)setEnabled:(_Bool)arg1 forDataclass:(id)arg2;
- (_Bool)isEnabledToSyncDataclass:(id)arg1;
- (id)enabledAndSyncableDataclasses;
- (_Bool)isEnabledForDataclass:(id)arg1;
@property(retain, nonatomic) NSMutableSet *enabledDataclasses;
@property(retain, nonatomic) NSMutableSet *provisionedDataclasses;
- (void)_clearCachedChildAccounts;
- (id)childAccountsWithAccountTypeIdentifier:(id)arg1;
@property(readonly, nonatomic) NSArray *childAccounts;
@property(readonly, nonatomic) __weak ACAccount *displayAccount;
@property(retain, nonatomic) ACAccount *parentAccount;
@property(readonly, nonatomic) NSString *parentAccountIdentifier;
@property(retain, nonatomic) ACAccountType *accountType;
@property(readonly, nonatomic) ACAccountStore *accountStore;
- (void)_setAccountStore:(id)arg1;
@property(readonly, nonatomic) _Bool supportsPush;
@property(nonatomic) _Bool supportsAuthentication;
@property(nonatomic, getter=isVisible) _Bool visible;
@property(nonatomic, getter=isActive) _Bool active;
@property(retain, nonatomic) NSDate *lastCredentialRenewalRejectionDate;
@property(nonatomic, getter=isAuthenticated) _Bool authenticated;
- (_Bool)authenticated;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)setAccountProperty:(id)arg1 forKey:(id)arg2;
- (id)accountPropertyForKey:(id)arg1;
- (void)setProperty:(id)arg1 forKey:(id)arg2;
- (id)propertyForKey:(id)arg1;
- (void)setAccountProperties:(id)arg1;
@property(readonly, nonatomic) __weak NSDictionary *accountProperties;
@property(retain, nonatomic) NSDate *creationDate;
- (void)setOwningBundleID:(id)arg1;
- (id)owningBundleID;
@property(copy, nonatomic) NSString *accountDescription;
@property(retain, nonatomic) ACAccountCredential *credential;
- (id)credentialWithError:(id *)arg1;
@property(readonly, nonatomic) NSString *userFullName;
@property(copy, nonatomic) NSString *username;
- (void)setCredentialType:(id)arg1;
@property(readonly, nonatomic) NSString *credentialType;
- (void)setAuthenticationType:(id)arg1;
@property(readonly, nonatomic) NSString *authenticationType;
- (void)setIdentifier:(id)arg1;
@property(readonly, nonatomic) __weak NSString *identifier;
- (void)_clearDirtyProperties;
- (void)_markCredentialDirty;
- (void)_markAccountPropertyDirty:(id)arg1;
- (void)_markPropertyDirty:(id)arg1;
- (_Bool)_useParentForCredentials;
- (void)markAllPropertiesDirty;
- (_Bool)isPropertyDirty:(id)arg1;
@property(readonly, nonatomic, getter=isDirty) _Bool dirty;
- (void)credentialsChanged:(id)arg1;
- (void)_clearCachedCredentials;
- (id)fullDescription;
- (id)description;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_installCredentialsChangedObserver;
- (id)initWithCoder:(id)arg1;
- (id)_initWithManagedAccount:(id)arg1 accountStore:(id)arg2 withDirtyStateFromAccount:(id)arg3;
- (id)initWithManagedAccount:(id)arg1;
- (id)initWithManagedAccount:(id)arg1 accountStore:(id)arg2;
- (id)initWithAccountType:(id)arg1;

@end

@interface ACAccountCredential : NSObject <NSSecureCoding>
{
    NSMutableDictionary *_credentialItems;
    NSString *_credentialType;
    NSMutableSet *_dirtyProperties;
    ACAccount *_owningAccount;
    _Bool _dirty;
    _Bool _empty;
}

+ (id)credentialPolicyForAccountType:(id)arg1 key:(id)arg2 clientID:(id)arg3;
+ (id)nonPersistentKeysForAccountTypeIdentifier:(id)arg1 credentialType:(id)arg2;
+ (id)supportedKeysForAccountTypeIdentifier:(id)arg1 credentialType:(id)arg2;
+ (id)credentialWithPassword:(id)arg1;
+ (id)credentialWithOAuthToken:(id)arg1 tokenSecret:(id)arg2;
+ (_Bool)supportsSecureCoding;
@property(nonatomic, getter=isEmpty) _Bool empty; // @synthesize empty=_empty;
@property(nonatomic, getter=isDirty) _Bool dirty; // @synthesize dirty=_dirty;
@property(readonly, nonatomic) NSSet *dirtyProperties; // @synthesize dirtyProperties=_dirtyProperties;
- (void).cxx_destruct;
@property(copy, nonatomic) NSString *credentialType;
@property(copy, nonatomic) NSDate *tokenExpiryDate;
@property(copy, nonatomic) NSString *hsaToken;
@property(copy, nonatomic) NSString *mapsToken;
@property(copy, nonatomic) NSString *findMyiPhoneToken;
@property(copy, nonatomic) NSString *password;
@property(retain, nonatomic) NSDate *expiryDate;
@property(copy, nonatomic) NSString *oauthRefreshToken;
- (id)oauthTokenNoSync;
- (void)setOauthTokenNoSync:(id)arg1;
@property(copy, nonatomic) NSString *oauthTokenSecret;
@property(copy, nonatomic) NSString *oauthToken;
@property(copy, nonatomic) NSString *token;
- (void)setCredentialItem:(id)arg1 forKey:(id)arg2;
- (id)credentialItemForKey:(id)arg1;
- (id)keysForCredentialItems;
- (id)credentialItems;
- (void)_clearDirtyProperties;
- (void)_markPropertyDirty:(id)arg1;
- (void)_setOwningAccount:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithPassword:(id)arg1;
- (id)initWithOAuthToken:(id)arg1 tokenSecret:(id)arg2;
- (id)initWithOAuth2Token:(id)arg1 refreshToken:(id)arg2 expiryDate:(id)arg3;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

@interface ACAccountMigrationLock : CPExclusiveLock
{
}

+ (_Bool)migrationFinished;
+ (void)writeMigrationVersionPref;
+ (void)signalMigrationFinished;
+ (id)_currentSystemVersion;
+ (id)createAccountMigrationLock;

@end

@interface ACAccountStore : NSObject
{
    NSString *_clientBundleID;
    NSObject<OS_dispatch_queue> *_replyQueue;
    id _daemonAccountStoreDidChangeObserver;
    ACRemoteAccountStoreSession *_remoteAccountStoreSession;
}

+ (_Bool)canSaveAccountsOfAccountTypeIdentifier:(id)arg1;
+ (long long)countOfAccountsWithAccountTypeIdentifier:(id)arg1;
+ (int)accountsWithAccountTypeIdentifierExist:(id)arg1;
@property(retain, nonatomic) ACRemoteAccountStoreSession *remoteAccountStoreSession; // @synthesize remoteAccountStoreSession=_remoteAccountStoreSession;
@property(readonly) NSString *effectiveBundleID; // @synthesize effectiveBundleID=_clientBundleID;
- (void).cxx_destruct;
- (void)notifyRemoteDevicesOfNewAccount:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)notifyRemoteDevicesOfNewAccount:(id)arg1;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)arg1;
- (void)accountsWithAccountTypeIdentifiers:(id)arg1 preloadedProperties:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)accountsWithAccountTypeIdentifiers:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)visibleTopLevelAccountsWithAccountTypeIdentifiers:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)openAuthenticationURL:(id)arg1 forAccount:(id)arg2 shouldConfirm:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (_Bool)addClientToken:(id)arg1 forAccount:(id)arg2;
- (id)clientTokenForAccount:(id)arg1;
- (void)handleURL:(id)arg1;
- (int)updateExistenceCacheOfAccountWithTypeIdentifier:(id)arg1;
- (void)accountWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)accountIdentifiersEnabledForDataclasses:(id)arg1 withAccountTypeIdentifiers:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)isPushSupportedForAccount:(id)arg1;
- (void)kerberosAccountsForDomainFromURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)tetheredSyncSourceTypeForDataclass:(id)arg1;
- (_Bool)isTetheredSyncingEnabledForDataclass:(id)arg1;
- (_Bool)hasAccountWithDescription:(id)arg1;
- (_Bool)isPerformingDataclassActionsForAccount:(id)arg1;
- (id)dataclassActionsForAccountDeletion:(id)arg1;
- (id)dataclassActionsForAccountSave:(id)arg1;
- (id)accountIdentifiersEnabledToSyncDataclass:(id)arg1;
- (id)accountIdentifiersEnabledForDataclass:(id)arg1;
- (id)displayTypeForAccountWithIdentifier:(id)arg1;
- (id)typeIdentifierForDomain:(id)arg1;
- (void)clearGrantedPermissionsForAccountType:(id)arg1;
- (id)grantedPermissionsForAccountType:(id)arg1;
- (_Bool)permissionForAccountType:(id)arg1;
- (void)clearAllPermissionsGrantedForAccountType:(id)arg1;
- (void)setPermissionGranted:(_Bool)arg1 forBundleID:(id)arg2 onAccountType:(id)arg3;
- (id)appPermissionsForAccountType:(id)arg1;
- (void)setNotificationsEnabled:(_Bool)arg1;
- (id)accessKeysForAccountType:(id)arg1;
- (id)syncableDataclassesForAccountType:(id)arg1;
- (id)supportedDataclassesForAccountType:(id)arg1;
- (id)provisionedDataclassesForAccount:(id)arg1;
- (id)enabledDataclassesForAccount:(id)arg1;
- (id)childAccountsForAccount:(id)arg1 withTypeIdentifier:(id)arg2;
- (id)childAccountsForAccount:(id)arg1;
- (id)parentAccountForAccount:(id)arg1;
- (id)credentialForAccount:(id)arg1 bundleID:(id)arg2;
- (id)credentialForAccount:(id)arg1 serviceID:(id)arg2;
- (id)credentialForAccount:(id)arg1 error:(id *)arg2;
- (id)credentialForAccount:(id)arg1;
- (id)allDataclasses;
- (id)allAccountTypes;
- (void)renewCredentialsForAccount:(id)arg1 services:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)renewCredentialsForAccount:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)renewCredentialsForAccount:(id)arg1 reason:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)renewCredentialsForAccount:(id)arg1 force:(_Bool)arg2 reason:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)renewCredentialsForAccount:(id)arg1 options:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)verifyCredentialsForAccount:(id)arg1 saveWhenAuthorized:(_Bool)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)verifyCredentialsForAccount:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)requestAccessToAccountsWithType:(id)arg1 options:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestAccessToAccountsWithType:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)saveAccount:(id)arg1 withDataclassActions:(id)arg2 doVerify:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (void)saveAccount:(id)arg1 withDataclassActions:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_saveAccount:(id)arg1 verify:(_Bool)arg2 dataclassActions:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)saveVerifiedAccount:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)saveAccount:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)canSaveAccount:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)removeAccount:(id)arg1 withDataclassActions:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)removeAccount:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)removeAccountType:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)insertAccountType:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)accountsWithAccountType:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)accountsWithAccountType:(id)arg1;
@property(readonly, nonatomic) __weak NSArray *accounts;
- (void)accountTypeWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)accountTypeWithAccountTypeIdentifier:(id)arg1;
- (id)accountWithIdentifier:(id)arg1;
- (void)disconnectFromRemoteAccountStore;
- (void)connectToRemoteAccountStoreUsingEndpoint:(id)arg1;
- (void)dealloc;
- (id)initWithRemoteEndpoint:(id)arg1 effectiveBundleID:(id)arg2;
- (id)initWithEffectiveBundleID:(id)arg1;
- (id)initWithRemoteEndpoint:(id)arg1;
- (id)init;

@end

@interface ACAccountStoreClientSideListener : NSObject <ACAccountStoreProtocol>
{
}

+ (id)sharedClientSideListener;
- (void)accountCredentialsDidChangeForAccountWithIdentifier:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface ACAccountType : NSObject <NSSecureCoding>
{
    NSString *_accountTypeDescription;
    NSString *_identifier;
    NSString *_credentialType;
    NSURL *_objectID;
    int _visibility;
    NSString *_credentialProtectionPolicy;
    ACAccountStore *_accountStore;
    int _supportsAuthentication;
    _Bool _supportsMultipleAccounts;
    NSSet *_supportedDataclasses;
    NSSet *_syncableDataclasses;
    NSSet *_accessKeys;
    _Bool _encryptAccountProperties;
    NSString *_owningBundleID;
    NSString *_owningTeamID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *owningTeamID; // @synthesize owningTeamID=_owningTeamID;
@property(retain, nonatomic) NSString *owningBundleID; // @synthesize owningBundleID=_owningBundleID;
@property(nonatomic) _Bool supportsMultipleAccounts; // @synthesize supportsMultipleAccounts=_supportsMultipleAccounts;
@property(nonatomic) __weak ACAccountStore *accountStore; // @synthesize accountStore=_accountStore;
- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool encryptAccountProperties; // @synthesize encryptAccountProperties=_encryptAccountProperties;
@property(readonly, nonatomic) NSSet *accessKeys; // @synthesize accessKeys=_accessKeys;
@property(nonatomic) int supportsAuthentication; // @synthesize supportsAuthentication=_supportsAuthentication;
@property(readonly, nonatomic) _Bool accessGranted;
@property(copy, nonatomic) id credentialProtectionPolicy;
@property(nonatomic) int visibility;
@property(retain, nonatomic) NSString *credentialType; // @synthesize credentialType=_credentialType;
@property(retain, nonatomic) NSURL *objectID; // @synthesize objectID=_objectID;
- (void)setAccountTypeDescription:(id)arg1;
@property(readonly, nonatomic) NSString *accountTypeDescription; // @synthesize accountTypeDescription=_accountTypeDescription;
- (void)setIdentifier:(id)arg1;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly, nonatomic) NSSet *syncableDataclasses; // @synthesize syncableDataclasses=_syncableDataclasses;
@property(readonly, nonatomic) NSSet *supportedDataclasses; // @synthesize supportedDataclasses=_supportedDataclasses;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) NSString *fullDescription;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithManagedAccountType:(id)arg1;
- (id)initWithManagedAccountType:(id)arg1 accountStore:(id)arg2;
- (id)initWithIdentifier:(id)arg1 description:(id)arg2;

@end

@interface ACDAccountStoreInterface : NSObject
{
}

+ (id)_buildXPCInterface;
+ (id)XPCInterface;

@end

__attribute__((visibility("hidden")))
@interface ACDManagedAccessOptionsKey : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSSet *owningAccountTypes; // @dynamic owningAccountTypes;
@end

__attribute__((visibility("hidden")))
@interface ACDManagedAccount : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSString *accountDescription; // @dynamic accountDescription;
@property(retain, nonatomic) ACDManagedAccountType *accountType; // @dynamic accountType;
@property(retain, nonatomic) NSNumber *active; // @dynamic active;
@property(retain, nonatomic) NSNumber *authenticated; // @dynamic authenticated;
@property(retain, nonatomic) NSString *authenticationType; // @dynamic authenticationType;
@property(retain, nonatomic) NSSet *childAccounts; // @dynamic childAccounts;
@property(retain, nonatomic) NSString *credentialType; // @dynamic credentialType;
@property(retain, nonatomic) NSSet *customProperties; // @dynamic customProperties;
@property(retain, nonatomic) id dataclassProperties; // @dynamic dataclassProperties;
@property(retain, nonatomic) NSDate *date; // @dynamic date;
@property(retain, nonatomic) NSSet *enabledDataclasses; // @dynamic enabledDataclasses;
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSDate *lastCredentialRenewalRejectionDate; // @dynamic lastCredentialRenewalRejectionDate;
@property(retain, nonatomic) NSString *owningBundleID; // @dynamic owningBundleID;
@property(retain, nonatomic) ACDManagedAccount *parentAccount; // @dynamic parentAccount;
@property(retain, nonatomic) NSSet *provisionedDataclasses; // @dynamic provisionedDataclasses;
@property(retain, nonatomic) NSNumber *supportsAuthentication; // @dynamic supportsAuthentication;
@property(retain, nonatomic) NSString *username; // @dynamic username;
@property(retain, nonatomic) NSNumber *visible; // @dynamic visible;
@end

__attribute__((visibility("hidden")))
@interface ACDManagedAccountProperty : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSString *key; // @dynamic key;
@property(retain, nonatomic) ACDManagedAccount *owner; // @dynamic owner;
@property(retain, nonatomic) id value; // @dynamic value;
@end

__attribute__((visibility("hidden")))
@interface ACDManagedAccountType : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSSet *accessKeys; // @dynamic accessKeys;
@property(retain, nonatomic) NSString *accountTypeDescription; // @dynamic accountTypeDescription;
@property(retain, nonatomic) NSSet *accounts; // @dynamic accounts;
@property(retain, nonatomic) NSString *credentialProtectionPolicy; // @dynamic credentialProtectionPolicy;
@property(retain, nonatomic) NSString *credentialType; // @dynamic credentialType;
@property(retain, nonatomic) NSNumber *encryptAccountProperties; // @dynamic encryptAccountProperties;
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSString *owningBundleID; // @dynamic owningBundleID;
@property(retain, nonatomic) NSSet *permission; // @dynamic permission;
@property(retain, nonatomic) NSSet *supportedDataclasses; // @dynamic supportedDataclasses;
@property(retain, nonatomic) NSNumber *supportsAuthentication; // @dynamic supportsAuthentication;
@property(retain, nonatomic) NSNumber *supportsMultipleAccounts; // @dynamic supportsMultipleAccounts;
@property(retain, nonatomic) NSSet *syncableDataclasses; // @dynamic syncableDataclasses;
@property(retain, nonatomic) NSNumber *visibility; // @dynamic visibility;
@end

__attribute__((visibility("hidden")))
@interface ACDManagedAuthorization : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) ACDManagedAccountType *accountType; // @dynamic accountType;
@property(retain, nonatomic) NSString *bundleID; // @dynamic bundleID;
@property(retain, nonatomic) NSString *grantedPermissions; // @dynamic grantedPermissions;
@property(retain, nonatomic) id options; // @dynamic options;
@end

__attribute__((visibility("hidden")))
@interface ACDManagedDataclass : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSSet *enabledAccounts; // @dynamic enabledAccounts;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSSet *provisionedAccounts; // @dynamic provisionedAccounts;
@property(retain, nonatomic) NSSet *supportedTypes; // @dynamic supportedTypes;
@property(retain, nonatomic) NSSet *syncableTypes; // @dynamic syncableTypes;
@end

@interface ACDPropertyEncryption : NSObject
{
}

+ (id)_decryptableDataForStoredProperty:(id)arg1;
+ (id)decryptProperty:(id)arg1;
+ (id)encryptProperty:(id)arg1;
+ (struct __SecKey *)accountPropertyCryptoKeyCreatingIfNecessary:(_Bool)arg1;

@end

@interface ACDataclassAction : NSObject <NSSecureCoding>
{
    _Bool _isDestructive;
    long long _type;
}

+ (id)destructiveActionWithType:(long long)arg1;
+ (id)actionWithType:(long long)arg1;
+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) _Bool isDestructive; // @synthesize isDestructive=_isDestructive;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1 destructivity:(_Bool)arg2;

@end

__attribute__((visibility("hidden")))
@interface ACDispatchCerberus : NSObject
{
}

+ (void)waitOnSemaphore:(id)arg1 withTimeout:(unsigned long long)arg2;

@end

@interface ACManagedDefaults : NSObject
{
}

+ (id)sharedInstance;
- (void)setValue:(id)arg1 forManagedDefault:(id)arg2;
- (id)valueForManagedDefault:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface ACNotificationRebroadcaster : NSObject
{
}

+ (id)sharedRebroadcaster;

@end

@interface ACOAuthSigner : NSObject
{
    NSXPCConnection *_connection;
    ACAccount *_account;
    id <ACDOAuthSignerProtocol> _proxyShim;
    _Bool _shouldIncludeAppIdInRequest;
}

@property(nonatomic) _Bool shouldIncludeAppIdInRequest; // @synthesize shouldIncludeAppIdInRequest=_shouldIncludeAppIdInRequest;
- (void).cxx_destruct;
- (void)disconnectFromRemoteOAuthSigner;
- (void)_connectToRemoteOAuthSignerUsingEndpoint:(id)arg1;
- (id)signedURLRequestWithURLRequest:(id)arg1;
- (id)signedURLRequestWithURLRequest:(id)arg1 applicationID:(id)arg2 timestamp:(id)arg3;
- (id)signedURLRequestWithURLRequest:(id)arg1 callingPID:(id)arg2 timestamp:(id)arg3;
- (void)dealloc;
- (id)initWithAccount:(id)arg1 remoteEndpoint:(id)arg2;
- (id)initWithAccount:(id)arg1;

@end

@interface ACRemoteAccountStoreSession : NSObject <NSXPCProxyCreating>
{
    NSXPCConnection *_connection;
    _Bool _hasConfiguredRemoteAccountStore;
    _Bool _notificationsEnabled;
    NSString *_spoofedBundleID;
}

@property(nonatomic) _Bool notificationsEnabled; // @synthesize notificationsEnabled=_notificationsEnabled;
@property(copy, nonatomic) NSString *spoofedBundleID; // @synthesize spoofedBundleID=_spoofedBundleID;
- (void).cxx_destruct;
- (void)disconnect;
- (void)connect;
- (void)_configureRemoteAccountStoreIfNecessary;
- (id)remoteObjectProxy;
- (id)remoteObjectProxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)initWithXPCConnection:(id)arg1;

@end

@interface ACSystemConfigManager : NSObject
{
    NSObject<OS_dispatch_queue> *_timerQueue;
    NSObject<OS_dispatch_source> *_timerSource;
    NSObject<OS_dispatch_queue> *_preferencesQueue;
    struct __SCPreferences *_preferencesSession;
    int _applySkipCount;
}

+ (unsigned long long)_timeoutInterval;
+ (id)_livingInstance;
+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)_setValue:(void *)arg1 forKey:(id)arg2;
- (void *)_getValueForKey:(id)arg1;
- (void)_handleSCPreferencesSessionNotification:(unsigned int)arg1;
- (void)_destroySCPreferencesSession;
- (void)_createSCPreferencesSession;
- (void)setCountOfAccounts:(long long)arg1 withAccountTypeIdentifier:(id)arg2;
- (long long)countOfAccountsWithAccountTypeIdentifier:(id)arg1;
- (void)setAccountsWithAccountTypeIdentifier:(id)arg1 exist:(_Bool)arg2;
- (int)accountsWithAccountTypeIdentifierExist:(id)arg1;
- (void)_tearDown;
- (void)_keepAlive;
- (void)dealloc;
- (id)init;

@end

@interface NSError (Accounts)
- (id)ac_secureCodingError;
@end

@interface NSManagedObject (Accounts)
- (_Bool)validateRequiredAttributesForObject:(id)arg1 error:(id *)arg2;
- (void)setValuesWithObject:(id)arg1;
- (id)_removeObsoleteKeysFromDictionary:(id)arg1;
- (id)_obsoleteAttributes;
- (void)encodeWithCoder:(id)arg1;
@end

