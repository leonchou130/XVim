//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/VisualAlert.framework/VisualAlert
// UUID: 51F4F3F3-69F4-32D0-AA47-BBC8D4F098FD
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1541.4.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@interface AXNotificationHandler : NSObject
{
    NSString *_notificationName;
    id _target;
    CDUnknownBlockType _dispatcher;
    unsigned long long _observerIdentifier;
    _Bool _valid;
}

+ (id)_safelyGetObserverForIdentifier:(unsigned long long)arg1;
+ (void)_safelyRemoveObserverForIdentifier:(unsigned long long)arg1;
+ (unsigned long long)_safelyRegisterObserver:(id)arg1;
@property(retain, nonatomic, setter=_setTarget:) id _target; // @synthesize _target;
@property(retain, nonatomic, setter=_setNotificationName:) NSString *_notificationName; // @synthesize _notificationName;
@property(readonly, nonatomic, getter=isValid) _Bool valid; // @synthesize valid=_valid;
- (void)_handleNotificationWithName:(id)arg1 object:(const void *)arg2 userInfo:(id)arg3;
- (void)processHandler:(SEL)arg1;
- (void)_stopObserving;
- (void)_startObserving;
- (void)invalidate;
- (id)_notificationTypeDescription;
- (id)description;
@property(copy, nonatomic, setter=_setDispatcher:) CDUnknownBlockType _dispatcher;
- (void)dealloc;
- (id)initWithNotificationName:(id)arg1 target:(id)arg2 dispatcher:(CDUnknownBlockType)arg3 startObserving:(_Bool)arg4;
- (id)initWithNotificationName:(id)arg1 target:(id)arg2 dispatcher:(CDUnknownBlockType)arg3;
- (id)initWithNotificationName:(id)arg1 target:(id)arg2 handler:(SEL)arg3;

@end

@interface AXLocalNotificationHandler : AXNotificationHandler
{
    id _opaqueObserver;
}

@property(retain, nonatomic, setter=_setOpaqueObserver:) id _opaqueObserver; // @synthesize _opaqueObserver;
- (id)_notificationTypeDescription;
- (void)_stopObserving;
- (void)_startObserving;
- (void)_stopObservingWithObject:(id)arg1;
- (void)_startObservingWithObject:(id)arg1;

@end

@interface AXAutoForwardingLocalNotificationHandler : AXLocalNotificationHandler
{
    SEL *_possibleHandlers;
    unsigned long long _possibleHandlersCount;
}

- (id)_notificationTypeDescription;
- (void)_stopObserving;
- (void)_startObserving;
- (_Bool)_handleForwardDistributedNotificationWithName:(id)arg1 object:(const void *)arg2 userInfo:(id)arg3;
- (id)_forwardDistributedNotificationNameForHandler:(SEL)arg1;
- (id)_prefixForForwardDistributedNotificationName;
- (void)processHandler:(SEL)arg1;
- (void)dealloc;
- (id)initWithNotificationName:(id)arg1 target:(id)arg2 dispatcher:(CDUnknownBlockType)arg3 possibleHandlers:(SEL)arg4;
- (id)initWithNotificationName:(id)arg1 target:(id)arg2 dispatcher:(CDUnknownBlockType)arg3 startObserving:(_Bool)arg4;
- (id)initWithNotificationName:(id)arg1 target:(id)arg2 handler:(SEL)arg3;

@end

@interface AXDistributedNotificationHandler : AXNotificationHandler
{
}

+ (void)postDistributedNotificationWithName:(id)arg1;
- (id)_notificationTypeDescription;
- (void)_stopObserving;
- (void)_startObserving;

@end

@interface AXTelephonyNotificationHandler : AXNotificationHandler
{
}

- (id)_notificationTypeDescription;
- (void)_stopObserving;
- (void)_startObserving;

@end

@interface AXVisualAlertManager : NSObject
{
    unsigned long long _alertTypes;
    id <AXCameraTorchManager> _cameraTorchManager;
    AXTimer *_timer;
    AXTimer *_torchForceShutdownTimer;
    NSDictionary *_patterns;
    NSDictionary *_activePattern;
    unsigned long long _activePatternCursor;
    _Bool _shouldRepeatPattern;
    NSDictionary *_patternToUseForVisualAlertAfterCaptureSessionStopsRunning;
    NSArray *_notificationHandlers;
    AXNotificationHandler *_deviceLockStateChangedNotificationHandler;
    AXNotificationHandler *_torchInControlCenterWasEnabledNotificationHandler;
    _Bool _torchDeviceOpen;
    _Bool _torchDeviceOn;
    _Bool _isDeviceLocked;
    _Bool _isQuietModeEnabled;
    _Bool _isTorchEnabledInControlCenter;
    _Bool _captureSessionRunning;
    _Bool _videoConferenceCallRinging;
    _Bool _skipAutomaticStopOnUserInteraction;
    NSMutableArray *_bulletins;
}

+ (id)sharedVisualAlertManager;
- (void)stop;
- (void)startForAlertTypes:(unsigned long long)arg1 cameraTorchManager:(id)arg2;

@end

