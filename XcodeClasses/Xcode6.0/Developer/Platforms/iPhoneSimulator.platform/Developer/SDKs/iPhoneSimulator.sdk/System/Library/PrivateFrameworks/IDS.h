//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/IDS.framework/IDS
// UUID: 1293A676-770E-3FBB-A43A-7430D1DB4A5E
//
//                           Arch: x86_64
//                Current version: 800.0.0
//          Compatibility version: 1.0.0
//                 Source version: 530.6.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol IDSAccountControllerDelegate <NSObject>

@optional
- (void)accountController:(IDSAccountController *)arg1 accountDisabled:(IDSAccount *)arg2;
- (void)accountController:(IDSAccountController *)arg1 accountEnabled:(IDSAccount *)arg2;
- (void)accountController:(IDSAccountController *)arg1 accountRemoved:(IDSAccount *)arg2;
- (void)accountController:(IDSAccountController *)arg1 accountUpdated:(IDSAccount *)arg2;
- (void)accountController:(IDSAccountController *)arg1 accountAdded:(IDSAccount *)arg2;
@end

@protocol IDSAccountDelegate <NSObject>

@optional
- (void)account:(IDSAccount *)arg1 nearbyDevicesChanged:(NSArray *)arg2;
- (void)account:(IDSAccount *)arg1 devicesChanged:(NSArray *)arg2;
- (void)account:(IDSAccount *)arg1 isActiveChanged:(_Bool)arg2;
@end

@protocol IDSBaseSocketPairConnectionDelegate <NSObject>

@optional
- (void)connectionDidClose:(IDSBaseSocketPairConnection *)arg1;
- (void)connection:(IDSBaseSocketPairConnection *)arg1 didReceiveData:(NSData *)arg2;
@end

@protocol IDSConnectionDelegate <NSObject>

@optional
- (void)connection:(IDSConnection *)arg1 incomingMessage:(NSDictionary *)arg2 fromID:(NSString *)arg3;
- (void)connection:(IDSConnection *)arg1 identifier:(NSString *)arg2 hasBeenDeliveredWithContext:(id)arg3;
- (void)connection:(IDSConnection *)arg1 identifier:(NSString *)arg2 didSendWithSuccess:(_Bool)arg3 error:(NSError *)arg4;
- (void)connection:(IDSConnection *)arg1 nearbyDevicesChanged:(NSArray *)arg2;
- (void)connection:(IDSConnection *)arg1 devicesChanged:(NSArray *)arg2;
- (void)connection:(IDSConnection *)arg1 isActiveChanged:(_Bool)arg2;
- (void)connection:(IDSConnection *)arg1 incomingProtobuf:(IDSProtobuf *)arg2 fromID:(NSString *)arg3 context:(IDSMessageContext *)arg4;
- (void)connection:(IDSConnection *)arg1 incomingData:(NSData *)arg2 fromID:(NSString *)arg3 context:(IDSMessageContext *)arg4;
- (void)connection:(IDSConnection *)arg1 incomingMessage:(NSDictionary *)arg2 fromID:(NSString *)arg3 context:(IDSMessageContext *)arg4;
@end

@protocol IDSConnectionDelegatePrivate <IDSConnectionDelegate>

@optional
- (void)connection:(IDSConnection *)arg1 account:(IDSAccount *)arg2 sessionInviteReceived:(NSString *)arg3 fromID:(NSString *)arg4 transportType:(NSNumber *)arg5 options:(NSDictionary *)arg6 context:(NSData *)arg7;
- (void)connection:(IDSConnection *)arg1 incomingTopLevelMessage:(NSDictionary *)arg2 fromID:(NSString *)arg3 messageContext:(id)arg4;
- (void)connection:(IDSConnection *)arg1 identifier:(NSString *)arg2 alternateCallbackID:(NSString *)arg3 willSendToDestinations:(NSArray *)arg4 skippedDestinations:(NSArray *)arg5 registrationPropertyToDestinations:(NSDictionary *)arg6;
- (void)connection:(IDSConnection *)arg1 messageIdentifier:(NSString *)arg2 alternateCallbackID:(NSString *)arg3 updatedWithResponseCode:(long long)arg4 error:(NSError *)arg5 lastCall:(_Bool)arg6;
@end

@protocol IDSDaemonListenerProtocol <NSObject>

@optional
- (void)continuityDidDisconnectFromPeer:(NSString *)arg1 withError:(NSError *)arg2;
- (void)continuityDidConnectToPeer:(NSString *)arg1 withError:(NSError *)arg2;
- (void)continuityDidDiscoverPeerWithData:(NSData *)arg1 fromPeer:(NSString *)arg2;
- (void)continuityDidDiscoverType:(long long)arg1 withData:(NSData *)arg2 fromPeer:(NSString *)arg3;
- (void)continuityDidFailToStartScanningForType:(long long)arg1 withError:(NSError *)arg2;
- (void)continuityDidStopScanningForType:(long long)arg1;
- (void)continuityDidStartScanningForType:(long long)arg1;
- (void)continuityDidFailToStartAdvertisingOfType:(long long)arg1 withError:(NSError *)arg2;
- (void)continuityDidStopAdvertisingOfType:(long long)arg1;
- (void)continuityDidStartAdvertisingOfType:(long long)arg1;
- (void)continuityDidStopTrackingPeer:(NSString *)arg1 forType:(long long)arg2;
- (void)continuityDidStopTrackingPeer:(NSString *)arg1;
- (void)continuityDidStartTrackingPeer:(NSString *)arg1 forType:(long long)arg2 error:(NSError *)arg3;
- (void)continuityDidStartTrackingPeer:(NSString *)arg1 error:(NSError *)arg2;
- (void)continuityDidLosePeer:(NSString *)arg1 forType:(long long)arg2;
- (void)continuityDidLosePeer:(NSString *)arg1;
- (void)continuityDidUpdateState:(long long)arg1;
- (void)device:(NSString *)arg1 pairingAdded:(_Bool)arg2;
- (void)device:(NSString *)arg1 pairingDeleted:(_Bool)arg2;
- (void)device:(NSString *)arg1 nsuuidChanged:(NSString *)arg2;
- (void)pairedDeviceInfo:(NSDictionary *)arg1;
- (void)localDeviceInfo:(NSDictionary *)arg1;
- (void)xpcObject:(NSObject<OS_xpc_object> *)arg1 objectContext:(NSDictionary *)arg2;
- (void)openedSocket:(NSObject<OS_xpc_object> *)arg1 forHandlerID:(NSString *)arg2 error:(NSError *)arg3;
- (void)session:(NSString *)arg1 audioEnabled:(_Bool)arg2;
- (void)sessionEnded:(NSString *)arg1 withReason:(unsigned int)arg2 error:(NSError *)arg3;
- (void)sessionStarted:(NSString *)arg1;
- (void)sessionEndReceived:(NSString *)arg1 fromID:(NSString *)arg2 withData:(NSData *)arg3;
- (void)sessionMessageReceived:(NSString *)arg1 fromID:(NSString *)arg2 withData:(NSData *)arg3;
- (void)sessionCancelReceived:(NSString *)arg1 fromID:(NSString *)arg2 withData:(NSData *)arg3;
- (void)sessionDeclineReceived:(NSString *)arg1 fromID:(NSString *)arg2 withData:(NSData *)arg3;
- (void)sessionAcceptReceived:(NSString *)arg1 fromID:(NSString *)arg2 withData:(NSData *)arg3;
- (void)sessionInvitationReceivedWithPayload:(NSDictionary *)arg1 forTopic:(NSString *)arg2 sessionID:(NSString *)arg3 toIdentifier:(NSString *)arg4 fromID:(NSString *)arg5 transportType:(NSNumber *)arg6;
- (void)IDQueryCompletedWithFromURI:(NSString *)arg1 idStatusUpdates:(NSDictionary *)arg2 service:(NSString *)arg3 success:(_Bool)arg4 error:(NSError *)arg5;
- (void)account:(NSString *)arg1 localDeviceRemoved:(NSDictionary *)arg2;
- (void)account:(NSString *)arg1 localDeviceAdded:(NSDictionary *)arg2;
- (void)account:(NSString *)arg1 dependentDevicesUpdated:(NSArray *)arg2;
- (void)activeDevicesUpdatedForAccount:(NSString *)arg1;
- (void)refreshRegistrationForAccount:(NSString *)arg1;
- (void)registrationFailedForAccount:(NSString *)arg1 needsDeletion:(NSNumber *)arg2;
- (void)account:(NSString *)arg1 displayNameChanged:(NSString *)arg2;
- (void)account:(NSString *)arg1 loginChanged:(NSString *)arg2;
- (void)account:(NSString *)arg1 profileChanged:(NSDictionary *)arg2;
- (void)account:(NSString *)arg1 vettedAliasesChanged:(NSDictionary *)arg2;
- (void)account:(NSString *)arg1 aliasesChanged:(NSDictionary *)arg2;
- (void)account:(NSString *)arg1 registrationStatusInfoChanged:(NSDictionary *)arg2;
- (void)account:(NSString *)arg1 accountInfoChanged:(NSDictionary *)arg2;
- (void)setupCompleteForAccount:(NSString *)arg1 transactionID:(NSString *)arg2 setupError:(NSError *)arg3;
- (void)accountDisabled:(NSString *)arg1 onService:(NSString *)arg2;
- (void)accountEnabled:(NSString *)arg1 onService:(NSString *)arg2;
- (void)accountsChanged:(NSArray *)arg1 forTopic:(NSString *)arg2;
- (void)accountUpdated:(NSDictionary *)arg1;
- (void)accountRemoved:(NSDictionary *)arg1;
- (void)accountAdded:(NSDictionary *)arg1;
- (void)protobufReceived:(NSDictionary *)arg1 withGUID:(NSString *)arg2 forTopic:(NSString *)arg3 toIdentifier:(NSString *)arg4 fromID:(NSString *)arg5 context:(NSDictionary *)arg6;
- (void)messageIdentifier:(NSString *)arg1 forTopic:(NSString *)arg2 toIdentifier:(NSString *)arg3 hasBeenDeliveredWithContext:(id)arg4;
- (void)messageIdentifier:(NSString *)arg1 alternateCallbackID:(NSString *)arg2 forAccount:(NSString *)arg3 willSendToDestinations:(NSArray *)arg4 skippedDestinations:(NSArray *)arg5 registrationPropertyToDestinations:(NSDictionary *)arg6;
- (void)messageIdentifier:(NSString *)arg1 alternateCallbackID:(NSString *)arg2 forAccount:(NSString *)arg3 updatedWithResponseCode:(long long)arg4 error:(NSError *)arg5 lastCall:(_Bool)arg6;
- (void)dataReceived:(NSData *)arg1 withGUID:(NSString *)arg2 forTopic:(NSString *)arg3 toIdentifier:(NSString *)arg4 fromID:(NSString *)arg5 context:(NSDictionary *)arg6;
- (void)messageReceived:(NSDictionary *)arg1 withGUID:(NSString *)arg2 withPayload:(NSDictionary *)arg3 forTopic:(NSString *)arg4 toIdentifier:(NSString *)arg5 fromID:(NSString *)arg6 context:(NSDictionary *)arg7;
- (void)daemonDisconnected;
- (void)daemonConnected;
- (void)setupComplete:(_Bool)arg1 info:(NSDictionary *)arg2;
@end

@protocol IDSDaemonProtocol <NSObject>

@optional
- (void)continuityStopTrackingPeer:(NSString *)arg1 forType:(long long)arg2;
- (void)continuityStartTrackingPeer:(NSString *)arg1 forType:(long long)arg2;
- (void)continuityDisconnectFromPeer:(NSString *)arg1;
- (void)continuityConnectToPeer:(NSString *)arg1;
- (void)continuityStopScanningForType:(long long)arg1;
- (void)continuityStartScanningForType:(long long)arg1 withData:(NSData *)arg2 peers:(NSArray *)arg3 withOptions:(NSDictionary *)arg4;
- (void)continuityStartScanningForType:(long long)arg1 withData:(NSData *)arg2 withOptions:(NSDictionary *)arg3;
- (void)continuityStopAdvertisingOfType:(long long)arg1;
- (void)continuityStartAdvertisingOfType:(long long)arg1 withData:(NSData *)arg2 withOptions:(NSDictionary *)arg3;
- (void)continuityClientInstanceCreated;
- (void)setInviteTimetout:(long long)arg1 forSessionWithUniqueID:(NSString *)arg2;
- (void)setAudioEnabled:(_Bool)arg1 forSessionWithUniqueID:(NSString *)arg2;
- (void)sendSessionMessage:(NSData *)arg1 toSession:(NSString *)arg2;
- (void)endSession:(NSString *)arg1 withData:(NSData *)arg2;
- (void)endSession:(NSString *)arg1;
- (void)declineInvitation:(NSString *)arg1 withData:(NSData *)arg2;
- (void)declineInvitation:(NSString *)arg1;
- (void)acceptInvitation:(NSString *)arg1 withData:(NSData *)arg2;
- (void)acceptInvitation:(NSString *)arg1;
- (void)cancelInvitation:(NSString *)arg1 withData:(NSData *)arg2;
- (void)cancelInvitation:(NSString *)arg1;
- (void)sendInvitation:(NSString *)arg1 withData:(NSData *)arg2 declineOnError:(_Bool)arg3;
- (void)sendInvitation:(NSString *)arg1 withOptions:(NSDictionary *)arg2;
- (void)cleanupSession:(NSString *)arg1;
- (void)setupNewSessionWithConfiguration:(NSDictionary *)arg1;
- (void)setNSUUID:(NSString *)arg1 onDeviceWithUniqueID:(NSString *)arg2 forService:(NSString *)arg3;
- (void)closeSocketWithOptions:(NSDictionary *)arg1;
- (void)openSocketWithOptions:(NSDictionary *)arg1;
- (void)xpcObject:(NSObject<OS_xpc_object> *)arg1 objectContext:(NSDictionary *)arg2;
- (void)setListenerServices:(NSSet *)arg1 commands:(NSSet *)arg2 capabilities:(unsigned int)arg3;
- (void)sendAppAckWithGUID:(NSString *)arg1 toDestination:(NSString *)arg2 forAccountWithUniqueID:(NSString *)arg3;
- (void)acknowledgeMessageWithGUID:(NSString *)arg1 forAccountWithUniqueID:(NSString *)arg2;
- (void)acknowledgeOutgoingMessageWithGUID:(NSString *)arg1 alternateCallbackID:(NSString *)arg2 forAccountWithUniqueID:(NSString *)arg3;
- (void)sendServerMessage:(NSDictionary *)arg1 command:(NSNumber *)arg2 usingAccountWithUniqueID:(NSString *)arg3;
- (void)sendPersistedFile:(NSURL *)arg1 userInfo:(NSDictionary *)arg2 toDestinations:(NSArray *)arg3 usingAccountWithUniqueID:(NSString *)arg4 identifier:(NSString *)arg5;
- (void)cancelItemWithIdentifier:(NSString *)arg1 service:(NSString *)arg2;
- (void)sendMessageWithSendParameters:(NSDictionary *)arg1;
- (void)savePublicKey:(NSData *)arg1 withIdentifier:(NSString *)arg2;
- (void)getPairedDeviceInfo;
- (void)getLocalDeviceInfo;
- (void)deletePairedDevice:(NSString *)arg1;
- (void)addPairedDevice:(NSString *)arg1;
- (void)localSetupCompleted;
- (void)localSetupUnpair;
- (void)stopLocalSetup;
- (void)startLocalSetup;
- (void)idsiCloudSignInDataMigratorForID:(NSString *)arg1;
- (void)kickGetDependentForAccount:(NSString *)arg1;
- (void)receivediCloudSignOutHack;
- (void)receivediCloudSignInHackWithUserName:(NSString *)arg1 password:(NSString *)arg2;
- (void)iCloudSignOutHack;
- (void)iCloudSignInHackWithUserName:(NSString *)arg1 password:(NSString *)arg2;
- (void)hardDeregister;
- (void)deactivateAndPurgeIdentifyForAccount:(NSString *)arg1;
- (void)_reregisterAndReidentify:(NSNumber *)arg1 account:(NSString *)arg2;
- (void)unregisterAccount:(NSString *)arg1;
- (void)registerAccount:(NSString *)arg1;
- (void)unvalidateAliases:(NSArray *)arg1 forAccount:(NSString *)arg2;
- (void)validateAliases:(NSArray *)arg1 forAccount:(NSString *)arg2;
- (void)removeAliases:(NSArray *)arg1 fromAccount:(NSString *)arg2;
- (void)addAliases:(NSArray *)arg1 toAccount:(NSString *)arg2;
- (void)validateProfileForAccount:(NSString *)arg1;
- (void)updateAuthorizationCredentials:(NSString *)arg1 token:(NSString *)arg2 forAccount:(NSString *)arg3;
- (void)passwordUpdatedForAccount:(NSString *)arg1;
- (void)authenticateAccount:(NSString *)arg1;
- (void)authenticationChangedForAccount:(NSString *)arg1;
- (void)passwordChanged:(NSString *)arg1 forAccount:(NSString *)arg2;
- (void)authTokenChanged:(NSString *)arg1 forAccount:(NSString *)arg2;
- (void)setLoginID:(NSString *)arg1 forAccount:(NSString *)arg2;
- (void)disableAccount:(NSString *)arg1;
- (void)enableAccount:(NSString *)arg1;
- (void)updateAccount:(NSString *)arg1 withAccountInfo:(NSDictionary *)arg2;
- (void)_removeAndDeregisterAccount:(NSString *)arg1;
- (void)_removeAccount:(NSString *)arg1;
- (void)addAccountWithLoginID:(NSString *)arg1 serviceName:(NSString *)arg2 uniqueID:(NSString *)arg3 accountType:(int)arg4 accountInfo:(NSDictionary *)arg5;
- (void)setupAccountWithLoginID:(NSString *)arg1 serviceName:(NSString *)arg2 accountType:(int)arg3 accountConfig:(NSDictionary *)arg4 authToken:(NSString *)arg5 password:(NSString *)arg6 transactionID:(NSString *)arg7;
@end

@protocol IDSIDQueryControllerDelegate <NSObject>

@optional
- (void)idStatusUpdatedForDestinations:(NSDictionary *)arg1 service:(NSString *)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@interface IDSAccount : NSObject
{
    _IDSAccount *_internal;
}

- (void)_callNearbyDevicesChanged;
- (void)deactivateAndPurgeIdentify;
- (void)_reregisterAndReidentify:(_Bool)arg1;
- (void)unregisterAccount;
- (void)registerAccount;
- (void)unvalidateAliases:(id)arg1;
- (void)validateAliases:(id)arg1;
- (void)removeAliases:(id)arg1;
- (void)addAliases:(id)arg1;
- (void)validateProfile;
- (void)updateAuthorizationCredentials:(id)arg1 token:(id)arg2;
- (void)passwordUpdated;
- (void)authenticateAccount;
- (id)description;
- (void)removeRegistrationDelegate:(id)arg1;
- (void)addRegistrationDelegate:(id)arg1 queue:(id)arg2;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
@property(readonly, nonatomic) NSString *profileID;
@property(readonly, nonatomic) NSDictionary *regionServerContext;
@property(readonly, nonatomic) NSString *regionBasePhoneNumber;
@property(readonly, nonatomic) NSString *regionID;
@property(readonly, nonatomic) NSData *pushToken;
@property(readonly, nonatomic) NSData *registrationCertificate;
@property(readonly, nonatomic) NSArray *registeredURIs;
@property(readonly, nonatomic) NSDate *dateRegistered;
@property(readonly, nonatomic) NSDate *nextRegistrationDate;
@property(readonly, nonatomic) int registrationStatus;
- (void)updateAccountWithAccountInfo:(id)arg1;
@property(retain, nonatomic) NSDictionary *accountInfo;
- (void)_setIsEnabled:(_Bool)arg1;
- (_Bool)_isEnabled;
- (void)setAuthToken:(id)arg1;
- (void)setPassword:(id)arg1;
@property(readonly, retain, nonatomic) NSArray *vettedAliases;
@property(readonly, retain, nonatomic) NSArray *aliasStrings;
@property(readonly, retain, nonatomic) NSArray *aliases;
@property(readonly, retain, nonatomic) NSDictionary *profileInfo;
@property(readonly, retain, nonatomic) NSArray *nearbyDevices;
@property(readonly, retain, nonatomic) NSArray *devices;
@property(readonly, nonatomic) _Bool canSend;
@property(readonly, nonatomic) _Bool isActive;
@property(readonly, nonatomic) int accountType;
@property(readonly, retain, nonatomic) NSString *primaryServiceName;
@property(readonly, retain, nonatomic) NSString *serviceName;
@property(retain, nonatomic) NSString *loginID;
@property(readonly, retain, nonatomic) NSString *displayName;
@property(readonly, retain, nonatomic) NSString *uniqueID;
- (id)_internal;
- (void)dealloc;
- (id)initWithLoginID:(id)arg1 uniqueID:(id)arg2 serviceName:(id)arg3;
- (id)initWithDictionary:(id)arg1 uniqueID:(id)arg2 serviceName:(id)arg3;
- (id)_initWithDictionary:(id)arg1 uniqueID:(id)arg2 serviceName:(id)arg3;

@end

@interface IDSAccountController : NSObject
{
    _IDSAccountController *_internal;
}

- (void)disableAccount:(id)arg1;
- (void)enableAccount:(id)arg1;
- (void)_removeAccount:(id)arg1;
- (void)removeAccount:(id)arg1;
- (void)addAccount:(id)arg1;
- (void)setupAccountWithSetupParameters:(id)arg1 aliases:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setupAccountWithLoginID:(id)arg1 authToken:(id)arg2 profileID:(id)arg3 selfHandle:(id)arg4 aliases:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)setupAccountWithLoginID:(id)arg1 authToken:(id)arg2 profileID:(id)arg3 selfHandle:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)setupAccountWithLoginID:(id)arg1 password:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setupAccountWithLoginID:(id)arg1 aliases:(id)arg2 password:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)accountWithUniqueID:(id)arg1;
- (id)accountWithLoginID:(id)arg1 service:(id)arg2;
- (id)serviceName;
- (id)enabledAccounts;
@property(readonly, retain, nonatomic) NSSet *accounts;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (id)_internal;
- (void)dealloc;
- (id)initWithService:(id)arg1;
- (id)_initWithService:(id)arg1;
- (id)_initWithService:(id)arg1 onIDSQueue:(_Bool)arg2;

@end

@interface IDSBatchIDQueryController : NSObject
{
    _IDSBatchIDQueryController *_internal;
}

- (void)invalidate;
- (void)setDestinations:(id)arg1;
- (void)dealloc;
- (id)initWithService:(id)arg1 delegate:(id)arg2 queue:(id)arg3;

@end

@interface IDSConnection : NSObject
{
    _IDSConnection *_internal;
}

- (_Bool)sendData:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendMessage:(id)arg1 toDestinations:(id)arg2 options:(id)arg3 identifier:(id *)arg4 error:(id *)arg5;
- (_Bool)sendMessage:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendProtobuf:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
@property(readonly, nonatomic) _Bool isActive;
@property(readonly, retain, nonatomic) IDSAccount *account;
@property(readonly, retain, nonatomic) _IDSConnection *_internal;
- (void)dealloc;
- (id)initWithAccount:(id)arg1;
- (id)initWithAccount:(id)arg1 commands:(id)arg2;
- (id)_initWithAccount:(id)arg1 commands:(id)arg2 indirectDelegateCallouts:(_Bool)arg3;

@end

@interface IDSContinuity : NSObject
{
    _IDSContinuity *_internal;
}

- (void)stopTrackingPeer:(id)arg1 forType:(long long)arg2;
- (void)startTrackingPeer:(id)arg1 forType:(long long)arg2;
- (void)stopTrackingPeer:(id)arg1;
- (void)startTrackingPeer:(id)arg1;
- (void)disconnectFromPeer:(id)arg1;
- (void)connectToPeer:(id)arg1;
- (void)stopScanningForType:(long long)arg1;
- (void)startScanningForType:(long long)arg1 withData:(id)arg2 withOptions:(id)arg3;
- (void)startScanningForType:(long long)arg1 withData:(id)arg2 peers:(id)arg3 withOptions:(id)arg4;
- (void)stopAdvertisingOfType:(long long)arg1;
- (void)startAdvertisingOfType:(long long)arg1 withData:(id)arg2 withOptions:(id)arg3;
@property(readonly) long long state;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 queue:(id)arg2;

@end

@interface IDSDaemonController : NSObject <IDSDaemonProtocol>
{
    id _delegate;
    IMRemoteObject<IDSDaemonProtocol> *_remoteObject;
    IMLocalObject *_localObject;
    IDSDaemonListener *_daemonListener;
    NSProtocolChecker *_protocol;
    NSString *_listenerID;
    NSObject<OS_dispatch_queue> *_ivarQueue;
    NSObject<OS_dispatch_group> *_daemonConnectedGroup;
    NSObject<OS_dispatch_queue> *_remoteMessageQueue;
    NSMutableDictionary *_listenerServices;
    NSSet *_services;
    NSSet *_cachedServices;
    NSMutableDictionary *_listenerCommands;
    NSSet *_commands;
    NSSet *_cachedCommands;
    NSMutableDictionary *_listenerCapabilities;
    unsigned int _cachedCapabilities;
    unsigned int _lastUpdateCaps;
    _Bool _hasCheckedForDaemon;
    _Bool _preventReconnect;
    _Bool _acquiringDaemonConnection;
    _Bool _autoReconnect;
    _Bool _hasBeenSuspended;
}

+ (void)_setApplicationWillTerminate;
+ (void)_blockUntilSendQueueIsEmpty;
+ (_Bool)_applicationWillTerminate;
+ (id)sharedInstance;
@property(setter=_setAutoReconnect:) _Bool _autoReconnect; // @synthesize _autoReconnect;
@property(retain, nonatomic, setter=_setListenerID:) NSString *_listenerID; // @synthesize _listenerID;
@property(nonatomic) id delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *_remoteMessageQueue; // @synthesize _remoteMessageQueue;
@property(readonly, nonatomic) IDSDaemonListener *listener; // @synthesize listener=_daemonListener;
- (void)systemApplicationDidResume;
- (void)systemApplicationWillEnterForeground;
- (void)systemApplicationDidEnterBackground;
- (void)systemApplicationDidSuspend;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)sendXPCObject:(id)arg1 objectContext:(id)arg2;
- (void)remoteObjectDiedNotification:(id)arg1;
- (void)localObjectDiedNotification:(id)arg1;
- (void)_agentDidLaunchNotification:(id)arg1;
- (void)_remoteObjectCleanup;
- (void)_localObjectCleanup;
- (id)localObject;
- (_Bool)localObjectExists;
- (_Bool)remoteObjectExists;
- (void)_noteSetupComplete;
- (void)_noteDisconnected;
- (void)blockUntilConnected;
- (_Bool)isConnected;
@property(readonly, nonatomic) _Bool isConnecting;
- (_Bool)setCapabilities:(unsigned int)arg1 forListenerID:(id)arg2;
- (unsigned int)capabilitiesForListenerID:(id)arg1;
- (id)commandsForListenerID:(id)arg1;
- (_Bool)setCommands:(id)arg1 forListenerID:(id)arg2;
- (_Bool)setServices:(id)arg1 forListenerID:(id)arg2;
- (id)servicesForListenerID:(id)arg1;
- (_Bool)removeListenerID:(id)arg1;
- (_Bool)hasListenerForID:(id)arg1;
- (_Bool)addListenerID:(id)arg1 services:(id)arg2;
- (_Bool)addListenerID:(id)arg1 services:(id)arg2 commands:(id)arg3;
- (void)_listenerSetUpdated;
- (_Bool)_setCapabilities:(unsigned int)arg1;
- (unsigned int)capabilities;
- (_Bool)_setCommands:(id)arg1;
- (id)commands;
- (_Bool)_setServices:(id)arg1;
- (id)services;
- (void)_setServices:(id)arg1 commands:(id)arg2 capabilities:(unsigned int)arg3;
- (_Bool)connectToDaemonWithLaunch:(_Bool)arg1 services:(id)arg2 commands:(id)arg3 capabilities:(unsigned int)arg4;
- (_Bool)connectToDaemon;
- (_Bool)connectToDaemonWithLaunch:(_Bool)arg1;
- (void)_connectToDaemonWithLaunch:(_Bool)arg1 services:(id)arg2 commands:(id)arg3 capabilities:(unsigned int)arg4;
- (void)disconnectFromDaemon;
- (void)_disconnectFromDaemonWithForce:(_Bool)arg1;
- (void)_blockUntilSendQueueIsEmpty;
- (_Bool)_makeConnectionWithLaunch:(_Bool)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_handleDaemonException:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)_performBlock:(CDUnknownBlockType)arg1;
- (void)_performBlock:(CDUnknownBlockType)arg1 wait:(_Bool)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface IDSDaemonListener : NSObject <IDSDaemonListenerProtocol>
{
    NSObject<OS_dispatch_queue> *_ivarQueue;
    NSHashTable *_handlers;
    NSProtocolChecker *_protocol;
    NSMutableDictionary *_topicToAccountDictionaries;
    NSMutableDictionary *_topicToEnabledAccounts;
    NSMutableDictionary *_accountToDevices;
    _Bool _setupComplete;
    _Bool _postedSetupComplete;
    _Bool _hidingDisconnect;
}

- (void)continuityDidDisconnectFromPeer:(id)arg1 withError:(id)arg2;
- (void)continuityDidConnectToPeer:(id)arg1 withError:(id)arg2;
- (void)continuityDidDiscoverPeerWithData:(id)arg1 fromPeer:(id)arg2;
- (void)continuityDidDiscoverType:(long long)arg1 withData:(id)arg2 fromPeer:(id)arg3;
- (void)continuityDidFailToStartScanningForType:(long long)arg1 withError:(id)arg2;
- (void)continuityDidStopScanningForType:(long long)arg1;
- (void)continuityDidStartScanningForType:(long long)arg1;
- (void)continuityDidFailToStartAdvertisingOfType:(long long)arg1 withError:(id)arg2;
- (void)continuityDidStopAdvertisingOfType:(long long)arg1;
- (void)continuityDidStartAdvertisingOfType:(long long)arg1;
- (void)continuityDidLosePeer:(id)arg1;
- (void)continuityDidUpdateState:(long long)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)xpcObject:(id)arg1 objectContext:(id)arg2;
- (void)_deferredSetupOnIvarQueue:(id)arg1;
- (void)setupComplete:(_Bool)arg1 info:(id)arg2;
- (void)device:(id)arg1 nsuuidChanged:(id)arg2;
- (id)dependentDevicesForAccount:(id)arg1;
- (void)activeDevicesUpdatedForAccount:(id)arg1;
- (void)refreshRegistrationForAccount:(id)arg1;
- (void)registrationFailedForAccount:(id)arg1 needsDeletion:(id)arg2;
- (void)account:(id)arg1 localDeviceRemoved:(id)arg2;
- (void)account:(id)arg1 localDeviceAdded:(id)arg2;
- (void)account:(id)arg1 dependentDevicesUpdated:(id)arg2;
- (void)account:(id)arg1 displayNameChanged:(id)arg2;
- (void)account:(id)arg1 loginChanged:(id)arg2;
- (void)account:(id)arg1 profileChanged:(id)arg2;
- (void)account:(id)arg1 vettedAliasesChanged:(id)arg2;
- (void)account:(id)arg1 aliasesChanged:(id)arg2;
- (void)account:(id)arg1 registrationStatusInfoChanged:(id)arg2;
- (void)account:(id)arg1 accountInfoChanged:(id)arg2;
- (void)accountDisabled:(id)arg1 onService:(id)arg2;
- (void)accountEnabled:(id)arg1 onService:(id)arg2;
- (void)accountRemoved:(id)arg1;
- (void)accountAdded:(id)arg1;
- (void)_removeAccountOnIvarQueue:(id)arg1;
- (id)enabledAccountsForService:(id)arg1;
- (id)accountDictionariesForService:(id)arg1;
- (void)_callHandlersAsyncWithBlock:(CDUnknownBlockType)arg1;
- (void)_callHandlersWithBlock:(CDUnknownBlockType)arg1;
- (void)_callHandlersWithBlockOnIvarQueue:(CDUnknownBlockType)arg1;
- (void)_callHandlersWithBlockOnIvarQueue:(CDUnknownBlockType)arg1 cleanup:(CDUnknownBlockType)arg2;
- (void)removeHandler:(id)arg1;
- (void)addHandler:(id)arg1;
@property(nonatomic, setter=_setHidingDisconnect:) _Bool _hidingDisconnect;
@property(readonly, nonatomic) _Bool hasPostedSetupComplete;
@property(readonly, nonatomic) _Bool isSetupComplete;
- (void)_noteDisconnected;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface IDSDevice : NSObject
{
    _IDSDevice *_internal;
}

- (void)closeSocketForDomain:(id)arg1;
- (int)openSocketForDomain:(id)arg1 transportType:(long long)arg2;
- (int)openSocketForDomain:(id)arg1;
- (int)socketForDomain:(id)arg1;
- (void)cleanupStreamPairWithInputStream:(id)arg1 outputStream:(id)arg2;
- (void)establishStreamPairWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2 onQueue:(id)arg3;
- (void)closeSocket:(int)arg1;
- (void)openSocketWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2 onQueue:(id)arg3;
- (id)_internal;
- (void)_setAccount:(id)arg1;
- (_Bool)isDefaultLocalDevice;
- (void)_addIdentity:(id)arg1;
@property(readonly, retain, nonatomic) NSArray *identities;
@property(readonly, retain, nonatomic) NSData *pushToken;
@property(readonly, retain, nonatomic) NSString *enclosureColor;
@property(readonly, retain, nonatomic) NSString *deviceColor;
@property(readonly, nonatomic) _Bool supportsPhoneCalls;
@property(readonly, nonatomic) _Bool supportsMMSRelay;
@property(readonly, nonatomic) _Bool supportsSMSRelay;
@property(readonly, nonatomic) _Bool supportsHandoff;
@property(readonly, nonatomic) _Bool supportsTethering;
@property(readonly, nonatomic) _Bool supportsiCloudPairing;
- (void)_updateNSUUID:(id)arg1;
@property(retain, nonatomic, setter=setNSUUID:) NSUUID *nsuuid;
@property(readonly, retain, nonatomic) NSArray *linkedUserURIs;
@property(readonly, nonatomic) _Bool isDefaultPairedDevice;
@property(readonly, nonatomic) _Bool locallyPresent;
@property(readonly, nonatomic, getter=isNearby) _Bool nearby;
@property(readonly, retain, nonatomic) NSString *service;
@property(readonly, retain, nonatomic) NSString *name;
@property(readonly, retain, nonatomic) NSString *modelIdentifier;
@property(readonly, nonatomic) NSString *productBuildVersion;
@property(readonly, nonatomic) NSString *productName;
@property(readonly, nonatomic) NSString *productVersion;
@property(readonly, retain, nonatomic) NSString *uniqueID;
- (id)description;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1;
- (id)_initWithDictionary:(id)arg1;

@end

@interface IDSDeviceConnection : NSObject
{
    _IDSDeviceConnection *_internal;
}

@property(readonly, retain, nonatomic) _IDSDeviceConnection *_internal;
- (void)close;
@property(readonly, retain, nonatomic) NSOutputStream *outputStream;
@property(readonly, retain, nonatomic) NSInputStream *inputStream;
@property(readonly, nonatomic) int socket;
- (void)setStreamPairWithInputStream:(id)arg1 outputStream:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)initStreamWithDevice:(id)arg1 options:(id)arg2 completionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;
- (id)initSocketWithDevice:(id)arg1 options:(id)arg2 completionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;

@end

@interface IDSIDQueryController : NSObject
{
    _IDSIDQueryController *_internal;
}

+ (id)sharedInstance;
- (_Bool)requestIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)requestIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (id)_currentIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3;
- (long long)_currentIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3;
- (id)_refreshIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3;
- (long long)_refreshIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3;
- (void)_setCurrentIDStatus:(long long)arg1 forDestination:(id)arg2 service:(id)arg3;
- (_Bool)_flushQueryCacheForService:(id)arg1;
- (_Bool)_warmupQueryCacheForService:(id)arg1;
- (long long)_currentCachedIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3;
- (_Bool)_hasCacheForService:(id)arg1;
- (_Bool)currentIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)currentIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)refreshIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)refreshIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)removeListenerID:(id)arg1 forService:(id)arg2;
- (void)addListenerID:(id)arg1 forService:(id)arg2;
- (void)removeDelegate:(id)arg1 forService:(id)arg2 listenerID:(id)arg3;
- (void)addDelegate:(id)arg1 forService:(id)arg2 listenerID:(id)arg3 queue:(id)arg4;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface IDSInternalQueueController : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)sharedInstance;
- (id)queue;
- (void)assertQueueIsNotCurrent;
- (void)assertQueueIsCurrent;
- (void)performBlock:(CDUnknownBlockType)arg1 waitUntilDone:(_Bool)arg2;
- (void)performBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

@end

@interface IDSPairedDeviceManager : NSObject <IDSDaemonListenerProtocol>
{
    _IDSCompletionHandler *_deleteCompletion;
    _IDSCompletionHandler *_localCompletion;
    _IDSCompletionHandler *_pairedCompletion;
}

+ (id)sharedInstance;
- (void)pairedDeviceInfo:(id)arg1;
- (void)localDeviceInfo:(id)arg1;
- (void)device:(id)arg1 pairingDeleted:(_Bool)arg2;
- (void)device:(id)arg1 pairingAdded:(_Bool)arg2;
- (void)getPairedDeviceInfoWithCompletionBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
- (void)getLocalDeviceInfoWithCompletionBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
- (void)deletePairedDevice:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2 queue:(id)arg3;
- (void)savePublicKey:(id)arg1 forIdentifier:(id)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface IDSService : NSObject
{
    _IDSService *_internal;
}

- (id)uriForFromID:(id)arg1;
- (id)deviceForFromID:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *devices;
@property(readonly, copy, nonatomic) NSSet *accounts;
- (id)iCloudAccount;
- (id)serviceDomain;
- (_Bool)sendServerMessage:(id)arg1 command:(id)arg2 fromAccount:(id)arg3;
- (_Bool)cancelIdentifier:(id)arg1 error:(id *)arg2;
- (_Bool)sendData:(id)arg1 priority:(long long)arg2 options:(id)arg3 identifier:(id *)arg4 error:(id *)arg5;
- (_Bool)sendData:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendData:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id *)arg6 error:(id *)arg7;
- (_Bool)sendMessage:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendMessage:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id *)arg6 error:(id *)arg7;
- (_Bool)sendMessage:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendProtobuf:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendProtobuf:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id *)arg6 error:(id *)arg7;
- (SEL)protobufActionForIncomingResponsesOfType:(unsigned short)arg1;
- (SEL)protobufActionForIncomingRequestsOfType:(unsigned short)arg1;
- (void)setProtobufAction:(SEL)arg1 forIncomingResponsesOfType:(unsigned short)arg2;
- (void)setProtobufAction:(SEL)arg1 forIncomingRequestsOfType:(unsigned short)arg2;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
@property(readonly, retain, nonatomic) _IDSService *_internal;
- (void)dealloc;
- (id)initWithService:(id)arg1;
- (id)initWithService:(id)arg1 commands:(id)arg2;
- (id)initWithService:(id)arg1 serviceDomain:(id)arg2;

@end

@interface IDSServiceAvailabilityController : NSObject
{
    NSMutableDictionary *_availabilityHandlers;
}

+ (id)sharedInstance;
- (long long)availabilityForListenerID:(id)arg1 forService:(id)arg2;
- (_Bool)removeListenerID:(id)arg1 forService:(id)arg2;
- (_Bool)addListenerID:(id)arg1 forService:(id)arg2;
- (_Bool)hasListenerID:(id)arg1 forService:(id)arg2;
- (id)containerForService:(id)arg1 create:(_Bool)arg2;
- (void)_stopListeningToMonitor:(id)arg1;
- (void)_startListeningToMonitor:(id)arg1;
- (void)_handleServiceMonitorNotification:(id)arg1;
- (void)_postNotificationForService:(id)arg1 availability:(long long)arg2;
- (_Bool)_isValidServiceType:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface IDSServiceContainer : NSObject
{
    IDSServiceMonitor *_monitor;
    NSMutableSet *_listeners;
}

@property(readonly, retain, nonatomic) NSMutableSet *listeners; // @synthesize listeners=_listeners;
@property(retain, nonatomic) IDSServiceMonitor *monitor; // @synthesize monitor=_monitor;
- (_Bool)removeListenerID:(id)arg1;
- (_Bool)addListenerID:(id)arg1;
- (_Bool)hasListenerID:(id)arg1;
- (void)dealloc;
- (id)initWithService:(id)arg1;

@end

@interface IDSServiceMonitor : NSObject
{
    long long _availability;
    NSString *_service;
    int _token;
}

@property(readonly, retain, nonatomic) NSString *service;
- (long long)serviceAvailability;
- (void)handleActiveAccountsChanged:(id)arg1;
- (void)updateAvailability;
- (void)_updateAvailability;
- (void)_postAvailability:(long long)arg1;
- (void)dealloc;
- (id)initWithService:(id)arg1;

@end

@interface IDSSession : NSObject
{
    _IDSSession *_internal;
}

@property(readonly, nonatomic) unsigned int sessionEndedReason;
@property(nonatomic) long long invitationTimeOut;
- (_Bool)sendData:(id)arg1 error:(id *)arg2;
@property(nonatomic) _Bool isAudioEnabled;
- (void)sendSessionMessage:(id)arg1;
- (void)endSessionWithData:(id)arg1;
- (void)endSession;
- (void)declineInvitation;
- (void)acceptInvitation;
- (void)cancelInvitation;
- (void)declineInvitationWithData:(id)arg1;
- (void)acceptInvitationWithData:(id)arg1;
- (void)cancelInvitationWithData:(id)arg1;
- (void)sendInvitationWithData:(id)arg1 declineOnError:(_Bool)arg2;
- (void)sendInvitationWithData:(id)arg1;
- (void)sendInvitationWithOptions:(id)arg1;
- (void)sendInvitation;
- (id)_internal;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (unsigned int)state;
@property(readonly, nonatomic) int socket;
- (void)dealloc;
- (id)_initWithAccount:(id)arg1 destinations:(id)arg2 transportType:(long long)arg3 uniqueID:(id)arg4;
- (id)initWithAccount:(id)arg1 destinations:(id)arg2 transportType:(long long)arg3;

@end

@interface _IDSAccount : NSObject <IDSDaemonListenerProtocol>
{
    NSDictionary *_accountConfig;
    NSString *_serviceToken;
    NSString *_uniqueID;
    NSString *_service;
    NSMutableArray *_devices;
    IDSDevice *_localDevice;
    id _delegateContext;
    NSMapTable *_delegateToInfo;
    NSMapTable *_registrationDelegateToInfo;
    _Bool _devicesLoaded;
    _Bool _isEnabled;
}

- (void)deactivateAndPurgeIdentify;
- (void)_reregisterAndReidentify:(_Bool)arg1;
- (void)unregisterAccount;
- (void)registerAccount;
- (void)unvalidateAliases:(id)arg1;
- (void)validateAliases:(id)arg1;
- (void)removeAliases:(id)arg1;
- (void)addAliases:(id)arg1;
- (void)validateProfile;
- (void)updateAuthorizationCredentials:(id)arg1 token:(id)arg2;
- (void)passwordUpdated;
- (void)authenticateAccount;
- (void)activeDevicesUpdatedForAccount:(id)arg1;
- (void)refreshRegistrationForAccount:(id)arg1;
- (void)device:(id)arg1 nsuuidChanged:(id)arg2;
- (void)account:(id)arg1 localDeviceRemoved:(id)arg2;
- (void)account:(id)arg1 localDeviceAdded:(id)arg2;
- (void)account:(id)arg1 dependentDevicesUpdated:(id)arg2;
- (void)account:(id)arg1 displayNameChanged:(id)arg2;
- (void)account:(id)arg1 loginChanged:(id)arg2;
- (void)account:(id)arg1 profileChanged:(id)arg2;
- (void)account:(id)arg1 vettedAliasesChanged:(id)arg2;
- (void)account:(id)arg1 aliasesChanged:(id)arg2;
- (void)account:(id)arg1 registrationStatusInfoChanged:(id)arg2;
- (void)_connect;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) NSData *pushToken;
@property(readonly, nonatomic) NSData *registrationCertificate;
@property(readonly, nonatomic) NSArray *registeredURIs;
- (id)_registeredURIs;
@property(readonly, nonatomic) NSDate *dateRegistered;
@property(readonly, nonatomic) NSDate *nextRegistrationDate;
- (id)_keychainRegistration;
- (void)_callNearbyDevicesChanged;
- (void)_callDevicesChanged;
@property(readonly, retain, nonatomic) NSArray *nearbyDevices;
@property(readonly, retain, nonatomic) NSArray *devices;
- (void)_loadCachedDevices;
- (void)_updateDependentDevicesWithDevicesInfo:(id)arg1;
@property(readonly, nonatomic) NSString *profileID;
@property(readonly, nonatomic) int registrationStatus;
- (id)registrationInfo;
- (void)setAuthToken:(id)arg1;
- (void)setPassword:(id)arg1;
@property(readonly, nonatomic) int accountType;
@property(nonatomic, setter=_setIsEnabled:) _Bool _isEnabled;
@property(readonly, retain, nonatomic) NSString *uniqueID;
@property(readonly, retain, nonatomic) NSString *pushTopic;
@property(readonly, retain, nonatomic) NSString *primaryServiceName;
@property(readonly, retain, nonatomic) NSString *serviceName;
@property(retain, nonatomic) NSString *loginID;
@property(readonly, retain, nonatomic) NSString *displayName;
@property(readonly, retain, nonatomic) NSArray *vettedAliases;
@property(readonly, retain, nonatomic) NSArray *aliases;
@property(readonly, retain, nonatomic) NSArray *aliasStrings;
@property(readonly, nonatomic) _Bool canSend;
@property(readonly, nonatomic) NSDictionary *regionServerContext;
@property(readonly, nonatomic) NSString *regionBasePhoneNumber;
@property(readonly, nonatomic) NSString *regionID;
@property(readonly, retain, nonatomic) NSDictionary *profileInfo;
- (void)updateAccountWithAccountInfo:(id)arg1;
@property(retain, nonatomic) NSDictionary *accountInfo;
@property(readonly, nonatomic) _Bool isActive;
- (void)_setObject:(id)arg1 forKey:(id)arg2;
- (id)_objectForKey:(id)arg1;
- (void)_callRegistrationDelegatesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeRegistrationDelegate:(id)arg1;
- (void)addRegistrationDelegate:(id)arg1 queue:(id)arg2;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1 group:(id)arg2;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (_Bool)_isiCloudPairingService;
- (void)dealloc;
- (id)initWithLoginID:(id)arg1 uniqueID:(id)arg2 serviceName:(id)arg3 delegateContext:(id)arg4;
- (id)initWithDictionary:(id)arg1 uniqueID:(id)arg2 serviceName:(id)arg3 delegateContext:(id)arg4;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSAccountController : NSObject <IDSDaemonListenerProtocol>
{
    id _delegateContext;
    NSMapTable *_delegateToInfo;
    NSString *_serviceToken;
    NSString *_service;
    NSMutableSet *_cachedAccounts;
    NSMutableSet *_enabledAccounts;
    NSMutableDictionary *_transactionIDToHandlersMap;
    _Bool _accountsLoaded;
    _Bool _isLocalAccountVisible;
}

- (void)accountDisabled:(id)arg1 onService:(id)arg2;
- (void)accountEnabled:(id)arg1 onService:(id)arg2;
- (void)setupCompleteForAccount:(id)arg1 transactionID:(id)arg2 setupError:(id)arg3;
- (void)accountsChanged:(id)arg1 forTopic:(id)arg2;
- (void)accountUpdated:(id)arg1;
- (void)accountRemoved:(id)arg1;
- (void)accountAdded:(id)arg1;
- (void)disableAccount:(id)arg1;
- (void)enableAccount:(id)arg1;
- (void)_updateLocalAccountVisibility;
- (void)_removeAccount:(id)arg1;
- (void)_removeAndDeregisterAccount:(id)arg1;
- (void)addAccount:(id)arg1;
- (void)setupAccountWithSetupParameters:(id)arg1 aliases:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setupAccountWithLoginID:(id)arg1 authToken:(id)arg2 profileID:(id)arg3 selfHandle:(id)arg4 aliases:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)setupAccountWithLoginID:(id)arg1 aliases:(id)arg2 password:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)setupAccountWithLoginID:(id)arg1 authToken:(id)arg2 profileID:(id)arg3 selfHandle:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)setupAccountWithLoginID:(id)arg1 password:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_setupAccountWithLoginID:(id)arg1 accountConfig:(id)arg2 authToken:(id)arg3 password:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (id)accountWithLoginID:(id)arg1 service:(id)arg2;
- (id)accountWithUniqueID:(id)arg1;
- (void)_loadCachedAccounts;
- (void)_loadCachedAccountsWithDictionaries:(id)arg1;
- (void)_updateDelegatesWithOldAccounts:(id)arg1 newAccounts:(id)arg2;
- (void)daemonDisconnected;
- (void)_connect;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1 group:(id)arg2;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
@property(readonly, retain, nonatomic) NSString *serviceName;
@property(readonly, retain, nonatomic) NSSet *enabledAccounts;
- (id)internalAccounts;
@property(readonly, retain, nonatomic) NSSet *accounts;
- (void)dealloc;
- (id)initWithService:(id)arg1 delegateContext:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSBatchIDQueryController : NSObject <IDSIDQueryControllerDelegate>
{
    NSString *_serviceName;
    CUTWeakReference *_delegate;
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_listenerID;
    NSArray *_destinations;
    NSMutableArray *_destinationsToQuery;
    NSTimer *_nextQueryTimer;
    NSDate *_timeOfDeath;
    int _numberOfQueriesDone;
    _Bool _isDead;
}

- (void)_invalidateNextQueryTimer;
- (void)_nextQuery:(id)arg1;
- (void)setDestinations:(id)arg1;
- (void)_scheduleNextQuery:(double)arg1;
- (void)invalidate;
- (void)dealloc;
- (id)initWithService:(id)arg1 delegate:(id)arg2 queue:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSCompletionHandler : IDSDelegateInfo
{
    CDUnknownBlockType _handler;
}

@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
- (void)dealloc;
- (id)initWithHandler:(CDUnknownBlockType)arg1 queue:(id)arg2;

@end

@interface _IDSConnection : NSObject <IDSDaemonListenerProtocol, IDSAccountDelegate>
{
    id _messageContext;
    id _delegateContext;
    NSMapTable *_delegateToInfo;
    IDSAccount *_account;
    NSSet *_commands;
    NSString *_serviceToken;
    NSMutableDictionary *_pendingSends;
    unsigned int _delegateCapabilities;
    _Bool _indirectDelegateCallouts;
}

- (void)sessionInvitationReceivedWithPayload:(id)arg1 forTopic:(id)arg2 sessionID:(id)arg3 toIdentifier:(id)arg4 fromID:(id)arg5 transportType:(id)arg6;
- (void)protobufReceived:(id)arg1 withGUID:(id)arg2 forTopic:(id)arg3 toIdentifier:(id)arg4 fromID:(id)arg5 context:(id)arg6;
- (void)dataReceived:(id)arg1 withGUID:(id)arg2 forTopic:(id)arg3 toIdentifier:(id)arg4 fromID:(id)arg5 context:(id)arg6;
- (void)messageReceived:(id)arg1 withGUID:(id)arg2 withPayload:(id)arg3 forTopic:(id)arg4 toIdentifier:(id)arg5 fromID:(id)arg6 context:(id)arg7;
- (_Bool)_shouldAcceptIncomingType:(id)arg1 forTopic:(id)arg2 toIdentifier:(id)arg3;
- (void)_setTemporaryMessageContext:(id)arg1;
- (void)messageIdentifier:(id)arg1 forTopic:(id)arg2 toIdentifier:(id)arg3 hasBeenDeliveredWithContext:(id)arg4;
- (void)messageIdentifier:(id)arg1 alternateCallbackID:(id)arg2 forAccount:(id)arg3 willSendToDestinations:(id)arg4 skippedDestinations:(id)arg5 registrationPropertyToDestinations:(id)arg6;
- (void)messageIdentifier:(id)arg1 alternateCallbackID:(id)arg2 forAccount:(id)arg3 updatedWithResponseCode:(long long)arg4 error:(id)arg5 lastCall:(_Bool)arg6;
- (void)daemonConnected;
- (void)_resendPendingSends;
- (void)_handleLastCallForPendingIdentifier:(id)arg1 callbackID:(id)arg2;
- (void)_connect;
- (void)account:(id)arg1 nearbyDevicesChanged:(id)arg2;
- (void)account:(id)arg1 devicesChanged:(id)arg2;
- (void)account:(id)arg1 isActiveChanged:(_Bool)arg2;
- (_Bool)sendServerMessage:(id)arg1 command:(id)arg2;
- (_Bool)sendData:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendMessage:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (_Bool)sendProtobuf:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id *)arg5 error:(id *)arg6;
- (id)_sendWithParameters:(id)arg1 options:(id)arg2 loggingType:(id)arg3 loggingDataSize:(unsigned long long)arg4;
- (void)setDelegateCapabilities:(unsigned int)arg1;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1 group:(id)arg2;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
@property(readonly, nonatomic) _Bool isActive;
@property(readonly, retain, nonatomic) IDSAccount *account;
- (void)dealloc;
- (id)initWithAccount:(id)arg1 commands:(id)arg2 indirectDelegateCallouts:(_Bool)arg3 delegateContext:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSContinuity : NSObject <IDSDaemonListenerProtocol>
{
    id _delegateContext;
    CUTWeakReference *_delegate;
    NSObject<OS_dispatch_queue> *_queue;
    long long _state;
}

@property(readonly) long long state; // @synthesize state=_state;
- (void)continuityDidStopTrackingPeer:(id)arg1 forType:(long long)arg2;
- (void)continuityDidStopTrackingPeer:(id)arg1;
- (void)continuityDidStartTrackingPeer:(id)arg1 forType:(long long)arg2 error:(id)arg3;
- (void)continuityDidStartTrackingPeer:(id)arg1 error:(id)arg2;
- (void)continuityDidLosePeer:(id)arg1 forType:(long long)arg2;
- (void)continuityDidLosePeer:(id)arg1;
- (void)continuityDidDiscoverType:(long long)arg1 withData:(id)arg2 fromPeer:(id)arg3;
- (void)continuityDidFailToStartScanningForType:(long long)arg1 withError:(id)arg2;
- (void)continuityDidStopScanningForType:(long long)arg1;
- (void)continuityDidStartScanningForType:(long long)arg1;
- (void)continuityDidFailToStartAdvertisingOfType:(long long)arg1 withError:(id)arg2;
- (void)continuityDidStopAdvertisingOfType:(long long)arg1;
- (void)continuityDidStartAdvertisingOfType:(long long)arg1;
- (void)continuityDidUpdateState:(long long)arg1;
- (void)_callDelegateWithBlock:(CDUnknownBlockType)arg1;
- (void)_daemonDied:(id)arg1;
- (void)_handleReconnect;
- (void)stopTrackingPeer:(id)arg1 forType:(long long)arg2;
- (void)startTrackingPeer:(id)arg1 forType:(long long)arg2;
- (void)stopScanningForType:(long long)arg1;
- (void)startScanningForType:(long long)arg1 withData:(id)arg2 withOptions:(id)arg3;
- (void)startScanningForType:(long long)arg1 withData:(id)arg2 peers:(id)arg3 withOptions:(id)arg4;
- (void)stopAdvertisingOfType:(long long)arg1;
- (void)startAdvertisingOfType:(long long)arg1 withData:(id)arg2 withOptions:(id)arg3;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 queue:(id)arg2 delegateContext:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSDevice : NSObject <IDSDaemonListenerProtocol>
{
    NSDictionary *_info;
    NSString *_serviceToken;
    CUTWeakReference *_account;
    int _socket;
    int _nearbyToken;
    _Bool _nearby;
    CDUnknownBlockType _openSocketCompletionHandler;
    NSObject<OS_dispatch_queue> *_openSocketCompletionHandlerQueue;
    NSString *_openSocketCompletionHandlerID;
    NSInputStream *_inputStreamForSocket;
    NSOutputStream *_outputStreamForSocket;
}

- (void)closeSocketForDomain:(id)arg1;
- (void)xpcObject:(id)arg1 objectContext:(id)arg2;
- (void)closeStreamPairWithInputStream:(id)arg1 outputStream:(id)arg2;
- (void)setStreamPairWithInputStream:(id)arg1 outputStream:(id)arg2;
- (void)closeSocket:(int)arg1;
- (void)openSocketWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2 onQueue:(id)arg3;
- (int)socketForDomain:(id)arg1;
- (void)_setAccount:(id)arg1;
- (void)_nearbyStateChanged;
- (void)_addIdentity:(id)arg1;
@property(readonly, retain, nonatomic) NSArray *identities;
@property(readonly, retain, nonatomic) NSData *pushToken;
@property(readonly, retain, nonatomic) NSString *enclosureColor;
@property(readonly, retain, nonatomic) NSString *deviceColor;
@property(readonly, nonatomic) _Bool supportsPhoneCalls;
@property(readonly, nonatomic) _Bool supportsMMSRelay;
@property(readonly, nonatomic) _Bool supportsSMSRelay;
@property(readonly, nonatomic) _Bool supportsHandoff;
@property(readonly, nonatomic) _Bool supportsTethering;
@property(readonly, nonatomic) _Bool supportsiCloudPairing;
- (void)_updateNSUUID:(id)arg1;
@property(retain, nonatomic, setter=setNSUUID:) NSUUID *nsuuid;
@property(readonly, retain, nonatomic) NSArray *linkedUserURIs;
@property(readonly, nonatomic) _Bool isDefaultLocalDevice;
@property(readonly, nonatomic) _Bool isDefaultPairedDevice;
@property(readonly, nonatomic) _Bool locallyPresent;
@property(readonly, nonatomic, getter=isNearby) _Bool nearby;
@property(readonly, copy) NSString *description;
@property(readonly, retain, nonatomic) NSString *service;
@property(readonly, retain, nonatomic) NSString *name;
@property(readonly, retain, nonatomic) NSString *modelIdentifier;
@property(readonly, nonatomic) NSString *productVersion;
@property(readonly, nonatomic) NSString *productName;
@property(readonly, nonatomic) NSString *productBuildVersion;
@property(readonly, retain, nonatomic) NSString *uniqueID;
- (void)_connect;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSDeviceConnection : NSObject <IDSDaemonListenerProtocol>
{
    NSString *_nsuuid;
    _Bool _isDefaultPairedDevice;
    NSString *_service;
    NSString *_serviceToken;
    int _socket;
    CDUnknownBlockType _openSocketCompletionHandler;
    NSObject<OS_dispatch_queue> *_openSocketCompletionHandlerQueue;
    NSString *_openSocketCompletionHandlerID;
    NSInputStream *_inputStreamForSocket;
    NSOutputStream *_outputStreamForSocket;
    _Bool _hasTimedOut;
}

- (void)_daemonDied:(id)arg1;
- (void)_cleanupCompletionBlock;
- (void)xpcObject:(id)arg1 objectContext:(id)arg2;
- (void)_close;
- (void)close;
- (void)setStreamPairWithInputStream:(id)arg1 outputStream:(id)arg2;
@property(readonly, retain, nonatomic) NSOutputStream *outputStream;
@property(readonly, retain, nonatomic) NSInputStream *inputStream;
@property(readonly, nonatomic) int socket;
- (void)_connect;
- (void)dealloc;
- (id)initWithDevice:(id)arg1 options:(id)arg2 completionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSIDQueryController : NSObject <IDSDaemonListenerProtocol>
{
    NSMutableDictionary *_listeners;
    NSMutableDictionary *_idStatusCache;
    NSMutableDictionary *_transactionIDToBlockMap;
    NSString *_rerouteService;
    NSObject<OS_xpc_object> *_connection;
    NSObject<OS_dispatch_queue> *_connectionQueue;
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_serviceToken;
    NSMapTable *_delegateToInfo;
    NSMutableDictionary *_listenerIDToServicesMap;
    id _delegateContext;
}

+ (void)initialize;
- (void)removeDelegate:(id)arg1 forService:(id)arg2 listenerID:(id)arg3;
- (void)addDelegate:(id)arg1 forService:(id)arg2 listenerID:(id)arg3 queue:(id)arg4;
- (_Bool)_flushQueryCacheForService:(id)arg1;
- (_Bool)_warmupQueryCacheForService:(id)arg1;
- (long long)_currentCachedIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3;
- (_Bool)_hasCacheForService:(id)arg1;
- (_Bool)currentIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)currentIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)refreshIDStatusForDestination:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)refreshIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 queue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (_Bool)_refreshIDStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 allowRefresh:(_Bool)arg4 queue:(id)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (void)_idStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 allowRenew:(_Bool)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)_setCurrentIDStatus:(long long)arg1 forDestination:(id)arg2 service:(id)arg3;
- (id)_delegateMapForListenerID:(id)arg1 service:(id)arg2;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1 delegateMap:(id)arg2;
- (id)_reroutedPrototypeService:(id)arg1;
- (void)_purgeIDStatusCache;
- (void)_purgeIDStatusCacheAfter:(double)arg1;
- (void)_updateCacheWithDictionary:(id)arg1 service:(id)arg2;
- (id)_cachedStatusForDestination:(id)arg1 service:(id)arg2;
- (id)_cacheForService:(id)arg1;
- (_Bool)_isListenerWithID:(id)arg1 listeningToService:(id)arg2;
- (void)dealloc;
- (id)initWithDelegateContext:(id)arg1 queue:(id)arg2;
- (id)init;
- (_Bool)removeListenerID:(id)arg1 forService:(id)arg2;
- (void)addListenerID:(id)arg1 forService:(id)arg2;
- (void)daemonDisconnected;
- (void)IDQueryCompletedWithFromURI:(id)arg1 idStatusUpdates:(id)arg2 service:(id)arg3 success:(_Bool)arg4 error:(id)arg5;
- (void)_connect;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (void)___oldDealloc;
- (id)__sendMessage:(id)arg1 queue:(id)arg2 reply:(CDUnknownBlockType)arg3 failBlock:(CDUnknownBlockType)arg4 waitForReply:(_Bool)arg5;
- (void)_requestStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)_requestCachedStatusForDestinations:(id)arg1 service:(id)arg2 listenerID:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)_requestCacheForService:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_disconnectFromQueryService;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSService : NSObject <IDSAccountControllerDelegate, IDSConnectionDelegatePrivate>
{
    IDSAccountController *_accountController;
    NSMutableDictionary *_uniqueIDToConnection;
    NSSet *_commands;
    NSString *_rerouteService;
    NSMapTable *_delegateToInfo;
    id _delegateContext;
    NSMutableDictionary *_protobufSelectors;
    NSMutableSet *_lastIsActiveSet;
    _Bool _everHadDelegate;
    unsigned int _listenerCaps;
}

- (id)deviceForFromID:(id)arg1;
- (id)uriForFromID:(id)arg1;
- (_Bool)cancelIdentifier:(id)arg1 error:(id *)arg2;
- (_Bool)sendServerMessage:(id)arg1 command:(id)arg2 fromAccount:(id)arg3;
- (_Bool)sendData:(id)arg1 priority:(long long)arg2 options:(id)arg3 identifier:(id *)arg4 error:(id *)arg5;
- (_Bool)sendData:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id *)arg6 error:(id *)arg7;
- (_Bool)sendProtobuf:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id *)arg6 error:(id *)arg7;
- (_Bool)sendMessage:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id *)arg6 error:(id *)arg7;
- (id)_sendingAccountForAccount:(id)arg1;
- (SEL)protobufActionForType:(unsigned short)arg1 isResponse:(_Bool)arg2;
- (void)setProtobufAction:(SEL)arg1 forProtobufType:(unsigned short)arg2 isResponse:(_Bool)arg3;
@property(readonly, copy, nonatomic) NSArray *devices;
@property(readonly, copy, nonatomic) NSSet *accounts;
@property(readonly, retain, nonatomic) IDSAccount *iCloudAccount;
@property(readonly, copy, nonatomic) NSString *serviceDomain;
- (void)connection:(id)arg1 account:(id)arg2 sessionInviteReceived:(id)arg3 fromID:(id)arg4 transportType:(id)arg5 options:(id)arg6 context:(id)arg7;
- (void)connection:(id)arg1 identifier:(id)arg2 hasBeenDeliveredWithContext:(id)arg3;
- (void)connection:(id)arg1 identifier:(id)arg2 didSendWithSuccess:(_Bool)arg3 error:(id)arg4;
- (void)connection:(id)arg1 identifier:(id)arg2 alternateCallbackID:(id)arg3 willSendToDestinations:(id)arg4 skippedDestinations:(id)arg5 registrationPropertyToDestinations:(id)arg6;
- (void)connection:(id)arg1 messageIdentifier:(id)arg2 alternateCallbackID:(id)arg3 updatedWithResponseCode:(long long)arg4 error:(id)arg5 lastCall:(_Bool)arg6;
- (void)connection:(id)arg1 nearbyDevicesChanged:(id)arg2;
- (void)connection:(id)arg1 devicesChanged:(id)arg2;
- (void)connection:(id)arg1 isActiveChanged:(_Bool)arg2;
- (void)connection:(id)arg1 incomingTopLevelMessage:(id)arg2 fromID:(id)arg3 messageContext:(id)arg4;
- (void)connection:(id)arg1 incomingProtobuf:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingMessage:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)connection:(id)arg1 incomingData:(id)arg2 fromID:(id)arg3 context:(id)arg4;
- (void)accountController:(id)arg1 accountDisabled:(id)arg2;
- (void)accountController:(id)arg1 accountEnabled:(id)arg2;
- (void)accountController:(id)arg1 accountRemoved:(id)arg2;
- (void)accountController:(id)arg1 accountAdded:(id)arg2;
- (void)_callIsActiveChanged;
- (void)_processAccountSet:(id)arg1;
- (void)_tearDownConnectionForUniqueID:(id)arg1;
- (void)_setupNewConnectionForAccount:(id)arg1;
- (void)_logConnectionMap;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1 group:(id)arg2;
- (void)_callDelegatesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (void)dealloc;
- (id)initWithService:(id)arg1 serviceDomain:(id)arg2 delegateContext:(id)arg3;
- (id)initWithService:(id)arg1 commands:(id)arg2 delegateContext:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _IDSSession : NSObject <IDSDaemonListenerProtocol, IDSBaseSocketPairConnectionDelegate>
{
    id _delegateContext;
    NSString *_uniqueID;
    NSString *_accountID;
    NSSet *_destinations;
    IDSBaseSocketPairConnection *_unreliableSocketPairConnection;
    CUTWeakReference *_delegate;
    NSObject<OS_dispatch_queue> *_queue;
    unsigned int _state;
    long long _transportType;
    int _socket;
    _Bool _isAudioEnabled;
    _Bool _isLegacy;
    long long _inviteTimeout;
    unsigned int _sessionEndedReason;
}

@property(readonly, nonatomic) unsigned int state; // @synthesize state=_state;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)xpcObject:(id)arg1 objectContext:(id)arg2;
- (void)session:(id)arg1 audioEnabled:(_Bool)arg2;
- (void)sessionEnded:(id)arg1 withReason:(unsigned int)arg2 error:(id)arg3;
- (void)sessionStarted:(id)arg1;
- (void)sessionEndReceived:(id)arg1 fromID:(id)arg2 withData:(id)arg3;
- (void)sessionMessageReceived:(id)arg1 fromID:(id)arg2 withData:(id)arg3;
- (void)sessionCancelReceived:(id)arg1 fromID:(id)arg2 withData:(id)arg3;
- (void)sessionDeclineReceived:(id)arg1 fromID:(id)arg2 withData:(id)arg3;
- (void)sessionAcceptReceived:(id)arg1 fromID:(id)arg2 withData:(id)arg3;
- (_Bool)sendData:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) unsigned int sessionEndedReason;
@property(nonatomic) long long inviteTimeout;
- (_Bool)getAudioEnabled;
- (void)setAudioEnabled:(_Bool)arg1;
- (void)sendSessionMessage:(id)arg1;
- (void)endSessionWithData:(id)arg1;
- (void)endSession;
- (void)declineInvitationWithData:(id)arg1;
- (void)declineInvitation;
- (void)acceptInvitationWithData:(id)arg1;
- (void)acceptInvitation;
- (void)cancelInvitationWithData:(id)arg1;
- (void)cancelInvitation;
- (void)sendInvitationWithData:(id)arg1 declineOnError:(_Bool)arg2;
- (void)sendInvitationWithOptions:(id)arg1;
- (void)_cleanupSocketPairConnections;
- (void)_setupSocketPairToDaemon;
- (void)_setupUnreliableSocketPairConnection;
@property(readonly, nonatomic) int socket;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)_callDelegateWithBlock:(CDUnknownBlockType)arg1;
- (void)_broadcastNewSessionToDaemon;
- (void)dealloc;
- (id)initWithAccount:(id)arg1 destinations:(id)arg2 transportType:(long long)arg3 delegateContext:(id)arg4;
- (id)initWithAccount:(id)arg1 destinations:(id)arg2 transportType:(long long)arg3 uniqueID:(id)arg4 delegateContext:(id)arg5;
- (id)_initWithAccount:(id)arg1 destinations:(id)arg2 transportType:(long long)arg3 uniqueID:(id)arg4 delegateContext:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

