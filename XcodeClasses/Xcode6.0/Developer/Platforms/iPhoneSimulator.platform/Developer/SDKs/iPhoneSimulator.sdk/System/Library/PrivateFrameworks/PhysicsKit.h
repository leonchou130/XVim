//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct PKCAether {
    struct vector<std::__1::weak_ptr<PKCField>, std::__1::allocator<std::__1::weak_ptr<PKCField>>> _field1;
};

struct PKCField;

struct PKCGrid {
    int _field1;
    int _field2;
    int _field3;
    struct Range _field4;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field5;
    struct vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))>> _field6;
    struct vector<int, std::__1::allocator<int>> _field7;
    struct vector<signed char, std::__1::allocator<signed char>> _field8;
};

struct PKCMechanics {
    struct b2World *_field1;
    struct vector<QuadTree *, std::__1::allocator<QuadTree *>> _field2;
};

struct PKCPathHolder;

struct PKContactListener {
    CDUnknownFunctionPointerType *_vptr$b2ContactListener;
    NSMutableDictionary *_contacts;
    id _contactDelegate;
};

struct PKDebugDrawPacket {
    struct vector<PKPoint, std::__1::allocator<PKPoint>> _linePoints;
    struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4>> _colors;
};

struct PKPath;

struct PKPhysicsShape {
    struct b2FixtureDef _field1;
    struct b2Fixture *_field2;
};

struct QuadTree;

struct Range {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
};

struct __hash_node<b2Contact *, void *>;

struct __hash_node<int, void *>;

struct __hash_node<unsigned long long, void *>;

struct __shared_weak_count;

struct b2Body {
    _Bool _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    int _field6;
    unsigned short _field7;
    int _field8;
    struct b2Transform _field9;
    struct b2Transform _field10;
    struct b2Sweep _field11;
    struct b2Vec2 _field12;
    float _field13;
    struct b2Vec2 _field14;
    float _field15;
    struct b2World *_field16;
    struct b2Body *_field17;
    struct b2Body *_field18;
    struct b2Fixture *_field19;
    int _field20;
    struct b2JointEdge *_field21;
    struct b2ContactEdge *_field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    float _field30;
    void *_field31;
};

struct b2BodyDef {
    _Bool _sk_affectedByGravity;
    unsigned int _sk_fieldCategoryBitMask;
    unsigned int _sk_categoryBitMask;
    unsigned int _sk_collisionBitMask;
    unsigned int _sk_intersectionCallbackBitMask;
    int type;
    struct b2Vec2 position;
    float angle;
    struct b2Vec2 linearVelocity;
    float angularVelocity;
    float charge;
    float linearDamping;
    float angularDamping;
    _Bool allowSleep;
    _Bool awake;
    _Bool fixedRotation;
    _Bool bullet;
    _Bool active;
    void *userData;
};

struct b2ContactEdge;

struct b2ContactListener;

struct b2ContactManager {
    struct b2ContactListener *_field1;
    int _field2;
    struct b2DynamicTree _field3;
    struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int>> _field4;
    struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> _field5;
    struct unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *>> _field6;
    int _field7;
};

struct b2DestructionListener;

struct b2DistanceJoint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct b2Joint *_field3;
    struct b2Joint *_field4;
    struct b2JointEdge _field5;
    struct b2JointEdge _field6;
    struct b2Body *_field7;
    struct b2Body *_field8;
    _Bool _field9;
    _Bool _field10;
    void *_field11;
    float _field12;
    float _field13;
    float _field14;
    struct b2Vec2 _field15;
    struct b2Vec2 _field16;
    float _field17;
    float _field18;
    float _field19;
    int _field20;
    int _field21;
    struct b2Vec2 _field22;
    struct b2Vec2 _field23;
    struct b2Vec2 _field24;
    struct b2Vec2 _field25;
    struct b2Vec2 _field26;
    float _field27;
    float _field28;
    float _field29;
    float _field30;
    float _field31;
};

struct b2DistanceJointDef {
    int type;
    void *userData;
    struct b2Body *bodyA;
    struct b2Body *bodyB;
    _Bool collideConnected;
    struct b2Vec2 localAnchorA;
    struct b2Vec2 localAnchorB;
    float length;
    float frequencyHz;
    float dampingRatio;
};

struct b2Draw;

struct b2DynamicTree {
    int _field1;
    struct b2TreeNode *_field2;
    int _field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    int _field7;
};

struct b2Fixture;

struct b2FixtureDef {
    struct b2Shape *_field1;
    void *_field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
};

struct b2Joint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct b2Joint *_field3;
    struct b2Joint *_field4;
    struct b2JointEdge _field5;
    struct b2JointEdge _field6;
    struct b2Body *_field7;
    struct b2Body *_field8;
    _Bool _field9;
    _Bool _field10;
    void *_field11;
};

struct b2JointDef {
    int _field1;
    void *_field2;
    struct b2Body *_field3;
    struct b2Body *_field4;
    _Bool _field5;
};

struct b2JointEdge {
    struct b2Body *_field1;
    struct b2Joint *_field2;
    struct b2JointEdge *_field3;
    struct b2JointEdge *_field4;
};

struct b2Mat33 {
    struct b2Vec3 _field1;
    struct b2Vec3 _field2;
    struct b2Vec3 _field3;
};

struct b2PrismaticJoint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct b2Joint *_field3;
    struct b2Joint *_field4;
    struct b2JointEdge _field5;
    struct b2JointEdge _field6;
    struct b2Body *_field7;
    struct b2Body *_field8;
    _Bool _field9;
    _Bool _field10;
    void *_field11;
    struct b2Vec2 _field12;
    struct b2Vec2 _field13;
    struct b2Vec2 _field14;
    struct b2Vec2 _field15;
    float _field16;
    struct b2Vec3 _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    _Bool _field23;
    _Bool _field24;
    int _field25;
    int _field26;
    int _field27;
    struct b2Vec2 _field28;
    struct b2Vec2 _field29;
    float _field30;
    float _field31;
    float _field32;
    float _field33;
    struct b2Vec2 _field34;
    struct b2Vec2 _field35;
    float _field36;
    float _field37;
    float _field38;
    float _field39;
    struct b2Mat33 _field40;
    float _field41;
};

struct b2PrismaticJointDef {
    int type;
    void *userData;
    struct b2Body *bodyA;
    struct b2Body *bodyB;
    _Bool collideConnected;
    struct b2Vec2 localAnchorA;
    struct b2Vec2 localAnchorB;
    struct b2Vec2 localAxisA;
    float referenceAngle;
    _Bool enableLimit;
    float lowerTranslation;
    float upperTranslation;
    _Bool enableMotor;
    float maxMotorForce;
    float motorSpeed;
};

struct b2RevoluteJoint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct b2Joint *_field3;
    struct b2Joint *_field4;
    struct b2JointEdge _field5;
    struct b2JointEdge _field6;
    struct b2Body *_field7;
    struct b2Body *_field8;
    _Bool _field9;
    _Bool _field10;
    void *_field11;
    struct b2Vec2 _field12;
    struct b2Vec2 _field13;
    struct b2Vec3 _field14;
    float _field15;
    _Bool _field16;
    float _field17;
    float _field18;
    _Bool _field19;
    float _field20;
    float _field21;
    float _field22;
    int _field23;
    int _field24;
    struct b2Vec2 _field25;
    struct b2Vec2 _field26;
    struct b2Vec2 _field27;
    struct b2Vec2 _field28;
    float _field29;
    float _field30;
    float _field31;
    float _field32;
    struct b2Mat33 _field33;
    float _field34;
    int _field35;
};

struct b2RevoluteJointDef {
    int type;
    void *userData;
    struct b2Body *bodyA;
    struct b2Body *bodyB;
    _Bool collideConnected;
    struct b2Vec2 localAnchorA;
    struct b2Vec2 localAnchorB;
    float referenceAngle;
    _Bool enableLimit;
    float lowerAngle;
    float upperAngle;
    _Bool enableMotor;
    float motorSpeed;
    float maxMotorTorque;
};

struct b2RopeJoint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct b2Joint *_field3;
    struct b2Joint *_field4;
    struct b2JointEdge _field5;
    struct b2JointEdge _field6;
    struct b2Body *_field7;
    struct b2Body *_field8;
    _Bool _field9;
    _Bool _field10;
    void *_field11;
    struct b2Vec2 _field12;
    struct b2Vec2 _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    int _field18;
    struct b2Vec2 _field19;
    struct b2Vec2 _field20;
    struct b2Vec2 _field21;
    struct b2Vec2 _field22;
    struct b2Vec2 _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    int _field29;
};

struct b2RopeJointDef {
    int type;
    void *userData;
    struct b2Body *bodyA;
    struct b2Body *bodyB;
    _Bool collideConnected;
    struct b2Vec2 localAnchorA;
    struct b2Vec2 localAnchorB;
    float maxLength;
};

struct b2Rot {
    float _field1;
    float _field2;
};

struct b2Shape;

struct b2StackAllocator {
    char _field1[102400];
    int _field2;
    int _field3;
    int _field4;
    struct b2StackEntry _field5[32];
    int _field6;
};

struct b2StackEntry {
    char *_field1;
    int _field2;
    _Bool _field3;
};

struct b2Sweep {
    struct b2Vec2 _field1;
    union b2Position _field2;
    union b2Position _field3;
    float _field4;
};

struct b2Transform {
    struct b2Vec2 _field1;
    struct b2Rot _field2;
};

struct b2TreeNode;

struct b2Vec2 {
    float x;
    float y;
};

struct b2Vec3 {
    float _field1;
    float _field2;
    float _field3;
};

struct b2WeldJoint {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct b2Joint *_field3;
    struct b2Joint *_field4;
    struct b2JointEdge _field5;
    struct b2JointEdge _field6;
    struct b2Body *_field7;
    struct b2Body *_field8;
    _Bool _field9;
    _Bool _field10;
    void *_field11;
    struct b2Vec2 _field12;
    struct b2Vec2 _field13;
    float _field14;
    struct b2Vec3 _field15;
    int _field16;
    int _field17;
    struct b2Vec2 _field18;
    struct b2Vec2 _field19;
    struct b2Vec2 _field20;
    struct b2Vec2 _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    struct b2Mat33 _field26;
};

struct b2WeldJointDef {
    int type;
    void *userData;
    struct b2Body *bodyA;
    struct b2Body *bodyB;
    _Bool collideConnected;
    struct b2Vec2 localAnchorA;
    struct b2Vec2 localAnchorB;
    float referenceAngle;
};

struct b2World {
    struct b2StackAllocator _field1;
    int _field2;
    struct b2ContactManager _field3;
    struct b2Body *_field4;
    struct b2Joint *_field5;
    int _field6;
    int _field7;
    struct PKCAether *_field8;
    _Bool _field9;
    struct b2DestructionListener *_field10;
    struct b2Draw *_field11;
    float _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    double _field17;
    float _field18;
    struct PKCMechanics _field19;
};

struct shared_ptr<PKCField> {
    struct PKCField *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<PKCGrid> {
    struct PKCGrid *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<PKCPathHolder> {
    struct PKCPathHolder *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<PKPath> {
    struct PKPath *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<QuadTree> {
    struct QuadTree *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<std::__1::__hash_node<b2Contact *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<b2Contact *, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *>*>>> {
        struct __hash_node<b2Contact *, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<int, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<int, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *>*>>> {
        struct __hash_node<int, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<int, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<unsigned long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> {
        struct __hash_node<unsigned long long, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *>> {
    struct __hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *>> {
        struct unique_ptr<std::__1::__hash_node<b2Contact *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *>*>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *>*> {
                struct __hash_node<b2Contact *, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<b2Contact *>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<b2Contact *>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int>> {
    struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int>> {
        struct unique_ptr<std::__1::__hash_node<int, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *>*>, std::__1::allocator<std::__1::__hash_node<int, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<int, void *>*> {
                struct __hash_node<int, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<int>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<int>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node<unsigned long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> {
                struct __hash_node<unsigned long long, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *>> {
    struct PKPhysicsShape **__begin_;
    struct PKPhysicsShape **__end_;
    struct __compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *>> {
        struct PKPhysicsShape **__first_;
    } __end_cap_;
};

struct vector<PKPoint, std::__1::allocator<PKPoint>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<QuadTree *, std::__1::allocator<QuadTree *>> {
    struct QuadTree **_field1;
    struct QuadTree **_field2;
    struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *>> {
        struct QuadTree **_field1;
    } _field3;
};

struct vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))>> {
    struct __compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))>> {
        void *_field1;
    } **_field1;
};

struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<signed char, std::__1::allocator<signed char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<signed char *, std::__1::allocator<signed char>> {
        char *_field1;
    } _field3;
};

struct vector<std::__1::weak_ptr<PKCField>, std::__1::allocator<std::__1::weak_ptr<PKCField>>> {
    struct weak_ptr<PKCField> *_field1;
    struct weak_ptr<PKCField> *_field2;
    struct __compressed_pair<std::__1::weak_ptr<PKCField>*, std::__1::allocator<std::__1::weak_ptr<PKCField>>> {
        struct weak_ptr<PKCField> *_field1;
    } _field3;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

struct weak_ptr<PKCField>;

#pragma mark Typedef'd Structures

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct CDStruct_183601bc;

typedef struct {
    CDStruct_b2fbf00d _field1;
    CDStruct_b2fbf00d _field2;
} CDStruct_c7fe8b62;

// Template types
typedef struct shared_ptr<PKCField> {
    struct PKCField *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_307a0f33;

typedef struct shared_ptr<PKCGrid> {
    struct PKCGrid *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c9c6a83f;

typedef struct shared_ptr<PKPath> {
    struct PKPath *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2aaf3a07;

typedef struct shared_ptr<QuadTree> {
    struct QuadTree *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_639e7c03;

typedef struct vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *>> {
    struct PKPhysicsShape **__begin_;
    struct PKPhysicsShape **__end_;
    struct __compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *>> {
        struct PKPhysicsShape **__first_;
    } __end_cap_;
} vector_4360c5cc;

#pragma mark Named Unions

union _GLKMatrix4 {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
        float _field10;
        float _field11;
        float _field12;
        float _field13;
        float _field14;
        float _field15;
        float _field16;
    } _field1;
    float _field2[16];
};

union b2Position {
    struct {
        struct b2Vec2 _field1;
        float _field2;
        float _field3;
    } _field1;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PhysicsKit.framework/PhysicsKit
// UUID: 091D483E-73C2-37E5-B728-32C127689D81
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 7.13.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

__attribute__((visibility("hidden")))
@interface BoxedPhysicsShape : NSObject
{
    int shapeType;
    NSArray *points;
}

+ (id)boxPhysicsShape:(struct PKPhysicsShape *)arg1;
- (void).cxx_destruct;
- (struct PKPhysicsShape *)unboxShape;

@end

@interface NSCoder (PKPath)
- (struct CGSize)decodeCGSizeForKey:(id)arg1;
- (struct CGVector)decodeCGVectorForKey:(id)arg1;
- (struct CGPoint)decodeCGPointForKey:(id)arg1;
- (void)encodeCGSize:(struct CGSize)arg1 forKey:(id)arg2;
- (void)encodeCGVector:(struct CGVector)arg1 forKey:(id)arg2;
- (void)encodeCGPoint:(struct CGPoint)arg1 forKey:(id)arg2;
@end

@interface NSValue (PKPath)
+ (id)valueWithCGPoint:(struct CGPoint)arg1;
- (struct CGPoint)CGPointValue;
@end

@interface PKPhysicsBody : NSObject <NSCopying, NSCoding>
{
    id <NSObject> _representedObject;
    struct b2BodyDef _bodyDef;
    struct b2Body *_body;
    struct PKCField *_field;
    int _dynamicType;
    vector_4360c5cc _shapes;
    PKPhysicsWorld *_world;
    NSMutableArray *_joints;
    _Bool _inUse;
    int _shapeType;
    shared_ptr_2aaf3a07 _pathPtr;
    shared_ptr_639e7c03 _quadTree;
    struct CGPoint _p0;
    struct CGPoint _p1;
    struct CGSize _size;
    double _radius;
    double _edgeRadius;
    struct CGImage *_mask;
    shared_ptr_2aaf3a07 _outline;
    _Bool _isPinned;
    _Bool _allowsRotation;
    CDUnknownBlockType _postStepBlock;
}

+ (id)bodyWithEdgeLoopFromPath:(struct CGPath *)arg1;
+ (id)bodyWithEdgeChainFromPath:(struct CGPath *)arg1;
+ (id)bodyWithPolygonFromPath:(struct CGPath *)arg1;
+ (id)bodyWithEdgeFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
+ (id)bodyWithRectangleOfSize:(struct CGSize)arg1 center:(struct CGPoint)arg2 edgeRadius:(double)arg3;
+ (id)bodyWithRectangleOfSize:(struct CGSize)arg1 center:(struct CGPoint)arg2;
+ (id)bodyWithRectangleOfSize:(struct CGSize)arg1 edgeRadius:(double)arg2;
+ (id)bodyWithRectangleOfSize:(struct CGSize)arg1;
+ (id)bodyWithCircleOfRadius:(double)arg1 center:(struct CGPoint)arg2;
+ (id)bodyWithCircleOfRadius:(double)arg1;
+ (id)bodyWithBodies:(id)arg1;
+ (id)initWithMarchingCubes:(struct PKCGrid *)arg1 pixelFrame:(struct CGRect)arg2;
+ (id)initWithQuadTree:(id)arg1;
+ (id)bodyWithOutline:(shared_ptr_2aaf3a07)arg1 offset:(struct CGPoint)arg2;
@property(copy, nonatomic) CDUnknownBlockType postStepBlock; // @synthesize postStepBlock=_postStepBlock;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)allContactedBodies;
- (id)description;
- (id)_descriptionFormat;
- (id)_descriptionClassName;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(nonatomic, getter=isDynamic) _Bool dynamic;
@property(nonatomic) double charge;
@property(nonatomic) double friction;
@property(nonatomic) double restitution;
@property(nonatomic) double radius;
- (void)reapplyScale:(double)arg1 yScale:(double)arg2;
@property(readonly, nonatomic) double area;
@property(nonatomic) double density;
@property(nonatomic) double mass;
@property(readonly, nonatomic) NSArray *joints;
@property(nonatomic, getter=isResting) _Bool resting;
@property(nonatomic) _Bool allowsRotation;
@property(nonatomic) double angularVelocity;
@property(nonatomic) struct CGVector velocity;
@property(nonatomic) unsigned int contactTestBitMask;
@property(nonatomic) unsigned int collisionBitMask;
@property(nonatomic) unsigned int fieldBitMask;
@property(nonatomic) unsigned int categoryBitMask;
@property(nonatomic) _Bool affectedByGravity;
@property(nonatomic) _Bool usesPreciseCollisionDetection;
- (void)applyUnscaledImpulse:(struct CGVector)arg1;
- (void)applyUnscaledImpulse:(struct CGVector)arg1 atPoint:(struct CGPoint)arg2;
- (void)applyUnscaledForce:(struct CGVector)arg1;
- (void)applyUnscaledForce:(struct CGVector)arg1 atPoint:(struct CGPoint)arg2;
- (void)applyAngularImpulse:(double)arg1;
- (void)applyImpulse:(struct CGVector)arg1;
- (void)applyImpulse:(struct CGVector)arg1 atPoint:(struct CGPoint)arg2;
- (void)applyTorque:(double)arg1;
- (void)applyForce:(struct CGPoint)arg1;
- (void)applyForce:(struct CGPoint)arg1 atPoint:(struct CGPoint)arg2;
@property(nonatomic) double angularDamping;
@property(nonatomic) double linearDamping;
@property(nonatomic) double rotation;
- (_Bool)_allowSleep;
- (void)set_allowSleep:(_Bool)arg1;
@property(nonatomic) struct CGPoint position;
@property(nonatomic) _Bool pinned;
@property(nonatomic) __weak id <NSObject> representedObject;
- (id)initWithEdgeLoopFromPath:(struct CGPath *)arg1;
- (id)initWithEdgeChainFromPath:(struct CGPath *)arg1;
- (id)initWithPolygonFromPath:(struct CGPath *)arg1;
- (id)initWithEdgeFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
- (id)initWithRectangleOfSize:(struct CGSize)arg1 center:(struct CGPoint)arg2 edgeRadius:(float)arg3;
- (id)initWithRectangleOfSize:(struct CGSize)arg1 center:(struct CGPoint)arg2;
- (id)initWithRectangleOfSize:(struct CGSize)arg1;
- (id)initWithCircleOfRadius:(double)arg1 center:(struct CGPoint)arg2;
- (id)initWithCircleOfRadius:(double)arg1;
- (id)initWithBodies:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)clearBox2DData;
@property(nonatomic) shared_ptr_2aaf3a07 outline;
@property(nonatomic) struct b2Body *_body;
@property(nonatomic) struct b2BodyDef _bodyDef;
- (void)set_inUse:(_Bool)arg1;
- (_Bool)_inUse;
- (void)set_joints:(id)arg1;
- (id)_joints;
- (shared_ptr_639e7c03)_quadTree;
- (id)_world;
- (void)set_world:(id)arg1;
- (void)setActive:(_Bool)arg1;
- (_Bool)active;
@property(readonly, nonatomic) vector_4360c5cc *_shapes;

@end

@interface PKPhysicsContact : NSObject
{
    PKPhysicsBody *_bodyA;
    PKPhysicsBody *_bodyB;
    struct CGPoint _contactPoint;
    struct CGVector _contactNormal;
    double _impulse;
    _Bool _didBegin;
    _Bool _didEnd;
}

- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) double collisionImpulse;
@property(readonly, nonatomic) struct CGVector contactNormal;
@property(readonly, nonatomic) struct CGPoint contactPoint;
@property(readonly, nonatomic) PKPhysicsBody *bodyB;
@property(readonly, nonatomic) PKPhysicsBody *bodyA;
- (void)setCollisionImpulse:(double)arg1;
- (void)setBodyB:(id)arg1;
- (void)setBodyA:(id)arg1;
- (void)setContactNormal:(struct CGVector)arg1;
- (void)setContactPoint:(struct CGPoint)arg1;
@property _Bool didEnd;
@property _Bool didBegin;
- (id)init;

@end

@interface PKPhysicsField : NSObject
{
    shared_ptr_307a0f33 _field;
    PKRegion *_region;
    // Error parsing type: , name: _position
    float _rotation;
    // Error parsing type: , name: _scale
    _Bool _override;
}

@property(nonatomic, getter=isOverride) _Bool override; // @synthesize override=_override;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) float minimumRadius;
// Error parsing type for property scale:
// Property attributes: T,N

@property(nonatomic) float rotation;
// Error parsing type for property position:
// Property attributes: T,N

- (void)setIsOverride:(_Bool)arg1;
- (_Bool)override;
@property(nonatomic) unsigned int categoryBitMask;
- (void)setActive:(_Bool)arg1;
- (_Bool)isActive;
@property(nonatomic, getter=isEnabled) _Bool enabled;
@property(nonatomic) float falloff;
// Error parsing type for property direction:
// Property attributes: T,N

@property(nonatomic) float strength;
@property(nonatomic) __weak id <NSObject> representedObject;
@property(retain, nonatomic) id region;
- (void)set_field:(shared_ptr_307a0f33)arg1;
- (shared_ptr_307a0f33)_field;
- (void)dealloc;
- (id)init;

@end

@interface PKPhysicsFieldCustomBlock : PKPhysicsField
{
    CDUnknownBlockType _batchBlock;
    CDUnknownBlockType _block;
}

+ (id)fieldWithCustomBatchBlock:(CDUnknownBlockType)arg1;
+ (id)fieldWithCustomBlock:(CDUnknownBlockType)arg1;
- (void).cxx_destruct;
- (id)initWithCustomBatchBlock:(CDUnknownBlockType)arg1;
- (id)initWithCustomBlock:(CDUnknownBlockType)arg1;

@end

@interface PKPhysicsFieldDrag : PKPhysicsField
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsFieldElectric : PKPhysicsField
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsFieldLinearGravity : PKPhysicsField
{
}

+ (id)field;
- (void)setDirection: /* Error: Ran out of types for this method. */;
-     // Error parsing type: 16@0:8, name: direction
- (id)init;

@end

@interface PKPhysicsFieldMagnetic : PKPhysicsField
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsFieldNoise : PKPhysicsField
{
}

+ (id)field;
@property(nonatomic) float animationSpeed;
@property(nonatomic) float smoothness;
- (id)initWithField:(shared_ptr_307a0f33)arg1;
- (id)init;

@end

@interface PKPhysicsFieldRadialGravity : PKPhysicsField
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsFieldSpring : PKPhysicsField
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsFieldTurbulence : PKPhysicsFieldNoise
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsFieldVelocity : PKPhysicsField
{
}

+ (id)fieldWithGrid:(id)arg1;
- (void)setGrid:(id)arg1;
- (id)initWithGrid:(id)arg1;

@end

@interface PKPhysicsFieldVortex : PKPhysicsField
{
}

+ (id)field;
- (id)init;

@end

@interface PKPhysicsGrid : NSObject
{
    shared_ptr_c9c6a83f grid;
    PKQuadTree *quadTree;
}

+ (id)vectorGridFromRGBAU8PixelData:(const char *)arg1 imageWidth:(int)arg2 imageHeight:(int)arg3 accuracy:(float)arg4;
+ (id)gridFromRGBAU8PixelData:(const char *)arg1 imageWidth:(int)arg2 imageHeight:(int)arg3 alphaThreshold:(float)arg4 accuracy:(float)arg5;
+ (id)gridFromOccupancyArray:(const char *)arg1 bytePitch:(int)arg2 width:(int)arg3 height:(int)arg4;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) shared_ptr_c9c6a83f gridPtr;
@property(readonly, nonatomic) int height;
@property(readonly, nonatomic) int width;
- (id)physicsBodyFromLVS0:(struct CGRect)arg1;
- (shared_ptr_2aaf3a07)pathFromOutlineWithSmoothingThreshold:(double)arg1 bounds:(CDStruct_c7fe8b62)arg2;
- (id)physicsBodyFromSmoothedOutline:(double)arg1 size:(struct CGSize)arg2;
- (unsigned char)gridDataAtX:(int)arg1 y:(int)arg2 z:(int)arg3;
- (_Bool)isGridRegionOccupied:(int)arg1 y:(int)arg2 width:(int)arg3 height:(int)arg4;

@end

@interface PKPhysicsJoint : NSObject <NSCoding>
{
    _Bool _inUse;
    _Bool _implicit;
    struct b2Joint *_baseJoint;
    PKPhysicsBody *_bodyA;
    PKPhysicsBody *_bodyB;
}

@property(retain, nonatomic) PKPhysicsBody *bodyB; // @synthesize bodyB=_bodyB;
@property(retain, nonatomic) PKPhysicsBody *bodyA; // @synthesize bodyA=_bodyA;
- (void).cxx_destruct;
@property(readonly, nonatomic) double reactionTorque;
@property(readonly, nonatomic) struct CGVector reactionForce;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)create;
@property(readonly, nonatomic) struct b2JointDef *_jointDef;
- (void)set_inUse:(_Bool)arg1;
- (_Bool)_inUse;
- (void)set_implicit:(_Bool)arg1;
- (_Bool)_implicit;
@property(nonatomic) struct b2Joint *_joint;

@end

@interface PKPhysicsJointDistance : PKPhysicsJoint
{
    struct b2DistanceJointDef _jointDef;
    struct b2DistanceJoint *_joint;
    struct CGPoint _anchorA;
    struct CGPoint _anchorB;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchorA:(struct CGPoint)arg3 anchorB:(struct CGPoint)arg4;
+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 localAnchorA:(struct CGPoint)arg3 localAnchorB:(struct CGPoint)arg4;
- (id).cxx_construct;
@property(nonatomic) _Bool collideConnected;
@property(nonatomic) double frequency;
@property(nonatomic) double length;
@property(nonatomic) double damping;
- (void)create;
- (struct b2JointDef *)_jointDef;
- (void)set_joint:(struct b2Joint *)arg1;
- (struct b2Joint *)_joint;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBodyA:(id)arg1 bodyB:(id)arg2 localAnchorA:(struct CGPoint)arg3 localAnchorB:(struct CGPoint)arg4;
- (id)initWithBodyA:(id)arg1 bodyB:(id)arg2 anchorA:(struct CGPoint)arg3 anchorB:(struct CGPoint)arg4;

@end

@interface PKPhysicsJointPrismatic : PKPhysicsJoint
{
    struct b2PrismaticJointDef _jointDef;
    struct b2PrismaticJoint *_joint;
    struct CGPoint _anchor;
    struct CGVector _axis;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3 axis:(struct CGVector)arg4;
- (id).cxx_construct;
- (void)create;
- (struct b2JointDef *)_jointDef;
- (void)set_joint:(struct b2Joint *)arg1;
- (struct b2Joint *)_joint;
@property(nonatomic) double upperDistanceLimit;
@property(nonatomic) double lowerDistanceLimit;
@property(nonatomic) _Bool shouldEnableLimits;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3 axis:(struct CGVector)arg4;

@end

@interface PKPhysicsJointRevolute : PKPhysicsJoint
{
    struct b2RevoluteJointDef _jointDef;
    struct b2RevoluteJoint *_joint;
    struct CGPoint _anchor;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3;
@property(readonly) struct CGPoint anchor; // @synthesize anchor=_anchor;
- (id).cxx_construct;
- (void)create;
- (struct b2JointDef *)_jointDef;
- (void)set_joint:(struct b2Joint *)arg1;
- (struct b2Joint *)_joint;
@property(nonatomic) double rotationSpeed;
@property(nonatomic) double frictionTorque;
@property(nonatomic) double upperAngleLimit;
@property(nonatomic) double lowerAngleLimit;
@property(nonatomic) _Bool shouldEnableLimits;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3;

@end

@interface PKPhysicsJointRope : PKPhysicsJoint
{
    struct b2RopeJointDef _jointDef;
    struct b2RopeJoint *_joint;
    struct CGPoint _anchorA;
    struct CGPoint _anchorB;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchorA:(struct CGPoint)arg3 anchorB:(struct CGPoint)arg4;
- (id).cxx_construct;
- (void)create;
- (struct b2JointDef *)_jointDef;
- (void)set_joint:(struct b2Joint *)arg1;
- (struct b2Joint *)_joint;
@property(nonatomic) double maxLength;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBodyA:(id)arg1 bodyB:(id)arg2 anchorA:(struct CGPoint)arg3 anchorB:(struct CGPoint)arg4;

@end

@interface PKPhysicsJointWeld : PKPhysicsJoint
{
    struct b2WeldJointDef _jointDef;
    struct b2WeldJoint *_joint;
    struct CGPoint _anchor;
}

+ (id)jointWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3;
- (id).cxx_construct;
- (void)create;
- (struct b2JointDef *)_jointDef;
- (void)set_joint:(struct b2Joint *)arg1;
- (struct b2Joint *)_joint;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBodyA:(id)arg1 bodyB:(id)arg2 anchor:(struct CGPoint)arg3;

@end

@interface PKPhysicsWorld : NSObject <NSCoding>
{
    struct b2World *_world;
    struct b2Vec2 _gravity;
    _Bool _doSleep;
    double _accumulatedDt;
    struct PKContactListener _contactListener;
    float _speed;
    NSMutableArray *_bodies;
    NSMutableArray *_joints;
    NSMutableArray *_postStepBlocks;
    struct PKDebugDrawPacket drawPacket;
}

+ (id)world;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)stepWithTime:(double)arg1 velocityIterations:(unsigned long long)arg2 positionIterations:(unsigned long long)arg3;
- (struct CGVector)evalForce:(unsigned int)arg1 point:(struct CGPoint)arg2;
-     // Error parsing type: 32@0:816, name: sampleFieldsAt:
- (struct CGVector)sampleFields:(struct CGPoint)arg1;
- (id)sampleFields:(struct CGRect)arg1 categories:(unsigned int)arg2 dataSize:(struct CGSize)arg3;
- (void)removeAllFields;
- (void)removeField:(id)arg1;
- (void)addField:(id)arg1;
- (void)removeAllJoints;
- (void)removeJoint:(id)arg1;
- (void)addJoint:(id)arg1;
- (void)removeAllBodies;
- (void)removeBody:(id)arg1;
- (void)addBody:(id)arg1;
- (id)joints;
- (id)bodies;
@property(nonatomic) id <PKPhysicsContactDelegate> contactDelegate;
- (id)collisionDelegate;
- (void)setCollisionDelegate:(id)arg1;
@property(nonatomic) struct CGVector gravity;
- (_Bool)hasFields;
- (_Bool)hasBodies;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)__init__;
- (void)encodeWithCoder:(id)arg1;
@property(nonatomic) double velocityThreshold;
@property(nonatomic) double speed;
- (id)bodyAlongRayStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2;
- (id)bodyInRect:(struct CGRect)arg1;
- (id)bodyAtPoint:(struct CGPoint)arg1;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint)arg1 end:(struct CGPoint)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)enumerateBodiesInRect:(struct CGRect)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateBodiesAtPoint:(struct CGPoint)arg1 usingBlock:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) struct PKCAether *aether;
- (const struct PKDebugDrawPacket *)debugDrawPacket;
- (void)debugDraw:(float)arg1 matrix:(union _GLKMatrix4)arg2 showsPhysics:(_Bool)arg3 showsOutlineInterior:(_Bool)arg4 showsFields:(_Bool)arg5;
- (void)_runBlockOutsideOfTimeStep:(CDUnknownBlockType)arg1;
@property(nonatomic) _Bool _doSleep;
@property(retain, nonatomic) NSMutableArray *_bodies;
@property(nonatomic) struct b2Vec2 _gravity;
@property(readonly, nonatomic) struct b2World *_world;

@end

__attribute__((visibility("hidden")))
@interface PKQuadTree : NSObject
{
    shared_ptr_639e7c03 quadTree;
}

- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface PKRegion : NSObject <NSCopying, NSCoding>
{
    int _shape;
    _Bool _isExclusive;
    // Error parsing type: {vec4="v"}, name: _halfExtent
    struct shared_ptr<PKCPathHolder> _path;
    int _regionOp;
    int _shape2;
    // Error parsing type: {vec4="v"}, name: _halfExtent2
    struct shared_ptr<PKCPathHolder> _path2;
}

+ (id)infiniteRegion;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)containsPoints:(const float *)arg1 locationStride:(long long)arg2 results:(char *)arg3 resultsStride:(long long)arg4 count:(int)arg5;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (id)regionByIntersectionWithRegion:(id)arg1;
- (id)regionByDifferenceFromRegion:(id)arg1;
- (id)regionByUnionWithRegion:(id)arg1;
- (id)inverseRegion;
- (id)initWithPath:(struct CGPath *)arg1;
- (id)initWithSize:(struct CGSize)arg1;
- (id)initWithRadius:(float)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, nonatomic) struct CGPath *path;

@end

