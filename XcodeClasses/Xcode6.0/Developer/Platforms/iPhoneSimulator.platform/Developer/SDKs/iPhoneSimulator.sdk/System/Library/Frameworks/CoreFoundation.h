//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Block_byref {
    void *_field1;
    struct Block_byref *_field2;
    int _field3;
    unsigned int _field4;
};

struct NSMethodFrameArgInfo {
    struct NSMethodFrameArgInfo *_field1;
    struct NSMethodFrameArgInfo *_field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned char _field7;
    char _field8;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned char _field9;
    char _field10[0];
};

struct _CFPrefsShmemEntry {
    unsigned int generation:31;
    unsigned int multiprocess:1;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct edge {
    unsigned long long _field1;
    unsigned long long _field2[2];
    unsigned long long _field3;
};

struct vertex {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long *_field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    long long version;
    void *info;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
} CDStruct_4210025a;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    struct NSMethodFrameArgInfo *_field1;
    struct NSMethodFrameArgInfo *_field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_52991635;

#pragma mark Typedef'd Unions

typedef union {
    struct _CFPrefsShmemEntry entry;
    int value;
} CDUnion_694411ff;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
// UUID: 3C24B4D9-8ABB-32E9-98B4-9E19E55117AD
//
//                           Arch: x86_64
//                Current version: 1140.1.0
//          Compatibility version: 150.0.0
//                 Source version: 1140.1.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSCacheDelegate <NSObject>

@optional
- (void)cache:(NSCache *)arg1 willEvictObject:(id)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSDiscardableContent
- (_Bool)isContentDiscarded;
- (void)discardContentIfPossible;
- (void)endContentAccess;
- (_Bool)beginContentAccess;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSStreamDelegate <NSObject>

@optional
- (void)stream:(NSStream *)arg1 handleEvent:(unsigned long long)arg2;
@end

__attribute__((visibility("hidden")))
@interface CFPDDataBuffer : NSObject
{
}

+ (id)newBufferFromPropertyList:(void *)arg1;
+ (id)newBufferFromFile:(int)arg1 allowMappingIfSafe:(_Bool)arg2;
+ (id)newBufferFromCFData:(struct __CFData *)arg1;
- (void *)copyPropertyListWithMutability:(unsigned long long)arg1;
- (id)copyXPCData;
- (struct __CFData *)copyCFData;
- (unsigned long long)length;
- (void *)bytes;

@end

__attribute__((visibility("hidden")))
@interface CFPDCFDataBuffer : CFPDDataBuffer
{
    struct __CFData *data;
}

- (struct __CFData *)copyCFData;
- (void)finalize;
- (void)dealloc;
- (unsigned long long)length;
- (void *)bytes;
- (id)initWithCFData:(struct __CFData *)arg1;

@end

__attribute__((visibility("hidden")))
@interface CFPDMMAPBuffer : CFPDDataBuffer
{
    void *bytes;
    unsigned long long length;
}

- (void)finalize;
- (void)dealloc;
- (unsigned long long)length;
- (void *)bytes;
- (id)initWithFileDescriptor:(int)arg1 size:(unsigned long long)arg2 allowMappingIfSafe:(_Bool)arg3;
- (id)initWithSize:(unsigned long long)arg1 bufferPtr:(void **)arg2;

@end

__attribute__((visibility("hidden")))
@interface CFPDSource : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    unsigned long long _inode;
    CFPDDataBuffer *_plist;
    struct __CFArray *_pendingChangesQueue;
    struct __CFString *_containerPath;
    struct __CFString *_userName;
    struct __CFString *_domain;
    const char *_actualPath;
    const char *_pathToTemporaryFileToWriteTo;
    unsigned int _lastEuid;
    unsigned int _lastEgid;
    unsigned short _mode;
    int _owner;
    short _generationShmemIndex;
    unsigned int _dirty:1;
    unsigned int _byHost:1;
    unsigned int _managed:1;
    unsigned int _neverCache:1;
    unsigned int _checkedForNonPrefsPlist:1;
    unsigned int _hasDrainedPendingChangesSinceLastReplyToOwner:1;
    unsigned int _waitingForDeviceUnlock:1;
}

+ (void)withSourceForDomain:(struct __CFString *)arg1 inContainer:(struct __CFString *)arg2 user:(struct __CFString *)arg3 byHost:(_Bool)arg4 managed:(_Bool)arg5 perform:(CDUnknownBlockType)arg6;
+ (void)synchronousWithSourceCache:(CDUnknownBlockType)arg1;
+ (void)withSourceCache:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)acceptMessage:(id)arg1;
- (int)validateMessage:(id)arg1 withNewKey:(struct __CFString *)arg2 newValue:(void *)arg3 currentPlistData:(id)arg4 containerPath:(const char *)arg5 diagnosticMessage:(const char **)arg6;
- (_Bool)validateSandboxForRead:(id)arg1 containerPath:(const char *)arg2;
- (_Bool)validateSandboxForWrite:(id)arg1 containerPath:(const char *)arg2 targetingContainer:(_Bool *)arg3;
- (_Bool)validateReadAccessToken:(int)arg1;
- (void)lockedSync:(CDUnknownBlockType)arg1;
- (void)lockedAsync:(CDUnknownBlockType)arg1;
- (void)clearCache;
- (struct __CFString *)debugDump;
- (void)enqueueNewKey:(struct __CFString *)arg1 value:(void *)arg2;
- (void)drainPendingChanges;
- (id)propertyList;
- (id)propertyListWithoutDrainingPendingChanges;
- (void)writeToDisk:(_Bool)arg1;
- (void)setPlist:(id)arg1;
- (void)setDirty:(_Bool)arg1;
- (void)updateShmemEntry;
- (_Bool)hasEverHadMultipleOwners;
- (short)shmemIndex;
- (void)noteAccessed;
- (void)autosync:(_Bool)arg1;
- (id)description;
- (_Bool)byHost;
- (void)removeOwner:(int)arg1;
- (void)addOwner:(id)arg1;
- (void)transitionToMultiOwner;
- (struct __CFString *)container;
- (struct __CFString *)user;
- (struct __CFString *)domain;
- (_Bool)managed;
- (id)initWithDomain:(struct __CFString *)arg1 userName:(struct __CFString *)arg2 container:(struct __CFString *)arg3 byHost:(_Bool)arg4 managed:(_Bool)arg5 shmemIndex:(short)arg6;
- (_Bool)getUncanonicalizedPath:(char *)arg1;
- (void)cacheActualAndTemporaryPathsWithEUID:(unsigned int)arg1 egid:(unsigned int)arg2;
- (void)cacheActualPathCreatingIfNecessary:(_Bool)arg1 euid:(unsigned int)arg2 egid:(unsigned int)arg3;
- (void)cacheActualPath;
- (_Bool)acceptLocalMessage:(id)arg1 withReply:(struct __CFDictionary *)arg2;
- (_Bool)clearCacheIfStale;
- (unsigned char)_backingPlistChangedSinceLastSync;

@end

__attribute__((visibility("hidden")))
@interface CFPrefsSource : NSObject
{
    struct __CFDictionary *_dict;
    long long _generationCount;
    CDUnion_694411ff *shmemEntry;
    struct _opaque_pthread_mutex_t *_lock;
    CDUnion_694411ff lastKnownShmemState;
}

+ (void)withNamedVolatileSourceForIdentifier:(struct __CFString *)arg1 perform:(CDUnknownBlockType)arg2;
+ (void)withSourceForIdentifier:(struct __CFString *)arg1 user:(struct __CFString *)arg2 byHost:(_Bool)arg3 container:(struct __CFString *)arg4 perform:(CDUnknownBlockType)arg5;
- (void)finalize;
- (void)dealloc;
- (struct __CFString *)container;
- (_Bool)isByHost;
- (struct __CFString *)domainIdentifier;
- (struct __CFString *)userIdentifier;
- (void)setAccessRestricted:(_Bool)arg1;
- (void)setDaemonCacheEnabled:(_Bool)arg1;
- (void)clearCache;
- (_Bool)managed;
- (void)unlock;
- (void)lock;
- (long long)generationCount;
- (long long)alreadylocked_generationCount;
- (void)handleReply:(id)arg1 toRequestNewDataMessage:(id)arg2 onConnection:(id)arg3 error:(_Bool *)arg4;
- (id)createRequestNewContentMessageForDaemon:(_Bool)arg1;
- (void)mergeIntoDictionary:(struct __CFDictionary *)arg1;
- (struct __CFDictionary *)copyDictionary;
- (struct __CFDictionary *)alreadylocked_copyDictionary;
- (struct __CFArray *)copyKeyList;
- (struct __CFArray *)alreadylocked_copyKeyList;
- (_Bool)synchronize;
- (_Bool)alreadylocked_requestNewData;
- (void *)copyValueForKey:(struct __CFString *)arg1;
- (void *)alreadylocked_copyValueForKey:(struct __CFString *)arg1;
- (void)removeAllValues;
- (void)alreadylocked_removeAllValues;
- (void)setValues:(const void **)arg1 forKeys:(const void **)arg2 count:(long long)arg3;
- (void)alreadylocked_setValues:(const void **)arg1 forKeys:(const void **)arg2 count:(long long)arg3;
- (void)setValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (void)alreadylocked_setValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CFPrefsPlistSource : CFPrefsSource
{
    NSObject<OS_dispatch_group> *_synchGroup;
    struct __CFString *userIdentifier;
    struct __CFString *domainIdentifier;
    struct __CFString *container;
    struct __CFDictionary *_locallySetDict;
    const char *accessPath;
    struct {
        unsigned int _isByHost:1;
        unsigned int _volatile:1;
        unsigned int _readonly:1;
        unsigned int _avoidsDaemonCache:1;
        unsigned int _restrictedAccess:1;
        unsigned int _checkedInvalidHome:1;
        unsigned int _lastWriteFailed:1;
    } _flags;
}

- (void)finalize;
- (void)dealloc;
- (void)_sharedCleanup;
- (long long)generationCount;
- (long long)alreadylocked_generationCount;
- (_Bool)synchronize;
- (_Bool)volatilizeIfInvalidHomeDir;
- (void)clearCache;
- (void)sendRequestNewDataMessage:(id)arg1 toConnection:(id)arg2 error:(_Bool *)arg3;
- (void)handleReply:(id)arg1 toRequestNewDataMessage:(id)arg2 onConnection:(id)arg3 error:(_Bool *)arg4;
- (id)createRequestNewContentMessageForDaemon:(_Bool)arg1;
- (_Bool)alreadylocked_requestNewData;
- (long long)sendMessageSettingValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (void)sendFullyPreparedMessage:(id)arg1 settingValue:(void *)arg2 forKey:(struct __CFString *)arg3;
- (void)addPIDImpersonationIfNecessary:(id)arg1;
- (_Bool)attachAccessTokenToMessage:(id)arg1;
- (_Bool)handleErrorReply:(id)arg1 fromMessageSettingKey:(struct __CFString *)arg2 toValue:(void *)arg3 retryContinuation:(CDUnknownBlockType)arg4;
- (_Bool)handleErrorReply:(id)arg1 retryContinuation:(CDUnknownBlockType)arg2;
- (id)createSynchronizeMessage;
- (void)alreadylocked_setValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (id)description;
- (struct __CFDictionary *)alreadylocked_copyDictionary;
- (struct __CFArray *)alreadylocked_copyKeyList;
- (void *)copyValueForKey:(struct __CFString *)arg1;
- (void)mergeIntoDictionary:(struct __CFDictionary *)arg1;
- (void *)alreadylocked_copyValueForKey:(struct __CFString *)arg1;
- (void)setDaemonCacheEnabled:(_Bool)arg1;
- (void)setAccessRestricted:(_Bool)arg1;
- (id)initWithDomain:(struct __CFString *)arg1 user:(struct __CFString *)arg2 byHost:(_Bool)arg3 containerPath:(struct __CFString *)arg4;
- (_Bool)isByHost;
- (struct __CFString *)container;
- (void)setContainer:(struct __CFString *)arg1;
- (void)setDomainIdentifier:(struct __CFString *)arg1;
- (struct __CFString *)domainIdentifier;
- (void)setUserIdentifier:(struct __CFString *)arg1;
- (struct __CFString *)userIdentifier;

@end

__attribute__((visibility("hidden")))
@interface CFPrefsDirectSource : CFPrefsPlistSource
{
    CFPDSource *_underlyingSource;
    _Bool _managed;
}

- (void)dealloc;
- (unsigned char)alreadylocked_requestNewData;
- (void)sendFullyPreparedMessage:(id)arg1 settingValue:(void *)arg2 forKey:(struct __CFString *)arg3;
- (_Bool)sendMessage:(id)arg1;
- (_Bool)managed;
- (void)setManaged:(_Bool)arg1;
- (void *)copyReplyForDirectMessage:(id)arg1 error:(_Bool *)arg2;
- (id)createRequestNewContentMessageForDaemon:(_Bool)arg1;

@end

__attribute__((visibility("hidden")))
@interface CFPrefsManagedSource : CFPrefsPlistSource
{
}

+ (void)withSourceForIdentifier:(struct __CFString *)arg1 user:(struct __CFString *)arg2 perform:(CDUnknownBlockType)arg3;
- (void)alreadylocked_setValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (long long)sendMessageSettingValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (_Bool)managed;
- (id)initWithDomain:(struct __CFString *)arg1 user:(struct __CFString *)arg2 byHost:(_Bool)arg3;

@end

__attribute__((visibility("hidden")))
@interface CFPrefsSearchListSource : CFPrefsSource
{
    struct __CFString *_identifier;
    struct __CFArray *_sourceList;
    struct _opaque_pthread_mutex_t *_searchListLock;
    _Bool initialized;
}

+ (void)withSuiteSearchListForIdentifier:(struct __CFString *)arg1 user:(struct __CFString *)arg2 locked:(_Bool)arg3 perform:(CDUnknownBlockType)arg4;
+ (void)withSnapshotSearchList:(CDUnknownBlockType)arg1;
+ (void)withSearchListForIdentifier:(struct __CFString *)arg1 container:(struct __CFString *)arg2 perform:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (void)finalize;
- (struct __CFString *)domainIdentifier;
- (void)replaceSource:(id)arg1 withSource:(id)arg2;
- (void)removeSource:(id)arg1;
- (void)addSource:(id)arg1;
- (void)freeze;
- (struct __CFDictionary *)alreadylocked_copyDictionary;
- (long long)generationCount;
- (long long)generationCountFromListOfSources:(id *)arg1 count:(long long)arg2 allowFetching:(_Bool)arg3;
- (id)createRequestNewContentMessageForDaemon:(_Bool)arg1;
- (void)handleReply:(id)arg1 toRequestNewDataMessage:(id)arg2 onConnection:(id)arg3 error:(_Bool *)arg4;
- (struct __CFArray *)alreadylocked_copyKeyList;
- (_Bool)synchronize;
- (_Bool)alreadylocked_requestNewData;
- (void)alreadylocked_setValue:(void *)arg1 forKey:(struct __CFString *)arg2;
- (void *)alreadylocked_copyValueForKey:(struct __CFString *)arg1;
- (void)addCompatibilitySource;
- (void)addNamedVolatileSourceForIdentifier:(struct __CFString *)arg1;
- (void)addSuiteSourceForIdentifier:(struct __CFString *)arg1 user:(struct __CFString *)arg2;
- (void)addSourceForIdentifier:(struct __CFString *)arg1 user:(struct __CFString *)arg2 byHost:(_Bool)arg3 container:(struct __CFString *)arg4;
- (void)addManagedSourceForIdentifier:(struct __CFString *)arg1 user:(struct __CFString *)arg2;
- (void)unlock;
- (void)lock;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithIdentifier:(struct __CFString *)arg1;

@end

@interface NSArray : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)arrayWithSet:(id)arg1;
+ (id)arrayWithSet:(id)arg1 copyItems:(_Bool)arg2;
+ (id)arrayWithOrderedSet:(id)arg1;
+ (id)arrayWithOrderedSet:(id)arg1 copyItems:(_Bool)arg2;
+ (id)arrayWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
+ (id)arrayWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
+ (id)arrayWithArray:(id)arg1;
+ (id)arrayWithArray:(id)arg1 copyItems:(_Bool)arg2;
+ (id)arrayWithArray:(id)arg1 range:(struct _NSRange)arg2;
+ (id)arrayWithArray:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
+ (id)arrayWithObjects:(id)arg1;
+ (id)newArrayWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
+ (id)array;
+ (id)arrayWithObject:(id)arg1;
+ (id)arrayWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)subarrayWithRange:(struct _NSRange)arg1;
- (id)arrayByExcludingToObjectsInArray:(id)arg1;
- (id)arrayByExcludingObjectsInArray:(id)arg1;
- (id)arrayByApplyingSelector:(SEL)arg1;
- (id)arrayByAddingObjectsFromArray:(id)arg1;
- (id)arrayByAddingObject:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithSet:(id)arg1;
- (id)initWithSet:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithOrderedSet:(id)arg1;
- (id)initWithOrderedSet:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (id)initWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
- (id)initWithArray:(id)arg1;
- (id)initWithArray:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithArray:(id)arg1 range:(struct _NSRange)arg2;
- (id)initWithArray:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
- (id)initWithObjects:(id)arg1;
- (id)initWithObject:(id)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)sortedArrayUsingSelector:(SEL)arg1;
- (id)sortedArrayUsingFunction:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2;
- (id)sortedArrayUsingComparator:(CDUnknownBlockType)arg1;
- (id)sortedArrayWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (id)sortedArrayFromRange:(struct _NSRange)arg1 options:(unsigned long long)arg2 usingComparator:(CDUnknownBlockType)arg3;
- (id)reversedArray;
- (id)reverseObjectEnumerator;
- (id)objectEnumerator;
- (id)objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)objectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)objectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (id)objectPassingTest:(CDUnknownBlockType)arg1;
- (id)objectWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)objectAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (id)objectsAtIndexes:(id)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (void)makeObjectsPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)makeObjectsPerformSelector:(SEL)arg1;
- (id)lastObject;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isEqualToArray:(id)arg1;
- (id)indexesOfObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)indexesOfObjectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)indexesOfObjectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (unsigned long long)indexOfObjectPassingTest:(CDUnknownBlockType)arg1;
- (unsigned long long)indexOfObjectWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (unsigned long long)indexOfObjectAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (unsigned long long)indexOfObject:(id)arg1 inSortedRange:(struct _NSRange)arg2 options:(unsigned long long)arg3 usingComparator:(CDUnknownBlockType)arg4;
- (id)indexesOfObjectIdenticalTo:(id)arg1;
- (id)indexesOfObjectIdenticalTo:(id)arg1 inRange:(struct _NSRange)arg2;
- (id)indexesOfObject:(id)arg1;
- (id)indexesOfObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (unsigned long long)indexOfObjectIdenticalTo:(id)arg1;
- (unsigned long long)indexOfObjectIdenticalTo:(id)arg1 inRange:(struct _NSRange)arg2;
- (unsigned long long)indexOfObject:(id)arg1;
- (unsigned long long)indexOfObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (unsigned long long)hash;
- (void)getObjects:(id *)arg1;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)firstObjectCommonWithArray:(id)arg1;
- (id)firstObject;
- (void)enumerateObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateObjectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (unsigned long long)countForObject:(id)arg1;
- (unsigned long long)countForObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (_Bool)containsObjectIdenticalTo:(id)arg1;
- (_Bool)containsObjectIdenticalTo:(id)arg1 inRange:(struct _NSRange)arg2;
- (_Bool)containsObject:(id)arg1;
- (_Bool)containsObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (id)componentsJoinedByString:(id)arg1;
- (id)allObjects;
- (_Bool)isNSArray__;
- (_Bool)_hasStrongReferences;
- (_Bool)_hasObjects;
- (unsigned long long)_cfTypeID;
- (id)objectAtIndex:(unsigned long long)arg1;
@property(readonly) unsigned long long count;

@end

@interface NSBlock : NSObject <NSCopying>
{
}

+ (id)alloc;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)performAfterDelay:(double)arg1;
- (void)invoke;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;

@end

@interface NSInvocation : NSObject
{
    void *_frame;
    void *_retdata;
    id _signature;
    id _container;
    unsigned char _retainedArgs;
    unsigned char _reserved[15];
}

+ (id)invocationWithMethodSignature:(id)arg1;
+ (id)_invocationWithMethodSignature:(id)arg1 frame:(void *)arg2;
- (void)invokeWithTarget:(id)arg1;
- (void)invokeSuper;
- (void)invokeUsingIMP:(CDUnknownFunctionPointerType)arg1;
- (void)invoke;
- (void)setArgument:(void *)arg1 atIndex:(long long)arg2;
- (void)getArgument:(void *)arg1 atIndex:(long long)arg2;
- (void)setReturnValue:(void *)arg1;
- (void)getReturnValue:(void *)arg1;
@property SEL selector;
@property id target;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_addAttachedObject:(id)arg1;
@property(readonly) _Bool argumentsRetained;
- (void)retainArguments;
@property(readonly, retain) NSMethodSignature *methodSignature;
- (void)dealloc;
- (id)init;

@end

@interface NSBlockInvocation : NSInvocation
{
}

- (void)invokeSuper;
- (void)invokeUsingIMP:(CDUnknownFunctionPointerType)arg1;
- (void)invoke;
- (void)setSelector:(SEL)arg1;
- (SEL)selector;

@end

@interface NSCache : NSObject
{
    id _delegate;
    void *_private[5];
    void *_reserved;
}

- (id)allObjects;
- (void)setEvictsObjectsWhenApplicationEntersBackground:(_Bool)arg1;
- (_Bool)evictsObjectsWhenApplicationEntersBackground;
@property _Bool evictsObjectsWithDiscardedContent;
@property unsigned long long countLimit;
@property unsigned long long totalCostLimit;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2 cost:(unsigned long long)arg3;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
@property id <NSCacheDelegate> delegate;
@property(copy) NSString *name;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface NSCalendar : NSObject <NSCopying, NSSecureCoding>
{
}

+ (id)calendarWithIdentifier:(id)arg1;
+ (id)currentCalendar;
+ (_Bool)supportsSecureCoding;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (void)initialize;
- (unsigned char)_diffComponents:(double)arg1:(double)arg2:(unsigned long long)arg3:(const char *)arg4:(struct __va_list_tag [1])arg5;
- (unsigned char)_addComponents:(double *)arg1:(unsigned long long)arg2:(const char *)arg3:(struct __va_list_tag [1])arg4;
- (unsigned char)_decomposeAbsoluteTime:(double)arg1:(const char *)arg2:(struct __va_list_tag [1])arg3;
- (unsigned char)_composeAbsoluteTime:(double *)arg1:(const char *)arg2:(struct __va_list_tag [1])arg3;
- (unsigned char)_rangeOfUnit:(unsigned long long)arg1 startTime:(double *)arg2 interval:(double *)arg3 forAT:(double)arg4;
- (long long)_ordinalityOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forAT:(double)arg3;
- (CDStruct_912cb5d2)_rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forAT:(double)arg3;
- (CDStruct_912cb5d2)_maximumRangeOfUnit:(unsigned long long)arg1;
- (CDStruct_912cb5d2)_minimumRangeOfUnit:(unsigned long long)arg1;
@property(readonly, copy) NSArray *shortStandaloneQuarterSymbols;
@property(readonly, copy) NSArray *standaloneQuarterSymbols;
@property(readonly, copy) NSArray *shortQuarterSymbols;
@property(readonly, copy) NSArray *quarterSymbols;
@property(readonly, copy) NSArray *veryShortStandaloneWeekdaySymbols;
@property(readonly, copy) NSArray *shortStandaloneWeekdaySymbols;
@property(readonly, copy) NSArray *standaloneWeekdaySymbols;
@property(readonly, copy) NSArray *veryShortWeekdaySymbols;
@property(readonly, copy) NSArray *veryShortStandaloneMonthSymbols;
@property(readonly, copy) NSArray *shortStandaloneMonthSymbols;
@property(readonly, copy) NSArray *standaloneMonthSymbols;
@property(readonly, copy) NSArray *veryShortMonthSymbols;
@property(readonly, copy) NSArray *longEraSymbols;
@property(readonly, copy) NSString *PMSymbol;
@property(readonly, copy) NSString *AMSymbol;
@property(readonly, copy) NSArray *shortWeekdaySymbols;
@property(readonly, copy) NSArray *weekdaySymbols;
@property(readonly, copy) NSArray *shortMonthSymbols;
@property(readonly, copy) NSArray *monthSymbols;
@property(readonly, copy) NSArray *eraSymbols;
- (id)_gregorianStartDate;
- (void)_setGregorianStartDate:(id)arg1;
- (id)_copyTimeZone;
- (id)_copyLocale;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)dateByAddingComponents:(id)arg1 toDate:(id)arg2 options:(unsigned long long)arg3;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2;
- (id)dateFromComponents:(id)arg1;
- (_Bool)rangeOfUnit:(unsigned long long)arg1 startDate:(id *)arg2 interval:(double *)arg3 forDate:(id)arg4;
- (unsigned long long)ordinalityOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)maximumRangeOfUnit:(unsigned long long)arg1;
- (struct _NSRange)minimumRangeOfUnit:(unsigned long long)arg1;
- (id)gregorianStartDate;
- (void)setGregorianStartDate:(id)arg1;
@property unsigned long long minimumDaysInFirstWeek;
@property unsigned long long firstWeekday;
@property(copy) NSTimeZone *timeZone;
@property(copy) NSLocale *locale;
@property(readonly, copy) NSString *calendarIdentifier;
- (id)initWithCalendarIdentifier:(id)arg1;
- (void)enumerateDatesStartingAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (_Bool)nextWeekendStartDate:(out id *)arg1 interval:(out double *)arg2 options:(unsigned long long)arg3 afterDate:(id)arg4;
- (_Bool)isDateInWeekend:(id)arg1;
- (_Bool)date:(id)arg1 matchesComponents:(id)arg2;
- (id)dateBySettingHour:(long long)arg1 minute:(long long)arg2 second:(long long)arg3 ofDate:(id)arg4 options:(unsigned long long)arg5;
- (id)dateBySettingHour:(long long)arg1 minute:(long long)arg2 second:(long long)arg3 toDate:(id)arg4 options:(unsigned long long)arg5;
- (id)dateBySettingUnit:(unsigned long long)arg1 value:(long long)arg2 ofDate:(id)arg3 options:(unsigned long long)arg4;
- (id)dateBySettingUnit:(unsigned long long)arg1 value:(long long)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)nextDateAfterDate:(id)arg1 matchingHour:(long long)arg2 minute:(long long)arg3 second:(long long)arg4 options:(unsigned long long)arg5;
- (id)nextDateAfterDate:(id)arg1 matchingUnit:(unsigned long long)arg2 value:(long long)arg3 options:(unsigned long long)arg4;
- (id)nextDateAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned long long)arg3;
- (id)dateByAddingUnit:(unsigned long long)arg1 value:(long long)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)components:(unsigned long long)arg1 fromDateComponents:(id)arg2 toDateComponents:(id)arg3 options:(unsigned long long)arg4;
- (_Bool)rangeOfWeekendStartDate:(out id *)arg1 interval:(out double *)arg2 containingDate:(id)arg3;
- (_Bool)isDateInTomorrow:(id)arg1;
- (_Bool)isDateInYesterday:(id)arg1;
- (_Bool)isDateInToday:(id)arg1;
- (_Bool)isDate:(id)arg1 inSameDayAsDate:(id)arg2;
- (_Bool)isDate:(id)arg1 equalToDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;
- (long long)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;
- (id)componentsInTimeZone:(id)arg1 fromDate:(id)arg2;
- (id)startOfDayForDate:(id)arg1;
- (id)dateWithEra:(long long)arg1 yearForWeekOfYear:(long long)arg2 weekOfYear:(long long)arg3 weekday:(long long)arg4 hour:(long long)arg5 minute:(long long)arg6 second:(long long)arg7 nanosecond:(long long)arg8;
- (id)dateWithEra:(long long)arg1 year:(long long)arg2 month:(long long)arg3 day:(long long)arg4 hour:(long long)arg5 minute:(long long)arg6 second:(long long)arg7 nanosecond:(long long)arg8;
- (long long)component:(unsigned long long)arg1 fromDate:(id)arg2;
- (void)getHour:(out long long *)arg1 minute:(out long long *)arg2 second:(out long long *)arg3 nanosecond:(out long long *)arg4 fromDate:(id)arg5;
- (void)getEra:(out long long *)arg1 yearForWeekOfYear:(out long long *)arg2 weekOfYear:(out long long *)arg3 weekday:(out long long *)arg4 fromDate:(id)arg5;
- (void)getEra:(out long long *)arg1 year:(out long long *)arg2 month:(out long long *)arg3 day:(out long long *)arg4 fromDate:(id)arg5;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (unsigned long long)_cfTypeID;
- (id)init;

@end

@interface NSData : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
{
}


// Remaining properties
@property(readonly) const void *bytes; // @dynamic bytes;
@property(readonly) unsigned long long length; // @dynamic length;
@end

@interface NSDate : NSObject <NSCopying, NSSecureCoding>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)dateWithString:(id)arg1;
+ (id)dateWithDate:(id)arg1;
+ (id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2;
+ (id)dateWithTimeIntervalSince1970:(double)arg1;
+ (id)dateWithTimeIntervalSinceNow:(double)arg1;
+ (id)dateWithTimeIntervalSinceReferenceDate:(double)arg1;
+ (id)date;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)distantPast;
+ (id)distantFuture;
+ (double)timeIntervalSinceReferenceDate;
- (long long)compare:(id)arg1 toUnitGranularity:(unsigned long long)arg2;
- (_Bool)isEqual:(id)arg1 toUnitGranularity:(unsigned long long)arg2;
- (_Bool)isInSameDayAsDate:(id)arg1;
- (_Bool)isInYesterday;
- (_Bool)isInTomorrow;
- (_Bool)isInToday;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)addTimeInterval:(double)arg1;
- (id)dateByAddingTimeInterval:(double)arg1;
- (id)initWithString:(id)arg1;
- (id)initWithDate:(id)arg1;
- (id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2;
- (id)initWithTimeIntervalSince1970:(double)arg1;
- (id)initWithTimeIntervalSinceNow:(double)arg1;
- (id)initWithTimeIntervalSinceReferenceDate:(double)arg1;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (_Bool)isEqualToDate:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (double)timeIntervalSince1970;
- (double)timeIntervalSinceNow;
- (double)timeIntervalSinceDate:(id)arg1;
- (id)laterDate:(id)arg1;
- (id)earlierDate:(id)arg1;
- (long long)compare:(id)arg1;
- (unsigned long long)_cfTypeID;
- (_Bool)isNSDate__;
@property(readonly) double timeIntervalSinceReferenceDate;

@end

@interface NSDateComponents : NSObject <NSCopying, NSSecureCoding>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)description;
- (_Bool)isValidDateInCalendar:(id)arg1;
@property(readonly, getter=isValidDate) _Bool validDate;
- (long long)valueForComponent:(unsigned long long)arg1;
- (void)setValue:(long long)arg1 forComponent:(unsigned long long)arg2;
@property(readonly, copy) NSDate *date;
@property(getter=isLeapMonth) _Bool leapMonth;
@property long long yearForWeekOfYear;
@property long long weekOfMonth;
@property long long weekOfYear;
@property long long nanosecond;
@property long long quarter;
@property long long weekdayOrdinal;
@property long long weekday;
- (void)setWeek:(long long)arg1;
@property long long second;
@property long long minute;
@property long long hour;
@property long long day;
@property long long month;
@property long long year;
@property long long era;
@property(copy) NSTimeZone *timeZone;
@property(copy) NSCalendar *calendar;
- (_Bool)isLeapMonthSet;
- (long long)week;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;

@end

@interface NSDictionary : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)dictionaryWithDictionary:(id)arg1;
+ (id)dictionaryWithDictionary:(id)arg1 copyItems:(_Bool)arg2;
+ (id)newDictionaryWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
+ (id)dictionaryWithObjects:(id)arg1 forKeys:(id)arg2;
+ (id)dictionaryWithObjectsAndKeys:(id)arg1;
+ (id)dictionary;
+ (id)dictionaryWithObject:(id)arg1 forKey:(id)arg2;
+ (id)dictionaryWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedKeySetForKeys:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)initWithDictionary:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithObjects:(id)arg1 forKeys:(id)arg2;
- (id)initWithObjectsAndKeys:(id)arg1;
- (id)initWithObject:(id)arg1 forKey:(id)arg2;
- (id)initWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (_Bool)__getValue:(id *)arg1 forKey:(id)arg2;
- (void)__apply:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2;
- (id)objectsForKeys:(id)arg1 notFoundMarker:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectEnumerator;
- (id)keysSortedByValueUsingSelector:(SEL)arg1;
- (id)keysSortedByValueUsingComparator:(CDUnknownBlockType)arg1;
- (id)keysSortedByValueWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (id)keysOfEntriesPassingTest:(CDUnknownBlockType)arg1;
- (id)keysOfEntriesWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)keyOfEntryPassingTest:(CDUnknownBlockType)arg1;
- (id)keyOfEntryWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isEqualToDictionary:(id)arg1;
- (id)invertedDictionary;
- (unsigned long long)hash;
- (void)getObjects:(id *)arg1;
- (void)getKeys:(id *)arg1;
- (void)getObjects:(id *)arg1 andKeys:(id *)arg2;
- (void)getObjects:(id *)arg1 andKeys:(id *)arg2 count:(unsigned long long)arg3;
- (void)enumerateKeysAndObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateKeysAndObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countForObject:(id)arg1;
- (unsigned long long)countForKey:(id)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (_Bool)containsObject:(id)arg1;
- (_Bool)containsKey:(id)arg1;
- (id)allValues;
- (id)allObjects;
- (id)allKeys;
- (id)allKeysForObject:(id)arg1;
- (_Bool)isNSDictionary__;
- (unsigned long long)_cfTypeID;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
@property(readonly) unsigned long long count;

@end

@interface NSEnumerator : NSObject <NSFastEnumeration>
{
}

- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)allObjects;
- (id)nextObject;

@end

@interface NSException : NSObject <NSCopying, NSCoding>
{
    NSString *name;
    NSString *reason;
    NSDictionary *userInfo;
    id reserved;
}

+ (void)raise:(id)arg1 format:(id)arg2;
+ (void)raise:(id)arg1 format:(id)arg2 arguments:(struct __va_list_tag [1])arg3;
+ (id)exceptionWithName:(id)arg1 reason:(id)arg2 userInfo:(id)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithName:(id)arg1 reason:(id)arg2 userInfo:(id)arg3;
- (id)init;
- (void)raise;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)_installStackTraceKeyIfNeeded;
@property(readonly, copy) NSArray *callStackSymbols;
@property(readonly, copy) NSArray *callStackReturnAddresses;
@property(readonly, copy) NSDictionary *userInfo;
@property(readonly, copy) NSString *reason;
@property(readonly, copy) NSString *name;

@end

@interface NSFileSecurity : NSObject <NSCopying, NSCoding>
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)_cfTypeID;

@end

@interface NSStream : NSObject
{
}


// Remaining properties
@property id <NSStreamDelegate> delegate; // @dynamic delegate;
@property(readonly, copy) NSError *streamError; // @dynamic streamError;
@property(readonly) unsigned long long streamStatus; // @dynamic streamStatus;
@end

@interface NSInputStream : NSStream
{
}


// Remaining properties
@property(readonly) _Bool hasBytesAvailable; // @dynamic hasBytesAvailable;
@end

@interface NSLocale : NSObject <NSCopying, NSSecureCoding>
{
}

+ (id)internetServicesRegion;
+ (unsigned long long)lineDirectionForLanguage:(id)arg1;
+ (unsigned long long)characterDirectionForLanguage:(id)arg1;
+ (unsigned int)windowsLocaleCodeFromLocaleIdentifier:(id)arg1;
+ (id)localeIdentifierFromWindowsLocaleCode:(unsigned int)arg1;
+ (id)canonicalLanguageIdentifierFromString:(id)arg1;
+ (id)canonicalLocaleIdentifierFromString:(id)arg1;
+ (id)localeIdentifierFromComponents:(id)arg1;
+ (id)componentsFromLocaleIdentifier:(id)arg1;
+ (id)preferredLanguages;
+ (id)commonISOCurrencyCodes;
+ (id)ISOCurrencyCodes;
+ (id)ISOCountryCodes;
+ (id)ISOLanguageCodes;
+ (id)availableLocaleIdentifiers;
+ (id)localeWithLocaleIdentifier:(id)arg1;
+ (id)currentLocale;
+ (id)systemLocale;
+ (_Bool)supportsSecureCoding;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)_prefs;
- (id)_copyDisplayNameForKey:(id)arg1 value:(id)arg2;
- (id)initWithLocaleIdentifier:(id)arg1;
- (id)identifier;
- (id)localeIdentifier;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (unsigned long long)_cfTypeID;
- (void)_setNullLocale;
- (unsigned char)_nullLocale;
- (id)init;
- (id)displayNameForKey:(id)arg1 value:(id)arg2;
- (id)objectForKey:(id)arg1;

@end

@interface NSMethodSignature : NSObject
{
    void *_private;
    void *_reserved[6];
}

+ (id)signatureWithObjCTypes:(const char *)arg1;
- (id)debugDescription;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (_Bool)_isHiddenStructRet;
@property(readonly) unsigned long long methodReturnLength;
@property(readonly) const char *methodReturnType;
- (_Bool)isOneway;
@property(readonly) unsigned long long frameLength;
- (const char *)getArgumentTypeAtIndex:(unsigned long long)arg1;
@property(readonly) unsigned long long numberOfArguments;
- (id)_protocolsForObjectAtArgumentIndex:(long long)arg1;
- (Class)_classForObjectAtArgumentIndex:(long long)arg1;
- (id)_signatureForBlockAtArgumentIndex:(long long)arg1;
- (id)_typeString;
- (struct NSMethodFrameArgInfo *)_argInfo:(long long)arg1;
- (CDStruct_52991635 *)_frameDescriptor;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface NSMutableArray : NSArray
{
}

+ (id)arrayWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;
- (void)sortUsingSelector:(SEL)arg1;
- (void)sortUsingFunction:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2 range:(struct _NSRange)arg3;
- (void)sortUsingFunction:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2;
- (void)sortUsingComparator:(CDUnknownBlockType)arg1;
- (void)sortWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (void)sortRange:(struct _NSRange)arg1 options:(unsigned long long)arg2 usingComparator:(CDUnknownBlockType)arg3;
- (void)setSet:(id)arg1;
- (void)setOrderedSet:(id)arg1;
- (void)setArray:(id)arg1;
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (void)setObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)rollObjectsInRange:(struct _NSRange)arg1 by:(long long)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromSet:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromOrderedSet:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromOrderedSet:(id)arg2 range:(struct _NSRange)arg3;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromArray:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromArray:(id)arg2 range:(struct _NSRange)arg3;
- (void)replaceObjectsAtIndexes:(id)arg1 withObjects:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjects:(const id *)arg2 count:(unsigned long long)arg3;
- (void)replaceObject:(id)arg1;
- (void)replaceObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (void)removeObjectsPassingTest:(CDUnknownBlockType)arg1;
- (void)removeObjectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (void)removeObjectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (void)removeObjectsInSet:(id)arg1;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inSet:(id)arg2;
- (void)removeObjectsInOrderedSet:(id)arg1;
- (void)removeObjectsInOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inOrderedSet:(id)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inOrderedSet:(id)arg2 range:(struct _NSRange)arg3;
- (void)removeObjectsInArray:(id)arg1;
- (void)removeObjectsInArray:(id)arg1 range:(struct _NSRange)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inArray:(id)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inArray:(id)arg2 range:(struct _NSRange)arg3;
- (void)removeObjectsAtIndexes:(id)arg1;
- (void)removeObjectIdenticalTo:(id)arg1;
- (void)removeObjectIdenticalTo:(id)arg1 inRange:(struct _NSRange)arg2;
- (void)removeObject:(id)arg1;
- (void)removeObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1;
- (void)removeLastObject;
- (void)removeFirstObject;
- (void)removeAllObjects;
- (void)moveObjectsAtIndexes:(id)arg1 toIndex:(unsigned long long)arg2;
- (void)insertObjects:(id)arg1 atIndexes:(id)arg2;
- (void)insertObjectsFromSet:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertObjectsFromOrderedSet:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertObjectsFromOrderedSet:(id)arg1 range:(struct _NSRange)arg2 atIndex:(unsigned long long)arg3;
- (void)insertObjectsFromArray:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertObjectsFromArray:(id)arg1 range:(struct _NSRange)arg2 atIndex:(unsigned long long)arg3;
- (void)insertObjects:(const id *)arg1 count:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)exchangeObjectAtIndex:(unsigned long long)arg1 withObjectAtIndex:(unsigned long long)arg2;
- (void)addObjectsFromSet:(id)arg1;
- (void)addObjectsFromOrderedSet:(id)arg1;
- (void)addObjectsFromOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (void)addObjectsFromArray:(id)arg1;
- (void)addObjectsFromArray:(id)arg1 range:(struct _NSRange)arg2;
- (void)addObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (void)_mutate;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;

@end

@interface NSMutableData : NSData
{
}


// Remaining properties
@property unsigned long long length; // @dynamic length;
@property(readonly) void *mutableBytes; // @dynamic mutableBytes;
@end

@interface NSMutableDictionary : NSDictionary
{
}

+ (id)dictionaryWithCapacity:(unsigned long long)arg1;
+ (id)dictionaryWithSharedKeySet:(id)arg1;
- (id)initWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
- (id)initWithCapacity:(unsigned long long)arg1;
- (void)__setObject:(id)arg1 forKey:(id)arg2;
- (void)__addObject:(id)arg1 forKey:(id)arg2;
- (void)setDictionary:(id)arg1;
- (void)setObjects:(id)arg1 forKeys:(id)arg2;
- (void)setObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setEntriesFromDictionary:(id)arg1;
- (void)replaceObjects:(id)arg1 forKeys:(id)arg2;
- (void)replaceObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
- (void)replaceObject:(id)arg1 forKey:(id)arg2;
- (void)removeObjectsForKeys:(id)arg1;
- (void)removeKeysForObject:(id)arg1;
- (void)removeEntriesPassingTest:(CDUnknownBlockType)arg1;
- (void)removeEntriesWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (void)removeEntriesInDictionary:(id)arg1;
- (void)removeAllObjects;
- (void)invert;
- (void)addObjects:(id)arg1 forKeys:(id)arg2;
- (void)addObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
- (void)addObject:(id)arg1 forKey:(id)arg2;
- (void)addEntriesFromDictionary:(id)arg1;
- (void)_mutate;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;

@end

@interface NSOrderedSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)orderedSetWithSet:(id)arg1;
+ (id)orderedSetWithSet:(id)arg1 copyItems:(_Bool)arg2;
+ (id)orderedSetWithOrderedSet:(id)arg1;
+ (id)orderedSetWithOrderedSet:(id)arg1 copyItems:(_Bool)arg2;
+ (id)orderedSetWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
+ (id)orderedSetWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
+ (id)orderedSetWithArray:(id)arg1;
+ (id)orderedSetWithArray:(id)arg1 copyItems:(_Bool)arg2;
+ (id)orderedSetWithArray:(id)arg1 range:(struct _NSRange)arg2;
+ (id)orderedSetWithArray:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
+ (id)orderedSetWithObjects:(id)arg1;
+ (id)newOrderedSetWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
+ (id)orderedSet;
+ (id)orderedSetWithObject:(id)arg1;
+ (id)orderedSetWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (Class)classForCoder;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithSet:(id)arg1;
- (id)initWithSet:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithOrderedSet:(id)arg1;
- (id)initWithOrderedSet:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (id)initWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
- (id)initWithArray:(id)arg1;
- (id)initWithArray:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithArray:(id)arg1 range:(struct _NSRange)arg2;
- (id)initWithArray:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
- (id)initWithObjects:(id)arg1;
- (id)initWithObject:(id)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)sortedArrayUsingComparator:(CDUnknownBlockType)arg1;
- (id)sortedArrayWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (id)sortedArrayFromRange:(struct _NSRange)arg1 options:(unsigned long long)arg2 usingComparator:(CDUnknownBlockType)arg3;
- (id)set;
- (id)array;
- (id)reversedOrderedSet;
- (id)reverseObjectEnumerator;
- (id)objectEnumerator;
- (id)objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)objectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)objectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (id)objectsAtIndexes:(id)arg1;
- (id)objectPassingTest:(CDUnknownBlockType)arg1;
- (id)objectWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)objectAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)lastObject;
- (_Bool)isSubsetOfSet:(id)arg1;
- (_Bool)isSubsetOfOrderedSet:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isEqualToOrderedSet:(id)arg1;
- (_Bool)intersectsSet:(id)arg1;
- (_Bool)intersectsOrderedSet:(id)arg1;
- (id)indexesOfObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)indexesOfObjectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)indexesOfObjectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (unsigned long long)indexOfObjectPassingTest:(CDUnknownBlockType)arg1;
- (unsigned long long)indexOfObjectWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (unsigned long long)indexOfObjectAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (unsigned long long)indexOfObject:(id)arg1 inSortedRange:(struct _NSRange)arg2 options:(unsigned long long)arg3 usingComparator:(CDUnknownBlockType)arg4;
- (unsigned long long)indexOfObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (unsigned long long)hash;
- (void)getObjects:(id *)arg1;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)firstObject;
- (void)enumerateObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateObjectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (unsigned long long)countForObject:(id)arg1;
- (unsigned long long)countForObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (_Bool)containsObject:(id)arg1;
- (_Bool)containsObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (id)allObjects;
- (_Bool)isNSOrderedSet__;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfObject:(id)arg1;
@property(readonly) unsigned long long count;

@end

@interface NSMutableOrderedSet : NSOrderedSet
{
}

+ (id)orderedSetWithCapacity:(unsigned long long)arg1;
- (Class)classForCoder;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;
- (void)unionSet:(id)arg1;
- (void)unionOrderedSet:(id)arg1;
- (void)sortUsingComparator:(CDUnknownBlockType)arg1;
- (void)sortWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (void)sortRange:(struct _NSRange)arg1 options:(unsigned long long)arg2 usingComparator:(CDUnknownBlockType)arg3;
- (void)setSet:(id)arg1;
- (void)setOrderedSet:(id)arg1;
- (void)setArray:(id)arg1;
- (void)setObject:(id)arg1;
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (void)setObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)rollObjectsInRange:(struct _NSRange)arg1 by:(long long)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromSet:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromOrderedSet:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromOrderedSet:(id)arg2 range:(struct _NSRange)arg3;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromArray:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjectsFromArray:(id)arg2 range:(struct _NSRange)arg3;
- (void)replaceObjectsAtIndexes:(id)arg1 withObjects:(id)arg2;
- (void)replaceObjectsInRange:(struct _NSRange)arg1 withObjects:(const id *)arg2 count:(unsigned long long)arg3;
- (void)replaceObject:(id)arg1;
- (void)replaceObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (void)removeObjectsPassingTest:(CDUnknownBlockType)arg1;
- (void)removeObjectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (void)removeObjectsAtIndexes:(id)arg1 options:(unsigned long long)arg2 passingTest:(CDUnknownBlockType)arg3;
- (void)removeObjectsInSet:(id)arg1;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inSet:(id)arg2;
- (void)removeObjectsInOrderedSet:(id)arg1;
- (void)removeObjectsInOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inOrderedSet:(id)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inOrderedSet:(id)arg2 range:(struct _NSRange)arg3;
- (void)removeObjectsInArray:(id)arg1;
- (void)removeObjectsInArray:(id)arg1 range:(struct _NSRange)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inArray:(id)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1 inArray:(id)arg2 range:(struct _NSRange)arg3;
- (void)removeObjectsAtIndexes:(id)arg1;
- (void)removeObject:(id)arg1;
- (void)removeObject:(id)arg1 inRange:(struct _NSRange)arg2;
- (void)removeObjectsInRange:(struct _NSRange)arg1;
- (void)removeLastObject;
- (void)removeFirstObject;
- (void)removeAllObjects;
- (void)minusSet:(id)arg1;
- (void)minusOrderedSet:(id)arg1;
- (void)moveObjectsAtIndexes:(id)arg1 toIndex:(unsigned long long)arg2;
- (void)intersectSet:(id)arg1;
- (void)intersectOrderedSet:(id)arg1;
- (void)insertObjects:(id)arg1 atIndexes:(id)arg2;
- (void)insertObjectsFromSet:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertObjectsFromOrderedSet:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertObjectsFromOrderedSet:(id)arg1 range:(struct _NSRange)arg2 atIndex:(unsigned long long)arg3;
- (void)insertObjectsFromArray:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertObjectsFromArray:(id)arg1 range:(struct _NSRange)arg2 atIndex:(unsigned long long)arg3;
- (void)insertObjects:(const id *)arg1 count:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)exchangeObjectAtIndex:(unsigned long long)arg1 withObjectAtIndex:(unsigned long long)arg2;
- (void)addObjectsFromSet:(id)arg1;
- (void)addObjectsFromOrderedSet:(id)arg1;
- (void)addObjectsFromOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (void)addObjectsFromArray:(id)arg1;
- (void)addObjectsFromArray:(id)arg1 range:(struct _NSRange)arg2;
- (void)addObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (void)_mutate;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;

@end

@interface NSSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)setWithSet:(id)arg1;
+ (id)setWithSet:(id)arg1 copyItems:(_Bool)arg2;
+ (id)setWithOrderedSet:(id)arg1;
+ (id)setWithOrderedSet:(id)arg1 copyItems:(_Bool)arg2;
+ (id)setWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
+ (id)setWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
+ (id)setWithArray:(id)arg1;
+ (id)setWithArray:(id)arg1 copyItems:(_Bool)arg2;
+ (id)setWithArray:(id)arg1 range:(struct _NSRange)arg2;
+ (id)setWithArray:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
+ (id)setWithObjects:(id)arg1;
+ (id)newSetWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
+ (id)set;
+ (id)setWithObject:(id)arg1;
+ (id)setWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)setByAddingObjectsFromSet:(id)arg1;
- (id)setByAddingObjectsFromArray:(id)arg1;
- (id)setByAddingObject:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithSet:(id)arg1;
- (id)initWithSet:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithOrderedSet:(id)arg1;
- (id)initWithOrderedSet:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (id)initWithOrderedSet:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
- (id)initWithArray:(id)arg1;
- (id)initWithArray:(id)arg1 copyItems:(_Bool)arg2;
- (id)initWithArray:(id)arg1 range:(struct _NSRange)arg2;
- (id)initWithArray:(id)arg1 range:(struct _NSRange)arg2 copyItems:(_Bool)arg3;
- (id)initWithObjects:(id)arg1;
- (id)initWithObject:(id)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (_Bool)__getValue:(id *)arg1 forObj:(id)arg2;
- (void)__applyValues:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2;
- (id)sortedArrayUsingComparator:(CDUnknownBlockType)arg1;
- (id)sortedArrayWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (id)objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)objectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)objectPassingTest:(CDUnknownBlockType)arg1;
- (id)objectWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (id)members:(id)arg1 notFoundMarker:(id)arg2;
- (void)makeObjectsPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)makeObjectsPerformSelector:(SEL)arg1;
- (_Bool)isSubsetOfSet:(id)arg1;
- (_Bool)isSubsetOfOrderedSet:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isEqualToSet:(id)arg1;
- (_Bool)intersectsSet:(id)arg1;
- (_Bool)intersectsOrderedSet:(id)arg1;
- (unsigned long long)hash;
- (void)getObjects:(id *)arg1;
- (void)getObjects:(id *)arg1 count:(unsigned long long)arg2;
- (void)enumerateObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countForObject:(id)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (_Bool)containsObject:(id)arg1;
- (id)anyObject;
- (id)allObjects;
- (_Bool)isNSSet__;
- (unsigned long long)_cfTypeID;
- (id)objectEnumerator;
- (id)member:(id)arg1;
@property(readonly) unsigned long long count;

@end

@interface NSMutableSet : NSSet
{
}

+ (id)setWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;
- (void)unionSet:(id)arg1;
- (void)unionOrderedSet:(id)arg1;
- (void)setSet:(id)arg1;
- (void)setOrderedSet:(id)arg1;
- (void)setArray:(id)arg1;
- (void)setObject:(id)arg1;
- (void)replaceObject:(id)arg1;
- (void)removeObjectsPassingTest:(CDUnknownBlockType)arg1;
- (void)removeObjectsWithOptions:(unsigned long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (void)removeObjectsInSet:(id)arg1;
- (void)removeObjectsInOrderedSet:(id)arg1;
- (void)removeObjectsInOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (void)removeObjectsInArray:(id)arg1;
- (void)removeObjectsInArray:(id)arg1 range:(struct _NSRange)arg2;
- (void)removeAllObjects;
- (void)minusSet:(id)arg1;
- (void)minusOrderedSet:(id)arg1;
- (void)intersectSet:(id)arg1;
- (void)intersectOrderedSet:(id)arg1;
- (void)addObjectsFromSet:(id)arg1;
- (void)addObjectsFromOrderedSet:(id)arg1;
- (void)addObjectsFromOrderedSet:(id)arg1 range:(struct _NSRange)arg2;
- (void)addObjectsFromArray:(id)arg1;
- (void)addObjectsFromArray:(id)arg1 range:(struct _NSRange)arg2;
- (void)addObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (void)_mutate;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;

@end

@interface NSNull : NSObject <NSCopying, NSSecureCoding>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)null;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (unsigned long long)_cfTypeID;

@end

@interface NSObject (NSObject)
+ (void)finalize;
+ (void)dealloc;
+ (id)init;
+ (id)__allocWithZone_OA:(struct _NSZone *)arg1;
+ (id)_copyDescription;
+ (id)description;
+ (id)methodSignatureForSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)doesNotRecognizeSelector:(SEL)arg1;
+ (void)load;
- (void)__dealloc_zombie;
- (id)__autorelease_OA;
- (oneway void)__release_OA;
- (_Bool)___tryRetain_OA;
- (id)__retain_OA;
- (id)_copyDescription;
- (id)description;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)doesNotRecognizeSelector:(SEL)arg1;
@end

@interface NSObject (__NSCFType)
- (unsigned long long)_cfTypeID;
@end

@interface NSObject (__NSIsKinds)
- (_Bool)isNSValue__;
- (_Bool)isNSTimeZone__;
- (_Bool)isNSString__;
- (_Bool)isNSSet__;
- (_Bool)isNSOrderedSet__;
- (_Bool)isNSNumber__;
- (_Bool)isNSDictionary__;
- (_Bool)isNSDate__;
- (_Bool)isNSData__;
- (_Bool)isNSArray__;
@end

@interface NSOutputStream : NSStream
{
}


// Remaining properties
@property(readonly) _Bool hasSpaceAvailable; // @dynamic hasSpaceAvailable;
@end

@interface NSRunLoop : NSObject
{
    id _rl;
    id _dperf;
    id _perft;
    id _info;
    id _ports;
    void *_reserved[6];
}

@end

@interface NSSharedKeyDictionary : NSMutableDictionary
{
    NSSharedKeySet *_keyMap;
    unsigned long long _count;
    id *_values;
    CDUnknownFunctionPointerType _ifkIMP;
    NSMutableDictionary *_sideDic;
    unsigned long long _mutations;
}

+ (id)sharedKeyDictionaryWithKeySet:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)initWithKeySet:(id)arg1;
- (id)keySet;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)enumerateKeysAndObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (void)getObjects:(id *)arg1 andKeys:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;

@end

@interface NSSharedKeySet : NSObject <NSFastEnumeration, NSCopying, NSCoding>
{
    char *_g;
    unsigned char _select;
    void *_rankTable;
    double _c;
    unsigned int _M;
    unsigned int _factor;
    unsigned int _numKey;
    unsigned int *_seeds;
    id *_keys;
    NSSharedKeySet *_subSharedKeySet;
}

+ (id)keySetWithKeys:(id)arg1;
@property(retain) NSSharedKeySet *subSharedKeySet; // @synthesize subSharedKeySet=_subSharedKeySet;
@property id *keys; // @synthesize keys=_keys;
@property unsigned int *seeds; // @synthesize seeds=_seeds;
@property unsigned int numKey; // @synthesize numKey=_numKey;
@property unsigned int factor; // @synthesize factor=_factor;
@property unsigned int M; // @synthesize M=_M;
@property double c; // @synthesize c=_c;
@property void *rankTable; // @synthesize rankTable=_rankTable;
@property unsigned char select; // @synthesize select=_select;
@property char *g; // @synthesize g=_g;
- (unsigned long long)keySetCount;
- (void)finalize;
- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexForKey:(id)arg1;
- (id)allKeys;
- (unsigned long long)maximumIndex;
- (_Bool)isEmpty;
- (unsigned long long)count;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithKeys:(id *)arg1 count:(unsigned long long)arg2;
- (id)generateSubclassCode:(id)arg1 printChainOfKeySetIfPossible:(_Bool)arg2 printSpecialCode:(unsigned long long)arg3;

@end

__attribute__((visibility("hidden")))
@interface NSStringROMKeySet_Embedded : NSSharedKeySet
{
}

- (unsigned long long)indexForCString:(const char *)arg1 length:(unsigned long long)arg2 key:(const struct __CFString **)arg3;
- (_Bool)isEmpty;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithKeys:(id *)arg1 count:(unsigned long long)arg2;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface NSTaggedPointerString : NSObject
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)_setAsTaggedStringClass;
- (_Bool)getBytes:(void *)arg1 maxLength:(unsigned long long)arg2 usedLength:(unsigned long long *)arg3 encoding:(unsigned long long)arg4 options:(unsigned long long)arg5 range:(struct _NSRange)arg6 remainingRange:(struct _NSRange *)arg7;
- (_Bool)_getCString:(char *)arg1 maxLength:(unsigned long long)arg2 encoding:(unsigned int)arg3;
- (const char *)cStringUsingEncoding:(unsigned long long)arg1;
- (unsigned long long)smallestEncoding;
- (unsigned long long)fastestEncoding;
- (_Bool)_isCString;
- (const char *)_fastCStringContents:(_Bool)arg1;
- (const unsigned short *)_fastCharacterContents;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange)arg3 locale:(id)arg4;
- (_Bool)isEqualToString:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (const char *)UTF8String;
- (id)substringWithRange:(struct _NSRange)arg1;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (id)autorelease;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isNSString__;

@end

__attribute__((visibility("hidden")))
@interface NSTaggedPointerStringCStringContainer : NSObject
{
    char cString[16];
}

+ (id)taggedPointerStringCStringContainer;
- (oneway void)release;
- (id)retain;

@end

@interface NSTimeZone : NSObject <NSCopying, NSSecureCoding>
{
}

+ (_Bool)supportsSecureCoding;
+ (id)timeZoneForSecondsFromGMT:(long long)arg1;
+ (id)timeZoneWithAbbreviation:(id)arg1;
+ (id)timeZoneWithName:(id)arg1;
+ (id)timeZoneWithName:(id)arg1 data:(id)arg2;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)timeZoneDataVersion;
+ (void)setAbbreviationDictionary:(id)arg1;
+ (id)abbreviationDictionary;
+ (id)knownTimeZoneNames;
+ (id)localTimeZone;
+ (void)setDefaultTimeZone:(id)arg1;
+ (id)defaultTimeZone;
+ (void)resetSystemTimeZone;
+ (id)systemTimeZone;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1;
- (id)initWithName:(id)arg1 data:(id)arg2;
- (id)description;
- (_Bool)isEqualToTimeZone:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)localizedName:(long long)arg1 locale:(id)arg2;
- (id)nextDaylightSavingTimeTransition;
- (double)daylightSavingTimeOffset;
- (_Bool)isDaylightSavingTime;
- (id)abbreviation;
- (long long)secondsFromGMT;
- (unsigned long long)_cfTypeID;
- (_Bool)isNSTimeZone__;
- (id)nextDaylightSavingTimeTransitionAfterDate:(id)arg1;
- (double)daylightSavingTimeOffsetForDate:(id)arg1;
- (_Bool)isDaylightSavingTimeForDate:(id)arg1;
- (id)abbreviationForDate:(id)arg1;
- (long long)secondsFromGMTForDate:(id)arg1;
@property(readonly, copy) NSData *data;
@property(readonly, copy) NSString *name;

@end

@interface NSTimer : NSObject
{
}


// Remaining properties
@property(copy) NSDate *fireDate; // @dynamic fireDate;
@property(readonly) double timeInterval; // @dynamic timeInterval;
@property double tolerance; // @dynamic tolerance;
@property(readonly, retain) id userInfo; // @dynamic userInfo;
@property(readonly, getter=isValid) _Bool valid; // @dynamic valid;
@end

@interface NSURL : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_urlString;
    NSURL *_baseURL;
    void *_clients;
    void *_reserved;
}

+ (id)bookmarkDataWithContentsOfURL:(id)arg1 error:(id *)arg2;
+ (_Bool)writeBookmarkData:(id)arg1 toURL:(id)arg2 options:(unsigned long long)arg3 error:(id *)arg4;
+ (id)resourceValuesForKeys:(id)arg1 fromBookmarkData:(id)arg2;
+ (_Bool)supportsSecureCoding;
+ (id)__unurl;
- (void)stopAccessingSecurityScopedResource;
- (_Bool)startAccessingSecurityScopedResource;
- (id)bookmarkDataWithAliasRecord:(id)arg1;
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 includingResourceValuesForKeys:(id)arg2 relativeToURL:(id)arg3 error:(id *)arg4;
@property(readonly, copy) NSURL *filePathURL;
- (id)fileReferenceURL;
- (_Bool)isFileReferenceURL;
- (_Bool)checkResourceIsReachableAndReturnError:(id *)arg1;
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;
- (void)removeAllCachedResourceValues;
- (void)removeCachedResourceValueForKey:(id)arg1;
- (_Bool)setResourceValues:(id)arg1 error:(id *)arg2;
- (_Bool)setResourceValue:(id)arg1 forKey:(id)arg2 error:(id *)arg3;
- (id)resourceValuesForKeys:(id)arg1 error:(id *)arg2;
- (_Bool)getResourceValue:(out id *)arg1 forKey:(id)arg2 error:(out id *)arg3;

// Remaining properties
@property(readonly, copy) NSString *absoluteString; // @dynamic absoluteString;
@property(readonly, copy) NSURL *absoluteURL; // @dynamic absoluteURL;
@property(readonly, copy) NSURL *baseURL; // @dynamic baseURL;
@property(readonly) const char *fileSystemRepresentation; // @dynamic fileSystemRepresentation;
@property(readonly, getter=isFileURL) _Bool fileURL; // @dynamic fileURL;
@property(readonly, copy) NSString *fragment; // @dynamic fragment;
@property(readonly, copy) NSString *host; // @dynamic host;
@property(readonly, copy) NSString *parameterString; // @dynamic parameterString;
@property(readonly, copy) NSString *password; // @dynamic password;
@property(readonly, copy) NSString *path; // @dynamic path;
@property(readonly, copy) NSNumber *port; // @dynamic port;
@property(readonly, copy) NSString *query; // @dynamic query;
@property(readonly, copy) NSString *relativePath; // @dynamic relativePath;
@property(readonly, copy) NSString *relativeString; // @dynamic relativeString;
@property(readonly, copy) NSString *resourceSpecifier; // @dynamic resourceSpecifier;
@property(readonly, copy) NSString *scheme; // @dynamic scheme;
@property(readonly, copy) NSURL *standardizedURL; // @dynamic standardizedURL;
@property(readonly, copy) NSString *user; // @dynamic user;

@end

@interface NSUserDefaults : NSObject
{
    id _private;
    void *_reserved[4];
}

@end

__attribute__((visibility("hidden")))
@interface _CFPrefsSynchronizer : NSObject
{
    NSObject<OS_dispatch_source> *_synchTimer;
    struct __CFSet *_dirtySources;
    struct _opaque_pthread_mutex_t _CFPrefsDirtySourcesLock;
    _Bool _active;
}

+ (id)sharedInstance;
- (void)clear;
- (void)clear_alreadyLocked;
- (void)synchronize;
- (void)synchronizeAndWait;
- (void)noteDirtySource:(id)arg1;
- (void)disableTimer_alreadyLocked;
- (void)enableTimer_alreadyLocked;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _CFStreamDelegate : NSObject <NSStreamDelegate>
{
    unsigned long long _flags;
    CDStruct_4210025a _client;
    union {
        CDUnknownFunctionPointerType _rcb;
        CDUnknownFunctionPointerType _wcb;
        CDUnknownFunctionPointerType genericCallback;
        void *genericPointer;
    } _cb;
}

- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)dealloc;
- (id)initWithStreamEvents:(unsigned long long)arg1 callback:(void *)arg2 context:(CDStruct_4210025a *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _NSSharedKeySetS : NSObject <NSCopying>
{
    char *_g;
    unsigned char _select;
    void *_rankTable;
    double _c;
    unsigned int _M;
    unsigned int _factor;
    unsigned int _numKey;
    unsigned int *_seeds;
    unsigned short (*_keys1)[1];
    unsigned short (*_keys2)[2];
    unsigned short (*_keys3)[3];
    unsigned char (*_ckeys)[3];
    _NSSharedKeySetS *_subSharedKeySet;
    unsigned int _keyLen;
    unsigned int _type;
}

@property unsigned int type; // @synthesize type=_type;
@property unsigned int keyLen; // @synthesize keyLen=_keyLen;
@property(retain) _NSSharedKeySetS *subSharedKeySet; // @synthesize subSharedKeySet=_subSharedKeySet;
@property unsigned char (*ckeys)[3]; // @synthesize ckeys=_ckeys;
@property unsigned short (*keys3)[3]; // @synthesize keys3=_keys3;
@property unsigned short (*keys2)[2]; // @synthesize keys2=_keys2;
@property unsigned short (*keys1)[1]; // @synthesize keys1=_keys1;
@property unsigned int *seeds; // @synthesize seeds=_seeds;
@property unsigned int numKey; // @synthesize numKey=_numKey;
@property unsigned int factor; // @synthesize factor=_factor;
@property unsigned int M; // @synthesize M=_M;
@property double c; // @synthesize c=_c;
@property void *rankTable; // @synthesize rankTable=_rankTable;
@property unsigned char select; // @synthesize select=_select;
@property char *g; // @synthesize g=_g;
- (unsigned int)keySetCount;
- (void)finalize;
- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (char *)bytesAtIndex:(unsigned long long)arg1;
- (unsigned short *)keyAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexForBytes:(char *)arg1 length:(unsigned long long)arg2;
- (unsigned long long)indexForKey:(unsigned short *)arg1 length:(unsigned long long)arg2;
- (id)newKeySetWithKeys:(id)arg1 encoding:(unsigned int)arg2;
- (id)allKeys;
- (unsigned int)maximumIndex;
- (_Bool)isEmpty;
- (unsigned int)count;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithKeys:(void **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3 type:(unsigned int)arg4;
- (id)generateSubclassCode:(id)arg1;

@end

@interface _NSChineseBigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _NSChineseBigramKeySet_SKS : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _NSChineseBigramKeySet_SKS_SKS : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _NSCopyOnWriteCalendarWrapper : NSCalendar
{
    NSCalendar *cal;
    _NSRefcountedPthreadMutex *_lock;
    _Bool needsToCopy;
}

+ (id)currentCalendar;
- (void)enumerateDatesStartingAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (_Bool)isDateInWeekend:(id)arg1;
- (_Bool)nextWeekendStartDate:(out id *)arg1 interval:(out double *)arg2 options:(unsigned long long)arg3 afterDate:(id)arg4;
- (unsigned long long)hash;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)dateByAddingComponents:(id)arg1 toDate:(id)arg2 options:(unsigned long long)arg3;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2;
- (id)dateFromComponents:(id)arg1;
- (_Bool)rangeOfUnit:(unsigned long long)arg1 startDate:(id *)arg2 interval:(double *)arg3 forDate:(id)arg4;
- (unsigned long long)ordinalityOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)maximumRangeOfUnit:(unsigned long long)arg1;
- (struct _NSRange)minimumRangeOfUnit:(unsigned long long)arg1;
- (unsigned long long)minimumDaysInFirstWeek;
- (void)setMinimumDaysInFirstWeek:(unsigned long long)arg1;
- (unsigned long long)firstWeekday;
- (void)setFirstWeekday:(unsigned long long)arg1;
- (id)timeZone;
- (void)setTimeZone:(id)arg1;
- (id)locale;
- (void)setLocale:(id)arg1;
- (id)calendarIdentifier;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithCalendar:(id)arg1;
- (id)init;
- (void)finalize;
- (void)dealloc;
- (void)_copyWrappedCalendar;

@end

@interface _NSJapaneseBigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface _NSKoreanBigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _NSKoreanBigramKeySet_SKS : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface _NSMostCommonChineseCharsKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface _NSMostCommonJapaneseCharsKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface _NSMostCommonKoreanCharsKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface _NSPlaceholderLocale : NSLocale
{
}

- (id)initWithLocaleIdentifier:(id)arg1;
- (id)autorelease;
- (oneway void)release;
- (id)retain;

@end

__attribute__((visibility("hidden")))
@interface _NSRefcountedPthreadMutex : NSObject
{
    struct _opaque_pthread_mutex_t lock;
}

- (void)finalize;
- (void)dealloc;
- (void)unlock;
- (void)lock;
- (id)init;

@end

@interface _NSZombie_
{
    Class isa;
}

+ (void)initialize;

@end

__attribute__((visibility("hidden")))
@interface __CFNotification : NSObject <NSCopying>
{
    id _name;
    id _object;
    id _userInfo;
    _Bool _fouSemantics;
    _Bool _dyingObject;
}

- (void)finalize;
- (void)dealloc;
- (id)initWithName:(struct __CFString *)arg1 object:(const void *)arg2 userInfo:(struct __CFDictionary *)arg3 foundation:(_Bool)arg4;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)userInfo;
- (id)object;
- (id)name;

@end

__attribute__((visibility("hidden")))
@interface __NSArrayI : NSArray
{
    unsigned long long _used;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(unsigned long long)arg2:(_Bool)arg3;
- (void)finalize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;

@end

__attribute__((visibility("hidden")))
@interface __NSArrayM : NSMutableArray
{
    unsigned long long _used;
    unsigned long long _offset;
    unsigned int _size:60;
    unsigned int _doHardRetain:1;
    unsigned int _doWeakAccess:1;
    unsigned int _hasObjects:1;
    unsigned int _hasStrongReferences:1;
    unsigned long long _mutations;
    id *_list;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(unsigned long long)arg2:(_Bool)arg3:(_Bool)arg4:(_Bool)arg5;
- (void)removeLastObject;
- (void)addObject:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (void)removeAllObjects;
- (void)exchangeObjectAtIndex:(unsigned long long)arg1 withObjectAtIndex:(unsigned long long)arg2;
- (unsigned long long)indexOfObjectIdenticalTo:(id)arg1;
- (void)setObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)_mutate;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (_Bool)_hasStrongReferences;
- (_Bool)_hasObjects;

@end

__attribute__((visibility("hidden")))
@interface __NSArrayReverseEnumerator : NSEnumerator
{
    id _obj;
    unsigned long long _idx;
}

- (id)nextObject;
- (void)dealloc;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSArrayReversed : NSArray
{
    id _array;
    unsigned long long _cnt;
}

- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (id)initWithArray:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSAtom
{
    Class isa;
}

+ (void)initialize;

@end

@interface __NSAutoBlock : NSBlock
{
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;

@end

@interface __NSBlockVariable : NSObject
{
    struct Block_byref *forwarding;
    int flags;
    int size;
    CDUnknownFunctionPointerType byref_keep;
    CDUnknownFunctionPointerType byref_destroy;
    id containedObject;
}

@end

__attribute__((visibility("hidden")))
@interface __NSCFArray : NSMutableArray
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeLastObject;
- (void)addObject:(id)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (Class)classForCoder;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFType : NSObject
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)description;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFAttributedString : __NSCFType
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)removeAttribute:(id)arg1 range:(struct _NSRange)arg2;
- (void)addAttribute:(id)arg1 value:(id)arg2 range:(struct _NSRange)arg3;
- (void)addAttributes:(id)arg1 range:(struct _NSRange)arg2;
- (void)setAttributedString:(id)arg1;
- (void)deleteCharactersInRange:(struct _NSRange)arg1;
- (void)appendAttributedString:(id)arg1;
- (void)insertAttributedString:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withAttributedString:(id)arg2;
- (void)setAttributes:(id)arg1 range:(struct _NSRange)arg2;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2;
- (Class)classForCoder;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqualToAttributedString:(id)arg1;
- (id)attribute:(id)arg1 atIndex:(unsigned long long)arg2 longestEffectiveRange:(struct _NSRange *)arg3 inRange:(struct _NSRange)arg4;
- (id)attributesAtIndex:(unsigned long long)arg1 longestEffectiveRange:(struct _NSRange *)arg2 inRange:(struct _NSRange)arg3;
- (id)attributedSubstringFromRange:(struct _NSRange)arg1;
- (id)attribute:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange *)arg3;
- (unsigned long long)length;
- (id)attributesAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2;
- (id)string;
- (void)finalize;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;

@end

__attribute__((visibility("hidden")))
@interface __NSCFBoolean : __NSCFType
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (long long)compare:(id)arg1;
- (long long)_reverseCompare:(id)arg1;
- (unsigned char)_getValue:(void *)arg1 forType:(long long)arg2;
- (long long)_cfNumberType;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (const char *)objCType;
- (void)getValue:(void *)arg1;
- (unsigned long long)_cfTypeID;
- (_Bool)boolValue;
- (unsigned long long)unsignedIntegerValue;
- (long long)integerValue;
- (double)doubleValue;
- (float)floatValue;
- (unsigned long long)unsignedLongLongValue;
- (long long)longLongValue;
- (unsigned long long)unsignedLongValue;
- (long long)longValue;
- (unsigned int)unsignedIntValue;
- (int)intValue;
- (unsigned short)unsignedShortValue;
- (short)shortValue;
- (unsigned char)unsignedCharValue;
- (BOOL)charValue;
- (id)stringValue;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isEqualToNumber:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFCalendar : NSCalendar
{
}

+ (id)calendarWithIdentifier:(id)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)enumerateDatesStartingAfterDate:(id)arg1 matchingComponents:(id)arg2 options:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (_Bool)nextWeekendStartDate:(out id *)arg1 interval:(out double *)arg2 options:(unsigned long long)arg3 afterDate:(id)arg4;
- (_Bool)isDateInWeekend:(id)arg1;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2 toDate:(id)arg3 options:(unsigned long long)arg4;
- (id)dateByAddingComponents:(id)arg1 toDate:(id)arg2 options:(unsigned long long)arg3;
- (id)components:(unsigned long long)arg1 fromDate:(id)arg2;
- (id)dateFromComponents:(id)arg1;
- (_Bool)rangeOfUnit:(unsigned long long)arg1 startDate:(id *)arg2 interval:(double *)arg3 forDate:(id)arg4;
- (unsigned long long)ordinalityOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;
- (struct _NSRange)maximumRangeOfUnit:(unsigned long long)arg1;
- (struct _NSRange)minimumRangeOfUnit:(unsigned long long)arg1;
- (id)gregorianStartDate;
- (void)setGregorianStartDate:(id)arg1;
- (unsigned long long)minimumDaysInFirstWeek;
- (void)setMinimumDaysInFirstWeek:(unsigned long long)arg1;
- (unsigned long long)firstWeekday;
- (void)setFirstWeekday:(unsigned long long)arg1;
- (id)timeZone;
- (void)setTimeZone:(id)arg1;
- (id)locale;
- (void)setLocale:(id)arg1;
- (id)calendarIdentifier;
- (id)initWithCalendarIdentifier:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFCharacterSet : __NSCFType
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (Class)classForCoder;
- (void)makeCharacterSetFast;
- (void)makeCharacterSetCompact;
- (void)invert;
- (void)formIntersectionWithCharacterSet:(id)arg1;
- (void)formUnionWithCharacterSet:(id)arg1;
- (void)removeCharactersInString:(id)arg1;
- (void)addCharactersInString:(id)arg1;
- (void)removeCharactersInRange:(struct _NSRange)arg1;
- (void)addCharactersInRange:(struct _NSRange)arg1;
- (id)invertedSet;
- (id)bitmapRepresentation;
- (_Bool)hasMemberInPlane:(unsigned char)arg1;
- (_Bool)isSupersetOfSet:(id)arg1;
- (_Bool)longCharacterIsMember:(unsigned int)arg1;
- (_Bool)characterIsMember:(unsigned short)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFString : __NSCFType
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (unsigned long long)replaceOccurrencesOfString:(id)arg1 withString:(id)arg2 options:(unsigned long long)arg3 range:(struct _NSRange)arg4;
- (void)appendCharacters:(const unsigned short *)arg1 length:(unsigned long long)arg2;
- (void)setString:(id)arg1;
- (void)appendFormat:(id)arg1;
- (void)deleteCharactersInRange:(struct _NSRange)arg1;
- (void)appendString:(id)arg1;
- (void)insertString:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2;
- (_Bool)_isCString;
- (Class)classForCoder;
- (unsigned long long)smallestEncoding;
- (unsigned long long)fastestEncoding;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)getLineStart:(unsigned long long *)arg1 end:(unsigned long long *)arg2 contentsEnd:(unsigned long long *)arg3 forRange:(struct _NSRange)arg4;
- (_Bool)hasSuffix:(id)arg1;
- (_Bool)hasPrefix:(id)arg1;
- (_Bool)isEqualToString:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)substringWithRange:(struct _NSRange)arg1;
- (id)_newSubstringWithRange:(struct _NSRange)arg1 zone:(struct _NSZone *)arg2;
- (_Bool)getCString:(char *)arg1 maxLength:(unsigned long long)arg2 encoding:(unsigned long long)arg3;
- (const char *)cStringUsingEncoding:(unsigned long long)arg1;
- (unsigned long long)cStringLength;
- (const char *)UTF8String;
- (const char *)cString;
- (const char *)_fastCStringContents:(_Bool)arg1;
- (const unsigned short *)_fastCharacterContents;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (void)finalize;
- (unsigned long long)hash;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (_Bool)isNSString__;

@end

__attribute__((visibility("hidden")))
@interface __NSCFConstantString : __NSCFString
{
}

- (id)autorelease;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFData : NSMutableData
{
    unsigned char _cfinfo[4];
    unsigned int _rc;
    long long _length;
    long long _capacity;
    struct __CFAllocator *_bytesDeallocator;
    char *_bytes;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)setLength:(unsigned long long)arg1;
- (void *)mutableBytes;
- (const void *)bytes;
- (unsigned long long)length;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFDictionary : NSMutableDictionary
{
    unsigned char _cfinfo[4];
    unsigned int _rc;
    unsigned int _bits[4];
    void *_callbacks;
    id *_values;
    id *_keys;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)setObservationInfo:(void *)arg1;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)keyEnumerator;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (Class)classForCoder;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFError : __NSCFType
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (Class)classForCoder;
- (id)userInfo;
- (id)domain;
- (long long)code;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFInputStream : NSInputStream
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)_unscheduleFromCFRunLoop:(struct __CFRunLoop *)arg1 forMode:(struct __CFString *)arg2;
- (void)_scheduleInCFRunLoop:(struct __CFRunLoop *)arg1 forMode:(struct __CFString *)arg2;
- (_Bool)_setCFClientFlags:(unsigned long long)arg1 callback:(CDUnknownFunctionPointerType)arg2 context:(CDStruct_4210025a *)arg3;
- (_Bool)hasBytesAvailable;
- (_Bool)getBuffer:(char **)arg1 length:(unsigned long long *)arg2;
- (long long)read:(char *)arg1 maxLength:(unsigned long long)arg2;
- (id)streamError;
- (unsigned long long)streamStatus;
- (void)removeFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)scheduleInRunLoop:(id)arg1 forMode:(id)arg2;
- (_Bool)setProperty:(id)arg1 forKey:(id)arg2;
- (id)propertyForKey:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)close;
- (void)open;
- (id)initWithURL:(id)arg1;
- (id)initWithFileAtPath:(id)arg1;
- (id)initWithData:(id)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFLocale : NSLocale
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)_setNullLocale;
- (unsigned char)_nullLocale;
- (id)_prefs;
- (id)initWithLocaleIdentifier:(id)arg1;
- (id)displayNameForKey:(id)arg1 value:(id)arg2;
- (id)objectForKey:(id)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFNumber : __NSCFType
{
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (long long)compare:(id)arg1;
- (long long)_reverseCompare:(id)arg1;
- (unsigned char)_getValue:(void *)arg1 forType:(long long)arg2;
- (long long)_cfNumberType;
- (unsigned long long)_cfTypeID;
- (_Bool)boolValue;
- (unsigned long long)unsignedIntegerValue;
- (long long)integerValue;
- (double)doubleValue;
- (float)floatValue;
- (unsigned long long)unsignedLongLongValue;
- (long long)longLongValue;
- (unsigned long long)unsignedLongValue;
- (long long)longValue;
- (unsigned int)unsignedIntValue;
- (int)intValue;
- (unsigned short)unsignedShortValue;
- (short)shortValue;
- (unsigned char)unsignedCharValue;
- (BOOL)charValue;
- (const char *)objCType;
- (void)getValue:(void *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)stringValue;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isEqualToNumber:(id)arg1;
- (_Bool)isNSNumber__;

@end

__attribute__((visibility("hidden")))
@interface __NSCFOutputStream : NSOutputStream
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)_unscheduleFromCFRunLoop:(struct __CFRunLoop *)arg1 forMode:(struct __CFString *)arg2;
- (void)_scheduleInCFRunLoop:(struct __CFRunLoop *)arg1 forMode:(struct __CFString *)arg2;
- (_Bool)_setCFClientFlags:(unsigned long long)arg1 callback:(CDUnknownFunctionPointerType)arg2 context:(CDStruct_4210025a *)arg3;
- (_Bool)hasSpaceAvailable;
- (long long)write:(const char *)arg1 maxLength:(unsigned long long)arg2;
- (id)streamError;
- (unsigned long long)streamStatus;
- (void)removeFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)scheduleInRunLoop:(id)arg1 forMode:(id)arg2;
- (_Bool)setProperty:(id)arg1 forKey:(id)arg2;
- (id)propertyForKey:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)close;
- (void)open;
- (id)initWithURL:(id)arg1 append:(_Bool)arg2;
- (id)initToFileAtPath:(id)arg1 append:(_Bool)arg2;
- (id)initToBuffer:(char *)arg1 capacity:(unsigned long long)arg2;
- (id)initToMemory;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFSet : NSMutableSet
{
    unsigned char _cfinfo[4];
    unsigned int _rc;
    unsigned int _bits[4];
    void *_callbacks;
    id *_values;
}

+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)getObjects:(id *)arg1;
- (void)removeAllObjects;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (id)objectEnumerator;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (unsigned long long)_trueCount;
- (id)member:(id)arg1;
- (unsigned long long)count;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (Class)classForCoder;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSCFTimer : NSTimer
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
- (id)init;
- (id)initWithFireDate:(id)arg1 interval:(double)arg2 target:(id)arg3 selector:(SEL)arg4 userInfo:(id)arg5 repeats:(_Bool)arg6;
- (unsigned long long)_cfTypeID;
- (void)fire;
- (id)userInfo;
- (void)setFireDate:(id)arg1;
- (id)fireDate;
- (void)invalidate;
- (void)setTolerance:(double)arg1;
- (double)tolerance;
- (double)timeInterval;
- (_Bool)isValid;
- (void)finalize;
- (unsigned long long)retainCount;
- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (oneway void)release;
- (id)retain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSDate : NSDate
{
    double _time;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(double)arg1;
- (id)initWithTimeIntervalSinceReferenceDate:(double)arg1;
- (void)dealloc;
- (double)timeIntervalSinceReferenceDate;

@end

__attribute__((visibility("hidden")))
@interface __NSDictionaryI : NSDictionary
{
    unsigned int _used:58;
    unsigned int _szidx:6;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(const id *)arg2:(unsigned long long)arg3:(_Bool)arg4:(_Bool)arg5;
- (double)_clumpingInterestingThreshold;
- (double)_clumpingFactor;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)enumerateKeysAndObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 andKeys:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;

@end

__attribute__((visibility("hidden")))
@interface __NSDictionaryM : NSMutableDictionary
{
    unsigned int _used:58;
    unsigned int _kvo:1;
    unsigned long long _size;
    unsigned long long _mutations;
    id *_objs;
    id *_keys;
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(const id *)arg2:(unsigned long long)arg3:(_Bool)arg4:(_Bool)arg5;
- (double)_clumpingInterestingThreshold;
- (double)_clumpingFactor;
- (void)__setObject:(id)arg1 forKey:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setObservationInfo:(void *)arg1;
- (void)finalize;
- (void)dealloc;
- (void)removeAllObjects;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)_mutate;
- (void)enumerateKeysAndObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 andKeys:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;

@end

@interface __NSFastEnumerationEnumerator : NSEnumerator
{
    id <NSFastEnumeration> _obj;
    id _origObj;
    unsigned long long _count;
    unsigned long long _mut;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)nextObject;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSDictionaryObjectEnumerator : __NSFastEnumerationEnumerator
{
}

- (id)nextObject;

@end

__attribute__((visibility("hidden")))
@interface __NSFileSecurity : NSFileSecurity <NSCopying, NSCoding>
{
    struct _filesec *_filesec;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(struct _filesec *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)finalize;
- (void)dealloc;
- (_Bool)clearProperties:(unsigned long long)arg1;
- (_Bool)setAccessControlList:(struct _acl *)arg1;
- (_Bool)copyAccessControlList:(struct _acl **)arg1;
- (_Bool)setGroupUUID:(unsigned char [16])arg1;
- (_Bool)getGroupUUID:(unsigned char (*)[16])arg1;
- (_Bool)setOwnerUUID:(unsigned char [16])arg1;
- (_Bool)getOwnerUUID:(unsigned char (*)[16])arg1;
- (_Bool)setMode:(unsigned short)arg1;
- (_Bool)getMode:(unsigned short *)arg1;
- (_Bool)setGroup:(unsigned int)arg1;
- (_Bool)getGroup:(unsigned int *)arg1;
- (_Bool)setOwner:(unsigned int)arg1;
- (_Bool)getOwner:(unsigned int *)arg1;
- (struct _filesec *)_filesec;

@end

@interface __NSFinalizingBlock : __NSAutoBlock
{
}

- (void)finalize;

@end

__attribute__((visibility("hidden")))
@interface __NSGenericDeallocHandler
{
    Class isa;
    CDUnknownBlockType _block;
}

+ (void)initialize;
- (void)finalize;
- (void)release;
- (unsigned long long)retainCount;
- (id)retain;

@end

@interface __NSGlobalBlock : NSBlock
{
}

- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (unsigned long long)retainCount;
- (id)retain;
- (oneway void)release;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;

@end

@interface __NSISO885911TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISO88595TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISO88596TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISO88597TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISO88598TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin10TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin1TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin2TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin3TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin4TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin5TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin6TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin7TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin8TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSISOLatin9TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface __NSLocalTimeZone : NSTimeZone
{
}

+ (_Bool)supportsSecureCoding;
- (id)replacementObjectForPortCoder:(id)arg1;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)description;
- (id)localizedName:(long long)arg1 locale:(id)arg2;
- (id)nextDaylightSavingTimeTransitionAfterDate:(id)arg1;
- (double)daylightSavingTimeOffsetForDate:(id)arg1;
- (_Bool)isDaylightSavingTimeForDate:(id)arg1;
- (id)abbreviationForDate:(id)arg1;
- (long long)secondsFromGMTForDate:(id)arg1;
- (id)data;
- (id)name;

@end

@interface __NSMallocBlock : NSBlock
{
}

- (_Bool)_isDeallocating;
- (_Bool)_tryRetain;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;

@end

__attribute__((visibility("hidden")))
@interface __NSMessageBuilder
{
    Class isa;
    id _target;
    id *_addr;
}

+ (void)initialize;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)finalize;

@end

__attribute__((visibility("hidden")))
@interface __NSOrderedSetArrayProxy : NSArray
{
    id _orderedSet;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (id)initWithOrderedSet:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSOrderedSetI : NSOrderedSet
{
    unsigned int _used:58;
    unsigned int _szidx:6;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(unsigned long long)arg2:(_Bool)arg3;
- (void)finalize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfObject:(id)arg1;
- (unsigned long long)count;

@end

__attribute__((visibility("hidden")))
@interface __NSOrderedSetM : NSMutableOrderedSet
{
    unsigned long long _used;
    struct __CFBasicHash *_set;
    NSMutableArray *_array;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(unsigned long long)arg2:(_Bool)arg3;
- (void)finalize;
- (void)dealloc;
- (void)setObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)_mutate;
- (unsigned long long)countForObject:(id)arg1;
- (_Bool)containsObject:(id)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfObject:(id)arg1;
- (unsigned long long)count;

@end

__attribute__((visibility("hidden")))
@interface __NSOrderedSetReverseEnumerator : NSEnumerator
{
    id _obj;
    unsigned long long _idx;
}

- (id)nextObject;
- (void)dealloc;
- (id)initWithObject:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSOrderedSetReversed : NSOrderedSet
{
    id _orderedSet;
    unsigned long long _cnt;
}

- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfObject:(id)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (id)initWithOrderedSet:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSOrderedSetSetProxy : NSSet
{
    id _orderedSet;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)objectEnumerator;
- (id)member:(id)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (id)initWithOrderedSet:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderArray : NSMutableArray
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)mutablePlaceholder;
+ (id)immutablePlaceholder;
+ (void)initialize;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)init;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderDate : NSDate
{
}

+ (id)immutablePlaceholder;
+ (void)initialize;
- (double)timeIntervalSinceReferenceDate;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)init;
- (id)initWithTimeIntervalSinceReferenceDate:(double)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderDictionary : NSMutableDictionary
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)mutablePlaceholder;
+ (id)immutablePlaceholder;
+ (void)initialize;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)init;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderFileSecurity : NSFileSecurity <NSCopying, NSCoding>
{
}

+ (id)immutablePlaceholder;
+ (void)initialize;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)init;
- (id)initWithFileSec:(struct _filesec *)arg1;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderOrderedSet : NSMutableOrderedSet
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)mutablePlaceholder;
+ (id)immutablePlaceholder;
+ (void)initialize;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfObject:(id)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)init;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderSet : NSMutableSet
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)mutablePlaceholder;
+ (id)immutablePlaceholder;
+ (void)initialize;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (id)objectEnumerator;
- (id)member:(id)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)init;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface __NSPlaceholderTimeZone : NSTimeZone
{
}

+ (id)immutablePlaceholder;
+ (void)initialize;
- (id)nextDaylightSavingTimeTransitionAfterDate:(id)arg1;
- (double)daylightSavingTimeOffsetForDate:(id)arg1;
- (_Bool)isDaylightSavingTimeForDate:(id)arg1;
- (id)abbreviationForDate:(id)arg1;
- (long long)secondsFromGMTForDate:(id)arg1;
- (id)data;
- (id)name;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)init;
- (id)initWithName:(id)arg1;
- (id)__initWithName:(id)arg1 cache:(_Bool)arg2;
- (id)initWithName:(id)arg1 data:(id)arg2;
- (id)__initWithName:(id)arg1 data:(id)arg2 cache:(_Bool)arg3;

@end

__attribute__((visibility("hidden")))
@interface __NSSKGraph : NSObject
{
    struct edge *_edges;
    struct vertex *_vertices;
    unsigned long long _numV;
    unsigned long long _numE;
    unsigned long long _currE;
    unsigned long long _dump;
    unsigned long long _l_end;
}

- (struct edge **)isAcyclic;
- (unsigned long long)numOfEdges;
- (_Bool)isEmpty;
- (_Bool)addEdgeWithH1:(unsigned long long)arg1 withH2:(unsigned long long)arg2;
- (void)finalize;
- (void)dealloc;
- (id)initWithNumberOfVertices:(long long)arg1 numberOfEdges:(long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface __NSSKGraphE : NSObject
{
    struct edge *_edges;
    struct vertex *_vertices;
    unsigned long long _numV;
    unsigned long long _numE;
    unsigned long long _currE;
    unsigned long long _dump;
    unsigned long long _l_end;
}

- (struct edge **)isAcyclic;
- (unsigned long long)numOfEdges;
- (_Bool)isEmpty;
- (_Bool)addEdgeWithH1:(unsigned long long)arg1 withH2:(unsigned long long)arg2;
- (void)finalize;
- (void)dealloc;
- (id)initWithNumberOfVertices:(unsigned long long)arg1 numberOfEdges:(unsigned long long)arg2;

@end

__attribute__((visibility("hidden")))
@interface __NSSetI : NSSet
{
    unsigned int _used:58;
    unsigned int _szidx:6;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(unsigned long long)arg2:(_Bool)arg3;
- (double)clumpingInterestingThreshold;
- (double)clumpingFactor;
- (void)finalize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 count:(unsigned long long)arg2;
- (id)objectEnumerator;
- (id)member:(id)arg1;
- (unsigned long long)count;

@end

__attribute__((visibility("hidden")))
@interface __NSSetM : NSMutableSet
{
    unsigned int _used:58;
    unsigned long long _size;
    unsigned long long _mutations;
    id *_objs;
}

+ (void)initialize;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(const id *)arg1:(unsigned long long)arg2:(_Bool)arg3;
- (double)clumpingInterestingThreshold;
- (double)clumpingFactor;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (void)removeAllObjects;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (void)_mutate;
- (void)enumerateObjectsWithOptions:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)getObjects:(id *)arg1 count:(unsigned long long)arg2;
- (id)objectEnumerator;
- (id)member:(id)arg1;
- (unsigned long long)count;

@end

@interface __NSStackBlock : NSBlock
{
}

- (id)autorelease;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;

@end

__attribute__((visibility("hidden")))
@interface __NSTaggedDate : NSDate
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(double)arg1;
- (id)initWithTimeIntervalSinceReferenceDate:(double)arg1;
- (void)dealloc;
- (double)timeIntervalSinceReferenceDate;

@end

__attribute__((visibility("hidden")))
@interface __NSTimeZone : NSTimeZone
{
    struct __CFString *_name;
    struct __CFData *_data;
    void **_ucal;
    struct _opaque_pthread_mutex_t _lock;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)__new:(struct __CFString *)arg1 cache:(_Bool)arg2;
+ (id)__new:(struct __CFString *)arg1 data:(struct __CFData *)arg2;
- (void)finalize;
- (void)dealloc;
- (id)localizedName:(long long)arg1 locale:(id)arg2;
- (id)nextDaylightSavingTimeTransitionAfterDate:(id)arg1;
- (double)daylightSavingTimeOffsetForDate:(id)arg1;
- (_Bool)isDaylightSavingTimeForDate:(id)arg1;
- (id)abbreviationForDate:(id)arg1;
- (long long)secondsFromGMTForDate:(id)arg1;
- (id)data;
- (id)name;

@end

@interface __NSWindows1250TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1251TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1252TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1253TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1254TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1255TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1256TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1257TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows1258TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

@interface __NSWindows874TrigramKeySet : _NSSharedKeySetS
{
}

- (_Bool)isEmpty;
- (id)initWithKeys:(unsigned short **)arg1 keyLenghtInBytes:(unsigned int)arg2 count:(unsigned int)arg3;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

