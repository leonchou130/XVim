//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Atomic {
    struct {
        int _field1;
    } _field1;
};

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGColorSpace;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CIBurstSupportVector {
    double _field1;
    double _field2[7];
};

struct CIContextInternal {
    struct Context *_field1;
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } _field2;
    _Bool _field3;
    id _field4;
};

struct Context {
    CDUnknownFunctionPointerType *_field1;
    struct Atomic _field2;
    struct CGColorSpace *_field3;
    struct CGColorSpace *_field4;
    int _field5;
    _Bool _field6;
};

struct FastRegistration_Signatures {
    float *piRow;
    unsigned long long nPiRow;
    struct Projections_meanStdTable piRowTable;
    float *piCol;
    unsigned long long nPiCol;
    struct Projections_meanStdTable piColTable;
};

struct GrainParameters {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct GridROI_t {
    int startX;
    int startY;
    int endX;
    int endY;
};

struct Projections_meanStdTable {
    float *sumTable;
    float *sumSqTable;
};

struct Rectangle {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct SharpnessGridElement_t {
    unsigned char _field1;
    unsigned char _field2;
    float _field3;
};

struct __SVMParameters {
    struct __SVMScaleOffset {
        float _field1;
        float _field2;
    } _field1[7];
    double _field2;
    double _field3;
    int _field4;
    int _field5;
    struct CIBurstSupportVector *_field6;
    struct CIBurstSupportVector *_field7;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct vec2 {
    float _field1;
    float _field2;
};

struct vec3 {
    float _field1;
    float _field2;
    float _field3;
};

struct vec4 {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

#pragma mark Typedef'd Structures

typedef struct {
    _Bool _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6[3];
} CDStruct_31328b19;

typedef struct {
    _Bool _field1;
    int _field2;
    int _field3;
    float _field4;
    float _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    float _field10;
    float _field11;
    int _field12;
    int _field13;
    float _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
    int _field19;
    int _field20;
    float _field21;
    int _field22;
    int _field23;
    int _field24;
    int _field25;
} CDStruct_e0ece3c1;

typedef struct {
    char *baseAddress;
    int width;
    int height;
    int rowSamples;
    int rowBytes;
    int size;
    int samplesPerPixel;
    int bytesPerSample;
    float resolution;
} CDStruct_c3faddef;

typedef struct {
    int *_field1;
    int _field2;
} CDStruct_84b23d7a;

typedef struct {
    double i;
    double q;
} CDStruct_bfe67ca5;

typedef struct {
    char _field1[256];
    char _field2[32];
    CDStruct_c3faddef _field3;
    int _field4;
    int _field5;
    struct {
        int _field1;
        int _field2;
        int _field3;
        int _field4;
    } _field6;
    struct CGColorSpace *_field7;
    unsigned int _field8;
    int _field9;
    int _field10;
    _Bool _field11;
    float _field12;
} CDStruct_79f2618e;

typedef struct {
    int _field1;
    struct {
        float _field1;
        int _field2;
        int _field3;
        float _field4;
        float _field5;
        float _field6;
        int _field7;
        int _field8;
        float _field9;
    } _field2[4];
} CDStruct_08ff8b76;

typedef struct {
    int origHitX;
    int origHitY;
    int snapHitX;
    int snapHitY;
    int bitmaskSeedX;
    int bitmaskSeedY;
    int bitmaskThreshold;
    int cornealReflectionSeedX;
    int cornealReflectionSeedY;
    int cornealReflectionThreshold;
    _Bool align;
    CDStruct_6ca1d5c6 mTemplate;
    CDStruct_6ca1d5c6 existingTemplate;
    int averageSkinMapY;
    int characterizeCase;
    int finalEyeCase;
    float IOD;
    struct {
        int orientation;
        float SNR;
        _Bool N90;
        int redBitmaskArea;
        float imageCenterX;
        float imageCenterY;
        float halfDiagonalSize;
    } O;
    CDStruct_5973fb4f CR;
} CDStruct_8b259ba7;

typedef struct {
    int tag;
    struct CGPoint pt2;
    int eyeCase;
    int forceCase;
    int npixels;
    int bignpixels;
    CDStruct_c3faddef fullNew;
    CDStruct_5973fb4f YR;
    CDStruct_6ca1d5c6 psTemplate;
    _Bool pupilShadeAlignment;
    CDStruct_6ca1d5c6 matchingTemplate;
    int faceIndex;
    _Bool left;
    float IOD;
    CDStruct_8b259ba7 data;
    struct {
        struct CGPoint centroid;
        int area;
        float ovalness;
        float contrast;
        float mincontrast;
        int nborder;
        CDStruct_5973fb4f IR;
        float aspectRatio;
        _Bool touchingEdge;
        int localmax;
        int localmaxrow;
        int localmaxcol;
        int localfloor;
        float rgmean;
        float rgstd;
        float ymean;
        float ystd;
    } BI;
} CDStruct_907e448c;

// Ambiguous groups
typedef struct {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
} CDStruct_a734b2e2;

typedef struct {
    int lo;
    int med;
    int hi;
    int average;
} CDStruct_6ca1d5c6;

typedef struct {
    int minrow;
    int maxrow;
    int mincol;
    int maxcol;
} CDStruct_5973fb4f;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/CoreImage.framework/CoreImage
// UUID: 9A13FE8D-D187-3047-9D3A-37AC28633191
//
//                           Arch: x86_64
//                Current version: 4.0.0
//          Compatibility version: 1.0.0
//                 Source version: 274.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ImageRowReading
- (unsigned int)bytesPerPixel;
- (const char *)rowAtIndex:(unsigned int)arg1;
- (unsigned long long)height;
- (unsigned long long)width;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol _CIFilterProperties
- (CIFilter *)_initFromProperties:(NSArray *)arg1;
- (NSArray *)_outputProperties;
@end

__attribute__((visibility("hidden")))
@interface AutoCropper : NSObject
{
    NSNumber *bufferZone;
    _Bool shouldFavorBottom;
    _Bool shouldFavorTop;
    struct CGSize originalImageSize;
}

@property(nonatomic) struct CGSize originalImageSize; // @synthesize originalImageSize;
@property(nonatomic) _Bool shouldFavorBottom; // @synthesize shouldFavorBottom;
@property(nonatomic) _Bool shouldFavorTop; // @synthesize shouldFavorTop;
@property(retain, nonatomic) NSNumber *bufferZone; // @synthesize bufferZone;
- (struct CGRect)computeClippingWithinSize:(struct CGSize)arg1 forMultipleRects:(id)arg2;
- (struct CGRect)computeClippingWithinSize:(struct CGSize)arg1 forImportantRect:(struct CGRect)arg2 andType:(int)arg3 restrictRect:(struct CGRect)arg4;
- (int)determineBestPositionWithinSize:(struct CGSize)arg1 forImportantRect:(struct CGRect)arg2 restrictRect:(struct CGRect)arg3;
- (struct CGRect)computeClippingWithinSize:(struct CGSize)arg1 andImportantRects:(id)arg2;
- (id)clusterRects:(id)arg1;
- (struct CGRect)rectContainingRect:(struct CGRect)arg1 andOtherRect:(struct CGRect)arg2;
- (struct CGRect)rectWithSize:(struct CGSize)arg1 andPoint:(struct CGPoint)arg2 inPosition:(int)arg3 fromOriginalSize:(struct CGSize)arg4;
- (struct CGRect)scaleRect:(struct CGRect)arg1 toFitSize:(struct CGSize)arg2 withAnchorPoint:(struct CGPoint)arg3;
- (int)getRatioOfSize:(struct CGSize)arg1;
- (struct CGRect)computeClippingWithinSize:(struct CGSize)arg1 andImportantRect:(struct CGRect)arg2;
- (struct CGRect)expandRect:(struct CGRect)arg1 toContainRect:(struct CGRect)arg2;
- (struct CGRect)scaleRect:(struct CGRect)arg1 byScale:(double)arg2;
- (id)init;

@end

@interface CIFilter : NSObject <NSCoding, NSCopying>
{
    void *_priv[8];
}

+ (id)filterArrayFromSerializedXMP:(id)arg1 inputImageExtent:(struct CGRect)arg2 error:(id *)arg3;
+ (id)serializedXMPFromFilters:(id)arg1 inputImageExtent:(struct CGRect)arg2;
+ (id)filterNamesInCategories:(id)arg1;
+ (id)filterNamesInCategory:(id)arg1;
+ (id)filterWithName:(id)arg1 withInputParameters:(id)arg2;
+ (id)filterWithName:(id)arg1 keysAndValues:(id)arg2;
+ (id)filterWithName:(id)arg1;
+ (id)_filterArrayFromProperties:(id)arg1;
+ (id)_filterArrayFromImageMetadata:(struct CGImageMetadata *)arg1 inputImageExtent:(struct CGRect)arg2;
+ (struct CGImageMetadata *)_imageMetadataFromFilters:(id)arg1 inputImageExtent:(struct CGRect)arg2;
+ (id)_filterArrayFromProperties:(id)arg1 inputImageExtent:(struct CGRect)arg2;
+ (id)_propertyArrayFromFilters:(id)arg1 inputImageExtent:(struct CGRect)arg2;
+ (id)filterWithString:(id)arg1;
+ (id)customAttributes;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_copyFilterWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)setDefaults;
- (id)attributes;
@property(readonly, nonatomic) CIImage *outputImage; // @dynamic outputImage;
- (id)outputKeys;
- (id)inputKeys;
- (void)dealloc;
- (id)name;
- (id)valueForUndefinedKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)apply:(id)arg1;
- (id)apply:(id)arg1 arguments:(id)arg2 options:(id)arg3;
- (id)_serializedXMPString;
- (_Bool)_isIdentity;
- (_Bool)_filterClassInCategory:(id)arg1;
- (id)_filterClassDescription;

@end

__attribute__((visibility("hidden")))
@interface CIAccordionFoldTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    NSNumber *inputBottomHeight;
    NSNumber *inputNumberOfFolds;
    NSNumber *inputFoldShadowAmount;
    NSNumber *inputTime;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) NSNumber *inputFoldShadowAmount; // @synthesize inputFoldShadowAmount;
@property(retain, nonatomic) NSNumber *inputNumberOfFolds; // @synthesize inputNumberOfFolds;
@property(retain, nonatomic) NSNumber *inputBottomHeight; // @synthesize inputBottomHeight;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (id)_kernelMix;
- (id)_kernelWarpT;
- (id)_kernelWarpS;

@end

__attribute__((visibility("hidden")))
@interface _CICompositeFilter : CIFilter
{
    CIImage *inputImage;
    CIImage *inputBackgroundImage;
}

+ (id)_kernel;
+ (id)customAttributes;
+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
@property(retain, nonatomic) CIImage *inputBackgroundImage; // @synthesize inputBackgroundImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (struct CGRect)_extentForInputExtent:(struct CGRect)arg1 backgroundExtent:(struct CGRect)arg2;

@end

__attribute__((visibility("hidden")))
@interface CIAdditionCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIAffineClamp : CIFilter
{
    CIImage *inputImage;
    NSValue *inputTransform;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSValue *inputTransform; // @synthesize inputTransform;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIAffineTile : CIFilter
{
    CIImage *inputImage;
    NSValue *inputTransform;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSValue *inputTransform; // @synthesize inputTransform;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIAffineTransform : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    NSValue *inputTransform;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSValue *inputTransform; // @synthesize inputTransform;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIAreaHistogram : CIFilter
{
    CIImage *inputImage;
    CIVector *inputExtent;
    NSNumber *inputScale;
    NSNumber *inputCount;
    CIContext *_context;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputCount; // @synthesize inputCount;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) CIVector *inputExtent; // @synthesize inputExtent;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)outputData;
- (id)_outputData:(_Bool)arg1;
- (void)setDefaults;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface CIAutoEnhanceFace : NSObject
{
    int size;
    int centerX;
    int centerY;
    double I;
    double Q;
}

@property(readonly) double Q; // @synthesize Q;
@property(readonly) double I; // @synthesize I;
@property(readonly) int centerY; // @synthesize centerY;
@property(readonly) int centerX; // @synthesize centerX;
@property(readonly) int size; // @synthesize size;
- (struct CGRect)faceRect;
- (id)description;
- (id)initWithBounds:(struct CGRect)arg1 andImage:(id)arg2 usingContext:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface CICodeGenerator : CIFilter
{
    NSData *inputMessage;
}

@property(copy, nonatomic) NSData *inputMessage; // @synthesize inputMessage;
- (id)outputImage;
- (struct CGImage *)outputCGImage;

@end

__attribute__((visibility("hidden")))
@interface CIAztecCodeGenerator : CICodeGenerator
{
    NSNumber *inputCorrectionLevel;
    NSNumber *inputLayers;
    NSNumber *inputCompactStyle;
}

+ (id)customAttributes;
@property(copy, nonatomic) NSNumber *inputCompactStyle; // @synthesize inputCompactStyle;
@property(copy, nonatomic) NSNumber *inputLayers; // @synthesize inputLayers;
@property(copy, nonatomic) NSNumber *inputCorrectionLevel; // @synthesize inputCorrectionLevel;
- (struct CGImage *)outputCGImage;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;

@end

@interface CIDetector : NSObject
{
}

+ (id)detectorOfType:(id)arg1 context:(id)arg2 options:(id)arg3;
- (id)featuresInImage:(id)arg1 options:(id)arg2;
- (id)featuresInImage:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CIBarcodeDetector : CIDetector
{
    CIContext *context;
    double _width;
    double _height;
    NSMutableDictionary *featureOptions;
}

@property(retain, nonatomic) CIContext *context; // @synthesize context;
- (id)featuresInImage:(id)arg1;
- (id)featuresInImage:(id)arg1 options:(id)arg2;
- (id)initWithContext:(id)arg1 options:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CIBarsSwipeTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    NSNumber *inputAngle;
    NSNumber *inputWidth;
    NSNumber *inputBarOffset;
    NSNumber *inputTime;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) NSNumber *inputBarOffset; // @synthesize inputBarOffset;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIBlendModeFilter : CIFilter
{
    CIImage *inputImage;
    CIImage *inputBackgroundImage;
}

+ (id)customAttributes;
+ (id)_kernel;
+ (id)_filter_display_name;
@property(retain, nonatomic) CIImage *inputBackgroundImage; // @synthesize inputBackgroundImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_needUnpremuls;
- (struct CGRect)_extent;

@end

__attribute__((visibility("hidden")))
@interface CIBlendWithAlphaMask : CIFilter
{
    CIImage *inputImage;
    CIImage *inputBackgroundImage;
    CIImage *inputMaskImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputMaskImage; // @synthesize inputMaskImage;
@property(retain, nonatomic) CIImage *inputBackgroundImage; // @synthesize inputBackgroundImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernelNoF;
- (id)_kernelNoB;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIBlendWithMask : CIFilter
{
    CIImage *inputImage;
    CIImage *inputBackgroundImage;
    CIImage *inputMaskImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputMaskImage; // @synthesize inputMaskImage;
@property(retain, nonatomic) CIImage *inputBackgroundImage; // @synthesize inputBackgroundImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernelNoF;
- (id)_kernelNoB;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIBloom : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputRadius;
    NSNumber *inputIntensity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIBumpDistortion : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
    NSNumber *inputScale;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIBumpDistortionLinear : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
    NSNumber *inputAngle;
    NSNumber *inputScale;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIBurstActionClassifier : NSObject
{
    _Bool hasBeenScaled;
    double testVector[7];
    float testAverageCameraTravelDistance;
    float testMaxRegistrationErrorIntegral;
    float testMaxPeakRegistrationError;
    float testMeanPeakRegistrationError;
    float testBeginningVsEndAEMatrixVsAverageAdjacentAEMatrix;
    float testInOutRatio;
    float testMaxInnerDistance;
    float testAverageRegistrationErrorSkewness;
    float testMinRegionOfInterestSize;
    float testMaxRegistrationErrorSkewness;
    struct __SVMParameters *_svmParameters;
}

@property struct __SVMParameters *svmParameters; // @synthesize svmParameters=_svmParameters;
@property float testMaxRegistrationErrorSkewness; // @synthesize testMaxRegistrationErrorSkewness;
@property float testMinRegionOfInterestSize; // @synthesize testMinRegionOfInterestSize;
@property float testAverageRegistrationErrorSkewness; // @synthesize testAverageRegistrationErrorSkewness;
@property float testMaxInnerDistance; // @synthesize testMaxInnerDistance;
@property float testInOutRatio; // @synthesize testInOutRatio;
@property float testBeginningVsEndAEMatrixVsAverageAdjacentAEMatrix; // @synthesize testBeginningVsEndAEMatrixVsAverageAdjacentAEMatrix;
@property float testMeanPeakRegistrationError; // @synthesize testMeanPeakRegistrationError;
@property float testMaxPeakRegistrationError; // @synthesize testMaxPeakRegistrationError;
@property float testMaxRegistrationErrorIntegral; // @synthesize testMaxRegistrationErrorIntegral;
@property float testAverageCameraTravelDistance; // @synthesize testAverageCameraTravelDistance;
- (_Bool)isBurstAction;
- (float)predictResult;
- (double)computeKernelValueWithSupportVector:(const struct CIBurstSupportVector *)arg1;
- (void)scaleVector;
- (id)initWithVersion:(int)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CIBurstClusterDivider : NSObject
{
    float dividerScore;
    int trueLocalMaximum;
    int leftImage;
    float actionAmount;
    float noiseThreshold;
    float highNoiseThreshold;
}

@property float highNoiseThreshold; // @synthesize highNoiseThreshold;
@property float noiseThreshold; // @synthesize noiseThreshold;
@property float actionAmount; // @synthesize actionAmount;
@property int trueLocalMaximum; // @synthesize trueLocalMaximum;
@property int leftImage; // @synthesize leftImage;
@property float dividerScore; // @synthesize dividerScore;
- (long long)compareActionAmounts:(id)arg1;
- (long long)compareIndices:(id)arg1;
- (long long)compareDividers:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIBurstFaceConfigEntry : NSObject
{
    int faceId;
    struct CGRect faceRect;
    int framesSinceLast;
}

@property int framesSinceLast; // @synthesize framesSinceLast;
@property struct CGRect faceRect; // @synthesize faceRect;
@property int faceId; // @synthesize faceId;
- (id)initWithRect:(struct CGRect)arg1 withFaceId:(int)arg2;

@end

__attribute__((visibility("hidden")))
@interface CIBurstFaceInfo : NSObject
{
    int swFaceId;
    int swLastFrameSeen;
    int hwFaceId;
    int hwLastFrameSeen;
    struct CGPoint swCenter;
    struct CGSize swSize;
    struct CGPoint hwCenter;
    struct CGSize hwSize;
}

@property int hwLastFrameSeen; // @synthesize hwLastFrameSeen;
@property struct CGSize hwSize; // @synthesize hwSize;
@property struct CGPoint hwCenter; // @synthesize hwCenter;
@property int hwFaceId; // @synthesize hwFaceId;
@property int swLastFrameSeen; // @synthesize swLastFrameSeen;
@property struct CGSize swSize; // @synthesize swSize;
@property struct CGPoint swCenter; // @synthesize swCenter;
@property int swFaceId; // @synthesize swFaceId;
- (float)overlapWithSwRect:(struct CGRect)arg1;
- (float)overlapWithHwRect:(struct CGRect)arg1;
- (struct CGRect)swFaceRect;
- (struct CGRect)hwFaceRect;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CIBurstFaceScoreEntry : NSObject
{
    float maxScore;
    float minScore;
    float sumScores;
    float sumSqScores;
    int numScores;
}

@property int numScores; // @synthesize numScores;
@property float minScore; // @synthesize minScore;
@property float maxScore; // @synthesize maxScore;
- (float)computeStandardDeviation;
- (float)computeAverage;
- (void)addScore:(float)arg1;
- (id)initWithScore:(float)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIBurstFaceStat : NSObject <NSCopying>
{
    _Bool leftEyeOpen;
    _Bool rightEyeOpen;
    _Bool smiling;
    _Bool foundByFaceCore;
    _Bool hasLeftEye;
    _Bool hasRightEye;
    _Bool leftEyePleasant;
    _Bool rightEyePleasant;
    _Bool mouthPleasant;
    _Bool hasRollAngle;
    _Bool hasYawAngle;
    _Bool smallFace;
    _Bool _isSyncedWithImage;
    float normalizedSigma;
    int faceId;
    int hwFaceId;
    int framesSinceLast;
    float focusScore;
    float normalizedFocusScore;
    float faceScore;
    float leftEyeBlinkScore;
    float rightEyeBlinkScore;
    float smileScore;
    int FCRLeftEyeFeaturesOffset;
    int FCRRightEyeFeaturesOffset;
    int FCRSmileFeaturesOffset;
    int FCRBlinkFeaturesSize;
    int FCRSmileFeaturesSize;
    float faceHOGTime;
    float faceCropTime;
    float faceScoreTime;
    float normalizedSmileScore;
    float rollAngle;
    float yawAngle;
    NSMutableArray *FCRSmileAndBlinkFeatures;
    NSMutableArray *faceHOG;
    double timestamp;
    struct CGRect faceRect;
    struct CGRect normalizedFaceRect;
    struct CGRect leftEyeRect;
    struct CGRect rightEyeRect;
    struct CGRect _hwFaceRect;
}

@property _Bool isSyncedWithImage; // @synthesize isSyncedWithImage=_isSyncedWithImage;
@property struct CGRect hwFaceRect; // @synthesize hwFaceRect=_hwFaceRect;
@property _Bool smallFace; // @synthesize smallFace;
@property double timestamp; // @synthesize timestamp;
@property float yawAngle; // @synthesize yawAngle;
@property float rollAngle; // @synthesize rollAngle;
@property _Bool hasYawAngle; // @synthesize hasYawAngle;
@property _Bool hasRollAngle; // @synthesize hasRollAngle;
@property _Bool mouthPleasant; // @synthesize mouthPleasant;
@property _Bool rightEyePleasant; // @synthesize rightEyePleasant;
@property _Bool leftEyePleasant; // @synthesize leftEyePleasant;
@property float normalizedSmileScore; // @synthesize normalizedSmileScore;
@property NSMutableArray *faceHOG; // @synthesize faceHOG;
@property float faceScoreTime; // @synthesize faceScoreTime;
@property float faceCropTime; // @synthesize faceCropTime;
@property float faceHOGTime; // @synthesize faceHOGTime;
@property NSMutableArray *FCRSmileAndBlinkFeatures; // @synthesize FCRSmileAndBlinkFeatures;
@property int FCRSmileFeaturesSize; // @synthesize FCRSmileFeaturesSize;
@property int FCRBlinkFeaturesSize; // @synthesize FCRBlinkFeaturesSize;
@property int FCRSmileFeaturesOffset; // @synthesize FCRSmileFeaturesOffset;
@property int FCRRightEyeFeaturesOffset; // @synthesize FCRRightEyeFeaturesOffset;
@property int FCRLeftEyeFeaturesOffset; // @synthesize FCRLeftEyeFeaturesOffset;
@property float smileScore; // @synthesize smileScore;
@property float rightEyeBlinkScore; // @synthesize rightEyeBlinkScore;
@property float leftEyeBlinkScore; // @synthesize leftEyeBlinkScore;
@property struct CGRect rightEyeRect; // @synthesize rightEyeRect;
@property struct CGRect leftEyeRect; // @synthesize leftEyeRect;
@property _Bool hasRightEye; // @synthesize hasRightEye;
@property _Bool hasLeftEye; // @synthesize hasLeftEye;
@property float faceScore; // @synthesize faceScore;
@property float normalizedFocusScore; // @synthesize normalizedFocusScore;
@property float focusScore; // @synthesize focusScore;
@property int framesSinceLast; // @synthesize framesSinceLast;
@property int hwFaceId; // @synthesize hwFaceId;
@property int faceId; // @synthesize faceId;
@property float normalizedSigma; // @synthesize normalizedSigma;
@property struct CGRect normalizedFaceRect; // @synthesize normalizedFaceRect;
@property struct CGRect faceRect; // @synthesize faceRect;
@property _Bool foundByFaceCore; // @synthesize foundByFaceCore;
@property _Bool smiling; // @synthesize smiling;
@property _Bool rightEyeOpen; // @synthesize rightEyeOpen;
@property _Bool leftEyeOpen; // @synthesize leftEyeOpen;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithFaceStat:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIBurstImageFaceAnalysisContext : NSObject
{
    NSMutableDictionary *curConfig;
    NSMutableDictionary *faceIdMapping;
    NSMutableDictionary *renameMapping;
    int faceIdCounter;
    NSMutableArray *faceInfoArray;
    int numFramesSinceFullFaceCore;
    int numFramesNoFaces;
    FCRFaceDetector *faceDetector;
    NSMutableArray *faceTimestampArray;
    double latestImageTimestamp;
    int lastFaceIndex;
    _Bool forceFaceDetectionEnable;
    int _version;
    double timeBlinkDetectionDone;
    double timeFaceDetectionDone;
    double latestFaceTimestamp;
}

@property int version; // @synthesize version=_version;
@property double latestFaceTimestamp; // @synthesize latestFaceTimestamp;
@property _Bool forceFaceDetectionEnable; // @synthesize forceFaceDetectionEnable;
@property double timeFaceDetectionDone; // @synthesize timeFaceDetectionDone;
@property double timeBlinkDetectionDone; // @synthesize timeBlinkDetectionDone;
- (void)dumpFaceInfoArray;
- (void)addFacesToImageStat:(id)arg1 imageSize:(struct CGSize)arg2;
- (void)extractFacesFromMetadata:(id)arg1;
- (void)addFaceToArray:(id)arg1;
- (void)adjustFaceIdsForImageStat:(id)arg1;
- (void)calcFaceScores:(id)arg1;
- (void)calculateFaceFocusInImage:(id)arg1 imageStat:(id)arg2;
- (int)findFacesInImage:(id)arg1 imageStat:(id)arg2;
- (struct CGRect)calculateFaceCoreROI:(id)arg1 imageStat:(id)arg2 needFaceCore:(_Bool *)arg3;
- (struct CGRect)padRoiRect:(struct CGRect)arg1 paddingX:(float)arg2 paddingY:(float)arg3;
- (void)setupFaceDetector;
- (void)dealloc;
- (id)initWithVersion:(id)arg1;
- (id)processSmallFaces:(id)arg1 imageStat:(id)arg2 faces:(id)arg3 extractOptions:(id)arg4;
- (_Bool)isSmallFace:(struct CGRect)arg1;

@end

@interface CIBurstImageSet : NSObject
{
    CIBurstImageSetInternal *_priv;
}

+ (id)defaultVersionString;
+ (id)burstImageSetWithOptions:(id)arg1;
+ (id)burstImageSet;
- (_Bool)isAction;
- (_Bool)isPortrait;
- (void)setLoggingListener:(void *)arg1 withUserInfo:(void *)arg2;
- (double)secondsSinceStart;
- (id)statsForImageWithIdentifier:(id)arg1;
- (id)allImageIdentifiers;
- (id)imageClusterForIndex:(unsigned long long)arg1;
- (unsigned long long)imageClusterCount;
- (id)imageClusterForIdentifier:(id)arg1;
- (id)coverImageIdentifier;
- (id)bestImageIdentifiers;
- (id)burstId;
- (id)initWithOptions:(id)arg1;
- (id)init;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface CIBurstImageSetInternal : NSObject
{
    NSObject<OS_dispatch_queue> *dq;
    NSObject<OS_dispatch_queue> *dq_yuvdump;
    NSObject<OS_dispatch_semaphore> *sem;
    NSMutableArray *clusterArray;
    int temporalOrder;
    int maxNumPendingFrames;
    _Bool enableAnalysis;
    int dummyAnalysisCount;
    _Bool enableFaceCore;
    _Bool enableDumpYUV;
    NSString *burstCoverSelection;
    _Bool isAction;
    _Bool isPortrait;
    CIBurstImageFaceAnalysisContext *faceAnalysisContext;
    CIBurstYUVImage *overrideImage;
    NSDictionary *overrideProps;
    NSMutableArray *allImageIdentifiers;
    NSCountedSet *faceIDCounts;
    NSMutableDictionary *statsByImageIdentifier;
    NSMutableDictionary *clusterByImageIdentifier;
    NSString *burstLogFileName;
    struct __sFILE {
        char *_field1;
        int _field2;
        int _field3;
        short _field4;
        short _field5;
        struct __sbuf _field6;
        int _field7;
        void *_field8;
        CDUnknownFunctionPointerType _field9;
        CDUnknownFunctionPointerType _field10;
        CDUnknownFunctionPointerType _field11;
        CDUnknownFunctionPointerType _field12;
        struct __sbuf _field13;
        struct __sFILEX *_field14;
        int _field15;
        unsigned char _field16[3];
        unsigned char _field17[1];
        struct __sbuf _field18;
        int _field19;
        long long _field20;
    } *burstLogFileHandle;
    CIBurstActionClassifier *actionClassifier;
    int curClusterIndexToProcess;
    NSMutableArray *bestImageIdentifiersArray;
    int _version;
    NSString *burstId;
    NSString *_versionString;
}

+ (id)defaultVersionString;
@property int version; // @synthesize version=_version;
@property NSString *versionString; // @synthesize versionString=_versionString;
@property NSArray *bestImageIdentifiersArray; // @synthesize bestImageIdentifiersArray;
@property(retain, nonatomic) NSString *burstId; // @synthesize burstId;
@property NSString *burstCoverSelection; // @synthesize burstCoverSelection;
@property _Bool enableDumpYUV; // @synthesize enableDumpYUV;
@property _Bool enableFaceCore; // @synthesize enableFaceCore;
@property int dummyAnalysisCount; // @synthesize dummyAnalysisCount;
@property _Bool enableAnalysis; // @synthesize enableAnalysis;
@property int maxNumPendingFrames; // @synthesize maxNumPendingFrames;
@property NSString *burstLogFileName; // @synthesize burstLogFileName;
@property NSMutableDictionary *clusterByImageIdentifier; // @synthesize clusterByImageIdentifier;
@property NSMutableDictionary *statsByImageIdentifier; // @synthesize statsByImageIdentifier;
@property CIBurstActionClassifier *actionClassifier; // @synthesize actionClassifier;
@property NSMutableArray *allImageIdentifiers; // @synthesize allImageIdentifiers;
@property NSCountedSet *faceIDCounts; // @synthesize faceIDCounts;
@property int temporalOrder; // @synthesize temporalOrder;
@property NSMutableArray *clusterArray; // @synthesize clusterArray;
- (_Bool)isAction;
- (_Bool)isPortrait;
- (_Bool)isFaceDetectionForced;
- (id)imageClusterForIdentifier:(id)arg1;
- (id)bestImageIdentifiers;
- (void)selectCoverPhotoFromMultiple:(id)arg1 burstSize:(int)arg2;
- (id)findBestImage:(id)arg1 useActionScores:(_Bool)arg2;
- (void)computeAllImageScores;
- (float)computeBeginningVsEndAEMatrixDiffVsAverageAdjacent;
- (float)computeCameraTravelDistance;
- (void)performEmotionalRejectionOnCluster:(id)arg1;
- (int)computeEmotion:(id)arg1;
- (void)addYUVImage:(id)arg1 properties:(id)arg2 identifier:(id)arg3 imageProps:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)processClusters:(_Bool)arg1;
- (float)computeActionSelectionThreshold;
- (void)dealloc;
- (id)initWithOptions:(id)arg1;
- (id)burstDocumentDirectory;

@end

__attribute__((visibility("hidden")))
@interface CIBurstImageStat : NSObject
{
    float normalizedFocusScore;
    float normalizedSigma;
    float colorHistogram[1024];
    int numEntries;
    unsigned short aeMatrix[256];
    int dissimilarity;
    double timeReceived;
    double timestamp;
    void *projectionMemoryBlock;
    struct FastRegistration_Signatures projectionSignature;
    struct SharpnessGridElement_t *sharpnessGrid;
    int gridWidth;
    int gridHeight;
    struct GridROI_t gridROI;
    struct GridROI_t smoothedROI;
    _Bool hasRegistrationData;
    float maxSkewness;
    float roiSize;
    _Bool exclude;
    _Bool AEStable;
    _Bool AFStable;
    _Bool emotionallyRejected;
    _Bool doLimitedSharpnessAndBlur;
    _Bool isGarbage;
    int orientation;
    int AEAverage;
    int AETarget;
    int temporalOrder;
    float avgHorzDiffY;
    float blurExtent;
    float imageScore;
    float actionScore;
    float registrationErrorX;
    float registrationErrorY;
    float registrationErrorIntegral;
    float actionClusteringScore;
    int numHWFaces;
    float tx;
    float ty;
    int _AEDelta;
    int _fullsizeJpegSize;
    int _version;
    NSString *imageId;
    NSMutableArray *faceStatArray;
    struct CGRect facesRoiRect;
}

@property int version; // @synthesize version=_version;
@property int fullsizeJpegSize; // @synthesize fullsizeJpegSize=_fullsizeJpegSize;
@property int AEDelta; // @synthesize AEDelta=_AEDelta;
@property float roiSize; // @synthesize roiSize;
@property _Bool isGarbage; // @synthesize isGarbage;
@property float ty; // @synthesize ty;
@property float tx; // @synthesize tx;
@property _Bool doLimitedSharpnessAndBlur; // @synthesize doLimitedSharpnessAndBlur;
@property _Bool emotionallyRejected; // @synthesize emotionallyRejected;
@property int numHWFaces; // @synthesize numHWFaces;
@property struct CGRect facesRoiRect; // @synthesize facesRoiRect;
@property float actionClusteringScore; // @synthesize actionClusteringScore;
@property float registrationErrorIntegral; // @synthesize registrationErrorIntegral;
@property _Bool hasRegistrationData; // @synthesize hasRegistrationData;
@property float registrationErrorY; // @synthesize registrationErrorY;
@property float registrationErrorX; // @synthesize registrationErrorX;
@property float maxSkewness; // @synthesize maxSkewness;
@property double timestamp; // @synthesize timestamp;
@property double timeReceived; // @synthesize timeReceived;
@property float actionScore; // @synthesize actionScore;
@property float imageScore; // @synthesize imageScore;
@property float blurExtent; // @synthesize blurExtent;
@property float avgHorzDiffY; // @synthesize avgHorzDiffY;
@property int temporalOrder; // @synthesize temporalOrder;
@property _Bool AFStable; // @synthesize AFStable;
@property int AETarget; // @synthesize AETarget;
@property int AEAverage; // @synthesize AEAverage;
@property _Bool AEStable; // @synthesize AEStable;
@property _Bool exclude; // @synthesize exclude;
@property NSMutableArray *faceStatArray; // @synthesize faceStatArray;
@property int orientation; // @synthesize orientation;
@property NSString *imageId; // @synthesize imageId;
- (float *)colorHistogram;
- (long long)compareImageOrder:(id)arg1;
- (long long)compareImageStats:(id)arg1;
- (float)computeScore:(float)arg1;
- (unsigned short *)aeMatrix;
- (void)computeAEMatrix:(id)arg1;
- (int)setAEMatrix:(id)arg1;
- (float)computeAEMatrixDifference:(id)arg1;
- (float)computeImageDistance:(id)arg1;
- (float)computeSmilePercentage;
- (float)computeRuleOfThreeDistance;
- (float)computeFacialFocusScoreSum;
- (void)collapseSharpnessGrid;
- (void)computeImageData:(id)arg1 faceIDCounts:(id)arg2;
- (void)writeGridROI:(id)arg1;
- (int)canRegister;
- (void)computeImageProjections:(id)arg1;
- (void)performRegistration:(id)arg1 deltaCol:(float *)arg2 deltaRow:(float *)arg3;
- (void)flagAsGarbage;
- (void)updateROI:(struct GridROI_t)arg1;
- (float)computeSmoothedGridROI:(id)arg1 nextStat:(id)arg2;
- (void)computeBlurStatsOnGrid:(id)arg1;
- (void)computeImageSharpnessOnGrid:(id)arg1;
- (struct GridROI_t)getSharpnessAndBlurLimits;
- (void)computeImageColorHistogram:(id)arg1;
- (void)dealloc;
- (id)initWithIdentifier:(id)arg1;
- (void)assignMeanStdBuffers:(float *)arg1;
- (void)allocateMeanStdPingPongBuffers:(float **)arg1:(float **)arg2:(float **)arg3:(float **)arg4;

@end

__attribute__((visibility("hidden")))
@interface CIBurstThumbnailCluster : NSObject
{
    NSMutableArray *burstImages;
    CDUnknownBlockType completionBlock;
    NSMutableDictionary *imageProps;
    CIBurstYUVImage *image;
}

@property CDUnknownBlockType completionBlock; // @synthesize completionBlock;
@property CIBurstYUVImage *image; // @synthesize image;
@property NSMutableDictionary *imageProps; // @synthesize imageProps;
@property NSMutableArray *burstImages; // @synthesize burstImages;
- (float)computeMergeCost:(id)arg1:(int *)arg2:(int)arg3;
- (void)addItemsFromCluster:(id)arg1;
- (void)releaseImage;
- (void)dealloc;
- (id)initWithImageData:(id)arg1 dict:(id)arg2 identifier:(id)arg3 imageProps:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CIBurstYUVImage : NSObject
{
    char *Ybuffer;
    char *Cbuffer;
    int width;
    int height;
    int bytesPerRow;
    struct __CFData *dataPtr;
    struct __CVBuffer *pixelBuffer;
}

@property int bytesPerRow; // @synthesize bytesPerRow;
@property char *Cbuffer; // @synthesize Cbuffer;
@property char *Ybuffer; // @synthesize Ybuffer;
@property int height; // @synthesize height;
@property int width; // @synthesize width;
- (struct __CVBuffer *)pixelBuffer;
- (void)dealloc;
- (id)initWithCGImage:(struct CGImage *)arg1 maxDimension:(int)arg2;
- (void)convertRGBAToYUV420:(char *)arg1 rgbaBytesPerRow:(int)arg2;

@end

__attribute__((visibility("hidden")))
@interface CICheckerboardGenerator : CIFilter
{
    CIVector *inputCenter;
    CIColor *inputColor0;
    CIColor *inputColor1;
    NSNumber *inputWidth;
    NSNumber *inputSharpness;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) NSNumber *inputSharpness; // @synthesize inputSharpness;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CICircleSplashDistortion : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CICircularScreen : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputWidth;
    NSNumber *inputSharpness;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputSharpness; // @synthesize inputSharpness;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CICode128BarcodeGenerator : CICodeGenerator
{
    NSNumber *inputQuietSpace;
}

+ (id)customAttributes;
@property(copy, nonatomic) NSNumber *inputQuietSpace; // @synthesize inputQuietSpace;
- (struct CGImage *)outputCGImage;

@end

@interface CIColor : NSObject <NSCoding, NSCopying>
{
    void *_priv;
    void *_pad[3];
}

+ (id)colorWithString:(id)arg1;
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3;
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
+ (id)colorWithCGColor:(struct CGColor *)arg1;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (struct CGColor *)CGColor;
- (struct CGColor *)cgColor;
- (struct CGColorSpace *)colorSpace;
- (id)stringRepresentation;
- (double)blue;
- (double)green;
- (double)red;
- (double)alpha;
- (const double *)components;
- (unsigned long long)numberOfComponents;
- (void)finalize;
- (void)dealloc;
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (id)initWithCGColor:(struct CGColor *)arg1;
- (id)initWithString:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIColorBalance : CIFilter
{
    CIImage *inputImage;
    CIColor *inputColor;
    NSNumber *inputStrength;
    NSNumber *inputWarmth;
    NSNumber *inputDamping;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputDamping; // @synthesize inputDamping;
@property(retain, nonatomic) NSNumber *inputWarmth; // @synthesize inputWarmth;
@property(retain, nonatomic) NSNumber *inputStrength; // @synthesize inputStrength;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIColorBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIColorBurnBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIColorClamp : CIFilter
{
    CIImage *inputImage;
    CIVector *inputMinComponents;
    CIVector *inputMaxComponents;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputMaxComponents; // @synthesize inputMaxComponents;
@property(retain, nonatomic) CIVector *inputMinComponents; // @synthesize inputMinComponents;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIColorControls : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputSaturation;
    NSNumber *inputBrightness;
    NSNumber *inputContrast;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputContrast; // @synthesize inputContrast;
@property(retain, nonatomic) NSNumber *inputBrightness; // @synthesize inputBrightness;
@property(retain, nonatomic) NSNumber *inputSaturation; // @synthesize inputSaturation;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIColorCrossPolynomial : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCoefficients;
    CIVector *inputRedCoefficients;
    CIVector *inputGreenCoefficients;
    CIVector *inputBlueCoefficients;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputBlueCoefficients; // @synthesize inputBlueCoefficients;
@property(retain, nonatomic) CIVector *inputGreenCoefficients; // @synthesize inputGreenCoefficients;
@property(retain, nonatomic) CIVector *inputRedCoefficients; // @synthesize inputRedCoefficients;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIColorCube : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputCubeDimension;
    NSData *inputCubeData;
    CIImage *_cubeImage;
}

+ (id)customAttributes;
@property(copy, nonatomic) NSData *inputCubeData; // @synthesize inputCubeData;
@property(retain, nonatomic) NSNumber *inputCubeDimension; // @synthesize inputCubeDimension;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_checkInputs;
- (id)cubeImage;
- (id)_kernel;
- (void)setDefaults;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface CIColorCubeWithColorSpace : CIColorCube
{
    id inputColorSpace;
}

+ (id)customAttributes;
@property(retain, nonatomic) id inputColorSpace; // @synthesize inputColorSpace;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIColorDodgeBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIColorInvert : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

@interface CIKernel : NSObject
{
    void *_priv;
}

+ (id)_getDictForSourceString:(id)arg1 dimensionality:(int *)arg2;
+ (id)kernelWithString:(id)arg1;
+ (id)kernelsWithString:(id)arg1;
- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 cpuCallback:(CDUnknownBlockType)arg3 colorManagement:(_Bool)arg4 andArguments:(id)arg5;
- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 andArguments:(id)arg3;
- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 arguments:(id)arg3;
- (int)_argumentTypeAtIndex:(int)arg1;
- (id)initWithDict:(id)arg1;
- (id)initWithString:(id)arg1;
- (id)name;
- (void *)_internalRepresentation;
- (id)_initWithInternalRepresentation:(void *)arg1;
- (id)description;
- (id)init;

@end

@interface CIColorKernel : CIKernel
{
}

- (id)applyWithExtent:(struct CGRect)arg1 andArguments:(id)arg2;
- (id)applyWithExtent:(struct CGRect)arg1 arguments:(id)arg2;
- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 andArguments:(id)arg3;
- (id)initWithDict:(id)arg1;
- (id)initWithString:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIColorMap : CIFilter
{
    CIImage *inputImage;
    CIImage *inputGradientImage;
    CIImage *cachedGradientImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *cachedGradientImage; // @synthesize cachedGradientImage;
@property(retain, nonatomic) CIImage *inputGradientImage; // @synthesize inputGradientImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)gradientImage;
- (id)_kernel;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface CIColorMatrix : CIFilter
{
    CIImage *inputImage;
    CIVector *inputRVector;
    CIVector *inputGVector;
    CIVector *inputBVector;
    CIVector *inputAVector;
    CIVector *inputBiasVector;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputBiasVector; // @synthesize inputBiasVector;
@property(retain, nonatomic) CIVector *inputAVector; // @synthesize inputAVector;
@property(retain, nonatomic) CIVector *inputBVector; // @synthesize inputBVector;
@property(retain, nonatomic) CIVector *inputGVector; // @synthesize inputGVector;
@property(retain, nonatomic) CIVector *inputRVector; // @synthesize inputRVector;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIColorMonochrome : CIFilter
{
    CIImage *inputImage;
    CIColor *inputColor;
    NSNumber *inputIntensity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIColorPolynomial : CIFilter
{
    CIImage *inputImage;
    CIVector *inputRedCoefficients;
    CIVector *inputGreenCoefficients;
    CIVector *inputBlueCoefficients;
    CIVector *inputAlphaCoefficients;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputAlphaCoefficients; // @synthesize inputAlphaCoefficients;
@property(retain, nonatomic) CIVector *inputBlueCoefficients; // @synthesize inputBlueCoefficients;
@property(retain, nonatomic) CIVector *inputGreenCoefficients; // @synthesize inputGreenCoefficients;
@property(retain, nonatomic) CIVector *inputRedCoefficients; // @synthesize inputRedCoefficients;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIColorPosterize : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputLevels;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputLevels; // @synthesize inputLevels;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIConstantColorGenerator : CIFilter
{
    CIColor *inputColor;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
- (id)outputImage;
- (void)setDefaults;

@end

@interface CIContext : NSObject
{
    struct CIContextInternal *_priv;
}

+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)arg1 toBitmap:(void *)arg2 rowBytes:(long long)arg3 bounds:(struct CGRect)arg4 format:(int)arg5 colorSpace:(struct CGColorSpace *)arg6;
+ (id)contextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (id)contextWithEAGLContext:(id)arg1;
+ (id)contextWithOptions:(id)arg1;
+ (id)context;
+ (id)_singletonContext;
+ (id)clContextOptions:(id)arg1;
+ (id)glesContextOptions:(id)arg1;
+ (struct Context *)glesInternalContextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (struct Context *)glesInternalContextWithOptions:(id)arg1;
- (id)createColorCubeDataForFilters:(id)arg1 dimension:(int)arg2;
- (struct CGSize)outputImageMaximumSize;
- (struct CGSize)inputImageMaximumSize;
- (unsigned long long)maximumOutputImageSize;
- (unsigned long long)maximumInputImageSize;
- (struct CGImage *)createCGImage:(id)arg1 fromRect:(struct CGRect)arg2 format:(int)arg3 colorSpace:(struct CGColorSpace *)arg4;
- (struct CGImage *)createCGImage:(id)arg1 fromRect:(struct CGRect)arg2 format:(int)arg3;
- (struct CGImage *)createCGImage:(id)arg1 fromRect:(struct CGRect)arg2;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 bounds:(struct CGRect)arg3 colorSpace:(struct CGColorSpace *)arg4;
- (void)drawImage:(id)arg1 inRect:(struct CGRect)arg2 fromRect:(struct CGRect)arg3;
- (void)drawImage:(id)arg1 atPoint:(struct CGPoint)arg2 fromRect:(struct CGRect)arg3;
- (void)_insertEventMarker:(const char *)arg1;
- (_Bool)_isEAGLBackedContext;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer *)arg2 bounds:(struct CGRect)arg3 colorSpace:(struct CGColorSpace *)arg4;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer *)arg2;
- (void)render:(id)arg1 toBitmap:(void *)arg2 rowBytes:(long long)arg3 bounds:(struct CGRect)arg4 format:(int)arg5 colorSpace:(struct CGColorSpace *)arg6;
- (void)dealloc;
- (id)init;
- (id)initWithEAGLContext:(id)arg1 options:(id)arg2;
- (id)initWithEAGLContext:(id)arg1;
- (void)unlock;
- (void)lock;
- (void)_gpuContextCheck;
- (struct CGColorSpace *)_colorspace;
- (id)_initWithInternalRepresentation:(void *)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIConvolution3X3 : CIFilter
{
    CIImage *inputImage;
    CIVector *inputWeights;
    NSNumber *inputBias;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputBias; // @synthesize inputBias;
@property(retain, nonatomic) CIVector *inputWeights; // @synthesize inputWeights;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;

@end

__attribute__((visibility("hidden")))
@interface CIConvolution5X5 : CIFilter
{
    CIImage *inputImage;
    CIVector *inputWeights;
    NSNumber *inputBias;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputBias; // @synthesize inputBias;
@property(retain, nonatomic) CIVector *inputWeights; // @synthesize inputWeights;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;

@end

__attribute__((visibility("hidden")))
@interface CIConvolution9Horizontal : CIFilter
{
    CIImage *inputImage;
    CIVector *inputWeights;
    NSNumber *inputBias;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputBias; // @synthesize inputBias;
@property(retain, nonatomic) CIVector *inputWeights; // @synthesize inputWeights;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;

@end

__attribute__((visibility("hidden")))
@interface CIConvolution9Vertical : CIFilter
{
    CIImage *inputImage;
    CIVector *inputWeights;
    NSNumber *inputBias;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputBias; // @synthesize inputBias;
@property(retain, nonatomic) CIVector *inputWeights; // @synthesize inputWeights;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;

@end

__attribute__((visibility("hidden")))
@interface CICopyMachineTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    CIVector *inputExtent;
    CIColor *inputColor;
    NSNumber *inputTime;
    NSNumber *inputAngle;
    NSNumber *inputWidth;
    NSNumber *inputOpacity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputOpacity; // @synthesize inputOpacity;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIVector *inputExtent; // @synthesize inputExtent;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CICrop : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    CIVector *inputRectangle;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputRectangle; // @synthesize inputRectangle;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIDarkenBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIDifferenceBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIDisintegrateWithMaskTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    CIImage *inputMaskImage;
    NSNumber *inputTime;
    NSNumber *inputShadowRadius;
    NSNumber *inputShadowDensity;
    CIVector *inputShadowOffset;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputShadowOffset; // @synthesize inputShadowOffset;
@property(retain, nonatomic) NSNumber *inputShadowDensity; // @synthesize inputShadowDensity;
@property(retain, nonatomic) NSNumber *inputShadowRadius; // @synthesize inputShadowRadius;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) CIImage *inputMaskImage; // @synthesize inputMaskImage;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIDissolveTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    NSNumber *inputTime;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_fadeKernel;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIDivideBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface _CIScreenFilter : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputAngle;
    NSNumber *inputWidth;
    NSNumber *inputSharpness;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputSharpness; // @synthesize inputSharpness;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (id)_kernel_code;
- (id)_kernel_name;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIDotScreen : _CIScreenFilter
{
}

+ (id)customAttributes;
- (id)_kernel_code;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CITileFilter : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputAngle;
    NSNumber *inputWidth;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_kernel;
- (id)_kernel_source;
- (id)_kernel_name;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIEightfoldReflectedTile : CITileFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CIEnhancementCalculation : NSObject
{
    CDStruct_bfe67ca5 originalFaceColor;
    CIEnhancementHistogram *lumHist;
    CIEnhancementHistogram *rgbSumHist;
    CIEnhancementHistogram *satHist;
    CIEnhancementHistogram *borderHist;
    double exposureValue;
    double maxShadow;
    double minShadow;
    double exposureValueAtZeroShadow;
    double curvePercent;
    _Bool faceInputSet;
    double percentFaceChange;
}

+ (double)bestWarmthForI:(double)arg1 q:(double)arg2 percentChange:(double *)arg3;
@property(readonly) CIEnhancementHistogram *borderHist; // @synthesize borderHist;
@property(readonly) CIEnhancementHistogram *satHist; // @synthesize satHist;
@property(readonly) CIEnhancementHistogram *rgbSumHist; // @synthesize rgbSumHist;
@property(readonly) CIEnhancementHistogram *lumHist; // @synthesize lumHist;
- (void)printHistogramsDownsampledTo:(unsigned int)arg1;
- (void)printAnalysis;
- (void)printHistogram:(id)arg1 downsampledTo:(unsigned int)arg2;
- (void)downSampleHistogram:(id)arg1 to:(unsigned int)arg2 storeIn:(double *)arg3;
- (id)rawShadow;
- (id)shadow;
- (int)putShadowsAnalysisInto:(double *)arg1;
- (struct CGPoint)curvePointAtIndex:(unsigned long long)arg1;
- (unsigned long long)curveCount;
- (id)vibrance;
@property(readonly) CDStruct_bfe67ca5 originalFaceColor; // @synthesize originalFaceColor;
- (id)faceBalanceWarmth;
- (id)faceBalanceStrength;
- (void)setShadowsMin:(double)arg1 max:(double)arg2 zeroExposure:(double)arg3;
- (void)setExposureValue:(double)arg1;
- (void)setupFaceColor:(id)arg1 redIndex:(int)arg2 greenIndex:(int)arg3 blueIndex:(int)arg4;
- (void)setFaceColorFromChromaI:(double)arg1 andChromaQ:(double)arg2;
- (void)setSaturationHistogram:(id)arg1;
- (void)setBorderHistogram:(id)arg1;
- (void)setRGBSumHistogram:(id)arg1;
- (void)setLuminanceHistogram:(id)arg1;
- (void)setCurvePercent:(double)arg1;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CIEnhancementCalculator : CIEnhancementCalculation
{
    _Bool faceBalanceEnabled;
    _Bool vibranceEnabled;
    _Bool curvesEnabled;
    _Bool shadowsEnabled;
}

@property _Bool shadowsEnabled; // @synthesize shadowsEnabled;
@property _Bool curvesEnabled; // @synthesize curvesEnabled;
@property _Bool vibranceEnabled; // @synthesize vibranceEnabled;
@property _Bool faceBalanceEnabled; // @synthesize faceBalanceEnabled;
- (void)setupFaceColorFromImage:(id)arg1 usingContext:(id)arg2 features:(id)arg3;
- (id)setupFaceColorFromImage:(id)arg1 usingContext:(id)arg2 detectorOpts:(id)arg3;
- (void)analyzeFeatures:(id)arg1 usingContext:(id)arg2 baseImage:(id)arg3;
- (void)setupHistogramsUsing:(id)arg1 redIndex:(int)arg2 greenIndex:(int)arg3 blueIndex:(int)arg4;
- (id)histogramFromRows:(id)arg1 componentOffset:(unsigned int)arg2;
- (void)dealloc;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface CIEnhancementHistogram : NSObject
{
    double hist[256];
}

+ (id)histogramFromDoubleData:(const double *)arg1;
+ (id)histogramFromFloatData:(const float *)arg1;
+ (id)histogramFromData:(const double *)arg1;
- (const double *)values;

@end

__attribute__((visibility("hidden")))
@interface CIExclusionBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIExposureAdjust : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputEV;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputEV; // @synthesize inputEV;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIFaceBalance : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    NSNumber *inputOrigI;
    NSNumber *inputOrigQ;
    NSNumber *inputStrength;
    NSNumber *inputWarmth;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputWarmth; // @synthesize inputWarmth;
@property(retain, nonatomic) NSNumber *inputStrength; // @synthesize inputStrength;
@property(retain, nonatomic) NSNumber *inputOrigQ; // @synthesize inputOrigQ;
@property(retain, nonatomic) NSNumber *inputOrigI; // @synthesize inputOrigI;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (_Bool)_isIdentity;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIFaceCoreDetector : CIDetector
{
    CIContext *context;
    NSMutableDictionary *featureOptions;
    FCRFaceDetector *faceCoreDetector;
}

@property FCRFaceDetector *faceCoreDetector; // @synthesize faceCoreDetector;
@property(retain, nonatomic) CIContext *context; // @synthesize context;
- (id)featuresInImage:(id)arg1;
- (id)featuresInImage:(id)arg1 options:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)initWithContext:(id)arg1 options:(id)arg2;
- (id)createFaceCoreDataFromCIImage:(id)arg1 width:(unsigned long long *)arg2 height:(unsigned long long *)arg3;
- (id)adjustedImageFromImage:(id)arg1 orientation:(int)arg2 inverseCTM:(struct CGAffineTransform *)arg3;
- (struct CGAffineTransform)ctmForImageWithBounds:(struct CGRect)arg1 orientation:(int)arg2;

@end

@interface CIFeature : NSObject
{
}

@property(readonly) struct CGRect bounds;
@property(readonly, retain) NSString *type;
- (id)init;

@end

@interface CIFaceFeature : CIFeature
{
    struct CGRect bounds;
    _Bool hasLeftEyePosition;
    struct CGPoint leftEyePosition;
    _Bool hasRightEyePosition;
    struct CGPoint rightEyePosition;
    _Bool hasMouthPosition;
    struct CGPoint mouthPosition;
    _Bool hasTrackingID;
    int trackingID;
    _Bool hasTrackingFrameCount;
    int trackingFrameCount;
    _Bool hasFaceAngle;
    float faceAngle;
    _Bool hasSmile;
    _Bool leftEyeClosed;
    _Bool rightEyeClosed;
}

+ (id)faceFeaturesWithBoundsArray:(const struct CGRect *)arg1 count:(unsigned long long)arg2;
+ (id)faceFeatureWithBounds:(struct CGRect)arg1;
@property _Bool rightEyeClosed; // @synthesize rightEyeClosed;
@property _Bool leftEyeClosed; // @synthesize leftEyeClosed;
@property _Bool hasSmile; // @synthesize hasSmile;
@property float faceAngle; // @synthesize faceAngle;
@property _Bool hasFaceAngle; // @synthesize hasFaceAngle;
@property int trackingFrameCount; // @synthesize trackingFrameCount;
@property _Bool hasTrackingFrameCount; // @synthesize hasTrackingFrameCount;
@property int trackingID; // @synthesize trackingID;
@property _Bool hasTrackingID; // @synthesize hasTrackingID;
@property struct CGPoint mouthPosition; // @synthesize mouthPosition;
@property _Bool hasMouthPosition; // @synthesize hasMouthPosition;
@property struct CGPoint rightEyePosition; // @synthesize rightEyePosition;
@property _Bool hasRightEyePosition; // @synthesize hasRightEyePosition;
@property struct CGPoint leftEyePosition; // @synthesize leftEyePosition;
@property _Bool hasLeftEyePosition; // @synthesize hasLeftEyePosition;
@property struct CGRect bounds; // @synthesize bounds;
- (id).cxx_construct;
- (id)initWithBounds:(struct CGRect)arg1 hasLeftEyePosition:(_Bool)arg2 leftEyePosition:(struct CGPoint)arg3 hasRightEyePosition:(_Bool)arg4 rightEyePosition:(struct CGPoint)arg5 hasMouthPosition:(_Bool)arg6 mouthPosition:(struct CGPoint)arg7 hasFaceAngle:(_Bool)arg8 faceAngle:(float)arg9 hasTrackingID:(_Bool)arg10 trackingID:(int)arg11 hasTrackingFrameCount:(_Bool)arg12 trackingFrameCount:(int)arg13 hasSmile:(_Bool)arg14 leftEyeClosed:(_Bool)arg15 rightEyeClosed:(_Bool)arg16;
- (id)initWithBounds:(struct CGRect)arg1;
- (id)type;

@end

__attribute__((visibility("hidden")))
@interface CIFalseColor : CIFilter
{
    CIImage *inputImage;
    CIColor *inputColor0;
    CIColor *inputColor1;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (void)setDefaults;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIFilterClassDescription : NSObject
{
    NSMutableDictionary *attributes;
    NSArray *inputKeys;
    NSArray *outputKeys;
}

+ (id)classDescriptionForClass:(Class)arg1;
- (id)attributes;
- (id)outputKeys;
- (id)inputKeys;
- (id)initWithClass:(Class)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIFlashTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    CIVector *inputCenter;
    CIVector *inputExtent;
    CIColor *inputColor;
    NSNumber *inputTime;
    NSNumber *inputMaxStriationRadius;
    NSNumber *inputStriationStrength;
    NSNumber *inputStriationContrast;
    NSNumber *inputFadeThreshold;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputFadeThreshold; // @synthesize inputFadeThreshold;
@property(retain, nonatomic) NSNumber *inputStriationContrast; // @synthesize inputStriationContrast;
@property(retain, nonatomic) NSNumber *inputStriationStrength; // @synthesize inputStriationStrength;
@property(retain, nonatomic) NSNumber *inputMaxStriationRadius; // @synthesize inputMaxStriationRadius;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIVector *inputExtent; // @synthesize inputExtent;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_geomKernel;
- (id)_colorKernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CITile2Filter : CITileFilter
{
    NSNumber *inputAcuteAngle;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAcuteAngle; // @synthesize inputAcuteAngle;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIFourfoldReflectedTile : CITile2Filter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CIFourfoldRotatedTile : CITileFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CIFourfoldTranslatedTile : CITile2Filter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CIGammaAdjust : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputPower;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputPower; // @synthesize inputPower;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIGaussianBlur : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIGaussianGradient : CIFilter
{
    CIVector *inputCenter;
    CIColor *inputColor0;
    CIColor *inputColor1;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIGlassDistortion : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTexture;
    CIVector *inputCenter;
    NSNumber *inputScale;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputTexture; // @synthesize inputTexture;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (struct CGRect)regionOf:(int)arg1 destRect:(struct CGRect)arg2 userInfo:(id)arg3;
- (id)_kernel;
- (void)setDefaults;
- (id)customAttributes;

@end

__attribute__((visibility("hidden")))
@interface CIGlideReflectedTile : CITileFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CIGloom : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputRadius;
    NSNumber *inputIntensity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIHardLightBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIHatchedScreen : _CIScreenFilter
{
}

+ (id)customAttributes;
- (id)_kernel_code;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CIHighlightShadowAdjust : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    NSNumber *inputRadius;
    NSNumber *inputShadowAmount;
    NSNumber *inputHighlightAmount;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputHighlightAmount; // @synthesize inputHighlightAmount;
@property(retain, nonatomic) NSNumber *inputShadowAmount; // @synthesize inputShadowAmount;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (id)_kernelSnoB_v0;
- (id)_kernelSHnoB_v0;
- (id)_kernelSH_v0;
- (id)_kernelSHnoB_v1;
- (id)_kernelSH_v1;
- (id)_kernelSHnoB_v2;
- (id)_kernelSH_v2;
- (_Bool)_isIdentity;
- (void)setDefaults;
- (int)bestVersion;

@end

__attribute__((visibility("hidden")))
@interface CIHistogramDisplayFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputHeight;
    NSNumber *inputHighLimit;
    NSNumber *inputLowLimit;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputLowLimit; // @synthesize inputLowLimit;
@property(retain, nonatomic) NSNumber *inputHighLimit; // @synthesize inputHighLimit;
@property(retain, nonatomic) NSNumber *inputHeight; // @synthesize inputHeight;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;
- (id)customAttributes;

@end

__attribute__((visibility("hidden")))
@interface CIHoleDistortion : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (struct CGRect)computeDOD;
- (id)_colorKernel;
- (id)_geomKernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIHueAdjust : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputAngle;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIHueBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;
- (id)outputImage;

@end

@interface CIImage : NSObject <NSCoding, NSCopying>
{
    void *_priv;
}

+ (id)imageWithInternalRepresentation:(void *)arg1;
+ (id)imageWithContentsOfFile:(id)arg1 options:(id)arg2;
+ (id)imageWithContentsOfFile:(id)arg1;
+ (id)imageWithContentsOfURL:(id)arg1 options:(id)arg2;
+ (id)imageWithContentsOfURL:(id)arg1;
+ (id)imageWithData:(id)arg1 options:(id)arg2;
+ (id)imageWithData:(id)arg1;
+ (id)emptyImage;
+ (id)noiseImagePadded;
+ (id)noiseImage;
+ (id)imageWithColor:(id)arg1;
+ (id)imageWithCVPixelBuffer:(struct __CVBuffer *)arg1 options:(id)arg2;
+ (id)imageWithCVPixelBuffer:(struct __CVBuffer *)arg1;
+ (id)imageWithTexture:(unsigned int)arg1 size:(struct CGSize)arg2 options:(id)arg3;
+ (id)imageWithTexture:(unsigned int)arg1 size:(struct CGSize)arg2 flipped:(_Bool)arg3 colorSpace:(struct CGColorSpace *)arg4;
+ (id)imageWithBitmapData:(id)arg1 bytesPerRow:(unsigned long long)arg2 size:(struct CGSize)arg3 format:(int)arg4 colorSpace:(struct CGColorSpace *)arg5;
+ (id)imageWithBitmapData:(id)arg1 bytesPerRow:(unsigned long long)arg2 size:(struct CGSize)arg3 format:(int)arg4 options:(id)arg5;
+ (id)imageWithCGImage:(struct CGImage *)arg1 options:(id)arg2;
+ (id)imageWithCGImage:(struct CGImage *)arg1;
- (struct CGRect)regionOfInterestForImage:(id)arg1 inRect:(struct CGRect)arg2;
- (void *)_internalRepresentation;
- (id)_initWithInternalRepresentation:(void *)arg1;
- (id)TIFFRepresentation;
- (void)printTree;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)imageByApplyingFilter:(id)arg1 withInputParameters:(id)arg2;
- (id)filteredImage:(id)arg1 keysAndValues:(id)arg2;
- (id)properties;
- (id)description;
- (void)dealloc;
- (struct CGRect)extent;
- (id)_imageByMatchingColorSpaceWorkingSpace:(struct CGColorSpace *)arg1;
- (id)_imageByMatchingColorSpaceToWorkingSpace:(struct CGColorSpace *)arg1;
- (id)_imageByMatchingWorkingSpaceToColorSpace:(struct CGColorSpace *)arg1;
- (id)_imageByApplyingBlur:(double)arg1;
- (id)_imageByApplyingGamma:(double)arg1;
- (id)_imageByUnpremultiplying;
- (id)_imageByPremultiplying;
- (id)imageByCompositingOverImage:(id)arg1;
- (id)imageByClampingToExtent;
- (id)imageByCroppingToRect:(struct CGRect)arg1;
- (id)imageByApplyingTransform:(struct CGAffineTransform)arg1;
- (id)initWithContentsOfFile:(id)arg1 options:(id)arg2;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 options:(id)arg2;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithData:(id)arg1 options:(id)arg2;
- (id)initWithData:(id)arg1;
- (id)imageByApplyingOrientation:(int)arg1;
- (struct CGAffineTransform)imageTransformForOrientation:(int)arg1;
- (id)initWithColor:(id)arg1;
- (id)initWithColorR:(double)arg1 G:(double)arg2 B:(double)arg3 A:(double)arg4;
- (id)initWithCVPixelBuffer:(struct __CVBuffer *)arg1 options:(id)arg2;
- (id)initWithCVPixelBuffer:(struct __CVBuffer *)arg1;
- (id)initWithTexture:(unsigned int)arg1 size:(struct CGSize)arg2 options:(id)arg3;
- (id)initWithTexture:(unsigned int)arg1 size:(struct CGSize)arg2 flipped:(_Bool)arg3 colorSpace:(struct CGColorSpace *)arg4;
- (id)initWithBitmapData:(id)arg1 bytesPerRow:(unsigned long long)arg2 size:(struct CGSize)arg3 format:(int)arg4 options:(id)arg5;
- (id)initWithBitmapData:(id)arg1 bytesPerRow:(unsigned long long)arg2 size:(struct CGSize)arg3 format:(int)arg4 colorSpace:(struct CGColorSpace *)arg5;
- (id)_initWithBitmapData:(id)arg1 bytesPerRow:(unsigned long long)arg2 size:(struct CGSize)arg3 format:(int)arg4 options:(id)arg5;
- (id)initWithCGImageSource:(struct CGImageSource *)arg1 index:(unsigned long long)arg2 options:(id)arg3;
- (id)initWithCGImage:(struct CGImage *)arg1 options:(id)arg2;
- (id)_initNaiveWithCGImage:(struct CGImage *)arg1 options:(id)arg2;
- (id)initWithCGImage:(struct CGImage *)arg1;
- (id)_initWithIOSurface:(struct __IOSurface *)arg1 options:(id)arg2;
- (id)smartColorAdjustmentsForValue:(double)arg1 andStatistics:(id)arg2;
- (id)smartToneAdjustmentsForValue:(double)arg1 andStatistics:(id)arg2;
- (id)smartColorStatistics;
- (id)smartToneStatistics;
- (id)autoRedEyeFilterWithFeatures:(id)arg1 options:(id)arg2;
- (id)autoRedEyeFilterWithFeatures:(id)arg1 imageProperties:(id)arg2 options:(id)arg3;
- (id)_autoRedEyeFilterWithFeatures:(id)arg1 imageProperties:(id)arg2 context:(id)arg3 options:(id)arg4;
- (id)_dictForFeature:(id)arg1 scale:(double)arg2 imageHeight:(float)arg3;
- (id)autoAdjustmentFiltersWithOptions:(id)arg1;
- (id)autoAdjustmentFilters;
- (id)autoAdjustmentFiltersWithImageProperties:(id)arg1 options:(id)arg2;
- (id)_scaleImageToMaxDimension:(unsigned int)arg1;
- (id)smartBlackAndWhiteAdjustmentsForValue:(double)arg1 andStatistics:(id)arg2;
- (id)smartBlackAndWhiteStatistics;
- (void)getAutocropRect:(id)arg1 rotateXfrm:(struct CGAffineTransform)arg2 inputImageRect:(struct CGRect)arg3 clipRect:(struct CGRect *)arg4;
- (id)autoRotateFilterFFT:(id)arg1 image:(struct CGImage *)arg2 inputRect:(struct CGRect)arg3;
- (id)getAutoRotateFilter:(id)arg1 ciImage:(id)arg2 rgbRows:(id)arg3 inputRect:(struct CGRect)arg4 rotateCropRect:(struct CGRect *)arg5;
- (struct CGPoint)calcIntersection:(struct CGPoint)arg1 slope1:(struct CGPoint)arg2 pt2:(struct CGPoint)arg3 slope2:(struct CGPoint)arg4;

@end

__attribute__((visibility("hidden")))
@interface CIImageRowReader : NSObject <ImageRowReading>
{
    unsigned long long height;
    unsigned long long width;
    unsigned long long bpr;
    void *data;
    short red;
    short green;
    short blue;
    short alpha;
    struct CGColorSpace *cs;
}

+ (id)forImage:(id)arg1 usingContext:(id)arg2 colorspace:(struct CGColorSpace *)arg3;
+ (id)forImage:(id)arg1 usingContext:(id)arg2;
+ (id)withDictionary:(id)arg1;
+ (id)forImage:(id)arg1 downscaleToMax:(unsigned int)arg2 colorspace:(struct CGColorSpace *)arg3 usingContext:(id)arg4;
+ (id)forImage:(id)arg1 downscaleToMax:(unsigned int)arg2 colorspace:(struct CGColorSpace *)arg3;
+ (id)forImage:(id)arg1 downscaleToMax:(unsigned int)arg2;
+ (id)fromImage:(struct CGImage *)arg1;
+ (id)fromImageFile:(id)arg1;
- (unsigned int)bytesPerPixel;
- (const char *)rowAtIndex:(unsigned int)arg1;
- (short)alpha;
- (short)blue;
- (short)green;
- (short)red;
- (unsigned long long)height;
- (unsigned long long)width;
- (void)dealloc;
- (id)init;
- (void)dumpImageAsDict:(id)arg1;
- (void)dumpImageAsDeviceRGB:(id)arg1;
- (void)dumpImage:(id)arg1;
- (void)_dumpImage:(id)arg1 colorspace:(struct CGColorSpace *)arg2;

@end

__attribute__((visibility("hidden")))
@interface CILanczosScaleTransform : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputScale;
    NSNumber *inputAspectRatio;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAspectRatio; // @synthesize inputAspectRatio;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CILightTunnel : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRotation;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) NSNumber *inputRotation; // @synthesize inputRotation;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CILightenBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CILineScreen : _CIScreenFilter
{
}

+ (id)customAttributes;
- (id)_kernel_code;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CILinearBurnBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CILinearDodgeBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CILinearGradient : CIFilter
{
    CIVector *inputPoint0;
    CIVector *inputPoint1;
    CIColor *inputColor0;
    CIColor *inputColor1;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) CIVector *inputPoint1; // @synthesize inputPoint1;
@property(retain, nonatomic) CIVector *inputPoint0; // @synthesize inputPoint0;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CILinearToSRGBToneCurve : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CILumaMap : CIFilter
{
    CIImage *inputImage;
    CIImage *_tableImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (const char *)lumaTable;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CILuminosityBlendMode : CIBlendModeFilter
{
}

+ (id)_filter_display_name;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIMaskToAlpha : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIMaskedVariableBlur : CIFilter
{
    CIImage *inputImage;
    CIImage *inputMask;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputMask; // @synthesize inputMask;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIMaximumComponent : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIMaximumCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIMinimumComponent : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIMinimumCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
- (struct CGRect)_extentForInputExtent:(struct CGRect)arg1 backgroundExtent:(struct CGRect)arg2;

@end

__attribute__((visibility("hidden")))
@interface CIMipmapBlur : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputLevel;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputLevel; // @synthesize inputLevel;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIMirror : CIFilter
{
    CIImage *inputImage;
    CIVector *inputPoint;
    NSNumber *inputAngle;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) CIVector *inputPoint; // @synthesize inputPoint;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (struct Rectangle)computeDOD:(struct vec2)arg1 tst:(struct vec3)arg2 off:(struct vec4)arg3 mtx:(struct vec4)arg4;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIModTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    CIVector *inputCenter;
    NSNumber *inputTime;
    NSNumber *inputAngle;
    NSNumber *inputRadius;
    NSNumber *inputCompression;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputCompression; // @synthesize inputCompression;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIMultiplyBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIMultiplyCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
- (struct CGRect)_extentForInputExtent:(struct CGRect)arg1 backgroundExtent:(struct CGRect)arg2;

@end

__attribute__((visibility("hidden")))
@interface CIOverlayBlendMode : CIBlendModeFilter
{
}

+ (id)_filter_display_name;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIPDF417BarcodeGenerator : CICodeGenerator
{
    NSDictionary *inputOptions;
}

+ (id)customAttributes;
@property(copy, nonatomic) NSDictionary *inputOptions; // @synthesize inputOptions;
- (struct CGImage *)outputCGImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPerspectiveCorrection : CIFilter
{
    CIImage *inputImage;
    CIVector *inputTopLeft;
    CIVector *inputTopRight;
    CIVector *inputBottomRight;
    CIVector *inputBottomLeft;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputBottomLeft; // @synthesize inputBottomLeft;
@property(retain, nonatomic) CIVector *inputBottomRight; // @synthesize inputBottomRight;
@property(retain, nonatomic) CIVector *inputTopRight; // @synthesize inputTopRight;
@property(retain, nonatomic) CIVector *inputTopLeft; // @synthesize inputTopLeft;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIPerspectiveTile : CIFilter
{
    CIImage *inputImage;
    CIVector *inputTopLeft;
    CIVector *inputTopRight;
    CIVector *inputBottomRight;
    CIVector *inputBottomLeft;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputBottomLeft; // @synthesize inputBottomLeft;
@property(retain, nonatomic) CIVector *inputBottomRight; // @synthesize inputBottomRight;
@property(retain, nonatomic) CIVector *inputTopRight; // @synthesize inputTopRight;
@property(retain, nonatomic) CIVector *inputTopLeft; // @synthesize inputTopLeft;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIPerspectiveTransform : CIFilter
{
    CIImage *inputImage;
    CIVector *inputTopLeft;
    CIVector *inputTopRight;
    CIVector *inputBottomRight;
    CIVector *inputBottomLeft;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputBottomLeft; // @synthesize inputBottomLeft;
@property(retain, nonatomic) CIVector *inputBottomRight; // @synthesize inputBottomRight;
@property(retain, nonatomic) CIVector *inputTopRight; // @synthesize inputTopRight;
@property(retain, nonatomic) CIVector *inputTopLeft; // @synthesize inputTopLeft;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIPerspectiveTransformWithExtent : CIFilter
{
    CIImage *inputImage;
    CIVector *inputExtent;
    CIVector *inputTopLeft;
    CIVector *inputTopRight;
    CIVector *inputBottomRight;
    CIVector *inputBottomLeft;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputBottomLeft; // @synthesize inputBottomLeft;
@property(retain, nonatomic) CIVector *inputBottomRight; // @synthesize inputBottomRight;
@property(retain, nonatomic) CIVector *inputTopRight; // @synthesize inputTopRight;
@property(retain, nonatomic) CIVector *inputTopLeft; // @synthesize inputTopLeft;
@property(retain, nonatomic) CIVector *inputExtent; // @synthesize inputExtent;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffect : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectChrome : CIPhotoEffect
{
}

+ (id)customAttributes;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectFade : CIPhotoEffect
{
}

+ (id)customAttributes;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectInstant : CIPhotoEffect
{
}

+ (id)customAttributes;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectMono : CIPhotoEffect
{
}

+ (id)customAttributes;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectNoir : CIPhotoEffect
{
}

+ (id)customAttributes;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectProcess : CIPhotoEffect
{
}

+ (id)customAttributes;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectTonal : CIPhotoEffect
{
}

+ (id)customAttributes;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoEffectTransfer : CIPhotoEffect
{
}

+ (id)customAttributes;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPhotoGrain : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputISO;
    NSNumber *inputAmount;
    NSNumber *inputSeed;
}

@property(copy, nonatomic) NSNumber *inputSeed; // @synthesize inputSeed;
@property(copy, nonatomic) NSNumber *inputAmount; // @synthesize inputAmount;
@property(copy, nonatomic) NSNumber *inputISO; // @synthesize inputISO;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)customAttributes;
- (void)paramtersFor:(float)arg1 destination:(struct GrainParameters *)arg2 imageScaleFactor:(float)arg3;
- (id)_paddedTileKernel;
- (id)_grainBlendAndMixKernel;
- (id)_interpolateGrainKernel;

@end

__attribute__((visibility("hidden")))
@interface CIPinLightBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CIPinchDistortion : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
    NSNumber *inputScale;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (struct CGRect)computeDOD:(float)arg1 scale:(float)arg2;
- (id)_pinchDistortionScaleGE1;
- (id)_pinchDistortionScaleLT1;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPixellate : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputScale;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIPlusDarkerCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
+ (id)customAttributes;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIPlusLighterCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
+ (id)customAttributes;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIPremultiply : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

@interface CIQRCodeFeature : CIFeature
{
    struct CGRect bounds;
    struct CGPoint topLeft;
    struct CGPoint topRight;
    struct CGPoint bottomLeft;
    struct CGPoint bottomRight;
    NSString *messageString;
}

+ (id)barcodeFeaturesWithBoundsArray:(const struct CGRect *)arg1 count:(unsigned long long)arg2;
+ (id)barcodeFeatureWithBounds:(struct CGRect)arg1;
@property(copy) NSString *messageString; // @synthesize messageString;
@property struct CGPoint bottomRight; // @synthesize bottomRight;
@property struct CGPoint bottomLeft; // @synthesize bottomLeft;
@property struct CGPoint topRight; // @synthesize topRight;
@property struct CGPoint topLeft; // @synthesize topLeft;
@property struct CGRect bounds; // @synthesize bounds;
- (id).cxx_construct;
- (id)initWithBounds:(struct CGRect)arg1 topLeft:(struct CGPoint)arg2 topRight:(struct CGPoint)arg3 bottomLeft:(struct CGPoint)arg4 bottomRight:(struct CGPoint)arg5 messageString:(id)arg6;
- (id)initWithBounds:(struct CGRect)arg1;
- (id)type;

@end

__attribute__((visibility("hidden")))
@interface CIQRCodeGenerator : CICodeGenerator
{
    NSString *inputCorrectionLevel;
}

+ (id)customAttributes;
@property(copy, nonatomic) NSString *inputCorrectionLevel; // @synthesize inputCorrectionLevel;
- (struct CGImage *)outputCGImage;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface CIRadialGradient : CIFilter
{
    CIVector *inputCenter;
    NSNumber *inputRadius0;
    NSNumber *inputRadius1;
    CIColor *inputColor0;
    CIColor *inputColor1;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) NSNumber *inputRadius1; // @synthesize inputRadius1;
@property(retain, nonatomic) NSNumber *inputRadius0; // @synthesize inputRadius0;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIRandomGenerator : CIFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIRectangleDetector : CIDetector
{
    CIContext *context;
    double _width;
    double _height;
    NSMutableDictionary *featureOptions;
    struct OpaqueVTPixelTransferSession *pixelTransferSession;
    struct __CVBuffer *interimScaleBuffer;
    struct __CVBuffer *scaleBuffer;
    float *perMeshPtr;
    void *_internalBuffer;
}

@property(retain, nonatomic) CIContext *context; // @synthesize context;
- (id)featuresInImage:(id)arg1;
- (id)featuresInImage:(id)arg1 options:(id)arg2;
- (id)featuresInImageUsingCCRect:(id)arg1 options:(id)arg2;
- (void)finalize;
- (void)dealloc;
- (id)initWithContext:(id)arg1 options:(id)arg2;

@end

@interface CIRectangleFeature : CIFeature
{
    struct CGRect bounds;
    struct CGPoint topLeft;
    struct CGPoint topRight;
    struct CGPoint bottomLeft;
    struct CGPoint bottomRight;
}

+ (id)rectangleFeaturesWithBoundsArray:(const struct CGRect *)arg1 count:(unsigned long long)arg2;
+ (id)rectangleFeatureWithBounds:(struct CGRect)arg1;
@property struct CGPoint bottomRight; // @synthesize bottomRight;
@property struct CGPoint bottomLeft; // @synthesize bottomLeft;
@property struct CGPoint topRight; // @synthesize topRight;
@property struct CGPoint topLeft; // @synthesize topLeft;
@property struct CGRect bounds; // @synthesize bounds;
- (id).cxx_construct;
- (id)initWithBounds:(struct CGRect)arg1 topLeft:(struct CGPoint)arg2 topRight:(struct CGPoint)arg3 bottomLeft:(struct CGPoint)arg4 bottomRight:(struct CGPoint)arg5;
- (id)initWithBounds:(struct CGRect)arg1;
- (id)type;

@end

__attribute__((visibility("hidden")))
@interface CIRedEyeCorrections : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    NSString *inputCameraModel;
    NSArray *inputCorrectionInfo;
}

@property(copy, nonatomic) NSArray *inputCorrectionInfo; // @synthesize inputCorrectionInfo;
@property(copy, nonatomic) NSString *inputCameraModel; // @synthesize inputCameraModel;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIRedEyeRepair : NSObject
{
    _Bool ownLF;
    CDStruct_79f2618e *lf;
    int imageSourceType;
    struct CGImageBlockSet *blockSet;
    void *releaseMe;
    struct __CFData *dataRef;
    NSArray *faces;
    int nRepairs;
    int nextRepairTag;
    CDStruct_907e448c repairs[32];
    int lastRepairTag;
    float lastRepairIOD;
    CDStruct_6ca1d5c6 standardTemplate;
    int iFaceIndex;
    _Bool iLeft;
    _Bool debugRedEye;
    _Bool logRepairs;
    int redEyeThresholdKind;
    _Bool renderAlpha;
    _Bool infillBackground;
    _Bool renderSpecularShine;
    float specularSize;
    float specularSoftness;
    _Bool pupilShadeAlignment;
    _Bool autoPupilTonality;
    _Bool forceLoValue;
    int loValue;
    CDStruct_c3faddef lastClickYBitmap;
    CDStruct_c3faddef lastClickCbCrBitmap;
    int lastClickBitmapMinX;
    int lastClickBitmapMaxX;
    int lastClickBitmapMinY;
    int lastClickBitmapMaxY;
    CDStruct_c3faddef lastClickYBitmaps[3];
    CDStruct_c3faddef lastClickCbCrBitmaps[3];
    CDStruct_5973fb4f lastClickIRects[3];
    CDStruct_c3faddef lastSearchYBitmap;
    CDStruct_c3faddef lastSearchCbCrBitmap;
    int lastSearchBitmapMinX;
    int lastSearchBitmapMaxX;
    int lastSearchBitmapMinY;
    int lastSearchBitmapMaxY;
    int nPolyPoints;
    _Bool polyClosed;
    struct CGPoint polyPoints[20];
    struct {
        float a;
        float b;
        float c;
    } polyLines[20];
    _Bool polyPointConcave[20];
    unsigned char CbCrDistanceTable[65536];
    int nLinears;
    int linearCoefficients[8][3];
}

+ (struct CGRect)supportRectangleWithFaceArray:(id)arg1 imageSize:(struct CGSize)arg2;
+ (struct CGRect)supportRectangleWithRepair:(id)arg1 imageSize:(struct CGSize)arg2;
+ (struct CGRect)supportRectangleWithPoint:(struct CGPoint)arg1 imageSize:(struct CGSize)arg2 IOD:(float)arg3;
+ (float)upperRepairDistance:(float)arg1;
+ (float)upperRepairDistanceFraction:(float)arg1;
- (void)setLeft:(_Bool)arg1;
- (void)setFaceIndex:(int)arg1;
- (void)executeRepairArray:(id)arg1;
- (void)executeRepair:(id)arg1;
- (_Bool)getBool:(_Bool *)arg1 d:(id)arg2 s:(id)arg3;
- (_Bool)getInt:(int *)arg1 d:(id)arg2 s:(id)arg3;
- (_Bool)getFloat:(float *)arg1 d:(id)arg2 s:(id)arg3;
- (id)repairArray;
- (void)autoRepairWithFaceArray:(id)arg1;
- (int)redEyeRemovalWithData:(CDStruct_8b259ba7)arg1;
- (void)skinInit;
- (void)prepareLineFunctions;
- (int)distanceMaskFromPolyToCb:(int)arg1 Cr:(int)arg2;
- (void)autoRepairExtractAndSearchLeft:(CDStruct_a734b2e2)arg1 right:(CDStruct_a734b2e2)arg2 data:(CDStruct_e0ece3c1 *)arg3 repairSize:(float)arg4 autoPupilTonality:(_Bool)arg5 faceIndex:(int)arg6;
- (_Bool)gatherProminencesWithC:(CDStruct_c3faddef *)arg1 MC:(CDStruct_c3faddef *)arg2 altC:(CDStruct_c3faddef *)arg3 altMC:(CDStruct_c3faddef *)arg4 maxwindowsize:(int)arg5 repairsize:(int)arg6 IR:(CDStruct_a734b2e2)arg7 fr:(CDStruct_e0ece3c1 *)arg8 intoHopper:(CDStruct_08ff8b76 *)arg9 faceIndex:(int)arg10 left:(_Bool)arg11;
- (void)insertIntoProminenceVettingHopper:(CDStruct_08ff8b76 *)arg1 max:(int)arg2 outside:(int)arg3 confidence:(float)arg4 distance:(float)arg5 row:(int)arg6 column:(int)arg7 IOD:(float)arg8;
- (float)confidenceWithIOD:(float)arg1 repair:(int)arg2 andProminenceDifference:(int)arg3;
- (float)extractAverageFaceY:(CDStruct_e0ece3c1 *)arg1 contrast:(float *)arg2 faceIndex:(int)arg3;
- (void)redoLastRepair;
- (int)redoRepairWithTag:(int)arg1 IOD:(float)arg2;
- (CDStruct_907e448c *)repairWithTag:(int)arg1;
- (int)redEyeRemovalWithPoint:(struct CGPoint)arg1 alignPupilShades:(_Bool)arg2 matching:(CDStruct_a734b2e2)arg3 force:(int)arg4 IOD:(float)arg5 tap:(_Bool)arg6;
- (_Bool)extractReusableAlignedBitmapsAroundPoint:(CDStruct_c3faddef *)arg1 YR:(CDStruct_a734b2e2)arg2 subYBitmap:(CDStruct_c3faddef *)arg3 subCbCrBitmap:(CDStruct_c3faddef *)arg4;
- (_Bool)computeTrimmedBitmaps:(CDStruct_c3faddef *)arg1 newY:(CDStruct_c3faddef *)arg2 newCbCr:(CDStruct_c3faddef *)arg3 IR:(CDStruct_a734b2e2)arg4 newTrimY:(CDStruct_c3faddef *)arg5 newTrimCbCr:(CDStruct_c3faddef *)arg6 returningYR:(CDStruct_a734b2e2 *)arg7 andCbCrR:(CDStruct_a734b2e2 *)arg8;
- (float)lowerRepairSize:(float)arg1;
- (float)upperRepairSize:(float)arg1;
- (float)lowerRepairSizeFraction:(float)arg1;
- (float)upperRepairSizeFraction:(float)arg1;
- (int)averageValueFromY:(CDStruct_c3faddef *)arg1 withinSkinMask:(CDStruct_c3faddef *)arg2 butOutsideAlpha:(CDStruct_c3faddef *)arg3;
- (void)undoRepair:(int)arg1;
- (int)format;
- (int)lastRepairTag;
- (int)nRepairs;
- (CDStruct_907e448c *)repairs;
- (id)faces;
- (CDStruct_a734b2e2)standardTemplate;
- (void)setLoValue:(int)arg1;
- (int)loValue;
- (void)setForceLoValue:(_Bool)arg1;
- (_Bool)forceLoValue;
- (void)setAutoPupilTonality:(_Bool)arg1;
- (_Bool)autoPupilTonality;
- (void)setPupilShadeAlignment:(_Bool)arg1;
- (_Bool)pupilShadeAlignment;
- (void)setSpecularSoftness:(float)arg1;
- (float)specularSoftness;
- (void)setSpecularSize:(float)arg1;
- (float)specularSize;
- (void)setRenderSpecularShine:(_Bool)arg1;
- (_Bool)renderSpecularShine;
- (void)setInfillBackground:(_Bool)arg1;
- (_Bool)infillBackground;
- (void)setRenderAlpha:(_Bool)arg1;
- (_Bool)renderAlpha;
- (void)setRedEyeThresholdKind:(int)arg1;
- (int)redEyeThresholdKind;
- (void)setLogRepairs:(_Bool)arg1;
- (_Bool)logRepairs;
- (void)setDebug:(_Bool)arg1;
- (_Bool)debug;
- (void)dealloc;
- (id)initWithExternalBuffer:(char *)arg1 subRectangle:(struct CGRect)arg2 fullSize:(struct CGSize)arg3 rowBytes:(unsigned long long)arg4 cameraModel:(id)arg5;
- (id)initWithExternalBuffer:(char *)arg1 size:(struct CGSize)arg2 rowBytes:(unsigned long long)arg3;
- (id)initWithFrameExternalBuffer:(CDStruct_79f2618e *)arg1;
- (id)initWithDeskView:(id)arg1 andFrame:(CDStruct_79f2618e *)arg2;
- (void)initializeNonDebugVariables;
- (void)repairExternalBuffer;
- (struct CGImage *)createRepairedImage;
- (id)initWithCGImage:(struct CGImage *)arg1 cameraModel:(id)arg2;
- (void)setColorSpace:(struct CGColorSpace *)arg1;
- (_Bool)getDataProviderCopyWithImage:(struct CGImage *)arg1 into:(CDStruct_c3faddef *)arg2;
- (_Bool)getDataProviderBytePtrWithImage:(struct CGImage *)arg1 into:(CDStruct_c3faddef *)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4;
- (_Bool)getBlockSetWithImage:(struct CGImage *)arg1 into:(CDStruct_c3faddef *)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4;

@end

__attribute__((visibility("hidden")))
@interface CIReedSolomon : NSObject
{
    int _expTable[256];
    int _logTable[256];
    int _cachedGeneratorNum;
    int _memoryCapacity;
    CDStruct_84b23d7a *_cachedGenerators;
}

- (void)dealloc;
- (_Bool)encode:(int *)arg1 length:(int)arg2 bytes:(int)arg3;
- (CDStruct_84b23d7a *)buildGenerator:(int)arg1;
- (CDStruct_84b23d7a *)divide:(CDStruct_84b23d7a *)arg1 by:(CDStruct_84b23d7a *)arg2;
- (CDStruct_84b23d7a *)multiplyByMonomial:(CDStruct_84b23d7a *)arg1 degree:(int)arg2 coefficient:(int)arg3;
- (CDStruct_84b23d7a *)multiplyPoly:(CDStruct_84b23d7a *)arg1 with:(CDStruct_84b23d7a *)arg2;
- (CDStruct_84b23d7a *)addOrSubtractPoly:(CDStruct_84b23d7a *)arg1 with:(CDStruct_84b23d7a *)arg2;
- (CDStruct_84b23d7a *)copyPoly:(CDStruct_84b23d7a *)arg1;
- (int)polyCoefficient:(CDStruct_84b23d7a *)arg1 degree:(int)arg2;
- (void)clearPoly:(CDStruct_84b23d7a *)arg1;
- (_Bool)fillPoly:(CDStruct_84b23d7a *)arg1 coefficients:(int *)arg2 length:(int)arg3;
- (_Bool)isZero:(CDStruct_84b23d7a)arg1;
- (int *)coefficients:(CDStruct_84b23d7a)arg1;
- (int)Degree:(CDStruct_84b23d7a)arg1;
- (CDStruct_84b23d7a *)createMonomial:(int)arg1 coefficient:(int)arg2;
- (int)multiply:(int)arg1 with:(int)arg2;
- (int)inverse:(int)arg1;
- (int)Exp:(int)arg1;
- (int)addOrSubtract:(int)arg1 with:(int)arg2;
- (id)initReedSolomon;

@end

__attribute__((visibility("hidden")))
@interface CISRGBToneCurveToLinear : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CISaturationBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIScreenBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CISepiaTone : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputIntensity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CISharpenLuminance : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputSharpness;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputSharpness; // @synthesize inputSharpness;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CISimpleTile : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CISixfoldReflectedTile : CITileFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CISixfoldRotatedTile : CITileFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CISkyAndGrassAdjust : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputSkyAmount;
    NSNumber *inputGrassAmount;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputGrassAmount; // @synthesize inputGrassAmount;
@property(retain, nonatomic) NSNumber *inputSkyAmount; // @synthesize inputSkyAmount;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CISmartBlackAndWhite : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputStrength;
    NSNumber *inputNeutralGamma;
    NSNumber *inputTone;
    NSNumber *inputHue;
    NSNumber *inputGrain;
    NSNumber *inputScaleFactor;
}

+ (id)customAttributes;
@property(copy, nonatomic) NSNumber *inputScaleFactor; // @synthesize inputScaleFactor;
@property(copy, nonatomic) NSNumber *inputGrain; // @synthesize inputGrain;
@property(copy, nonatomic) NSNumber *inputHue; // @synthesize inputHue;
@property(copy, nonatomic) NSNumber *inputTone; // @synthesize inputTone;
@property(copy, nonatomic) NSNumber *inputNeutralGamma; // @synthesize inputNeutralGamma;
@property(copy, nonatomic) NSNumber *inputStrength; // @synthesize inputStrength;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (id)hueArrayImage:(float *)arg1;
- (float *)createHueArray;
- (void)getNonNormalizedSettings:(CDStruct_31328b19 *)arg1;

@end

__attribute__((visibility("hidden")))
@interface CISmartColorFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputVibrancy;
    NSNumber *inputContrast;
    NSNumber *inputCast;
    NSNumber *inputUseCube;
    CIImage *_cubeImage;
    CIContext *_cubeContext;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputUseCube; // @synthesize inputUseCube;
@property(retain, nonatomic) NSNumber *inputCast; // @synthesize inputCast;
@property(retain, nonatomic) NSNumber *inputContrast; // @synthesize inputContrast;
@property(retain, nonatomic) NSNumber *inputVibrancy; // @synthesize inputVibrancy;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)_kernelCast;
- (id)_kernelV_lt1;
- (id)_kernelV_gt1;
- (id)_kernelCNeg;
- (id)_kernelCPos;
- (void)dealloc;
- (_Bool)_isIdentity;

@end

__attribute__((visibility("hidden")))
@interface CISmartToneFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputExposure;
    NSNumber *inputContrast;
    NSNumber *inputBrightness;
    NSNumber *inputShadows;
    NSNumber *inputHighlights;
    NSNumber *inputBlack;
    NSNumber *inputUseCube;
    CIImage *_cubeImage;
    CIContext *_cubeContext;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputUseCube; // @synthesize inputUseCube;
@property(retain, nonatomic) NSNumber *inputBlack; // @synthesize inputBlack;
@property(retain, nonatomic) NSNumber *inputHighlights; // @synthesize inputHighlights;
@property(retain, nonatomic) NSNumber *inputShadows; // @synthesize inputShadows;
@property(retain, nonatomic) NSNumber *inputBrightness; // @synthesize inputBrightness;
@property(retain, nonatomic) NSNumber *inputContrast; // @synthesize inputContrast;
@property(retain, nonatomic) NSNumber *inputExposure; // @synthesize inputExposure;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)_kernelH;
- (id)_kernelC;
- (id)_kernelBpos;
- (id)_kernelBneg;
- (void)dealloc;
- (_Bool)_isIdentity;

@end

__attribute__((visibility("hidden")))
@interface CISmoothLinearGradient : CIFilter
{
    CIVector *inputPoint0;
    CIVector *inputPoint1;
    CIColor *inputColor0;
    CIColor *inputColor1;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) CIVector *inputPoint1; // @synthesize inputPoint1;
@property(retain, nonatomic) CIVector *inputPoint0; // @synthesize inputPoint0;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CISoftLightBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CISourceAtopCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CISourceInCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
- (struct CGRect)_extentForInputExtent:(struct CGRect)arg1 backgroundExtent:(struct CGRect)arg2;

@end

__attribute__((visibility("hidden")))
@interface CISourceOutCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
- (struct CGRect)_extentForInputExtent:(struct CGRect)arg1 backgroundExtent:(struct CGRect)arg2;

@end

__attribute__((visibility("hidden")))
@interface CISourceOverCompositing : _CICompositeFilter
{
}

+ (id)_kernel_source;
+ (id)_kernel_name;
+ (id)_filter_display_name;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIStarShineGenerator : CIFilter
{
    CIVector *inputCenter;
    CIColor *inputColor;
    NSNumber *inputRadius;
    NSNumber *inputCrossScale;
    NSNumber *inputCrossAngle;
    NSNumber *inputCrossOpacity;
    NSNumber *inputCrossWidth;
    NSNumber *inputEpsilon;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputCrossOpacity; // @synthesize inputCrossOpacity;
@property(retain, nonatomic) NSNumber *inputCrossWidth; // @synthesize inputCrossWidth;
@property(retain, nonatomic) NSNumber *inputCrossScale; // @synthesize inputCrossScale;
@property(retain, nonatomic) NSNumber *inputCrossAngle; // @synthesize inputCrossAngle;
@property(retain, nonatomic) NSNumber *inputEpsilon; // @synthesize inputEpsilon;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIStraightenFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputAngle;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIStretch : CIFilter
{
    CIImage *inputImage;
    CIVector *inputPoint;
    CIVector *inputSize;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputSize; // @synthesize inputSize;
@property(retain, nonatomic) CIVector *inputPoint; // @synthesize inputPoint;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (struct CGRect)computeDOD:(struct vec4)arg1;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIStripesGenerator : CIFilter
{
    CIVector *inputCenter;
    CIColor *inputColor0;
    CIColor *inputColor1;
    NSNumber *inputWidth;
    NSNumber *inputSharpness;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputSharpness; // @synthesize inputSharpness;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) CIColor *inputColor1; // @synthesize inputColor1;
@property(retain, nonatomic) CIColor *inputColor0; // @synthesize inputColor0;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CISubtractBlendMode : CIBlendModeFilter
{
}

+ (id)_kernel;
+ (id)_filter_display_name;

@end

__attribute__((visibility("hidden")))
@interface CISwipeTransition : CIFilter
{
    CIImage *inputImage;
    CIImage *inputTargetImage;
    CIVector *inputExtent;
    CIColor *inputColor;
    NSNumber *inputTime;
    NSNumber *inputAngle;
    NSNumber *inputWidth;
    NSNumber *inputOpacity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputOpacity; // @synthesize inputOpacity;
@property(retain, nonatomic) NSNumber *inputWidth; // @synthesize inputWidth;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputTime; // @synthesize inputTime;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIVector *inputExtent; // @synthesize inputExtent;
@property(retain, nonatomic) CIImage *inputTargetImage; // @synthesize inputTargetImage;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CITemperatureAndTint : CIFilter
{
    CIImage *inputImage;
    CIVector *inputNeutral;
    CIVector *inputTargetNeutral;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIVector *inputTargetNeutral; // @synthesize inputTargetNeutral;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
@property(retain, nonatomic) CIVector *inputNeutral; // @dynamic inputNeutral;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIThermal : CILumaMap
{
}

+ (id)customAttributes;
- (const char *)lumaTable;

@end

__attribute__((visibility("hidden")))
@interface CIToneCurve : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    CIVector *inputPoint0;
    CIVector *inputPoint1;
    CIVector *inputPoint2;
    CIVector *inputPoint3;
    CIVector *inputPoint4;
    CIImage *_curveImage;
}

+ (void)splineCurveTable:(double *)arg1 tableSize:(int)arg2 gamma:(double)arg3 from:(const struct CGPoint *)arg4;
+ (id)curveImageFromPoints:(const struct CGPoint *)arg1;
+ (id)curveImageFromPoints:(const struct CGPoint *)arg1 linear:(_Bool)arg2;
+ (id)customAttributes;
@property(copy, nonatomic) CIVector *inputPoint4; // @synthesize inputPoint4;
@property(copy, nonatomic) CIVector *inputPoint3; // @synthesize inputPoint3;
@property(copy, nonatomic) CIVector *inputPoint2; // @synthesize inputPoint2;
@property(copy, nonatomic) CIVector *inputPoint1; // @synthesize inputPoint1;
@property(copy, nonatomic) CIVector *inputPoint0; // @synthesize inputPoint0;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (_Bool)_isIdentity;
- (id)_kernel16;
- (void)setDefaults;
- (void)dealloc;

@end

__attribute__((visibility("hidden")))
@interface CITriangleKaleidoscope : CIFilter
{
    CIImage *inputImage;
    CIVector *inputPoint;
    NSNumber *inputSize;
    NSNumber *inputRotation;
    NSNumber *inputDecay;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputDecay; // @synthesize inputDecay;
@property(retain, nonatomic) NSNumber *inputRotation; // @synthesize inputRotation;
@property(retain, nonatomic) NSNumber *inputSize; // @synthesize inputSize;
@property(retain, nonatomic) CIVector *inputPoint; // @synthesize inputPoint;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_geomKernel;
- (id)_colorKernel;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CITwelvefoldReflectedTile : CITileFilter
{
}

+ (id)customAttributes;
- (id)outputImage;
- (id)_kernel_source;
- (id)_kernel_name;

@end

__attribute__((visibility("hidden")))
@interface CITwirlDistortion : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
    NSNumber *inputAngle;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIUnpremultiply : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;

@end

__attribute__((visibility("hidden")))
@interface CIUnsharpMask : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputRadius;
    NSNumber *inputIntensity;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

@interface CIVector : NSObject <NSCopying, NSCoding>
{
    unsigned long long _count;
    union {
        double vec[4];
        double *ptr;
    } _u;
}

+ (id)vectorWithString:(id)arg1;
+ (id)vectorWithCGAffineTransform:(struct CGAffineTransform)arg1;
+ (id)vectorWithCGRect:(struct CGRect)arg1;
+ (id)vectorWithCGPoint:(struct CGPoint)arg1;
+ (id)vectorWithX:(double)arg1 Y:(double)arg2 Z:(double)arg3 W:(double)arg4;
+ (id)vectorWithX:(double)arg1 Y:(double)arg2 Z:(double)arg3;
+ (id)vectorWithX:(double)arg1 Y:(double)arg2;
+ (id)vectorWithX:(double)arg1;
+ (id)vectorWithValues:(const double *)arg1 count:(unsigned long long)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)stringRepresentation;
- (struct CGAffineTransform)CGAffineTransformValue;
- (struct CGRect)CGRectValue;
- (struct CGPoint)CGPointValue;
- (double)W;
- (double)Z;
- (double)Y;
- (double)X;
- (double)valueAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)finalize;
- (void)dealloc;
- (id)initWithString:(id)arg1;
- (id)initWithValues:(const double *)arg1 count:(unsigned long long)arg2;
- (id)initWithCGAffineTransform:(struct CGAffineTransform)arg1;
- (id)initWithCGRect:(struct CGRect)arg1;
- (id)initWithCGPoint:(struct CGPoint)arg1;
- (id)initWithX:(double)arg1 Y:(double)arg2 Z:(double)arg3 W:(double)arg4;
- (id)initWithX:(double)arg1 Y:(double)arg2 Z:(double)arg3;
- (id)initWithX:(double)arg1 Y:(double)arg2;
- (id)initWithX:(double)arg1;
- (id)init;
- (double *)_values;

@end

__attribute__((visibility("hidden")))
@interface CIVibrance : CIFilter <_CIFilterProperties>
{
    CIImage *inputImage;
    NSNumber *inputAmount;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAmount; // @synthesize inputAmount;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)_initFromProperties:(id)arg1;
- (id)_outputProperties;
- (id)outputImage;
- (id)_kernelPos;
- (id)_kernelNeg;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIVignette : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputIntensity;
    NSNumber *inputRadius;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIVignetteEffect : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
    NSNumber *inputIntensity;
    NSNumber *inputFalloff;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputFalloff; // @synthesize inputFalloff;
@property(retain, nonatomic) NSNumber *inputIntensity; // @synthesize inputIntensity;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_negkernel;
- (id)_poskernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

__attribute__((visibility("hidden")))
@interface CIVortexDistortion : CIFilter
{
    CIImage *inputImage;
    CIVector *inputCenter;
    NSNumber *inputRadius;
    NSNumber *inputAngle;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputCenter; // @synthesize inputCenter;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (id)_kernel;
- (_Bool)_isIdentity;
- (void)setDefaults;

@end

@interface CIWarpKernel : CIKernel
{
}

- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 inputImage:(id)arg3 andArguments:(id)arg4;
- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 inputImage:(id)arg3 arguments:(id)arg4;
- (id)applyWithExtent:(struct CGRect)arg1 roiCallback:(CDUnknownBlockType)arg2 andArguments:(id)arg3;
- (id)initWithDict:(id)arg1;
- (id)initWithString:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface CIWhitePointAdjust : CIFilter
{
    CIImage *inputImage;
    CIColor *inputColor;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (void)setDefaults;
- (id)outputImage;
- (_Bool)_isIdentity;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIWrapMirror : CIFilter
{
    CIImage *inputImage;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CIXRay : CILumaMap
{
}

+ (id)customAttributes;
- (const char *)lumaTable;

@end

__attribute__((visibility("hidden")))
@interface CUIInnerGlowOrShadowFilter : CIFilter
{
    CIImage *inputImage;
    CIVector *inputOffset;
    NSNumber *inputRange;
    NSNumber *inputRadius;
    CIColor *inputColor;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) NSNumber *inputRange; // @synthesize inputRange;
@property(retain, nonatomic) CIVector *inputOffset; // @synthesize inputOffset;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CUIOuterBevelEmbossFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputRadius;
    NSNumber *inputSize;
    NSNumber *inputSoften;
    NSNumber *inputAngle;
    CIColor *inputHighlightColor;
    CIColor *inputShadowColor;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputShadowColor; // @synthesize inputShadowColor;
@property(retain, nonatomic) CIColor *inputHighlightColor; // @synthesize inputHighlightColor;
@property(retain, nonatomic) NSNumber *inputAngle; // @synthesize inputAngle;
@property(retain, nonatomic) NSNumber *inputSoften; // @synthesize inputSoften;
@property(retain, nonatomic) NSNumber *inputSize; // @synthesize inputSize;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernelC;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CUIOuterGlowOrShadowFilter : CIFilter
{
    CIImage *inputImage;
    CIVector *inputOffset;
    NSNumber *inputRange;
    NSNumber *inputRadius;
    NSNumber *inputSize;
    NSNumber *inputSpread;
    CIColor *inputColor;
}

+ (id)customAttributes;
@property(retain, nonatomic) CIColor *inputColor; // @synthesize inputColor;
@property(retain, nonatomic) NSNumber *inputSpread; // @synthesize inputSpread;
@property(retain, nonatomic) NSNumber *inputSize; // @synthesize inputSize;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) NSNumber *inputRange; // @synthesize inputRange;
@property(retain, nonatomic) CIVector *inputOffset; // @synthesize inputOffset;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CUIScaleClampFilter : CIFilter
{
    CIImage *inputImage;
    NSNumber *inputScale;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputScale; // @synthesize inputScale;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

__attribute__((visibility("hidden")))
@interface CUIShapeEffectBlur1 : CIFilter
{
    CIImage *inputImage;
    CIImage *inputFill;
    CIVector *inputOffset;
    NSNumber *inputRadius;
    CIColor *inputGlowColorInner;
    CIColor *inputGlowColorOuter;
    CIColor *inputShadowColorInner;
    CIColor *inputShadowColorOuter;
    NSNumber *inputShadowBlurInner;
    NSNumber *inputShadowBlurOuter;
}

+ (id)customAttributes;
@property(retain, nonatomic) NSNumber *inputShadowBlurOuter; // @synthesize inputShadowBlurOuter;
@property(retain, nonatomic) NSNumber *inputShadowBlurInner; // @synthesize inputShadowBlurInner;
@property(retain, nonatomic) CIColor *inputShadowColorOuter; // @synthesize inputShadowColorOuter;
@property(retain, nonatomic) CIColor *inputShadowColorInner; // @synthesize inputShadowColorInner;
@property(retain, nonatomic) CIColor *inputGlowColorOuter; // @synthesize inputGlowColorOuter;
@property(retain, nonatomic) CIColor *inputGlowColorInner; // @synthesize inputGlowColorInner;
@property(retain, nonatomic) NSNumber *inputRadius; // @synthesize inputRadius;
@property(retain, nonatomic) CIVector *inputOffset; // @synthesize inputOffset;
@property(retain, nonatomic) CIImage *inputFill; // @synthesize inputFill;
@property(retain, nonatomic) CIImage *inputImage; // @synthesize inputImage;
- (id)outputImage;
- (void)setDefaults;
- (id)_kernel;

@end

