//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
// UUID: D3149673-36C9-3042-862B-9F5AE408572D
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 280.18.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol HDDataEntity <HDSQLiteEntity>
+ (_Bool)acceptsObject:(HKObject *)arg1;
+ (void)applyRelatedPropertiesToObject:(HKObject *)arg1 entity:(HDDataEntity *)arg2 properties:(NSArray *)arg3 values:(id *)arg4 authorizationFilter:(NSArray * (^)(NSArray *))arg5 healthDaemon:(id <HDHealthDaemon>)arg6;
+ (_Bool)isBackedByTable;
+ (long long)preferredEntityType;
+ (NSString *)columnNameForSortIdentifier:(NSString *)arg1;
+ (NSSet *)UUIDsForObectsOfType:(long long)arg1 predicate:(HDSQLitePredicate *)arg2 healthDaemon:(id <HDHealthDaemon>)arg3 error:(id *)arg4;
+ (long long)countOfObjectsOfType:(long long)arg1 healthDaemon:(id <HDHealthDaemon>)arg2 predicate:(HDSQLitePredicate *)arg3 withError:(id *)arg4;
+ (NSArray *)sourceIDsForObjectsOfType:(long long)arg1 healthDaemon:(id <HDHealthDaemon>)arg2 predicate:(HDSQLitePredicate *)arg3 error:(id *)arg4;
+ (void)enumerateObjectsOfType:(long long)arg1 healthDaemon:(id <HDHealthDaemon>)arg2 predicate:(HDSQLitePredicate *)arg3 sourceIdentifier:(NSNumber *)arg4 authorizationFilter:(NSArray * (^)(NSArray *))arg5 limit:(unsigned long long)arg6 anchor:(id *)arg7 handler:(void (^)(HKObject *, long long, _Bool *, NSError *))arg8;
+ (void)enumerateObjectsOfType:(long long)arg1 healthDaemon:(id <HDHealthDaemon>)arg2 predicate:(HDSQLitePredicate *)arg3 sourceIdentifier:(NSNumber *)arg4 authorizationFilter:(NSArray * (^)(NSArray *))arg5 orderBy:(NSArray *)arg6 directions:(NSArray *)arg7 limit:(unsigned long long)arg8 handler:(void (^)(HKObject *, long long, _Bool *, NSError *))arg9;
+ (void)enumerateObjectsWithHealthDaemon:(id <HDHealthDaemon>)arg1 predicate:(HDSQLitePredicate *)arg2 sourceIdentifier:(NSNumber *)arg3 authorizationFilter:(NSArray * (^)(NSArray *))arg4 orderBy:(NSArray *)arg5 directions:(NSArray *)arg6 limit:(unsigned long long)arg7 handler:(void (^)(HKObject *, long long, _Bool *, NSError *))arg8;
+ (id)dataEntityForObject:(HKObject *)arg1 healthDaemon:(id <HDHealthDaemon>)arg2 error:(id *)arg3;
+ (_Bool)deleteDataObjects:(NSArray *)arg1 sourceEntity:(HDSourceEntity *)arg2 healthDaemon:(id <HDHealthDaemon>)arg3 error:(id *)arg4;
+ (_Bool)deleteDataEntityWithPersistentID:(long long)arg1 inDatabase:(HDSQLiteDatabase *)arg2 error:(id *)arg3;
+ (void)insertDataObjects:(NSArray *)arg1 withProvenance:(unsigned long long)arg2 sourceEntity:(HDSourceEntity *)arg3 healthDaemon:(id <HDHealthDaemon>)arg4 completionHandler:(void (^)(_Bool, _Bool, HDDataEntity *, NSError *))arg5;
+ (id)insertDataObject:(HKObject *)arg1 withProvenance:(unsigned long long)arg2 sourceEntity:(HDSourceEntity *)arg3 healthDaemon:(id <HDHealthDaemon>)arg4 error:(id *)arg5;
- (_Bool)deleteAssociatedEntitiesInDatabase:(HDSQLiteDatabase *)arg1 error:(id *)arg2;
- (NSNumber *)dataAnchor;
@end

@protocol HDDiagnosticObject <NSObject>
- (NSString *)diagnosticDescription;
@end

@protocol HDManagedSyncEntity <HDSyncEntity>
+ (_Bool)isManagedEntity;
@end

@protocol HDSQLiteEntity <NSObject>
+ (void)applyPropertySetters:(NSDictionary *)arg1 toObject:(id)arg2 withProperties:(NSArray *)arg3 values:(id *)arg4;
+ (NSString *)associationPropertyForEntityClass:(Class)arg1;
+ (NSString *)databasePropertyToSetClientProperty:(NSString *)arg1;
+ (NSString *)databasePropertyToGetClientProperty:(NSString *)arg1;
+ (NSMutableDictionary *)copyDatabaseDictionaryToSetClientDictionary:(NSDictionary *)arg1;
+ (NSString *)disambiguatedSQLForProperty:(NSString *)arg1;
+ (NSSet *)foreignDatabaseTablesToDelete;
+ (NSString *)foreignKeyColumnForTable:(NSString *)arg1;
+ (NSString *)foreignDatabaseTableForProperty:(NSString *)arg1;
+ (NSString *)foreignDatabaseColumnForProperty:(NSString *)arg1;
+ (NSString *)joinClauseForProperty:(NSString *)arg1;
+ (NSString *)disambiguatedDatabaseTable;
+ (NSString *)databaseTable;
+ (NSString *)databaseName;
+ (id)databaseValueForProperty:(NSString *)arg1 clientValue:(id)arg2;
- (void)getValuesForProperties:(NSArray *)arg1 withDatabase:(HDSQLiteDatabase *)arg2 applier:(void (^)(NSArray *, id *))arg3;
- (_Bool)deleteFromDatabase:(HDSQLiteDatabase *)arg1;
- (id)valueForExternalProperty:(NSString *)arg1;
- (void)setExternalValuesWithDictionary:(NSDictionary *)arg1;
- (_Bool)setValuesWithDictionary:(NSDictionary *)arg1 database:(HDSQLiteDatabase *)arg2;
- (_Bool)setValue:(id)arg1 forProperty:(NSString *)arg2 database:(HDSQLiteDatabase *)arg3;
- (void)getValues:(id *)arg1 forProperties:(id *)arg2 count:(unsigned long long)arg3 database:(HDSQLiteDatabase *)arg4;
- (id)valueForProperty:(NSString *)arg1 database:(HDSQLiteDatabase *)arg2;

@optional
+ (NSString *)columnNameForSortIdentifier:(NSString *)arg1;
@end

@protocol HDSyncEntity <NSObject>
+ (NSNumber *)syncEntitiesWithStartAnchor:(NSNumber *)arg1 endAnchor:(NSNumber *)arg2 healthDaemon:(id <HDHealthDaemon>)arg3 actionHandler:(void (^)(long long, id <HDSyncObject>))arg4;
+ (NSString *)syncEntityIdentifier;

@optional
+ (_Bool)deleteObject:(id <HDSyncObject>)arg1 syncStore:(id <HDSyncStore>)arg2 healthDaemon:(id <HDHealthDaemon>)arg3 error:(id *)arg4;
+ (_Bool)updateObject:(id <HDSyncObject>)arg1 syncStore:(id <HDSyncStore>)arg2 healthDaemon:(id <HDHealthDaemon>)arg3 error:(id *)arg4;
+ (_Bool)addObject:(id <HDSyncObject>)arg1 syncStore:(id <HDSyncStore>)arg2 healthDaemon:(id <HDHealthDaemon>)arg3 error:(id *)arg4;
@end

@protocol HDSyncObject <NSSecureCoding, NSObject>
+ (Class)healthSyncEntity;
@property(readonly, nonatomic) NSString *syncId;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@interface HDSQLiteEntity : NSObject <HDSQLiteEntity>
{
    long long _persistentID;
}

+ (_Bool)_insertValues:(id)arg1 intoTable:(id)arg2 withPidOrNil:(id)arg3 database:(id)arg4;
+ (void)applyPropertySetters:(id)arg1 toObject:(id)arg2 withProperties:(id)arg3 values:(id *)arg4;
+ (id)joinClauseForProperty:(id)arg1;
+ (id)foreignKeyColumnForTable:(id)arg1;
+ (id)foreignDatabaseTablesToDelete;
+ (id)foreignDatabaseTableForProperty:(id)arg1;
+ (id)foreignDatabaseColumnForProperty:(id)arg1;
+ (id)disambiguatedSQLForProperty:(id)arg1;
+ (id)disambiguatedDatabaseTable;
+ (id)databaseTable;
+ (id)databaseName;
+ (id)databaseValueForProperty:(id)arg1 clientValue:(id)arg2;
+ (id)associationPropertyForEntityClass:(Class)arg1;
+ (id)databasePropertyToSetClientProperty:(id)arg1;
+ (id)databasePropertyToGetClientProperty:(id)arg1;
+ (id)copyDatabaseDictionaryToSetClientDictionary:(id)arg1;
+ (id)entityWithPersistentID:(id)arg1;
+ (id)queryWithDatabase:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 orderingDirections:(id)arg4;
+ (id)queryWithDatabase:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3;
+ (id)queryWithDatabase:(id)arg1 predicate:(id)arg2;
+ (id)distinctProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3;
+ (id)countDistinctForProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3;
+ (id)countValueForProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3;
+ (id)sumValueForProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3;
+ (id)maxValueForProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3;
+ (id)aggregateSingleValueForProperty:(id)arg1 function:(id)arg2 predicate:(id)arg3 database:(id)arg4;
+ (id)aggregateValuesForProperty:(id)arg1 functions:(id)arg2 predicate:(id)arg3 groupBy:(id)arg4 database:(id)arg5;
+ (id)propertyValueForAnyInDatabase:(id)arg1 property:(id)arg2 predicate:(id)arg3;
+ (id)propertyValuesForAnyInDatabase:(id)arg1 properties:(id)arg2 predicate:(id)arg3;
+ (_Bool)deleteEntitiesInDatabase:(id)arg1 predicate:(id)arg2;
+ (void)enumerateQueryResultsFromColumns:(id)arg1 properties:(id)arg2 predicate:(id)arg3 database:(id)arg4 usingBlock:(CDUnknownBlockType)arg5;
+ (void)enumerateEntitiesInDatabase:(id)arg1 predicate:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
+ (id)anyInDatabase:(id)arg1 predicate:(id)arg2;
@property(readonly, nonatomic) long long persistentID; // @synthesize persistentID=_persistentID;
- (_Bool)_deleteRowFromTable:(id)arg1 usingColumn:(id)arg2 database:(id)arg3;
- (id)_copyTableClusteredValuesWithValues:(id)arg1;
- (void)getValuesForProperties:(id)arg1 withDatabase:(id)arg2 applier:(CDUnknownBlockType)arg3;
- (id)valueForProperty:(id)arg1 database:(id)arg2;
- (id)valueForExternalProperty:(id)arg1;
- (_Bool)setValuesWithDictionary:(id)arg1 database:(id)arg2;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2 database:(id)arg3;
- (void)setExternalValuesWithDictionary:(id)arg1;
- (void)getValues:(id *)arg1 forProperties:(id *)arg2 count:(unsigned long long)arg3 database:(id)arg4;
- (_Bool)existsInDatabase:(id)arg1;
- (_Bool)deleteFromDatabase:(id)arg1;
- (id)initWithPropertyValues:(id)arg1 inDatabase:(id)arg2;
- (id)initWithPersistentID:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface HDHealthEntity : HDSQLiteEntity
{
}

+ (_Bool)_performWriteTransaction:(_Bool)arg1 withHealthDatabase:(id)arg2 usingBlock:(CDUnknownBlockType)arg3 errorHandler:(CDUnknownBlockType)arg4;
+ (_Bool)performWriteTransactionWithHealthDatabase:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 errorHandler:(CDUnknownBlockType)arg3;
+ (_Bool)performWriteTransactionWithHealthDatabase:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (void)performReadTransactionWithHealthDatabase:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 errorHandler:(CDUnknownBlockType)arg3;
+ (void)performReadTransactionWithHealthDatabase:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (id)databaseName;
+ (id)createTableSQL;
+ (id)protectedDatabaseName;
+ (long long)protectionClass;
+ (id)maxRowIDForPredicate:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)propertyValueForAnyWithProperty:(id)arg1 predicate:(id)arg2 healthDatabase:(id)arg3 error:(id *)arg4;
+ (id)propertyValuesForAnyWithProperties:(id)arg1 predicate:(id)arg2 healthDatabase:(id)arg3 error:(id *)arg4;
+ (id)anyWithPredicate:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (_Bool)deleteEntitiesWithPredicate:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (_Bool)setValuesWithDictionary:(id)arg1 predicate:(id)arg2 healthDatabase:(id)arg3 error:(id *)arg4;
+ (_Bool)enumerateProperties:(id)arg1 withPredicate:(id)arg2 healthDatabase:(id)arg3 error:(id *)arg4 usingBlock:(CDUnknownBlockType)arg5;

@end

@interface HDDataEntity : HDHealthEntity <HDDataEntity, HDSyncEntity>
{
}

+ (_Bool)deleteObject:(id)arg1 syncStore:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (_Bool)addObject:(id)arg1 syncStore:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (id)syncEntitiesWithStartAnchor:(id)arg1 endAnchor:(id)arg2 healthDaemon:(id)arg3 actionHandler:(CDUnknownBlockType)arg4;
+ (id)syncEntityIdentifier;
+ (_Bool)acceptsObject:(id)arg1;
+ (void)applyRelatedPropertiesToObject:(id)arg1 entity:(id)arg2 properties:(id)arg3 values:(id *)arg4 authorizationFilter:(CDUnknownBlockType)arg5 healthDaemon:(id)arg6;
+ (_Bool)isBackedByTable;
+ (long long)preferredEntityType;
+ (id)_dataObjectWithPersistentID:(long long)arg1 type:(long long)arg2 authorizationFilter:(CDUnknownBlockType)arg3 properties:(id)arg4 values:(id *)arg5 propertySetters:(id)arg6 healthDaemon:(id)arg7;
+ (id)_propertiesForFetchingDataObjectsWithAssociations:(id)arg1;
+ (Class)_ancestorWithProperty:(id)arg1;
+ (id)_aggregatedPropertySettersForDataObjectWithOrderedProperties:(id *)arg1;
+ (_Bool)_deleteDataObjectWithUUID:(id)arg1 sourceEntity:(id)arg2 inDatabase:(id)arg3 error:(id *)arg4;
+ (_Bool)deleteDataEntityWithPersistentID:(long long)arg1 inDatabase:(id)arg2 error:(id *)arg3;
+ (_Bool)_deleteDataEntityWithPredicate:(id)arg1 inDatabase:(id)arg2 error:(id *)arg3;
+ (id)_insertDataObject:(id)arg1 withProvenance:(unsigned long long)arg2 sourceBundleIdentifier:(id)arg3 healthDaemon:(id)arg4 error:(id *)arg5;
+ (id)_insertDataObject:(id)arg1 withProvenance:(unsigned long long)arg2 sourceEntity:(id)arg3 inDatabase:(id)arg4;
+ (id)columnNameForSortIdentifier:(id)arg1;
+ (id)associationPropertyForEntityClass:(Class)arg1;
+ (Class)_associatedDataObjectClass;
+ (id)_tableValuesFromDataObject:(id)arg1;
+ (id)_propertySettersForDataObject;
+ (id)_columnsSQL;
+ (id)_databaseTable;
+ (long long)protectionClass;
+ (id)disambiguatedSQLForProperty:(id)arg1;
+ (id)joinClauseForProperty:(id)arg1;
+ (id)databaseTable;
+ (id)createTableSQL;
+ (id)_UUIDsForObjectsOfType:(long long)arg1 predicate:(id)arg2 healthDaemon:(id)arg3 database:(id)arg4;
+ (id)UUIDsForObectsOfType:(long long)arg1 predicate:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (long long)countOfObjectsOfType:(long long)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 withError:(id *)arg4;
+ (id)sourceIDsForObjectsOfType:(long long)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 error:(id *)arg4;
+ (void)enumerateObjectsOfType:(long long)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 sourceIdentifier:(id)arg4 authorizationFilter:(CDUnknownBlockType)arg5 limit:(unsigned long long)arg6 anchor:(id *)arg7 handler:(CDUnknownBlockType)arg8;
+ (void)enumerateObjectsOfType:(long long)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 sourceIdentifier:(id)arg4 authorizationFilter:(CDUnknownBlockType)arg5 orderBy:(id)arg6 directions:(id)arg7 limit:(unsigned long long)arg8 handler:(CDUnknownBlockType)arg9;
+ (void)enumerateObjectsWithHealthDaemon:(id)arg1 predicate:(id)arg2 sourceIdentifier:(id)arg3 authorizationFilter:(CDUnknownBlockType)arg4 orderBy:(id)arg5 directions:(id)arg6 limit:(unsigned long long)arg7 handler:(CDUnknownBlockType)arg8;
+ (id)dataEntityForObject:(id)arg1 healthDaemon:(id)arg2 error:(id *)arg3;
+ (_Bool)deleteDataObjects:(id)arg1 sourceEntity:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (void)insertDataObjects:(id)arg1 withProvenance:(unsigned long long)arg2 sourceEntity:(id)arg3 healthDaemon:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
+ (id)insertDataObject:(id)arg1 withProvenance:(unsigned long long)arg2 sourceEntity:(id)arg3 healthDaemon:(id)arg4 error:(id *)arg5;
+ (void)load;
- (_Bool)deleteAssociatedEntitiesInDatabase:(id)arg1 error:(id *)arg2;
- (_Bool)_deleteRelatedEntitiesInDatabase:(id)arg1 error:(id *)arg2;
- (id)_dataID;
- (id)dataAnchor;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface HDAssociationEntity : HDDataEntity
{
}

+ (id)_insertAssociationTuples:(id)arg1 healthDaemon:(id)arg2 error:(id *)arg3;
+ (void)_enumerateObjectIDsWithPredicate:(id)arg1 database:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (id)_insertAssociationEntryWithAssociation:(id)arg1 object:(id)arg2 database:(id)arg3;
+ (_Bool)_removeAssociationRecordsForObject:(id)arg1 database:(id)arg2 error:(id *)arg3;
+ (_Bool)_removeAssociationRecordsForAssociationEntity:(id)arg1 database:(id)arg2;
+ (id)objectIDsForAssociationEntity:(id)arg1 healthDaemon:(id)arg2 error:(id *)arg3;
+ (id)journalEntryForAssociation:(id)arg1 objects:(id)arg2;
+ (void)insertEntriesWithAssociation:(id)arg1 objects:(id)arg2 enforceSameSource:(_Bool)arg3 database:(id)arg4;
+ (_Bool)insertEntriesWithAssociation:(id)arg1 objects:(id)arg2 enforceSameSource:(_Bool)arg3 healthDaemon:(id)arg4 error:(id *)arg5;
+ (id)associationPropertyForEntityClass:(Class)arg1;
+ (long long)protectionClass;
+ (id)_propertySettersForDataObject;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;

@end

@interface HDAssociationTuple : NSObject
{
    NSUUID *_associationUUID;
    NSUUID *_objectUUID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSUUID *objectUUID; // @synthesize objectUUID=_objectUUID;
@property(retain, nonatomic) NSUUID *associationUUID; // @synthesize associationUUID=_associationUUID;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface HDSampleEntity : HDDataEntity
{
}

+ (id)_predicateWithSampleType:(id)arg1 sourceIdentifier:(id)arg2 predicate:(id)arg3;
+ (id)_predicateWithSampleType:(id)arg1 predicate:(id)arg2;
+ (void)_columnNamesAndSortOrderingsForDataType:(id)arg1 sortDescriptors:(id)arg2 withBlock:(CDUnknownBlockType)arg3;
+ (long long)preferredEntityType;
+ (id)firstAndLastSampleDateOfType:(id)arg1 healthDaemon:(id)arg2 matchingFilter:(id)arg3 sourceIdentifier:(id)arg4;
+ (id)UUIDsForSamplesWithTypes:(id)arg1 filter:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (long long)countOfSamplesWithType:(id)arg1 healthDaemon:(id)arg2 matchingFilter:(id)arg3 withError:(id *)arg4;
+ (id)sourceIDsForSamplesWithType:(id)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 error:(id *)arg4;
+ (void)enumerateSamplesWithType:(id)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 sourceIdentifier:(id)arg4 authorizationFilter:(CDUnknownBlockType)arg5 orderBy:(id)arg6 directions:(id)arg7 limit:(unsigned long long)arg8 handler:(CDUnknownBlockType)arg9;
+ (void)enumerateSamplesWithType:(id)arg1 healthDaemon:(id)arg2 filter:(id)arg3 sourceIdentifier:(id)arg4 authorizationFilter:(CDUnknownBlockType)arg5 sortDescriptors:(id)arg6 limit:(unsigned long long)arg7 handler:(CDUnknownBlockType)arg8;
+ (void)enumerateUUIDsOfSamplesWithType:(id)arg1 healthDaemon:(id)arg2 matchingFilter:(id)arg3 limit:(unsigned long long)arg4 withHandler:(CDUnknownBlockType)arg5;
+ (void)enumerateSamplesWithType:(id)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 sourceIdentifier:(id)arg4 authorizationFilter:(CDUnknownBlockType)arg5 limit:(unsigned long long)arg6 anchor:(id *)arg7 withHandler:(CDUnknownBlockType)arg8;
+ (id)samplesWithType:(id)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 limit:(unsigned long long)arg4 anchor:(id *)arg5 error:(id *)arg6;
+ (_Bool)deleteSamplesWithTypes:(id)arg1 sourceIdentifier:(id)arg2 deleteSampleTypes:(id)arg3 healthDaemon:(id)arg4 error:(id *)arg5;
+ (id)mostRecentSampleWithType:(id)arg1 healthDaemon:(id)arg2 predicate:(id)arg3 error:(id *)arg4;
+ (void)enumerateStartDatesOfSamplesWithType:(id)arg1 healthDaemon:(id)arg2 matchingFilter:(id)arg3 limit:(unsigned long long)arg4 withHandler:(CDUnknownBlockType)arg5;
+ (id)columnNameForSortIdentifier:(id)arg1;
+ (id)_tableValuesFromDataObject:(id)arg1;
+ (id)_propertySettersForDataObject;
+ (Class)_associatedDataObjectClass;
+ (id)_columnsSQL;
+ (id)_databaseTable;
+ (void)load;
- (id)_sampleTypeInDatabase:(id)arg1;

@end

@interface HDCategorySampleEntity : HDSampleEntity
{
}

+ (id)_tableValuesFromDataObject:(id)arg1;
+ (id)_propertySettersForDataObject;
+ (Class)_associatedDataObjectClass;
+ (id)_columnsSQL;
+ (id)_databaseTable;
+ (void)load;

@end

@interface HDClient : NSObject
{
    NSXPCConnection *_connection;
    _HKEntitlements *_entitlements;
    NSString *_name;
    NSString *_bundleIdentifier;
}

@property(readonly) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) _HKEntitlements *entitlements; // @synthesize entitlements=_entitlements;
@property(readonly) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (id)description;
- (id)valueForEntitlement:(id)arg1;
- (_Bool)hasEntitlement:(id)arg1 withError:(id *)arg2;
@property(readonly) int processIdentifier;
- (id)_initWithConnection:(id)arg1 entitlements:(id)arg2;
- (id)initWithEntitlements:(id)arg1;
- (id)initWithConnection:(id)arg1 entitlements:(id)arg2;
- (id)initWithConnection:(id)arg1;

@end

@interface HDContentProtectionManager : NSObject <HDDiagnosticObject>
{
    int _contentProtectionState;
    int _notifyToken;
    NSObject<OS_dispatch_queue> *_observationQueue;
    NSMapTable *_observers;
    double _beganObservingTime;
    double _lastNotificationTime;
}

+ (_Bool)isProtectedDataAvailableWithState:(long long)arg1;
- (void).cxx_destruct;
- (void)_notifyObserversWithContentProtectionState:(long long)arg1;
- (id)_contentProtectionStateString:(long long)arg1;
- (id)diagnosticDescription;
- (void)setContentProtectionState:(long long)arg1;
- (_Bool)deviceUnlockedSinceBoot;
- (_Bool)isProtectedDataAvailable;
- (long long)observedState;
- (void)removeContentProtectionObserver:(id)arg1;
- (void)addContentProtectionObserver:(id)arg1 withQueue:(id)arg2;
- (void)dealloc;
- (id)initWithNotifications:(_Bool)arg1 initialState:(long long)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface HDCorrelationSampleEntity : HDSampleEntity
{
}

+ (id)_objectsWithIDs:(id)arg1 healthDaemon:(id)arg2;
+ (_Bool)acceptsObject:(id)arg1;
+ (void)applyRelatedPropertiesToObject:(id)arg1 entity:(id)arg2 properties:(id)arg3 values:(id *)arg4 authorizationFilter:(CDUnknownBlockType)arg5 healthDaemon:(id)arg6;
+ (id)createTableSQL;
+ (_Bool)isBackedByTable;
+ (id)_tableValuesFromDataObject:(id)arg1;
+ (Class)_associatedDataObjectClass;
+ (void)load;
- (_Bool)deleteAssociatedEntitiesInDatabase:(id)arg1 error:(id *)arg2;
- (_Bool)deleteFromDatabase:(id)arg1;

@end

@interface HDDataTypeSourceOrderEntity : HDHealthEntity
{
}

+ (id)_predicateForSourceID:(id)arg1;
+ (_Bool)removeSourceID:(id)arg1 healthDaemon:(id)arg2 error:(id *)arg3;
+ (id)orderedSourceIDsForType:(id)arg1 healthDaemon:(id)arg2;
+ (_Bool)saveOrderedSourceIDs:(id)arg1 type:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;

@end

@interface HDDiagnosticManager : NSObject
{
    NSHashTable *_objects;
    int _lock;
}

+ (id)sharedDiagnosticManager;
- (void).cxx_destruct;
- (id)_diagnosticsForKey:(id)arg1 shouldLog:(_Bool)arg2;
- (id)diagnosticsForKey:(id)arg1;
- (void)logAllDiagnostics;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (id)init;

@end

@interface HDJournalEntry : NSObject <NSSecureCoding>
{
}

+ (_Bool)supportsSecureCoding;
- (_Bool)applyWithDaemon:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface HDKnownDeviceEntity : HDHealthEntity
{
}

+ (id)_tableValuesFromService:(id)arg1;
+ (id)_propertySettersForService;
+ (id)_servicesInDatabase:(id)arg1 removals:(id *)arg2;
+ (id)allServicesFromHealthDatabase:(id)arg1 error:(id *)arg2;
+ (_Bool)deleteDevice:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)insertOrUpdateDevice:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)_servicePredicate:(id)arg1;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;

@end

@interface HDMetadataKeyEntity : HDHealthEntity
{
}

+ (id)_propertySettersForResult;
+ (id)_keyForPersistentID:(id)arg1 database:(id)arg2;
+ (id)_insertEntityWithKey:(id)arg1 database:(id)arg2;
+ (id)_entityForKey:(id)arg1 database:(id)arg2;
+ (id)resultForKeyID:(id)arg1 healthDatabase:(id)arg2;
+ (id)insertEntityWithKey:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)entityForKey:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;
- (id)resultWithDatabase:(id)arg1;

@end

@interface HDMetadataKeyResult : NSObject
{
    NSString *_key;
}

@property(retain, nonatomic) NSString *key; // @synthesize key=_key;
- (void).cxx_destruct;

@end

@interface HDMetadataValueEntity : HDHealthEntity
{
}

+ (id)_propertySettersForResult;
+ (id)_predicateForEntityWithObjectID:(id)arg1;
+ (id)_predicateForEntityWithKeyID:(id)arg1;
+ (id)_resultsForPredicate:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (_Bool)_deleteMetadataValuesWithObjectID:(id)arg1 database:(id)arg2 error:(id *)arg3;
+ (id)_insertMetadataValueWithKeyID:(id)arg1 objectID:(id)arg2 value:(id)arg3 database:(id)arg4 error:(id *)arg5;
+ (id)resultsForKeyID:(id)arg1 predicate:(id)arg2 healthDatabase:(id)arg3 error:(id *)arg4;
+ (id)resultsForObjectID:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)insertMetadataValueWithKeyID:(id)arg1 objectID:(id)arg2 value:(id)arg3 healthDatabase:(id)arg4 error:(id *)arg5;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;
- (id)_clientValueForProperty:(id)arg1 value:(id)arg2;
- (id)valueWithDatabase:(id)arg1;

@end

@interface HDMetadataValueResult : NSObject
{
    NSNumber *_objectID;
    NSNumber *_keyID;
    id _value;
}

@property(retain, nonatomic) id value; // @synthesize value=_value;
@property(retain, nonatomic) NSNumber *keyID; // @synthesize keyID=_keyID;
@property(retain, nonatomic) NSNumber *objectID; // @synthesize objectID=_objectID;
- (void).cxx_destruct;

@end

@interface HDQuantitySampleEntity : HDSampleEntity
{
}

+ (id)sumOfSamplesWithDataType:(id)arg1 inDatabase:(id)arg2 predicate:(id)arg3;
+ (id)_mergedSumsForDataType:(id)arg1 orderedSources:(id)arg2 predicate:(id)arg3 startDate:(id)arg4 endDate:(id)arg5 unit:(id)arg6 bySource:(id)arg7 healthDaemon:(id)arg8;
+ (id)_orderedSourceIDsFromSources:(id)arg1 healthDaemon:(id)arg2;
+ (void)_enumerateSamplesWithType:(id)arg1 predicate:(id)arg2 unit:(id)arg3 healthDaemon:(id)arg4 handler:(CDUnknownBlockType)arg5;
+ (double)_firstDoubleFromOrderedSources:(id)arg1 inValuesBySource:(id)arg2 healthDaemon:(id)arg3;
+ (unsigned long long)_countPartialSamplesFromDate:(id)arg1 toDate:(id)arg2 predicate:(id)arg3 database:(id)arg4;
+ (id)_getQuantitiesBySourceForProperty:(id)arg1 functions:(id)arg2 predicate:(id)arg3 unit:(id)arg4 healthDaemon:(id)arg5 database:(id)arg6;
+ (id)_firstValueFromOrderedSources:(id)arg1 inValuesBySource:(id)arg2;
+ (id)_predicateWithQuantityType:(id)arg1 sourceIdentifier:(id)arg2 predicate:(id)arg3;
+ (id)statisticsForDataType:(id)arg1 options:(unsigned long long)arg2 healthDaemon:(id)arg3 predicate:(id)arg4 startDate:(id)arg5 endDate:(id)arg6 sourceIdentifier:(id)arg7 orderedSources:(id)arg8 shouldStopProcessing:(CDUnknownBlockType)arg9 error:(id *)arg10;
+ (id)_tableValuesFromDataObject:(id)arg1;
+ (id)_propertySettersForDataObject;
+ (Class)_associatedDataObjectClass;
+ (id)_columnsSQL;
+ (id)_databaseTable;
+ (void)load;

@end

@interface HDSQLitePredicate : NSObject <NSCopying>
{
}

+ (id)compoundPredicateWithPredicate:(id)arg1 otherPredicate:(id)arg2;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)SQLJoinClausesForEntityClass:(Class)arg1;
- (id)SQLForEntityClass:(Class)arg1;
- (void)bindToStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface HDSQLitePropertyPredicate : HDSQLitePredicate <NSCopying>
{
    NSString *_property;
}

@property(readonly, nonatomic) NSString *property; // @synthesize property=_property;
- (void).cxx_destruct;
- (id)SQLJoinClausesForEntityClass:(Class)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface HDSQLiteComparisonPredicate : HDSQLitePropertyPredicate <NSCopying>
{
    long long _comparisonType;
    id _value;
}

+ (id)predicateWithProperty:(id)arg1 value:(id)arg2 comparisonType:(long long)arg3;
+ (id)predicateWithProperty:(id)arg1 lessThanValue:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 greaterThanValue:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 lessThanOrEqualToValue:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 greaterThanOrEqualToValue:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 notEqualToValue:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 equalToValue:(id)arg2;
@property(readonly, nonatomic) id value; // @synthesize value=_value;
@property(readonly, nonatomic) long long comparisonType; // @synthesize comparisonType=_comparisonType;
- (void).cxx_destruct;
- (id)_comparisonTypeString;
- (id)SQLForEntityClass:(Class)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)bindToStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface HDSQLiteCompoundPredicate : HDSQLitePredicate <NSCopying>
{
    _Bool _unary;
    _Bool _trueIfNoPredicates;
    NSString *_combinationOperation;
    NSArray *_predicates;
}

+ (id)predicateWithProperty:(id)arg1 notEqualToValues:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 equalToValues:(id)arg2;
+ (id)predicateWithProperty:(id)arg1 values:(id)arg2 comparisonType:(long long)arg3;
+ (id)negatedPredicate:(id)arg1;
+ (id)predicateMatchingAnyPredicates:(id)arg1;
+ (id)predicateMatchingAllPredicates:(id)arg1;
@property(readonly, nonatomic) NSArray *predicates; // @synthesize predicates=_predicates;
- (void).cxx_destruct;
- (id)SQLJoinClausesForEntityClass:(Class)arg1;
- (id)SQLForEntityClass:(Class)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)bindToStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface HDSQLiteContainsPredicate : HDSQLitePropertyPredicate <NSCopying>
{
    _Bool _negative;
    HDSQLiteQuery *_query;
    NSString *_queryProperty;
    id _values;
}

+ (id)doesNotContainPredicateWithProperty:(id)arg1 values:(id)arg2;
+ (id)containsPredicateWithProperty:(id)arg1 query:(id)arg2 queryProperty:(id)arg3;
+ (id)containsPredicateWithProperty:(id)arg1 values:(id)arg2;
@property(readonly, nonatomic) NSArray *values; // @synthesize values=_values;
@property(readonly, nonatomic) NSString *queryProperty; // @synthesize queryProperty=_queryProperty;
@property(readonly, nonatomic) HDSQLiteQuery *query; // @synthesize query=_query;
@property(readonly, nonatomic, getter=isNegative) _Bool negative; // @synthesize negative=_negative;
- (void).cxx_destruct;
- (id)SQLForEntityClass:(Class)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)bindToStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface HDSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;
    _Bool _isInTransaction;
    long long _transactionType;
    struct __CFDictionary *_statementCache;
    NSMutableDictionary *_attachedDatabaseURLsByName;
    NSURL *_fileURL;
}

+ (_Bool)deleteDatabaseAtPath:(id)arg1;
+ (void)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(_Bool *)arg2 didFinish:(_Bool *)arg3;
+ (id)virtualFilesystemModule;
+ (_Bool)statementHasRowAfterStepping:(struct sqlite3_stmt *)arg1;
+ (_Bool)statementDidFinishAfterStepping:(struct sqlite3_stmt *)arg1;
@property(readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void).cxx_destruct;
- (struct sqlite3_stmt *)_statementForSQL:(id)arg1 cache:(_Bool)arg2;
- (_Bool)isDatabaseWithNameAttached:(id)arg1;
- (void)detachDatabaseWithName:(id)arg1;
- (_Bool)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id *)arg3;
- (_Bool)insertColumns:(id)arg1 fromTableNamed:(id)arg2 toTableNamed:(id)arg3;
- (_Bool)renameTable:(id)arg1 newName:(id)arg2;
- (_Bool)dropTable:(id)arg1;
- (_Bool)alterTable:(id)arg1 removeColumns:(id)arg2 renameColumns:(id)arg3;
- (_Bool)renameColumnInTable:(id)arg1 oldName:(id)arg2 newName:(id)arg3;
- (_Bool)removeColumnInTable:(id)arg1 name:(id)arg2;
- (_Bool)addColumnInTable:(id)arg1 columnSQL:(id)arg2;
- (long long)userVersionWithDatabaseName:(id)arg1;
- (_Bool)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2;
- (void)prepareStatementForSQL:(id)arg1 cache:(_Bool)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (_Bool)performTransactionWithType:(long long)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)performTransactionWithType:(long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)executeSQL:(id)arg1 error:(id *)arg2;
- (_Bool)executeSQL:(id)arg1;
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;
- (int)_openWithPath:(id)arg1;
- (int)open;
- (void)dealloc;
- (id)initWithDatabaseURL:(id)arg1;

@end

@interface HDSQLiteHasAssociatedEntityPredicate : HDSQLitePredicate <NSCopying>
{
    Class _associatedEntityClass;
    HDSQLitePredicate *_associatedPredicate;
    _Bool _inverted;
}

+ (id)predicateWithAssociatedEntityClass:(Class)arg1 associatedPredicate:(id)arg2 inverted:(_Bool)arg3;
+ (id)predicateWithAssociatedEntityClass:(Class)arg1;
- (void).cxx_destruct;
- (void)bindToStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (id)SQLForEntityClass:(Class)arg1;

@end

@interface HDSQLiteHealthDatabase : HDSQLiteDatabase
{
    NSString *_homeDirectoryPath;
}

+ (id)virtualFilesystemModule;
+ (void)_removeDatabases:(id)arg1 withHomeDirectoryPath:(id)arg2;
+ (void)removeProtectedDatabaseWithHomeDirectoryPath:(id)arg1;
+ (void)removeAllDatabasesWithHomeDirectoryPath:(id)arg1;
@property(copy, nonatomic) NSString *homeDirectoryPath; // @synthesize homeDirectoryPath=_homeDirectoryPath;
- (void).cxx_destruct;
- (_Bool)isProtectedDatabaseAttached;
- (void)detachProtectedDatabase;
- (_Bool)attachProtectedDatabaseWithError:(id *)arg1;
- (id)initWithHomeDirectoryPath:(id)arg1;
- (id)initWithDatabaseURL:(id)arg1;

@end

@interface HDSQLiteMetaEntity : HDSQLiteEntity
{
}

+ (id)_tableNamePredicate:(id)arg1;
+ (id)_namePredicate:(id)arg1;
+ (id)_typePredicate:(id)arg1;
+ (id)queryWithDatabase:(id)arg1 types:(id)arg2 tableName:(id)arg3;
+ (id)queryWithDatabase:(id)arg1 type:(id)arg2 tableName:(id)arg3;
+ (id)queryWithDatabase:(id)arg1 type:(id)arg2;
+ (id)anyInDatabase:(id)arg1 withType:(id)arg2 tableName:(id)arg3;
+ (id)anyInDatabase:(id)arg1 withType:(id)arg2 name:(id)arg3;
+ (id)databaseTable;
- (id)SQLWithDatabase:(id)arg1;
- (id)tableNameWithDatabase:(id)arg1;
- (id)nameWithDatabase:(id)arg1;
- (id)typeWithDatabase:(id)arg1;

@end

@interface HDSQLiteMetadataPredicate : HDSQLitePredicate <NSCopying>
{
    HDSQLitePredicate *_keyPredicate;
    HDSQLitePredicate *_valuePredicate;
}

+ (id)predicateWithMetadataKey:(id)arg1 value:(id)arg2 operatorType:(unsigned long long)arg3;
+ (id)predicateWithMetadataKey:(id)arg1 allowedValues:(id)arg2;
- (void).cxx_destruct;
- (id)_valuePredicateForValue:(id)arg1 operatorType:(unsigned long long)arg2;
- (void)bindToStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (id)SQLForEntityClass:(Class)arg1;

@end

@interface HDSQLiteNullPredicate : HDSQLitePropertyPredicate <NSCopying>
{
    _Bool _matchesNull;
}

+ (id)isNullPredicateWithProperty:(id)arg1;
+ (id)isNotNullPredicateWithProperty:(id)arg1;
@property(readonly, nonatomic) _Bool matchesNull; // @synthesize matchesNull=_matchesNull;
- (id)SQLForEntityClass:(Class)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface HDSQLitePropertyComparisonPredicate : HDSQLitePredicate <NSCopying>
{
    NSString *_lhObjectPropertyName;
    NSString *_rhObjectPropertyName;
    long long _comparisonType;
}

+ (id)predicateWithLeftHandObjectPropertyName:(id)arg1 rightHandObjectPropertyName:(id)arg2 comparisonType:(long long)arg3;
@property(readonly, nonatomic) long long comparisonType; // @synthesize comparisonType=_comparisonType;
@property(readonly, nonatomic) NSString *rhObjectPropertyName; // @synthesize rhObjectPropertyName=_rhObjectPropertyName;
@property(readonly, nonatomic) NSString *lhObjectPropertyName; // @synthesize lhObjectPropertyName=_lhObjectPropertyName;
- (void).cxx_destruct;
- (id)SQLForEntityClass:(Class)arg1;

@end

@interface HDSQLiteQuery : NSObject
{
    HDSQLiteDatabase *_database;
    HDSQLiteQueryDescriptor *_descriptor;
}

- (id)_newSelectSQLWithProperties:(id)arg1;
@property(readonly) HDSQLiteQueryDescriptor *queryDescriptor;
- (void)enumeratePersistentIDsAndProperties:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateEntitiesUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumeratePersistentIDsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)deleteAllEntities;
- (_Bool)setValuesForAllEntitiesWithDictionary:(id)arg1;
@property(readonly) HDSQLiteDatabase *database;
- (_Bool)createTemporaryTableWithName:(id)arg1 properties:(id)arg2;
@property(readonly) long long countOfEntities;
- (id)copySelectSQLWithProperties:(id)arg1;
- (id)copyEntityIdentifiers;
- (void)bindToSelectStatement:(struct sqlite3_stmt *)arg1 bindingIndex:(inout int *)arg2;
- (void)dealloc;
- (id)initWithDatabase:(id)arg1 descriptor:(id)arg2;

@end

@interface HDSQLiteQueryDescriptor : NSObject <NSCopying>
{
    _Bool _returnsDistinctEntities;
    Class _entityClass;
    long long _limitCount;
    NSArray *_orderingDirections;
    NSArray *_orderingProperties;
    HDSQLitePredicate *_predicate;
    NSString *_groupBy;
}

@property(copy, nonatomic) NSString *groupBy; // @synthesize groupBy=_groupBy;
@property(copy, nonatomic) HDSQLitePredicate *predicate; // @synthesize predicate=_predicate;
@property(nonatomic) _Bool returnsDistinctEntities; // @synthesize returnsDistinctEntities=_returnsDistinctEntities;
@property(copy, nonatomic) NSArray *orderingProperties; // @synthesize orderingProperties=_orderingProperties;
@property(copy, nonatomic) NSArray *orderingDirections; // @synthesize orderingDirections=_orderingDirections;
@property(nonatomic) long long limitCount; // @synthesize limitCount=_limitCount;
@property(nonatomic) Class entityClass; // @synthesize entityClass=_entityClass;
- (id)_newSelectSQLWithProperties:(id)arg1 columns:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface HDSQLiteTable : NSObject
{
    NSMutableArray *_columns;
    NSMutableArray *_tableConstraints;
    NSString *_tableName;
}

+ (id)SQLToRenameTable:(id)arg1 to:(id)arg2;
+ (id)SQLToDropTableNamed:(id)arg1;
+ (id)SQLToAddColumnWithSQL:(id)arg1 toTableNamed:(id)arg2;
+ (id)SQLToInsertColumnNames:(id)arg1 fromTableNamed:(id)arg2 intoTableNamed:(id)arg3;
+ (id)tableWithSQL:(id)arg1;
@property(copy, nonatomic) NSString *tableName; // @synthesize tableName=_tableName;
- (void).cxx_destruct;
- (id)_columnNamed:(id)arg1;
- (unsigned long long)_indexOfColumnNamed:(id)arg1;
- (id)_initWithTableSQL:(id)arg1;
- (id)creationSQL;
- (id)columnNames;
- (_Bool)renameColumn:(id)arg1 to:(id)arg2;
- (_Bool)removeColumn:(id)arg1;

@end

@interface HDSQLiteTableColumn : NSObject
{
    NSString *_name;
    NSString *_qualifiers;
}

@property(retain, nonatomic) NSString *qualifiers; // @synthesize qualifiers=_qualifiers;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)description;
- (id)SQL;

@end

@interface HDSourceEntity : HDHealthEntity <HDManagedSyncEntity>
{
}

+ (_Bool)_insertOrUpdateSourceWithSyncObject:(id)arg1 healthDaemon:(id)arg2 error:(id *)arg3;
+ (_Bool)updateObject:(id)arg1 syncStore:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (_Bool)addObject:(id)arg1 syncStore:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (id)syncEntitiesWithStartAnchor:(id)arg1 endAnchor:(id)arg2 healthDaemon:(id)arg3 actionHandler:(CDUnknownBlockType)arg4;
+ (id)syncEntityIdentifier;
+ (_Bool)isManagedEntity;
+ (id)_propertySettersForSource;
+ (id)_predicateForSourceRepresentingCurrentDevice;
+ (id)_predicateForSourceWithBundleIdentifier:(id)arg1;
+ (id)_sourceRepresentingCurrentDeviceWithDatabase:(id)arg1;
+ (id)_sourceWithBundleIdentifier:(id)arg1 database:(id)arg2;
+ (id)_insertSourceWithBundleIdentifier:(id)arg1 name:(id)arg2 options:(unsigned long long)arg3 isCurrentDevice:(_Bool)arg4 productType:(id)arg5 provenance:(long long)arg6 syncAnchor:(id)arg7 database:(id)arg8;
+ (void)enumerateSourceEntitiesWithStartAnchor:(id)arg1 endAnchor:(id)arg2 healthDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;
+ (id)allSourcePersistentIDsWithHealthDatabase:(id)arg1 error:(id *)arg2;
+ (id)sourceRepresentingCurrentDeviceWithHealthDatabase:(id)arg1 error:(id *)arg2;
+ (id)sourceWithBundleIdentifier:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)insertSourceWithBundleIdentifier:(id)arg1 name:(id)arg2 options:(unsigned long long)arg3 isCurrentDevice:(_Bool)arg4 productType:(id)arg5 provenance:(long long)arg6 syncAnchor:(id)arg7 healthDatabase:(id)arg8 error:(id *)arg9;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;
- (_Bool)setName:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
- (id)sourceBundleIdentifierInHealthDatabase:(id)arg1 error:(id *)arg2;
- (id)sourceInHealthDatabase:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface HDUserEntity : HDHealthEntity
{
}

+ (id)_characteristicForDBValue:(id)arg1 dataType:(id)arg2;
+ (id)_dbValueForCharacteristic:(id)arg1 dataType:(id)arg2;
+ (id)_columnForDataType:(id)arg1;
+ (_Bool)setCharacteristic:(id)arg1 forDataType:(id)arg2 healthDatabase:(id)arg3 error:(id *)arg4;
+ (id)characteristicForDataType:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)_dbUserCreatingIfNecessary:(id)arg1;
+ (id)_dbUserWithDatabase:(id)arg1;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;

@end

@interface HDWorkoutEntity : HDSampleEntity
{
}

+ (_Bool)associateSamples:(id)arg1 toWorkout:(id)arg2 healthDaemon:(id)arg3 error:(id *)arg4;
+ (id)_tableValuesFromDataObject:(id)arg1;
+ (id)_propertySettersForDataObject;
+ (Class)_associatedDataObjectClass;
+ (id)_columnsSQL;
+ (void)applyRelatedPropertiesToObject:(id)arg1 entity:(id)arg2 properties:(id)arg3 values:(id *)arg4 authorizationFilter:(CDUnknownBlockType)arg5 healthDaemon:(id)arg6;
+ (id)columnNameForSortIdentifier:(id)arg1;
+ (id)_databaseTable;
+ (void)load;
- (_Bool)deleteAssociatedEntitiesInDatabase:(id)arg1 error:(id *)arg2;

@end

@interface HDWorkoutEventEntity : HDHealthEntity
{
}

+ (id)workoutEventsWithWorkoutID:(id)arg1 healthDatabase:(id)arg2 error:(id *)arg3;
+ (id)workoutEventsWithWorkoutID:(id)arg1 database:(id)arg2;
+ (void)removeWorkoutEventsForWorkoutEntity:(id)arg1 database:(id)arg2;
+ (_Bool)insertWorkoutEventsFromWorkout:(id)arg1 entity:(id)arg2 database:(id)arg3;
+ (id)insertWorkoutEventWithWorkoutID:(id)arg1 date:(id)arg2 eventType:(long long)arg3 database:(id)arg4;
+ (long long)protectionClass;
+ (id)createTableSQL;
+ (id)databaseTable;
+ (void)load;

@end

@interface HKCorrelation (HDDataEntity)
- (void)hd_cleanupBeforeJournalInsertion;
- (id)hd_relatedJournalEntries;
- (_Bool)hd_insertRelatedDataWithHealthDaemon:(id)arg1 database:(id)arg2 entity:(id)arg3 error:(id *)arg4;
@end

@interface HKObject (HDDataEntity) <HDSyncObject>
+ (Class)healthSyncEntity;
- (_Bool)hd_insertRelatedDataWithHealthDaemon:(id)arg1 database:(id)arg2 entity:(id)arg3 error:(id *)arg4;
- (void)hd_cleanupBeforeJournalInsertion;
- (id)hd_relatedJournalEntries;
- (long long)entityType;
@property(readonly, nonatomic) NSString *syncId;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface HKSample (HDDataEntity)
- (long long)entityType;
@end

@interface HKSource (HDSyncObject) <HDSyncObject>
+ (Class)healthSyncEntity;
@property(readonly, nonatomic) NSString *syncId;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface HKWorkout (HDDataEntity)
- (_Bool)hd_insertRelatedDataWithHealthDaemon:(id)arg1 database:(id)arg2 entity:(id)arg3 error:(id *)arg4;
@end

@interface NSScanner (SQLiteSQLParsingAdditions)
+ (id)SQLParsingScannerWithSQL:(id)arg1;
- (_Bool)_scanThroughQuoteWithDelimiter:(id)arg1 appendToString:(id)arg2;
- (_Bool)_scanBalancedSubstringFromCharacter:(unsigned short)arg1 appendToString:(id)arg2;
- (_Bool)_scanUpToTopLevelDelimiters:(id)arg1 intoString:(id *)arg2;
- (_Bool)_scanSQLiteIdentifierCharactersIntoString:(id *)arg1;
- (_Bool)_scanSQLiteIdentifierIntoString:(id *)arg1;
- (_Bool)_scanTableSQLConstraint:(id *)arg1;
- (_Bool)_scanTableSQLColumn:(id *)arg1;
- (_Bool)scanTableSQLColumns:(id *)arg1 constraints:(id *)arg2;
- (_Bool)scanTableSQLPreambleAndTableName:(id *)arg1;
@end

@interface _HDContentProtectionObserverWrapper : NSObject
{
    id <HDContentProtectionObserver> _observer;
    NSObject<OS_dispatch_queue> *_queue;
}

@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, nonatomic) __weak id <HDContentProtectionObserver> observer; // @synthesize observer=_observer;
- (void).cxx_destruct;
- (id)initWithObserver:(id)arg1 queue:(id)arg2;

@end

@interface _HDCorrelationInsertionJournalEntry : HDJournalEntry
{
    NSUUID *_correlationUUID;
    NSArray *_objectUUIDs;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) NSArray *objectUUIDs; // @synthesize objectUUIDs=_objectUUIDs;
@property(readonly, nonatomic) NSUUID *correlationUUID; // @synthesize correlationUUID=_correlationUUID;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)applyWithDaemon:(id)arg1;
- (id)description;
- (id)initWithCorrelationUUID:(id)arg1 objectUUIDs:(id)arg2;

@end

@interface _HDDataDeletionJournalEntry : HDJournalEntry
{
    _Bool _restrictSource;
    HKObject *_dataObject;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) _Bool restrictSource; // @synthesize restrictSource=_restrictSource;
@property(readonly, nonatomic) HKObject *dataObject; // @synthesize dataObject=_dataObject;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)applyWithDaemon:(id)arg1;
- (id)initWithDataObject:(id)arg1 restrictSource:(_Bool)arg2;

@end

@interface _HDDataInsertionJournalEntry : HDJournalEntry
{
    HKObject *_dataObject;
    unsigned long long _provenance;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) unsigned long long provenance; // @synthesize provenance=_provenance;
@property(readonly, nonatomic) HKObject *dataObject; // @synthesize dataObject=_dataObject;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)applyWithDaemon:(id)arg1;
- (id)description;
- (id)initWithDataObject:(id)arg1 provenance:(unsigned long long)arg2;

@end

@interface _HDSetCharacteristicJournalEntry : HDJournalEntry
{
    id _value;
    HKCharacteristicType *_dataType;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) HKCharacteristicType *dataType; // @synthesize dataType=_dataType;
@property(readonly, nonatomic) id value; // @synthesize value=_value;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)applyWithDaemon:(id)arg1;
- (id)initWithValue:(id)arg1 dataType:(id)arg2;

@end

@interface _HKCategoryValueFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKComparisonMetadataFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKCompoundFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKContainsMetadataFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKCorrelationFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKEndDateFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKMetadataFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKPropertyComparisonFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKQuantityFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKSourceFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
- (id)_sourceIdentifiersWithHealthDaemon:(id)arg1;
@end

@interface _HKStartDateFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKUUIDFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutActivityTypeFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutDurationFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutGoalFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutGoalTypeFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutTotalDistanceFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

@interface _HKWorkoutTotalEnergyBurnedFilter (SQLitePredicate)
- (id)predicateWithHealthDaemon:(id)arg1;
@end

