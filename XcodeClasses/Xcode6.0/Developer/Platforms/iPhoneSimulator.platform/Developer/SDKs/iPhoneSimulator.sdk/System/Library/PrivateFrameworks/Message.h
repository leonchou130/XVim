//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct _CommandStackEntry {
    struct *_field1;
    id _field2;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct internal_state;

struct z_stream_s {
    char *_field1;
    unsigned int _field2;
    unsigned long long _field3;
    char *_field4;
    unsigned int _field5;
    unsigned long long _field6;
    char *_field7;
    struct internal_state *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    void *_field11;
    int _field12;
    unsigned long long _field13;
    unsigned long long _field14;
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    id _field2;
    unsigned int _field3;
    unsigned int _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
} CDStruct_f28f5ac0;

typedef struct {
    id _field1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
} CDStruct_3441fd00;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/Message.framework/Message
// UUID: FD6FAD05-4718-309D-9444-A6CF85A5305E
//
//                           Arch: x86_64
//                Current version: 20.0.0
//          Compatibility version: 1.0.0
//                 Source version: 2243.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol DAActionConsumer
- (void)actionFailed:(long long)arg1 forTask:(id)arg2 error:(NSError *)arg3;
@end

@protocol DAFolderChangeConsumer
- (void)folderChange:(DAFolderChange *)arg1 finishedWithStatus:(long long)arg2 error:(NSError *)arg3;
@end

@protocol DAMailAccountStreamConsumerFactory <NSObject>
- (id <DAMailboxStreamingContentConsumer>)streamingContentConsumer;
@end

@protocol DAMailboxFetchSearchResultConsumer <DAActionConsumer>
- (void)searchResultFetchedWithResponses:(NSArray *)arg1;
@end

@protocol DAMailboxRequestConsumer <DAActionConsumer>

@optional
- (void)resultsForMailbox:(NSString *)arg1 newTag:(NSString *)arg2 actions:(NSArray *)arg3 responses:(NSArray *)arg4 percentComplete:(double)arg5 moreAvailable:(_Bool)arg6 sentBytesCount:(unsigned long long)arg7 receivedBytesCount:(unsigned long long)arg8;
- (void)resultsForMailbox:(NSString *)arg1 newTag:(NSString *)arg2 actions:(NSArray *)arg3 responses:(NSArray *)arg4 percentComplete:(double)arg5 moreAvailable:(_Bool)arg6;
@end

@protocol DAMailboxStreamingContentConsumer
- (void)didEndStreamingForMailMessage:(DAMailMessage *)arg1;
- (void)consumeData:(char *)arg1 length:(int)arg2 format:(int)arg3 mailMessage:(DAMailMessage *)arg4;
- (_Bool)shouldBeginStreamingForMailMessage:(DAMailMessage *)arg1 format:(int)arg2;
@end

@protocol DAMessageFetchAttachmentConsumer
- (void)consumeData:(NSData *)arg1 ofContentType:(NSString *)arg2 forAttachmentNamed:(NSString *)arg3 ofMessageWithServerID:(NSString *)arg4;

@optional
- (void)attachmentFetchCompletedWithStatus:(long long)arg1 forAttachmentNamed:(NSString *)arg2 ofMessageWithServerID:(NSString *)arg3 dataWasBase64:(_Bool)arg4 sentBytesCount:(unsigned long long)arg5 receivedBytesCount:(unsigned long long)arg6;
- (void)attachmentFetchCompletedWithStatus:(long long)arg1 forAttachmentNamed:(NSString *)arg2 ofMessageWithServerID:(NSString *)arg3 dataWasBase64:(_Bool)arg4;
@end

@protocol DAMessageMoveRequestConsumer <DAActionConsumer>
- (void)resultsForMessageMove:(NSArray *)arg1;
@end

@protocol DAMessageSendConsumer <DAActionConsumer>

@optional
- (void)messageDidSendWithContext:(id)arg1 sentBytesCount:(unsigned long long)arg2 receivedBytesCount:(unsigned long long)arg3;
- (void)messageDidSendWithContext:(id)arg1;
@end

@protocol DAResolveRecipientsConsumer <DAActionConsumer>
- (void)resolvedRecipientsByEmailAddress:(NSDictionary *)arg1;
@end

@protocol DASearchQueryConsumer
- (void)searchQuery:(DASearchQuery *)arg1 finishedWithError:(NSError *)arg2;
- (void)searchQuery:(DASearchQuery *)arg1 returnedResults:(NSArray *)arg2;

@optional
- (void)searchQuery:(DASearchQuery *)arg1 returnedTotalCount:(NSNumber *)arg2;
@end

@protocol MFAttachmentDataProvider <NSObject>
- (MFMessage *)messageForAttachment:(MFAttachment *)arg1;
- (_Bool)fetchDataForAttachment:(MFAttachment *)arg1 withDataConsumer:(id <MFDataConsumer>)arg2 error:(id *)arg3;
- (NSData *)fetchLocalDataForAttachment:(MFAttachment *)arg1;
@end

@protocol MFCollectingDataConsumer <MFDataConsumer>
- (NSData *)data;
@end

@protocol MFContentProtectionObserver <NSObject>
- (void)contentProtectionStateChanged:(int)arg1 previousState:(int)arg2;
@end

@protocol MFDADeferredFolderChangeOperation <MFDAOfflineCacheOperation>
- (void)applyToFolderMap:(NSMutableDictionary *)arg1;
- (MFDAFolderChangeResult *)folderChangeResult;
@end

@protocol MFDAMailAccountRequest
@property(readonly, nonatomic) _Bool isUserRequested;
@property(readonly, nonatomic) _Bool shouldSend;
- (MFOfflineCacheOperation<MFDAOfflineCacheOperation> *)deferredOperation;
- (unsigned long long)generationNumber;
@end

@protocol MFDAMessagePayloadFetchResponse
- (_Bool)streamingDone;
- (_Bool)streaming;
- (NSData *)data;
@end

@protocol MFDAOfflineCacheOperation
- (_Bool)performWithAccount:(DAMailAccount *)arg1 offlineCache:(MFDAOfflineCache *)arg2;
@end

@protocol MFDAStreamingContentConsumer <DAMailboxStreamingContentConsumer, NSObject>
- (double)timeOfLastActivity;
- (_Bool)didBeginStreaming;
- (_Bool)succeeded;
- (NSData *)data;
@end

@protocol MFDASyncActionsConsumer <MFRequestQueueResponseConsumer>
- (void)commitSyncActions;
- (void)receiveSyncActions:(NSArray *)arg1;
- (void)drainMailbox;
@end

@protocol MFDataConsumer <NSObject>
- (void)done;
- (long long)appendData:(NSData *)arg1;
@end

@protocol MFGuaranteedCollectingDataConsumer <MFCollectingDataConsumer>
- (NSData *)data;
@end

@protocol MFLibraryContentIndexDataSource <NSObject>
- (void)contentIndex:(MFLibraryContentIndex *)arg1 invalidateItemsGreaterThanTransactionId:(unsigned int)arg2;
- (void)contentIndex:(MFLibraryContentIndex *)arg1 assignTransactionIdentifier:(unsigned int)arg2 forDocumentIdentifiers:(NSIndexSet *)arg3;
- (NSArray *)itemsRequiringIndexingForContentIndex:(MFLibraryContentIndex *)arg1 limit:(unsigned long long)arg2;
@end

@protocol MFMessageDataConsumerFactory <NSObject>
- (id <MFCollectingDataConsumer>)dataConsumerForPart:(NSString *)arg1;
@end

@protocol MFMessageDataSection
- (NSData *)data;
- (_Bool)isComplete;
- (_Bool)isPartial;
- (NSString *)partName;
@end

@protocol MFMessageIterationFilter <NSObject>
- (_Bool)filterMessageWithStatement:(struct sqlite3_stmt *)arg1;
@end

@protocol MFOfflineCacheReplayContextTransformation <NSCoding>
- (void)applyToReplayContext:(MFOfflineCacheReplayContext *)arg1;
@end

@protocol MFRequestQueueResponseConsumer
- (void)handleResponse:(id)arg1 error:(MFError *)arg2;
@end

@protocol MFSQLiteConnectionPoolDelegate <NSObject>
- (MFSQLiteConnection *)newConnectionForConnectionPool:(MFSQLiteConnectionPool *)arg1;
@end

@protocol MessageConsumer <QueryProgressMonitor>
- (void)newMessagesAvailable:(NSArray *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSStreamDelegate <NSObject>

@optional
- (void)stream:(NSStream *)arg1 handleEvent:(unsigned long long)arg2;
@end

@protocol NSURLConnectionDelegate <NSObject>

@optional
- (void)connection:(NSURLConnection *)arg1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (_Bool)connection:(NSURLConnection *)arg1 canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)arg2;
- (void)connection:(NSURLConnection *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (_Bool)connectionShouldUseCredentialStorage:(NSURLConnection *)arg1;
- (void)connection:(NSURLConnection *)arg1 didFailWithError:(NSError *)arg2;
@end

@protocol QLPreviewItem <NSObject>
@property(readonly) NSURL *previewItemURL;

@optional
@property(readonly) NSString *previewItemTitle;
@end

@protocol QueryProgressMonitor
- (_Bool)shouldCancel;
@end

@protocol RadiosPreferencesDelegate
- (void)airplaneModeChanged;
@end

@interface MFAccount : NSObject
{
    ACAccount *_persistentAccount;
    int _persistentAccountLock;
    NSMutableDictionary *_unsavedAccountProperties;
    NSString *_sourceApplicationBundleIdentifier;
}

+ (id)supportedDataclasses;
+ (id)saslProfileName;
+ (_Bool)isSSLEditable;
+ (_Bool)usesSSL;
+ (_Bool)isCommonPortNumber:(unsigned int)arg1;
+ (unsigned int)defaultSecurePortNumber;
+ (unsigned int)defaultPortNumber;
+ (id)hostname;
+ (id)accountPropertiesValueForKey:(id)arg1 value:(id)arg2;
+ (id)myFullName;
+ (void *)legacyKeychainProtocol;
+ (id)displayedShortAccountTypeString;
+ (id)displayedAccountTypeString;
+ (id)accountTypeString;
+ (_Bool)_setBasicProperty:(id)arg1 forKey:(id)arg2 persistentAccount:(id)arg3;
+ (id)_basicPropertyForKey:(id)arg1 persistentAccount:(id)arg2;
+ (id)propertiesWhichRequireValidation;
+ (id)predefinedValueForKey:(id)arg1;
+ (_Bool)isPredefinedAccountType;
+ (id)existingAccountForUniqueID:(id)arg1;
+ (id)accountTypeIdentifier;
+ (id)_accountClass;
+ (id)_newPersistentAccount;
+ (id)accountWithPersistentAccount:(id)arg1;
+ (id)authSchemesForAccountClass;
+ (id)accountWithProperties:(id)arg1;
+ (id)newAccountWithDictionary:(id)arg1;
+ (_Bool)shouldHealAccounts;
+ (void)setShouldHealAccounts:(_Bool)arg1;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
- (id)copyDiagnosticInformation;
- (_Bool)isEnabledForDataclass:(id)arg1;
- (id)enabledDataclasses;
- (id)loginDisabledErrorWithTitle:(id)arg1;
- (id)inaccessiblePasswordErrorWithTitle:(id)arg1;
- (id)missingPasswordErrorWithTitle:(id)arg1;
- (_Bool)shouldDisplayHostnameInErrorMessages;
- (_Bool)enableAccount;
- (_Bool)shouldEnableAfterError:(id)arg1;
- (id)nameForMailboxUid:(id)arg1;
@property(readonly) NSString *syncStoreIdentifier;
@property(readonly) NSString *uniqueId;
- (_Bool)_connectAndAuthenticate:(id)arg1;
- (void)reportAuthenticationError:(id)arg1 authScheme:(id)arg2;
- (id)customDescriptionForError:(id)arg1 authScheme:(id)arg2 defaultDescription:(id)arg3;
- (id)customTitleForAuthenticationError:(id)arg1 authScheme:(id)arg2 defaultTitle:(id)arg3;
- (id)customTitleForError:(id)arg1 authScheme:(id)arg2 defaultTitle:(id)arg3;
- (_Bool)_shouldTryDirectSSLConnectionOnPort:(unsigned int)arg1;
- (id)secureConnectionSettings;
- (id)insecureConnectionSettings;
- (id)alternateConnectionSettings;
- (void)applySettingsAsDefault:(id)arg1;
- (id)defaultConnectionSettings;
- (id)certUIService;
- (id)authenticatedConnection;
- (_Bool)requiresAuthentication;
- (Class)connectionClass;
- (id)_newConnection;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)preferredAuthScheme;
- (void)accountInfoDidChange;
- (void)setClientCertificates:(id)arg1;
- (id)clientCertificates;
- (void)setDomain:(id)arg1;
- (id)domain;
- (void)setTryDirectSSL:(_Bool)arg1;
- (_Bool)allowsTrustPrompt;
- (void)setUsesSSL:(_Bool)arg1;
- (_Bool)usesSSL;
- (void)validateConnections;
- (void)releaseAllForcedConnections;
- (void)releaseAllConnections;
- (struct __CFString *)connectionServiceType;
- (id)secureServiceName;
- (id)serviceName;
- (void)setPortNumber:(unsigned int)arg1;
- (unsigned int)defaultSecurePortNumber;
- (unsigned int)defaultPortNumber;
- (unsigned int)portNumber;
- (_Bool)fetchTokensIfNecessary:(id *)arg1;
@property(readonly) NSString *managedTag;
@property(readonly) ACAccount *accountForRenewingCredentials;
- (_Bool)promptUserForWebLoginWithURL:(id)arg1 shouldConfirm:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (_Bool)promptUserForPasswordWithTitle:(id)arg1 message:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (_Bool)setCredentialItem:(id)arg1 forKey:(id)arg2 error:(id *)arg3;
- (void)setCredentialItem:(id)arg1 forKey:(id)arg2;
- (id)credentialItemForKey:(id)arg1 error:(id *)arg2;
- (id)credentialItemForKey:(id)arg1;
- (unsigned long long)credentialAccessibility;
- (id)password;
- (id)_passwordWithError:(id *)arg1;
- (id)_password;
- (void)setPassword:(id)arg1;
- (id)_credentialCreateIfNecessary:(_Bool)arg1 error:(id *)arg2;
- (id)_credentialCreateIfNecessary:(_Bool)arg1;
- (id)_credential;
@property(retain, nonatomic) NSString *hostname;
@property(retain, nonatomic) NSString *username;
@property(retain, nonatomic) NSString *displayName;
- (_Bool)canGoOffline;
- (void)setActive:(_Bool)arg1;
- (_Bool)isActive;
- (_Bool)_boolForAccountInfoKey:(id)arg1 defaultValue:(_Bool)arg2;
- (id)_objectForAccountInfoKey:(id)arg1;
- (id)valueInAccountPropertiesForKey:(id)arg1;
- (void)removeValueInAccountPropertiesForKey:(id)arg1;
- (void)setValueInAccountProperties:(id)arg1 forKey:(id)arg2;
- (void)_setAccountProperties:(id)arg1;
- (void)_queueAccountInfoDidChange;
- (void)removeAccountPropertyForKey:(id)arg1;
- (void)setAccountProperty:(id)arg1 forKey:(id)arg2;
- (id)accountPropertyForKey:(id)arg1;
@property(readonly) NSDictionary *properties;
- (id)accountClass;
@property(readonly) NSString *type;
@property(readonly) NSString *parentAccountIdentifier;
@property(readonly) ACAccount *parentAccount;
@property(readonly) NSString *identifier;
- (void)removePersistentAccount;
- (void)savePersistentAccount;
@property(readonly) ACAccount *persistentAccount;
- (void)persistentAccountDidChange:(id)arg1 previousAccount:(id)arg2;
- (void)setPersistentAccount:(id)arg1;
- (void)dealloc;
- (id)initWithPersistentAccount:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithProperties:(id)arg1;
- (id)init;
- (_Bool)shouldFetchACEDBInfoForError:(id)arg1;

@end

@interface DeliveryAccount : MFAccount
{
}

+ (id)newDefaultInstance;
+ (id)carrierDeliveryAccount;
+ (id)accountWithHostname:(id)arg1 username:(id)arg2 lookForExistingAccounts:(_Bool)arg3;
+ (id)accountWithHostname:(id)arg1 username:(id)arg2;
+ (id)existingAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)existingAccountWithIdentifier:(id)arg1;
+ (id)accountWithIdentifier:(id)arg1;
+ (id)accountWithUniqueId:(id)arg1;
+ (void)removeDeliveryAccount:(id)arg1;
+ (void)addDeliveryAccount:(id)arg1;
+ (id)deliveryAccounts;
+ (id)existingAccountForUniqueID:(id)arg1;
+ (void)reloadDeliveryAccounts;
+ (void)_postDeliveryAccountsHaveChanged;
+ (id)accountTypeIdentifier;
- (void)_updateAccountDescriptionWithUsername:(id)arg1 hostname:(id)arg2;
- (_Bool)shouldUseSaveSentForAccount:(id)arg1;
- (_Bool)supportsOutboxCopy;
- (_Bool)supportsSoftBankCodePoints;
- (_Bool)hasEnoughInformationForEasySetup;
- (_Bool)canBeFallbackAccount;
- (id)displayHostname;
- (_Bool)hasNoReferences;
- (id)mailAccountIfAvailable;
- (void)setMaximumMessageBytes:(unsigned long long)arg1;
- (unsigned long long)maximumMessageBytes;
- (void)_setAccountProperties:(id)arg1;
- (void)setUsername:(id)arg1;
- (void)setShouldUseAuthentication:(_Bool)arg1;
- (_Bool)shouldUseAuthentication;
- (id)identifier;
- (id)newDeliveryWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
- (id)newDeliveryWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;
- (id)newDeliveryWithMessage:(id)arg1;
- (Class)deliveryClass;

@end

@interface DADeliveryAccount : DeliveryAccount
{
    DAMailAccount *_DAMailAccount;
}

- (id)mailAccountIfAvailable;
- (void)dealloc;
- (id)newDeliveryWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
- (id)newDeliveryWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;
- (id)newDeliveryWithMessage:(id)arg1;
- (Class)deliveryClass;
- (id)initWithDAMailAccount:(id)arg1;

@end

@interface DAFolderChange (MFAdditions)
- (id)mf_deferredOperation;
@end

@interface MailAccount : MFAccount
{
    NSString *_path;
    NSString *_nonPersistentPath;
    MFMailboxUid *_rootMailboxUid;
    struct {
        unsigned int cacheDirtyCount:16;
        unsigned int synchronizationThreadIsRunning:1;
        unsigned int cacheHasBeenRead:1;
        unsigned int disableCacheWrite:1;
        unsigned int _UNUSED_:13;
    } _flags;
    MFMailboxUid *_inboxMailboxUid;
    MFMailboxUid *_draftsMailboxUid;
    MFMailboxUid *_sentMessagesMailboxUid;
    MFMailboxUid *_trashMailboxUid;
    MFMailboxUid *_archiveMailboxUid;
    MFMailboxUid *_junkMailboxUid;
    MFLock *_cachedMailboxenLock;
    MFLock *_deletionLock;
    MFError *_lastConnectionError;
    MFMessageLibrary *_library;
    NSMutableDictionary *_currentChokedActions;
    NSString *_mailboxCachePath;
    MFWeakObjectCache *_messageStoresCache;
    long long _cachedLibraryID;
    MFLock *_cachedLibraryIDLock;
    NSString *_lastKnownHostname;
}

+ (void)_removeLookAsideValuesNotInAccountList:(id)arg1;
+ (_Bool)canMoveMessagesFromAccount:(id)arg1 toAccount:(id)arg2;
+ (void)_setOutboxMailboxUid:(id)arg1;
+ (void)setDataclassesConsideredActive:(id)arg1;
+ (id)_accountWithPath:(id)arg1;
+ (_Bool)getConfigurationFromServerForEmail:(id)arg1;
+ (_Bool)usernameIsEmailAddress;
+ (id)predefinedValueForKey:(id)arg1;
+ (id)standardAccountClass:(Class)arg1 valueForKey:(id)arg2;
+ (void)updateEmailAliasesForActiveAccounts;
+ (id)mailboxUidFromActiveAccountsForURL:(id)arg1;
+ (id)accountWithURLString:(id)arg1;
+ (id)URLForInfo:(id)arg1;
+ (id)infoForURL:(id)arg1;
+ (id)_accountForURL:(id)arg1;
+ (id)mailboxUidForFileSystemPath:(id)arg1 create:(_Bool)arg2;
+ (void)synchronouslyEmptyMailboxUidType:(int)arg1 inAccounts:(id)arg2;
+ (void)saveStateForAllAccounts;
+ (_Bool)isPredefinedAccountType;
+ (_Bool)primaryDeliveryAccountIsDynamic;
+ (id)defaultDeliveryAccount;
+ (id)_defaultMailAccountForDeliveryIncludingRestricted:(_Bool)arg1;
+ (id)defaultMailAccountForDeliveryExcludingRestricted;
+ (id)defaultMailAccountForDelivery;
+ (void)setGlobalPathForAccounts:(id)arg1;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)defaultAccountDirectory;
+ (id)defaultPathForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)newAccountWithDictionary:(id)arg1;
+ (id)newAccountWithPath:(id)arg1;
+ (id)accountWithPath:(id)arg1;
+ (id)allMailboxUids;
+ (id)outboxMessageStore:(_Bool)arg1;
+ (id)outboxMailboxUid;
+ (id)addressesThatReceivedMessage:(id)arg1;
+ (id)accountThatMessageIsFrom:(id)arg1;
+ (id)accountThatMessageIsFrom:(id)arg1 includingInactive:(_Bool)arg2;
+ (id)accountUsingHeadersFromMessage:(id)arg1;
+ (id)accountForHeaders:(id)arg1 message:(id)arg2 includingInactive:(_Bool)arg3;
+ (id)accountContainingEmailAddress:(id)arg1;
+ (id)accountContainingEmailAddress:(id)arg1 includingInactive:(_Bool)arg2;
+ (id)_accountContainingEmailAddress:(id)arg1 matchingAddress:(id *)arg2 fullUserName:(id *)arg3 includingInactive:(_Bool)arg4;
+ (id)allEmailAddressesIncludingFullUserName:(_Bool)arg1 includeReceiveAliases:(_Bool)arg2;
+ (void)updateAutoFetchSettings;
+ (void)resetMailboxTimers;
+ (id)existingAccountWithType:(id)arg1 hostname:(id)arg2 username:(id)arg3;
+ (id)accountWithUniqueId:(id)arg1;
+ (id)activeAccountsWithError:(id *)arg1;
+ (id)activeAccounts;
+ (void)_removeAccountFromSortedPaths:(id)arg1;
+ (void)setMailAccounts:(id)arg1 saveIfChanged:(_Bool)arg2;
+ (void)setMailAccounts:(id)arg1;
+ (id)lastMailAccountsReloadError;
+ (id)lastMailAccountsReloadDate;
+ (id)mailAccountsWithError:(id *)arg1;
+ (id)mailAccounts;
+ (void)reloadAccounts;
+ (void)_invalidateAccounts:(id)arg1 missingFromNewAccounts:(id)arg2;
+ (id)_loadDataAccessAccountsWithError:(id *)arg1;
+ (id)_loadAllAccountsWithOptions:(unsigned long long)arg1 error:(id *)arg2;
+ (void)setMailAccountLoadOptions:(unsigned long long)arg1;
+ (id)existingDAMailAccountForDAAccount:(id)arg1;
+ (id)existingAccountForUniqueID:(id)arg1;
+ (void)_setupSortedPathsForAccounts:(id)arg1;
+ (void)_addAccountToSortedPaths:(id)arg1;
+ (void)enableMailboxListingNotifications:(_Bool)arg1;
+ (void)disableMailboxListingNotifications;
+ (_Bool)mailboxListingNotificationAreEnabled;
+ (void)initialize;
@property(readonly) _Bool sourceIsManaged;
@property(readonly) _Bool shouldArchiveByDefault;
- (int)archiveDestinationForMailbox:(id)arg1;
- (_Bool)canArchiveForMailbox:(id)arg1;
- (_Bool)preventArchiveForMailbox:(id)arg1;
- (_Bool)supportsThreadNotifications;
- (_Bool)supportsArchiving;
- (void)setCustomSignature:(id)arg1;
- (id)customSignature;
- (id)fetchLimits;
- (_Bool)restrictedFromSyncingRecents;
- (_Bool)restrictedFromSendingExternally;
- (_Bool)restrictedFromTransferingMessagesToOtherAccounts;
- (id)copyDataForRemoteEncryptionCertificatesForAddress:(id)arg1 error:(id *)arg2;
- (int)secureCompositionEncryptionPolicyForAddress:(id)arg1;
- (int)secureCompositionSigningPolicyForAddress:(id)arg1;
- (_Bool)perMessageEncryptionEnabled;
- (_Bool)secureMIMEEnabled;
- (void)setEncryptionIdentityPersistentReference:(id)arg1 forAddress:(id)arg2;
- (id)encryptionIdentityPersistentReferenceForAddress:(id)arg1;
- (void)setSigningIdentityPersistentReference:(id)arg1 forAddress:(id)arg2;
- (id)signingIdentityPersistentReferenceForAddress:(id)arg1;
- (void)_setValueInAccountLookAsideProperties:(id)arg1 forKey:(id)arg2 subKey:(id)arg3;
- (void)setValueInAccountLookAsideProperties:(id)arg1 forKey:(id)arg2;
- (id)valueInAccountLookAsidePropertiesForKey:(id)arg1;
- (id)saveSentFolder;
- (id)iconString;
- (_Bool)shouldFetchBodiesWhenMovingToTrash;
- (_Bool)shouldRestoreMessagesAfterFailedDelete;
- (id)allLocalMailboxUids;
- (_Bool)isMailboxLocalForType:(int)arg1;
- (id)_localMailboxNameForType:(int)arg1 usingDisplayName:(id)arg2;
- (_Bool)moveMessages:(id)arg1 fromMailbox:(id)arg2 toMailbox:(id)arg3 markAsRead:(_Bool)arg4 unsuccessfulOnes:(id)arg5 newMessages:(id)arg6;
- (id)_newMailboxWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 dictionary:(id)arg4 withCreationOption:(int)arg5;
- (id)newMailboxWithParent:(id)arg1 name:(id)arg2;
- (id)_copyMailboxWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 dictionary:(id)arg4;
- (id)_deliveryAccountCreateIfNeeded:(_Bool)arg1;
- (_Bool)_cleanInboxDuplication:(id)arg1;
- (id)URLForMessage:(id)arg1;
- (void)_writeCustomInfoToMailboxCache:(id)arg1;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (id)_mailboxPathPrefix;
- (id)_URLForInfo:(id)arg1;
- (id)_URLScheme;
- (id)_infoForMatchingURL:(id)arg1;
- (_Bool)_shouldLogDeleteActivity;
- (_Bool)_canEmptyMessagesFromMailboxUid:(id)arg1;
- (id)_specialMailboxUidWithType:(int)arg1 create:(_Bool)arg2;
- (void)_setSpecialMailbox:(id)arg1 forType:(int)arg2;
- (void)_setSpecialMailboxName:(id)arg1 forType:(int)arg2;
- (_Bool)_assignSpecialMailboxToAppropriateIvar:(id)arg1 forType:(int)arg2;
- (id)_cachedSpecialMailboxOfType:(int)arg1;
- (id *)_specialMailboxIvarOfType:(int)arg1;
- (id)_defaultSpecialMailboxNameForType:(int)arg1;
- (id)powerAssertionIdentifierWithPrefix:(id)arg1;
- (id)description;
- (_Bool)_deleteMailbox:(id)arg1;
- (_Bool)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (void)_writeMailboxCacheWithPrejudice:(_Bool)arg1;
- (void)_loadEntriesFromFileSystemPath:(id)arg1 parent:(id)arg2;
- (void)setMailboxCachePath:(id)arg1;
- (id)mailboxCachePath;
- (_Bool)_usesMailboxCache;
- (void)_mailboxesWereRemovedFromTree:(id)arg1 withFileSystemPaths:(id)arg2;
- (_Bool)_loadMailboxListingIntoCache:(id)arg1 attributes:(unsigned int)arg2 children:(id)arg3 parent:(id)arg4;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4 dictionary:(id)arg5;
- (id)_uidNameForPathComponent:(id)arg1;
- (id)_pathComponentForUidName:(id)arg1;
- (_Bool)shouldFetchAgainWithError:(id)arg1 foregroundRequest:(_Bool)arg2;
- (int)_emptyFrequencyForKey:(id)arg1 defaultValue:(id)arg2;
- (void)_didBecomeActive:(_Bool)arg1;
- (void)setActive:(_Bool)arg1;
- (_Bool)isActive;
- (_Bool)isActiveWithPersistentAccount:(id)arg1;
- (_Bool)_setPath:(id)arg1;
- (void)changePushedMailboxUidsAdded:(id)arg1 deleted:(id)arg2;
- (_Bool)supportsUserPushedMailboxes;
- (id)pushedMailboxUids;
- (void)deliveryAccountWillBeRemoved:(id)arg1;
- (void)removeUserFocusMailbox:(id)arg1;
- (void)addUserFocusMailbox:(id)arg1;
- (void)didFinishActionForChokePoint:(id)arg1 coalescePoint:(id)arg2 withResult:(id)arg3;
- (_Bool)willPerformActionForChokePoint:(id)arg1 coalescePoint:(id)arg2 result:(id *)arg3;
- (_Bool)_registerPushNotificationPrefix:(id)arg1 forMailboxNames:(id)arg2;
- (_Bool)canReceiveNewMailNotifications;
- (_Bool)hasEnoughInformationForEasySetup;
- (id)unactionableInvitationICSRepresentationInMessage:(id)arg1 summary:(id *)arg2;
- (_Bool)reconstituteOrphanedMeetingInMessage:(id)arg1;
- (id)meetingStorePersistentID;
- (id)loggingIdentifier;
- (id)statisticsKind;
- (id)displayNameUsingSpecialNamesForMailboxUid:(id)arg1;
- (_Bool)deleteInPlaceForMailbox:(id)arg1;
- (_Bool)deleteInPlaceForAllMailboxes;
- (_Bool)derivesDeliveryAccountInfoFromMailAccount;
- (_Bool)supportsMessageFlagging;
- (_Bool)archiveSentMessages;
- (id)displayUsername;
- (int)cachePolicy;
- (void)setCachePolicy:(int)arg1;
- (_Bool)supportsMailboxEditing;
- (_Bool)supportsSyncingReadState;
- (_Bool)supportsRemoteAppend;
- (_Bool)supportsAppend;
- (_Bool)shouldAppearInMailSettings;
- (void)setupLibrary;
- (id)library;
- (void)setLibrary:(id)arg1;
- (_Bool)canForwardWithoutDownload;
- (long long)libraryID;
- (void)systemWillSleep;
- (void)systemDidWake;
- (_Bool)updateEmailAliases;
- (void)transferNotificationSessionToAccount:(id)arg1;
- (void)stopListeningForNotifications;
- (void)startListeningForNotifications;
- (void)emptyTrash;
- (id)mailboxUidForURL:(id)arg1;
- (id)mailboxUidForInfo:(id)arg1;
- (id)URLString;
- (id)mailboxUidForRelativePath:(id)arg1 create:(_Bool)arg2 withOption:(int)arg3;
- (id)_childOfMailbox:(id)arg1 withComponentName:(id)arg2;
- (id)mailboxUidForRelativePath:(id)arg1 create:(_Bool)arg2;
- (void)setUnreadCount:(unsigned long long)arg1 forMailbox:(id)arg2;
- (Class)storeClassForMailbox:(id)arg1;
- (Class)storeClass;
- (void)unregisterStore:(id)arg1 forUid:(id)arg2;
- (id)storeForMailboxUid:(id)arg1;
- (id)connectionError;
- (void)setConnectionError:(id)arg1;
- (void)setValueInAccountProperties:(id)arg1 forKey:(id)arg2;
- (void)setPortNumber:(unsigned int)arg1;
- (_Bool)isAccountClassEquivalentTo:(id)arg1;
- (_Bool)isHostnameEquivalentTo:(id)arg1;
- (void)setHostname:(id)arg1;
- (void)setUsername:(id)arg1;
- (void)resetMailboxURLs;
- (void)_resetAllMailboxURLs:(_Bool)arg1;
- (_Bool)deleteMailbox:(id)arg1;
- (_Bool)_renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (_Bool)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (_Bool)renameMailbox:(id)arg1 newName:(id)arg2;
- (_Bool)moveMailbox:(id)arg1 intoParent:(id)arg2;
- (_Bool)canMailboxBeDeleted:(id)arg1;
- (_Bool)canMailboxBeRenamed:(id)arg1;
- (_Bool)newMailboxNameIsAcceptable:(id)arg1 reasonForFailure:(id *)arg2;
- (_Bool)canCreateNewMailboxes;
- (id)mailboxPathExtension;
- (void)resetSpecialMailboxes;
- (_Bool)_resetSpecialMailboxes;
- (id)displayNameForMailboxUid:(id)arg1;
- (id)displayName;
- (void)setEmptyFrequency:(int)arg1 forMailboxType:(int)arg2;
- (int)emptyFrequencyForMailboxType:(int)arg1;
- (void)_setEmptyFrequency:(int)arg1 forKey:(id)arg2;
- (void)deleteMessagesFromMailboxUid:(id)arg1 olderThanNumberOfDays:(unsigned int)arg2;
- (void)setMailboxUid:(id)arg1 forMailboxType:(int)arg2;
- (id)transferDisabledMailboxUids;
- (id)allMailboxUids;
- (id)specialMailboxNameForType:(int)arg1;
- (id)mailboxUidOfType:(int)arg1 createIfNeeded:(_Bool)arg2;
- (_Bool)shouldExpungeMessagesOnDelete;
- (id)rootMailboxUid;
- (id)allMailMailboxUid;
- (id)primaryMailboxUid;
- (_Bool)canAppendMessages;
- (void)fetchMailboxList;
- (void)nowWouldBeAGoodTimeToStartBackgroundSynchronization;
- (void)_synchronizeMailboxListWithFileSystem;
- (_Bool)_shouldConfigureMailboxCache;
- (_Bool)canFetch;
- (void)releaseAllForcedConnections;
- (void)releaseAllConnections;
- (void)saveState;
- (void)invalidateAndDelete;
- (void)invalidate;
- (void)_asynchronouslyInvalidateAndDeleteAccountData:(_Bool)arg1;
- (void)_invalidateAndDeleteAccountData:(_Bool)arg1;
- (void)_deleteHook;
- (id)emailAddressesAndAliases;
- (id)emailAddressesAndAliasesList;
- (void)setLastEmailAliasesSyncDate:(id)arg1;
- (id)lastEmailAliasesSyncDate;
- (id)fromEmailAddressesIncludingDisabled;
- (id)fromEmailAddresses;
- (void)setReceiveEmailAliasAddresses:(id)arg1;
- (id)receiveEmailAliasAddressesList;
- (id)receiveEmailAliasAddresses;
- (id)emailAddressesDictionary;
- (void)setEmailAddresses:(id)arg1;
- (id)emailAddresses;
- (void)pushUpdateForAliasData;
- (void)setEnabled:(_Bool)arg1 forEmailAddress:(id)arg2;
- (void)setDefaultEmailAddress:(id)arg1;
- (id)defaultEmailAddress;
- (id)firstEmailAddress;
- (_Bool)canUseCarrierDeliveryFallback;
- (void)setCanUseCarrierDeliveryFallback:(_Bool)arg1;
- (_Bool)canUseDeliveryAccount:(id)arg1;
- (void)setDeliveryAccountAlternates:(id)arg1;
- (void)setDeliveryAccount:(id)arg1;
- (id)deliveryAccountAlternates;
- (void)setPrimaryDeliveryAccountDisabled:(_Bool)arg1;
- (_Bool)isPrimaryDeliveryAccountDisabled;
- (id)deliveryAccount;
- (void)setFullUserName:(id)arg1;
- (id)fullUserName;
- (id)tildeAbbreviatedPath;
- (void)setLastKnownHostname:(id)arg1;
- (void)setPath:(id)arg1;
- (id)path;
- (void)dealloc;
- (id)initWithPath:(id)arg1;
- (id)initWithLibrary:(id)arg1 path:(id)arg2;
- (id)initWithLibrary:(id)arg1 persistentAccount:(id)arg2;
- (id)initWithPersistentAccount:(id)arg1;
- (void)_setAccountProperties:(id)arg1;
- (void)persistentAccountDidChange:(id)arg1 previousAccount:(id)arg2;
- (void)_invalidateCachedMailboxen;
- (id)uniqueIdForPersistentConnection;
- (void)resetMailboxTimer;
- (_Bool)isUsernameEquivalentTo:(id)arg1;
- (_Bool)isEquivalentTo:(id)arg1 hostname:(id)arg2 username:(id)arg3;
- (void)accountDidLoad;

@end

@interface DAMailAccount : MailAccount
{
    NSObject<ASAccountActorMessages> *_accountConduit;
    DAAccount *_daAccount;
    MFRecursiveLock *_offlineCacheLock;
    MFDAOfflineCache *_offlineCache;
    _Bool _isNetworkReachable;
    NSString *_cachedAccountID;
    NSString *_cachedAccountPersistentUUID;
    NSString *_cachedDisplayName;
    NSString *_cachedEmailAddress;
    NSArray *_cachedEmailAddresses;
    NSString *_cachedIconString;
    _Bool _cachedIsActive;
    _Bool _cachedIsHotmailAccount;
    _Bool _cachedCalendarEnabled;
    _Bool _cachedSecureMIMEEnabled;
    _Bool _cachedPerMessageEncryptionEnabled;
    _Bool _cachedSecureMIMEShouldSign;
    _Bool _cachedSecureMIMEShouldEncrypt;
    _Bool _cachedRestrictMessageTransfersToOtherAccounts;
    _Bool _cachedRestrictSendingFromExternalProcesses;
    _Bool _cachedRestrictSyncingRecents;
    _Bool _cachedArchiveByDefault;
    _Bool _cachedSourceIsManaged;
    NSString *_cachedInboxFolderID;
    NSString *_cachedSentMessagesFolderID;
    NSString *_cachedTrashFolderID;
    NSString *_cachedJunkFolderID;
    MFDAMailbox *_temporaryInbox;
    _Bool _loadedInitialMailboxList;
    _Bool _receivedInitialMailboxUpdate;
    _Bool _doneInitialInboxCheck;
    _Bool _observingPushedFoldersPrefsChanged;
    int _supportsServerSearch;
    int _supportsMessageFlagging;
    int _supportsConversations;
    unsigned int _daysToSync;
    NSMutableDictionary *_requestQueuesByFolderID;
    NSLock *_watchedFolderIdsLock;
    NSSet *_watchedFolderIds;
    NSCountedSet *_userFocusMailboxIds;
    NSString *_folderTag;
}

+ (id)accountIDForDirectoryName:(id)arg1 isAccountDirectory:(_Bool *)arg2;
+ (id)_URLScheme;
+ (id)displayedShortAccountTypeString;
+ (id)displayedAccountTypeString;
+ (id)accountTypeString;
+ (id)folderIDForRelativePath:(id)arg1 accountID:(id *)arg2;
+ (Class)_accountConduitClass;
- (id)fetchLimits;
- (_Bool)restrictedFromSyncingRecents;
- (_Bool)restrictedFromSendingExternally;
- (_Bool)restrictedFromTransferingMessagesToOtherAccounts;
- (id)copyDataForRemoteEncryptionCertificatesForAddress:(id)arg1 error:(id *)arg2;
- (int)secureCompositionEncryptionPolicyForAddress:(id)arg1;
- (int)secureCompositionSigningPolicyForAddress:(id)arg1;
- (_Bool)perMessageEncryptionEnabled;
- (_Bool)secureMIMEEnabled;
- (void)setEncryptionIdentityPersistentReference:(id)arg1 forAddress:(id)arg2;
- (id)encryptionIdentityPersistentReferenceForAddress:(id)arg1;
- (void)setSigningIdentityPersistentReference:(id)arg1 forAddress:(id)arg2;
- (id)signingIdentityPersistentReferenceForAddress:(id)arg1;
- (void)_reachabilityChanged:(id)arg1;
- (_Bool)_replayOfflineCache:(id)arg1;
- (void)_deferMailboxRequests:(id)arg1 mailbox:(id)arg2 offlineCache:(id)arg3;
- (id)_offlineCache;
- (_Bool)canGoOffline;
- (void)removeUserFocusMailbox:(id)arg1;
- (void)addUserFocusMailbox:(id)arg1;
- (id)_watchedFolderIds;
- (void)changePushedMailboxUidsAdded:(id)arg1 deleted:(id)arg2;
- (id)_folderIdsForMailboxUids:(id)arg1;
- (id)pushedMailboxUids;
- (_Bool)supportsUserPushedMailboxes;
- (unsigned int)daysToSync;
- (_Bool)supportsServerSearch;
- (_Bool)shouldRestoreMessagesAfterFailedDelete;
- (_Bool)shouldDisplayHostnameInErrorMessages;
- (void)cancelSearchQuery:(id)arg1;
- (void)performSearchQuery:(id)arg1;
- (void)setSyncAnchor:(id)arg1 forFolderID:(id)arg2 mailbox:(id *)arg3;
- (id)syncAnchorForFolderID:(id)arg1 mailbox:(id *)arg2;
- (void)stopListeningForNotifications;
- (void)startListeningForNotifications;
- (id)_updateWatchedFolderIdsAndNotify:(_Bool)arg1;
- (id)_inboxFolderID;
- (id)meetingStorePersistentID;
- (id)unactionableInvitationICSRepresentationInMessage:(id)arg1 summary:(id *)arg2;
- (_Bool)reconstituteOrphanedMeetingInMessage:(id)arg1;
- (void)dealloc;
- (_Bool)isEnabledForDataclass:(id)arg1;
- (_Bool)derivesDeliveryAccountInfoFromMailAccount;
- (id)iconString;
- (void)invalidate;
- (id)accountPropertyForKey:(id)arg1;
- (_Bool)isActive;
- (_Bool)shouldFetchAgainWithError:(id)arg1 foregroundRequest:(_Bool)arg2;
- (_Bool)_isUnitTesting;
- (_Bool)sourceIsManaged;
- (_Bool)shouldArchiveByDefault;
- (_Bool)supportsThreadNotifications;
- (_Bool)supportsMessageFlagging;
- (id)primaryMailboxUid;
- (void)_ensureWeHaveLoadedInitialMailboxList;
- (_Bool)isMailboxLocalForType:(int)arg1;
- (id)_specialMailboxUidWithType:(int)arg1 create:(_Bool)arg2;
- (id)_relativePathSpecialMailboxUidWithType:(int)arg1 create:(_Bool)arg2;
- (id)_relativePathForType:(int)arg1;
- (_Bool)moveMessages:(id)arg1 fromMailbox:(id)arg2 toMailbox:(id)arg3 markAsRead:(_Bool)arg4 unsuccessfulOnes:(id)arg5 newMessages:(id)arg6;
- (_Bool)performRequests:(id)arg1 mailbox:(id)arg2 consumers:(id)arg3;
- (void)processRequests:(id)arg1 mailbox:(id)arg2 consumers:(id)arg3;
- (void)addRequests:(id)arg1 mailbox:(id)arg2 consumers:(id)arg3;
- (void)addRequest:(id)arg1 mailbox:(id)arg2 consumer:(id)arg3;
- (id)mailboxUidForInfo:(id)arg1;
- (id)mailboxForFolderID:(id)arg1;
- (id)_infoForMatchingURL:(id)arg1;
- (_Bool)supportsMailboxEditing;
- (_Bool)supportsRemoteAppend;
- (id)syncAnchorForMailbox:(id)arg1;
- (void)setDAAccount:(id)arg1;
- (id)mailboxPathExtension;
- (id)_URLScheme;
- (_Bool)shouldAppearInMailSettings;
- (_Bool)newMailboxNameIsAcceptable:(id)arg1 reasonForFailure:(id *)arg2;
- (void)_performFolderChange:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)_deleteMailbox:(id)arg1;
- (_Bool)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (id)_newMailboxWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 dictionary:(id)arg4 withCreationOption:(int)arg5;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (id)folderIDForMailbox:(id)arg1;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4 dictionary:(id)arg5;
- (id)_copyMailboxWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 dictionary:(id)arg4;
- (Class)storeClass;
- (_Bool)canReceiveNewMailNotifications;
- (void)fetchMailboxList;
- (_Bool)finishedInitialMailboxListLoad;
- (void)pushedFoldersPrefsChanged:(id)arg1;
- (id)accountConduit;
- (void)accountHierarchyChanged:(id)arg1;
- (void)_loadChildrenForParent:(id)arg1 fromMap:(id)arg2 intoArray:(id)arg3 replacingInbox:(id)arg4 withID:(id)arg5;
- (_Bool)isRunningInDisallowedBundle;
- (int)emptyFrequencyForMailboxType:(int)arg1;
- (void)resetSpecialMailboxes;
- (id)allMailboxUids;
- (id)uniqueIdForPersistentConnection;
- (id)identifier;
- (id)uniqueId;
- (id)deliveryAccount;
- (id)hostname;
- (id)username;
- (id)accountForRenewingCredentials;
- (id)displayName;
- (void)foldersContentsChanged:(id)arg1;
- (id)statisticsKind;
- (id)initWithDAAccount:(id)arg1;
- (id)initWithLibrary:(id)arg1 persistentAccount:(id)arg2;

@end

@interface DAMailboxRequest (MFAdditions)
- (_Bool)mf_alwaysReportFailures;
@end

@interface LocalAccount : MailAccount
{
}

+ (id)accountTypeString;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)localAccount;
+ (id)accountTypeIdentifier;
- (_Bool)supportsArchiving;
- (_Bool)supportsAppend;
- (_Bool)deleteInPlaceForMailbox:(id)arg1;
- (id)_infoForMatchingURL:(id)arg1;
- (id)_URLScheme;
- (id)transientDraftsFolder;
- (id)mailboxUidForFileSystemPath:(id)arg1;
- (_Bool)renameMailbox:(id)arg1 newName:(id)arg2 parent:(id)arg3;
- (_Bool)_setChildren:(id)arg1 forMailboxUid:(id)arg2;
- (id)_copyMailboxUidWithParent:(id)arg1 name:(id)arg2 attributes:(unsigned int)arg3 existingMailboxUid:(id)arg4 dictionary:(id)arg5;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (_Bool)canGoOffline;
- (_Bool)_shouldConfigureMailboxCache;
- (_Bool)canFetch;
- (void)setPassword:(id)arg1;
- (void)setUsername:(id)arg1;
- (void)setHostname:(id)arg1;
- (id)displayName;
- (id)pushedMailboxUids;
- (id)primaryMailboxUid;
- (id)mailboxPathExtension;
- (Class)storeClass;
- (id)uniqueId;
- (_Bool)isActive;
- (id)initWithLibrary:(id)arg1 persistentAccount:(id)arg2;

@end

@interface MFAccountLoader : NSObject
{
}

+ (id)_bundlePathForAccountClassString:(id)arg1;
+ (_Bool)loadBundleForAccountClassString:(id)arg1 error:(id *)arg2;
+ (Class)_accountClassForString:(id)arg1 error:(id *)arg2;
+ (id)_accountClassStringWithPersistentAccount:(id)arg1 error:(id *)arg2;
+ (Class)accountClassForPersistentAccount:(id)arg1 error:(id *)arg2;
+ (id)accountWithPersistentAccount:(id)arg1 error:(id *)arg2;
+ (id)accountWithAccountTypeIdentifier:(id)arg1 error:(id *)arg2;

@end

@interface MFAccountStore : NSObject
{
    int _accountStoreLock;
    ACAccountStore *_accountStore;
}

+ (_Bool)_shouldUpdateAccountsInPlace;
+ (id)_accountWithAccountClass:(Class)arg1 persistentAccount:(id)arg2 useExisting:(_Bool)arg3;
+ (id)sharedAccountStore;
- (void)_accountsStoreChanged:(id)arg1;
- (void)removePersistentAccountWithAccount:(id)arg1;
- (void)savePersistentAccountWithAccount:(id)arg1;
- (id)_accountWithPersistentAccount:(id)arg1 useExisting:(_Bool)arg2;
- (id)existingAccountWithPersistentAccount:(id)arg1;
- (id)accountsWithTypeIdentifiers:(id)arg1 error:(id *)arg2;
- (id)supportedDataclassesWithAccountTypeIdentifier:(id)arg1;
- (id)newPersistentAccountWithAccountTypeIdentifier:(id)arg1;
- (void)setPersistentStore:(id)arg1;
@property(readonly) ACAccountStore *persistentStore;
- (void)dealloc;
- (id)init;

@end

@interface MFAccountValidator : NSObject
{
    MFAccount *_account;
    id _delegate;
    MFActivityMonitor *_accountValidationActivity;
    MFMonitoredInvocation *_validationInvocation;
    CDUnknownBlockType _completionBlock;
    struct {
        unsigned int useSSL:1;
        unsigned int incomingServerSupportsSSL:1;
        unsigned int smtpServerSupportsSSL:1;
        unsigned int canceled:1;
        unsigned int performsValidationInBackground:1;
        unsigned int unused:27;
    } _flags;
    MFError *_incomingServerValidationError;
    MFError *_smtpServerValidationError;
    NSArray *_incomingServerAuthSchemes;
    NSArray *_smtpServerAuthSchemes;
}

@property(nonatomic) id delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) MFError *error;
@property(readonly, nonatomic) _Bool accountSupportsSSL;
@property(readonly, nonatomic) _Bool accountIsValid;
@property(readonly, nonatomic) MFMonitoredInvocation *validationInvocation;
@property(readonly, nonatomic) _Bool performsValidationInBackground;
- (void)_validateAccount:(id)arg1 withFallbacks:(_Bool)arg2;
- (_Bool)accountValidationCanceled;
- (void)stop;
- (_Bool)_outgoingServerValid;
- (_Bool)_incomingServerValid;
- (void)_validateAccountWithoutFallbacks:(id)arg1;
- (void)_validateAccount:(id)arg1;
- (void)_backgroundValidateAccountFinished:(id)arg1 authSchemes:(id)arg2;
- (id)_ispAccountInfo;
- (void)cancelValidation;
@property(readonly, nonatomic) MFAccount *account;
- (void)validateAccountWithoutFallbacks:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)validateAccountWithoutFallbacks:(id)arg1;
- (void)validateAccount:(id)arg1 useSSL:(_Bool)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)validateAccount:(id)arg1 useSSL:(_Bool)arg2;
- (void)dealloc;
- (id)initWithPerformsValidationInBackground:(_Bool)arg1;
- (id)init;

@end

@interface MFActivityMonitor : MFPriorityDesignator
{
    NSThread *_runningThread;
    NSString *_taskName;
    NSString *_displayName;
    NSString *_statusMessage;
    NSString *_descriptionString;
    MFInvocationQueue *_ourQueue;
    double _percentDone;
    unsigned int _key:13;
    unsigned int _canCancel:1;
    unsigned int _shouldCancel:1;
    unsigned int _isActive:1;
    unsigned int _changeCount:8;
    id _delegate;
    id _target;
    MFError *_error;
    unsigned long long _expectedLength;
    unsigned long long _maxCount;
    unsigned long long _currentCount;
    double _currentItemPercentDone;
    unsigned int _supportsPerItemProgress:1;
    MFMailboxUid *_mailbox;
    double _lastTime;
    double _startTime;
    unsigned long long _gotNewMessagesState;
    unsigned long long _bytesRead;
    unsigned long long _bytesWritten;
    NSMutableSet *_reasons;
}

+ (void)destroyMonitor;
+ (id)currentMonitor;
@property(retain) MFMailboxUid *mailbox; // @synthesize mailbox=_mailbox;
- (unsigned long long)bytesWritten;
- (unsigned long long)bytesRead;
- (void)recordBytesWritten:(unsigned long long)arg1;
- (void)recordBytesRead:(unsigned long long)arg1;
- (void)resetConnectionStats;
- (void)setError:(id)arg1;
- (id)error;
- (void)setPercentDone:(double)arg1 withKey:(int)arg2;
- (void)setStatusMessage:(id)arg1 withKey:(int)arg2;
- (void)setStatusMessage:(id)arg1 percentDone:(double)arg2 withKey:(int)arg3;
- (void)relinquishExclusiveAccessKey:(int)arg1;
- (int)acquireExclusiveAccessKey;
- (void)setInvocationQueue:(id)arg1;
- (void)cancel;
- (void)setShouldCancel:(_Bool)arg1;
- (_Bool)shouldCancel;
- (void)setCanBeCancelled:(_Bool)arg1;
- (_Bool)canBeCancelled;
- (id)activityTargets;
- (id)primaryTarget;
- (void)setPrimaryTarget:(id)arg1;
- (void)removeActivityTarget:(id)arg1;
- (void)addActivityTargets:(id)arg1;
- (void)addActivityTarget:(id)arg1;
- (_Bool)_lockedAddActivityTarget:(id)arg1;
- (id)activityTarget;
- (void)setActivityTarget:(id)arg1;
- (void)setDisplayName:(id)arg1;
- (void)setDisplayName:(id)arg1 maxCount:(unsigned long long)arg2;
- (id)displayName;
- (void)setTaskName:(id)arg1;
- (id)taskName;
- (id)description;
- (unsigned long long)expectedLength;
- (void)setExpectedLength:(unsigned long long)arg1;
- (double)startTime;
- (double)percentDone;
- (void)setPercentDone:(double)arg1;
- (id)statusMessage;
- (void)setStatusMessage:(id)arg1 percentDone:(double)arg2;
- (void)setStatusMessage:(id)arg1;
- (int)changeCount;
- (id)reasons;
- (_Bool)hasReason:(id)arg1;
- (void)addReason:(id)arg1;
- (unsigned long long)gotNewMessagesState;
- (void)setGotNewMessagesState:(unsigned long long)arg1;
- (void)reset;
- (void)setPercentDoneOfCurrentItem:(double)arg1;
- (id)_ntsThrottledUserInfoDict;
- (void)setSupportsPerItemProgress:(_Bool)arg1;
- (void)setCurrentCount:(unsigned long long)arg1;
- (void)setMaxCount:(unsigned long long)arg1;
- (void)_didChange;
- (void)postDidChangeWithUserInfo:(id)arg1;
- (id)userInfoForNotification;
- (void)notifyConnectionEstablished;
- (void)finishedActivity:(id)arg1;
- (void)startActivity;
- (void)postActivityFinished:(id)arg1;
- (void)postActivityStarting;
- (void)cancelMessage;
- (void)setDelegate:(id)arg1;
- (_Bool)isActive;
- (void)dealloc;
- (id)init;

@end

@interface MFAttachment : NSObject <QLPreviewItem>
{
    NSMutableDictionary *_metadata;
    MFAttachmentManager *_attachmentManager;
    _Bool _isDataAvailableLocally;
    _Bool _isUserFacing;
    NSURL *_url;
    MFMimePart *_part;
    NSString *_disposition;
    unsigned long long _encodedFileSize;
    unsigned long long _progressInterval;
    double _progressTimeInterval;
    CDUnknownBlockType _fetchCompletionBlock;
    CDUnknownBlockType _fetchProgressBlock;
    id <MFDataConsumer> _customConsumer;
    unsigned long long _lastProgressBytes;
    double _lastProgressTime;
}

@property(nonatomic) double lastProgressTime; // @synthesize lastProgressTime=_lastProgressTime;
@property(nonatomic) unsigned long long lastProgressBytes; // @synthesize lastProgressBytes=_lastProgressBytes;
@property(nonatomic) MFAttachmentManager *attachmentManager; // @synthesize attachmentManager=_attachmentManager;
@property(nonatomic) _Bool isUserFacing; // @synthesize isUserFacing=_isUserFacing;
@property(retain, nonatomic) id <MFDataConsumer> customConsumer; // @synthesize customConsumer=_customConsumer;
@property(copy) CDUnknownBlockType fetchProgressBlock; // @synthesize fetchProgressBlock=_fetchProgressBlock;
@property(copy, nonatomic) CDUnknownBlockType fetchCompletionBlock; // @synthesize fetchCompletionBlock=_fetchCompletionBlock;
@property(nonatomic) double progressTimeInterval; // @synthesize progressTimeInterval=_progressTimeInterval;
@property(nonatomic) unsigned long long progressInterval; // @synthesize progressInterval=_progressInterval;
@property(nonatomic) unsigned long long encodedFileSize; // @synthesize encodedFileSize=_encodedFileSize;
@property(copy, nonatomic) NSString *disposition; // @synthesize disposition=_disposition;
@property(retain, nonatomic) MFMimePart *part; // @synthesize part=_part;
@property(copy, nonatomic) NSURL *url; // @synthesize url=_url;
- (id)textEncodingGuessWithData:(id)arg1;
- (id)textEncodingNameForData:(id)arg1 mimeType:(id)arg2;
- (id)readFromDisk;
- (void)writeToDiskWithData:(id)arg1;
- (id)fileAttributes;
- (id)storageLocationWithMessage:(id)arg1;
@property(nonatomic) unsigned long long decodedFileSize;
@property(copy, nonatomic) NSString *mimeType;
- (void)setContentID:(id)arg1;
@property(readonly) NSString *contentID;
@property(nonatomic) unsigned long long setupComplete;
@property(copy, nonatomic) NSString *path;
@property(retain, nonatomic) NSString *fileName;
- (_Bool)isImageFile;
@property(readonly) _Bool isContainedInCompose;
@property(readonly) _Bool isContainedInRFC822;
@property(readonly) NSString *previewItemTitle;
@property(readonly) NSURL *previewItemURL;
@property(readonly) NSString *inferredMimeType;
@property(readonly) _Bool shouldAutoDownload;
@property(readonly) unsigned long long maxSizeAllowedOverCurrentNetwork;
@property(readonly) _Bool isDataAvailableLocally;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (void)cancel;
- (id)fetchDataSynchronously:(id *)arg1 stripPrivateMetadata:(_Bool)arg2;
- (id)fetchDataSynchronously:(id *)arg1;
- (id)fetchLocalData:(id *)arg1 stripPrivateMetadata:(_Bool)arg2;
- (id)fetchLocalData;
- (void)fetchData;
- (id)decodeFilterWithDataConsumer:(id)arg1;
- (void)setMetadataValue:(id)arg1 forKey:(id)arg2;
- (id)metadataValueForKey:(id)arg1;
- (id)initWithURL:(id)arg1 attachmentManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFAttachmentManager : NSObject
{
    NSObject<OS_dispatch_queue> *_arrayAccessQueue;
    MFInvocationQueue *_attachmentInvocationQueue;
    NSMutableDictionary *_providers;
    NSMutableDictionary *_attachments;
    NSMutableDictionary *_metadata;
    NSLock *_metaDataLock;
    NSObject<OS_dispatch_queue> *_imageScalingQueue;
}

+ (id)defaultManager;
+ (id)allManagers;
- (void)clearMetadataForAttachment:(id)arg1;
- (id)metadataForAttachment:(id)arg1 forKey:(id)arg2;
- (void)setMetadataForAttachment:(id)arg1 toValue:(id)arg2 forKey:(id)arg3;
- (id)_contentIDForAttachment:(id)arg1;
- (void)setContentIDForAttachment:(id)arg1 toCID:(id)arg2;
- (void)recordUndoAttachmentsForURLs:(id)arg1 forContextID:(id)arg2;
- (void)recordPasteboardAttachmentsForURLs:(id)arg1 forContextID:(id)arg2;
- (void)removeAttachmentForURL:(id)arg1;
- (void)updateAttachment:(id)arg1 withNewData:(id)arg2;
- (id)attachmentForData:(id)arg1 mimeType:(id)arg2 fileName:(id)arg3 contentID:(id)arg4 context:(id)arg5;
- (void)cancelFetchForAttachment:(id)arg1;
- (void)_fetchCompletedForAttachment:(id)arg1 error:(id)arg2;
- (void)_callProgressBlockForAttachmentURL:(id)arg1 withBytes:(unsigned long long)arg2 expectedSize:(unsigned long long)arg3;
- (void)fetchDataSynchronouslyForAttachment:(id)arg1;
- (void)fetchDataForAttachment:(id)arg1;
- (id)_fetchDataForAttachment:(id)arg1 withProvider:(id)arg2;
- (void)_fetchInvocationCallUsingBlock:(CDUnknownBlockType)arg1;
- (id)attachmentsForContext:(id)arg1;
- (id)attachmentForCID:(id)arg1;
- (id)attachmentsForTextAttachments:(id)arg1 error:(id *)arg2;
- (id)attachmentForTextAttachment:(id)arg1 error:(id *)arg2;
- (id)attachmentsForURLs:(id)arg1 error:(id *)arg2;
- (id)attachmentForURL:(id)arg1 withMimeBody:(id)arg2 error:(id *)arg3;
- (id)attachmentForURL:(id)arg1 error:(id *)arg2;
- (id)_dataProviderForAttachmentURL:(id)arg1 error:(id *)arg2;
- (void)updatePathWithCurrentFileNameForAttachment:(id)arg1;
- (_Bool)_setupAttachment:(id)arg1 withMimeBody:(id)arg2 error:(id *)arg3;
- (_Bool)_setupAttachment:(id)arg1 error:(id *)arg2;
- (id)imageScalingQueue;
- (void)removeProvider:(id)arg1;
- (void)removeProviderForBaseURL:(id)arg1;
- (void)addProvider:(id)arg1 forBaseURL:(id)arg2;
- (void)dealloc;
- (id)init;

@end

@interface MFAttachmentComposeManager : MFAttachmentManager
{
    NSMutableArray *_composeAttachments;
}

- (void)recordUndoAttachmentsForURLs:(id)arg1 forContextID:(id)arg2;
- (void)recordPasteboardAttachmentsForURLs:(id)arg1 forContextID:(id)arg2;
- (void)removeAttachmentForURL:(id)arg1;
- (void)updateAttachment:(id)arg1 withNewData:(id)arg2;
- (id)attachmentForData:(id)arg1 mimeType:(id)arg2 fileName:(id)arg3 contentID:(id)arg4 context:(id)arg5;
- (id)_composeAttachmentDataProviderForContext:(id)arg1;
- (id)attachmentsForContext:(id)arg1;
- (id)_fetchDataForAttachment:(id)arg1 withProvider:(id)arg2;
- (void)dealloc;

@end

@interface MFAttachmentLibraryDataProvider : NSObject <MFAttachmentDataProvider>
{
    MFWeakReferenceHolder *_messageLibraryHolder;
}

- (id)messageForAttachment:(id)arg1;
- (_Bool)fetchDataForAttachment:(id)arg1 withDataConsumer:(id)arg2 error:(id *)arg3;
- (id)fetchLocalDataForAttachment:(id)arg1;
@property(nonatomic) __weak MFMessageLibrary *messageLibrary;
- (void)dealloc;
- (id)initWithLibrary:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFAttachmentLibraryManager : MFAttachmentComposeManager
{
}

- (void)removeProviderForBaseURL:(id)arg1;
- (id)_dataProviderForAttachmentURL:(id)arg1 error:(id *)arg2;
- (id)initWithPrimaryLibrary:(id)arg1;

@end

@interface MFAuthScheme : NSObject
{
}

+ (id)authSchemesForAccount:(id)arg1 connection:(id)arg2;
+ (id)schemeWithName:(id)arg1;
+ (void)registerSchemeClass:(Class)arg1;
+ (id)knownSchemes;
+ (void)initialize;
- (id)humanReadableName;
- (id)name;
- (_Bool)requiresPassword;
- (id)authenticatorForAccount:(id)arg1 connection:(id)arg2;
- (_Bool)canAuthenticateAccountClass:(Class)arg1 connection:(id)arg2;
- (_Bool)hasEncryption;
- (unsigned int)defaultPortForAccount:(id)arg1;
- (Class)authenticatorClass;
- (Class)connectionClassForAccountClass:(Class)arg1;

@end

@interface MFBasicMessageDataSection : NSObject <MFMessageDataSection>
{
    NSData *_data;
    _Bool _complete;
    _Bool _partial;
    NSString *_partName;
}

@property(retain, nonatomic) NSString *partName; // @synthesize partName=_partName;
@property(nonatomic, getter=isComplete) _Bool complete; // @synthesize complete=_complete;
@property(nonatomic, getter=isPartial) _Bool partial; // @synthesize partial=_partial;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
- (void)dealloc;

@end

@interface MFBufferedQueue : NSObject
{
    unsigned int _maximumSize;
    double _maximumLatency;
    double _timeOfLastFlush;
    NSMutableArray *_queue;
    unsigned int _currentSize;
}

@property(nonatomic) double maximumLatency; // @synthesize maximumLatency=_maximumLatency;
@property(nonatomic) unsigned int maximumSize; // @synthesize maximumSize=_maximumSize;
@property(readonly, nonatomic) unsigned int size; // @synthesize size=_currentSize;
- (_Bool)handleItems:(id)arg1;
- (unsigned long long)sizeForItem:(id)arg1;
- (_Bool)isEmpty;
- (_Bool)flushIfNecessary;
- (_Bool)flush;
- (_Bool)_flush;
- (void)removeAllObjects;
- (_Bool)addItem:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithMaximumSize:(unsigned int)arg1 latency:(double)arg2;

@end

@interface MFCRAM_MD5AuthScheme : MFAuthScheme
{
}

- (_Bool)canAuthenticateAccountClass:(Class)arg1 connection:(id)arg2;
- (_Bool)hasEncryption;
- (_Bool)sendsPlainTextPasswords;
- (id)humanReadableName;
- (id)name;
- (Class)authenticatorClass;

@end

@interface MFSASLAuthenticator : NSObject
{
    MFConnection *_connection;
    MFAuthScheme *_authScheme;
    MFAccount *_account;
    int _authenticationState;
}

- (void)setMissingPasswordError;
- (_Bool)couldRetry;
- (_Bool)base64EncodeResponseData;
- (_Bool)isUsingSSL;
- (id)securityLayer;
- (_Bool)justSentPlainTextPassword;
- (void)setAuthenticationState:(int)arg1;
- (int)authenticationState;
- (id)responseForServerData:(id)arg1;
- (_Bool)supportsInitialClientResponse;
- (id)saslName;
- (id)account;
- (id)authScheme;
- (void)dealloc;
- (id)initWithAuthScheme:(id)arg1 account:(id)arg2 connection:(id)arg3;

@end

@interface MFCRAM_MD5Authenticator : MFSASLAuthenticator
{
}

- (id)responseForServerData:(id)arg1;

@end

@interface MFComposeAttachmentDataProvider : NSObject <MFAttachmentDataProvider>
{
    NSMutableDictionary *_attachments;
    NSMutableDictionary *_attachmentsPasteboard;
    NSMutableDictionary *_attachmentsUndo;
}

- (id)messageForAttachment:(id)arg1;
- (_Bool)fetchDataForAttachment:(id)arg1 withDataConsumer:(id)arg2 error:(id *)arg3;
- (id)fetchLocalDataForAttachment:(id)arg1;
- (id)_dataForAttachment:(id)arg1;
- (void)recordUndoDataForAttachments:(id)arg1;
- (void)recordPasteboardDataForAttachments:(id)arg1;
- (void)removeDataForAttachment:(id)arg1;
- (void)addData:(id)arg1 forContentID:(id)arg2;
- (void)dealloc;
- (id)initWithData:(id)arg1 forContentID:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFConnection : NSObject
{
    id <MFSASLSecurityLayer> _securityLayer;
    _MFSocket *_socket;
    double _lastUsedTime;
    char *_buffer;
    long long _bufferRemainingBytes;
    unsigned long long _bufferStart;
    unsigned long long _bufferLength;
    unsigned long long _desiredBufferLength;
    struct z_stream_s *_deflater;
    struct z_stream_s *_inflater;
    char *_zbuffer;
    NSData *_logData;
    unsigned int _dontLogReads;
    unsigned int _readBytesNotLogged;
    NSMutableString *_readBytesToLog;
    unsigned int _isFetching:1;
    unsigned int _allowFallbacks:1;
    unsigned int _compressionEnabled:1;
}

+ (_Bool)shouldTryFallbacksAfterError:(id)arg1;
+ (void)setLogActivityOnHosts:(id)arg1;
+ (id)logActivityOnHosts;
+ (void)setLogActivityOnPorts:(id)arg1;
+ (id)logActivityOnPorts;
+ (void)setLogAllSocketActivity:(_Bool)arg1;
+ (_Bool)logAllSocketActivity;
+ (void)setLogClasses:(id)arg1;
+ (id)logClasses;
+ (void)flushLog;
+ (void)logBytes:(const char *)arg1 length:(int)arg2;
+ (void)initialize;
+ (void)readLoggingDefaults;
@property(readonly, nonatomic) double lastUsedTime;
@property(readonly, nonatomic) _Bool hasBytesAvailable;
- (void)disconnect;
@property(readonly, nonatomic) _Bool isValid;
- (_Bool)startCompression;
@property(readonly, nonatomic) NSString *securityProtocol;
- (_Bool)startTLSForAccount:(id)arg1;
- (_Bool)authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (_Bool)readBytesIntoData:(id)arg1 desiredLength:(unsigned long long)arg2;
- (_Bool)readLineIntoData:(id)arg1;
- (void)logReadChars:(const char *)arg1 length:(unsigned long long)arg2;
- (void)enableThroughputMonitoring:(_Bool)arg1;
- (void)enableReadLogging:(_Bool)arg1;
- (void)setDesiredReadBufferLength:(unsigned long long)arg1;
- (_Bool)writeData:(id)arg1;
- (_Bool)writeData:(id)arg1 dontLogBytesInRange:(struct _NSRange)arg2;
- (_Bool)writeBytes:(const char *)arg1 length:(unsigned long long)arg2 dontLogBytesInRange:(struct _NSRange)arg3;
@property(readonly, nonatomic) _Bool usesOpportunisticSockets;
@property(readonly, nonatomic) _Bool loginDisabled;
@property(readonly, nonatomic) NSArray *authenticationMechanisms;
@property(readonly, nonatomic) NSArray *capabilities;
- (_Bool)authenticateUsingAccount:(id)arg1;
- (void)setAllowsFallbacks:(_Bool)arg1;
- (_Bool)connectUsingFallbacksForAccount:(id)arg1;
- (_Bool)connectUsingAccount:(id)arg1;
- (_Bool)connectUsingSettings:(id)arg1;
- (void)_setupNetworkLogging;
@property(nonatomic) _Bool isFetching;
@property(readonly, nonatomic) _Bool isCellularConnection;
- (id)description;
- (void)dealloc;

@end

@interface MFConnectionSettings : NSObject <NSCopying>
{
    NSString *_hostname;
    NSString *_serviceName;
    NSString *_certUIService;
    NSArray *_clientCertificates;
    unsigned int _portNumber;
    struct __CFString *_connectionServiceType;
    _Bool _usesSSL;
    _Bool _usesOpportunisticSockets;
    _Bool _tryDirectSSLConnection;
    _Bool _allowsTrustPrompt;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_accountIdentifier;
}

@property(nonatomic) _Bool allowsTrustPrompt; // @synthesize allowsTrustPrompt=_allowsTrustPrompt;
@property(nonatomic) _Bool usesOpportunisticSockets; // @synthesize usesOpportunisticSockets=_usesOpportunisticSockets;
@property(nonatomic) _Bool usesSSL; // @synthesize usesSSL=_usesSSL;
@property(nonatomic) unsigned int portNumber; // @synthesize portNumber=_portNumber;
@property(copy, nonatomic) NSString *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(copy, nonatomic) NSArray *clientCertificates; // @synthesize clientCertificates=_clientCertificates;
@property(copy, nonatomic) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property(copy, nonatomic) NSString *hostname; // @synthesize hostname=_hostname;
@property(copy, nonatomic) NSString *certUIService; // @synthesize certUIService=_certUIService;
@property(nonatomic) _Bool tryDirectSSL; // @synthesize tryDirectSSL=_tryDirectSSLConnection;
- (id)description;
- (void)setConnectionServiceType:(struct __CFString *)arg1;
- (struct __CFString *)connectionServiceType;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface MFCountryConfiguration : NSObject
{
    int _lock;
    NSConditionLock *_generatorLock;
    NSString *_lastCountryCode;
    NSString *_countryCode;
}

+ (id)sharedConfiguration;
- (id)_countryCodeWithGenerator:(CDUnknownBlockType)arg1;
- (id)_networkCountryCode;
- (id)_cellSimCountryCode;
- (void)updateCurrentCountry;
@property(readonly, copy, nonatomic) NSString *countryCode;
- (void)invalidate;
- (void)dealloc;
- (id)init;

@end

@interface MFOfflineCacheOperation : NSObject <NSCoding>
{
    long long _rowid;
}

@property(nonatomic) long long rowid; // @synthesize rowid=_rowid;
- (_Bool)hasRowid;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface MFDADeferredMessageMoveOperation : MFOfflineCacheOperation <MFDAOfflineCacheOperation>
{
    NSArray *_sourceRemoteIDs;
    NSArray *_originalFlags;
    NSArray *_temporaryRemoteIDs;
    NSString *_sourceMailboxID;
    NSString *_destinationMailboxID;
}

- (id)description;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMessages:(id)arg1 temporaryIDs:(id)arg2 sourceMailbox:(id)arg3 destinationMailbox:(id)arg4;

@end

@interface MFMailDelivery : NSObject
{
    id _delegate;
    MFMessage *_message;
    MailAccount *_archiveAccount;
    DeliveryAccount *_account;
    MFDeliveryResult *_result;
    MFMutableMessageHeaders *_headers;
    NSDictionary *_compositionSpecification;
    NSArray *_mixedContent;
    _Bool _textPartsAreHTML;
    NSString *_htmlString;
    MFPlainTextDocument *_plainTextAlternative;
    NSArray *_otherStringsAndAttachments;
    NSArray *_charsets;
    unsigned int _threaded:1;
    unsigned int _useCellDataOnly:1;
    _Bool _isUserRequested;
    unsigned long long _conversationFlags;
}

+ (_Bool)deliverMessage:(id)arg1;
+ (id)newWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
+ (id)newWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;
+ (id)newWithMessage:(id)arg1;
@property(nonatomic) _Bool isUserRequested; // @synthesize isUserRequested=_isUserRequested;
@property(nonatomic) unsigned long long conversationFlags; // @synthesize conversationFlags=_conversationFlags;
@property(retain, nonatomic) NSDictionary *compositionSpecification; // @synthesize compositionSpecification=_compositionSpecification;
- (void)archive;
- (void)setCellDataOnly:(_Bool)arg1;
- (id)deliverMessageData:(id)arg1 toRecipients:(id)arg2;
- (id)deliverSynchronously;
- (void)deliverAsynchronously;
- (_Bool)shouldEncryptMessage;
- (_Bool)shouldSignMessage;
- (id)headersForDelivery;
- (id)originalHeaders;
- (id)deliveryResult;
- (int)deliveryStatus;
- (void)setAccount:(id)arg1;
- (id)account;
- (void)setArchiveAccount:(id)arg1;
- (id)archiveAccount;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)message;
- (id)newMessageWriter;
- (void)dealloc;
- (id)initWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
- (id)initWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;
- (id)initWithMessage:(id)arg1;

@end

@interface MFDADelivery : MFMailDelivery
{
    DAMailAccount *_DAMailAccount;
    NSString *_folderId;
    NSString *_accountId;
    NSString *_repliedMessageId;
    NSString *_forwardedMessageId;
    NSString *_repliedLongId;
    NSString *_forwardedLongId;
}

- (id)deliverSynchronously;
- (id)newMessageWriter;
- (void)setDAMailAccount:(id)arg1;
- (void)dealloc;
- (id)initWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
- (id)initWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;

@end

@interface MFDAMailAccountConsumer : NSObject <DAActionConsumer>
{
    NSConditionLock *_doneCondition;
    _Bool _shouldRetryRequest;
    _Bool _alwaysReportFailures;
}

- (void)dealloc;
- (_Bool)shouldRetryRequest;
- (void)taskFailed:(id)arg1 statusCode:(long long)arg2 error:(id)arg3;
- (void)actionFailed:(long long)arg1 forTask:(id)arg2 error:(id)arg3;
- (void)waitUntilDone;
- (_Bool)waitUntilDoneBeforeDate:(id)arg1;
- (void)setDone:(_Bool)arg1;
- (id)initWithAlwaysReportFailures:(_Bool)arg1;
- (id)init;

@end

@interface MFDADeliveryConsumer : MFDAMailAccountConsumer <DAMessageSendConsumer>
{
    MFError *_error;
    int _status;
    unsigned long long _bytesRead;
    unsigned long long _bytesWritten;
}

@property(readonly, nonatomic) unsigned long long bytesWritten; // @synthesize bytesWritten=_bytesWritten;
@property(readonly, nonatomic) unsigned long long bytesRead; // @synthesize bytesRead=_bytesRead;
@property(readonly, nonatomic) int status; // @synthesize status=_status;
@property(retain, nonatomic) MFError *error; // @synthesize error=_error;
- (void)dealloc;
- (void)actionFailed:(long long)arg1 forTask:(id)arg2 error:(id)arg3;
- (void)messageDidSendWithContext:(id)arg1 sentBytesCount:(unsigned long long)arg2 receivedBytesCount:(unsigned long long)arg3;

@end

@interface MFDAFolderChangeConsumer : NSObject <DAFolderChangeConsumer>
{
    MFConditionLock *_conditionLock;
    MFDAFolderChangeResult *_result;
}

- (id)waitForResult;
- (void)folderChange:(id)arg1 finishedWithStatus:(long long)arg2 error:(id)arg3;
- (void)dealloc;
- (id)init;

@end

@interface MFDAFolderChangeResult : NSObject
{
    NSError *_error;
    NSString *_folderID;
    NSString *_folderName;
    long long _statusCode;
}

@property(readonly) NSString *folderName; // @synthesize folderName=_folderName;
@property(readonly) NSString *folderID; // @synthesize folderID=_folderID;
@property(readonly) NSError *error; // @synthesize error=_error;
@property(readonly) long long statusCode; // @synthesize statusCode=_statusCode;
- (id)description;
- (_Bool)wasSuccessful;
- (void)dealloc;
- (id)initWithStatusCode:(long long)arg1 error:(id)arg2 folderID:(id)arg3 folderName:(id)arg4;

@end

@interface MFDAMailAccountSyncConsumer : MFDAMailAccountConsumer <DAMailboxRequestConsumer, DAMailboxStreamingContentConsumer>
{
    NSArray *_requests;
    NSArray *_consumers;
    NSString *_tag;
    NSString *_accountID;
    MFActivityMonitor *_monitor;
    id _streamConsumer;
    NSMutableData *_bodyData;
    _Bool _moreAvailable;
    _Bool _receivedFirstItem;
    _Bool _firstSyncBatch;
    int _syncKeyResets;
    int _serverErrors;
}

@property(readonly, nonatomic) _Bool moreAvailable; // @synthesize moreAvailable=_moreAvailable;
@property(retain, nonatomic) id streamConsumer; // @synthesize streamConsumer=_streamConsumer;
@property(readonly, nonatomic) NSString *tag; // @synthesize tag=_tag;
- (void)taskFailed:(id)arg1 statusCode:(long long)arg2 error:(id)arg3;
- (void)didEndStreamingForMailMessage:(id)arg1;
- (void)consumeData:(char *)arg1 length:(int)arg2 format:(int)arg3 mailMessage:(id)arg4;
- (_Bool)shouldBeginStreamingForMailMessage:(id)arg1 format:(int)arg2;
- (void)resultsForMailbox:(id)arg1 newTag:(id)arg2 actions:(id)arg3 responses:(id)arg4 percentComplete:(double)arg5 moreAvailable:(_Bool)arg6 sentBytesCount:(unsigned long long)arg7 receivedBytesCount:(unsigned long long)arg8;
- (void)partialResultsForMailbox:(id)arg1 actions:(id)arg2 responses:(id)arg3 percentComplete:(double)arg4 moreAvailable:(_Bool)arg5;
- (void)handleSyncResponses:(id)arg1;
- (id)actionsConsumer;
- (id)originalThreadMonitor;
- (void)_setTag:(id)arg1;
- (void)reset;
- (void)dealloc;
- (id)initWithCurrentTag:(id)arg1 accountID:(id)arg2 requests:(id)arg3 consumers:(id)arg4;

@end

@interface MFMailboxUid : NSObject <NSCopying>
{
    NSString *uniqueId;
    unsigned int _mailboxID;
    MFWeakReferenceHolder *_account;
    NSString *_pathComponent;
    unsigned int _attributes;
    MFWeakReferenceHolder *_parent;
    NSMutableArray *_children;
    MailAccount *_representedAccount;
    MFMessageCriterion *_criterion;
    _Bool allCriteriaMustBeSatisfied;
    NSString *_realFullPath;
    NSArray *_extraAttributes;
    NSNumber *_pendingLevel;
    int _type;
    NSMutableDictionary *_userInfo;
    NSString *_permanentTag;
}

+ (_Bool)isSentMailboxType:(int)arg1;
+ (_Bool)isDraftsMailboxType:(int)arg1;
+ (_Bool)isOutgoingMailboxType:(int)arg1;
+ (_Bool)isSpecialMailboxUidType:(int)arg1;
+ (id)specialNameForType:(int)arg1;
@property(retain, nonatomic) NSString *permanentTag; // @synthesize permanentTag=_permanentTag;
@property(retain, nonatomic) NSArray *extraAttributes; // @synthesize extraAttributes=_extraAttributes;
- (void)addToPostOrderTraversal:(id)arg1;
- (void)setLastViewedMessageID:(id)arg1;
- (id)lastViewedMessageDate;
- (id)lastViewedMessageID;
- (_Bool)alwaysWriteFullMessageFile;
- (_Bool)shouldRestoreMessagesAfterFailedDelete;
- (_Bool)isSelectable;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)store;
- (void)setCriterion:(id)arg1;
- (id)criterion;
- (id)ancestralAccount;
- (id)userInfoForSerialization;
- (void)setUserInfoWithDictionary:(id)arg1;
- (id)userInfoDictionary;
- (_Bool)mergeWithUserInfo:(id)arg1;
- (void)saveUserInfo;
- (void)setUserInfoBool:(_Bool)arg1 forKey:(id)arg2;
- (_Bool)userInfoBoolForKey:(id)arg1;
- (void)setUserInfoObject:(id)arg1 forKey:(id)arg2;
- (id)userInfoObjectForKey:(id)arg1;
- (id)_loadUserInfo;
- (_Bool)isVisible;
- (void)setType:(int)arg1;
- (int)type;
- (id)description;
- (_Bool)isDescendantOfMailbox:(id)arg1;
- (long long)indexToInsertChildMailboxUid:(id)arg1;
- (long long)compareWithMailboxUid:(id)arg1;
- (id)URLStringNonNil;
- (unsigned int)mailboxID;
- (id)URLString;
- (id)oldURLString;
- (id)URLStringWithAccount:(id)arg1;
- (id)URL;
- (id)pathRelativeToMailboxForDisplay:(id)arg1;
- (id)pathRelativeToMailbox:(id)arg1;
- (id)tildeAbbreviatedPath;
- (id)realFullPath;
- (id)fullPath;
- (id)accountRelativePath;
- (_Bool)isOutgoingMailboxUid;
- (_Bool)isSpecialMailboxUid;
- (_Bool)isStore;
- (_Bool)isContainer;
- (void)invalidate;
- (_Bool)isValid;
- (id)account;
- (id)rootMailbox;
- (id)topMailbox;
- (id)representedAccount;
- (void)setRepresentedAccount:(id)arg1;
- (void)flushCriteria;
- (void)setParent:(id)arg1;
- (void)removeChild:(id)arg1;
- (id)parent;
- (void)sortChildren;
- (_Bool)setChildren:(id)arg1;
- (id)fullPathNonNil;
- (id)mutableCopyOfChildren;
- (id)descendantWithPermanentTag:(id)arg1;
- (id)descendantWithExtraAttribute:(id)arg1;
- (id)childWithPermanentTag:(id)arg1;
- (id)childWithExtraAttribute:(id)arg1;
- (id)childWithName:(id)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (id)childAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfDescendants;
- (unsigned long long)numberOfChildren;
- (id)depthFirstEnumerator;
- (id)childEnumeratorIncludingHiddenChildren:(_Bool)arg1;
- (id)childEnumerator;
- (_Bool)hasChildren;
- (id)_mutableChildren;
- (id)children;
- (unsigned long long)nonDeletedCount;
- (_Bool)setUnreadCount:(unsigned long long)arg1;
- (unsigned long long)unreadCountMatchingCriterion:(id)arg1;
- (unsigned long long)unreadCount;
- (unsigned long long)serverUnreadOnlyOnServerCount;
- (void)setAttributes:(unsigned int)arg1;
- (unsigned int)attributes;
- (void)setName:(id)arg1;
- (id)displayNameUsingSpecialNames;
- (id)name;
- (id)displayName;
- (id)uniqueId;
- (id)initWithName:(id)arg1 attributes:(unsigned int)arg2 forAccount:(id)arg3 permanentTag:(id)arg4;
- (id)initWithName:(id)arg1 attributes:(unsigned int)arg2 forAccount:(id)arg3 extraAttributes:(id)arg4;
- (id)_initWithName:(id)arg1 attributes:(unsigned int)arg2 forAccount:(id)arg3;
- (id)initWithAccount:(id)arg1;
- (id)init;
- (void)dealloc;

@end

@interface MFDAMailbox : MFMailboxUid
{
    NSString *_folderID;
}

- (id)description;
- (id)URLStringWithAccount:(id)arg1;
- (id)_folderID;
@property(copy) NSString *folderID;
- (_Bool)mergeWithUserInfo:(id)arg1;
- (void)dealloc;
- (id)initWithName:(id)arg1 attributes:(unsigned int)arg2 account:(id)arg3 folderID:(id)arg4;

@end

@interface MFMailMessage : MFMessage
{
    unsigned long long _messageFlags;
    unsigned char _subjectPrefixLength;
    unsigned long long _modSequenceNumber;
    MFMessageInfo *_info;
}

+ (unsigned int)displayablePriorityForPriority:(int)arg1;
+ (unsigned int)validatePriority:(int)arg1;
+ (Class)dataMessageStoreToUse;
+ (id)forwardedMessagePrefixWithSpacer:(_Bool)arg1;
- (void)dealloc;
- (id)externalConversationID;
- (id)copyMessageInfo;
- (_Bool)shouldSetSummary;
- (void)setSummary:(id)arg1;
- (void)setSubject:(id)arg1 to:(id)arg2 cc:(id)arg3 bcc:(id)arg4 sender:(id)arg5 dateReceived:(double)arg6 dateSent:(double)arg7 messageIDHash:(long long)arg8 conversationIDHash:(long long)arg9 summary:(id)arg10 withOptions:(unsigned int)arg11;
- (void)setMutableInfoFromMessage:(id)arg1;
- (unsigned short)numberOfAttachments;
- (id)URL;
- (id)originalMailboxURL;
- (void)setConversationFlags:(unsigned long long)arg1;
- (unsigned long long)conversationFlags;
- (id)remoteMailboxURL;
- (id)account;
- (id)loadMeetingMetadata;
- (id)loadMeetingData;
- (id)loadMeetingExternalID;
- (void)setSubject:(id)arg1;
- (id)subject;
- (id)subjectNotIncludingReAndFwdPrefix;
- (id)subjectAndPrefixLength:(unsigned int *)arg1;
- (id)mailbox;
- (void)markAsNotFlagged;
- (void)markAsFlagged;
- (void)markAsForwarded;
- (void)markAsReplied;
- (void)markAsNotViewed;
- (void)markAsViewed;
- (void)loadCachedHeaderValuesFromHeaders:(id)arg1;
- (int)priority;
- (void)setPriorityFromHeaders:(id)arg1;
- (void)setMessageFlagsWithoutCommitting:(unsigned long long)arg1;
- (void)setMessageFlags:(unsigned long long)arg1;
- (unsigned long long)messageFlags;
@property unsigned long long modSequenceNumber;
- (id)mailMessageStore;
- (id)messageStore;

@end

@interface MFDAMessage : MFMailMessage
{
    DAMailMessage *_DAMailMessage;
    MFMessage *_rfc822CreatedMessage;
    MFMailboxUid *_mailbox;
    NSString *_externalConversationID;
}

@property(readonly, nonatomic) DAMailMessage *DAMailMessage; // @synthesize DAMailMessage=_DAMailMessage;
- (unsigned long long)messageSize;
- (id)remoteMailboxURL;
- (_Bool)messageData:(id *)arg1 messageSize:(unsigned long long *)arg2 isComplete:(_Bool *)arg3 downloadIfNecessary:(_Bool)arg4;
- (id)messageBody;
- (unsigned long long)messageFlags;
- (id)headersIfAvailable;
- (id)headers;
- (id)mailbox;
- (id)externalConversationID;
- (id)remoteID;
- (void)dealloc;
- (id)initWithDAMailMessage:(id)arg1 mailbox:(id)arg2;

@end

@interface MFDAMessageContentConsumer : NSObject <MFDAStreamingContentConsumer>
{
    int _requestedFormat;
    id <MFCollectingDataConsumer> _dataConsumer;
    id <MFCollectingDataConsumer> _alternatePartConsumer;
    id <MFMessageDataConsumerFactory> _consumerFactory;
    _Bool _triedCreatingAlternatePartConsumer;
    _Bool _didBeginStreaming;
    _Bool _succeeded;
    NSMutableData *_bodyData;
    double _timeOfLastActivity;
    DAMailMessage *_message;
}

@property(readonly, nonatomic) double timeOfLastActivity; // @synthesize timeOfLastActivity=_timeOfLastActivity;
@property(nonatomic) int requestedFormat; // @synthesize requestedFormat=_requestedFormat;
@property(retain, nonatomic) id <MFMessageDataConsumerFactory> consumerFactory; // @synthesize consumerFactory=_consumerFactory;
@property(readonly, retain, nonatomic) NSMutableData *bodyData; // @synthesize bodyData=_bodyData;
@property(readonly, retain, nonatomic) DAMailMessage *message; // @synthesize message=_message;
@property(retain, nonatomic) id <MFCollectingDataConsumer> alternatePartConsumer; // @synthesize alternatePartConsumer=_alternatePartConsumer;
@property(retain, nonatomic) id <MFCollectingDataConsumer> dataConsumer; // @synthesize dataConsumer=_dataConsumer;
- (void)dealloc;
- (id)dataConsumerForPart:(id)arg1;
- (_Bool)didBeginStreaming;
- (_Bool)succeeded;
- (id)data;
- (void)didEndStreamingForMailMessage:(id)arg1;
- (void)consumeData:(char *)arg1 length:(int)arg2 format:(int)arg3 mailMessage:(id)arg4;
- (_Bool)shouldBeginStreamingForMailMessage:(id)arg1 format:(int)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFDAMessagePayloadFetchResponseImpl : NSObject <MFDAMessagePayloadFetchResponse>
{
    _Bool streaming;
    _Bool streamingDone;
    NSData *data;
}

- (void)dealloc;
- (id)data;
- (_Bool)streamingDone;
- (_Bool)streaming;
- (id)initWithData:(id)arg1 streaming:(_Bool)arg2 streamingDone:(_Bool)arg3;

@end

@interface MFMailMessageStore : MFMessageStore
{
    unsigned long long _state;
    struct {
        unsigned int isReadOnly:1;
        unsigned int hasUnsavedChangesToMessageData:1;
        unsigned int haveOpenLockFile:1;
        unsigned int compacting:1;
        unsigned int cancelInvalidation:1;
        unsigned int forceInvalidation:1;
        unsigned int isWritingChangesToDisk:1;
        unsigned int isTryingToClose:1;
        unsigned int compactOnClose:1;
        unsigned int reserved:23;
    } _flags;
    MFMailboxUid *_mailboxUid;
    MailAccount *_account;
    unsigned long long _deletedMessagesSize;
    unsigned long long _deletedMessageCount;
    unsigned long long _unreadMessageCount;
    unsigned long long _generationNumber;
    unsigned long long _lastFetchCount;
    MFActivityMonitor *_openMonitor;
}

+ (Class)headersClass;
+ (unsigned long long)copyMessages:(id)arg1 toMailbox:(id)arg2 markAsRead:(_Bool)arg3 deleteOriginals:(_Bool)arg4 isDeletion:(_Bool)arg5 unsuccessfulOnes:(id)arg6 newMessages:(id)arg7;
+ (unsigned long long)copyMessages:(id)arg1 toMailbox:(id)arg2 markAsRead:(_Bool)arg3 deleteOriginals:(_Bool)arg4 isDeletion:(_Bool)arg5 unsuccessfulOnes:(id)arg6;
+ (Class)classForMimePart;
+ (_Bool)storeAtPathIsWritable:(id)arg1;
+ (_Bool)createEmptyStoreForPath:(id)arg1;
+ (_Bool)createEmptyStoreIfNeededForPath:(id)arg1;
- (_Bool)_shouldChangeComponentMessageFlagsForMessage:(id)arg1;
- (_Bool)_shouldChangeComponentMessageFlags;
- (_Bool)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(_Bool)arg3;
- (void)messagesWereAdded:(id)arg1 earliestReceivedDate:(id)arg2;
- (void)updateMessages:(id)arg1 updateNumberOfAttachments:(_Bool)arg2;
- (void)_setFlagsForMessages:(id)arg1;
- (id)_setOrGetBody:(id)arg1 forMessage:(id)arg2 updateFlags:(_Bool)arg3;
- (void)updateBodyFlagsForMessage:(id)arg1 body:(id)arg2;
- (void)_rebuildTableOfContentsSynchronously;
- (id)_fetchHeaderDataForMessage:(id)arg1 downloadIfNecessary:(_Bool)arg2;
- (int)archiveDestination;
- (_Bool)shouldArchive;
- (_Bool)supportsArchiving;
- (_Bool)shouldDeleteInPlace;
- (_Bool)canDeleteMessage:(id)arg1;
- (_Bool)shouldSetSummaryForMessage:(id)arg1;
- (id)loadMeetingMetadataForMessage:(id)arg1;
- (id)loadMeetingDataForMessage:(id)arg1;
- (id)loadMeetingExternalIDForMessage:(id)arg1;
- (_Bool)shouldDownloadBodyDataForMessage:(id)arg1;
- (void)setLibrary:(id)arg1;
- (void)_flushAllMessageData;
- (void)close;
- (id)storeData:(id)arg1 forMimePart:(id)arg2 isComplete:(_Bool)arg3;
- (_Bool)setPreferredEncoding:(unsigned int)arg1 forMessage:(id)arg2;
- (long long)fetchMobileSynchronously:(unsigned long long)arg1;
- (long long)fetchMobileSynchronously:(unsigned long long)arg1 preservingUID:(id)arg2 options:(unsigned long long)arg3;
- (long long)fetchNumMessages:(unsigned long long)arg1 preservingUID:(id)arg2 options:(unsigned long long)arg3;
- (id)status;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(_Bool)arg2 isEncrypted:(_Bool)arg3 forMessage:(id)arg4;
- (void)setFlagsForAllMessagesFromDictionary:(id)arg1;
- (void)setFlagForAllMessages:(id)arg1 state:(_Bool)arg2;
- (void)setFlagsCancelled:(id)arg1 forMessages:(id)arg2;
- (id)willSetFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)setFlag:(id)arg1 state:(_Bool)arg2 forMessages:(id)arg3;
- (id)setFlagsLocallyFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (_Bool)hasCachedDataForMimePart:(id)arg1;
- (id)headerDataForMessage:(id)arg1 downloadIfNecessary:(_Bool)arg2;
- (id)uniqueRemoteIDsForMessages:(id)arg1;
- (id)lastViewedMessageDate;
- (id)lastViewedMessageWithOptions:(unsigned int)arg1;
- (id)messageForRemoteID:(id)arg1;
- (id)messageForMessageID:(id)arg1 options:(unsigned int)arg2;
- (unsigned long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2;
- (unsigned long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3;
- (unsigned long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4;
- (unsigned long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5;
- (_Bool)allowsAppend;
- (void)messagesWereDeleted:(id)arg1;
- (void)undeleteMessages:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(_Bool)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(_Bool)arg2;
- (void)doCompact;
- (_Bool)canCompact;
- (id)finishRoutingMessages:(id)arg1 routed:(id)arg2;
- (id)_defaultRouterDestination;
- (long long)fetchMessagesWithRemoteIDs:(id)arg1 andSetFlags:(unsigned long long)arg2;
- (long long)fetchMessagesWithMessageIDs:(id)arg1 andSetFlags:(unsigned long long)arg2;
- (_Bool)canFetchMessageIDs;
- (id)remoteIDsFromUniqueRemoteIDs:(id)arg1;
- (id)remoteIDsMatchingSearchText:(id)arg1 limit:(unsigned int)arg2 error:(id *)arg3;
- (id)remoteIDsMatchingCriterion:(id)arg1 limit:(unsigned int)arg2 error:(id *)arg3;
- (long long)fetchMessagesMatchingCriterion:(id)arg1 limit:(unsigned int)arg2;
- (_Bool)canFetchSearchResults;
- (id)copyMessagesWithRemoteIDs:(id)arg1 options:(unsigned int)arg2;
- (id)copyMessagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2;
- (id)copyMessagesMatchingText:(id)arg1 options:(unsigned int)arg2;
- (id)copyMessagesMatchingText:(id)arg1;
- (id)copyOfAllMessagesForBodyLoadingFromRowID:(unsigned int)arg1 limit:(unsigned int)arg2;
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;
- (id)mutableCopyOfAllMessages;
- (id)copyOfMessagesInRange:(struct _NSRange)arg1;
- (id)copyOfAllMessages;
- (unsigned long long)indexOfMessage:(id)arg1;
- (_Bool)hasMessageForAccount:(id)arg1;
- (unsigned long long)unreadCountMatchingCriterion:(id)arg1;
- (unsigned long long)unreadCount;
- (void)purgeMessagesBeyondLimit:(unsigned long long)arg1 keepingMessage:(id)arg2;
- (unsigned long long)fetchWindow;
- (unsigned long long)growFetchWindow;
- (void)invalidateFetchWindow;
- (_Bool)shouldGrowFetchWindow;
- (_Bool)hasMoreFetchableMessages;
- (unsigned long long)serverUnreadCount;
- (unsigned long long)serverUnreadOnlyOnServerCount;
- (unsigned long long)serverMessageCount;
- (unsigned long long)nonDeletedCountIncludingServerSearch:(_Bool)arg1 andThreadSearch:(_Bool)arg2;
- (unsigned long long)totalCount;
- (void)deletedCount:(unsigned long long *)arg1 andSize:(unsigned long long *)arg2;
- (void)updateUserInfoToLatestValues;
- (void)messagesWillBeCompacted:(id)arg1;
- (void)messagesWereCompacted:(id)arg1;
- (void)messagesWereAdded:(id)arg1;
- (void)structureDidChange;
- (void)allMessageFlagsDidChange:(id)arg1;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (_Bool)isDrafts;
- (id)description;
- (_Bool)isReadOnly;
- (id)displayName;
- (id)storePathRelativeToAccount;
- (_Bool)isOpened;
- (id)mailboxUid;
- (id)account;
- (void)writeUpdatedMessageDataToDisk;
- (void)cancelOpen;
- (void)didOpen;
- (void)openSynchronously;
- (void)openAsynchronously;
- (void)dealloc;
- (id)initWithMailboxUid:(id)arg1 readOnly:(_Bool)arg2;

@end

@interface MFLibraryStore : MFMailMessageStore
{
    MFMessageLibrary *_library;
    NSDate *_earliestReceivedDate;
    MFMessageCriterion *_criterion;
    unsigned long long _serverMessageCount;
    unsigned long long _fetchWindow;
}

+ (_Bool)storeAtPathIsWritable:(id)arg1;
+ (_Bool)createEmptyStoreForPath:(id)arg1;
+ (id)sharedInstanceIfExists;
+ (id)sharedInstance;
+ (id)storeWithMailbox:(id)arg1;
+ (id)storeWithCriterion:(id)arg1;
+ (unsigned int)defaultLoadOptions;
@property(retain, nonatomic) NSDate *earliestReceivedDate; // @synthesize earliestReceivedDate=_earliestReceivedDate;
- (_Bool)hasCompleteDataForMimePart:(id)arg1;
- (void)_queueMessagesWereCompacted:(id)arg1;
- (void)_queueMessagesWillBeCompacted:(id)arg1;
- (void)_queueMessageFlagsChanged:(id)arg1;
- (void)_queueMessagesAdded:(id)arg1;
- (_Bool)hasMessageForAccount:(id)arg1;
- (void)purgeMessagesBeyondLimit:(unsigned long long)arg1 keepingMessage:(id)arg2;
- (void)purgeMessages:(id)arg1;
- (id)_cachedHeaderDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyDataContainerForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (void)_flushAllCaches;
- (unsigned long long)unreadCountMatchingCriterion:(id)arg1;
- (unsigned long long)unreadCount;
- (unsigned long long)serverUnreadOnlyOnServerCount;
- (id)URLString;
- (id)criterion;
- (void)_setNeedsAutosave;
- (void)updateUserInfoToLatestValues;
- (void)updateMetadata;
- (void)writeUpdatedMessageDataToDisk;
- (id)dataPathForMessage:(id)arg1 part:(id)arg2;
- (void)compactMessages:(id)arg1;
- (void)doCompact;
- (_Bool)canCompact;
- (unsigned long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5;
- (_Bool)allowsAppend;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(_Bool)arg2 isEncrypted:(_Bool)arg3 forMessage:(id)arg4;
- (void)setFlagsForAllMessagesFromDictionary:(id)arg1;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)setFlagsLocallyFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(_Bool)arg2;
- (void)deleteMessages:(id)arg1 moveToTrash:(_Bool)arg2;
- (unsigned long long)indexOfMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 isComplete:(_Bool *)arg2 isPartial:(_Bool *)arg3 downloadIfNecessary:(_Bool)arg4;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 isComplete:(_Bool *)arg3 downloadIfNecessary:(_Bool)arg4 didDownload:(_Bool *)arg5;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 isComplete:(_Bool *)arg3 downloadIfNecessary:(_Bool)arg4 usePartDatas:(_Bool)arg5 didDownload:(_Bool *)arg6;
- (id)_copyDataFromMimePart:(id)arg1 threshold:(unsigned int)arg2 downloadIfNecessary:(_Bool)arg3;
- (id)storeData:(id)arg1 forMimePart:(id)arg2 isComplete:(_Bool)arg3;
- (_Bool)dataForMimePart:(id)arg1 inRange:(struct _NSRange)arg2 isComplete:(_Bool *)arg3 withConsumer:(id)arg4 downloadIfNecessary:(_Bool)arg5 didDownload:(_Bool *)arg6;
- (id)dataForMimePart:(id)arg1 inRange:(struct _NSRange)arg2 isComplete:(_Bool *)arg3 downloadIfNecessary:(_Bool)arg4 didDownload:(_Bool *)arg5;
- (_Bool)_fetchDataForMimePart:(id)arg1 range:(struct _NSRange)arg2 isComplete:(_Bool *)arg3 consumer:(id)arg4;
- (id)_fetchFullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 downloadIfNecessary:(_Bool)arg3 didDownload:(_Bool *)arg4;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 downloadIfNecessary:(_Bool)arg3 partial:(_Bool *)arg4;
- (id)_fetchHeaderDataForMessage:(id)arg1 downloadIfNecessary:(_Bool)arg2;
- (_Bool)bodyFetchRequiresNetworkActivity;
- (id)messageForMessageID:(id)arg1 options:(unsigned int)arg2;
- (void)dealloc;
- (void)handleMessagesWillBeCompacted:(id)arg1;
- (void)handleMessagesCompacted:(id)arg1;
- (id)_memberMessagesWithCompactionNotification:(id)arg1;
- (void)handleMessageFlagsChanged:(id)arg1;
- (void)_handleFlagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3;
- (void)messagesWereAdded:(id)arg1 earliestReceivedDate:(id)arg2;
- (void)handleMessagesAdded:(id)arg1 earliestReceivedDate:(id)arg2;
- (id)filterMessagesByMembership:(id)arg1;
- (unsigned long long)fetchWindow;
- (unsigned long long)growFetchWindow;
- (_Bool)shouldGrowFetchWindow;
- (void)invalidateFetchWindow;
- (unsigned long long)_calculateFetchWindowWithAdditionalMultiple:(_Bool)arg1;
- (unsigned long long)_fetchWindowMinimum;
- (unsigned long long)_fetchWindowMultiple;
- (_Bool)_isSingleCoreDevice;
- (void)willFetchMessages;
- (id)serverSearchResults;
- (long long)oldestKnownConversation;
- (struct __CFDictionary *)copySendersByLibraryIDForConversation:(long long)arg1 limit:(long long)arg2;
- (id)copyMessagesWithRemoteIDs:(id)arg1 options:(unsigned int)arg2;
- (id)copyMessagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2;
- (id)copyMessagesMatchingText:(id)arg1 options:(unsigned int)arg2;
- (id)mutableCopyOfAllMessages;
- (id)copyOfAllMessagesForBodyLoadingFromRowID:(unsigned int)arg1 limit:(unsigned int)arg2;
- (id)copyOfAllMessages;
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;
- (id)copyOfMessagesInRange:(struct _NSRange)arg1 options:(unsigned int)arg2;
- (id)copyOfMessageInfosForConversationsContainingMessagesMatchingCriterion:(id)arg1;
- (id)copyOfMessageInfosMatchingCriterion:(id)arg1;
- (id)copyOfMessageInfos;
- (id)copyOfMessagesInRange:(struct _NSRange)arg1 options:(unsigned int)arg2 generation:(unsigned long long *)arg3;
- (id)messageWithLibraryID:(unsigned int)arg1 options:(unsigned int)arg2;
- (unsigned long long)nonDeletedCountIncludingServerSearch:(_Bool)arg1 andThreadSearch:(_Bool)arg2;
- (unsigned long long)totalCount;
- (void)openSynchronously;
- (void)libraryFinishedSendingMessages;
- (void)_addInvocationToQueue:(id)arg1;
- (_Bool)shouldCancel;
- (void)addCountsForMessages:(id)arg1 shouldUpdateUnreadCount:(_Bool)arg2;
- (void)_updateMailboxUnreadCount;
- (id)mailbox;
- (id)library;
- (void)setLibrary:(id)arg1;
- (id)initWithMailbox:(id)arg1;
- (id)initWithMailboxUid:(id)arg1 readOnly:(_Bool)arg2;
- (id)initWithCriterion:(id)arg1;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(_Bool)arg3;

@end

@interface MFDAMessageStore : MFLibraryStore
{
    DAFolder *_DAFolder;
}

- (id)additionalHeadersForForwardOfMessage:(id)arg1;
- (id)additionalHeadersForReplyOfMessage:(id)arg1;
- (id)_additionalHeadersForAction:(int)arg1 ofMessage:(id)arg2;
- (_Bool)canDeleteMessage:(id)arg1;
- (unsigned long long)growFetchWindow;
- (_Bool)shouldGrowFetchWindow;
- (unsigned long long)fetchWindow;
- (_Bool)hasMoreFetchableMessages;
- (_Bool)canFetchSearchResults;
- (id)bestAlternativeForPart:(id)arg1;
- (id)defaultAlternativeForPart:(id)arg1;
- (_Bool)_fetchDataForMimePart:(id)arg1 range:(struct _NSRange)arg2 isComplete:(_Bool *)arg3 consumer:(id)arg4;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 downloadIfNecessary:(_Bool)arg3 partial:(_Bool *)arg4;
- (id)_fetchBodyDataForNormalMessage:(id)arg1 format:(int)arg2 part:(id)arg3 streamConsumer:(id)arg4;
- (id)_fetchBodyDataForSearchResult:(id)arg1 format:(int)arg2 streamConsumer:(id)arg3;
- (_Bool)bodyFetchRequiresNetworkActivity;
- (id)loadMeetingMetadataForMessage:(id)arg1;
- (id)loadMeetingDataForMessage:(id)arg1;
- (id)loadMeetingExternalIDForMessage:(id)arg1;
- (_Bool)wantsLineEndingConversionForMIMEPart:(id)arg1;
- (_Bool)shouldDownloadBodyDataForMessage:(id)arg1;
- (_Bool)shouldSetSummaryForMessage:(id)arg1;
- (id)copyOfAllMessagesForBodyLoadingFromRowID:(unsigned int)arg1 limit:(unsigned int)arg2;
- (void)purgeMessagesBeyondLimit:(unsigned long long)arg1 keepingMessage:(id)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(int)arg1 compact:(_Bool)arg2;
- (id)messageForRemoteID:(id)arg1;
- (_Bool)allowsAppend;
- (void)setFlagsForAllMessagesFromDictionary:(id)arg1;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)willSetFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)setServerFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)issueFlagUpdates:(id)arg1 forMessages:(id)arg2;
- (id)remoteIDsMatchingSearchText:(id)arg1 limit:(unsigned int)arg2 error:(id *)arg3;
- (id)remoteIDsMatchingCriterion:(id)arg1 limit:(unsigned int)arg2 error:(id *)arg3;
- (long long)fetchMessagesMatchingCriterion:(id)arg1 limit:(unsigned int)arg2;
- (void)_remoteIDsMatchingCriterion:(id)arg1 limit:(unsigned int)arg2 filterByDate:(_Bool)arg3 handler:(CDUnknownBlockType)arg4;
- (long long)fetchNumMessages:(unsigned long long)arg1 preservingUID:(id)arg2 options:(unsigned long long)arg3;
- (id)_folderIDForFetching;
- (id)initWithMailboxUid:(id)arg1 readOnly:(_Bool)arg2;

@end

@interface MFDAMoveResponseConsumer : MFDAMailAccountConsumer <DAMessageMoveRequestConsumer>
{
    NSSet *_messagesIDs;
    NSMutableDictionary *_newRemoteIDsByMessageID;
    NSMutableSet *_failures;
    MFError *_error;
}

@property(retain, nonatomic) MFError *error; // @synthesize error=_error;
- (void)resultsForMessageMove:(id)arg1;
- (void)taskFailed:(id)arg1 statusCode:(long long)arg2 error:(id)arg3;
- (void)dealloc;
- (id)initWithMessageIDs:(id)arg1 newRemoteIDsByMessageID:(id)arg2 failures:(id)arg3;

@end

@interface MFOfflineCache : NSObject
{
    MFMailMessageLibrary *_library;
    long long _accountLibraryID;
    NSMutableArray *_deferredOperations;
    MFOfflineCacheReplayContext *_replayContext;
    unsigned int _lastTemporaryMessageID;
    _Bool _isReplaying;
}

- (void)_applyReplayContextTransformation:(id)arg1;
- (void)replaceTransferFailureSnapshotTemporaryID:(id)arg1 withTemporaryID:(id)arg2;
- (id)transferFailureSnapshotForTemporaryID:(id)arg1;
- (void)setTransferFailureSnapshot:(id)arg1 forTemporaryID:(id)arg2;
- (id)translatedIDForTemporaryID:(id)arg1;
- (void)setTranslatedID:(id)arg1 forTemporaryID:(id)arg2;
- (id)selectedMailboxID;
- (void)setSelectedMailboxID:(id)arg1;
- (void)deleteOfflineCacheData;
- (_Bool)replayOperationsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)hasDeferredOperations;
- (void)deferOperation:(id)arg1;
@property(readonly, nonatomic) NSString *nextTemporaryMessageID; // @dynamic nextTemporaryMessageID;
- (void)enumerateOperationsUsingBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithLibrary:(id)arg1 account:(id)arg2;
- (id)init;

@end

@interface MFDAOfflineCache : MFOfflineCache
{
    NSString *_lastSelectedFolderID;
}

- (void)deleteOfflineCacheData;
- (_Bool)replayOperationsUsingBlock:(CDUnknownBlockType)arg1;
- (void)deferOperation:(id)arg1;
- (void)setLastSelectedMailbox:(id)arg1;
- (void)dealloc;

@end

@interface MFRequestQueue : NSObject
{
    NSConditionLock *_condition;
    NSMutableArray *_requests;
    NSMutableArray *_consumers;
    unsigned int _waitingOutside;
    unsigned int _waitingInside;
}

- (void)dealloc;
- (void)processRequests:(id)arg1 consumers:(id)arg2;
- (void)_processRequests:(id)arg1 consumers:(id)arg2;
- (void)processRequest:(id)arg1 consumer:(id)arg2;
- (void)addRequests:(id)arg1 consumers:(id)arg2;
- (void)willAddRequests:(id)arg1 consumers:(id)arg2;
- (void)addRequest:(id)arg1 consumer:(id)arg2;
- (id)init;

@end

@interface MFDARequestQueue : MFRequestQueue
{
    DAMailAccount *_account;
    NSString *_folderID;
}

- (void)dealloc;
- (void)processRequests:(id)arg1 consumers:(id)arg2;
- (id)filterRequests:(id)arg1 consumers:(id)arg2 newConsumers:(id *)arg3;
- (id)initWithAccount:(id)arg1 folderID:(id)arg2;

@end

@interface MFDbJournal : NSObject
{
    NSString *_path;
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } _lock;
    int _fd;
    NSMutableData *_buffer;
}

- (_Bool)mergeWithDatabase:(struct sqlite3 *)arg1;
- (_Bool)_processJournalFile:(id)arg1 db:(struct sqlite3 *)arg2;
- (void)clear;
- (_Bool)flush;
- (_Bool)append:(const char *)arg1;
- (void)_resetBuffer;
- (void)dealloc;
- (id)initWithPath:(id)arg1;

@end

@interface MFDecryptedAttachmentDataProvider : NSObject <MFAttachmentDataProvider>
{
    MFMailMessage *_message;
}

- (id)messageForAttachment:(id)arg1;
- (_Bool)fetchDataForAttachment:(id)arg1 withDataConsumer:(id)arg2 error:(id *)arg3;
- (id)fetchLocalDataForAttachment:(id)arg1;
- (void)dealloc;
- (id)initWithDecryptedMessage:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFDeliveryResult : NSObject
{
    int _status;
    double _duration;
    unsigned long long _bytesSent;
    _Bool _isWifi;
}

@property(nonatomic) _Bool isWifi; // @synthesize isWifi=_isWifi;
@property(nonatomic) unsigned long long bytesSent; // @synthesize bytesSent=_bytesSent;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) int status; // @synthesize status=_status;
- (id)description;
- (id)initWithStatus:(int)arg1;

@end

@interface MFDigestMD5AuthScheme : MFAuthScheme
{
}

- (_Bool)canAuthenticateAccountClass:(Class)arg1 connection:(id)arg2;
- (_Bool)hasEncryption;
- (id)humanReadableName;
- (id)name;
- (Class)authenticatorClass;

@end

@interface MFError : NSError
{
    NSMutableDictionary *_moreUserInfo;
}

+ (id)errorWithException:(id)arg1;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 localizedDescription:(id)arg3 title:(id)arg4 userInfo:(id)arg5;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 localizedDescription:(id)arg3;
- (void)dealloc;
- (void)useGenericDescription:(id)arg1;
- (void)setShortDescription:(id)arg1;
- (void)setMoreInfo:(id)arg1;
- (void)setLocalizedDescription:(id)arg1;
- (id)mf_shortDescription;
- (id)mf_moreInfo;
- (id)recoveryAttempter;
- (id)localizedDescription;
- (id)userInfo;
- (void)setUserInfoObject:(id)arg1 forKey:(id)arg2;

@end

@interface MFFetchLimits : NSObject
{
    unsigned long long _fetchMinBytes;
    unsigned long long _fetchMaxBytes;
    unsigned long long _minBytesLeft;
}

@property(nonatomic) unsigned long long minBytesLeft; // @synthesize minBytesLeft=_minBytesLeft;
@property(nonatomic) unsigned long long fetchMaxBytes; // @synthesize fetchMaxBytes=_fetchMaxBytes;
@property(nonatomic) unsigned long long fetchMinBytes; // @synthesize fetchMinBytes=_fetchMinBytes;
- (id)init;

@end

@interface MFInvocationQueue : NSObject
{
    NSConditionLock *_lock;
    NSMutableArray *_items;
    unsigned long long _numThreads;
    unsigned long long _maxThreads;
    int _threadPriorityTrigger;
    double _threadRecycleTimeout;
    struct __CFSet *_lowPriorityThreads;
    _Bool _isForeground;
}

+ (void)flushAllInvocationQueues;
+ (unsigned long long)totalInvocationCount;
+ (id)sharedInvocationQueue;
@property(nonatomic) double threadRecycleTimeout; // @synthesize threadRecycleTimeout=_threadRecycleTimeout;
@property(nonatomic) int threadPriorityTrigger; // @synthesize threadPriorityTrigger=_threadPriorityTrigger;
@property(readonly, nonatomic) unsigned long long threadCount; // @synthesize threadCount=_numThreads;
- (id)copyDiagnosticInformation;
- (void)applicationWillResume;
- (void)applicationWillSuspend;
- (void)didCancel:(id)arg1;
- (void)_drainQueue:(id)arg1;
- (void)_processInvocation:(id)arg1;
- (void)_adjustThreadPrioritiesIsForeground:(_Bool)arg1;
- (void)removeAllItems;
- (void)addInvocation:(id)arg1;
@property(readonly, nonatomic) unsigned long long invocationCount;
@property(nonatomic) unsigned long long maxThreadCount;
- (void)dealloc;
- (id)init;
- (id)initWithMaxThreadCount:(unsigned long long)arg1;

@end

@interface MFLibraryContentIndex : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_path;
    NSString *_indexName;
    double _startNonIdle;
    long long _state;
    NSMutableArray *_pendingIndexableItems;
    NSMutableIndexSet *_pendingRemovals;
    NSObject<OS_dispatch_group> *_group;
    NSObject<OS_dispatch_queue> *_indexingQueue;
    unsigned long long _throttledBatchSize;
    id <MFLibraryContentIndexDataSource> _dataSource;
    NSObject<OS_dispatch_queue> *_dataSourceQueue;
    NSObject<OS_dispatch_queue> *_utilityPriorityQueue;
    NSObject<OS_dispatch_queue> *_foregroundPriorityQueue;
    _MFContentIndexWrapper *_contentIndexWrapper;
    int _invalidated;
    _MFLibraryContentIndexResultsCache *_resultsCache;
    unsigned int _isForeground:1;
    unsigned int _refreshing:1;
    unsigned int _shouldReopen:1;
    unsigned int _processPendingChangesScheduled:1;
}

- (void)removeItemsWithDocumentIdentifiers:(id)arg1;
- (void)indexItems:(id)arg1;
- (void)_processRefreshRequest;
- (void)_processRemovals:(struct __CXIndex *)arg1;
- (void)_processIndexingBatch:(struct __CXIndex *)arg1;
- (unsigned int)_addItem:(id)arg1 toContentIndex:(struct __CXIndex *)arg2;
- (id)_consumeBatchOfSize:(unsigned long long)arg1;
- (void)_transitionToNextState;
- (void)_dataSourceIndexItemsNeedingRefreshWithLimit:(unsigned long long)arg1;
- (void)_dataSourceInvalidateItemsGreaterThanTransactionId:(unsigned int)arg1;
- (void)_dataSourceAssignTransactionIdentifier:(unsigned int)arg1 forDocumentIdentifiers:(id)arg2;
- (id)_copyContentIndex_indexingQueue;
- (id)_copyContentIndex;
- (id)_indexFullPath;
- (id)documentIdentifiersMatchingCriterion:(id)arg1 mailboxIDs:(id)arg2;
- (struct __CXQuery *)_createQueryFromCriterion:(id)arg1 mailboxIDs:(id)arg2 contentIndex:(struct __CXIndex *)arg3;
- (struct __CXQueryNode *)_createQueryNodeFromMailboxIDs:(id)arg1;
- (struct __CXQueryNode *)_createQueryNodeFromCriterion:(id)arg1;
- (_Bool)isSearchable;
- (void)refresh;
- (void)forceReopen;
- (void)resume;
- (void)suspend;
- (void)scheduleProcessPendingItems;
- (void)_transitionToNextStatePaused:(_Bool)arg1;
- (void)_invalidateResultsCache;
- (void)wait;
- (void)invalidateAndWait;
- (void)_markInvalidated;
- (void)applicationWillResume;
- (void)applicationWillSuspend;
- (void)_updateDataSourceQueueTargetIsForeground:(_Bool)arg1;
- (void)setTargetQueue:(id)arg1;
- (void)dealloc;
- (id)initWithPath:(id)arg1 indexName:(id)arg2 dataSource:(id)arg3;

@end

@interface MFLibraryContentIndexableItem : NSObject
{
    unsigned int _documentIdentifier;
    unsigned int _mailboxID;
    NSString *_content;
    NSArray *_to;
    NSArray *_cc;
    NSArray *_senders;
    NSString *_subject;
}

@property(nonatomic) unsigned int mailboxID; // @synthesize mailboxID=_mailboxID;
@property(copy, nonatomic) NSString *subject; // @synthesize subject=_subject;
@property(copy, nonatomic) NSArray *senders; // @synthesize senders=_senders;
@property(copy, nonatomic) NSArray *cc; // @synthesize cc=_cc;
@property(copy, nonatomic) NSArray *to; // @synthesize to=_to;
@property(copy, nonatomic) NSString *content; // @synthesize content=_content;
@property(nonatomic) unsigned int documentIdentifier; // @synthesize documentIdentifier=_documentIdentifier;
- (long long)compare:(id)arg1;
- (void)dealloc;
- (id)initWithDocumentIdentifier:(unsigned int)arg1;

@end

@interface MFLibraryMessage : MFMailMessage
{
    unsigned int _libraryID;
    NSString *_remoteID;
    unsigned int _uid;
    unsigned long long _uniqueRemoteId;
    unsigned long long _size;
    unsigned int _mailboxID;
    unsigned int _originalMailboxID;
    NSString *_messageID;
    unsigned long long _conversationFlags;
    NSMutableDictionary *_metadata;
    NSMutableSet *_metadataChangedKeys;
    MFLock *_metadataLock;
    CDUnknownBlockType _deallocationHandler;
}

+ (id)messageWithLibraryID:(unsigned int)arg1;
@property(copy, nonatomic) CDUnknownBlockType deallocationHandler; // @synthesize deallocationHandler=_deallocationHandler;
- (id)attachmentStorageLocation;
- (id)_attachmentStorageLocation;
- (id)metadataValueForKey:(id)arg1;
- (void)setMetadataValue:(id)arg1 forKey:(id)arg2;
- (void)_initializeMetadata;
- (id)copyMessageInfo;
- (_Bool)isLibraryMessage;
- (_Bool)canBeDeleted;
- (id)dataConsumerForMimePart:(id)arg1;
- (void)setMessageData:(id)arg1 isPartial:(_Bool)arg2;
- (void)setRemoteID:(const char *)arg1 flags:(unsigned long long)arg2 size:(unsigned int)arg3 mailboxID:(unsigned int)arg4 originalMailboxID:(unsigned int)arg5;
- (unsigned long long)conversationFlags;
- (void)setConversationFlags:(unsigned long long)arg1;
- (id)preferredEmailAddressToReplyWith;
- (void)markAsForwarded;
- (void)markAsReplied;
- (void)markAsNotFlagged;
- (void)markAsFlagged;
- (void)markAsNotViewed;
- (void)markAsViewed;
- (id)account;
- (id)dataPathForMimePart:(id)arg1;
- (id)path;
- (void)dealloc;
- (id)description;
- (void)setMutableInfoFromMessage:(id)arg1;
- (void)commit;
- (void)setSummary:(id)arg1;
- (void)setFlags:(unsigned long long)arg1;
- (void)setMessageFlags:(unsigned long long)arg1;
- (void)setMessageFlagsWithoutCommitting:(unsigned long long)arg1;
- (long long)compareByUidWithMessage:(id)arg1;
- (id)mailboxName;
- (void)setHasTemporaryUid:(_Bool)arg1;
- (_Bool)hasTemporaryUid;
- (void)setPreferredEncoding:(unsigned int)arg1;
- (_Bool)isMessageContentsLocallyAvailable;
- (void)setIsPartial:(_Bool)arg1;
- (_Bool)isPartial;
- (void)setUniqueRemoteId:(unsigned long long)arg1;
- (unsigned long long)uniqueRemoteId;
- (void)setUid:(unsigned int)arg1;
- (unsigned int)uid;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)remoteID;
- (void)setRemoteID:(id)arg1;
- (void)_updateUID;
- (id)mailbox;
- (id)messageStore;
- (void)setMessageSize:(unsigned long long)arg1;
- (unsigned long long)messageSize;
- (id)originalMailboxURL;
- (void)setOriginalMailboxID:(unsigned int)arg1;
- (unsigned int)originalMailboxID;
- (void)setMailboxID:(unsigned int)arg1;
- (unsigned int)mailboxID;
- (unsigned int)libraryID;
- (id)persistentID;
- (id)messageID;
- (void)setLibraryID:(unsigned int)arg1;
- (id)library;
- (id)initWithLibraryID:(unsigned int)arg1;

@end

@interface MFLocalizedMessageHeaders : MFMessageHeaders
{
}

+ (id)englishHeadersFromLocalizedHeaders:(id)arg1;
+ (id)localizedHeadersFromEnglishHeaders:(id)arg1;
+ (id)localizedHeaders;
- (id)markupString;
- (void)appendHeaderMarkupForKey:(id)arg1 value:(id)arg2 toString:(id)arg3;
- (id)copyFormattedHeaderValueFromAddressList:(id)arg1;

@end

@interface MFMailDataMessageStore : MFDataMessageStore
{
}

+ (Class)classForMimePart;

@end

@interface MFMessageLibrary : NSObject
{
    NSString *_path;
    MFAttachmentLibraryDataProvider *_attachmentDataProvider;
}

- (id)dataProvider;
- (void)setStoredIntegerPropertyWithName:(id)arg1 value:(id)arg2;
- (id)storedIntegerPropertyWithName:(id)arg1;
- (_Bool)hasCompleteDataForMimePart:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)accountForMessage:(id)arg1;
- (void)postOldFlags:(unsigned long long)arg1 newFlags:(unsigned long long)arg2 forMessage:(id)arg3;
- (void)postFlagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3;
- (void)setFlagsForMessages:(id)arg1;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(_Bool)arg3 newMessagesByOldMessage:(id)arg4;
- (unsigned int)mailboxIDForURLString:(id)arg1;
- (id)remoteStoreForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 isComplete:(_Bool *)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)dataForMimePart:(id)arg1 isComplete:(_Bool *)arg2;
- (id)mailboxUidForMessage:(id)arg1;
- (id)dataPathForMessage:(id)arg1 part:(id)arg2;
- (id)dataPathForMessage:(id)arg1;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(_Bool)arg3 newMessagesByOldMessage:(id)arg4 remoteIDs:(id)arg5 setFlags:(unsigned long long)arg6 clearFlags:(unsigned long long)arg7 messageFlagsForMessages:(id)arg8 copyFiles:(_Bool)arg9 addPOPUIDs:(_Bool)arg10 dataSectionsByMessage:(id)arg11;
- (_Bool)isMessageContentsLocallyAvailable:(id)arg1;
- (id)urlForMailboxID:(unsigned int)arg1;
- (void)updateFlagsForMessagesInPlace:(id)arg1 success:(_Bool *)arg2;
- (void)setFlagsForMessages:(id)arg1 mask:(unsigned long long)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)setFlagsFromDictionary:(id)arg1 forMessagesInMailboxURLString:(id)arg2;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(_Bool)arg2 isEncrypted:(_Bool)arg3 forMessage:(id)arg4;
- (void)setFlags:(unsigned long long)arg1 forMessage:(id)arg2;
- (void)setMessage:(id)arg1 isPartial:(_Bool)arg2;
- (void)deleteOfflineCacheDataForAccount:(long long)arg1;
- (void)consumeOfflineCacheReplayDataForAccount:(long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)appendOfflineCacheReplayData:(id)arg1 forAccountID:(long long)arg2;
- (id)offlineCacheOperationsForAccount:(long long)arg1 lastTemporaryID:(unsigned int *)arg2;
- (void)markOfflineCacheOperationAsComplete:(id)arg1;
- (void)appendOfflineCacheOperation:(id)arg1 forAccount:(long long)arg2 lastTemporaryID:(unsigned int)arg3;
- (void)deleteAccount:(id)arg1;
- (long long)libraryIDForAccount:(id)arg1;
- (long long)createLibraryIDForAccount:(id)arg1;
- (id)filterContiguousMessages:(id)arg1 forCriterion:(id)arg2 options:(unsigned int)arg3;
- (void)lockDBForWriting;
- (id)hiddenPOPUIDsInMailbox:(id)arg1;
- (id)allUIDsInMailbox:(id)arg1;
- (id)deletedUIDsInMailbox:(id)arg1;
- (id)UIDsToDeleteInMailbox:(id)arg1;
- (void)deletePOPUID:(id)arg1 inMailbox:(id)arg2;
- (void)closeDatabaseConnections;
- (_Bool)isBusy;
- (_Bool)libraryExists;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 success:(_Bool *)arg4;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 success:(_Bool *)arg3;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3 range:(struct _NSRange)arg4;
- (id)bodyDataForMessage:(id)arg1;
- (id)headerDataForMessage:(id)arg1;
- (id)loadMeetingMetadataForMessage:(id)arg1;
- (id)loadMeetingDataForMessage:(id)arg1;
- (id)loadMeetingExternalIDForMessage:(id)arg1;
- (id)metadataForMessage:(id)arg1 key:(id)arg2;
- (id)metadataForMessage:(id)arg1;
- (oneway void)updateMessage:(id)arg1 withMetadata:(CDUnknownBlockType)arg2;
- (void)setSummary:(id)arg1 forMessage:(id)arg2;
- (void)setData:(id)arg1 forMessage:(id)arg2 isPartial:(_Bool)arg3;
- (id)dataConsumerForMessage:(id)arg1;
- (id)dataConsumerForMessage:(id)arg1 isPartial:(_Bool)arg2;
- (id)dataConsumerForMessage:(id)arg1 part:(id)arg2 incomplete:(_Bool)arg3;
- (id)dataConsumerForMessage:(id)arg1 part:(id)arg2;
- (id)messageWithMessageID:(id)arg1 inMailbox:(id)arg2;
- (void)deleteMailboxes:(id)arg1;
- (_Bool)renameMailboxes:(id)arg1 to:(id)arg2;
- (void)compactMailbox:(id)arg1;
- (void)removeAllMessagesFromMailbox:(id)arg1 removeMailbox:(_Bool)arg2 andNotify:(_Bool)arg3;
- (void)compactMessages:(id)arg1;
- (void)compactMessages:(id)arg1 permanently:(_Bool)arg2;
- (_Bool)shouldCancel;
- (id)messageWithLibraryID:(unsigned int)arg1 options:(unsigned int)arg2 inMailbox:(id)arg3;
- (id)messagesWithMessageIDHeader:(id)arg1;
- (id)messageWithMessageID:(id)arg1 options:(unsigned int)arg2 inMailbox:(id)arg3;
- (id)getDetailsForMessages:(unsigned long long)arg1 absoluteBottom:(unsigned long long)arg2 topOfDesiredRange:(unsigned long long)arg3 range:(struct _NSRange *)arg4 fromMailbox:(id)arg5;
- (id)getDetailsForAllMessagesFromMailbox:(id)arg1;
- (id)getDetailsForMessagesWithRemoteIDInRange:(struct _NSRange)arg1 fromMailbox:(id)arg2;
- (void)setSequenceIdentifier:(id)arg1 forMessagesWithRemoteIDs:(id)arg2 inMailbox:(id)arg3;
- (void)setSequenceIdentifier:(id)arg1 forMessageWithLibraryID:(unsigned int)arg2;
- (id)sequenceIdentifierForMessagesWithRemoteIDs:(id)arg1 inMailbox:(id)arg2;
- (void)setSequenceIdentifier:(id)arg1 forMailbox:(id)arg2;
- (id)sequenceIdentifierForMailbox:(id)arg1;
- (unsigned int)minimumRemoteIDForMailbox:(id)arg1;
- (unsigned int)maximumRemoteIDForMailbox:(id)arg1;
- (id)copyMessagesWithRemoteIDs:(id)arg1 options:(unsigned int)arg2 inRemoteMailbox:(id)arg3;
- (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
- (id)oldestMessageInMailbox:(id)arg1;
- (void)setServerUnreadOnlyOnServerCount:(unsigned long long)arg1 forMailbox:(id)arg2;
- (unsigned long long)serverUnreadOnlyOnServerCountForMailbox:(id)arg1;
- (unsigned int)totalCountForMailbox:(id)arg1;
- (unsigned int)nonDeletedCountForMailbox:(id)arg1 includeServerSearchResults:(_Bool)arg2 includeThreadSearchResults:(_Bool)arg3;
- (unsigned int)nonDeletedCountForMailbox:(id)arg1;
- (unsigned int)deletedCountForMailbox:(id)arg1;
- (unsigned int)unreadCountForMailbox:(id)arg1 matchingCriterion:(id)arg2;
- (unsigned int)unreadCountForMailbox:(id)arg1;
- (id)orderedBatchOfMessagesEndingAtRowId:(unsigned int)arg1 limit:(unsigned int)arg2 success:(_Bool *)arg3;
- (id)messagesWithoutSummariesForMailbox:(id)arg1 fromRowID:(unsigned int)arg2 limit:(unsigned int)arg3;
- (id)messagesWithSummariesForMailbox:(id)arg1 fromRowID:(unsigned int)arg2 limit:(unsigned int)arg3;
- (id)messagesWithoutSummariesForMailbox:(id)arg1;
- (id)messagesWithSummariesForMailbox:(id)arg1 range:(struct _NSRange)arg2;
- (id)dateOfOldestNonSearchResultMessageInMailbox:(id)arg1;
- (id)messagesNeedingSyncConfirmationForMailbox:(id)arg1;
- (id)serverSearchResultMessagesForMailbox:(id)arg1;
- (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(int)arg2;
- (void)updateAdditionalThreadingInfoForSentMessageWithHeaders:(id)arg1 externalConversationID:(long long)arg2;
- (void)updateThreadingInfoForMessage:(id)arg1 fromHeaders:(id)arg2;
- (void)updateRecipientsForMessage:(id)arg1 fromHeaders:(id)arg2;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 forMailbox:(id)arg3 setFlags:(unsigned long long)arg4 clearFlags:(unsigned long long)arg5 messageFlagsForMessages:(id)arg6 createNewCacheFiles:(_Bool)arg7;
- (void)commit;
- (void)flagsChangedForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3;
- (void)dealloc;
- (id)initWithPath:(id)arg1;

@end

@interface MFMailMessageLibrary : MFMessageLibrary <MFLibraryContentIndexDataSource, MFSQLiteConnectionPoolDelegate, MFContentProtectionObserver>
{
    MFSQLiteConnectionPool *_connectionPool;
    MFLibraryContentIndex *_contentIndex;
    MFWeakObjectCache *_libraryMessageCache;
    struct __CFDictionary *_mailboxCache;
    NSObject<OS_dispatch_queue> *_queue;
    id <MFMailboxPathProvider> _mailboxPathProvider;
    MFMailMessageLibraryMigrator *_migrator;
    NSString *_threadLocalHandleKey;
    NSString *_activeAccountClause;
    int _protectedDataAvailability;
    MFDbJournal *_protectedJournal;
    NSObject<OS_dispatch_queue> *_keyBagQueue;
    NSMutableSet *_messagesToThreadAtUnlock;
    id <MFMailMessageLibraryDelegate> _delegate;
}

+ (void)_removeLibrary:(_Bool)arg1 atPath:(id)arg2;
+ (void)removeLibraryAtPath:(id)arg1;
+ (id)defaultPath;
+ (id)defaultInstance;
- (id)_messageForStatement:(struct sqlite3_stmt *)arg1 options:(unsigned int)arg2 timestamp:(unsigned long long)arg3 isProtectedDataAvailable:(_Bool)arg4;
- (void)_removeCachedLibraryMessageWithLibraryID:(unsigned int)arg1;
- (id)_libraryMessageWithLibraryID:(unsigned int)arg1 wasCached:(_Bool *)arg2;
- (id)_libraryMessageCache;
- (id)allMailboxURLStrings;
- (void)setMailboxPathProvider:(id)arg1;
- (id)itemsRequiringIndexingForContentIndex:(id)arg1 limit:(unsigned long long)arg2;
- (void)contentIndex:(id)arg1 assignTransactionIdentifier:(unsigned int)arg2 forDocumentIdentifiers:(id)arg3;
- (void)_assignTransactionIdentifier:(unsigned int)arg1 forLibraryIDs:(id)arg2;
- (void)contentIndex:(id)arg1 invalidateItemsGreaterThanTransactionId:(unsigned int)arg2;
- (void)pruneConversationTables:(double)arg1;
- (void)renameOrRemoveDatabase;
- (void)_handleBusyError;
- (void)_handleProtectedDataIOError;
- (void)_handleIOError;
- (void)_handleDetachedDatabaseIOError;
- (void)_handleInvalidDatabaseIOError;
- (void)_handleFullDatabase;
- (void)_handleFailedMigration;
- (void)_handleProtectedDataInconsistencies;
- (void)_handleJournalMergeFailure;
- (void)_handleJournalWriteFailure;
- (void)_handleCorruptDatabase;
- (void)_handleSQLiteErrorCode:(int)arg1 db:(struct sqlite3 *)arg2;
- (int)handleSqliteError:(struct sqlite3 *)arg1 format:(id)arg2;
- (struct sqlite3_stmt *)preparedStatement:(struct sqlite3 *)arg1 pattern:(id)arg2;
- (id)_activeConnectionWithDB:(struct sqlite3 *)arg1;
- (id)_activeConnection;
- (id)_activeConnectionWrapper;
- (id)_setActiveConnection:(id)arg1 forWriting:(_Bool)arg2;
- (void)unlockDB:(struct sqlite3 *)arg1;
- (struct sqlite3 *)getReaderDB;
- (struct sqlite3 *)getWriterDB;
- (id)_connectionForWriting:(_Bool)arg1;
- (void)closeDatabaseConnections;
- (void)_performTransaction:(CDUnknownBlockType)arg1 forWriting:(_Bool)arg2;
- (void)performReadTransaction:(CDUnknownBlockType)arg1;
- (void)performWriteTransaction:(CDUnknownBlockType)arg1;
- (int)rollbackTransaction:(struct sqlite3 *)arg1;
- (int)commitTransaction:(struct sqlite3 *)arg1;
- (int)beginTransaction:(struct sqlite3 *)arg1 withType:(int)arg2;
- (_Bool)migrate;
- (id)_newConnection;
- (id)newConnectionForConnectionPool:(id)arg1;
- (_Bool)isKeyBagUnlocked;
- (void)_addMessageToThreadAtUnlock:(unsigned int)arg1;
- (void)_reconcileAfterKeybagUnlock;
- (void)contentProtectionStateChanged:(int)arg1 previousState:(int)arg2;
- (_Bool)isProtectedDataAvailable:(struct sqlite3 *)arg1;
- (int)attachProtectedDatabase:(struct sqlite3 *)arg1;
- (void)_reconcileJournal:(struct sqlite3 *)arg1;
- (_Bool)cleanupProtectedTables:(struct sqlite3 *)arg1 checkForInconsistencies:(_Bool)arg2;
- (id)_indexSetOfMessagesDeleted;
@property(readonly, nonatomic) int protectedDataAvailability;
- (void)_setProtectedDataAvailabilityState:(int)arg1;
- (id)hiddenPOPUIDsInMailbox:(id)arg1;
- (id)allUIDsInMailbox:(id)arg1;
- (id)deletedUIDsInMailbox:(id)arg1;
- (id)UIDsToDeleteInMailbox:(id)arg1;
- (void)deletePOPUID:(id)arg1 inMailbox:(id)arg2;
- (void)deleteOfflineCacheDataForAccount:(long long)arg1;
- (void)consumeOfflineCacheReplayDataForAccount:(long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)appendOfflineCacheReplayData:(id)arg1 forAccountID:(long long)arg2;
- (id)offlineCacheOperationsForAccount:(long long)arg1 lastTemporaryID:(unsigned int *)arg2;
- (void)markOfflineCacheOperationAsComplete:(id)arg1;
- (void)appendOfflineCacheOperation:(id)arg1 forAccount:(long long)arg2 lastTemporaryID:(unsigned int)arg3;
- (id)_activeAccountsClause;
- (void)rebuildActiveAccountsClauseWithAccounts:(id)arg1;
- (void)deleteAccount:(id)arg1;
- (long long)libraryIDForAccount:(id)arg1;
- (long long)createLibraryIDForAccount:(id)arg1;
- (id)filterContiguousMessages:(id)arg1 forCriterion:(id)arg2 options:(unsigned int)arg3;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 success:(_Bool *)arg3;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3 success:(_Bool *)arg4;
- (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 range:(struct _NSRange)arg3;
- (void)iterateMessagesMatchingCriterion:(id)arg1 withResultHandler:(id)arg2 options:(unsigned int)arg3 withMonitor:(id)arg4;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3 range:(struct _NSRange)arg4;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3 baseTable:(unsigned int)arg4;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3 baseTable:(unsigned int)arg4 range:(struct _NSRange)arg5;
- (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3 baseTable:(unsigned int)arg4 range:(struct _NSRange)arg5 success:(_Bool *)arg6;
- (id)queryForCriterion:(id)arg1 db:(struct sqlite3 *)arg2 options:(unsigned int)arg3;
- (id)queryForCriterion:(id)arg1 db:(struct sqlite3 *)arg2 options:(unsigned int)arg3 range:(struct _NSRange)arg4;
- (id)queryForCriterion:(id)arg1 db:(struct sqlite3 *)arg2 options:(unsigned int)arg3 baseTable:(unsigned int)arg4;
- (id)queryForCriterion:(id)arg1 db:(struct sqlite3 *)arg2 options:(unsigned int)arg3 baseTable:(unsigned int)arg4 isSubquery:(_Bool)arg5;
- (id)queryForCriterion:(id)arg1 db:(struct sqlite3 *)arg2 options:(unsigned int)arg3 baseTable:(unsigned int)arg4 isSubquery:(_Bool)arg5 range:(struct _NSRange)arg6;
- (id)equalToMailboxIDsFromCriterion:(id)arg1;
- (_Bool)isMessageContentsLocallyAvailable:(id)arg1;
- (_Bool)hasCompleteDataForMimePart:(id)arg1;
- (id)dataForMimePart:(id)arg1 isComplete:(_Bool *)arg2;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)headerDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 isComplete:(_Bool *)arg3;
- (id)headerDataAtPath:(id)arg1;
- (id)bodyDataAtPath:(id)arg1 headerData:(id *)arg2;
- (id)loadMeetingMetadataForMessage:(id)arg1;
- (id)loadMeetingExternalIDForMessage:(id)arg1;
- (id)loadMeetingDataForMessage:(id)arg1;
- (id)loadData:(id)arg1 forMessage:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)metadataForMessage:(id)arg1;
- (id)metadataForMessage:(id)arg1 key:(id)arg2;
- (void)updateMessage:(id)arg1 withMetadata:(CDUnknownBlockType)arg2;
- (void)setSummary:(id)arg1 forMessage:(id)arg2;
- (void)_setMessageDataString:(id)arg1 forKey:(id)arg2 forMessage:(id)arg3;
- (_Bool)_setMessageData:(id)arg1 libraryID:(unsigned int)arg2 part:(id)arg3 partial:(_Bool)arg4 complete:(_Bool)arg5;
- (void)setData:(id)arg1 forMessage:(id)arg2 isPartial:(_Bool)arg3;
- (id)dataConsumerForMessage:(id)arg1;
- (id)dataConsumerForMessage:(id)arg1 isPartial:(_Bool)arg2;
- (id)dataConsumerForMessage:(id)arg1 part:(id)arg2 incomplete:(_Bool)arg3;
- (id)dataConsumerForMessage:(id)arg1 part:(id)arg2;
- (id)dataPathForMessage:(id)arg1 part:(id)arg2;
- (id)attachmentsDirectoryForLibraryID:(unsigned int)arg1 mailboxID:(unsigned int)arg2;
- (id)dataPathForMessage:(id)arg1;
- (id)dataPathForMessage:(id)arg1 type:(int)arg2;
- (id)messageWithMessageID:(id)arg1 inMailbox:(id)arg2;
- (void)removeAllMessagesFromMailbox:(id)arg1 removeMailbox:(_Bool)arg2 andNotify:(_Bool)arg3;
- (void)vacuumDataForObsoleteAccountURLString:(id)arg1;
- (void)deleteMailboxes:(id)arg1;
- (_Bool)renameMailboxes:(id)arg1 to:(id)arg2;
- (void)compactMailbox:(id)arg1;
- (void)compactMessages:(id)arg1 permanently:(_Bool)arg2;
- (void)_notifyDidCompact:(_Bool)arg1 messages:(id)arg2 mailboxes:(id)arg3;
- (void)setStoredIntegerPropertyWithName:(id)arg1 value:(id)arg2;
- (id)storedIntegerPropertyWithName:(id)arg1;
- (id)messageIdsForConversationId:(long long)arg1 limit:(unsigned long long)arg2;
- (long long)conversationIdForMessageIds:(id)arg1;
- (void)setConversationInfo:(long long)arg1 syncKey:(id)arg2 flags:(unsigned long long)arg3;
- (void)setFlags:(unsigned long long)arg1 forConversationId:(long long)arg2;
- (unsigned long long)flagsForConversationId:(long long)arg1;
- (id)syncedConversations;
- (_Bool)_canSelectMessagesWithOptions:(unsigned int)arg1 db:(struct sqlite3 *)arg2;
- (_Bool)shouldCancel;
- (id)accountForMessage:(id)arg1;
- (id)remoteStoreForMessage:(id)arg1;
- (id)mailboxUidForMessage:(id)arg1;
- (id)mailboxURLForMessage:(id)arg1;
- (id)pathForMailboxURL:(id)arg1;
- (unsigned int)mailboxIDForURLString:(id)arg1;
- (id)urlForMailboxID:(unsigned int)arg1;
- (id)stringForQuery:(id)arg1;
- (id)stringForQuery:(id)arg1 monitor:(id)arg2;
- (long long)loadMoreMessagesForThreadContainingMessage:(id)arg1 hasNoMoreMessages:(_Bool *)arg2;
- (long long)countOfMessagesMissingFromThreadContainingMessage:(id)arg1;
- (id)_getReferencesForHashesWithOwners:(struct __CFDictionary *)arg1;
- (struct __CFDictionary *)_copyReferenceHashesWithoutMessagesForMessageWithConversation:(id)arg1;
- (id)conversationIDsOfMessagesInSameThreadAsMessageWithLibraryID:(unsigned int)arg1 messageIDHash:(long long)arg2;
- (long long)mailboxLocationOfMessageID:(unsigned int)arg1 usingDatabase:(struct sqlite3 *)arg2;
- (id)messageWithLibraryID:(unsigned int)arg1 options:(unsigned int)arg2 inMailbox:(id)arg3;
- (id)messagesWithMessageIDHeader:(id)arg1;
- (id)messageWithMessageID:(id)arg1 options:(unsigned int)arg2 inMailbox:(id)arg3;
- (id)getDetailsForAllMessagesFromMailbox:(id)arg1;
- (id)getDetailsForMessages:(unsigned long long)arg1 absoluteBottom:(unsigned long long)arg2 topOfDesiredRange:(unsigned long long)arg3 range:(struct _NSRange *)arg4 fromMailbox:(id)arg5;
- (id)getDetailsForMessagesWithRemoteIDInRange:(struct _NSRange)arg1 fromMailbox:(id)arg2;
- (void)setSequenceIdentifier:(id)arg1 forMessagesWithRemoteIDs:(id)arg2 inMailbox:(id)arg3;
- (void)setSequenceIdentifier:(id)arg1 forMessageWithLibraryID:(unsigned int)arg2;
- (id)sequenceIdentifierForMessagesWithRemoteIDs:(id)arg1 inMailbox:(id)arg2;
- (void)setSequenceIdentifier:(id)arg1 forMailbox:(id)arg2;
- (id)sequenceIdentifierForMailbox:(id)arg1;
- (unsigned int)minimumRemoteIDForMailbox:(id)arg1;
- (unsigned int)maximumRemoteIDForMailbox:(id)arg1;
- (id)copyMessagesWithRemoteIDs:(id)arg1 options:(unsigned int)arg2 inRemoteMailbox:(id)arg3;
- (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
- (id)oldestMessageInMailbox:(id)arg1;
- (void)setServerUnreadOnlyOnServerCount:(unsigned long long)arg1 forMailbox:(id)arg2;
- (unsigned long long)serverUnreadOnlyOnServerCountForMailbox:(id)arg1;
- (unsigned int)totalCountForMailbox:(id)arg1;
- (unsigned int)nonDeletedCountForMailbox:(id)arg1;
- (unsigned int)nonDeletedCountForMailbox:(id)arg1 includeServerSearchResults:(_Bool)arg2 includeThreadSearchResults:(_Bool)arg3;
- (unsigned int)deletedCountForMailbox:(id)arg1;
- (unsigned int)includesMeCountForMailbox:(id)arg1;
- (unsigned int)attachmentCountForMailbox:(id)arg1;
- (unsigned int)flaggedCountForMailbox:(id)arg1;
- (unsigned int)unreadCountForMailbox:(id)arg1 matchingCriterion:(id)arg2;
- (unsigned int)unreadCountForMailbox:(id)arg1;
- (unsigned int)integerForQuery:(id)arg1 withTextArgument:(id)arg2;
- (id)messagesWithoutSummariesForMailbox:(id)arg1 fromRowID:(unsigned int)arg2 limit:(unsigned int)arg3;
- (id)orderedBatchOfMessagesEndingAtRowId:(unsigned int)arg1 limit:(unsigned int)arg2 success:(_Bool *)arg3;
- (id)messagesWithSummariesForMailbox:(id)arg1 fromRowID:(unsigned int)arg2 limit:(unsigned int)arg3;
- (id)messagesWithoutSummariesForMailbox:(id)arg1;
- (id)messagesWithSummariesForMailbox:(id)arg1 range:(struct _NSRange)arg2;
- (struct __CFDictionary *)copySendersByLibraryIDForConversation:(long long)arg1 mailbox:(id)arg2 limit:(long long)arg3;
- (long long)oldestKnownConversationInMailbox:(id)arg1;
- (unsigned int)countOfRelatedMessagesMatchingCriterion:(id)arg1 forConversationsContainingMessagesMatchingCriterion:(id)arg2 forMailbox:(id)arg3;
- (id)copyMessageInfosForConversationsContainingMessagesMatchingCriterion:(id)arg1 forMailbox:(id)arg2;
- (id)copyMessageInfosMatchingCriterion:(id)arg1;
- (id)copyMessageInfosForMailbox:(id)arg1;
- (id)dateOfOldestNonSearchResultMessageInMailbox:(id)arg1;
- (id)messagesNeedingSyncConfirmationForMailbox:(id)arg1;
- (id)serverSearchResultMessagesForMailbox:(id)arg1;
- (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(int)arg2;
- (void)sendMessagesMatchingQuery:(const char *)arg1 db:(struct sqlite3 *)arg2 to:(id)arg3 options:(unsigned int)arg4;
- (void)sendMessagesForStatement:(struct sqlite3_stmt *)arg1 db:(struct sqlite3 *)arg2 to:(id)arg3 options:(unsigned int)arg4 timestamp:(unsigned long long)arg5;
- (void)iterateStatement:(struct sqlite3_stmt *)arg1 db:(struct sqlite3 *)arg2 withProgressMonitor:(id)arg3 andRowHandler:(CDUnknownFunctionPointerType)arg4 context:(void *)arg5;
- (void)updateThreadingInfoForMessage:(id)arg1 fromHeaders:(id)arg2;
- (void)updateAdditionalThreadingInfoForSentMessageWithHeaders:(id)arg1 externalConversationID:(long long)arg2;
- (void)updateRecipientsForMessage:(id)arg1 fromHeaders:(id)arg2;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(_Bool)arg3 newMessagesByOldMessage:(id)arg4 remoteIDs:(id)arg5 setFlags:(unsigned long long)arg6 clearFlags:(unsigned long long)arg7 messageFlagsForMessages:(id)arg8 copyFiles:(_Bool)arg9 addPOPUIDs:(_Bool)arg10 dataSectionsByMessage:(id)arg11;
@property(nonatomic) id <MFMailMessageLibraryDelegate> delegate;
- (long long)addReferencesForMessage:(id)arg1 libraryID:(unsigned int)arg2 messageIDHash:(long long)arg3 withSubject:(id)arg4 withReferences:(id)arg5 usingDatabase:(struct sqlite3 *)arg6 otherSubjectIDMappings:(id)arg7 usingMailbox:(int)arg8 conversationFlags:(unsigned long long *)arg9 mergeHandler:(CDUnknownBlockType)arg10;
- (id)addThreadingInfoBySubjectForMessageID:(unsigned int)arg1 nonPrefixedSubject:(id)arg2 messageIDsBySubject:(id)arg3 usingDatabase:(struct sqlite3 *)arg4 toReferences:(id)arg5 withinMailbox:(int)arg6;
- (id)referencesFromHeaders:(id)arg1;
- (void)notifyConversation:(long long)arg1 hasMergedIntoConversation:(long long)arg2;
- (void)notifyNewDataAvailableForMessages:(id)arg1;
- (_Bool)_writeEmlxFile:(id)arg1 withBodyData:(id)arg2 protectionClass:(int)arg3;
- (void)setMessage:(id)arg1 isPartial:(_Bool)arg2;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(_Bool)arg2 isEncrypted:(_Bool)arg3 forMessage:(id)arg4;
- (void)setFlagsFromDictionary:(id)arg1 forMessagesInMailboxURLString:(id)arg2;
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)updateFlagsForMessagesInPlace:(id)arg1 success:(_Bool *)arg2;
- (void)setFlagsForMessages:(id)arg1 mask:(unsigned long long)arg2;
- (void)setFlags:(unsigned long long)arg1 forMessage:(id)arg2;
- (void)applicationWillResume;
- (void)applicationWillSuspend;
- (void)invalidateAndWait;
- (void)dealloc;
- (id)initWithPath:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFMailMessageLibraryMigrator : NSObject
{
}

- (_Bool)migrateWithSQLiteConnection:(id)arg1;

@end

@interface MFMailMessageRelationshipAnalyzer : NSObject
{
    NSArray *_messages;
    NSArray *_relationships;
}

+ (_Bool)isMessage:(id)arg1 sentByAddress:(id)arg2;
+ (id)myEmailAddresses;
+ (_Bool)isMessage:(id)arg1 forwardOfMessage:(id)arg2 myEmailAddresses:(id)arg3;
+ (_Bool)isMessageDraft:(id)arg1;
+ (id)recipientsOfMessage:(id)arg1;
+ (_Bool)isMessage:(id)arg1 addressedToMailingListForMessage:(id)arg2;
+ (_Bool)isMessage:(id)arg1 addressedToPreviousSender:(id)arg2;
+ (_Bool)isMessage:(id)arg1 responseToMessage:(id)arg2 previousSenders:(id)arg3 myEmailAddresses:(id)arg4;
+ (unsigned long long)relationOfMessage:(id)arg1 toMessage:(id)arg2 previousSenders:(id)arg3 myEmailAddresses:(id)arg4;
+ (unsigned long long)relationOfMessage:(id)arg1 toMessage:(id)arg2;
+ (id)sendersOfMessage:(id)arg1;
+ (id)analyzeMessages:(id)arg1 myEmailAddresses:(id)arg2;
+ (id)analysisOfConversation:(id)arg1;
- (unsigned long long)relationOfMessage:(id)arg1;
- (void)dealloc;
- (id)initWithMessages:(id)arg1 relationships:(id)arg2;

@end

@interface MFMailMimePart : MFMimePart
{
}

+ (Class)attachmentClass;
+ (_Bool)isRecognizedClassForContent:(id)arg1;
- (id)contentToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long *)arg2 downloadIfNecessary:(_Bool)arg3 asHTML:(_Bool)arg4 isComplete:(_Bool *)arg5;
- (_Bool)_shouldContinueDecodingProcess;
- (id)storeData:(id)arg1 inMessage:(id)arg2 isComplete:(_Bool)arg3;
- (void)configureFileWrapper:(id)arg1;
- (id)fileWrapperForDecodedObject:(id)arg1 withFileData:(id *)arg2;
- (id)fileWrapperForcingDownload:(_Bool)arg1;
- (id)decodeMultipartAppledouble;
- (id)decodeTextCalendar;
- (id)decodeTextPlain;
- (id)htmlContent;
- (id)htmlContentToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long *)arg2;
- (id)htmlContentToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long *)arg2 downloadIfNecessary:(_Bool)arg3;
- (id)decodeTextHtml;
- (id)decodeTextEnriched;
- (id)decodeTextRichtext;
- (id)decodeMessageExternal_body;
- (id)decodeMessagePartial;
- (id)decodeMessageRfc822;
- (id)decodeMessageDelivery_status;

@end

@interface MFMailMimeTextAttachment : MFMimeTextAttachment
{
}

- (_Bool)shouldDownloadAttachmentOnDisplay;

@end

@interface MFMailboxMessageIterationFilter : NSObject <MFMessageIterationFilter>
{
    NSIndexSet *_mailboxes;
}

- (_Bool)filterMessageWithStatement:(struct sqlite3_stmt *)arg1;
- (void)dealloc;
- (id)initWithMailboxes:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFMessageCriterion : NSObject
{
    NSString *_uniqueId;
    NSString *_criterionIdentifier;
    NSString *_expression;
    int _qualifier;
    NSArray *_criteria;
    int _dateUnitType;
    NSString *_name;
    unsigned int _allCriteriaMustBeSatisfied:1;
    unsigned int _dateIsRelative:1;
    unsigned int _includeRelatedMessages:1;
    int _type;
    NSArray *_requiredHeaders;
    _Bool _useFlaggedForUnreadCount;
    _Bool _expressionIsSanitized;
    NSIndexSet *_libraryIdentifiers;
}

+ (id)orCompoundCriterionWithCriteria:(id)arg1;
+ (id)andCompoundCriterionWithCriteria:(id)arg1;
+ (id)notCriterionWithCriterion:(id)arg1;
+ (id)todayMessageCriterion;
+ (id)hasAttachmentsCriterion;
+ (id)includesMeCriterion;
+ (id)unreadMessageCriterion;
+ (id)flaggedMessageCriterion;
+ (id)ThreadNotifyMessageCriterion;
+ (id)VIPSenderMessageCriterion;
+ (id)messageIsServerSearchResultCriterion:(_Bool)arg1;
+ (id)messageIsDeletedCriterion:(_Bool)arg1;
+ (id)criterionForMailboxURL:(id)arg1;
+ (id)stringForCriterionType:(int)arg1;
+ (int)criterionTypeForString:(id)arg1;
+ (void)_updateAddressComments:(id)arg1;
+ (id)defaultsArrayFromCriteria:(id)arg1;
+ (id)criteriaFromDefaultsArray:(id)arg1 removingRecognizedKeys:(_Bool)arg2;
+ (id)criteriaFromDefaultsArray:(id)arg1;
@property(nonatomic) _Bool expressionIsSanitized; // @synthesize expressionIsSanitized=_expressionIsSanitized;
@property(nonatomic) _Bool includeRelatedMessages; // @synthesize includeRelatedMessages=_includeRelatedMessages;
@property(nonatomic) _Bool useFlaggedForUnreadCount; // @synthesize useFlaggedForUnreadCount=_useFlaggedForUnreadCount;
@property(retain, nonatomic) NSIndexSet *libraryIdentifiers; // @synthesize libraryIdentifiers=_libraryIdentifiers;
- (id)emailAddressesForGroupCriterion;
- (id)simplifiedCriterion;
- (id)simplifyOnce;
- (void)setDateIsRelative:(_Bool)arg1;
- (_Bool)dateIsRelative;
- (void)setDateUnits:(int)arg1;
- (int)dateUnits;
- (void)setAllCriteriaMustBeSatisfied:(_Bool)arg1;
- (_Bool)allCriteriaMustBeSatisfied;
- (void)setCriteria:(id)arg1;
- (id)criteria;
- (id)stringForMessageRuleQualifier:(int)arg1;
- (int)messageRuleQualifierForString:(id)arg1;
- (_Bool)doesMessageSatisfyCriterion:(id)arg1;
- (_Bool)_evaluateDateCriterion:(id)arg1;
- (_Bool)_evaluateAddressHistoryCriterion:(id)arg1;
- (_Bool)_evaluateAccountCriterion:(id)arg1;
- (_Bool)_evaluateAttachmentCriterion:(id)arg1;
- (_Bool)_evaluatePriorityIsLowCriterion:(id)arg1;
- (_Bool)_evaluatePriorityIsHighCriterion:(id)arg1;
- (_Bool)_evaluatePriorityIsNormalCriterion:(id)arg1;
- (_Bool)_evaluateIsEncryptedCriterion:(id)arg1;
- (_Bool)_evaluateIsDigitallySignedCriterion:(id)arg1;
- (_Bool)_evaluateFullNameCriterion:(id)arg1;
- (_Bool)_evaluateAddressBookCriterion:(id)arg1;
- (_Bool)_evaluateSenderHeaderCriterion:(id)arg1;
- (_Bool)_evaluateHeaderCriterion:(id)arg1;
- (_Bool)_evaluateFlagCriterion:(id)arg1;
- (_Bool)_evaluateCompoundCriterion:(id)arg1;
- (id)_headersRequiredForEvaluation;
- (void)setName:(id)arg1;
- (id)name;
- (void)setExpression:(id)arg1;
- (id)expression;
- (void)setQualifier:(int)arg1;
- (int)qualifier;
- (id)_qualifierString;
- (void)setCriterionIdentifier:(id)arg1;
- (id)criterionIdentifier;
- (void)setCriterionType:(int)arg1;
- (int)criterionType;
- (id)dictionaryRepresentation;
- (id)description;
- (id)descriptionWithDepth:(unsigned int)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 andRemoveRecognizedKeysIfMutable:(_Bool)arg2;
- (id)initWithDictionary:(id)arg1;
- (id)initWithType:(int)arg1 qualifier:(int)arg2 expression:(id)arg3;
- (id)initWithCriterion:(id)arg1 expression:(id)arg2;
- (id)init;
- (id)extractedUnreadCriterion;
- (id)extractedDateCriterion;
- (id)criterionByApplyingTransform:(CDUnknownBlockType)arg1;
- (_Bool)includesCriterionSatisfyingPredicate:(CDUnknownFunctionPointerType)arg1 restrictive:(_Bool)arg2;
- (id)criteriaSatisfyingPredicate:(CDUnknownFunctionPointerType)arg1;
- (void)_addCriteriaSatisfyingPredicate:(CDUnknownFunctionPointerType)arg1 toCollector:(id)arg2;
- (unsigned int)bestBaseTable;
- (id)SQLExpressionWithTables:(unsigned int *)arg1 baseTable:(unsigned int)arg2 protectedDataAvailable:(_Bool)arg3 contentIndex:(id)arg4 mailboxIDs:(id)arg5;
- (id)_resolveWithIndex:(id)arg1 mailboxIDs:(id)arg2;
- (id)_collapsedMessageNumberCriterion:(id)arg1 allMustBeSatisfied:(_Bool)arg2 collapsedIndexes:(id *)arg3;
- (id)_evaluateFTSCriterionWithIndex:(id)arg1 mailboxIDs:(id)arg2;
- (id)criterionForSQL;
- (id)_criterionForSQL;
- (_Bool)hasLibraryIDCriterion;
- (id)SQLExpressionWithContext:(CDStruct_f28f5ac0 *)arg1 depth:(unsigned int)arg2;
- (id)fixOnce;
- (_Bool)isFullTextSearchableCriterion;
- (_Bool)hasNonFullTextSearchableCriterion;

@end

@interface MFMessageDetails : NSObject
{
    MFMessageLibrary *library;
    unsigned int libraryID;
    unsigned long long messageFlags;
    unsigned int uid;
    unsigned int encoding;
    _Bool isInvalid;
    unsigned int mailboxID;
    long long conversationHash;
    long long messageIDHash;
    unsigned int dateReceived;
    unsigned int dateSent;
    NSString *externalID;
}

- (id)externalID;
- (id)copyMessageInfo;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateReceivedAsTimeIntervalSince1970;
- (id)mailbox;
- (id)messageID;
- (unsigned long long)messageFlags;
- (long long)messageIDHash;
- (unsigned int)mailboxID;
- (unsigned int)libraryID;
- (id)remoteID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)init;
- (unsigned int)uid;
- (id)description;
- (void)dealloc;

@end

@interface MFMessageInfo : NSObject
{
    unsigned int _flagged:1;
    unsigned int _read:1;
    unsigned int _deleted:1;
    unsigned int _uidIsLibraryID:1;
    unsigned int _hasAttachments:1;
    unsigned int _isVIP:1;
    unsigned int _uid;
    unsigned int _dateReceivedInterval;
    unsigned int _dateSentInterval;
    unsigned int _mailboxID;
    long long _conversationHash;
    long long _generationNumber;
}

+ (long long)newGenerationNumber;
@property(readonly, nonatomic) long long generationNumber; // @synthesize generationNumber=_generationNumber;
@property(nonatomic) unsigned int mailboxID; // @synthesize mailboxID=_mailboxID;
@property(nonatomic) long long conversationHash; // @synthesize conversationHash=_conversationHash;
@property(nonatomic) unsigned int dateSentInterval; // @synthesize dateSentInterval=_dateSentInterval;
@property(nonatomic) unsigned int dateReceivedInterval; // @synthesize dateReceivedInterval=_dateReceivedInterval;
@property(nonatomic) unsigned int uid; // @synthesize uid=_uid;
- (id)description;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (long long)generationCompare:(id)arg1;
- (id)initWithUid:(unsigned int)arg1 mailboxID:(unsigned int)arg2 dateReceivedInterval:(unsigned int)arg3 dateSentInterval:(unsigned int)arg4 conversationHash:(long long)arg5 read:(_Bool)arg6 knownToHaveAttachments:(_Bool)arg7 flagged:(_Bool)arg8 isVIP:(_Bool)arg9;
- (id)init;
@property(nonatomic) _Bool isVIP;
@property(nonatomic, getter=isKnownToHaveAttachments) _Bool knownToHaveAttachments;
@property(nonatomic) _Bool uidIsLibraryID;
@property(nonatomic) _Bool deleted;
@property(nonatomic) _Bool flagged;
@property(nonatomic) _Bool read;

@end

@interface MFMessageKeychainManager : NSObject
{
}

+ (id)newTrustManager;
+ (int)actionForEncryptionCertificate:(struct __SecCertificate *)arg1 address:(id)arg2;
+ (int)actionForSigningIdentity:(struct __SecIdentity *)arg1 address:(id)arg2;
+ (int)_actionForCertificate:(struct __SecCertificate *)arg1 policy:(struct __SecPolicy *)arg2 uncommentedAddress:(id)arg3;
+ (id)saveEncryptionCertificate:(struct __SecCertificate *)arg1 forAddress:(id)arg2;
+ (id)_removeCertificateForPersistent:(id)arg1;
+ (id)_addPersistentMapping:(id)arg1 forAddress:(id)arg2;
+ (struct __SecCertificate *)_copyCertificateForPersistent:(id)arg1 error:(id *)arg2;
+ (id)_addCertificate:(struct __SecCertificate *)arg1 persistent:(id *)arg2;
+ (struct __SecCertificate *)copyEncryptionCertificateForAddress:(id)arg1 error:(id *)arg2;
+ (_Bool)_validateIdentity:(struct __SecIdentity *)arg1 forAddress:(id)arg2 policy:(struct __SecPolicy *)arg3 usage:(unsigned int)arg4 error:(id *)arg5;
+ (_Bool)validateEncryptionIdentity:(struct __SecIdentity *)arg1 forAddress:(id)arg2 error:(id *)arg3;
+ (_Bool)validateSigningIdentity:(struct __SecIdentity *)arg1 forAddress:(id)arg2 error:(id *)arg3;
+ (id)_copyAllIdentitiesWithError:(id *)arg1 usingBlock:(CDUnknownBlockType)arg2;
+ (id)copyAllEncryptionIdentitiesForAddress:(id)arg1 error:(id *)arg2;
+ (id)copyAllSigningIdentitiesForAddress:(id)arg1 error:(id *)arg2;
+ (struct __SecIdentity *)copyClientSSLIdentityForHostName:(id)arg1 error:(id *)arg2;
+ (_Bool)_matchSSLClientIdentity:(struct __SecIdentity *)arg1 withHostname:(id)arg2;
+ (id)persistentReferenceForIdentity:(struct __SecIdentity *)arg1 error:(id *)arg2;
+ (struct __SecIdentity *)copyIdentityForPersistentReference:(id)arg1 error:(id *)arg2;
+ (struct __SecPolicy *)copySMIMEEncryptionPolicyForAddress:(id)arg1;
+ (struct __SecPolicy *)copySMIMESigningPolicyForAddress:(id)arg1;
+ (void)removePasswordForServiceName:(id)arg1 accountName:(id)arg2;
+ (void)setPassword:(id)arg1 forServiceName:(id)arg2 accountName:(id)arg3 keychainAccessibility:(void *)arg4;
+ (_Bool)addPassword:(id)arg1 forServiceName:(id)arg2 accountName:(id)arg3 keychainAccessibility:(void *)arg4 synchronizable:(_Bool)arg5 error:(id *)arg6;
+ (id)passwordForServiceName:(id)arg1 accountName:(id)arg2;
+ (id)passwordForServiceName:(id)arg1 accountName:(id)arg2 error:(id *)arg3;
+ (id)passwordForServiceName:(id)arg1 accountName:(id)arg2 synchronizable:(_Bool)arg3 error:(id *)arg4;
+ (id)_passwordForGenericAccount:(id)arg1 service:(id)arg2 error:(id *)arg3;
+ (void)removePasswordForHost:(id)arg1 username:(id)arg2 port:(int)arg3 keychainProtocol:(void *)arg4;
+ (void)setPassword:(id)arg1 forHost:(id)arg2 username:(id)arg3 port:(int)arg4 keychainProtocol:(void *)arg5 keychainAccessibility:(void *)arg6;
+ (id)passwordForHost:(id)arg1 username:(id)arg2 port:(int)arg3 keychainProtocol:(void *)arg4;
+ (id)_passwordForHost:(id)arg1 username:(id)arg2 port:(int)arg3 keychainProtocol:(struct __CFString *)arg4;
+ (void)initialize;

@end

@interface MFMessageSigner : NSObject
{
    int _status;
    struct __SecTrust *_trust;
    NSString *_sender;
    NSString *_uncommentedSender;
}

@property(readonly, nonatomic) NSString *sender; // @synthesize sender=_sender;
- (_Bool)hasTrustException;
- (void)removeTrustException;
- (void)addTrustException;
- (struct __SecTrust *)copyTrust;
@property(readonly, nonatomic) MFError *error;
@property(readonly, nonatomic) NSArray *certificates;
@property(readonly, nonatomic) int action;
@property(readonly, nonatomic) NSString *emailAddress;
@property(readonly, nonatomic) NSString *commonName;
- (void)dealloc;
- (id)initWithSender:(id)arg1 trust:(struct __SecTrust *)arg2 verification:(int)arg3;

@end

@interface MFMessageURLConnectionDelegate : NSObject <NSURLConnectionDelegate>
{
    NSMutableData *_responseBody;
    _Bool _done;
    NSError *_error;
    NSURLResponse *_response;
}

- (void)dealloc;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFMessageWriter : NSObject
{
    Class _messageClassToInstantiate;
    unsigned int _allows8BitMimeParts:1;
    unsigned int _allowsBinaryMimeParts:1;
    unsigned int _writeSizeDispositionParameter:1;
    unsigned int _allowsQuotedPrintable:1;
    id _delegate;
    NSDictionary *_compositionSpecification;
}

@property(readonly, nonatomic) NSDictionary *compositionSpecification; // @synthesize compositionSpecification=_compositionSpecification;
@property(nonatomic) id delegate; // @synthesize delegate=_delegate;
- (void)setMessageClassToInstantiate:(Class)arg1;
- (void)setWriteSizeDispositionParameter:(_Bool)arg1;
- (void)setAllowsQuotedPrintable:(_Bool)arg1;
- (_Bool)allowsQuotedPrintable;
- (void)setAllowsBinaryMimeParts:(_Bool)arg1;
- (_Bool)allowsBinaryMimeParts;
- (void)setAllows8BitMimeParts:(_Bool)arg1;
- (_Bool)allows8BitMimeParts;
- (id)createMessageWithHtmlString:(id)arg1 attachments:(id)arg2 headers:(id)arg3;
- (id)createMessageWithHtmlString:(id)arg1 plainTextAlternative:(id)arg2 otherHtmlStringsAndAttachments:(id)arg3 charsets:(id)arg4 headers:(id)arg5;
- (id)createMessageWithHtmlString:(id)arg1 plainTextAlternative:(id)arg2 otherHtmlStringsAndAttachments:(id)arg3 headers:(id)arg4;
- (id)createMessageWithPlainTextDocumentsAndAttachments:(id)arg1 headers:(id)arg2;
- (id)createMessageWithString:(id)arg1 headers:(id)arg2;
- (void)appendDataForMimePart:(id)arg1 toData:(id)arg2 withPartData:(id)arg3;
- (void)dealloc;
- (id)initWithCompositionSpecification:(id)arg1;
- (id)init;

@end

@interface MFMimeEnrichedReader : NSObject
{
    struct {
        unsigned short buffer[64];
        struct __CFString *theString;
        unsigned short *directUniCharBuffer;
        char *directCStringBuffer;
        struct {
            long long location;
            long long length;
        } rangeToBuffer;
        long long bufferedRangeStart;
        long long bufferedRangeEnd;
    } _inputBuffer;
    long long _currentIndex;
    long long _inputLength;
    unsigned int _noFillLevel:30;
    unsigned int _eatOneNewline:1;
    unsigned int _insideComment:1;
    unsigned int _wantsPlainText:1;
    int _lastQuoteLevel;
    struct __CFArray *_commandStack;
    id _outputString;
    NSMutableString *_outputBuffer;
    struct __CFString *_prependHTML;
    struct __CFString *_postpendHTML;
    float _indentWidth;
}

+ (struct __CFCharacterSet *)parenSet;
+ (struct __CFCharacterSet *)punctuationSet;
- (id)description;
- (void)convertEnrichedString:(id)arg1 intoOutputString:(id)arg2;
- (void)convertRichTextString:(id)arg1 intoOutputString:(id)arg2;
- (int)readTokenInto:(id *)arg1;
- (void)appendNewLine:(id)arg1;
- (id)currentFont;
- (void)parseParameterString:(id)arg1;
- (void)endCommand:(id)arg1;
- (void)beginCommand:(id)arg1;
- (void)setupFontStackEntry:(struct _CommandStackEntry *)arg1;
- (void)handleNoParameterCommand:(const CDStruct_3441fd00 *)arg1;
- (void)closeUpQuoting;
- (void)nowWouldBeAGoodTimeToAppendToTheAttributedString;
- (void)resetStateWithString:(id)arg1 outputString:(id)arg2;
- (void)appendStringToBuffer:(id)arg1;
- (void)dealloc;
- (void)mismatchError:(id)arg1;
- (void)setWantsHTML:(_Bool)arg1;

@end

@interface MFMimePart (SMIMEDecoding)
- (id)decodeApplicationPkcs7_mime;
- (id)decodeMultipartSigned;
@end

@interface MFMimePart (SMIMEDecodingPrivate)
- (_Bool)_needsSignatureVerification:(id *)arg1;
- (void)_setSigners:(id)arg1;
- (void)_setSMIMEError:(id)arg1;
@end

@interface MFMimePart (SMIMEEncoding)
- (id)newEncryptedPartWithData:(id)arg1 compositionSpecification:(id)arg2 encryptedData:(id *)arg3;
- (id)newSignedPartWithData:(id)arg1 sender:(id)arg2 compositionSpecification:(id)arg3 signatureData:(id *)arg4;
@end

@interface MFMimePart (SMIMESupport)
- (id)copySigners;
- (id)SMIMEError;
@end

@interface MFMonitoredInvocation : NSInvocation
{
    MFActivityMonitor *_monitor;
    _Bool _shouldLogInvocation;
    _Bool _isLowPriority;
}

+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 taskName:(id)arg5 priority:(int)arg6 canBeCancelled:(_Bool)arg7;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3 taskName:(id)arg4 priority:(int)arg5 canBeCancelled:(_Bool)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 taskName:(id)arg3 priority:(int)arg4 canBeCancelled:(_Bool)arg5;
+ (id)invocationWithMethodSignature:(id)arg1;
@property(nonatomic) _Bool isLowPriority; // @synthesize isLowPriority=_isLowPriority;
@property(readonly, nonatomic) MFActivityMonitor *monitor; // @synthesize monitor=_monitor;
- (id)description;
- (void)invoke;
- (void)setShouldLogInvocation:(_Bool)arg1;
- (_Bool)mf_shouldLogInvocation;
- (void)dealloc;

@end

@interface MFNetworkController : NSObject <RadiosPreferencesDelegate>
{
    NSLock *_lock;
    struct __CFRunLoop *_rl;
    NSThread *_thread;
    NSMutableArray *_observers;
    struct __SCNetworkReachability *_reachability;
    unsigned int _flags;
    struct __SCDynamicStore *_store;
    struct __CFRunLoopSource *_store_source;
    _Bool _dns;
    struct __CTServerConnection *_telephony;
    NSMutableSet *_calls;
    NSMutableSet *_backgroundWifiClients;
    int _interface;
    struct __SCPreferences *_wiFiPreferences;
    _Bool _hasCellDataCapability;
    _Bool _hasWiFiCapability;
    _Bool _isWiFiEnabled;
    _Bool _isRoamingAllowed;
    _Bool _data;
    NSString *_dataIndicator;
    RadiosPreferences *_radiosPreferences;
    NSObject<OS_dispatch_queue> *_prefsQueue;
}

+ (id)networkAssertionWithIdentifier:(id)arg1;
+ (id)sharedInstance;
- (id)copyDiagnosticInformation;
- (void)removeBackgroundWifiClient:(id)arg1;
- (void)addBackgroundWifiClient:(id)arg1;
- (void)_updateWifiClientType;
- (void)removeNetworkObserver:(id)arg1;
- (id)addNetworkObserverBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
- (id)_networkAssertionWithIdentifier:(id)arg1;
- (void)_handleWiFiNotification:(unsigned int)arg1;
- (void)_handleNotification:(id)arg1 info:(id)arg2 forConnection:(struct __CTServerConnection *)arg3;
- (void)_setDataStatus_nts:(id)arg1;
- (void)_checkKeys:(id)arg1 forStore:(struct __SCDynamicStore *)arg2;
- (void)_setFlags:(unsigned int)arg1 forReachability:(struct __SCNetworkReachability *)arg2;
- (_Bool)is4GConnection;
- (_Bool)is3GConnection;
- (_Bool)inAirplaneMode;
- (_Bool)isOnWWAN;
- (_Bool)isFatPipe;
- (_Bool)isNetworkUp;
- (_Bool)_isNetworkUp_nts;
- (_Bool)isDataAvailable;
- (int)dataStatus;
- (_Bool)_simulationOverrideForType:(unsigned long long)arg1 actualValue:(_Bool)arg2;
- (void)invalidate;
- (void)dealloc;
- (void)_tearDownTelephony_nts;
- (void)_setUpTelephony_nts;
- (CDStruct_1ef3fb1f)_pollDataAndCallStatus_nts;
- (void)_inititializeWifiManager;
- (id)init;
- (void)airplaneModeChanged;

@end

@interface MFOfflineCacheReplayContext : NSObject
{
    NSString *_selectedMailboxID;
    NSMutableDictionary *_translatedIDsByTemporaryID;
    NSMutableDictionary *_failureSnapshotsByTemporaryID;
}

@property(readonly, nonatomic) NSMutableDictionary *failureSnapshotsByTemporaryID; // @synthesize failureSnapshotsByTemporaryID=_failureSnapshotsByTemporaryID;
@property(readonly, nonatomic) NSMutableDictionary *translatedIDsByTemporaryID; // @synthesize translatedIDsByTemporaryID=_translatedIDsByTemporaryID;
@property(copy, nonatomic) NSString *selectedMailboxID; // @synthesize selectedMailboxID=_selectedMailboxID;
- (void)dealloc;
- (id)init;

@end

@interface MFOfflineTransferFailureSnapshot : NSObject <NSCoding>
{
    NSString *_originalRemoteID;
    NSString *_originalMailboxID;
    unsigned long long _originalMessageFlags;
}

@property(readonly, nonatomic) unsigned long long originalMessageFlags; // @synthesize originalMessageFlags=_originalMessageFlags;
@property(readonly, nonatomic) NSString *originalMailboxID; // @synthesize originalMailboxID=_originalMailboxID;
@property(readonly, nonatomic) NSString *originalRemoteID; // @synthesize originalRemoteID=_originalRemoteID;
- (id)description;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithOriginalRemoteID:(id)arg1 mailboxID:(id)arg2 messageFlags:(unsigned long long)arg3;

@end

@interface MFOutgoingMessage : MFMailMessage
{
    MFMessageBody *_messageBody;
    MFMutableMessageHeaders *_messageHeaders;
}

- (unsigned long long)messageSize;
- (id)headersIfAvailable;
- (id)headers;
- (void)setMutableHeaders:(id)arg1;
- (id)mutableHeaders;
- (_Bool)messageData:(id *)arg1 messageSize:(unsigned long long *)arg2 isComplete:(_Bool *)arg3 downloadIfNecessary:(_Bool)arg4;
- (id)messageData;
- (id)messageBodyIfAvailable;
- (id)messageBody;
- (id)messageStore;
- (void)setMessageBody:(id)arg1;
- (void)dealloc;

@end

@interface MFOutgoingMessageDelivery : NSObject
{
    MFMessage *_message;
    MFMutableMessageHeaders *_headers;
    NSArray *_mixedContent;
    _Bool _textPartsAreHTML;
    NSString *_htmlBody;
    MFPlainTextDocument *_plainTextAlternative;
    NSArray *_otherHTMLAndAttachments;
    NSArray *_charsets;
    id <MFDeliveryDelegate> _delegate;
    MailAccount *_archiveAccount;
    DeliveryAccount *_deliveryAccount;
    NSDictionary *_compositionSpecification;
    MFMailDelivery *_currentDeliveryObject;
    _Bool _isUserRequested;
    unsigned long long _conversationFlags;
    long long _originalConversationId;
}

+ (id)newWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
+ (id)newWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;
+ (id)newWithMessage:(id)arg1;
@property(nonatomic) _Bool isUserRequested; // @synthesize isUserRequested=_isUserRequested;
@property(nonatomic) long long originalConversationId; // @synthesize originalConversationId=_originalConversationId;
@property(nonatomic) unsigned long long conversationFlags; // @synthesize conversationFlags=_conversationFlags;
@property(retain, nonatomic) NSDictionary *compositionSpecification; // @synthesize compositionSpecification=_compositionSpecification;
- (void)setAccount:(id)arg1;
- (void)setArchiveAccount:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)account;
- (id)_deliveryAccountForInitializers;
- (id)message;
- (int)deliveryStatus;
- (id)deliverSynchronously;
- (id)_deliverSynchronouslyWithCurrentSettings:(_Bool)arg1;
- (id)originalHeaders;
- (id)_currentDeliveryObject;
- (void)dealloc;
- (id)initWithHeaders:(id)arg1 HTML:(id)arg2 plainTextAlternative:(id)arg3 other:(id)arg4 charsets:(id)arg5;
- (id)initWithHeaders:(id)arg1 mixedContent:(id)arg2 textPartsAreHTML:(_Bool)arg3;
- (id)initWithMessage:(id)arg1;

@end

@interface MFPlainAuthScheme : MFAuthScheme
{
}

- (id)humanReadableName;
- (id)name;
- (_Bool)canAuthenticateAccountClass:(Class)arg1 connection:(id)arg2;
- (id)authenticatorForAccount:(id)arg1 connection:(id)arg2;
- (Class)authenticatorClass;

@end

@interface MFPlainTextDocument : NSObject
{
    NSMutableString *_text;
    NSMutableArray *_fragments;
}

- (void)appendArchivedRepresentation:(id)arg1;
- (id)archivedRepresentation;
- (id)string;
- (void)getString:(id *)arg1 quoteLevel:(unsigned int *)arg2 ofFragmentAtIndex:(unsigned long long)arg3;
- (unsigned long long)fragmentCount;
- (void)appendString:(id)arg1 withQuoteLevel:(unsigned int)arg2;
- (void)dealloc;
- (id)quotedString:(unsigned int)arg1;
- (void)getFormatFlowedString:(id *)arg1 insertedTrailingSpaces:(_Bool *)arg2 encoding:(unsigned int)arg3;

@end

@interface MFPlainTextFragment : NSObject
{
    struct _NSRange _range;
    unsigned int _quoteLevel;
}

@end

@interface MFPowerController : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_powerQueue;
    int _pluggedIn;
    int _powerToken;
    unsigned int _appState;
    NSCountedSet *_identifiers;
}

+ (void)powerlog:(id)arg1 eventData:(id)arg2;
+ (id)sharedInstance;
- (id)copyDiagnosticInformation;
- (void)recordDuetEventForAccount:(id)arg1 event:(id)arg2;
- (void)_deleteDuetAttributesForAccountWithUniqueId:(id)arg1;
- (id)duetIdentifier;
- (void)_initDuet;
- (void)_applicationStateChanged:(id)arg1;
- (void)releaseAssertionWithIdentifier:(id)arg1;
- (void)retainAssertionWithIdentifier:(id)arg1 withAccount:(id)arg2;
- (void)retainAssertionWithIdentifier:(id)arg1;
- (void)_releaseAssertion_nts;
- (void)_retainAssertion_nts;
- (void)_setupAssertionTimer:(double)arg1;
- (_Bool)isPluggedIn;
- (void)_setPluggedIn:(unsigned int)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MFProgressiveMimeParser : NSObject
{
    NSMutableData *_data;
    NSArray *_preserveHeaders;
    id _delegate;
    id _context;
    unsigned long long _cursor;
    unsigned long long _lastLength;
    MFMimePart *_topLevelPart;
    MFMimePart *_currentPart;
    NSData *_currentBoundary;
    struct {
        unsigned int delegateBeganMimePart:1;
        unsigned int delegateFinishedMimePart:1;
        unsigned int delegateBeganData:1;
        unsigned int delegateFailed:1;
        unsigned int state:3;
    } _parserFlags;
}

- (void)_reportError:(id)arg1;
- (void)_continueParsing;
- (void)_continueParsingBody;
- (id)_currentBoundary;
- (void)_continueParsingHeaders;
- (void)_continueParsingStartOfPart;
- (void)_initializeTopLevelPartWithHeaders:(id)arg1;
- (id)data;
- (id)currentPart;
- (id)topLevelPart;
- (void)noteDataLengthChanged:(unsigned int)arg1;
- (id)context;
- (void)setContext:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)start;
- (void)dealloc;
- (id)initWithBodyData:(id)arg1 topLevelHeaders:(id)arg2 headersToPreserve:(id)arg3;

@end

@interface MFSQLiteConnection : NSObject
{
    NSString *_path;
    struct sqlite3 *_db;
    NSString *_databaseName;
    struct __CFDictionary *_statementCache;
    void *_ICUSearchContext;
    void *_CPSearchContext;
    int _transactionType;
    unsigned long long _transactionCount;
}

@property(readonly, nonatomic) struct sqlite3 *db; // @synthesize db=_db;
- (int)rollbackTransaction;
- (int)commitTransaction;
- (int)beginTransactionWithType:(int)arg1;
- (int)beginTransaction;
- (struct sqlite3_stmt *)preparedStatementForPattern:(id)arg1;
- (void)flush;
- (_Bool)isOpen;
- (void)close;
- (int)open;
- (const char *)_vfsModuleName;
- (void)dealloc;
- (id)initWithPath:(id)arg1 databaseName:(id)arg2;

@end

@interface MFProtectedSQLiteConnection : MFSQLiteConnection
{
    NSString *_protectedName;
    long long _vfsOnce;
    NSString *_vfsName;
    _Bool _attached;
}

@property(readonly, nonatomic) _Bool isProtectedDatabaseAttached; // @synthesize isProtectedDatabaseAttached=_attached;
- (int)detachProtectedDatabase;
- (int)attachProtectedDatabase;
- (void)close;
- (const char *)_vfsModuleName;
- (void)dealloc;
- (id)initWithPath:(id)arg1 databaseName:(id)arg2 protectedName:(id)arg3;

@end

@interface MFRFC822AttachmentDataProvider : NSObject <MFAttachmentDataProvider>
{
    NSData *_messageData;
    MFMimePart *_parentPart;
    MFMailMessage *_message;
}

- (id)messageForAttachment:(id)arg1;
- (_Bool)fetchDataForAttachment:(id)arg1 withDataConsumer:(id)arg2 error:(id *)arg3;
- (id)fetchLocalDataForAttachment:(id)arg1;
- (void)dealloc;
- (id)initWithMessageData:(id)arg1 parentPart:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFSMTPConnection : MFConnection
{
    MFSMTPResponse *_lastResponse;
    NSMutableArray *_serviceExtensions;
    NSMutableData *_mdata;
    NSString *_domainName;
    NSString *_saveSentMbox;
    int _originalSocketTimeout;
    long long _lastCommandTimestamp;
    id _delegate;
    _Bool _hideLoggedData;
    _Bool _useSaveSent;
    _Bool _dislikesSaveSentMbox;
}

- (void)setUseSaveSent:(_Bool)arg1 toFolder:(id)arg2;
- (_Bool)_supportsSaveSentExtension;
- (id)lastResponseLine;
- (void)_setLastResponse:(id)arg1;
- (_Bool)_supportsExtension:(id)arg1;
- (_Bool)_hasParameter:(id)arg1 forKeyword:(id)arg2;
- (int)_doHandshakeUsingAccount:(id)arg1;
- (_Bool)_connectUsingAccount:(id)arg1;
- (int)_readResponseRange:(struct _NSRange *)arg1 isContinuation:(_Bool *)arg2;
- (int)_getReply;
- (int)_sendCommand:(const char *)arg1 length:(unsigned long long)arg2 argument:(id)arg3 trailer:(const char *)arg4;
- (id)_dataForCommand:(const char *)arg1 length:(unsigned long long)arg2 argument:(id)arg3 trailer:(const char *)arg4;
- (int)_sendData:(id)arg1 progressHandler:(CDUnknownBlockType)arg2;
- (int)_sendData:(id)arg1;
- (int)_sendBytes:(const char *)arg1 length:(unsigned long long)arg2 progressHandler:(CDUnknownBlockType)arg3;
- (long long)timeLastCommandWasSent;
- (int)mailFrom:(id)arg1 recipients:(id)arg2 withData:(id)arg3 host:(id)arg4 errorTitle:(id *)arg5 errorMessage:(id *)arg6 serverResponse:(id *)arg7 displayError:(_Bool *)arg8 errorCode:(int *)arg9;
- (id)dataForDataCmd;
- (id)dataForRcptTo:(id)arg1;
- (id)dataForMailFrom:(id)arg1;
- (void)abort;
- (int)quit;
- (int)sendData:(id)arg1;
- (int)sendBData:(id)arg1;
- (int)noop;
- (int)rcptTo:(id)arg1;
- (int)mailFrom:(id)arg1;
- (_Bool)connectUsingAccount:(id)arg1;
- (_Bool)authenticateUsingAccount:(id)arg1 authenticator:(id)arg2;
- (_Bool)authenticateUsingAccount:(id)arg1;
- (id)authenticationMechanisms;
- (unsigned long long)maximumMessageBytes;
- (_Bool)supportsChunking;
- (_Bool)supportsEnhancedStatusCodes;
- (_Bool)supportsBinaryMime;
- (_Bool)supports8BitMime;
- (_Bool)supportsPipelining;
- (_Bool)supportsOutboxCopy;
- (void)setDomainName:(id)arg1;
- (id)domainName;
- (id)lastResponse;
- (int)state;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)init;

@end

@interface MFSMTPDelivery : MFMailDelivery
{
    MFSMTPConnection *_connection;
}

- (id)deliverMessageData:(id)arg1 toRecipients:(id)arg2;
- (void)setAccount:(id)arg1;
- (void)_openConnection;
- (Class)deliveryClass;
- (void)dealloc;

@end

@interface MFSMTPResponse : NSObject <NSCopying>
{
    id _lastResponseLine;
    int _status;
    unsigned int _statusClass:10;
    unsigned int _statusSubject:10;
    unsigned int _statusDetail:10;
    NSString *_statusString;
    NSArray *_continuationResponses;
}

@property(retain, nonatomic) NSArray *continuationResponses; // @synthesize continuationResponses=_continuationResponses;
@property(readonly, nonatomic) NSString *statusString; // @synthesize statusString=_statusString;
@property(readonly, nonatomic) unsigned int statusDetail; // @synthesize statusDetail=_statusDetail;
@property(readonly, nonatomic) unsigned int statusSubject; // @synthesize statusSubject=_statusSubject;
@property(readonly, nonatomic) unsigned int statusClass; // @synthesize statusClass=_statusClass;
@property(readonly, nonatomic) int status; // @synthesize status=_status;
- (id)description;
- (id)errorMessageWithAddress:(id)arg1 defaultMessage:(id)arg2;
- (int)failureReason;
- (void)setLastResponseLine:(id)arg1;
- (id)lastResponseLine;
- (void)_updateEnhancedStatusCodesFromLastResponse;
- (void)dealloc;
- (void)setStatus:(int)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithStatus:(int)arg1;

@end

@interface MFSQLiteConnectionPool : NSObject
{
    id <MFSQLiteConnectionPoolDelegate> _delegate;
    NSLock *_cacheLock;
    NSMutableSet *_cache;
    unsigned long long _cacheSize;
    unsigned long long _cacheGeneration;
    unsigned long long _maxConcurrentBackgroundReaders;
    unsigned long long _maxConcurrentWriters;
    NSLock *_checkoutLock;
    struct __CFDictionary *_checkoutMap;
    NSObject<OS_dispatch_semaphore> *_backgroundReaderSemaphore;
    int _backgroundReadersWaiting;
    NSObject<OS_dispatch_semaphore> *_writerSemaphore;
    int _writersWaiting;
}

@property(readonly) unsigned long long maxConcurrentBackgroundReaders; // @synthesize maxConcurrentBackgroundReaders=_maxConcurrentBackgroundReaders;
@property id <MFSQLiteConnectionPoolDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) unsigned long long writersWaiting;
@property(readonly) unsigned long long backgroundReadersWaiting;
@property(readonly) unsigned long long maxConcurrentWriters;
- (unsigned long long)maxConcurrentReaders;
@property unsigned long long cacheSize;
- (void)flush;
- (void)checkInConnection:(id)arg1;
- (id)_semaphoreForConnectionType:(unsigned long long)arg1 waitCounter:(int **)arg2;
- (id)_connectionWithType:(unsigned long long)arg1;
- (id)writerConnection;
- (id)readerConnection;
- (id)backgroundReaderConnection;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 maxConcurrentBackgroundReaders:(unsigned long long)arg2;

@end

@interface MFSecureMIMECompositionManager : NSObject
{
    id <MFSecureMIMECompositionManagerDelegate> _delegate;
    NSLock *_lock;
    NSObject<OS_dispatch_queue> *_queue;
    MailAccount *_sendingAccount;
    NSString *_sendingAddress;
    struct __SecIdentity *_signingIdentity;
    MFError *_signingIdentityError;
    struct __SecIdentity *_encryptionIdentity;
    MFError *_encryptionIdentityError;
    NSMutableSet *_recipients;
    NSMutableDictionary *_errorsByRecipient;
    NSMutableDictionary *_certificatesByRecipient;
    int _signingPolicy;
    int _encryptionPolicy;
    int _signingStatus;
    int _encryptionStatus;
    unsigned long long _encryptionStatusSemaphore;
    unsigned long long _signingStatusSemaphore;
    _Bool _invalidated;
}

+ (id)copyEncryptionCertificatesForAccount:(id)arg1 recipientAddress:(id)arg2 error:(id *)arg3;
+ (struct __SecIdentity *)copyEncryptionIdentityForAccount:(id)arg1 sendingAddress:(id)arg2 error:(id *)arg3;
+ (struct __SecIdentity *)copySigningIdentityForAccount:(id)arg1 sendingAddress:(id)arg2 error:(id *)arg3;
- (_Bool)_shouldAllowSend_nts;
- (_Bool)_shouldEncrypt_nts;
- (_Bool)_shouldSign_nts;
- (_Bool)shouldAllowSend;
- (id)compositionSpecification;
@property(readonly) NSSet *recipients;
@property(readonly) int encryptionStatus;
- (void)_notifyDelegateEncryptionStatusDidChange:(int)arg1 certsByRecipient:(id)arg2 errorsByRecipient:(id)arg3 identity:(struct __SecIdentity *)arg4 error:(id)arg5;
- (void)_setEncryptionIdentityError_nts:(id)arg1;
- (_Bool)_updateEncryptionStatus_nts;
- (void)_determineEncryptionStatusWithNewRecipients:(id)arg1;
- (void)_determineEncryptionStatusWithSendingAddress:(id)arg1;
@property(readonly) int signingStatus;
- (void)_setSigningIdentityError_nts:(id)arg1;
- (_Bool)_updateSigningStatus_nts;
- (void)_notifyDelegateSigningStatusDidChange:(int)arg1 identity:(struct __SecIdentity *)arg2 error:(id)arg3;
- (void)_determineSigningStatusWithSendingAddress:(id)arg1;
@property(readonly) int encryptionPolicy;
@property(readonly) int signingPolicy;
@property(readonly) MailAccount *sendingAccount;
@property(copy) NSString *sendingAddress;
@property id <MFSecureMIMECompositionManagerDelegate> delegate;
- (void)invalidate;
- (void)removeRecipients:(id)arg1;
- (void)addRecipients:(id)arg1;
- (void)dealloc;
- (id)initWithSendingAccount:(id)arg1 signingPolicy:(int)arg2 encryptionPolicy:(int)arg3;
- (id)initWithSigningPolicy:(int)arg1 encryptionPolicy:(int)arg2;
- (id)init;

@end

@interface MFSignatures : NSObject
{
}

+ (id)sharedInstance;
- (id)stripSignatureMarkup:(id)arg1;
- (id)signaturePlainTextFormat:(id)arg1;
- (id)signatureMarkupFormat:(id)arg1;
- (id)signaturePlainTextForSendingEmailAddress:(id)arg1;
- (id)signatureMarkupForSendingEmailAddress:(id)arg1;
- (void)setSignature:(id)arg1 forEmailAddress:(id)arg2;
- (id)signatureForSendingEmailAddress:(id)arg1;
- (void)setSignature:(id)arg1 forAccount:(id)arg2;
- (id)signatureForAccount:(id)arg1;
- (void)setUseAccountSignatures:(_Bool)arg1;
- (_Bool)useAccountSignatures;
- (void)clearSignature;
- (void)setSignature:(id)arg1;
- (id)signature;
- (void)_setValue:(id)arg1 value:(void *)arg2;
- (id)_getValue:(id)arg1;
- (id)defaultSignature;
- (id)_modelSpecificLocalizedStringKeyForKey:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MFSparseMutable64IndexSet : NSObject <NSCopying, NSMutableCopying>
{
    unsigned int _count;
    unsigned int _storageSize;
    unsigned int _cursor;
    unsigned long long *_storage;
}

+ (id)indexSet;
- (id)description;
- (unsigned long long)indexGreaterThanIndex:(unsigned long long)arg1;
- (unsigned long long)firstIndex;
- (unsigned long long)count;
- (_Bool)containsIndex:(unsigned long long)arg1;
- (void)removeIndex:(unsigned long long)arg1;
- (void)addIndexes:(id)arg1;
- (void)addIndex:(unsigned long long)arg1;
- (unsigned long long)_insertionPositionOfIndex:(unsigned long long)arg1;
- (unsigned long long)_positionOfIndex:(unsigned long long)arg1;
- (void)_garbageCollectStorageIfNecessary;
- (void)_incrementStorageIfNecessaryForCount:(unsigned long long)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface MFSqliteMessageIDStore : NSObject
{
    NSString *_url;
    int _mailboxRowid;
    MFMailMessageLibrary *_library;
}

- (void)dealloc;
- (unsigned long long)flagsForUID:(id)arg1;
- (void)deleteAllUIDs;
- (unsigned int)numberOfMessageIDs;
- (void)deleteUIDsNotInArray:(id)arg1;
- (id)messageIDsAddedBeforeDate:(double)arg1;
- (id)knownMessageIDsFromSet:(id)arg1;
- (void)_loadMailboxRowidIfNecessary:(struct sqlite3 *)arg1;
- (id)initWithLibrary:(id)arg1 URLString:(id)arg2;

@end

@interface MFStream : NSObject <NSStreamDelegate>
{
    NSInputStream *_rStream;
    NSOutputStream *_wStream;
    NSMutableDictionary *_properties;
    CDUnknownBlockType _callback;
    NSObject<OS_dispatch_queue> *_location;
    unsigned long long _capacity;
    unsigned long long _length;
    char *_buffer;
    NSError *_error;
    _Bool _streamCanRead;
    _Bool _streamCanWrite;
    _Bool _dispatchedBytesAvailable;
    unsigned long long _bytesRead;
    unsigned long long _bytesWritten;
    _Bool _enableThroughputMonitoring;
}

+ (id)_networkDispatchQueue;
+ (void)setNetworkThread:(id)arg1;
+ (id)networkThread;
@property(readonly, nonatomic) NSError *streamError; // @synthesize streamError=_error;
- (void)enableThroughputMonitoring:(_Bool)arg1;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)_readBytesFromStream;
- (void)close;
- (long long)write:(const char *)arg1 maxLength:(unsigned long long)arg2;
- (long long)read:(char *)arg1 maxLength:(unsigned long long)arg2;
- (void)_closeAndReleaseStream:(id)arg1 logMessage:(id)arg2;
- (void)openToHostName:(id)arg1 port:(long long)arg2;
- (_Bool)setProperty:(id)arg1 forKey:(id)arg2;
- (id)propertyForKey:(id)arg1;
- (id)_copyPropertyForKey:(id)arg1;
@property(readonly, nonatomic) _Bool isOpen;
- (void)dealloc;
- (id)initCallBack:(CDUnknownBlockType)arg1 onDispatchQueue:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MFWeakObjectCache : NSObject
{
    CDUnknownBlockType _block;
    NSMutableDictionary *_dictionary;
    NSLock *_lock;
}

- (void)removeObjectForKey:(id)arg1;
- (id)objectForKey:(id)arg1 wasCached:(_Bool *)arg2;
- (id)objectForKey:(id)arg1;
- (void)dealloc;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

@end

@interface MFWebAttachmentSource : NSObject
{
    MFLock *_attachmentsLock;
    NSMutableDictionary *_attachmentsByURL;
    NSMutableDictionary *_removedAttachmentsByURL;
}

+ (id)allSources;
+ (id)_setOfAllSources;
- (void)removeAttachmentForURL:(id)arg1;
- (_Bool)setAttachment:(id)arg1 forURL:(id)arg2;
- (id)attachmentForURL:(id)arg1 includeRemoved:(_Bool)arg2;
- (id)attachmentForURL:(id)arg1;
@property _Bool keepRemovedAttachments;
- (void)dealloc;
- (id)description;
- (id)init;

@end

@interface MFWebMessageDocument : MFWebAttachmentSource
{
    unsigned int _uniqueId;
    NSURL *_baseURL;
    MFMimeBody *_mimeBody;
    MFMimePart *_htmlPart;
    NSData *_htmlData;
    MFLock *_lock;
    NSMutableDictionary *_partsByURL;
    NSMutableDictionary *_partsByFilename;
    unsigned int _preferredEncoding;
    MFAttachmentManager *_attachmentManager;
}

+ (id)sourceForURL:(id)arg1;
@property(retain, nonatomic) MFAttachmentManager *attachmentManager; // @synthesize attachmentManager=_attachmentManager;
@property unsigned int preferredEncoding; // @synthesize preferredEncoding=_preferredEncoding;
@property(readonly) NSData *htmlData; // @synthesize htmlData=_htmlData;
@property(readonly) MFMimePart *mimePart; // @synthesize mimePart=_htmlPart;
@property(readonly) MFMimeBody *mimeBody; // @synthesize mimeBody=_mimeBody;
@property(readonly) NSURL *baseURL; // @synthesize baseURL=_baseURL;
- (id)attachmentForCID:(id)arg1;
- (id)fileWrapper;
- (id)preferredCharacterSet;
- (id)attachmentsInDocument;
- (id)attachmentForURL:(id)arg1;
- (id)mimePartForURL:(id)arg1;
- (void)dealloc;
- (id)initWithMimePart:(id)arg1 htmlData:(id)arg2 encoding:(unsigned int)arg3;
- (id)initWithMimePart:(id)arg1;
- (id)_initWithMimePart:(id)arg1 htmlData:(id)arg2;
- (id)initWithMimeBody:(id)arg1;
- (id)init;

@end

@interface NSArray (SortedMailboxes)
- (unsigned long long)mf_indexOfMailboxDictionaryWithName:(id)arg1;
@end

@interface NSDate (Goodies)
- (id)mf_replyPrefixForSender:(id)arg1;
- (id)mf_descriptionForMimeHeaders;
@end

@interface NSDictionary (Goodies)
- (int)mf_integerForKey:(id)arg1;
- (_Bool)mf_boolForKey:(id)arg1;
@end

@interface NSError (MFAccount)
- (_Bool)mf_isInaccessibleAccountCredentialError;
- (_Bool)mf_isMissingAccountCredentialError;
@end

@interface NSError (MessageAdditions)
- (id)mf_shortDescription;
- (id)mf_moreInfo;
- (_Bool)mf_shouldBeReportedToUser;
- (_Bool)mf_isUserCancelledError;
@end

@interface NSIndexSet (Additions)
- (id)mf_commaSeparatedString;
@end

@interface NSInvocation (MailExtensions)
+ (id)mf_invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4;
+ (id)mf_invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3;
+ (id)mf_invocationWithSelector:(SEL)arg1 target:(id)arg2;
- (_Bool)mf_shouldLogInvocation;
@end

@interface NSMutableDictionary (Goodies)
- (id)mf_objectForKey:(id)arg1 ofClass:(Class)arg2;
- (void)mf_addObject:(id)arg1 forKey:(id)arg2;
- (void)mf_setInteger:(int)arg1 forKey:(id)arg2;
- (void)mf_setBool:(_Bool)arg1 forKey:(id)arg2;
@end

@interface NSMutableIndexSet (Additions)
- (void)mf_intersectIndexes:(id)arg1;
@end

@interface NSNotificationCenter (MessageAdditions)
- (void)mf_removeObservers:(id)arg1;
- (id)mf_addImmediateObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3 object:(id)arg4;
@end

@interface NSObject (MainThreadMessaging)
- (void)mf_performOnewaySelectorInMainThread:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
@end

@interface NSSet (MessageAdditions)
- (id)mf_getAllObjectsAsArray;
@end

@interface NSString (FormatFlowedSupport)
- (id)mf_convertFromFlowedText:(unsigned int)arg1;
@end

@interface NSString (FormatFlowedSupportInternal)
- (unsigned long long)mf_nextWordFromIndex:(unsigned long long)arg1 forward:(_Bool)arg2;
- (unsigned long long)mf_lineBreakBeforeIndex:(unsigned long long)arg1 withinRange:(struct _NSRange)arg2;
@end

@interface NSString (MFDirectoryPathUtils)
- (_Bool)mf_isSubdirectoryOfPath:(id)arg1;
- (_Bool)mf_makeDirectoryWithMode:(int)arg1;
@end

@interface NSString (MFSharedResourcesDirectoryPathUtils)
- (id)mf_stringByAbbreviatingSharedResourcesDirectoryWithTildeInPath;
- (id)mf_stringByExpandingTildeWithSharedResourcesDirectoryInPath;
- (id)mf_betterStringByResolvingSymlinksInPath;
- (id)mf_stringByReallyAbbreviatingSharedResourcesDirectoryWithTildeInPath;
@end

@interface NSString (MimeEnrichedReader)
+ (id)mf_stringFromMimeEnrichedString:(id)arg1 asHTML:(_Bool)arg2;
+ (id)mf_stringFromMimeRichTextString:(id)arg1 asHTML:(_Bool)arg2;
@end

@interface NSString (NSStringUtils)
+ (id)mf_stringForMimeTypeFromFileName:(id)arg1;
+ (id)mf_stringWithAttachmentCharacter;
+ (id)mf_stringRepresentationForBytes:(long long)arg1;
+ (id)mf_messageIDStringWithDomainHint:(id)arg1;
+ (id)mf_UUID;
- (_Bool)mf_containsSubstring:(id)arg1 options:(unsigned long long)arg2;
- (_Bool)mf_caseInsensitiveIsEqualToString:(id)arg1;
- (id)mf_stringByReplacingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (id)mf_stringByAddingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (id)mf_stringByEscapingHTMLCodes;
- (id)mf_stringByEscapingForXML;
- (id)mf_uniqueFilenameWithRespectToFilenames:(id)arg1;
- (id)mf_stringWithNoExtraSpaces;
- (id)mf_fileSystemString;
- (unsigned int)mf_subjectPrefixLength;
- (id)mf_stringByLocalizingReOrFwdPrefix;
@end

@interface NSURL (AttachmentURLUtilities)
- (id)mf_firstPartNumber;
- (id)mf_lastPartNumber;
- (id)mf_partNumbers;
- (unsigned int)mf_rowID;
- (_Bool)mf_isValidAttachmentURL;
@end

@interface SMTPAccount : DeliveryAccount
{
    Class _deliveryClass;
    MFSMTPConnection *_connection;
    NSTimer *_timer;
    long long _lastTimerSetTime;
    unsigned int _supportsPipelining:1;
    unsigned int _supportsOutboxCopy:1;
    unsigned int _useCellDataOnly:1;
}

+ (_Bool)isCommonPortNumber:(unsigned int)arg1;
+ (id)saslProfileName;
+ (unsigned int)defaultPortNumber;
+ (void)registerAppleServiceDeliveryHostname:(id)arg1;
+ (id)newDefaultInstance;
+ (id)displayedShortAccountTypeString;
+ (id)displayedAccountTypeString;
+ (void *)legacyKeychainProtocol;
+ (id)accountTypeString;
- (void)dealloc;
- (_Bool)canBeFallbackAccount;
- (_Bool)_isAppleServiceDeliveryHostname:(id)arg1;
- (void)releaseAllForcedConnections;
- (void)releaseAllConnections;
- (void)checkInConnection:(id)arg1;
- (void)setTimer;
- (void)connectionExpired:(id)arg1;
- (void)disconnect:(id)arg1;
- (id)authenticatedConnection:(_Bool)arg1;
- (struct __CFString *)connectionServiceType;
- (void)setSupportsOutboxCopy:(_Bool)arg1;
- (_Bool)supportsOutboxCopy;
- (void)setSupportsPipelining:(_Bool)arg1;
- (_Bool)supportsPipelining;
- (id)errorForResponse:(id)arg1;
- (id)customAuthenticationErrorStringForError:(id)arg1 authScheme:(id)arg2;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)preferredAuthScheme;
- (_Bool)_shouldTryDirectSSLConnectionOnPort:(unsigned int)arg1;
- (id)alternateConnectionSettings;
- (id)insecureConnectionSettings;
- (id)secureConnectionSettings;
- (id)connectionSettingsForAuthentication:(_Bool)arg1 secure:(id)arg2 insecure:(id)arg3;
- (id)_defaultSettingsWithPort:(unsigned int)arg1 useSSL:(_Bool)arg2 directSSL:(_Bool)arg3;
- (Class)connectionClass;
- (id)serviceName;
- (void)setDeliveryClass:(Class)arg1;
- (Class)deliveryClass;
- (id)certUIService;

@end

@interface _MFActivityMonitorMultiTarget : NSObject
{
    id _primaryTarget;
    NSMutableSet *_allTargets;
}

- (id)displayName;
- (id)allTargets;
- (void)setPrimaryTarget:(id)arg1;
- (id)primaryTarget;
- (_Bool)removeActivityTarget:(id)arg1;
- (_Bool)addActivityTarget:(id)arg1;
- (void)dealloc;

@end

@interface _MFContentIndexWrapper : NSObject
{
    struct __CXIndex *_contentIndex;
    int _transactionCount;
}

- (_Bool)performTransaction:(CDUnknownBlockType)arg1;
- (struct __CXIndex *)contentIndex;
- (void)dealloc;
- (id)initWithContentIndex:(struct __CXIndex *)arg1;

@end

@interface _MFContentProtectionObserverWrapper : NSObject
{
    MFWeakReferenceHolder *_observerReference;
    NSObject<OS_dispatch_queue> *_queue;
}

@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void)dealloc;
@property(readonly, nonatomic) id <MFContentProtectionObserver> observer;
- (id)initWithObserver:(id)arg1 queue:(id)arg2;

@end

@interface _MFDADeferredDeleteMailboxOperation : MFOfflineCacheOperation <MFDADeferredFolderChangeOperation>
{
    NSString *_folderID;
}

- (id)description;
- (id)folderChangeResult;
- (void)applyToFolderMap:(id)arg1;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFolderID:(id)arg1;

@end

@interface _MFDADeferredDeleteMessageOperation : MFOfflineCacheOperation <MFDAOfflineCacheOperation>
{
    NSString *_messageID;
}

- (id)description;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDeleteMessageRequest:(id)arg1;

@end

@interface _MFDADeferredModifyMailboxOperation : MFOfflineCacheOperation <MFDADeferredFolderChangeOperation>
{
    NSString *_folderID;
    NSString *_newParentFolderID;
    NSString *_newDisplayName;
}

- (id)description;
- (id)folderChangeResult;
- (void)applyToFolderMap:(id)arg1;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFolderID:(id)arg1 newParentFolderID:(id)arg2 newDisplayName:(id)arg3;

@end

@interface _MFDADeferredNewMailboxOperation : MFOfflineCacheOperation <MFDADeferredFolderChangeOperation>
{
    NSString *_displayName;
    NSString *_parentFolderID;
    NSString *_temporaryFolderID;
}

- (id)description;
- (id)folderChangeResult;
- (void)applyToFolderMap:(id)arg1;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDisplayName:(id)arg1 parentFolderID:(id)arg2 temporaryFolderID:(id)arg3;

@end

@interface _MFDADeferredSelectMailboxOperation : MFOfflineCacheOperation <MFDAOfflineCacheOperation>
{
    NSString *_folderID;
}

- (id)description;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMailbox:(id)arg1;

@end

@interface _MFDADeferredSetFlagsOperation : MFOfflineCacheOperation <MFDAOfflineCacheOperation>
{
    unsigned long long _onFlags;
    unsigned long long _offFlags;
    NSString *_messageID;
}

- (id)description;
- (_Bool)performWithAccount:(id)arg1 offlineCache:(id)arg2;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSetFlagsRequest:(id)arg1;

@end

@interface _MFDALibraryConsumerFactory : NSObject <MFMessageDataConsumerFactory>
{
    MFMessageLibrary *_library;
    MFMessage *_message;
}

@property(retain, nonatomic) MFMessage *message; // @synthesize message=_message;
@property(retain, nonatomic) MFMessageLibrary *library; // @synthesize library=_library;
- (void)dealloc;
- (id)dataConsumerForPart:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MFDAMSBasicConsumer : MFBufferedQueue
{
    MFDAMailbox *mailbox;
    MFDAMessageStore *store;
    MFMailMessageLibrary *library;
    MFActivityMonitor *monitor;
    MFError *error;
    unsigned long long numNewMessages;
}

@property(retain, nonatomic) MFError *error; // @synthesize error;
@property(retain, nonatomic) MFActivityMonitor *monitor; // @synthesize monitor;
- (void)dealloc;
- (id)initWithMaximumSize:(unsigned int)arg1 latency:(double)arg2;

@end

@interface _MFDAMSSearchResponseConsumer : _MFDAMSBasicConsumer <DASearchQueryConsumer>
{
    NSDate *latestDateToAdd;
    MFConditionLock *doneCondition;
    double timeReceivedLastResponse;
    unsigned int totalCount;
    NSMutableArray *matchingRemoteIDs;
}

@property(readonly, retain, nonatomic) NSArray *matchingRemoteIDs; // @synthesize matchingRemoteIDs;
@property(retain, nonatomic) NSDate *latestDateToAdd; // @synthesize latestDateToAdd;
- (void)dealloc;
- (void)searchQuery:(id)arg1 returnedTotalCount:(id)arg2;
- (void)searchQuery:(id)arg1 finishedWithError:(id)arg2;
- (void)searchQuery:(id)arg1 returnedResults:(id)arg2;
- (_Bool)handleItems:(id)arg1;
- (void)resetDoneCondition;
- (void)waitUntilDone;
- (_Bool)waitUntilDoneBeforeDate:(id)arg1;
- (id)initWithMaximumSize:(unsigned int)arg1 latency:(double)arg2;

@end

@interface _MFDAMSUpdateConsumer : _MFDAMSBasicConsumer <MFDASyncActionsConsumer>
{
}

- (void)handleResponse:(id)arg1 error:(id)arg2;
- (void)commitSyncActions;
- (void)receiveSyncActions:(id)arg1;
- (_Bool)handleItems:(id)arg1;
- (void)drainMailbox;

@end

@interface _MFDAMessageBodyFetchConsumer : NSObject <MFRequestQueueResponseConsumer, DAMailAccountStreamConsumerFactory>
{
    id <MFDAStreamingContentConsumer> _streamConsumer;
    _Bool _succeeded;
    MFError *_error;
    NSData *_data;
}

@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(retain, nonatomic) MFError *error; // @synthesize error=_error;
@property(retain, nonatomic) id <MFDAStreamingContentConsumer> streamConsumer; // @synthesize streamConsumer=_streamConsumer;
- (void)dealloc;
- (id)streamingContentConsumer;
@property(readonly, nonatomic) _Bool succeeded; // @synthesize succeeded=_succeeded;
- (void)handleResponse:(id)arg1 error:(id)arg2;
- (_Bool)wantsData;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MFDAMessageFetchAttachmentConsumer : MFDAMailAccountConsumer <DAMessageFetchAttachmentConsumer>
{
    MFProgressFilterDataConsumer *_progressFilter;
    unsigned long long _expectedLength;
    unsigned long long _accumulatedLength;
    MFActivityMonitor *_monitor;
    _Bool _dataWasBase64;
    _Bool _fetchSucceeded;
}

@property(readonly) _Bool fetchSucceeded; // @synthesize fetchSucceeded=_fetchSucceeded;
@property(readonly) _Bool dataWasBase64; // @synthesize dataWasBase64=_dataWasBase64;
@property(nonatomic) unsigned long long expectedLength; // @synthesize expectedLength=_expectedLength;
@property(retain, nonatomic) MFProgressFilterDataConsumer *progressFilter; // @synthesize progressFilter=_progressFilter;
- (void)dealloc;
- (id)initWithActivityMonitor:(id)arg1;
- (void)attachmentFetchCompletedWithStatus:(long long)arg1 forAttachmentNamed:(id)arg2 ofMessageWithServerID:(id)arg3 dataWasBase64:(_Bool)arg4 sentBytesCount:(unsigned long long)arg5 receivedBytesCount:(unsigned long long)arg6;
- (void)consumeData:(id)arg1 ofContentType:(id)arg2 forAttachmentNamed:(id)arg3 ofMessageWithServerID:(id)arg4;

@end

@interface _MFDAMessageStoreDeleteRequest : DAMailboxDeleteMessageRequest <MFDAMailAccountRequest>
{
}

- (id)deferredOperation;
@property(readonly, nonatomic) _Bool isUserRequested;
@property(readonly, nonatomic) _Bool shouldSend;
- (unsigned long long)generationNumber;

@end

@interface _MFDAMessageStoreFetchRequest : DAMailboxFetchMessageRequest <MFDAMailAccountRequest>
{
    id <MFRequestQueueResponseConsumer><DAMailAccountStreamConsumerFactory> consumer;
    MFDAMessageStore *store;
    MFMessage *message;
    MFMimePart *part;
    int format;
    _Bool partial;
}

- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)deferredOperation;
@property(readonly, nonatomic) _Bool isUserRequested;
@property(readonly, nonatomic) _Bool shouldSend;
- (unsigned long long)generationNumber;

@end

@interface _MFDAMessageStoreGetUpdatesRequest : DAMailboxGetUpdatesRequest <MFDAMailAccountRequest>
{
    _Bool _isUserRequested;
}

- (_Bool)mf_alwaysReportFailures;
- (id)deferredOperation;
@property(readonly, nonatomic) _Bool isUserRequested;
@property(readonly, nonatomic) _Bool shouldSend;
- (unsigned long long)generationNumber;
- (id)initRequestForBodyFormat:(int)arg1 withBodySizeLimit:(int)arg2 isUserRequested:(_Bool)arg3;

@end

@interface _MFDAMessageStoreSearchResultBodyConsumer : NSObject <DAMailboxFetchSearchResultConsumer, DAMailboxStreamingContentConsumer>
{
    MFConditionLock *_doneCondition;
    id <MFDAStreamingContentConsumer> _streamConsumer;
    MFError *_error;
}

@property(retain, nonatomic) id <MFDAStreamingContentConsumer> streamConsumer; // @synthesize streamConsumer=_streamConsumer;
@property(retain, nonatomic) MFError *error; // @synthesize error=_error;
- (void)dealloc;
- (void)didEndStreamingForMailMessage:(id)arg1;
- (void)consumeData:(char *)arg1 length:(int)arg2 format:(int)arg3 mailMessage:(id)arg4;
- (_Bool)shouldBeginStreamingForMailMessage:(id)arg1 format:(int)arg2;
- (void)searchResultFetchedWithResponses:(id)arg1;
- (void)actionFailed:(long long)arg1 forTask:(id)arg2 error:(id)arg3;
- (void)waitUntilDone;
- (_Bool)waitUntilDoneBeforeDate:(id)arg1;
- (id)init;

@end

@interface _MFDAMessageStoreSetFlagsRequest : DAMailboxSetFlagsRequest <MFDAMailAccountRequest>
{
}

- (id)deferredOperation;
@property(readonly, nonatomic) _Bool isUserRequested;
@property(readonly, nonatomic) _Bool shouldSend;
- (unsigned long long)generationNumber;

@end

@interface _MFDAResolveRecipientsConsumer : NSObject <DAResolveRecipientsConsumer>
{
    MFConditionLock *_conditionLock;
    NSDictionary *_resolvedRecipientsByEmailAddress;
    NSError *_error;
}

- (void)actionFailed:(long long)arg1 forTask:(id)arg2 error:(id)arg3;
- (void)resolvedRecipientsByEmailAddress:(id)arg1;
- (id)waitForResolvedRecipients;
@property(readonly) NSError *error;
- (void)dealloc;
- (id)init;

@end

@interface _MFDataCollector : NSObject <MFGuaranteedCollectingDataConsumer>
{
    MFMailMessageLibrary *_library;
    MFLibraryMessage *_message;
    MFBufferedDataConsumer *_consumer;
    NSString *_part;
    _Bool _partial;
    _Bool _incomplete;
}

- (id)data;
- (void)dealloc;
- (void)done;
- (long long)appendData:(id)arg1;
- (id)pathForStorage;
- (id)initWithLibrary:(id)arg1 message:(id)arg2 part:(id)arg3 partial:(_Bool)arg4 incomplete:(_Bool)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MFDigestMD5Authenticator : MFSASLAuthenticator
{
    unsigned int _maxbuf:16;
    unsigned int _securityLevel:2;
    NSData *_expectedResponse;
    void *_cryptInfo;
}

- (void)setExpectedResponse:(id)arg1;
- (void)setCryptInfo:(void *)arg1;
- (void)setMaxBuffer:(unsigned int)arg1;
- (int)securityLevel;
- (void)setSecurityLevel:(int)arg1;
- (id)responseForServerData:(id)arg1;
- (void)setAuthenticationState:(int)arg1;
- (void)dealloc;

@end

@interface _MFFormatFlowedWriter : NSObject
{
    MFPlainTextDocument *_inputDocument;
    unsigned int _encoding;
    NSMutableString *_outputString;
    NSMutableString *_quotedString;
    unsigned int _addedTrailingSpaces:1;
    NSMutableString *_lineString;
}

+ (id)newWithPlainTextDocument:(id)arg1 encoding:(unsigned int)arg2;
- (_Bool)addedTrailingSpaces;
- (id)quotedString;
- (id)outputString;
- (void)_outputQuotedParagraph:(id)arg1 range:(struct _NSRange)arg2 withQuoteLevel:(unsigned int)arg3;
- (unsigned long long)_findLineBreakInRange:(struct _NSRange)arg1 maxCharWidthCount:(unsigned long long)arg2 endIsURL:(_Bool)arg3;
- (void)dealloc;

@end

@interface _MFLibraryContentIndexResultsCache : NSObject
{
    NSCache *_storage;
}

- (id)valueForKey:(id)arg1 valueGenerator:(CDUnknownBlockType)arg2;
- (void)_exchangeOriginalValue:(id)arg1 forKey:(id)arg2 withValue:(id)arg3;
- (void)removeAllObjects;
- (void)dealloc;
- (id)init;

@end

@interface _MFLibraryContentIndexResultsKey : NSObject
{
    MFMessageCriterion *_criterion;
    NSIndexSet *_mailboxIDs;
}

@property(copy, nonatomic) NSIndexSet *mailboxIDs; // @synthesize mailboxIDs=_mailboxIDs;
@property(retain, nonatomic) MFMessageCriterion *criterion; // @synthesize criterion=_criterion;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;

@end

@interface _MFLibrarySQLiteConnectionWrapper : NSObject
{
    MFProtectedSQLiteConnection *_connection;
    _Bool _writer;
    unsigned long long _refcount;
}

+ (id)wrapperWithConnection:(id)arg1 forWriting:(_Bool)arg2;
@property(readonly, nonatomic) unsigned long long refcount; // @synthesize refcount=_refcount;
@property(readonly, nonatomic) _Bool writer; // @synthesize writer=_writer;
@property(readonly, nonatomic) MFProtectedSQLiteConnection *connection; // @synthesize connection=_connection;
- (unsigned long long)decrementRefcount;
- (unsigned long long)incrementRefcount;
- (void)dealloc;
- (id)initWithConnection:(id)arg1 forWriting:(_Bool)arg2;

@end

@interface _MFLoginAuthenticator : MFSASLAuthenticator
{
    _Bool _justSentPassword;
}

- (_Bool)justSentPlainTextPassword;
- (id)responseForServerData:(id)arg1;
- (id)saslName;

@end

@interface _MFMailboxUidChildrenEnumerator : NSEnumerator
{
    NSMutableArray *_mailboxes;
    unsigned long long _index;
    _Bool _includeHidden;
}

- (id)nextObject;
- (id)_initWithMailbox:(id)arg1 includeHiddenChildren:(_Bool)arg2;
- (void)dealloc;

@end

@interface _MFMailboxUidEnumerator : NSEnumerator
{
    NSMutableArray *_mailboxes;
    unsigned long long _index;
}

- (id)nextObject;
- (id)initWithMailbox:(id)arg1;
- (void)dealloc;

@end

@interface _MFMessageCollector : NSObject <MessageConsumer, QueryProgressMonitor>
{
    NSMutableArray *_messages;
    MFActivityMonitor *_monitor;
    CDUnknownBlockType _transmogrifier;
}

@property(copy, nonatomic) CDUnknownBlockType transmogrifier; // @synthesize transmogrifier=_transmogrifier;
- (_Bool)shouldCancel;
- (void)newMessagesAvailable:(id)arg1;
- (id)copyMessages;
- (id)messages;
- (void)dealloc;
- (id)init;

@end

@interface _MFMessageFlags : NSObject <NSCoding>
{
    unsigned long long realFlags;
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface _MFNetworkObserver : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    CDUnknownBlockType _block;
}

- (void)execute;
- (void)dealloc;
- (id)initWithBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;

@end

@interface _MFOutgoingMessageBody : MFMessageBody <MFCollectingDataConsumer>
{
    MFBufferedDataConsumer *_consumer;
    NSData *_rawData;
    unsigned long long _count;
    _Bool _lastNewLine;
}

- (id)data;
- (void)done;
- (long long)appendData:(id)arg1;
- (id)rawData;
- (_Bool)isLastCharacterNewLine;
- (unsigned long long)count;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MFPlainAuthenticator : MFSASLAuthenticator
{
}

- (_Bool)justSentPlainTextPassword;
- (id)responseForServerData:(id)arg1;
- (id)saslName;

@end

@interface _MFReplaceTemporaryIDForTransferFailureReplayContextTransformation : NSObject <MFOfflineCacheReplayContextTransformation>
{
    NSString *_temporaryID;
    NSString *_newTemporaryID;
}

- (void)applyToReplayContext:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithTemporaryID:(id)arg1 newTemporaryID:(id)arg2;

@end

@interface _MFRootlessMailboxUid : MFMailboxUid
{
}

- (id)storeForMailboxUid:(id)arg1;
- (id)tildeAbbreviatedPath;
- (id)fullPath;
- (id)displayName;

@end

@interface _MFSQLiteConnectionWrapper : NSObject
{
    MFSQLiteConnection *_connection;
    unsigned long long _generation;
    unsigned long long _type;
}

@property(nonatomic) unsigned long long type; // @synthesize type=_type;
@property(readonly, nonatomic) unsigned long long generation; // @synthesize generation=_generation;
@property(readonly, nonatomic) MFSQLiteConnection *connection; // @synthesize connection=_connection;
- (void)dealloc;
- (id)initWithConnection:(id)arg1 generation:(unsigned long long)arg2;

@end

@interface _MFSecCMSDecoder : NSObject <MFCollectingDataConsumer>
{
    int _SecCMSError;
    struct SecCmsMessageStr *_message;
    struct SecCmsDigestContextStr *_digest;
    NSArray *_signers;
    struct SecCmsSignedDataStr *_signedData;
    struct SecCmsEnvelopedDataStr *_envelopedData;
    _Bool _isEncrypted;
}

@property(readonly, nonatomic) NSArray *signers; // @synthesize signers=_signers;
@property(readonly, nonatomic) int lastSecCMSError; // @synthesize lastSecCMSError=_SecCMSError;
- (id)signedData;
- (_Bool)isContentSigned;
- (_Bool)isContentEncrypted;
- (id)verifyAgainstSenders:(id)arg1 signingError:(id *)arg2;
- (id)data;
- (void)done;
- (long long)appendData:(id)arg1;
- (void)dealloc;
- (id)initWithPartData:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MFSecCMSEncoder : MFBufferedDataConsumer
{
    int _SecCMSError;
    struct SecCmsEncoderStr *_encoder;
    struct SecCmsMessageStr *_message;
    NSMutableData *_singleShot;
}

@property(readonly, nonatomic) int lastSecCMSError; // @synthesize lastSecCMSError=_SecCMSError;
- (id)data;
- (void)_appendBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)done;
- (long long)appendData:(id)arg1;
- (void)dealloc;
- (id)initForEncryptionWithCompositionSpecification:(id)arg1 error:(id *)arg2;
- (id)initForSigningWithSender:(id)arg1 compositionSpecification:(id)arg2 error:(id *)arg3;

@end

@interface _MFSecDataMessageStore : MFDataMessageStore
{
}

+ (Class)classForMimePart;

// Remaining properties
@property(copy, nonatomic) NSString *storagePath;

@end

@interface _MFSelectMailboxReplayContextTransformation : NSObject <MFOfflineCacheReplayContextTransformation>
{
    NSString *_mailboxID;
}

- (void)applyToReplayContext:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMailboxID:(id)arg1;

@end

@interface _MFSocket : NSObject
{
    NSCondition *_condition;
    MFStream *_stream;
    NSString *_protocol;
    NSString *_host;
    NSString *_service;
    struct __CFString *_connectionServiceType;
    NSInvocation *_eventHandler;
    NSArray *_clientCertificates;
    int _lowThroughputCounter;
    int _numTimeoutSecs;
    _Bool _allowsTrustPrompt;
    _Bool _usesOpportunisticSockets;
    _Bool _socketCanRead;
    _Bool _socketCanWrite;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_accountIdentifier;
}

@property(copy, nonatomic) NSString *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(retain, nonatomic) NSArray *clientCertificates; // @synthesize clientCertificates=_clientCertificates;
@property(nonatomic) _Bool usesOpportunisticSockets; // @synthesize usesOpportunisticSockets=_usesOpportunisticSockets;
@property(nonatomic) _Bool allowsTrustPrompt; // @synthesize allowsTrustPrompt=_allowsTrustPrompt;
@property(nonatomic) int timeout; // @synthesize timeout=_numTimeoutSecs;
- (void)enableThroughputMonitoring:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isCellularConnection;
@property(readonly, nonatomic) NSData *sourceIPAddress;
@property(readonly, nonatomic) unsigned int remotePortNumber;
@property(readonly, nonatomic) NSString *remoteHostname;
- (void)setEventHandler:(id)arg1;
- (long long)readBytes:(char *)arg1 length:(unsigned long long)arg2;
- (long long)writeBytes:(const char *)arg1 length:(unsigned long long)arg2;
- (unsigned int)_bufferedByteCount;
- (_Bool)connectToHost:(id)arg1 withPort:(unsigned int)arg2 service:(id)arg3;
@property(readonly, nonatomic) _Bool isValid;
@property(readonly, nonatomic) _Bool isWritable;
@property(readonly, nonatomic) _Bool isReadable;
- (void)abort;
- (void)dealloc;
- (id)init;
- (void)setConnectionServiceType:(struct __CFString *)arg1;
@property(readonly, nonatomic) NSArray *serverCertificates;
- (_Bool)setSecurityProtocol:(id)arg1;
- (id)securityProtocol;
- (_Bool)_startSSLHandshakeWithProtocol:(id)arg1 disableSSL2:(_Bool)arg2 errorPtr:(id *)arg3;

@end

@interface _MFTransferFailureReplayContextTransformation : NSObject <MFOfflineCacheReplayContextTransformation>
{
    NSString *_temporaryID;
    MFOfflineTransferFailureSnapshot *_snapshot;
}

- (void)applyToReplayContext:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithTemporaryID:(id)arg1 transferFailureSnapshot:(id)arg2;

@end

@interface _MFTranslateTemporaryIDReplayContextTransformation : NSObject <MFOfflineCacheReplayContextTransformation>
{
    NSString *_temporaryID;
    NSString *_translatedID;
}

- (void)applyToReplayContext:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithTemporaryID:(id)arg1 translatedID:(id)arg2;

@end

