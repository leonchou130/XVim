//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct NSMutableArray {
    Class _field1;
};

struct XRSQLQueryDefinition {
    char *_field1;
    unsigned char _field2;
    struct XRSQLSchemaColumn _field3[0];
};

struct XRSQLSchemaColumn {
    int _field1;
    char *_field2;
};

struct XRSQLTableDefinition {
    struct __CFString *_field1;
    unsigned char _field2;
    struct XRSQLSchemaColumn _field3[0];
};

struct XRSpaceDataToken {
    Class _field1;
};

struct XRTimeRange {
    unsigned long long start;
    unsigned long long length;
};

struct XRTimeValue {
    unsigned long long value;
    unsigned long long units;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct bitset<23> {
    unsigned long long __first_;
};

struct sqlite3_index_constraint {
    int _field1;
    unsigned char _field2;
    unsigned char _field3;
    int _field4;
};

struct sqlite3_index_constraint_usage {
    int _field1;
    unsigned char _field2;
};

struct sqlite3_module {
    int _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownFunctionPointerType _field13;
    CDUnknownFunctionPointerType _field14;
    CDUnknownFunctionPointerType _field15;
    CDUnknownFunctionPointerType _field16;
    CDUnknownFunctionPointerType _field17;
    CDUnknownFunctionPointerType _field18;
    CDUnknownFunctionPointerType _field19;
    CDUnknownFunctionPointerType _field20;
    CDUnknownFunctionPointerType _field21;
    CDUnknownFunctionPointerType _field22;
    CDUnknownFunctionPointerType _field23;
};

#pragma mark Named Unions

union XRSQLValueScalarUnion {
    long long asInt;
    double asFloat;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks/DTInstrumentsX.framework/Versions/A/DTInstrumentsX
// UUID: 6026103F-BF05-3647-B098-E20586518C48
//
//                           Arch: x86_64
//                Current version: 56156.0.0
//          Compatibility version: 1.0.0
//                 Source version: 56156.0.0.0.0
//       Minimum Mac OS X version: 10.9.0
//                    SDK version: 10.10.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../
//                               = /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks
//                       Run path: @loader_path/../../../../../../../SharedFrameworks
//                               = /Applications/Xcode.app/Contents/SharedFrameworks
//                       Run path: @loader_path/../../../../../../../OtherFrameworks
//                               = /Applications/Xcode.app/Contents/OtherFrameworks
//                       Run path: @loader_path/../../../../../../../Developer/Library/Frameworks
//                               = /Applications/Xcode.app/Contents/Developer/Library/Frameworks
//                       Run path: /Applications/Xcode.app/Contents/Developer/Library/Frameworks
//                               = /Applications/Xcode.app/Contents/Developer/Library/Frameworks
//                       Run path: @loader_path/../../../../../../
//                               = /Applications/Xcode.app/Contents/Applications
//

@protocol NSAnimationDelegate <NSObject>

@optional
- (void)animation:(NSAnimation *)arg1 didReachProgressMark:(float)arg2;
- (float)animation:(NSAnimation *)arg1 valueForProgress:(float)arg2;
- (void)animationDidEnd:(NSAnimation *)arg1;
- (void)animationDidStop:(NSAnimation *)arg1;
- (BOOL)animationShouldStart:(NSAnimation *)arg1;
@end

@protocol NSCacheDelegate <NSObject>

@optional
- (void)cache:(NSCache *)arg1 willEvictObject:(id)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMenuDelegate <NSObject>

@optional
- (struct CGRect)confinementRectForMenu:(NSMenu *)arg1 onScreen:(NSScreen *)arg2;
- (void)menu:(NSMenu *)arg1 willHighlightItem:(NSMenuItem *)arg2;
- (void)menuDidClose:(NSMenu *)arg1;
- (void)menuWillOpen:(NSMenu *)arg1;
- (BOOL)menuHasKeyEquivalent:(NSMenu *)arg1 forEvent:(NSEvent *)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)menu:(NSMenu *)arg1 updateItem:(NSMenuItem *)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (long long)numberOfItemsInMenu:(NSMenu *)arg1;
- (void)menuNeedsUpdate:(NSMenu *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (NSArray *)outlineView:(NSOutlineView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItems:(NSArray *)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(NSOutlineView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 writeItems:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(NSArray *)arg4;
- (id <NSPasteboardWriting>)outlineView:(NSOutlineView *)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (id)outlineView:(NSOutlineView *)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 byItem:(id)arg4;
- (id)outlineView:(NSOutlineView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(NSOutlineView *)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSOutlineViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)outlineViewItemDidCollapse:(NSNotification *)arg1;
- (void)outlineViewItemWillCollapse:(NSNotification *)arg1;
- (void)outlineViewItemDidExpand:(NSNotification *)arg1;
- (void)outlineViewItemWillExpand:(NSNotification *)arg1;
- (void)outlineViewSelectionIsChanging:(NSNotification *)arg1;
- (void)outlineViewColumnDidResize:(NSNotification *)arg1;
- (void)outlineViewColumnDidMove:(NSNotification *)arg1;
- (void)outlineViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)outlineView:(NSOutlineView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayOutlineCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 isGroupItem:(id)arg2;
- (NSCell *)outlineView:(NSOutlineView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (id)outlineView:(NSOutlineView *)arg1 nextTypeSelectMatchFromItem:(id)arg2 toItem:(id)arg3 forString:(NSString *)arg4;
- (NSString *)outlineView:(NSOutlineView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (double)outlineView:(NSOutlineView *)arg1 heightOfRowByItem:(id)arg2;
- (NSString *)outlineView:(NSOutlineView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)outlineView:(NSOutlineView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)outlineView:(NSOutlineView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectItem:(id)arg2;
- (BOOL)selectionShouldChangeInOutlineView:(NSOutlineView *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (void)outlineView:(NSOutlineView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)outlineView:(NSOutlineView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)outlineView:(NSOutlineView *)arg1 rowViewForItem:(id)arg2;
- (NSView *)outlineView:(NSOutlineView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
@end

@protocol NSSplitViewDelegate <NSObject>

@optional
- (void)splitViewDidResizeSubviews:(NSNotification *)arg1;
- (void)splitViewWillResizeSubviews:(NSNotification *)arg1;
- (struct CGRect)splitView:(NSSplitView *)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(NSSplitView *)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(NSSplitView *)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (BOOL)splitView:(NSSplitView *)arg1 shouldAdjustSizeOfSubview:(NSView *)arg2;
- (void)splitView:(NSSplitView *)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(NSSplitView *)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(NSSplitView *)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(NSSplitView *)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(NSSplitView *)arg1 shouldCollapseSubview:(NSView *)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(NSSplitView *)arg1 canCollapseSubview:(NSView *)arg2;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol XRExpert <NSObject>
@end

@protocol XRUIModelChangeObserver
- (void)modelDidChange:(NSNotification *)arg1;
@end

@interface NSIndexPath (DTInstrumentsX)
- (unsigned long long)indexAtLastPosition;
@end

@interface NSNotification (XRStandardizedInfo)
+ (id)notificationWithName:(id)arg1 object:(id)arg2 processIdentifier:(int)arg3;
@property(readonly, nonatomic) int processIdentifier;
@end

@interface XRNonUISpace : XRSpace
{
}

- (id)spaceName;
- (BOOL)isOpValidForSpace:(id)arg1;

@end

@interface XRActivitySpace : XRNonUISpace
{
}

+ (id)sharedInstance;
- (id)spaceName;

@end

@interface XRAppleInternalCheckOp : NSOperation
{
    BOOL _appleInternal;
}

+ (id)sharedInstance;
@property(readonly, nonatomic, getter=isAppleInternal) BOOL appleInternal; // @synthesize appleInternal=_appleInternal;
- (void)main;

@end

@interface XRImmutableElement : NSObject
{
    struct __CFUUID *_uuid;
}

- (id)stringFromUUID;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@property(readonly, nonatomic) struct __CFUUID *uuid;
- (void)dealloc;
- (id)init;
- (id)initWithUUID:(struct __CFUUID *)arg1;
- (BOOL)isNilElement;

@end

@interface XRAttributeSet : XRImmutableElement
{
    struct bitset<23> _attrs;
}

- (id).cxx_construct;
- (id)exceptWithAttributeSet:(id)arg1;
- (id)unionWithAttributeSet:(id)arg1;
@property(readonly, nonatomic, getter=isEmpty) BOOL empty;
- (BOOL)containsAllAttributesOf:(id)arg1;
- (BOOL)containsAttribute:(int)arg1;
- (id)attributeSetByAdding:(const int *)arg1 count:(unsigned long long)arg2;
- (BOOL)hasSameAttributesAs:(id)arg1;
- (id)init;
- (id)initWithAttributes:(const int *)arg1 count:(unsigned long long)arg2;

@end

@interface XRAuthorizationOp : NSOperation
{
    int _profileAnyProcess;
    int _developerMode;
    int _prompt;
}

@property(nonatomic) int prompt; // @synthesize prompt=_prompt;
@property(readonly, nonatomic) int developerMode; // @synthesize developerMode=_developerMode;
@property(readonly, nonatomic) int profileAnyProcess; // @synthesize profileAnyProcess=_profileAnyProcess;
- (void)updateDeveloperModeStatus;
- (void)updatePrivileges;
- (void)main;

@end

@interface XRAuthorizationDeveloperModeOp : XRAuthorizationOp
{
    BOOL _enable;
}

@property(nonatomic) BOOL enable; // @synthesize enable=_enable;
- (void)main;

@end

@interface XRUIModel : NSObject <XRUIModelChangeObserver>
{
}

- (void)restoreState:(id)arg1;
- (id)saveState;
- (void)modelDidChange:(id)arg1;
- (void)registerSubXRUIModel:(id)arg1;
- (void)removeChangeObserver:(id)arg1;
- (void)addChangeObserver:(id)arg1;
- (void)notifyChange;
- (void)dealloc;
- (void)replaceStateWithMemento:(id)arg1;
- (id)generateMementoForCurrentState;

@end

@interface XRAuthorizationModel : XRUIModel
{
    struct AuthorizationOpaqueRef *_activeAuthRef;
    NSTimer *_refreshTimer;
    XRAuthorizationOp *_latestQueryOp;
    XRAuthorizationOp *_pendingUpdateQueryOp;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)incomingAuthChangeNotification:(id)arg1;
- (void)dealloc;
- (void)setDeveloperMode:(int)arg1;
- (void)revokeProfilingAnyProcess;
- (id)authorizeProfilingAnyProcess;
- (void)registerForAuthAttemptRequests;
- (void)registerForUpdates;
- (void)resetPollTimer;
- (void)postChangedAuthorizationNotification;
@property(readonly, nonatomic) int developerMode;
@property(readonly, nonatomic) int profileAnyProcess;
- (id)update;

@end

@interface XRAuthorizationRevokeOp : XRAuthorizationOp
{
}

- (void)main;

@end

@interface XRAuthorizationSpace : XRNonUISpace
{
}

+ (id)sharedInstance;
- (BOOL)isSerial;
- (id)spaceName;
- (BOOL)isOpValidForSpace:(id)arg1;

@end

@interface XRBusyModel : XRUIModel
{
    NSMutableArray *_spaces;
    BOOL _hasTimer;
    BOOL _busy;
    double _timeFilter;
}

@property(nonatomic) double timeFilter; // @synthesize timeFilter=_timeFilter;
@property BOOL busy; // @synthesize busy=_busy;
- (void).cxx_destruct;
- (void)unobserveSpace:(id)arg1;
- (void)observeSpace:(id)arg1;
- (void)_spaceQueueCountChanged:(id)arg1;
- (void)_timerFired:(id)arg1;
- (BOOL)_spacesAreBusy;
- (void)dealloc;
- (id)init;

@end

@interface XRDatasetBackedUIModel : XRUIModel
{
    NSString *_datasetName;
    XRDatasetExpertSpace *_space;
    NSMutableSet *_subsetQueryTokens;
    NSOperation *_runningRefreshHead;
    NSTimer *_stalenessWatchDog;
    NSPredicate *_filter;
    NSArray *_sortDescriptors;
    double _stalenessPeriod;
    unsigned int _prefetchRequired:1;
    long long _fetchProgress;
}

+ (void)_purgeTemplateToken:(id)arg1 fromDataSpace:(id)arg2;
@property(readonly) long long fetchProgress; // @synthesize fetchProgress=_fetchProgress;
- (void).cxx_destruct;
- (void)didAttachToDatasetSpace:(id)arg1;
- (void)willAbandonDatasetSpace:(id)arg1;
- (void)_watchdogTimerPop:(id)arg1;
- (void)_hardReset;
- (id)filteredAndSortedSelectInRange:(struct _NSRange)arg1;
@property(readonly, nonatomic) NSString *filteredAndSortedSelect;
@property(readonly, nonatomic) NSString *filteredSelect;
@property(retain, nonatomic) NSPredicate *predicate;
@property(retain, nonatomic) NSArray *sortDescriptors;
@property(nonatomic) double stalenessPeriod;
- (void)refresh;
- (void)invalidate;
- (id)subsetQueryResultsOfToken:(id)arg1;
- (void)discardSubsetQueryWithToken:(id)arg1;
- (id)tokenForSubsetQuery:(id)arg1;
- (int)stateOfSubsetWithToken:(struct XRSpaceDataToken *)arg1;
@property(retain, nonatomic) XRDatasetExpertSpace *datasetSpace;
@property(retain, nonatomic) NSString *datasetName;
- (void)dealloc;
- (id)init;

@end

@interface XRCachedDatasetUIModel : XRDatasetBackedUIModel
{
    long long _tempTableIdx;
}

- (void)willAbandonDatasetSpace:(id)arg1;
- (void)didAttachToDatasetSpace:(id)arg1;
- (id)_tempTableName;
- (id)filteredAndSortedSelect;
- (id)filteredSelect;
- (id)prefetchOperationInSpace:(id)arg1 after:(id)arg2;

@end

@interface XRDatasetAdapterCursor : NSObject
{
    BOOL isRowIDFetch;
    int timeSort;
    long long rowID;
}

@end

@interface XRDatasetAdapterTable : NSObject
{
    XRDatasetAdapterCursor *_cursorPool;
    int _randomAccess;
    BOOL _supportsTimeSorting;
    NSString *_nameInDatabase;
}

@property BOOL supportsTimeSorting; // @synthesize supportsTimeSorting=_supportsTimeSorting;
@property(retain) NSString *nameInDatabase; // @synthesize nameInDatabase=_nameInDatabase;
- (void).cxx_destruct;
- (BOOL)getColumnToEnclosureFieldMap:(const int **)arg1 count:(char *)arg2;
- (void)closeUnderlyingStorageWithMode:(int)arg1;
- (void)openUnderlyingStorageWithMode:(int)arg1;
- (void)closeCursor:(id)arg1;
- (BOOL)testForRandomAccess;
- (void)checkInCursor:(id)arg1;
- (id)checkOutCursor;

@end

@interface XRDatasetBackedTableDataSource : NSObject <NSCacheDelegate, XRUIModelChangeObserver>
{
    XRDatasetBackedUIModel *_model;
    NSCache *_pageCache;
    NSMutableSet *_subsetTokens;
    struct XRSpaceDataToken *_rowCountQuery;
    NSString *_modelSelectAllSQL;
    id _lastFilter;
    id _lastSort;
}

- (void).cxx_destruct;
- (void)cache:(id)arg1 willEvictObject:(id)arg2;
- (id)rowAtIndex:(long long)arg1;
@property(readonly) long long rowCount;
@property(retain, nonatomic) XRDatasetBackedUIModel *model;
- (void)modelDidChange:(id)arg1;
- (void)_releaseModel;
- (void)_flushCache;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRDatasetEnclosure : NSObject
{
    NSMutableIndexSet *_categoryIDs;
    NSMutableIndexSet *_threadSerialNumbers;
    NSMutableIndexSet *_cpuIDs;
    NSMutableIndexSet *_pids;
    NSMutableIndexSet *_rowIDs;
    struct XRTimeRange _timeRange;
}

+ (id)enclosureFromUTF8Descriptor:(const char *)arg1 argc:(int)arg2 argv:(struct Mem **)arg3;
+ (id)generateUTF8DescriptorFromConstraints:(const struct sqlite3_index_constraint *)arg1 updatingUsageStruct:(struct sqlite3_index_constraint_usage *)arg2 constraintCount:(int)arg3 columnMap:(const int *)arg4 columnCount:(unsigned char)arg5;
@property(readonly) struct XRTimeRange timeRange; // @synthesize timeRange=_timeRange;
@property(readonly) NSMutableIndexSet *rowIDs; // @synthesize rowIDs=_rowIDs;
@property(readonly) NSMutableIndexSet *pids; // @synthesize pids=_pids;
@property(readonly) NSMutableIndexSet *cpuIDs; // @synthesize cpuIDs=_cpuIDs;
@property(readonly) NSMutableIndexSet *threadSerialNumbers; // @synthesize threadSerialNumbers=_threadSerialNumbers;
@property(readonly) NSMutableIndexSet *categoryIDs; // @synthesize categoryIDs=_categoryIDs;
- (void).cxx_destruct;
- (id)init;

@end

@interface XRSQLStorageManager : NSObject
{
    struct sqlite3 *_db;
    NSMutableDictionary *_dataViews;
}

- (void).cxx_destruct;
- (void)failedToCreateTable:(const struct XRSQLTableDefinition *)arg1 because:(const char *)arg2;
- (id)writableTemporaryPath;
- (const char *)currentErrorUTF8;
- (void)explainQuery:(id)arg1;
- (id)queryTemplateWithName:(id)arg1 bundle:(id)arg2 usingQueryTemplateClass:(Class)arg3;
- (id)queryTemplateFromString:(id)arg1 usingQueryTemplateClass:(Class)arg2;
- (id)dataViewForName:(id)arg1;
- (void)configureDataView:(id)arg1 usingSelect:(const char *)arg2 withBindings:(struct NSMutableArray *)arg3;
- (void)bulkInsertIntoTable:(id)arg1 block:(CDUnknownBlockType)arg2;
- (id)insertTemplateForTableNamed:(id)arg1;
- (void)executeSQLNamed:(id)arg1 bundle:(id)arg2 bindings:(struct NSMutableArray *)arg3;
- (void)executeSQL:(id)arg1 bindings:(struct NSMutableArray *)arg2;
- (void)_bindAndExecSubstatement:(id)arg1 bindings:(struct NSMutableArray *)arg2;
- (void)executeSQL:(id)arg1;
- (void)setupNewDatabaseWithMigration:(id)arg1;
- (int)_migrateDBWithMigration:(id)arg1;
- (int)restoreFrom:(id)arg1 withMigration:(id)arg2;
- (void)backupTo:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRDatasetExpert : XRSQLStorageManager <XRExpert>
{
    NSMutableDictionary *_tableAdaptersByName;
    const struct sqlite3_module *_module;
}

+ (void)addAggregateFunctionsToDatabase:(struct sqlite3 *)arg1;
+ (void)addScalarFunctionsToDatabase:(struct sqlite3 *)arg1;
- (void).cxx_destruct;
- (id)moduleName;
- (void)_addVirtualTableToDatabase:(id)arg1 withName:(id)arg2;
- (void)registerFormatter:(id)arg1 functionName:(id)arg2;
- (void)addTableWithName:(id)arg1 boundToAdapter:(id)arg2;
- (void)freeModule:(const struct sqlite3_module *)arg1;
- (const struct sqlite3_module *)module;
- (void)dealloc;
- (id)init;
- (void)writeQueryResultsToFile:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRDatasetExpertOp : NSOperation
{
    XRDatasetExpert *_expert;
}

@property(retain) XRDatasetExpert *expert; // @synthesize expert=_expert;
- (void).cxx_destruct;

@end

@interface XRDatasetExpertSpace : XRNonUISpace
{
    XRDatasetExpert *_expert;
}

- (void).cxx_destruct;
- (void)addOperation:(id)arg1;
- (id)executeSQLCommandFile:(id)arg1 fromBundle:(id)arg2;
- (id)spaceName;
- (BOOL)isSerial;
@property(readonly) XRDatasetExpert *expert;
- (id)init;

@end

@interface XRTargetModel : NSObject
{
}

@end

@interface XRDeviceTargetModel : XRTargetModel
{
    NSArray *_processTargetList;
}

@property(readonly, nonatomic) NSArray *processTargetList; // @synthesize processTargetList=_processTargetList;
- (void).cxx_destruct;

@end

@interface XRDictionaryElement : XRImmutableElement
{
    NSDictionary *_contents;
}

@property(readonly) NSDictionary *contents; // @synthesize contents=_contents;
- (void).cxx_destruct;
- (id)initWithDictionary:(id)arg1;

@end

@interface XRDockMenuViewController : NSViewController <NSMenuDelegate>
{
    XRUnimportedProfileListModel *_unimportedList;
    NSMenuItem *_automaticSpinTracingMenuItem;
    NSMenuItem *_anyProcessTracingMenuItem;
    NSMenu *_processListMenu;
    NSMenu *_menu;
    NSMenuItem *_recentTimeProfileStartItem;
    NSMenuItem *_recentTimeProfileEndItem;
}

@property(retain, nonatomic) XRUnimportedProfileListModel *unimportedList; // @synthesize unimportedList=_unimportedList;
@property __weak NSMenuItem *recentTimeProfileEndItem; // @synthesize recentTimeProfileEndItem=_recentTimeProfileEndItem;
@property __weak NSMenuItem *recentTimeProfileStartItem; // @synthesize recentTimeProfileStartItem=_recentTimeProfileStartItem;
@property(retain) NSMenu *menu; // @synthesize menu=_menu;
@property __weak NSMenu *processListMenu; // @synthesize processListMenu=_processListMenu;
@property __weak NSMenuItem *anyProcessTracingMenuItem; // @synthesize anyProcessTracingMenuItem=_anyProcessTracingMenuItem;
@property __weak NSMenuItem *automaticSpinTracingMenuItem; // @synthesize automaticSpinTracingMenuItem=_automaticSpinTracingMenuItem;
- (void).cxx_destruct;
- (void)updateMenuContentsBeforeDisplay;
- (void)updateProcessListMenuBeforeDisplay;
- (void)menuNeedsUpdate:(id)arg1;
- (void)forceAuthorization:(id)arg1;
- (void)triggerTimeProfile:(id)arg1;
- (void)systemTimeProfile:(id)arg1;
- (id)nibBundle;
- (id)nibName;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRElementSetModel : XRUIModel
{
    NSMutableSet *_contents;
}

- (void).cxx_destruct;
- (void)empty;
- (long long)countOfMembersAlsoInArray:(id)arg1;
- (BOOL)containsAllMembersOfArray:(id)arg1;
- (void)removeElementsInSet:(id)arg1;
- (void)addElementsInSet:(id)arg1;
- (void)removeElement:(id)arg1;
- (void)addElement:(id)arg1;
- (id)allObjects;
@property(readonly, nonatomic) unsigned long long count;
- (id)member:(id)arg1;
- (id)_initWithContents:(id)arg1;
- (id)init;

@end

@interface XRFavoriteAppExecPreferenceElement : XRImmutableElement
{
    NSArray *_favoritesPlist;
}

- (void).cxx_destruct;
- (id)elementByModifyingName:(id)arg1 icon:(id)arg2 atSlot:(unsigned long long)arg3;
- (id)names;
- (id)iconAtSlot:(unsigned long long)arg1;
- (id)nameAtSlot:(unsigned long long)arg1;
- (BOOL)slotHasFavorite:(unsigned long long)arg1;
- (unsigned long long)numberOfSlots;
- (id)dictionary;
- (id)init;
- (id)initWithDictionary:(id)arg1;

@end

@interface XRHierarchicalModel : XRUIModel
{
    NSTreeNode *_root;
    struct __CFDictionary *_nodeByUUID;
}

- (void).cxx_destruct;
- (id)elementWithUUID:(struct __CFUUID *)arg1;
- (void)replaceElement:(id)arg1;
- (BOOL)setElement:(id)arg1 atIndexPath:(id)arg2 options:(unsigned long long)arg3;
- (BOOL)setElement:(id)arg1 atIndexPath:(id)arg2;
- (id)indexPathForImmutableElement:(id)arg1;
- (id)indexPathForUUID:(struct __CFUUID *)arg1;
- (long long)addElement:(id)arg1 underIndexPath:(id)arg2;
- (void)_addFirstElement:(id)arg1 withOtherElements:(id)arg2 toIndexPath:(id)arg3 firstElementIndex:(long long *)arg4;
- (void)empty;
- (void)pruneElementsUnderIndexPath:(id)arg1;
- (void)walk:(CDUnknownBlockType)arg1;
- (id)elementsUnderIndexPath:(id)arg1;
- (unsigned long long)numberOfElementsUnderPath:(id)arg1;
- (id)elementAtIndexPath:(id)arg1;
- (void)dealloc;

@end

@interface XRImportableDataElement : XRImmutableElement <NSCoding>
{
    NSURL *_url;
}

+ (id)elementWithContentsOfURL:(id)arg1;
@property(readonly, nonatomic) NSURL *url; // @synthesize url=_url;
- (void).cxx_destruct;
- (void)writeToURL:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithImportableDataElement:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithBaseURL:(id)arg1;
- (id)_initWithBaseURL:(id)arg1 UUID:(struct __CFUUID *)arg2;

@end

@interface XRLocalDeviceModel : XRDeviceTargetModel
{
}

@end

@interface XRNilElement : XRImmutableElement
{
}

+ (id)nilElement;
- (id)initWithUUID:(struct __CFUUID *)arg1;
- (id)init;
- (id)_init;

@end

@interface XRPerformanceSessionTraceElement : XRImportableDataElement <NSCoding>
{
    BOOL _beenSeenByUserApp;
    BOOL _failed;
    NSString *_sessionTitle;
    NSDate *_creationDate;
    NSDate *_finalizationDate;
}

@property(readonly, nonatomic) BOOL failed; // @synthesize failed=_failed;
@property(readonly, nonatomic) NSDate *finalizationDate; // @synthesize finalizationDate=_finalizationDate;
@property(readonly, nonatomic) NSDate *creationDate; // @synthesize creationDate=_creationDate;
@property(readonly, nonatomic) BOOL beenSeenByUserApp; // @synthesize beenSeenByUserApp=_beenSeenByUserApp;
@property(readonly, nonatomic) NSString *sessionTitle; // @synthesize sessionTitle=_sessionTitle;
- (void).cxx_destruct;
- (id)fullDescription;
- (BOOL)isEqual:(id)arg1;
- (id)elementWithFailedStatus:(BOOL)arg1;
- (id)elementWithFinalizationDate:(id)arg1;
- (id)elementWithSeenByUserApp:(BOOL)arg1;
@property(readonly, nonatomic) NSURL *dtpsURL;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithBaseURL:(id)arg1 sessionTitle:(id)arg2 beenSeenByUserApp:(BOOL)arg3 creationDate:(id)arg4 failed:(BOOL)arg5;
- (id)initWithPerformanceSessionTraceElement:(id)arg1;

@end

@interface XRPreferencesModel : XRUIModel
{
    XRSpinPreferenceElement *_spin;
    XRProfilingPreferenceElement *_profiling;
    NSOperation *_latestUpdateOp;
    XRFavoriteAppExecPreferenceElement *_favoriteAppExecutables;
}

+ (id)sharedPreferencesModel;
@property(retain, nonatomic) XRFavoriteAppExecPreferenceElement *favoriteAppExecutables; // @synthesize favoriteAppExecutables=_favoriteAppExecutables;
@property(retain, nonatomic) NSOperation *latestUpdateOp; // @synthesize latestUpdateOp=_latestUpdateOp;
@property(retain, nonatomic) XRProfilingPreferenceElement *profiling; // @synthesize profiling=_profiling;
@property(retain, nonatomic) XRSpinPreferenceElement *spin; // @synthesize spin=_spin;
- (void).cxx_destruct;
- (void)incomingNotification:(id)arg1;
- (void)registerForNotifications;
- (id)update;
- (void)dealloc;

@end

@interface XRProcessAndThreadListModel : XRHierarchicalModel
{
}

+ (id)pathToThreadAtIndex:(long long)arg1 processIndex:(long long)arg2;
+ (BOOL)isThreadPath:(id)arg1;
+ (BOOL)isProcessPath:(id)arg1;
- (id)attributeAtIndex:(long long)arg1 UUID:(struct __CFUUID *)arg2;
- (id)attributeAtIndex:(long long)arg1 process:(id)arg2;
- (void)setAttribute:(id)arg1 atIndex:(long long)arg2 UUID:(struct __CFUUID *)arg3;
- (void)setAttribute:(id)arg1 atIndex:(long long)arg2 process:(id)arg3;
- (void)sortByProcessNameAndPID;
- (id)processes;
- (long long)addThread:(id)arg1 underProcessIndex:(long long)arg2;
- (long long)addProcess:(id)arg1;
- (id)threadsOfProcessAtIndex:(long long)arg1 withAttributes:(id)arg2;
- (id)threadsOfProcessAtIndex:(long long)arg1;
- (id)threadsOfProcessAtIndexPath:(id)arg1;
- (id)_threadsAtProcessIndex:(long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (BOOL)containsThreadWithAttribute:(int)arg1;

@end

@interface XRProcessElement : XRImmutableElement
{
    int _pid;
    NSImage *_icon;
    NSString *_name;
    XRAttributeSet *_attributes;
}

@property(readonly, nonatomic) XRAttributeSet *attributes; // @synthesize attributes=_attributes;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) NSImage *icon; // @synthesize icon=_icon;
@property(readonly, nonatomic) int pid; // @synthesize pid=_pid;
- (void).cxx_destruct;
- (id)elementReplacingAttributes:(id)arg1;
- (id)standardizedName;
- (id)initWithPID:(int)arg1 name:(id)arg2 icon:(id)arg3;
- (id)initWithPID:(int)arg1 name:(id)arg2 icon:(id)arg3 attributes:(id)arg4;
- (id)initWithPID:(int)arg1 name:(id)arg2 icon:(id)arg3 attributes:(id)arg4 uuid:(struct __CFUUID *)arg5;

@end

@interface XRProcessTargetModel : XRTargetModel
{
}

@end

@interface XRProfilingPreferenceElement : XRImmutableElement
{
    struct XRTimeValue _duration;
    struct XRTimeValue _samplePeriod;
}

+ (id)elementFromDictionary:(id)arg1;
@property(readonly, nonatomic) struct XRTimeValue samplePeriod; // @synthesize samplePeriod=_samplePeriod;
@property(readonly, nonatomic) struct XRTimeValue duration; // @synthesize duration=_duration;
- (id)elementWithSamplePeriod:(struct XRTimeValue)arg1;
- (id)elementWithDuration:(struct XRTimeValue)arg1;
- (id)dictionary;

@end

@interface XRRelocationDetector : NSObject
{
    NSURL *_originalBundlePathURL;
    NSURL *_mainBundleFileRefURL;
    struct __FSEventStream *_fsEventStream;
    NSOperation *_snapshotMainBundleURLOp;
    id <XRRelocationDetectorDelegate> _delegate;
}

@property(nonatomic) __weak id <XRRelocationDetectorDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)dealloc;
- (void)recordCurrentMainBundleLocation;
- (void)watchFileSystemForChanges;
- (BOOL)mainBundleHasBeenMovedToFilePathURL:(id *)arg1;

@end

@interface XRRestrictionSet : NSObject
{
}

@end

@interface XRSQLQueryTemplate : NSObject
{
    struct sqlite3_stmt *_stmt;
}

- (id)computeExtrasForRow:(struct sqlite3_stmt *)arg1;
- (void)bindExtraVariables:(struct sqlite3_stmt *)arg1;
- (void)executeWithBindings:(struct NSMutableArray *)arg1 enumerateResultsWith:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithPreparedStatement:(struct sqlite3_stmt *)arg1;

@end

@interface XRSQLDictionaryQuery : XRSQLQueryTemplate
{
    struct XRSQLQueryDefinition *_def;
    const struct __CFString **_keys;
}

- (id)dictionaryResultsWithBindings:(struct NSMutableArray *)arg1;
- (void)dealloc;
- (id)initWithPreparedStatement:(struct sqlite3_stmt *)arg1;

@end

@interface XRSQLInsertTemplate : NSObject
{
    struct sqlite3_stmt *_stmt;
    unsigned char _columnCount;
}

@property(readonly) unsigned char columnCount; // @synthesize columnCount=_columnCount;
- (void)insertTuple:(struct NSMutableArray *)arg1;
- (void)dealloc;
- (id)initWithTableNamed:(id)arg1 inDatabase:(struct sqlite3 *)arg2;
- (id)init;

@end

@interface XRSQLValue : NSObject
{
    int _kind;
    union XRSQLValueScalarUnion _scalar;
    id _object;
}

+ (id)nullValue;
+ (id)newValueWithIndexSet:(id)arg1;
+ (id)newValueWithString:(id)arg1;
+ (id)newValueWithData:(id)arg1;
+ (id)newValueWithFloat:(double)arg1;
+ (id)newValueWithInteger:(long long)arg1;
@property(retain) id _object; // @synthesize _object;
- (void).cxx_destruct;

@end

@interface XRScreenWatermarkController : NSWindowController <NSAnimationDelegate>
{
    NSViewAnimation *_windowFadeAnimation;
    NSTimer *_autoCloseDelay;
    NSTextField *_messageField;
    NSImageView *_imageField;
}

+ (id)watermarkImageForPurpose:(int)arg1;
+ (struct CGRect)preferedContentRectForScreen:(id)arg1;
@property __weak NSImageView *imageField; // @synthesize imageField=_imageField;
@property __weak NSTextField *messageField; // @synthesize messageField=_messageField;
- (void).cxx_destruct;
- (void)close;
- (void)windowDidLoad;
- (id)windowNibName;
- (void)animationDidEnd:(id)arg1;
@property(readonly, nonatomic, getter=isClosing) BOOL closing;
- (void)displayMessage:(id)arg1 purpose:(int)arg2;
- (void)dealloc;
- (id)initWithWindow:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRScreenWatermarkTextCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface XRScreenWatermarkView : NSImageView
{
}

- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRSetupCommonPathsOp : NSOperation
{
    NSDistributedLock *_unimportedTraceLock;
    NSURL *_unimportedTraceArea;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSURL *unimportedTraceArea; // @synthesize unimportedTraceArea=_unimportedTraceArea;
- (void).cxx_destruct;
- (void)unlockUnimportedTraceArea;
- (void)lockUnimportedTraceArea;
- (void)main;

@end

@interface XRSpinPreferenceElement : XRImmutableElement
{
    BOOL _enabled;
}

+ (id)elementFromDictionary:(id)arg1;
@property(readonly, nonatomic, getter=isEnabled) BOOL enabled; // @synthesize enabled=_enabled;
- (id)elementWithEnabled:(BOOL)arg1;
- (id)dictionary;

@end

@interface XRThreadCountLabel : NSView
{
}

- (long long)tag;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface XRThreadElement : XRImmutableElement
{
    unsigned int _serialNumber;
    NSString *_representativeSymbol;
    XRAttributeSet *_attributes;
    unsigned long long _tid;
}

@property(readonly, nonatomic) unsigned long long tid; // @synthesize tid=_tid;
@property(readonly, nonatomic) XRAttributeSet *attributes; // @synthesize attributes=_attributes;
@property(readonly, nonatomic) NSString *representativeSymbol; // @synthesize representativeSymbol=_representativeSymbol;
@property(readonly, nonatomic) unsigned int serialNumber; // @synthesize serialNumber=_serialNumber;
- (void).cxx_destruct;
- (id)bestCombinationWith:(id)arg1;
- (id)threadElementUsingAttributes:(id)arg1;
- (id)threadElementUsingRepresentativeSymbol:(id)arg1;
- (id)displayName;
- (id)initWithSerialNumber:(unsigned int)arg1 tid:(unsigned long long)arg2 representativeSymbol:(id)arg3 attributes:(id)arg4;
- (id)_initWithSerialNumber:(unsigned int)arg1 tid:(unsigned long long)arg2 representativeSymbol:(id)arg3 attributes:(id)arg4 UUID:(struct __CFUUID *)arg5;

@end

@interface XRThreadFilterProcessRowView : NSTableRowView
{
}

- (void)drawSelectionInRect:(struct CGRect)arg1;

@end

@interface XRUIViewController : NSViewController
{
    NSOperation *_postUpdateOp;
}

- (void).cxx_destruct;
- (void)fullRedisplay;
- (void)notifyNeedsRefreshAfter:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface XRThreadFilterViewController : XRUIViewController <NSTableViewDelegate, NSTableViewDataSource, NSOutlineViewDelegate, NSOutlineViewDataSource, NSSplitViewDelegate, XRUIModelChangeObserver>
{
    XRElementSetModel *_includedThreads;
    NSArray *_selectedProcessPaths;
    NSArray *_selectedProcessElements;
    int _state;
    NSMutableSet *_retainedPaths;
    NSSet *_selectedThreads;
    NSTableView *_processTable;
    NSOutlineView *_threadOutline;
    NSView *_restrictionView;
    NSSearchField *_textRestrictionFilterView;
    XRThreadPickerSplitView *_splitView;
}

+ (void)initialize;
@property __weak XRThreadPickerSplitView *splitView; // @synthesize splitView=_splitView;
@property __weak NSSearchField *textRestrictionFilterView; // @synthesize textRestrictionFilterView=_textRestrictionFilterView;
@property __weak NSView *restrictionView; // @synthesize restrictionView=_restrictionView;
@property __weak NSOutlineView *threadOutline; // @synthesize threadOutline=_threadOutline;
@property __weak NSTableView *processTable; // @synthesize processTable=_processTable;
@property(retain, nonatomic) NSSet *selectedThreads; // @synthesize selectedThreads=_selectedThreads;
- (void).cxx_destruct;
- (void)splitViewDidResizeSubviews:(id)arg1;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (void)_restrictionButtonClick:(id)arg1;
- (void)_textFilterAction:(id)arg1;
- (void)checkAction:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)_executeThreadAction:(SEL)arg1 bySelectingThreads:(id)arg2;
- (void)outlineViewSelectionIsChanging:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 viewForTableColumn:(id)arg2 item:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)tableView:(id)arg1 rowViewForRow:(long long)arg2;
- (void)tableViewSelectionIsChanging:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)_preprocessTableSelectionChange;
- (void)_processTableSelectionChange;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)_refreshRestrictionButtons;
- (void)fullRedisplay;
- (void)loadView;
- (void)modelDidChange:(id)arg1;
- (id)textFilterString;
- (void)setRestrictionState:(id)arg1;
- (id)restrictionSet;
- (void)_enumerateRestrictionButtons:(CDUnknownBlockType)arg1;
- (id)selectedProcesses;
@property(retain, nonatomic) XRElementSetModel *includedThreads;
@property(retain, nonatomic) XRProcessAndThreadListModel *inputThreadHierarchy;
- (id)nibBundle;
- (id)nibName;
- (void)dealloc;
- (void)refreshProcessTable;
- (void)refreshVisibleThreadBadges;
- (void)updateCellView:(id)arg1 assumingProcessPath:(id)arg2;
- (id)populatedCellViewForTable:(id)arg1 row:(unsigned long long)arg2;
- (unsigned long long)processCount;
- (id)selectedProcessesInTable:(id)arg1;
- (long long)toggleItemsAtIndexPaths:(id)arg1;
- (void)refreshCheckBoxStates;
- (void)reloadThreadOutlineView;
- (id)populatedViewForThreadPath:(id)arg1;
- (long long)numberOfThreadsUnderIndexPath:(id)arg1;
- (id)selectedThreadElementsFromOutline:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRThreadInclusionButton : NSButton
{
    NSIndexPath *_path;
}

@property(retain, nonatomic) NSIndexPath *path; // @synthesize path=_path;
- (void).cxx_destruct;

@end

@interface XRThreadListLimiter : NSObject <XRUIModelChangeObserver>
{
    XRProcessAndThreadListModel *_input;
    XRProcessAndThreadListModel *_output;
    XRAttributeSet *_restrictions;
    NSString *_textRestriction;
}

@property(retain, nonatomic) NSString *textRestriction; // @synthesize textRestriction=_textRestriction;
@property(retain, nonatomic) XRAttributeSet *restrictions; // @synthesize restrictions=_restrictions;
@property(retain, nonatomic) XRProcessAndThreadListModel *output; // @synthesize output=_output;
@property(retain, nonatomic) XRProcessAndThreadListModel *input; // @synthesize input=_input;
- (void).cxx_destruct;
- (void)modelDidChange:(id)arg1;
- (void)_resetOutput;
- (void)dealloc;

@end

@interface XRThreadPickerSplitView : NSSplitView
{
    NSImage *_pully;
    struct CGSize _pullySize;
}

- (void).cxx_destruct;
- (double)dividerThickness;
- (void)drawDividerInRect:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonSetup;

@end

@interface XRTimeProfileRequestElement : XRImmutableElement <NSCoding>
{
    BOOL _userCallstacks;
    BOOL _kernelCallstacks;
    int _pid;
    int _purpose;
    double _duration;
    double _samplePeriod;
}

@property(readonly, nonatomic) double samplePeriod; // @synthesize samplePeriod=_samplePeriod;
@property(readonly, nonatomic) double duration; // @synthesize duration=_duration;
@property(readonly, nonatomic) int purpose; // @synthesize purpose=_purpose;
@property(readonly, nonatomic) int pid; // @synthesize pid=_pid;
@property(readonly, nonatomic) BOOL kernelCallstacks; // @synthesize kernelCallstacks=_kernelCallstacks;
@property(readonly, nonatomic) BOOL userCallstacks; // @synthesize userCallstacks=_userCallstacks;
- (id)shortDescription;
- (id)fullDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDuration:(double)arg1 samplePeriod:(double)arg2 userCallstacks:(BOOL)arg3 kernelCallstacks:(BOOL)arg4 pid:(int)arg5 purpose:(int)arg6;
- (id)init;

@end

@interface XRTwoPartOp : NSOperation
{
    NSOperation *_partOneOp;
    NSOperation *_partTwoOp;
    BOOL _executing;
    BOOL _done;
    BOOL _deferredContinue;
}

- (void).cxx_destruct;
- (id)spaceForPartTwo;
- (id)spaceForPartOne;
- (void)partTwo;
- (void)partOne;
- (void)main;
- (void)continueToPartTwo;
- (BOOL)isFinished;
- (BOOL)isConcurrent;
- (BOOL)isExecuting;
- (void)start;
- (id)init;

@end

@interface XRTimeProfileTargetOp : XRTwoPartOp
{
    void *_session;
    XRSetupCommonPathsOp *_pathsOp;
    NSTimer *_endTimer;
    BOOL _failedToStart;
    BOOL _canProfileAnyProcess;
    XRTimeProfileRequestElement *_request;
    XRPerformanceSessionTraceElement *_outputSession;
}

@property(retain, nonatomic) XRPerformanceSessionTraceElement *session; // @synthesize session=_outputSession;
@property(retain, nonatomic) XRTimeProfileRequestElement *request; // @synthesize request=_request;
- (void).cxx_destruct;
- (id)target;
- (id)timeProfilerOptions;
- (id)sessionOptions;
- (void)endSessionTimer:(id)arg1;
- (void)cancel;
- (void)continueToPartTwo;
- (void)endTimeProfileNow;
- (void)partTwo;
- (void)partOne;
- (id)init;

@end

@interface XRUIModelOp : NSOperation
{
}

@end

@interface XRUIMutableArrayModel : XRUIModel <XRUIModelChangeObserver, NSCoding>
{
    NSMutableArray *_elements;
}

- (void).cxx_destruct;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeLastObject;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (BOOL)containsObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface XRUISpace : XRSpace
{
}

+ (void)delayDisplayUpdatesUntilTrue:(CDUnknownBlockType)arg1;
+ (id)sharedInstance;
- (BOOL)isSerial;
- (id)spaceName;
- (BOOL)isOpValidForSpace:(id)arg1;
- (id)initWithQueue:(id)arg1;
- (id)init;

@end

@interface XRUnimportedProfileListModel : XRUIModel
{
    NSMutableSet *_allTraces;
    NSMutableArray *_newestTraces;
}

+ (void)failElement:(id)arg1 paths:(id)arg2;
+ (void)addContentsToElementFolderUsing:(id)arg1 block:(CDUnknownBlockType)arg2;
+ (void)setFinalizeTimeOnElement:(id)arg1 time:(id)arg2 paths:(id)arg3;
+ (void)postUnimportedTraceAreaChanged;
@property(readonly, nonatomic) NSArray *newestTraces; // @synthesize newestTraces=_newestTraces;
@property(readonly, nonatomic) NSSet *allTraces; // @synthesize allTraces=_allTraces;
- (void).cxx_destruct;
- (void)incomingNotification:(id)arg1;
- (void)markTraceSeenByUserApp:(id)arg1;
- (void)update;
- (void)registerForNotifications;
- (void)removeTrace:(id)arg1;
- (void)discoveredTrace:(id)arg1;
- (void)cullTracesToNewest;
- (void)dealloc;

@end

@interface _XRSubsetQueryRecord : NSObject
{
    XRSpaceDataToken *compiledTemplate;
    id result;
    int state;
}

- (void).cxx_destruct;

@end

