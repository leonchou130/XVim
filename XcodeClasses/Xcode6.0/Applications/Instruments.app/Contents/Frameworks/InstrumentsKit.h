//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct XRTimeRange {
    unsigned long long start;
    unsigned long long length;
};

struct _CSTypeRef {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

#pragma mark Typedef'd Structures

typedef struct {
    int type;
    int subtype;
} CDStruct_3570f18b;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks/InstrumentsKit.framework/Versions/A/InstrumentsKit
// UUID: 6621F922-A01A-3450-86F0-0B7956702E79
//
//                           Arch: x86_64
//                Current version: 56156.0.0
//          Compatibility version: 1.0.0
//                 Source version: 56156.0.0.0.0
//       Minimum Mac OS X version: 10.9.0
//                    SDK version: 10.10.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../
//                               = /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks
//                       Run path: @loader_path/../../../../../../../SharedFrameworks
//                               = /Applications/Xcode.app/Contents/SharedFrameworks
//                       Run path: @loader_path/../../../../../../../OtherFrameworks
//                               = /Applications/Xcode.app/Contents/OtherFrameworks
//                       Run path: /Applications/Xcode.app/Contents/Developer/../Frameworks
//                               = /Applications/Xcode.app/Contents/Developer/../Frameworks
//

@protocol CommonSymbol <NSCoding, NSObject>
- (NSString *)libraryPath;
- (NSString *)libraryName;
- (NSString *)symbolName;
- (int)pid;
- (unsigned long long)lineNumber;
- (NSString *)sourcePath;
- (unsigned long long)address;

@optional
- (PFTSymbolData *)resolvedSymbol;
@end

@protocol CommonTimeSample <NSCoding, NSObject>
- (id)extendedData;
- (id <CommonRawStack>)backtrace;
- (double)weight;
- (int)quantity;
- (unsigned long long)thread;
- (unsigned int)eventType;
- (unsigned long long)timestamp;

@optional
- (double)weightAtIndex:(unsigned int)arg1;
- (unsigned int)cpuIndex;
@end

@protocol DVTChooserViewDelegate <NSObject>

@optional
- (void)chooserView:(DVTChooserView *)arg1 userDidSelectChoices:(NSArray *)arg2;
- (void)chooserView:(DVTChooserView *)arg1 userWillSelectChoices:(NSArray *)arg2;
@end

@protocol DVTCompletingTextViewDelegate <NSTextViewDelegate>

@optional
- (void)setupTextViewContextMenuWithMenu:(NSMenu *)arg1;
- (BOOL)completingTextViewHandleCancel:(DVTCompletingTextView *)arg1;
- (unsigned long long)textView:(DVTCompletingTextView *)arg1 lineEndingForWritingSelectionToPasteboard:(NSPasteboard *)arg2 type:(NSString *)arg3;
- (unsigned long long)textView:(DVTCompletingTextView *)arg1 lineEndingForReadingSelectionFromPasteboard:(NSPasteboard *)arg2 type:(NSString *)arg3;
- (void)textView:(DVTCompletingTextView *)arg1 layoutManager:(NSLayoutManager *)arg2 didLayoutGlyphsUpToCharacterIndex:(unsigned long long)arg3;
- (DVTTextDocumentLocation *)completingTextView:(DVTCompletingTextView *)arg1 documentLocationForWordStartLocation:(unsigned long long)arg2;
- (void)completingTextView:(DVTCompletingTextView *)arg1 willPassContextToStrategies:(NSMutableDictionary *)arg2 atWordStartLocation:(unsigned long long)arg3;
@end

@protocol DVTOutlineViewDelegate <NSOutlineViewDelegate>

@optional
- (Class)outlineView:(DVTOutlineView *)arg1 groupRowCellClassForDataCell:(NSCell *)arg2;
- (NSFont *)outlineViewGroupRowFont:(DVTOutlineView *)arg1;
- (BOOL)outlineView:(DVTOutlineView *)arg1 shouldMouseHoverForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)outlineView:(DVTOutlineView *)arg1 concludeDragOperation:(id <NSDraggingInfo>)arg2;
- (unsigned long long)outlineView:(DVTOutlineView *)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (void)outlineView:(DVTOutlineView *)arg1 draggingDidEnd:(id <NSDraggingInfo>)arg2;
- (void)outlineView:(DVTOutlineView *)arg1 draggingDidUpdate:(id <NSDraggingInfo>)arg2;
- (void)outlineView:(DVTOutlineView *)arg1 draggingDidEnter:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(DVTOutlineView *)arg1 insertText:(NSString *)arg2;
- (BOOL)outlineView:(DVTOutlineView *)arg1 doCommandBySelector:(SEL)arg2;
@end

@protocol DVTSourceTextViewDelegate <DVTCompletingTextViewDelegate>

@optional
- (double)textView:(DVTSourceTextView *)arg1 constrainAccessoryAnnotationWidth:(double)arg2;
- (double)textView:(DVTSourceTextView *)arg1 constrainMaxAccessoryAnnotationWidth:(double)arg2;
- (double)textView:(DVTSourceTextView *)arg1 constrainMinAccessoryAnnotationWidth:(double)arg2;
- (NSString *)textViewWillReturnPrintJobTitle:(DVTSourceTextView *)arg1;
- (void)textViewDidScroll:(DVTSourceTextView *)arg1;
- (void)setupGutterContextMenuWithMenu:(NSMenu *)arg1;
- (void)tokenizableRangesWithRange:(struct _NSRange)arg1 completionBlock:(void (^)(NSArray *))arg2;
- (void)textViewDidFinishAnimatingScroll:(DVTSourceTextView *)arg1;
- (void)textViewDidLoadAnnotationProviders:(DVTSourceTextView *)arg1;
- (void)textView:(DVTSourceTextView *)arg1 didRemoveAnnotations:(NSArray *)arg2;
- (void)textView:(DVTSourceTextView *)arg1 didAddAnnotations:(NSArray *)arg2;
- (DVTAnnotationContext *)annotationContextForTextView:(DVTSourceTextView *)arg1;
- (NSDictionary *)syntaxColoringContextForTextView:(DVTSourceTextView *)arg1;
- (void)textViewDidChangeFolding:(NSNotification *)arg1;
- (void)textViewWillChangeFolding:(NSNotification *)arg1;
- (void)textView:(DVTSourceTextView *)arg1 didClickOnTemporaryLinkAtCharacterIndex:(unsigned long long)arg2 event:(NSEvent *)arg3 isAltEvent:(BOOL)arg4;
- (BOOL)textView:(DVTSourceTextView *)arg1 shouldShowTemporaryLinkForCharacterAtIndex:(unsigned long long)arg2 proposedRange:(struct _NSRange)arg3 effectiveRanges:(id *)arg4;
- (void)textView:(DVTSourceTextView *)arg1 handleMouseDidExitSidebar:(NSEvent *)arg2;
- (void)textView:(DVTSourceTextView *)arg1 handleMouseDidMoveOverSidebar:(NSEvent *)arg2 atLineNumber:(unsigned long long)arg3;
- (void)textView:(DVTSourceTextView *)arg1 handleMouseDownInSidebar:(NSEvent *)arg2 atLineNumber:(unsigned long long)arg3;
@end

@protocol DVTWindowActivationStateObserver <NSObject>
- (void)window:(NSWindow *)arg1 didChangeActivationState:(long long)arg2;
@end

@protocol NSAnimationDelegate <NSObject>

@optional
- (void)animation:(NSAnimation *)arg1 didReachProgressMark:(float)arg2;
- (float)animation:(NSAnimation *)arg1 valueForProgress:(float)arg2;
- (void)animationDidEnd:(NSAnimation *)arg1;
- (void)animationDidStop:(NSAnimation *)arg1;
- (BOOL)animationShouldStart:(NSAnimation *)arg1;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCollectionViewDelegate <NSObject>

@optional
- (void)collectionView:(NSCollectionView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)collectionView:(NSCollectionView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 dragOperation:(unsigned long long)arg4;
- (void)collectionView:(NSCollectionView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItemsAtIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)collectionView:(NSCollectionView *)arg1 pasteboardWriterForItemAtIndex:(unsigned long long)arg2;
- (BOOL)collectionView:(NSCollectionView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 index:(long long)arg3 dropOperation:(long long)arg4;
- (unsigned long long)collectionView:(NSCollectionView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedIndex:(long long *)arg3 dropOperation:(long long *)arg4;
- (NSImage *)collectionView:(NSCollectionView *)arg1 draggingImageForItemsAtIndexes:(NSIndexSet *)arg2 withEvent:(NSEvent *)arg3 offset:(struct CGPoint *)arg4;
- (NSArray *)collectionView:(NSCollectionView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItemsAtIndexes:(NSIndexSet *)arg3;
- (BOOL)collectionView:(NSCollectionView *)arg1 writeItemsAtIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (BOOL)collectionView:(NSCollectionView *)arg1 canDragItemsAtIndexes:(NSIndexSet *)arg2 withEvent:(NSEvent *)arg3;
@end

@protocol NSComboBoxDataSource <NSObject>

@optional
- (NSString *)comboBox:(NSComboBox *)arg1 completedString:(NSString *)arg2;
- (unsigned long long)comboBox:(NSComboBox *)arg1 indexOfItemWithStringValue:(NSString *)arg2;
- (id)comboBox:(NSComboBox *)arg1 objectValueForItemAtIndex:(long long)arg2;
- (long long)numberOfItemsInComboBox:(NSComboBox *)arg1;
@end

@protocol NSComboBoxDelegate <NSTextFieldDelegate>

@optional
- (void)comboBoxSelectionIsChanging:(NSNotification *)arg1;
- (void)comboBoxSelectionDidChange:(NSNotification *)arg1;
- (void)comboBoxWillDismiss:(NSNotification *)arg1;
- (void)comboBoxWillPopUp:(NSNotification *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMenuDelegate <NSObject>

@optional
- (struct CGRect)confinementRectForMenu:(NSMenu *)arg1 onScreen:(NSScreen *)arg2;
- (void)menu:(NSMenu *)arg1 willHighlightItem:(NSMenuItem *)arg2;
- (void)menuDidClose:(NSMenu *)arg1;
- (void)menuWillOpen:(NSMenu *)arg1;
- (BOOL)menuHasKeyEquivalent:(NSMenu *)arg1 forEvent:(NSEvent *)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)menu:(NSMenu *)arg1 updateItem:(NSMenuItem *)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (long long)numberOfItemsInMenu:(NSMenu *)arg1;
- (void)menuNeedsUpdate:(NSMenu *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSOpenSavePanelDelegate <NSObject>

@optional
- (void)panelSelectionDidChange:(id)arg1;
- (void)panel:(id)arg1 willExpand:(BOOL)arg2;
- (NSString *)panel:(id)arg1 userEnteredFilename:(NSString *)arg2 confirmed:(BOOL)arg3;
- (void)panel:(id)arg1 didChangeToDirectoryURL:(NSURL *)arg2;
- (BOOL)panel:(id)arg1 validateURL:(NSURL *)arg2 error:(id *)arg3;
- (BOOL)panel:(id)arg1 shouldEnableURL:(NSURL *)arg2;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (NSArray *)outlineView:(NSOutlineView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItems:(NSArray *)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(NSOutlineView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 writeItems:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(NSArray *)arg4;
- (id <NSPasteboardWriting>)outlineView:(NSOutlineView *)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (id)outlineView:(NSOutlineView *)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 byItem:(id)arg4;
- (id)outlineView:(NSOutlineView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(NSOutlineView *)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSOutlineViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)outlineViewItemDidCollapse:(NSNotification *)arg1;
- (void)outlineViewItemWillCollapse:(NSNotification *)arg1;
- (void)outlineViewItemDidExpand:(NSNotification *)arg1;
- (void)outlineViewItemWillExpand:(NSNotification *)arg1;
- (void)outlineViewSelectionIsChanging:(NSNotification *)arg1;
- (void)outlineViewColumnDidResize:(NSNotification *)arg1;
- (void)outlineViewColumnDidMove:(NSNotification *)arg1;
- (void)outlineViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)outlineView:(NSOutlineView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayOutlineCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 isGroupItem:(id)arg2;
- (NSCell *)outlineView:(NSOutlineView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (id)outlineView:(NSOutlineView *)arg1 nextTypeSelectMatchFromItem:(id)arg2 toItem:(id)arg3 forString:(NSString *)arg4;
- (NSString *)outlineView:(NSOutlineView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (double)outlineView:(NSOutlineView *)arg1 heightOfRowByItem:(id)arg2;
- (NSString *)outlineView:(NSOutlineView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)outlineView:(NSOutlineView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)outlineView:(NSOutlineView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectItem:(id)arg2;
- (BOOL)selectionShouldChangeInOutlineView:(NSOutlineView *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (void)outlineView:(NSOutlineView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)outlineView:(NSOutlineView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)outlineView:(NSOutlineView *)arg1 rowViewForItem:(id)arg2;
- (NSView *)outlineView:(NSOutlineView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
@end

@protocol NSPathCellDelegate <NSObject>

@optional
- (void)pathCell:(NSPathCell *)arg1 willPopUpMenu:(NSMenu *)arg2;
- (void)pathCell:(NSPathCell *)arg1 willDisplayOpenPanel:(NSOpenPanel *)arg2;
@end

@protocol NSPathControlDelegate <NSObject>

@optional
- (void)pathControl:(NSPathControl *)arg1 willPopUpMenu:(NSMenu *)arg2;
- (void)pathControl:(NSPathControl *)arg1 willDisplayOpenPanel:(NSOpenPanel *)arg2;
- (BOOL)pathControl:(NSPathControl *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2;
- (unsigned long long)pathControl:(NSPathControl *)arg1 validateDrop:(id <NSDraggingInfo>)arg2;
- (BOOL)pathControl:(NSPathControl *)arg1 shouldDragPathComponentCell:(NSPathComponentCell *)arg2 withPasteboard:(NSPasteboard *)arg3;
- (BOOL)pathControl:(NSPathControl *)arg1 shouldDragItem:(NSPathControlItem *)arg2 withPasteboard:(NSPasteboard *)arg3;
@end

@protocol NSPopoverDelegate <NSObject>

@optional
- (void)popoverDidClose:(NSNotification *)arg1;
- (void)popoverWillClose:(NSNotification *)arg1;
- (void)popoverDidShow:(NSNotification *)arg1;
- (void)popoverWillShow:(NSNotification *)arg1;
- (NSWindow *)detachableWindowForPopover:(NSPopover *)arg1;
- (BOOL)popoverShouldDetach:(NSPopover *)arg1;
- (BOOL)popoverShouldClose:(NSPopover *)arg1;
@end

@protocol NSSplitViewDelegate <NSObject>

@optional
- (void)splitViewDidResizeSubviews:(NSNotification *)arg1;
- (void)splitViewWillResizeSubviews:(NSNotification *)arg1;
- (struct CGRect)splitView:(NSSplitView *)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(NSSplitView *)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(NSSplitView *)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (BOOL)splitView:(NSSplitView *)arg1 shouldAdjustSizeOfSubview:(NSView *)arg2;
- (void)splitView:(NSSplitView *)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(NSSplitView *)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(NSSplitView *)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(NSSplitView *)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(NSSplitView *)arg1 shouldCollapseSubview:(NSView *)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(NSSplitView *)arg1 canCollapseSubview:(NSView *)arg2;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol NSTextDelegate <NSObject>

@optional
- (void)textDidChange:(NSNotification *)arg1;
- (void)textDidEndEditing:(NSNotification *)arg1;
- (void)textDidBeginEditing:(NSNotification *)arg1;
- (BOOL)textShouldEndEditing:(NSText *)arg1;
- (BOOL)textShouldBeginEditing:(NSText *)arg1;
@end

@protocol NSTextFieldDelegate <NSControlTextEditingDelegate>
@end

@protocol NSTextViewDelegate <NSTextDelegate>

@optional
- (void)textView:(NSTextView *)arg1 draggedCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 event:(NSEvent *)arg4;
- (void)textView:(NSTextView *)arg1 doubleClickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3;
- (void)textView:(NSTextView *)arg1 clickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3;
- (BOOL)textView:(NSTextView *)arg1 clickedOnLink:(id)arg2;
- (NSUndoManager *)undoManagerForTextView:(NSTextView *)arg1;
- (NSSharingServicePicker *)textView:(NSTextView *)arg1 willShowSharingServicePicker:(NSSharingServicePicker *)arg2 forItems:(NSArray *)arg3;
- (NSURL *)textView:(NSTextView *)arg1 URLForContentsOfTextAttachment:(NSTextAttachment *)arg2 atIndex:(unsigned long long)arg3;
- (NSArray *)textView:(NSTextView *)arg1 didCheckTextInRange:(struct _NSRange)arg2 types:(unsigned long long)arg3 options:(NSDictionary *)arg4 results:(NSArray *)arg5 orthography:(NSOrthography *)arg6 wordCount:(long long)arg7;
- (NSDictionary *)textView:(NSTextView *)arg1 willCheckTextInRange:(struct _NSRange)arg2 options:(NSDictionary *)arg3 types:(unsigned long long *)arg4;
- (NSMenu *)textView:(NSTextView *)arg1 menu:(NSMenu *)arg2 forEvent:(NSEvent *)arg3 atIndex:(unsigned long long)arg4;
- (long long)textView:(NSTextView *)arg1 shouldSetSpellingState:(long long)arg2 range:(struct _NSRange)arg3;
- (BOOL)textView:(NSTextView *)arg1 doCommandBySelector:(SEL)arg2;
- (BOOL)textView:(NSTextView *)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(NSString *)arg3;
- (NSArray *)textView:(NSTextView *)arg1 completions:(NSArray *)arg2 forPartialWordRange:(struct _NSRange)arg3 indexOfSelectedItem:(long long *)arg4;
- (NSString *)textView:(NSTextView *)arg1 willDisplayToolTip:(NSString *)arg2 forCharacterAtIndex:(unsigned long long)arg3;
- (void)textViewDidChangeTypingAttributes:(NSNotification *)arg1;
- (void)textViewDidChangeSelection:(NSNotification *)arg1;
- (NSDictionary *)textView:(NSTextView *)arg1 shouldChangeTypingAttributes:(NSDictionary *)arg2 toAttributes:(NSDictionary *)arg3;
- (BOOL)textView:(NSTextView *)arg1 shouldChangeTextInRanges:(NSArray *)arg2 replacementStrings:(NSArray *)arg3;
- (NSArray *)textView:(NSTextView *)arg1 willChangeSelectionFromCharacterRanges:(NSArray *)arg2 toCharacterRanges:(NSArray *)arg3;
- (struct _NSRange)textView:(NSTextView *)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange)arg2 toCharacterRange:(struct _NSRange)arg3;
- (BOOL)textView:(NSTextView *)arg1 writeCell:(id <NSTextAttachmentCell>)arg2 atIndex:(unsigned long long)arg3 toPasteboard:(NSPasteboard *)arg4 type:(NSString *)arg5;
- (NSArray *)textView:(NSTextView *)arg1 writablePasteboardTypesForCell:(id <NSTextAttachmentCell>)arg2 atIndex:(unsigned long long)arg3;
- (void)textView:(NSTextView *)arg1 draggedCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 event:(NSEvent *)arg4 atIndex:(unsigned long long)arg5;
- (void)textView:(NSTextView *)arg1 doubleClickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (void)textView:(NSTextView *)arg1 clickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (BOOL)textView:(NSTextView *)arg1 clickedOnLink:(id)arg2 atIndex:(unsigned long long)arg3;
@end

@protocol NSTokenFieldDelegate <NSTextFieldDelegate>

@optional
- (unsigned long long)tokenField:(NSTokenField *)arg1 styleForRepresentedObject:(id)arg2;
- (BOOL)tokenField:(NSTokenField *)arg1 hasMenuForRepresentedObject:(id)arg2;
- (NSMenu *)tokenField:(NSTokenField *)arg1 menuForRepresentedObject:(id)arg2;
- (NSArray *)tokenField:(NSTokenField *)arg1 readFromPasteboard:(NSPasteboard *)arg2;
- (BOOL)tokenField:(NSTokenField *)arg1 writeRepresentedObjects:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (id)tokenField:(NSTokenField *)arg1 representedObjectForEditingString:(NSString *)arg2;
- (NSString *)tokenField:(NSTokenField *)arg1 editingStringForRepresentedObject:(id)arg2;
- (NSString *)tokenField:(NSTokenField *)arg1 displayStringForRepresentedObject:(id)arg2;
- (NSArray *)tokenField:(NSTokenField *)arg1 shouldAddObjects:(NSArray *)arg2 atIndex:(unsigned long long)arg3;
- (NSArray *)tokenField:(NSTokenField *)arg1 completionsForSubstring:(NSString *)arg2 indexOfToken:(long long)arg3 indexOfSelectedItem:(long long *)arg4;
@end

@protocol NSToolbarDelegate <NSObject>

@optional
- (void)toolbarDidRemoveItem:(NSNotification *)arg1;
- (void)toolbarWillAddItem:(NSNotification *)arg1;
- (NSArray *)toolbarSelectableItemIdentifiers:(NSToolbar *)arg1;
- (NSArray *)toolbarAllowedItemIdentifiers:(NSToolbar *)arg1;
- (NSArray *)toolbarDefaultItemIdentifiers:(NSToolbar *)arg1;
- (NSToolbarItem *)toolbar:(NSToolbar *)arg1 itemForItemIdentifier:(NSString *)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidChangeOcclusionState:(NSNotification *)arg1;
- (void)windowDidExitVersionBrowser:(NSNotification *)arg1;
- (void)windowWillExitVersionBrowser:(NSNotification *)arg1;
- (void)windowDidEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowWillEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowDidExitFullScreen:(NSNotification *)arg1;
- (void)windowWillExitFullScreen:(NSNotification *)arg1;
- (void)windowDidEnterFullScreen:(NSNotification *)arg1;
- (void)windowWillEnterFullScreen:(NSNotification *)arg1;
- (void)windowDidEndLiveResize:(NSNotification *)arg1;
- (void)windowWillStartLiveResize:(NSNotification *)arg1;
- (void)windowDidEndSheet:(NSNotification *)arg1;
- (void)windowWillBeginSheet:(NSNotification *)arg1;
- (void)windowDidChangeBackingProperties:(NSNotification *)arg1;
- (void)windowDidChangeScreenProfile:(NSNotification *)arg1;
- (void)windowDidChangeScreen:(NSNotification *)arg1;
- (void)windowDidUpdate:(NSNotification *)arg1;
- (void)windowDidDeminiaturize:(NSNotification *)arg1;
- (void)windowDidMiniaturize:(NSNotification *)arg1;
- (void)windowWillMiniaturize:(NSNotification *)arg1;
- (void)windowWillClose:(NSNotification *)arg1;
- (void)windowDidResignMain:(NSNotification *)arg1;
- (void)windowDidBecomeMain:(NSNotification *)arg1;
- (void)windowDidResignKey:(NSNotification *)arg1;
- (void)windowDidBecomeKey:(NSNotification *)arg1;
- (void)windowDidMove:(NSNotification *)arg1;
- (void)windowWillMove:(NSNotification *)arg1;
- (void)windowDidExpose:(NSNotification *)arg1;
- (void)windowDidResize:(NSNotification *)arg1;
- (void)window:(NSWindow *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)window:(NSWindow *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenOnScreen:(NSScreen *)arg2 withDuration:(double)arg3;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1 onScreen:(NSScreen *)arg2;
- (void)window:(NSWindow *)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToExitFullScreenForWindow:(NSWindow *)arg1;
- (void)windowDidFailToEnterFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1;
- (unsigned long long)window:(NSWindow *)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(NSWindow *)arg1 shouldDragDocumentWithEvent:(NSEvent *)arg2 from:(struct CGPoint)arg3 withPasteboard:(NSPasteboard *)arg4;
- (BOOL)window:(NSWindow *)arg1 shouldPopUpDocumentPathMenu:(NSMenu *)arg2;
- (struct CGRect)window:(NSWindow *)arg1 willPositionSheet:(NSWindow *)arg2 usingRect:(struct CGRect)arg3;
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)arg1;
- (BOOL)windowShouldZoom:(NSWindow *)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(NSWindow *)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(NSWindow *)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(NSWindow *)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

@protocol PFTDataViewDelegate <NSObject>

@optional
- (void)stopDisplayingMessageForDataView:(PFTDataView *)arg1;
- (void)dataView:(PFTDataView *)arg1 shouldDisplayMessage:(NSString *)arg2;
@end

@protocol PFTDetailViewAccessory <NSObject>
- (void)setMainView:(NSView *)arg1;
@end

@protocol PFTDetailViewProtocol
- (void)reloadDetailData;
- (NSString *)detailViewLabel;
- (void)setInspectionTimeInSeconds:(double)arg1;
@end

@protocol PFTHostViewProtocol
- (int)hostType;
@end

@protocol PFTInstrumentClient <NSObject>
- (void)replaceType:(PFTInstrumentType *)arg1 withType:(PFTInstrumentType *)arg2;
- (void)refreshedInstrumentType:(PFTInstrumentType *)arg1;
- (void)newInstrumentType:(PFTInstrumentType *)arg1;
@end

@protocol PFTScalableView
- (struct CGSize)scale;
- (double)setVerticalPercentage:(double)arg1;
- (double)setHorizontalPercentage:(double)arg1;
@end

@protocol PFTSwitchBoardMenuDelegate <NSObject>
- (BOOL)switchBoard:(PFTSwitchBoard *)arg1 menuHasKeyEquivalent:(NSMenu *)arg2 forEvent:(NSEvent *)arg3 target:(id *)arg4 action:(SEL *)arg5;
- (int)switchBoard:(PFTSwitchBoard *)arg1 numberOfItemsInMenu:(NSMenu *)arg2;
- (void)switchBoard:(PFTSwitchBoard *)arg1 menuNeedsUpdate:(NSMenu *)arg2;
- (BOOL)switchBoard:(PFTSwitchBoard *)arg1 menu:(NSMenu *)arg2 updateItem:(NSMenuItem *)arg3 atIndex:(long long)arg4 shouldCancel:(BOOL)arg5;
@end

@protocol SymbolAwareRun <NSObject>
- (XRBacktraceRepository *)backtraceRepository;
@end

@protocol XRAccessiblePathCellDelegate <NSPathCellDelegate>

@optional
- (NSString *)pathCell:(NSPathCell *)arg1 accessibilityDescriptionForPathComponentCell:(NSPathComponentCell *)arg2 atIndex:(unsigned long long)arg3;
@end

@protocol XRAnnotationBarDelegate <NSObject>
- (NSString *)descriptionAtInspectableIndex:(unsigned long long)arg1;
- (unsigned long long)lineNumberAtInspectableIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfInspectableItems;
- (NSArray *)dataElementsForLineNumber:(unsigned long long)arg1 inTextView:(DVTSourceTextView *)arg2;
- (BOOL)description:(id *)arg1 inspector:(char *)arg2 theme:(id *)arg3 themeAlpha:(double *)arg4 heatColor:(id *)arg5 highlightColor:(id *)arg6 forLine:(unsigned long long)arg7 inTextView:(DVTSourceTextView *)arg8;
@end

@protocol XRCPUmanagerDelegateProtocol <NSObject>
- (void)updateActiveProcessorCoreCount;
@end

@protocol XRCallTreeComparable <NSObject>
- (BOOL)prepareCallTreeCompare;
@end

@protocol XRContextContainer <NSObject>
- (NSView *)viewForContext:(XRContext *)arg1;
- (NSArray *)siblingsForContext:(XRContext *)arg1;
- (void)displayContext:(XRContext *)arg1;
- (XRContext *)contextRepresentation;

@optional
- (id <XRContextContainer>)contextContainerForUUID:(NSString *)arg1;
- (NSString *)uuid;
- (NSImage *)iconForContext:(XRContext *)arg1;
@end

@protocol XRDeviceObserver <NSObject>
- (void)handleDeviceNotification:(XRDevice *)arg1;
@end

@protocol XREditableEntity <NSObject>
- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)arg1;
@end

@protocol XRExportDataProtocol
- (void)exportSelectedRunInFormat:(int)arg1 toPath:(NSString *)arg2;
@end

@protocol XRFileObserver <NSObject>
- (void)rescanPath:(NSString *)arg1;
@end

@protocol XRFilteredDataSource

@optional
- (NSString *)selectedSearchContext;
- (NSArray *)searchContexts;
- (void)filterDetailWithTokens:(NSArray *)arg1 context:(NSString *)arg2 matchesAny:(BOOL)arg3;
@end

@protocol XRGestureHandler <NSObject>
- (void)tracker:(XRGestureTracker *)arg1 didFinishGestureWithCondition:(int)arg2;
- (void)tracker:(XRGestureTracker *)arg1 updateGesture:(XRGesture *)arg2;
- (void)tracker:(XRGestureTracker *)arg1 willBeginGesture:(XRGesture *)arg2;
@end

@protocol XRImportDataProtocol
- (BOOL)importRun:(XRRun *)arg1 fromPaths:(NSArray *)arg2 error:(id *)arg3;
@end

@protocol XRInspectorDelegate <NSObject>
- (void)inspectorDidClose:(XRInspector *)arg1;
@end

@protocol XRInspectorSource <NSObject>
- (XRInstrument *)instrument;
- (NSArray *)dataElementsForInspector:(id)arg1;
- (void)inspectorDismissed:(id)arg1;

@optional
- (BOOL)willProvideConfigurationDataElementsForInspector:(id)arg1;
- (NSArray *)configurationDataElementsForInspector:(id)arg1;
- (NSImage *)spotImage;
- (struct CGRect)spotRect;
@end

@protocol XRPathCellAccessible <NSObject>
- (NSMenu *)trackingMenu;
- (void)handleClickInComponentCell:(NSPathComponentCell *)arg1 atPoint:(struct CGPoint)arg2 inRect:(struct CGRect)arg3 ofView:(NSView *)arg4 event:(NSEvent *)arg5;
@end

@protocol XRProcessTargetedObject <NSObject>
- (int)defaultTargetTypeForChooser;
- (XRDevice *)currentTargetDevice;
- (PFTProcess *)currentTargetProcess;
- (BOOL)supportsTargetType:(int)arg1;
- (void)setTargetsDevice:(XRDevice *)arg1;
- (void)setTargetsLaunchedProcess:(PFTProcess *)arg1;
- (void)setTargetsExistingProcess:(PFTProcess *)arg1;
- (void)setTargetsAllProcesses;
@end

@protocol XRSearchTarget
- (BOOL)searchBackward:(NSString *)arg1;
- (BOOL)searchForward:(NSString *)arg1 skipCurrent:(BOOL)arg2;
- (NSArray *)searchCategories;
@end

@protocol XRSearchTargetHelper
- (NSArray *)backtraceForVisibleRow:(unsigned long long)arg1;
@end

@protocol XRSourceQuery
- (NSArray *)operation:(NSOperation *)arg1 commentsForSymbol:(id <CommonSymbol>)arg2 inSourceManager:(XRCodeManager *)arg3 callTreeInformation:(NSDictionary *)arg4;

@optional
- (NSArray *)operation:(NSOperation *)arg1 commentsForSymbol:(id <CommonSymbol>)arg2 forProcess:(int)arg3 inSourceManager:(XRCodeManager *)arg4 callTreeInformation:(NSDictionary *)arg5;
- (NSNumber *)sourceQueriesMustRunOnMainThread;
@end

@protocol XRTextViewDragDestination
- (BOOL)performDragOperation:(id <NSDraggingInfo>)arg1;
- (BOOL)prepareForDragOperation:(id <NSDraggingInfo>)arg1;
- (unsigned long long)dragging:(id <NSDraggingInfo>)arg1;
- (NSArray *)dragTypes;
@end

@protocol XRToolbarManager <NSObject, NSToolbarDelegate>
+ (id <XRToolbarManager>)toolbarManagerWithIdentifier:(NSString *)arg1 window:(NSWindow *)arg2 documentIdentifier:(NSString *)arg3;
@end

@protocol XRTopicBrowserViewDelegate <NSObject>
- (void)topicBrowserView:(XRTopicBrowserView *)arg1 filenameDropped:(NSString *)arg2;
@end

@protocol XRTopicInterfaceComponent <NSObject>
- (NSView *)view;
- (void)applyResult:(NSMutableDictionary *)arg1;
- (XRTopic *)subTopic;
- (void)setSubTopic:(XRTopic *)arg1;
- (id)initWithTopic:(XRTopic *)arg1;

@optional
- (int)topicViewer:(id <XRTopicViewer>)arg1 handleKeyDown:(id)arg2;
- (void)reloadData;
- (void)refresh;
@end

@protocol XRTopicViewer
- (void)setSelectedTopic:(XRTopic *)arg1;
- (XRTopic *)selectedTopic;
- (NSArray *)topics;
@end

@protocol XRUIModelChangeObserver
- (void)modelDidChange:(NSNotification *)arg1;
@end

@protocol XRUIStackFrame <NSCoding, NSObject>
- (long long)lineNumberForDisplay;
- (NSString *)pathForDisplay;
- (NSString *)symbolNameForUse;
- (NSString *)symbolNameForDisplay;
- (NSString *)libraryForDisplay;
@end

@interface DTISAReferenceGuideWindowController : NSWindowController <NSComboBoxDataSource, NSComboBoxDelegate, NSTableViewDataSource, NSTableViewDelegate>
{
    BOOL _updatingUI;
    BOOL _matchTextToComboBoxWhenEditingEnds;
    BOOL _addedPDFViewChangedNotification;
    PDFView *_pdfView;
    NSComboBox *_instructionComboBox;
    NSTextField *_pageNumberTextField;
    NSButton *_previousPageButton;
    NSButton *_nextPageButton;
    NSTableView *_mnemonicsTableView;
    NSButton *_previousMnemonicButton;
    NSButton *_nextMnemonicButton;
    CDStruct_3570f18b _cpudef;
    NSArray *_mnemonicsList;
    PDFDocument *_pdfDocument;
    NSDictionary *_instructionToPageMap;
    NSDictionary *_pageToInstructionMap;
    NSArray *_sortedInstructionList;
    NSArray *_sortedPageList;
}

@property(retain) NSArray *sortedPageList; // @synthesize sortedPageList=_sortedPageList;
@property(retain) NSArray *sortedInstructionList; // @synthesize sortedInstructionList=_sortedInstructionList;
@property(retain) NSDictionary *pageToInstructionMap; // @synthesize pageToInstructionMap=_pageToInstructionMap;
@property(retain) NSDictionary *instructionToPageMap; // @synthesize instructionToPageMap=_instructionToPageMap;
@property(retain) PDFDocument *pdfDocument; // @synthesize pdfDocument=_pdfDocument;
@property(copy) NSArray *mnemonicsList; // @synthesize mnemonicsList=_mnemonicsList;
@property CDStruct_3570f18b cpudef; // @synthesize cpudef=_cpudef;
@property __weak NSButton *nextMnemonicButton; // @synthesize nextMnemonicButton=_nextMnemonicButton;
@property __weak NSButton *previousMnemonicButton; // @synthesize previousMnemonicButton=_previousMnemonicButton;
@property __weak NSTableView *mnemonicsTableView; // @synthesize mnemonicsTableView=_mnemonicsTableView;
@property __weak NSButton *nextPageButton; // @synthesize nextPageButton=_nextPageButton;
@property __weak NSButton *previousPageButton; // @synthesize previousPageButton=_previousPageButton;
@property __weak NSTextField *pageNumberTextField; // @synthesize pageNumberTextField=_pageNumberTextField;
@property __weak NSComboBox *instructionComboBox; // @synthesize instructionComboBox=_instructionComboBox;
@property __weak PDFView *pdfView; // @synthesize pdfView=_pdfView;
- (void).cxx_destruct;
- (void)_matchPDFToComboBox;
- (unsigned long long)_pageIndexForInstruction:(id)arg1;
- (id)_bestInstructionForPageIndex:(unsigned long long)arg1 currentlySelectedInstruction:(id)arg2;
- (id)_bestInstructionsForPageIndex:(unsigned long long)arg1;
- (void)_setTableViewToInstruction:(id)arg1;
- (void)_setComboBoxToInstruction:(id)arg1;
- (id)_fileNameForCPUType:(int)arg1;
- (id)_URLForCPUResourceType:(id)arg1;
- (id)_pageToInstructionMapURL;
- (id)_instructionToPageMapURL;
- (id)_pdfURL;
- (void)_updateUI;
- (void)_reloadData;
- (void)selectNextMnemonic:(id)arg1;
- (void)selectPreviousMnemonic:(id)arg1;
- (void)showCopyright:(id)arg1;
- (void)nextPage:(id)arg1;
- (void)prevPage:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)comboBoxSelectionDidChange:(id)arg1;
- (unsigned long long)comboBox:(id)arg1 indexOfItemWithStringValue:(id)arg2;
- (id)comboBox:(id)arg1 completedString:(id)arg2;
- (id)comboBox:(id)arg1 objectValueForItemAtIndex:(long long)arg2;
- (long long)numberOfItemsInComboBox:(id)arg1;
- (void)updateCPUDef:(CDStruct_3570f18b)arg1 mnemonicsList:(id)arg2;
- (void)windowDidLoad;
- (void)dealloc;
- (id)initWithCPUDef:(CDStruct_3570f18b)arg1 mnemonicsList:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NSPathCell (xray_Accessibility)
- (id)xray_accessibilityPopUpMenuParent:(id)arg1;
- (id)xray_accessibilityChildMenuForChild:(id)arg1;
- (void)xray_accessibilityPerformPressForChild:(id)arg1;
- (id)xray_accessibilitySizeOfChild:(id)arg1;
- (id)xray_accessibilityPositionOfChild:(id)arg1;
- (struct CGRect)xray_accessibilityScreenRectForPathComponent:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)xray_accessibilityObjectForComponentCell:(id)arg1 atIndex:(unsigned long long)arg2;
@end

@interface NSTextView (SimpleEditing)
- (void)pft_applySimpleEditorSettings;
@end

@interface NSView (PrivateXraySortMethods)
- (void)xray_unbindEnabledToObject:(id)arg1 withKeyPath:(id)arg2 options:(id)arg3;
- (void)xray_bindEnabledToObject:(id)arg1 withKeyPath:(id)arg2 options:(id)arg3;
- (long long)xray_horizontalCompare:(id)arg1;
@end

@interface NSWindow (XrayPrivateAPI)
- (void)centerOnScreen;
@end

@interface PFTCategoryListView : NSTableView
{
    BOOL _isSetup;
}

- (id)_highlightColorForCell:(id)arg1;
- (void)drawRow:(long long)arg1 clipRect:(struct CGRect)arg2;
- (id)label;
- (void)viewDidMoveToSuperview;
- (void)setFrameSize:(struct CGSize)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTClearSearchButtonCell : NSButtonCell
{
}

- (void)_fillBackground:(struct CGRect)arg1 withAlternateColor:(BOOL)arg2;
- (void)drawBezelWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)isOpaque;

@end

@interface PFTDataView : NSStackView
{
    PFTDataElementList *_model;
    BOOL _dataViewCanResize;
    int _style;
    NSColor *_backgroundColor;
    id <PFTDataViewDelegate> _dataViewDelegate;
}

@property(nonatomic) __weak id <PFTDataViewDelegate> dataViewDelegate; // @synthesize dataViewDelegate=_dataViewDelegate;
- (void).cxx_destruct;
- (unsigned long long)selectedRow;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)arg1;
- (int)style;
- (void)setStyle:(int)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewDidMoveToWindow;
- (void)viewDidMoveToSuperview;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (void)focusOnElement:(id)arg1;
- (void)reloadData;
- (void)_elementsUpdated:(id)arg1;
- (void)_elementsCleared:(id)arg1;
- (void)_elementRemoved:(id)arg1;
- (void)_elementAdded:(id)arg1;
- (id)model;
- (void)setModel:(id)arg1;
- (void)dealloc;

@end

@interface PFTDataViewer : NSView <DVTChooserViewDelegate, PFTDataViewDelegate>
{
    DVTChooserView *_chooserView;
    NSScrollView *_scrollView;
    BOOL _isSetup;
    PFTDataElementList *_instrumentSetupModel;
    PFTDataElementList *_instrumentInspectorModel;
    PFTDataElementList *_eventInspectorModel;
    NSMapTable *_placeholderMessageForDataViewMapTable;
    BOOL _placeholderViewNeedsConstraints;
    PFTDataView *_instrumentSetupDataView;
    PFTDataView *_instrumentInspectorDataView;
    PFTDataView *_eventInspectorDataView;
    NSTextField *_placeholderLabel;
}

@property(retain, nonatomic) NSTextField *placeholderLabel; // @synthesize placeholderLabel=_placeholderLabel;
@property(retain) PFTDataView *eventInspectorDataView; // @synthesize eventInspectorDataView=_eventInspectorDataView;
@property(retain) PFTDataView *instrumentInspectorDataView; // @synthesize instrumentInspectorDataView=_instrumentInspectorDataView;
@property(retain) PFTDataView *instrumentSetupDataView; // @synthesize instrumentSetupDataView=_instrumentSetupDataView;
- (void).cxx_destruct;
- (void)stopDisplayingMessageForDataView:(id)arg1;
- (void)dataView:(id)arg1 shouldDisplayMessage:(id)arg2;
- (void)_reload;
- (void)chooserView:(id)arg1 userDidSelectChoices:(id)arg2;
- (void)showEventInspectorDataView;
- (void)showInstrumentInspectorDataView;
- (void)showInstrumentSetupDataView;
- (void)_showDataViewAtIndex:(unsigned long long)arg1;
@property(retain) PFTDataElementList *eventInspectorModel; // @synthesize eventInspectorModel=_eventInspectorModel;
@property(retain) PFTDataElementList *instrumentInspectorModel; // @synthesize instrumentInspectorModel=_instrumentInspectorModel;
@property(retain) PFTDataElementList *instrumentSetupModel; // @synthesize instrumentSetupModel=_instrumentSetupModel;
- (BOOL)isOpaque;
- (void)dealloc;
- (void)awakeFromNib;
- (void)_addConstraintsToPlaceholder;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTDetailTypeHostView : NSView <NSTokenFieldDelegate>
{
    PFTSlider *_hSlider;
    NSTextField *_searchField;
    PFTTraceView *_traceView;
    NSView *_contentView;
    XRSearchBarViewController *_findViewController;
    PFTSelectedInstrumentList *_model;
    BOOL _scrollViewRequired;
    BOOL _ignoreSubviewRemove;
    NSMapTable *_accessoryViewsByInstrumentByKey;
    NSMapTable *_shownAccessoryViewsByInstrument;
}

- (void).cxx_destruct;
- (void)willRemoveSubview:(id)arg1;
- (void)hideAccessoryViewWithKey:(id)arg1;
- (void)_hideView:(id)arg1 removeFromSuperview:(BOOL)arg2;
- (id)showAccessoryViewWithKey:(id)arg1;
- (void)addAccessoryView:(id)arg1 withKey:(id)arg2 forInstrument:(id)arg3;
- (void)addAccessoryView:(id)arg1 withKey:(id)arg2 forInstrument:(id)arg3 asHidden:(BOOL)arg4;
- (id)_accessoryViewWithKey:(id)arg1;
- (id)_shownAccessoryViews;
- (id)_instrument;
- (void)_instrumentChangedSearchView:(id)arg1;
- (void)findPanelAction:(id)arg1;
- (void)setModel:(id)arg1;
- (id)model;
- (id)targetView;
- (id)_innerTargetView;
- (id)tokenField:(id)arg1 shouldUseDrawingAttributes:(id)arg2 forRepresentedObject:(id)arg3;
- (id)tokenField:(id)arg1 displayStringForRepresentedObject:(id)arg2;
- (id)contentView;
- (void)setContentView:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)_layoutViews;
- (void)viewDidMoveToWindow;
- (void)updateInstrument:(id)arg1 withDetailView:(id)arg2;
- (void)updateDetailViewWithInstrument:(id)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTDocumentController : NSDocumentController
{
    XRDockMenuViewController *_dockMenuController;
    XRFlagViewer *_flagViewer;
    NSWindow *_flagWindow;
    XRTemplateChooserWindowController *_templateChooser;
    XRInstrumentMenuController *_instrumentMenuController;
}

+ (id)importData:(id)arg1 error:(id *)arg2;
+ (BOOL)loadDTPSFile:(id)arg1 dataFile:(id)arg2 msgQFile:(id)arg3 doc:(id)arg4 instrumentIdentifier:(id)arg5 error:(id *)arg6;
- (void)showCustomAboutBox:(id)arg1;
- (id)openDocumentWithContentsOfURL:(id)arg1 display:(BOOL)arg2 error:(id *)arg3;
- (id)makeUntitledDocumentOfType:(id)arg1 error:(id *)arg2;
- (void)changeDocuments:(id)arg1;
- (void)disconnectDocumentFromFlagViewer:(id)arg1;
- (id)flagViewerForDocument:(id)arg1;
- (void)removeTemplateChooser:(id)arg1;
- (BOOL)showTemplateChooser;
- (void)_updateInternalizedSettings;
@property(nonatomic) NSMenu *instrumentMenu;
- (void)dealloc;
- (id)init;

@end

@interface PFTFadeInContentView : NSView <NSAnimationDelegate>
{
}

- (void)animationDidEnd:(id)arg1;
- (id)contentView;
- (void)setContentView:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTHeadlineView : NSView
{
    NSString *_title;
    PFTTableHeaderCell *_headerCell;
}

+ (void)initialize;
- (void)drawRect:(struct CGRect)arg1;
- (id)title;
- (void)setTitle:(id)arg1;
- (BOOL)isFlipped;
- (void)dealloc;

@end

@interface PFTInstrumentListCell : NSActionCell <XRProcessTargetedObject>
{
    int _pressedAttribute;
    struct CGRect _currentCellBoundsDuringGesture;
    struct CGRect _currentCellFrameDuringGesture;
}

+ (BOOL)prefersTrackingUntilMouseUp;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (int)attributeButtonWithCellFrame:(struct CGRect)arg1 inView:(id)arg2 forPoint:(struct CGPoint)arg3;
- (BOOL)continueTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (id)defaultProcess;
- (int)defaultTargetTypeForChooser;
- (void)resetTarget;
- (void)setTargetsDevice:(id)arg1;
- (id)currentTargetDevice;
- (id)currentTargetProcess;
- (BOOL)supportsTargetType:(int)arg1;
- (void)setTargetsLaunchedProcess:(id)arg1;
- (void)setTargetsExistingProcess:(id)arg1;
- (void)setTargetsAllProcesses;
- (void)applyTooltipsWithCellFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)wantsCloseBox;
- (long long)_setCloseBoxTrackingTagForView:(id)arg1 inCellFrame:(struct CGRect)arg2 withIndex:(long long)arg3;
- (struct CGRect)_closeBoxRectForView:(id)arg1 inCellFrame:(struct CGRect)arg2;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawString:(id)arg1 inRect:(struct CGRect)arg2 withAttributes:(id)arg3;
- (void)drawInstrumentBackgroundWithFrame:(struct CGRect)arg1 inView:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTInspectorListCell : PFTInstrumentListCell
{
}

- (BOOL)wantsExpansionBox;
- (BOOL)wantsCloseBox;

@end

@interface PFTInstrumentListView : NSTableView <PFTHostViewProtocol, NSMenuDelegate>
{
    PFTInstrumentList *_model;
    XRInstrumentListViewController *_uiModel;
    BOOL _isSetup;
    Class _cellType;
    int _pressedAttribute;
    XRInstrument *_pressedInstrument;
    BOOL _altDown;
    BOOL _ignoreScroll;
    long long _ignoredRow;
    NSMutableArray *_trackingTags;
    XRInstrument *_flyOverInstrumentNotRetained;
    int _flyOverState;
    struct CGPoint _flyOverPoint;
    unsigned long long _visibleSelectedRow;
}

- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (id)instrumentDragTypes;
- (id)_pressedInstrument;
- (int)_pressedAttribute;
- (void)_setPressedAttribute:(int)arg1 pressedInstrument:(id)arg2;
- (void)tile;
- (void)viewWillStartLiveResize;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)deselectAll:(id)arg1;
- (void)scrollRowToVisible:(long long)arg1;
- (void)mouseDown:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)highlightSelectionInClipRect:(struct CGRect)arg1;
- (void)viewDidMoveToSuperview;
- (void)resetCursorRects;
- (void)resetTooltipsAndTrackingAreas;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)_removeTrackingRects;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)reloadData;
- (void)noteLiveResizeRows;
- (struct CGPoint)_flyOverPoint;
- (id)_flyOverInstrument;
- (void)_setFlyOverState:(int)arg1 forInstrument:(id)arg2;
- (int)_flyOverStateForInstrument:(id)arg1;
- (void)_flagsChanged:(id)arg1;
- (BOOL)isAltKeyDown;
- (void)_instrumentUnselected:(id)arg1;
- (void)_instrumentSelected:(id)arg1;
- (void)_instrumentRemoved:(id)arg1;
- (void)_instrumentAdded:(id)arg1;
- (void)_instrumentMoved:(id)arg1;
- (void)_observeAddedInstrument:(id)arg1;
- (void)_instrumentLayoutChanged:(id)arg1;
- (void)_instrumentStateChanged:(id)arg1;
- (int)hostType;
- (unsigned int)deckUnitsForInstrument:(id)arg1;
- (struct CGSize)instrumentCellSpacing;
- (id)createDataCell;
- (id)label;
- (id)model;
- (void)setModel:(id)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTInspectorView : PFTInstrumentListView
{
}

- (id)instrumentDragTypes;
- (BOOL)acceptsFirstResponder;
- (int)hostType;
- (unsigned int)deckUnitsForInstrument:(id)arg1;
- (id)createDataCell;
- (id)label;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRBrushTrackView : NSView <PFTScalableView, NSAnimationDelegate, XRGestureHandler>
{
    double _startTime;
    double _recordTime;
    double _inspectionTimeRelative;
    NSMutableDictionary *_mssgBoxes;
    double _minWidth;
    double _minHeight;
    XRWatermark *_watermark;
    struct CGRect _lastVisRect;
    BOOL _isZooming;
    NSArray *_hScale;
    NSArray *_vScale;
    double _lastHorizontalScale;
    BOOL _isRunning;
    PFTRulerMarker *_recordHead;
    PFTRulerMarker *_inspectionHead;
    PFTTrackRulerView *_horizonTRV;
    BOOL _isDraggingInspectorHead;
    NSMutableDictionary *_flagMarkers;
    NSMutableArray *_displayedFlags;
    NSMutableArray *_highlightedFlags;
    NSRecursiveLock *_flagRLock;
    PFTTimeSelectionView *_timeSelectionView;
    double _timeStartLocation;
    double _timeEndLocation;
    XRTimeScaleAdjustmentView *_timeScaleSelectionView;
    XRGestureTracker *_gestureTracker;
    XRGesture *_currentGesture;
    NSString *_gestureMessageString;
    NSWindow *_gestureWindow;
    NSEvent *_autoScrollEvent;
    NSTimer *_autoScrollTimer;
    struct CGSize _scale;
}

@property struct CGSize scale; // @synthesize scale=_scale;
- (BOOL)enableCopyOnScroll;
- (BOOL)rulerView:(id)arg1 shouldRemoveMarker:(id)arg2;
- (void)rulerView:(id)arg1 didRemoveMarker:(id)arg2;
- (void)rulerView:(id)arg1 didMoveMarker:(id)arg2;
- (double)rulerView:(id)arg1 willMoveMarker:(id)arg2 toLocation:(double)arg3;
- (void)rulerView:(id)arg1 handleMouseTrackingDidEnd:(id)arg2;
- (void)rulerView:(id)arg1 handleMouseDown:(id)arg2;
- (BOOL)rulerView:(id)arg1 shouldMoveMarker:(id)arg2;
- (void)setMarkersHidden:(BOOL)arg1;
- (void)layoutMarkersForTrackSegment:(id)arg1;
- (void)setComponentNeedsDisplay:(int)arg1;
- (struct CGRect)scaledVisiblePortionTrackSegmentRect:(struct CGRect)arg1;
- (struct CGRect)scaledVisibleRect;
- (double)setVerticalPercentage:(double)arg1;
- (double)setVerticalScale:(double)arg1;
- (double)setHorizontalPercentage:(double)arg1;
- (double)setHorizontalScale:(double)arg1;
- (double)vScaleFactorForTick:(int)arg1;
- (double)hScaleFactorForTick:(int)arg1;
- (id)newVerticalScaleUnits;
- (id)newHorizontalScaleUnits;
- (void)_autoscrollTimerHandler:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)setNextResponder:(id)arg1;
- (float)scaleAtVisibleStartRange;
- (struct XRTimeRange)visibleTimeRange;
- (void)updateTimeScaleSelection:(BOOL)arg1;
- (struct XRTimeRange)currentGestureTimeRange;
- (struct XRTimeRange)selectedTimeRange;
- (void)setSelectedTimeRange:(struct XRTimeRange)arg1;
- (void)setTimeEndLocation:(double)arg1;
- (void)setTimeStartLocation:(double)arg1;
- (void)updateTimeSelection:(BOOL)arg1;
- (void)layout;
- (void)_doScroller:(id)arg1;
- (BOOL)isFlipped;
- (void)reloadData:(BOOL)arg1;
- (void)clearGraphCache;
- (void)reloadData;
- (void)inspectionHeadUpdated:(id)arg1;
- (BOOL)isInspectionHeadVisible;
- (void)centerOnInspectionHead;
- (double)maxWidth;
- (void)postInspectionHeadUpdatingNotification;
- (double)inspectionTimeInSeconds;
- (void)setInspectionTimeInSeconds:(double)arg1 notify:(BOOL)arg2;
- (void)setInspectionTimeInSeconds:(double)arg1;
- (double)recordTime;
- (void)setRecordTime:(double)arg1;
- (void)endNow:(double)arg1;
- (double)startTime;
- (void)startNow:(double)arg1;
- (BOOL)isRunning;
- (void)setRunning:(BOOL)arg1 startTime:(double)arg2 recordTime:(double)arg3;
- (void)reset;
- (void)animationDidEnd:(id)arg1;
- (void)validateForWatermark;
- (void)tracker:(id)arg1 didFinishGestureWithCondition:(int)arg2;
- (void)tracker:(id)arg1 updateGesture:(id)arg2;
- (void)tracker:(id)arg1 willBeginGesture:(id)arg2;
- (void)setGestureMessageString:(id)arg1;
- (id)gestureMessageString;
- (id)cornerMessage;
- (id)watermarkMessageString;
- (void)unlockFlags;
- (void)lockFlags;
- (id)displayedFlags;
- (id)markerForFlag:(id)arg1;
- (void)setDisplayedFlags:(id)arg1;
- (id)lastHighlightedFlag;
- (id)highlightedFlags;
- (void)setHighlightedFlags:(id)arg1;
- (void)refreshLinesForMarker:(id)arg1;
- (void)centerOnMarker:(id)arg1;
- (void)centerOnLocation:(double)arg1;
- (void)removeFlagsFromRulerView:(id)arg1;
- (void)removeFlagFromRulerView:(id)arg1;
- (id)addFlagToRulerView:(id)arg1;
- (void)viewScrolledNotification:(id)arg1;
- (void)_tick:(id)arg1;
- (BOOL)isDraggingInspectorHead;
- (id)inspectionHead;
- (id)recordHead;
- (void)addHeadsToRuler:(id)arg1;
- (void)removeRecordHeadFromRuler:(id)arg1;
- (void)addRecordHeadToRuler:(id)arg1;
- (void)updateMarkers;
- (void)positionWatermark;
- (id)existingMessageBoxForObject:(id)arg1;
- (void)removeAllMessageBoxesForObjects:(id)arg1;
- (void)removeAllMessageBoxes;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (void)refreshTrackingAreas;
- (void)viewDidMoveToSuperview;
- (void)setFrameSize:(struct CGSize)arg1;
- (unsigned int)gridIncrement;
- (BOOL)canZoomVertical;
- (id)verticalMeasurement;
- (id)horizontalMeasurement;
- (void)dealloc;
- (void)tearDownState;
- (void)setUpState;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTTrackView : XRBrushTrackView
{
    PFTInstrumentList *_model;
    NSMutableDictionary *_bands;
    XRTrackingAreaControl *_activeTrackingArea;
    BOOL _drawBubbles;
    BOOL _inMessageBoxCreation;
}

- (struct CGRect)minListFrame;
- (void)setMarkersHidden:(BOOL)arg1;
- (void)_instrumentLayoutChanged:(id)arg1;
- (id)messageBoxForObject:(id)arg1;
- (void)_showRunHelp:(id)arg1;
- (void)_editInstrumentForRunWithError:(id)arg1;
- (id)bandForInstrument:(id)arg1;
- (void)updateMarkers;
- (void)drawRunNumber:(long long)arg1 withMarkerLines:(BOOL)arg2 displaySelection:(BOOL)arg3 displayBackground:(BOOL)arg4 enforceSingleDeck:(BOOL)arg5 trimBubble:(BOOL)arg6 inRect:(struct CGRect)arg7;
- (void)drawRect:(struct CGRect)arg1;
- (void)endNow:(double)arg1;
- (void)startNow:(double)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)cursorUpdate:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)_instrumentRemoved:(id)arg1;
- (void)_instrumentAdded:(id)arg1;
- (void)_instrumentMoved:(id)arg1;
- (void)_showLibraryHelp:(id)arg1;
- (void)reloadData:(BOOL)arg1;
- (void)clearGraphCache;
- (void)reloadData;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)updateTrackingAreas;
- (void)refreshTrackingAreas;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)draggingEnded:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (id)instrumentDragTypes;
- (int)hostType;
- (void)_removeBandForInstrument:(id)arg1;
- (void)_removeAllBands;
- (void)_instrumentStateChanged:(id)arg1;
- (void)_instrumentUnselected:(id)arg1;
- (void)_instrumentSelected:(id)arg1;
- (void)_trackSegementUpdated:(id)arg1;
- (void)_trackSegementRemoved:(id)arg1;
- (void)_trackSegementAdded:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (id)watermarkMessageString;
- (void)setModel:(id)arg1;
- (id)model;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTInstrumentTrackView : PFTTrackView
{
}

+ (void)initialize;
- (unsigned int)gridIncrement;
- (BOOL)canZoomVertical;
- (id)verticalMeasurement;
- (id)horizontalMeasurement;

@end

@interface PFTLCDField : NSView
{
    double _start;
    double _end;
    int _hours;
    int _minutes;
    int _seconds;
}

+ (void)drawString:(id)arg1 inRect:(struct CGRect)arg2 withAttributes:(id)arg3;
- (void)drawRect:(struct CGRect)arg1;
- (void)_tick:(id)arg1;
- (void)forceUpdate;
- (void)endNow:(double)arg1;
- (void)reset;
- (void)startNow:(double)arg1;
- (void)viewDidMoveToSuperview;
- (void)dealloc;

@end

@interface PFTLegacySearchTokenTextField : NSTokenField <NSTokenFieldDelegate>
{
    XRInstrument *_instrument;
    NSMenuItem *_selectedMenuItem;
    NSSegmentedControl *_buttonWithMenu;
    NSButton *_clearSearchControl;
    BOOL _matchesAny;
    NSCharacterSet *_invalidCharacters;
}

+ (void)initialize;
- (id)tokenField:(id)arg1 shouldUseDrawingAttributes:(id)arg2 forRepresentedObject:(id)arg3;
- (void)setObjectValue:(id)arg1;
- (id)tokenField:(id)arg1 displayStringForRepresentedObject:(id)arg2;
- (void)_clearSearchField:(id)arg1;
- (void)_searchFieldChanged:(id)arg1;
- (void)_handleSearchFieldChanged;
- (void)_updateInstrumentForSearchFieldChanges;
- (void)viewDidMoveToWindow;
- (void)drawRect:(struct CGRect)arg1;
- (void)filterInstrument;
- (BOOL)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(id)arg3;
- (void)searchMenuSelect:(id)arg1;
- (void)updateMenuAndFilterInstrument;
- (void)_setInstrument:(id)arg1;
- (void)_instrumentSearchContextRefresh:(id)arg1;
- (void)resetCursorRects;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)awakeFromNib;
- (void)_setup;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTLegacySearchTokenTextFieldCell : NSTokenFieldCell
{
}

- (struct CGRect)drawingRectForBounds:(struct CGRect)arg1;

@end

@interface PFTLowerDisplayView : NSView
{
    NSView *_contentView;
}

@property(retain, nonatomic) NSView *contentView; // @synthesize contentView=_contentView;
- (void).cxx_destruct;

@end

@interface PFTMasterInstrumentListCell : PFTInstrumentListCell
{
    BOOL _isTrackingMasterSwitch;
    struct CGRect _switchRect;
}

+ (BOOL)prefersTrackingUntilMouseUp;
- (BOOL)wantsExpansionBox;
- (BOOL)continueTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)_handleMasterSwitchActionAtPoint:(struct CGPoint)arg1 inView:(id)arg2;
- (long long)_setSwitchBoxTrackingTagForView:(id)arg1 inCellFrame:(struct CGRect)arg2 withIndex:(long long)arg3;
- (void)applyTooltipsWithCellFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface PFTMiniDisplay : PFTNibView
{
    NSTextField *_title;
    PFTLCDField *_lcdField;
    NSButton *_appButton;
    NSButton *_stopButton;
    NSString *_documentUuid;
}

- (void)recordTrace:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)checkStateForCommand:(id)arg1;
- (void)_commandDidEnd:(id)arg1;
- (void)_commandDidStart:(id)arg1;
- (id)document;
- (void)viewDidMoveToWindow;
- (void)dealloc;
- (id)initWithDocumentUUID:(id)arg1;

@end

@interface PFTMiniDisplayWindow : NSWindow
{
}

- (void)setIsVisible:(BOOL)arg1;
- (BOOL)canBecomeKeyWindow;

@end

@interface PFTMultiStateButtonCell : NSCell
{
    BOOL _switchPressed;
    struct CGRect _currentCellBoundsDuringGesture;
    id _target;
    SEL _action;
}

+ (BOOL)prefersTrackingUntilMouseUp;
- (SEL)action;
- (void)setAction:(SEL)arg1;
- (id)target;
- (void)setTarget:(id)arg1;
- (BOOL)continueTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (BOOL)shouldTrackMouse:(struct CGPoint)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;

@end

@interface PFTPanel : NSPanel
{
}

- (BOOL)makeFirstResponder:(id)arg1;
- (void)becomeKeyWindow;
- (void)resignKeyWindow;
- (void)dealloc;

@end

@interface PFTPathCell : NSPathCell <XRPathCellAccessible>
{
}

+ (Class)pathComponentCellClass;
- (id)trackingMenu;
- (void)handleClickInComponentCell:(id)arg1 atPoint:(struct CGPoint)arg2 inRect:(struct CGRect)arg3 ofView:(id)arg4 event:(id)arg5;
- (BOOL)_showMenuForComponentCell:(id)arg1 inRect:(struct CGRect)arg2;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTPathComponentCell : NSPathComponentCell
{
    double _fixedWidth;
}

@property double fixedWidth; // @synthesize fixedWidth=_fixedWidth;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGSize)_iconSize;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)_drawNavigationBarBackgroundWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface PFTPathControl : NSPathControl
{
    BOOL _drawLeftFlatCap;
}

+ (Class)cellClass;
@property BOOL drawLeftFlatCap; // @synthesize drawLeftFlatCap=_drawLeftFlatCap;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstResponder;
- (void)awakeFromNib;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTRulerLabelCell : NSTextFieldCell
{
}

- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (long long)_typesetterBehavior;

@end

@interface PFTRulerMarker : NSRulerMarker
{
}

+ (id)_numericIndicatorFormatter;
- (struct CGRect)imageHitRectInRuler;

@end

@interface PFTScrollView : NSScrollView
{
    NSScrollView *_scrollSibling;
    BOOL _scrollingPeer;
    BOOL _ignoreScrollWheelEvents;
    double _minHeight;
    NSView *_horizontalScrollerViewToAvoid;
}

- (void)viewDidMoveToWindow;
- (void)awakeFromNib;
- (void)_doScroller:(id)arg1 hitPart:(long long)arg2 multiplier:(double)arg3;
- (double)_repeatMultiplier:(double)arg1;
- (void)scrollWheel:(id)arg1;
- (BOOL)ignoreScrollWheelEvents;
- (void)setIgnoreScrollWheelEvents:(BOOL)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setMinHight:(double)arg1;
- (void)tile;
- (void)reflectScrolledClipView:(id)arg1;
- (BOOL)_ownsWindowGrowBox;

@end

@interface PFTScroller : NSScroller
{
    BOOL _isZoomable;
    BOOL _debugModeEnabled;
    BOOL _firstClick;
    int _zoomControl;
    struct CGSize _trailingImageSize;
    struct CGSize _leadingImageSize;
    struct CGPoint _lastLocationInKnobRect;
    double _hitInset;
    BOOL _isSetupForDualControl;
    NSView *_primary;
    BOOL _ownsPrimaryView;
    NSView *_secondary;
    BOOL _isRespondingToScroll;
}

- (void)_doScrollerPFT:(id)arg1;
- (void)setPrimary:(id)arg1;
- (BOOL)isPinnedAtExtremePoint;
- (void)mouseDragged:(id)arg1;
- (void)trackKnob:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)_setDebugModeOn:(BOOL)arg1;
- (void)resetScrollToRight;
- (void)setKnobProportion:(double)arg1;
- (void)setDoubleValue:(double)arg1;
- (void)setDoubleValue:(double)arg1 knobProportion:(double)arg2;
- (void)_secondaryFrameScrolled:(id)arg1;
- (void)_primaryFrameScrolled:(id)arg1;
- (void)_secondaryFrameChanged:(id)arg1;
- (void)_primaryFrameChanged:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)_setupDualViewControl;
- (BOOL)isZoomable;
- (void)setIsZoomable:(BOOL)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTSelectedEventDataElementList : PFTDataElementList
{
    PFTTraceDocument *_traceDocument;
}

- (id)traceDocument;
- (void)setTraceDocument:(id)arg1;
- (void)_instrumentUnselected:(id)arg1;
- (void)dealloc;

@end

@interface PFTSelectedInstrumentDataElementList : PFTDataElementList
{
    PFTSelectedInstrumentList *_selectedInstrumentList;
    PFTTraceDocument *_traceDocument;
}

- (id)traceDocument;
- (void)setTraceDocument:(id)arg1;
- (void)_instrumentUnselected:(id)arg1;
- (void)_instrumentUpdated:(id)arg1;
- (void)_instrumentSelected:(id)arg1;
- (id)selectedInstrumentList;
- (void)setSelectedInstrumentList:(id)arg1;
- (void)dealloc;

@end

@interface PFTSelectedInstrumentList : PFTInstrumentList
{
}

- (void)endCommand:(id)arg1;
- (void)startCommand:(id)arg1;
- (BOOL)acceptCommand:(id)arg1;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)_instrumentUnselected:(id)arg1;
- (void)_instrumentSelected:(id)arg1;
- (BOOL)isInstrumentOwner:(id)arg1;
- (void)dealloc;
- (id)initAndObserve:(BOOL)arg1;

@end

@interface PFTSlider : NSSlider
{
    NSTimer *_scaleTimer;
    BOOL _gestureHasStarted;
    NSViewController *_feedbackController;
    NSPopover *_feedbackPopover;
}

- (void)viewDidMoveToWindow;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)_updateScale:(id)arg1;
- (void)_updateGestureString;
- (long long)incrementsPerSide;
- (long long)currentScaleIncrement;
- (double)doubleValue;
- (void)viewDidMoveToSuperview;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTSliderBackdropView : NSScroller
{
    int _type;
}

- (int)backdropType;
- (void)setBackdropType:(int)arg1;
- (void)xxxdrawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTSliderCell : NSSliderCell
{
    BOOL _isPressed;
    float _oldValue;
}

- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawKnob:(struct CGRect)arg1;

@end

@interface PFTSpinMonitor : NSObject
{
}

+ (id)spinningProcesses;
+ (BOOL)isProcessSpinning:(int)arg1;
+ (void)removeUser;
+ (void)addUser;
+ (BOOL)enabled;
+ (void)setEnabled:(BOOL)arg1;
+ (void)checkInitialize;
+ (void)initialize;

@end

@interface PFTSquareToggleButton : NSControl
{
}

- (void)setToggleState:(BOOL)arg1;
- (BOOL)isFlipped;
- (void)viewDidMoveToSuperview;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTSquareToggleButtonCell : PFTMultiStateButtonCell
{
    BOOL _toggleState;
    NSTableHeaderCell *_drawCell;
}

- (void)setToggleState:(BOOL)arg1;
- (BOOL)_sendActionFrom:(id)arg1;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)dealloc;

@end

@interface PFTSwitchBoard : NSControl <NSMenuDelegate>
{
    NSMutableArray *_switches;
    NSMutableArray *_states;
    NSMutableArray *_enabledFlags;
    NSMutableArray *_tooltips;
    int _type;
    int _shape;
    unsigned long long _keyboardNavigationPosition;
}

- (void)keyDown:(id)arg1;
- (void)setKeyboardNavigationPosition:(unsigned long long)arg1;
- (unsigned long long)keyboardNavigationPosition;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)menu:(id)arg1 updateItem:(id)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (long long)numberOfItemsInMenu:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint)arg3 userData:(void *)arg4;
- (void)setSwitch:(id)arg1 tooltip:(id)arg2;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2;
- (void)setSwitch:(id)arg1 enabled:(BOOL)arg2;
- (BOOL)isAnySwitchEnabled;
- (BOOL)isSwitchEnabledAtIndex:(unsigned long long)arg1;
- (BOOL)isSwitchEnabled:(id)arg1;
- (void)performClickOnSwitch:(id)arg1 toState:(int)arg2;
- (void)performClickOnSwitch:(id)arg1;
- (int)stateOfSwitchAtIndex:(unsigned long long)arg1;
- (int)stateOfSwitch:(id)arg1;
- (id)switchNameClicked;
- (unsigned long long)switchClicked;
- (void)toggleSwitch:(id)arg1;
- (void)removeSwitch:(id)arg1;
- (void)setSwitch:(id)arg1 toState:(int)arg2 tooltip:(id)arg3;
- (void)setSwitch:(id)arg1 toState:(int)arg2;
- (id)selectedSwitch;
- (id)switchAtIndex:(unsigned long long)arg1;
- (id)switches;
- (unsigned long long)numberOfSwitches;
- (int)switchBoardShapeType;
- (void)setSwitchBoardShapeType:(int)arg1;
- (id)menuDelegate;
- (void)setMenuDelegate:(id)arg1;
- (int)switchBoardType;
- (void)setSwitchBoardType:(int)arg1;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstResponder;
- (BOOL)isOpaque;
- (void)resetCursorRects;
- (void)dealloc;
- (void)viewDidMoveToSuperview;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTSwitchBoardCell : PFTMultiStateButtonCell
{
    unsigned long long _switchBeingTracked;
    unsigned long long _switchClicked;
    id <PFTSwitchBoardMenuDelegate> _menuDelegate;
}

- (void)displayMenuForCellRect:(struct CGRect)arg1 ofView:(id)arg2;
- (id)menuDelegate;
- (void)setMenuDelegate:(id)arg1;
- (void)performClick:(id)arg1;
- (void)performClickOnSwitchIndex:(unsigned long long)arg1 toState:(int)arg2 forSwitchBoard:(id)arg3;
- (void)performClickOnSwitchIndex:(unsigned long long)arg1 forSwitchBoard:(id)arg2;
- (unsigned long long)switchClicked;
- (unsigned long long)switchWithCellFrame:(struct CGRect)arg1 inView:(id)arg2 forPoint:(struct CGPoint)arg3;
- (BOOL)continueTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (BOOL)shouldTrackMouse:(struct CGPoint)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)isOpaque;
- (void)dealloc;
- (id)init;

@end

@interface PFTTimeSelectionView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface PFTTraceControlView : NSView
{
    NSView *_topView;
    NSView *_bottomView;
    BOOL _movingGestureActive;
    struct CGPoint _dragOrigin;
}

- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)discardAllCursorRects;
- (void)resetCursorRects;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface PFTTraceDocument : NSDocument <XRDeviceObserver, PFTSwitchBoardMenuDelegate, PFTInstrumentClient, NSOpenSavePanelDelegate, NSAnimationDelegate, XRContextContainer, NSOutlineViewDelegate, XRProcessTargetedObject>
{
    XRThreadListView *_threadList;
    XRCPUListView *_cpuList;
    XRThreadTrackView *_threadTrackView;
    XRCPUTrackView *_cpuTrackView;
    BOOL _lowerDisplayIsHidden;
    BOOL _t_lowerDisplayIsHidden;
    XRRunBrowser *_runBrowser;
    XRIconMessageWatermark *_contentViewWatermark;
    PFTSelectedInstrumentDataElementList *_instrumentInspectorModel;
    XRSelectedInstrumentConfigurationDataElementList *_instrumentConfigurationModel;
    PFTSelectedEventDataElementList *_eventInspectorModel;
    NSMutableArray *_navigationElements;
    XRContext *_rootContext;
    NSURL *_originalURL;
    BOOL _createdViaTemplate;
    NSDictionary *_creationTemplateData;
    XRContext *_restorationContext;
    NSDictionary *_template;
    struct CGRect _previousUpperRect;
    struct CGRect _previousLowerRect;
    struct CGRect _previousTrackRect;
    BOOL _doAnimationsInstantly;
    XRFloatValueAnimation *_instrumentsAnimation;
    XRTrace *_trace;
    PFTSelectedInstrumentList *_selectedInstruments;
    unsigned long long _currentTimeInspectionLocation;
    double _currentTimeRecordLocation;
    struct XRTimeRange _selectedTimeRange;
    BOOL _expandTimeRangeAutomatically;
    BOOL _ignoreTimeSelections;
    XRSymbolInspectorViewController *_symbolicationController;
    BOOL _symbolicationControllerModelIsOutOfDate;
    NSString *_t_windowString;
    struct CGRect _t_TrackRect;
    struct CGRect _t_ControlRect;
    struct CGRect _t_leftContainer;
    NSString *_t_selectedInstrumentUUID;
    BOOL _t_ui_lowerDisplay_hidden;
    BOOL _t_ui_instruments_hidden;
    BOOL _t_ui_eventInspector_hidden;
    float _t_ui_dualSliderValue;
    double _t_inspectionTimeInSeconds;
    int _ui_record_state;
    int _ui_pause_state;
    BOOL _ui_loop_state;
    BOOL _ui_restart_state;
    NSString *_ui_time_state;
    int _ui_flag_state;
    BOOL _ui_flag_can_select_next;
    BOOL _ui_flag_can_select_previous;
    int _ui_range_state;
    int _ui_layout_state;
    BOOL _ui_eventInspector_hidden;
    BOOL _ui_lowerDisplay_hidden;
    BOOL _ui_instruments_hidden;
    XRStrategyInfo *_ui_selected_strategy;
    NSArray *_ui_available_strategies;
    XRBusyModel *_busyModel;
    BOOL _hudEnabled;
    BOOL _openDetailViewAfterRecording;
    BOOL _isClosingDocument;
    double _oldSplitterValue;
    PFTProcess *_defaultProcess;
    NSString *_uuid;
    NSWindow *_progressWindow;
    BOOL _ui_summary_supported;
    BOOL _summariesAreUpToDate;
    NSView *_summaryView;
    NSMutableArray *_summaryModels;
    BOOL _summaryModelsAreDisposed;
    NSMutableDictionary *_pendingSummaryUpdates;
    NSArray *_byTopicHighlights;
    unsigned long long _byTopicHighlightsSelection;
    XRFlagViewer *_flagViewer;
    BOOL _ignoreExtraSelection;
    BOOL _flagTableDeferReload;
    BOOL _observingDisplayedFlags;
    BOOL _observingSelectedRunFlags;
    BOOL _topDocument;
    NSString *_t_selected_strategy;
    XRBrushTrackView *_currentTrackView;
    double _lastInspectorWidth;
    unsigned int _runningTraceConnectionUUID;
    BOOL _changingInspectionTime;
    XRCallTreeCompareBarViewController *_callTreeCompareBarViewController;
    int _ui_default_target_type_in_chooser;
    int _msgTracerCreationSource;
    XRDevice *_targetDevice;
    PFTInstrumentListView *_instrumentListView;
    PFTInstrumentTrackView *_trackList;
    PFTUpperDisplayView *_upperDisplay;
    PFTLowerDisplayView *_lowerDisplay;
    NSView *_detailContainer;
    PFTDataViewer *_instrumentConfigurator;
    PFTDataViewer *_instrumentInspector;
    PFTDataViewer *_eventInspector;
    PFTLegacySearchTokenTextField *_detailSearchField;
    PFTDetailTypeHostView *_detailHost;
    XRHorizontalFillSplitView *_upperLowerSplitView;
    NSView *_navigationView;
    XRContextPathControl *_contextPathControl;
    NSImageView *_navigationViewThumb;
    NSSlider *_backtraceCollapseSlider;
    NSScrollView *_backtraceCollapseContainerView;
    NSSlider *_dualSlider;
    NSViewAnimation *_eventViewerAnimation;
}

+ (BOOL)isAnimationRunning;
+ (void)setAnimationRunning:(BOOL)arg1;
+ (id)keyPathsForValuesAffectingDefaultTargetTypeForChooser;
+ (BOOL)runningAsAppleInternal;
+ (void)restoreRecentTarget:(id)arg1;
+ (id)mostRecentDocument;
+ (id)documentWithUUID:(id)arg1;
+ (void)initialize;
@property(retain) NSViewAnimation *eventViewerAnimation; // @synthesize eventViewerAnimation=_eventViewerAnimation;
@property int msgTracerCreationSource; // @synthesize msgTracerCreationSource=_msgTracerCreationSource;
@property(retain) XRBrushTrackView *currentTrackView; // @synthesize currentTrackView=_currentTrackView;
@property(retain) NSString *selectedStrategy; // @synthesize selectedStrategy=_t_selected_strategy;
@property NSSlider *dualSlider; // @synthesize dualSlider=_dualSlider;
@property NSScrollView *backtraceCollapseContainerView; // @synthesize backtraceCollapseContainerView=_backtraceCollapseContainerView;
@property NSSlider *backtraceCollapseSlider; // @synthesize backtraceCollapseSlider=_backtraceCollapseSlider;
@property(retain) NSImageView *navigationViewThumb; // @synthesize navigationViewThumb=_navigationViewThumb;
@property(retain) XRContextPathControl *contextPathControl; // @synthesize contextPathControl=_contextPathControl;
@property NSView *navigationView; // @synthesize navigationView=_navigationView;
@property XRHorizontalFillSplitView *upperLowerSplitView; // @synthesize upperLowerSplitView=_upperLowerSplitView;
@property PFTDetailTypeHostView *detailHost; // @synthesize detailHost=_detailHost;
@property PFTLegacySearchTokenTextField *detailSearchField; // @synthesize detailSearchField=_detailSearchField;
@property(retain) PFTDataViewer *eventInspector; // @synthesize eventInspector=_eventInspector;
@property PFTDataViewer *instrumentInspector; // @synthesize instrumentInspector=_instrumentInspector;
@property PFTDataViewer *instrumentConfigurator; // @synthesize instrumentConfigurator=_instrumentConfigurator;
@property(retain) NSView *detailContainer; // @synthesize detailContainer=_detailContainer;
@property(retain) PFTLowerDisplayView *lowerDisplay; // @synthesize lowerDisplay=_lowerDisplay;
@property PFTUpperDisplayView *upperDisplay; // @synthesize upperDisplay=_upperDisplay;
@property PFTInstrumentTrackView *trackList; // @synthesize trackList=_trackList;
@property PFTInstrumentListView *instrumentListView; // @synthesize instrumentListView=_instrumentListView;
@property(retain) NSArray *ui_available_strategies; // @synthesize ui_available_strategies=_ui_available_strategies;
@property BOOL ui_summary_supported; // @synthesize ui_summary_supported=_ui_summary_supported;
@property BOOL isClosingDocument; // @synthesize isClosingDocument=_isClosingDocument;
@property(retain) XRDevice *targetDevice; // @synthesize targetDevice=_targetDevice;
@property(copy) NSString *uuid; // @synthesize uuid=_uuid;
@property(retain) PFTProcess *defaultProcess; // @synthesize defaultProcess=_defaultProcess;
@property double oldSplitterValue; // @synthesize oldSplitterValue=_oldSplitterValue;
@property BOOL hudEnabled; // @synthesize hudEnabled=_hudEnabled;
@property int ui_default_target_type_in_chooser; // @synthesize ui_default_target_type_in_chooser=_ui_default_target_type_in_chooser;
@property BOOL ui_instruments_hidden; // @synthesize ui_instruments_hidden=_ui_instruments_hidden;
@property BOOL ui_lowerDisplay_hidden; // @synthesize ui_lowerDisplay_hidden=_ui_lowerDisplay_hidden;
@property BOOL ui_eventInspector_hidden; // @synthesize ui_eventInspector_hidden=_ui_eventInspector_hidden;
@property int ui_layout_state; // @synthesize ui_layout_state=_ui_layout_state;
@property int ui_range_state; // @synthesize ui_range_state=_ui_range_state;
@property(readonly) BOOL ui_flag_can_select_previous; // @synthesize ui_flag_can_select_previous=_ui_flag_can_select_previous;
@property(readonly) BOOL ui_flag_can_select_next; // @synthesize ui_flag_can_select_next=_ui_flag_can_select_next;
@property int ui_flag_state; // @synthesize ui_flag_state=_ui_flag_state;
@property(retain) XRBusyModel *busyModel; // @synthesize busyModel=_busyModel;
@property(copy) NSString *ui_time_state; // @synthesize ui_time_state=_ui_time_state;
@property BOOL ui_restart_state; // @synthesize ui_restart_state=_ui_restart_state;
@property BOOL ui_loop_state; // @synthesize ui_loop_state=_ui_loop_state;
@property int ui_pause_state; // @synthesize ui_pause_state=_ui_pause_state;
@property int ui_record_state; // @synthesize ui_record_state=_ui_record_state;
- (void)showExtendedDetail:(id)arg1;
- (void)showDisplaySettings:(id)arg1;
- (void)showRecordSettings:(id)arg1;
- (id)objectInScriptableInstrumentsAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfScriptableInstruments;
- (void)setWindowedRecording:(BOOL)arg1;
- (void)setSelectedRecordMode:(int)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)removeFlags:(id)arg1;
- (void)unregisterFlags:(id)arg1;
- (void)registerFlags:(id)arg1;
- (void)setTargetsDevice:(id)arg1;
- (int)defaultTargetTypeForChooser;
- (BOOL)supportsTargetType:(int)arg1;
- (id)currentTargetDevice;
- (id)currentTargetProcess;
- (void)setTargetsInstrumentSpecific;
- (void)setTargetsAllProcesses;
- (void)setTargetsExistingProcess:(id)arg1;
- (void)setTargetsLaunchedProcess:(id)arg1;
- (void)_setTargetType:(int)arg1 withProcess:(id)arg2 device:(id)arg3;
- (void)_validateNavThumbVisibility;
- (void)splitViewDidResizeSubviews:(id)arg1;
- (struct CGRect)splitView:(id)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (BOOL)switchBoard:(id)arg1 menuHasKeyEquivalent:(id)arg2 forEvent:(id)arg3 target:(id *)arg4 action:(SEL *)arg5;
- (int)switchBoard:(id)arg1 numberOfItemsInMenu:(id)arg2;
- (void)switchBoard:(id)arg1 menuNeedsUpdate:(id)arg2;
- (BOOL)switchBoard:(id)arg1 menu:(id)arg2 updateItem:(id)arg3 atIndex:(long long)arg4 shouldCancel:(BOOL)arg5;
- (void)_xrayReportError:(id)arg1;
- (void)_addInstrument:(id)arg1;
- (void)_createInstrument:(id)arg1;
- (void)replaceType:(id)arg1 withType:(id)arg2;
- (void)refreshedInstrumentType:(id)arg1;
- (void)attachInstrumentType:(id)arg1 toProcess:(id)arg2;
- (void)newInstrumentType:(id)arg1;
- (void)refreshDocumentDisplay;
- (void)refreshDocumentDisplay:(BOOL)arg1;
- (BOOL)animationShouldStart:(id)arg1;
- (void)animationDidEnd:(id)arg1;
- (void)animateEventViewerVisibility:(BOOL)arg1;
- (void)_eventSelected:(id)arg1;
- (void)updateExtendedEventViewElements;
- (void)animateInstrumentsVisibility:(BOOL)arg1;
- (void)animateLowerVisibility:(BOOL)arg1;
- (void)_sliderDidCompleteGesture:(id)arg1 oldValue:(id)arg2;
- (void)adjustUpperTrackScale:(id)arg1;
- (void)setDriver:(id)arg1;
- (void)showInstrumentHelp:(id)arg1;
- (void)refreshNavigationViewForInstrument:(id)arg1;
- (void)_recordOptionsEnded:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)recordOptions:(id)arg1;
- (void)callTreeCompare:(id)arg1;
- (void)callTreeMine:(id)arg1;
- (id)panel:(id)arg1 userEnteredFilename:(id)arg2 confirmed:(BOOL)arg3;
- (void)saveDocumentSilently:(id)arg1;
- (void)_handleDocumentFileChanges:(id)arg1;
- (void)showRuns:(id)arg1;
- (void)_deleteRunAlertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)deleteRun:(id)arg1;
- (void)_deleteInstrumentAlertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)deleteInstrument:(id)arg1;
- (void)forwardHistory:(id)arg1;
- (void)backHistory:(id)arg1;
- (void)_lookupEnded:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)traceNewCall:(id)arg1;
- (void)_layoutAction:(id)arg1;
- (void)_flagAction:(id)arg1;
- (void)tableViewColumnDidMove:(id)arg1;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)setTopDocument:(BOOL)arg1;
- (void)inspectFlag:(id)arg1;
- (void)removeFlag:(id)arg1;
- (void)addFlagToRecording:(id)arg1;
- (void)nextFlag:(id)arg1;
- (void)prevFlag:(id)arg1;
- (void)toggleFlagTable:(id)arg1;
- (void)hudWhenRunning:(id)arg1;
- (void)exportData:(id)arg1;
- (void)exportPanelDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)saveAsPublicTemplate:(id)arg1;
- (void)saveAsTemplatePanelDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)toggleSpinMonitor:(id)arg1;
- (void)performFindPanelAction:(id)arg1;
- (void)resetTrackView;
- (void)snapTrackViewToFit:(id)arg1;
- (void)increaseDeckSize:(id)arg1;
- (void)decreaseDeckSize:(id)arg1;
- (void)setDisplayContext:(id)arg1 visible:(BOOL)arg2;
- (BOOL)isDisplayContextVisible:(id)arg1;
- (void)showLibrary:(id)arg1;
- (void)getLibrary:(id)arg1;
- (void)_showSymbolSheetEnded:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)showSymbolSheet;
- (void)_initializeSymbolInspector;
- (void)toggleExtendedDetail:(id)arg1;
- (void)getEvent:(id)arg1;
- (void)_openDetailViewNotification:(id)arg1;
- (void)closeDetailView;
- (void)openDetailView;
- (void)toggleInstruments:(id)arg1;
- (void)toggleDetail:(id)arg1;
- (void)setMiniToolbarVisible:(BOOL)arg1;
- (id)windowController;
@property(retain) NSSplitView *extendedDetailSplitView;
@property NSView *inspectorDataViewer;
@property NSView *inspectorChooserView;
@property NSView *controlBarView;
- (void)toggleLoopReplay:(id)arg1;
- (void)pauseTrace:(id)arg1;
- (void)recordTrace:(id)arg1;
- (void)_recordTraceStarted:(BOOL)arg1;
- (void)toggleRecordIfPossible;
- (BOOL)chooseExecutableAsDefaultTarget;
- (void)choosePidAsDefaultTarget;
- (void)editInstrument:(id)arg1;
- (void)buildNewInstrument:(id)arg1;
- (void)_toggleColumnMode:(id)arg1;
- (void)rangeAction:(id)arg1;
- (void)clearSelectedTimeRange:(id)arg1;
- (void)setTimeRangeEnd:(id)arg1;
- (void)setTimeRangeStart:(id)arg1;
- (void)_setEndTimeRange:(unsigned long long)arg1;
- (void)_setStartTimeRange:(unsigned long long)arg1;
- (void)fullScreenAction:(id)arg1;
- (void)basicInstrumentTableItemDoubleClicked:(id)arg1;
- (void)recordSwitchBoardAction:(id)arg1;
- (void)eventSwitchBoardAction:(id)arg1;
- (void)addSwitchBoardAction:(id)arg1;
- (void)editSelectedInstrument;
- (void)editInstrumentInstance:(id)arg1;
- (void)_instrumentControlsRefreshed:(id)arg1;
- (void)_instrumentUnselected:(id)arg1;
- (void)_instrumentSelected:(id)arg1;
- (void)_instrumentChangedSetupView:(id)arg1;
- (void)_runChanged:(id)arg1;
- (void)_selectedCoresChanged:(id)arg1;
- (void)_selectedThreadsChanged:(id)arg1;
- (void)_instrumentChangedSearchView:(id)arg1;
- (void)_instrumentChangedNavigationView:(id)arg1;
- (void)_instrumentChangedDetailView:(id)arg1;
- (void)_instrumentStateChanged:(id)arg1;
- (void)_instrumentMoved:(id)arg1;
- (void)_instrumentWillBeRemoved:(id)arg1;
- (void)_instrumentAdded:(id)arg1;
@property(retain) XRStrategyInfo *ui_selected_strategy;
- (void)setStrategy:(id)arg1 withInfo:(id)arg2;
- (void)_connectToTrackView:(id)arg1;
- (void)_disconnectFromTrackView:(id)arg1;
- (void)_updateSupportedStrategies;
- (BOOL)validateMenuItem:(id)arg1;
- (void)validateUIState;
- (void)validateControls;
- (void)_validateControlsMainThreadCallback;
- (BOOL)isUITransforming;
- (id)searchCriteria;
- (void)addCriteriaToSearchField:(id)arg1;
- (void)_spinDetected:(id)arg1;
- (BOOL)canEnableHUD;
- (BOOL)displayEnabled;
- (BOOL)isHUDEnabled;
- (void)setHUDEnabled:(BOOL)arg1;
- (void)moveToNextRun:(id)arg1;
- (void)moveToPreviousRun:(id)arg1;
- (void)toggleRunBrowser:(id)arg1;
- (id)_trackList;
- (void)analysisProgressDidChange;
- (void)setWatermarkProgress:(float)arg1;
- (void)_displayWatermarkMessage:(id)arg1;
- (void)setContentViewWatermark:(id)arg1;
- (void)setContentViewWatermark:(id)arg1 blur:(BOOL)arg2;
- (void)_uiReplayCompleted:(id)arg1;
- (void)setSelectedTimeScale:(float)arg1;
- (void)setSelectedTimeRange:(struct XRTimeRange)arg1;
- (struct XRTimeRange)selectedTimeRange;
- (void)clearSelectedTimeRange;
@property(nonatomic) unsigned long long inspectionTime;
- (void)_inspectionHeadUpdated:(id)arg1;
- (BOOL)isRecordingMasterTrack;
- (void)endRecordingMasterTrack;
- (BOOL)startRecordingMasterTrack;
- (void)moveToPreviousRun;
- (void)moveToNextRun;
- (void)_modifyCurrentRunIndex:(long long)arg1;
- (BOOL)isRunning;
- (void)endRun;
- (BOOL)startRun;
- (BOOL)allInstrumentsSupportTargetType:(int)arg1;
- (void)_didEndCommand:(id)arg1;
- (void)_willEndCommand:(id)arg1;
- (void)_didStartCommand:(id)arg1;
- (void)_willStartCommand:(id)arg1;
- (void)_tick:(id)arg1;
- (void)_setTimeForStart:(double)arg1 end:(double)arg2;
- (id)selectedInstrument;
- (id)trace;
- (id)masterInstrument;
- (id)basicInstruments;
- (void)_openDataView;
- (void)displaySymbolInSource:(id)arg1 withConcreteSymbol:(id)arg2 withMarkerAtLine:(id)arg3 withCallTreeInformation:(id)arg4;
- (id)globalContexts;
- (id)dataElementsForContext:(id)arg1;
- (void)setSelectedByTopicHighlights:(id)arg1;
- (id)selectedByTopicHighlights;
- (id)byTopicHighlights;
- (BOOL)needsSummaryView;
- (void)setSummaryObservationEnabled:(BOOL)arg1;
- (void)setSummaryObservationEnabled:(BOOL)arg1 forInstrument:(id)arg2;
- (id)summaryModels;
- (void)refreshSummariesForInstrument:(id)arg1;
- (void)refreshSummaries;
- (void)_refreshSummariesForInstrumentOnTimer:(id)arg1;
- (void)_invalidateSummaryModels;
- (void)_disposeOfSummaries;
- (void)_refreshSummariesForInstrument:(id)arg1;
- (void)_clearSummaryTimerForInstrument:(id)arg1;
- (id)summaryView;
- (void)reloadSummaryView;
- (id)contextContainerForUUID:(id)arg1;
- (id)viewForContext:(id)arg1;
- (id)siblingsForContext:(id)arg1;
- (id)contextRepresentation;
- (id)splitterContext;
- (id)summaryViewContext;
- (id)rootContext;
- (id)iconForContext:(id)arg1;
- (void)displayContext:(id)arg1;
- (void)_appDidChangeScreenParametersNotification:(id)arg1;
- (void)showWindows;
- (id)windowForSheet;
- (id)mainWindow;
- (void)makeWindowControllers;
- (void)restoreDocumentWindowWithIdentifier:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)close;
- (void)restoreWithTemplateData:(id)arg1;
- (id)templateData;
- (id)templateAction;
- (void)setTemplateAction:(id)arg1;
- (BOOL)prepareSavePanel:(id)arg1;
- (BOOL)writeSafelyToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 error:(id *)arg4;
- (id)displayName;
- (void)_resetNameAndType;
- (BOOL)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (id)originalURL;
- (void)_initialProcessSelectionCallback:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_backtraceSliderChanged:(id)arg1;
- (void)windowControllerDidLoadNib:(id)arg1;
- (void)handleDeviceNotification:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface PFTTraceView : PFTTrackView <PFTDetailViewProtocol>
{
    NSString *_detailViewLabel;
}

+ (void)initialize;
- (id)instrumentDragTypes;
- (void)validateForWatermark;
- (void)reloadDetailData;
- (id)detailViewLabel;
- (void)setInspectionTimeInSeconds:(double)arg1;
- (id)instrument;
- (void)setInstrument:(id)arg1;
- (void)startNow:(double)arg1;
- (void)setDetailViewLabel:(id)arg1;
- (id)newVerticalScaleUnits;
- (id)newHorizontalScaleUnits;
- (int)hostType;
- (unsigned int)gridIncrement;
- (BOOL)canZoomVertical;
- (id)verticalMeasurement;
- (id)horizontalMeasurement;
- (void)dealloc;

@end

@interface PFTTrackRulerView : NSRulerView
{
    NSTableHeaderCell *_drawCell;
}

+ (id)_labelCell;
+ (id)separatorColor;
+ (id)backgroundColor;
+ (id)labelColor;
+ (void)initialize;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)drawMarkersInRect:(struct CGRect)arg1;
- (struct CGRect)_markerAreaRect;
- (void)mouseDown:(id)arg1;
- (id)_markerHitTest:(struct CGPoint)arg1 inRect:(struct CGRect)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (id)_hashMarkDictionaryForDocView:(id)arg1 measurementUnitToBoundsConversionFactor:(double)arg2 stepUpCycle:(id)arg3 stepDownCycle:(id)arg4 minimumHashSpacing:(double)arg5 minimumLabelSpacing:(double)arg6;
- (void)drawHashMarksAndLabelsInRect2:(struct CGRect)arg1;
- (void)drawHashMarksAndLabelsInRect851:(struct CGRect)arg1;
- (void)dealloc;
- (id)initWithScrollView:(id)arg1 orientation:(unsigned long long)arg2;

@end

@interface PFTTrayView : NSView
{
    int _appearanceType;
}

- (void)resetCursorRects;
- (void)drawRect:(struct CGRect)arg1;
- (int)appearanceType;
- (void)setAppearanceType:(int)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTUIScriptingInstrumentView : PFTInstrumentListView
{
}

- (int)hostType;
- (unsigned int)deckUnitsForInstrument:(id)arg1;
- (id)instrumentDragTypes;
- (id)createDataCell;
- (id)label;

@end

@interface PFTUpperDisplayView : NSView
{
    NSView *_instrumentsListScrollView;
    NSView *_trackScrollView;
}

- (void)setFrameSize:(struct CGSize)arg1;
- (void)setList:(id)arg1 trackView:(id)arg2;
- (double)splitPosition;
- (void)setSplitPosition:(double)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface PFTWidthEnforcingView : NSView
{
}

- (void)setFrameSize:(struct CGSize)arg1;
- (BOOL)isOpaque;

@end

@interface PFTWindow : NSWindow
{
    BOOL _isBecomingKey;
    BOOL _isResigningKey;
}

- (void)flagsChanged:(id)arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (void)cancelOperation:(id)arg1;
- (void)becomeKeyWindow;
- (BOOL)isBecomingKey;
- (void)resignKeyWindow;
- (BOOL)isResigningKey;

@end

@interface PFTWindowController : NSWindowController <NSWindowDelegate>
{
    BOOL _strategyToolbarOpen;
    NSSplitView *_extendedDetailSplitView;
    NSView *_controlBarView;
    NSView *_inspectorChooserView;
    NSView *_inspectorDataViewer;
    XRInstrumentDebuggerWindowController *_debuggerWindowController;
    NSSet *_currentStrategyIdentifiers;
    XRStrategyInfo *_selectedStrategy;
    id <XRToolbarManager> _toolbarManager;
    XRStrategiesToolbarViewController *_strategiesToolbarViewController;
    NSArray *_upperLowerSplitViewVerticalNoStrategyToolbarConstraints;
    NSArray *_upperLowerSplitViewVerticalWithStrategyToolbarConstraints;
}

@property(retain, nonatomic) NSArray *upperLowerSplitViewVerticalWithStrategyToolbarConstraints; // @synthesize upperLowerSplitViewVerticalWithStrategyToolbarConstraints=_upperLowerSplitViewVerticalWithStrategyToolbarConstraints;
@property(retain, nonatomic) NSArray *upperLowerSplitViewVerticalNoStrategyToolbarConstraints; // @synthesize upperLowerSplitViewVerticalNoStrategyToolbarConstraints=_upperLowerSplitViewVerticalNoStrategyToolbarConstraints;
@property(retain, nonatomic) XRStrategiesToolbarViewController *strategiesToolbarViewController; // @synthesize strategiesToolbarViewController=_strategiesToolbarViewController;
@property(retain, nonatomic) id <XRToolbarManager> toolbarManager; // @synthesize toolbarManager=_toolbarManager;
@property(retain, nonatomic) XRStrategyInfo *selectedStrategy; // @synthesize selectedStrategy=_selectedStrategy;
@property(retain, nonatomic) NSSet *currentStrategyIdentifiers; // @synthesize currentStrategyIdentifiers=_currentStrategyIdentifiers;
@property(retain, nonatomic) XRInstrumentDebuggerWindowController *debuggerWindowController; // @synthesize debuggerWindowController=_debuggerWindowController;
@property(nonatomic) __weak NSView *inspectorDataViewer; // @synthesize inspectorDataViewer=_inspectorDataViewer;
@property(nonatomic) __weak NSView *inspectorChooserView; // @synthesize inspectorChooserView=_inspectorChooserView;
@property(nonatomic) __weak NSView *controlBarView; // @synthesize controlBarView=_controlBarView;
@property(retain, nonatomic) NSSplitView *extendedDetailSplitView; // @synthesize extendedDetailSplitView=_extendedDetailSplitView;
- (void).cxx_destruct;
- (void)_updateSupportedStrategies;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)windowShouldClose:(id)arg1;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (void)windowWillClose:(id)arg1;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (void)setupToolbar;
- (void)unhideStrategyToolbarForWatermark;
- (void)hideStrategyToolbarForWatermark;
- (void)reloadStrategyControls;
- (void)setStrategySummaryFilter:(id)arg1;
- (void)setStrategyToolbarVisible:(BOOL)arg1;
- (void)showSelfServiceDebugger:(id)arg1;
@property(readonly, nonatomic) __weak PFTTraceDocument *traceDocument;
- (void)setDocument:(id)arg1;
- (BOOL)shouldCloseDocument;
- (id)windowTitleForDocumentDisplayName:(id)arg1;
- (void)windowDidLoad;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRAbstractFileSystem (NSBrowserDelegate)
- (id)browser:(id)arg1 previewViewControllerForLeafItem:(id)arg2;
- (BOOL)browser:(id)arg1 writeRowsWithIndexes:(id)arg2 inColumn:(long long)arg3 toPasteboard:(id)arg4;
- (void)browser:(id)arg1 willDisplayCell:(id)arg2 atRow:(long long)arg3 column:(long long)arg4;
- (id)browser:(id)arg1 objectValueForItem:(id)arg2;
- (BOOL)browser:(id)arg1 isLeafItem:(id)arg2;
- (id)browser:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)browser:(id)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@interface XRActivityPlaceholderView : NSView
{
    XRActivityView *_activityView;
}

- (void).cxx_destruct;
@property(readonly) XRActivityView *activityView;
- (id)hitTest:(struct CGPoint)arg1;
- (void)viewDidMoveToWindow;
- (void)_sizeAndPositionActivityView;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)sizeToFitToolbarDisplayMode:(unsigned long long)arg1 sizeMode:(unsigned long long)arg2;

@end

@interface XRActivityTextLayer : DVTTextLayer
{
    NSDictionary *_textAttributes;
}

@property(copy, nonatomic) NSDictionary *textAttributes; // @synthesize textAttributes=_textAttributes;
- (void).cxx_destruct;
- (void)setString:(id)arg1;
@property(readonly) NSDictionary *currentTextAttributes;
- (id)effectiveAttributes;

@end

@interface XRToolbarItem : NSToolbarItem
{
    BOOL _connectedToContext;
    NSString *_traceDocumentIdentifier;
}

@property BOOL connectedToContext; // @synthesize connectedToContext=_connectedToContext;
@property(copy) NSString *traceDocumentIdentifier; // @synthesize traceDocumentIdentifier=_traceDocumentIdentifier;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)itemContext;
- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (void)_performContextDisconnection;
- (void)_performContextConnection;
- (id)toolTip;
- (id)paletteLabel;
- (void)dealloc;
- (id)initWithItemIdentifier:(id)arg1 documentIdentifier:(id)arg2;

@end

@interface XRActivityToolbarItem : XRToolbarItem
{
    unsigned long long _hours;
    unsigned long long _minutes;
    unsigned long long _seconds;
}

@property(readonly) XRActivityView *activityView;
- (long long)visibilityPriority;
- (struct CGSize)minSize;
- (struct CGSize)maxSize;
- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (void)_runWasSelected:(id)arg1;
- (void)_updateRuns:(unsigned long long)arg1 selectedRunIndex:(unsigned long long)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_inspectionHeadChanged:(id)arg1;
- (void)_updateTime;

@end

@interface XRActivityView : NSView
{
    BOOL _isSetup;
    CALayer *_backgroundLayer;
    CALayer *_backgroundColorLayer;
    XRActivityTextLayer *_runsLayer;
    XRActivityTextLayer *_timeLayer;
    NSDictionary *_textAttributes;
    BOOL _observingKeyWindowNotifications;
    NSString *_runsString;
    NSString *_timeString;
}

+ (struct CGSize)defaultSizeForToolbarDisplayMode:(unsigned long long)arg1 sizeMode:(unsigned long long)arg2;
- (void).cxx_destruct;
- (void)_activationStateChangedForWindow:(id)arg1;
- (void)_updateCurrentActivityReportForWindowActivationState;
- (void)_updateBackgroundColorForWindowActivationState;
- (void)setUpOrTearDown;
- (void)tearDown;
- (void)_handleKeyWindowNotificaiton:(id)arg1;
- (void)setup;
- (void)setupLayers;
- (id)_timeLayer;
- (id)_runsLayer;
- (id)_textLayerWithFrame:(struct CGRect)arg1 stringValue:(id)arg2;
- (id)_backgroundLayer;
- (id)_highlightColor;
- (id)_backgroundColor;
- (BOOL)_isActiveWindowState;
- (void)_updateHighlightColorForWindowActivationState;
- (struct CGRect)insetReportLayerBounds;
- (struct CGRect)insetRootLayerBounds;
@property(copy) NSString *timeString; // @synthesize timeString=_timeString;
@property(copy) NSString *runsString; // @synthesize runsString=_runsString;
@property struct CGSize contentSize;
- (void)sizeToFitToolbarDisplayMode:(unsigned long long)arg1 sizeMode:(unsigned long long)arg2;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRAnnotation : NSObject
{
    XRSourceTabView *_accessoryView;
    struct CGSize _minAccessoryViewSize;
    NSColor *_color;
    NSMutableArray *_commentArray;
    int _type;
    BOOL _showInspector;
    NSString *_snippet;
    DVTTextStorage *_textStorage;
    struct _NSRange _paragraphRange;
}

@property(nonatomic) struct _NSRange paragraphRange; // @synthesize paragraphRange=_paragraphRange;
@property(retain, nonatomic) DVTTextStorage *textStorage; // @synthesize textStorage=_textStorage;
@property(retain, nonatomic) XRSourceTabView *accessoryView; // @synthesize accessoryView=_accessoryView;
- (id)description;
- (id)snippet;
- (void)setSnippet:(id)arg1;
- (long long)compareImportance:(id)arg1;
- (double)importance;
- (BOOL)showsInspector;
- (void)setShowsInspector:(BOOL)arg1;
@property(readonly, nonatomic) NSArray *dataItems; // @dynamic dataItems;
- (void)merge:(id)arg1;
- (BOOL)canMerge:(id)arg1;
- (id)xxxbottomBorderColor;
- (id)xxxbackgroundColor;
- (id)paragraphBorderHighlightColor;
- (id)paragraphHighlightColor;
- (void)drawParagraphHighlightWithFrame:(struct CGRect)arg1;
- (struct CGSize)calculateAnnotationViewSizeForBounds:(struct CGRect)arg1;
- (id)createAnnotationViewForTextView:(id)arg1 withFrame:(struct CGRect)arg2;
- (id)commentArray;
@property(readonly, nonatomic) NSString *comment;
- (void)refreshValueAsValue:(int)arg1;
- (void)dealloc;
- (id)initWithComments:(id)arg1;
- (id)initWithComment:(id)arg1;

@end

@interface XRAnnotationBar : NSView <XRInspectorSource>
{
    DVTSourceTextView *_textViewNotRetained;
    id <XRAnnotationBarDelegate> _delegate;
    unsigned long long _inspectorLineIndex;
}

- (void)mouseDown:(id)arg1;
- (struct CGRect)spotRect;
- (id)instrument;
- (id)dataElementsForInspector:(id)arg1;
- (void)inspectorDismissed:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)viewDidMoveToWindow;
- (void)toggleInspectorAtLine:(unsigned long long)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (id)_contentBezierPathWithRect:(struct CGRect)arg1 defaultStyle:(BOOL)arg2;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (id)textView;
- (void)dealloc;
- (id)initWithTextView:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRAnnotationContext : DVTAnnotationContext
{
    NSObject<XRAnnotationSource> *_annotationSource;
}

@property(retain, nonatomic) NSObject<XRAnnotationSource> *annotationSource; // @synthesize annotationSource=_annotationSource;
- (void)dealloc;
- (id)initWithAnnotationSource:(id)arg1;

@end

@interface XRAnnotationProvider : DVTAnnotationProvider
{
}

+ (id)annotationProviderForContext:(id)arg1 error:(id *)arg2;
- (void)clearAnnotations;
- (void)addAnnotationAtLine:(unsigned long long)arg1 withText:(id)arg2;
- (id)initWithContext:(id)arg1;

@end

@interface XRBezelAlertPanel : NSPanel
{
    NSView *_controlView;
    double _duration;
    double _fadeDuration;
    NSWindow *_eventualParent;
    NSTimer *_durationTimer;
    NSTimer *_fadeTimer;
}

+ (void)initialize;
@property double fadeDuration; // @synthesize fadeDuration=_fadeDuration;
@property double duration; // @synthesize duration=_duration;
@property(retain, nonatomic) NSView *controlView; // @synthesize controlView=_controlView;
- (void)orderOutImmediately;
- (void)orderOut:(id)arg1;
- (void)_completeOrderOut:(id)arg1;
- (void)orderFront:(id)arg1;
- (BOOL)isOpaque;
- (void)dealloc;
- (id)initWithIcon:(id)arg1 controlView:(id)arg2 duration:(double)arg3;
- (id)initWithIcon:(id)arg1 parentWindow:(id)arg2 duration:(double)arg3;

@end

@interface XRBezelAlertView : NSView
{
    NSImage *_icon;
    NSColor *_backgroundColor;
    struct CGRect _iconRect;
}

@property(retain, nonatomic) NSColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(retain, nonatomic) NSImage *icon; // @synthesize icon=_icon;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isFlipped;
- (void)tile;
- (void)dealloc;
- (id)initWithIcon:(id)arg1;

@end

@interface XRBlackGlassButton : NSButton
{
}

+ (Class)cellClass;
+ (void)initialize;
- (void)awakeFromNib;

@end

@interface XRBlackGlassButtonCell : NSButtonCell
{
}

- (struct CGRect)drawTitle:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (void)drawBezelWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface XRBlackGlassScroller : NSScroller
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface XRBoxView : NSView
{
    NSView *_contentView;
}

- (void).cxx_destruct;
- (id)contentView;
- (void)setContentView:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface XRDecoratorSurface : NSView <XRInspectorSource>
{
    struct XRTimeRange _timeRange;
    NSMapTable *_statePathMap;
    BOOL _isDecorated;
    NSArray *_decorators;
    NSMutableArray *_topClickables;
    NSMutableArray *_bottomClickables;
    id _target;
    unsigned long long _clickedIndex;
    BOOL _focusedAtBottom;
    XRDecorator *_decoratorToNotify;
    struct CGRect _inspectorSpot;
    SEL _action;
    NSImage *_cachedImage;
    double _previousScaleX;
    double _maxCachedImageWidth;
    struct CGRect _lastVisibleRect;
}

- (double)maxCachedImageWidth;
- (void)setMaxCachedImageWidth:(double)arg1;
- (struct CGRect)spotRect;
- (id)instrument;
- (id)dataElementsForInspector:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)_moveToNextEvent;
- (BOOL)canMoveRight;
- (BOOL)acceptsFirstResponder;
- (void)_moveToPreviousEvent;
- (BOOL)canMoveLeft;
- (void)viewWillDraw;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)_displayRelatedEventDetail;
- (void)_detachInspector;
- (void)inspectorDismissed:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)raiseInspector:(BOOL)arg1;
- (void)raiseInspector:(BOOL)arg1 centerOnMouse:(BOOL)arg2;
- (SEL)action;
- (void)setAction:(SEL)arg1;
- (id)target;
- (void)setTarget:(id)arg1;
- (void)decorator:(id)arg1 addClickableState:(id)arg2 inRect:(struct CGRect)arg3 withTag:(long long)arg4;
- (void)decorator:(id)arg1 addDecoration:(id)arg2;
- (void)decorator:(id)arg1 addClickableImage:(id)arg2 atPoint:(struct CGPoint)arg3 alignment:(int)arg4 withTag:(long long)arg5;
- (void)drawRect:(struct CGRect)arg1;
- (void)scaleUnitSquareToSize:(struct CGSize)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)drawBackgroundInRect:(struct CGRect)arg1;
- (struct CGPath *)cgPathForState:(id)arg1;
- (id)bottomDecorations;
- (id)topDecorations;
- (id)decorators;
- (void)setDecorators:(id)arg1;
- (void)clearDecoration;
- (id)allStates;
- (BOOL)isDecorationValid;
- (BOOL)requiresDecorationSort;
- (void)endDecorating;
- (void)beginDecorating;
- (struct CGSize)scale;
- (struct XRTimeRange)visibleTimeRange;
- (struct XRTimeRange)timeRange;
- (BOOL)canDrawConcurrently;
- (void)dealloc;
- (id)initWithTimeRange:(struct XRTimeRange)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRCPUConnectionSurface : XRDecoratorSurface
{
    unsigned int _cpuCount;
    NSMutableDictionary *_tidCoordinateMap;
}

- (long long)tag;
- (id)surfaceForCore:(unsigned long long)arg1;
- (BOOL)acceptsFirstResponder;
- (void)clearDecoration;
- (void)setCPUCount:(unsigned int)arg1;
- (void)dealloc;
- (id)initWithTimeRange:(struct XRTimeRange)arg1;

@end

@interface XRDecorator : NSObject
{
    NSString *_name;
}

- (BOOL)decorationClicked:(id)arg1;
- (void)displayDetailForTag:(long long)arg1;
- (id)inspectionDataElementsForTag:(long long)arg1;
- (void)decorateSurface:(id)arg1;
- (id)name;
- (void)dealloc;
- (id)initWithName:(id)arg1;

@end

@interface XRCPUDecorator : XRDecorator
{
    XRCPUStrategyQuery *_query;
    XRCPUStrategyController *_controller;
    XRRun *_run;
    NSDictionary *_legend;
}

+ (id)displayStyles;
- (id)legend;
- (void)setLegend:(id)arg1;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 controller:(id)arg2 run:(id)arg3;

@end

@interface XRCPUDecoratorSurface : XRDecoratorSurface
{
    unsigned long long _cpuID;
    unsigned int _maxStackDepth;
}

- (void)setMaxStackDepth:(unsigned int)arg1;
- (unsigned int)maxStackDepth;
- (unsigned long long)cpu;
- (void)dealloc;
- (id)initWithTimeRange:(struct XRTimeRange)arg1 cpu:(unsigned long long)arg2;

@end

@interface XRTrackingAreaControl : NSTrackingArea
{
    BOOL _isMouseDown;
}

- (void)cursorUpdate:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (BOOL)isMouseDown;
- (id)view;
- (BOOL)hitTest:(id)arg1;
- (void)dealloc;

@end

@interface XRCPUHeightControl : XRTrackingAreaControl
{
    struct CGPoint _mouseDownPoint;
    double _deckHeightDelta;
    double _originalDeckHeight;
}

- (void)cursorUpdate:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;

@end

@interface XRCPUListCell : NSActionCell <XRProcessTargetedObject>
{
    struct CGRect _currentCellBoundsDuringGesture;
    struct CGRect _currentCellFrameDuringGesture;
}

+ (BOOL)prefersTrackingUntilMouseUp;
- (int)defaultTargetTypeForChooser;
- (void)resetTarget;
- (BOOL)supportsTargetType:(int)arg1;
- (void)setTargetsDevice:(id)arg1;
- (id)currentTargetDevice;
- (id)currentTargetProcess;
- (void)setTargetsLaunchedProcess:(id)arg1;
- (void)setTargetsExistingProcess:(id)arg1;
- (void)setTargetsAllProcesses;
- (void)applyTooltipsWithCellFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)wantsCloseBox;
- (long long)_setCloseBoxTrackingTagForView:(id)arg1 inCellFrame:(struct CGRect)arg2 withIndex:(long long)arg3;
- (struct CGRect)_closeBoxRectForView:(id)arg1 inCellFrame:(struct CGRect)arg2;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawString:(id)arg1 inRect:(struct CGRect)arg2 withAttributes:(id)arg3;
- (void)drawInstrumentBackgroundWithFrame:(struct CGRect)arg1 inView:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRCPUListController : NSObject <NSTableViewDataSource, NSTableViewDelegate>
{
    XRCPUStrategyController *_delegate;
    NSArray *_cpuList;
}

- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (double)trackView:(id)arg1 heightOfRow:(unsigned long long)arg2;
- (id)trackView:(id)arg1 cpuAtRow:(unsigned long long)arg2;
- (long long)numberOfRowsInTrackView:(id)arg1;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)tableViewSelectionIsChanging:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)selectedCore;
- (id)coreList;
- (void)updateList;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRCPUListView : NSTableView <NSMenuDelegate>
{
    PFTTraceDocument *_unretainedTraceDocument;
    XRCPUListController *_coreListController;
    XRCore *_flyOverCoreNotRetained;
    int _flyOverState;
    struct CGPoint _flyOverPoint;
}

- (void)viewDidMoveToSuperview;
- (struct CGPoint)_flyOverPoint;
- (id)_flyOverCore;
- (void)_setFlyOverState:(int)arg1 forCore:(id)arg2;
- (int)_flyOverStateForCores:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_coreLayoutNotification:(id)arg1;
- (void)reloadData;
- (void)updateCoreList;
- (id)model;
- (void)setModel:(id)arg1;
- (id)label;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRStrategyUIController : NSResponder
{
    PFTTraceDocument *_traceDocument;
}

- (void).cxx_destruct;
- (id)strategyControllerWithIdentifier:(id)arg1 forRunIdentifier:(int)arg2;
- (void)selectSummaryFilter:(id)arg1;
- (id)legend;
- (id)styleViews;
- (id)filterViews;
- (id)shortDescription;
- (id)smallIconAlternate;
- (id)smallIcon;
- (id)displayName;
- (id)model;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)modelDidRefresh;
- (void)setModel:(id)arg1;
- (long long)compareStrategyName:(id)arg1;
- (void)dealloc;

@end

@interface XRCPUStrategyUIController : XRStrategyUIController
{
    NSPopUpButton *_cores;
    NSPopUpButton *_displayStyle;
}

- (void).cxx_destruct;
- (id)legend;
- (id)_categoryColors;
- (id)_userKernelColors;
- (void)modelDidRefresh;
- (void)_styleSelected:(id)arg1;
- (void)setStyle:(id)arg1;
- (void)updateDisplayOptions;
- (void)_selectCore:(id)arg1;
- (void)updateCoreList;
- (void)updateSummaryFilters;
- (id)styleViews;
- (id)filterViews;
- (id)displayName;
- (id)shortDescription;
- (id)smallIconAlternate;
- (id)smallIcon;
- (id)init;

@end

@interface XRCPUTrackView : XRBrushTrackView
{
    PFTTraceDocument *_unretainedTraceDocument;
    XRCPUListController *_coreListController;
    NSMutableDictionary *_coreSurfaceMap;
    XRCPUConnectionSurface *_connectionSurface;
    XRTrackingAreaControl *_activeTrackingArea;
}

+ (void)initialize;
- (BOOL)enableCopyOnScroll;
- (void)cursorUpdate:(id)arg1;
- (void)updateTrackingAreas;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)refreshTrackingAreas;
- (void)_trackSegementUpdated:(id)arg1;
- (void)_coreLayoutNotification:(id)arg1;
- (void)_coreHighlightNotification:(id)arg1;
- (id)coreForSurface:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (id)connectionSurface;
- (void)drawCoreNumber:(unsigned long long)arg1 withMarkerLines:(BOOL)arg2 displaySelection:(BOOL)arg3 displayBackground:(BOOL)arg4 enforceSingleDeck:(BOOL)arg5 trimBubble:(BOOL)arg6 inRect:(struct CGRect)arg7;
- (void)drawRect:(struct CGRect)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateCoreList;
- (void)clearGraphCache;
- (void)reloadData:(BOOL)arg1;
- (void)scaleUnitSquareToSize:(struct CGSize)arg1;
- (void)clearAllDecorations;
- (void)updateSurfaceForCore:(id)arg1 frame:(struct CGRect)arg2;
- (void)startNow:(double)arg1;
- (id)model;
- (void)setModel:(id)arg1;
- (void)_removeSurfaces;
- (void)validateForWatermark;
- (id)watermarkMessageString;
- (unsigned int)gridIncrement;
- (BOOL)canZoomVertical;
- (id)verticalMeasurement;
- (id)horizontalMeasurement;
- (void)dealloc;

@end

@interface XRCPUmanager : NSObject
{
    id _delegate;
    int _maxPhysicalCPUCount;
    int _maxLogicalCPUCount;
    int _curPhysicalCPUCount;
    int _curLogicalCPUCount;
    int _curActiveCPUCount;
    BOOL _supportsLogicalCPUs;
    BOOL _hwThreadsEnabled;
    int _desiredActiveCoreCount;
}

- (void)_activeCPUCountChanged:(id)arg1;
- (void)setActiveCoreCount:(int)arg1;
- (void)enableSMT:(BOOL)arg1;
- (void)_updateActiveCores;
- (BOOL)SMTisEnabled;
- (int)activeCoreCount;
- (int)physicalCoreCount;
- (int)logicalCoreCount;
- (BOOL)coresSupportSMT;
- (int)maxPhysicalCoreCount;
- (int)maxLogicalCoreCount;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (id)init;

@end

@interface XRCSLoggerHelper : NSObject
{
}

+ (void)logDocumentName:(id)arg1 runIndex:(long long)arg2 processName:(id)arg3 pid:(int)arg4 threadName:(id)arg5 tid:(unsigned long long)arg6 instructionAddress:(unsigned long long)arg7 symbolAddress:(unsigned long long)arg8 symbolName:(id)arg9 libraryName:(id)arg10 kernel:(BOOL)arg11 machTime:(unsigned long long)arg12 symbolicator:(struct _CSTypeRef)arg13 kernelSymbolicator:(struct _CSTypeRef)arg14;
+ (void)logDocumentName:(id)arg1 runIndex:(long long)arg2 processRepository:(id)arg3 commonRawStack:(id)arg4 tid:(unsigned long long)arg5 machTime:(unsigned long long)arg6;
+ (id)menuItemForDetailViewObject:(id)arg1 withSelector:(SEL)arg2 andTarget:(id)arg3;

@end

@interface XRCallTreeCompareBarViewController : NSViewController <PFTDetailViewAccessory>
{
    NSPopUpButton *_mergeActionPopup;
    NSPopUpButton *_mergeTargetRunPopup;
    id <SymbolAwareRun> _mergeRun;
    XRInstrument *_instrument;
    XRCallTreeDetailView *_callTreeView;
}

- (void).cxx_destruct;
- (void)saveClicked:(id)arg1;
- (void)doneClicked:(id)arg1;
- (void)setMainView:(id)arg1;
- (int)_factor;
- (void)selectedNewMergeTarget:(id)arg1;
- (void)_refreshRunTargetsPopup;
- (void)_enumerateValidComparisonRuns:(CDUnknownBlockType)arg1;
- (void)awakeFromNib;
- (id)initWithInstrument:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRClearBackgroundButton : NSButton
{
}

+ (void)initialize;
- (void)dealloc;
- (void)awakeFromNib;
- (id)init;

@end

@interface XRClearBackgroundButtonCell : NSButtonCell
{
}

@end

@interface XRClickthroughLayer : CALayer
{
}

- (id)hitTest:(struct CGPoint)arg1;

@end

@interface XRColoredBackgroundTextCell : NSTextFieldCell
{
    NSString *_defaultsIdentifier;
    CDUnknownBlockType _providerBlock;
}

+ (id)cellWithDefaultsIdentifier:(id)arg1 preferenceTitle:(id)arg2;
- (void)_toggleColorBackground:(id)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setDrawsBackground:(BOOL)arg1;
- (void)setBackgroundColorProviderBlock:(CDUnknownBlockType)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithDefaultsIdentifier:(id)arg1 preferenceTitle:(id)arg2;

@end

@interface XRColoredScroller : NSScroller
{
    NSColor *_backgroundColor;
}

- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (void)drawKnob;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)arg1;
- (void)dealloc;

@end

@interface XRCompressedStackFrameCell : NSCell
{
    NSColor *_color;
}

+ (double)suggestedCellHeight;
+ (id)sharedInstance;
@property(copy) NSColor *color; // @synthesize color=_color;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithColor:(id)arg1;

@end

@interface XRScopedTextControl : PFTNibView <NSSplitViewDelegate>
{
    XRFlagsNavigatorControl *_historyButtons;
    NSSegmentedControl *_picker;
    NSSegmentedControl *_segments;
    NSSegmentedControl *_backdrop;
    XRTextView *_textView;
    NSImageView *_backgroundImage;
    NSView *_progressPanel;
    NSProgressIndicator *_spinner;
    NSTextField *_progressMessage;
    NSView *_recordingBar;
    NSButton *_playButton;
    NSButton *_recordButton;
    NSButton *_stopButton;
    int _waterMarkVisibility;
    BOOL _dual_view_mode;
    NSSplitView *_dualViewSplitter;
    XRTextView *_disasmView;
    NSView *_disasmProgressPanel;
    NSProgressIndicator *_disasmSpinner;
    NSTextField *_disasmProgressMessage;
    XRScopedDVTTextControlScrollView *_srcScrollView;
    XRScopedDVTTextControlScrollView *_disScrollView;
    NSTextField *_srcSelectionInfo;
    NSTextField *_disSelectionInfo;
    BOOL _showSelectionInfo;
    BOOL _sourceIsLoaded;
    BOOL _disasmIsLoaded;
}

+ (id)_unselectedBackground;
+ (id)_selectedBackground;
+ (void)initializeColorsAndThemes;
+ (void)registerXcodeDefaults;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (BOOL)splitView:(id)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (void)recordButtonClicked:(id)arg1;
- (void)stopButtonClicked:(id)arg1;
- (void)playButtonClicked:(id)arg1;
- (void)validateRecordControls;
- (void)_firstResponderDidChange:(id)arg1;
- (void)setScopeBarHidden:(BOOL)arg1;
- (id)customWatermark;
- (int)waterMarkVisibility;
- (void)setWaterMarkVisibility:(int)arg1;
- (void)viewDidMoveToWindow;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setRecordBarHidden:(BOOL)arg1;
- (BOOL)selectionStatsVisible;
- (void)showSelectionInfo:(BOOL)arg1;
- (void)updateSelectionToolTipsForSourceView:(id)arg1 andDisasmView:(id)arg2;
- (void)updateSelectionInfoForSourceView:(id)arg1 andDisasmView:(id)arg2;
- (id)disasmView;
- (id)textView;
- (id)detailViewLabel;
- (BOOL)dualView;
- (void)enableDualView:(BOOL)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRConsoleControl : XRScopedTextControl <DVTSourceTextViewDelegate, XRFilteredDataSource>
{
    XRInstrument *_instrumentNotRetained;
    NSArrayController *_logController;
    BOOL _logObserved;
    unsigned long long _logCount;
    NSPredicate *_textFilterPredicate;
    long long _lastFilteredEntryDisplayed;
    int _previousType;
    NSMutableArray *_logEventPositionLineRanges;
    NSMutableArray *_logEventPositionEvents;
    BOOL _selectingEvent;
    NSRulerMarker *_timeSelectedMarker;
    struct _NSRange _outputRange;
    struct _NSRange _promptRange;
}

+ (void)initialize;
- (void)setSelectedEvent:(id)arg1;
- (void)_moveMarkerToLine:(unsigned long long)arg1;
- (id)samplesInRange:(struct XRTimeRange)arg1;
- (void)inspectionHeadUpdated:(id)arg1;
- (void)filterDetailWithTokens:(id)arg1 context:(id)arg2 matchesAny:(BOOL)arg3;
- (void)_runDidEnd:(id)arg1;
- (void)_logUpdated:(id)arg1;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (struct _NSRange)textView:(id)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange)arg2 toCharacterRange:(struct _NSRange)arg3;
- (BOOL)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(id)arg3;
- (void)updateLogWithEventRange:(struct _NSRange)arg1 clearBeforeUpdate:(BOOL)arg2;
- (id)promptString;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)observeRun:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setFilterPredicate:(id)arg1;
- (void)applyCurrentFilter;
- (void)_clearTextView;
- (void)_setWatermark;
- (id)customWatermark;
- (id)detailViewLabel;
- (id)classForNibName;
- (void)dealloc;
- (void)setInstrument:(id)arg1;
- (void)invalidate;
- (void)_unobserveInstrument;
- (id)initWithInstrument:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRContextPathControl : PFTPathControl <XRAccessiblePathCellDelegate>
{
    XRContext *_currentContext;
}

- (id)pathCell:(id)arg1 accessibilityDescriptionForPathComponentCell:(id)arg2 atIndex:(unsigned long long)arg3;
- (void)cells:(id)arg1 appendCellsForTarget:(id)arg2 fromRoot:(id)arg3;
- (void)update;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_contextMenuClicked:(id)arg1;
- (void)_contextClicked:(id)arg1;
- (void)_contextSelectedByUser:(id)arg1 cell:(id)arg2 title:(id)arg3;
- (void)_discloseDetailForContext:(id)arg1;
- (void)_displayContext:(id)arg1;
- (void)setContext:(id)arg1;
- (void)dealloc;
- (void)awakeFromNib;
- (id)initWithContext:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRControlBand : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface XRControlBandViewController : NSViewController
{
    NSTextField *_styleChooserLabel;
    NSPopUpButton *_styleChooser;
    NSPopUpButton *_typeChooser;
    XRInstrument *_instrument;
}

+ (void)initialize;
@property(retain, nonatomic) XRInstrument *instrument; // @synthesize instrument=_instrument;
@property(nonatomic) __weak NSPopUpButton *typeChooser; // @synthesize typeChooser=_typeChooser;
@property(nonatomic) __weak NSPopUpButton *styleChooser; // @synthesize styleChooser=_styleChooser;
@property(nonatomic) __weak NSTextField *styleChooserLabel; // @synthesize styleChooserLabel=_styleChooserLabel;
- (void).cxx_destruct;
- (void)_synchGraphTypeToInstrument;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)awakeFromNib;
- (void)dealloc;
- (id)initWithInstrument:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface XRCoverView : NSView
{
    XRCoverViewController *controller;
}

- (void)setFrame:(struct CGRect)arg1;
- (id)controller;
- (void)scrollWheel:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;
- (void)dealloc;
- (void)setupWithImageSize:(struct CGSize)arg1;

@end

@interface XRCoverViewCatalog : NSObject
{
    NSDictionary *_desktopImageDict;
    NSMutableDictionary *mutableDict;
    NSArray *desktopImageArray;
    id delegate;
    _Bool pendingDidChange;
    _Bool threadRunning;
    _Bool finishedLoading;
}

- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)allDesktopImages;
- (id)desktopImageForKey:(id)arg1;
- (void)threadFunc:(id)arg1;
- (BOOL)isEmpty;
- (void)removeEntry:(id)arg1;
- (void)addEntry:(id)arg1;
- (void)invokeDidChange:(id)arg1;
- (void)postDidChange;
- (void)dealloc;
- (void)beginProcessing;
- (id)init;

@end

@interface XRCoverViewController : NSObject
{
    NSView *view;
    CALayer *maskLayer;
    CAScrollLayer *bodyLayer;
    CATextLayer *headerTextLayer;
    CATextLayer *desktopImageCountLayer;
    struct CATransform3D sublayerTransform;
    struct CGImage *shadowImage;
    NSDictionary *textStyle;
    XRCoverViewCatalog *catalog;
    struct CGSize desktopImageSize;
    NSMutableArray *desktopImages;
    long long totalDesktopImages;
    long long selectedDesktopImageIndex;
    struct __CFDictionary *layerDictionary;
    int sortKeys[3];
    struct CGSize _imageSize;
}

+ (struct CGColor *)color:(int)arg1;
- (void)viewChangedFrameTo:(struct CGRect)arg1;
- (void)setImageSize:(struct CGSize)arg1;
- (id)catalog;
- (void)imageDidLoadNotification:(id)arg1;
- (void)catalogDidChange:(id)arg1;
- (id)selectedEntry;
- (long long)selectedDesktopImageIndex;
- (void)selectLayer:(id)arg1;
- (void)select;
- (void)moveSelection:(int)arg1;
- (void)updateSelection;
- (void)updateImage;
- (void)updateImageForLayer:(id)arg1 fromDesktopImage:(id)arg2;
- (id)layerForDesktopImage:(id)arg1;
- (id)view;
- (void)dealloc;
- (void)setup;
- (id)initWithView:(id)arg1 imageSize:(struct CGSize)arg2;
- (id)init;

@end

@interface XRCoverViewEntry : NSObject
{
    NSString *name;
    NSString *path;
    long long _sortIndex;
    NSObject *_representedObject;
    struct CGImage *image;
    struct CGSize imageSize;
    unsigned int imageFailed:1;
    unsigned int requestedImage:1;
    unsigned int markedImage:1;
}

+ (void)sweepImageQueue;
- (id)description;
- (_Bool)requestImageOfSize:(struct CGSize)arg1;
- (void)postNotificationName:(id)arg1;
- (struct CGImage *)imageOfSize:(struct CGSize)arg1;
- (id)path;
- (void)setPath:(id)arg1;
- (long long)compareWithDesktopImage:(id)arg1 keys:(const int *)arg2;
- (id)representedObject;
- (void)setRepresentedObject:(id)arg1;
- (long long)sortIndex;
- (void)setSortIndex:(long long)arg1;
- (id)name;
- (void)dealloc;
- (id)initWithName:(id)arg1;

@end

@interface XRCoverViewEntryLayout : NSObject
{
    struct CATransform3D leftTransform;
    struct CATransform3D rightTransform;
    double zDistance;
    double zCenterPosition;
    double zSidePosition;
    double sideSpacingFactor;
    double rowScaleFactor;
}

+ (id)layoutManager;
- (void)layoutSublayersOfLayer:(id)arg1;
- (struct __CFArray *)desktopImageIndicesOfLayer:(id)arg1 inRect:(struct CGRect)arg2;
- (double)positionOfSelectedDesktopImageInLayer:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRFileExplorerViewController : NSViewController <XRTopicInterfaceComponent>
{
    BOOL _ignoreDirectPathEntry;
    XRTopic *_subTopic;
    NSBrowser *_browser;
    XRDeviceTopic *_topic;
    id <XRFileSystem> _fileSystem;
}

@property(readonly, nonatomic) id <XRFileSystem> fileSystem; // @synthesize fileSystem=_fileSystem;
@property(readonly, nonatomic) XRDeviceTopic *topic; // @synthesize topic=_topic;
@property(nonatomic) __weak NSBrowser *browser; // @synthesize browser=_browser;
@property(retain, nonatomic) XRTopic *subTopic; // @synthesize subTopic=_subTopic;
- (void).cxx_destruct;
- (void)_selectItemAtPath:(id)arg1 reparentIfNeeded:(BOOL)arg2;
- (void)_selectItemAtPath:(id)arg1;
- (int)topicViewer:(id)arg1 handleKeyDown:(id)arg2;
- (void)refresh;
- (void)reloadData;
- (void)applyResult:(id)arg1;
- (void)_deleteNotAllowedAlertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_deleteAlertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_pathSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)select:(id)arg1;
@property(readonly, nonatomic) NSString *filename;
@property(readonly, nonatomic) NSDictionary *selectedItem;
- (id)validateSelection;
- (id)launchOptionsUserInterfaceComponentIdentifier;
- (void)awakeFromNib;
- (id)initWithTopic:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRDaemonExplorerViewController : XRFileExplorerViewController
{
}

- (id)validateSelection;
- (id)launchOptionsUserInterfaceComponentIdentifier;

@end

@interface XRDataElementSummaryViewController : NSViewController
{
    int _style;
    PFTDataElement *_element;
    NSTextField *_titleField;
    DVTGradientImageButton *_configurationButton;
    NSView *_dataView;
    NSLayoutConstraint *_dataTopConstraint;
}

@property(retain, nonatomic) NSLayoutConstraint *dataTopConstraint; // @synthesize dataTopConstraint=_dataTopConstraint;
@property(nonatomic) __weak NSView *dataView; // @synthesize dataView=_dataView;
@property(nonatomic) __weak DVTGradientImageButton *configurationButton; // @synthesize configurationButton=_configurationButton;
@property(nonatomic) __weak NSTextField *titleField; // @synthesize titleField=_titleField;
@property(readonly, nonatomic) PFTDataElement *element; // @synthesize element=_element;
- (void).cxx_destruct;
- (void)reloadData;
- (void)awakeFromNib;
- (id)initWithDataElement:(id)arg1 style:(int)arg2;

@end

@interface XRDeckHeightControl : XRTrackingAreaControl
{
    struct CGPoint _mouseDownPoint;
    float _deckHeightDelta;
    int _originalMasterDeckUnits;
}

- (void)cursorUpdate:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;

@end

@interface XRDecoration : NSObject
{
    struct CGRect _location;
    long long _identifier;
    BOOL _isRendered;
    unsigned long long _decoratorIndex;
}

- (void)drawInContext:(struct CGContext *)arg1;
- (void)setDecoratorIndex:(unsigned long long)arg1;
- (long long)compareXPosition:(id)arg1;
- (id)initWithLocation:(struct CGRect)arg1 identifier:(long long)arg2 decoratorIndex:(unsigned long long)arg3;

@end

@interface XRDecorationActionArea : XRDecoration
{
}

@end

@interface XRDecorationArea : XRDecoration
{
    XRDecoratorState *_state;
}

- (void)drawInContext:(struct CGContext *)arg1;
- (void)dealloc;
- (id)initWithLocation:(struct CGRect)arg1 state:(id)arg2 identifier:(long long)arg3 decoratorIndex:(unsigned long long)arg4;

@end

@interface XRDecorationImage : XRDecoration
{
    NSImage *_image;
}

- (void)drawInContext:(struct CGContext *)arg1;
- (void)dealloc;
- (id)initWithLocation:(struct CGRect)arg1 image:(id)arg2 identifier:(long long)arg3 decoratorIndex:(unsigned long long)arg4;

@end

@interface XRDecoratorState : NSObject
{
    NSColor *_fillColor;
    NSColor *_strokeColor;
    NSGradient *_gradient;
    NSImage *_gradientImageSlice;
    struct CGImage *_gradientCGImageSlice;
    double _gradientSliceHeight;
    double _gradientAngle;
    double _lineWidth;
    unsigned long long _hash;
    struct CGAffineTransform _transform;
    BOOL _hasTransform;
}

+ (id)gradientStateForCPU:(unsigned int)arg1;
- (struct CGAffineTransform)transform;
- (void)setTransform:(struct CGAffineTransform)arg1;
- (void)drawGradientInRect:(struct CGRect)arg1 context:(struct CGContext *)arg2;
- (id)gradient;
- (id)strokeColor;
- (id)fillColor;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)setInContext:(struct CGContext *)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithGradient:(id)arg1 gradientAngle:(double)arg2;
- (id)initWithFillColor:(id)arg1 strokeColor:(id)arg2 lineWidth:(double)arg3;
- (id)initWithFillColor:(id)arg1 strokeColor:(id)arg2 gradient:(id)arg3 gradientAngle:(double)arg4 lineWidth:(double)arg5;

@end

@interface XREventRouterWindow : NSWindow
{
}

- (void)sendEvent:(id)arg1;
- (void)dealloc;

@end

@interface XRFileSystemBrowserPreviewViewController : NSViewController
{
    id <XRFileSystem> _fileSystem;
}

@property(retain) id <XRFileSystem> fileSystem; // @synthesize fileSystem=_fileSystem;
- (void).cxx_destruct;
@property(readonly) NSImage *representedItemIcon;
@property(readonly) NSString *representedItemFilename;

@end

@interface XRFlagRulerMarker : PFTRulerMarker <XRInspectorSource>
{
    BOOL _selected;
    BOOL _bubbleShown;
    NSColor *_color;
    XRTimeFlag *_representedFlag;
    BOOL _didDragDuringTracking;
    BOOL _isRemoving;
}

+ (id)flagRulerMarkerWithFlag:(id)arg1 rulerView:(id)arg2;
- (void)setIsRemoving:(BOOL)arg1;
- (BOOL)trackMouse:(id)arg1 adding:(BOOL)arg2;
- (void)refreshBubblePositionToLocation:(double)arg1;
- (void)refreshBubblePosition;
- (BOOL)bubbleShown;
- (void)hideBubble:(BOOL)arg1;
- (void)showBubble;
- (void)detach;
- (void)moveFlagRight;
- (void)moveFlagLeft;
- (BOOL)canMoveRight;
- (BOOL)canMoveLeft;
- (id)instrument;
- (id)dataElementsForInspector:(id)arg1;
- (void)inspectorDismissed:(id)arg1;
- (struct CGRect)imageHitRectInRuler;
- (id)representedFlag;
- (void)setRepresentedFlag:(id)arg1;
- (id)color;
- (void)setColor:(id)arg1;
- (BOOL)selected;
- (void)setSelected:(BOOL)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRFlagsNavigatorControl : NSSegmentedControl <NSMenuDelegate>
{
    BOOL _isSetup;
    XRManagedObjectList *_flags;
    BOOL _observingFlags;
    NSMenu *_previousMenu;
    NSMenu *_nextMenu;
}

- (void)_flagChosen:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
- (void)_segmentClicked:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setFlags:(id)arg1;
- (void)_updateControl;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 flags:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRFlatCheckboxCell : NSButtonCell
{
    BOOL _inTitleRectCheck;
}

- (id)attributedTitle;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)_imageRectWithRect:(struct CGRect *)arg1;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;

@end

@interface XRFlippedClipView : NSClipView
{
}

- (BOOL)isFlipped;

@end

@interface XRFloatValueAnimation : NSAnimation
{
    double _fromPosition;
    double _toPosition;
    double _position;
}

@property double position; // @synthesize position=_position;
@property double toPosition; // @synthesize toPosition=_toPosition;
@property double fromPosition; // @synthesize fromPosition=_fromPosition;
- (void)setCurrentProgress:(float)arg1;

@end

@interface XRGeneralActionPlugIn : XRActionHandler
{
}

- (void)lookupAPIWithTargets:(id)arg1 withContext:(id)arg2;
- (BOOL)validateXrayContextAction:(id)arg1;
- (void)_progressSheetEnded:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)symbolInspector:(id)arg1 withContext:(id)arg2;

@end

@interface XRGenericFillView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRGesture : NSObject
{
    double _startingX;
    double _lastX;
    int _substate;
}

- (BOOL)getGestureStartLocation:(double *)arg1 endLocation:(double *)arg2 kind:(int *)arg3;
- (id)gestureWithEvent:(id)arg1 fromView:(id)arg2;
- (id)init;
- (id)initWithStartingX:(double)arg1 lastX:(double)arg2;

@end

@interface XRGestureNonAccepting : XRGesture
{
}

- (id)gestureWithEvent:(id)arg1 fromView:(id)arg2;
- (id)initWithStartingX:(double)arg1 lastX:(double)arg2;

@end

@interface XRGestureSelecting : XRGesture
{
}

- (id)gestureWithEvent:(id)arg1 fromView:(id)arg2;

@end

@interface XRGestureTimeSelecting : XRGestureSelecting
{
}

- (BOOL)getGestureStartLocation:(double *)arg1 endLocation:(double *)arg2 kind:(int *)arg3;

@end

@interface XRGestureTracker : NSResponder
{
    XRGesture *_currentGesture;
    NSTimer *_cancelDelay;
    NSView<XRGestureHandler> *_delegate;
}

@property(nonatomic) __weak NSView<XRGestureHandler> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_cancellationTimerHandler:(id)arg1;
- (void)_updateGestureWithEvent:(id)arg1;
- (void)handleAutoscrollEvent:(id)arg1;
- (BOOL)tryToPerform:(SEL)arg1 with:(id)arg2;
- (void)cancelOperation:(id)arg1;
- (void)flagsChanged:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (id)init;

@end

@interface XRGestureView : NSView
{
    NSAttributedString *_msg;
}

- (void)drawRect:(struct CGRect)arg1;
- (struct CGSize)minimumSize;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)setAttributedGestureString:(id)arg1;
- (void)setGestureString:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRGestureZoomInSelecting : XRGestureSelecting
{
}

- (BOOL)getGestureStartLocation:(double *)arg1 endLocation:(double *)arg2 kind:(int *)arg3;

@end

@interface XRGestureZoomOutSelecting : XRGestureSelecting
{
}

- (BOOL)getGestureStartLocation:(double *)arg1 endLocation:(double *)arg2 kind:(int *)arg3;

@end

@interface XRHUDWindow : NSPanel
{
}

- (void)unHudDocuments;
- (void)hudDocuments;
- (void)layoutWindowForContent;
- (void)close;
- (void)dealloc;
- (id)init;

@end

@interface XRHelpButton : NSButton
{
    NSString *_helpURL;
}

@property(retain, nonatomic) NSString *helpURL; // @synthesize helpURL=_helpURL;
- (void)_openHelp:(id)arg1;
- (void)awakeFromNib;
- (id)init;

@end

@interface XRHelpManager : NSObject
{
}

+ (id)defaultHelpManager;
- (void)displayUUID:(id)arg1;
- (void)displayAppleRef:(id)arg1;
- (void)displayURL:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRHorizontalFillSplitView : NSSplitView <NSAnimationDelegate>
{
    XRSplitViewAnimation *_animation;
    BOOL _hideDivider;
}

@property BOOL hideDivider; // @synthesize hideDivider=_hideDivider;
- (void)animationDidMakeProgress:(id)arg1;
- (void)animateSplitFromPosition:(double)arg1 toPosition:(double)arg2;
- (double)dividerThickness;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRIconMessageWatermark : NSView
{
    NSImage *_backgroundImage;
    BOOL _renderingSelf;
    NSTextField *_label;
    XRProgressIndicator *_progressIndicator;
}

- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)setPercentageProgress:(float)arg1;
- (void)setMessage:(id)arg1;
- (void)dealloc;
- (id)initWithImage:(id)arg1 message:(id)arg2;

@end

@interface XRImagePickerCell : NSButtonCell
{
    BOOL _mouseInside;
    long long _mouseCellTag;
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)cursorUpdate:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;

@end

@interface XRImagePickerGrid : NSMatrix
{
    NSMutableArray *_trackingAreas;
}

- (void)updateTrackingAreas;
- (void)loadImages:(id)arg1;
- (void)_layoutCells:(long long)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRImagePickerView : NSImageView
{
    BOOL _mouseInside;
    NSTrackingArea *_trackingArea;
    id <XRImagePickerDelegate> _delegate;
    NSMenu *_menu;
}

- (void)drawRect:(struct CGRect)arg1;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)_displayMenu:(id)arg1;
- (void)_imageSelected:(id)arg1;
- (void)updateTrackingAreas;
- (void)cursorUpdate:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)draggingEnded:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)dealloc;
- (void)awakeFromNib;

@end

@interface XRInfiniteLineBox : NSView
{
    NSColor *_lineColor;
    double _fadeLength;
}

@property double fadeLength; // @synthesize fadeLength=_fadeLength;
@property(retain) NSColor *lineColor; // @synthesize lineColor=_lineColor;
- (void).cxx_destruct;
- (double)_fadeLengthAsPercentOfLength;
@property(readonly) unsigned long long orientation;
- (void)drawRect:(struct CGRect)arg1;
- (void)_ide_infiniteLineBoxCommonInit;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRInspector : NSObject <NSPopoverDelegate>
{
    id <XRInspectorSource> _source;
    id <XRInspectorDelegate> _delegate;
    NSPopover *_popover;
}

@property(retain, nonatomic) NSPopover *popover; // @synthesize popover=_popover;
@property(nonatomic) __weak id <XRInspectorDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak id <XRInspectorSource> source; // @synthesize source=_source;
- (void).cxx_destruct;
- (void)popoverDidClose:(id)arg1;
- (void)close;
- (void)reload;
- (id)initWithSource:(id)arg1 popover:(id)arg2 delegate:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRInspectorManager : NSObject <XRInspectorDelegate>
{
    NSMutableSet *_inspectors;
}

+ (id)sharedInspectorManager;
@property(retain, nonatomic) NSMutableSet *inspectors; // @synthesize inspectors=_inspectors;
- (void).cxx_destruct;
- (id)_inspectorForSource:(id)arg1;
- (void)inspectorDidClose:(id)arg1;
- (id)inspectorsForWindow:(id)arg1;
- (void)closeInspectorsOnWindow:(id)arg1;
- (void)closeInspectorAttachedToSource:(id)arg1;
- (void)moveInspectorAttachedToSource:(id)arg1 toRect:(struct CGRect)arg2;
- (void)toggleInspectorAttachedToSource:(id)arg1 tipArea:(struct CGRect)arg2 view:(id)arg3;
- (void)reloadInspectorAttachedToSource:(id)arg1;
- (void)attachInspectorToInstrumentSource:(id)arg1 tipArea:(struct CGRect)arg2 view:(id)arg3;
- (void)attachInspectorToInstrumentSource:(id)arg1 tipArea:(struct CGRect)arg2 view:(id)arg3 preferredEdge:(unsigned long long)arg4;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRInspectorView : NSView
{
    BOOL _observingWindowChanges;
    NSLayoutConstraint *_maxHeightConstraint;
}

@property(retain, nonatomic) NSLayoutConstraint *maxHeightConstraint; // @synthesize maxHeightConstraint=_maxHeightConstraint;
- (void).cxx_destruct;
- (void)_setMaxHeightForWindow:(id)arg1;
- (void)windowDidChangeScreenHandler:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)dealloc;

@end

@interface XRInspectorViewController : NSViewController
{
    PFTDataView *_dataView;
    id <XRInspectorSource> _dataSource;
    PFTDataElementList *_model;
}

@property(retain) PFTDataElementList *model; // @synthesize model=_model;
@property __weak id <XRInspectorSource> dataSource; // @synthesize dataSource=_dataSource;
@property __weak PFTDataView *dataView; // @synthesize dataView=_dataView;
- (void).cxx_destruct;
- (void)_updateModel;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)reload;
- (void)awakeFromNib;
- (id)initWithDataSource:(id)arg1;
- (id)init;

@end

@interface XRInstrumentDebuggerWindowController : NSWindowController <NSOutlineViewDelegate, NSTextViewDelegate, NSTableViewDataSource, NSTableViewDelegate>
{
    BOOL _alreadyUpdating;
    BOOL _fetching;
    _XRCLIPSDebuggerChooserState *_clipsDebuggerChooser;
    NSOperation *_currentFetchOp;
    NSMutableArray *_navigatorItems;
    NSNumber *_debuggerPanelDetailMode;
    _XRDebuggerTableDetail *_selectedTableDetail;
    XRAnalysisCoreRowArray *_selectedTableContents;
    NSDictionary *_coreSchemasByName;
    NSArray *_knownPaths;
    NSArray *_tableBindings;
    NSArray *_modelerInstances;
    NSOutlineView *_navigatorView;
    NSView *_inspectorPane;
    NSView *_schemaDetailView;
    NSScrollView *_factDetailView;
    NSScrollView *_pathsDetailView;
    NSScrollView *_consoleDetailView;
    NSTextView *_commandView;
    NSSplitView *_tableBindingDetailView;
    NSSplitView *_modelersDetailView;
    NSTableView *_tableContentsView;
    NSView *_clipsDebuggerDetail;
    NSArrayController *_debuggerArrayController;
    NSTreeController *_navigatorTreeController;
    NSArrayController *_tableArrayController;
}

@property NSArrayController *tableArrayController; // @synthesize tableArrayController=_tableArrayController;
@property NSTreeController *navigatorTreeController; // @synthesize navigatorTreeController=_navigatorTreeController;
@property NSArrayController *debuggerArrayController; // @synthesize debuggerArrayController=_debuggerArrayController;
@property NSView *clipsDebuggerDetail; // @synthesize clipsDebuggerDetail=_clipsDebuggerDetail;
@property NSTableView *tableContentsView; // @synthesize tableContentsView=_tableContentsView;
@property NSSplitView *modelersDetailView; // @synthesize modelersDetailView=_modelersDetailView;
@property NSSplitView *tableBindingDetailView; // @synthesize tableBindingDetailView=_tableBindingDetailView;
@property NSTextView *commandView; // @synthesize commandView=_commandView;
@property NSScrollView *consoleDetailView; // @synthesize consoleDetailView=_consoleDetailView;
@property NSScrollView *pathsDetailView; // @synthesize pathsDetailView=_pathsDetailView;
@property NSScrollView *factDetailView; // @synthesize factDetailView=_factDetailView;
@property(retain) NSView *schemaDetailView; // @synthesize schemaDetailView=_schemaDetailView;
@property NSView *inspectorPane; // @synthesize inspectorPane=_inspectorPane;
@property NSOutlineView *navigatorView; // @synthesize navigatorView=_navigatorView;
@property(retain, nonatomic) NSArray *modelerInstances; // @synthesize modelerInstances=_modelerInstances;
@property(retain, nonatomic) NSArray *tableBindings; // @synthesize tableBindings=_tableBindings;
@property(retain, nonatomic) NSArray *knownPaths; // @synthesize knownPaths=_knownPaths;
@property(retain, nonatomic) NSDictionary *coreSchemasByName; // @synthesize coreSchemasByName=_coreSchemasByName;
@property(retain, nonatomic) XRAnalysisCoreRowArray *selectedTableContents; // @synthesize selectedTableContents=_selectedTableContents;
@property(retain, nonatomic) _XRDebuggerTableDetail *selectedTableDetail; // @synthesize selectedTableDetail=_selectedTableDetail;
@property(nonatomic) NSNumber *debuggerPanelDetailMode; // @synthesize debuggerPanelDetailMode=_debuggerPanelDetailMode;
@property(retain, nonatomic) NSMutableArray *navigatorItems; // @synthesize navigatorItems=_navigatorItems;
@property(retain, nonatomic) NSOperation *currentFetchOp; // @synthesize currentFetchOp=_currentFetchOp;
@property(nonatomic, getter=isFetching) BOOL fetching; // @synthesize fetching=_fetching;
@property(retain, nonatomic) _XRCLIPSDebuggerChooserState *clipsDebuggerChooser; // @synthesize clipsDebuggerChooser=_clipsDebuggerChooser;
- (void).cxx_destruct;
- (void)instanceModelers:(id)arg1;
- (void)runBindingSolver:(id)arg1;
- (void)refresh:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)textDidEndEditing:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (id)outlineView:(id)arg1 viewForTableColumn:(id)arg2 item:(id)arg3;
@property(readonly) PFTTraceDocument *traceDocument;
- (id)windowFrameAutosaveName;
- (id)windowTitleForDocumentDisplayName:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (void)windowDidLoad;
- (void)_fullFetch;
- (id)_chosenModuleName;
- (void)_updateUIState;
- (id)initWithWindow:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRInstrumentListViewController : NSObject <NSTableViewDataSource, NSTableViewDelegate>
{
    PFTInstrumentList *_delegate;
}

- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(id)arg1 deleteAction:(id)arg2;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)reselectItem:(id)arg1;
- (id)tableView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRInstrumentMenuController : NSObject <NSMenuDelegate>
{
    BOOL _isInvalid;
    NSMenu *_menu;
    PFTDocumentController *_controller;
}

@property(nonatomic) __weak PFTDocumentController *controller; // @synthesize controller=_controller;
@property(nonatomic) __weak NSMenu *menu; // @synthesize menu=_menu;
- (void).cxx_destruct;
- (BOOL)validateMenuItem:(id)arg1;
- (void)setControllerNeedsUpdate;
- (void)_invokeRefreshMenuItems;
- (void)_metaUIInvokeAction:(id)arg1;
- (void)_handleInstrumentStateChange:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRInstrumentTableColumn : NSTableColumn
{
    PFTInstrumentListCell *_basicDataCell;
    PFTInstrumentListCell *_recordingDataCell;
}

- (id)recordingDataCell;
- (id)basicDataCell;
- (id)dataCellForRow:(long long)arg1;

@end

@interface XRInstrumentsStrategyUIController : XRStrategyUIController
{
}

- (id)shortDescription;
- (id)smallIconAlternate;
- (id)smallIcon;
- (id)displayName;
- (id)init;

@end

@interface XRLibraryColoredBackgroundTextCell : XRColoredBackgroundTextCell
{
}

- (id)initWithDefaultsIdentifier:(id)arg1 preferenceTitle:(id)arg2;

@end

@interface XRLibraryProxy : NSObject
{
    BOOL _didOpenMasterTrack;
    DTAssetCategory *_instrumentCategory;
    NSMutableDictionary *_identifiedAssets;
    NSMutableDictionary *_groupedAssets;
    NSMutableDictionary *_namedAssets;
}

+ (id)sharedLibraryProxy;
+ (void)initialize;
- (void)assetLibrary:(id)arg1 didFinishDraggingAssets:(id)arg2 info:(id)arg3 shouldSlideBack:(char *)arg4;
- (void)assetLibrary:(id)arg1 willBeginDraggingAssets:(id)arg2;
- (id)assetLibrary:(id)arg1 alternateDragImageForAssets:(id)arg2;
- (BOOL)assetLibrary:(id)arg1 depositAssets:(id)arg2;
- (BOOL)assetLibrary:(id)arg1 shouldShowGridLinesForAssetViewStyle:(long long)arg2;
- (id)assetLibrarySmartGroupRuleDefinitionsPropertyList:(id)arg1;
- (id)assetLibrary:(id)arg1 createViewForSmartRuleViewID:(id)arg2;
- (id)assetLibrary:(id)arg1 smartGroupRuleDefinitionsPropertyListForCategory:(id)arg2;
- (id)assetLibrary:(id)arg1 pasteboardTypesForAssetCategory:(id)arg2;
- (BOOL)assetLibrary:(id)arg1 createAsset:(id *)arg2 andImage:(id *)arg3 forAssetSourceWithIdentifier:(id *)arg4 fromPasteboard:(id)arg5 forInsertingIntoAssetCategory:(id)arg6;
- (void)assetLibrary:(id)arg1 removeAssets:(id)arg2;
- (BOOL)assetLibrary:(id)arg1 canRemoveAsset:(id)arg2;
- (BOOL)assetLibrary:(id)arg1 canCreateAssetsFromPasteboard:(id)arg2 forAssetCategory:(id)arg3;
- (void)assetLibrary:(id)arg1 populatePasteboard:(id)arg2 withAssets:(id)arg3;
- (id)assetLibrary:(id)arg1 searchTermsForAsset:(id)arg2;
- (void)setVisible:(BOOL)arg1;
- (void)toggleVisibility;
- (void)instrumentRemoved:(id)arg1;
- (void)instrumentAdded:(id)arg1;
- (void)removeType:(id)arg1;
- (void)showHelpForInstrument:(id)arg1;
- (void)addType:(id)arg1;
- (void)removeAssetWithIdentifier:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRLibraryToolbarItem : XRToolbarItem
{
}

- (void)connectToContext:(id)arg1;
- (id)_createPre1010Control;
- (id)_create1010AndLaterControl;

@end

@interface XRMouseHighlighButton : NSButton
{
}

- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)mouseDown:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (BOOL)isOpaque;

@end

@interface XRMouseHighlighButtonCell : NSButtonCell
{
}

- (void)drawBezelWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawImage:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (BOOL)isOpaque;

@end

@interface XRPageBrowserViewController : NSViewController
{
    id <XRPageBrowserDataSource> _datasource;
    NSButton *_pageBackButton;
    NSButton *_pageForwardButton;
    NSSegmentedControl *_pageMarkers;
    NSBox *_box;
    NSTextField *_label;
    unsigned long long _pageIndex;
    unsigned long long _pageCount;
    NSView *_currentView;
}

@property(retain) NSView *currentView; // @synthesize currentView=_currentView;
@property unsigned long long pageCount; // @synthesize pageCount=_pageCount;
@property unsigned long long pageIndex; // @synthesize pageIndex=_pageIndex;
@property __weak NSTextField *label; // @synthesize label=_label;
@property __weak NSBox *box; // @synthesize box=_box;
@property __weak NSSegmentedControl *pageMarkers; // @synthesize pageMarkers=_pageMarkers;
@property __weak NSButton *pageForwardButton; // @synthesize pageForwardButton=_pageForwardButton;
@property __weak NSButton *pageBackButton; // @synthesize pageBackButton=_pageBackButton;
- (void).cxx_destruct;
- (void)pageForwardAction:(id)arg1;
- (void)pageBackAction:(id)arg1;
- (void)pageMarkersCallback:(id)arg1;
@property __weak id <XRPageBrowserDataSource> datasource; // @synthesize datasource=_datasource;
- (void)updatePage;
- (void)awakeFromNib;
- (id)init;

@end

@interface XRPathComponentCellAccessibilityObject : NSObject
{
    NSString *_role;
    id _pathCell;
    NSString *_description;
    NSPathComponentCell *_componentCell;
}

@property(readonly) NSPathComponentCell *componentCell; // @synthesize componentCell=_componentCell;
- (void).cxx_destruct;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)initWithPathComponentCell:(id)arg1 pathCell:(id)arg2 description:(id)arg3;

@end

@interface XRPauseResumeToolbarItem : XRToolbarItem
{
}

- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (id)_createPre1010Control;
- (id)_create1010AndLaterControl;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface XRPluginMigrator : NSObject
{
    BOOL _launch32;
}

- (BOOL)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (id)initWithRelaunch32Bit:(BOOL)arg1;

@end

@interface XRPreferencesPanel : PFTNibView <NSTableViewDataSource, NSTableViewDelegate, NSOpenSavePanelDelegate, XRCPUmanagerDelegateProtocol, XRUIModelChangeObserver>
{
    NSPopUpButton *_defaultDocumentLocationPopUp;
    NSTabView *_prefsTabView;
    NSMutableArray *_templateItems;
    NSNumberFormatter *_samplingRateFormatter;
    NSNumberFormatter *_samplingDurationFormatter;
    NSArrayController *_searchPathController;
    XRCPUmanager *_processorMgr;
    NSSlider *_activeProcessorsSlider;
    NSTextField *_activeProcessorsText;
    NSButton *_activeProcessorsHTCheck;
    NSPopUpButton *_dsymScriptLocationPopUp;
    NSPopUpButton *_dsymScriptUsagePopUp;
    NSOpenPanel *_currentDSYMScriptOpenPanel;
    NSPopUpButton *_sampleIntervalUnitsPopUp;
    NSPopUpButton *_sampleDurationUnitsPopUp;
    NSTextField *_sampleIntervalTextField;
    NSTextField *_sampleDurationTextField;
    NSButton *_enableSpinProfilingButton;
}

+ (void)_prefPanelClosed:(id)arg1;
+ (void)_prefPanelResignedKey:(id)arg1;
+ (BOOL)sendKeysToWindow;
+ (void)showPreferences;
+ (void)setupSearchPaths;
@property NSButton *enableSpinProfilingButton; // @synthesize enableSpinProfilingButton=_enableSpinProfilingButton;
@property NSTextField *sampleDurationTextField; // @synthesize sampleDurationTextField=_sampleDurationTextField;
@property NSTextField *sampleIntervalTextField; // @synthesize sampleIntervalTextField=_sampleIntervalTextField;
@property NSPopUpButton *sampleDurationUnitsPopUp; // @synthesize sampleDurationUnitsPopUp=_sampleDurationUnitsPopUp;
@property NSPopUpButton *sampleIntervalUnitsPopUp; // @synthesize sampleIntervalUnitsPopUp=_sampleIntervalUnitsPopUp;
- (void)showHelpForTab:(id)arg1;
- (void)dsymScriptUsageChanged:(id)arg1;
- (void)_resetDSYMScriptLocation:(id)arg1;
- (BOOL)panel:(id)arg1 validateURL:(id)arg2 error:(id *)arg3;
- (BOOL)panel:(id)arg1 shouldEnableURL:(id)arg2;
- (void)_chooseDSYMScriptLocation:(id)arg1;
- (void)removeSearchPath:(id)arg1;
- (void)addSearchPath:(id)arg1;
- (void)samplingDurationChange:(id)arg1;
- (void)samplingRateChange:(id)arg1;
- (void)updateActiveProcessorCoreCount;
- (void)_updateActiveProcessorCoreCount;
- (void)toggleHyperThreading:(id)arg1;
- (void)changeActiveProcessorCores:(id)arg1;
- (void)alertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)resetDontAskMeWarnings:(id)arg1;
- (void)_restoreDefaults:(id)arg1;
- (void)_resetDefaultDocumentLocation:(id)arg1;
- (void)_chooseDefaultDocumentLocation:(id)arg1;
- (void)openKeyboardShortcuts:(id)arg1;
- (void)spinProfilingPreferenceChanged:(id)arg1;
- (void)_updateDSYMScriptPopupView;
- (void)_updateDefaultDocumentPopupView;
- (void)modelDidChange:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRProgressIndicator : NSProgressIndicator
{
}

- (void)drawRect:(struct CGRect)arg1;
- (void)_drawBar:(BOOL)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRProgressView : PFTNibView
{
    XRProgressViewIndicator *_progressIndicator;
    NSTextField *_title;
    NSButton *_cancelButton;
    XRWorkTracker *_workTracker;
    BOOL _closeAsModalWindow;
    BOOL _closeAsynchronously;
}

+ (id)startProgressWithWorkTracker:(id)arg1;
+ (id)panelWithWorkTracker:(id)arg1;
+ (id)windowWithWorkTracker:(id)arg1;
@property(nonatomic) BOOL closeAsynchronously; // @synthesize closeAsynchronously=_closeAsynchronously;
- (BOOL)closeAsModalWindow;
- (void)setCloseAsModalWindow:(BOOL)arg1;
- (void)setFutureValue:(unsigned long long)arg1;
- (void)cancelWork:(id)arg1;
- (void)sheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)initWithWorkTracker:(id)arg1;

@end

@interface XRProgressViewIndicator : NSProgressIndicator
{
    double _futureValue;
    double _futureMarkValue;
    NSLock *_futureValueLock;
}

- (void)setFutureValue:(double)arg1;
- (void)_animationIdler:(id)arg1;

@end

@interface XRRecordOptionsViewController : NSViewController
{
    NSPopUpButton *_startDelayUnits;
    NSPopUpButton *_timeLimitUnits;
    NSPopUpButton *_windowLimitUnits;
    NSTextField *_startDelayField;
    NSTextField *_timeLimitField;
    NSTextField *_windowLimitField;
    NSTextField *_deferredInfoField;
    NSButton *_deferredMode;
    NSButton *_windowMode;
    XRHelpButton *_helpButton;
    XRTimeUnitTransformer *_startDelayTransformer;
    XRTimeUnitTransformer *_timeLimitTransformer;
    XRTimeUnitTransformer *_windowLimitTransformer;
    PFTTraceDocument *_document;
    NSString *_startDelay;
    NSString *_timeLimit;
    NSString *_windowLimit;
    BOOL _enableStartDelay;
    BOOL _enableTimeLimit;
    BOOL _enableWindowLimit;
    BOOL _selectDeferredDisplay;
    BOOL _selectStartDelay;
    BOOL _selectTimeLimit;
    BOOL _selectWindowMode;
    NSArray *_validTimeUnits;
}

+ (void)initialize;
@property BOOL selectTimeLimit; // @synthesize selectTimeLimit=_selectTimeLimit;
@property BOOL selectStartDelay; // @synthesize selectStartDelay=_selectStartDelay;
@property BOOL selectDeferredDisplay; // @synthesize selectDeferredDisplay=_selectDeferredDisplay;
@property BOOL enableWindowLimit; // @synthesize enableWindowLimit=_enableWindowLimit;
@property BOOL enableTimeLimit; // @synthesize enableTimeLimit=_enableTimeLimit;
@property BOOL enableStartDelay; // @synthesize enableStartDelay=_enableStartDelay;
@property(retain) NSArray *validTimeUnits; // @synthesize validTimeUnits=_validTimeUnits;
@property(retain) NSString *windowLimit; // @synthesize windowLimit=_windowLimit;
@property(retain) NSString *timeLimit; // @synthesize timeLimit=_timeLimit;
@property(retain) NSString *startDelay; // @synthesize startDelay=_startDelay;
- (void)popupSelected:(id)arg1;
- (void)cancelOperation:(id)arg1;
- (void)ok:(id)arg1;
@property BOOL selectWindowMode;
- (void)_settingsChanged:(id)arg1;
- (void)_updateDeferredModeControls;
- (void)dealloc;
- (id)initWithTraceDocument:(id)arg1;

@end

@interface XRRecordStopToolbarItem : XRToolbarItem
{
}

- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (id)_createPre1010Control;
- (id)_create1010AndLaterControl;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface XRResizableScrollView : NSScrollView
{
    XRVerticalSVDragThumb *_resizeButton;
    struct CGPoint _location;
}

- (void)viewDidMoveToSuperview;
- (void)awakeFromNib;
- (void)tile;

@end

@interface XRRunBrowser : PFTNibView
{
    NSView *_dataContainerView;
    XRCoverView *_coverView;
    NSTextField *_capturedTextView;
    NSTextField *_runTextView;
    NSTextField *_commentTextView;
    NSTextField *_durationtTextView;
    NSTextField *_architectureTextView;
    NSTextField *_osVersionTextView;
    NSTextField *_environmentTextView;
    NSTextField *_argumentsTextView;
    NSPathControl *_targetPathControl;
    NSButton *_closeButton;
    NSButton *_selectButton;
    NSButton *_deleteButton;
    PFTTraceDocument *_document;
}

- (void)validateControls;
- (void)close:(id)arg1;
- (void)endEditing:(id)arg1;
- (void)_deleteAlertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)deleteRun:(id)arg1;
- (void)selectRun:(id)arg1;
- (void)_selectionChanged:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)acceptsFirstResponder;
- (BOOL)isOpaque;
- (void)setup;
- (void)viewDidMoveToWindow;
- (void)dealloc;
- (id)initWithDocument:(id)arg1;

@end

@interface XRRunQuery : NSOperation
{
    XRRun *_runToQuery;
    id <CommonSymbol> _selectedSymbol;
    PFTSymbolData *_concreteSymbol;
    int _processIdentifier;
    NSDictionary *_selectedCallTreeInfo;
    NSArray *_comments;
    id <NSObject> _target;
    SEL _action;
    BOOL _isConcurrent;
    XRCodeManager *_srcManager;
}

- (BOOL)isCancelled;
- (void)main;
- (int)processIdentifier;
- (id)concreteSymbol;
- (id)selectedSymbol;
- (id)comments;
- (id)filename;
- (id)run;
- (BOOL)isConcurrent;
- (void)dealloc;
- (id)initDataForRun:(id)arg1 involvingSymbol:(id)arg2 withConcreteSymbol:(id)arg3 inSourceManager:(id)arg4 callTreeInformation:(id)arg5 callbackTarget:(id)arg6 action:(SEL)arg7;
- (id)initDataForRun:(id)arg1 involvingSymbol:(id)arg2 withConcreteSymbol:(id)arg3 forProcess:(int)arg4 inSourceManager:(id)arg5 callTreeInformation:(id)arg6 callbackTarget:(id)arg7 action:(SEL)arg8;

@end

@interface XRScopeBarView : DVTBorderedView
{
    NSView *_lastElement;
    BOOL _lastIsSeparator;
    NSMutableDictionary *_buttonHandlers;
    CDUnknownBlockType _compositionDestructor;
}

+ (id)scopeBarFont;
- (void)_scopeButtonClicked:(id)arg1;
- (void)removeAllSections;
- (void)addControlsSection:(id)arg1;
- (void)addScopingSection:(id)arg1 options:(int)arg2 configuration:(CDUnknownBlockType)arg3;
- (void)_addSectionSeparator;
- (void)_addControl:(id)arg1;
- (void)_appendDestructorBlock:(CDUnknownBlockType)arg1;
- (void)_registerButton:(id)arg1 inGroup:(id)arg2 options:(int)arg3 withHandler:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRScopeButton : DVTScopeBarButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRScopeButtonCell : DVTScopeBarButtonCell
{
}

- (struct CGRect)drawTitle:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;

@end

@interface XRScopedDVTTextControlScrollView : DVTSourceTextScrollView
{
    XRAnnotationBar *_annotationBar;
}

- (void)_drawOverlayDirectly;
- (id)annotationBar;
- (BOOL)isAnnotationBarVisible;
- (void)setAnnotationBarVisible:(BOOL)arg1;
- (void)reflectScrolledClipView:(id)arg1;
- (void)_reflectDocumentViewBoundsChange;
- (void)tile;
- (void)dealloc;
- (void)_updateRulerlineForRuler:(id)arg1 oldPosition:(double)arg2 newPosition:(double)arg3 vertical:(BOOL)arg4;

@end

@interface XRScriptControl : XRScopedTextControl <XRFileObserver, XREditableEntity>
{
    XRInstrument *_instrumentNotRetained;
    PFTProcess *_process;
    BOOL _dirty;
}

- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)recordButtonClicked:(id)arg1;
- (void)stopButtonClicked:(id)arg1;
- (void)playButtonClicked:(id)arg1;
- (void)validateRecordControls;
- (void)stopTarget;
- (BOOL)launchTarget;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)rescanPath:(id)arg1;
- (id)detailViewLabel;
- (id)classForNibName;
- (void)setInstrument:(id)arg1;
- (id)instrument;
- (void)dealloc;
- (id)initWithInstrument:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRSearchBarViewController : NSViewController <XRSearchTarget, NSTextFieldDelegate, PFTDetailViewAccessory>
{
    NSSearchField *_searchField;
    NSButton *_ignoreCaseButton;
    NSButton *_autoExpandButton;
    NSSegmentedControl *_directionalButtons;
    NSButton *_doneButton;
    NSTableView *_defaultView;
    id <XRSearchTarget> _searchTarget;
    BOOL _targetSupportsObjectValueForRow;
    BOOL _targetOutlineSupportsHighlights;
    BOOL _targetTableSupportsHighlights;
    NSString *_selectedCategory;
    BOOL _matchSymbols;
    BOOL _matchLibraries;
    XRBezelAlertPanel *_watermarkForward;
    XRBezelAlertPanel *_watermarkReverse;
    XRInstrument *_instrument;
}

+ (BOOL)ignoreCaseDuringFind;
+ (BOOL)autoExpandNodesDuringFind;
+ (void)initialize;
@property(readonly, retain, nonatomic) XRInstrument *instrument; // @synthesize instrument=_instrument;
- (void).cxx_destruct;
- (BOOL)searchBackward:(id)arg1;
- (BOOL)searchForward:(id)arg1 skipCurrent:(BOOL)arg2;
- (BOOL)_searchBackwardOutline:(id)arg1 row:(long long)arg2 options:(unsigned long long)arg3;
- (BOOL)_searchBackwardOutline:(id)arg1 item:(id)arg2 options:(unsigned long long)arg3 resultPath:(id)arg4 selectedItem:(id)arg5 stop:(char *)arg6;
- (id)_pathToRootFromItem:(id)arg1;
- (id)_pathFromRootToItem:(id)arg1;
- (BOOL)_searchForwardOutline:(id)arg1 row:(long long)arg2 options:(unsigned long long)arg3 skipCurrent:(BOOL)arg4;
- (void)_expandPath:(id)arg1 priorItem:(id)arg2 searchForward:(BOOL)arg3;
- (BOOL)_forwardCheckOutlineView:(id)arg1 matchingChildForItem:(id)arg2 forString:(id)arg3 options:(unsigned long long)arg4 resultPath:(id)arg5 skipCurrent:(BOOL)arg6;
- (int)_checkNodeInOutlineView:(id)arg1 matchingChildForItem:(id)arg2 forString:(id)arg3 options:(unsigned long long)arg4;
- (BOOL)_isItem:(id)arg1 highlightedInOutlineView:(id)arg2;
- (unsigned long long)stringArray:(id)arg1 containsPartialMatch:(id)arg2;
- (BOOL)_searchBackwardTable:(id)arg1 row:(long long)arg2 options:(unsigned long long)arg3;
- (BOOL)_searchForwardTable:(id)arg1 row:(long long)arg2 options:(unsigned long long)arg3 skipCurrent:(BOOL)arg4;
- (void)_selectRow:(long long)arg1;
- (void)_checkNeedDisplayLoopForOldRow:(long long)arg1 newRow:(long long)arg2 searchForward:(BOOL)arg3;
- (BOOL)_doesRow:(long long)arg1 matchSearchTerm:(id)arg2 forColumns:(id)arg3 options:(unsigned long long)arg4 useBindings:(char *)arg5;
- (id)_stringForColumn:(long long)arg1 row:(long long)arg2;
- (id)searchCategories;
- (id)_columnsToSearch;
- (id)_searchableColumns;
- (void)setMainView:(id)arg1;
- (id)searchTarget;
- (void)setSearchTarget:(id)arg1;
- (void)viewDidAppear;
- (void)awakeFromNib;
- (void)_searchCategorySelected:(id)arg1;
- (void)_rebuildSearchMenu;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)performFindPanelAction:(id)arg1;
- (BOOL)_performCurrentEvent;
- (void)doneClicked:(id)arg1;
- (void)searchButtonsClicked:(id)arg1;
- (void)searchFieldAction:(id)arg1;
- (id)classForNibName;
- (id)watermarkReverse;
- (id)watermarkForward;
- (void)dealloc;
- (id)initWithInstrument:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRSelectedInstrumentConfigurationDataElementList : PFTDataElementList
{
    PFTSelectedInstrumentList *_selectedInstrumentList;
    PFTTraceDocument *_traceDocument;
}

@property __weak PFTTraceDocument *traceDocument; // @synthesize traceDocument=_traceDocument;
- (void).cxx_destruct;
- (void)_instrumentUnselected:(id)arg1;
- (void)_instrumentUpdated:(id)arg1;
- (void)_instrumentSelected:(id)arg1;
@property(retain) PFTSelectedInstrumentList *selectedInstrumentList; // @synthesize selectedInstrumentList=_selectedInstrumentList;
- (void)dealloc;

@end

@interface XRSeparatorToolbarItem : XRToolbarItem
{
}

- (void)connectToContext:(id)arg1;

@end

@interface XRShowHideDetailToolbarItem : XRToolbarItem
{
}

- (void)_segmentedControlClicked:(id)arg1;
- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (id)_create1010AndLaterControl;
- (id)_createPre1010Control;
- (id)_viewUtilitiesImageFactory;
- (id)_viewDebugAreaImageFactory;
- (id)_imageFactoryForImageNamed:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface XRSourceControl : XRScopedTextControl <XRTextViewDragDestination, NSTextViewDelegate, XRContextContainer, NSOpenSavePanelDelegate, XRAnnotationBarDelegate, DVTSourceTextViewDelegate>
{
    XRInstrument *_instrumentNotRetained;
    BOOL _observingInstrument;
    id <XRSymbolSourceProxy> _selectedSymbolProxy;
    NSOperationQueue *_operationQueue;
    unsigned long long _operationCount;
    NSSegmentedControl *_controlMenu;
    int _displayType;
    int _procState;
    int _dispState;
    NSError *_failure;
    XRCodeFragment *_srcFrag;
    XRCodeFragment *_disasmFrag;
    XRSymbolContext *_symbolContext;
    NSMutableArray *_currCoachCommentsArray;
    NSMutableDictionary *_textlineCommentsTable;
    NSMutableArray *_textlineInspectorKeys;
    NSMutableArray *_textlineInspectorValues;
    NSMutableDictionary *_disasmlineCommentsTable;
    NSMutableArray *_disasmlineInspectorKeys;
    NSMutableArray *_disasmlineInspectorValues;
    id <CommonSymbol> _focusedSymbol;
    BOOL _showLineMarker;
    unsigned long long _markerLineNumber;
    unsigned long long _disasmMarkerLineNumber;
    int _selfSettingSelections;
}

+ (void)registerXcodeDefaults;
- (void)displayDisassemblyAnnotation:(id)arg1;
- (void)displaySourceAnnotation:(id)arg1;
- (void)displayAnnotationKey:(id)arg1;
- (id)dataElementsForExtendedDetail;
- (id)uuid;
- (id)iconForContext:(id)arg1;
- (id)viewForContext:(id)arg1;
- (id)siblingsForContext:(id)arg1;
- (void)displayContext:(id)arg1;
- (id)contextRepresentation;
- (void)startAnnotationQuery;
- (void)enableCounterpart:(BOOL)arg1;
- (void)consumeAnnotations;
- (void)loadBestTextIntoView;
- (void)cancelSymbolLoad;
- (void)startSymbolLoad;
- (BOOL)performDragOperation:(id)arg1;
- (void)_laodAndAnalyzeDroppedFiles:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (unsigned long long)dragging:(id)arg1;
- (id)dragTypes;
- (void)setPickerForSymbolName:(id)arg1;
- (void)cancelAllQueryOperations;
- (void)addQueryOperation:(id)arg1;
- (id)operationQueue;
- (BOOL)validateMenuItem:(id)arg1;
- (void)_showISAReferenceGuide:(id)arg1;
- (void)_toggleInstructionDetails:(id)arg1;
- (void)_toggleLineCorrection:(id)arg1;
- (void)_constrainToCallTree:(id)arg1;
- (void)_viewAsNatural:(id)arg1;
- (void)_viewAsPercentage:(id)arg1;
- (void)_viewAsValue:(id)arg1;
- (void)_reformatAnnotationsAs:(int)arg1;
- (void)_symbolChosen:(id)arg1;
- (id)_symbolForDisplayName:(id)arg1;
- (id)symbolNameForDisplayName:(id)arg1;
- (void)_segmentsAction:(id)arg1;
- (void)enableDualView:(BOOL)arg1;
- (void)_flipToCompliment:(id)arg1;
- (void)_refresh:(id)arg1;
- (void)showLoadingIndicator:(BOOL)arg1;
- (void)invalidate;
- (void)performCustomFindPanelAction:(id)arg1;
- (void)resetSourceViewToEmpty;
- (id)customWatermark;
- (void)refreshStatistics;
- (id)_symbol;
- (BOOL)description:(id *)arg1 inspector:(char *)arg2 theme:(id *)arg3 themeAlpha:(double *)arg4 heatColor:(id *)arg5 highlightColor:(id *)arg6 forLine:(unsigned long long)arg7 inTextView:(id)arg8;
- (id)_defaultTargetLineColor;
- (id)descriptionAtInspectableIndex:(unsigned long long)arg1;
- (unsigned long long)lineNumberAtInspectableIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfInspectableItems;
- (id)dataElementsForLineNumber:(unsigned long long)arg1 inTextView:(id)arg2;
- (id)descriptionForComments:(id)arg1;
- (id)paragraphBorderHighlightColorForComments:(id)arg1;
- (id)themeAndAlpha:(double *)arg1 heatColor:(id *)arg2 forComments:(id)arg3;
- (double)importanceOfComments:(id)arg1;
- (void)clearDisasmAnnotations;
- (void)clearSourceAnnotations;
- (void)clearAnnotations;
- (void)addDisasmMarkupForQuery:(id)arg1;
- (void)addSourceMarkupForQuery:(id)arg1;
- (void)addAllMarkupForQuery:(id)arg1;
- (void)_statisticsQueryCompleted:(id)arg1;
- (void)_focusOnNewSymbol;
- (void)_setDisassemblyTextForFragment:(id)arg1 withSource:(id)arg2;
- (void)_setSourceTextToFragment:(id)arg1;
- (void)_showSourceEnabled;
- (void)_enableDualViewButton:(BOOL)arg1;
- (void)_setDualViewToolTip:(BOOL)arg1;
- (void)_enableCounterpartButton:(BOOL)arg1;
- (void)_setCounterpartToolTip:(id)arg1;
- (BOOL)_loadSourceForPath:(id)arg1 withContents:(id)arg2 ofType:(id)arg3;
- (void)_showSourceResolver:(id)arg1;
- (BOOL)panel:(id)arg1 validateURL:(id)arg2 error:(id *)arg3;
- (void)_addNavigationLinks:(id)arg1 andFixedLineRange:(struct _NSRange *)arg2;
- (id)flattenSourceItem:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)setSelectedSymbol:(id)arg1;
- (BOOL)textView:(id)arg1 clickedOnLink:(id)arg2 atIndex:(unsigned long long)arg3;
- (void)setWaterMarkVisibility:(int)arg1;
- (id)sourceManager;
- (void)_textSelectionDidChange:(id)arg1;
- (void)_findSelectedLinesInDisasmViewMultiClickInView:(id)arg1 withCodeManager:(id)arg2 extraLines:(unsigned long long)arg3 lineRange:(struct _NSRange)arg4 newLineRanges:(id)arg5 newCharRanges:(id)arg6;
- (void)_findSelectedLinesInDisasmViewSingleClickInView:(id)arg1 withCodeManager:(id)arg2 extraLines:(unsigned long long)arg3 lineRange:(struct _NSRange)arg4 newLineRanges:(id)arg5 newCharRanges:(id)arg6;
- (void)_findSelectedLinesInSourceViewAnyClickInView:(id)arg1 withCodeManager:(id)arg2 extraLines:(unsigned long long)arg3 lineRange:(struct _NSRange)arg4 newLineRanges:(id)arg5 newCharRanges:(id)arg6;
- (id)refreshDisasmSelectionInfo:(id)arg1;
- (id)refreshSourceViewSelectionInfo;
- (id)focusedSymbolTruncatedName;
- (id)focusedSymbolSourceFileNameAndPath:(id *)arg1 andExtension:(id *)arg2;
- (void)observeRun:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)getPersistentSyms:(id *)arg1 error:(id *)arg2;
- (void)applyCurrentFilter;
- (id)detailViewLabel;
- (id)classForNibName;
- (id)instrument;
- (void)dealloc;
- (id)initWithInstrument:(id)arg1;
- (void)enterProcessingState:(int)arg1;
- (void)enterDisplayState:(int)arg1;
- (void)wantsDisassembly;
- (void)wantsSource;
- (void)sourceLoadFailed;
- (void)disassemblyLoadFailed;
- (void)disassemblyLoaded;
- (void)sourceLoaded;
- (void)startRefresh;
- (void)refreshComplete;
- (void)loadFailed;
- (void)displayText;
- (void)loadText;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRSourceListCell : NSTextFieldCell
{
    NSImage *_image;
    double _imageAreaWidth;
    BOOL _drawImage;
    double _xHeight;
    int _background;
}

- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (int)background;
- (void)setBackground:(int)arg1;
- (void)setFont:(id)arg1;
- (void)setImageAreaWidth:(double)arg1;
- (double)imageAreaWidth;
- (void)setImage:(id)arg1;
- (BOOL)drawsImage;
- (void)setDrawsImage:(BOOL)arg1;
- (id)image;
- (BOOL)isEditable;
- (BOOL)isSelectable;
- (BOOL)isEnabled;
- (BOOL)isHighlighted;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initImageCell:(id)arg1;
- (id)init;
- (id)initTextCell:(id)arg1;
- (void)_sharedOutlineViewCellInit;

@end

@interface XRSourceListView : NSOutlineView
{
}

- (id)preparedCellAtColumn:(long long)arg1 row:(long long)arg2;
- (id)selectedSourceListCellAttributesWithDefaults:(id)arg1;
- (id)_groupCellAttributesWithDefaults:(id)arg1 highlighted:(BOOL)arg2;
- (id)_titleFont;
- (struct CGRect)frameOfOutlineCellAtRow:(long long)arg1;

@end

@interface XRSourceTabView : NSView <XRInspectorSource>
{
    NSTextField *_valueField;
    NSButton *_inspectorButton;
    BOOL _showInspectorButton;
    XRInstrument *_instrument;
    int _valueType;
    XRAnnotation *_textAnnotation;
    DVTTextView *_textView;
}

@property(nonatomic) DVTTextView *textView; // @synthesize textView=_textView;
@property(nonatomic) XRAnnotation *textAnnotation; // @synthesize textAnnotation=_textAnnotation;
- (void)showInspectorButton:(BOOL)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (struct CGRect)spotRect;
- (id)instrument;
- (id)dataElementsForInspector:(id)arg1;
- (void)inspectorDismissed:(id)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)viewDidMoveToWindow;
- (void)toggleInspector:(id)arg1;
- (id)stringForValueType:(int)arg1;
- (int)valueType;
- (void)setValueType:(int)arg1;
- (void)setInstrument:(id)arg1;
- (void)setValue:(id)arg1;
- (struct CGRect)resetSize;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRSourceTabViewAnnotationCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface XRSpacerToolbarItem : XRToolbarItem
{
}

- (struct CGSize)minSize;
- (struct CGSize)maxSize;
- (void)connectToContext:(id)arg1;

@end

@interface XRSplitView : NSSplitView
{
}

- (BOOL)_isInactive;
- (void)drawDividerInRect:(struct CGRect)arg1;

@end

@interface XRSplitViewAnimation : NSAnimation
{
    double _delta;
    double _fromPosition;
    double _toPosition;
}

@property double toPosition; // @synthesize toPosition=_toPosition;
@property double fromPosition; // @synthesize fromPosition=_fromPosition;
@property double delta; // @synthesize delta=_delta;
- (void)setCurrentProgress:(float)arg1;

@end

@interface XRStackedViewList : PFTNibView
{
    NSButton *_upButton;
    NSButton *_downButton;
    NSView *_collectionView;
    NSMutableArray *_items;
    unsigned long long _firstVisIndex;
    unsigned long long _maxItemsVisible;
    unsigned long long _selectedIndex;
    double _itemHeight;
}

- (void)mouseDown:(id)arg1;
- (void)down:(id)arg1;
- (void)up:(id)arg1;
- (id)selectedItem;
- (id)itemAtIndex:(unsigned long long)arg1;
- (unsigned long long)selectedIndex;
- (void)removeAllItems;
- (void)removeItem:(id)arg1;
- (void)addItem:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)layoutViews;
- (double)requiredHeight;
- (void)setMaxItemsVisible:(unsigned long long)arg1;
- (void)setItemHeight:(double)arg1;
- (void)_checkState;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewDidMoveToWindow;
- (void)dealloc;

@end

@interface XRStrategiesToolbarButton : NSButton
{
    BOOL _clearButtonActive;
    NSButton *_clearButton;
    NSTrackingArea *_trackingArea;
}

+ (Class)cellClass;
@property(retain, nonatomic) NSTrackingArea *trackingArea; // @synthesize trackingArea=_trackingArea;
@property(nonatomic) BOOL clearButtonActive; // @synthesize clearButtonActive=_clearButtonActive;
@property(retain, nonatomic) NSButton *clearButton; // @synthesize clearButton=_clearButton;
- (void).cxx_destruct;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (struct CGSize)intrinsicContentSize;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRStrategiesToolbarButtonCell : NSButtonCell
{
}

- (long long)interiorBackgroundStyle;
- (void)drawBezelWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface XRStrategiesToolbarItem : XRToolbarItem
{
}

+ (id)_alternateImages;
+ (id)_images;
- (void)_segmentedControlClicked:(id)arg1;
- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (id)_createPre1010Control;
- (id)_create1010AndLaterControl;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface XRStrategiesToolbarPopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (id)initWithFrame:(struct CGRect)arg1 pullsDown:(BOOL)arg2;

@end

@interface XRStrategiesToolbarPopUpButtonCell : NSPopUpButtonCell
{
}

- (long long)interiorBackgroundStyle;
- (void)drawBezelWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface XRStrategiesToolbarView : NSView <DVTWindowActivationStateObserver>
{
    id <DVTCancellable> _windowActivationObservation;
}

+ (id)_colorForLightSeparatorLineShadowIsMain:(BOOL)arg1;
+ (id)_colorForLightSeparatorLineIsMain:(BOOL)arg1;
- (void).cxx_destruct;
- (id)_toolbarBaselineColorForceMain:(BOOL)arg1;
- (void)updateLayer;
- (BOOL)wantsUpdateLayer;
- (BOOL)wantsLayer;
- (BOOL)isFlipped;
- (void)window:(id)arg1 didChangeActivationState:(long long)arg2;
- (void)viewWillMoveToWindow:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRStrategiesToolbarViewController : NSViewController
{
    XRStrategyUIController *_currentUIController;
    PFTTraceDocument *_document;
    NSStackView *_stackView;
    NSSegmentedControl *_strategyPicker;
    NSView *_separatorView;
    NSMutableArray *_strategyUIControllers;
}

+ (BOOL)_includeStrategyPicker;
@property(retain, nonatomic) NSMutableArray *strategyUIControllers; // @synthesize strategyUIControllers=_strategyUIControllers;
@property(retain, nonatomic) NSView *separatorView; // @synthesize separatorView=_separatorView;
@property(retain, nonatomic) NSSegmentedControl *strategyPicker; // @synthesize strategyPicker=_strategyPicker;
@property(nonatomic) __weak NSStackView *stackView; // @synthesize stackView=_stackView;
@property(retain, nonatomic) PFTTraceDocument *document; // @synthesize document=_document;
- (void).cxx_destruct;
- (void)_strategyPicked:(id)arg1;
- (void)_rebuildUI;
- (id)_separatorView;
- (id)_rebuildStrategyPicker;
- (void)_updateUIControllersList;
- (void)reloadData;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly, nonatomic) XRStrategyUIController *currentUIController; // @synthesize currentUIController=_currentUIController;
- (void)awakeFromNib;
- (void)dealloc;
- (id)initWithDocument:(id)arg1;

@end

@interface XRSummaryDetailItemView : NSView
{
    DTGraph *_graph;
    NSTrackingArea *_trackingArea;
    BOOL _mouseInside;
    BOOL _mouseDown;
}

- (void)performAction;
- (void)drawRect:(struct CGRect)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (BOOL)isHighlighted;
- (void)setFrameSize:(struct CGSize)arg1;
- (id)graph;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 graphClass:(Class)arg2;
- (void)_setupBarChart:(Class)arg1;

@end

@interface XRSummaryDetailView : NSCollectionView
{
    PFTInstrumentList *_instrumentList;
    NSMutableArray *_summaries;
    NSArrayController *_summariesArrayController;
    NSView *_highlightedView;
}

@property(retain) NSMutableArray *summaries; // @synthesize summaries=_summaries;
- (id)highlightedView;
- (void)setHighlightedView:(id)arg1;
- (id)description;
- (id)newItemForRepresentedObject:(id)arg1;
- (void)reloadData;
- (void)dealloc;
- (id)initWithDataSource:(id)arg1 keyPath:(id)arg2;

@end

@interface XRSymbolBackgroundView : NSView
{
}

- (void)xxxdrawRect:(struct CGRect)arg1;

@end

@interface XRSymbolLookupView : PFTNibView <NSComboBoxDataSource>
{
    NSTextField *_title;
    NSComboBox *_comboBox;
    NSProgressIndicator *_progressBar;
    NSTextField *_progressTitle;
    NSArray *_symbols;
    unsigned long long _lengthToCancel;
    unsigned long long _lastIndex;
    BOOL _isSorted;
    PFTProcess *_target;
}

- (void)_loadUpdatedSymbolsPartTwo:(id)arg1;
- (void)_loadUpdatedSymbols:(id)arg1;
- (void)_updateCompleteUI;
- (void)_updateSymbols:(id)arg1;
- (id)comboBox:(id)arg1 completedString:(id)arg2;
- (unsigned long long)comboBox:(id)arg1 indexOfItemWithStringValue:(id)arg2;
- (id)comboBox:(id)arg1 objectValueForItemAtIndex:(long long)arg2;
- (long long)numberOfItemsInComboBox:(id)arg1;
- (void)cancelDialog:(id)arg1;
- (void)cancel:(id)arg1;
- (void)symbolChosen:(id)arg1;
- (void)endWithCode:(int)arg1;
- (id)comboBox;
- (id)titleField;
- (void)_textFieldChanged:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)dealloc;
- (id)initWithInstruments:(id)arg1 target:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTableHeaderMenuView : NSTableHeaderView
{
}

- (void)drawRect:(struct CGRect)arg1;
- (void)mouseDown:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRTargetChooserPathCell : NSPathCell <XRPathCellAccessible>
{
    struct CGSize _cachedSizeWanted;
    NSMenu *_trackingMenu;
    NSPathComponentCell *_clickedPathComponentCell;
    int _gradientStyle;
    int _borderSides;
}

+ (Class)pathComponentCellClass;
@property int borderSides; // @synthesize borderSides=_borderSides;
@property(nonatomic) int gradientStyle; // @synthesize gradientStyle=_gradientStyle;
@property(retain) NSPathComponentCell *clickedPathComponentCell; // @synthesize clickedPathComponentCell=_clickedPathComponentCell;
- (void).cxx_destruct;
- (id)trackingMenu;
- (void)handleClickInComponentCell:(id)arg1 atPoint:(struct CGPoint)arg2 inRect:(struct CGRect)arg3 ofView:(id)arg4 event:(id)arg5;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGSize)sizeWantedForFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)cancelMenuTracking;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)_handleClickInComponentCell:(id)arg1 atPoint:(struct CGPoint)arg2 inRect:(struct CGRect)arg3 ofView:(id)arg4 event:(id)arg5;
- (void)_popUpMenuForComponentCell:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (void)setFont:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTargetChooserPathComponentCell : NSPathComponentCell
{
    BOOL _isFirstItem;
    BOOL _isLastItem;
    BOOL _isOffline;
    int _gradientStyle;
}

+ (id)_textDrawingAttributes;
@property int gradientStyle; // @synthesize gradientStyle=_gradientStyle;
@property BOOL isOffline; // @synthesize isOffline=_isOffline;
@property BOOL isLastItem; // @synthesize isLastItem=_isLastItem;
@property BOOL isFirstItem; // @synthesize isFirstItem=_isFirstItem;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)_attributedStringValue:(BOOL)arg1;
- (id)shadow;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (double)_textOffsetForIcon:(id)arg1 inFrame:(struct CGRect)arg2 doDraw:(BOOL)arg3 isActive:(BOOL)arg4;
- (double)_rightDividerWidth;
- (double)_leftDividerWidth;
- (void)_drawDividerForFrame:(struct CGRect)arg1 inControlView:(id)arg2;
- (BOOL)_isActiveWindow:(id)arg1;
- (void)_useChevronForLeftEdge:(char *)arg1 rightEdge:(char *)arg2;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (double)iconSize;

@end

@interface XRTargetChooserPathControl : NSPathControl <XRAccessiblePathCellDelegate>
{
    NSMutableDictionary *_deviceToComponentCellMap;
    XRDevice *_device;
    BOOL _allowNilDevice;
}

+ (Class)cellClass;
+ (unsigned long long)defaultFocusRingType;
@property(readonly, nonatomic) BOOL allowNilDevice; // @synthesize allowNilDevice=_allowNilDevice;
- (void).cxx_destruct;
- (id)pathCell:(id)arg1 accessibilityDescriptionForPathComponentCell:(id)arg2 atIndex:(unsigned long long)arg3;
- (id)accessibilityPopUpMenuParent:(id)arg1;
- (struct CGSize)sizeWanted;
- (id)menuForEvent:(id)arg1;
- (BOOL)isOpaque;
- (void)setMenu:(id)arg1;
- (void)setFont:(id)arg1;
@property(nonatomic) int gradientStyle;
- (void)setEnabled:(BOOL)arg1;
- (void)reconfigureWithContext:(id)arg1 controlSize:(unsigned long long)arg2 allowNilDevice:(BOOL)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTargetChooserToolbarBorderButton : NSButton
{
}

+ (BOOL)accessibilityIsSingleCelled;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityRoleAttribute;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRTargetChooserToolbarItem : XRToolbarItem <NSPathControlDelegate, NSMenuDelegate, XRDeviceObserver>
{
    NSObject<XRProcessTargetedObject> *_currentTargetedObject;
    XRTargetChooserPathControl *_pathControl;
}

@property(retain) XRTargetChooserPathControl *pathControl; // @synthesize pathControl=_pathControl;
- (void).cxx_destruct;
- (long long)visibilityPriority;
- (struct CGSize)minSize;
- (void)_reconfigurePathControl;
- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)handleDeviceNotification:(id)arg1;
- (id)initWithItemIdentifier:(id)arg1 documentIdentifier:(id)arg2;
- (id)device;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTemplateChooserCollectionView : NSCollectionView
{
}

- (void)insertNewlineIgnoringFieldEditor:(id)arg1;
- (void)insertNewline:(id)arg1;

@end

@interface XRTemplateChooserLozengeView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface XRTemplateChooserWindow : NSWindow
{
}

- (void)performClose:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;

@end

@interface XRTemplateChooserWindowController : NSWindowController <XRDeviceObserver, NSPathControlDelegate, NSTableViewDataSource, NSTableViewDelegate, NSTextFieldDelegate, NSWindowDelegate, NSCollectionViewDelegate>
{
    XRTemplateChooserTargetedObject *_itemContext;
    int _currentCategoryType;
    NSString *_filterString;
    NSMutableArray *_categories;
    NSMutableArray *_currentCategory;
    NSMutableArray *_currentTextFilteredCategory;
    id _eventMonitor;
    BOOL _canChangeDeviceAndProcess;
    BOOL _validTemplateSelection;
    NSString *_selectedTemplatePath;
    NSDictionary *_plistData;
    XRRecentArrayStoredPrefs *_recentTemplatesArray;
    NSView *_mainView;
    NSView *_targetSearchContainer;
    XRTargetChooserPathControl *_targetChooserPathControl;
    NSButton *_chooseButton;
    NSButton *_profileButton;
    NSButton *_cancelButton;
    NSButton *_openExistingButton;
    DVTScopeBarButton *_standardButton;
    DVTScopeBarButton *_recentButton;
    DVTScopeBarButton *_customButton;
    NSSearchField *_searchField;
    NSCollectionView *_templateCollectionView;
    NSImageView *_selectedTemplateImage;
    NSTextField *_selectedTemplateName;
    NSTextField *_selectedTemplateDescription;
    DVTBorderedView *_mainBorderedView;
    DVTBorderedView *_scopeFilterBorderedView;
    DVTBorderedView *_selectedTemplateBorderedView;
    NSScrollView *_templateCollectionScrollView;
    XRTemplateCollectionViewItem *_templateCollectionViewItem;
}

@property XRTemplateCollectionViewItem *templateCollectionViewItem; // @synthesize templateCollectionViewItem=_templateCollectionViewItem;
@property NSScrollView *templateCollectionScrollView; // @synthesize templateCollectionScrollView=_templateCollectionScrollView;
@property DVTBorderedView *selectedTemplateBorderedView; // @synthesize selectedTemplateBorderedView=_selectedTemplateBorderedView;
@property DVTBorderedView *scopeFilterBorderedView; // @synthesize scopeFilterBorderedView=_scopeFilterBorderedView;
@property DVTBorderedView *mainBorderedView; // @synthesize mainBorderedView=_mainBorderedView;
@property NSTextField *selectedTemplateDescription; // @synthesize selectedTemplateDescription=_selectedTemplateDescription;
@property NSTextField *selectedTemplateName; // @synthesize selectedTemplateName=_selectedTemplateName;
@property NSImageView *selectedTemplateImage; // @synthesize selectedTemplateImage=_selectedTemplateImage;
@property NSCollectionView *templateCollectionView; // @synthesize templateCollectionView=_templateCollectionView;
@property NSSearchField *searchField; // @synthesize searchField=_searchField;
@property DVTScopeBarButton *customButton; // @synthesize customButton=_customButton;
@property DVTScopeBarButton *recentButton; // @synthesize recentButton=_recentButton;
@property DVTScopeBarButton *standardButton; // @synthesize standardButton=_standardButton;
@property NSButton *openExistingButton; // @synthesize openExistingButton=_openExistingButton;
@property NSButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property(retain) NSButton *profileButton; // @synthesize profileButton=_profileButton;
@property(retain) NSButton *chooseButton; // @synthesize chooseButton=_chooseButton;
@property XRTargetChooserPathControl *targetChooserPathControl; // @synthesize targetChooserPathControl=_targetChooserPathControl;
@property NSView *targetSearchContainer; // @synthesize targetSearchContainer=_targetSearchContainer;
@property NSView *mainView; // @synthesize mainView=_mainView;
- (void).cxx_destruct;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (void)templateDoubleClicked:(id)arg1;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)controlTextDidChange:(id)arg1;
- (void)customButtonClicked:(id)arg1;
- (void)standardButtonClicked:(id)arg1;
- (void)recentButtonClicked:(id)arg1;
- (void)_updateFilterButtons;
- (void)_filterTemplates;
- (void)chooseOrProfileClicked:(id)arg1;
- (void)cancelClicked:(id)arg1;
- (void)openExistingClicked:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_updateChooseProfileButtons;
- (void)_updateSelectedTemplate;
- (void)_loadTemplates;
- (void)_reconfigurePathControl;
- (void)_setupPathControl;
- (void)windowDidLoad;
- (void)handleDeviceNotification:(id)arg1;
- (long long)_defaultIntegerForKey:(id)arg1 missingValue:(long long)arg2;
- (void)_configureWindow;
- (void)close;
- (id)windowNibName;
- (id)initWithWindowNibName:(id)arg1 plistData:(id)arg2 device:(id)arg3 process:(id)arg4;
- (id)initWithWindow:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTemplateInfoView : PFTNibView
{
    NSString *_templateIconURL;
    XRImagePickerView *_imagePickerView;
    NSTextView *_description;
}

- (void).cxx_destruct;
- (void)imagePicker:(id)arg1 imageSelectedFromURL:(id)arg2;
- (void)imagePicker:(id)arg1 selectedImageAtIndex:(long long)arg2;
- (id)imagesForImagePicker:(id)arg1;
- (id)templateDescrption;
- (void)setTemplateDescription:(id)arg1;
- (id)templateIconURL;
- (void)setTemplateIconURL:(id)arg1;
- (id)init;

@end

@interface XRTerminationFriendlyPanel : NSPanel
{
}

- (BOOL)_blocksActionWhenModal:(SEL)arg1;

@end

@interface XRTextEntryPanel : PFTNibView
{
    NSTextField *_titleField;
    NSTextField *_entryField;
}

- (void)keyDown:(id)arg1;
- (void)setTextValue:(id)arg1;
- (id)textValue;
- (void)cancel:(id)arg1;
- (void)cancelOperation:(id)arg1;
- (void)cancelAction:(id)arg1;
- (void)okAction:(id)arg1;
- (void)_endWithCode:(int)arg1;

@end

@interface XRTextStorage : DVTTextStorage
{
    NSMutableDictionary *_links;
}

- (void)fixSyntaxColoringInRange:(struct _NSRange)arg1;
- (void)removeAllLinks;
- (void)removeLinkForRange:(struct _NSRange)arg1;
- (void)addLink:(id)arg1 forRange:(struct _NSRange)arg2;
- (void)dealloc;

@end

@interface XRTextView : DVTSourceTextView <XREditableEntity>
{
    id <XRTextViewDragDestination> _dragDestinationDelegate;
    BOOL _displaysVerticalMarkupInScroller;
    BOOL _isDirty;
    BOOL _disassembledTextOnly;
}

- (BOOL)isDirty;
- (void)setIsDirty:(BOOL)arg1;
- (void)_userDidEditText:(id)arg1;
- (void)viewDidMoveToWindow;
- (BOOL)writeSelectionToPasteboard:(id)arg1 type:(id)arg2;
- (BOOL)readSelectionFromPasteboard:(id)arg1 type:(id)arg2;
- (id)writablePasteboardTypes;
- (id)readablePasteboardTypes;
- (BOOL)displaysVerticalMarkupInScroller;
- (void)setDisplaysVerticalMarkupInScroller:(BOOL)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (id)dragDestinationDelegate;
- (void)setDragDestinationDelegate:(id)arg1;
- (void)display;
- (BOOL)shouldTrimTrailingWhitespace;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRThreadConnectionSurface : XRDecoratorSurface
{
    id *_lineState;
    unsigned int _cpuCount;
    NSMutableArray *_connectedThreads;
}

- (BOOL)isDecorationValid;
- (long long)tag;
- (void)addThreadPairDecoration:(id)arg1;
- (void)addConnectionFromThread:(unsigned long long)arg1 toThread:(unsigned long long)arg2 atTime:(unsigned long long)arg3 onCPU:(unsigned int)arg4;
- (void)adjustThreadConnections;
- (BOOL)acceptsFirstResponder;
- (id)surfaceForThread:(unsigned long long)arg1;
- (void)clearDecoration;
- (id)stateForCPU:(unsigned int)arg1;
- (void)resetCPUStates;
- (void)setCPUCount:(unsigned int)arg1;
- (void)dealloc;
- (void)_releaseLineState;
- (id)initWithTimeRange:(struct XRTimeRange)arg1;

@end

@interface XRThreadDecorator : XRDecorator
{
    XRThreadStrategyQuery *_query;
    XRThreadStrategyController *_controller;
    XRRun *_run;
    NSDictionary *_legend;
}

+ (id)displayStyles;
- (id)legend;
- (void)setLegend:(id)arg1;
- (void)dealloc;
- (id)initWithQuery:(id)arg1 controller:(id)arg2 run:(id)arg3;

@end

@interface XRThreadDecoratorSurface : XRDecoratorSurface
{
    unsigned long long _threadID;
}

- (void)mouseDown:(id)arg1;
- (unsigned long long)tid;
- (void)dealloc;
- (id)initWithTimeRange:(struct XRTimeRange)arg1 thread:(unsigned long long)arg2;

@end

@interface XRThreadHeightControl : XRTrackingAreaControl
{
    struct CGPoint _mouseDownPoint;
    double _deckHeightDelta;
    double _originalDeckHeight;
}

- (void)cursorUpdate:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;

@end

@interface XRThreadListCell : NSActionCell <XRProcessTargetedObject>
{
    struct CGRect _currentCellBoundsDuringGesture;
    struct CGRect _currentCellFrameDuringGesture;
}

+ (BOOL)prefersTrackingUntilMouseUp;
- (int)defaultTargetTypeForChooser;
- (void)resetTarget;
- (void)setTargetsDevice:(id)arg1;
- (BOOL)supportsTargetType:(int)arg1;
- (id)currentTargetDevice;
- (id)currentTargetProcess;
- (void)setTargetsLaunchedProcess:(id)arg1;
- (void)setTargetsExistingProcess:(id)arg1;
- (void)setTargetsAllProcesses;
- (void)applyTooltipsWithCellFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)wantsCloseBox;
- (long long)_setCloseBoxTrackingTagForView:(id)arg1 inCellFrame:(struct CGRect)arg2 withIndex:(long long)arg3;
- (struct CGRect)_closeBoxRectForView:(id)arg1 inCellFrame:(struct CGRect)arg2;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawString:(id)arg1 inRect:(struct CGRect)arg2 withAttributes:(id)arg3;
- (void)drawInstrumentBackgroundWithFrame:(struct CGRect)arg1 inView:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRThreadListController : NSObject <NSTableViewDataSource, NSTableViewDelegate>
{
    XRThreadStrategyController *_delegate;
    NSArray *_threadList;
}

- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (double)trackView:(id)arg1 heightOfRow:(unsigned long long)arg2;
- (id)trackView:(id)arg1 threadAtRow:(unsigned long long)arg2;
- (long long)numberOfRowsInTrackView:(id)arg1;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)tableViewSelectionIsChanging:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)selectedThread;
- (id)threadList;
- (void)updateList;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRThreadListView : NSTableView <NSMenuDelegate>
{
    PFTTraceDocument *_unretainedTraceDocument;
    XRThreadListController *_threadListController;
    XRThread *_flyOverThreadNotRetained;
    int _flyOverState;
    struct CGPoint _flyOverPoint;
}

- (void)viewDidMoveToSuperview;
- (struct CGPoint)_flyOverPoint;
- (id)_flyOverThread;
- (void)_setFlyOverState:(int)arg1 forThread:(id)arg2;
- (int)_flyOverStateForThread:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_coreLayoutNotification:(id)arg1;
- (void)reloadData;
- (void)updateThreadList;
- (id)model;
- (void)setModel:(id)arg1;
- (id)label;
- (void)dealloc;
- (id)init;
- (void)sortThreadsByProcessName:(id)arg1;
- (void)sortThreadsByPID:(id)arg1;
- (void)sortThreadsByDefault:(id)arg1;
- (void)_setSortBy:(int)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRThreadPair : NSObject
{
    unsigned long long _sTid;
    unsigned long long _dTid;
    unsigned long long _timestamp;
    unsigned int _cpuIndex;
}

@property unsigned int cpuIndex; // @synthesize cpuIndex=_cpuIndex;
@property unsigned long long timestamp; // @synthesize timestamp=_timestamp;
@property unsigned long long dTid; // @synthesize dTid=_dTid;
@property unsigned long long sTid; // @synthesize sTid=_sTid;

@end

@interface XRThreadTrackView : XRBrushTrackView
{
    PFTTraceDocument *_unretainedTraceDocument;
    XRThreadListController *_threadListController;
    NSMapTable *_threadSurfaceMap;
    XRThreadConnectionSurface *_connectionSurface;
    XRTrackingAreaControl *_activeTrackingArea;
}

+ (void)initialize;
- (BOOL)enableCopyOnScroll;
- (void)cursorUpdate:(id)arg1;
- (void)updateTrackingAreas;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)refreshTrackingAreas;
- (void)_coreLayoutNotification:(id)arg1;
- (void)_threadHighlightNotification:(id)arg1;
- (id)threadForSurface:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (id)connectionSurface;
- (void)drawThreadNumber:(unsigned long long)arg1 withMarkerLines:(BOOL)arg2 displaySelection:(BOOL)arg3 displayBackground:(BOOL)arg4 enforceSingleDeck:(BOOL)arg5 trimBubble:(BOOL)arg6 inRect:(struct CGRect)arg7;
- (void)drawRect:(struct CGRect)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateThreadList;
- (void)reloadData:(BOOL)arg1;
- (void)scaleUnitSquareToSize:(struct CGSize)arg1;
- (void)updateSurfaceForThread:(id)arg1 frame:(struct CGRect)arg2;
- (void)startNow:(double)arg1;
- (id)model;
- (void)setModel:(id)arg1;
- (void)_removeSurfaces;
- (void)validateForWatermark;
- (id)watermarkMessageString;
- (unsigned int)gridIncrement;
- (BOOL)canZoomVertical;
- (id)verticalMeasurement;
- (id)horizontalMeasurement;
- (void)dealloc;

@end

@interface XRThreadsStrategyUIController : XRStrategyUIController <NSPopoverDelegate, XRUIModelChangeObserver>
{
    XRStrategiesToolbarButton *_processes;
    NSButton *_clearFilterButton;
    NSPopover *_popOver;
    XRThreadFilterViewController *_threadFilterController;
    XRProcessAndThreadListModel *_knownProcessesAndThreads;
    XRProcessAndThreadListModel *_restrictedProcessesAndThreads;
    XRThreadListLimiter *_limiter;
    XRIntKeyedDictionary *_includedThreadsByRun;
    XRElementSetModel *_includedThreads;
    long long _mySelectedRunIndex;
    NSOperation *_updateStrategyControllerOp;
    NSPopUpButton *_displayStyle;
    XRThreadStrategyController *_observedTSC;
}

- (void).cxx_destruct;
- (void)modelDidRefresh;
- (void)modelDidChange:(id)arg1;
- (void)_styleSelected:(id)arg1;
- (void)setStyle:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateSelectedRun;
- (void)updateDisplayOptions;
- (void)updateThreadsAndProcesses;
- (void)excludeThreads:(id)arg1;
- (void)includeThreads:(id)arg1;
- (void)_backupIncludedThreads;
- (void)_updateStrategyControllerThreads;
- (void)restrictThreadToContainString:(id)arg1;
- (void)restrictThreadList:(id)arg1;
- (void)_clearFilterAction:(id)arg1;
- (void)_threadFilterButtonClicked:(id)arg1;
- (void)popoverDidClose:(id)arg1;
- (void)popoverDidShow:(id)arg1;
- (id)styleViews;
- (id)filterViews;
- (id)shortDescription;
- (id)smallIconAlternate;
- (id)smallIcon;
- (id)displayName;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTimeScaleAdjustmentView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface XRTimeUnit : NSObject
{
    NSString *_name;
    NSString *_abbreviation;
    unsigned long long _conversionFactorFromSecond;
}

+ (id)timeUnitsList;
+ (id)unitWithAbbreviation:(id)arg1;
+ (id)unitWithName:(id)arg1;
+ (id)seconds;
+ (id)milliseconds;
+ (id)microseconds;
+ (id)nanoseconds;
@property(readonly) unsigned long long conversionFactorFromSecond; // @synthesize conversionFactorFromSecond=_conversionFactorFromSecond;
@property(readonly) NSString *abbreviation; // @synthesize abbreviation=_abbreviation;
@property(readonly) NSString *name; // @synthesize name=_name;
- (id)description;
- (void)dealloc;
- (id)initWithName:(id)arg1 abbreviation:(id)arg2 conversion:(unsigned long long)arg3;

@end

@interface XRTimeUnitTransformer : NSValueTransformer
{
    XRTimeUnit *_sourceUnit;
    XRTimeUnit *_targetUnit;
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
@property(retain) XRTimeUnit *targetUnit; // @synthesize targetUnit=_targetUnit;
@property(retain) XRTimeUnit *sourceUnit; // @synthesize sourceUnit=_sourceUnit;
- (id)reverseTransformedValue:(id)arg1;
- (id)transformedValue:(id)arg1;
- (double)reverseTransformedValueDouble:(double)arg1;
- (double)transformedValueDouble:(double)arg1;
- (void)dealloc;
- (id)initWithSourceUnit:(id)arg1;

@end

@interface XRToolbar : NSToolbar
{
}

- (BOOL)_allowsSizeMode:(unsigned long long)arg1;
- (BOOL)_allowsDisplayMode:(unsigned long long)arg1;
- (BOOL)isFullScreen;
- (id)_customMetrics;
- (void)validateVisibleItems;

@end

@interface XRToolbarManager : NSObject <XRToolbarManager>
{
    XRToolbar *_toolbar;
    NSString *_documentIdentifer;
}

+ (id)toolbarManagerWithIdentifier:(id)arg1 window:(id)arg2 documentIdentifier:(id)arg3;
@property(copy) NSString *documentIdentifer; // @synthesize documentIdentifer=_documentIdentifer;
@property(retain) XRToolbar *toolbar; // @synthesize toolbar=_toolbar;
- (void).cxx_destruct;
- (id)toolbarDefaultItemIdentifiers:(id)arg1;
- (id)toolbarAllowedItemIdentifiers:(id)arg1;
- (id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
- (id)initWithToolbar:(id)arg1 documentIdentifier:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRToolbarSegmentedControl : DVTSegmentedControl
{
    NSMutableArray *_disabledImages;
    NSMutableArray *_alternateDisabledImages;
}

+ (id)_cachedInactiveAlternateImageFromImage:(id)arg1;
+ (id)_cachedInactiveImageFromImage:(id)arg1;
+ (id)_deriveInactiveImageFromImage:(id)arg1;
+ (double)borderedSegmentedControlSegmentWidthOn1010;
+ (id)toolbarSegmentedControlWithTrackingMode:(unsigned long long)arg1 images:(id)arg2 alternateImages:(id)arg3;
- (void).cxx_destruct;
- (id)alternateImageForSegment:(long long)arg1;
- (id)imageForSegment:(long long)arg1;
- (id)_alternateDisabledImages;
- (id)_disabledImages;

@end

@interface XRTopicBrowserOutlineView : DVTOutlineView
{
    NSTextFieldCell *_dataCellForGroupRow;
}

- (void).cxx_destruct;
- (id)preparedCellAtColumn:(long long)arg1 row:(long long)arg2;
- (id)_dataCellForGroupRow;
- (id)_groupRowFont;
- (struct CGRect)frameOfCellAtColumn:(long long)arg1 row:(long long)arg2;

@end

@interface XRTopicBrowserView : NSView
{
    id <XRTopicBrowserViewDelegate> _delegate;
}

@property __weak id <XRTopicBrowserViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)viewDidMoveToWindow;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface XRTopicBrowserViewController : NSViewController <DVTOutlineViewDelegate, NSOutlineViewDataSource, XRTopicViewer, XRTopicBrowserViewDelegate>
{
    long long _returnCode;
    BOOL _isSheet;
    BOOL _icHandlesKeyDown;
    NSArray *_topics;
    XRTopic *_singleDropTopic;
    NSObject<XRTopicInterfaceComponent> *_currentBrowserBoxComponent;
    NSObject<XRTopicInterfaceComponent> *_currentOptionsBoxComponent;
    NSWindow *_parentWindow;
    XRBoxView *_browserBox;
    XRBoxView *_optionsBox;
    XRTopicBrowserOutlineView *_topicsList;
    NSButton *_cancelButton;
    NSButton *_okButton;
    NSTextField *_messageField;
}

@property(nonatomic) __weak NSTextField *messageField; // @synthesize messageField=_messageField;
@property(nonatomic) __weak NSButton *okButton; // @synthesize okButton=_okButton;
@property(nonatomic) __weak NSButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property(nonatomic) __weak XRTopicBrowserOutlineView *topicsList; // @synthesize topicsList=_topicsList;
@property(nonatomic) __weak XRBoxView *optionsBox; // @synthesize optionsBox=_optionsBox;
@property(nonatomic) __weak XRBoxView *browserBox; // @synthesize browserBox=_browserBox;
@property(retain, nonatomic) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
@property(retain, nonatomic) NSObject<XRTopicInterfaceComponent> *currentOptionsBoxComponent; // @synthesize currentOptionsBoxComponent=_currentOptionsBoxComponent;
@property(retain, nonatomic) NSObject<XRTopicInterfaceComponent> *currentBrowserBoxComponent; // @synthesize currentBrowserBoxComponent=_currentBrowserBoxComponent;
@property(retain, nonatomic) XRTopic *singleDropTopic; // @synthesize singleDropTopic=_singleDropTopic;
@property(retain, nonatomic) NSArray *topics; // @synthesize topics=_topics;
- (void).cxx_destruct;
- (void)_endWithCode:(int)arg1;
- (void)setSelectedTopic:(id)arg1;
- (id)selectedTopic;
- (void)topicBrowserView:(id)arg1 filenameDropped:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)outlineView:(id)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)_setSubTopicView:(id)arg1;
- (BOOL)outlineView:(id)arg1 shouldEditTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (double)outlineView:(id)arg1 heightOfRowByItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isGroupItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)_displaySheetOnTargetedObject:(id)arg1 withTopics:(id)arg2;
- (long long)displayModalOnTargetedObject:(id)arg1 withTopics:(id)arg2;
- (void)_cancel:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)okChooser:(id)arg1;
- (void)cancelChooser:(id)arg1;
- (id)result;
- (void)_updateView;
- (void)awakeFromNib;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRTransparentSegmentedCell : NSSegmentedCell
{
}

- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface XRTransparentView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;

@end

@interface XRULRViewController : NSViewController
{
    WebView *_webview;
}

- (void)dealloc;
- (id)init;

@end

@interface XRVerticalSVDragThumb : NSImageView
{
    id <XRVerticalResizeProtocol> _targetNotRetained;
    struct CGPoint _location;
}

- (void)resetCursorRects;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)setTarget:(id)arg1;
- (void)dealloc;

@end

@interface XRVerticallyCenteredTextFieldCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;

@end

@interface XRWatermark : PFTNibView
{
    NSString *_text;
    int _style;
    NSButton *_libraryButton;
    NSButton *_helpButton;
    NSButton *_featureCheckBoxButton;
    NSTextField *_featureCheckboxLabel;
}

+ (void)_setButton:(id)arg1 toColor:(id)arg2;
@property NSTextField *featureCheckboxLabel; // @synthesize featureCheckboxLabel=_featureCheckboxLabel;
@property NSButton *featureCheckBoxButton; // @synthesize featureCheckBoxButton=_featureCheckBoxButton;
@property NSButton *helpButton; // @synthesize helpButton=_helpButton;
@property NSButton *libraryButton; // @synthesize libraryButton=_libraryButton;
- (void)featureCheckboxWasClicked:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (BOOL)isOpaque;
- (int)style;
- (void)setStyle:(int)arg1;
- (void)dealloc;
- (id)initWithText:(id)arg1;

@end

@interface XRZoomToolbarItem : XRToolbarItem
{
    id _trackView;
}

@property(retain) id trackView; // @synthesize trackView=_trackView;
- (void).cxx_destruct;
- (void)disconnectFromContext;
- (void)connectToContext:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface _XRCLIPSDebuggerChooserState : NSObject
{
    NSArray *_debuggerStatesByID;
}

@property(retain, nonatomic) NSArray *debuggerStatesByID; // @synthesize debuggerStatesByID=_debuggerStatesByID;
- (void).cxx_destruct;
- (id)init;

@end

@interface _XRCLIPSDebuggingUIState : NSObject
{
    BOOL _autoRun;
    NSMutableSet *_availableModuleSet;
    NSMutableAttributedString *_consoleAttributedText;
    NSMutableAttributedString *_factAttributedText;
    NSDictionary *_ruleAttributedTextByName;
    NSString *_chosenModuleName;
    NSMutableArray *_availableModuleNames;
}

@property(retain, nonatomic) NSMutableArray *availableModuleNames; // @synthesize availableModuleNames=_availableModuleNames;
@property(retain, nonatomic) NSString *chosenModuleName; // @synthesize chosenModuleName=_chosenModuleName;
@property(nonatomic) BOOL autoRun; // @synthesize autoRun=_autoRun;
@property(retain, nonatomic) NSDictionary *ruleAttributedTextByName; // @synthesize ruleAttributedTextByName=_ruleAttributedTextByName;
@property(retain, nonatomic) NSMutableAttributedString *factAttributedText; // @synthesize factAttributedText=_factAttributedText;
@property(retain, nonatomic) NSMutableAttributedString *consoleAttributedText; // @synthesize consoleAttributedText=_consoleAttributedText;
@property(retain, nonatomic) NSMutableSet *availableModuleSet; // @synthesize availableModuleSet=_availableModuleSet;
- (void).cxx_destruct;
- (id)init;

@end

@interface _XRDebuggerNavigatorItem : NSObject
{
    NSMutableArray *_subItems;
    NSString *_title;
    NSView *_detailView;
    id <NSObject> _representedObject;
}

@property(retain, nonatomic) id <NSObject> representedObject; // @synthesize representedObject=_representedObject;
@property(readonly, nonatomic) NSView *detailView; // @synthesize detailView=_detailView;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSMutableArray *subItems; // @synthesize subItems=_subItems;
- (void).cxx_destruct;
- (BOOL)isHeader;
- (id)initWithTitle:(id)arg1 detailView:(id)arg2 object:(id)arg3;

@end

@interface _XRDebuggerHeaderOnly : _XRDebuggerNavigatorItem
{
}

- (BOOL)isHeader;

@end

@interface _XRDebuggerModelerDetail : NSObject
{
    NSString *_modelerClassName;
    NSString *_debugString;
    NSArray *_tableBindings;
}

@property(retain, nonatomic) NSArray *tableBindings; // @synthesize tableBindings=_tableBindings;
@property(retain, nonatomic) NSString *debugString; // @synthesize debugString=_debugString;
@property(retain, nonatomic) NSString *modelerClassName; // @synthesize modelerClassName=_modelerClassName;
- (void).cxx_destruct;

@end

@interface _XRDebuggerSchemaColumnDetail : NSObject
{
    unsigned long long _columnID;
    NSString *_mnemonic;
    NSString *_engineeringName;
    NSString *_engineeringType;
}

@property(retain, nonatomic) NSString *engineeringType; // @synthesize engineeringType=_engineeringType;
@property(retain, nonatomic) NSString *engineeringName; // @synthesize engineeringName=_engineeringName;
@property(retain, nonatomic) NSString *mnemonic; // @synthesize mnemonic=_mnemonic;
@property(nonatomic) unsigned long long columnID; // @synthesize columnID=_columnID;
- (void).cxx_destruct;

@end

@interface _XRDebuggerSchemaDetails : NSObject <NSCopying>
{
    NSString *_schemaDescription;
    NSArray *_columns;
}

@property(retain, nonatomic) NSArray *columns; // @synthesize columns=_columns;
@property(retain, nonatomic) NSString *schemaDescription; // @synthesize schemaDescription=_schemaDescription;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface _XRDebuggerTableDetail : NSObject
{
    NSNumber *_tableID;
    NSString *_debugString;
    NSString *_access;
    NSString *_visibility;
}

@property(retain, nonatomic) NSString *visibility; // @synthesize visibility=_visibility;
@property(retain, nonatomic) NSString *access; // @synthesize access=_access;
@property(retain, nonatomic) NSString *debugString; // @synthesize debugString=_debugString;
@property(retain, nonatomic) NSNumber *tableID; // @synthesize tableID=_tableID;
- (void).cxx_destruct;

@end

